uint64_t DspLib::addZerosForward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  float *v7;
  uint64_t i;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  float v18;

  if (a2)
  {
    v5 = 0;
    v6 = a5 - 1;
    v7 = (float *)(result + 8);
    for (i = 20 * a2; i; i -= 20)
    {
      if (v5 >= a5)
      {
LABEL_12:
        v14 = v5;
        goto LABEL_13;
      }
      v9 = *(double *)(a4 + 8 * v5);
      if (v6 <= v5 || v9 == 0.0)
      {
        if (v9 != 0.0) {
          goto LABEL_12;
        }
        v14 = (v5 + 1);
        if (v6 == v5 || *(double *)(a4 + 8 * v14) != 0.0)
        {
          v15 = *(double *)(a3 + 8 * v5);
          *(v7 - 2) = 1.0;
          *(float *)&v15 = v15;
          *(v7 - 1) = -*(float *)&v15;
          *v7 = 0.0;
          goto LABEL_13;
        }
        v16 = *(double *)(a3 + 8 * v5);
        v17 = *(double *)(a3 + 8 * v14);
        *(v7 - 2) = 1.0;
        v18 = v16 + v17;
        *(v7 - 1) = -v18;
        v12 = v16 * v17;
      }
      else
      {
        v10 = *(double *)(a3 + 8 * v5);
        *(v7 - 2) = 1.0;
        v11 = v10 * -2.0;
        *(v7 - 1) = v11;
        v12 = v9 * v9 + v10 * v10;
      }
      v13 = v12;
      *v7 = v13;
      v14 = (v5 + 2);
LABEL_13:
      v7 += 5;
      v5 = v14;
    }
  }
  return result;
}

void DspLib::discretizeMZTi(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (a8 | a5 && a2)
  {
    v12 = a1;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    v15 = (long long *)((char *)a1 + 20 * a2);
    double v16 = a9 * 6.28318531;
    double v111 = v16 / 6.0;
    double v17 = 3.0;
    double v18 = 2.0943951;
    double v19 = v16 / 3.0;
    do
    {
      float v20 = *((float *)v12 + 2);
      if (v20 == 0.0) {
        uint64_t v21 = *((float *)v12 + 1) != 0.0;
      }
      else {
        uint64_t v21 = 2;
      }
      float v22 = *((float *)v12 + 3);
      float v23 = *((float *)v12 + 4);
      if (v23 == 0.0) {
        unint64_t v24 = v22 != 0.0;
      }
      else {
        unint64_t v24 = 2;
      }
      LODWORD(v17) = -8388608;
      if (v21)
      {
        uint64_t v25 = v21;
        unsigned int v26 = v14;
        do
        {
          double v18 = *(double *)(a3 + 8 * v26);
          BOOL v27 = v18 >= 0.0 || v18 <= *(float *)&v17;
          *(float *)&double v18 = v18;
          if (!v27) {
            *(float *)&double v17 = *(float *)&v18;
          }
          ++v26;
          --v25;
        }
        while (v25);
      }
      if (v23 != 0.0 || v22 != 0.0)
      {
        double v37 = *(float *)&v17;
        if (v24 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v24;
        }
        double v17 = *(double *)(a6 + 8 * v13);
        if (v17 > v37 && v17 < 0.0)
        {
          BOOL v36 = 1;
LABEL_34:
          double v41 = *(double *)(a7 + 8 * v13);
          double v42 = *(double *)(a6 + 8 * v13) / a9;
          if (v41 != 0.0)
          {
            double v43 = v41 / a9;
            double v32 = exp(v42);
            __double2 v44 = __sincos_stret(v43);
            double cosval = v44.__cosval;
            double sinval = v44.__sinval;
LABEL_36:
            double v17 = cosval * v32;
            double v18 = v17 * -2.0;
            float v45 = v17 * -2.0;
            double v46 = sinval * v32 * (sinval * v32) + v17 * v17;
LABEL_43:
            float v28 = v46;
            goto LABEL_44;
          }
          double v50 = exp(v42);
          double v48 = v50;
          if (v23 == 0.0)
          {
            float v108 = v50;
            float v45 = -v108;
            float v28 = 0.0;
            goto LABEL_44;
          }
          double v49 = exp(*(double *)(a6 + 8 * (v13 + 1)) / a9);
LABEL_42:
          double v17 = v48 + v49;
          *(float *)&double v17 = v48 + v49;
          float v45 = -*(float *)&v17;
          double v46 = v48 * v49;
          goto LABEL_43;
        }
        unint64_t v39 = 0;
        uint64_t v40 = v38 - 1;
        while (v40 != v39)
        {
          double v17 = *(double *)(a6 + 8 * (v13 + 1 + v39++));
          if (v17 > v37 && v17 < 0.0)
          {
            BOOL v36 = v39 < v24;
            goto LABEL_34;
          }
        }
      }
      float v28 = 0.0;
      if (v21)
      {
        double v29 = *(double *)(a4 + 8 * v14);
        double v30 = *(double *)(a3 + 8 * v14) / a9;
        if (v29 != 0.0)
        {
          double v31 = v29 / a9;
          double v32 = exp(v30);
          __double2 v35 = __sincos_stret(v31);
          double cosval = v35.__cosval;
          double sinval = v35.__sinval;
          BOOL v36 = 0;
          goto LABEL_36;
        }
        double v47 = exp(v30);
        double v48 = v47;
        if (v20 == 0.0)
        {
          BOOL v36 = 0;
          float v107 = v47;
          float v45 = -v107;
          goto LABEL_44;
        }
        double v49 = exp(*(double *)(a3 + 8 * (v14 + 1)) / a9);
        BOOL v36 = 0;
        goto LABEL_42;
      }
      BOOL v36 = 0;
      float v45 = 0.0;
LABEL_44:
      long long v51 = *v12;
      int v137 = *((_DWORD *)v12 + 4);
      long long v136 = v51;
      double v117 = DspLib::Biquad::frequencyResponse((float *)&v136, 1, 0.0, v17, v18);
      float64_t v114 = v52;
      uint64_t v132 = 1065353216;
      int v133 = 0;
      float v134 = v45;
      float v135 = v28;
      double v115 = DspLib::Biquad::frequencyResponse((float *)&v132, 0, 0.0, v52, v53);
      double v119 = v54;
      int v55 = *((_DWORD *)v12 + 4);
      long long v130 = *v12;
      int v131 = v55;
      double v116 = DspLib::Biquad::frequencyResponse((float *)&v130, 1, v111, v54, v56);
      float64_t v112 = v57;
      uint64_t v126 = 1065353216;
      int v127 = 0;
      float v128 = v45;
      float v129 = v28;
      double v113 = DspLib::Biquad::frequencyResponse((float *)&v126, 0, 1.04719755, v57, v58);
      double v118 = v59;
      int v60 = *((_DWORD *)v12 + 4);
      long long v124 = *v12;
      int v125 = v60;
      double v62 = DspLib::Biquad::frequencyResponse((float *)&v124, 1, v19, v59, v61);
      double v64 = v63;
      uint64_t v120 = 1065353216;
      int v121 = 0;
      float v122 = v45;
      float v123 = v28;
      double v66 = DspLib::Biquad::frequencyResponse((float *)&v120, 0, 2.0943951, v63, v65);
      v68.f64[0] = v118;
      v68.f64[1] = v119;
      if (v36)
      {
        v69.f64[0] = v112;
        v70.f64[0] = v113;
        v69.f64[1] = v114;
        float64x2_t v71 = vmulq_f64(v69, v68);
        v70.f64[1] = v115;
        float64x2_t v72 = vmulq_f64(v69, v70);
        v73.f64[0] = v116;
        v73.f64[1] = v117;
        v69.f64[0] = -v118;
        v69.f64[1] = -v119;
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v79 = vdivq_f64(_Q2, vmlaq_f64(vmulq_f64(v68, v68), v70, v70));
        float64x2_t v80 = vmulq_f64(vmlaq_f64(v71, v70, v73), v79);
        float64x2_t v81 = vmulq_f64(vmlaq_f64(v72, v69, v73), v79);
        float64x2_t v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v81, v81), v80, v80));
        v80.f64[0] = v64 * v67 + v62 * v66;
        double v83 = v64 * v66 - v62 * v67;
        double v84 = 1.0 / (v67 * v67 + v66 * v66);
        double v85 = v80.f64[0] * v84;
      }
      else
      {
        v86.f64[0] = v116;
        v86.f64[1] = v117;
        v87.f64[0] = v113;
        v88.f64[0] = v112;
        v88.f64[1] = v114;
        v89.f64[0] = -v118;
        v89.f64[1] = -v119;
        v87.f64[1] = v115;
        float64x2_t v90 = vmlaq_f64(vmulq_f64(v88, v89), v86, v87);
        float64x2_t v91 = vmlaq_f64(vmulq_f64(v86, v68), v88, v87);
        float64x2_t v92 = vaddq_f64(v90, vmulq_f64(v91, (float64x2_t)0));
        float64x2_t v93 = vsubq_f64(vmulq_f64(v90, (float64x2_t)0), v91);
        float64x2_t v94 = vmlaq_f64(vmulq_f64(v91, v91), v90, v90);
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v96 = vdivq_f64(_Q2, v94);
        float64x2_t v97 = vmulq_f64(v92, v96);
        float64x2_t v98 = vmulq_f64(v93, v96);
        float64x2_t v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v98, v98), v97, v97));
        v97.f64[0] = v66 * v62 - v67 * v64;
        double v99 = v62 * v67 + v66 * v64;
        float64_t v100 = v97.f64[0] + v99 * 0.0;
        double v83 = v97.f64[0] * 0.0 - v99;
        double v84 = 1.0 / (v99 * v99 + v97.f64[0] * v97.f64[0]);
        double v85 = v100 * v84;
      }
      double v101 = sqrt(v83 * v84 * (v83 * v84) + v85 * v85);
      float32x2_t v102 = vcvt_f32_f64(v82);
      float v103 = v101;
      float v104 = DspLib::Biquad::Design::lengthThreeFIR(v102.f32[1], v102.f32[0], v103, 1.0472);
      if (!v36)
      {
        float v105 = v45 / v104;
        float v106 = v28 / v104;
        float v45 = *(float *)&v17 / v104;
        float v28 = *(float *)&v18 / v104;
        float v104 = 1.0 / v104;
        *(float *)&double v17 = v105;
        *(float *)&double v18 = v106;
      }
      *(float *)v12 = v104;
      *((_DWORD *)v12 + 1) = LODWORD(v17);
      *((_DWORD *)v12 + 2) = LODWORD(v18);
      *((float *)v12 + 3) = v45;
      v13 += v24;
      v14 += v21;
      *((float *)v12 + 4) = v28;
      v12 = (long long *)((char *)v12 + 20);
    }
    while (v12 != v15);
  }
}

float32_t DspLib::configureGain(float32x2_t *a1, unint64_t a2, float a3)
{
  if (a2 >= 2)
  {
    unsigned int v3 = 2;
    uint64_t v4 = 1;
    do
    {
      v5 = (float32x2_t *)((char *)a1 + 20 * v4);
      a3 = a3 * COERCE_FLOAT(*v5);
      float64x2_t v6 = vcvtq_f64_f32(*v5);
      float32x2_t *v5 = vcvt_f32_f64(vmulq_n_f64(v6, 1.0 / v6.f64[0]));
      *(float *)v6.f64 = 1.0 / v6.f64[0] * v5[1].f32[0];
      v5[1].i32[0] = LODWORD(v6.f64[0]);
      uint64_t v4 = v3;
    }
    while (a2 > v3++);
  }
  *a1 = vmul_n_f32(*a1, a3);
  float32_t result = a3 * a1[1].f32[0];
  a1[1].f32[0] = result;
  return result;
}

void DspLib::sPolynomialToBiquadCoefficients(double *a1, double a2, uint64_t a3, DspLib *a4, const double *a5, uint64_t *a6, int a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = (DspLib *)MEMORY[0x1F4188790](a1);
  v15 = (__CLPK_doublereal *)&v38 - v14;
  double v16 = &v15[(uint64_t)v42.imagp];
  v42.realp = v16;
  unint64_t v18 = DspLib::roots(v13, v17, v15, v42);
  MEMORY[0x1F4188790](v18);
  float v20 = (__CLPK_doublereal *)&v38 - v19;
  uint64_t v21 = &v20[(uint64_t)v43.imagp];
  v43.realp = v21;
  unint64_t v22 = DspLib::roots(a4, a5, v20, v43);
  unint64_t v23 = v22;
  if (a7)
  {
    unint64_t v24 = (v22 + 1) >> 1;
    if (v24 <= (v18 + 1) >> 1) {
      unint64_t v24 = (v18 + 1) >> 1;
    }
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = v24;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v25);
    uint64_t v27 = *a6;
    uint64_t v28 = a6[1];
    if (*a6 != v28)
    {
      double v26 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v27 + 16) = 0;
        *(_OWORD *)uint64_t v27 = DspLib::Biquad::kBypassSection;
        v27 += 20;
      }
      while (v27 != v28);
    }
    v41.realp = v16;
    v41.imagp = (double *)v18;
    v44.realp = v21;
    v44.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v41, (DspLib *)v20, v44, v26);
    if (v23 | v18)
    {
      DspLib::addZerosForward(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    }
    DspLib::discretizeMZTi((long long *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a6[1] = *a6;
    double v29 = a6 + 1;
    unint64_t v30 = (v22 + 1) >> 1;
    if (v30 <= (v18 + 1) >> 1) {
      unint64_t v30 = (v18 + 1) >> 1;
    }
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = v30;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v31);
    DspLib::addZeros(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    double v32 = (float *)*a6;
    if (*v29 != *a6)
    {
      uint64_t v33 = 20 * ((*v29 - *a6) / 20);
      do
      {
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v32, a2);
        v32 += 5;
        v33 -= 20;
      }
      while (v33);
    }
  }
  float v34 = *a1 / *(double *)a4;
  DspLib::configureGain((float32x2_t *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), v34);
  uint64_t v36 = *a6;
  for (uint64_t i = a6[1]; v36 != i; v36 += 20)
  {
    long long v37 = *(_OWORD *)v36;
    int v39 = *(_DWORD *)(v36 + 16);
    long long v38 = v37;
    if ((DspLib::Biquad::validate((uint64_t)&v38) & 1) == 0)
    {
      *(_DWORD *)(v36 + 16) = 0;
      *(_OWORD *)uint64_t v36 = DspLib::Biquad::kBypassSection;
    }
  }
}

void std::vector<DspLib::Biquad::SDomainSection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::Biquad::SDomainSection>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

uint64_t *DspLib::addZeros(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    unsigned int v6 = 0;
    unint64_t v7 = a4 - 1;
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if (v6 < a4)
      {
        unint64_t v13 = v7 - v6;
        double v14 = *(double *)(a3 + 8 * v13);
        if (v7 > v6 && v14 != 0.0)
        {
          double v15 = *(double *)(a2 + 8 * v13);
          float v16 = v14 * v14 + v15 * v15;
          *(float *)uint64_t v4 = v16;
          float v17 = v15 * -2.0;
          goto LABEL_7;
        }
        if (v14 == 0.0)
        {
          if (v7 != v6 && *(double *)(a3 + 8 * (v13 - 1)) == 0.0)
          {
            double v21 = *(double *)(a2 + 8 * v13);
            double v22 = *(double *)(a2 + 8 * (v13 - 1));
            float v23 = v21 * v22;
            *(float *)uint64_t v4 = v23;
            *(float *)&double v21 = v21 + v22;
            float v17 = -*(float *)&v21;
LABEL_7:
            unint64_t v18 = __PAIR64__(HIDWORD(_D1), LODWORD(v17));
            int v19 = 2;
          }
          else
          {
            float v20 = *(double *)(a2 + 8 * v13);
            *(float *)uint64_t v4 = -v20;
            int v19 = 1;
            unint64_t v18 = 1065353216;
          }
          *(void *)(v4 + 4) = v18;
          v6 += v19;
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t *DspLib::addPoles(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a4 - 1;
    do
    {
      if (v6 >= a4)
      {
LABEL_12:
        uint64_t v11 = v6;
        goto LABEL_13;
      }
      double v8 = *(double *)(a3 + 8 * v6);
      if (v7 <= v6 || v8 == 0.0)
      {
        if (v8 != 0.0) {
          goto LABEL_12;
        }
        uint64_t v11 = (v6 + 1);
        if (v7 == v6 || *(double *)(a3 + 8 * v11) != 0.0)
        {
          float v12 = *(double *)(a2 + 8 * v6);
          *(float *)(v4 + 12) = -v12;
          *(void *)(v4 + 16) = 1065353216;
          goto LABEL_13;
        }
        double v13 = *(double *)(a2 + 8 * v6);
        double v14 = *(double *)(a2 + 8 * v11);
        float v15 = v13 * v14;
        *(float *)&double v13 = v13 + v14;
        *(float *)(v4 + 12) = v15;
        *(float *)(v4 + 16) = -*(float *)&v13;
      }
      else
      {
        double v9 = *(double *)(a2 + 8 * v6);
        float v10 = v8 * v8 + v9 * v9;
        *(float *)&double v9 = v9 * -2.0;
        *(float *)(v4 + 12) = v10;
        *(_DWORD *)(v4 + 16) = LODWORD(v9);
      }
      *(_DWORD *)(v4 + 20) = 1065353216;
      uint64_t v11 = (v6 + 2);
LABEL_13:
      v4 += 24;
      uint64_t v6 = v11;
    }
    while (v4 != v5);
  }
  return result;
}

void DspLib::discretizeMZTiNew(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (a8 | a5 && a2)
  {
    float v12 = a1;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    float v15 = (long long *)((char *)a1 + 20 * a2);
    double v16 = a9 * 6.28318531;
    double v111 = v16 / 6.0;
    double v17 = 3.0;
    double v18 = 2.09439516;
    double v19 = v16 / 3.0;
    do
    {
      float v20 = *((float *)v12 + 2);
      if (v20 == 0.0) {
        uint64_t v21 = *((float *)v12 + 1) != 0.0;
      }
      else {
        uint64_t v21 = 2;
      }
      float v22 = *((float *)v12 + 3);
      float v23 = *((float *)v12 + 4);
      if (v23 == 0.0) {
        unint64_t v24 = v22 != 0.0;
      }
      else {
        unint64_t v24 = 2;
      }
      LODWORD(v17) = -8388608;
      if (v21)
      {
        uint64_t v25 = v21;
        unsigned int v26 = v14;
        do
        {
          double v18 = *(double *)(a3 + 8 * v26);
          BOOL v27 = v18 >= -9.99999996e-13 || v18 <= *(float *)&v17;
          *(float *)&double v18 = v18;
          if (!v27) {
            *(float *)&double v17 = *(float *)&v18;
          }
          ++v26;
          --v25;
        }
        while (v25);
      }
      if (v23 != 0.0 || v22 != 0.0)
      {
        double v37 = *(float *)&v17;
        if (v24 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v24;
        }
        double v17 = *(double *)(a6 + 8 * v13);
        if (v17 > v37 && v17 < -9.99999996e-13)
        {
          BOOL v36 = 1;
LABEL_34:
          double v41 = *(double *)(a7 + 8 * v13);
          double v42 = *(double *)(a6 + 8 * v13) / a9;
          if (v41 != 0.0)
          {
            double v43 = v41 / a9;
            double v32 = exp(v42);
            __double2 v44 = __sincos_stret(v43);
            double cosval = v44.__cosval;
            double sinval = v44.__sinval;
LABEL_36:
            double v17 = cosval * v32;
            double v18 = v17 * -2.0;
            float v45 = v17 * -2.0;
            double v46 = sinval * v32 * (sinval * v32) + v17 * v17;
LABEL_43:
            float v28 = v46;
            goto LABEL_44;
          }
          double v50 = exp(v42);
          double v48 = v50;
          if (v23 == 0.0)
          {
            float v108 = v50;
            float v45 = -v108;
            float v28 = 0.0;
            goto LABEL_44;
          }
          double v49 = exp(*(double *)(a6 + 8 * (v13 + 1)) / a9);
LABEL_42:
          double v17 = v48 + v49;
          *(float *)&double v17 = v48 + v49;
          float v45 = -*(float *)&v17;
          double v46 = v48 * v49;
          goto LABEL_43;
        }
        unint64_t v39 = 0;
        uint64_t v40 = v38 - 1;
        while (v40 != v39)
        {
          double v17 = *(double *)(a6 + 8 * (v13 + 1 + v39++));
          if (v17 > v37 && v17 < -9.99999996e-13)
          {
            BOOL v36 = v39 < v24;
            goto LABEL_34;
          }
        }
      }
      float v28 = 0.0;
      if (v21)
      {
        double v29 = *(double *)(a4 + 8 * v14);
        double v30 = *(double *)(a3 + 8 * v14) / a9;
        if (v29 != 0.0)
        {
          double v31 = v29 / a9;
          double v32 = exp(v30);
          __double2 v35 = __sincos_stret(v31);
          double cosval = v35.__cosval;
          double sinval = v35.__sinval;
          BOOL v36 = 0;
          goto LABEL_36;
        }
        double v47 = exp(v30);
        double v48 = v47;
        if (v20 == 0.0)
        {
          BOOL v36 = 0;
          float v107 = v47;
          float v45 = -v107;
          goto LABEL_44;
        }
        double v49 = exp(*(double *)(a3 + 8 * (v14 + 1)) / a9);
        BOOL v36 = 0;
        goto LABEL_42;
      }
      BOOL v36 = 0;
      float v45 = 0.0;
LABEL_44:
      long long v51 = *v12;
      int v137 = *((_DWORD *)v12 + 4);
      long long v136 = v51;
      double v117 = DspLib::Biquad::frequencyResponse((float *)&v136, 1, 0.0, v17, v18);
      float64_t v114 = v52;
      uint64_t v132 = 1065353216;
      int v133 = 0;
      float v134 = v45;
      float v135 = v28;
      double v115 = DspLib::Biquad::frequencyResponse((float *)&v132, 0, 0.0, v52, v53);
      double v119 = v54;
      int v55 = *((_DWORD *)v12 + 4);
      long long v130 = *v12;
      int v131 = v55;
      double v116 = DspLib::Biquad::frequencyResponse((float *)&v130, 1, v111, v54, v56);
      float64_t v112 = v57;
      uint64_t v126 = 1065353216;
      int v127 = 0;
      float v128 = v45;
      float v129 = v28;
      double v113 = DspLib::Biquad::frequencyResponse((float *)&v126, 0, 1.04719755, v57, v58);
      double v118 = v59;
      int v60 = *((_DWORD *)v12 + 4);
      long long v124 = *v12;
      int v125 = v60;
      double v62 = DspLib::Biquad::frequencyResponse((float *)&v124, 1, v19, v59, v61);
      double v64 = v63;
      uint64_t v120 = 1065353216;
      int v121 = 0;
      float v122 = v45;
      float v123 = v28;
      double v66 = DspLib::Biquad::frequencyResponse((float *)&v120, 0, 2.0943951, v63, v65);
      v68.f64[0] = v118;
      v68.f64[1] = v119;
      if (v36)
      {
        v69.f64[0] = v112;
        v70.f64[0] = v113;
        v69.f64[1] = v114;
        float64x2_t v71 = vmulq_f64(v69, v68);
        v70.f64[1] = v115;
        float64x2_t v72 = vmulq_f64(v69, v70);
        v73.f64[0] = v116;
        v73.f64[1] = v117;
        v69.f64[0] = -v118;
        v69.f64[1] = -v119;
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v79 = vdivq_f64(_Q2, vmlaq_f64(vmulq_f64(v68, v68), v70, v70));
        float64x2_t v80 = vmulq_f64(vmlaq_f64(v71, v70, v73), v79);
        float64x2_t v81 = vmulq_f64(vmlaq_f64(v72, v69, v73), v79);
        float64x2_t v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v81, v81), v80, v80));
        v80.f64[0] = v64 * v67 + v62 * v66;
        double v83 = v64 * v66 - v62 * v67;
        double v84 = 1.0 / (v67 * v67 + v66 * v66);
        double v85 = v80.f64[0] * v84;
      }
      else
      {
        v86.f64[0] = v116;
        v86.f64[1] = v117;
        v87.f64[0] = v113;
        v88.f64[0] = v112;
        v88.f64[1] = v114;
        v89.f64[0] = -v118;
        v89.f64[1] = -v119;
        v87.f64[1] = v115;
        float64x2_t v90 = vmlaq_f64(vmulq_f64(v88, v89), v86, v87);
        float64x2_t v91 = vmlaq_f64(vmulq_f64(v86, v68), v88, v87);
        float64x2_t v92 = vaddq_f64(v90, vmulq_f64(v91, (float64x2_t)0));
        float64x2_t v93 = vsubq_f64(vmulq_f64(v90, (float64x2_t)0), v91);
        float64x2_t v94 = vmlaq_f64(vmulq_f64(v91, v91), v90, v90);
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v96 = vdivq_f64(_Q2, v94);
        float64x2_t v97 = vmulq_f64(v92, v96);
        float64x2_t v98 = vmulq_f64(v93, v96);
        float64x2_t v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v98, v98), v97, v97));
        v97.f64[0] = v66 * v62 - v67 * v64;
        double v99 = v62 * v67 + v66 * v64;
        float64_t v100 = v97.f64[0] + v99 * 0.0;
        double v83 = v97.f64[0] * 0.0 - v99;
        double v84 = 1.0 / (v99 * v99 + v97.f64[0] * v97.f64[0]);
        double v85 = v100 * v84;
      }
      double v101 = sqrt(v83 * v84 * (v83 * v84) + v85 * v85);
      float32x2_t v102 = vcvt_f32_f64(v82);
      float v103 = v101;
      float v104 = DspLib::Biquad::Design::lengthThreeFIR(v102.f32[1], v102.f32[0], v103, 1.0472);
      if (!v36)
      {
        float v105 = v45 / v104;
        float v106 = v28 / v104;
        float v45 = *(float *)&v17 / v104;
        float v28 = *(float *)&v18 / v104;
        float v104 = 1.0 / v104;
        *(float *)&double v17 = v105;
        *(float *)&double v18 = v106;
      }
      *(float *)float v12 = v104;
      *((_DWORD *)v12 + 1) = LODWORD(v17);
      *((_DWORD *)v12 + 2) = LODWORD(v18);
      *((float *)v12 + 3) = v45;
      v13 += v24;
      v14 += v21;
      *((float *)v12 + 4) = v28;
      float v12 = (long long *)((char *)v12 + 20);
    }
    while (v12 != v15);
  }
}

void DspLib::sPolynomialToBiquadCoefficients(uint64_t a1, double a2, uint64_t a3, DspLib *a4, const double *a5, uint64_t *a6, uint64_t *a7, int a8)
{
  double v52 = a4;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = (DspLib *)MEMORY[0x1F4188790](a1);
  float v15 = (__CLPK_doublereal *)&(&v51)[-v14];
  double v16 = &v15[(uint64_t)v63.imagp];
  long long v51 = (double *)v13;
  v63.realp = v16;
  unint64_t v18 = DspLib::roots(v13, v17, v15, v63);
  MEMORY[0x1F4188790](v18);
  float v20 = (__CLPK_doublereal *)&(&v51)[-v19];
  uint64_t v21 = &v20[(uint64_t)v64.imagp];
  v64.realp = v21;
  unint64_t v22 = DspLib::roots(v52, a5, v20, v64);
  unint64_t v23 = v22;
  if (v22)
  {
    uint64_t v24 = 0;
    do
    {
      double v25 = v20[v24];
      if (v25 > 0.0) {
        double v25 = -v25;
      }
      if (v25 == 0.0) {
        double v25 = -0.000000100000001;
      }
      v20[v24++] = v25;
    }
    while (v22 > v24);
  }
  if (a8)
  {
    unint64_t v26 = (v22 + 1) >> 1;
    if (v26 <= (v18 + 1) >> 1) {
      unint64_t v26 = (v18 + 1) >> 1;
    }
    if (v26 <= 1) {
      unint64_t v27 = 1;
    }
    else {
      unint64_t v27 = v26;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v27);
    uint64_t v29 = *a7;
    uint64_t v30 = a7[1];
    if (*a7 != v30)
    {
      double v28 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v29 + 16) = 0;
        *(_OWORD *)uint64_t v29 = DspLib::Biquad::kBypassSection;
        v29 += 20;
      }
      while (v29 != v30);
    }
    v62.realp = v16;
    v62.imagp = (double *)v18;
    v65.realp = v21;
    v65.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v62, (DspLib *)v20, v65, v28);
    uint64_t v31 = *a7;
    if (v23 | v18)
    {
      DspLib::addZerosForward(v31, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - v31) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a7, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
      if (v18 == 2 && v23 == 4)
      {
        double v32 = fabs(*v16);
        uint64_t v31 = *a7;
        if (vabdd_f64(v32, fabs(*v21)) > vabdd_f64(v32, fabs(v21[2])))
        {
          *(void *)(v31 + 20) = *(void *)v31;
          *(_DWORD *)(v31 + 28) = *(_DWORD *)(v31 + 8);
          *(void *)uint64_t v31 = 1065353216;
          *(_DWORD *)(v31 + 8) = 0;
        }
      }
      else
      {
        uint64_t v31 = *a7;
      }
    }
    DspLib::discretizeMZTiNew((long long *)v31, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - v31) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a7[1] = *a7;
    unint64_t v33 = (v22 + 1) >> 1;
    if (v33 <= (v18 + 1) >> 1) {
      unint64_t v33 = (v18 + 1) >> 1;
    }
    if (v33 <= 1) {
      unint64_t v34 = 1;
    }
    else {
      unint64_t v34 = v33;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v34);
    a6[1] = *a6;
    std::vector<DspLib::Biquad::SDomainSection>::resize((uint64_t)a6, v34);
    DspLib::addZeros(a6, (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(a6, (uint64_t)v20, (uint64_t)v21, v23);
    uint64_t v35 = *a6;
    if (a6[1] != *a6)
    {
      uint64_t v36 = 0;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3);
      uint64_t v38 = *a7;
      unsigned int v39 = 1;
      do
      {
        uint64_t v40 = v35 + 24 * v36;
        long long v41 = *(_OWORD *)v40;
        uint64_t v58 = *(void *)(v40 + 16);
        long long v57 = v41;
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)&v57, (uint64_t)&v59, a2);
        uint64_t v42 = v38 + 20 * v36;
        long long v43 = v59;
        *(_DWORD *)(v42 + 16) = v60;
        *(_OWORD *)uint64_t v42 = v43;
        uint64_t v36 = v39;
      }
      while (v37 > v39++);
    }
  }
  float v45 = *v51 / *(double *)v52;
  DspLib::configureGain((float32x2_t *)*a7, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 2), v45);
  uint64_t v47 = *a7;
  uint64_t v46 = a7[1];
  if (v47 != v46)
  {
    float32x2_t v48 = (float32x2_t)vdup_n_s32(0x3F7FFF58u);
    do
    {
      long long v49 = *(_OWORD *)v47;
      int v56 = *(_DWORD *)(v47 + 16);
      long long v55 = v49;
      if ((DspLib::Biquad::validate((uint64_t)&v55) & 1) == 0)
      {
        *(float32x2_t *)(v47 + 12) = vmul_f32(*(float32x2_t *)(v47 + 12), v48);
        long long v50 = *(_OWORD *)v47;
        int v54 = *(_DWORD *)(v47 + 16);
        long long v53 = v50;
        if ((DspLib::Biquad::validate((uint64_t)&v53) & 1) == 0)
        {
          *(_DWORD *)(v47 + 16) = 0;
          *(_OWORD *)uint64_t v47 = DspLib::Biquad::kBypassSection;
        }
      }
      v47 += 20;
    }
    while (v47 != v46);
  }
}

uint64_t DspLib::balanceMatrix(DspLib *this, double *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  __CLPK_integer __lda = (int)a2;
  *(void *)__ilo = 0xFFFFFFFEFFFFFFFFLL;
  char __job = 83;
  MEMORY[0x1F4188790](this);
  HIDWORD(v5) = 0;
  dgebal_(&__job, &__lda, v3, &__lda, __ilo, &__ilo[1], (__CLPK_doublereal *)((char *)&v5 - v2), (__CLPK_integer *)&v5 + 1);
  return *(void *)__ilo;
}

uint64_t DspLib::partitionRealRootToEnd(DspLib *this, DSPDoubleSplitComplex a2)
{
  uint64_t v2 = (uint64_t)a2.imagp - 1;
  if ((uint64_t)a2.imagp - 1 < 0) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = 8 * (uint64_t)a2.imagp - 8;
  unint64_t v7 = (int8x16_t *)((char *)a2.realp + v6);
  double v8 = (int8x16_t *)((char *)this + v6);
  do
  {
    if (a2.realp[v2] == 0.0)
    {
      if (v2 < (unint64_t)a2.imagp - result - 1)
      {
        uint64_t v9 = result + v4;
        float v10 = v8;
        uint64_t v11 = v7;
        do
        {
          *float v10 = vextq_s8(*v10, *v10, 8uLL);
          float v10 = (int8x16_t *)((char *)v10 + 8);
          *uint64_t v11 = vextq_s8(*v11, *v11, 8uLL);
          uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
        }
        while (!__CFADD__(v9++, 1));
      }
      ++result;
    }
    unint64_t v7 = (int8x16_t *)((char *)v7 - 8);
    --v4;
    double v8 = (int8x16_t *)((char *)v8 - 8);
  }
  while (v2-- > 0);
  return result;
}

void std::vector<DspLib::Biquad::SDomainSection>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      unsigned int v13 = &v7[3 * a2];
      do
      {
        *(_OWORD *)unint64_t v7 = xmmword_1BB873C90;
        v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      unint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    float v15 = &v14[24 * a2];
    double v16 = v14;
    do
    {
      *(_OWORD *)double v16 = xmmword_1BB873C90;
      *((void *)v16 + 2) = 0;
      v16 += 24;
    }
    while (v16 != v15);
    double v17 = &v12[24 * v11];
    uint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

double DspLib::PeakPowerGuard::Algorithm::Algorithm(DspLib::PeakPowerGuard::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib14PeakPowerGuard10ParametersL8kDefaultE_, 0x2FuLL, (uint64_t)&_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMinimumE_, 47, (uint64_t)&_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMaximumE_, 47);
  *(void *)uint64_t v1 = &unk_1F14A72F8;
  *(_WORD *)(v1 + 216) = 1;
  *(void *)(v1 + 228) = 0;
  *(void *)(v1 + 220) = 0;
  *(_OWORD *)(v1 + 236) = xmmword_1BB873CC0;
  *(void *)(v1 + 252) = 1065353216;
  *(void *)(v1 + 272) = 0;
  *(void *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 288) = xmmword_1BB873CD0;
  *(void *)(v1 + 304) = 1065353216;
  *(void *)(v1 + 328) = 0;
  *(void *)(v1 + 336) = 0;
  *(void *)(v1 + 320) = 0;
  *(_OWORD *)(v1 + 344) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)(v1 + 360) = unk_1BB8739E8;
  *(_DWORD *)(v1 + 472) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(void *)(v1 + 480) = 0;
  *(_OWORD *)(v1 + 488) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)(v1 + 504) = unk_1BB8739E8;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_DWORD *)(v1 + 616) = 0;
  *(void *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 632) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)(v1 + 648) = unk_1BB8739E8;
  *(_DWORD *)(v1 + 760) = 0;
  *(_OWORD *)(v1 + 744) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 664) = 0u;
  *(void *)(v1 + 768) = 0;
  *(_OWORD *)(v1 + 792) = unk_1BB8739E8;
  *(_OWORD *)(v1 + 776) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 840) = 0u;
  *(_OWORD *)(v1 + 856) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(void *)(v1 + 912) = 0;
  *(_OWORD *)(v1 + 936) = unk_1BB8739E8;
  *(_OWORD *)(v1 + 920) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_OWORD *)(v1 + 1000) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_DWORD *)(v1 + 1048) = 0;
  *(void *)(v1 + 1056) = 0;
  *(_OWORD *)(v1 + 1080) = unk_1BB8739E8;
  *(_OWORD *)(v1 + 1064) = DspLib::AudioMeter::Parameters::kDefault;
  *(_DWORD *)(v1 + 1192) = 0;
  *(_OWORD *)(v1 + 1176) = 0u;
  *(_OWORD *)(v1 + 1160) = 0u;
  *(_OWORD *)(v1 + 1144) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1096) = 0u;
  *(void *)(v1 + 1200) = 0;
  *(_OWORD *)(v1 + 1224) = unk_1BB8739E8;
  *(_OWORD *)(v1 + 1208) = DspLib::AudioMeter::Parameters::kDefault;
  *(_DWORD *)(v1 + 1336) = 0;
  *(_OWORD *)(v1 + 1320) = 0u;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_OWORD *)(v1 + 1256) = 0u;
  *(_OWORD *)(v1 + 1240) = 0u;
  *(_OWORD *)(v1 + 1360) = 0u;
  *(_OWORD *)(v1 + 1344) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v1 + 1376) = _Q1;
  *(_OWORD *)(v1 + 1392) = _Q1;
  *(_DWORD *)(v1 + 1408) = 1065353216;
  *(_OWORD *)(v1 + 1424) = _Q1;
  *(void *)(v1 + 1440) = 0;
  *(_DWORD *)(v1 + 1448) = 0;
  *(_OWORD *)(v1 + 1472) = 0u;
  *(_OWORD *)(v1 + 1456) = 0u;
  *(_OWORD *)(v1 + 1488) = _Q1;
  *(_OWORD *)(v1 + 1504) = _Q1;
  *(_DWORD *)(v1 + 1520) = 1065353216;
  *(_OWORD *)(v1 + 1536) = _Q1;
  *(void *)(v1 + 1784) = 0;
  *(_DWORD *)(v1 + 1792) = 0;
  *(_OWORD *)(v1 + 1761) = 0u;
  *(_OWORD *)(v1 + 1736) = 0u;
  *(_OWORD *)(v1 + 1752) = 0u;
  *(_OWORD *)(v1 + 1704) = 0u;
  *(_OWORD *)(v1 + 1720) = 0u;
  *(_OWORD *)(v1 + 1672) = 0u;
  *(_OWORD *)(v1 + 1688) = 0u;
  *(_OWORD *)(v1 + 1640) = 0u;
  *(_OWORD *)(v1 + 1656) = 0u;
  *(_OWORD *)(v1 + 1608) = 0u;
  *(_OWORD *)(v1 + 1624) = 0u;
  *(_OWORD *)(v1 + 1576) = 0u;
  *(_OWORD *)(v1 + 1592) = 0u;
  *(void *)(v1 + 1800) = 1;
  *(_DWORD *)(v1 + 1808) = 1;
  *(void *)(v1 + 1896) = 0;
  *(void *)(v1 + 1888) = 0;
  *(void *)(v1 + 1904) = 0;
  *(_DWORD *)(v1 + 1880) = 0;
  *(_OWORD *)(v1 + 1864) = 0u;
  *(_OWORD *)(v1 + 1848) = 0u;
  *(_OWORD *)(v1 + 1832) = 0u;
  *(_OWORD *)(v1 + 1816) = 0u;
  *(_OWORD *)(v1 + 1912) = xmmword_1BB873AA0;
  *(_OWORD *)(v1 + 1928) = xmmword_1BB873AA0;
  *(_DWORD *)(v1 + 1944) = 1;
  *(_DWORD *)(v1 + 2016) = 0;
  *(_OWORD *)(v1 + 2000) = 0u;
  *(_OWORD *)(v1 + 1984) = 0u;
  *(_OWORD *)(v1 + 1968) = 0u;
  *(_OWORD *)(v1 + 1952) = 0u;
  *(_OWORD *)(v1 + 2632) = 0u;
  *(_OWORD *)(v1 + 2616) = 0u;
  *(_OWORD *)(v1 + 2600) = 0u;
  *(_OWORD *)(v1 + 2584) = 0u;
  *(_OWORD *)(v1 + 2568) = 0u;
  *(_OWORD *)(v1 + 2552) = 0u;
  *(unsigned char *)(v1 + 2440) = 0;
  *(_OWORD *)(v1 + 2408) = 0u;
  *(_OWORD *)(v1 + 2424) = 0u;
  *(_OWORD *)(v1 + 2376) = 0u;
  *(_OWORD *)(v1 + 2392) = 0u;
  *(_OWORD *)(v1 + 2344) = 0u;
  *(_OWORD *)(v1 + 2360) = 0u;
  *(_OWORD *)(v1 + 2312) = 0u;
  *(_OWORD *)(v1 + 2328) = 0u;
  *(_OWORD *)(v1 + 2280) = 0u;
  *(_OWORD *)(v1 + 2296) = 0u;
  *(_OWORD *)(v1 + 2248) = 0u;
  *(_OWORD *)(v1 + 2264) = 0u;
  *(_OWORD *)(v1 + 2216) = 0u;
  *(_OWORD *)(v1 + 2232) = 0u;
  *(_OWORD *)(v1 + 2184) = 0u;
  *(_OWORD *)(v1 + 2200) = 0u;
  *(_OWORD *)(v1 + 2152) = 0u;
  *(_OWORD *)(v1 + 2168) = 0u;
  *(_OWORD *)(v1 + 2120) = 0u;
  *(_OWORD *)(v1 + 2136) = 0u;
  *(_OWORD *)(v1 + 2088) = 0u;
  *(_OWORD *)(v1 + 2104) = 0u;
  *(_OWORD *)(v1 + 2056) = 0u;
  *(_OWORD *)(v1 + 2072) = 0u;
  *(_OWORD *)(v1 + 2024) = 0u;
  *(_OWORD *)(v1 + 2040) = 0u;
  *(unsigned char *)(v1 + 2544) = 0;
  *(_OWORD *)(v1 + 2528) = 0u;
  *(_OWORD *)(v1 + 2512) = 0u;
  *(_OWORD *)(v1 + 2496) = 0u;
  *(_OWORD *)(v1 + 2480) = 0u;
  *(_OWORD *)(v1 + 2464) = 0u;
  *(_OWORD *)(v1 + 2448) = 0u;
  return result;
}

uint64_t DspLib::PeakPowerGuard::Algorithm::initialize(DspLib::PeakPowerGuard::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    *((unsigned char *)this + 8) = 1;
    std::vector<std::vector<float>>::resize((uint64_t *)this + 232, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 249, 1uLL);
    for (uint64_t i = 1576; i != 1648; i += 24)
    {
      unint64_t v6 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize((uint64_t)this + i, v6);
    }
    do
    {
      unint64_t v7 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize((uint64_t)this + i, v7);
      i += 24;
    }
    while (i != 1744);
    uint64_t v8 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 216))(this);
    DspLib::FIR::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2048), *((void **)this + 257), *((void *)this + 260), v8);
    unsigned int v9 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 302, v9);
    double v10 = (*(double (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2440), 1uLL, v10, 1uLL);
    double v11 = (*(double (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2544), 1uLL, v11, 1uLL);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::PeakPowerGuard::Algorithm::uninitialize(DspLib::PeakPowerGuard::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 480));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 624));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 768));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 912));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1056));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1200));
  uint64_t v2 = (void *)((char *)this + 1576);
  BOOL v3 = (void *)((char *)this + 1648);
  do
  {
    v2[1] = *v2;
    v2 += 3;
  }
  while (v2 != v3);
  do
  {
    v3[1] = *v3;
    v3 += 3;
  }
  while (v3 != (void *)((char *)this + 1744));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 232, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 249, 0);
  DspLib::FIR::uninitialize((void *)this + 256);
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 264, 0, 0);
  uint64_t v4 = (uint64_t *)((char *)this + 2168);
  uint64_t v5 = (uint64_t *)((char *)this + 2264);
  do
  {
    v4[1] = *v4;
    v4 += 3;
  }
  while (v4 != v5);
  DspLib::MultiMovingAverage::setLengths(v5, 0, 0);
  unint64_t v6 = (uint64_t *)((char *)this + 2320);
  unint64_t v7 = (uint64_t *)((char *)this + 2416);
  do
  {
    v6[1] = *v6;
    v6 += 3;
  }
  while (v6 != v7);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100](v7);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2440));

  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2544));
}

void DspLib::PeakPowerGuard::Algorithm::reset(DspLib::PeakPowerGuard::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 480));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 624));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 768));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 912));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1056));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1200));
    DspLib::clear((float *)this + 340, 4uLL);
    DspLib::clear((float *)this + 336, 4uLL);
    DspLib::fill((float *)this + 344, 4uLL, 1.0);
    DspLib::fill((float *)this + 348, 4uLL, 1.0);
    DspLib::fill((float *)this + 356, 4uLL, 1.0);
    *((_DWORD *)this + 352) = 1065353216;
    *((void *)this + 180) = 0;
    *((_DWORD *)this + 362) = 0;
    DspLib::clear((float *)this + 364, 4uLL);
    DspLib::clear((float *)this + 368, 4uLL);
    DspLib::fill((float *)this + 372, 4uLL, 1.0);
    DspLib::fill((float *)this + 376, 4uLL, 1.0);
    DspLib::fill((float *)this + 384, 4uLL, 1.0);
    uint64_t v2 = 0;
    *((_DWORD *)this + 380) = 1065353216;
    *((_DWORD *)this + 62) = 1065353216;
    *((_DWORD *)this + 76) = 1065353216;
    do
    {
      *(_DWORD *)((char *)this + v2 + 1916) = 0;
      v2 += 8;
    }
    while (v2 != 32);
    *((_DWORD *)this + 451) = 0;
    uint64_t v3 = *((void *)this + 232);
    uint64_t v4 = *((void *)this + 233);
    while (v3 != v4)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (*(void *)v3 != v5) {
        bzero(*(void **)v3, (v5 - *(void *)v3) & 0xFFFFFFFFFFFFFFFCLL);
      }
      v3 += 24;
    }
    *((_DWORD *)this + 470) = 0;
    uint64_t v6 = *((void *)this + 249);
    uint64_t v7 = *((void *)this + 250);
    while (v6 != v7)
    {
      uint64_t v8 = *(void *)(v6 + 8);
      if (*(void *)v6 != v8) {
        bzero(*(void **)v6, (v8 - *(void *)v6) & 0xFFFFFFFFFFFFFFFCLL);
      }
      v6 += 24;
    }
    *((_DWORD *)this + 504) = 0;
    DspLib::clear(*((float **)this + 261), (uint64_t)(*((void *)this + 262) - *((void *)this + 261)) >> 2);
    DspLib::Biquad::SetupWrapper::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2488));
    DspLib::Biquad::SetupWrapper::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2592));
    uint64_t v9 = *((void *)this + 264);
    uint64_t v10 = *((void *)this + 265);
    while (v9 != v10)
    {
      *(_DWORD *)(v9 + 8) = 0;
      v9 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2136));
    uint64_t v11 = *((void *)this + 283);
    uint64_t v12 = *((void *)this + 284);
    while (v11 != v12)
    {
      *(_DWORD *)(v11 + 8) = 0;
      v11 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2288));
    unsigned int v13 = (DspLib::CircularDelay *)*((void *)this + 302);
    uint64_t v14 = (DspLib::CircularDelay *)*((void *)this + 303);
    while (v13 != v14)
    {
      DspLib::CircularDelay::reset(v13);
      unsigned int v13 = (DspLib::CircularDelay *)((char *)v13 + 32);
    }
  }
  else
  {
    float v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 65);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::PeakPowerGuard::Algorithm::setMeteringIsEnabled(DspLib::PeakPowerGuard::Algorithm *this, int a2)
{
  if (*((unsigned char *)this + 8))
  {
    *((unsigned char *)this + 24) = a2;
    uint64_t v3 = (DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336);
    if (a2)
    {
      unsigned int v4 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 56))(this);
      double v5 = (*(double (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize(v3, v4, v5);
      uint64_t v6 = (char *)this + 480;
      unsigned int v7 = (*(uint64_t (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 56))(this);
      double v8 = (*(double (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 480), v7, v8);
      double v9 = roundf(*((float *)this + 56));
      uint64_t v10 = (char *)this + 624;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 624), 1u, v9);
      uint64_t v11 = (char *)this + 768;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 768), 1u, v9);
      uint64_t v12 = (char *)this + 912;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 912), 1u, v9);
      unsigned int v13 = (char *)this + 1056;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1056), 1u, v9);
      uint64_t v14 = (char *)this + 1200;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1200), 1u, v9);
      uint64_t v15 = *((void *)this + 4);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v3, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v6, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v10, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v11, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v12, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v13, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v14, v15);
    }
    else
    {
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 480));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 624));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 768));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 912));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1056));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1200));
    }
  }
  else
  {
    double v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v16, 110);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(DspLib::PeakPowerGuard::Algorithm *this, const __CFDictionary *a2)
{
  if (a2)
  {
    uint64_t v3 = DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::setCoeffSet((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1744), a2);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(void *)this + 128))(this);
    return v3;
  }
  else
  {
    double v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v5, 147);
    ++DspLibDebug::mAssertCounter;
    return 0;
  }
}

void DspLib::PeakPowerGuard::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  double v5 = DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 32);
    *(unsigned char *)(a1 + 216) = *(float *)(v7 + 32) >= 0.5;
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(v7 + 40);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(v7 + 52);
    *(_DWORD *)(a1 + 308) = *(_DWORD *)(v7 + 128);
    double v8 = (BOOL *)(a1 + 312);
    uint64_t v9 = a1 + 260;
    uint64_t v10 = v7 + 148;
    do
    {
      *(v8 - 52) = *(float *)(v10 + v6 - 16) >= 0.5;
      *(_DWORD *)(v9 + v6 + 12) = *(_DWORD *)(v10 + v6 - 84);
      *v8++ = *(float *)(v10 + v6) >= 0.5;
      *(_DWORD *)(v9 + v6 + 60) = *(_DWORD *)(v10 + v6 - 68);
      v6 += 4;
    }
    while (v6 != 16);
    *(unsigned char *)(a1 + 217) = *(float *)(v7 + 56) >= 0.5;
    *(_DWORD *)(a1 + 1552) = *(_DWORD *)(v7 + 168);
    *(_DWORD *)(a1 + 1556) = *(_DWORD *)(v7 + 172);
    *(_DWORD *)(a1 + 1560) = *(_DWORD *)(v7 + 176);
    *(_DWORD *)(a1 + 1564) = *(_DWORD *)(v7 + 180);
    *(_DWORD *)(a1 + 1568) = *(_DWORD *)(v7 + 184);
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 336, v7);
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 480, v7);
    }
    if (*(unsigned char *)(a1 + 1776))
    {
      uint64_t v11 = *(void *)(a1 + 1760);
      uint64_t v12 = *(void *)(a1 + 1752);
      if (v11 == v12) {
        int v13 = -858993459 * ((unint64_t)(v11 - v12) >> 3) - 1;
      }
      else {
        int v13 = 0;
      }
      *(_DWORD *)(a1 + 1792) = v13;
      uint64_t v14 = DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::filterCoefficientsForTemperature((DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *)(a1 + 1744), *(float *)(*(void *)(a1 + 32) + 44));
      DspLib::FIR::initialize((DspLib::FIR *)(a1 + 2048), *(void **)v14, (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2, *(void *)(a1 + 2048));
      float v15 = *(double *)(a1 + 16);
      float v16 = (float)roundf(v15 / *(float *)(*(void *)(a1 + 1752) + 40 * *(unsigned int *)(a1 + 1792) + 8));
    }
    else
    {
      float v16 = 1.0;
    }
    float v17 = (float)*(unsigned int *)(a1 + 220);
    unsigned int v18 = v16;
    if (v16 != v17)
    {
      if (v18)
      {
        *(_DWORD *)(a1 + 1800) = v18;
        *(_DWORD *)(a1 + 1804) = 0;
      }
      for (uint64_t i = 0; i != 32; i += 8)
      {
        if (v18)
        {
          uint64_t v20 = a1 + i;
          *(_DWORD *)(v20 + 1912) = v18;
          *(_DWORD *)(v20 + 1916) = 0;
        }
      }
    }
    float v21 = *(double *)(a1 + 16);
    LODWORD(v22) = vcvtas_u32_f32((float)(*(float *)(*(void *)(a1 + 32) + 164) / 1000.0) * v21);
    if (v16 != v17 || *(_DWORD *)(a1 + 228) != v22)
    {
      if (v22 <= 1) {
        vDSP_Length v22 = 1;
      }
      else {
        vDSP_Length v22 = v22;
      }
      uint64_t v23 = 2 * v18 + v22 - 2;
      MEMORY[0x1F4188790](v5);
      double v25 = (char *)v63 - v24;
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs((float *)((char *)v63 - v24), v23, v16, v22);
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1808), v16, (unint64_t)(float)((float)((float)v26 / v16) + 1.0));
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1808), (uint64_t)v25, v23);
      unint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1944), v16, (unint64_t)(float)((float)((float)v27 / v16) + 1.0));
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1944), (uint64_t)v25, v23);
    }
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 2440), 1uLL);
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 2544), 1uLL);
    unint64_t v28 = ((unint64_t)*(unsigned int *)(*(void *)(a1 + 32) + 36) << 32) | 8;
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 2440, v28, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 2544, v28, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    *(float *)(a1 + 240) = DspLib::dB2Amp(v29, *(float *)(*(void *)(a1 + 32) + 100));
    uint64_t v30 = *(float **)(a1 + 32);
    float v31 = *(double *)(a1 + 16);
    *(float *)(a1 + 244) = 1.0 - expf(-1.0 / (float)((float)(v30[26] * (float)(v31 / v16)) / 1000.0));
    *(float *)(a1 + 236) = 100.0 / v30[12];
    *(float *)(a1 + 296) = DspLib::dB2Amp(v32, v30[27]);
    uint64_t v33 = *(void *)(a1 + 32);
    float v34 = *(float *)(v33 + 112);
    *(void *)&long long v35 = *(void *)(a1 + 16);
    *(_OWORD *)DSPDoubleSplitComplex v63 = v35;
    *(float *)&long long v35 = *(double *)&v35;
    float v36 = expf(-1.0 / (float)((float)(v34 * (float)(*(float *)&v35 / v16)) / 1000.0));
    double v37 = v63[0];
    *(float *)(a1 + 300) = 1.0 - v36;
    float v38 = (float)(*(float *)(v33 + 116) * *(float *)(v33 + 116)) / *(float *)(v33 + 120);
    *(float *)(a1 + 288) = v38;
    *(float *)(a1 + 288) = v38 * (float)(100.0 / *(float *)(v33 + 124));
    *(float *)(a1 + 292) = 100.0 / *(float *)(v33 + 96);
    float v39 = v37 / v16;
    v40.i32[0] = *(_DWORD *)(v33 + 60);
    if (*(float *)v40.i32 != *(float *)(a1 + 232) || *(float *)(a1 + 224) != v39)
    {
      uint64_t v41 = 0;
      *(_DWORD *)(a1 + 232) = v40.i32[0];
      *(float *)(a1 + 224) = v39;
      float v42 = (float)roundf(v39);
      float32x2_t v43 = (float32x2_t)vdup_lane_s32(v40, 0);
      int32x2_t v44 = (int32x2_t)0x100000000;
      float32x2_t v45 = (float32x2_t)vdup_n_s32(0x447A0000u);
      float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
      v47.i64[0] = 0xFFFFFFFFLL;
      v47.i64[1] = 0xFFFFFFFFLL;
      do
      {
        float32x2_t v48 = vdiv_f32(v43, vcvt_f32_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v44)));
        uint32x2_t v49 = vcvt_u32_f32(vdiv_f32(vmul_n_f32(v48, v42), v45));
        *(void *)&long long v50 = v49.u32[0];
        *((void *)&v50 + 1) = v49.u32[1];
        *(_OWORD *)&v65[v41] = v50;
        *(int8x16_t *)&v64[v41] = vandq_s8((int8x16_t)vcvtq_u64_f64(vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(v48), v37), v46)), v47);
        int32x2_t v44 = vadd_s32(v44, (int32x2_t)0x200000002);
        v41 += 2;
      }
      while (v41 != 4);
      DspLib::MultiMovingAverage::setLengths((uint64_t *)(a1 + 2112), v65, 4uLL);
      DspLib::MultiMovingAverage::setLengths((uint64_t *)(a1 + 2264), v64, 4uLL);
    }
    for (uint64_t j = 2320; j != 2416; j += 24)
    {
      unint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      std::vector<float>::resize(a1 + j, v52);
    }
    for (unint64_t k = 2168; k != 2264; k += 24)
    {
      unint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      std::vector<float>::resize(a1 + k, (unint64_t)(float)((float)((float)v54 / v16) + 1.0));
    }
    long long v55 = *(DspLib::CircularDelay **)(a1 + 2416);
    int v56 = *(DspLib::CircularDelay **)(a1 + 2424);
    if (v55 != v56)
    {
      float v57 = *(double *)(a1 + 16);
      LODWORD(k) = vcvtas_u32_f32((float)(*(float *)(*(void *)(a1 + 32) + 164) / 1000.0) * v57);
      do
      {
        DspLib::CircularDelay::setLength(v55, k);
        long long v55 = (DspLib::CircularDelay *)((char *)v55 + 32);
      }
      while (v55 != v56);
    }
    *(_DWORD *)(a1 + 220) = v18;
    *(_DWORD *)(a1 + 228) = v22;
    if (*(unsigned char *)(a1 + 24))
    {
      unsigned int v58 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      double v59 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 336), v58, v59);
      unsigned int v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 480), v60, v61);
      double v62 = roundf(*(float *)(a1 + 224));
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 624), 1u, v62);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 768), 1u, v62);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 912), 1u, v62);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 1056), 1u, v62);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 1200), 1u, v62);
    }
    else
    {
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 336));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 480));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 624));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 768));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 912));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 1056));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 1200));
    }
  }
}

void DspLib::Biquad::ParametricFilter::setNumberOfStages(DspLib::Biquad::ParametricFilter *this, vDSP_Length a2)
{
  if (*(unsigned char *)this)
  {
    vDSP_Length v3 = *((void *)this + 6);
    double v4 = *((double *)this + 9);
    DspLib::Biquad::ParametricFilter::initialize(this, v3, v4, a2);
  }
  else
  {
    double v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.h");
    printf("DSP Sound assertion in %s at line %d\n", v5, 112);
    ++DspLibDebug::mAssertCounter;
  }
}

vDSP_Length DspLib::PeakPowerGuard::Algorithm::wooferInputSideChain(DspLib::PeakPowerGuard::Algorithm *this, const float *a2, float *a3, uint64_t a4, float *a5, vDSP_Length a6)
{
  float v15 = a5;
  v13[0] = &v15;
  v13[1] = 1;
  vDSP_Length __N = a6;
  v11[2] = a4;
  uint64_t v12 = a2;
  v11[0] = &v12;
  v11[1] = 1;
  DspLib::DownSampler::process((unsigned int *)this + 450, v11, v13);
  vDSP_Length v9 = __N;
  DspLib::multiply(a5, __N, *((float *)this + 63));
  if (*((unsigned char *)this + 24)) {
    DspLib::AudioMeter::Algorithm::analyze((double *)this + 78, (uint64_t)a5, v9);
  }
  if (*((void *)this + 256) && *((void *)this + 260)) {
    DspLib::FIR::process((uint64_t)this + 2048, a5, v9, a3);
  }
  else {
    DspLib::copy(a5, v9, a3);
  }
  if (*((unsigned char *)this + 24)) {
    DspLib::AudioMeter::Algorithm::analyze((double *)this + 96, (uint64_t)a3, v9);
  }
  DspLib::multiply(a5, v9, a3);
  if (*((unsigned char *)this + 24)) {
    DspLib::AudioMeter::Algorithm::analyze((double *)this + 114, (uint64_t)a5, v9);
  }
  DspLib::multiply(a5, v9, *((float *)this + 59));
  if (*((unsigned char *)this + 24)) {
    DspLib::AudioMeter::Algorithm::analyze((double *)this + 132, (uint64_t)a5, v9);
  }
  DspLib::add(a5, v9, *((float *)this + 64));
  if (*((unsigned char *)this + 24)) {
    DspLib::AudioMeter::Algorithm::analyze((double *)this + 150, (uint64_t)a5, v9);
  }
  return v9;
}

void DspLib::PeakPowerGuard::Algorithm::tweeterInputSideChain(uint64_t a1, void *a2, float *a3, float *a4)
{
  vDSP_Length v8 = a2[2];
  DspLib::clear(a4, v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) >= 2)
  {
    unint64_t v9 = 1;
    do
    {
      DspLib::square(*(const float **)(*a2 + 8 * v9), a2[2], a3);
      DspLib::add(a4, v8, a3);
      ++v9;
    }
    while (v9 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
  }
  if (*(unsigned char *)(a1 + 24)) {
    *(float *)(a1 + 1440) = DspLib::maxMagnitude(a4, v8);
  }
  DspLib::multiply(a4, v8, *(float *)(a1 + 288));
  if (*(unsigned char *)(a1 + 24)) {
    *(float *)(a1 + 1444) = DspLib::maxMagnitude(a4, v8);
  }
  DspLib::add(a4, v8, a3, *(float *)(a1 + 308));
  if (*(unsigned char *)(a1 + 24)) {
    *(float *)(a1 + 1448) = DspLib::maxMagnitude(a3, v8);
  }
}

void DspLib::PeakPowerGuard::Algorithm::computeGains(DspLib::PeakPowerGuard::Algorithm *this, const float *const *a2, float *a3, unint64_t a4, const float *const *a5, float *a6, float *__C, float *a8, float *a9, unint64_t a10)
{
  DspLib::fill(__C, a10, 1.0);
  DspLib::fill(a6, a10, 1.0);
  uint64_t v15 = 0;
  float v16 = (char *)this + 1392;
  float v17 = (char *)this + 1488;
  unsigned int v18 = (char *)this + 1504;
  long long v35 = (char *)this + 1376;
  while (1)
  {
    DspLib::copy((void *)a2[v15], a4, a3);
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 336) = DspLib::maxMagnitude(a3, a4);
    }
    DspLib::copy((void *)a5[v15], a10, a8);
    unint64_t v42 = a10;
    float32x2_t v43 = a9;
    int32x2_t v40 = a8;
    v41[0] = &v43;
    v41[1] = 1;
    v39[0] = &v40;
    v39[1] = 1;
    v39[2] = a10;
    DspLib::DownSampler::process((unsigned int *)this + 2 * v15 + 478, v39, v41);
    if (v42 != a4) {
      break;
    }
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 364) = DspLib::maxv(a9, a4);
    }
    DspLib::multiply(a9, a4, a8, *((float *)this + 73));
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 368) = DspLib::maxv(a8, a4);
    }
    DspLib::add(a3, a4, a8);
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 340) = DspLib::maxMagnitude(a3, a4);
    }
    if (*((unsigned char *)this + v15 + 260))
    {
      float v19 = *((float *)this + v15 + 68);
      DspLib::clip(a3, a4, v19, v19 / (float)(*((float *)this + 60) * *((float *)this + 60)));
      DspLib::svdiv(a3, a4, v19);
    }
    else
    {
      DspLib::fill(a3, a4, 1.0);
    }
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 356) = DspLib::minv(a3, a4);
    }
    DspLib::vmin(a6, a4, a3);
    if (*((unsigned char *)this + v15 + 312))
    {
      float v20 = *((float *)this + v15 + 80);
      DspLib::clip(a9, a4, v20, v20 / (float)(*((float *)this + 74) * *((float *)this + 74)));
      DspLib::svdiv(a9, a4, v20);
    }
    else
    {
      DspLib::fill(a9, a4, 1.0);
    }
    if (*((unsigned char *)this + 24)) {
      *((float *)this + v15 + 384) = DspLib::minv(a9, a4);
    }
    DspLib::vmin(__C, a4, a9);
    if (*((unsigned char *)this + 24) && a4)
    {
      uint64_t v21 = 0;
      float v22 = *((float *)this + 60);
      float v23 = *((float *)this + 74);
      float v24 = *(float *)&v35[4 * v15];
      float v25 = *(float *)&v16[4 * v15];
      float v26 = *(float *)&v17[4 * v15];
      float v27 = *(float *)&v18[4 * v15];
      do
      {
        float v28 = sqrtf(a3[v21]);
        if (v28 <= 1.0) {
          float v29 = v28;
        }
        else {
          float v29 = 1.0;
        }
        if (v28 >= v22) {
          float v30 = v29;
        }
        else {
          float v30 = v22;
        }
        float v31 = sqrtf(a9[v21]);
        if (v31 <= 1.0) {
          float v32 = v31;
        }
        else {
          float v32 = 1.0;
        }
        if (v31 >= v23) {
          float v33 = v32;
        }
        else {
          float v33 = v23;
        }
        if (v30 >= v24) {
          float v30 = v24 + (float)((float)(1.0 - v24) * *((float *)this + 61));
        }
        *(float *)&v35[4 * v15] = v30;
        if (v30 < v25) {
          float v25 = v30;
        }
        *(float *)&v16[4 * v15] = v25;
        if (v33 >= v26) {
          float v33 = v26 + (float)((float)(1.0 - v26) * *((float *)this + 75));
        }
        *(float *)&v17[4 * v15] = v33;
        if (v33 < v27) {
          float v27 = v33;
        }
        *(float *)&v18[4 * v15] = v27;
        ++v21;
        float v26 = v33;
        float v24 = v30;
      }
      while (a4 > v21);
    }
    if (++v15 == 4)
    {
      DspLib::sqrt(a6, a4);
      DspLib::sqrt(__C, a4);
      return;
    }
  }
  float v34 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v34, 375);
  ++DspLibDebug::mAssertCounter;
}

float *DspLib::PeakPowerGuard::Algorithm::attackRelease(float *this, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 0;
    do
    {
      float v5 = a2[v4];
      float v6 = this[62];
      if (v5 >= v6)
      {
        float v7 = v6 + (float)((float)(1.0 - v6) * this[61]);
        this[62] = v7;
        a2[v4] = v7;
      }
      else
      {
        this[62] = v5;
      }
      float v8 = a3[v4];
      float v9 = this[76];
      if (v8 >= v9)
      {
        float v10 = v9 + (float)((float)(1.0 - v9) * this[75]);
        this[76] = v10;
        a3[v4] = v10;
      }
      else
      {
        this[76] = v8;
      }
      ++v4;
    }
    while (a4 > v4);
  }
  return this;
}

uint64_t DspLib::PeakPowerGuard::Algorithm::applyGains(unsigned char *a1, uint64_t a2, void *__src, void *a4, uint64_t a5)
{
  if (a1[217])
  {
    DspLib::copy(__src, a5, **(void ***)a2);
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
    if (result >= 2)
    {
      unint64_t v10 = 1;
      do
      {
        DspLib::copy(a4, a5, *(void **)(*(void *)a2 + 8 * v10++));
        uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
      }
      while (v10 < result);
    }
  }
  else
  {
    DspLib::multiply(**(float ***)a2, *(void *)(a2 + 16), (const float *)__src);
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
    if (result >= 2)
    {
      unint64_t v11 = 1;
      do
      {
        DspLib::multiply(*(float **)(*(void *)a2 + 8 * v11++), *(void *)(a2 + 16), (const float *)a4);
        uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
      }
      while (v11 < result);
    }
  }
  return result;
}

void DspLib::PeakPowerGuard::Algorithm::processBlock(DspLib::PeakPowerGuard::Algorithm *this, long long *a2, long long *a3)
{
  v46[4] = *(float **)MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    uint64_t v6 = *((void *)a2 + 2);
    if (*((unsigned char *)this + 24))
    {
      long long v35 = *a2;
      uint64_t v36 = *((void *)a2 + 2);
      DspLib::AudioMeter::Algorithm::analyze((double *)this + 42, (uint64_t *)&v35);
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 56));
    }
    if (**(void **)a3 != **(void **)a2)
    {
      long long v33 = *a2;
      uint64_t v34 = *((void *)a2 + 2);
      long long v31 = *a3;
      uint64_t v32 = *((void *)a3 + 2);
      DspLib::copy(&v33, &v31);
    }
    if (!*((unsigned char *)this + 216) && v6)
    {
      float v7 = (float *)*((void *)this + 197);
      float v8 = (float *)*((void *)this + 200);
      uint64_t v9 = DspLib::PeakPowerGuard::Algorithm::wooferInputSideChain(this, **(const float ***)a2, v8, v6, v7, (uint64_t)(*((void *)this + 198) - (void)v7) >> 2);
      unint64_t v10 = (float *)*((void *)this + 206);
      unint64_t v11 = (float *)*((void *)this + 209);
      long long v29 = *a2;
      uint64_t v30 = *((void *)a2 + 2);
      DspLib::PeakPowerGuard::Algorithm::tweeterInputSideChain((uint64_t)this, &v29, v10, v11);
      uint64_t v12 = (float *)*((void *)this + 274);
      v46[0] = *((float **)this + 271);
      v46[1] = v12;
      int v13 = (float *)*((void *)this + 280);
      v46[2] = *((float **)this + 277);
      v46[3] = v13;
      v28[0] = (uint64_t)v46;
      v28[1] = 4;
      v28[2] = v9;
      DspLib::MultiMovingAverage::process((char **)this + 264, v7, v9, v28);
      uint64_t v14 = (float *)*((void *)this + 293);
      v45[0] = *((float **)this + 290);
      v45[1] = v14;
      uint64_t v15 = (float *)*((void *)this + 299);
      v45[2] = *((float **)this + 296);
      v45[3] = v15;
      v27[0] = (uint64_t)v45;
      v27[1] = 4;
      v27[2] = v6;
      DspLib::MultiMovingAverage::process((char **)this + 283, v10, v6, v27);
      float v16 = (float *)*((void *)this + 203);
      float v17 = (float *)*((void *)this + 215);
      DspLib::PeakPowerGuard::Algorithm::computeGains(this, (const float *const *)v46, v8, v9, (const float *const *)v45, v16, v17, *((float **)this + 212), v11, v6);
      DspLib::PeakPowerGuard::Algorithm::attackRelease((float *)this, v16, v17, v9);
      double v37 = v16;
      float v38 = v8;
      unint64_t v42 = &v37;
      uint64_t v43 = 1;
      uint64_t v44 = v9;
      float v39 = &v38;
      uint64_t v40 = 1;
      uint64_t v41 = v6;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 452, &v42, &v39);
      double v37 = v17;
      float v38 = v11;
      unint64_t v42 = &v37;
      uint64_t v43 = 1;
      uint64_t v44 = v9;
      float v39 = &v38;
      uint64_t v40 = 1;
      uint64_t v41 = v6;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 486, &v42, &v39);
      uint64_t v18 = *((void *)a3 + 1);
      uint64_t v19 = *((void *)a3 + 2);
      unint64_t v42 = *(float ***)a3;
      uint64_t v43 = v18;
      uint64_t v44 = v19;
      float v39 = v42;
      uint64_t v40 = v18;
      uint64_t v41 = v19;
      DspLib::MultiChannelCircularDelay::process((uint64_t *)this + 302, &v42, &v39);
      DspLib::Biquad::Filter::process((void *)this + 305, (uint64_t)v8, v6, (uint64_t)v8, v6);
      DspLib::Biquad::Filter::process((void *)this + 318, (uint64_t)v11, v6, (uint64_t)v11, v6);
      if (*((unsigned char *)this + 24))
      {
        float v20 = DspLib::minv(v8, v6);
        if (v20 >= *((float *)this + 352)) {
          float v20 = *((float *)this + 352);
        }
        *((float *)this + 352) = v20;
        float v21 = DspLib::minv(v11, v6);
        if (v21 >= *((float *)this + 380)) {
          float v21 = *((float *)this + 380);
        }
        *((float *)this + 380) = v21;
      }
      long long v25 = *a3;
      uint64_t v26 = *((void *)a3 + 2);
      DspLib::PeakPowerGuard::Algorithm::applyGains(this, (uint64_t)&v25, v8, v11, v6);
    }
    if (*((unsigned char *)this + 24))
    {
      DspLib::CPUMeasure::stop((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 56), v6, *((double *)this + 2));
      float v23 = *(float ***)a3;
      long long v24 = *(long long *)((char *)a3 + 8);
      DspLib::AudioMeter::Algorithm::analyze((double *)this + 60, (uint64_t *)&v23);
    }
  }
  else
  {
    float v22 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v22, 523);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::PeakPowerGuard::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length a3)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    DspLib::clear((float *)a2, a3);
    *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v6 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    *(float *)(a2 + 4) = v6;
    *(_DWORD *)(a2 + 284) = *(_DWORD *)(a1 + 1568);
    *(_OWORD *)(a2 + 268) = *(_OWORD *)(a1 + 1552);
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::clip((float *)(a1 + 1360), 4uLL, 0.0, 200.0);
      DspLib::clip((float *)(a1 + 1456), 4uLL, 0.0, 200.0);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 336), (float *)(a2 + 12), 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 480), (float *)(a2 + 140), 0x20uLL);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 220);
      std::vector<float>::vector(&__p, 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 624), (float *)__p, (v27 - (unsigned char *)__p) >> 2);
      *(float *)(a2 + 288) = DspLib::dB2Amp(v7, *((float *)__p + 16));
      *(float *)(a2 + 292) = DspLib::dB2Amp(v8, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 768), (float *)__p, (v27 - (unsigned char *)__p) >> 2);
      *(float *)(a2 + 296) = DspLib::dB2Amp(v9, *((float *)__p + 16));
      *(float *)(a2 + 300) = DspLib::dB2Amp(v10, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 912), (float *)__p, (v27 - (unsigned char *)__p) >> 2);
      *(float *)(a2 + 304) = DspLib::dB2Amp(v11, *((float *)__p + 16));
      *(float *)(a2 + 308) = DspLib::dB2Amp(v12, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1056), (float *)__p, (v27 - (unsigned char *)__p) >> 2);
      *(float *)(a2 + 312) = DspLib::dB2Amp(v13, *((float *)__p + 16));
      *(float *)(a2 + 316) = DspLib::dB2Amp(v14, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1200), (float *)__p, (v27 - (unsigned char *)__p) >> 2);
      *(float *)(a2 + 320) = DspLib::dB2Amp(v15, *((float *)__p + 16));
      *(float *)(a2 + 324) = DspLib::dB2Amp(v16, *(float *)__p);
      DspLib::copy((void *)(a1 + 1344), 4, (void *)(a2 + 328));
      DspLib::copy((void *)(a1 + 1360), 4, (void *)(a2 + 344));
      DspLib::clear((float *)(a1 + 1360), 4uLL);
      uint64_t v18 = 0;
      uint64_t v19 = a1 + 1392;
      float v20 = (float *)(a2 + 372);
      do
      {
        *v20-- = DspLib::amp2dBSafe(v17, *(float *)(v19 + v18), 0.000001);
        *(_DWORD *)(v19 + v18) = 1065353216;
        v18 += 4;
      }
      while (v18 != 16);
      *(float *)(a2 + 376) = DspLib::amp2dBSafe(v17, *(float *)(a1 + 1408), 0.000001);
      *(_DWORD *)(a1 + 1408) = 1065353216;
      *(void *)(a2 + 380) = *(void *)(a1 + 1440);
      *(_DWORD *)(a2 + 388) = *(_DWORD *)(a1 + 1448);
      DspLib::copy((void *)(a1 + 1456), 4, (void *)(a2 + 392));
      DspLib::clear((float *)(a1 + 1456), 4uLL);
      float v21 = (DspLib *)DspLib::copy((void *)(a1 + 1472), 4, (void *)(a2 + 408));
      uint64_t v22 = 0;
      uint64_t v23 = a1 + 1504;
      long long v24 = (float *)(a2 + 436);
      do
      {
        *v24-- = DspLib::amp2dBSafe(v21, *(float *)(v23 + v22), 0.000001);
        *(_DWORD *)(v23 + v22) = 1065353216;
        v22 += 4;
      }
      while (v22 != 16);
      *(float *)(a2 + 440) = DspLib::amp2dBSafe(v21, *(float *)(a1 + 1520), 0.000001);
      *(_DWORD *)(a1 + 1520) = 1065353216;
      if (__p)
      {
        float v27 = __p;
        operator delete(__p);
      }
    }
    else
    {
      DspLib::fill((float *)(a2 + 12), 0x20uLL, -100.0);
      DspLib::fill((float *)(a2 + 140), 0x20uLL, -100.0);
    }
  }
  else
  {
    long long v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v25, 572);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1BB2C3770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::PeakPowerGuard::Algorithm::~Algorithm(DspLib::PeakPowerGuard::Algorithm *this)
{
  DspLib::PeakPowerGuard::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  uint64_t j;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t k;
  void *v17;
  uint64_t m;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void **v35;

  *(void *)this = &unk_1F14A72F8;
  long long v35 = (void **)((char *)this + 2624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2592));
  uint64_t v2 = (void *)*((void *)this + 321);
  if (v2)
  {
    *((void *)this + 322) = v2;
    operator delete(v2);
  }
  long long v35 = (void **)((char *)this + 2520);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2488));
  vDSP_Length v3 = (void *)*((void *)this + 308);
  if (v3)
  {
    *((void *)this + 309) = v3;
    operator delete(v3);
  }
  long long v35 = (void **)((char *)this + 2416);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v35);
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    float v5 = *(void **)((char *)this + i + 2392);
    if (v5)
    {
      *(void *)((char *)this + i + 2400) = v5;
      operator delete(v5);
    }
  }
  float v6 = (void *)*((void *)this + 286);
  if (v6)
  {
    *((void *)this + 287) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 283);
  if (v7)
  {
    *((void *)this + 284) = v7;
    operator delete(v7);
  }
  for (uint64_t j = 0; j != -96; j -= 24)
  {
    uint64_t v9 = *(void **)((char *)this + j + 2240);
    if (v9)
    {
      *(void *)((char *)this + j + 2248) = v9;
      operator delete(v9);
    }
  }
  unint64_t v10 = (void *)*((void *)this + 267);
  if (v10)
  {
    *((void *)this + 268) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 264);
  if (v11)
  {
    *((void *)this + 265) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 261);
  if (v12)
  {
    *((void *)this + 262) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 257);
  if (v13)
  {
    *((void *)this + 258) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 253);
  if (v14)
  {
    *((void *)this + 254) = v14;
    operator delete(v14);
  }
  long long v35 = (void **)((char *)this + 1992);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 1960);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v15 = (void *)*((void *)this + 236);
  if (v15)
  {
    *((void *)this + 237) = v15;
    operator delete(v15);
  }
  long long v35 = (void **)((char *)this + 1856);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 1824);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::~AdmittanceFilterCoeffSet((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1744));
  for (unint64_t k = 0; k != -96; k -= 24)
  {
    float v17 = *(void **)((char *)this + k + 1720);
    if (v17)
    {
      *(void *)((char *)this + k + 1728) = v17;
      operator delete(v17);
    }
  }
  for (m = 0; m != -72; m -= 24)
  {
    uint64_t v19 = *(void **)((char *)this + m + 1624);
    if (v19)
    {
      *(void *)((char *)this + m + 1632) = v19;
      operator delete(v19);
    }
  }
  long long v35 = (void **)((char *)this + 1312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  float v20 = (void *)*((void *)this + 161);
  if (v20)
  {
    *((void *)this + 162) = v20;
    operator delete(v20);
  }
  float v21 = (void *)*((void *)this + 158);
  if (v21)
  {
    *((void *)this + 159) = v21;
    operator delete(v21);
  }
  long long v35 = (void **)((char *)this + 1240);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 1168);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v22 = (void *)*((void *)this + 143);
  if (v22)
  {
    *((void *)this + 144) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 140);
  if (v23)
  {
    *((void *)this + 141) = v23;
    operator delete(v23);
  }
  long long v35 = (void **)((char *)this + 1096);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 1024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v24 = (void *)*((void *)this + 125);
  if (v24)
  {
    *((void *)this + 126) = v24;
    operator delete(v24);
  }
  long long v25 = (void *)*((void *)this + 122);
  if (v25)
  {
    *((void *)this + 123) = v25;
    operator delete(v25);
  }
  long long v35 = (void **)((char *)this + 952);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 880);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v26 = (void *)*((void *)this + 107);
  if (v26)
  {
    *((void *)this + 108) = v26;
    operator delete(v26);
  }
  float v27 = (void *)*((void *)this + 104);
  if (v27)
  {
    *((void *)this + 105) = v27;
    operator delete(v27);
  }
  long long v35 = (void **)((char *)this + 808);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 736);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  float v28 = (void *)*((void *)this + 89);
  if (v28)
  {
    *((void *)this + 90) = v28;
    operator delete(v28);
  }
  long long v29 = (void *)*((void *)this + 86);
  if (v29)
  {
    *((void *)this + 87) = v29;
    operator delete(v29);
  }
  long long v35 = (void **)((char *)this + 664);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v30 = (void *)*((void *)this + 71);
  if (v30)
  {
    *((void *)this + 72) = v30;
    operator delete(v30);
  }
  long long v31 = (void *)*((void *)this + 68);
  if (v31)
  {
    *((void *)this + 69) = v31;
    operator delete(v31);
  }
  long long v35 = (void **)((char *)this + 520);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  long long v35 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v32 = (void *)*((void *)this + 53);
  if (v32)
  {
    *((void *)this + 54) = v32;
    operator delete(v32);
  }
  long long v33 = (void *)*((void *)this + 50);
  if (v33)
  {
    *((void *)this + 51) = v33;
    operator delete(v33);
  }
  long long v35 = (void **)((char *)this + 376);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v35);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v34 = (void *)*((void *)this + 4);
  if (v34)
  {
    *((void *)this + 5) = v34;
    operator delete(v34);
  }
}

double DspLib::PeakPowerGuard::Algorithm::latencySamples(DspLib::PeakPowerGuard::Algorithm *this)
{
  float v1 = *((double *)this + 2);
  return roundf((float)(*(float *)(*((void *)this + 4) + 164) / 1000.0) * v1);
}

uint64_t DspLib::PeakPowerGuard::Algorithm::numStatus(DspLib::PeakPowerGuard::Algorithm *this)
{
  return 111;
}

void DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::~AdmittanceFilterCoeffSet(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this)
{
  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
  uint64_t v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  vDSP_Length v3 = (void **)((char *)this + 8);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  float v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v6 = v4 - 40;
        float v7 = (void **)(v4 - 24);
        std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, double a2)
{
  *((double *)this + 20) = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17032), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16872), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16952), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17112), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17192), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17272), 0x400uLL);
  *((unsigned char *)this + 152) = 1;

  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset(this);
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16664));
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16768));
  DspLib::ComplexVector::operator=((char *)this + 17032, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 17112, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 17192, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 17272, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 16872, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 16952, 0.0);
  *((_DWORD *)this + 52) = 1092616192;
  *((unsigned char *)this + 276) = 0;
  *((_DWORD *)this + 50) = *((_DWORD *)this + 49);
  int v2 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 60) = v2;
  *((_DWORD *)this + 61) = v2;

  DspLib::AveragingDecimator::reset((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 8));
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::uninitialize(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16872), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16952), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17032), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17112), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17192), 0);

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17272), 0);
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setParameters(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  int v7 = 7 * a3;
  float v8 = DspLib::AlgorithmParametersInstance::operator[](a2, (7 * a3 + 4));
  float v9 = *(double *)(a1 + 160);
  *(void *)(a1 + 168) = DspLib::PilotToneV2::pilotToneBestFftBinFit(v10, v8, v9);
  uint64_t v11 = DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v7 + 2);
  uint64_t v12 = DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v7 + 3);
  float v13 = *(double *)(a1 + 160) * 0.0009765625;
  *(float *)(a1 + 272) = expf(-1.0 / (float)((float)((float)(*(float *)v12 * 1000.0) * v13) / 1000.0));
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(v11 + 4);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)v11;
  if (*(float *)(v11 + 16) < 0.5) {
    float v14 = 1.0;
  }
  else {
    float v14 = -1.0;
  }
  *(float *)(a1 + 236) = v14;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setFftWindows((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)a1, v14);
  int v15 = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(a1 + 176) = v15;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(v12 + 20);
  int v16 = *(_DWORD *)(v12 + 12);
  *(_DWORD *)(a1 + 200) = v16;
  *(_DWORD *)(a1 + 196) = v16;
  int v17 = *(_DWORD *)(v12 + 8);
  *(unsigned char *)(a1 + 190) = *(float *)(v12 + 4) >= 0.5;
  *(_DWORD *)(a1 + 220) = v17;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(v12 + 36);
  *(_DWORD *)(a1 + 240) = v15;
  *(_DWORD *)(a1 + 244) = v15;
  float v18 = *(double *)(a1 + 160) * 0.0009765625;
  *(float *)(a1 + 248) = expf(-1.0 / (float)((float)((float)(*(float *)v12 * 1000.0) * v18) / 1000.0));
  *(float *)(a1 + 252) = expf(-1.0 / (float)((float)((float)(*(float *)(v12 + 40) * 1000.0) * v18) / 1000.0));
  *(float *)(a1 + 256) = expf(-1.0 / (float)((float)((float)((float)(*(float *)(v12 + 40) * 1000.0) * 6.0) * v18)
                                           / 1000.0));
  float v19 = *(float *)(v12 + 52) * 0.01;
  float v20 = 0.0;
  if (v19 > 0.0) {
    float v20 = expf(-1.0 / (float)((float)((float)(v19 * (float)(*(float *)(v12 + 40) * 1000.0)) * v18) / 1000.0));
  }
  *(float *)(a1 + 184) = v20;
  *(float *)(a1 + 260) = 1.0 / *(float *)(v12 + 44);
  *(unsigned char *)(a1 + 268) = *(float *)(v12 + 48) != 0.0;
  float v21 = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000000);
  if (v21 >= 0.5 && !*(unsigned char *)(a1 + 189))
  {
    DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a4);
    DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)a1);
  }
  *(unsigned char *)(a1 + 189) = v21 >= 0.5;
  BOOL v22 = 0;
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (float *)(a1 + 192), (float *)(a1 + 200), &v22, a4);
  if (!v22) {
    *(_DWORD *)(a1 + 208) = 1092616192;
  }
  *(unsigned char *)(a1 + 212) = 1;
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setFftWindows(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, float a2)
{
  vDSP_Length v3 = (float *)((char *)this + 280);
  float v4 = *((float *)this + 57) * a2;
  DspLib::makePeriodicHannWindow((_DWORD *)this + 70, 0x800uLL);
  float v5 = DspLib::norm(v3, 0x800uLL);
  DspLib::multiply(v3, 0x800uLL, v4 / v5);
  float v6 = *((float *)this + 58);
  DspLib::makePeriodicHannWindow((_DWORD *)this + 2118, 0x800uLL);
  float v7 = v6 / DspLib::norm((const float *)this + 2118, 0x800uLL);

  DspLib::multiply((float *)this + 2118, 0x800uLL, v7);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unsigned int a2)
{
  int v2 = (char *)this + 264 * a2;
  v2[12] = 0;
  int v3 = *((_DWORD *)v2 + 1);
  *(_DWORD *)int v2 = v3;
  *((_DWORD *)v2 + 2) = v3;
  *((_DWORD *)v2 + 52) = 0;
  *((_WORD *)v2 + 106) = 0;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(v2 + 156);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(v2 + 172);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(v2 + 188);
  *((_DWORD *)v2 + 30) = *((_DWORD *)v2 + 51);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 124);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 140);
  v2[244] = 0;
  unint64_t result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(*((float *)v2 + 58), *((float *)v2 + 59), *((float *)v2 + 60));
  *((void *)v2 + 27) = result;
  *((_DWORD *)v2 + 56) = v5;
  v2[228] = v6;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::updateRdcSmoothingCoefficient(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, float result)
{
  if (*((unsigned char *)this + 268))
  {
    float v2 = *((float *)this + 62);
    float v3 = *((float *)this + 63);
    float v4 = result + (float)(v2 * (float)(*((float *)this + 60) - result));
    float v5 = result + (float)(v3 * (float)(*((float *)this + 61) - result));
    *((float *)this + 60) = v4;
    *((float *)this + 61) = v5;
    float v6 = *((float *)this + 65) * (float)((float)(vabds_f32(v4, v5) / *((float *)this + 50)) * 100.0);
    if (v6 <= 1.0) {
      float v7 = v6;
    }
    else {
      float v7 = 1.0;
    }
    BOOL v8 = v6 < 0.0;
    float v9 = 0.0;
    if (!v8) {
      float v9 = v7;
    }
    unint64_t result = (float)(v3 * (float)(1.0 - (float)(v9 * v9))) + (float)((float)(v9 * v9) * v2);
    *((float *)this + 68) = result;
  }
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::rdcShouldUpdate(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  v9[0] = DspLib::ComplexSpan::operator[]((void *)this + 2159, *((void *)this + 21));
  v9[1] = v2;
  if (DspLib::abs((DspLib *)v9, v3) > (float)(*(float *)this * *((float *)this + 58))
    && (v8[0] = DspLib::ComplexSpan::operator[]((void *)this + 2149, *((void *)this + 21)),
        v8[1] = v4,
        DspLib::abs((DspLib *)v8, v5) > (float)(*(float *)this * *((float *)this + 57)))
    && *((float *)this + 54) > *((float *)this + 55)
    && *((unsigned char *)this + 190)
    && (float v6 = *((float *)this + 51), v6 >= *((float *)this + 44)))
  {
    return v6 <= *((float *)this + 45);
  }
  else
  {
    return 0;
  }
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::process(uint64_t this, float *a2, float *a3, unint64_t a4, unsigned int a5, float a6)
{
  unsigned int v60 = a5;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 152))
  {
    long long v51 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    int v52 = 190;
LABEL_31:
    this = printf("DSP Sound assertion in %s at line %d\n", v51, v52);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  uint64_t v6 = this;
  if (!*(unsigned char *)(this + 212))
  {
    long long v51 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    int v52 = 191;
    goto LABEL_31;
  }
  if (a4)
  {
    v53[1] = v53;
    uint64_t v10 = MEMORY[0x1F4188790](this);
    uint64_t v12 = (float *)((char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1F4188790](v10);
    float v14 = (char *)v53 - v13;
    DspLib::copy(v15, a4, v12);
    unsigned int v58 = v14;
    DspLib::copy(a3, a4, v14);
    unint64_t v16 = 0;
    float v17 = *v12;
    uint64_t v57 = v6 + 16664;
    double v59 = v12;
    float *v12 = v17 + 0.000001;
    uint64_t v56 = v6 + 16768;
    unint64_t v54 = (float *)(v6 + 200);
    long long v55 = (float *)(v6 + 192);
    while (1)
    {
      DspLib::FFT::BufferedForwardSTFT::addInput(v57, &v59[v16], a4 - v16, (DSPSplitComplex *)(v6 + 17192));
      this = DspLib::FFT::BufferedForwardSTFT::addInput(v56, &v58[4 * v16], a4 - v16, (DSPSplitComplex *)(v6 + 17272));
      uint64_t v18 = this;
      if (*(void *)(v6 + 16856)) {
        break;
      }
LABEL_27:
      v16 += v18;
      if (v16 >= a4) {
        return this;
      }
    }
    v63[0] = 0;
    DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, v55, v54, v63, v60);
    if (!v63[0]) {
      *(_DWORD *)(v6 + 208) = 1092616192;
    }
    float v19 = DspLib::ComplexSpan::operator[]((void *)(v6 + 17272), *(void *)(v6 + 168));
    int v21 = v20;
    float v22 = DspLib::ComplexSpan::operator[]((void *)(v6 + 17192), *(void *)(v6 + 168));
    *(float *)DSPDoubleSplitComplex v63 = v19;
    int v64 = v21;
    float v61 = v22;
    int v62 = v23;
    float v25 = DspLib::abs((DspLib *)v63, v24) + 0.000000001;
    *(float *)(v6 + 204) = (float)(v25 / (float)(DspLib::abs((DspLib *)&v61, v26) + 0.000000001)) - a6;
    BOOL ShouldUpdate = DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::rdcShouldUpdate((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)v6);
    *(unsigned char *)(v6 + 188) = ShouldUpdate;
    if (ShouldUpdate)
    {
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::updateRdcSmoothingCoefficient((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)v6, *(float *)(v6 + 204));
      if (*(unsigned char *)(v6 + 188))
      {
        float v29 = *(float *)(v6 + 204);
        float v30 = v29 + (float)(*(float *)(v6 + 272) * (float)(*(float *)(v6 + 200) - v29));
        *(float *)(v6 + 200) = v30;
        float v31 = *(float *)(v6 + 176);
        float v32 = *(float *)(v6 + 180);
        float v33 = 10.0;
        if (v29 >= v31 && v29 <= v32) {
          float v33 = (float)(vabds_f32(v29, v30) / v29) * 100.0;
        }
        float v34 = *(float *)(v6 + 224);
        if (v30 >= v31 && v30 <= v32 && v33 < v34)
        {
          DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::takeRdcProcessTimeStamp((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (unint64_t *)v60);
          float v29 = *(float *)(v6 + 204);
          *(float *)(v6 + 192) = v29 + (float)(*(float *)(v6 + 272) * (float)(*(float *)(v6 + 192) - v29));
          float v34 = *(float *)(v6 + 224);
        }
        float v37 = (float)(vabds_f32(*(float *)(v6 + 192), v29) / *(float *)(v6 + 192)) * 100.0;
        *(float *)(v6 + 208) = v37;
        if (v37 > v34) {
          *(_DWORD *)(v6 + 272) = *(_DWORD *)(v6 + 256);
        }
        goto LABEL_26;
      }
    }
    else
    {
      float v38 = *(float *)(v6 + 196) + (float)(*(float *)(v6 + 252) * (float)(*(float *)(v6 + 200) - *(float *)(v6 + 196)));
      *(float *)(v6 + 200) = v38;
      *(float *)(v6 + 240) = v38;
      *(float *)(v6 + 244) = v38;
    }
    float v37 = *(float *)(v6 + 208);
    float v34 = *(float *)(v6 + 224);
LABEL_26:
    *(unsigned char *)(v6 + 276) = v37 < v34;
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17272), (DSPSplitComplex *)(v6 + 17192), (DSPSplitComplex *)(v6 + 17112), v28);
    float v39 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 17032, v39);
    DspLib::operator*=(v6 + 17112, 1.0 - v39);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 17032), (DSPSplitComplex *)(v6 + 17112));
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17192), (DSPSplitComplex *)(v6 + 17192), (DSPSplitComplex *)(v6 + 17112), v40);
    float v41 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 16872, v41);
    DspLib::operator*=(v6 + 17112, 1.0 - v41);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 16872), (DSPSplitComplex *)(v6 + 17112));
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17272), (DSPSplitComplex *)(v6 + 17272), (DSPSplitComplex *)(v6 + 17112), v42);
    float v43 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 16952, v43);
    DspLib::operator*=(v6 + 17112, 1.0 - v43);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 16952), (DSPSplitComplex *)(v6 + 17112));
    *(_DWORD *)DSPDoubleSplitComplex v63 = DspLib::ComplexSpan::operator[]((void *)(v6 + 17032), *(void *)(v6 + 168));
    int v64 = v44;
    float v46 = DspLib::abs((DspLib *)v63, v45);
    float v61 = DspLib::ComplexSpan::operator[]((void *)(v6 + 17032), *(void *)(v6 + 168));
    int v62 = v47;
    float v49 = v46 * DspLib::abs((DspLib *)&v61, v48);
    float v50 = DspLib::ComplexSpan::operator[]((void *)(v6 + 16952), *(void *)(v6 + 168));
    *(float *)(v6 + 216) = v49
                         / (float)(v50 * DspLib::ComplexSpan::operator[]((void *)(v6 + 16872), *(void *)(v6 + 168)));
    this = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeRdc((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, *(float *)(v6 + 192), *(float *)(v6 + 200), v60);
    goto LABEL_27;
  }
  return this;
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::status(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    int v2 = *(_DWORD *)(a1 + 192);
    unint64_t v3 = *(void *)(a1 + 168);
    float v4 = 0.0;
    if (*(unsigned char *)(a1 + 276)) {
      float v4 = 1.0;
    }
    *(float *)(a2 + 72) = (float)v3;
    *(_DWORD *)a2 = v2;
    *(float *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 208);
    double v5 = *(double *)(a1 + 160);
    float v6 = v5 * 0.00048828125;
    *(float *)(a2 + 8) = (float)v3 * v6;
    float v7 = v5;
    *(float *)(a2 + 304) = v7;
    float v8 = v5 * 0.0009765625;
    *(float *)(a2 + 20808) = -1.0 / (float)(logf(*(float *)(a1 + 272)) * v8);
  }
  else
  {
    float v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 275);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::coherence(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, DspLibBuffer *a2)
{
  unint64_t v3 = (char *)this + 16952;
  float v4 = (char *)this + 16872;
  double v5 = (const DSPSplitComplex *)((char *)this + 17032);
  float v6 = (float *)DspLibBuffer::channel(a2, 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);

  DspLib::FFT::coherence((uint64_t)v3, (uint64_t)v4, v5, v6, cycle_count);
}

float DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::impedance(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, DSPSplitComplex *__C)
{
  DspLib::ComplexSpan::operator=(__C, (DSPSplitComplex *)((char *)this + 17032));

  return DspLib::FFT::divide(__C, (DSPSplitComplex *)((char *)this + 16872), v4);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::voltagePowerSpectrum(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  return (uint64_t)this + 16952;
}

uint64_t DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor(uint64_t a1, int a2)
{
  bzero((void *)a1, 0xFA4uLL);
  bzero((void *)(a1 + 4032), 0xFA4uLL);
  *(_OWORD *)(a1 + 8040) = 0u;
  *(void *)(a1 + 8056) = 0;
  *(void *)(a1 + 8064) = 0x461C400000000000;
  *(_DWORD *)(a1 + 8072) = 1065353216;
  *(unsigned char *)(a1 + 8088) = 0;
  *(void *)(a1 + 8080) = 0;
  *(void *)(a1 + 8092) = 0x3F80000000000001;
  *(_DWORD *)(a1 + 8036) = a2;
  DspLib::ramp((float *)a1, 0x3E9uLL, 0, -100.0, 0.0);
  for (uint64_t i = 0; i != 4004; i += 4)
    *(float *)(a1 + i) = DspLib::dB2Power(v4, *(float *)(a1 + i) + 0.691);
  return a1;
}

int32x2_t DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::shift(DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *this, int32x2_t result)
{
  LODWORD(v2) = vcvtas_u32_f32(fabsf(*(float *)result.i32) / 0.1);
  if (v2)
  {
    float v4 = (char *)this + 8036;
    int32x2_t v5 = result;
    DspLib::copy((char *)this + 4 * v2 + 4032, 1001 - v2, (char *)this + 4032);
    DspLib::clear((float *)&v4[-4 * v2], v2);
    unint64_t result = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)this + 8060), (float32x2_t)vdup_lane_s32(v5, 0));
    *(int32x2_t *)((char *)this + 8060) = result;
  }
  return result;
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *this, float a2)
{
  *((float *)this + 2015) = a2;
  *((float *)this + 2016) = a2;
  *((float *)this + 2012) = expf(-1.0 / (float)((float)(*((float *)this + 2010) * 1000.0) / 1000.0));
  float v5 = a2 + 0.691;
  if (*((_DWORD *)this + 2023) > 1u) {
    float v5 = -70.0;
  }
  *((float *)this + 2011) = DspLib::dB2Power(v4, v5);
  DspLib::clear((float *)this + 1008, 0x3E9uLL);
  unsigned int v6 = vcvtas_u32_f32(fmaxf((float)(a2 + 100.0) * 10.01, 0.0));
  if (v6 >= 0x3E9) {
    int v7 = 1001;
  }
  else {
    int v7 = v6;
  }
  int v8 = v7 - 1;
  if (!v6) {
    int v8 = 0;
  }
  unsigned int v9 = v8 - 5;
  for (unsigned int i = v8 + 5; v9 <= i; ++v9)
  {
    if (v9 >= 0x3E8) {
      unsigned int v11 = 1000;
    }
    else {
      unsigned int v11 = v9;
    }
    *((_DWORD *)this + v11 + 1008) = 1065353216;
  }
  *((void *)this + 1010) = 0;
  *(void *)((char *)this + 8052) = 0xC28C0000C28C0000;
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = 0;
    int v7 = (unsigned char *)(a1 + 8088);
    int v8 = (float *)(a1 + 4032);
    unsigned int v9 = 1;
    float v10 = 1.0;
    float v11 = -10.0;
    while (1)
    {
      float v12 = *(float *)(a2 + 4 * v6);
      float v13 = DspLib::power2dBSafe((DspLib *)a1, v12, 1.0e-20) + -0.691;
      *(float *)(a1 + 8056) = v13;
      if (v13 <= -70.0) {
        goto LABEL_27;
      }
      int v14 = *(_DWORD *)(a1 + 8036);
      if (!v14) {
        break;
      }
      if (v14 == 1)
      {
        float v15 = v12 + *(float *)(a1 + 8044);
        *(float *)(a1 + 8044) = v15;
        uint64_t v16 = *(void *)(a1 + 8080) + 1;
        *(void *)(a1 + 8080) = v16;
        float v17 = DspLib::power2dBSafe((DspLib *)a1, v15 / (float)(unint64_t)v16, 1.0e-20) + v11;
LABEL_8:
        *(float *)(a1 + 8052) = v17;
        goto LABEL_10;
      }
      float v17 = *(float *)(a1 + 8052);
LABEL_10:
      unsigned int v19 = vcvtas_u32_f32(fmaxf((float)((float)(v17 + -0.691) + 100.0) * 10.01, 0.0));
      if (v19 >= 0x3E9) {
        int v20 = 1001;
      }
      else {
        int v20 = v19;
      }
      unsigned int v21 = v20 - 1;
      if (v19) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*v7) {
        float v23 = *(float *)(a1 + 8096);
      }
      else {
        float v23 = 1.0;
      }
      unsigned int v24 = vcvtas_u32_f32(fmaxf((float)(*(float *)(a1 + 8056) + 100.0) * 10.01, 0.0));
      if (v24 >= 0x3E9) {
        int v25 = 1001;
      }
      else {
        int v25 = v24;
      }
      int v26 = v25 - 1;
      if (v24) {
        int v27 = v26;
      }
      else {
        int v27 = 0;
      }
      v8[v27] = v23 + v8[v27];
      float v28 = DspLib::sum(&v8[v22], 1001 - v22);
      if (v28 > 1.0e-20)
      {
        float v29 = DspLib::dotProduct(&v8[v22], 1001 - v22, (const float *)(a1 + 4 * v22));
        *(float *)(a1 + 8060) = DspLib::power2dBSafe(v30, v29 / v28, 1.0e-20) + -0.691;
      }
LABEL_27:
      float v31 = *(float *)(a1 + 8060);
      if (*v7)
      {
        float v32 = *(float *)(a1 + 8064);
        if (v31 <= v32) {
          float v31 = v32 + (float)((float)((float)(v31 - v32) * *(float *)(a1 + 8072)) * *(float *)(a1 + 8096));
        }
        *(float *)(a1 + 8064) = v31;
        *(float *)(a4 + 4 * v6) = v31;
        if (*(_DWORD *)(a1 + 8036)) {
          goto LABEL_59;
        }
        BOOL v33 = *(float *)(a1 + 8056) > -70.0 || *(_DWORD *)(a1 + 8092) == 1;
        BOOL v34 = v33;
        if (*(float *)(a1 + 8096) < 0.1 || !v34) {
          goto LABEL_59;
        }
LABEL_43:
        float v35 = 0.0;
        unsigned int v36 = vcvtas_u32_f32(fmaxf((float)(*(float *)(a1 + 8060) + 100.0) * 10.01, 0.0));
        if (v36 >= 0x3E9) {
          int v37 = 1001;
        }
        else {
          int v37 = v36;
        }
        unsigned int v38 = v37 - 1;
        if (v36) {
          vDSP_Length v39 = v38;
        }
        else {
          vDSP_Length v39 = 0;
        }
        if ((v39 + 1) <= 0x3E8) {
          float v35 = DspLib::sum(&v8[(v39 + 1)], 1001 - (v39 + 1));
        }
        float v40 = DspLib::sum(v8, v39);
        float v42 = DspLib::amp2dBSafe(v41, (float)(v35 + 1.0e-20) / (float)(v40 + 1.0e-20), 0.000001) / v11;
        if (v42 <= v10) {
          float v43 = v42;
        }
        else {
          float v43 = v10;
        }
        BOOL v44 = v42 < 0.0;
        float v45 = 0.0;
        if (!v44) {
          float v45 = v43;
        }
        float v46 = v45 * v45;
        float v47 = 2.0;
        if (*v7) {
          float v47 = v10;
        }
        float v48 = (float)((float)(v10 - v46) * 5.0) + (float)(v47 * v46);
        float v49 = *(float *)(a1 + 8040);
        *(float *)(a1 + 8048) = expf(-1.0/ (float)((float)(v49 * (float)((float)(v46 + (float)(v10 - v46)) * 1000.0)) / 1000.0));
        float v50 = v49 * (float)(v48 * 1000.0);
        float v11 = -10.0;
        float v10 = 1.0;
        float v51 = expf(-1.0 / (float)(v50 / 1000.0));
        DspLib::multiply(v8, 0x3E9uLL, v51);
        goto LABEL_59;
      }
      *(float *)(a4 + 4 * v6) = v31;
      if (!*(_DWORD *)(a1 + 8036) && (*(_DWORD *)(a1 + 8092) == 1 || *(float *)(a1 + 8056) > -70.0)) {
        goto LABEL_43;
      }
LABEL_59:
      uint64_t v6 = v9;
      if (a3 <= v9++) {
        return;
      }
    }
    float v18 = (float)(v12 * (float)(v10 - *(float *)(a1 + 8048))) + (float)(*(float *)(a1 + 8044) * *(float *)(a1 + 8048));
    *(float *)(a1 + 8044) = v18;
    float v17 = DspLib::power2dBSafe((DspLib *)a1, v18, 1.0e-20) + -20.0;
    goto LABEL_8;
  }
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::histogram(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = a1 + 4032;
    float v7 = 100.0 / (float)a3;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v4 + 1;
      unsigned int v10 = vcvtas_u32_f32(fmaxf((float)((float)((float)(v7 * (float)(v4 + 1)) + -100.0) + 100.0) * 10.01, 0.0));
      if (v10 >= 0x3E9) {
        int v11 = 1001;
      }
      else {
        int v11 = v10;
      }
      int v12 = v11 - 1;
      if (v10) {
        int v13 = v12;
      }
      else {
        int v13 = 0;
      }
      *(float *)(a2 + 4 * v4) = DspLib::sum((const float *)(v6 + 4 * v5), v13 - v5 + 1);
      unsigned int v5 = v13 + 1;
      ++v4;
    }
    while (v8 != v9);
  }
}

float DspLib::abs(DspLib *this, const DSPComplex *a2)
{
  float __C = 0.0;
  v3.realp = (float *)this;
  v3.imagp = (float *)((char *)this + 4);
  uint64_t v4 = 1;
  vDSP_zvabs(&v3, 1, &__C, 1, 1uLL);
  return __C;
}

float DspLib::ComplexSpan::operator[](void *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  if (v2 <= a2) {
    unint64_t v3 = v2 - 1;
  }
  else {
    unint64_t v3 = a2;
  }
  return *(float *)(*a1 + 4 * v3);
}

void *DspLib::ComplexSpan::setElement(void *this, unint64_t a2, DSPComplex a3)
{
  if (this[2] > a2)
  {
    uint64_t v3 = this[1];
    *(float *)(*this + 4 * a2) = a3.real;
    *(float *)(v3 + 4 * a2) = a3.imag;
  }
  return this;
}

DSPSplitComplex *DspLib::ComplexSpan::operator=(DSPSplitComplex *__C, DSPSplitComplex *__A)
{
  realp = __A[1].realp;
  if (realp == __C[1].realp) {
    vDSP_zvmov(__A, 1, __C, 1, (vDSP_Length)realp);
  }
  return __C;
}

uint64_t DspLib::ComplexSpan::operator=(uint64_t a1, float a2)
{
  vDSP_Length v3 = *(void *)(a1 + 16);
  if (v3)
  {
    DspLib::fill(*(float **)a1, v3, a2);
    DspLib::clear(*(float **)(a1 + 8), *(void *)(a1 + 16));
  }
  return a1;
}

DSPSplitComplex *DspLib::operator+=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  realp = __A[1].realp;
  uint64_t v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1) {
    vDSP_zvadd(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp);
  }
  return __A;
}

uint64_t DspLib::operator+=(uint64_t a1, float a2)
{
  return a1;
}

DSPSplitComplex *DspLib::operator-=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  realp = __A[1].realp;
  uint64_t v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1) {
    vDSP_zvsub(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp);
  }
  return __A;
}

uint64_t DspLib::operator-=(uint64_t a1, float a2)
{
  return a1;
}

DSPSplitComplex *DspLib::operator*=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  realp = __A[1].realp;
  uint64_t v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1) {
    vDSP_zvmul(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp, 1);
  }
  return __A;
}

uint64_t DspLib::operator*=(uint64_t a1, float a2)
{
  return a1;
}

DSPSplitComplex *DspLib::operator/=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  realp = __A[1].realp;
  uint64_t v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1) {
    vDSP_zvdiv(__B, v4 == realp, __A, 1, __A, 1, (vDSP_Length)realp);
  }
  return __A;
}

float DspLib::checksum(DspLib *this, const DspLib::ComplexSpan *a2, float result)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(float **)this;
    unsigned int v5 = (float *)*((void *)this + 1);
    do
    {
      float v6 = *v4++;
      float v7 = fabsf(v6);
      float v8 = *v5++;
      unint64_t result = result + (float)(v7 + fabsf(v8));
      --v3;
    }
    while (v3);
  }
  return result;
}

void DspLib::initializeWithLinearPhase(DspLib *this, DspLib::ComplexSpan *a2, float a3, float a4)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    unint64_t v5 = 0;
    double v6 = (float)((float)(a3 / 1000.0) * a4) * -3.14159265 / (double)v4;
    uint64_t v7 = *(void *)this;
    uint64_t v8 = *((void *)this + 1);
    do
    {
      __double2 v9 = __sincos_stret(v6 * (double)v5);
      float cosval = v9.__cosval;
      *(float *)(v7 + 4 * v5) = cosval;
      float sinval = v9.__sinval;
      *(float *)(v8 + 4 * v5++) = sinval;
    }
    while (v4 != v5);
  }
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, unint64_t a2, const DSPSplitComplex *a3)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  unint64_t v5 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::allocateComplex(a2, this, (unint64_t *)this + 2, (uint64_t)this + 24, (void *)this + 4, (void *)this + 7);
  uint64_t v6 = *v5;
  if (*v5)
  {
    if (a3)
    {
      long long v8 = (__int128)*a3;
      uint64_t v9 = v6;
      DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)&v8);
    }
    else
    {
      DspLib::ComplexSpan::operator=((uint64_t)this, 0.0);
    }
  }
  return this;
}

void sub_1BB2C567C(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexVector::setLength(DspLib::ComplexVector *this, unint64_t a2)
{
}

uint64_t DspLib::ComplexVector::operator=(uint64_t a1, uint64_t a2)
{
  DspLib::allocateComplex(*(void *)(a2 + 16), (void *)a1, (unint64_t *)(a1 + 16), a1 + 24, (void *)(a1 + 32), (void *)(a1 + 56));
  vDSP_Length v4 = *(void *)(a2 + 16);
  if (v4 == *(void *)(a1 + 16)) {
    vDSP_zvmov((const DSPSplitComplex *)a2, 1, (const DSPSplitComplex *)a1, 1, v4);
  }
  return a1;
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, const DspLib::ComplexSpan *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1BB2C5774(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, const DspLib::ComplexVector *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1BB2C57D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexVector::~ComplexVector(DspLib::ComplexVector *this)
{
  if (*((void *)this + 2))
  {
    if (*(DspLib::ComplexVector **)this != (DspLib::ComplexVector *)((char *)this + 24)) {
      *((void *)this + 5) = *((void *)this + 4);
    }
    if (*((DspLib::ComplexVector **)this + 1) != (DspLib::ComplexVector *)((char *)this + 28)) {
      *((void *)this + 8) = *((void *)this + 7);
    }
    *((void *)this + 1) = (char *)this + 28;
    *((void *)this + 2) = 0;
    *(void *)this = (char *)this + 24;
  }
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

void DspLib::allocateComplex(unint64_t a1, void *a2, unint64_t *a3, uint64_t a4, void *a5, void *a6)
{
  if (*a3 != a1)
  {
    if (*a3)
    {
      if (*a2 != a4) {
        a5[1] = *a5;
      }
      if (a2[1] != a4 + 4) {
        a6[1] = *a6;
      }
    }
    *a3 = a1;
    if (a1 < 2)
    {
      *a2 = a4;
      uint64_t v10 = a4 + 4;
    }
    else
    {
      std::vector<float>::resize((uint64_t)a5, a1);
      std::vector<float>::resize((uint64_t)a6, *a3);
      *a2 = *a5;
      uint64_t v10 = *a6;
    }
    a2[1] = v10;
  }
}

void DspLib::operator+(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator+=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1BB2C59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DspLib::operator-(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator-=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1BB2C5A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DspLib::operator*(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator*=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1BB2C5B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DspLib::operator*(DspLib::ComplexSpan *a1@<X0>, DspLib::ComplexVector *a2@<X8>, float a3@<S0>)
{
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)__C, a1);
  DspLib::multiply(__C[0], __N, a3);
  DspLib::multiply(__C[1], __N, a3);
  DspLib::ComplexVector::ComplexVector(a2, (const DspLib::ComplexVector *)__C);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)__C);
}

void sub_1BB2C5BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float DspLib::ComplexMatrixSpan::element(DspLib::ComplexMatrixSpan *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  if (v3 >= a2) {
    unint64_t v3 = a2;
  }
  unint64_t v5 = *((void *)this + 4);
  if (v5 >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = *((void *)this + 4);
  }
  unint64_t v7 = v6 + v3 * v5;
  if (v4 <= v7) {
    unint64_t v7 = v4 - 1;
  }
  return *(float *)(*(void *)this + 4 * v7);
}

void DspLib::ComplexMatrixSpan::row(DspLib::ComplexMatrixSpan *this, unint64_t a2, const DSPSplitComplex *a3)
{
  vDSP_Length realp = (vDSP_Length)a3[1].realp;
  if (realp == *((void *)this + 4))
  {
    unint64_t v4 = *((void *)this + 3);
    if (v4 >= a2) {
      unint64_t v4 = a2;
    }
    vDSP_Length v5 = v4 * realp;
    unint64_t v6 = (float *)(*(void *)this + 4 * v5);
    unint64_t v7 = (float *)(*((void *)this + 1) + 4 * v5);
    __A.vDSP_Length realp = v6;
    __A.imagp = v7;
    vDSP_Length v9 = realp;
    vDSP_zvmov(&__A, 1, a3, 1, realp);
  }
}

void DspLib::ComplexMatrixSpan::setRow(DspLib::ComplexMatrixSpan *this, unint64_t a2, DSPSplitComplex *__A)
{
  vDSP_Length v3 = *((void *)this + 4);
  vDSP_Length realp = __A[1].realp;
  if ((float *)v3 == realp || realp == (float *)1)
  {
    vDSP_Stride v6 = v3 == (void)realp;
    unint64_t v7 = *((void *)this + 3);
    if (v7 >= a2) {
      unint64_t v7 = a2;
    }
    vDSP_Length v8 = v7 * v3;
    vDSP_Length v9 = (float *)(*(void *)this + 4 * v8);
    uint64_t v10 = (float *)(*((void *)this + 1) + 4 * v8);
    v11.vDSP_Length realp = v9;
    v11.imagp = v10;
    vDSP_zvmov(__A, v6, &v11, 1, v3);
  }
}

void DspLib::ComplexMatrixSpan::setColumn(DspLib::ComplexMatrixSpan *this, unint64_t a2, DSPSplitComplex *__A)
{
  vDSP_Length v3 = *((void *)this + 3);
  vDSP_Length realp = __A[1].realp;
  if ((float *)v3 == realp || realp == (float *)1)
  {
    vDSP_Stride v6 = v3 == (void)realp;
    unint64_t v7 = *((void *)this + 4);
    if (v7 >= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = *((void *)this + 4);
    }
    vDSP_Length v9 = (float *)(*(void *)this + 4 * v8);
    uint64_t v10 = (float *)(*((void *)this + 1) + 4 * v8);
    v11.vDSP_Length realp = v9;
    v11.imagp = v10;
    vDSP_zvmov(__A, v6, &v11, v7, v3);
  }
}

void *DspLib::ComplexMatrixSpan::operator=(void *a1, _DWORD *a2, DspLib *this)
{
  unint64_t SquareRoot = DspLib::getSquareRoot((uint64_t)this);
  if (SquareRoot == a1[4])
  {
    uint64_t v6 = a1[3];
    if (SquareRoot == v6 && v6 != 0)
    {
      unint64_t v8 = 0;
      unint64_t v9 = a1[2];
      do
      {
        if (SquareRoot >= v8) {
          unint64_t v10 = v8;
        }
        else {
          unint64_t v10 = SquareRoot;
        }
        unint64_t v11 = SquareRoot * v10;
        unint64_t v12 = SquareRoot;
        do
        {
          if (v9 > v11)
          {
            int v13 = a2[1];
            uint64_t v14 = a1[1];
            *(_DWORD *)(*a1 + 4 * v11) = *a2;
            *(_DWORD *)(v14 + 4 * v11) = v13;
          }
          a2 += 2;
          ++v11;
          --v12;
        }
        while (v12);
        ++v8;
      }
      while (v8 != SquareRoot);
    }
  }
  return a1;
}

uint64_t DspLib::getSquareRoot(uint64_t this)
{
  if (this > 24)
  {
    if (this > 48)
    {
      if (this == 49) {
        return 7;
      }
      if (this == 64) {
        return 8;
      }
    }
    else
    {
      if (this == 25) {
        return 5;
      }
      if (this == 36) {
        return 6;
      }
    }
  }
  else if (this > 8)
  {
    if (this == 9) {
      return 3;
    }
    if (this == 16) {
      return 4;
    }
  }
  else
  {
    if (this == 1) {
      return this;
    }
    if (this == 4) {
      return 2;
    }
  }
  return 0;
}

DSPSplitComplex *DspLib::operator/=(DSPSplitComplex *a1, uint64_t *a2)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  v5.vDSP_Length realp = (float *)&v7;
  v5.imagp = (float *)&v7 + 1;
  uint64_t v3 = *a2;
  uint64_t v6 = 1;
  uint64_t v7 = v3;
  DspLib::operator/=(a1, &v5);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v5);
  return a1;
}

void sub_1BB2C5EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

DspLib::ComplexMatrix *DspLib::ComplexMatrix::ComplexMatrix(DspLib::ComplexMatrix *this, uint64_t a2, uint64_t a3)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  DspLib::allocateComplex(a3 * a2, this, (unint64_t *)this + 2, (uint64_t)this + 40, (void *)this + 6, (void *)this + 9);
  return this;
}

void sub_1BB2C5F68(_Unwind_Exception *exception_object)
{
  DSPSplitComplex v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexMatrix::setDimensions(DspLib::ComplexMatrix *this, uint64_t a2, uint64_t a3)
{
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  DspLib::allocateComplex(a3 * a2, this, (unint64_t *)this + 2, (uint64_t)this + 40, (void *)this + 6, (void *)this + 9);
}

DspLib::ComplexMatrix *DspLib::ComplexMatrix::ComplexMatrix(DspLib::ComplexMatrix *this, const DSPSplitComplex *a2)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::operator=((uint64_t)this, a2);
  return this;
}

{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::operator=((uint64_t)this, a2);
  return this;
}

void sub_1BB2C5FF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB2C6060(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::ComplexMatrix::operator=(uint64_t a1, const DSPSplitComplex *a2)
{
  imagp = a2[1].imagp;
  vDSP_Length realp = a2[2].realp;
  *(void *)(a1 + 24) = imagp;
  *(void *)(a1 + 32) = realp;
  DspLib::allocateComplex((void)realp * (void)imagp, (void *)a1, (unint64_t *)(a1 + 16), a1 + 40, (void *)(a1 + 48), (void *)(a1 + 72));
  vDSP_Length v6 = (vDSP_Length)a2[1].realp;
  if (v6 == *(void *)(a1 + 16)) {
    vDSP_zvmov(a2, 1, (const DSPSplitComplex *)a1, 1, v6);
  }
  return a1;
}

void *DspLib::ComplexMatrix::ComplexMatrix(uint64_t a1, _DWORD *a2, DspLib *this)
{
  uint64_t v6 = a1 + 40;
  uint64_t SquareRoot = DspLib::getSquareRoot((uint64_t)this);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = SquareRoot;
  *(void *)(a1 + 32) = SquareRoot;
  DspLib::allocateComplex(SquareRoot * SquareRoot, (void *)a1, (unint64_t *)(a1 + 16), v6, (void *)(a1 + 48), (void *)(a1 + 72));

  return DspLib::ComplexMatrixSpan::operator=((void *)a1, a2, this);
}

void sub_1BB2C61A0(_Unwind_Exception *exception_object)
{
  DSPSplitComplex v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexMatrix::~ComplexMatrix(DspLib::ComplexMatrix *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (*((void *)this + 2))
  {
    if (*(DspLib::ComplexMatrix **)this != (DspLib::ComplexMatrix *)((char *)this + 40)) {
      *((void *)this + 7) = *((void *)this + 6);
    }
    if (*((DspLib::ComplexMatrix **)this + 1) != (DspLib::ComplexMatrix *)((char *)this + 44)) {
      *((void *)this + 10) = *((void *)this + 9);
    }
    *((void *)this + 1) = (char *)this + 44;
    *((void *)this + 2) = 0;
    *(void *)this = (char *)this + 40;
  }
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
}

void DspLib::operator/(const DSPSplitComplex *a1@<X0>, uint64_t *a2@<X1>, DspLib::ComplexMatrix *a3@<X8>)
{
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)v5, a1);
  DspLib::operator/=(v5, a2);
  DspLib::ComplexMatrix::ComplexMatrix(a3, v5);
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v5);
}

void sub_1BB2C62B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DspLib::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, DspLib::ComplexMatrix *a3@<X8>)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 24))
  {
    DspLib::ComplexMatrix::ComplexMatrix(a3, *(void *)(a1 + 24), *(void *)(a2 + 32));
    vDSP_zmmul((const DSPSplitComplex *)a1, 1, (const DSPSplitComplex *)a2, 1, (const DSPSplitComplex *)a3, 1, *(void *)(a1 + 24), *(void *)(a2 + 32), *(void *)(a1 + 32));
  }
  else
  {
    DspLib::ComplexMatrix::ComplexMatrix(a3, 0, 0);
  }
}

void sub_1BB2C637C(_Unwind_Exception *a1)
{
  DspLib::ComplexMatrix::~ComplexMatrix(v1);
  _Unwind_Resume(a1);
}

void DspLib::inv(DspLib *this@<X0>, DspLib::ComplexMatrix *a2@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 3) == 2 && *((void *)this + 4) == 2)
  {
    uint64_t v7 = *((void *)this + 1);
    unint64_t v6 = *((void *)this + 2);
    uint64_t v8 = v6 - 1;
    if (v6 > 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6 - 1;
    }
    uint64_t v10 = 3;
    if (v6 <= 3) {
      uint64_t v10 = v6 - 1;
    }
    uint64_t v11 = *(void *)this;
    int v12 = *(_DWORD *)(v7 + 4 * v10);
    float v13 = *(float *)(*(void *)this + 4 * v9);
    float v14 = *(float *)(v7 + 4 * v9);
    if (v6 > 2) {
      uint64_t v8 = 2;
    }
    float v15 = *(float *)(v11 + 4 * v8);
    float v16 = *(float *)(v7 + 4 * v8);
    if (v6) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = -1;
    }
    int v18 = *(_DWORD *)(v11 + 4 * v17);
    int v19 = *(_DWORD *)(v7 + 4 * v17);
    LODWORD(v65) = *(_DWORD *)(*(void *)this + 4 * v10);
    HIDWORD(v65) = v12;
    *(float *)&double v66 = -v13;
    *((float *)&v66 + 1) = -v14;
    *(float *)&uint64_t v67 = -v15;
    *((float *)&v67 + 1) = -v16;
    int v68 = v18;
    int v69 = v19;
    DspLib::ComplexMatrix::ComplexMatrix((uint64_t)v41, &v65, (DspLib *)4);
    unsigned int v20 = 0;
    if (*((void *)this + 3) == 2)
    {
      unsigned int v21 = 0;
      if (*((void *)this + 4) == 2)
      {
        uint64_t v23 = *((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        if (v22) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = -1;
        }
        uint64_t v25 = v22 - 1;
        uint64_t v26 = *(void *)this;
        int v27 = *(_DWORD *)(*(void *)this + 4 * v24);
        int v28 = *(_DWORD *)(v23 + 4 * v24);
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        double v66 = &v69;
        uint64_t v67 = 1;
        uint64_t v65 = &v68;
        int v68 = v27;
        int v69 = v28;
        if (v22 > 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v22 - 1;
        }
        int v30 = *(_DWORD *)(v26 + 4 * v29);
        int v31 = *(_DWORD *)(v23 + 4 * v29);
        long long v63 = 0uLL;
        long long v64 = 0uLL;
        long long v62 = 0uLL;
        v59[1] = &v61;
        v59[2] = 1;
        v59[0] = &v60;
        int v60 = v30;
        int v61 = v31;
        uint64_t v32 = 2;
        if (v22 <= 2) {
          uint64_t v32 = v22 - 1;
        }
        int v33 = *(_DWORD *)(v26 + 4 * v32);
        int v34 = *(_DWORD *)(v23 + 4 * v32);
        long long v57 = 0uLL;
        long long v58 = 0uLL;
        long long v56 = 0uLL;
        v52.imagp = (float *)&v55;
        uint64_t v53 = 1;
        v52.vDSP_Length realp = (float *)&v54;
        int v54 = v33;
        int v55 = v34;
        BOOL v35 = v22 > 3;
        uint64_t v36 = 3;
        if (!v35) {
          uint64_t v36 = v25;
        }
        int v37 = *(_DWORD *)(v26 + 4 * v36);
        int v38 = *(_DWORD *)(v23 + 4 * v36);
        long long v50 = 0uLL;
        long long v51 = 0uLL;
        long long v49 = 0uLL;
        v45.imagp = (float *)&v48;
        uint64_t v46 = 1;
        v45.vDSP_Length realp = (float *)&v47;
        int v47 = v37;
        int v48 = v38;
        DspLib::operator*((DspLib::ComplexSpan *)&v65, &v45, (DspLib::ComplexVector *)v43);
        DspLib::operator*((DspLib::ComplexSpan *)v59, &v52, (DspLib::ComplexVector *)v42);
        DspLib::operator-((DspLib::ComplexSpan *)v43, v42, (DspLib::ComplexVector *)v44);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v42);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v43);
        if (v44[2]) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = -1;
        }
        unsigned int v20 = *(_DWORD *)(v44[0] + 4 * v39);
        unsigned int v21 = *(_DWORD *)(v44[1] + 4 * v39);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v44);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v45);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v52);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v59);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v65);
      }
    }
    else
    {
      unsigned int v21 = 0;
    }
    unint64_t v40 = __PAIR64__(v21, v20);
    DspLib::operator/(v41, (uint64_t *)&v40, a2);
    DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v41);
  }
  else
  {
    DspLib::ComplexMatrix::ComplexMatrix(a2, 0, 0);
  }
}

void sub_1BB2C667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a22);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a32);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a52);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a62);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v62 - 216));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v62 - 136));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&a10);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerModel::Algorithm::initialize(DspLib::LoudspeakerModel::Algorithm *this, uint64_t a2, double a3)
{
  *((void *)this + 1) = a2;
  *((double *)this + 3) = a3;
  if (*((_DWORD *)this + 125) == 1) {
    *((void *)this + 2) = a2;
  }
  *(unsigned char *)this = 1;
  DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)this, (float *)this + 8, 39);
}

void DspLib::LoudspeakerModel::Algorithm::setParameters(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  DspLib::LoudspeakerModel::Parameters::setBoundaries(a2, a3, a1 + 188, 39, a1 + 344);
  uint64_t v6 = v5 + 32;
  if ((float *)(v5 + 32) != a2) {
    DspLib::copy(a2, a3, (void *)(v5 + 32));
  }
  for (uint64_t i = 0; i != 156; i += 4)
  {
    float v8 = *(float *)(v5 + i + 188);
    float v9 = *(float *)(v5 + i + 344);
    float v10 = *(float *)(v5 + i + 32);
    if (v9 >= v10) {
      float v9 = *(float *)(v5 + i + 32);
    }
    if (v10 >= v8) {
      float v8 = v9;
    }
    *(float *)(v5 + i + 32) = v8;
  }
  if (*(unsigned char *)v5)
  {
    int v11 = DspLib::LoudspeakerModel::Parameters::mode((float *)(v5 + 32));
    *(_DWORD *)(v5 + 504) = v11;
    v162 = 0;
    v163 = 0;
    uint64_t v164 = 0;
    switch(v11)
    {
      case 0:
      case 4:
        goto LABEL_206;
      case 1:
        int v14 = *(_DWORD *)(v5 + 500);
        if (v14 == 2) {
          goto LABEL_14;
        }
        if (v14 != 1)
        {
          if (v14) {
            goto LABEL_184;
          }
LABEL_14:
          v13.i64[0] = *(void *)(v5 + 24);
          DspLib::LoudspeakerModel::calculateThieleSmallExcursionModelCoefficients((float *)(v5 + 32), (uint64_t)__p, v13);
          if (v161[24])
          {
            std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v162, 1uLL);
            std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v162, (char *)__p, (uint64_t)&v161[24], 2uLL);
          }
          goto LABEL_184;
        }
        v13.i64[0] = *(void *)(v5 + 24);
        DspLib::LoudspeakerModel::calculateThieleSmallExcursionModelCoefficients((float *)(v5 + 32), (uint64_t)__p, v13);
        long long v154 = *(_OWORD *)__p;
        v155[0] = *(_OWORD *)v161;
        *(_OWORD *)((char *)v155 + 12) = *(_OWORD *)&v161[12];
        DspLib::LoudspeakerModel::inversePressureModelForThieleSmall(v5 + 32, (uint64_t)&v154, (uint64_t)&__src, *(double *)(v5 + 24));
        if (v159[0])
        {
          std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v162, 1uLL);
          std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v162, (char *)&__src, (uint64_t)v159, 2uLL);
        }
        goto LABEL_184;
      case 2:
        int v67 = *(_DWORD *)(v5 + 500);
        if (v67 == 2) {
          goto LABEL_97;
        }
        if (v67 == 1)
        {
          LODWORD(__p[0]) = 1;
          std::vector<std::vector<DspLib::Biquad::Section>>::emplace_back<int,DspLib::Biquad::Section const&>((uint64_t *)&v162, (int *)__p, &DspLib::Biquad::kBypassSection);
          goto LABEL_184;
        }
        if (v67) {
          goto LABEL_184;
        }
LABEL_97:
        p_src = 0;
        v152 = 0;
        unint64_t v153 = 0;
        v148 = 0;
        v149 = 0;
        unint64_t v150 = 0;
        v145 = 0;
        v146 = 0;
        uint64_t v147 = 0;
        std::vector<float>::resize((uint64_t)&v145, 2uLL);
        uint64_t v69 = 0;
        unsigned int v70 = 0;
        char v71 = 1;
        do
        {
          uint64_t v72 = 0;
          char v142 = v71;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)v161 = 0;
          __src = 0;
          v157 = 0;
          v158[0] = 0;
          float v73 = *(float *)(v6 + 4 * v69 + 20);
          uint64_t v74 = v69 + 1;
          uint64_t v75 = v69 + 9;
          do
          {
            uint64_t v76 = v6 + 4 * (v74 + 2 * v72);
            float v78 = *(float *)(v76 + 20);
            float v77 = *(float *)(v76 + 24);
            uint64_t v79 = v6 + 4 * (v75 + 2 * v72);
            float v81 = *(float *)(v79 + 20);
            float v80 = *(float *)(v79 + 24);
            isEqual = (DspLib *)DspLib::isEqual(v68, v73, 0.0, 1.0e-20);
            if ((isEqual & 1) == 0)
            {
              isEqual = (DspLib *)DspLib::isEqual(isEqual, v78, 0.0, 1.0e-20);
              if (!isEqual
                || (isEqual = (DspLib *)DspLib::isEqual(isEqual, v77, 0.0, 1.0e-20), (isEqual & 1) == 0))
              {
                double v83 = (DspLib *)__p[1];
                if (__p[1] >= (void *)*(void *)v161)
                {
                  isEqual = (DspLib *)__p[0];
                  int64_t v85 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  unint64_t v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 61) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v87 = *(void *)v161 - (unint64_t)__p[0];
                  if ((uint64_t)(*(void *)v161 - (unint64_t)__p[0]) >> 2 > v86) {
                    unint64_t v86 = v87 >> 2;
                  }
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v88 = v86;
                  }
                  if (v88)
                  {
                    float64x2_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v161, v88);
                    isEqual = (DspLib *)__p[0];
                    double v83 = (DspLib *)__p[1];
                  }
                  else
                  {
                    float64x2_t v89 = 0;
                  }
                  float64x2_t v90 = (float *)&v89[8 * v85];
                  *float64x2_t v90 = v78;
                  v90[1] = v77;
                  float64x2_t v91 = v90;
                  if (v83 != isEqual)
                  {
                    do
                    {
                      uint64_t v92 = *((void *)v83 - 1);
                      double v83 = (DspLib *)((char *)v83 - 8);
                      *((void *)v91 - 1) = v92;
                      v91 -= 2;
                    }
                    while (v83 != isEqual);
                    isEqual = (DspLib *)__p[0];
                  }
                  double v84 = v90 + 2;
                  __p[0] = v91;
                  __p[1] = v90 + 2;
                  *(void *)v161 = &v89[8 * v88];
                  if (isEqual) {
                    operator delete(isEqual);
                  }
                }
                else
                {
                  *(float *)__p[1] = v78;
                  *((float *)v83 + 1) = v77;
                  double v84 = (char *)v83 + 8;
                }
                __p[1] = v84;
              }
            }
            int v68 = (DspLib *)DspLib::isEqual(isEqual, v73, 0.0, 1.0e-20);
            if ((v68 & 1) == 0)
            {
              int v68 = (DspLib *)DspLib::isEqual(v68, v81, 0.0, 1.0e-20);
              if (!v68
                || (int v68 = (DspLib *)DspLib::isEqual(v68, v80, 0.0, 1.0e-20), (v68 & 1) == 0))
              {
                float64x2_t v93 = v157;
                if ((unint64_t)v157 >= v158[0])
                {
                  int v68 = (DspLib *)__src;
                  uint64_t v95 = ((char *)v157 - (unsigned char *)__src) >> 3;
                  unint64_t v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 61) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v97 = v158[0] - (void)__src;
                  if ((uint64_t)(v158[0] - (void)__src) >> 2 > v96) {
                    unint64_t v96 = v97 >> 2;
                  }
                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v98 = v96;
                  }
                  if (v98)
                  {
                    double v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v158, v98);
                    int v68 = (DspLib *)__src;
                    float64x2_t v93 = v157;
                  }
                  else
                  {
                    double v99 = 0;
                  }
                  float64_t v100 = (float *)&v99[8 * v95];
                  *float64_t v100 = v81;
                  v100[1] = v80;
                  double v101 = v100;
                  if (v93 != (float *)v68)
                  {
                    do
                    {
                      uint64_t v102 = *((void *)v93 - 1);
                      v93 -= 2;
                      *((void *)v101 - 1) = v102;
                      v101 -= 2;
                    }
                    while (v93 != (float *)v68);
                    int v68 = (DspLib *)__src;
                  }
                  float64x2_t v94 = v100 + 2;
                  __src = v101;
                  v157 = v100 + 2;
                  v158[0] = &v99[8 * v98];
                  if (v68) {
                    operator delete(v68);
                  }
                }
                else
                {
                  float *v157 = v81;
                  v93[1] = v80;
                  float64x2_t v94 = v93 + 2;
                }
                v157 = v94;
              }
            }
            ++v72;
          }
          while (v72 != 4);
          if (__p[1] != __p[0])
          {
            float v103 = v152;
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v104 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>((uint64_t *)&p_src, (uint64_t)__p);
            }
            else
            {
              void *v152 = 0;
              v103[1] = 0;
              v103[2] = 0;
              std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v103, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
              uint64_t v104 = (uint64_t)(v103 + 3);
            }
            v152 = (void *)v104;
          }
          if (v157 != __src)
          {
            float v105 = v149;
            if ((unint64_t)v149 >= v150)
            {
              uint64_t v106 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>((uint64_t *)&v148, (uint64_t)&__src);
            }
            else
            {
              void *v149 = 0;
              v105[1] = 0;
              v105[2] = 0;
              std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v105, __src, (uint64_t)v157, ((char *)v157 - (unsigned char *)__src) >> 3);
              uint64_t v106 = (uint64_t)(v105 + 3);
            }
            v149 = (void *)v106;
          }
          if (__p[1] != __p[0] || (float v107 = v157, v157 != __src))
          {
            std::vector<float>::resize((uint64_t)&v145, v70 + 1);
            *((float *)v145 + v70) = v73;
            float v107 = (float *)__src;
            ++v70;
          }
          if (v107)
          {
            v157 = v107;
            operator delete(v107);
          }
          int v68 = (DspLib *)__p[0];
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          char v71 = 0;
          uint64_t v69 = 17;
        }
        while ((v142 & 1) != 0);
        std::vector<std::vector<DSPComplex>>::resize((uint64_t *)&p_src, v70);
        std::vector<std::vector<DSPComplex>>::resize((uint64_t *)&v148, v70);
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v162, (v146 - (unsigned char *)v145) >> 2);
        if (v163 == v162) {
          goto LABEL_181;
        }
        uint64_t v108 = 0;
        unsigned int v109 = 1;
        while (1)
        {
          DspLib::Biquad::Design::fromSDomain((uint64_t)p_src[3 * v108], ((unsigned char *)p_src[3 * v108 + 1] - (unsigned char *)p_src[3 * v108]) >> 3, v148[3 * v108], (v148[3 * v108 + 1] - v148[3 * v108]) >> 3, (float32x2_t **)__p, *((float *)v145 + v108), *(double *)(v5 + 24));
          v110 = v162;
          double v111 = &v162[24 * v108];
          float64_t v112 = *(void **)v111;
          if (*(void *)v111)
          {
            *(void *)&v162[24 * v108 + 8] = v112;
            operator delete(v112);
            *(void *)double v111 = 0;
            *((void *)v111 + 1) = 0;
            *((void *)v111 + 2) = 0;
          }
          *(_OWORD *)double v111 = *(_OWORD *)__p;
          *(void *)&v110[24 * v108 + 16] = *(void *)v161;
          uint64_t v65 = v162;
          if (*(void *)&v162[24 * v108 + 8] == *(void *)&v162[24 * v108]) {
            break;
          }
          uint64_t v108 = v109;
          BOOL v66 = 0xAAAAAAAAAAAAAAABLL * ((v163 - v162) >> 3) > v109++;
          if (!v66) {
            goto LABEL_181;
          }
        }
        double v117 = v163;
        if (v163 != v162)
        {
          double v118 = v163;
          do
          {
            uint64_t v120 = (void *)*((void *)v118 - 3);
            v118 -= 24;
            double v119 = v120;
            if (v120)
            {
              *((void *)v117 - 2) = v119;
              operator delete(v119);
            }
            double v117 = v118;
          }
          while (v118 != v65);
        }
        goto LABEL_180;
      case 3:
        p_src = 0;
        v152 = 0;
        unint64_t v153 = 0;
        v148 = 0;
        v149 = 0;
        unint64_t v150 = 0;
        v145 = 0;
        v146 = 0;
        uint64_t v147 = 0;
        std::vector<float>::resize((uint64_t)&v145, 2uLL);
        uint64_t v139 = v5;
        char v16 = 0;
        uint64_t v17 = 0;
        unsigned int v18 = 0;
        char v19 = 1;
        do
        {
          char v140 = v19;
          unsigned int v141 = v18;
          uint64_t v20 = 0;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)v161 = 0;
          __src = 0;
          v157 = 0;
          v158[0] = 0;
          int v21 = 17 * v17;
          float v22 = *(float *)(v6 + 68 * v17 + 20);
          unsigned int v23 = DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMaxNumPolesPerChannel[v17];
          if (v23 <= 1) {
            uint64_t v24 = 1;
          }
          else {
            uint64_t v24 = v23;
          }
          do
          {
            int v25 = v21 + 1 + 2 * v20;
            float v26 = *(float *)(v6 + 4 * (v25 + 5));
            float v27 = *(float *)(v6 + 4 * (v25 + 6));
            float v15 = (DspLib *)DspLib::isEqual(v15, v22, 0.0, 1.0e-20);
            if ((v15 & 1) == 0)
            {
              float v15 = (DspLib *)DspLib::isEqual(v15, v26, 0.0, 1.0e-20);
              if (!v15
                || (float v15 = (DspLib *)DspLib::isEqual(v15, v27, 0.0, 1.0e-20), (v15 & 1) == 0))
              {
                int v28 = (DspLib *)__p[1];
                if (__p[1] >= (void *)*(void *)v161)
                {
                  float v15 = (DspLib *)__p[0];
                  int64_t v30 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 61) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v32 = *(void *)v161 - (unint64_t)__p[0];
                  if ((uint64_t)(*(void *)v161 - (unint64_t)__p[0]) >> 2 > v31) {
                    unint64_t v31 = v32 >> 2;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v161, v33);
                    float v15 = (DspLib *)__p[0];
                    int v28 = (DspLib *)__p[1];
                  }
                  else
                  {
                    int v34 = 0;
                  }
                  BOOL v35 = (float *)&v34[8 * v30];
                  *BOOL v35 = v26;
                  v35[1] = v27;
                  uint64_t v36 = v35;
                  if (v28 != v15)
                  {
                    do
                    {
                      uint64_t v37 = *((void *)v28 - 1);
                      int v28 = (DspLib *)((char *)v28 - 8);
                      *((void *)v36 - 1) = v37;
                      v36 -= 2;
                    }
                    while (v28 != v15);
                    float v15 = (DspLib *)__p[0];
                  }
                  uint64_t v29 = v35 + 2;
                  __p[0] = v36;
                  __p[1] = v35 + 2;
                  *(void *)v161 = &v34[8 * v33];
                  if (v15) {
                    operator delete(v15);
                  }
                }
                else
                {
                  *(float *)__p[1] = v26;
                  *((float *)v28 + 1) = v27;
                  uint64_t v29 = (char *)v28 + 8;
                }
                __p[1] = v29;
              }
            }
            ++v20;
          }
          while (v20 != v24);
          if ((v16 & 1) == 0)
          {
            uint64_t v38 = 0;
            unsigned int v39 = DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMaxNumZerosPerChannel[v17];
            if (v39 <= 1) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = v39;
            }
            do
            {
              int v41 = v21 + 9 + 2 * v38;
              float v42 = *(float *)(v6 + 4 * (v41 + 5));
              float v43 = *(float *)(v6 + 4 * (v41 + 6));
              float v15 = (DspLib *)DspLib::isEqual(v15, v22, 0.0, 1.0e-20);
              if ((v15 & 1) == 0)
              {
                float v15 = (DspLib *)DspLib::isEqual(v15, v42, 0.0, 1.0e-20);
                if (!v15
                  || (float v15 = (DspLib *)DspLib::isEqual(v15, v43, 0.0, 1.0e-20), (v15 & 1) == 0))
                {
                  BOOL v44 = v157;
                  if ((unint64_t)v157 >= v158[0])
                  {
                    float v15 = (DspLib *)__src;
                    uint64_t v46 = ((char *)v157 - (unsigned char *)__src) >> 3;
                    unint64_t v47 = v46 + 1;
                    if ((unint64_t)(v46 + 1) >> 61) {
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v48 = v158[0] - (void)__src;
                    if ((uint64_t)(v158[0] - (void)__src) >> 2 > v47) {
                      unint64_t v47 = v48 >> 2;
                    }
                    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v49 = v47;
                    }
                    if (v49)
                    {
                      long long v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v158, v49);
                      float v15 = (DspLib *)__src;
                      BOOL v44 = v157;
                    }
                    else
                    {
                      long long v50 = 0;
                    }
                    long long v51 = (float *)&v50[8 * v46];
                    *long long v51 = v42;
                    v51[1] = v43;
                    DSPSplitComplex v52 = v51;
                    if (v44 != (float *)v15)
                    {
                      do
                      {
                        uint64_t v53 = *((void *)v44 - 1);
                        v44 -= 2;
                        *((void *)v52 - 1) = v53;
                        v52 -= 2;
                      }
                      while (v44 != (float *)v15);
                      float v15 = (DspLib *)__src;
                    }
                    DSPSplitComplex v45 = v51 + 2;
                    __src = v52;
                    v157 = v51 + 2;
                    v158[0] = &v50[8 * v49];
                    if (v15) {
                      operator delete(v15);
                    }
                  }
                  else
                  {
                    float *v157 = v42;
                    v44[1] = v43;
                    DSPSplitComplex v45 = v44 + 2;
                  }
                  v157 = v45;
                }
              }
              ++v38;
            }
            while (v38 != v40);
          }
          unsigned int v18 = v141;
          if (__p[1] != __p[0])
          {
            int v54 = v152;
            if ((unint64_t)v152 >= v153)
            {
              uint64_t v55 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>((uint64_t *)&p_src, (uint64_t)__p);
            }
            else
            {
              void *v152 = 0;
              v54[1] = 0;
              v54[2] = 0;
              std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v54, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
              uint64_t v55 = (uint64_t)(v54 + 3);
            }
            v152 = (void *)v55;
          }
          if (v157 != __src)
          {
            long long v56 = v149;
            if ((unint64_t)v149 >= v150)
            {
              uint64_t v57 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>((uint64_t *)&v148, (uint64_t)&__src);
            }
            else
            {
              void *v149 = 0;
              v56[1] = 0;
              v56[2] = 0;
              std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v56, __src, (uint64_t)v157, ((char *)v157 - (unsigned char *)__src) >> 3);
              uint64_t v57 = (uint64_t)(v56 + 3);
            }
            v149 = (void *)v57;
          }
          if (__p[1] != __p[0] || (long long v58 = v157, v157 != __src))
          {
            std::vector<float>::resize((uint64_t)&v145, v141 + 1);
            *((float *)v145 + v141) = v22;
            long long v58 = (float *)__src;
            unsigned int v18 = v141 + 1;
          }
          if (v58)
          {
            v157 = v58;
            operator delete(v58);
          }
          float v15 = (DspLib *)__p[0];
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          char v19 = 0;
          char v16 = 1;
          uint64_t v17 = 1;
        }
        while ((v140 & 1) != 0);
        std::vector<std::vector<DSPComplex>>::resize((uint64_t *)&p_src, v18);
        uint64_t v5 = v139;
        std::vector<std::vector<DSPComplex>>::resize((uint64_t *)&v148, v18);
        int v59 = *(_DWORD *)(v139 + 500);
        if (v59 == 2) {
          goto LABEL_87;
        }
        if (v59 == 1)
        {
          DspLib::LoudspeakerModel::inversePressurFilterForSdomain_1_Parameters((uint64_t **)&p_src, &v148, (uint64_t)v145, (v146 - (unsigned char *)v145) >> 2, vcvtas_u32_f32(*(float *)(v139 + 172)), (uint64_t *)&v162, *(float *)(v139 + 180), *(float *)(v139 + 184), *(float *)(v139 + 36), *(double *)(v139 + 24));
        }
        else
        {
          if (v59) {
            goto LABEL_181;
          }
LABEL_87:
          std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v162, (v146 - (unsigned char *)v145) >> 2);
          if (v163 != v162)
          {
            uint64_t v60 = 0;
            unsigned int v61 = 1;
            while (1)
            {
              DspLib::Biquad::Design::fromSDomain((uint64_t)p_src[3 * v60], ((unsigned char *)p_src[3 * v60 + 1] - (unsigned char *)p_src[3 * v60]) >> 3, v148[3 * v60], (v148[3 * v60 + 1] - v148[3 * v60]) >> 3, (float32x2_t **)__p, *((float *)v145 + v60), *(double *)(v139 + 24));
              uint64_t v62 = v162;
              long long v63 = &v162[24 * v60];
              long long v64 = *(void **)v63;
              if (*(void *)v63)
              {
                *(void *)&v162[24 * v60 + 8] = v64;
                operator delete(v64);
                *(void *)long long v63 = 0;
                *((void *)v63 + 1) = 0;
                *((void *)v63 + 2) = 0;
              }
              *(_OWORD *)long long v63 = *(_OWORD *)__p;
              *(void *)&v62[24 * v60 + 16] = *(void *)v161;
              uint64_t v65 = v162;
              if (*(void *)&v162[24 * v60 + 8] == *(void *)&v162[24 * v60]) {
                break;
              }
              uint64_t v60 = v61;
              BOOL v66 = 0xAAAAAAAAAAAAAAABLL * ((v163 - v162) >> 3) > v61++;
              if (!v66) {
                goto LABEL_181;
              }
            }
            double v113 = v163;
            if (v163 != v162)
            {
              float64_t v114 = v163;
              do
              {
                double v116 = (void *)*((void *)v114 - 3);
                v114 -= 24;
                double v115 = v116;
                if (v116)
                {
                  *((void *)v113 - 2) = v115;
                  operator delete(v115);
                }
                double v113 = v114;
              }
              while (v114 != v65);
            }
LABEL_180:
            v163 = v65;
          }
        }
LABEL_181:
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        __p[0] = &v148;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &p_src;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_184:
        int v121 = (uint64_t *)v162;
        if (*(_DWORD *)(v5 + 500) == 1)
        {
          float v122 = (DspLib::Biquad::Design *)(vcvtas_u32_f32(*(float *)(v5 + 40)) - 2);
          BOOL v123 = !v122 || v163 == v162;
          if (!v123 && *((void *)v162 + 1) != *(void *)v162)
          {
            float v124 = *(double *)(v5 + 24);
            DspLib::Biquad::Design::butterworthHighPass(v122, *(float *)(v5 + 36), v124, 0, (float **)__p);
            unint64_t v125 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v162 + 1) - *(void *)v162) >> 2);
            std::vector<DspLib::Biquad::Section>::resize((uint64_t)v162, v125 - 0x3333333333333333 * (((char *)__p[1] - (char *)__p[0]) >> 2));
            uint64_t v126 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              uint64_t v127 = 0;
              unsigned int v128 = 1;
              unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL;
              uint64_t v126 = (char *)__p[0];
              do
              {
                float v129 = &v126[20 * v127];
                uint64_t v130 = *(void *)v162 + 20 * (v127 + v125);
                long long v131 = *(_OWORD *)v129;
                *(_DWORD *)(v130 + 16) = *((_DWORD *)v129 + 4);
                *(_OWORD *)uint64_t v130 = v131;
                uint64_t v127 = v128;
                uint64_t v126 = (char *)__p[0];
                BOOL v66 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 2) > v128++;
              }
              while (v66);
            }
            if (v126)
            {
              __p[1] = v126;
              operator delete(v126);
            }
            int v121 = (uint64_t *)v162;
          }
        }
        uint64_t v132 = -1431655765 * ((unint64_t)(v163 - (char *)v121) >> 3);
        uint64_t v133 = v132 * *(void *)(v5 + 8);
        *(void *)(v5 + 16) = v133;
        if (v133)
        {
          if (v132 == 2)
          {
            uint64_t v134 = v121[3];
            unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v121[4] - v134) >> 2);
            char v135 = 1;
          }
          else
          {
            char v135 = 0;
            uint64_t v134 = 0;
          }
          uint64_t v136 = *v121;
          vDSP_Length v137 = 0xCCCCCCCCCCCCCCCDLL * ((v121[1] - *v121) >> 2);
          v143[0] = v134;
          v143[1] = v12;
          char v144 = v135;
          DspLib::LoudspeakerModel::Algorithm::initializeFilters((vDSP_Length *)v5, v136, v137, (uint64_t)v143);
          float v138 = *(double *)(v5 + 24) * 0.49;
          DspLib::ramp((float *)__p, 0xAuLL, 1, 20.0, v138);
          __src = 0;
          v157 = 0;
          v158[0] = 0;
          DspLib::LoudspeakerModel::Algorithm::frequencyResponse(v5, (const float *)__p, 0xAuLL, (uint64_t *)&__src);
          if (DspLib::maxv(*(const float **)__src, (uint64_t)(*((void *)__src + 1) - *(void *)__src) >> 2) >= 60.0
            || (DspLib::Biquad::validate(*(long long **)v162, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v162 + 1) - *(void *)v162) >> 2)) & 1) == 0)
          {
            DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 512));
            DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 584));
          }
          p_src = &__src;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&p_src);
        }
        else
        {
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 512));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 584));
        }
        DspLib::LoudspeakerModel::Algorithm::setProcessFunction((DspLib::LoudspeakerModel::Algorithm *)v5);
LABEL_206:
        __p[0] = &v162;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        break;
      default:
        goto LABEL_184;
    }
  }
}

void sub_1BB2C75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  a37 = (uint64_t *)&a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a37 = &a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a37 = (uint64_t *)(v38 - 176);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerModel::Algorithm::initializeFilters(vDSP_Length *a1, uint64_t a2, vDSP_Length a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 64);
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 64), a1[1], a3);
  DspLib::Biquad::Filter::setCoefficients(v8, a2, a3, 0, 0x41uLL);
  if (*(unsigned char *)(a4 + 16))
  {
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 73), a1[1], *(void *)(a4 + 8));
    uint64_t v9 = *(void *)a4;
    uint64_t v10 = *(void *)(a4 + 8);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)(a1 + 73), v9, v10, 0, 0x41uLL);
  }
  else
  {
    DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 73));
  }
}

void *DspLib::LoudspeakerModel::Algorithm::setProcessFunction(DspLib::LoudspeakerModel::Algorithm *this)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 584))
  {
    uint64_t v1 = (void *)((char *)this + 656);
    if (*((_DWORD *)this + 126) == 3) {
      unint64_t v2 = &unk_1F14A74A0;
    }
    else {
      unint64_t v2 = &unk_1F14A7520;
    }
  }
  else
  {
    uint64_t v1 = (void *)((char *)this + 656);
    unint64_t v2 = &unk_1F14A7410;
  }
  v4[0] = v2;
  v4[1] = this;
  v4[3] = v4;
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::swap[abi:ne180100](v4, v1);
  return std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](v4);
}

float *DspLib::LoudspeakerModel::calculateThieleSmallExcursionModelCoefficients@<X0>(float *result@<X0>, uint64_t a2@<X8>, int8x16_t a3@<Q0>)
{
  double v4 = result[15] * result[15];
  if (v4 == 0.0) {
    goto LABEL_6;
  }
  uint64_t v5 = result;
  double v6 = result[13];
  double v7 = v6 * v6;
  if (v6 * v6 == 0.0) {
    goto LABEL_6;
  }
  float v8 = result[12];
  if (v8 == 0.0) {
    goto LABEL_6;
  }
  double v9 = result[14] / 140002.31 / v4;
  if (v9 == 0.0) {
    goto LABEL_6;
  }
  double v10 = result[9];
  double v11 = result[11];
  double v12 = v8;
  double v13 = *(double *)a3.i64 * *(double *)a3.i64;
  double v14 = *(double *)a3.i64 * *(double *)a3.i64 * *(double *)a3.i64;
  double v15 = result[5] / v7;
  double v16 = result[6] / v7;
  double v17 = 1.0 / v12 + 1.0 / v9;
  double v18 = v16 * v10;
  double v19 = v16 * v11 + v15 * v10;
  double v20 = v16 * v17 + v15 * v11 + 1.0;
  double v21 = v15 * v17;
  double v22 = (*(double *)a3.i64 + *(double *)a3.i64) * v20;
  double v23 = v13 * 4.0;
  double v24 = v15 * v17 + v22 + v13 * 4.0 * v19 + v14 * 8.0 * v18;
  if (v24 == 0.0)
  {
LABEL_6:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
  }
  else
  {
    double v25 = v21 - v22 + v23 * v19 - v14 * 8.0 * v18;
    double v26 = v14 * 24.0;
    double v27 = 1.0 / v24;
    double v28 = (v22 + v21 * 3.0 - v23 * v19 - v26 * v18) * (1.0 / v24);
    double v29 = (-(v22 - v21 * 3.0) - v23 * v19 + v26 * v18) * (1.0 / v24);
    double v30 = (v29 - v28 * v28 / 3.0) * ((v29 - v28 * v28 / 3.0) * (v29 - v28 * v28 / 3.0));
    double v31 = v25 * (1.0 / v24) + v28 * (v28 * (v28 + v28)) / 27.0 - v28 * v29 / 3.0;
    double v32 = sqrt(fabs(v30 / 27.0 + v31 * v31 * 0.25));
    double v33 = v31 * -0.5;
    *(double *)a3.i64 = v31 * -0.5 + v32;
    double v34 = 0.0;
    double v35 = 0.0;
    if (*(double *)a3.i64 != 0.0)
    {
      int8x16_t v54 = a3;
      long double v36 = log(fabs(*(double *)a3.i64));
      *(double *)a3.i64 = exp(v36 * 0.333333343);
      double v34 = 0.0;
      v37.f64[0] = NAN;
      v37.f64[1] = NAN;
      *(void *)&double v35 = vbslq_s8((int8x16_t)vnegq_f64(v37), a3, v54).u64[0];
    }
    *(double *)a3.i64 = v33 - v32;
    if (v33 - v32 != 0.0)
    {
      int8x16_t v53 = a3;
      double v55 = v35;
      long double v38 = log(fabs(*(double *)a3.i64));
      *(double *)v39.i64 = exp(v38 * 0.333333343);
      double v35 = v55;
      v40.f64[0] = NAN;
      v40.f64[1] = NAN;
      *(void *)&double v34 = vbslq_s8((int8x16_t)vnegq_f64(v40), v39, v53).u64[0];
    }
    double v41 = v28 / -3.0 + v35 + v34;
    double v42 = v28 / -3.0 - (v35 + v34) * 0.5;
    double v43 = 0.9999;
    if (v41 <= 0.9999) {
      double v43 = v28 / -3.0 + v35 + v34;
    }
    if (v41 >= -0.9999) {
      double v44 = v43;
    }
    else {
      double v44 = -0.9999;
    }
    double v45 = 0.999;
    if (v42 <= 0.999) {
      double v45 = v28 / -3.0 - (v35 + v34) * 0.5;
    }
    if (v42 >= -0.9999) {
      double v46 = v45;
    }
    else {
      double v46 = -0.9999;
    }
    float v47 = v27 / v6 * 8.0;
    *(void *)&long long v56 = COERCE_UNSIGNED_INT((float)(v5[16] * v47) / v5[17]);
    DWORD2(v56) = 0;
    float v48 = v44;
    *((float *)&v56 + 3) = -v48;
    long long v57 = xmmword_1BB873F80;
    *(float *)&unsigned int v49 = v46 * -2.0;
    *(float *)&unsigned int v50 = (v35 - v34) * 1.73205081 * 0.5 * ((v35 - v34) * 1.73205081 * 0.5) + v46 * v46;
    unint64_t v58 = __PAIR64__(v50, v49);
    unint64_t result = (float *)DspLib::Biquad::validate(&v56, 2);
    if (result)
    {
      long long v51 = v57;
      *(_OWORD *)a2 = v56;
      *(_OWORD *)(a2 + 16) = v51;
      *(void *)(a2 + 32) = v58;
      char v52 = 1;
    }
    else
    {
      char v52 = 0;
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 40) = v52;
  }
  return result;
}

void std::vector<std::vector<DspLib::Biquad::Section>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DspLib::Biquad::Section>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        double v10 = *(void **)(v8 - 24);
        v8 -= 24;
        double v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t DspLib::LoudspeakerModel::inversePressureModelForThieleSmall@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = 0;
    float v7 = *(float *)(a2 + 32);
    float v6 = *(float *)(a2 + 36);
    do
    {
      uint64_t v8 = (char *)&v14 + v5;
      *(_DWORD *)uint64_t v8 = 1065353216;
      *(void *)(v8 + 12) = 0;
      *(void *)(v8 + 4) = 0;
      v5 += 20;
    }
    while (v5 != 40);
    LODWORD(v14) = 1065353216;
    *((float *)&v14 + 1) = v7;
    *((void *)&v14 + 1) = LODWORD(v6);
    LODWORD(v15) = 0;
    float v9 = a4;
    DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, *(float *)(result + 4), 45.0, v9, (uint64_t)&v15 + 4);
    float v10 = (float)((float)(*((float *)&v15 + 1) - *((float *)&v15 + 2)) + *((float *)&v15 + 3))
        / (float)((float)(1.0 - *(float *)&v16) + *((float *)&v16 + 1));
    float v11 = 1.0 / (float)((float)(1.0 - v7) + v6);
    *(float *)&long long v14 = v11;
    *((float *)&v14 + 1) = v11 * v7;
    *((float *)&v14 + 2) = v11 * v6;
    *((float *)&v15 + 1) = *((float *)&v15 + 1) * (float)(1.0 / v10);
    *((float *)&v15 + 2) = (float)(1.0 / v10) * *((float *)&v15 + 2);
    *((float *)&v15 + 3) = (float)(1.0 / v10) * *((float *)&v15 + 3);
    unint64_t result = DspLib::Biquad::validate(&v14, 2);
    if (result)
    {
      long long v12 = v15;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v12;
      *(void *)(a3 + 32) = v16;
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 40) = v13;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  return result;
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::emplace_back<int,DspLib::Biquad::Section const&>(uint64_t *a1, int *a2, long long *a3)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t v5 = std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>(a1, a2, a3);
  }
  else
  {
    std::vector<DspLib::Biquad::Section>::vector((void *)a1[1], *a2, a3);
    uint64_t v5 = v4 + 24;
    a1[1] = v4 + 24;
  }
  a1[1] = v5;
  return v5 - 24;
}

void sub_1BB2C7E30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerModel::inversePressurFilterForSdomain_1_Parameters(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, double a7, double a8, double a9, double a10)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (a4 != 2
    || (long long v12 = *a1, (char *)a1[1] - (char *)*a1 != 48)
    || (long long v14 = *a2, (char *)a2[1] - (char *)*a2 != 48)
    || ((v15 = (float *)v12[3], v12[4] - (void)v15 == 8) ? (BOOL v16 = v14[4] == v14[3]) : (BOOL v16 = 0), !v16))
  {
    *(_DWORD *)__src = 1;
    unint64_t v17 = a6[1];
    if (v17 >= a6[2])
    {
      uint64_t v18 = std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>(a6, (int *)__src, &DspLib::Biquad::kBypassSection);
    }
    else
    {
      std::vector<DspLib::Biquad::Section>::vector((void *)a6[1], 1uLL, &DspLib::Biquad::kBypassSection);
      uint64_t v18 = v17 + 24;
      a6[1] = v17 + 24;
    }
    a6[1] = v18;
    return;
  }
  double v21 = *v15;
  double v22 = v21 * -2.0;
  double v23 = (v15[1] * v15[1] + v21 * v21 + (double)a5 * *(float *)(a3 + 4) * (a8 / a7)) * -4.0 + v22 * v22;
  if (v23 < 0.0) {
    double v24 = 0.0;
  }
  else {
    double v24 = 1.0;
  }
  if (v23 >= 0.0) {
    double v25 = 0.0;
  }
  else {
    double v25 = 1.0;
  }
  __p = 0;
  uint64_t v97 = 0;
  unint64_t v98 = 0;
  float64x2_t v94 = 0;
  uint64_t v95 = 0;
  float64x2_t v93 = 0;
  uint64_t v26 = *v12;
  if (v12[1] != *v12)
  {
    double v27 = 0;
    uint64_t v28 = 0;
    unsigned int v29 = 0;
    do
    {
      if (v27 >= v95)
      {
        uint64_t v30 = (v27 - (unsigned char *)v93) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = (v95 - (unsigned char *)v93) >> 2;
        if (v31 <= v30 + 1) {
          unint64_t v31 = v30 + 1;
        }
        if ((unint64_t)(v95 - (unsigned char *)v93) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          double v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v95, v32);
        }
        else {
          double v33 = 0;
        }
        double v34 = &v33[8 * v30];
        *(void *)double v34 = *(void *)(v26 + 8 * v28);
        double v27 = v34 + 8;
        long double v36 = (char *)v93;
        double v35 = v94;
        if (v94 != v93)
        {
          do
          {
            uint64_t v37 = *((void *)v35 - 1);
            v35 -= 8;
            *((void *)v34 - 1) = v37;
            v34 -= 8;
          }
          while (v35 != v36);
          double v35 = (char *)v93;
        }
        float64x2_t v93 = v34;
        float64x2_t v94 = v27;
        uint64_t v95 = &v33[8 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)double v27 = *(void *)(v26 + 8 * v28);
        v27 += 8;
      }
      float64x2_t v94 = v27;
      uint64_t v26 = **a1;
      uint64_t v28 = ++v29;
    }
    while (v29 < (unint64_t)(((*a1)[1] - v26) >> 3));
    long long v14 = *a2;
  }
  uint64_t v38 = *v14;
  if (v14[1] == *v14)
  {
    double v41 = v97;
  }
  else
  {
    uint64_t v39 = 0;
    unsigned int v40 = 0;
    double v41 = v97;
    do
    {
      if (v41 >= v98)
      {
        uint64_t v42 = ((char *)v41 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = ((char *)v98 - (unsigned char *)__p) >> 2;
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        if ((unint64_t)((char *)v98 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          double v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v98, v44);
        }
        else {
          double v45 = 0;
        }
        double v46 = (float *)&v45[8 * v42];
        *(void *)double v46 = *(void *)(v38 + 8 * v39);
        double v41 = v46 + 2;
        float v48 = (char *)__p;
        float v47 = (char *)v97;
        if (v97 != __p)
        {
          do
          {
            uint64_t v49 = *((void *)v47 - 1);
            v47 -= 8;
            *((void *)v46 - 1) = v49;
            v46 -= 2;
          }
          while (v47 != v48);
          float v47 = (char *)__p;
        }
        __p = v46;
        uint64_t v97 = v41;
        unint64_t v98 = (float *)&v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(void *)double v41 = *(void *)(v38 + 8 * v39);
        v41 += 2;
      }
      uint64_t v97 = v41;
      uint64_t v38 = **a2;
      uint64_t v39 = ++v40;
    }
    while (v40 < (unint64_t)(((*a2)[1] - v38) >> 3));
  }
  double v50 = sqrt(fabs(v23)) * 0.5;
  float v51 = v22 * -0.5 + v50 * v24;
  float v52 = v50 * v25;
  if (v41 >= v98)
  {
    int8x16_t v54 = (float *)__p;
    uint64_t v55 = ((char *)v41 - (unsigned char *)__p) >> 3;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 61) {
      goto LABEL_104;
    }
    uint64_t v57 = (char *)v98 - (unsigned char *)__p;
    if (((char *)v98 - (unsigned char *)__p) >> 2 > v56) {
      unint64_t v56 = v57 >> 2;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58)
    {
      int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v98, v58);
      int8x16_t v54 = (float *)__p;
      double v41 = v97;
    }
    else
    {
      int v59 = 0;
    }
    uint64_t v60 = (float *)&v59[8 * v55];
    unsigned int v61 = &v59[8 * v58];
    *uint64_t v60 = v51;
    v60[1] = v52;
    int8x16_t v53 = v60 + 2;
    if (v41 != v54)
    {
      do
      {
        uint64_t v62 = *((void *)v41 - 1);
        v41 -= 2;
        *((void *)v60 - 1) = v62;
        v60 -= 2;
      }
      while (v41 != v54);
      int8x16_t v54 = (float *)__p;
    }
    __p = v60;
    uint64_t v97 = v53;
    unint64_t v98 = (float *)v61;
    if (v54) {
      operator delete(v54);
    }
  }
  else
  {
    *double v41 = v51;
    v41[1] = v52;
    int8x16_t v53 = v41 + 2;
  }
  uint64_t v97 = v53;
  long long v63 = (void *)(*a1)[3];
  long long v64 = v94;
  if (v94 >= v95)
  {
    uint64_t v66 = (v94 - (unsigned char *)v93) >> 3;
    if (!((unint64_t)(v66 + 1) >> 61))
    {
      unint64_t v67 = (v95 - (unsigned char *)v93) >> 2;
      if (v67 <= v66 + 1) {
        unint64_t v67 = v66 + 1;
      }
      if ((unint64_t)(v95 - (unsigned char *)v93) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68) {
        uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v95, v68);
      }
      else {
        uint64_t v69 = 0;
      }
      unsigned int v70 = &v69[8 * v66];
      char v71 = &v69[8 * v68];
      *(void *)unsigned int v70 = *v63;
      uint64_t v65 = v70 + 8;
      float v73 = (char *)v93;
      uint64_t v72 = v94;
      if (v94 != v93)
      {
        do
        {
          uint64_t v74 = *((void *)v72 - 1);
          v72 -= 8;
          *((void *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v72 != v73);
        uint64_t v72 = (char *)v93;
      }
      float64x2_t v93 = v70;
      float64x2_t v94 = v65;
      uint64_t v95 = v71;
      if (v72) {
        operator delete(v72);
      }
      goto LABEL_92;
    }
LABEL_104:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  *(void *)float64x2_t v94 = *v63;
  uint64_t v65 = v64 + 8;
LABEL_92:
  float64x2_t v94 = v65;
  memset(v92, 0, sizeof(v92));
  memset(v91, 0, sizeof(v91));
  std::vector<std::vector<DspLib::Biquad::Section>>::resize(a6, 1uLL);
  DspLib::Biquad::Design::fromSDomain((uint64_t)__p, ((char *)v97 - (unsigned char *)__p) >> 3, (uint64_t)v93, (v65 - (unsigned char *)v93) >> 3, (float32x2_t **)__src, 1.0, a10);
  uint64_t v75 = (void *)*a6;
  uint64_t v76 = *(void **)*a6;
  if (v76)
  {
    v75[1] = v76;
    operator delete(v76);
    *uint64_t v75 = 0;
    v75[1] = 0;
    v75[2] = 0;
  }
  *(_OWORD *)uint64_t v75 = *(_OWORD *)__src;
  v75[2] = *(void *)&__src[16];
  float v77 = (char *)*a6;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a6 + 8) - *(void *)*a6) >> 2) > 2)
  {
    float v78 = a9;
    float v79 = a10;
    DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, v78, 100.0, v79, (uint64_t)v89);
    uint64_t v80 = *a6;
    uint64_t v81 = *(void *)*a6;
    *(void *)(v81 + 52) = v90;
    float v82 = a10 * 0.5;
    float v88 = v82;
    __src[0] = 0;
    *(_OWORD *)&__src[8] = 0u;
    long long v100 = 0u;
    memset(v101, 0, sizeof(v101));
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)__src, 1uLL, 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v80 + 8) - v81) >> 2));
    DspLib::Biquad::Filter::setCoefficients((uint64_t)__src, *(void *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a6 + 8) - *(void *)*a6) >> 2), 0, 0x41uLL);
    float v87 = 0.0;
    DspLib::Biquad::amplitudeResponse(__src, (uint64_t)&v88, 1uLL, (uint64_t)&v87, 1, 0, a10, v83, v84);
    int64_t v85 = *(float32x2_t **)*a6;
    float v86 = 1.0 / v87;
    *int64_t v85 = vmul_n_f32(*v85, 1.0 / v87);
    v85[1].f32[0] = v86 * v85[1].f32[0];
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v101[8]);
    if ((void)v100)
    {
      *((void *)&v100 + 1) = v100;
      operator delete((void *)v100);
    }
  }
  else
  {
    *(_DWORD *)&__src[16] = 0;
    *(_OWORD *)__src = xmmword_1BB873FB4;
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v77, __src, (uint64_t)&__src[20], 1uLL);
  }
  *(void *)__src = v91;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  *(void *)__src = v92;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  if (v93)
  {
    float64x2_t v94 = (char *)v93;
    operator delete(v93);
  }
  if (__p)
  {
    uint64_t v97 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1BB2C8574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudspeakerModel::Algorithm::frequencyResponse(uint64_t a1, const float *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 512))
  {
    uint64_t v8 = (void *)(a1 + 512);
    float v9 = (void *)(a1 + 584);
    if (*(unsigned char *)(a1 + 584)) {
      unint64_t v10 = 3;
    }
    else {
      unint64_t v10 = 1;
    }
    std::vector<std::vector<float>>::resize(a4, v10);
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    while (v14 != v15)
    {
      std::vector<float>::resize(v14, a3);
      v14 += 24;
    }
    int v16 = *(_DWORD *)(a1 + 500);
    if (v16)
    {
      if (v16 == 1)
      {
        DspLib::Biquad::amplitudeResponse(v8, (uint64_t)a2, a3, *(void *)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2, 0, *(double *)(a1 + 24), v12, v13);
      }
      else if (v16 == 2)
      {
        int v17 = *(_DWORD *)(a1 + 504);
        switch(v17)
        {
          case 1:
            DspLib::Biquad::amplitudeResponse(v8, (uint64_t)a2, a3, *(void *)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2, 0, *(double *)(a1 + 24), v12, v13);
            break;
          case 2:
            std::vector<std::vector<float>>::resize(a4, 1uLL);
            std::vector<float>::resize(*a4, a3);
            DspLib::clear(*(float **)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2);
            break;
          case 3:
            std::vector<std::vector<float>>::resize(a4, 1uLL);
            std::vector<float>::resize(*a4, a3);
            DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__A, 0, 0);
            DspLib::Biquad::complexResponse(v8, (uint64_t)a2, a3, (DspLib::ComplexVector *)&__A, 0, *(double *)(a1 + 24), v18, v19);
            DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v61, 0, 0);
            DspLib::Biquad::complexResponse(v9, (uint64_t)a2, a3, (DspLib::ComplexVector *)v61, 0, *(double *)(a1 + 24), v20, v21);
            float v22 = *(float *)(a1 + 180);
            float v23 = *(float *)(a1 + 184) / v22;
            BOOL v24 = v22 == 0.0;
            float v25 = 1.0;
            if (!v24) {
              float v25 = v23;
            }
            DspLib::operator*=(v61, *(float *)(a1 + 172) * v25);
            DspLib::operator*=(v61, &__A);
            DspLib::operator+=(&__A, v61);
            vDSP_zvabs(&__A, 1, *(float **)*a4, 1, v63);
            DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v61);
            DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__A);
            break;
        }
        DspLib::multiply(*(float **)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2, a2);
        DspLib::multiply(*(float **)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2, a2);
        float v46 = DspLib::maxv(*(const float **)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2);
        if (v46 == 0.0) {
          float v47 = 1.0;
        }
        else {
          float v47 = 1.0 / v46;
        }
        DspLib::multiply(*(float **)*a4, (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2, v47);
      }
    }
    else
    {
      MEMORY[0x1F4188790](v11);
      uint64_t v30 = (char *)&v60[-1] - v29;
      if (v28 >= 0x200) {
        size_t v31 = 512;
      }
      else {
        size_t v31 = v28;
      }
      bzero((char *)&v60[-1] - v29, v31);
      double v34 = (void *)*a4;
      double v35 = (void *)a4[1];
      if (v35 == (void *)*a4) {
        goto LABEL_29;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *a4) >> 3);
      uint64_t v38 = (uint64_t *)*a4;
      do
      {
        uint64_t v39 = *v38;
        v38 += 3;
        *(void *)&v30[8 * v36++] = v39;
      }
      while (v37 > v36);
      if (v35 == v34) {
LABEL_29:
      }
        uint64_t v40 = 0;
      else {
        uint64_t v40 = (uint64_t)(v34[1] - *v34) >> 2;
      }
      double v41 = *(void **)v30;
      DspLib::Biquad::amplitudeResponse(v8, (uint64_t)a2, a3, *(void *)v30, v40, 0, *(double *)(a1 + 24), v32, v33);
      if (*(unsigned char *)(a1 + 584))
      {
        unint64_t v44 = (float *)*((void *)v30 + 2);
        DspLib::Biquad::amplitudeResponse(v9, (uint64_t)a2, a3, (uint64_t)v44, v40, 0, *(double *)(a1 + 24), v42, v43);
        double v45 = (float *)*((void *)v30 + 1);
        if (*(_DWORD *)(a1 + 504) == 3)
        {
          DspLib::copy(v41, v40, *((void **)v30 + 1));
          DspLib::multiply(v45, v40, v44);
        }
        else
        {
          DspLib::copy(v44, v40, *((void **)v30 + 1));
          DspLib::divide(v44, v40, (const float *)v41);
        }
      }
    }
    MEMORY[0x1F4188790](v11);
    double v50 = (char *)&v60[-1] - v49;
    if (v48 >= 0x200) {
      size_t v51 = 512;
    }
    else {
      size_t v51 = v48;
    }
    bzero((char *)&v60[-1] - v49, v51);
    float v52 = (void *)*a4;
    int8x16_t v53 = (void *)a4[1];
    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v53 - *a4) >> 3);
    if (v53 == (void *)*a4) {
      goto LABEL_49;
    }
    uint64_t v55 = 0;
    unint64_t v56 = (uint64_t *)*a4;
    do
    {
      uint64_t v57 = *v56;
      v56 += 3;
      *(void *)&v50[8 * v55++] = v57;
    }
    while (v54 > v55);
    if (v53 == v52) {
LABEL_49:
    }
      uint64_t v58 = 0;
    else {
      uint64_t v58 = (uint64_t)(v52[1] - *v52) >> 2;
    }
    v60[0] = v50;
    v60[1] = v54;
    v60[2] = v58;
    DspLib::amp2dBSafe(v60, 1.0e-20);
  }
  else
  {
    std::vector<std::vector<float>>::resize(a4, 1uLL);
    std::vector<float>::resize(*a4, a3);
    uint64_t v26 = *(float **)*a4;
    vDSP_Length v27 = (uint64_t)(*(void *)(*a4 + 8) - (void)v26) >> 2;
    DspLib::fill(v26, v27, -120.0);
  }
}

void sub_1BB2C8BA8(_Unwind_Exception *a1)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 - 256));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 - 176));
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerModel::Algorithm::processDualSerial(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[2];
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *a3 + 8 * a3[1] - 8 * v7;
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = v6;
  *(void *)&long long v13 = v4;
  *((void *)&v13 + 1) = v7;
  uint64_t v14 = v5;
  DspLib::Biquad::Filter::process((void *)(a1 + 512), &v15, &v13);
  *(void *)&long long v11 = v4;
  *((void *)&v11 + 1) = v7;
  uint64_t v12 = v5;
  *(void *)&long long v9 = v8;
  *((void *)&v9 + 1) = v7;
  uint64_t v10 = v5;
  DspLib::Biquad::Filter::process((void *)(a1 + 584), &v11, &v9);
}

void DspLib::LoudspeakerModel::Algorithm::processDualParallel(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[2];
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *a3 + 8 * a3[1] - 8 * v8;
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = v7;
  *(void *)&long long v14 = v9;
  *((void *)&v14 + 1) = v8;
  uint64_t v15 = v6;
  DspLib::Biquad::Filter::process((void *)(a1 + 584), &v16, &v14);
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)&long long v10 = v5;
  *((void *)&v10 + 1) = v8;
  uint64_t v11 = v6;
  DspLib::Biquad::Filter::process((void *)(a1 + 512), &v12, &v10);
}

void std::vector<std::vector<DspLib::Biquad::Section>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v15 = v12;
    long long v16 = &v12[24 * v8];
    double v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2C8E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

char *std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](v7, v12);
    long long v14 = (char *)v7[1];
    long long v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v13 = &v9[v17];
  return result;
}

void std::vector<std::vector<DSPComplex>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DSPComplex>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1BB2C92AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB2C9320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<DSPComplex>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    long long v16 = &v12[24 * v8];
    double v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    size_t v17 = &v16[v14];
    std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2C95E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>(uint64_t *a1, int *a2, long long *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  uint64_t v15 = v12;
  long long v16 = &v12[24 * v5];
  size_t v17 = v16;
  double v18 = &v12[24 * v11];
  std::vector<DspLib::Biquad::Section>::vector(v16, *a2, a3);
  size_t v17 = v16 + 24;
  std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1BB2C96F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<DspLib::Biquad::Section>::vector(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 20 * a2;
    uint64_t v8 = 20 * a2;
    do
    {
      long long v9 = *a3;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)a3 + 4);
      *(_OWORD *)uint64_t v6 = v9;
      v6 += 20;
      v8 -= 20;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB2C977C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__func()
{
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14A7410;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A7410;
  a2[1] = v2;
  return result;
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  long long v3 = *(_OWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 16);
  DspLib::Biquad::Filter::process((void *)(*(void *)(a1 + 8) + 512), &v5, &v3);
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_0>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target_type()
{
}

void *std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    long long v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BB2C9B20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__func()
{
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14A74A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A74A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::operator()(uint64_t a1, long long *a2, long long *a3)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  long long v3 = *a3;
  uint64_t v4 = *((void *)a3 + 2);
  DspLib::LoudspeakerModel::Algorithm::processDualSerial(*(void *)(a1 + 8), (uint64_t)&v5, (uint64_t *)&v3);
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_1>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target_type()
{
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__func()
{
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14A7520;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A7520;
  a2[1] = v2;
  return result;
}

void std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::operator()(uint64_t a1, long long *a2, long long *a3)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  long long v3 = *a3;
  uint64_t v4 = *((void *)a3 + 2);
  DspLib::LoudspeakerModel::Algorithm::processDualParallel(*(void *)(a1 + 8), (uint64_t)&v5, (uint64_t *)&v3);
}

uint64_t std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2,std::allocator<DspLib::LoudspeakerModel::Algorithm::setProcessFunction(void)::$_2>,void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::target_type()
{
}

uint64_t DspLib::RMS::initialize(DspLib::RMS *this, unsigned int a2, double a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v5 = v3 != a2 || *((unsigned char *)this + 16) == 0;
  if (a2 >= 0x41)
  {
    unint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    int v12 = 28;
LABEL_20:
    printf("DSP Sound assertion in %s at line %d\n", v11, v12);
    ++DspLibDebug::mAssertCounter;
    return v5;
  }
  if (!a2)
  {
    unint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    int v12 = 29;
    goto LABEL_20;
  }
  uint64_t v8 = a2;
  *((void *)this + 3) = a2;
  if (a3 <= 0.0)
  {
    unint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    int v12 = 31;
    goto LABEL_20;
  }
  uint64_t v5 = v5 | !DspLib::isEqual(this, *((double *)this + 4), a3, 1.0e-20);
  *((double *)this + 4) = a3;
  std::vector<float>::resize((uint64_t)this + 112, *((void *)this + 3));
  std::vector<float>::resize((uint64_t)this + 88, *((void *)this + 3));
  std::vector<float>::resize((uint64_t)this + 48, *((void *)this + 3));
  if (v3 == v8)
  {
    *((unsigned char *)this + 16) = 1;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this, *((_DWORD *)this + 18));
    DspLib::RMS::setParameters((uint64_t)this, *((_DWORD *)this + 10), *((float *)this + 11));
  }
  else
  {
    unint64_t v9 = *((void *)this + 3);
    if (v9 > 8) {
      DspLib::fill(*((float **)this + 6), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2, 1.0);
    }
    else {
      DspLib::copy(&DspLib::kITU1770Weights, v9, *((void **)this + 6));
    }
    *((unsigned char *)this + 16) = 1;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this, *((_DWORD *)this + 18));
    DspLib::RMS::setParameters((uint64_t)this, *((_DWORD *)this + 10), *((float *)this + 11));
    DspLib::RMS::reset(this);
  }
  return v5;
}

uint64_t DspLib::RMS::setExcludeChannelMask(uint64_t this, unsigned int a2)
{
  if (*(unsigned char *)(this + 16))
  {
    unint64_t v2 = *(void *)(this + 24);
    if (v2 < 9)
    {
      *(_DWORD *)(this + 72) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      *(_DWORD *)(this + 72) = a2;
      uint64_t v4 = *(void *)(this + 48);
      do
      {
        if ((a2 >> v3)) {
          float v5 = 0.0;
        }
        else {
          float v5 = 1.0;
        }
        *(float *)(v4 + 4 * v3++) = v5;
      }
      while (v2 > v3);
    }
  }
  else
  {
    *(_DWORD *)(this + 72) = a2;
  }
  return this;
}

void DspLib::RMS::setParameters(uint64_t a1, int a2, float a3)
{
  if (a2 >= 2) {
    int v3 = 2;
  }
  else {
    int v3 = a2;
  }
  int v4 = v3 & ~(v3 >> 31);
  *(_DWORD *)(a1 + 40) = v4;
  float v5 = 100000.0;
  if (a3 <= 100000.0) {
    float v5 = a3;
  }
  if (a3 >= 0.1) {
    float v6 = v5;
  }
  else {
    float v6 = 0.1;
  }
  *(float *)(a1 + 44) = v6;
  if (*(unsigned char *)(a1 + 16))
  {
    double v8 = *(double *)(a1 + 32) * v6 / 1000.0;
    if ((v4 - 1) >= 2)
    {
      if (!v4)
      {
        std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 160));
        float v17 = v8;
        float v18 = expf(-2.2 / v17);
        *(float *)(a1 + 76) = v18;
        *(float *)(a1 + 80) = 1.0 - v18;
        unint64_t v19 = *(void *)(a1 + 24);
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = *(void *)(a1 + 48);
          uint64_t v22 = *(void *)(a1 + 88);
          do
          {
            *(float *)(v22 + 4 * v20) = *(float *)(a1 + 80) * *(float *)(v21 + 4 * v20);
            ++v20;
          }
          while (v19 > v20);
        }
      }
    }
    else
    {
      uint64_t v9 = v8;
      unint64_t v11 = *(void **)(a1 + 160);
      unint64_t v10 = (uint64_t *)(a1 + 160);
      unint64_t v12 = *(void *)(a1 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - (void)v11) >> 3) != v12
        || v9 != (uint64_t)(v11[1] - *v11) >> 2)
      {
        std::vector<std::vector<float>>::resize(v10, v12);
        uint64_t v13 = *(float ***)(a1 + 160);
        size_t v14 = *(float ***)(a1 + 168);
        while (v13 != v14)
        {
          std::vector<float>::resize((uint64_t)v13, v8);
          uint64_t v15 = *v13;
          long long v16 = v13[1];
          v13 += 3;
          DspLib::clear(v15, v16 - v15);
        }
        *(void *)(a1 + 144) = 0;
        *(_DWORD *)(a1 + 136) = 0;
        if (v9) {
          float v23 = 1.0 / (float)v9;
        }
        else {
          float v23 = 1.0;
        }
        *(float *)(a1 + 152) = v23;
      }
    }
    int v24 = *(_DWORD *)(a1 + 40);
    float v25 = DspLib::RMS::processOnePoleFilter;
    if (v24)
    {
      if (v24 == 2)
      {
        float v25 = DspLib::RMS::processMovingAverageMean;
      }
      else
      {
        if (v24 != 1) {
          return;
        }
        float v25 = DspLib::RMS::processMovingAverage;
      }
    }
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = 0;
  }
}

void DspLib::RMS::reset(DspLib::RMS *this)
{
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 46) = 730643660;
  *((unsigned char *)this + 188) = 0;
  uint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 21);
  while (v2 != v3)
  {
    int v4 = *(float **)v2;
    uint64_t v5 = *(void *)(v2 + 8);
    v2 += 24;
    DspLib::clear(v4, (v5 - (uint64_t)v4) >> 2);
  }
  float v6 = (float *)*((void *)this + 14);
  uint64_t v7 = *((void *)this + 15) - (void)v6;
  if (v7)
  {
    DspLib::clear(v6, v7 >> 2);
  }
}

void DspLib::RMS::processOnePoleFilter(uint64_t a1, uint64_t **a2, float *__C, vDSP_Length __N)
{
  unint64_t v4 = (unint64_t)a2[2];
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = **a2;
    uint64_t v7 = *(float **)(a1 + 112);
    double v8 = *(float **)(a1 + 88);
    do
    {
      float v9 = *v8;
      float v10 = (float)(*(float *)(a1 + 76) * *v7) + (float)(*(float *)(v6 + 4 * v5) * *(float *)(v6 + 4 * v5));
      *uint64_t v7 = v10;
      __C[v5++] = v9 * v10;
    }
    while (v4 > v5);
  }
  unint64_t v11 = *(void *)(a1 + 24);
  if (v11 >= 2)
  {
    for (unint64_t i = 1; i < v11; unint64_t i = (i + 1))
    {
      if (v4)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (*a2)[i];
        uint64_t v15 = *(void *)(a1 + 112);
        uint64_t v16 = *(void *)(a1 + 88);
        do
        {
          float v17 = *(float *)(v16 + 4 * i);
          float v18 = (float)(*(float *)(a1 + 76) * *(float *)(v15 + 4 * i))
              + (float)(*(float *)(v14 + 4 * v13) * *(float *)(v14 + 4 * v13));
          *(float *)(v15 + 4 * i) = v18;
          __C[v13] = __C[v13] + (float)(v17 * v18);
          ++v13;
        }
        while (v4 > v13);
      }
    }
  }
  DspLib::add(__C, __N, 1.0e-10);
}

void DspLib::RMS::processMovingAverage(uint64_t a1, uint64_t a2, float *a3, vDSP_Length a4)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(uint64_t **)(a1 + 160);
  uint64_t v8 = v7[1] - *v7;
  if (v8)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = v8 >> 2;
      unint64_t v12 = *(void *)(a1 + 24);
      double v13 = *(double *)(a1 + 144);
      unsigned int v14 = *(_DWORD *)(a1 + 136);
      do
      {
        if (v12)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(const float ***)a2;
          uint64_t v17 = *(void *)(a1 + 48);
          float v18 = v7;
          do
          {
            uint64_t v19 = *v18;
            v18 += 3;
            double v20 = v13 - *(float *)(v19 + 4 * v14);
            float v21 = (float)(v16[v15][v9] * v16[v15][v9]) * *(float *)(v17 + 4 * v15);
            *(float *)(v19 + 4 * v14) = v21;
            double v13 = v20 + v21;
            ++v15;
          }
          while (v12 > v15);
          *(double *)(a1 + 144) = v13;
        }
        if (v11 > v14 + 1) {
          ++v14;
        }
        else {
          unsigned int v14 = 0;
        }
        *(_DWORD *)(a1 + 136) = v14;
        float v22 = v13 * *(float *)(a1 + 152) + 1.0e-10;
        a3[v9] = v22;
        uint64_t v9 = ++v10;
      }
      while (*(void *)(a2 + 16) > (unint64_t)v10);
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    float v25 = (float *)((char *)v30 - v24);
    vDSP_Length v26 = *(void *)(a2 + 16);
    DspLib::square(**(const float ***)a2, v26, (float *)((char *)v30 - v24));
    DspLib::multiply(v25, v26, a3, **(float **)(a1 + 48));
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      unsigned int v27 = 2;
      uint64_t v28 = 1;
      do
      {
        DspLib::square(*(const float **)(*(void *)a2 + 8 * v28), *(void *)(a2 + 16), v25);
        DspLib::multiplyAccumulate(a3, a4, v25, *(float *)(*(void *)(a1 + 48) + 4 * v28));
        uint64_t v28 = v27;
      }
      while (*(void *)(a1 + 24) > (unint64_t)v27++);
    }
  }
}

void DspLib::RMS::processMovingAverageMean(uint64_t a1, uint64_t a2, float *__C, vDSP_Length a4)
{
  uint64_t v8 = *(uint64_t **)(a1 + 160);
  if (*(uint64_t **)(a1 + 168) == v8 || (uint64_t v9 = v8[1], v10 = v9 - *v8, v9 == *v8))
  {
    DspLib::multiply(**(const float ***)a2, *(void *)(a2 + 16), __C, **(float **)(a1 + 48));
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      unsigned int v25 = 2;
      uint64_t v26 = 1;
      do
      {
        DspLib::multiplyAccumulate(__C, a4, *(const float **)(*(void *)a2 + 8 * v26), *(float *)(*(void *)(a1 + 48) + 4 * v26));
        uint64_t v26 = v25;
      }
      while (*(void *)(a1 + 24) > (unint64_t)v25++);
    }
  }
  else if (*(void *)(a2 + 16))
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = v10 >> 2;
    unint64_t v14 = *(void *)(a1 + 24);
    double v15 = *(double *)(a1 + 144);
    unsigned int v16 = *(_DWORD *)(a1 + 136);
    do
    {
      if (v14)
      {
        uint64_t v17 = 0;
        float v18 = *(const float ***)a2;
        uint64_t v19 = *(void *)(a1 + 48);
        double v20 = v8;
        do
        {
          uint64_t v21 = *v20;
          v20 += 3;
          double v22 = v15 - *(float *)(v21 + 4 * v16);
          float v23 = v18[v17][v11] * *(float *)(v19 + 4 * v17);
          *(float *)(v21 + 4 * v16) = v23;
          double v15 = v22 + v23;
          ++v17;
        }
        while (v14 > v17);
        *(double *)(a1 + 144) = v15;
      }
      if (v13 > v16 + 1) {
        ++v16;
      }
      else {
        unsigned int v16 = 0;
      }
      *(_DWORD *)(a1 + 136) = v16;
      float v24 = v15 * *(float *)(a1 + 152) + 1.0e-10;
      __C[v11] = v24;
      uint64_t v11 = ++v12;
    }
    while (*(void *)(a2 + 16) > (unint64_t)v12);
  }
}

void DspLib::RMS::uninitialize(DspLib::RMS *this)
{
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 16) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  *((void *)this + 15) = *((void *)this + 14);
}

void DspLib::RMS::process(uint64_t a1, long long *a2, const float *a3, vDSP_Length a4)
{
  uint64_t v7 = *(void (**)(void *, long long *, const float *, vDSP_Length))a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (void *)(a1 + (v8 >> 1));
  if (v8) {
    uint64_t v7 = *(void (**)(void *, long long *, const float *, vDSP_Length))(*v9 + v7);
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  v7(v9, &v10, a3, a4);
  if (*(unsigned char *)(a1 + 188))
  {
    *(float *)(a1 + 184) = DspLib::maxv(a3, a4);
    *(unsigned char *)(a1 + 188) = 0;
  }
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, double a2)
{
  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784), 0);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_DWORD *)this + 100) = 0;
  *((void *)this + 53) = 0;
  *((_WORD *)this + 202) = 0;
  *((void *)this + 54) = 1092616192;
  BOOL result = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  *((unsigned char *)this + 42) = 1;
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 10) <= 4uLL) {
    unint64_t v1 = 4;
  }
  else {
    unint64_t v1 = *((void *)this + 10);
  }
  uint64_t v2 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v2);
  unint64_t v3 = 0;
  unsigned int v4 = 0;
  v36[0] = v6;
  v36[1] = &v28[-v5];
  v36[2] = 3 * v1;
  v36[3] = 3;
  *(void *)(v7 + 32) = v1;
  __A.vDSP_Length realp = (float *)&v38;
  __A.imagp = (float *)&v37;
  uint64_t v35 = 3;
  do
  {
    for (unint64_t i = 0; i != 3; ++i)
    {
      float v9 = (float)rand() * 4.6566e-10;
      v40.imag = (float)rand() * 4.6566e-10;
      v40.real = v9;
      DspLib::ComplexSpan::setElement(&__A, i, v40);
    }
    DspLib::ComplexMatrixSpan::setColumn((DspLib::ComplexMatrixSpan *)v36, v3, &__A);
    unint64_t v3 = ++v4;
  }
  while (v1 > v4);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  unint64_t v12 = 0;
  unsigned int v13 = 0;
  v33[0] = v14;
  v33[1] = &v28[-v15];
  v33[2] = 3 * v1;
  v33[3] = v1;
  v33[4] = 3;
  do
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v17 = (float)rand() * 4.6566e-10;
      v41.imag = (float)rand() * 4.6566e-10;
      v41.real = v17;
      DspLib::ComplexSpan::setElement(&__A, j, v41);
    }
    DspLib::ComplexMatrixSpan::setRow((DspLib::ComplexMatrixSpan *)v33, v12, &__A);
    unint64_t v12 = ++v13;
  }
  while (v1 > v13);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  unint64_t v20 = 0;
  v32[0] = v22;
  v32[1] = &v28[-v21];
  unsigned int v23 = 1;
  v32[2] = v1;
  do
  {
    float v24 = (float)rand() * 4.6566e-10;
    v42.imag = (float)rand() * 4.6566e-10;
    v42.real = v24;
    DspLib::ComplexSpan::setElement(v32, v20, v42);
    unint64_t v20 = v23;
  }
  while (v1 > v23++);
  int v31 = 0;
  float v30 = 0.0;
  return DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)&v31, &v30, &v29, (float *)v36, (DspLib::ComplexMatrixSpan *)v33, (DspLib::ComplexMatrixSpan *)v32, v25, 0.0);
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::reset(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  *((_DWORD *)this + 100) = 0;
  *((void *)this + 53) = 0;
  *((_WORD *)this + 202) = 0;
  *((void *)this + 54) = 1092616192;
  return DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
}

BOOL DspLib::LoudspeakerSystemIDV2::updateModelParameters(DspLib::LoudspeakerSystemIDV2 *this, float *a2, float *a3, float *a4, DspLib::ComplexMatrixSpan *a5, DspLib::ComplexMatrixSpan *a6, DspLib::ComplexSpan *a7, float a8)
{
  uint64_t v28 = a3;
  float v29 = a2;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v30 = xmmword_1BB873120;
  long long v50 = xmmword_1BB873120;
  uint64_t v49 = v54;
  uint64_t v51 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesX((uint64_t)&v49, a4, a5);
  uint64_t v12 = 0;
  unsigned int v13 = (float *)v54;
  do
  {
    *unsigned int v13 = *v13 + a8;
    v13 += 4;
    ++v12;
  }
  while (v12 != 3);
  long long v47 = v30;
  float v46 = v54;
  uint64_t v48 = 3;
  uint64_t v14 = DspLib::matNxNInv((uint64_t)&v46);
  if (v14) {
    return 0;
  }
  v27[1] = v27;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)v27 - v19;
  uint64_t v21 = *((void *)a4 + 4);
  v45[0] = v18;
  v45[1] = (char *)v27 - v19;
  v45[2] = 3 * v21;
  v45[3] = 3;
  v45[4] = v21;
  long long v43 = v30;
  DSPComplex v42 = v54;
  uint64_t v44 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v45, &v42, a4);
  v41[0] = __C;
  v41[1] = v52;
  void v41[2] = 3;
  v40[0] = v18;
  v40[1] = 3 * v21;
  v40[2] = 3;
  v40[3] = v21;
  uint64_t v22 = *((void *)a4 + 4);
  v39[0] = *(void *)a6;
  v39[1] = v22;
  v39[2] = v22;
  void v39[3] = 1;
  uint64_t v36 = __C;
  int64x2_t v37 = vdupq_n_s64(3uLL);
  uint64_t v38 = 1;
  DspLib::multiply((uint64_t)v40, (uint64_t)v39, &v36);
  v35[0] = v20;
  v35[1] = 3 * v21;
  v35[2] = 3;
  v35[3] = v21;
  uint64_t v23 = *((void *)a4 + 4);
  v34[0] = *((void *)a6 + 1);
  v34[1] = v23;
  v34[2] = v23;
  v34[3] = 1;
  int v31 = v52;
  int64x2_t v32 = vdupq_n_s64(3uLL);
  uint64_t v33 = 1;
  DspLib::multiply((uint64_t)v35, (uint64_t)v34, &v31);
  DspLib::add(__C, 3uLL, v52);
  *(float *)this = DspLib::ComplexSpan::operator[](v41, 0);
  float v24 = DspLib::ComplexSpan::operator[](v41, 1uLL);
  *float v29 = v24;
  float v25 = DspLib::ComplexSpan::operator[](v41, 2uLL);
  *uint64_t v28 = v25;
  if ((*(_DWORD *)this & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  return (*(_DWORD *)v29 & 0x7FFFFFFFu) < 0x7F800000 && (LODWORD(v25) & 0x7FFFFFFFu) < 0x7F800000;
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 896), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784), 0);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, const float *a2)
{
  if (*((unsigned char *)this + 42))
  {
    float v4 = a2[7];
    if (a2[8] + *(double *)this * 0.00048828125 * -2.0 > v4)
    {
      *((float *)this + 218) = v4;
      float v5 = a2[8];
      if (v5 <= a2[7]) {
        float v5 = a2[7];
      }
      *((float *)this + 219) = v5;
      *((float *)this + 221) = a2[26];
    }
    float v6 = DspLib::dB2Amp(this, a2[12]);
    *((float *)this + 264) = v6 / (float)(v6 + 1.0);
    *((float *)this + 265) = a2[13] / 100.0;
    *((float *)this + 266) = DspLib::dB2Amp(v7, a2[11]);
    float v9 = DspLib::dB2Amp(v8, a2[15]);
    *((float *)this + 267) = v9 / (float)(v9 + 1.0);
    *((float *)this + 268) = a2[25];
    *((float *)this + 269) = a2[4] * 0.001;
    *((float *)this + 270) = a2[16] * 0.001;
    float v10 = a2[17];
    if (v10 <= a2[16]) {
      float v10 = a2[16];
    }
    *((float *)this + 271) = v10 * 0.001;
    *((float *)this + 272) = a2[20];
    float v11 = a2[21];
    if (v11 <= a2[20]) {
      float v11 = a2[20];
    }
    *((float *)this + 273) = v11;
    *((float *)this + 274) = a2[18];
    float v12 = a2[19];
    if (v12 <= a2[18]) {
      float v12 = a2[18];
    }
    *((float *)this + 275) = v12;
    *((unsigned char *)this + 880) = a2[2] >= 0.5;
    float v13 = a2[24];
    *((float *)this + 276) = a2[3];
    *((float *)this + 277) = a2[22];
    float v14 = a2[23];
    if (v14 <= a2[22]) {
      float v14 = a2[22];
    }
    *((float *)this + 278) = v14;
    BOOL v15 = *a2 >= 0.5;
    BOOL v16 = a2[27] >= 0.5;
    *((float *)this + 279) = a2[29];
    float v17 = a2[30];
    if (v17 <= a2[29]) {
      float v17 = a2[29];
    }
    *((float *)this + 280) = v17;
    *((float *)this + 281) = a2[32];
    float v18 = a2[33];
    if (v18 <= a2[32]) {
      float v18 = a2[32];
    }
    *((unsigned char *)this + 881) = v13 >= 0.5;
    *((unsigned char *)this + 406) = v15;
    *((unsigned char *)this + 888) = v16;
    *((float *)this + 282) = v18;
    if (v13 >= 0.5) {
      *((unsigned char *)this + 880) = 0;
    }
    *((unsigned char *)this + 40) = a2[35] >= 0.5;
    *((float *)this + 283) = a2[37];
    *((float *)this + 285) = a2[38];
    float v19 = a2[39];
    if (v19 <= a2[38]) {
      float v19 = a2[38];
    }
    *((float *)this + 284) = v19;
    *((unsigned char *)this + 41) = a2[34] >= 0.5;
    *((float *)this + 286) = a2[36];
    float v20 = *(double *)this * 0.00048828125;
    v21.i64[0] = 0xFFFFFFFFLL;
    v21.i64[1] = 0xFFFFFFFFLL;
    float32x2_t v22 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 872)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v20), 0)))), v21)), v20));
    *((float32x2_t *)this + 108) = v22;
    float v23 = *((float *)this + 221) * v20;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 3, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22).f32[0] / v23));
    DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), *((float *)this + 216), v23, v24);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((void *)this + 69));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x800, *((float *)this + 216), *((float *)this + 217), *(double *)this, (unint64_t)*((float *)this + 221), (unint64_t **)&v30);
    float v25 = (void *)*((void *)this + 1);
    if (v25)
    {
      *((void *)this + 2) = v25;
      operator delete(v25);
    }
    *(_OWORD *)((char *)this + 8) = v30;
    *((void *)this + 3) = v31;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), *((void *)this + 69));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), *((void *)this + 69), 1u);
    DspLibBuffer::setNumFrames((unint64_t *)this + 87, *((void *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784), *((void *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 896), *((void *)this + 69));
    DspLib::ComplexVector::operator=((char *)this + 896, 0.0);
    if (*((unsigned char *)this + 888)) {
      uint64_t v26 = 5;
    }
    else {
      uint64_t v26 = 3;
    }
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), v26, *((void *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), *((void *)this + 69));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), *((void *)this + 69), v26);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), *((void *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), *((void *)this + 69));
    float v27 = *(double *)this / (double)vcvtad_u64_f64(*(double *)this * a2[3]);
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(a2[10] * 1000.0) * v27) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(a2[14] * 1000.0) * v27) / 1000.0));
    *((unsigned char *)this + 43) = 1;
    return DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  }
  else
  {
    float v29 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v29, 116);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unint64_t *a2, unsigned int a3)
{
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readResonanceModel((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2, a3, (uint64_t)v4);
  *((_OWORD *)this + 61) = *(_OWORD *)v4;
  *(_OWORD *)((char *)this + 985) = *(_OWORD *)&v4[9];
  if (!*((unsigned char *)this + 1000))
  {
    *((_DWORD *)this + 100) = 0;
    *((void *)this + 53) = 0;
    *((_WORD *)this + 202) = 0;
    *((_DWORD *)this + 109) = 0;
  }
}

double DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4 = a2;
  if (*((unsigned char *)this + 41))
  {
    float v6 = DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 416), a2);
    float v7 = 0.0;
    if (!*((unsigned char *)this + 405)) {
      float v7 = v6 + *((float *)this + 102);
    }
    *((float *)this + 102) = v7;
    char v8 = v7 > 1000.0;
    v14[0] = *((_OWORD *)this + 61);
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)this + 988);
    float v9 = v14;
    unsigned int v10 = v4;
    unsigned int v11 = a3;
  }
  else
  {
    v13[0] = *((_OWORD *)this + 61);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)this + 988);
    float v9 = v13;
    unsigned int v10 = v4;
    unsigned int v11 = a3;
    char v8 = 0;
  }
  *(void *)&double result = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (uint64_t)v9, v10, v11, v8).n128_u64[0];
  return result;
}

unint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::resetNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unsigned int a2)
{
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  float v29 = a6;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 43))
  {
    unsigned int v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v11, 251);
    ++DspLibDebug::mAssertCounter;
  }
  DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (void *)this + 77, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), (uint64_t *)this + 1);
  DspLib::LoudspeakerSystemIDV2::updateWeights((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 896), v12, *((float *)this + 264));
  *((float *)this + 106) = v13;
  uint64_t result = DspLib::LoudspeakerSystemIDV2::safeToAdapt((uint64_t *)a5, (float *)this + 100, (uint64_t *)this + 1, (float *)this + 109, v13, *((float *)this + 264), *((float *)this + 265), *((float *)this + 266));
  if (!result)
  {
    *((_WORD *)this + 202) = 0;
    return result;
  }
  int v15 = *((unsigned __int8 *)this + 888);
  v28[1] = (char *)this + 440;
  v28[2] = (char *)this + 144;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)result, (DSPSplitComplex *)this + 49, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 244, v15);
  DspLib::operator+=((char *)this + 784, v29);
  DspLib::operator+=((uint64_t)this + 784, a4);
  DspLib::LoudspeakerSystemIDV2::updateModelFitData((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), v29, a4, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784), (DSPSplitComplex *)((char *)this + 440), v16);
  DspLib::LoudspeakerSystemIDV2::updateMInResonanceModel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 244, (DSPSplitComplex *)this + 56, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), *((unsigned __int8 *)this + 888));
  DspLib::LoudspeakerSystemIDV2::updateAInverseInResonanceModel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 244, (uint64_t)this + 144, (uint64_t)this + 896, *((unsigned __int8 *)this + 888));
  DspLib::LoudspeakerSystemIDV2::updateXInResonanceModel((DSPSplitComplex *)((char *)this + 440), (DSPSplitComplex *)this + 9, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (DspLib::ComplexMatrix *)*((unsigned __int8 *)this + 888));
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v19 = *((void *)this + 69);
  __B.vDSP_Length realp = v21;
  __B.imagp = (float *)((char *)v28 - v20);
  uint64_t v32 = v19;
  if (*((unsigned char *)this + 888)) {
    unint64_t v22 = 2;
  }
  else {
    unint64_t v22 = 1;
  }
  DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), v22, &__B);
  DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)((char *)this + 440));
  DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
  DspLib::operator*=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)this + 9);
  memset(v30, 0, 25);
  if (*((unsigned char *)this + 888))
  {
    uint64_t result = DspLib::LoudspeakerSystemIDV2::updateCreepModelParameters((DspLib::LoudspeakerSystemIDV2 *)v30, (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), v23, 1.0e-30);
    if ((result & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *((_DWORD *)this + 244) = 0;
    *((_DWORD *)this + 247) = 0;
    uint64_t result = DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)((char *)v30 + 4), (float *)v30 + 2, (float *)&v30[1], (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), v24, 1.0e-30);
    char v27 = 0;
    if (!result) {
      goto LABEL_15;
    }
  }
  uint64_t result = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::parametersAreValid((uint64_t)this, (uint64_t)v30, (uint64_t)v29, a4, v25, v26);
  if (!result)
  {
LABEL_14:
    char v27 = 0;
    goto LABEL_15;
  }
  *((_OWORD *)this + 61) = v30[0];
  *(_OWORD *)((char *)this + 985) = *(_OWORD *)((char *)v30 + 9);
  char v27 = 1;
LABEL_15:
  *((unsigned char *)this + 405) = v27;
  *((unsigned char *)this + 404) = *((float *)this + 108) < *((float *)this + 268);
  return result;
}

_DWORD *DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(_DWORD *result, DspLibBuffer *a2, void *a3, DspLibBuffer *a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  if (a5[1] != *a5)
  {
    unsigned int v10 = result;
    unint64_t v11 = 0;
    unsigned int v12 = 1;
    do
    {
      v14.real = DspLib::ComplexSpan::operator[](v10, *(void *)(v5 + 8 * v11));
      DspLib::ComplexSpan::setElement(a3, v11, v14);
      int v13 = *(_DWORD *)DspLibBuffer::element(a2, *(void *)(*a5 + 8 * v11), 0);
      uint64_t result = (_DWORD *)DspLibBuffer::operator[](a4, v11);
      *uint64_t result = v13;
      unint64_t v11 = v12;
      uint64_t v5 = *a5;
      ++v12;
    }
    while (v11 < (a5[1] - *a5) >> 3);
  }
  return result;
}

DspLibBuffer *DspLib::LoudspeakerSystemIDV2::updateWeights(DspLibBuffer *this, const DspLibBuffer *a2, DspLib::ComplexSpan *a3, float a4)
{
  if (*((void *)a2 + 2))
  {
    float v6 = this;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    float v9 = 0.0;
    do
    {
      float v10 = *(float *)DspLibBuffer::operator[](v6, v7);
      float v9 = v9 + v10;
      if (v10 < a4) {
        float v10 = 0.0;
      }
      int v11 = 0;
      this = (DspLibBuffer *)DspLib::ComplexSpan::setElement(a2, v7, *(DSPComplex *)&v10);
      unint64_t v7 = v8;
    }
    while (*((void *)a2 + 2) > (unint64_t)v8++);
  }
  return this;
}

BOOL DspLib::LoudspeakerSystemIDV2::safeToAdapt(uint64_t *a1, float *a2, uint64_t *a3, float *a4, float a5, float a6, float a7, float a8)
{
  *a2 = 0.0;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1] - *a3;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v9 >> 3;
  uint64_t v12 = *a1;
  float v13 = 0.0;
  float v14 = 0.0;
  do
  {
    unint64_t v15 = *(void *)(v8 + 8 * v10);
    if (v15 >= 0x3FF) {
      unint64_t v15 = 1023;
    }
    float v16 = *(float *)(v12 + 4 * v15);
    float v14 = v16 + v14;
    *a2 = v14;
    if (v16 > v13) {
      float v13 = v16;
    }
    ++v10;
  }
  while (v11 > v10);
  if (v14 == 0.0) {
    return 0;
  }
  float v18 = v13 / v14;
  *a4 = v18;
  float v19 = *a2 / (float)v11;
  *a2 = v19;
  BOOL v20 = a5 >= a6;
  if (v18 <= a7) {
    BOOL v20 = 1;
  }
  return v19 > a8 && v20;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(DSPSplitComplex *result, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4, int a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a3 + 4);
  if (a5)
  {
    if (!v8) {
      return result;
    }
    uint64_t v9 = MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v9);
    uint64_t v10 = *((void *)a3 + 4);
    __A.vDSP_Length realp = v12;
    __A.imagp = (float *)((char *)&v38 - v11);
    uint64_t v43 = v10;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    uint64_t v13 = DspLib::operator*=((uint64_t)&__A, a4[4]);
    uint64_t v14 = MEMORY[0x1F4188790](v13);
    MEMORY[0x1F4188790](v14);
    __B.vDSP_Length realp = v16;
    __B.imagp = (float *)((char *)&v38 - v15);
    uint64_t v41 = v17;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, a4[3]);
    float v18 = DspLib::operator+=(&__A, &__B);
    uint64_t v19 = MEMORY[0x1F4188790](v18);
    MEMORY[0x1F4188790](v19);
    v38.vDSP_Length realp = v21;
    v38.imagp = (float *)((char *)&v38 - v20);
    uint64_t v39 = v22;
    DspLib::ComplexMatrixSpan::row(a3, 0, &v38);
    DspLib::operator*=((uint64_t)&v38, a4[1]);
    DspLib::operator+=((uint64_t)&v38, a4[2]);
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, *a4);
    DspLib::operator+=(&v38, &__B);
    DspLib::ComplexMatrixSpan::row(a3, 2uLL, &__B);
    DspLib::operator+=(&v38, &__B);
    DspLib::ComplexSpan::operator=(a2, &__A);
    p_B = &v38;
  }
  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v24 = MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v24);
    uint64_t v25 = *((void *)a3 + 4);
    __A.vDSP_Length realp = v27;
    __A.imagp = (float *)((char *)&v38 - v26);
    uint64_t v43 = v25;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    uint64_t v29 = MEMORY[0x1F4188790](v28);
    MEMORY[0x1F4188790](v29);
    __B.vDSP_Length realp = v31;
    __B.imagp = (float *)((char *)&v38 - v30);
    uint64_t v41 = v32;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
    DspLib::operator*=((uint64_t)&__A, a4[4]);
    DspLib::operator*=((uint64_t)&__B, a4[1]);
    uint64_t v33 = DspLib::operator+=((uint64_t)&__B, a4[2]);
    uint64_t v34 = MEMORY[0x1F4188790](v33);
    MEMORY[0x1F4188790](v34);
    v38.vDSP_Length realp = v36;
    v38.imagp = (float *)((char *)&v38 - v35);
    uint64_t v39 = v37;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &v38);
    DspLib::operator+=(&__B, &v38);
    DspLib::ComplexSpan::operator=(a2, &__A);
    p_B = &__B;
  }
  return DspLib::operator/=(a2, p_B);
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::updateModelFitData(DspLib::LoudspeakerSystemIDV2 *this, const DspLib::ComplexSpan *a2, DSPSplitComplex *a3, float a4, DspLib::ComplexSpan *a5, DSPSplitComplex *a6, DspLib::ComplexSpan *a7)
{
  if (a6[1].realp)
  {
    unint64_t v13 = 0;
    unsigned int v14 = 1;
    do
    {
      float v15 = DspLib::ComplexSpan::operator[](this, v13);
      float v17 = v16;
      float v18 = *(float *)DspLibBuffer::operator[](a2, v13);
      v23.real = (float)(v15 * v18) + (float)((float)(1.0 - v18) * DspLib::ComplexSpan::operator[](a5, v13));
      v23.imag = (float)(v17 * v18) + (float)((float)(1.0 - v18) * v19);
      DspLib::ComplexSpan::setElement(a6, v13, v23);
      unint64_t v13 = v14;
    }
    while (a6[1].realp > (float *)v14++);
  }
  DspLib::operator-=((uint64_t)a6, a4);

  return DspLib::operator-=(a6, a3);
}

void DspLib::LoudspeakerSystemIDV2::updateMInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4, int a5)
{
  if (a5) {
    DspLib::LoudspeakerSystemIDV2::ceepResonatorModelJacobian(a1, a2, a3, a4);
  }
  else {
    DspLib::LoudspeakerSystemIDV2::standardResonatorModelJacobian(a1, a2, a3, a4);
  }
}

uint64_t DspLib::LoudspeakerSystemIDV2::updateAInverseInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v10);
  __A.vDSP_Length realp = v13;
  __A.imagp = (float *)((char *)&v23 - v12);
  uint64_t v27 = v14;
  DspLib::ComplexMatrixSpan::row(v11, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, a2[1]);
  uint64_t v15 = DspLib::operator+=((uint64_t)&__A, a2[2]);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v17 = *((void *)a1 + 4);
  __B.vDSP_Length realp = v18;
  __B.imagp = (float *)((char *)&v23 - v19);
  uint64_t v25 = v17;
  if (a5)
  {
    DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, *a2);
    DspLib::operator+=(&__A, &__B);
    uint64_t v20 = a1;
    unint64_t v21 = 2;
  }
  else
  {
    uint64_t v20 = a1;
    unint64_t v21 = 1;
  }
  DspLib::ComplexMatrixSpan::row(v20, v21, &__B);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &__A);
}

void DspLib::LoudspeakerSystemIDV2::updateXInResonanceModel(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v9);
  vDSP_Length realp = this[1].realp;
  __C.vDSP_Length realp = v12;
  __C.imagp = (float *)((char *)&v27 - v13);
  uint64_t v31 = realp;
  if (v10)
  {
    DspLib::ComplexSpan::operator=(&__C, this);
    DspLib::operator*=((uint64_t)&__C, -1.0);
    DspLib::operator*=(&__C, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
    uint64_t v15 = MEMORY[0x1F4188790](v14);
    MEMORY[0x1F4188790](v15);
    __B.vDSP_Length realp = v17;
    __B.imagp = (float *)((char *)&v27 - v16);
    uint64_t v29 = v18;
    DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
    DspLib::operator*=(&__B, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 4uLL, &__B);
    DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
    DspLib::operator*=(&__C, a2);
    p_C = &__C;
    uint64_t v20 = a3;
    unint64_t v21 = 3;
  }
  else
  {
    DspLib::ComplexSpan::operator=(&__C, this);
    DspLib::operator*=((uint64_t)&__C, -1.0);
    DspLib::operator*=(&__C, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
    uint64_t v23 = MEMORY[0x1F4188790](v22);
    MEMORY[0x1F4188790](v23);
    __B.vDSP_Length realp = v25;
    __B.imagp = (float *)((char *)&v27 - v24);
    uint64_t v29 = v26;
    DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
    DspLib::operator*=(&__B, a2);
    p_C = &__B;
    uint64_t v20 = a3;
    unint64_t v21 = 2;
  }
  DspLib::ComplexMatrixSpan::setColumn(v20, v21, p_C);
}

BOOL DspLib::LoudspeakerSystemIDV2::updateCreepModelParameters(DspLib::LoudspeakerSystemIDV2 *this, float *a2, DspLib::ComplexMatrixSpan *a3, DspLib::ComplexMatrixSpan *a4, DspLib::ComplexSpan *a5, float a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v28 = xmmword_1BB8742C0;
  long long v48 = xmmword_1BB8742C0;
  long long v47 = v52;
  uint64_t v49 = 5;
  DspLib::LoudspeakerSystemIDV2::updateMTimesX((uint64_t)&v47, a2, a3);
  uint64_t v10 = 0;
  uint64_t v11 = (float *)v52;
  do
  {
    *uint64_t v11 = *v11 + a6;
    v11 += 6;
    ++v10;
  }
  while (v10 != 5);
  long long v45 = v28;
  uint64_t v44 = v52;
  uint64_t v46 = 5;
  uint64_t v12 = DspLib::matNxNInv((uint64_t)&v44);
  if (v12) {
    return 0;
  }
  v27[1] = v27;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v27 - v17;
  uint64_t v19 = *((void *)a2 + 4);
  v43[0] = v16;
  v43[1] = (char *)v27 - v17;
  v43[2] = 5 * v19;
  v43[3] = 5;
  v43[4] = v19;
  long long v41 = v28;
  DSPComplex v40 = v52;
  uint64_t v42 = 5;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v43, &v40, a2);
  v39[0] = __C;
  v39[1] = v50;
  v39[2] = 5;
  v38[0] = v16;
  v38[1] = 5 * v19;
  v38[2] = 5;
  v38[3] = v19;
  uint64_t v20 = *((void *)a2 + 4);
  v37[0] = *(void *)a4;
  v37[1] = v20;
  v37[2] = v20;
  v37[3] = 1;
  uint64_t v34 = __C;
  int64x2_t v35 = vdupq_n_s64(5uLL);
  uint64_t v36 = 1;
  DspLib::multiply((uint64_t)v38, (uint64_t)v37, &v34);
  v33[0] = v18;
  v33[1] = 5 * v19;
  v33[2] = 5;
  v33[3] = v19;
  uint64_t v21 = *((void *)a2 + 4);
  v32[0] = *((void *)a4 + 1);
  v32[1] = v21;
  v32[2] = v21;
  void v32[3] = 1;
  uint64_t v29 = v50;
  int64x2_t v30 = vdupq_n_s64(5uLL);
  uint64_t v31 = 1;
  DspLib::multiply((uint64_t)v33, (uint64_t)v32, &v29);
  DspLib::add(__C, 5uLL, v50);
  float v22 = DspLib::ComplexSpan::operator[](v39, 0);
  *(float *)this = v22;
  if ((LODWORD(v22) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  unint64_t v23 = 0;
  uint64_t v24 = (char *)this + 4;
  do
  {
    unint64_t v25 = v23;
    if (v23 == 4) {
      break;
    }
    float v26 = DspLib::ComplexSpan::operator[](v39, v23 + 1);
    *(float *)&v24[4 * v25] = v26;
    unint64_t v23 = v25 + 1;
  }
  while ((LODWORD(v26) & 0x7FFFFFFFu) < 0x7F800000);
  return v25 > 3;
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::parametersAreValid(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  uint64_t v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 616);
  uint64_t v11 = (DSPSplitComplex *)(a1 + 784);
  uint64_t v12 = (const DspLib::ComplexSpan *)(a1 + 440);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 616), *(const DspLib::ComplexSpan **)(a1 + 896), (float *)(a1 + 784), (const DspLib::ComplexSpan *)(a1 + 440), a6);
  *(_DWORD *)(a1 + 432) = v13;
  uint64_t v14 = 36;
  if (*(float *)(a1 + 424) > *(float *)(a1 + 1068)) {
    uint64_t v14 = 32;
  }
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::smoothCoefficients((float32x4_t *)a1, (float32x4_t *)a2, *(float *)(a1 + v14));
  v29[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)(a2 + 12);
  int v15 = *(unsigned __int8 *)(a1 + 888);
  DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v29, *(unsigned __int8 *)(a1 + 880), v15, (uint64_t)v28, *(float *)(a1 + 1104), *(float *)(a1 + 1076), *(float *)(a1 + 1084));
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)v28;
  *(void *)(a1 + 1048) = *(void *)&v28[16];
  if (*(unsigned char *)(a1 + 41))
  {
    float v16 = 1.0 / (float)(sqrtf(*(float *)(a1 + 1036) * (float)(1.0 / *(float *)(a1 + 1044))) * 6.2832);
    BOOL v17 = v16 > *(float *)(a1 + 876) || v16 < *(float *)(a1 + 872);
  }
  else
  {
    BOOL v17 = 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    float v18 = (float)(1.0 / *(float *)(a1 + 1040)) * sqrtf(*(float *)(a1 + 1036) * *(float *)(a1 + 1044));
    BOOL v19 = v18 > *(float *)(a1 + 1136) || v18 < *(float *)(a1 + 1140);
  }
  else
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::clipTsParameters((float *)a1, (float *)(a1 + 1032));
    BOOL v19 = 0;
    int v15 = *(unsigned __int8 *)(a1 + 888);
  }
  long long v26 = *(_OWORD *)(a1 + 1032);
  uint64_t v27 = *(void *)(a1 + 1048);
  uint64_t v20 = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs((float *)&v26, v15 != 0, (uint64_t)v28);
  *(_OWORD *)a2 = *(_OWORD *)v28;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)&v28[9];
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)v20, v11, (DspLib::ComplexMatrixSpan *)(a1 + 520), (float *)a2, *(unsigned __int8 *)(a1 + 888));
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 896), (float *)v11, v12, v21);
  int v23 = v22 >= *(float *)(a1 + 432) || v17;
  int v24 = v23 | v19;
  if ((v24 & 1) == 0) {
    *(float *)(a1 + 432) = v22;
  }
  return v24 ^ 1u;
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 42))
  {
    v22[0] = *(_OWORD *)(a1 + 976);
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 988);
    DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v22, *(unsigned __int8 *)(a1 + 880), *(unsigned __int8 *)(a1 + 888), (uint64_t)v23, *(float *)(a1 + 1104), *(float *)(a1 + 1076), *(float *)(a1 + 1084));
    float v7 = *(float *)&v23[1];
    a4 *= 18;
    *(_DWORD *)(a2 + 4 * (a4 + 19)) = v23[0];
    *(float *)(a2 + 4 * (a4 + 20)) = v7 * 1000.0;
    float v8 = *(float *)&v23[2];
    float v9 = *(float *)&v23[3];
    int v10 = v23[4];
    int v11 = v23[5];
    *(_DWORD *)(a2 + 4 * (a4 + 28)) = *(_DWORD *)(a1 + 400);
    *(float *)(a2 + 4 * (a4 + 21)) = v8;
    *(float *)(a2 + 4 * (a4 + 22)) = v9;
    *(_DWORD *)(a2 + 4 * (a4 + 35)) = v10;
    *(_DWORD *)(a2 + 4 * (a4 + 36)) = v11;
    float v12 = 1.0 / (float)(sqrtf(v7 * (float)(1.0 / v9)) * 6.2832);
    float v13 = (float)(1.0 / v8) * sqrtf(v7 * v9);
    float v14 = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
    *(float *)(a2 + 4 * (a4 + 23)) = v12;
    *(float *)(a2 + 4 * (a4 + 24)) = v13;
    *(float *)(a2 + 4 * (a4 + 25)) = v14;
    v15.i32[0] = *(unsigned __int8 *)(a1 + 404);
    v15.i32[1] = *(unsigned __int8 *)(a1 + 405);
    __asm { FMOV            V1.2S, #1.0 }
    *(int8x8_t *)(a2 + 4 * (a4 + 26)) = vbic_s8(_D1, (int8x8_t)vceqz_s32(v15));
    *(_DWORD *)(a2 + 4 * (a4 + 29)) = *(_DWORD *)(a1 + 436);
    *(_DWORD *)(a2 + 4 * (a4 + 30)) = *(_DWORD *)(a1 + 424);
    *(float *)(a2 + 4 * (a4 + 31)) = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)a1);
    *(_DWORD *)(a2 + 4 * (a4 + 34)) = *(_DWORD *)(a1 + 432);
    *(_DWORD *)(a2 + 4 * (a4 + 32)) = *(_DWORD *)(a1 + 864);
    *(_DWORD *)(a2 + 4 * (a4 + 33)) = *(_DWORD *)(a1 + 868);
  }
  else
  {
    uint64_t v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 327);
    ++DspLibDebug::mAssertCounter;
  }
}

float32x2_t DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (a3)
  {
    if (a2)
    {
      *(float *)a4 = a5;
      float v7 = *(float *)(a1 + 12);
      if (v7 > 0.0) {
        a7 = (float)(a5 * a5) / v7;
      }
      *(float *)(a4 + 4) = a7;
      a6 = a7;
    }
    else
    {
      float v9 = *(float *)(a1 + 12);
      float v10 = sqrtf(v9 * a6);
      if (v9 > 0.0) {
        a5 = v10;
      }
      *(float *)a4 = a5;
      *(float *)(a4 + 4) = a6;
    }
    float v11 = a5 * a5;
    float v12 = *(float *)(a1 + 16);
    float v13 = (float)(a6 * (float)((float)(v11 * *(float *)a1) - (float)(a6 * v12))) / v11;
    float v14 = *(float *)(a1 + 8);
    float v15 = (float)((float)(v12 * (float)(v14 * (float)((float)(v11 * a6) * v13)))
                + (float)((float)((float)-(float)((float)(v11 * v11) * a6) * v14) * *(float *)(a1 + 4)))
        / (float)((float)((float)(v12 * (float)-(float)((float)(v11 * a6) * *(float *)(a1 + 4)))
                        + (float)((float)(v11 * v11) * v14))
                + (float)((float)(a6 * v13) * (float)(v12 * v12)));
    float v16 = (float)(v15 * (float)-(float)(v11 * v15)) / (float)(a6 * (float)((float)(v11 * v14) - (float)(v15 * v12)));
    *(float *)(a4 + 16) = v16;
    *(float *)(a4 + 20) = v15;
    result.f32[0] = (float)(v14 * (float)(a6 * v16)) / v15;
    *(float *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 12) = result.i32[0];
  }
  else
  {
    if (a2)
    {
      *(float *)a4 = a5;
      float v8 = *(float *)(a1 + 16);
      if (v8 > 0.0) {
        a7 = (float)(a5 * a5) / v8;
      }
      *(float *)(a4 + 4) = a7;
      a6 = a7;
    }
    else
    {
      float v18 = *(float *)(a1 + 16);
      float v19 = sqrtf(v18 * a6);
      if (v18 > 0.0) {
        a5 = v19;
      }
      *(float *)a4 = a5;
      *(float *)(a4 + 4) = a6;
    }
    float32x2_t result = vmul_n_f32(*(float32x2_t *)(a1 + 4), a6);
    *(float32x2_t *)(a4 + 8) = result;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  unint64_t v1 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696);
  unint64_t v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);

  return DspLib::minv(v2, cycle_count);
}

void DspLib::LoudspeakerSystemIDV2::ceepResonatorModelJacobian(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  __A.vDSP_Length realp = v11;
  __A.imagp = (float *)((char *)&v28 - v10);
  uint64_t v36 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  v33.vDSP_Length realp = v16;
  v33.imagp = (float *)((char *)&v28 - v15);
  uint64_t v34 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  __C.vDSP_Length realp = v21;
  __C.imagp = (float *)((char *)&v28 - v20);
  uint64_t v32 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v19);
  int v24 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v23);
  __B.vDSP_Length realp = v26;
  __B.imagp = (float *)((char *)&v28 - v25);
  uint64_t v30 = v27;
  DspLib::ComplexMatrixSpan::row(v24, 0, &v33);
  DspLib::operator*=((uint64_t)&v33, a2[1]);
  DspLib::operator+=((uint64_t)&v33, a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__B, *a2);
  DspLib::operator+=(&v33, &__B);
  DspLib::ComplexMatrixSpan::row(a1, 2uLL, &__B);
  DspLib::operator+=(&v33, &__B);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 3uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 4uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, a2[4]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[3]);
  DspLib::operator+=(&__A, &__B);
  DspLib::operator*=((uint64_t)&__A, -1.0);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__B);
  DspLib::operator*=(&__A, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::operator*=(&__A, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

void DspLib::LoudspeakerSystemIDV2::standardResonatorModelJacobian(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  __A.vDSP_Length realp = v11;
  __A.imagp = (float *)((char *)&__C - v10);
  uint64_t v28 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  __B.vDSP_Length realp = v16;
  __B.imagp = (float *)((char *)&__C - v15);
  uint64_t v26 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v18);
  __C.vDSP_Length realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  uint64_t v24 = v22;
  DspLib::ComplexMatrixSpan::row(v19, 0, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[1]);
  DspLib::operator+=((uint64_t)&__B, a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator+=(&__B, &__A);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::operator*=((uint64_t)&__A, -a2[4]);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[4]);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

float32_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::smoothCoefficients(float32x4_t *a1, float32x4_t *a2, float a3)
{
  *a2 = vmlaq_n_f32(*a2, vsubq_f32(a1[61], *a2), a3);
  float32_t result = a2[1].f32[0] + (float)(a3 * (float)(a1[62].f32[0] - a2[1].f32[0]));
  a2[1].f32[0] = result;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::clipTsParameters(float *a1, float *a2)
{
  unint64_t v2 = a1 + 277;
  unint64_t v3 = a1 + 278;
  if (a1[278] >= *a2) {
    unint64_t v3 = a2;
  }
  if (*a2 >= a1[277]) {
    unint64_t v2 = v3;
  }
  *a2 = *v2;
  unsigned int v4 = a1 + 270;
  float v5 = a2[1];
  float v6 = a1 + 271;
  if (a1[271] >= v5) {
    float v6 = a2 + 1;
  }
  if (v5 >= a1[270]) {
    unsigned int v4 = v6;
  }
  a2[1] = *v4;
  float v7 = a1 + 272;
  uint64_t v8 = a1 + 273;
  float v9 = a2[3];
  if (a1[273] >= v9) {
    uint64_t v8 = a2 + 3;
  }
  if (v9 >= a1[272]) {
    float v7 = v8;
  }
  a2[3] = *v7;
  uint64_t v10 = a1 + 274;
  float v11 = a1 + 275;
  float v12 = a2[2];
  if (a1[275] >= v12) {
    float v11 = a2 + 2;
  }
  if (v12 >= a1[274]) {
    uint64_t v10 = v11;
  }
  a2[2] = *v10;
  uint64_t v13 = a1 + 279;
  uint64_t v14 = a1 + 280;
  float v15 = a2[5];
  if (a1[280] >= v15) {
    uint64_t v14 = a2 + 5;
  }
  if (v15 >= a1[279]) {
    uint64_t v13 = v14;
  }
  a2[5] = *v13;
  float v16 = a1 + 281;
  uint64_t v17 = a1 + 282;
  float v19 = a2[4];
  uint64_t v18 = a2 + 4;
  float v20 = v19;
  if (a1[282] >= v19) {
    uint64_t v17 = v18;
  }
  if (v20 >= a1[281]) {
    float v16 = v17;
  }
  float result = *v16;
  *uint64_t v18 = *v16;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::calculateError(DspLib::LoudspeakerSystemIDV2 *this, const DspLib::ComplexSpan *a2, float *a3, const DspLib::ComplexSpan *a4, const DspLib::ComplexSpan *a5)
{
  if (*((void *)a4 + 2))
  {
    unint64_t v9 = 0;
    float v10 = 0.0;
    unsigned int v11 = 1;
    float v12 = 0.0;
    do
    {
      float v13 = DspLib::ComplexSpan::operator[](this, v9);
      float v15 = v14;
      float v16 = *((float *)a2 + v9);
      float v17 = DspLib::ComplexSpan::operator[](a3, v9);
      float v10 = v10 + v16;
      float v12 = v12
          + (float)(fabsf(v16* (float)((float)((float)(v17 - v13) * (float)(v17 - v13))- (float)((float)(v18 - v15) * (float)(v18 - v15))))+ fabsf(v16* (float)((float)((float)(v18 - v15) * (float)(v17 - v13))+ (float)((float)(v17 - v13) * (float)(v18 - v15)))));
      unint64_t v9 = v11;
    }
    while (*((void *)a4 + 2) > (unint64_t)v11++);
  }
}

float *DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs@<X0>(float *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 24) = 0;
  float v3 = *result;
  float v4 = result[1];
  float v5 = (float)(v3 * v3) / v4;
  float v6 = result[3];
  if (a2)
  {
    float v8 = result[4];
    float v7 = result[5];
    float v9 = v4 * v8;
    float v10 = (float)(v3 * v3) / v4;
    float v5 = (float)((float)(v3 * v3) * (float)(v6 + v7)) / (float)(v4 * v8);
    float v11 = result[2];
    float v12 = (float)((float)((float)(v4 * v7) + (float)(v6 * v4)) + (float)(v8 * v11)) / (float)(v4 * v8);
    float v13 = (float)((float)((float)(v6 * v11) + (float)(v6 * v8)) + (float)(v7 * v11)) / (float)(v4 * v8);
    float v14 = (float)(v6 * v7) / v9;
  }
  else
  {
    float v14 = v6 / v4;
    float v10 = 0.0;
    float v12 = 0.0;
    float v13 = result[2] / v4;
  }
  *(float *)a3 = v12;
  *(float *)(a3 + 4) = v13;
  *(float *)(a3 + 8) = v14;
  *(float *)(a3 + 12) = v10;
  *(float *)(a3 + 16) = v5;
  *(float *)(a3 + 20) = v3;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(float a1, float a2, uint64_t a3, float *a4, int a5)
{
  float v5 = (float)(a1 * a1) - (float)(a2 * a2);
  float v6 = (float)(a2 * a1) + (float)(a1 * a2);
  float v7 = a4[4];
  float v8 = a1 * v7;
  float v9 = a2 * v7;
  if (a5)
  {
    float v10 = a4[3];
    float v8 = v8 + (float)(v5 * v10);
    float v9 = v9 + (float)(v6 * v10);
    float v11 = a4[1];
    float v12 = (float)(a1 * v11) + (float)(v5 * *a4);
    float v13 = (float)(a2 * v11) + (float)(v6 * *a4);
    float v14 = (float)(v5 * a1) - (float)(v6 * a2);
    float v15 = (float)(a1 * v6) + (float)(v5 * a2);
    float v16 = v14 + v12;
    float v17 = v15 + v13;
  }
  else
  {
    float v18 = a4[1];
    float v19 = a1 * v18;
    float v20 = a2 * v18;
    float v16 = v5 + v19;
    float v17 = v6 + v20;
  }
  return (float)((float)(v17 * v9) + (float)(v8 * (float)(a4[2] + v16)))
       * (float)(1.0 / (float)((float)(v17 * v17) + (float)((float)(a4[2] + v16) * (float)(a4[2] + v16))));
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::initialize(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, double a2)
{
  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 768), 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  double result = 524288.0;
  *((void *)this + 51) = 0x4120000000000000;
  *((_DWORD *)this + 104) = 0;
  *((unsigned char *)this + 44) = 1;
  return result;
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::reset(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  double result = 524288.0;
  *((void *)this + 51) = 0x4120000000000000;
  *((_DWORD *)this + 104) = 0;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 872), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 768), 0);
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::setParameters(uint64_t a1, DspLib::AlgorithmParametersInstance *this, int a3)
{
  if (*(unsigned char *)(a1 + 44))
  {
    int v5 = 7 * a3;
    uint64_t v6 = DspLib::AlgorithmParametersInstance::group(this, 7 * a3 + 5);
    uint64_t v7 = v6;
    float v8 = *(float *)(v6 + 20);
    if (*(float *)(v6 + 24) + *(double *)a1 * 0.00048828125 * -2.0 * *(float *)(v6 + 68) > v8)
    {
      *(float *)(a1 + 856) = v8;
      *(_DWORD *)(a1 + 860) = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(a1 + 864) = *(_DWORD *)(v6 + 68);
    }
    float v9 = DspLib::dB2Amp((DspLib *)v6, *(float *)(v6 + 56));
    *(float *)(a1 + 984) = v9 / (float)(v9 + 1.0);
    *(float *)(a1 + 988) = *(float *)(v7 + 60) * 0.01;
    *(float *)(a1 + 992) = DspLib::dB2Amp(v10, *(float *)(v7 + 64));
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(v7 + 80);
    float v12 = DspLib::dB2Amp(v11, *(float *)(v7 + 76));
    *(float *)(a1 + 996) = v12 / (float)(v12 + 1.0);
    *(_DWORD *)(a1 + 1004) = *(_DWORD *)(v7 + 32);
    *(_DWORD *)(a1 + 1008) = *(_DWORD *)(v7 + 36);
    *(_DWORD *)(a1 + 1012) = *(_DWORD *)(v7 + 40);
    *(_DWORD *)(a1 + 1016) = *(_DWORD *)(v7 + 44);
    *(_DWORD *)(a1 + 1020) = *(_DWORD *)(v7 + 48);
    *(_DWORD *)(a1 + 1024) = *(_DWORD *)(v7 + 52);
    *(unsigned char *)(a1 + 406) = *(float *)(v7 + 84) != 0.0;
    float v13 = *(double *)a1 * 0.00048828125;
    v14.i64[0] = 0xFFFFFFFFLL;
    v14.i64[1] = 0xFFFFFFFFLL;
    float32x2_t v15 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 856)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13), 0)))), v14)), v13));
    *(float32x2_t *)(a1 + 848) = v15;
    float v16 = *(float *)(a1 + 864) * v13;
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 504), 3, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v15).f32[0] / v16));
    DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2 *)(a1 + 504), *(float *)(a1 + 848), v16, v17);
    std::vector<unsigned long>::resize(a1 + 8, *(void *)(a1 + 536));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x800, *(float *)(a1 + 848), *(float *)(a1 + 852), *(double *)a1, (unint64_t)*(float *)(a1 + 864), (unint64_t **)&v22);
    float v18 = *(void **)(a1 + 8);
    if (v18)
    {
      *(void *)(a1 + 16) = v18;
      operator delete(v18);
    }
    *(_OWORD *)(a1 + 8) = v22;
    *(void *)(a1 + 24) = v23;
    float v19 = *(double *)a1 * 0.00048828125 * *(float *)(a1 + 864);
    *(float *)(a1 + 40) = v19;
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 600), *(void *)(a1 + 536));
    DspLibBuffer::initialize((DspLibBuffer *)(a1 + 680), *(void *)(a1 + 536), 1u);
    DspLibBuffer::setNumFrames((unint64_t *)(a1 + 680), *(void *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 768), *(void *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 872), *(void *)(a1 + 536));
    DspLib::ComplexVector::operator=(a1 + 872, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 48), 3, *(void *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 144), *(void *)(a1 + 536));
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 224), *(void *)(a1 + 536), 3);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 320), *(void *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 424), *(void *)(a1 + 536));
    float v20 = *(double *)a1
        / (double)vcvtad_u64_f64(*(double *)a1* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this, (v5 + 2) | 0x300000000));
    *(float *)(a1 + 32) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 28) * 1000.0) * v20) / 1000.0));
    *(float *)(a1 + 36) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 72) * 1000.0) * v20) / 1000.0));
    *(unsigned char *)(a1 + 45) = 1;
  }
  else
  {
    uint64_t v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 801);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, unint64_t *a2)
{
  *((void *)this + 119) = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readInductanceModel((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2);
  *((_DWORD *)this + 240) = v4;
  *((unsigned char *)this + 964) = BYTE4(v4);
  if ((v4 & 0xFF00000000) == 0)
  {
    *((_DWORD *)this + 100) = 0;
    *((_WORD *)this + 202) = 0;
    double result = 524288.0;
    *((void *)this + 51) = 0x4120000000000000;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, unsigned int a2)
{
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, *((void *)this + 119), *((void *)this + 120), a2);
}

BOOL DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::process(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 45))
  {
    float v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v12, 894);
    ++DspLibDebug::mAssertCounter;
  }
  DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (void *)this + 75, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), (uint64_t *)this + 1);
  DspLib::LoudspeakerSystemIDV2::updateWeights((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 872), v13, *((float *)this + 246));
  *((float *)this + 102) = v14;
  BOOL result = DspLib::LoudspeakerSystemIDV2::safeToAdapt((uint64_t *)a5, (float *)this + 100, (uint64_t *)this + 1, (float *)this + 104, v14, *((float *)this + 246), *((float *)this + 247), *((float *)this + 248));
  if (result)
  {
    uint64_t v16 = MEMORY[0x1F4188790](result);
    float v17 = (DSPSplitComplex *)MEMORY[0x1F4188790](v16);
    uint64_t v18 = *((void *)this + 67);
    v36.vDSP_Length realp = v20;
    v36.imagp = (float *)((char *)&v33[-1] - v19);
    uint64_t v37 = v18;
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v17, &v36, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), (float *)this + 238);
    DspLib::ComplexVector::operator=((uint64_t)this + 768, (uint64_t)a6);
    DspLib::operator+=((char *)this + 768, &v36);
    DspLib::operator+=((uint64_t)this + 768, a4);
    DspLib::LoudspeakerSystemIDV2::updateModelFitData((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), a6, a4, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 768), (DSPSplitComplex *)((char *)this + 424), v21);
    DspLib::LoudspeakerSystemIDV2::updateMInInductanceModel((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), (float *)this + 238, (DSPSplitComplex *)((char *)this + 872), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48));
    DspLib::LoudspeakerSystemIDV2::updateAInverseInInductanceModel((uint64_t)this + 504, (float *)this + 238, (uint64_t)this + 144, (uint64_t)this + 872);
    DspLib::LoudspeakerSystemIDV2::updateXInInductanceModel((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), (DSPSplitComplex *)this + 9, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), v22);
    uint64_t v24 = MEMORY[0x1F4188790](v23);
    MEMORY[0x1F4188790](v24);
    __B.vDSP_Length realp = v26;
    __B.imagp = (float *)((char *)&v33[-1] - v25);
    uint64_t v35 = v27;
    DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, &__B);
    DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)((char *)this + 424));
    DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
    DspLib::operator*=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)this + 9);
    memset(v33, 0, 13);
    BOOL result = DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)v33, (float *)v33 + 1, (float *)&v33[1], (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), v28, 1.0e-10);
    if (result
      && (BOOL result = DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::parametersAreValid((uint64_t)this, v33, (uint64_t)a6, a4, v29, v30)))
    {
      *((float32x2_t *)this + 119) = v33[0];
      *(float32x2_t *)((char *)this + 957) = *(float32x2_t *)((char *)v33 + 5);
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
    }
    *((unsigned char *)this + 405) = v31;
    *((unsigned char *)this + 404) = *((float *)this + 103) < *((float *)this + 250);
  }
  else
  {
    *((_WORD *)this + 202) = 0;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(DSPSplitComplex *result, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((void *)a3 + 4))
  {
    uint64_t v7 = MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v7);
    uint64_t v9 = *(void *)(v8 + 32);
    __A.vDSP_Length realp = v11;
    __A.imagp = (float *)((char *)&v17 - v10);
    uint64_t v21 = v9;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    uint64_t v13 = MEMORY[0x1F4188790](v12);
    MEMORY[0x1F4188790](v13);
    __B.vDSP_Length realp = v15;
    __B.imagp = (float *)((char *)&v17 - v14);
    uint64_t v19 = v16;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__A, a4[2]);
    DspLib::operator*=((uint64_t)&__B, a4[1]);
    DspLib::operator+=(&__A, &__B);
    DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
    DspLib::operator+=((uint64_t)&__B, *a4);
    if (fabsf(*__B.realp) < 0.00000011921) {
      *__B.vDSP_Length realp = 0.00000011921;
    }
    DspLib::ComplexSpan::operator=(a2, &__A);
    return DspLib::operator/=(a2, &__B);
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::updateMInInductanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v8);
  __B.vDSP_Length realp = v11;
  __B.imagp = (float *)((char *)&__C - v10);
  uint64_t v28 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__B);
  uint64_t v13 = DspLib::operator+=((uint64_t)&__B, *a2);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  __A.vDSP_Length realp = v16;
  __A.imagp = (float *)((char *)&__C - v15);
  uint64_t v26 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  uint64_t v18 = DspLib::operator*=(&__A, a3);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  __C.vDSP_Length realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  uint64_t v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__C);
  DspLib::operator*=((uint64_t)&__C, -a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[1]);
  DspLib::operator+=(&__A, &__C);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV2::updateAInverseInInductanceModel(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v7);
  v13.vDSP_Length realp = v10;
  v13.imagp = (float *)((char *)&v13 - v9);
  uint64_t v14 = v11;
  DspLib::ComplexMatrixSpan::row(v8, 0, &v13);
  DspLib::operator+=((uint64_t)&v13, *a2);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &v13);
}

void DspLib::LoudspeakerSystemIDV2::updateXInInductanceModel(DspLib::LoudspeakerSystemIDV2 *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v8);
  __C.vDSP_Length realp = v10;
  __C.imagp = (float *)((char *)&__C - v9);
  uint64_t v14 = v11;
  DspLib::ComplexSpan::operator=(&__C, v12);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::parametersAreValid(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 600);
  uint64_t v11 = (float *)(a1 + 768);
  uint64_t v12 = (const DspLib::ComplexSpan *)(a1 + 424);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 600), *(const DspLib::ComplexSpan **)(a1 + 872), (float *)(a1 + 768), (const DspLib::ComplexSpan *)(a1 + 424), a6);
  *(_DWORD *)(a1 + 412) = v13;
  uint64_t v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 996)) {
    uint64_t v14 = 32;
  }
  float v15 = *(float *)(a1 + v14);
  *a2 = vmla_n_f32(*a2, vsub_f32(*(float32x2_t *)(a1 + 952), *a2), v15);
  a2[1].f32[0] = a2[1].f32[0] + (float)(v15 * (float)(*(float *)(a1 + 960) - a2[1].f32[0]));
  float v16 = *(float *)(a1 + 1016);
  float v17 = a2[1].f32[0] + (float)(COERCE_FLOAT(a2->i32[1] ^ 0x80000000) * a2->f32[0]);
  float v18 = v17 / a2->f32[0];
  BOOL v19 = a2->f32[0] < 1.0e-12;
  float v35 = a2->f32[1];
  if (!v19) {
    float v16 = v18;
  }
  float v36 = v16;
  float v37 = v17;
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::clipTsParameters((float *)a1, &v35);
  float32_t v20 = v37 + (float)((float)(v35 * v37) / v36);
  *a2 = (float32x2_t)(COERCE_UNSIGNED_INT(v37 / v36) | ((unint64_t)LODWORD(v35) << 32));
  a2[1].i8[4] = 0;
  a2[1].f32[0] = v20;
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v23 = (DSPSplitComplex *)MEMORY[0x1F4188790](v22);
  uint64_t v24 = *(void *)(a1 + 536);
  v33.vDSP_Length realp = v26;
  v33.imagp = (float *)((char *)&v33 - v25);
  uint64_t v34 = v24;
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v23, &v33, v27, (float *)a2);
  DspLib::ComplexVector::operator=((uint64_t)v11, a3);
  DspLib::operator+=(v11, &v33);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 872), v11, v12, v28);
  char v30 = 1;
  *(unsigned char *)(a1 + 404) = 1;
  float v31 = *(float *)(a1 + 412);
  if (v29 >= v31) {
    char v30 = 0;
  }
  else {
    *(float *)(a1 + 412) = v29;
  }
  BOOL result = v29 < v31;
  *(unsigned char *)(a1 + 405) = v30;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::status(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 44))
  {
    float v4 = *((float *)this + 239);
    float v5 = *((float *)this + 238);
    float v6 = *((float *)this + 240) - (float)(v4 * v5);
    if (v5 == 0.0) {
      float v7 = *((float *)this + 254);
    }
    else {
      float v7 = v6 / v5;
    }
    *(float *)(a2 + 16) = v4;
    *(float *)(a2 + 20) = v7;
    if (*((unsigned char *)this + 404)) {
      float v8 = 1.0;
    }
    else {
      float v8 = 0.0;
    }
    *(float *)(a2 + 24) = v6;
    *(float *)(a2 + 28) = v8;
    if (*((unsigned char *)this + 405)) {
      float v9 = 1.0;
    }
    else {
      float v9 = 0.0;
    }
    *(float *)(a2 + 68) = v9;
    *(float *)(a2 + 32) = (float)*((unint64_t *)this + 67);
    *(_DWORD *)(a2 + 36) = *((_DWORD *)this + 10);
    *(_DWORD *)(a2 + 52) = *((_DWORD *)this + 212);
    *(_DWORD *)(a2 + 56) = *((_DWORD *)this + 213);
    *(_DWORD *)(a2 + 12) = *((_DWORD *)this + 100);
    *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 104);
    *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 102);
    *(float *)(a2 + 48) = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 64) = *((_DWORD *)this + 103);
  }
  else
  {
    uint64_t v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 939);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::clipTsParameters(float *a1, float *a2)
{
  unint64_t v2 = a1 + 251;
  float v3 = a1 + 252;
  if (a1[252] >= *a2) {
    float v3 = a2;
  }
  if (*a2 >= a1[251]) {
    unint64_t v2 = v3;
  }
  *a2 = *v2;
  float v4 = a1 + 253;
  float v5 = a1 + 254;
  float v6 = a2[1];
  if (a1[254] >= v6) {
    float v5 = a2 + 1;
  }
  if (v6 >= a1[253]) {
    float v4 = v5;
  }
  a2[1] = *v4;
  float v7 = a1 + 255;
  float v8 = a1 + 256;
  float v10 = a2[2];
  float v9 = a2 + 2;
  float v11 = v10;
  if (a1[256] >= v10) {
    float v8 = v9;
  }
  if (v11 >= a1[255]) {
    float v7 = v8;
  }
  float result = *v7;
  *float v9 = *v7;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(uint64_t a1)
{
  return *((float *)&a1 + 1);
}

unint64_t DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(float a1, float a2, float a3)
{
  return COERCE_UNSIGNED_INT(a3 / a2) | ((unint64_t)LODWORD(a1) << 32);
}

void DspLib::LoudspeakerSystemIDV2::updateMTimesX(uint64_t a1, void *a2, void *a3)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  v26[0] = *a2;
  v26[1] = v7 * v6;
  v26[2] = v6;
  v26[3] = v7;
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  v25[0] = *a3;
  v25[1] = v9 * v8;
  v25[2] = v8;
  v25[3] = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v10;
  DspLib::multiply((uint64_t)v26, (uint64_t)v25, (float **)v24);
  uint64_t v12 = a2[3];
  uint64_t v13 = a3[4];
  if ((unint64_t)(v13 * v12) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v13 * v12;
  }
  MEMORY[0x1F4188790](v11);
  float v16 = (const float *)((char *)v21 - v15);
  uint64_t v17 = a2[4];
  v23[0] = a2[1];
  v23[1] = v17 * (void)v18;
  v23[2] = v18;
  v23[3] = v17;
  uint64_t v19 = a3[3];
  v22[0] = a3[1];
  v22[1] = v19 * (void)v20;
  _OWORD v22[2] = v19;
  v22[3] = v20;
  v21[0] = (float *)((char *)v21 - v15);
  v21[1] = (float *)v14;
  v21[2] = v18;
  v21[3] = v20;
  DspLib::multiply((uint64_t)v23, (uint64_t)v22, v21);
  DspLib::add(*(float **)a1, *(void *)(a1 + 8), v16);
}

void DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM(uint64_t a1, _OWORD *a2, void *a3)
{
  long long v6 = a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  v20[0] = *a3;
  v20[1] = v8 * v7;
  v20[2] = v7;
  v20[3] = v8;
  uint64_t v9 = *(float **)(a1 + 24);
  long long v10 = *(float **)(a1 + 32);
  v19[0] = *(float **)a1;
  v19[1] = (float *)((void)v10 * (void)v9);
  v19[2] = v9;
  v19[3] = v10;
  DspLib::multiply((uint64_t)v21, (uint64_t)v20, v19);
  long long v11 = a2[1];
  v18[0] = *a2;
  v18[1] = v11;
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[4];
  v17[0] = a3[1];
  v17[1] = v13 * v12;
  v17[2] = v12;
  v17[3] = v13;
  uint64_t v14 = *(float **)(a1 + 24);
  uint64_t v15 = *(float **)(a1 + 32);
  v16[0] = *(float **)(a1 + 8);
  v16[1] = (float *)((void)v15 * (void)v14);
  v16[2] = v14;
  v16[3] = v15;
  DspLib::multiply((uint64_t)v18, (uint64_t)v17, v16);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    float v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

int8x16_t DspLib::CPUMeasure::start(int8x16_t *this)
{
  this[5].i64[1] = 0;
  this[6].i64[0] = 0;
  this[6].i64[1] = 0;
  this->i64[0] = mach_absolute_time();
  int32x2_t v2 = vdup_n_s32(thread_selfcounts() == 0);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  int8x16_t v4 = vandq_s8(v6, (int8x16_t)vcltzq_s64(vshlq_n_s64(v3, 0x3FuLL)));
  int8x16_t result = vextq_s8(v4, v4, 8uLL);
  this[2] = result;
  return result;
}

void DspLib::CPUMeasure::stop(DspLib::CPUMeasure *this, unint64_t a2, double a3)
{
  uint64_t v5 = mach_absolute_time();
  uint64_t v6 = *((void *)this + 1);
  float v22 = (float)(v5 - (*(void *)this + *((void *)this + 11)));
  *((void *)this + 1) = v5;
  unsigned int v7 = thread_selfcounts() == 0;
  *(float *)v8.i32 = (float)a2;
  int32x2_t v19 = v8;
  double v9 = a3 / (double)a2;
  float v10 = exp(-1.0 / (v9 * 0.5));
  float v11 = (float)((float)(1.0 - v10) * (float)(v5 - v6)) + (float)(*((float *)this + 5) * v10);
  *((float *)this + 4) = (float)((float)(1.0 - v10) * v22) + (float)(*((float *)this + 4) * v10);
  *((float *)this + 5) = v11;
  int32x2_t v12 = vdup_n_s32(v7);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int64x2_t v14 = (int64x2_t)vandq_s8(vextq_s8(v23, v23, 8uLL), (int8x16_t)vcltzq_s64(vshlq_n_s64(v13, 0x3FuLL)));
  float32x2_t v21 = vcvt_f32_f64(vmulq_f64(vmulq_n_f64(vcvtq_f64_f32(vdiv_f32((float32x2_t)vand_s8((int8x8_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vsubq_s64(v14, vaddq_s64(*((int64x2_t *)this + 6), *((int64x2_t *)this + 2))))), (int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vsubq_s64(v14, *((int64x2_t *)this + 6)), *((uint64x2_t *)this + 2)))), (float32x2_t)vdup_lane_s32(v19, 0))), a3), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
  *((float32x2_t *)this + 6) = vmla_n_f32(vmul_n_f32(v21, 1.0 - v10), *(float32x2_t *)((char *)this + 48), v10);
  float v15 = exp(-1.0 / (v9 * 4.0));
  float32x2_t v16 = vmul_n_f32(*(float32x2_t *)((char *)this + 24), v15);
  float32x2_t v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v21, 0);
  v17.f32[0] = v22;
  *((int8x8_t *)this + 3) = vbsl_s8((int8x8_t)vcgt_f32(v17, v16), (int8x8_t)v17, (int8x8_t)v16);
  float v18 = *((float *)this + 14) * v15;
  if (v18 < v21.f32[1]) {
    float v18 = v21.f32[1];
  }
  *((float *)this + 14) = v18;
}

int8x16_t DspLib::CPUMeasure::pause(DspLib::CPUMeasure *this)
{
  *((void *)this + 8) = mach_absolute_time();
  int32x2_t v2 = vdup_n_s32(thread_selfcounts() == 0);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  int8x16_t v4 = vandq_s8(v6, (int8x16_t)vcltzq_s64(vshlq_n_s64(v3, 0x3FuLL)));
  int8x16_t result = vextq_s8(v4, v4, 8uLL);
  *(int8x16_t *)((char *)this + 72) = result;
  return result;
}

int64x2_t DspLib::CPUMeasure::resume(DspLib::CPUMeasure *this)
{
  uint64_t v2 = mach_absolute_time();
  int v3 = thread_selfcounts();
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v6.i64[0] = v2;
  v6.i64[1] = v5;
  int64x2_t result = vaddq_s64(vsubq_s64(v6, *((int64x2_t *)this + 4)), *(int64x2_t *)((char *)this + 88));
  *(int64x2_t *)((char *)this + 88) = result;
  *((void *)this + 13) += v4 - *((void *)this + 10);
  return result;
}

double DspLib::CPUMeasure::percentCPU@<D0>(DspLib::CPUMeasure *this@<X0>, uint64_t a2@<X8>)
{
  v2.i32[0] = *((_DWORD *)this + 4);
  int v3 = (const float *)((char *)this + 20);
  v2.i32[1] = *((_DWORD *)this + 6);
  float32x2_t v4 = vld1_dup_f32(v3);
  *(float32x2_t *)a2 = vmul_f32(vdiv_f32(v2, v4), (float32x2_t)vdup_n_s32(0x42C80000u));
  v4.i32[0] = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 12);
  *(_DWORD *)(a2 + 12) = v4.i32[0];
  double result = *(double *)((char *)this + 52);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t DspLib::BuzzKill::BuzzKillFFT::processWithDifference(DspLib::BuzzKill::BuzzKillFFT *this)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    uint64_t result = (*(uint64_t (**)(DspLib::BuzzKill::BuzzKillFFT *))(*(void *)this + 56))(this);
    if (result)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        MEMORY[0x1F4188790](result);
        unsigned int v7 = (_DWORD *)((char *)v11 - v6);
        uint64_t v8 = *((void *)this + 28);
        DspLib::subtract(v9 + 1, v8 - 1, v9, v8 - 1, (float *)((char *)v11 - v6 + 4));
        *unsigned int v7 = 0;
        DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)(*((void *)this + 39) + v4), (uint64_t)v7, v8, (DSPSplitComplex *)(*((void *)this + 36) + v3));
        uint64_t result = (*(uint64_t (**)(DspLib::BuzzKill::BuzzKillFFT *))(*(void *)this + 56))(this);
        ++v5;
        v4 += 104;
        v3 += 80;
      }
      while (v5 < result);
    }
  }
  else
  {
    float v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKillClasses.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v10, 11);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::BuzzKill::FFTForDisplay::initialize(DspLib::BuzzKill::FFTForDisplay *this, double a2, uint64_t a3)
{
  *(double *)this = a2;
  *((void *)this + 1) = a3;
  return DspLib::FFT::Filterbank::initialize((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 24), 1, 44100.0);
}

void DspLib::BuzzKill::FFTForDisplay::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unsigned int v8 = 1 << vcvtas_u32_f32(*(float *)a2);
  *(_DWORD *)(a1 + 384) = v8;
  uint64_t v9 = (unint64_t *)(a1 + 392);
  DspLibBuffer::initialize((DspLibBuffer *)(a1 + 392), (v8 >> 1) + 1, 1u);
  DspLibBuffer::setNumFrames(v9, ((unint64_t)*(unsigned int *)(a1 + 384) >> 1) + 1);
  v10.n128_u32[0] = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = v10.n128_f32[0];
  DspLib::FFT::Filterbank::setParameters(a1 + 24, (void *)a2, a3, v10);
  float v11 = roundf((float)((float)(*(float *)(a2 + 4) / -100.0) + 1.0) * (float)*(unsigned int *)(a1 + 384));
  *(float *)(a1 + 20) = a4;
  float v12 = *(double *)a1;
  *(float *)(a1 + 480) = expf(-1.0 / (float)((float)((float)(v12 / (float)v11) * a4) / 1000.0));
}

void DspLib::BuzzKill::FFTForDisplay::reset(DspLib::BuzzKill::FFTForDisplay *this)
{
  unint64_t v1 = this;
  DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 24));
  unint64_t v1 = (DspLibBuffer *)((char *)v1 + 392);
  float32x2_t v2 = (float *)DspLibBuffer::channel(v1, 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);

  DspLib::clear(v2, cycle_count);
}

void DspLib::BuzzKill::FFTForDisplay::process(uint64_t a1, float *__C, vDSP_Length __N)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned int *)(a1 + 384);
  DspLib::multiply(__C, __N, 2.0 / (float)*(unint64_t *)(a1 + 8));
  if (__N)
  {
    unsigned int v7 = 0;
    vDSP_Length v8 = (v6 >> 1) + 1;
    uint64_t v16 = a1 + 24;
    uint64_t v9 = 4 * v8;
    do
    {
      uint64_t v18 = __N - v7;
      v19[0] = &__C[__N - v18];
      v17[0] = v19;
      v17[1] = 1;
      int v10 = DspLib::FFT::Filterbank::audioInput(v16, v17);
      unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 336) + 88);
      if (v11)
      {
        if (*(_DWORD *)(a1 + 16) == 1)
        {
          float v12 = *(double *)a1;
          *(float *)(a1 + 480) = expf(-1.0 / (float)((float)(*(float *)(a1 + 20) * (float)(v12 / (float)v11)) / 1000.0));
        }
        int64x2_t v13 = (float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 392), 0);
        DspLib::multiply(v13, v8, *(float *)(a1 + 480));
        MEMORY[0x1F4188790](v14);
        DspLib::FFT::amplitude(*(void *)(a1 + 312), (float *)((char *)&v17[-1] - ((v9 + 15) & 0x7FFFFFFF0)), v8);
        float v15 = (float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 392), 0);
        DspLib::vmax(v15, v8, (const float *)((char *)&v17[-1] - ((v9 + 15) & 0x7FFFFFFF0)));
      }
      v7 += v10;
    }
    while (v7 < __N);
  }
}

void DspLib::BuzzKill::FFTForDisplay::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (DspLibBuffer *)(a1 + 392);
  unsigned int cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 392));
  if (cycle_count >= 2)
  {
    uint64_t v6 = DspLibBuffer::channel(v4, 0);
    unsigned int v7 = 0;
    int v8 = 0;
    float v9 = *(double *)a1;
    float v10 = v9 / (float)*(unsigned int *)(a1 + 384);
    unsigned int v11 = (float *)(a2 + 4048);
    uint64_t v12 = -501;
    while (1)
    {
      float v13 = v11[701];
      unsigned int v14 = cycle_count - 2 >= (float)(v13 / v10) ? (float)(v13 / v10) : cycle_count - 2;
      *unsigned int v11 = (float)((float)(*(float *)(v6 + 4 * (v14 + 1)) * (float)((float)(v13 / v10) - (float)v14))
                   + (float)((float)(1.0 - (float)((float)(v13 / v10) - (float)v14)) * *(float *)(v6 + 4 * v14)))
           + 0.00001;
      if ((float)(v13 - *(float *)(a2 + 4 * (v8 + 1713))) > v10) {
        break;
      }
      int v8 = v12 + 501;
      ++v11;
      unsigned int v7 = (float)(v13 / v10);
      if (__CFADD__(v12++, 1)) {
        goto LABEL_23;
      }
    }
    if ((v12 + 501) <= 0x1F4)
    {
      uint64_t v16 = v12 + 501;
      do
      {
        uint64_t v17 = a2 + 4 * v16;
        unsigned int v18 = vcvtas_u32_f32(*(float *)(v17 + 6852) / v10);
        if (cycle_count - 1 < v18) {
          unsigned int v18 = cycle_count - 1;
        }
        float v19 = *(float *)(v6 + 4 * v18);
        if (v7 <= v18)
        {
          if (v7 + 1 <= v18 + 1) {
            unsigned int v20 = v18 + 1;
          }
          else {
            unsigned int v20 = v7 + 1;
          }
          do
          {
            if (*(float *)(v6 + 4 * v7) > v19) {
              float v19 = *(float *)(v6 + 4 * v7);
            }
            ++v7;
          }
          while (v20 != v7);
          unsigned int v7 = v20;
        }
        *(float *)(v17 + 4048) = v19 + 0.00001;
        ++v16;
      }
      while (v16 != 501);
    }
LABEL_23:
    DspLib::amp2dB((float *)(a2 + 4048), 0x1F5uLL, 1.0);
  }
}

uint64_t DspLib::BuzzKill::HighBuzzKillFFT::initialize(DspLib::BuzzKill::HighBuzzKillFFT *this, int a2)
{
  DspLib::copy(&_ZGRN6DspLib3FFT10ParametersL8kDefaultE_, 10, v8);
  v8[0] = xmmword_1BB8742E0;
  DspLib::FFT::Filterbank::initialize(this, a2, 44100.0);
  DspLib::FFT::Filterbank::setParameters((uint64_t)this, v8, 10, v4);
  DspLibBuffer::initialize((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 448), 0x21uLL, 1u);
  DspLibBuffer::setNumFrames((unint64_t *)this + 56, 0x21uLL);
  unint64_t v5 = (float *)DspLibBuffer::channel((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 448), 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 448));
  DspLib::fill(v5, cycle_count, 1.0);
  return DspLibBuffer::initialize((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 360), 0x21uLL, 1u);
}

void DspLib::BuzzKill::HighBuzzKillFFT::process(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  DSPSplitComplex v33 = a3;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v35 = a2[2];
  if (v35)
  {
    uint64_t v4 = a1;
    unint64_t v5 = 0;
    uint64_t v6 = (DspLibBuffer *)(a1 + 448);
    unsigned int v7 = (DspLibBuffer *)(a1 + 360);
    uint64_t v32 = *(unsigned int *)(a1 + 176);
    uint64_t v8 = 80 * v32;
    do
    {
      uint64_t v34 = &v32;
      MEMORY[0x1F4188790](a1);
      unsigned int v11 = (char *)&v32 - v10;
      if (v9 >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = v9;
      }
      bzero((char *)&v32 - v10, v12);
      unint64_t v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *a2;
        do
        {
          *(void *)&v11[8 * v15] = *(void *)(v16 + 8 * v15) + 4 * v5;
          ++v15;
        }
        while (v14 > v15);
      }
      unint64_t v17 = v33[1];
      MEMORY[0x1F4188790](v13);
      unsigned int v20 = (char *)&v32 - v19;
      if (v18 >= 0x200) {
        size_t v21 = 512;
      }
      else {
        size_t v21 = v18;
      }
      bzero((char *)&v32 - v19, v21);
      if (v17)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *v33;
        do
        {
          *(void *)&v20[8 * v22] = *(void *)(v23 + 8 * v22) + 4 * v5;
          ++v22;
        }
        while (v17 > v22);
      }
      v37[0] = v11;
      v37[1] = v14;
      v37[2] = v35 - v5;
      v36[0] = v20;
      v36[1] = v17;
      v36[2] = v35 - v5;
      a1 = DspLib::FFT::Filterbank::audioInputOutput(v4, v37, v36);
      int v24 = a1;
      if (*(void *)(*(void *)(v4 + 312) + 88)) {
        BOOL v25 = v32 == 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (!v25)
      {
        uint64_t v26 = 0;
        do
        {
          DspLib::FFT::amplitude(*(void *)(v4 + 288) + v26, __C, 0x21uLL);
          uint64_t v27 = (const float *)DspLibBuffer::channel(v6, 0);
          uint64_t v28 = (float *)DspLibBuffer::channel(v7, 0);
          DspLib::divide(v27, 0x21uLL, __C, 33, v28);
          float v29 = (float *)DspLibBuffer::channel(v7, 0);
          DspLib::clip(v29, 0x21uLL, 0.0, 1.0);
          uint64_t v30 = *(void *)(v4 + 288) + v26;
          uint64_t v31 = DspLibBuffer::channel(v7, 0);
          DspLib::FFT::multiply(v30, v31, 0x21uLL);
          v26 += 80;
        }
        while (v8 != v26);
      }
      unint64_t v5 = (v24 + v5);
    }
    while (v5 < v35);
  }
}

uint64_t DspLib::BuzzKill::MitigationFilterBank::initialize(uint64_t this, uint64_t a2, double a3)
{
  *(void *)(this + 16) = a2;
  *(double *)(this + 8) = a3;
  return this;
}

double DspLib::BuzzKill::MitigationFilterBank::uninitialize(DspLib::BuzzKill::MitigationFilterBank *this)
{
  *((void *)this + 92) = *((void *)this + 91);
  *((void *)this + 95) = *((void *)this + 94);
  DspLib::NotchFilterBank::FilterBank::uninitialize((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32));
  double result = 0.0;
  *((void *)this + 90) = 0;
  return result;
}

void DspLib::BuzzKill::MitigationFilterBank::reset(DspLib::BuzzKill::MitigationFilterBank *this)
{
  *((_DWORD *)this + 6) = 0;
}

void DspLib::BuzzKill::MitigationFilterBank::setParameters(uint64_t a1, float *a2, float a3)
{
  *(float *)(a1 + 776) = 1.0 - DspLib::dB2Amp((DspLib *)a1, a2[27]);
  LODWORD(v6) = vcvtas_u32_f32(a2[23]);
  if (*(_DWORD *)(a1 + 724) != v6)
  {
    *(_DWORD *)(a1 + 724) = v6;
    std::vector<float>::resize(a1 + 728, v6);
    std::vector<float>::resize(a1 + 752, *(unsigned int *)(a1 + 724));
    DspLib::fill(*(float **)(a1 + 728), (uint64_t)(*(void *)(a1 + 736) - *(void *)(a1 + 728)) >> 2, 1000.0);
    DspLib::fill(*(float **)(a1 + 752), (uint64_t)(*(void *)(a1 + 760) - *(void *)(a1 + 752)) >> 2, 1.0);
    int v7 = (a2[24] + 0.5);
    goto LABEL_5;
  }
  int v7 = (a2[24] + 0.5);
  if (*(_DWORD *)(a1 + 720) != v7)
  {
LABEL_5:
    DspLib::NotchFilterBank::FilterBank::uninitialize((DspLib::NotchFilterBank::FilterBank *)(a1 + 32));
    DspLib::NotchFilterBank::FilterBank::setFilterMode(a1 + 32, v7);
    DspLib::NotchFilterBank::FilterBank::setNumNotchFilters(a1 + 32, *(_DWORD *)(a1 + 724));
  }
  *(_DWORD *)(a1 + 720) = v7;
  float v8 = *(double *)(a1 + 8);
  DspLib::NotchFilterBank::FilterBank::initialize((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), *(_DWORD *)(a1 + 16), (double)vcvtas_u32_f32(v8 / a3));
  DspLib::NotchFilterBank::FilterBank::setLowShelveFrequency((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), a2[25]);

  DspLib::NotchFilterBank::FilterBank::setParameters(a1 + 32, a2 + 40, 16, v9);
}

unsigned int DspLib::BuzzKill::MitigationFilterBank::numActiveFilters(DspLib::BuzzKill::MitigationFilterBank *this)
{
  DspLib::NotchFilterBank::FilterBank::status((uint64_t)this + 32, &v3);
  unsigned int result = vcvtas_u32_f32(v3);
  *((_DWORD *)this + 6) = result;
  return result;
}

void DspLib::BuzzKill::MitigationFilterBank::assignFilters(DspLib::BuzzKill::MitigationFilterBank *this, char a2, float *a3, float *a4, int a5, float *a6, float a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32);
  DspLib::NotchFilterBank::FilterBank::setLowShelveGain((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32), 1.0);
  if ((a2 & 1) == 0)
  {
    uint64_t v15 = (float *)*((void *)this + 91);
    uint64_t v16 = (float *)*((void *)this + 94);
    uint64_t v17 = *((unsigned int *)this + 181);
    if (a5)
    {
      uint64_t v18 = 0;
      int v19 = *(unsigned __int8 *)this;
      float v20 = *((float *)this + 194);
      memset(v29, 0, sizeof(v29));
      int v30 = 0;
      do
      {
        if (v17)
        {
          uint64_t v21 = 0;
          float v22 = a3[v18];
          float v23 = a4[v18];
          float v24 = a6[v18];
          unsigned int v25 = -1;
          float v26 = 1.0e10;
          while (1)
          {
            float v27 = (float)(1.0 / v22) * vabds_f32(v22, v15[v21]);
            if (v27 < a7) {
              break;
            }
            if (v16[v21] > v20 && v27 < v26)
            {
              unsigned int v25 = v21;
              float v26 = v27;
            }
            if (v17 == ++v21)
            {
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_19;
              }
              v15[v25] = v22;
              if (!v19) {
                float v24 = v23;
              }
              v16[v25] = v24;
              uint64_t v28 = (char *)v29 + v25;
              goto LABEL_18;
            }
          }
          uint64_t v28 = (char *)v29 + v21;
          if (*((unsigned char *)v29 + v21)) {
            goto LABEL_19;
          }
          v15[v21] = v22;
          if (!v19) {
            float v24 = v23 * v16[v21];
          }
          v16[v21] = v24;
LABEL_18:
          *uint64_t v28 = 1;
        }
LABEL_19:
        ++v18;
      }
      while (v18 != a5);
    }
    DspLib::NotchFilterBank::FilterBank::setNotchFilters(v14, v15, v16, 0, v17);
  }
}

void DspLib::BuzzKill::MitigationFilterBank::status(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, char a6)
{
  *(float *)a2 = (float)*(unsigned int *)(a1 + 24);
  *(_DWORD *)(a2 + 4) = 0;
  DspLib::copy(*(void **)(a1 + 728), (uint64_t)(*(void *)(a1 + 736) - *(void *)(a1 + 728)) >> 2, (void *)(a2 + 6052));
  DspLib::copy(*(void **)(a1 + 752), (uint64_t)(*(void *)(a1 + 760) - *(void *)(a1 + 752)) >> 2, (void *)(a2 + 6452));
  float v11 = a3 + a3;
  float v12 = *(double *)(a1 + 8) * 0.5;
  if (v12 >= a4) {
    float v12 = a4;
  }
  if (v11 < v12) {
    float v11 = v12;
  }
  float v13 = powf(v11 / a3, 0.002);
  uint64_t v14 = 0;
  float v15 = 1.0;
  do
  {
    *(float *)(a2 + 6852 + v14) = v15 * a3;
    float v15 = v13 * v15;
    v14 += 4;
  }
  while (v14 != 2004);
  uint64_t v16 = *(unsigned int *)(a1 + 724);
  if (v16)
  {
    uint64_t v17 = *(float **)(a1 + 752);
    uint64_t v18 = *(float **)(a1 + 728);
    float v19 = log10f(v13);
    do
    {
      if (*v17 < *(float *)(a1 + 776))
      {
        float v20 = *v18;
        if (*v18 > 0.1)
        {
          int v21 = (int)(float)((float)(log10f(v20 / a3) / v19) + 0.5);
          if (v21 >= 1) {
            *(float *)(a2 + 4 * (v21 + 1713)) = v20;
          }
        }
      }
      ++v17;
      ++v18;
      --v16;
    }
    while (v16);
  }
  if (a6)
  {
    DspLib::clear((float *)(a2 + 2044), 0x1F5uLL);
  }
  else
  {
    float v22 = (float *)(a2 + 6852);
    float v23 = (float *)(a2 + 2044);
    DspLib::NotchFilterBank::FilterBank::getAmplitudeResponse((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), v22, v23, 0x1F5u);
    DspLib::amp2dB(v23, 0x1F5uLL, 1.0);
  }
}

void DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>(uint64_t *a1, uint64_t a2, uint64_t a3, DSPSplitComplex *a4)
{
  var30[7] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  __n128 v9 = (DSPComplex *)(((unint64_t)var30 - v8) & 0xFFFFFFFFFFFFFFC0);
  DspLib::multiply(v10, v11, *(const float **)(v7 + 24), *(void *)(v7 + 32), (float *)v9);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(a1, v9, v6, a4);
}

void *DspLib::DynamicFilter::Algorithm::Algorithm(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)a1, (uint64_t)&DspLib::DynamicFilter::Parameters::kDefinition);
  *(void *)uint64_t v6 = &unk_1F14A75A0;
  *(_DWORD *)(v6 + 296) = 1;
  *(_DWORD *)(v6 + 1088) = 0;
  *(_DWORD *)(v6 + 1104) = 0;
  *(void *)(v6 + 1112) = 0;
  *(unsigned char *)(v6 + 1120) = 0;
  *(_OWORD *)(v6 + 1336) = 0u;
  *(_OWORD *)(v6 + 1352) = 0u;
  *(_OWORD *)(v6 + 1368) = 0u;
  *(_OWORD *)(v6 + 1384) = 0u;
  *(_OWORD *)(v6 + 1400) = 0u;
  *(_OWORD *)(v6 + 1416) = 0u;
  *(_OWORD *)(v6 + 1128) = 0u;
  *(_OWORD *)(v6 + 1144) = 0u;
  *(_OWORD *)(v6 + 1160) = 0u;
  *(_OWORD *)(v6 + 1176) = 0u;
  *(_OWORD *)(v6 + 1192) = 0u;
  *(_OWORD *)(v6 + 1208) = 0u;
  *(unsigned char *)(v6 + 1224) = 0;
  *(unsigned char *)(v6 + 1328) = 0;
  *(_OWORD *)(v6 + 1312) = 0u;
  *(_OWORD *)(v6 + 1296) = 0u;
  *(_OWORD *)(v6 + 1280) = 0u;
  *(_OWORD *)(v6 + 1264) = 0u;
  *(_OWORD *)(v6 + 1248) = 0u;
  *(_OWORD *)(v6 + 1232) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 361) = 0u;
  *(_OWORD *)(v6 + 1432) = xmmword_1BB873AA0;
  *(_DWORD *)(v6 + 1448) = 0;
  *(unsigned char *)(v6 + 1456) = 0;
  *(_OWORD *)(v6 + 1568) = 0u;
  *(_OWORD *)(v6 + 1584) = 0u;
  *(_OWORD *)(v6 + 1600) = 0u;
  *(_OWORD *)(v6 + 1616) = 0u;
  *(_OWORD *)(v6 + 1632) = 0u;
  *(_OWORD *)(v6 + 1648) = 0u;
  *(unsigned char *)(v6 + 1560) = 0;
  *(_OWORD *)(v6 + 1544) = 0u;
  *(_OWORD *)(v6 + 1528) = 0u;
  *(_OWORD *)(v6 + 1512) = 0u;
  *(_OWORD *)(v6 + 1496) = 0u;
  *(_OWORD *)(v6 + 1480) = 0u;
  *(_OWORD *)(v6 + 1464) = 0u;
  *(void *)(v6 + 1664) = v6 + 1456;
  *(void *)(v6 + 1672) = v6 + 1560;
  *(_WORD *)(v6 + 1680) = 257;
  *(_DWORD *)(v6 + 1724) = 0;
  *(void *)(v6 + 1728) = 0;
  *(_OWORD *)(v6 + 1688) = 0u;
  *(_OWORD *)(v6 + 1704) = 0u;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    __n128 v9 = (std::__shared_weak_count *)a1[212];
    a1[211] = v8;
    a1[212] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    a1[211] = v8;
    a1[212] = 0;
  }
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a1[213] = v11;
  float v12 = (std::__shared_weak_count *)a1[214];
  a1[214] = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return a1;
}

uint64_t DspLib::DynamicFilter::Algorithm::initialize(uint64_t **this, uint64_t a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::initialize(this, a2, a3);
  if (v4)
  {
    *((unsigned char *)this + 8) = 1;
    ((void (*)(uint64_t **, char *, void))(*this)[33])(this, (char *)this + 264, 0);
    ((void (*)(uint64_t **))(*this)[17])(this);
  }
  return v4;
}

void DspLib::DynamicFilter::Algorithm::uninitialize(DspLib::DynamicFilter::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
}

void DspLib::DynamicFilter::Algorithm::allocateProcessingResources(DspLib::DynamicFilter::Algorithm *this, int a2)
{
  float v3 = (char *)this + 1688;
  if (a2)
  {
    if (!*((unsigned char *)this + 1681))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
      long long v4 = v16;
      long long v16 = 0uLL;
      unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 212);
      *(_OWORD *)float v3 = v4;
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (*((void *)&v16 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
      }
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
      long long v6 = v16;
      long long v16 = 0uLL;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 214);
      *((_OWORD *)v3 + 1) = v6;
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (*((void *)&v16 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
      }
      uint64_t v8 = (DspLibBuffer *)*((void *)this + 211);
      unint64_t v9 = (*(uint64_t (**)(DspLib::DynamicFilter::Algorithm *))(*(void *)this + 216))(this);
      DspLibBuffer::initialize(v8, v9, *((_DWORD *)this + 80));
      uint64_t v10 = (DspLibBuffer *)*((void *)this + 213);
      unint64_t v11 = (*(uint64_t (**)(DspLib::DynamicFilter::Algorithm *))(*(void *)this + 216))(this);
      DspLibBuffer::initialize(v10, v11, *((_DWORD *)this + 80));
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 1456), *((unsigned int *)this + 80), *((double *)this + 2), 1uLL);
    double v12 = *((double *)this + 2);
    unint64_t v13 = (*(uint64_t (**)(DspLib::DynamicFilter::Algorithm *))(*(void *)this + 216))(this);
    DspLib::SideChain::Algorithm::initialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 328), v12, v13);
  }
  else
  {
    if (!*((unsigned char *)this + 1681))
    {
      uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 212);
      *(void *)float v3 = 0;
      *((void *)v3 + 1) = 0;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      float v15 = (std::__shared_weak_count *)*((void *)this + 214);
      *((void *)v3 + 2) = 0;
      *((void *)v3 + 3) = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 1456));
    DspLib::SideChain::Algorithm::uninitialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  }
}

void DspLib::DynamicFilter::Algorithm::allocateBiquadFilterB(DspLib::DynamicFilter::Algorithm *this, int a2)
{
  float v3 = (DspLib::DynamicFilter::Algorithm *)((char *)this + 1560);
  if (a2) {
    DspLib::Biquad::ParametricFilter::initialize(v3, *((unsigned int *)this + 80), *((double *)this + 2), 1uLL);
  }
  else {
    DspLib::Biquad::ParametricFilter::uninitialize(v3);
  }
}

double DspLib::DynamicFilter::Algorithm::reset(DspLib::DynamicFilter::Algorithm *this)
{
  DspLib::SideChain::Algorithm::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  DspLib::Biquad::SetupWrapper::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 1504));
  DspLib::Biquad::SetupWrapper::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 1608));
  *((unsigned char *)this + 168DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 172DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  return result;
}

uint64_t DspLib::DynamicFilter::Algorithm::numStatus(DspLib::DynamicFilter::Algorithm *this)
{
  return 1;
}

double DspLib::DynamicFilter::Algorithm::latencySamples(DspLib::DynamicFilter::Algorithm *this)
{
  return 0.0;
}

void DspLib::DynamicFilter::Algorithm::setParameters(DspLib::DynamicFilter::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  char v4 = (*(uint64_t (**)(DspLib::DynamicFilter::Algorithm *))(*(void *)this + 56))(this);
  unsigned int v5 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u));
  if (v5 >= 5) {
    abort();
  }
  *((_DWORD *)this + 74) = v5;
  int v6 = ~(-1 << v4) & 0xFFFFF;
  *((void *)this + 39) = v6 & vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xAu));
  *((void *)this + 38) = v6 & vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u));
  char v15 = 1;
  *((_DWORD *)this + 81) = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>((int8x8_t *)this + 39, 0, (uint64_t)this + 312, 0x14u, &v15);
  char v16 = 1;
  int v7 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>((int8x8_t *)this + 38, 0, (uint64_t)this + 304, 0x14u, &v16);
  *((_DWORD *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, v7 != 0);
  if (*((_DWORD *)this + 80))
  {
    int v8 = *((_DWORD *)this + 74);
    float v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    if (v8 == 1)
    {
      BOOL v10 = 1;
      goto LABEL_9;
    }
    if (v8 != 4)
    {
      BOOL v10 = v9 > 0.0;
      goto LABEL_9;
    }
  }
  BOOL v10 = 0;
LABEL_9:
  DspLib::DynamicFilter::Algorithm::allocateBiquadFilterB(this, v10);
  if (*((_DWORD *)this + 80))
  {
    int v11 = *((_DWORD *)this + 74);
    float v12 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    if (v11 != 1 && (v11 == 4 || v12 <= 0.0))
    {
      unint64_t v13 = DspLib::DynamicFilter::Algorithm::computeFilterParameters(this, 1.0);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 1456, v13, v14, 0, 0x41uLL);
    }
    DspLib::DynamicFilter::Algorithm::configureSideChain(this);
  }
  if (!*((_DWORD *)this + 81)) {
    DspLib::SideChain::Algorithm::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  }
}

uint64_t DspLib::DynamicFilter::crossFadeIsNeeded(int a1, float a2)
{
  BOOL v2 = a2 > 0.0;
  if (a1 == 4) {
    BOOL v2 = 0;
  }
  return a1 == 1 || v2;
}

unint64_t DspLib::DynamicFilter::Algorithm::computeFilterParameters(DspLib::DynamicFilter::Algorithm *this, float a2)
{
  char v4 = (uint64_t *)((char *)this + 264);
  float v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0);
  DspLib::AlgorithmParametersInstance::operator[](v4, 1u);
  switch(*((_DWORD *)this + 74))
  {
    case 0:
    case 1:
      uint64_t v6 = 14;
      break;
    case 2:
      float v7 = 2.0;
      if (a2 > 1.0) {
        float v7 = 2.0 / a2;
      }
      float v5 = v7 * v5;
      uint64_t v6 = 6;
      break;
    case 3:
      float v8 = 0.5;
      if (a2 > 1.0) {
        float v8 = a2 * 0.5;
      }
      float v5 = v8 * v5;
      uint64_t v6 = 7;
      break;
    case 4:
      uint64_t v6 = 23;
      break;
    default:
      uint64_t v6 = 0;
      break;
  }
  return v6 | ((unint64_t)LODWORD(v5) << 32);
}

void DspLib::DynamicFilter::Algorithm::configureSideChain(DspLib::DynamicFilter::Algorithm *this)
{
  BOOL v2 = (uint64_t *)((char *)this + 264);
  float v3 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
  switch(*((_DWORD *)this + 74))
  {
    case 0:
      float v3 = fminf(v3, 0.0);
      goto LABEL_3;
    case 1:
LABEL_3:
      uint64_t v4 = 14;
      break;
    case 2:
      uint64_t v4 = 8;
      break;
    case 3:
      uint64_t v4 = 9;
      break;
    case 4:
      uint64_t v4 = 23;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  float v5 = DspLib::AlgorithmParametersInstance::operator[](v2, 0);
  float v6 = DspLib::AlgorithmParametersInstance::operator[](v2, 1u);
  __int16 v9 = 0;
  char v10 = 0;
  v7[0] = DspLib::AlgorithmParametersInstance::operator[](v2, 2u);
  *(float *)&v7[1] = v3;
  v7[2] = DspLib::AlgorithmParametersInstance::operator[](v2, 5u);
  BOOL v8 = DspLib::AlgorithmParametersInstance::operator[](v2, 8u) >= 0.5;
  float v11 = DspLib::AlgorithmParametersInstance::operator[](v2, 6u);
  float v12 = DspLib::AlgorithmParametersInstance::operator[](v2, 7u);
  DspLib::SideChain::Algorithm::setParameters((uint64_t)this + 328, v4 | ((unint64_t)LODWORD(v5) << 32), (double *)((unint64_t)LODWORD(v6) << 32), (uint64_t)v7);
}

void DspLib::DynamicFilter::Algorithm::processSideChain(uint64_t a1, long long *a2, float *__A, vDSP_Length __N)
{
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 == 1)
  {
    uint64_t v10 = a1 + 328;
    uint64_t v11 = **(void **)a2;
    uint64_t v12 = *((void *)a2 + 2);
    DspLib::SideChain::Algorithm::process(v10, v11, v12, __A, __N);
  }
  else if (v8)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    DspLib::sum((uint64_t)&v13, __A, __N);
    DspLib::multiply(__A, __N, 1.0 / (float)*((unint64_t *)a2 + 1));
    DspLib::SideChain::Algorithm::process(a1 + 328, (uint64_t)__A, __N, __A, __N);
  }
  else
  {
    float v9 = DspLib::SideChain::Algorithm::gainForLevel((DspLib::SideChain::Algorithm *)(a1 + 328), 0.0);
    DspLib::fill(__A, __N, v9);
  }
}

void DspLib::DynamicFilter::Algorithm::processBlock(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 320))
  {
    uint64_t v38 = a3;
    uint64_t v39 = a4;
    DSPComplex v40 = &v37;
    uint64_t v8 = MEMORY[0x1F4188790](a1);
    uint64_t v10 = (float *)((char *)&v37 - v9);
    vDSP_Length v12 = *(void *)(v11 + 16);
    uint64_t v13 = *(unsigned int *)(v8 + 324);
    MEMORY[0x1F4188790](v8);
    char v16 = (char *)&v37 - v15;
    if (v14 >= 0x200) {
      size_t v17 = 512;
    }
    else {
      size_t v17 = v14;
    }
    bzero((char *)&v37 - v15, v17);
    uint64_t v18 = *(unsigned int *)(a1 + 320);
    MEMORY[0x1F4188790](v19);
    int v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFF0);
    if (v20 >= 0x200) {
      size_t v22 = 512;
    }
    else {
      size_t v22 = v20;
    }
    bzero((char *)&v37 - ((v20 + 15) & 0xFFFFFFFF0), v22);
    unint64_t v23 = a2[1];
    if (v23)
    {
      uint64_t v24 = 0;
      int v25 = 0;
      uint64_t v26 = *a2;
      unint64_t v27 = *(void *)(a1 + 312);
      do
      {
        if ((v27 >> v24)) {
          *(void *)&v16[8 * v25++] = *(void *)(v26 + 8 * v24);
        }
        ++v24;
      }
      while (v23 > v24);
      uint64_t v28 = 0;
      int v29 = 0;
      unint64_t v30 = *(void *)(a1 + 304);
      do
      {
        if ((v30 >> v28)) {
          *(void *)&v21[8 * v29++] = *(void *)(v26 + 8 * v28);
        }
        ++v28;
      }
      while (v23 > v28);
    }
    *(void *)&long long v43 = v16;
    *((void *)&v43 + 1) = v13;
    vDSP_Length v44 = v12;
    DspLib::DynamicFilter::Algorithm::processSideChain(a1, &v43, v10, v12);
    int v31 = *(_DWORD *)(a1 + 296);
    float v32 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)(a1 + 264), 4u);
    if (v31 != 1 && (v31 == 4 || v32 <= 0.0))
    {
      v41[0] = v21;
      v41[1] = v18;
      void v41[2] = v12;
      DspLib::DynamicFilter::Algorithm::processWithoutCrossFade(a1, v41, v10, v12);
    }
    else
    {
      *(float *)(a1 + 1728) = *(float *)(a1 + 1728) + 1.0;
      float v33 = DspLib::mean(v10, v12) + *(float *)(a1 + 1732);
      *(float *)(a1 + 1732) = v33;
      if ((a5 & 1) == 0)
      {
        *(int8x16_t *)(a1 + 1664) = vextq_s8(*(int8x16_t *)(a1 + 1664), *(int8x16_t *)(a1 + 1664), 8uLL);
        unint64_t v34 = DspLib::DynamicFilter::Algorithm::computeFilterParameters((DspLib::DynamicFilter::Algorithm *)a1, v33 / *(float *)(a1 + 1728));
        float v36 = v35;
        *(void *)(a1 + 1728) = 0;
        DspLib::Biquad::ParametricFilter::setParametricEQ(*(void *)(a1 + 1664), v34, v35, 0, 0x41uLL);
        if (*(unsigned char *)(a1 + 1680))
        {
          DspLib::Biquad::ParametricFilter::setParametricEQ(*(void *)(a1 + 1672), v34, v36, 0, 0x41uLL);
          *(unsigned char *)(a1 + 168DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
        }
        DspLib::Biquad::Filter::copyStatesFrom(*(DspLib::Biquad::Filter **)(a1 + 1664), *(const DspLib::Biquad::Filter **)(a1 + 1672));
      }
      v42[0] = v21;
      v42[1] = v18;
      v42[2] = v12;
      DspLib::DynamicFilter::Algorithm::processWithCrossFade(a1, v42, v10, v12, *(const float **)v38, *(void *)(v38 + 8), *(const float **)v39, *(void *)(v39 + 8));
    }
  }
}

void DspLib::DynamicFilter::Algorithm::processWithCrossFade(uint64_t a1, void *a2, float *a3, vDSP_Length a4, const float *a5, uint64_t a6, const float *a7, uint64_t a8)
{
  uint64_t v30 = a8;
  vDSP_Length v32 = a4;
  int v31 = a3;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v30 - v14;
  if (v13 >= 0x200) {
    size_t v16 = 512;
  }
  else {
    size_t v16 = v13;
  }
  bzero((char *)&v30 - v14, v16);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)))
  {
    unint64_t v17 = 0;
    do
    {
      *(void *)&v15[8 * v17] = DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1688), v17);
      ++v17;
    }
    while (v17 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1688));
  uint64_t v19 = a2[1];
  uint64_t v18 = a2[2];
  unint64_t v20 = *(void **)(a1 + 1664);
  *(void *)&long long v44 = *a2;
  *((void *)&v44 + 1) = v19;
  uint64_t v45 = v18;
  *(void *)&long long v42 = v15;
  *((void *)&v42 + 1) = v19;
  uint64_t v43 = v18;
  DspLib::Biquad::Filter::process(v20, &v44, &v42);
  uint64_t v21 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704));
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v30 - v23;
  if (v22 >= 0x200) {
    size_t v25 = 512;
  }
  else {
    size_t v25 = v22;
  }
  bzero((char *)&v30 - v23, v25);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704)))
  {
    unint64_t v26 = 0;
    do
    {
      *(void *)&v24[8 * v26] = DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1704), v26);
      ++v26;
    }
    while (v26 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1704));
  unint64_t v27 = *(void **)(a1 + 1672);
  uint64_t v29 = a2[1];
  uint64_t v28 = a2[2];
  *(void *)&long long v44 = *a2;
  *((void *)&v44 + 1) = v29;
  uint64_t v45 = v28;
  *(void *)&long long v42 = v24;
  *((void *)&v42 + 1) = v29;
  uint64_t v43 = v28;
  DspLib::Biquad::Filter::process(v27, &v44, &v42);
  v41[0] = v15;
  v41[1] = v19;
  void v41[2] = v18;
  DspLib::multiply(v41, a5);
  v40[0] = v24;
  v40[1] = v29;
  v40[2] = v28;
  DspLib::multiply(v40, a7);
  v39[0] = (uint64_t)v15;
  v39[1] = v19;
  v39[2] = v18;
  *(void *)&long long v37 = v24;
  *((void *)&v37 + 1) = v29;
  uint64_t v38 = v28;
  DspLib::add(v39, &v37);
  long long v35 = *(_OWORD *)a2;
  uint64_t v36 = a2[2];
  *(void *)&long long v33 = v15;
  *((void *)&v33 + 1) = v19;
  uint64_t v34 = v18;
  DspLib::DynamicFilter::applyGain(&v35, &v33, v31, v32);
}

void DspLib::DynamicFilter::Algorithm::processWithoutCrossFade(uint64_t a1, void *a2, float *a3, vDSP_Length a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v17 - v10;
  if (v9 >= 0x200) {
    size_t v12 = 512;
  }
  else {
    size_t v12 = v9;
  }
  bzero((char *)&v17 - v10, v12);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)))
  {
    unint64_t v13 = 0;
    do
    {
      *(void *)&v11[8 * v13] = DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1688), v13);
      ++v13;
    }
    while (v13 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1688));
  uint64_t v14 = (void *)(a1 + 1456);
  uint64_t v15 = a2[1];
  uint64_t v16 = a2[2];
  *(void *)&long long v24 = *a2;
  *((void *)&v24 + 1) = v15;
  uint64_t v25 = v16;
  *(void *)&long long v22 = v11;
  *((void *)&v22 + 1) = v15;
  uint64_t v23 = v16;
  DspLib::Biquad::Filter::process(v14, &v24, &v22);
  long long v20 = *(_OWORD *)a2;
  uint64_t v21 = a2[2];
  *(void *)&long long v18 = v11;
  *((void *)&v18 + 1) = v15;
  uint64_t v19 = v16;
  DspLib::DynamicFilter::applyGain(&v20, &v18, a3, a4);
}

void DspLib::DynamicFilter::applyGain(long long *a1, long long *a2, float *__C, vDSP_Length __N)
{
  DspLib::add(__C, __N, -1.0);
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  DspLib::multiply(&v12, __C);
  long long v7 = *a1;
  uint64_t v11 = *((void *)a1 + 2);
  uint64_t v8 = *(void *)a2;
  long long v9 = *(long long *)((char *)a2 + 8);
  long long v10 = v7;
  DspLib::add((uint64_t *)&v10, (long long *)&v8);
}

void DspLib::DynamicFilter::Algorithm::updateSidechainLevelForDisplay(DspLib::DynamicFilter::Algorithm *this)
{
  double v2 = DspLib::SideChain::Algorithm::sideChainLevelLinear((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  if (*((float *)this + 430) >= *(float *)&v2) {
    LODWORD(v2) = *((_DWORD *)this + 430);
  }
  *((_DWORD *)this + 43DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = LODWORD(v2);
}

uint64_t DspLib::DynamicFilter::Algorithm::status(uint64_t result, _DWORD *a2)
{
  if (*(_DWORD *)(result + 324)) {
    int v2 = *(_DWORD *)(result + 1720);
  }
  else {
    int v2 = 0;
  }
  *a2 = v2;
  *(_DWORD *)(result + 172DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  return result;
}

void DspLib::DynamicFilter::Algorithm::~Algorithm(DspLib::DynamicFilter::Algorithm *this)
{
  DspLib::DynamicFilter::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14A75A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 214);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 212);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v8 = (void **)((char *)this + 1640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::DynamicFilter::Algorithm *)((char *)this + 1608));
  uint64_t v4 = (void *)*((void *)this + 198);
  if (v4)
  {
    *((void *)this + 199) = v4;
    operator delete(v4);
  }
  uint64_t v8 = (void **)((char *)this + 1536);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::DynamicFilter::Algorithm *)((char *)this + 1504));
  float v5 = (void *)*((void *)this + 185);
  if (v5)
  {
    *((void *)this + 186) = v5;
    operator delete(v5);
  }
  DspLib::SideChain::Algorithm::~Algorithm((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  *(void *)this = &unk_1F14A88D8;
  float v6 = (void *)*((void *)this + 34);
  if (v6)
  {
    *((void *)this + 35) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v8);
  *(void *)this = &unk_1F14A87D8;
  long long v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

void DspLib::DynamicFilter::Algorithm::processBlock(void *a1, long long *a2, long long *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  vDSP_Length v3 = *((void *)a2 + 2);
  if (v3)
  {
    uint64_t v5 = (uint64_t)a1;
    if (**(void **)a3 != **(void **)a2)
    {
      long long v16 = *a2;
      uint64_t v17 = *((void *)a2 + 2);
      long long v14 = *a3;
      uint64_t v15 = *((void *)a3 + 2);
      a1 = DspLib::copy(&v16, &v14);
    }
    MEMORY[0x1F4188790](a1);
    v13[0] = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13[1] = v3;
    long long v7 = (float *)MEMORY[0x1F4188790](v13[0]);
    long long v9 = (float *)((char *)&v10 - v8);
    v12[0] = (char *)&v10 - v8;
    v12[1] = v3;
    DspLib::ramp(v7, v3, 0, 0.0, 1.0);
    DspLib::ramp(v9, v3, 0, 1.0, 0.0);
    long long v10 = *a3;
    uint64_t v11 = *((void *)a3 + 2);
    DspLib::DynamicFilter::Algorithm::processBlock(v5, (uint64_t *)&v10, (uint64_t)v13, (uint64_t)v12, 0);
  }
}

void DspLib::SideChain::Algorithm::~Algorithm(DspLib::SideChain::Algorithm *this)
{
  long long v7 = (void **)((char *)this + 1080);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 1048));
  int v2 = (void *)*((void *)this + 128);
  if (v2)
  {
    *((void *)this + 129) = v2;
    operator delete(v2);
  }
  long long v7 = (void **)((char *)this + 976);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 944));
  vDSP_Length v3 = (void *)*((void *)this + 115);
  if (v3)
  {
    *((void *)this + 116) = v3;
    operator delete(v3);
  }
  long long v7 = (void **)((char *)this + 872);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 840));
  uint64_t v4 = (void *)*((void *)this + 102);
  if (v4)
  {
    *((void *)this + 103) = v4;
    operator delete(v4);
  }
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v6 = *(void **)((char *)this + i + 24);
    if (v6)
    {
      *(void *)((char *)this + i + 32) = v6;
      operator delete(v6);
    }
  }
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,20ul>,true>(a1, a2, v5);
  }
  else {
    return std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,20ul>,true>((uint64_t *)a1, a2, v5);
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,20ul>,true>(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,20ul>,true>(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

void *_ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x70uLL);
  double result = _ZNSt3__120__shared_ptr_emplaceI12DspLibBufferNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1BB2D17D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI12DspLibBufferNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A76E8;
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(a1 + 3));
  return a1;
}

void sub_1BB2D1834(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLibBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A76E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLibBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A76E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<DspLibBuffer>::__on_zero_shared(uint64_t a1)
{
}

DspLib::LoudspeakerSystemIDV2::Algorithm *DspLib::LoudspeakerSystemIDV2::Algorithm::Algorithm(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerSystemIDV2::Parameters::kDefinition);
  *(void *)uint64_t v2 = &unk_1F14A7738;
  *(unsigned char *)(v2 + 384) = 0;
  *(_DWORD *)(v2 + 392) = 0;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(unsigned char *)(v2 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  if (++DspLib::LoudspeakerSystemIDV2::gInstanceCounter >= 2)
  {
    unint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 23);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

void sub_1BB2D1990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(unsigned char *)(v4 + 384))
  {
    uint8x8_t v6 = *(void **)(v4 + 360);
    if (v6)
    {
      *(void *)(v4 + 368) = v6;
      operator delete(v6);
    }
  }
  DspLib::LoudspeakerSystemIDV2::Algorithm::Algorithm(v4);
  std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters((DspLib::AlgorithmBaseNewParameters *)v4);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::~Algorithm(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  *(void *)this = &unk_1F14A7738;
  --DspLib::LoudspeakerSystemIDV2::gInstanceCounter;
  if (*((unsigned char *)this + 384))
  {
    uint64_t v2 = (void *)*((void *)this + 45);
    if (v2)
    {
      *((void *)this + 46) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v7 = (void **)((char *)this + 296);
  std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)this = &unk_1F14A88D8;
  uint64_t v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    *((void *)this + 35) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)this = &unk_1F14A87D8;
  uint8x8_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

{
  uint64_t vars8;

  DspLib::LoudspeakerSystemIDV2::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::initialize(DspLib::LoudspeakerSystemIDV2::Algorithm *this, int a2, double a3)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  unsigned int v28 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v28)
  {
    uint64_t v5 = *((void *)this + 37);
    for (uint64_t i = *((void *)this + 38);
          i != v5;
    *((void *)this + 38) = v5;
    unsigned int v6 = (*(uint64_t (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::resize((DspLib::LoudspeakerSystemIDV2::Algorithm *)((char *)this + 296), v6 >> 1);
    uint64_t v8 = *((void *)this + 37);
    if (*((void *)this + 38) != v8)
    {
      uint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        double v11 = *((double *)this + 2);
        float v12 = v11 * 0.5;
        *(float *)(v8 + 40104 * v9 + 24) = v12;
        *(float *)&double v11 = v11 / v12;
        float v13 = fmaxf(roundf(*(float *)&v11), 1.0);
        vDSP_Length v14 = (16 * v13) | 1;
        MEMORY[0x1F4188790](v7);
        long long v16 = &v27[-v15];
        v29[0] = &unk_1F14A6C50;
        v29[1] = DspLib::makeChebychevWindow;
        v29[3] = v29;
        DspLib::makeSincWindow((float *)&v27[-v15], v14, v17, 0x10u, (uint64_t)v29, 0.5);
        std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v29);
        uint64_t v18 = (uint64_t *)(v8 + 40104 * v9);
        std::vector<std::vector<float>>::resize(v18 + 2906, 2uLL);
        unint64_t v19 = (*(uint64_t (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *))(*(void *)this + 216))(this);
        v18 += 2900;
        DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)v18, (unint64_t)v13, v19);
        DspLib::FIRDecimator::setCoefficients((uint64_t)v18, v16, v14);
        double v20 = v13;
        float v21 = *((double *)this + 2) / v20;
        DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v8 + 40104 * v9 + 32), v21);
        long long v22 = (DspLibBuffer *)(v8 + 40104 * v9 + 23280);
        DspLibBuffer::initialize(v22, 0x401uLL, 1u);
        unint64_t instruction_count = vp::utility::CPU_Profiler::get_instruction_count(v22);
        DspLibBuffer::setNumFrames((unint64_t *)v22, instruction_count);
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(v8 + 40104 * v9 + 23368), 0x400uLL);
        DspLib::LoudspeakerSystemIDV2::AveragePower::initialize((void **)(v8 + 40104 * v9 + 39832), *((double *)this + 2), (char *)0x20);
        DspLib::AverageRms::initialize(v8 + 40104 * v9 + 39992, *((double *)this + 2));
        DspLib::AverageRms::initialize(v8 + 40104 * v9 + 40048, *((double *)this + 2));
        float v24 = *((double *)this + 2) / v20;
        DspLib::LoudspeakerSystemIDV2::ModelFit::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v8 + 40104 * v9 + 17384), v24);
        uint64_t v9 = v10;
        uint64_t v8 = *((void *)this + 37);
      }
      while (0xB29503A032A89FBDLL * ((*((void *)this + 38) - v8) >> 3) > v10++);
    }
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *, char *, void))(*(void *)this + 264))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *))(*(void *)this + 136))(this);
  }
  return v28;
}

void sub_1BB2D1EA0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100]((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

void std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::resize(DspLib::LoudspeakerSystemIDV2::SystemID *a1, unint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  unint64_t v4 = 0xB29503A032A89FBDLL * ((v3 - *(void *)a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 40104 * a2;
    while (v3 != v7)
      DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v3 - 40104));
    *((void *)a1 + 1) = v7;
  }
}

void DspLib::LoudspeakerSystemIDV2::AveragePower::initialize(void **this, double a2, char *a3)
{
  DspLib::AveragingDecimator::setSrcFactor(this, a3, 0);
  DspLib::OnePoleSmoother::initialize((DspLib::OnePoleSmoother *)(this + 6), ceil(a2 / (double)(unint64_t)a3));
  double v6 = *((float *)this + 37);
  double v7 = *((float *)this + 36);

  DspLib::OnePoleSmoother::configure((DspLib::OnePoleSmoother *)(this + 6), v6, v7);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::configureLogging(DspLib::LoudspeakerSystemIDV2::Algorithm *this, uint64_t a2)
{
  if (a2 == 1)
  {
    *((unsigned char *)this + 322) = 1;
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[18],void>((uint64_t)&v2, "SysIDFrameLog.bin");
  }
  *((unsigned char *)this + 322) = 0;

  DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(this);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  char v2 = (void *)((char *)this + 328);
  uint64_t v3 = (DspLib::Logger *)*((void *)this + 41);
  if (v3)
  {
    DspLib::Logger::FlushLog(v3);
    unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 42);
    *char v2 = 0;
    v2[1] = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  BOOL v5 = (DspLib::Logger *)v2[2];
  if (v5)
  {
    DspLib::Logger::FlushLog(v5);
    double v6 = (std::__shared_weak_count *)*((void *)this + 44);
    v2[2] = 0;
    v2[3] = 0;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::uninitialize(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(this);
  uint64_t v3 = *((void *)this + 37);
  for (uint64_t i = *((void *)this + 38);
        i != v3;
  *((void *)this + 38) = v3;
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::reset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 296);
  if (*(void *)(this + 304) != v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      uint64_t v5 = v1 + 40104 * v3;
      *(void *)(v5 + 16) = 0;
      DspLib::FIRDecimator::reset((DspLib::FIRDecimator *)(v5 + 23200));
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v5 + 32));
      DspLib::LoudspeakerSystemIDV2::ModelFit::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v5 + 17384));
      DspLib::ComplexVector::operator=(v5 + 23368, 0.0);
      double v6 = (float *)DspLibBuffer::channel((DspLibBuffer *)(v5 + 23280), 0);
      vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(v5 + 23280));
      DspLib::clear(v6, cycle_count);
      bzero((void *)(v5 + 23448), 0x4000uLL);
      DspLib::AveragingDecimator::reset((DspLib::AveragingDecimator *)(v5 + 39832));
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v5 + 39936));
      *(_DWORD *)(v5 + 39984) = 0;
      DspLib::AverageRms::reset(v5 + 39992);
      this = DspLib::AverageRms::reset(v5 + 40048);
      uint64_t v3 = v4;
      uint64_t v1 = *(void *)(v2 + 296);
    }
    while (0xB29503A032A89FBDLL * ((*(void *)(v2 + 304) - v1) >> 3) > v4++);
  }
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::numStatus(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  return 5205;
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::setParameters(DspLib::LoudspeakerSystemIDV2::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  uint64_t v3 = this;
  v42[4] = *MEMORY[0x1E4F143B8];
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((unsigned char *)v3 + 8))
  {
    uint64_t v5 = *((void *)v3 + 37);
    uint64_t v4 = *((void *)v3 + 38);
    DSPComplex v40 = (double *)v3;
    if (v4 != v5)
    {
      unint64_t v6 = 0;
      long long v41 = (uint64_t *)((char *)v3 + 264);
      uint64_t v7 = 2;
      unint64_t v37 = (unint64_t)v42 | 0x4239000000000000;
      uint64_t v36 = &unk_1F14A6C50;
      do
      {
        unsigned int v8 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[](v41, v7 << 32));
        uint64_t v9 = v5 + 40104 * v6;
        *(_DWORD *)(v9 + 8) = v8;
        unsigned int v10 = (int *)(v9 + 8);
        float v11 = DspLib::AlgorithmParametersInstance::operator[](v41, (7 * v8 + 2) | 0x500000000);
        uint64_t v12 = v5 + 40104 * v6;
        float v14 = *(float *)(v12 + 24);
        float v13 = (float *)(v12 + 24);
        if (v14 != v11)
        {
          *float v13 = v11;
          std::vector<std::vector<float>>::resize((uint64_t *)(v5 + 40104 * v6 + 23248), 0);
          DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::uninitialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v5 + 40104 * v6 + 32));
          uint64_t v15 = (DspLibBuffer *)(v5 + 40104 * v6 + 23280);
          DspLibBuffer::uninitialize(v15);
          DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(v5 + 40104 * v6 + 23368), 0);
          uint64_t v39 = (DspLib::LoudspeakerSystemIDV2::ModelFit *)(v5 + 40104 * v6 + 17384);
          DspLib::LoudspeakerSystemIDV2::ModelFit::uninitialize(v39);
          uint64_t v38 = &v35;
          float v16 = v40[2] / v11;
          float v17 = fmaxf(roundf(v16), 1.0);
          vDSP_Length v18 = (16 * v17) | 1;
          MEMORY[0x1F4188790](v19);
          float v21 = (char *)&v35 - v20;
          v42[0] = v36;
          v42[1] = DspLib::makeChebychevWindow;
          void v42[3] = v42;
          DspLib::makeSincWindow((float *)((char *)&v35 - v20), v18, v22, 0x10u, (uint64_t)v42, 0.5);
          std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v42);
          std::vector<std::vector<float>>::resize((uint64_t *)(v5 + 40104 * v6 + 23248), 2uLL);
          unint64_t v23 = (*(uint64_t (**)(double *))(*(void *)v40 + 216))(v40);
          DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(v5 + 40104 * v6 + 23200), (unint64_t)v17, v23);
          DspLib::FIRDecimator::setCoefficients(v5 + 40104 * v6 + 23200, v21, v18);
          float v24 = v40 + 2;
          double v25 = v17;
          float v26 = v40[2] / v25;
          DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v5 + 40104 * v6 + 32), v26);
          DspLibBuffer::initialize(v15, 0x401uLL, 1u);
          unint64_t instruction_count = vp::utility::CPU_Profiler::get_instruction_count(v15);
          DspLibBuffer::setNumFrames((unint64_t *)v15, instruction_count);
          DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(v5 + 40104 * v6 + 23368), 0x400uLL);
          float v28 = *v24 / v25;
          DspLib::LoudspeakerSystemIDV2::ModelFit::initialize(v39, v28);
          float v29 = DspLib::AlgorithmParametersInstance::operator[](v41, (7 * *v10 + 2) | 0x300000000);
          uint64_t v30 = v40;
          LODWORD(v31) = vcvtad_u64_f64(*v24 / v25 * v29);
          *(void *)(v5 + 40104 * v6) = v31;
          (*(void (**)(double *))(*(void *)v30 + 136))(v30);
        }
        DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setParameters((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, v41, v7 - 2, *v10);
        DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setParameters(v5 + 40104 * v6 + 32, v41, *v10, v7 - 2);
        DspLib::LoudspeakerSystemIDV2::ModelFit::setParameters(v5 + 40104 * v6 + 17384, v41, *v10, (unint64_t *)(v7 - 2));
        vDSP_Length v32 = (float *)(v5 + 40104 * v6);
        DspLib::LoudspeakerSystemIDV2::AveragePower::configure((DspLib::LoudspeakerSystemIDV2::AveragePower *)(v32 + 9958), 1.0, v32[65] * v32[66]);
        DspLib::AverageRms::configure((uint64_t)(v32 + 9998), 1, 1.0, v32[66]);
        DspLib::AverageRms::configure((uint64_t)(v32 + 10012), 1, 1.0, v32[65]);
        unint64_t v6 = (v7 - 1);
        uint64_t v3 = (DspLib::LoudspeakerSystemIDV2::Algorithm *)v40;
        uint64_t v5 = *((void *)v40 + 37);
        uint64_t v7 = (v7 + 1);
      }
      while (0xB29503A032A89FBDLL * ((*((void *)v40 + 38) - v5) >> 3) > v6);
    }
    BOOL v33 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3 + 33, 0xA00000000) >= 0.5;
    *((unsigned char *)v40 + 321) = v33;
    BOOL v34 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3 + 33, 0) >= 0.5;
    *((unsigned char *)v40 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v34;
  }
}

void sub_1BB2D27B0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100]((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setParameters(uint64_t a1, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t v9 = (float *)(a1 + 264 * a3);
  v9[63] = DspLib::AlgorithmParametersInstance::operator[](a2, 1) * 1000.0;
  v9[64] = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000001) * 1000.0;
  int v10 = 7 * a4;
  v9[1] = DspLib::AlgorithmParametersInstance::operator[](a2, (7 * a4 + 3) | 0x300000000);
  float v11 = v9 + 1;
  uint64_t v12 = (7 * a4 + 5);
  v11[61] = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0xB00000000);
  if (!*((unsigned char *)v11 + 8))
  {
    int v13 = *(_DWORD *)v11;
    float v14 = (_DWORD *)(a1 + 264 * a3);
    *float v14 = *(_DWORD *)v11;
    _OWORD v14[2] = v13;
  }
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 6, 0);
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 7, 1u);
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 8, 2u);
  float v15 = DspLib::AlgorithmParametersInstance::operator[](a2, (v10 + 5));
  float v16 = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0x100000000);
  float v17 = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0x200000000);
  uint64_t v18 = a1 + 264 * a3;
  *(float *)(v18 + 232) = v15;
  *(float *)(v18 + 236) = v16;
  *(float *)(v18 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
  unint64_t result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v15, v16, v17);
  if (!*(unsigned char *)(v18 + 244))
  {
    uint64_t v21 = a1 + 264 * a3;
    *(void *)(v21 + 216) = result;
    *(unsigned char *)(v21 + 228) = BYTE4(v20);
    *(_DWORD *)(v21 + 224) = v20;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::AveragePower::configure(DspLib::LoudspeakerSystemIDV2::AveragePower *this, double a2, float a3)
{
  float v4 = a2;
  *((float *)this + 36) = a3;
  *((float *)this + 37) = v4;
  DspLib::OnePoleSmoother::configure((DspLib::LoudspeakerSystemIDV2::AveragePower *)((char *)this + 48), v4, a3);
  DspLib::AveragingDecimator::reset(this);
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerSystemIDV2::AveragePower *)((char *)this + 104));
  *((_DWORD *)this + 38) = 0;
}

unint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::parseTelemetryData@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(result + 384))
  {
    unint64_t result = telemetry::Item::ItemFromEnum((telemetry::Item *)*(unsigned int *)(*(void *)(result + 360)
                                                                              + 4 * a3));
    a3 = HIDWORD(result);
    BOOL v6 = result == 1;
    BOOL v7 = result != 1;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v7 = 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[2];
  *a4 = *(void *)(*a2 + 8 * (v6 | (2 * a3)));
  a4[1] = v9;
  a4[2] = *(void *)(v8 + 8 * (v7 | (2 * a3)));
  a4[3] = v9;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::processBlock(unint64_t a1, long long *a2, long long *a3)
{
  uint64_t v3 = a2;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (**(void **)a3 != **(void **)a2)
  {
    long long v41 = *a2;
    uint64_t v42 = *((void *)a2 + 2);
    long long v39 = *a3;
    uint64_t v40 = *((void *)a3 + 2);
    DspLib::copy(&v41, &v39);
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    vDSP_Length v5 = *((void *)v3 + 2);
    if (v5)
    {
      if (*(unsigned char *)(a1 + 24)) {
        DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
      }
      *(_DWORD *)(a1 + 324) = 0;
      if (*(void *)(a1 + 304) != *(void *)(a1 + 296))
      {
        unint64_t v6 = 0;
        BOOL v7 = 0;
        v29[0] = v5;
        do
        {
          long long v36 = *v3;
          uint64_t v37 = *((void *)v3 + 2);
          DspLib::LoudspeakerSystemIDV2::Algorithm::parseTelemetryData(a1, (uint64_t *)&v36, (unint64_t)v7, v38);
          uint64_t v44 = v38[0];
          uint64_t v45 = v38[2];
          uint64_t v8 = *(void *)(a1 + 296);
          v35[0] = &v44;
          v35[1] = 2;
          v35[2] = v5;
          *(float *)(a1 + 324) = DspLib::LoudspeakerSystemIDV2::AveragePower::process(v8 + 40104 * v6 + 39832, (uint64_t)v35)+ *(float *)(a1 + 324);
          if (*(unsigned char *)(a1 + 321))
          {
            uint64_t v9 = v8 + 40104 * v6;
            DspLib::AverageRms::process(v9 + 39992, v44, v5);
            DspLib::AverageRms::process(v9 + 40048, v45, v5);
          }
          v29[1] = v29;
          int v10 = (void *)MEMORY[0x1F4188790](v8 + 40104 * v6 + 23200);
          v43[0] = &v29[-v11];
          v43[1] = v43[0] + 4 * v11;
          unint64_t v13 = *(void *)(v12 + 23200);
          v32[2] = v5;
          v33[0] = v43;
          v33[1] = 2;
          unint64_t v34 = v14 / v13 + 1;
          v32[0] = &v44;
          v32[1] = 2;
          DspLib::FIRDecimator::process(v10, v32, v33);
          unint64_t v15 = v34;
          if (v34) {
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::process(v8 + 40104 * v6 + 32, *(float **)(v33[0] + 8), *(float **)v33[0], v34, v7, *(float *)(v8 + 40104 * v6 + 18112));
          }
          float v16 = v3;
          float v17 = (unint64_t *)(*(void *)(a1 + 296) + 40104 * v6);
          unint64_t v18 = v17[2] + v15;
          uint64_t v19 = (const DspLib::ComplexSpan *)(v8 + 23368 + 40104 * v6);
          BOOL v20 = v18 >= *v17;
          if (v18 >= *v17) {
            unint64_t v21 = 0;
          }
          else {
            unint64_t v21 = v18;
          }
          void v17[2] = v21;
          if (v20)
          {
            unint64_t v27 = (_DWORD *)(v8 + 40104 * v6);
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::impedance((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v27 + 8), (DSPSplitComplex *)(v8 + 23368 + 40104 * v6));
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::coherence((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v27 + 8), (DspLibBuffer *)(v27 + 5820));
            v27[4347] = 1;
            uint64_t v3 = v16;
          }
          else
          {
            unsigned int v22 = (float *)(v8 + 40104 * v6);
            float v23 = v22[56];
            float v24 = (const DspLib::ComplexSpan *)DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::voltagePowerSpectrum((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v22 + 8));
            uint64_t v25 = *(void *)(a1 + 296);
            char v26 = *(unsigned char *)(v25 + 40104 * v6 + 220)
               && *(float *)(v25 + 40104 * v6 + 240) < *(float *)(v25 + 40104 * v6 + 256)
               && *(float *)(v25 + 40104 * v6 + 304) > *(float *)(v25 + 40104 * v6 + 216);
            DspLib::LoudspeakerSystemIDV2::ModelFit::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v22 + 4346), v19, (const DspLibBuffer *)(v22 + 5820), v23, v24, v26, v7);
          }
          DspLib::elapsedTimeInMilliseconds((DspLib *)((char *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord + 264 * v6 + 16), v28);
          unint64_t v6 = (v7 + 1);
          BOOL v7 = (unint64_t *)v6;
        }
        while (0xB29503A032A89FBDLL * ((uint64_t)(*(void *)(a1 + 304) - *(void *)(a1 + 296)) >> 3) > v6);
      }
      if (*(unsigned char *)(a1 + 322))
      {
        long long v30 = *v3;
        uint64_t v31 = *((void *)v3 + 2);
        DspLib::LoudspeakerSystemIDV2::Algorithm::processLogging((uint64_t *)a1, &v30);
      }
      if (*(unsigned char *)(a1 + 24)) {
        DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v5, *(double *)(a1 + 16));
      }
    }
  }
}

float DspLib::LoudspeakerSystemIDV2::AveragePower::process(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    MEMORY[0x1F4188790](a1);
    vDSP_Length v5 = (float *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v9 = v5;
    uint64_t v10 = v3;
    DspLib::multiply(**(const float ***)v6, *(void *)(v6 + 16), *(const float **)(*(void *)v6 + 8), *(void *)(v6 + 16), v5);
    DspLib::AveragingDecimator::processKernel(a1, v5, v3, (uint64_t)&v9, *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2, (void **)(a1 + 16));
    if (v10)
    {
      DspLib::OnePoleSmoother::process(a1 + 48, (uint64_t)v9, v10, (uint64_t)v9, v10);
      *(float *)(a1 + 152) = v9[v10 - 1];
    }
  }
  return *(float *)(a1 + 152);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::processLogging(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[2];
  vDSP_Length v5 = (DspLib::Logger *)a1[41];
  if (v5) {
    DspLib::Logger::logData(v5, (float)(unint64_t)v4);
  }
  uint64_t v6 = (DspLib::Logger *)a1[43];
  if (v6) {
    DspLib::Logger::logData(v6, (float)(unint64_t)v4);
  }
  uint64_t v7 = a1[37];
  if (a1[38] != v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 1;
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = v7 + 40104 * v8;
      uint64_t v12 = (float *)(v11 + 23448);
      DspLib::multiply(*(const float **)(*a2 + 8 * (v9 - 1)), a2[2], (float *)(v11 + 23448), *(float *)(v11 + 264));
      unint64_t v13 = (DspLib::Logger *)a1[43];
      if (v13) {
        DspLib::Logger::logData(v13, v12, v4);
      }
      uint64_t v14 = v7 + 40104 * v8;
      unint64_t v15 = (float *)(v14 + 31640);
      DspLib::multiply(*(const float **)(*a2 + 8 * v9), a2[2], (float *)(v14 + 31640), *(float *)(v14 + 260));
      float v16 = (DspLib::Logger *)a1[43];
      if (v16) {
        DspLib::Logger::logData(v16, v15, v4);
      }
      float v17 = (DspLib::Logger *)a1[41];
      if (v17)
      {
        DspLib::Logger::logData(v17, *(float *)(v7 + 40104 * v8 + 236));
        unint64_t v18 = (DspLib::Logger *)a1[41];
        if (v18)
        {
          DspLib::Logger::logData(v18, *(float *)(v7 + 40104 * v8 + 224));
          uint64_t v19 = (DspLib::Logger *)a1[41];
          if (v19)
          {
            DspLib::Logger::logData(v19, *(float *)(v7 + 40104 * v8 + 248));
            BOOL v20 = (DspLib::Logger *)a1[41];
            if (v20)
            {
              DspLib::Logger::logData(v20, *(float *)(v7 + 40104 * v8 + 240));
              unint64_t v21 = (DspLib::Logger *)a1[41];
              if (v21)
              {
                uint64_t v22 = a1[37];
                BOOL v23 = *(unsigned char *)(v22 + 40104 * v8 + 220)
                   && *(float *)(v22 + 40104 * v8 + 240) < *(float *)(v22 + 40104 * v8 + 256);
                DspLib::Logger::logData(v21, (float)v23);
                float v24 = (DspLib::Logger *)a1[41];
                if (v24)
                {
                  DspLib::Logger::logData(v24, *(float *)(v7 + 40104 * v8 + 19704));
                  uint64_t v25 = (DspLib::Logger *)a1[41];
                  if (v25)
                  {
                    DspLib::Logger::logData(v25, *(float *)(v7 + 40104 * v8 + 19700));
                    char v26 = (DspLib::Logger *)a1[41];
                    if (v26)
                    {
                      DspLib::Logger::logData(v26, *(float *)(v7 + 40104 * v8 + 19696));
                      unint64_t v27 = (DspLib::Logger *)a1[41];
                      if (v27)
                      {
                        DspLib::Logger::logData(v27, *(float *)(v7 + 40104 * v8 + 19692));
                        float v28 = (DspLib::Logger *)a1[41];
                        if (v28)
                        {
                          DspLib::Logger::logData(v28, *(float *)(v7 + 40104 * v8 + 19688));
                          float v29 = (DspLib::Logger *)a1[41];
                          if (v29)
                          {
                            DspLib::Logger::logData(v29, *(float *)(v7 + 40104 * v8 + 19708));
                            long long v30 = (DspLib::Logger *)a1[41];
                            if (v30)
                            {
                              DspLib::Logger::logData(v30, *(float *)(v7 + 40104 * v8 + 19144));
                              uint64_t v31 = (DspLib::Logger *)a1[41];
                              if (v31)
                              {
                                uint64_t v32 = a1[37];
                                BOOL v33 = *(unsigned char *)(v32 + 40104 * v8 + 19116)
                                   && *(unsigned char *)(v32 + 40104 * v8 + 19118)
                                   && *(float *)(v32 + 40104 * v8 + 19144) < *(float *)(v32 + 40104 * v8 + 19784);
                                DspLib::Logger::logData(v31, (float)v33);
                                unint64_t v34 = (DspLib::Logger *)a1[41];
                                if (v34)
                                {
                                  DspLib::Logger::logData(v34, *(float *)(v7 + 40104 * v8 + 20856));
                                  uint64_t v35 = (DspLib::Logger *)a1[41];
                                  if (v35)
                                  {
                                    DspLib::Logger::logData(v35, *(float *)(v7 + 40104 * v8 + 20848));
                                    long long v36 = (DspLib::Logger *)a1[41];
                                    if (v36)
                                    {
                                      DspLib::Logger::logData(v36, *(float *)(v7 + 40104 * v8 + 20844));
                                      uint64_t v37 = (DspLib::Logger *)a1[41];
                                      if (v37)
                                      {
                                        DspLib::Logger::logData(v37, *(float *)(v7 + 40104 * v8 + 20860));
                                        uint64_t v38 = (DspLib::Logger *)a1[41];
                                        if (v38)
                                        {
                                          DspLib::Logger::logData(v38, *(float *)(v7 + 40104 * v8 + 20296));
                                          long long v39 = (DspLib::Logger *)a1[41];
                                          if (v39)
                                          {
                                            uint64_t v40 = a1[37];
                                            BOOL v41 = *(unsigned char *)(v40 + 40104 * v8 + 20268)
                                               && *(unsigned char *)(v40 + 40104 * v8 + 20270)
                                               && *(float *)(v40 + 40104 * v8 + 20296) < *(float *)(v40
                                                                                                  + 40104 * v8
                                                                                                  + 20936);
                                            DspLib::Logger::logData(v39, (float)v41);
                                            uint64_t v42 = (DspLib::Logger *)a1[41];
                                            if (v42)
                                            {
                                              DspLib::Logger::logData(v42, *(float *)(v7 + 40104 * v8 + 23128));
                                              uint64_t v43 = (DspLib::Logger *)a1[41];
                                              if (v43)
                                              {
                                                DspLib::Logger::logData(v43, *(float *)(v7 + 40104 * v8 + 23124));
                                                uint64_t v44 = (DspLib::Logger *)a1[41];
                                                if (v44)
                                                {
                                                  DspLib::Logger::logData(v44, *(float *)(v7 + 40104 * v8 + 23120));
                                                  uint64_t v45 = (DspLib::Logger *)a1[41];
                                                  if (v45)
                                                  {
                                                    DspLib::Logger::logData(v45, *(float *)(v7 + 40104 * v8 + 22580));
                                                    uint64_t v46 = (DspLib::Logger *)a1[41];
                                                    if (v46)
                                                    {
                                                      uint64_t v47 = a1[37];
                                                      BOOL v48 = *(unsigned char *)(v47 + 40104 * v8 + 22572)
                                                         && *(unsigned char *)(v47 + 40104 * v8 + 22574)
                                                         && *(float *)(v47 + 40104 * v8 + 22580) < *(float *)(v47 + 40104 * v8 + 23168);
                                                      DspLib::Logger::logData(v46, (float)v48);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      float v49 = DspLib::AlgorithmParametersInstance::operator[](a1 + 33, (7 * *(_DWORD *)(v7 + 40104 * v8 + 8) + 2) | 0x500000000);
      long long v50 = (DspLib::Logger *)a1[41];
      if (v50)
      {
        float v51 = v49 * 0.00097656;
        float v52 = logf(*(float *)(v7 + 40104 * v8 + 304));
        DspLib::Logger::logData(v50, -1.0 / (float)(v51 * v52));
      }
      uint64_t v8 = v10;
      uint64_t v7 = a1[37];
      BOOL v53 = 0xB29503A032A89FBDLL * ((a1[38] - v7) >> 3) > v10++;
      v9 += 2;
    }
    while (v53);
  }
}

float DspLib::LoudspeakerSystemIDV2::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v6 = *(unsigned int *)(a1 + 392);
    uint64_t v7 = *(void *)(a1 + 296);
    if (0xB29503A032A89FBDLL * ((*(void *)(a1 + 304) - v7) >> 3) > v6)
    {
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::status(v7 + 40104 * v6 + 32, a2);
      DspLib::FFT::amplitude(*(void *)(a1 + 296) + 40104 * *(unsigned int *)(a1 + 392) + 23368, (float *)(a2 + 312), 0x400uLL);
      uint64_t v8 = *(void *)(a1 + 296) + 40104 * *(unsigned int *)(a1 + 392);
      uint64_t v9 = *(void *)(v8 + 23384);
      long long v12 = *(_OWORD *)(v8 + 23368);
      uint64_t v13 = v9;
      DspLib::FFT::phase((uint64_t)&v12, (float *)(a2 + 4408), 0x400uLL);
      unsigned int v10 = (void *)DspLibBuffer::channel((DspLibBuffer *)(*(void *)(a1 + 296) + 40104 * *(unsigned int *)(a1 + 392) + 23280), 0);
      DspLib::copy(v10, 1025, (void *)(a2 + 8504));
      DspLib::LoudspeakerSystemIDV2::ModelFit::status(*(void *)(a1 + 296) + 40104 * *(unsigned int *)(a1 + 392) + 17384);
      *(_DWORD *)(a2 + 308) = *(_DWORD *)(a1 + 324);
      uint64_t v11 = *(void *)(a1 + 296) + 40104 * *(unsigned int *)(a1 + 392);
      *(_DWORD *)(a2 + 20812) = *(_DWORD *)(v11 + 40024);
      float result = *(float *)(v11 + 40080);
      *(float *)(a2 + 20816) = result;
    }
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::Algorithm::speakerModel@<S0>(DspLib::LoudspeakerSystemIDV2::Algorithm *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 9) = 0;
  *(void *)(a3 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  vDSP_Length v5 = (void *)(a3 + 20);
  *(void *)(a3 + 25) = 0;
  *(void *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 44) = 0;
  uint64_t v6 = 52;
  *(unsigned char *)(a3 + 48) = 0;
  do
  {
    uint64_t v7 = a3 + v6;
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(unsigned char *)(v7 + 24) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 28) = 0;
    *(unsigned char *)(v7 + 36) = 0;
    v6 += 44;
    *(unsigned char *)(v7 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  }
  while (v7 + 44 != a3 + 184);
  *(int32x2_t *)(a3 + 184) = vdup_n_s32(0xC2C80000);
  *(_DWORD *)(a3 + 192) = 1065353216;
  *(unsigned char *)(a3 + 196) = 0;
  uint64_t v9 = *((void *)this + 37);
  uint64_t v10 = v9 + 40104 * a2;
  char v11 = *(unsigned char *)(v10 + 18688);
  *(unsigned char *)(v10 + 18688) = 0;
  *(unsigned char *)(a3 + 1) = v11;
  int v12 = *(_DWORD *)(v10 + 248);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v10 + 224);
  *(_DWORD *)(a3 + 8) = v12;
  float v13 = *(float *)(v10 + 240);
  *(float *)(a3 + 12) = v13;
  int v14 = *(unsigned __int8 *)(v10 + 220);
  if (v14) {
    LOBYTE(v14) = v13 < *(float *)(v9 + 40104 * a2 + 256);
  }
  *(unsigned char *)(a3 + 16) = v14;
  unint64_t v15 = (void *)(v9 + 40104 * a2);
  uint64_t v16 = v15[2890];
  *(void *)((char *)v5 + 5) = *(void *)((char *)v15 + 23125);
  void *v5 = v16;
  float v17 = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v15 + 2771));
  uint64_t v18 = *((void *)this + 37);
  uint64_t v19 = v18 + 40104 * a2;
  float v20 = *(float *)(v19 + 22580);
  *(float *)(a3 + 36) = v17;
  *(float *)(a3 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v20;
  int v21 = *(unsigned __int8 *)(v19 + 22574);
  if (v21) {
    BOOL v22 = v20 < *(float *)(v18 + 40104 * a2 + 23168);
  }
  else {
    BOOL v22 = 0;
  }
  *(unsigned char *)(a3 + 44) = v22;
  *(unsigned char *)(a3 + 48) = v21;
  BOOL v23 = (long long *)(v18 + 40104 * a2);
  float v24 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)v23 + 18712);
  BOOL v23 = (long long *)((char *)v23 + 19688);
  long long v25 = *v23;
  *(_OWORD *)(a3 + 61) = *(long long *)((char *)v23 + 9);
  *(_OWORD *)(a3 + 52) = v25;
  float v26 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(v24);
  uint64_t v27 = *((void *)this + 37);
  float v28 = *(float *)(v27 + 40104 * a2 + 19144);
  *(float *)(a3 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v26;
  *(float *)(a3 + 84) = v28;
  char v29 = *(unsigned char *)(v27 + 40104 * a2 + 19118);
  if (v29) {
    BOOL v30 = v28 < *(float *)(v27 + 40104 * a2 + 19784);
  }
  else {
    BOOL v30 = 0;
  }
  *(unsigned char *)(a3 + 88) = v30;
  *(unsigned char *)(a3 + 92) = v29;
  uint64_t v31 = (long long *)(v27 + 40104 * a2);
  uint64_t v32 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)v31 + 19864);
  uint64_t v31 = (long long *)((char *)v31 + 20840);
  long long v33 = *v31;
  *(_OWORD *)(a3 + 105) = *(long long *)((char *)v31 + 9);
  *(_OWORD *)(a3 + 96) = v33;
  float v34 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(v32);
  uint64_t v35 = *((void *)this + 37);
  float v36 = *(float *)(v35 + 40104 * a2 + 20296);
  *(float *)(a3 + 124) = v34;
  *(float *)(a3 + 128) = v36;
  char v37 = *(unsigned char *)(v35 + 40104 * a2 + 20270);
  if (v37) {
    BOOL v38 = v36 < *(float *)(v35 + 40104 * a2 + 20936);
  }
  else {
    BOOL v38 = 0;
  }
  *(unsigned char *)(a3 + 132) = v38;
  *(unsigned char *)(a3 + 136) = v37;
  long long v39 = (long long *)(v35 + 40104 * a2);
  uint64_t v40 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)v39 + 21016);
  long long v39 = (long long *)((char *)v39 + 21992);
  long long v41 = *v39;
  *(_OWORD *)(a3 + 149) = *(long long *)((char *)v39 + 9);
  *(_OWORD *)(a3 + 14DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v41;
  float v42 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(v40);
  uint64_t v43 = *((void *)this + 37);
  float v44 = *(float *)(v43 + 40104 * a2 + 21448);
  *(float *)(a3 + 168) = v42;
  *(float *)(a3 + 172) = v44;
  char v45 = *(unsigned char *)(v43 + 40104 * a2 + 21422);
  if (v45) {
    BOOL v46 = v44 < *(float *)(v43 + 40104 * a2 + 22088);
  }
  else {
    BOOL v46 = 0;
  }
  *(unsigned char *)(a3 + 176) = v46;
  *(unsigned char *)(a3 + 18DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v45;
  *(unsigned char *)a3 = DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord[264 * a2 + 260];
  uint64_t v47 = v43 + 40104 * a2;
  int v48 = *(_DWORD *)(v47 + 40080);
  *(_DWORD *)(a3 + 184) = *(_DWORD *)(v47 + 40024);
  *(_DWORD *)(a3 + 188) = v48;
  float result = *(float *)(v47 + 212);
  *(float *)(a3 + 192) = result;
  *(unsigned char *)(a3 + 196) = *((unsigned char *)this + 321);
  return result;
}

float *DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = a4;
  float v10 = DspLib::AlgorithmParametersInstance::operator[](a2, a4 | 0x2300000000);
  float v11 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
  float v12 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x2400000000);
  float v13 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x2500000000);
  if (v10 >= 0.5)
  {
    float v18 = v11 * 0.001;
    float v14 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x300000000);
    float v15 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
    float v19 = v12 * 6.2832;
    float v16 = (float)(v18 * (float)(v12 * 6.2832)) / v13;
    float v17 = v18 * (float)(v19 * v19);
  }
  else
  {
    float v14 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x300000000);
    float v15 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
    float v16 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x500000000);
    float v17 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x600000000);
  }
  float v20 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1F00000000);
  float v21 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1C00000000);
  v28[0] = v14;
  v28[1] = v15 * 0.001;
  int v22 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1B00000000) >= 0.5;
  v28[2] = v16;
  void v28[3] = v17;
  unsigned char v28[4] = v20;
  v28[5] = v21;
  float result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v28, v22, (uint64_t)v29);
  uint64_t v24 = a1 + 264 * a3;
  uint64_t v25 = v24 + 28 * a5;
  *(_OWORD *)(v25 + 124) = *(_OWORD *)v29;
  *(_OWORD *)(v25 + 133) = *(_OWORD *)&v29[9];
  if (!*(unsigned char *)(v24 + a5 + 208) || *(unsigned __int8 *)(a1 + 264 * a3 + 214) != v22)
  {
    uint64_t v26 = a1 + 264 * a3;
    *(unsigned char *)(v26 + 214) = v22;
    uint64_t v27 = v26 + 28 * a5;
    *(_OWORD *)(v27 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(v25 + 124);
    *(_OWORD *)(v27 + 49) = *(_OWORD *)(v25 + 133);
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::takeRdcProcessTimeStamp(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unint64_t *a2)
{
  return DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)((char *)this + 264 * a2 + 24), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeRdc(uint64_t this, float a2, float a3, unsigned int a4)
{
  uint64_t v4 = this + 264 * a4;
  *(float *)uint64_t v4 = a2;
  *(float *)(v4 + 8) = a3;
  *(unsigned char *)(v4 + 12) = 1;
  return this;
}

void DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, float *a2, float *a3, BOOL *a4, unsigned int a5)
{
  float v10 = (char *)this + 264 * a5;
  uint64_t v19 = *((void *)v10 + 3);
  float v12 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v19, (unint64_t *)a2);
  float v13 = v10 + 260;
  if (v12 >= *((float *)v10 + 63))
  {
    *float v13 = 1;
    float v15 = (float *)((char *)this + 264 * a5);
    float v16 = v15[64];
    uint64_t v19 = *((void *)v15 + 4);
    float v17 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v19, v11);
    float v18 = expf((float)-v17 / v16);
    BOOL v14 = 0;
    *a2 = v15[1] + (float)(v18 * (float)(*(float *)v10 - v15[1]));
  }
  else
  {
    *float v13 = 0;
    *a2 = *(float *)v10;
    *a3 = *((float *)this + 66 * a5 + 2);
    BOOL v14 = 1;
  }
  *a4 = v14;
  DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)((char *)this + 264 * a5 + 32), v11);
}

__n128 DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeResonanceModel(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5)
{
  uint64_t v5 = a1 + 264 * a4;
  uint64_t v6 = v5 + 28 * a3;
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(v6 + 49) = *(_OWORD *)(a2 + 9);
  *(__n128 *)(v6 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = result;
  uint64_t v8 = v5 + a3;
  *(unsigned char *)(v8 + 208) = 1;
  *(unsigned char *)(v8 + 211) = a5;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readResonanceModel(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4 = a2;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v8 = (char *)this + 264 * a3;
  uint64_t v20 = *((void *)v8 + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v20, a2) >= *((float *)v8 + 63))
  {
    unsigned int v10 = v4;
  }
  else
  {
    unsigned int v10 = v4;
    if (!*((unsigned char *)this + 264 * a3 + v4 + 211))
    {
      float v11 = (char *)this + 264 * a3 + 28 * v4;
      *(_OWORD *)a4 = *(_OWORD *)(v11 + 40);
      *(void *)(a4 + 16) = *((void *)v11 + 7);
      *(unsigned char *)(a4 + 24) = 1;
      return;
    }
  }
  float v12 = (char *)this + 264 * a3;
  float v13 = &v12[28 * v10];
  uint64_t v20 = *((void *)v12 + 2);
  float32x4_t v18 = *(float32x4_t *)(v13 + 124);
  float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v13 + 40), v18);
  float32x2_t v14 = *(float32x2_t *)(v13 + 140);
  float32x2_t v15 = vsub_f32(*(float32x2_t *)(v13 + 56), v14);
  float v16 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v20, v9);
  *(float *)v17.i32 = expf((float)-v16 / *((float *)v12 + 64));
  *(float32x4_t *)a4 = vmlaq_n_f32(v18, v19, *(float *)v17.i32);
  *(float32x2_t *)(a4 + 16) = vmla_f32(v14, v15, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v17, 0));
  *(unsigned char *)(a4 + 24) = 0;
}

uint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeInductanceModel(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = result + 264 * a4;
  *(void *)(v4 + 216) = a2;
  *(_DWORD *)(v4 + 224) = a3;
  *(unsigned char *)(v4 + 228) = BYTE4(a3);
  *(unsigned char *)(v4 + 244) = 1;
  return result;
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readInductanceModel(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unint64_t *a2)
{
  unsigned int v2 = a2;
  unsigned int v4 = a2;
  uint64_t v5 = (char *)this + 264 * a2;
  uint64_t v15 = *((void *)v5 + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v15, a2) < *((float *)v5 + 63)) {
    return *((void *)this + 33 * v4 + 27);
  }
  uint64_t v8 = (char *)this + 264 * v4;
  float v9 = *((float *)v8 + 58);
  float v10 = *((float *)v8 + 59);
  float v11 = *((float *)v8 + 60);
  uint64_t v12 = *((void *)v8 + 27);
  uint64_t v13 = *((void *)v8 + 28);
  uint64_t v15 = *((void *)v8 + 2);
  float v14 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v15, v6);
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::inductanceModelWithDecay((uint64_t)this, v12, v9, v10, v11, v14, v13, v2);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::inductanceModelWithDecay(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, uint64_t a7, unsigned int a8)
{
  float v12 = expf((float)-a6 / *(float *)(a1 + 264 * a8 + 256));
  float v13 = a3 + (float)(v12 * (float)(DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(a2) - a3));
  float v15 = a4 + (float)(v12 * (float)(v14 - a4));
  float v17 = a5 + (float)(v12 * (float)(v16 - a5));

  return DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v13, v15, v17);
}

void std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v4 - 40104));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID(DspLib::LoudspeakerSystemIDV2::SystemID *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 39936));
  unsigned int v2 = (void **)((char *)this + 39848);
  uint64_t v3 = (void *)*((void *)this + 4989);
  if (v3)
  {
    *((void *)this + 499DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *v2;
  if (*v2)
  {
    *((void *)this + 4982) = v4;
    operator delete(v4);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23368));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23280));
  uint64_t v6 = (void **)((char *)this + 23248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v5 = (void *)*((void *)this + 2901);
  if (v5)
  {
    *((void *)this + 2902) = v5;
    operator delete(v5);
  }
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 17384));
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 32));
}

void DspLib::OnePoleSmoother::~OnePoleSmoother(DspLib::OnePoleSmoother *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::OnePoleSmoother *)((char *)this + 56));
  unsigned int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 896));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48));
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17272));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17192));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17112));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17032));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16952));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16872));
  unsigned int v2 = (void *)*((void *)this + 2101);
  if (v2)
  {
    *((void *)this + 2102) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 16768);
  uint64_t v3 = (void *)*((void *)this + 2088);
  if (v3)
  {
    *((void *)this + 2089) = v3;
    operator delete(v3);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 16664);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 112));
  unsigned int v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

DspLib::LoudspeakerSystemIDV2::SystemID *std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__append(DspLib::LoudspeakerSystemIDV2::SystemID *a1, unint64_t a2)
{
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v4 = (uint64_t)a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xB29503A032A89FBDLL * ((v6 - v7) >> 3) >= a2)
  {
    return std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__construct_at_end(a1, a2);
  }
  else
  {
    unint64_t v8 = 0xB29503A032A89FBDLL * ((v7 - *(void *)a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1A257BBC63120) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xB29503A032A89FBDLL * ((v5 - *(void *)a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xD12BDDE31890) {
      unint64_t v11 = 0x1A257BBC63120;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    float v14 = &v12[40104 * v8];
    v17[0] = v12;
    v17[1] = v14;
    float32x4_t v18 = v14;
    float32x4_t v19 = &v12[40104 * v11];
    uint64_t v15 = 40104 * a2;
    float v16 = &v14[40104 * a2];
    do
    {
      bzero(v14, 0x9CA8uLL);
      DspLib::LoudspeakerSystemIDV2::SystemID::SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)v14);
      v14 += 40104;
      v15 -= 40104;
    }
    while (v15);
    float32x4_t v18 = v16;
    std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__swap_out_circular_buffer((uint64_t *)a1, v17);
    return (DspLib::LoudspeakerSystemIDV2::SystemID *)std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer((uint64_t)v17);
  }
}

void sub_1BB2D437C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

DspLib::LoudspeakerSystemIDV2::SystemID *std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__construct_at_end(DspLib::LoudspeakerSystemIDV2::SystemID *result, uint64_t a2)
{
  unsigned int v2 = result;
  uint64_t v3 = (char *)*((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = &v3[40104 * a2];
    uint64_t v5 = 40104 * a2;
    do
    {
      bzero(v3, 0x9CA8uLL);
      __n128 result = DspLib::LoudspeakerSystemIDV2::SystemID::SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)v3);
      v3 += 40104;
      v5 -= 40104;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *((void *)v2 + 1) = v3;
  return result;
}

void sub_1BB2D4410(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

DspLib::LoudspeakerSystemIDV2::SystemID *DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(DspLib::LoudspeakerSystemIDV2::SystemID *this)
{
  *(void *)this = 1;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 32));
  DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 17384));
  *((void *)this + 290DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  *((void *)this + 2909) = 0;
  *(_OWORD *)((char *)this + 23208) = 0u;
  *(_OWORD *)((char *)this + 23224) = 0u;
  *(_OWORD *)((char *)this + 2324DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 23256) = 0u;
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23280));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23368), 0, 0);
  bzero((char *)this + 23448, 0x4000uLL);
  *((void *)this + 4979) = 1;
  *((_DWORD *)this + 996DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 39896) = 0u;
  *(_OWORD *)((char *)this + 39912) = 0u;
  *(_OWORD *)((char *)this + 39928) = 0u;
  *(_OWORD *)((char *)this + 39944) = 0u;
  *(_OWORD *)((char *)this + 39848) = 0u;
  *(_OWORD *)((char *)this + 39864) = 0u;
  *(_OWORD *)((char *)this + 39873) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 3996DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 4997) = _Q0;
  *((_DWORD *)this + 9996) = 0;
  *((unsigned char *)this + 4000DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 10001) = 1065353216;
  *(_OWORD *)((char *)this + 40008) = xmmword_1BB874340;
  *((_DWORD *)this + 10006) = 0;
  *((void *)this + 5004) = 0;
  *((_DWORD *)this + 1001DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 40056) = 0;
  *((_DWORD *)this + 10015) = 1065353216;
  *((_OWORD *)this + 2504) = xmmword_1BB874340;
  *((_DWORD *)this + 1002DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 5011) = 0;
  *((_DWORD *)this + 10024) = 0;
  return this;
}

void sub_1BB2D45D0(_Unwind_Exception *a1)
{
  DspLibBuffer::~DspLibBuffer(v4);
  DspLib::FIRDecimator::~FIRDecimator(v3);
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(v2);
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(v1);
  _Unwind_Resume(a1);
}

DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  *(float *)this = DspLib::dB2Amp(this, -43.0);
  *((void *)this + 1) = 1;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 136) = _Q0;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)((char *)this + 183) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1092616192;
  *((unsigned char *)this + 212) = 0;
  *(_OWORD *)((char *)this + 216) = xmmword_1BB873F80;
  *((void *)this + 29) = 0x3F80000000000000;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 66) = 1065353216;
  *((unsigned char *)this + 268) = 1;
  *((_DWORD *)this + 68) = 0;
  *((unsigned char *)this + 276) = 0;
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 16664, (char *)this + 280, 2048, 1024, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 16768, (char *)this + 8472, 2048, 1024, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16872), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16952), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17032), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17112), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17192), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17272), 0, 0);
  return this;
}

void sub_1BB2D47BC(_Unwind_Exception *a1)
{
  unint64_t v10 = v6;
  DspLib::ComplexVector::~ComplexVector(v10);
  DspLib::ComplexVector::~ComplexVector(v8);
  DspLib::ComplexVector::~ComplexVector(v7);
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLib::ComplexVector::~ComplexVector(v4);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v3);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v2);
  DspLib::OnePoleSmoother::~OnePoleSmoother((DspLib::OnePoleSmoother *)(v1 + 56));
  float v12 = *v9;
  if (*v9)
  {
    *(void *)(v1 + 32) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D483C()
{
}

void sub_1BB2D4844()
{
}

void sub_1BB2D484C()
{
}

DspLib::LoudspeakerSystemIDV2::ModelFit *DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  *(_WORD *)this = 0;
  *((unsigned char *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), 0, 0);
  *((_DWORD *)this + 182) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), 0, 0);
  *((unsigned char *)this + 1304) = 0;
  *((void *)this + 162) = 0;
  *((_OWORD *)this + 82) = 0u;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784));
  return this;
}

void sub_1BB2D4A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexVector *a10, DspLib::ComplexVector *a11, DspLib::ComplexVector *a12, DspLib::ComplexVector *a13, DspLib::ComplexVector *a14, DspLib::ComplexVector *a15, DspLib::ComplexVector *a16, DspLib::ComplexVector *a17, DspLib::ComplexVector *a18)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v26);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v25);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v24);
  DspLib::ComplexVector::~ComplexVector(v23);
  DspLib::ComplexVector::~ComplexVector(v22);
  DspLib::ComplexVector::~ComplexVector(v21);
  DspLib::ComplexVector::~ComplexVector(v20);
  DspLib::ComplexVector::~ComplexVector(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexVector::~ComplexVector(a10);
  DspLib::ComplexVector::~ComplexVector(a11);
  DspLib::ComplexVector::~ComplexVector(a12);
  DspLib::ComplexVector::~ComplexVector(a13);
  DspLib::ComplexVector::~ComplexVector(a14);
  DspLib::ComplexVector::~ComplexVector(a15);
  DspLib::ComplexVector::~ComplexVector(a16);
  DspLib::ComplexVector::~ComplexVector(a17);
  DspLib::ComplexVector::~ComplexVector(a18);
  _Unwind_Resume(a1);
}

void sub_1BB2D4B18()
{
}

void sub_1BB2D4B20()
{
}

void sub_1BB2D4B28()
{
}

void sub_1BB2D4B30()
{
}

void sub_1BB2D4B38()
{
}

void sub_1BB2D4B40()
{
}

void sub_1BB2D4B48()
{
}

void sub_1BB2D4B50()
{
}

void sub_1BB2D4B58()
{
}

void sub_1BB2D4B60()
{
}

void sub_1BB2D4B68()
{
}

void sub_1BB2D4B70()
{
}

void sub_1BB2D4B78()
{
}

void sub_1BB2D4B80()
{
}

DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 102) = 0;
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)((char *)this + 403) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 52) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 784), 0, 0);
  *((_DWORD *)this + 221) = 0;
  *((unsigned char *)this + 888) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_WORD *)this + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 896), 0, 0);
  *((unsigned char *)this + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 124) = 0;
  *((_OWORD *)this + 61) = 0u;
  *((unsigned char *)this + 1028) = 0;
  *(void *)((char *)this + 1004) = 0;
  *(_OWORD *)((char *)this + 1012) = 0u;
  *((_DWORD *)this + 286) = 0;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 108DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  return this;
}

void sub_1BB2D4D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  uint64_t v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D4D84()
{
}

void sub_1BB2D4D8C()
{
}

void sub_1BB2D4D94()
{
}

void sub_1BB2D4D9C()
{
}

void sub_1BB2D4DA4()
{
}

DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  *(_OWORD *)((char *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), 0, 0);
  *((void *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)((char *)this + 403) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 768), 0, 0);
  *((_DWORD *)this + 216) = 0;
  *((_OWORD *)this + 53) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 872), 0, 0);
  *((void *)this + 119) = 0;
  *(void *)((char *)this + 957) = 0;
  *((void *)this + 121) = 0;
  *(void *)((char *)this + 973) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1012) = 0u;
  return this;
}

void sub_1BB2D4F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  uint64_t v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D4F8C()
{
}

void sub_1BB2D4F94()
{
}

void sub_1BB2D4F9C()
{
}

void sub_1BB2D4FA4()
{
}

void sub_1BB2D4FAC()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1A257BBC63121) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a7 - 40104;
  uint64_t v11 = 40104;
  uint64_t v12 = a7;
  while (a3 != a5)
  {
    a3 = (long long *)((char *)a3 - 40104);
    v11 -= 40104;
    v12 -= 40104;
    uint64_t v13 = v10 - 40104;
    DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(v10, a3);
    uint64_t v10 = v13;
  }
  return a6;
}

void sub_1BB2D5084(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40104)
    DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)a1 = v4;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(a1 + 32, (uint64_t)(a2 + 2));
  DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(a1 + 17384, (uint64_t)a2 + 17384);
  *(void *)(a1 + 2320DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((void *)a2 + 2900);
  *(void *)(a1 + 23208) = 0;
  *(void *)(a1 + 23224) = 0;
  *(void *)(a1 + 23216) = 0;
  *(void *)(a1 + 23208) = *((void *)a2 + 2901);
  *(void *)(a1 + 23216) = *((void *)a2 + 2902);
  *(void *)(a1 + 23224) = *((void *)a2 + 2903);
  *((void *)a2 + 2903) = 0;
  *((void *)a2 + 2902) = 0;
  *((void *)a2 + 2901) = 0;
  *(_OWORD *)(a1 + 23232) = a2[1452];
  *(void *)(a1 + 23256) = 0;
  *(void *)(a1 + 23264) = 0;
  *(void *)(a1 + 23248) = 0;
  *(_OWORD *)(a1 + 23248) = a2[1453];
  *(void *)(a1 + 23264) = *((void *)a2 + 2908);
  *((void *)a2 + 2907) = 0;
  *((void *)a2 + 2906) = 0;
  *((void *)a2 + 2908) = 0;
  *(void *)(a1 + 23272) = *((void *)a2 + 2909);
  DspLibBuffer::DspLibBuffer(a1 + 23280, a2 + 1455);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 23368), (const DspLib::ComplexVector *)((char *)a2 + 23368));
  memcpy((void *)(a1 + 23448), (char *)a2 + 23448, 0x4000uLL);
  int v5 = *((_DWORD *)a2 + 9960);
  *(void *)(a1 + 39832) = *((void *)a2 + 4979);
  *(_DWORD *)(a1 + 3984DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  *(void *)(a1 + 39856) = 0;
  *(void *)(a1 + 39864) = 0;
  *(void *)(a1 + 39848) = 0;
  *(_OWORD *)(a1 + 39848) = *(long long *)((char *)a2 + 39848);
  uint64_t v6 = *((void *)a2 + 4984);
  *(void *)(a1 + 39864) = *((void *)a2 + 4983);
  *((void *)a2 + 4982) = 0;
  *((void *)a2 + 4983) = 0;
  *((void *)a2 + 4981) = 0;
  *(void *)(a1 + 39872) = v6;
  *(void *)(a1 + 3988DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((void *)a2 + 4985);
  *(unsigned char *)(a1 + 39888) = *((unsigned char *)a2 + 39888);
  *(_OWORD *)(a1 + 39896) = *(long long *)((char *)a2 + 39896);
  *(void *)(a1 + 39912) = 0;
  *(void *)(a1 + 3992DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 39928) = 0;
  *(_OWORD *)(a1 + 39912) = *(long long *)((char *)a2 + 39912);
  *(void *)(a1 + 39928) = *((void *)a2 + 4991);
  *((void *)a2 + 4989) = 0;
  *((void *)a2 + 499DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)a2 + 4991) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 39936), (__n128 *)a2 + 2496);
  *(_OWORD *)(a1 + 3996DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(long long *)((char *)a2 + 39960);
  uint64_t v7 = *((void *)a2 + 4997);
  *(_DWORD *)(a1 + 39984) = *((_DWORD *)a2 + 9996);
  *(void *)(a1 + 39976) = v7;
  long long v9 = *(long long *)((char *)a2 + 40056);
  long long v8 = *(long long *)((char *)a2 + 40072);
  long long v10 = *(long long *)((char *)a2 + 40040);
  *(_OWORD *)(a1 + 40084) = *(long long *)((char *)a2 + 40084);
  *(_OWORD *)(a1 + 40056) = v9;
  *(_OWORD *)(a1 + 40072) = v8;
  *(_OWORD *)(a1 + 4004DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v10;
  long long v11 = *(long long *)((char *)a2 + 39992);
  long long v12 = *(long long *)((char *)a2 + 40024);
  *(_OWORD *)(a1 + 40008) = *(long long *)((char *)a2 + 40008);
  *(_OWORD *)(a1 + 40024) = v12;
  *(_OWORD *)(a1 + 39992) = v11;
  return a1;
}

void sub_1BB2D52C0(_Unwind_Exception *a1)
{
  long long v9 = *v7;
  if (*v7)
  {
    *(void *)(v6 + 72) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v10;
    operator delete(v10);
  }
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLibBuffer::~DspLibBuffer(v4);
  DspLib::FIRDecimator::~FIRDecimator((DspLib::FIRDecimator *)(v1 + 23200));
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(v3);
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(v2);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 112), (__n128 *)(a2 + 112));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  memcpy((void *)(a1 + 152), (const void *)(a2 + 152), 0x4090uLL);
  *(void *)(a2 + 16672) = 0;
  long long v7 = *(_OWORD *)(a2 + 16680);
  *(void *)(a1 + 16696) = *(void *)(a2 + 16696);
  *(_OWORD *)(a1 + 1668DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  *(void *)(a1 + 16712) = 0;
  *(void *)(a1 + 1672DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 16704) = 0;
  *(_OWORD *)(a1 + 16704) = *(_OWORD *)(a2 + 16704);
  *(void *)(a1 + 1672DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 16720);
  *(void *)(a2 + 16712) = 0;
  *(void *)(a2 + 16704) = 0;
  *(void *)(a2 + 1672DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 16728) = *(_OWORD *)(a2 + 16728);
  int v8 = *(_DWORD *)(a2 + 16760);
  *(_OWORD *)(a1 + 16744) = *(_OWORD *)(a2 + 16744);
  *(_DWORD *)(a1 + 1676DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v8;
  *(void *)(a1 + 16768) = *(void *)(a2 + 16768);
  *(void *)(a1 + 16776) = *(void *)(a2 + 16776);
  *(void *)(a2 + 16776) = 0;
  long long v9 = *(_OWORD *)(a2 + 16784);
  *(void *)(a1 + 1680DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 16800);
  *(_OWORD *)(a1 + 16784) = v9;
  *(void *)(a1 + 16808) = 0;
  *(void *)(a1 + 16824) = 0;
  *(void *)(a1 + 16816) = 0;
  *(void *)(a1 + 16808) = *(void *)(a2 + 16808);
  *(void *)(a1 + 16816) = *(void *)(a2 + 16816);
  *(void *)(a1 + 16824) = *(void *)(a2 + 16824);
  *(void *)(a2 + 16816) = 0;
  *(void *)(a2 + 16808) = 0;
  *(void *)(a2 + 16824) = 0;
  *(_OWORD *)(a1 + 16832) = *(_OWORD *)(a2 + 16832);
  int v10 = *(_DWORD *)(a2 + 16864);
  *(_OWORD *)(a1 + 16848) = *(_OWORD *)(a2 + 16848);
  *(_DWORD *)(a1 + 16864) = v10;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 16872), (const DspLib::ComplexVector *)(a2 + 16872));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 16952), (const DspLib::ComplexVector *)(a2 + 16952));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17032), (const DspLib::ComplexVector *)(a2 + 17032));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17112), (const DspLib::ComplexVector *)(a2 + 17112));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17192), (const DspLib::ComplexVector *)(a2 + 17192));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17272), (const DspLib::ComplexVector *)(a2 + 17272));
  return a1;
}

void sub_1BB2D5584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DspLib::FFT::BufferedForwardSTFT *a10)
{
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(a10);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v12);
  DspLib::OnePoleSmoother::~OnePoleSmoother(v11);
  uint64_t v20 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 32) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D55F8()
{
}

void sub_1BB2D5600()
{
}

void sub_1BB2D5608()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 96) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BB2D55E0);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const DspLib::ComplexVector *)(a2 + 88);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (DspLib::ComplexVector *)(a1 + 88);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 8), (const DspLib::ComplexVector *)(a2 + 8));
  DspLib::ComplexVector::ComplexVector(v5, v4);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 168), (const DspLib::ComplexVector *)(a2 + 168));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 248), (const DspLib::ComplexVector *)(a2 + 248));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 328), (const DspLib::ComplexVector *)(a2 + 328));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 408), (const DspLib::ComplexVector *)(a2 + 408));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 488), (const DspLib::ComplexVector *)(a2 + 488));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 568), (const DspLib::ComplexVector *)(a2 + 568));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 648), (const DspLib::ComplexVector *)(a2 + 648));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 736), (const DspLib::ComplexVector *)(a2 + 736));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 816), (const DspLib::ComplexVector *)(a2 + 816));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 896), (const DspLib::ComplexVector *)(a2 + 896));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 976), (const DspLib::ComplexVector *)(a2 + 976));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1056), (const DspLib::ComplexVector *)(a2 + 1056));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1136), (const DspLib::ComplexVector *)(a2 + 1136));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1216), (const DspLib::ComplexVector *)(a2 + 1216));
  long long v6 = *(_OWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1312) = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1296) = v6;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 1328, a2 + 1328);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 2480, a2 + 2480);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 3632, a2 + 3632);
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(a1 + 4784, a2 + 4784);
  return a1;
}

void sub_1BB2D57F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DspLib::ComplexVector *a10, DspLib::ComplexVector *a11, DspLib::ComplexVector *a12, DspLib::ComplexVector *a13, DspLib::ComplexVector *a14, DspLib::ComplexVector *a15, DspLib::ComplexVector *a16, DspLib::ComplexVector *a17, DspLib::ComplexVector *a18, DspLib::ComplexVector *a19, DspLib::ComplexVector *a20)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v21);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v20);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v27);
  DspLib::ComplexVector::~ComplexVector(v26);
  DspLib::ComplexVector::~ComplexVector(v25);
  DspLib::ComplexVector::~ComplexVector(v24);
  DspLib::ComplexVector::~ComplexVector(v23);
  DspLib::ComplexVector::~ComplexVector(v22);
  DspLib::ComplexVector::~ComplexVector(a10);
  DspLib::ComplexVector::~ComplexVector(a11);
  DspLib::ComplexVector::~ComplexVector(a12);
  DspLib::ComplexVector::~ComplexVector(a13);
  DspLib::ComplexVector::~ComplexVector(a14);
  DspLib::ComplexVector::~ComplexVector(a15);
  DspLib::ComplexVector::~ComplexVector(a16);
  DspLib::ComplexVector::~ComplexVector(a17);
  DspLib::ComplexVector::~ComplexVector(a18);
  DspLib::ComplexVector::~ComplexVector(a19);
  DspLib::ComplexVector::~ComplexVector(a20);
  _Unwind_Resume(a1);
}

void sub_1BB2D58B4()
{
}

void sub_1BB2D58BC()
{
}

void sub_1BB2D58C4()
{
}

void sub_1BB2D58CC()
{
}

void sub_1BB2D58D4()
{
}

void sub_1BB2D58DC()
{
}

void sub_1BB2D58E4()
{
}

void sub_1BB2D58EC()
{
}

void sub_1BB2D58F4()
{
}

void sub_1BB2D58FC()
{
}

void sub_1BB2D5904()
{
}

void sub_1BB2D590C()
{
}

void sub_1BB2D5914()
{
}

void sub_1BB2D591C()
{
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 48), (const DspLib::ComplexMatrix *)(a2 + 48));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 144), (const DspLib::ComplexVector *)(a2 + 144));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 224), (const DspLib::ComplexMatrix *)(a2 + 224));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 320), (const DspLib::ComplexVector *)(a2 + 320));
  long long v5 = *(_OWORD *)(a2 + 400);
  long long v6 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  *(_OWORD *)(a1 + 416) = v6;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 440), (const DspLib::ComplexVector *)(a2 + 440));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 520), (const DspLib::ComplexMatrix *)(a2 + 520));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 616), (const DspLib::ComplexVector *)(a2 + 616));
  DspLibBuffer::DspLibBuffer(a1 + 696, a2 + 696);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 784), (const DspLib::ComplexVector *)(a2 + 784));
  long long v7 = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 873) = *(_OWORD *)(a2 + 873);
  *(_OWORD *)(a1 + 864) = v7;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 896), (const DspLib::ComplexVector *)(a2 + 896));
  long long v8 = *(_OWORD *)(a2 + 976);
  long long v9 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 1008) = v9;
  *(_OWORD *)(a1 + 976) = v8;
  long long v10 = *(_OWORD *)(a2 + 1024);
  long long v11 = *(_OWORD *)(a2 + 1040);
  long long v12 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1056) = v12;
  *(_OWORD *)(a1 + 104DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
  *(_OWORD *)(a1 + 1024) = v10;
  long long v13 = *(_OWORD *)(a2 + 1088);
  long long v14 = *(_OWORD *)(a2 + 1104);
  long long v15 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)(a2 + 1132);
  *(_OWORD *)(a1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
  *(_OWORD *)(a1 + 1104) = v14;
  *(_OWORD *)(a1 + 1088) = v13;
  return a1;
}

void sub_1BB2D5AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexMatrix *a10)
{
  DspLib::ComplexVector::~ComplexVector(v11);
  DspLibBuffer::~DspLibBuffer(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexMatrix::~ComplexMatrix(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexMatrix::~ComplexMatrix(a10);
  uint64_t v20 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D5B54()
{
}

void sub_1BB2D5B5C()
{
}

void sub_1BB2D5B64()
{
}

void sub_1BB2D5B6C()
{
}

void sub_1BB2D5B74()
{
}

uint64_t DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 38) = *(void *)(a2 + 38);
  *(void *)(a1 + 32) = v4;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 48), (const DspLib::ComplexMatrix *)(a2 + 48));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 144), (const DspLib::ComplexVector *)(a2 + 144));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 224), (const DspLib::ComplexMatrix *)(a2 + 224));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 320), (const DspLib::ComplexVector *)(a2 + 320));
  long long v5 = *(_OWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 424), (const DspLib::ComplexVector *)(a2 + 424));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 504), (const DspLib::ComplexMatrix *)(a2 + 504));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 600), (const DspLib::ComplexVector *)(a2 + 600));
  DspLibBuffer::DspLibBuffer(a1 + 680, a2 + 680);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 768), (const DspLib::ComplexVector *)(a2 + 768));
  long long v6 = *(_OWORD *)(a2 + 848);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 848) = v6;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 872), (const DspLib::ComplexVector *)(a2 + 872));
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 952);
  long long v7 = *(_OWORD *)(a2 + 968);
  long long v8 = *(_OWORD *)(a2 + 984);
  long long v9 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 1012) = *(_OWORD *)(a2 + 1012);
  *(_OWORD *)(a1 + 984) = v8;
  *(_OWORD *)(a1 + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
  *(_OWORD *)(a1 + 968) = v7;
  return a1;
}

void sub_1BB2D5CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexMatrix *a10)
{
  DspLib::ComplexVector::~ComplexVector(v11);
  DspLibBuffer::~DspLibBuffer(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexMatrix::~ComplexMatrix(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexMatrix::~ComplexMatrix(a10);
  uint64_t v20 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB2D5D74()
{
}

void sub_1BB2D5D7C()
{
}

void sub_1BB2D5D84()
{
}

void sub_1BB2D5D8C()
{
}

void sub_1BB2D5D94()
{
}

uint64_t std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40104;
    DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(i - 40104));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t telemetry::Item::ItemFromEnum(telemetry::Item *this)
{
  if (!v2 & v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    switch((int)this)
    {
      case 1936741936:
        return v4 | v3;
      case 1936741937:
        uint64_t v3 = 0;
        uint64_t v4 = 0x100000000;
        break;
      case 1936741938:
        uint64_t v3 = 0;
        uint64_t v4 = 0x200000000;
        break;
      case 1936741939:
        uint64_t v3 = 0;
        uint64_t v4 = 0x300000000;
        break;
      case 1936741940:
        uint64_t v3 = 0;
        uint64_t v4 = 0x400000000;
        break;
      case 1936741941:
        uint64_t v3 = 0;
        uint64_t v4 = 0x500000000;
        break;
      case 1936741942:
        uint64_t v3 = 0;
        uint64_t v4 = 0x600000000;
        break;
      case 1936741943:
        uint64_t v3 = 0;
        uint64_t v4 = 0x700000000;
        break;
      default:
        __cxa_rethrow();
    }
  }
  else
  {
    switch((int)this)
    {
      case 1936738608:
        uint64_t v4 = 0;
        break;
      case 1936738609:
        uint64_t v4 = 0x100000000;
        break;
      case 1936738610:
        uint64_t v4 = 0x200000000;
        break;
      case 1936738611:
        uint64_t v4 = 0x300000000;
        break;
      case 1936738612:
        uint64_t v4 = 0x400000000;
        break;
      case 1936738613:
        uint64_t v4 = 0x500000000;
        break;
      case 1936738614:
        uint64_t v4 = 0x600000000;
        break;
      case 1936738615:
        uint64_t v4 = 0x700000000;
        break;
      default:
        JUMPOUT(0);
    }
    uint64_t v3 = 1;
  }
  return v4 | v3;
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[18],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2D5FA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[18],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2D5FFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[18],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2D6060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[19],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[19],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2D60C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[19],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[19],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2D6120(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[19],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2D6184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::Algorithm(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 352);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 336);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void DspLib::FFT::ForwardSTFT::process(uint64_t a1, void *a2, uint64_t a3, DSPSplitComplex *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(void *)a1 != v8)
  {
    DspLib::copy((void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * (*(void *)(a1 + 72) - v8)), *(void *)(a1 + 72) - v8, *(void **)(a1 + 64));
    DspLib::copy(a2, a3, (void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * *(void *)(a1 + 16)));
    a2 = *(void **)(a1 + 64);
    a3 = *(void *)(a1 + 72);
  }

  DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, (uint64_t)a2, a3, a4);
}

void DspLib::FFT::InverseSTFT::transformAndWOLA(DspLib::FFT::InverseSTFT *this, const DSPSplitComplex *a2)
{
  v13[5] = *MEMORY[0x1E4F143B8];
  if (*(void *)this == *((void *)this + 2))
  {
    uint64_t v3 = (float *)*((void *)this + 8);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, (uint64_t)a2, v3);
  }
  else
  {
    MEMORY[0x1F4188790](this);
    long long v5 = (float *)(((unint64_t)v13 - v4) & 0xFFFFFFFFFFFFFFC0);
    uint64_t v6 = *(void *)this;
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, v7, v5);
    uint64_t v8 = *((void *)this + 2);
    uint64_t v9 = *((void *)this + 8);
    uint64_t v10 = *((void *)this + 9);
    vDSP_Length v11 = *(void *)this - v8;
    if (v11 == -1) {
      uint64_t v12 = v10 - v8;
    }
    else {
      uint64_t v12 = *(void *)this - v8;
    }
    DspLib::add(v5, v11, (const float *)(v9 + 4 * v8), v12, *((float **)this + 8));
    DspLib::copy(&v5[v6 - v8], v8, (void *)(v9 + 4 * v10 - 4 * v8));
  }
}

void DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>(uint64_t a1, uint64_t a2, float *a3)
{
  var30[7] = *MEMORY[0x1E4F143B8];
  vDSP_Length v5 = *(void *)a1;
  uint64_t v6 = (void *)MEMORY[0x1F4188790](a1);
  uint64_t v8 = (DSPComplex *)(((unint64_t)var30 - v7) & 0xFFFFFFFFFFFFFFC0);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v6, v9, v8);
  DspLib::multiply((const float *)v8, v5, *(const float **)(a1 + 24), *(void *)(a1 + 32), a3);
}

vDSP_Length *DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4, int a5)
{
  uint64_t v7 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(a1, a2, a3, a4);
  v7[10] = 0;
  v7[11] = 0;
  uint64_t v8 = v7 + 10;
  *((_DWORD *)v7 + 24) = a5;
  DspLib::clear((float *)v7[8], v7[9]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return a1;
}

void sub_1BB2D6518(_Unwind_Exception *a1)
{
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::BufferedForwardSTFT::reset(DspLib::FFT::BufferedForwardSTFT *this)
{
  *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 11) = 0;
}

unint64_t DspLib::FFT::BufferedForwardSTFT::addInput(uint64_t a1, void *__src, unint64_t a3, DSPSplitComplex *a4)
{
  unint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v8 == v9)
  {
    DspLib::copy((void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * (*(void *)(a1 + 72) - v8)), *(void *)(a1 + 72) - v8, *(void **)(a1 + 64));
    unint64_t v8 = 0;
    *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    unint64_t v9 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 88) = 0;
  if (v9 <= v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v8;
  }
  unint64_t v11 = v9 - v10;
  if (a3 >= v11) {
    a3 = v11;
  }
  if (a3)
  {
    if (*(_DWORD *)(a1 + 96) == 1)
    {
      DspLib::copy((void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * (*(void *)(a1 + 72) - a3)), *(void *)(a1 + 72) - a3, *(void **)(a1 + 64));
      DspLib::copy(__src, a3, (void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * a3));
      DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, *(void *)(a1 + 64), *(void *)(a1 + 72), a4);
      *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(void *)(a1 + 88) = a3;
    }
    else
    {
      DspLib::copy(__src, a3, (void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * v9 + 4 * v8));
      unint64_t v12 = *(void *)(a1 + 80) + a3;
      *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      if (v12 == *(void *)(a1 + 16))
      {
        DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, *(void *)(a1 + 64), *(void *)(a1 + 72), a4);
        *(void *)(a1 + 88) = *(void *)(a1 + 80);
      }
    }
  }
  return a3;
}

char *DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::copyStatesFrom(char *result, uint64_t a2)
{
  char v2 = result;
  if (result != (char *)a2) {
    uint64_t result = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(result + 40, *(char **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  }
  uint64_t v3 = *(void *)v2;
  *((void *)v2 + 8) = *((void *)v2 + 5) + (-v2[40] & 0x3C);
  *((void *)v2 + 9) = v3;
  return result;
}

vDSP_Length *DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4, int a5)
{
  uint64_t v7 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(a1, a2, a3, a4);
  v7[10] = 0;
  *((_DWORD *)v7 + 22) = a5;
  DspLib::clear((float *)v7[8], a1[9]);
  a1[10] = 0;
  return a1;
}

void sub_1BB2D6730(_Unwind_Exception *a1)
{
  DspLib::FFT::InverseSTFT::~InverseSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::InverseSTFT::~InverseSTFT(DspLib::FFT::InverseSTFT *this)
{
  char v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)this);
}

uint64_t DspLib::FFT::BufferedInverseSTFT::getOutput(void *a1, void *__dst, unint64_t a3)
{
  uint64_t v3 = a1[10];
  if (a3 >= a1[2] - v3) {
    uint64_t v4 = a1[2] - v3;
  }
  else {
    uint64_t v4 = a3;
  }
  if (v4)
  {
    if (v4 == -1) {
      uint64_t v7 = a1[9] - v3;
    }
    else {
      uint64_t v7 = v4;
    }
    DspLib::copy((void *)(a1[8] + 4 * v3), v7, __dst);
    a1[10] += v4;
  }
  return v4;
}

vDSP_Length *DspLib::FFT::PartialFrameForwardSTFT::PartialFrameForwardSTFT(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  vDSP_Length v5 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(a1, a2, a3, a4);
  v5[10] = 0;
  DspLib::clear((float *)v5[8], a1[9]);
  a1[10] = 0;
  return a1;
}

void sub_1BB2D6830(_Unwind_Exception *a1)
{
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::PartialFrameForwardSTFT::reset(DspLib::FFT::PartialFrameForwardSTFT *this)
{
  *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
}

unint64_t DspLib::FFT::PartialFrameForwardSTFT::process(uint64_t a1, void *__src, uint64_t a3, DSPSplitComplex *a4)
{
  unint64_t v5 = a3;
  uint64_t vars8 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 80);
  if (a3 == v9)
  {
    if (!v10)
    {
      DspLib::FFT::ForwardSTFT::process(a1, __src, a3, a4);
      return *(void *)(a1 + 16);
    }
  }
  else if (!v10)
  {
    DspLib::copy((void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * (*(void *)(a1 + 72) - v9)), *(void *)(a1 + 72) - v9, *(void **)(a1 + 64));
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 80);
  }
  if (v9 - v10 < v5) {
    unint64_t v5 = v9 - v10;
  }
  unint64_t v11 = DspLib::copy(__src, v5, (void *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 72) - 4 * v9 + 4 * v10));
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 80);
  vDSP_Length v14 = v12 - (v13 + v5);
  if (v13)
  {
    v25[5] = v25;
    uint64_t v26 = a4;
    HIDWORD(v27) = v5 == -1;
    MEMORY[0x1F4188790](v11);
    float v16 = (float *)(((unint64_t)v25 - v15) & 0xFFFFFFFFFFFFFFC0);
    float v17 = (void *)(a1 + 16);
    DspLib::clear(v16, v8 - *(void *)(a1 + 16) + *(void *)(a1 + 80));
    float32x4_t v18 = &v16[v8];
    DspLib::copy(__src, v5, &v18[*(void *)(a1 + 80) - *(void *)(a1 + 16)]);
    unint64_t v19 = *(void *)(a1 + 80) + v5;
    if (v14 == -1) {
      vDSP_Length v20 = *v17 - v19;
    }
    else {
      vDSP_Length v20 = v14;
    }
    DspLib::clear(&v18[v19 - *v17], v20);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, (uint64_t)v16, v8, v26);
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 64);
    uint64_t v22 = *(void *)(a1 + 72);
    DspLib::clear((float *)(v21 + 4 * v22 - 4 * v12 + 4 * v5), v14);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, v21, v22, a4);
  }
  unint64_t v23 = *(void *)(a1 + 80) + v5;
  if (v23 >= *(void *)(a1 + 16)) {
    unint64_t v23 = 0;
  }
  *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
  return v5;
}

vDSP_Length *DspLib::FFT::PartialFrameInverseSTFT::PartialFrameInverseSTFT(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  unint64_t v5 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(a1, a2, a3, a4);
  v5[10] = 0;
  DspLib::clear((float *)v5[8], a1[9]);
  a1[10] = 0;
  return a1;
}

void sub_1BB2D6B00(_Unwind_Exception *a1)
{
  DspLib::FFT::InverseSTFT::~InverseSTFT(v1);
  _Unwind_Resume(a1);
}

unint64_t DspLib::FFT::PartialFrameInverseSTFT::process(DspLib::FFT::InverseSTFT *this, const DSPSplitComplex *a2, void *a3, unint64_t a4)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 10) >= *((void *)this + 2))
  {
    DspLib::FFT::InverseSTFT::transformAndWOLA(this, a2);
    uint64_t v10 = 0;
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  }
  else
  {
    MEMORY[0x1F4188790](this);
    uint64_t v8 = (const float *)((char *)v13 - v7);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, v9, (float *)((char *)v13 - v7));
    DspLib::add(*((float **)this + 8), *((void *)this + 9), v8);
    uint64_t v10 = *((void *)this + 10);
  }
  if (a4 >= *((void *)this + 2) - v10) {
    a4 = *((void *)this + 2) - v10;
  }
  if (a4 == -1) {
    uint64_t v11 = *((void *)this + 9) - v10;
  }
  else {
    uint64_t v11 = a4;
  }
  DspLib::copy((void *)(*((void *)this + 8) + 4 * v10), v11, a3);
  *((void *)this + 10) += a4;
  return a4;
}

double DspLib::FFT::Filterbank::Filterbank(DspLib::FFT::Filterbank *this, char a2)
{
  uint64_t v3 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib3FFT10ParametersL8kDefaultE__0, 0xAuLL, (uint64_t)&_ZGRN6DspLib3FFT10ParametersL8kMinimumE_, 10, (uint64_t)&_ZGRN6DspLib3FFT10ParametersL8kMaximumE_, 10);
  *(void *)uint64_t v3 = &unk_1F14A7880;
  *(unsigned char *)(v3 + 216) = a2;
  double result = 0.0;
  *(_OWORD *)(v3 + 236) = 0u;
  *(_OWORD *)(v3 + 252) = 0u;
  *(_OWORD *)(v3 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v3 + 268) = 0u;
  *(_OWORD *)(v3 + 284) = 0u;
  *(_OWORD *)(v3 + 30DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v3 + 316) = 0u;
  *(_OWORD *)(v3 + 332) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  return result;
}

void DspLib::FFT::Filterbank::~Filterbank(DspLib::FFT::Filterbank *this)
{
  *(void *)this = &unk_1F14A7880;
  DspLib::FFT::Filterbank::uninitialize(this);
  unint64_t v5 = (void **)((char *)this + 336);
  std::vector<DspLib::FFT::BufferedInverseSTFT>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 312);
  std::vector<DspLib::FFT::BufferedForwardSTFT>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 288);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v5);
  char v2 = (void *)*((void *)this + 33);
  if (v2)
  {
    *((void *)this + 34) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 30);
  if (v3)
  {
    *((void *)this + 31) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1F14A87D8;
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  DspLib::FFT::Filterbank::~Filterbank(this);

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::FFT::Filterbank::initialize(DspLib::FFT::Filterbank *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::FFT::Filterbank *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::FFT::Filterbank *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::FFT::Filterbank::uninitialize(DspLib::FFT::Filterbank *this)
{
  *((unsigned char *)this + 8) = 0;
  uint64_t v2 = *((void *)this + 37);
  uint64_t v3 = *((void *)this + 36);
  while (v2 != v3)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v2 - 80));
  *((void *)this + 37) = v3;
  unint64_t v5 = (DspLib::FFT::BufferedForwardSTFT *)*((void *)this + 39);
  for (uint64_t i = (DspLib::FFT::BufferedForwardSTFT *)*((void *)this + 40);
        i != v5;
        DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(i))
  {
    uint64_t i = (DspLib::FFT::BufferedForwardSTFT *)((char *)i - 104);
  }
  *((void *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  uint64_t v7 = (DspLib::FFT::InverseSTFT *)*((void *)this + 42);
  for (unint64_t j = (DspLib::FFT::InverseSTFT *)*((void *)this + 43); j != v7; DspLib::FFT::InverseSTFT::~InverseSTFT(j))
    unint64_t j = (DspLib::FFT::InverseSTFT *)((char *)j - 96);
  *((void *)this + 43) = v7;
  *((void *)this + 31) = *((void *)this + 30);
  *((void *)this + 34) = *((void *)this + 33);
  *((void *)this + 28) = 0;
}

void DspLib::FFT::Filterbank::reset(DspLib::FFT::Filterbank *this)
{
  uint64_t v2 = *((void *)this + 36);
  uint64_t v3 = *((void *)this + 37);
  while (v2 != v3)
  {
    DspLib::ComplexVector::operator=(v2, 0.0);
    v2 += 80;
  }
  uint64_t v4 = *((void *)this + 39);
  uint64_t v5 = *((void *)this + 40);
  while (v4 != v5)
  {
    DspLib::clear(*(float **)(v4 + 64), *(void *)(v4 + 72));
    *(void *)(v4 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(void *)(v4 + 88) = 0;
    v4 += 104;
  }
  uint64_t v7 = *((void *)this + 42);
  uint64_t v6 = *((void *)this + 43);
  while (v7 != v6)
  {
    DspLib::clear(*(float **)(v7 + 64), *(void *)(v7 + 72));
    *(void *)(v7 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    v7 += 96;
  }
}

void DspLib::FFT::Filterbank::copyStatesFrom(DspLib::FFT::Filterbank *this, const DspLib::FFT::Filterbank *a2)
{
  if (this != a2) {
    std::vector<DspLib::ComplexVector>::__assign_with_size[abi:ne180100]<DspLib::ComplexVector*,DspLib::ComplexVector*>((uint64_t)this + 288, *((void *)a2 + 36), *((void *)a2 + 37), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 4));
  }
  uint64_t v4 = *((void *)this + 39);
  if (*((void *)this + 40) != v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = 104 * v5;
      uint64_t v8 = v4 + v7;
      uint64_t v9 = *((void *)a2 + 39) + v7;
      DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::copyStatesFrom((char *)(v4 + v7), v9);
      *(_OWORD *)(v8 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(v9 + 80);
      uint64_t v5 = v6;
      uint64_t v4 = *((void *)this + 39);
      BOOL v10 = 0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 40) - v4) >> 3) > (unint64_t)v6++;
    }
    while (v10);
  }
  uint64_t v11 = *((void *)this + 42);
  if (*((void *)this + 43) != v11)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      uint64_t v14 = 3 * v12;
      uint64_t v15 = v11 + 32 * v14;
      uint64_t v16 = *((void *)a2 + 42) + 32 * v14;
      DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::copyStatesFrom((char *)v15, v16);
      *(void *)(v15 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(v16 + 80);
      uint64_t v12 = v13;
      uint64_t v11 = *((void *)this + 42);
      BOOL v10 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 43) - v11) >> 5) > v13++;
    }
    while (v10);
  }
}

void DspLib::FFT::Filterbank::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    unsigned int v6 = *(float **)(a1 + 32);
    unint64_t v7 = 1 << vcvtas_u32_f32(*v6);
    unint64_t v8 = vcvtas_u32_f32((float)((float)(v6[1] / -100.0) + 1.0) * (float)v7);
    unsigned int v9 = vcvtas_u32_f32(fmaxf(v6[3], 0.0));
    if (v7 != *(void *)(a1 + 224) || *(void *)(a1 + 232) != v8 || *(_DWORD *)(a1 + 220) != v9)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      *(_DWORD *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
      *(unsigned char *)(a1 + 8) = 1;
      *(void *)(a1 + 224) = v7;
      *(void *)(a1 + 232) = v8;
      std::vector<float>::resize(a1 + 240, v7);
      BOOL v10 = *(DspLib::FFT::BufferedForwardSTFT **)(a1 + 320);
      uint64_t v11 = *(DspLib::FFT::BufferedForwardSTFT **)(a1 + 312);
      while (v10 != v11)
      {
        BOOL v10 = (DspLib::FFT::BufferedForwardSTFT *)((char *)v10 - 104);
        DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v10);
      }
      *(void *)(a1 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unsigned int v12 = 0;
        do
        {
          unint64_t v13 = *(void *)(a1 + 320);
          uint64_t v14 = (uint64_t *)(a1 + 312);
          uint64_t v15 = (vDSP_Length *)(a1 + 240);
          uint64_t v16 = (vDSP_Length *)(a1 + 232);
          float v17 = (int *)(a1 + 220);
          if (v13 >= *(void *)(a1 + 328))
          {
            uint64_t v18 = std::vector<DspLib::FFT::BufferedForwardSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(v14, v15, v16, v17);
          }
          else
          {
            std::vector<DspLib::FFT::BufferedForwardSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>((uint64_t)v14, v15, v16, v17);
            uint64_t v18 = v13 + 104;
          }
          *(void *)(a1 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v18;
          ++v12;
        }
        while (v12 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      if (*(unsigned char *)(a1 + 216))
      {
        std::vector<float>::resize(a1 + 264, *(void *)(a1 + 224));
        vDSP_Length v20 = *(DspLib::FFT::InverseSTFT **)(a1 + 336);
        for (uint64_t i = *(DspLib::FFT::InverseSTFT **)(a1 + 344); i != v20; DspLib::FFT::InverseSTFT::~InverseSTFT(i))
          uint64_t i = (DspLib::FFT::InverseSTFT *)((char *)i - 96);
        *(void *)(a1 + 344) = v20;
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unsigned int v21 = 0;
          do
          {
            unint64_t v22 = *(void *)(a1 + 344);
            unint64_t v23 = (uint64_t *)(a1 + 336);
            uint64_t v24 = (vDSP_Length *)(a1 + 264);
            uint64_t v25 = (vDSP_Length *)(a1 + 232);
            uint64_t v26 = (int *)(a1 + 220);
            if (v22 >= *(void *)(a1 + 352))
            {
              uint64_t v27 = std::vector<DspLib::FFT::BufferedInverseSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(v23, v24, v25, v26);
            }
            else
            {
              std::vector<DspLib::FFT::BufferedInverseSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>((uint64_t)v23, v24, v25, v26);
              uint64_t v27 = v22 + 96;
            }
            *(void *)(a1 + 344) = v27;
            ++v21;
          }
          while (v21 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unsigned int v28 = 0;
        do
        {
          unint64_t v29 = *(void *)(a1 + 224) >> 1;
          unint64_t v42 = v29;
          unint64_t v30 = *(void *)(a1 + 296);
          if (v30 >= *(void *)(a1 + 304))
          {
            uint64_t v31 = std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long>((uint64_t *)(a1 + 288), &v42);
          }
          else
          {
            DspLib::ComplexVector::ComplexVector(*(DspLib::ComplexVector **)(a1 + 296), v29, 0);
            uint64_t v31 = v30 + 80;
            *(void *)(a1 + 296) = v30 + 80;
          }
          *(void *)(a1 + 296) = v31;
          ++v28;
        }
        while (v28 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
    }
    uint64_t v32 = *(float **)(a1 + 240);
    long long v33 = *(float **)(a1 + 248);
    unint64_t v34 = v33 - v32;
    switch(vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 8)))
    {
      case 0u:
        float v35 = 0.5 / (float)v34;
        goto LABEL_37;
      case 1u:
        unint64_t v36 = *(void *)(a1 + 232);
        DspLib::makeSymmetricHannWindow(*(void *)(a1 + 240), v33 - v32);
        if (v33 == v32)
        {
          float v38 = 0.0;
        }
        else
        {
          uint64_t v37 = 0;
          float v38 = 0.0;
          do
            float v38 = v38 + v32[v37++];
          while (v34 > v37);
        }
        float v41 = 0.5 / (float)v34;
        DspLib::multiply(v32, v33 - v32, v41 * (float)((float)v34 / v38));
        float v4 = (float)((float)v36 / (float)((float)(v34 + 1) * 1.5)) / v41;
        break;
      case 2u:
        float v35 = 0.5;
LABEL_37:
        DspLib::fill(*(float **)(a1 + 240), v33 - v32, v35);
        goto LABEL_39;
      case 3u:
        DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 240), v33 - v32);
        DspLib::sqrt(v32, v33 - v32);
LABEL_39:
        float v4 = 1.0;
        break;
      case 4u:
        DspLib::makeSymmetricHannWindow(*(void *)(a1 + 240), v33 - v32);
        if (v33 == v32)
        {
          float v40 = 0.0;
        }
        else
        {
          uint64_t v39 = 0;
          float v40 = 0.0;
          do
          {
            float v40 = v40 + (float)(v32[v39] * v32[v39]);
            ++v39;
          }
          while (v34 > v39);
        }
        float v4 = 1.0;
        DspLib::multiply(v32, v33 - v32, 1.0 / sqrtf(v40));
        break;
      default:
        break;
    }
    if (*(unsigned char *)(a1 + 216))
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 264), *(char **)(a1 + 240), *(void *)(a1 + 248), (uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 2);
      DspLib::multiply(*(float **)(a1 + 264), (uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 2, v4);
      DspLib::reverse(*(float **)(a1 + 264), (uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 2);
    }
  }
}

unint64_t DspLib::FFT::Filterbank::audioInput(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = DspLib::FFT::BufferedForwardSTFT::addInput(*(void *)(a1 + 312) + v5, *(void **)(*a2 + 8 * v6++), a2[2], (DSPSplitComplex *)(*(void *)(a1 + 288) + v4));
        v5 += 104;
        v4 += 80;
      }
      while (v6 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unsigned int v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 433);
    unint64_t v7 = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return v7;
}

unint64_t DspLib::FFT::Filterbank::audioInputOutput(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(a1 + 288);
        if (*(unsigned char *)(a1 + 216))
        {
          uint64_t v11 = *(void *)(a1 + 336) + v6;
          if (*(void *)(v11 + 80) == *(void *)(v11 + 16) || *(_DWORD *)(v11 + 88) == 1)
          {
            DspLib::FFT::InverseSTFT::transformAndWOLA((DspLib::FFT::InverseSTFT *)(*(void *)(a1 + 336) + v6), (const DSPSplitComplex *)(v10 + v7));
            *(void *)(v11 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
            uint64_t v10 = *(void *)(a1 + 288);
          }
        }
        unint64_t v12 = DspLib::FFT::BufferedForwardSTFT::addInput(*(void *)(a1 + 312) + v8, *(void **)(*a2 + 8 * v9), a2[2], (DSPSplitComplex *)(v10 + v7));
        if (*(unsigned char *)(a1 + 216)) {
          DspLib::FFT::BufferedInverseSTFT::getOutput((void *)(*(void *)(a1 + 336) + v6), *(void **)(*a3 + 8 * v9), a3[2]);
        }
        ++v9;
        v8 += 104;
        v7 += 80;
        v6 += 96;
      }
      while (v9 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v14, 450);
    unint64_t v12 = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return v12;
}

unint64_t DspLib::FFT::Filterbank::processBlock(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v23 = result;
  v25[3] = *MEMORY[0x1E4F143B8];
  if (a2[2])
  {
    unint64_t v5 = 0;
    do
    {
      MEMORY[0x1F4188790](result);
      uint64_t v8 = (char *)&v24[-1] - v7;
      if (v6 >= 0x200) {
        size_t v9 = 512;
      }
      else {
        size_t v9 = v6;
      }
      bzero((char *)&v24[-1] - v7, v9);
      unint64_t v11 = a2[1];
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *a2;
        do
        {
          *(void *)&v8[8 * v12] = *(void *)(v13 + 8 * v12) + 4 * v5;
          ++v12;
        }
        while (v11 > v12);
      }
      uint64_t v14 = a2[2];
      unint64_t v15 = a3[1];
      MEMORY[0x1F4188790](v10);
      uint64_t v18 = (char *)&v24[-1] - v17;
      if (v16 >= 0x200) {
        size_t v19 = 512;
      }
      else {
        size_t v19 = v16;
      }
      bzero((char *)&v24[-1] - v17, v19);
      if (v15)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *a3;
        do
        {
          *(void *)&v18[8 * v20] = *(void *)(v21 + 8 * v20) + 4 * v5;
          ++v20;
        }
        while (v15 > v20);
      }
      unint64_t v22 = a3[2] - v5;
      v25[0] = v8;
      v25[1] = v11;
      v25[2] = v14 - v5;
      v24[0] = v18;
      v24[1] = v15;
      _OWORD v24[2] = v22;
      double result = DspLib::FFT::Filterbank::audioInputOutput(v23, v25, v24);
      unint64_t v5 = (result + v5);
    }
    while (v5 < a2[2]);
  }
  return result;
}

float DspLib::FFT::conjugateMultiply(DSPSplitComplex *__C, DSPSplitComplex *__B, const DspLib::ComplexSpan *a3)
{
  float v5 = *__C->realp;
  float v6 = *__C->imagp;
  vDSP_zvcmul(__C, 1, __B, 1, __C, 1, (vDSP_Length)__C[1].realp);
  imagp = __B->imagp;
  uint64_t v8 = __C->imagp;
  *__C->vDSP_Length realp = v5 * *__B->realp;
  float result = v6 * *imagp;
  *uint64_t v8 = result;
  return result;
}

float DspLib::FFT::divide(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexSpan *a3)
{
  float v5 = *this->realp;
  float v6 = *this->imagp;
  DspLib::operator/=(this, a2);
  imagp = a2->imagp;
  uint64_t v8 = this->imagp;
  *this->vDSP_Length realp = v5 / *a2->realp;
  float result = v6 / *imagp;
  *uint64_t v8 = result;
  return result;
}

void DspLib::FFT::coherence(uint64_t a1, uint64_t a2, const DSPSplitComplex *a3, float *a4, vDSP_Length a5)
{
  if ((float *)a5 < (float *)((char *)a3[1].realp + 1))
  {
    uint64_t v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v14, 535);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    vDSP_zcoher(*(const float **)a1, *(const float **)a2, a3, a4, a5 - 1);
    imagp = a3->imagp;
    vDSP_Length realp = a3[1].realp;
    uint64_t v12 = *(float **)(a1 + 8);
    uint64_t v13 = *(float **)(a2 + 8);
    *a4 = (float)(*a3->realp * *a3->realp) / (float)(**(float **)a1 * **(float **)a2);
    a4[(void)realp] = (float)(*imagp * *imagp) / (float)(*v12 * *v13);
    DspLib::clip(a4, a5, 0.0, 1.0);
  }
}

float DspLib::FFT::powerSpectrum(DSPSplitComplex *this, DSPSplitComplex *a2, DSPSplitComplex *__C, DspLib::ComplexSpan *a4)
{
  DspLib::ComplexSpan::operator=(__C, a2);

  return DspLib::FFT::conjugateMultiply(__C, this, v6);
}

float DspLib::FFT::amplitude(uint64_t a1, float *__C, vDSP_Length a3)
{
  vDSP_Length v3 = a3;
  float v6 = *(float **)(a1 + 8);
  vDSP_Length v7 = *(void *)(a1 + 16);
  if (a3 > v7)
  {
    __C[v7] = fabsf(*v6);
    vDSP_Length v3 = v7;
  }
  __A.vDSP_Length realp = *(float **)a1;
  __A.imagp = v6;
  vDSP_Length v10 = v3;
  vDSP_zvabs(&__A, 1, __C, 1, v3);
  float result = fabsf(**(float **)a1);
  *DSPSplitComplex __C = result;
  return result;
}

void DspLib::FFT::phase(uint64_t a1, float *__C, vDSP_Length a3)
{
  vDSP_Length v3 = a3;
  float v6 = *(float **)(a1 + 8);
  vDSP_Length v7 = *(void *)(a1 + 16);
  if (a3 > v7)
  {
    float v8 = 3.1416;
    if (*v6 >= 0.0) {
      float v8 = 0.0;
    }
    __C[v7] = v8;
    vDSP_Length v3 = v7;
  }
  __A.vDSP_Length realp = *(float **)a1;
  __A.imagp = v6;
  vDSP_Length v11 = v3;
  vDSP_zvphas(&__A, 1, __C, 1, v3);
  float v9 = 3.1416;
  if (**(float **)a1 >= 0.0) {
    float v9 = 0.0;
  }
  *DSPSplitComplex __C = v9;
}

void DspLib::FFT::multiply(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (a3 > v3 + 1)
  {
    uint64_t v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v13, 595);
    ++DspLibDebug::mAssertCounter;
  }
  else if (a3)
  {
    float v5 = *(float **)a1;
    **(float **)a1 = *(float *)a2 * **(float **)a1;
    vDSP_Length v6 = a3 - 1;
    if (a3 == v3 + 1)
    {
      **(float **)(a1 + 8) = *(float *)(a2 + 4 * v6) * **(float **)(a1 + 8);
      vDSP_Length v7 = a3 - 2;
      vDSP_Length v8 = v3 - 1;
      BOOL v9 = a3 == 1;
      if (a3 == 1) {
        vDSP_Length v6 = v8;
      }
      else {
        vDSP_Length v6 = a3 - 2;
      }
    }
    else
    {
      BOOL v9 = 0;
      vDSP_Length v7 = a3 - 1;
    }
    vDSP_Length v10 = (const float *)(a2 + 4);
    DspLib::multiply(v5 + 1, v6, (const float *)(a2 + 4));
    uint64_t v11 = *(void *)(a1 + 8);
    if (v9) {
      vDSP_Length v12 = *(void *)(a1 + 16) - 1;
    }
    else {
      vDSP_Length v12 = v7;
    }
    DspLib::multiply((float *)(v11 + 4), v12, v10);
  }
}

void DspLib::FFT::addDelay(DspLib::FFT *this, DspLib::ComplexSpan *a2, float a3)
{
  unint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    float v4 = (float)(a3 * 3.1416) / (float)v3;
    float v5 = *(float **)this;
    vDSP_Length v6 = (float *)*((void *)this + 1);
    for (unint64_t i = 1; i <= v3; unint64_t i = (i + 1))
    {
      __float2 v8 = __sincosf_stret(v4 * (float)i);
      float v9 = 0.0;
      if (v3 == i)
      {
        vDSP_Length v10 = v6;
      }
      else
      {
        vDSP_Length v10 = v5;
        if (i)
        {
          float v9 = v6[i];
          vDSP_Length v10 = &v5[i];
        }
      }
      float v11 = *v10;
      float v12 = (float)(v8.__sinval * v9) + (float)(v8.__cosval * *v10);
      if (i)
      {
        if (v3 == i)
        {
          *vDSP_Length v6 = v12;
        }
        else if (v3 > i)
        {
          v5[i] = v12;
          v6[i] = (float)(v11 * (float)-v8.__sinval) + (float)(v8.__cosval * v9);
        }
      }
      else
      {
        float *v5 = v12;
      }
    }
  }
}

float DspLib::FFT::impulseResponsePeakInMilliseconds(DspLib::FFT *this, const DspLib::ComplexSpan *a2, float a3, float *a4)
{
  vDSP_Length v7 = 2 * *((void *)this + 2);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v17, v7);
  std::vector<float>::vector(&__p, v7);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, *((void *)this + 2), (const DSPSplitComplex *)this);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v17, &__Z, (DSPComplex *)__p);
  DspLib::maxmgvi((const float *)__p, (v16 - (unsigned char *)__p) >> 2);
  unint64_t v9 = v8;
  unint64_t v10 = *((void *)this + 2);
  if (a2) {
    *(_DWORD *)a2 = *((_DWORD *)__p + v8);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
  if (__p)
  {
    unint64_t v16 = __p;
    operator delete(__p);
  }
  if (v9 <= v10) {
    int v11 = 0;
  }
  else {
    int v11 = v7;
  }
  float v12 = (float)((float)((int)v9 - v11) * 1000.0) / a3;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v17);
  return v12;
}

void sub_1BB2D8064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(v21 - 64);
  _Unwind_Resume(a1);
}

void DspLib::FFT::interpolate(DspLib *a1, float a2, float a3, float a4, float a5, float a6)
{
  if ((int)a1 >= 1)
  {
    float v11 = DspLib::power2dBSafe(a1, (float)(a3 * a3) + (float)(a2 * a2), 1.0e-24);
    float v13 = DspLib::power2dBSafe(v12, (float)(a5 * a5) + (float)(a4 * a4), 1.0e-24);
    DspLib::dB2Amp(v14, v11 + (float)(a6 * (float)(v13 - v11)));
    float v15 = atan2f(a3, a2);
    float v16 = atan2f(a5, a4);
    *(float *)v17.i32 = v16 - v15;
    v18.i32[0] = 1086918619;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    LODWORD(v2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = vbslq_s8(v19, v18, v17).u32[0];
    if (vabds_f32(v16, v15) <= 3.1416) {
      float v20 = 0.0;
    }
    __sincosf_stret(v15 + (float)(a6 * (float)((float)(v16 - v20) - v15)));
  }
}

void DspLib::FFT::resample(DSPSplitComplex *a1, DspLib *a2, float a3, float a4)
{
  unint64_t realp = (unint64_t)a1[1].realp;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__A, realp, 0);
  float v9 = 0.0;
  DspLib::ComplexVector::operator=(&__A, 0.0);
  float v11 = 0;
  unsigned int v12 = 0;
  float v13 = (float)(a3 / (float)realp) * 0.5;
  float v14 = (float)(a4 / (float)realp) * 0.5;
  unint64_t v40 = 0;
  unint64_t v15 = (unint64_t)a1[1].realp;
  float v16 = 0.0;
  do
  {
    float v17 = (float)(v14 * (float)v12) / v13;
    unint64_t v18 = (unint64_t)v17;
    unint64_t v19 = (unint64_t)v17 + 1;
    if (v19 > v15)
    {
      if ((int)a2 < 1)
      {
        unint64_t v40 = 0;
        float v23 = 0.0;
        float v22 = 0.0;
        if (!v12) {
          goto LABEL_5;
        }
      }
      else
      {
        float v9 = v16 + v9;
        float v20 = fabsf(*a1->imagp);
        __float2 v21 = __sincosf_stret(v9);
        float v22 = v21.__cosval * v20;
        float v23 = v21.__sinval * v20;
        unint64_t v40 = __PAIR64__(LODWORD(v23), LODWORD(v22));
        if (!v12) {
          goto LABEL_5;
        }
      }
      goto LABEL_20;
    }
    float v27 = 0.0;
    if (v15 >= v18)
    {
      if (v15 == v18)
      {
        float v28 = *a1->imagp;
      }
      else
      {
        imagp = a1->realp;
        if (!v18)
        {
          float v28 = *imagp;
          if (v15 != v19)
          {
LABEL_17:
            imagp += v19;
            float v30 = a1->imagp[v19];
            goto LABEL_19;
          }
LABEL_15:
          imagp = a1->imagp;
          goto LABEL_18;
        }
        float v28 = imagp[v18];
        float v27 = a1->imagp[v18];
      }
    }
    else
    {
      float v28 = 0.0;
    }
    if (v15 == v19) {
      goto LABEL_15;
    }
    imagp = a1->realp;
    if (v18 != -1) {
      goto LABEL_17;
    }
LABEL_18:
    float v30 = 0.0;
LABEL_19:
    DspLib::FFT::interpolate(a2, v28, v27, *imagp, v30, v17 - (float)v18);
    float v22 = v31;
    float v23 = v32;
    unint64_t v40 = __PAIR64__(LODWORD(v32), LODWORD(v31));
    float v33 = atan2f(v32, v31);
    float v16 = v33 - v9;
    float v9 = v33;
    if (!v12)
    {
LABEL_5:
      float v24 = DspLib::abs((DspLib *)&v40, v10);
      float v25 = v24 * DspLib::sign((DspLib *)1, *a1->realp);
      uint64_t v26 = __A.realp;
LABEL_23:
      *uint64_t v26 = v25;
      goto LABEL_30;
    }
LABEL_20:
    if (a1[1].realp == v11)
    {
      float v34 = DspLib::abs((DspLib *)&v40, v10);
      float v25 = v34 * DspLib::sign((DspLib *)1, *a1->imagp);
      if (v42 == v11)
      {
        uint64_t v26 = __A.imagp;
        goto LABEL_23;
      }
      if (v42 > v11)
      {
        __A.realp[(void)v11] = v25;
        __A.imagp[(void)v11] = 0.0;
      }
    }
    else if (v42 == v11)
    {
      *__A.imagp = v22;
    }
    else if (v42 > v11)
    {
      __A.realp[(void)v11] = v22;
      __A.imagp[(void)v11] = v23;
    }
LABEL_30:
    unint64_t v15 = (unint64_t)a1[1].realp;
    float v11 = (float *)++v12;
  }
  while (v15 >= v12);
  if (a2 == 2)
  {
    float v35 = atan2f(*((float *)&v40 + 1), *(float *)&v40);
    float v36 = (float)(v35 / 3.1416) - floorf(v35 / 3.1416);
    DspLib::FFT::addDelay((DspLib::FFT *)&__A, v37, v36);
    __float2 v38 = __sincosf_stret(v36 * 3.1416);
    if (v42) {
      p_imagp = (DSPSplitComplex *)&__A.imagp;
    }
    else {
      p_imagp = &__A;
    }
    *p_imagp->unint64_t realp = (float)(*((float *)&v40 + 1) * v38.__sinval) + (float)(*(float *)&v40 * v38.__cosval);
  }
  DspLib::ComplexSpan::operator=(a1, &__A);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__A);
}

void sub_1BB2D84B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va);
  _Unwind_Resume(a1);
}

unint64_t DspLib::FFT::resampleFIRfilterSize(DspLib::FFT *this, float a2, float a3)
{
  return (unint64_t)(float)((float)((float)((float)(unint64_t)this * a3) / a2) + 1.0);
}

vDSP_Length DspLib::FFT::resampleFIRfilter(void *a1, unint64_t a2, float *a3, float a4, float a5, uint64_t a6, DspLib *a7)
{
  float v13 = (float)((float)a2 * a5) / a4;
  vDSP_Length v14 = (unint64_t)(float)(v13 + 1.0);
  if (a2 <= v14) {
    unint64_t v15 = (unint64_t)(float)(v13 + 1.0);
  }
  else {
    unint64_t v15 = a2;
  }
  float v16 = log10f((float)v15);
  if (a2)
  {
    if (v14)
    {
      unint64_t v17 = vcvtas_u32_f32(v16 / 0.30103) + 3;
      if (v17)
      {
        unint64_t v18 = (1 << v17);
        std::vector<float>::vector(&v24, v18);
        DspLib::clear((float *)v24, ((char *)v25 - (char *)v24) >> 2);
        DspLib::copy(a1, a2, v24);
        DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, v18 >> 1, 0);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v22, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v22, v24, ((char *)v25 - (char *)v24) >> 2, &__Z);
        DspLib::FFT::resample(&__Z, a7, a4, a5);
        std::vector<float>::vector(__p, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v20, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v20, &__Z, (DSPComplex *)__p[0]);
        DspLib::multiply((const float *)__p[0], v14, a3, 0.5 / (float)v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v20);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)v22);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
        if (v24)
        {
          float v25 = v24;
          operator delete(v24);
        }
      }
    }
  }
  return v14;
}

void sub_1BB2D86A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)&a14);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a16);
  unint64_t v18 = *(void **)(v16 - 88);
  if (v18)
  {
    *(void *)(v16 - 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void DspLib::FFT::frequencyBinIndex(DspLib::FFT *this@<X0>, float a2@<S0>, float a3@<S1>, double a4@<D2>, unint64_t a5@<X1>, unint64_t **a6@<X8>)
{
  float v9 = a4 / (double)(unint64_t)this;
  unint64_t v10 = vcvtas_u32_f32((float)(a3 - a2) / (float)((float)a5 * v9));
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<unsigned long>::resize((uint64_t)a6, v10);
  if (v10)
  {
    unint64_t v11 = vcvtas_u32_f32(a2 / v9);
    unsigned int v12 = *a6;
    do
    {
      *v12++ = v11;
      v11 += a5;
      --v10;
    }
    while (v10);
  }
}

void sub_1BB2D879C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double DspLib::FFT::Filterbank::latencySamples(DspLib::FFT::Filterbank *this)
{
  return 0.0;
}

uint64_t DspLib::AlgorithmBase::numStatus(DspLib::AlgorithmBase *this)
{
  return 0;
}

vDSP_Length *DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  unint64_t v8 = DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(a1, a3);
  _DWORD v8[2] = a4;
  _OWORD v8[3] = a2;
  v8[4] = a3;
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[9] = 0;
  std::vector<float>::resize((uint64_t)(v8 + 5), *v8 + 15);
  float v9 = (float *)(a1[5] + (-*((unsigned char *)a1 + 40) & 0x3C));
  vDSP_Length v10 = *a1;
  a1[8] = (vDSP_Length)v9;
  a1[9] = v10;
  DspLib::clear(v9, v10);
  return a1;
}

void sub_1BB2D8854(_Unwind_Exception *a1)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(v1);
  _Unwind_Resume(a1);
}

vDSP_Length *DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(vDSP_Length *a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  unint64_t v8 = DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(a1, a3);
  _DWORD v8[2] = a4;
  _OWORD v8[3] = a2;
  v8[4] = a3;
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[9] = 0;
  std::vector<float>::resize((uint64_t)(v8 + 5), *v8 + 15);
  float v9 = (float *)(a1[5] + (-*((unsigned char *)a1 + 40) & 0x3C));
  vDSP_Length v10 = *a1;
  a1[8] = (vDSP_Length)v9;
  a1[9] = v10;
  DspLib::clear(v9, v10);
  return a1;
}

void sub_1BB2D8904(_Unwind_Exception *a1)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(v1);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedInverseSTFT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (DspLib::FFT::InverseSTFT *)**a1;
  if (v2)
  {
    float v4 = (DspLib::FFT::InverseSTFT *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v4 = (DspLib::FFT::InverseSTFT *)((char *)v4 - 96);
        DspLib::FFT::InverseSTFT::~InverseSTFT(v4);
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DspLib::FFT::BufferedForwardSTFT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (DspLib::FFT::BufferedForwardSTFT *)**a1;
  if (v2)
  {
    float v4 = (DspLib::FFT::BufferedForwardSTFT *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v4 = (DspLib::FFT::BufferedForwardSTFT *)((char *)v4 - 104);
        DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v4);
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DspLib::ComplexVector>::__assign_with_size[abi:ne180100]<DspLib::ComplexVector*,DspLib::ComplexVector*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  float v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<DspLib::ComplexVector>::__vdeallocate((void **)a1);
    if (a4 > 0x333333333333333) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<DspLib::ComplexVector>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v16 - 80));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1BB2D8B90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BB2D8B98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<DspLib::ComplexVector>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    float v4 = v1;
    if (v3 != v1)
    {
      do
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 80));
      while (v3 != v1);
      float v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<DspLib::ComplexVector>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a4 + v7), (const DspLib::ComplexVector *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BB2D8CB4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      DspLib::ComplexVector::operator=(a3, v4);
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

vDSP_Length *std::vector<DspLib::FFT::BufferedForwardSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  float v5 = *(vDSP_Length **)(a1 + 8);
  float result = DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(v5, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  *(void *)(a1 + 8) = v5 + 13;
  return result;
}

void sub_1BB2D8D8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::FFT::BufferedForwardSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t *a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x276276276276276) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x13B13B13B13B13BLL) {
    unint64_t v13 = 0x276276276276276;
  }
  else {
    unint64_t v13 = v7;
  }
  __float2 v21 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = (vDSP_Length *)&v14[104 * v6];
  unint64_t v19 = v18;
  float v20 = &v14[104 * v13];
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(v18, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  unint64_t v19 = v18 + 13;
  std::vector<DspLib::FFT::BufferedForwardSTFT>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1BB2D8EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedForwardSTFT>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedForwardSTFT>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedForwardSTFT>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = *(void *)(a3 + v7 - 96);
      *(void *)(v8 - 104) = *(void *)(a3 + v7 - 104);
      *(void *)(v8 - 96) = v10;
      *(void *)(v9 - 96) = 0;
      uint64_t v11 = *(void *)(a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = v11;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(_OWORD *)(v8 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a3 + v7 - 40);
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      *(__n128 *)(v8 - 24) = result;
      v7 -= 104;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT((DspLib::FFT::BufferedForwardSTFT *)(i - 104));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

vDSP_Length *std::vector<DspLib::FFT::BufferedInverseSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5 = *(vDSP_Length **)(a1 + 8);
  __n128 result = DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT(v5, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  *(void *)(a1 + 8) = v5 + 12;
  return result;
}

void sub_1BB2D9074(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::FFT::BufferedInverseSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t *a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 5);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x155555555555555) {
    unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v7;
  }
  __float2 v21 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = (vDSP_Length *)&v14[96 * v6];
  unint64_t v19 = v18;
  float v20 = &v14[96 * v13];
  DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT(v18, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  unint64_t v19 = v18 + 12;
  std::vector<DspLib::FFT::BufferedInverseSTFT>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1BB2D9190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedInverseSTFT>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedInverseSTFT>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedInverseSTFT>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = *(void *)(a3 + v7 - 88);
      *(void *)(v8 - 96) = *(void *)(a3 + v7 - 96);
      *(void *)(v8 - 88) = v10;
      *(void *)(v9 - 88) = 0;
      uint64_t v11 = *(void *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = v11;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a3 + v7 - 40);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      uint64_t v13 = *(void *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      *(void *)(v8 - 16) = v13;
      v7 -= 96;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    DspLib::FFT::InverseSTFT::~InverseSTFT((DspLib::FFT::InverseSTFT *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (DspLib::ComplexVector *)&v10[80 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[80 * v9];
  DspLib::ComplexVector::ComplexVector(v14, *a2, 0);
  uint64_t v15 = (DspLib::ComplexVector *)((char *)v14 + 80);
  std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BB2D93E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *DspLibChannelOrderForLayout@<X0>(char *result@<X0>, void *a2@<X8>)
{
  if ((int)result <= 8388615)
  {
    if ((int)result > 7995397)
    {
      if ((int)result > 8126469)
      {
        switch(result)
        {
          case 0x7C0006:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            __n128 result = (char *)operator new(0x18uLL);
            uint64_t v3 = result + 24;
            a2[2] = result + 24;
            *((void *)result + 2) = 0x400000006;
            unint64_t v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_D_;
            goto LABEL_53;
          case 0x7E0008:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            __n128 result = (char *)operator new(0x20uLL);
            uint64_t v3 = result + 32;
            a2[2] = result + 32;
            unint64_t v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_A_;
            break;
          case 0x7F0008:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            __n128 result = (char *)operator new(0x20uLL);
            uint64_t v3 = result + 32;
            a2[2] = result + 32;
            unint64_t v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_B_;
            break;
          default:
            goto LABEL_55;
        }
LABEL_51:
        long long v9 = v5[1];
        *(_OWORD *)__n128 result = *v5;
        *((_OWORD *)result + 1) = v9;
        goto LABEL_54;
      }
      if (result == 7995398)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x18uLL);
        uint64_t v3 = result + 24;
        a2[2] = result + 24;
        *((void *)result + 2) = 0x400000003;
        unint64_t v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_B_;
      }
      else
      {
        if (result != 8060934) {
          goto LABEL_55;
        }
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x18uLL);
        uint64_t v3 = result + 24;
        a2[2] = result + 24;
        *((void *)result + 2) = 0x400000006;
        unint64_t v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_C_;
      }
    }
    else
    {
      if ((int)result <= 7405570)
      {
        if (result == 6553601)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          unint64_t v8 = operator new(4uLL);
          *a2 = v8;
          *unint64_t v8 = 3;
          __n128 result = (char *)(v8 + 1);
        }
        else
        {
          if (result != 6619138) {
            goto LABEL_55;
          }
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          uint64_t v6 = operator new(8uLL);
          *a2 = v6;
          *uint64_t v6 = 0x200000001;
          __n128 result = (char *)(v6 + 1);
        }
        a2[1] = result;
        a2[2] = result;
        return result;
      }
      switch(result)
      {
        case 0x710003:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          __n128 result = (char *)operator new(0xCuLL);
          uint64_t v3 = result + 12;
          a2[2] = result + 12;
          *(void *)__n128 result = 0x200000001;
          int v7 = 3;
          goto LABEL_43;
        case 0x750005:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          __n128 result = (char *)operator new(0x14uLL);
          uint64_t v3 = result + 20;
          a2[2] = result + 20;
          *((_DWORD *)result + 4) = 6;
          unint64_t v4 = &_ZGRL29DspLibChannelOrder_Wave_5_0_A_;
          break;
        case 0x790006:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          __n128 result = (char *)operator new(0x18uLL);
          uint64_t v3 = result + 24;
          a2[2] = result + 24;
          *((void *)result + 2) = 0x600000005;
          unint64_t v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_A_;
          break;
        default:
          goto LABEL_55;
      }
    }
LABEL_53:
    *(_OWORD *)__n128 result = *v4;
    goto LABEL_54;
  }
  if ((int)result <= 12189700)
  {
    if ((int)result <= 8650755)
    {
      if (result == 8388616)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x20uLL);
        uint64_t v3 = result + 32;
        a2[2] = result + 32;
        unint64_t v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_C_;
      }
      else
      {
        if (result != 8454152) {
          goto LABEL_55;
        }
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x20uLL);
        uint64_t v3 = result + 32;
        a2[2] = result + 32;
        unint64_t v5 = &_ZGRL37DspLibChannelOrder_Emagic_Default_7_1_;
      }
      goto LABEL_51;
    }
    if (result == 8650756)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 result = (char *)operator new(0x10uLL);
      uint64_t v3 = result + 16;
      a2[2] = result + 16;
      unint64_t v4 = &_ZGRL29DspLibChannelOrder_Wave_4_0_A_;
      goto LABEL_53;
    }
    if (result != 8716291)
    {
      if (result != 12124164) {
        goto LABEL_55;
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 result = (char *)operator new(0x10uLL);
      uint64_t v3 = result + 16;
      a2[2] = result + 16;
      unint64_t v4 = &_ZGRL29DspLibChannelOrder_Wave_4_0_B_;
      goto LABEL_53;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    __n128 result = (char *)operator new(0xCuLL);
    uint64_t v3 = result + 12;
    a2[2] = result + 12;
    *(void *)__n128 result = 0x200000001;
    int v7 = 4;
LABEL_43:
    *((_DWORD *)result + 2) = v7;
    goto LABEL_54;
  }
  if ((int)result > 12386311)
  {
    switch(result)
    {
      case 0xBD0008:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x20uLL);
        uint64_t v3 = result + 32;
        a2[2] = result + 32;
        unint64_t v5 = &_ZGRL27DspLibChannelOrder_WAVE_7_1_;
        break;
      case 0xC0000C:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x30uLL);
        uint64_t v3 = result + 48;
        a2[2] = result + 48;
        *(_OWORD *)__n128 result = _ZGRL30DspLibChannelOrder_Atmos_7_1_4_;
        *((_OWORD *)result + 1) = unk_1BB874650;
        *((_OWORD *)result + 2) = xmmword_1BB874660;
        goto LABEL_54;
      case 0xC20008:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        __n128 result = (char *)operator new(0x20uLL);
        uint64_t v3 = result + 32;
        a2[2] = result + 32;
        unint64_t v5 = &_ZGRL30DspLibChannelOrder_Atmos_5_1_2_;
        break;
      default:
        goto LABEL_55;
    }
    goto LABEL_51;
  }
  switch(result)
  {
    case 0xBA0005:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 result = (char *)operator new(0x14uLL);
      uint64_t v3 = result + 20;
      a2[2] = result + 20;
      *((_DWORD *)result + 4) = 34;
      unint64_t v4 = &_ZGRL29DspLibChannelOrder_Wave_5_0_B_;
      goto LABEL_53;
    case 0xBB0006:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 result = (char *)operator new(0x18uLL);
      uint64_t v3 = result + 24;
      a2[2] = result + 24;
      *((void *)result + 2) = 0x2200000021;
      unint64_t v4 = &_ZGRL29DspLibChannelOrder_Wave_5_1_B_;
      goto LABEL_53;
    case 0xBC0007:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      __n128 result = (char *)operator new(0x1CuLL);
      uint64_t v3 = result + 28;
      a2[2] = result + 28;
      *(_OWORD *)__n128 result = _ZGRL27DspLibChannelOrder_Wave_6_1_;
      *(_OWORD *)(result + 12) = *(long long *)((char *)&_ZGRL27DspLibChannelOrder_Wave_6_1_ + 12);
LABEL_54:
      *a2 = result;
      a2[1] = v3;
      return result;
  }
LABEL_55:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void DspLib_ITU1770_channelWeightsForLayout(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (unsigned __int16)a1;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if ((a1 & 0xFFFF0000) == 0xBE0000)
  {
    std::vector<float>::resize(a3, (unsigned __int16)a1);
    float v6 = 0.0;
    if (a2) {
      float v6 = 1.0;
    }
    DspLib::fill(*(float **)a3, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2, v6);
    **(_DWORD **)a3 = 1065353216;
  }
  else
  {
    DspLibChannelOrderForLayout(a1, &__p);
    int v7 = v13;
    if (v13 != __p)
    {
      std::vector<float>::resize(a3, v4);
      int v7 = __p;
      if (v4)
      {
        uint64_t v8 = 0;
        long long v9 = *(float **)a3;
        do
        {
          uint64_t v10 = 0;
          while (kITU1770ChannelNames[v10] != v7[v8])
          {
            if (++v10 == 17)
            {
              int v11 = 0;
              goto LABEL_13;
            }
          }
          int v11 = kITU1770ChannelWeights[v10];
LABEL_13:
          LODWORD(v9[v8++]) = v11;
        }
        while (v8 != v4);
      }
    }
    if (v7)
    {
      uint64_t v13 = v7;
      operator delete(v7);
    }
  }
}

void sub_1BB2D9A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLibFinalChannelLayout(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1) {
    return 6553601;
  }
  if (a3 == 2) {
    return 6619138;
  }
  if (result != -65536)
  {
    if (a3 == (unsigned __int16)result) {
      return result;
    }
    return a3 | 0xFFFF0000;
  }
  if (a2 == -65536) {
    return a3 | 0xFFFF0000;
  }
  __n128 result = a2;
  if ((unsigned __int16)a2 != a3) {
    return a3 | 0xFFFF0000;
  }
  return result;
}

double DspLib::BassKoenig::Algorithm::Algorithm(DspLib::BassKoenig::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib10BassKoenig10ParametersL8kDefaultE_, 0x45uLL, (uint64_t)&_ZGRN6DspLib10BassKoenig10ParametersL8kMinimumE_, 69, (uint64_t)&_ZGRN6DspLib10BassKoenig10ParametersL8kMaximumE_, 69);
  *(void *)uint64_t v1 = &unk_1F14A7998;
  *(_OWORD *)(v1 + 368) = 0u;
  *(void *)(v1 + 384) = 0x43C8000000000000;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(unsigned char *)(v1 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(void *)(v1 + 488) = 0;
  *(_DWORD *)(v1 + 496) = 0;
  *(void *)(v1 + 504) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_DWORD *)(v1 + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 528) = 730643660;
  *(unsigned char *)(v1 + 532) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(unsigned char *)(v1 + 552) = 0;
  *(_OWORD *)(v1 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(v1 + 576) = 0x43C8000000000000;
  *(void *)(v1 + 68DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 688) = 0;
  *(void *)(v1 + 712) = 0;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_DWORD *)(v1 + 616) = 0;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_DWORD *)(v1 + 672) = 0;
  *(_OWORD *)(v1 + 64DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_DWORD *)(v1 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 730643660;
  *(unsigned char *)(v1 + 724) = 0;
  *(void *)(v1 + 728) = 1;
  *(_DWORD *)(v1 + 736) = 1;
  *(_OWORD *)(v1 + 744) = 0u;
  *(_OWORD *)(v1 + 76DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 776) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 808) = 0;
  *(void *)(v1 + 1344) = 0;
  *(void *)(v1 + 1332) = 0;
  *(_OWORD *)(v1 + 1316) = 0u;
  *(_OWORD *)(v1 + 130DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1284) = 0u;
  *(_DWORD *)(v1 + 1352) = 0;
  *(unsigned char *)(v1 + 84DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v1 + 832) = 0;
  *(_OWORD *)(v1 + 816) = 0u;
  *(unsigned char *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_OWORD *)(v1 + 88DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_OWORD *)(v1 + 864) = 0u;
  *(unsigned char *)(v1 + 1048) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 1193) = 0u;
  *(_OWORD *)(v1 + 1184) = 0u;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_OWORD *)(v1 + 1136) = 0u;
  *(_OWORD *)(v1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1104) = 0u;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_OWORD *)(v1 + 1056) = 0u;
  *(unsigned char *)(v1 + 128DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 1264) = 0u;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 136DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v1 + 1392) = _D1;
  *(_OWORD *)(v1 + 140DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_DWORD *)(v1 + 1416) = 1065353216;
  *(_OWORD *)(v1 + 142DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1436) = 0u;
  *(_DWORD *)(v1 + 1452) = -1;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v1 + 1456) = 0xFFFFFFFFLL;
  return result;
}

uint64_t DspLib::BassKoenig::Algorithm::initialize(DspLib::BassKoenig::Algorithm *this, double a2)
{
  uint64_t v3 = DspLib::AlgorithmBase::initialize(this, 1, a2);
  if (v3)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)this + 98, 1uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 840), 1uLL, *((double *)this + 2), 2uLL);
    DspLib::Biquad::Filter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1048), 1uLL, 3uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 944), 1uLL, *((double *)this + 2), 5uLL);
    uint64_t v4 = (*(uint64_t (**)(DspLib::BassKoenig::Algorithm *))(*(void *)this + 216))(this);
    DspLib::FIR::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1144), *((void **)this + 144), *((void *)this + 147), v4);
    DspLib::Biquad::Filter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1208), 1uLL, 2uLL);
    *((unsigned char *)this + 8) = 1;
  }
  (*(void (**)(DspLib::BassKoenig::Algorithm *))(*(void *)this + 128))(this);
  return v3;
}

void DspLib::BassKoenig::Algorithm::uninitialize(DspLib::BassKoenig::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 840));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 944));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1048));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 98, 0);
  DspLib::FIR::uninitialize((void *)this + 143);
  DspLib::Biquad::Filter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1208));
  DspLib::EnvelopeProcessor::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1280));
  DspLib::RMS::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 344));
  DspLib::RMS::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 536));
  *((void *)this + 41) = *((void *)this + 40);
  *((void *)this + 29) = *((void *)this + 28);
  *((void *)this + 32) = *((void *)this + 31);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 34);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 37);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 170);
  uint64_t v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)*((void *)this + 141);
  uint64_t v3 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)*((void *)this + 140);
  while (v2 != v3)
    std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v2, 0);
  *((void *)this + 141) = v3;
  *((_DWORD *)this + 352) = 0;
  *((_DWORD *)this + 338) = 0;
}

double DspLib::BassKoenig::Algorithm::reset(DspLib::BassKoenig::Algorithm *this)
{
  DspLib::RMS::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 344));
  DspLib::RMS::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 536));
  *((_DWORD *)this + 183) = 0;
  uint64_t v2 = *((void *)this + 98);
  uint64_t v3 = *((void *)this + 99);
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (*(void *)v2 != v4) {
      bzero(*(void **)v2, (v4 - *(void *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v2 += 24;
  }
  *((_DWORD *)this + 202) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 888));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 992));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1096));
  DspLib::clear(*((float **)this + 148), (uint64_t)(*((void *)this + 149) - *((void *)this + 148)) >> 2);
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1256));
  DspLib::EnvelopeProcessor::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1280));
  unint64_t v5 = (DspLib::CircularDelay *)*((void *)this + 170);
  float v6 = (DspLib::CircularDelay *)*((void *)this + 171);
  while (v5 != v6)
  {
    DspLib::CircularDelay::reset(v5);
    unint64_t v5 = (DspLib::CircularDelay *)((char *)v5 + 32);
  }
  int v7 = (uint64_t *)*((void *)this + 140);
  uint64_t v8 = (uint64_t *)*((void *)this + 141);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v9 + 48));
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v9 + 152));
    DspLib::EnvelopeProcessor::reset((DspLib::EnvelopeProcessor *)(v9 + 176));
  }
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 174) = _D0;
  *((_DWORD *)this + 35DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 355) = 0;
  double result = 0.0;
  *((void *)this + 178) = 0;
  *((_DWORD *)this + 359) = 0;
  *((_DWORD *)this + 54) = 0;
  return result;
}

double DspLib::BassKoenig::Algorithm::latencySamples(DspLib::BassKoenig::Algorithm *this)
{
  v2.n128_f64[0] = DspLib::BassKoenig::Algorithm::Algorithm((DspLib::BassKoenig::Algorithm *)v10);
  DspLib::BassKoenig::Algorithm::setParameters((uint64_t)v10, *((void **)this + 4), (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2, v2);
  DspLib::BassKoenig::Algorithm::initialize((DspLib::BassKoenig::Algorithm *)v10, *((double *)this + 2));
  uint64_t v3 = (void *)*((void *)this + 170);
  if (*((void **)this + 171) == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t)(v3[1] - *v3) >> 2;
  }
  std::vector<float>::vector(&__p, (unint64_t)(float)((float)((float)(v4 * (unint64_t)*((unsigned int *)this + 352)) + 64.5) + 200.0));
  DspLib::diracDelta((float *)__p, (v9 - (unsigned char *)__p) >> 2);
  (*(void (**)(void *, void *, int64_t, void *, int64_t))(v10[0] + 160))(v10, __p, (v9 - (unsigned char *)__p) >> 2, __p, (v9 - (unsigned char *)__p) >> 2);
  DspLib::maxmgvi((const float *)__p, (v9 - (unsigned char *)__p) >> 2);
  unint64_t v6 = v5;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  DspLib::BassKoenig::Algorithm::~Algorithm((DspLib::BassKoenig::Algorithm *)v10);
  return (double)v6;
}

void sub_1BB2DA154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  DspLib::BassKoenig::Algorithm::~Algorithm((DspLib::BassKoenig::Algorithm *)&a12);
  _Unwind_Resume(a1);
}

void DspLib::BassKoenig::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    ++*(_DWORD *)(a1 + 216);
    DspLib::BassKoenig::Algorithm::setSystemParameters((DspLib::BassKoenig::Algorithm *)a1);
    float v7 = DspLib::dB2Amp(v6, **(float **)(a1 + 32));
    *(float *)(a1 + 1416) = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(float *)(v8 + 196) > 0.5) {
      *(float *)(a1 + 1416) = -v7;
    }
    *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v8 + 32);
    LODWORD(v4) = vcvtas_u32_f32(*(float *)(v8 + 12));
    float v9 = logf(*(float *)(v8 + 20) / *(float *)(v8 + 16));
    *(float *)(a1 + 1404) = expf(v9 / (float)(v4 - 1));
    unsigned int v10 = vcvtas_u32_f32(*(float *)(v8 + 24));
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1) / v11 + 1;
    std::vector<float>::resize(a1 + 224, v12);
    std::vector<float>::resize(a1 + 248, v12);
    unint64_t v13 = *(unsigned int *)(*(void *)(a1 + 32) + 4);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 840), 1uLL, *(double *)(a1 + 16), 2uLL);
    v13 <<= 32;
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 840, v13, (double *)0x3F3504F300000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 840, v13, (double *)0x3F3504F300000000, 1, 0x41uLL);
    unsigned int v14 = vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 264));
    if (v11 != *(_DWORD *)(a1 + 1408) || v12 != *(_DWORD *)(a1 + 220) || *(_DWORD *)(a1 + 1460) != v14)
    {
      if (v14 < 2)
      {
        DspLib::multiply(DspLib::BassKoenig::kSRCcoeffs, 0x81uLL, v71, (float)v11 * 0.0625);
        *(_DWORD *)(a1 + 728) = v11;
        *(_DWORD *)(a1 + 732) = 0;
        unint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), v11, v24 / v11 + 1);
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 736), (uint64_t)v71, 0x81uLL);
      }
      else if (v11 == 1)
      {
        *(void *)(a1 + 728) = 1;
        uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), 1, v25);
      }
      else
      {
        uint64_t v15 = &DspLib::BassKoenig::kSRC4coeffs;
        uint64_t v16 = 257;
        if (v11 < 9) {
          uint64_t v16 = 129;
        }
        unint64_t v17 = &DspLib::BassKoenig::kSRC16coeffs;
        if (v11 < 9) {
          unint64_t v17 = &DspLib::BassKoenig::kSRC8coeffs;
        }
        if (v11 >= 5) {
          uint64_t v15 = v17;
        }
        else {
          uint64_t v16 = 129;
        }
        if (v11 == 2) {
          vDSP_Length v18 = 65;
        }
        else {
          vDSP_Length v18 = v16;
        }
        if (v11 == 2) {
          unint64_t v19 = &DspLib::BassKoenig::kSRC2coeffs;
        }
        else {
          unint64_t v19 = v15;
        }
        float v20 = (const float *)MEMORY[0x1F4188790](v19);
        float v22 = (char *)&v67 - v21;
        DspLib::multiply(v20, v18, (float *)((char *)&v67 - v21), (float)v11);
        *(_DWORD *)(a1 + 728) = v11;
        *(_DWORD *)(a1 + 732) = 0;
        unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), v11, v23 / v11 + 1);
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 736), (uint64_t)v22, v18);
      }
    }
    double v26 = (double)v11;
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::RMS::initialize((DspLib::RMS *)(a1 + 344), 1u, *(double *)(a1 + 16) / (double)v11);
      DspLib::RMS::setParameters(a1 + 344, 1, 1000.0);
      DspLib::RMS::initialize((DspLib::RMS *)(a1 + 536), 1u, *(double *)(a1 + 16) / (double)v11);
      DspLib::RMS::setParameters(a1 + 536, 1, 1000.0);
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 944), 1uLL, (double)vcvtad_u64_f64(*(double *)(a1 + 16) / v26), 5uLL);
    uint64_t v27 = 0;
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v29 = *(void *)(a1 + 32) + v27;
      float v30 = *(float *)(v29 + 96);
      uint64_t v31 = *(unsigned int *)(v29 + 104);
      unint64_t v32 = ((unint64_t)*(unsigned int *)(v29 + 100) << 32) | 3;
      uint64_t v33 = *(unsigned int *)(v29 + 108);
      if (v30 < 0.5) {
        uint64_t v31 = 0;
      }
      DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 944, v32, (double *)(v31 | (v33 << 32)), i, 0x41uLL);
      v27 += 16;
    }
    for (uint64_t j = 0; j != 40; j += 20)
    {
      float v35 = &v70[j];
      *(_DWORD *)float v35 = 1065353216;
      *(void *)(v35 + 12) = 0;
      *(void *)(v35 + 4) = 0;
    }
    for (uint64_t k = 0; k != 15; k += 5)
    {
      uint64_t v37 = &v71[k];
      *uint64_t v37 = 1.0;
      *(void *)(v37 + 3) = 0;
      *(void *)(v37 + 1) = 0;
    }
    double v38 = *(double *)(a1 + 16) / v26;
    uint64_t v39 = *(float **)(a1 + 32);
    uint64_t v40 = (uint64_t)(*(void *)(a1 + 40) - (void)v39) >> 2;
    float v41 = v38;
    if (vcvtas_u32_f32(v39[66])) {
      DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsImproved(v39, v41, v40, (uint64_t)v70, 2, (uint64_t)v71, 3);
    }
    else {
      DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsLegacy(v39, v41, v40, (uint64_t)v70, 2, (uint64_t)v71, 3);
    }
    *(_DWORD *)(a1 + 1412) = vcvtad_u64_f64(v38);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 1048), 1uLL, 3uLL);
    DspLib::Biquad::Filter::setCoefficients(a1 + 1048, (uint64_t)v71, 3, 0, 0x41uLL);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 1208), 1uLL, 2uLL);
    DspLib::Biquad::Filter::setCoefficients(a1 + 1208, (uint64_t)v70, 2, 0, 0x41uLL);
    uint64_t v42 = *(void *)(a1 + 32);
    int v43 = 0;
    if (*(float *)(v42 + 48) >= 0.5 && *(float *)(v42 + 56) < 0.5) {
      int v43 = *(_DWORD *)(v42 + 36);
    }
    *(_DWORD *)(a1 + 1384) = v43;
    if (*(_DWORD *)(a1 + 1352) != v4)
    {
      std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::resize(a1 + 1120, v4);
      if (*(void *)(a1 + 1120) != *(void *)(a1 + 1128)) {
        operator new();
      }
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 272));
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 296));
      std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 272), v4);
      uint64_t v63 = *(void *)(a1 + 272);
      uint64_t v64 = *(void *)(a1 + 280);
      while (v63 != v64)
      {
        std::vector<float>::resize(v63, v12);
        v63 += 24;
      }
      std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 296), v4);
      uint64_t v65 = *(void *)(a1 + 296);
      uint64_t v66 = *(void *)(a1 + 304);
      while (v65 != v66)
      {
        std::vector<float>::resize(v65, v12);
        v65 += 24;
      }
    }
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 272), v4);
    uint64_t v44 = *(void *)(a1 + 272);
    uint64_t v45 = *(void *)(a1 + 280);
    while (v44 != v45)
    {
      std::vector<float>::resize(v44, v12);
      v44 += 24;
    }
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 296), v4);
    uint64_t v46 = *(void *)(a1 + 296);
    uint64_t v47 = *(void *)(a1 + 304);
    while (v46 != v47)
    {
      std::vector<float>::resize(v46, v12);
      v46 += 24;
    }
    int v48 = *(uint64_t **)(a1 + 1120);
    float v49 = *(uint64_t **)(a1 + 1128);
    if (v48 != v49)
    {
      float v50 = *(float *)(*(void *)(a1 + 32) + 16);
      double v51 = (double)vcvtad_u64_f64(*(double *)(a1 + 16) / v26);
      do
      {
        float v52 = (DspLib::Biquad::ParametricFilter *)*v48;
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*v48 + 104), 1uLL, 2uLL);
        DspLib::Biquad::ParametricFilter::initialize(v52, 1uLL, v51, 2uLL);
        DspLib::BassKoenig::Algorithm::HighpassChannel::setCoefficients(*v48, *(float *)(*(void *)(a1 + 32) + 40) >= 0.5, (uint64_t)v70, 2, v50, *(float *)(*(void *)(a1 + 32) + 60));
        float v50 = v50 * *(float *)(a1 + 1404);
        ++v48;
      }
      while (v48 != v49);
    }
    unsigned int v53 = vcvtad_u64_f64(*(double *)(a1 + 16) * (*(float *)(*(void *)(a1 + 32) + 28) * 0.001) / v26);
    if (v53 <= 1) {
      unint64_t v54 = 1;
    }
    else {
      unint64_t v54 = v53;
    }
    if (*(_DWORD *)(a1 + 1352) != v4
      || (uint64_t v55 = *(void **)(a1 + 1360), *(void **)(a1 + 1368) == v55)
      || v54 != (uint64_t)(v55[1] - *v55) >> 2)
    {
      std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)(a1 + 1360));
      std::vector<DspLib::CircularDelay>::resize((uint64_t *)(a1 + 1360), v4);
      unsigned int v61 = *(DspLib::CircularDelay **)(a1 + 1360);
      uint64_t v62 = *(DspLib::CircularDelay **)(a1 + 1368);
      while (v61 != v62)
      {
        DspLib::CircularDelay::setLength(v61, v54);
        unsigned int v61 = (DspLib::CircularDelay *)((char *)v61 + 32);
      }
    }
    if (*(void *)(a1 + 1176) != v54)
    {
      std::vector<float>::vector(&v68, v54);
      DspLib::makeRaisedCosineWindow(v68, v69 - v68);
      DspLib::FIR::initialize((DspLib::FIR *)(a1 + 1144), v68, v69 - v68, *(void *)(a1 + 1144));
      DspLib::clear(*(float **)(a1 + 1184), (uint64_t)(*(void *)(a1 + 1192) - *(void *)(a1 + 1184)) >> 2);
      if (v68)
      {
        uint64_t v69 = v68;
        operator delete(v68);
      }
    }
    double v56 = *(double *)(a1 + 16) / v26;
    uint64_t v57 = *(float **)(a1 + 32);
    float v58 = -1.0 / (v56 * v57[44] / 1000.0);
    float v59 = 1.0 - expf(v58);
    if (v59 > 0.102) {
      float v59 = 0.102;
    }
    *(float *)(a1 + 1444) = v59;
    float v60 = -1.0 / (v56 * v57[45] / 1000.0);
    *(float *)(a1 + 1448) = 1.0 - expf(v60);
    if (vcvtas_u32_f32(v57[11]))
    {
      if (*(void *)(a1 + 328) == *(void *)(a1 + 320))
      {
        std::vector<float>::resize(a1 + 320, 0x1F5uLL);
        DspLib::ramp(*(float **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2, 1, 10.0, 2000.0);
      }
    }
    else
    {
      *(void *)(a1 + 328) = *(void *)(a1 + 320);
    }
    *(_DWORD *)(a1 + 1352) = v4;
    *(_DWORD *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
    *(_DWORD *)(a1 + 1408) = v11;
    *(_DWORD *)(a1 + 146DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v14;
  }
}

void sub_1BB2DAB24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::BassKoenig::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 24) != a2)
  {
    __n128 v2 = (double *)this;
    *(unsigned char *)(this + 24) = a2;
    uint64_t v3 = (DspLib::RMS *)(this + 344);
    if (a2)
    {
      DspLib::RMS::initialize(v3, 1u, v2[2]);
      DspLib::RMS::initialize((DspLib::RMS *)(v2 + 67), 1u, v2[2]);
      DspLib::EnvelopeProcessor::initialize((DspLib::EnvelopeProcessor *)(v2 + 160), 1u);
    }
    else
    {
      DspLib::RMS::uninitialize(v3);
      DspLib::RMS::uninitialize((DspLib::RMS *)(v2 + 67));
      DspLib::EnvelopeProcessor::uninitialize((DspLib::EnvelopeProcessor *)(v2 + 160));
    }
    unint64_t v4 = *(uint64_t (**)(double *))(*(void *)v2 + 128);
    return v4(v2);
  }
  return this;
}

void DspLib::BassKoenig::Algorithm::setParameter(DspLib::BassKoenig::Algorithm *this, unint64_t a2, float a3)
{
  uint64_t v4 = *((void *)this + 4);
  if ((*((void *)this + 5) - v4) >> 2 <= a2)
  {
    unint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v11, 147);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  *(float *)(v4 + 4 * a2) = a3;
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    *((_DWORD *)this + 349) = 0;
LABEL_12:
    unsigned int v10 = *(void (**)(void))(*(void *)this + 128);
    v10();
    return;
  }
  if (a2 - 59 > 3) {
    goto LABEL_12;
  }
  (*(void (**)(DspLib::BassKoenig::Algorithm *, unint64_t))(*(void *)this + 104))(this, a2);
  uint64_t v8 = *((void *)this + 4);
  float v9 = *(float *)(v8 + 4 * a2);
  if (v7 >= v9) {
    float v7 = *(float *)(v8 + 4 * a2);
  }
  if (v9 >= v6) {
    float v6 = v7;
  }
  *(float *)(v8 + 4 * a2) = v6;

  DspLib::BassKoenig::Algorithm::setSystemParameters(this);
}

void DspLib::BassKoenig::Algorithm::setSystemParameters(DspLib::BassKoenig::Algorithm *this)
{
  uint64_t v2 = 0;
  *((_DWORD *)this + 35DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 363) = -1;
  uint64_t v3 = (float *)*((void *)this + 4);
  uint64_t v4 = 50;
  do
  {
    if (v3[v4] >= 0.5)
    {
      float v5 = v3[v2 + 59];
      float v6 = v3[v4 + 1];
      float v7 = v3[v4 + 2];
      if ((float)(v6 + 5.0) > v7)
      {
        float v6 = v7 + -5.0;
        v3[v4 + 1] = v7 + -5.0;
      }
      float v8 = v3[4];
      float v9 = v8;
      if (v5 >= v6)
      {
        float v9 = v3[5];
        if (v5 <= v7) {
          float v9 = (float)(v8 - (float)((float)((float)(v9 - v8) / (float)(v7 - v6)) * v6))
        }
             + (float)((float)((float)(v9 - v8) / (float)(v7 - v6)) * v5);
      }
      float v10 = logf(v9 / v8);
      float v11 = v10 / logf(*((float *)this + 351));
      unsigned int v12 = *((_DWORD *)this + 338) - 1;
      if (v11 > (float)v12) {
        float v11 = (float)v12;
      }
      if (v11 > *((float *)this + 350))
      {
        *((float *)this + 35DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
        *((_DWORD *)this + 363) = v2;
      }
    }
    ++v2;
    v4 += 3;
  }
  while (v2 != 3);
  if (v3[63] >= 0.5)
  {
    float v13 = v3[62];
    float v14 = v3[64];
    float v15 = v3[65];
    if ((float)(v14 + 5.0) < v15)
    {
      float v15 = v14 + -5.0;
      v3[65] = v14 + -5.0;
    }
    float v16 = v3[4];
    float v17 = v16;
    if (v13 <= v14)
    {
      float v17 = v3[5];
      if (v13 >= v15) {
        float v17 = (float)(v16 - (float)((float)((float)(v17 - v16) / (float)(v15 - v14)) * v14))
      }
            + (float)((float)((float)(v17 - v16) / (float)(v15 - v14)) * v13);
    }
    float v18 = logf(v17 / v16);
    float v19 = v18 / logf(*((float *)this + 351));
    unsigned int v20 = *((_DWORD *)this + 338) - 1;
    if (v19 > (float)v20) {
      float v19 = (float)v20;
    }
    if (v19 > *((float *)this + 350))
    {
      *((float *)this + 35DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v19;
      *((_DWORD *)this + 363) = 3;
    }
  }
}

uint64_t DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsImproved(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v8 = (float)(a1[23] / 10000.0) * (float)(a1[23] / 10000.0);
  if (v8 == 0.0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 786;
LABEL_39:
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v67, v68);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  double v10 = a1[21];
  double v11 = v10 * v10;
  if (v10 * v10 == 0.0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 788;
    goto LABEL_39;
  }
  float v12 = a1[20] / 1000.0;
  if (v12 == 0.0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 793;
    goto LABEL_39;
  }
  double v13 = (float)(a1[22] / 1000.0) / 140002.31 / v8;
  if (v13 == 0.0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 794;
    goto LABEL_39;
  }
  double v14 = (float)(a2 * a2);
  double v15 = a2 * v14;
  double v16 = a1[16] / v11;
  double v17 = (float)(a1[17] / 1000.0) / v11;
  double v18 = 1.0 / v13 + (float)(1.0 / v12);
  double v19 = (float)(a1[18] / 1000.0);
  double v20 = v17 * v19;
  double v21 = a1[19];
  double v22 = v17 * v21 + v16 * v19;
  double v23 = v17 * v18 + v16 * v21 + 1.0;
  double v24 = v16 * v18;
  double v25 = v23 * (float)(a2 + a2);
  double v26 = v14 * 4.0;
  double v27 = v24 + v25 + v14 * 4.0 * v22 + v15 * 8.0 * v20;
  if (v27 == 0.0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 811;
    goto LABEL_39;
  }
  double v32 = v24 - v25 + v26 * v22 - v15 * 8.0 * v20;
  double v33 = v15 * 24.0;
  double v34 = 1.0 / v27;
  double v35 = (v25 + v24 * 3.0 - v26 * v22 - v33 * v20) * (1.0 / v27);
  double v36 = (-(v25 - v24 * 3.0) - v26 * v22 + v33 * v20) * (1.0 / v27);
  double v37 = (v36 - v35 * v35 / 3.0) * ((v36 - v35 * v35 / 3.0) * (v36 - v35 * v35 / 3.0));
  double v38 = v32 * (1.0 / v27) + v35 * (v35 * (v35 + v35)) / 27.0 - v35 * v36 / 3.0;
  double v39 = sqrt(fabs(v37 / 27.0 + v38 * v38 * 0.25));
  double v40 = v38 * -0.5;
  double v41 = v38 * -0.5 + v39;
  double v42 = 0.0;
  double v43 = 0.0;
  if (v41 != 0.0)
  {
    if (v41 < 0.0)
    {
      long double v44 = log(-v41);
      double v43 = -exp(v44 * 0.333333343);
    }
    else
    {
      long double v45 = log(v41);
      double v43 = exp(v45 * 0.333333343);
    }
  }
  double v46 = v40 - v39;
  if (v40 - v39 != 0.0)
  {
    if (v40 - v39 < 0.0)
    {
      long double v47 = log(-v46);
      double v42 = -exp(v47 * 0.333333343);
    }
    else
    {
      long double v48 = log(v46);
      double v42 = exp(v48 * 0.333333343);
    }
  }
  double v49 = v35 / -3.0 + v43 + v42;
  double v50 = v35 / -3.0 - (v43 + v42) * 0.5;
  double v51 = 0.9999;
  if (v49 <= 0.9999) {
    double v51 = v35 / -3.0 + v43 + v42;
  }
  if (v49 >= -0.9999) {
    double v52 = v51;
  }
  else {
    double v52 = -0.9999;
  }
  double v53 = 0.999;
  if (v50 <= 0.999) {
    double v53 = v35 / -3.0 - (v43 + v42) * 0.5;
  }
  if (v50 >= -0.9999) {
    double v54 = v53;
  }
  else {
    double v54 = -0.9999;
  }
  float v55 = v34 / v10 * 1000.0 * 8.0;
  float v56 = v52;
  *(float *)a4 = v55;
  *(void *)(a4 + 4) = 0;
  *(float *)(a4 + 12) = -v56;
  float v57 = v54 * -2.0;
  float v58 = (v43 - v42) * 1.73205081 * 0.5 * ((v43 - v42) * 1.73205081 * 0.5) + v54 * v54;
  *(_OWORD *)(a4 + 16) = xmmword_1BB873F80;
  *(float *)(a4 + 32) = v57;
  *(float *)(a4 + 36) = v58;
  *(_DWORD *)a6 = 1065353216;
  *(float *)(a6 + 4) = -v56;
  *(void *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 16) = 0;
  float v59 = *(float *)(a4 + 32);
  float v60 = *(float *)(a4 + 36);
  *(_DWORD *)(a6 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *(float *)(a6 + 24) = v59;
  *(float *)(a6 + 28) = v60;
  *(void *)(a6 + 32) = 0;
  double v61 = *(float *)a4
      / (*(float *)(a4 + 32) + 1.0 + *(float *)(a4 + 36))
      / (*(float *)(a4 + 12) + 1.0)
      / (float)(1.0 - v56)
      / (float)((float)(v59 + 1.0) + v60);
  double v62 = v61 * DspLib::dB2Amp((DspLib *)a1, a1[67]);
  double v63 = 100000000.0;
  if (v62 <= 100000000.0) {
    double v63 = v62;
  }
  if (v62 >= 1.0) {
    double v64 = v63;
  }
  else {
    double v64 = 1.0;
  }
  *(float32x2_t *)a6 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)a6), v64));
  float v65 = v64 * *(float *)(a6 + 8);
  *(float *)(a6 + 8) = v65;
  DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, a1[68], 45.0, a2, (uint64_t)&v69);
  *(_OWORD *)(a6 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v69;
  *(_DWORD *)(a6 + 56) = v70;
  if ((DspLib::Biquad::validate((long long *)a4, a5) & 1) == 0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 901;
    goto LABEL_39;
  }
  uint64_t result = DspLib::Biquad::validate((long long *)a6, a7);
  if ((result & 1) == 0)
  {
    uint64_t v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    int v68 = 902;
    goto LABEL_39;
  }
  return result;
}

uint64_t DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsLegacy(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v7 = (float)(a1[23] / 10000.0) * (float)(a1[23] / 10000.0);
  if (v7 == 0.0)
  {
    int v59 = 641;
LABEL_29:
    float v60 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v60, v59);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  float v8 = a1[21];
  if ((float)(v8 * v8) == 0.0)
  {
    int v59 = 643;
    goto LABEL_29;
  }
  float v9 = a1[20] / 1000.0;
  if (v9 == 0.0)
  {
    int v59 = 648;
    goto LABEL_29;
  }
  double v10 = (float)(a1[22] / 1000.0) / 140002.31 / v7;
  if (v10 == 0.0)
  {
    int v59 = 649;
    goto LABEL_29;
  }
  double v11 = (float)(v8 * v8);
  double v12 = (float)(a2 * a2);
  double v13 = a2;
  double v14 = a2 * v12;
  double v15 = a1[16] / v11;
  double v16 = (float)(a1[17] / 1000.0) / v11;
  double v17 = 1.0 / v9 + 1.0 / v10;
  double v18 = (float)(a1[18] / 1000.0);
  double v19 = v16 * v18;
  double v20 = a1[19];
  double v21 = v16 * v20 + v15 * v18;
  double v22 = v16 * v17 + v15 * v20 + 1.0;
  double v23 = v15 * v17;
  double v24 = (v13 + v13) * v22;
  double v25 = v12 * 4.0;
  double v26 = v23 + v24 + v12 * 4.0 * v21 + v14 * 8.0 * v19;
  if (v26 == 0.0)
  {
    int v59 = 683;
    goto LABEL_29;
  }
  double v31 = v23 - v24 + v25 * v21 - v14 * 8.0 * v19;
  double v32 = v14 * 24.0;
  double v33 = 1.0 / v26;
  double v34 = (v24 + v23 * 3.0 - v25 * v21 - v32 * v19) * (1.0 / v26);
  double v35 = (-(v24 - v23 * 3.0) - v25 * v21 + v32 * v19) * (1.0 / v26);
  double v36 = (v35 - v34 * v34 / 3.0) * ((v35 - v34 * v34 / 3.0) * (v35 - v34 * v34 / 3.0));
  double v37 = v31 * (1.0 / v26) + v34 * (v34 * (v34 + v34)) / 27.0 - v34 * v35 / 3.0;
  double v38 = sqrt(fabs(v36 / 27.0 + v37 * v37 * 0.25));
  double v39 = v37 * -0.5;
  double v40 = v37 * -0.5 + v38;
  double v41 = 0.0;
  double v42 = 0.0;
  if (v40 != 0.0)
  {
    if (v40 < 0.0)
    {
      long double v43 = log(-v40);
      double v42 = -exp(v43 * 0.333333333);
    }
    else
    {
      long double v44 = log(v40);
      double v42 = exp(v44 * 0.333333333);
    }
  }
  double v45 = v39 - v38;
  if (v39 - v38 != 0.0)
  {
    if (v39 - v38 < 0.0)
    {
      long double v46 = log(-v45);
      double v41 = -exp(v46 * 0.333333333);
    }
    else
    {
      long double v47 = log(v45);
      double v41 = exp(v47 * 0.333333333);
    }
  }
  double v48 = v34 / -3.0 - (v42 + v41) * 0.5;
  double v49 = (v42 - v41) * 1.73205081 * 0.5;
  double v50 = 0.9999;
  if (v48 <= 0.9999) {
    double v50 = v34 / -3.0 - (v42 + v41) * 0.5;
  }
  if (v48 >= -0.9999) {
    double v51 = v50;
  }
  else {
    double v51 = -0.9999;
  }
  float v52 = v34 / -3.0 + v42 + v41;
  float v53 = -v52;
  *(float32x2_t *)a4 = vcvt_f32_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_1BB874690, v33 / v8), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
  *(_DWORD *)(a4 + 8) = 0;
  *(float *)(a4 + 12) = -v52;
  float v54 = v51 * -2.0;
  float v55 = v49 * v49 + v51 * v51;
  *(_OWORD *)(a4 + 16) = xmmword_1BB8746A0;
  *(float *)(a4 + 32) = v54;
  *(float *)(a4 + 36) = v55;
  float v56 = cos(144.513262 / v13) * -1.91600001;
  *(_DWORD *)a6 = 1065353216;
  *(float *)(a6 + 4) = v53;
  *(_DWORD *)(a6 + 8) = 0;
  *(float *)(a6 + 12) = v56;
  *(_DWORD *)(a6 + 16) = 1063973525;
  uint64_t v57 = *(void *)(a4 + 32);
  *(_DWORD *)(a6 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *(void *)(a6 + 24) = v57;
  *(void *)(a6 + 32) = 0;
  *(_DWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::Biquad::kBypassSection;
  if (!DspLib::Biquad::validate((long long *)a4, a5))
  {
    int v59 = 766;
    goto LABEL_29;
  }
  uint64_t result = DspLib::Biquad::validate((long long *)a6, a7);
  if ((result & 1) == 0)
  {
    int v59 = 767;
    goto LABEL_29;
  }
  return result;
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(DspLib::BassKoenig::Algorithm::HighpassChannel ***)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (DspLib::BassKoenig::Algorithm::HighpassChannel **)v6)
        std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v3, 0);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__append((char **)a1, v5);
  }
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::setCoefficients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  unint64_t v10 = ((unint64_t)LODWORD(a5) << 32) | 0xF;
  double v11 = (double *)((unint64_t)LODWORD(a6) << 32);
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1, v10, v11, 0, 0x41uLL);
  if (a2) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = 0x447A000000000017;
  }
  if (a2) {
    uint64_t v13 = (uint64_t)v11;
  }
  else {
    uint64_t v13 = 0x3F80000000000000;
  }
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1, v12, (double *)v13, 1, 0x41uLL);

  DspLib::Biquad::Filter::setCoefficients(a1 + 104, a3, a4, 0, 0x41uLL);
}

void DspLib::BassKoenig::Algorithm::processBlock(uint64_t a1, long long *a2, long long *a3, double a4, double a5)
{
  v82[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 2);
  if (!v5) {
    return;
  }
  float v9 = **(void ***)a3;
  uint64_t v71 = *((void *)a3 + 2);
  if (*(unsigned char *)(a1 + 24))
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 1408);
    float v10 = -1.0
        / (*(double *)(a1 + 16)
         / (double)*(unint64_t *)&a5
         / (double)(unint64_t)v5
         * *(float *)(*(void *)(a1 + 32) + 184)
         / 1000.0);
    float v11 = expf(v10);
    DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    unint64_t v12 = **(void ***)a3;
  }
  else
  {
    float v11 = 0.0;
    unint64_t v12 = v9;
  }
  if (v12 != **(void ***)a2)
  {
    long long v74 = *a2;
    uint64_t v75 = *((void *)a2 + 2);
    long long v72 = *a3;
    uint64_t v73 = *((void *)a3 + 2);
    DspLib::copy(&v74, &v72);
  }
  uint64_t v13 = *(float **)(a1 + 32);
  if (v13[2] >= 0.5 && v13[14] < 0.5)
  {
    DspLib::Biquad::Filter::process((void *)(a1 + 840), (uint64_t)v9, v71, (uint64_t)v9, v71);
    uint64_t v13 = *(float **)(a1 + 32);
  }
  if (vcvtas_u32_f32(v13[6]) < 2)
  {
    double v16 = DspLib::copy(v9, v5, *(void **)(a1 + 224));
    unint64_t v17 = v5;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 224);
    uint64_t v15 = (*(void *)(a1 + 232) - v14) >> 2;
    uint64_t v81 = (float *)v9;
    v82[0] = v14;
    *(void *)&long long v79 = v82;
    *((void *)&v79 + 1) = 1;
    unint64_t v80 = v15;
    uint64_t v76 = (float *)&v81;
    uint64_t v77 = 1;
    uint64_t v78 = v71;
    DspLib::DownSampler::process((unsigned int *)(a1 + 728), &v76, &v79);
    unint64_t v17 = v80;
  }
  double v18 = *(float **)(a1 + 224);
  double v19 = *(float **)(a1 + 248);
  if (*(unsigned char *)(a1 + 24))
  {
    *(float *)(a1 + 1428) = v11 * *(float *)(a1 + 1428);
    DspLib::abs(v18, v17, v19);
    float v20 = DspLib::maxv(v19, v17);
    if (v20 > *(float *)(a1 + 1428)) {
      *(float *)(a1 + 1428) = v20;
    }
    uint64_t v76 = v18;
    *(void *)&long long v79 = &v76;
    *((void *)&v79 + 1) = 1;
    unint64_t v80 = v17;
    DspLib::RMS::process(a1 + 344, &v79, v19, v17);
    *(float *)(a1 + 1432) = *v19;
  }
  if (*(float *)(*(void *)(a1 + 32) + 56) < 0.5)
  {
    DspLib::multiply(v18, v17, *(float *)(a1 + 1416));
    DspLib::Biquad::Filter::process((void *)(a1 + 944), (uint64_t)v18, v17, (uint64_t)v18, v17);
    if (*(float *)(*(void *)(a1 + 32) + 52) >= 0.5) {
      DspLib::Biquad::Filter::process((void *)(a1 + 1048), (uint64_t)v18, v17, (uint64_t)v18, v17);
    }
  }
  long long v69 = v9;
  unint64_t v70 = v5;
  uint64_t v68 = (uint64_t)&v68;
  MEMORY[0x1F4188790](v16);
  double v23 = (float *)((char *)&v68 - v22);
  if (v21 >= 0x200) {
    size_t v24 = 512;
  }
  else {
    size_t v24 = v21;
  }
  bzero((char *)&v68 - v22, v24);
  double v26 = *(uint64_t **)(a1 + 272);
  uint64_t v27 = *(void *)(a1 + 280) - (void)v26;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
  if (v27)
  {
    uint64_t v29 = 0;
    do
    {
      uint64_t v30 = *v26;
      v26 += 3;
      *(void *)&v23[2 * v29++] = v30;
    }
    while (v28 > v29);
  }
  double v32 = *(uint64_t **)(a1 + 296);
  double v31 = *(void **)(a1 + 304);
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v31 - v32);
  MEMORY[0x1F4188790](v25);
  double v36 = (char *)&v68 - v35;
  if (v34 >= 0x200) {
    size_t v37 = 512;
  }
  else {
    size_t v37 = v34;
  }
  bzero((char *)&v68 - v35, v37);
  if (v31 != v32)
  {
    uint64_t v38 = 0;
    do
    {
      uint64_t v39 = *v32;
      v32 += 3;
      *(void *)&v36[8 * v38++] = v39;
    }
    while (v33 > v38);
  }
  unint64_t v40 = v70;
  double v41 = v69;
  if (*(_DWORD *)(a1 + 1352))
  {
    unint64_t v42 = 0;
    do
    {
      DspLib::BassKoenig::Algorithm::HighpassChannel::process(*(void *)(*(void *)(a1 + 1120) + 8 * v42), (uint64_t)v18, v17, *(void *)&v23[2 * v42], v17, *(void *)&v36[8 * v42], v17);
      ++v42;
    }
    while (v42 < *(unsigned int *)(a1 + 1352));
  }
  *(void *)&long long v79 = v23;
  *((void *)&v79 + 1) = v28;
  unint64_t v80 = v17;
  uint64_t v76 = v23;
  uint64_t v77 = v28;
  uint64_t v78 = v17;
  DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 1360), &v79, &v76);
  *(_DWORD *)(a1 + 1396) = 0;
  long double v43 = *(float **)(a1 + 32);
  if (v43[50] > 0.5 || v43[53] > 0.5 || v43[56] > 0.5 || (float v44 = 0.0, v43[63] > 0.5)) {
    float v44 = *(float *)(a1 + 1400);
  }
  if (!v17)
  {
    DspLib::FIR::process(a1 + 1144, v18, 0, v18);
    goto LABEL_69;
  }
  unint64_t v45 = 0;
  uint64_t v46 = (*(_DWORD *)(a1 + 1352) - 1);
  float v47 = *(float *)(a1 + 1388) / *(float *)(a1 + 1384);
  do
  {
    if (v46)
    {
      double v48 = *(uint64_t **)(a1 + 296);
      float v49 = 0.0;
      uint64_t v50 = v46;
      do
      {
        uint64_t v51 = *v48;
        v48 += 3;
        if (*(float *)(v51 + 4 * v45) > v47) {
          float v49 = v49 + 1.0;
        }
        --v50;
      }
      while (v50);
    }
    else
    {
      float v49 = 0.0;
    }
    float v52 = *(float *)(a1 + 1392);
    if (v49 <= v52)
    {
      if (v49 >= v52) {
        goto LABEL_54;
      }
      float v53 = v49 - v52;
      float v54 = *(float *)(a1 + 1448);
    }
    else
    {
      float v53 = v49 - v52;
      float v54 = *(float *)(a1 + 1444);
    }
    float v52 = v52 + (float)(v53 * v54);
    *(float *)(a1 + 1392) = v52;
LABEL_54:
    if (v52 <= v44)
    {
      int v55 = *(_DWORD *)(a1 + 1452);
      float v52 = v44;
    }
    else
    {
      int v55 = -1;
    }
    *(_DWORD *)(a1 + 1456) = v55;
    v18[v45] = v52;
    if (v52 > *(float *)(a1 + 1396)) {
      *(float *)(a1 + 1396) = v52;
    }
    unint64_t v45 = (v45 + 1);
  }
  while (v17 > v45);
  DspLib::FIR::process(a1 + 1144, v18, v17, v18);
  uint64_t v56 = 0;
  uint64_t v57 = *(unsigned int *)(a1 + 1352);
  do
  {
    float v58 = v18[v56];
    v19[v56] = 0.0;
    if (v57)
    {
      uint64_t v59 = 0;
      float v60 = 0.0;
      do
      {
        float v61 = 1.0 - vabds_f32(v58, (float)v59);
        if (v61 < 0.0) {
          float v61 = 0.0;
        }
        float v60 = v60 + (float)(*(float *)(*(void *)&v23[2 * v59] + 4 * v56) * v61);
        v19[v56] = v60;
        ++v59;
      }
      while (v57 != v59);
    }
    ++v56;
  }
  while (v17 > v56);
LABEL_69:
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v76 = v19;
    *(void *)&long long v79 = &v76;
    *((void *)&v79 + 1) = 1;
    unint64_t v80 = v17;
    DspLib::RMS::process(a1 + 536, &v79, v18, v17);
    *(float *)(a1 + 144DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *v18;
  }
  if (vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 24)) < 2)
  {
    DspLib::copy(v19, v17, v41);
  }
  else
  {
    uint64_t v81 = v19;
    v82[0] = v41;
    *(void *)&long long v79 = &v81;
    *((void *)&v79 + 1) = 1;
    unint64_t v80 = v17;
    uint64_t v76 = (float *)v82;
    uint64_t v77 = 1;
    uint64_t v78 = v71;
    DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 736), &v79, &v76);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v40, *(double *)(a1 + 16));
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v62 = 0;
      float v63 = v11 * *(float *)(a1 + 1436);
      *(float *)(a1 + 1436) = v63;
      do
      {
        float v64 = fabsf(*((float *)v41 + v62));
        if (v64 > v63)
        {
          *(float *)(a1 + 1436) = v64;
          float v63 = v64;
        }
        ++v62;
      }
      while (v40 > v62);
      DspLib::Biquad::Filter::process((void *)(a1 + 1208), (uint64_t)v19, v17, (uint64_t)v19, v17);
      DspLib::multiply(v19, v17, *(float *)(*(void *)(a1 + 32) + 36));
      uint64_t v81 = v19;
      v82[0] = v19;
      *(void *)&long long v79 = v82;
      *((void *)&v79 + 1) = 1;
      unint64_t v80 = v17;
      uint64_t v76 = (float *)&v81;
      uint64_t v77 = 1;
      uint64_t v78 = v17;
      DspLib::EnvelopeProcessor::process((unsigned char *)(a1 + 1280), (uint64_t *)&v79, (uint64_t *)&v76);
      float v65 = v11 * *(float *)(a1 + 1420);
      *(float *)(a1 + 142DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v65;
      if (v17)
      {
        uint64_t v66 = 0;
        do
        {
          float v67 = v19[v66];
          if (v67 > v65)
          {
            *(float *)(a1 + 142DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v67;
            float v65 = v67;
          }
          ++v66;
        }
        while (v17 > v66);
      }
      if (v65 > *(float *)(a1 + 1424)) {
        *(float *)(a1 + 1424) = v65;
      }
    }
  }
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  DspLib::Biquad::Filter::process((void *)a1, a2, a3, a4, a5);
  DspLib::Biquad::Filter::process((void *)(a1 + 104), a4, a5, a6, a7);
  uint64_t v14 = a6;
  uint64_t v15 = a6;
  v13[0] = (uint64_t)&v15;
  v13[1] = 1;
  void v13[2] = a7;
  v12[0] = (uint64_t)&v14;
  v12[1] = 1;
  void v12[2] = a7;
  DspLib::EnvelopeProcessor::process((unsigned char *)(a1 + 176), v13, v12);
}

float DspLib::BassKoenig::Algorithm::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = *(float *)(a1 + 1396);
  float v6 = 0.0;
  if (v5 >= 0.0)
  {
    float v6 = *(float *)(v4 + 12);
    if (v6 >= v5) {
      float v6 = *(float *)(a1 + 1396);
    }
  }
  *(float *)(a1 + 1396) = v6;
  *(float *)(a2 + 12) = log10f(*(float *)(a1 + 1428) + 0.000001) * 20.0;
  *(float *)(a2 + 24) = log10f(*(float *)(a1 + 1432) + 1.0e-12) * 10.0;
  *(float *)(a2 + 16) = log10f(*(float *)(a1 + 1436) + 0.000001) * 20.0;
  *(float *)(a2 + 32) = log10f(*(float *)(a1 + 1440) + 1.0e-12) * 10.0;
  *(float *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(float *)(a1 + 1436) * *(float *)(v4 + 36);
  *(float *)(a2 + 28) = sqrtf(*(float *)(a1 + 1440)) * *(float *)(v4 + 36);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 1396);
  float v7 = *(float *)(v4 + 16);
  float v8 = *(float *)(a1 + 1396);
  float v9 = logf(*(float *)(a1 + 1404));
  *(float *)a2 = v7 * expf(v8 * v9);
  float v10 = *(float *)(v4 + 16);
  float v11 = *(float *)(a1 + 1392);
  float v12 = logf(*(float *)(a1 + 1404));
  *(float *)(a2 + 64) = v10 * expf(v11 * v12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 1420);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 1424);
  *(float *)(a2 + 36) = (float)*(unsigned int *)(a1 + 216);
  *(_DWORD *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v4 + 236);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v4 + 240);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(v4 + 244);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 + 248);
  float v13 = *(double *)(a1 + 16);
  *(float *)(a2 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v13;
  float result = (float)*(int *)(a1 + 1456);
  *(float *)(a2 + 68) = result;
  return result;
}

void DspLib::BassKoenig::Algorithm::~Algorithm(DspLib::BassKoenig::Algorithm *this)
{
  DspLib::BassKoenig::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(void *)this = &unk_1F14A7998;
  float v20 = (void **)((char *)this + 1360);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v2 = *((void *)this + 168);
  *((void *)this + 168) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  float v20 = (void **)((char *)this + 1312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v20 = (void **)((char *)this + 1288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 1256));
  uint64_t v3 = (void *)*((void *)this + 154);
  if (v3)
  {
    *((void *)this + 155) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 148);
  if (v4)
  {
    *((void *)this + 149) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 144);
  if (v5)
  {
    *((void *)this + 145) = v5;
    operator delete(v5);
  }
  float v20 = (void **)((char *)this + 1120);
  std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 1096));
  float v6 = (void *)*((void *)this + 134);
  if (v6)
  {
    *((void *)this + 135) = v6;
    operator delete(v6);
  }
  float v20 = (void **)((char *)this + 1024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 992));
  float v7 = (void *)*((void *)this + 121);
  if (v7)
  {
    *((void *)this + 122) = v7;
    operator delete(v7);
  }
  float v20 = (void **)((char *)this + 920);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 888));
  float v8 = (void *)*((void *)this + 108);
  if (v8)
  {
    *((void *)this + 109) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 102);
  if (v9)
  {
    *((void *)this + 103) = v9;
    operator delete(v9);
  }
  float v20 = (void **)((char *)this + 784);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v20 = (void **)((char *)this + 752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v20 = (void **)((char *)this + 696);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v10 = (void *)*((void *)this + 81);
  if (v10)
  {
    *((void *)this + 82) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 78);
  if (v11)
  {
    *((void *)this + 79) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)this + 73);
  if (v12)
  {
    *((void *)this + 74) = v12;
    operator delete(v12);
  }
  float v20 = (void **)((char *)this + 504);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v13 = (void *)*((void *)this + 57);
  if (v13)
  {
    *((void *)this + 58) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 54);
  if (v14)
  {
    *((void *)this + 55) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 49);
  if (v15)
  {
    *((void *)this + 5DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    operator delete(v15);
  }
  double v16 = (void *)*((void *)this + 40);
  if (v16)
  {
    *((void *)this + 41) = v16;
    operator delete(v16);
  }
  float v20 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v20 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  unint64_t v17 = (void *)*((void *)this + 31);
  if (v17)
  {
    *((void *)this + 32) = v17;
    operator delete(v17);
  }
  double v18 = (void *)*((void *)this + 28);
  if (v18)
  {
    *((void *)this + 29) = v18;
    operator delete(v18);
  }
  *(void *)this = &unk_1F14A87D8;
  double v19 = (void *)*((void *)this + 4);
  if (v19)
  {
    *((void *)this + 5) = v19;
    operator delete(v19);
  }
}

uint64_t DspLib::BassKoenig::Algorithm::numStatus(DspLib::BassKoenig::Algorithm *this)
{
  return 18;
}

void DspLib::EnvelopeProcessor::~EnvelopeProcessor(DspLib::EnvelopeProcessor *this)
{
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)**a1;
  if (v2)
  {
    uint64_t v4 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__append(char **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  float v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    float v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      float v8 = *a1;
      float v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    double v23 = v16;
    bzero(v15, 8 * a2);
    unint64_t v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *(void *)float v7 = 0;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      unint64_t v17 = (char *)*((void *)&v22 + 1);
      double v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    float v20 = a1[2];
    a1[2] = v16;
    double v23 = v20;
    uint64_t v21 = v19;
    std::__split_buffer<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100]((DspLib::BassKoenig::Algorithm::HighpassChannel **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

DspLib::BassKoenig::Algorithm::HighpassChannel *std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](DspLib::BassKoenig::Algorithm::HighpassChannel **a1, DspLib::BassKoenig::Algorithm::HighpassChannel *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::BassKoenig::Algorithm::HighpassChannel::~HighpassChannel(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::~HighpassChannel(DspLib::BassKoenig::Algorithm::HighpassChannel *this)
{
  uint64_t v2 = *((void *)this + 30);
  *((void *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  float v5 = (void **)((char *)this + 208);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  float v5 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 152));
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  float v5 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 48));
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

DspLib::BassKoenig::Algorithm::HighpassChannel *DspLib::BassKoenig::Algorithm::HighpassChannel::HighpassChannel(DspLib::BassKoenig::Algorithm::HighpassChannel *this)
{
  *((unsigned char *)this + 104) = 0;
  uint64_t v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 104);
  *(unsigned char *)this = 0;
  *((void *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)((char *)this + 18DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(void *)((char *)this + 228) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((unsigned char *)this + 176) = 0;
  DspLib::Biquad::ParametricFilter::initialize(this, 1uLL, 44100.0, 2uLL);
  DspLib::Biquad::Filter::initialize(v2, 1uLL, 2uLL);
  return this;
}

void sub_1BB2DCAA0(_Unwind_Exception *a1)
{
  DspLib::EnvelopeProcessor::~EnvelopeProcessor((DspLib::EnvelopeProcessor *)(v1 + 176));
  DspLib::Biquad::Filter::~Filter(v2);
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::initialize(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, double a2)
{
  *((double *)this + 1) = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8648), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8488), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8568), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8728), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8808), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8888), 0x200uLL);
  *(unsigned char *)this = 1;

  return DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset(this);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8280));
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8384));
  DspLib::ComplexVector::operator=((char *)this + 8648, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 8728, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 8808, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 8888, 0.0);
  DspLib::ComplexVector::operator=((char *)this + 8488, 0.0);
  uint64_t result = DspLib::ComplexVector::operator=((char *)this + 8568, 0.0);
  *((_DWORD *)this + 11) = 1120403456;
  *((unsigned char *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::uninitialize(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8488), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8568), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8648), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8728), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8808), 0);

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8888), 0);
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setParameters(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, const DspLib::AlgorithmParametersInstance *a2)
{
  float v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 5);
  float v5 = *((double *)this + 1) * 0.0009765625;
  unint64_t v6 = vcvtas_u32_f32(v4 / v5);
  if (v6 >= 0x1FF) {
    unint64_t v6 = 511;
  }
  *((void *)this + 2) = v6;
  uint64_t v7 = DspLib::AlgorithmParametersInstance::group(a2, 3u);
  float v8 = *((double *)this + 1) * 0.001953125;
  *((float *)this + 18) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 8) * 1000.0) * v8) / 1000.0));
  uint64_t v9 = DspLib::AlgorithmParametersInstance::group(a2, 4u);
  float v10 = *((double *)this + 1) * 0.001953125;
  *((float *)this + 19) = expf(-1.0 / (float)((float)((float)(*(float *)v9 * 1000.0) * v10) / 1000.0));
  if (!*((unsigned char *)this + 56))
  {
    *((_DWORD *)this + 16) = *(_DWORD *)(v7 + 4);
    *((_DWORD *)this + 15) = *(_DWORD *)v7;
  }
  float v11 = 1.0;
  if (*(float *)(v7 + 16) >= 0.5) {
    float v11 = -1.0;
  }
  *((float *)this + 17) = v11;
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows(this, v11);
  *((_DWORD *)this + 6) = *(_DWORD *)(v9 + 16);
  *((_DWORD *)this + 7) = *(_DWORD *)(v9 + 20);
  *((unsigned char *)this + 34) = *(float *)(v9 + 4) >= 0.5;
  float v12 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000000);
  if (v12 >= 0.5 && !*((unsigned char *)this + 33)) {
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset(this);
  }
  *((unsigned char *)this + 33) = v12 >= 0.5;
  BOOL v13 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (float *)this + 9, (float *)this + 10, &v13);
  if (!v13) {
    *((_DWORD *)this + 11) = 1120403456;
  }
  *((unsigned char *)this + 48) = 1;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, float a2)
{
  uint64_t v3 = (float *)((char *)this + 84);
  float v4 = *((float *)this + 15) * a2;
  DspLib::makePeriodicHannWindow((_DWORD *)this + 21, 0x400uLL);
  float v5 = DspLib::norm(v3, 0x400uLL);
  DspLib::multiply(v3, 0x400uLL, v4 / v5);
  float v6 = *((float *)this + 16);
  DspLib::makePeriodicHannWindow((_DWORD *)this + 1045, 0x400uLL);
  float v7 = v6 / DspLib::norm((const float *)this + 1045, 0x400uLL);

  DspLib::multiply((float *)this + 1045, 0x400uLL, v7);
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setSpVACalibration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 56) = 1;
  *(int32x2_t *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)a1, *(float *)(a1 + 68));
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::process(uint64_t this, float *a2, float *a3, unint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)this)
  {
    uint64_t v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    int v36 = 142;
LABEL_20:
    this = printf("DSP Sound assertion in %s at line %d\n", v35, v36);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  uint64_t v4 = this;
  if (!*(unsigned char *)(this + 48))
  {
    uint64_t v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    int v36 = 143;
    goto LABEL_20;
  }
  if (a4)
  {
    v39[0] = 0;
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (float *)(this + 36), (float *)(this + 40), v39);
    if (!v39[0]) {
      *(_DWORD *)(v4 + 44) = 1120403456;
    }
    uint64_t v9 = MEMORY[0x1F4188790](v8);
    float v11 = (float *)((char *)&v38[-2] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1F4188790](v9);
    BOOL v13 = (char *)&v38[-2] - v12;
    DspLib::copy(a2, a4, v11);
    DspLib::copy(a3, a4, v13);
    *float v11 = *v11 + 0.000001;
    DspLib::FFT::BufferedForwardSTFT::addInput(v4 + 8280, v11, a4, (DSPSplitComplex *)(v4 + 8808));
    DspLib::FFT::BufferedForwardSTFT::addInput(v4 + 8384, v13, a4, (DSPSplitComplex *)(v4 + 8888));
    if (*(void *)(v4 + 8472))
    {
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8888), (DSPSplitComplex *)(v4 + 8808), (DSPSplitComplex *)(v4 + 8728), v14);
      float v15 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8648, v15);
      DspLib::operator*=(v4 + 8728, 1.0 - v15);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8648), (DSPSplitComplex *)(v4 + 8728));
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8808), (DSPSplitComplex *)(v4 + 8808), (DSPSplitComplex *)(v4 + 8728), v16);
      float v17 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8488, v17);
      DspLib::operator*=(v4 + 8728, 1.0 - v17);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8488), (DSPSplitComplex *)(v4 + 8728));
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8888), (DSPSplitComplex *)(v4 + 8888), (DSPSplitComplex *)(v4 + 8728), v18);
      float v19 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8568, v19);
      DspLib::operator*=(v4 + 8728, 1.0 - v19);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8568), (DSPSplitComplex *)(v4 + 8728));
      if (*(unsigned char *)(v4 + 32))
      {
        *(unsigned char *)(v4 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
        float v20 = DspLib::ComplexSpan::operator[]((void *)(v4 + 8888), *(void *)(v4 + 16));
        int v22 = v21;
        float v23 = DspLib::ComplexSpan::operator[]((void *)(v4 + 8808), *(void *)(v4 + 16));
        float v24 = *(float *)(v4 + 24);
        float v25 = *(float *)(v4 + 28);
        *(float *)uint64_t v39 = v20;
        int v40 = v22;
        *(float *)uint64_t v38 = v23;
        v38[1] = v26;
        float v28 = DspLib::abs((DspLib *)v39, v27) + (float)(v24 * 0.000000001);
        float v31 = v28 / (float)(DspLib::abs((DspLib *)v38, v29) + 0.000000001);
        if (v31 <= v25) {
          float v32 = v31;
        }
        else {
          float v32 = v25;
        }
        if (v31 >= v24) {
          float v33 = v32;
        }
        else {
          float v33 = v24;
        }
        float v34 = v33 + (float)(*(float *)(v4 + 76) * (float)(*(float *)(v4 + 40) - v33));
        *(float *)(v4 + 36) = v33;
        *(float *)(v4 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v34;
        *(float *)(v4 + 44) = vabds_f32(v33, v34);
        DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::takeRdcProcessTimeStamp((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, v30);
      }
      else
      {
        *(unsigned char *)(v4 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      }
    }
    return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeRdc((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, *(float *)(v4 + 36), *(float *)(v4 + 40));
  }
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::status(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)result)
  {
    int v2 = *(_DWORD *)(result + 40);
    float v3 = *(double *)(result + 8) * 0.0009765625;
    *(float *)(a2 + 14DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)*(unint64_t *)(result + 16) * v3;
    if (*(unsigned char *)(result + 80)) {
      float v4 = 1.0;
    }
    else {
      float v4 = 0.0;
    }
    *(_DWORD *)a2 = v2;
    *(float *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(result + 44);
    if (*(unsigned char *)(result + 56)) {
      float v5 = 1.0;
    }
    else {
      float v5 = 0.0;
    }
    *(float *)(a2 + 232) = v5;
    *(_DWORD *)(a2 + 236) = *(_DWORD *)(result + 60);
    *(_DWORD *)(a2 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(result + 64);
  }
  else
  {
    float v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v6, 194);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::coherence(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, DspLibBuffer *a2)
{
  float v3 = (char *)this + 8568;
  float v4 = (char *)this + 8488;
  float v5 = (const DSPSplitComplex *)((char *)this + 8648);
  float v6 = (float *)DspLibBuffer::channel(a2, 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);

  DspLib::FFT::coherence((uint64_t)v3, (uint64_t)v4, v5, v6, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::impedance(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, DSPSplitComplex *__C)
{
  DspLib::ComplexSpan::operator=(__C, (DSPSplitComplex *)((char *)this + 8648));

  return DspLib::FFT::divide(__C, (DSPSplitComplex *)((char *)this + 8488), v4);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::voltagePowerSpectrum(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  return (uint64_t)this + 8568;
}

double DspLib::LoudnessMeter::Algorithm::Algorithm(DspLib::LoudnessMeter::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::LoudnessMeter::Parameters::kDefault, 5uLL, (uint64_t)&DspLib::LoudnessMeter::Parameters::kMinimum, 5, (uint64_t)&DspLib::LoudnessMeter::Parameters::kMaximum, 5);
  *(void *)uint64_t v1 = &unk_1F14A7AB0;
  *(unsigned char *)(v1 + 216) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_DWORD *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_DWORD *)(v1 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = xmmword_1BB875540;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 546) = 0u;
  *(_OWORD *)(v1 + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_DWORD *)(v1 + 564) = -1031012352;
  return result;
}

uint64_t DspLib::LoudnessMeter::Algorithm::initialize(DspLib::LoudnessMeter::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4 && (*(unsigned int (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this))
  {
    unsigned int v5 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 48))(this);
    char v6 = 1;
    if (v5 >= 0xFFFF0000)
    {
      float v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessMeter/dsp/DspLibLoudnessMeter.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v7, 30);
      char v6 = 0;
      ++DspLibDebug::mAssertCounter;
    }
    *((unsigned char *)this + 468) = v6;
    DspLib::LoudnessMeter::Algorithm::configureLKFSPreFilter(this);
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::LoudnessMeter::Algorithm::configureLKFSPreFilter(DspLib::LoudnessMeter::Algorithm *this)
{
  int v2 = (char *)(*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 48))(this);
  DspLib_ITU1770_channelWeightsForLayout(v2, 0, (uint64_t)&v15);
  uint64_t v4 = v15;
  float v3 = v16;
  if ((*(unsigned int (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this) != v3 - v4)
  {
    unsigned int v5 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this);
    std::vector<float>::resize((uint64_t)&v15, v5);
    char v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessMeter/dsp/DspLibLoudnessMeter.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 197);
    ++DspLibDebug::mAssertCounter;
  }
  double v7 = (*(double (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 40))(this);
  DspLib::Biquad::Design::kWeighting(v7, (uint64_t)&v13);
  unsigned int v8 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this);
  DspLib::Biquad::Filter::initialize((DspLib::LoudnessMeter::Algorithm *)((char *)this + 216), v8, 2uLL);
  vDSP_Length v9 = 0;
  long long v11 = v13;
  int v12 = v14;
  while (v9 < (*(unsigned int (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this))
  {
    int v14 = v12;
    long long v13 = v11;
    float v10 = sqrtf(v15[v9]);
    *(float32x2_t *)&long long v13 = vmul_n_f32(*(float32x2_t *)&v11, v10);
    *((float *)&v13 + 2) = v10 * *((float *)&v11 + 2);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 216, (uint64_t)&v13, 2, 0, v9++);
  }
  if (v15)
  {
    double v16 = v15;
    operator delete(v15);
  }
}

void sub_1BB2DD858(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudnessMeter::Algorithm::uninitialize(DspLib::LoudnessMeter::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudnessMeter::Algorithm *)((char *)this + 216));
  *((void *)this + 62) = *((void *)this + 61);
  *((void *)this + 65) = *((void *)this + 64);
  *((void *)this + 68) = *((void *)this + 67);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 42, 0);

  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 49);
}

void DspLib::LoudnessMeter::Algorithm::reset(DspLib::LoudnessMeter::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessMeter::Algorithm *)((char *)this + 264));
  DspLib::clear(*((float **)this + 61), (uint64_t)(*((void *)this + 62) - *((void *)this + 61)) >> 2);
  *(void *)((char *)this + 436) = 0;
  *(void *)((char *)this + 428) = 0;
  *((_DWORD *)this + 111) = 0;
  DspLib::clear(*((float **)this + 67), (uint64_t)(*((void *)this + 68) - *((void *)this + 67)) >> 2);
  int v2 = *((_DWORD *)this + 141);
  *((_DWORD *)this + 112) = v2;
  *((_DWORD *)this + 113) = v2;
  *((_DWORD *)this + 114) = 0;
  uint64_t v3 = *((void *)this + 42);
  uint64_t v4 = *((void *)this + 43);
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (*(void *)v3 != v5) {
      bzero(*(void **)v3, (v5 - *(void *)v3) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v3 += 24;
  }
  *((_DWORD *)this + 9DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
}

void DspLib::LoudnessMeter::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = vcvtas_u32_f32(fmaxf(*(float *)v5, 0.0));
    if (v6 == 3)
    {
      *(_DWORD *)(a1 + 456) = 0;
      uint64_t v7 = *(void *)(a1 + 336);
      uint64_t v8 = *(void *)(a1 + 344);
      while (v7 != v8)
      {
        uint64_t v9 = *(void *)(v7 + 8);
        if (*(void *)v7 != v9) {
          bzero(*(void **)v7, (v9 - *(void *)v7) & 0xFFFFFFFFFFFFFFFCLL);
        }
        v7 += 24;
      }
      *(_DWORD *)(a1 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    }
    else if (!v6)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
      uint64_t v5 = *(void *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 564) = *(_DWORD *)(v5 + 8);
    DspLib::LoudnessMeter::Algorithm::configureAveragingBuffer((DspLib::LoudnessMeter::Algorithm *)a1);
    DspLib::LoudnessMeter::Algorithm::configureTruePeakUpsampler((DspLib::LoudnessMeter::Algorithm *)a1);
    DspLib::LoudnessMeter::Algorithm::configureHistogram((DspLib::LoudnessMeter::Algorithm *)a1, v10);
  }
}

void DspLib::LoudnessMeter::Algorithm::configureAveragingBuffer(DspLib::LoudnessMeter::Algorithm *this)
{
  float v1 = *(float *)(*((void *)this + 4) + 16);
  double v2 = *((double *)this + 2);
  unsigned int v3 = vcvtad_u64_f64(v2 / 10.0);
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  *((unsigned char *)this + 561) = v1 > 0.0;
  *((_DWORD *)this + 104) = v3;
  unsigned int v4 = vcvtad_u64_f64(v2 * 0.400000006);
  *((_DWORD *)this + 105) = v4;
  unsigned int v5 = vcvtad_u64_f64(v2 * 3.0);
  if (v1 <= 0.0) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  std::vector<float>::resize((uint64_t)this + 488, v6);
}

void DspLib::LoudnessMeter::Algorithm::configureTruePeakUpsampler(DspLib::LoudnessMeter::Algorithm *this)
{
  float v2 = *(float *)(*((void *)this + 4) + 4);
  *((unsigned char *)this + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2 > 0.0;
  unsigned int v3 = (uint64_t *)((char *)this + 392);
  if (v2 <= 0.0)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)this + 49, 0);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 42, 0);
  }
  else
  {
    unsigned int v4 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize(v3, v4);
    uint64_t v5 = *((void *)this + 49);
    uint64_t v6 = *((void *)this + 50);
    while (v5 != v6)
    {
      uint64_t v7 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v5, 4 * v7);
      v5 += 24;
    }
    unsigned int v8 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 42, v8);
    uint64_t v9 = (*(uint64_t (**)(DspLib::LoudnessMeter::Algorithm *))(*(void *)this + 216))(this);
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::LoudnessMeter::Algorithm *)((char *)this + 288), 4, v9);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 72, (uint64_t)&DspLib::kTruePeakFIRcoefficients, 0x30uLL);
  }
}

void DspLib::LoudnessMeter::Algorithm::configureHistogram(DspLib::LoudnessMeter::Algorithm *this, unint64_t a2)
{
  uint64_t v3 = *((void *)this + 4);
  float v4 = (float)(*(float *)(v3 + 8) + -10.0) + -0.691;
  *((float *)this + 118) = v4;
  float v5 = *(float *)(v3 + 12);
  *((float *)this + 119) = v5;
  float v6 = v5 - v4;
  LODWORD(a2) = vcvtas_u32_f32((float)(v6 / 0.1) + 1.0);
  *((_DWORD *)this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  *((float *)this + 121) = (float)(1.0 / v6) + 10.0;
  if (a2 != (uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 2)
  {
    std::vector<float>::resize((uint64_t)this + 512, a2);
    DspLib::ramp(*((float **)this + 64), (uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 2, 0, *((float *)this + 118), *((float *)this + 119));
    unsigned int v8 = (float *)*((void *)this + 64);
    for (uint64_t i = (float *)*((void *)this + 65); v8 != i; ++v8)
      *unsigned int v8 = DspLib::dB2Power(v7, *v8 + 0.691);
  }
  unint64_t v10 = *((unsigned int *)this + 120);
  if (v10 != (uint64_t)(*((void *)this + 68) - *((void *)this + 67)) >> 2)
  {
    std::vector<float>::resize((uint64_t)this + 536, v10);
    long long v11 = (float *)*((void *)this + 67);
    vDSP_Length v12 = (uint64_t)(*((void *)this + 68) - (void)v11) >> 2;
    DspLib::clear(v11, v12);
  }
}

void DspLib::LoudnessMeter::Algorithm::processBlock(void *a1, uint64_t a2, long long *a3)
{
  float v5 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (**(void **)a3 != **(void **)a2)
  {
    long long v56 = *(_OWORD *)a2;
    uint64_t v57 = *(void *)(a2 + 16);
    long long v54 = *a3;
    uint64_t v55 = *((void *)a3 + 2);
    a1 = DspLib::copy(&v56, &v54);
  }
  if (*((unsigned char *)v5 + 24)) {
    DspLib::CPUMeasure::start((int8x16_t *)(v5 + 7));
  }
  if (*((unsigned char *)v5 + 468) && vcvtas_u32_f32(*(float *)v5[4]) == 2)
  {
    vDSP_Length v6 = *(void *)(a2 + 16);
    if (*((unsigned char *)v5 + 560))
    {
      MEMORY[0x1F4188790](a1);
      uint64_t v9 = (char *)&v44[-1] - v8;
      if (v7 >= 0x200) {
        size_t v10 = 512;
      }
      else {
        size_t v10 = v7;
      }
      bzero((char *)&v44[-1] - v8, v10);
      long long v11 = (uint64_t *)v5[49];
      uint64_t v12 = v5[50] - (void)v11;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v12)
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = *v11;
          v11 += 3;
          *(void *)&v9[8 * v14++] = v15;
        }
        while (v13 > v14);
      }
      long long v52 = *(_OWORD *)a2;
      uint64_t v53 = *(void *)(a2 + 16);
      v51[0] = v9;
      v51[1] = v13;
      v51[2] = 4 * v6;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)v5 + 72, &v52, v51);
      v50[0] = v9;
      v50[1] = v13;
      v50[2] = 4 * v6;
      float v16 = DspLib::maxMagnitude(v50);
      if (v16 <= *((float *)v5 + 114)) {
        float v16 = *((float *)v5 + 114);
      }
      *((float *)v5 + 114) = v16;
    }
    if (v6 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v6;
    }
    if ((*(unsigned int (**)(void *))(*v5 + 56))(v5) == 1) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    uint64_t v19 = (*(uint64_t (**)(void *))(*v5 + 56))(v5);
    MEMORY[0x1F4188790](v19);
    int v21 = (float *)((char *)&v44[-1] - v20);
    uint64_t v22 = (*(uint64_t (**)(void *))(*v5 + 56))(v5);
    MEMORY[0x1F4188790](v22);
    float v25 = (float **)((char *)&v44[-1] - v24);
    if (v23 >= 0x200) {
      size_t v26 = 512;
    }
    else {
      size_t v26 = v23;
    }
    bzero((char *)&v44[-1] - v24, v26);
    if ((*(unsigned int (**)(void *))(*v5 + 56))(v5))
    {
      unint64_t v27 = 0;
      uint64_t v28 = 4 * v18;
      do
      {
        v25[v27++] = v21;
        int v21 = (float *)((char *)v21 + v28);
      }
      while (v27 < (*(unsigned int (**)(void *))(*v5 + 56))(v5));
    }
    uint64_t v29 = (*(unsigned int (**)(void *))(*v5 + 56))(v5);
    long long v48 = *(_OWORD *)a2;
    uint64_t v49 = *(void *)(a2 + 16);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v29;
    vDSP_Length v47 = v6;
    DspLib::Biquad::Filter::process(v5 + 27, &v48, &v46);
    v45[0] = v25;
    v45[1] = v29;
    v45[2] = v6;
    DspLib::square(v45);
    v44[0] = v25;
    v44[1] = v29;
    v44[2] = v6;
    DspLib::sum((uint64_t)v44, *v25, v6);
    if (v6)
    {
      vDSP_Length v30 = 0;
      int v31 = *((_DWORD *)v5 + 107);
      do
      {
        vDSP_Length v32 = (*((_DWORD *)v5 + 104) - v31);
        if (v6 - v30 >= v32) {
          vDSP_Length v33 = v32;
        }
        else {
          vDSP_Length v33 = v6 - v30;
        }
        DspLib::copy((void *)(v5[62] - 4 * (((uint64_t)(v5[62] - v5[61]) >> 2) - v33)), ((uint64_t)(v5[62] - v5[61]) >> 2) - v33, (void *)v5[61]);
        DspLib::copy(&(*v25)[v30], v33, (void *)(v5[62] - 4 * v33));
        int v31 = *((_DWORD *)v5 + 107) + v33;
        *((_DWORD *)v5 + 107) = v31;
        if (*((_DWORD *)v5 + 104) == v31)
        {
          float v34 = DspLib::sum((const float *)(v5[62] - 4 * *((unsigned int *)v5 + 105)), *((unsigned int *)v5 + 105));
          uint64_t v35 = *((unsigned int *)v5 + 105);
          float v36 = v34 / (float)v35;
          float v37 = (float)(log10f(v36 + 1.0e-12) * 10.0) + -0.691;
          *((float *)v5 + 113) = v37;
          if (*((unsigned char *)v5 + 561))
          {
            uint64_t v38 = (const float *)v5[61];
            uint64_t v39 = (uint64_t)(v5[62] - (void)v38) >> 2;
            float v40 = DspLib::sum(v38, v39 - v35);
            *((float *)v5 + 112) = (float)(log10f((float)((float)(v34 + v40) / (float)(unint64_t)v39) + 1.0e-12)
                                         * 10.0)
                                 + -0.691;
            float v37 = *((float *)v5 + 113);
          }
          if (v37 > *((float *)v5 + 141))
          {
            *((double *)v5 + 54) = *((double *)v5 + 54) + v36;
            ++v5[55];
            float v41 = *((float *)v5 + 118);
            if (v41 > v37) {
              float v37 = *((float *)v5 + 118);
            }
            unsigned int v42 = vcvtas_u32_f32(*((float *)v5 + 121) * (float)(v37 - v41));
            if (*((_DWORD *)v5 + 120) - 1 < v42) {
              unsigned int v42 = *((_DWORD *)v5 + 120) - 1;
            }
            *(float *)(v5[67] + 4 * v42) = *(float *)(v5[67] + 4 * v42) + 1.0;
          }
          int v31 = 0;
          *((_DWORD *)v5 + 107) = 0;
        }
        vDSP_Length v30 = (v33 + v30);
      }
      while (v30 < v6);
    }
  }
  if (*((unsigned char *)v5 + 24)) {
    DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v5 + 7), *((void *)a3 + 2), *((double *)v5 + 2));
  }
}

uint64_t DspLib::LoudnessMeter::Algorithm::numStatus(DspLib::LoudnessMeter::Algorithm *this)
{
  return 4;
}

void DspLib::LoudnessMeter::Algorithm::status(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 452);
  uint64_t v4 = 448;
  if (!*(unsigned char *)(a1 + 561)) {
    uint64_t v4 = 564;
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + v4);
  DspLib::LoudnessMeter::Algorithm::integratedLoudness((DspLib::LoudnessMeter::Algorithm *)a1);
  *(_DWORD *)a2 = v6;
  if (*(unsigned char *)(a1 + 560)) {
    float v7 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 456), 0.000001);
  }
  else {
    float v7 = -120.0;
  }
  *(float *)(a2 + 12) = v7;
}

void DspLib::LoudnessMeter::Algorithm::integratedLoudness(DspLib::LoudnessMeter::Algorithm *this)
{
  unint64_t v2 = *((void *)this + 55);
  if (v2)
  {
    float v3 = log10(*((double *)this + 54) / (double)v2) * 10.0 + -0.690999985 + -10.0;
    float v4 = *((float *)this + 118);
    if (v4 > v3) {
      float v3 = *((float *)this + 118);
    }
    unsigned int v5 = vcvtas_u32_f32(*((float *)this + 121) * (float)(v3 - v4));
    unsigned int v6 = *((_DWORD *)this + 120) - 1;
    if (v6 >= v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v8 = *((void *)this + 67);
    vDSP_Length v9 = ((*((void *)this + 68) - v8) >> 2) - v7;
    float v10 = DspLib::sum((const float *)(v8 + 4 * v7), v9);
    if (v10 > 0.0)
    {
      float v11 = v10;
      uint64_t v12 = *((void *)this + 67);
      if (v9 == -1) {
        vDSP_Length v13 = ((*((void *)this + 68) - v12) >> 2) - v7;
      }
      else {
        vDSP_Length v13 = v9;
      }
      float v14 = DspLib::dotProduct((const float *)(v12 + 4 * v7), v13, (const float *)(*((void *)this + 64) + 4 * v7));
      log10f(v14 / v11);
    }
  }
}

void DspLib::LoudnessMeter::Algorithm::~Algorithm(DspLib::LoudnessMeter::Algorithm *this)
{
  DspLib::LoudnessMeter::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14A7AB0;
  unint64_t v2 = (void *)*((void *)this + 67);
  if (v2)
  {
    *((void *)this + 68) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 64);
  if (v3)
  {
    *((void *)this + 65) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 61);
  if (v4)
  {
    *((void *)this + 62) = v4;
    operator delete(v4);
  }
  uint64_t v8 = (void **)((char *)this + 392);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unsigned int v5 = (void *)*((void *)this + 46);
  if (v5)
  {
    *((void *)this + 47) = v5;
    operator delete(v5);
  }
  uint64_t v8 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 304);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessMeter::Algorithm *)((char *)this + 264));
  unsigned int v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    *((void *)this + 31) = v6;
    operator delete(v6);
  }
  *(void *)this = &unk_1F14A87D8;
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

double DspLib::LoudnessMeter::Algorithm::latencySamples(DspLib::LoudnessMeter::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::LoudnessMeter::Algorithm::meteringIsEnabled(DspLib::LoudnessMeter::Algorithm *this)
{
  return 1;
}

void DspLib::VolumeTaper::Curve::configure(char *__dst, uint64_t a2, int a3, void *__src, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10 = vcvtas_u32_f32(*(float *)a2);
  switch(v10)
  {
    case 2u:
      unint64_t v11 = 0;
      int8x8_t v12 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0xC2C80000C1F00000, *(float32x2_t *)(a2 + 4)), (int8x8_t)0xC2C80000C1F00000, vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a2 + 4), (float32x2_t)1112014848), (int8x8_t)1112014848, *(int8x8_t *)(a2 + 4)));
      do
      {
        float v13 = (float)((float)(*(float *)&v12.i32[1] - *(float *)v12.i32) * 0.125) * (float)(v11 - 8);
        if (*(float *)&v12.i32[1] > *(float *)v12.i32) {
          float v13 = 0.0;
        }
        if (v11 <= 8) {
          float v13 = (float)((float)(v11 - 3) * (float)(*(float *)v12.i32 / 5.0)) - *(float *)v12.i32;
        }
        if (v11 <= 2) {
          float v13 = -70.0 - (float)((float)v11 * (float)((float)(*(float *)v12.i32 + -70.0) / 3.0));
        }
        *(float *)&__dst[4 * v11++] = v13;
      }
      while (v11 != 17);
      break;
    case 1u:
      float v14 = *(float *)(a2 + 4);
      float v15 = 10.0;
      if (v14 <= 10.0) {
        float v15 = *(float *)(a2 + 4);
      }
      if (v14 >= 0.001) {
        float v16 = v15;
      }
      else {
        float v16 = 0.001;
      }
      *(_DWORD *)__dst = -1027080192;
      uint64_t v17 = 0;
      float v18 = expf(v16) + -1.0;
      float v19 = 1.0;
      do
      {
        float v20 = v19 + 1.0;
        float v21 = expf((float)(v16 * v19) * 0.0625);
        *(float *)&__dst[v17 + 4] = DspLib::amp2dBSafe(v22, (float)(v21 + -1.0) / v18, 1.0e-20);
        v17 += 4;
        float v19 = v20;
      }
      while (v17 != 64);
      break;
    case 0u:
      DspLib::copy(__src, a5, __dst);
      break;
  }
  uint64_t v23 = 0;
  float v24 = 0.0;
  do
  {
    float v25 = v24 + 1.0;
    *(float *)&__dst[v23 + 68] = DspLib::elementAtIndexWithInterpolation(a6, a7, v24 * 0.25);
    v23 += 4;
    float v24 = v25;
  }
  while (v23 != 68);

  DspLib::add((const float *)__dst, 0x11uLL, (const float *)__dst + 17, 17, (float *)__dst + 34);
}

float DspLib::VolumeTaper::Curve::gain_dB(DspLib::VolumeTaper::Curve *this, float a2)
{
  float v2 = a2 * 16.0;
  float v3 = *((float *)this + vcvtms_u32_f32(v2) + 34);
  return v3
       + (float)((float)(v2 - (float)floorf(v2)) * (float)(*((float *)this + vcvtps_u32_f32(v2) + 34) - v3));
}

unint64_t DspLib::VolumeTaper::Curve::sliderPositionForGain(DspLib::VolumeTaper::Curve *this, float a2)
{
  uint64_t v2 = 0;
  float v3 = (char *)this + 136;
  while (1)
  {
    float v4 = *(float *)((char *)this + v2 + 136);
    if (v4 >= a2) {
      break;
    }
    v2 += 4;
    if (v2 == 68)
    {
      float v5 = 1.0;
      goto LABEL_8;
    }
  }
  if (v2) {
    float v5 = (float)((float)((float)(a2 - *(float *)((char *)this + v2 + 132))
  }
                       / (float)(v4 - *(float *)((char *)this + v2 + 132)))
               + (float)((v2 - 4) >> 2))
       * 0.0625;
  else {
    float v5 = 0.0;
  }
LABEL_8:
  float v6 = *(float *)&v3[4 * vcvtms_u32_f32(v5 * 16.0)];
  BOOL v7 = vabds_f32(a2, v6+ (float)((float)((float)(v5 * 16.0) - (float)floorf(v5 * 16.0))* (float)(*(float *)&v3[4 * vcvtps_u32_f32(v5 * 16.0)] - v6))) < 1.0;
  float v8 = 0.0;
  if (v7) {
    float v8 = v5;
  }
  return LODWORD(v8) | ((unint64_t)v7 << 32);
}

uint64_t DspLib::VolumeTaper::SlewRateLimiter::configure(uint64_t this, int a2, float a3, float32x2_t a4, float32_t a5, int a6)
{
  if (a2)
  {
    *(unsigned char *)(this + 13) = 1;
    *(unsigned char *)(this + 28) = 1;
    if (*(unsigned __int8 *)(this + 12) != a2) {
      *(unsigned char *)(this + 12) = a2;
    }
  }
  else
  {
    if (!*(unsigned char *)(this + 13))
    {
      *(float *)(this + 16) = a3;
      *(float *)(this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a3;
      *(_DWORD *)(this + 24) = 0;
    }
    *(unsigned char *)(this + 28) = 1;
    if (*(unsigned __int8 *)(this + 12) != a2)
    {
      *(unsigned char *)(this + 12) = a2;
      if ((a2 & 1) == 0)
      {
        *(_DWORD *)(this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(this + 16);
        *(_DWORD *)(this + 24) = 0;
        *(unsigned char *)(this + 28) = 0;
      }
    }
  }
  a4.f32[1] = a5;
  __asm { FMOV            V2.2S, #1.0 }
  double v11 = COERCE_DOUBLE(vdiv_f32(_D2, vdiv_f32(a4, (float32x2_t)vdup_n_s32(0x447A0000u))));
  if (!a6) {
    double v11 = *(double *)&a4;
  }
  *(double *)(this + 4) = v11;
  return this;
}

uint64_t DspLib::VolumeTaper::SlewRateLimiter::setTarget(uint64_t this, float a2)
{
  char v2 = *(unsigned char *)(this + 12);
  if (v2 && (float v3 = *(float *)this, *(float *)this > 0.0))
  {
    if (*(float *)(this + 20) != a2)
    {
      *(float *)(this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
      *(unsigned char *)(this + 28) = 1;
      if (*(float *)(this + 16) <= a2) {
        float v4 = *(float *)(this + 4);
      }
      else {
        float v4 = -*(float *)(this + 8);
      }
      *(float *)(this + 24) = v4 / v3;
    }
  }
  else
  {
    *(float *)(this + 16) = a2;
    *(float *)(this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
    *(_DWORD *)(this + 24) = 0;
    *(unsigned char *)(this + 28) = 1;
  }
  *(unsigned char *)(this + 13) &= v2;
  return this;
}

void DspLib::VolumeTaper::Dezipper::initialize(DspLib::VolumeTaper::Dezipper *this, double a2)
{
  DspLib::Biquad::Filter::initialize(this, 1uLL, 1uLL);
  float v4 = a2;
  DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&DspLib::VolumeTaper::Dezipper::initialize(double)::onePoleSmoother, v4, 0, v5, (uint64_t)v6);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)v6, 1, 0, 0x41uLL);
}

void DspLib::VolumeTaper::Dezipper::process(uint64_t a1, float *__C, vDSP_Length __N, float a4)
{
  DspLib::ramp(__C, __N, 0, *(float *)(a1 + 76), a4);
  DspLib::Biquad::Filter::process((void *)a1, (uint64_t)__C, __N, (uint64_t)__C, __N);
  *(float *)(a1 + 76) = __C[__N - 1];
  float v9 = DspLib::amp2dBSafe(v8, a4, 1.0e-20);
  float v11 = vabds_f32(v9, DspLib::amp2dBSafe(v10, *(float *)(a1 + 76), 1.0e-20));
  *(unsigned char *)(a1 + 72) = v11 < 0.01;
  if (v11 < 0.01) {
    *(float *)(a1 + 76) = a4;
  }
}

uint64_t DspLib::VolumeTaper::Algorithm::initialize(uint64_t **this, uint64_t a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::initialize(this, a2, a3);
  if (v4)
  {
    *((unsigned char *)this + 8) = 1;
    double v5 = ((double (*)(uint64_t **))(*this)[5])(this);
    uint64_t v6 = DspLib::parameterAddress((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, 4);
    int v7 = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, v6)+ 12);
    float v8 = v5;
    *((float *)this + 127) = v8;
    *((_DWORD *)this + 132) = v7;
    *((_DWORD *)this + 131) = v7;
    *((_DWORD *)this + 133) = 0;
    double v9 = ((double (*)(uint64_t **))(*this)[5])(this);
    DspLib::VolumeTaper::Dezipper::initialize((DspLib::VolumeTaper::Dezipper *)(this + 68), v9);
    uint64_t v10 = ((uint64_t (*)(uint64_t **, void))(*this)[32])(this, 0);
    ((void (*)(uint64_t **, uint64_t, void))(*this)[33])(this, v10, 0);
    ((void (*)(uint64_t **))(*this)[17])(this);
  }
  return v4;
}

void DspLib::VolumeTaper::Algorithm::uninitialize(DspLib::VolumeTaper::Algorithm *this)
{
  char v2 = (uint64_t *)*((void *)this + 30);
  float v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::VolumeTaper::Algorithm *)((char *)this + 544));
  *((_DWORD *)this + 127) = -1082130432;
}

void DspLib::VolumeTaper::Algorithm::reset(DspLib::VolumeTaper::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  *((unsigned char *)this + 625) = 0;
  if (*((unsigned char *)this + 520))
  {
    *((_DWORD *)this + 132) = *((_DWORD *)this + 131);
    *((_DWORD *)this + 133) = 0;
    *((unsigned char *)this + 536) = 0;
  }
  float v2 = DspLib::VolumeTaper::Algorithm::targetGain(this);
  DspLib::Biquad::Filter::initializeStates((DspLib::VolumeTaper::Algorithm *)((char *)this + 544), v2);
  *((float *)this + 155) = v2;
  *((unsigned char *)this + 616) = 1;
  *((unsigned char *)this + 296) = 0;
}

float DspLib::VolumeTaper::Algorithm::targetGain(DspLib::VolumeTaper::Algorithm *this)
{
  float v2 = *((float *)this + 131) * 16.0;
  float v3 = *((float *)this + vcvtms_u32_f32(v2) + 110);
  float v4 = DspLib::dB2Amp(this, v3+ (float)((float)(v2 - (float)floorf(v2))* (float)(*((float *)this + vcvtps_u32_f32(v2) + 110) - v3)));
  *((float *)this + 135) = v4;
  float v5 = v4 * *((float *)this + 75);
  float v6 = 0.0;
  if (!*((unsigned char *)this + 625)) {
    float v6 = 1.0;
  }
  return v5 * v6;
}

void DspLib::VolumeTaper::Algorithm::setParameter(uint64_t a1, uint64_t a2, float a3)
{
  DspLib::AlgorithmParametersInstance::setValue((uint64_t *)(a1 + 264), a2, a3);
  if (a2 == 0x400000000)
  {
    DspLib::VolumeTaper::SlewRateLimiter::setTarget(a1 + 508, a3);
    if (!*(unsigned char *)(a1 + 296))
    {
      float v6 = DspLib::VolumeTaper::Algorithm::targetGain((DspLib::VolumeTaper::Algorithm *)a1);
      DspLib::Biquad::Filter::initializeStates((DspLib::Biquad::Filter *)(a1 + 544), v6);
      *(float *)(a1 + 62DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
      *(unsigned char *)(a1 + 616) = 1;
    }
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 256))(a1, 0);
    float v8 = *(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 264);
    v8(a1, v7, 0);
  }
}

uint64_t DspLib::VolumeTaper::Algorithm::setParameters(DspLib::VolumeTaper::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  uint64_t result = (*(uint64_t (**)(DspLib::VolumeTaper::Algorithm *))(*(void *)this + 32))(this);
  if (result)
  {
    float v5 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::VolumeTaper::Algorithm *, void))(*(void *)this + 256))(this, 0);
    uint64_t v6 = DspLib::AlgorithmParametersInstance::group(v5, 0);
    *((float *)this + 75) = DspLib::dB2Amp((DspLib *)v6, *(float *)(v6 + 20));
    BOOL v7 = *(float *)v6 != 0.0;
    *((float *)this + 157) = DspLib::dB2Amp(v8, *(float *)(v6 + 24));
    *((unsigned char *)this + 624) = v7;
    double v9 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::VolumeTaper::Algorithm *, void))(*(void *)this + 256))(this, 0);
    uint64_t v10 = DspLib::AlgorithmParametersInstance::group(v9, 2u);
    float v11 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::VolumeTaper::Algorithm *, void))(*(void *)this + 256))(this, 0);
    int8x8_t v12 = (void *)DspLib::AlgorithmParametersInstance::group(v11, 1u);
    float v13 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::VolumeTaper::Algorithm *, void))(*(void *)this + 256))(this, 0);
    uint64_t v14 = DspLib::AlgorithmParametersInstance::group(v13, 3u);
    DspLib::VolumeTaper::Curve::configure((char *)this + 304, v10, 3, v12, 17, v14, 5);
    v15.i32[0] = *(_DWORD *)(v6 + 8);
    BOOL v16 = *(float *)(v6 + 4) != 0.0;
    float32_t v18 = *(float *)(v6 + 12);
    float v17 = *(float *)(v6 + 16);
    BOOL v19 = *(float *)(v6 + 28) != 0.0;
    return DspLib::VolumeTaper::SlewRateLimiter::configure((uint64_t)this + 508, v16, v17, v15, v18, v19);
  }
  return result;
}

void DspLib::VolumeTaper::Algorithm::processBlock(void *a1, long long *a2, long long *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a1 + 296) = 1;
  unint64_t v3 = *((void *)a2 + 2);
  if (v3)
  {
    uint64_t v6 = a1;
    if (*((unsigned char *)a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 7));
    }
    if (**(void **)a3 != **(void **)a2)
    {
      long long v22 = *a2;
      uint64_t v23 = *((void *)a2 + 2);
      long long v20 = *a3;
      uint64_t v21 = *((void *)a3 + 2);
      a1 = DspLib::copy(&v22, &v20);
    }
    int v7 = *((float *)v6 + 157) >= *((float *)v6 + 135) || *((unsigned char *)v6 + 624) != 0;
    if (*((unsigned __int8 *)v6 + 625) == v7)
    {
      float v8 = v6 + 67;
      if (!*((unsigned char *)v6 + 536) && *((unsigned char *)v6 + 616))
      {
        long long v18 = *a3;
        uint64_t v19 = *((void *)a3 + 2);
        DspLib::multiply((uint64_t *)&v18, *((float *)v6 + 155));
LABEL_19:
        if (*((unsigned char *)v6 + 24)) {
          DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v6 + 7), v3, *((double *)v6 + 2));
        }
        return;
      }
    }
    else
    {
      *((unsigned char *)v6 + 625) = v7;
      float v8 = v6 + 67;
    }
    float v9 = *((float *)v6 + 133);
    if (v9 == 0.0)
    {
      *float v8 = 0;
    }
    else
    {
      *((unsigned char *)v6 + 536) = 1;
      float v10 = *((float *)v6 + 132);
      float v11 = *((float *)v6 + 131);
      float v12 = v11 + (float)(v9 * (float)v3);
      *((float *)v6 + 131) = v12;
      if (((COERCE_UNSIGNED_INT(v10 - v12) ^ COERCE_UNSIGNED_INT(v10 - v11)) & 0x80000000) != 0)
      {
        *((float *)v6 + 131) = v10;
        *((_DWORD *)v6 + 133) = 0;
      }
    }
    MEMORY[0x1F4188790](a1);
    uint64_t v14 = (float *)((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    float v15 = DspLib::VolumeTaper::Algorithm::targetGain((DspLib::VolumeTaper::Algorithm *)v6);
    DspLib::VolumeTaper::Dezipper::process((uint64_t)(v6 + 68), v14, v3, v15);
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    DspLib::multiply(&v16, v14);
    goto LABEL_19;
  }
}

void DspLib::VolumeTaper::Algorithm::status(uint64_t a1, uint64_t a2)
{
  *(float *)a2 = DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 540), 1.0e-20);
  float v4 = 0.0;
  if (*(unsigned char *)(a1 + 536)) {
    float v4 = 1.0;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 524);
  *(float *)(a2 + 8) = v4;
}

void DspLib::VolumeTaper::Algorithm::~Algorithm(DspLib::VolumeTaper::Algorithm *this)
{
  *(void *)this = &unk_1F14A7BC8;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  float v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F14A88D8;
  unint64_t v3 = (void *)*((void *)this + 34);
  if (v3)
  {
    *((void *)this + 35) = v3;
    operator delete(v3);
  }
  float v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(void *)this = &unk_1F14A87D8;
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(void *)this = &unk_1F14A7BC8;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  float v2 = (void *)*((void *)this + 71);
  if (v2)
  {
    *((void *)this + 72) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F14A88D8;
  unint64_t v3 = (void *)*((void *)this + 34);
  if (v3)
  {
    *((void *)this + 35) = v3;
    operator delete(v3);
  }
  float v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(void *)this = &unk_1F14A87D8;
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C185D370](this, 0x10E1C40FC7FE1A2);
}

uint64_t DspLib::VolumeTaper::Algorithm::tailTimeSamples(DspLib::VolumeTaper::Algorithm *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t DspLib::VolumeTaper::Algorithm::numStatus(DspLib::VolumeTaper::Algorithm *this)
{
  return 3;
}

DspLib::ThermalSpeakerProtection::SpeakerModel *DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel(DspLib::ThermalSpeakerProtection::SpeakerModel *this, unsigned int a2)
{
  unint64_t v3 = (float **)std::vector<float>::vector(this, a2);
  DspLib::clear(*v3, (uint64_t)(*((void *)this + 1) - (void)*v3) >> 2);
  *((_DWORD *)this + 6) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 15) = _D0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  return this;
}

void sub_1BB2DF64C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer(DspLib::ThermalSpeakerProtection::SpeakerModel *this, unsigned int a2)
{
  if (a2 != (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2) {
    *((_DWORD *)this + 6) = 0;
  }
  std::vector<float>::resize((uint64_t)this, a2);
  unint64_t v3 = *(float **)this;
  vDSP_Length v4 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;

  DspLib::clear(v3, v4);
}

float DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(uint64_t a1, uint64_t a2, float a3)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 40);
  double v6 = a3;
  long double v7 = exp(-1.0 / (*(float *)(a2 + 16) * 1000.0 * a3 / 1000.0));
  *(long double *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  *(long double *)(a1 + 48) = 1.0 - v7;
  long double v8 = exp(-1.0 / (*(float *)(a2 + 20) * 1000.0 * v6 / 1000.0));
  *(long double *)(a1 + 64) = v8;
  *(long double *)(a1 + 72) = 1.0 - v8;
  *(float *)(a1 + 32) = 1.0 / *(float *)(a2 + 4);
  *(float *)(a1 + 84) = 1.0 - expf(-4.6052 / (float)((float)(*(float *)(a2 + 32) * a3) / 1000.0));
  float result = 1.0 - expf(-4.6052 / (float)((float)(*(float *)(a2 + 36) * a3) / 1000.0));
  *(float *)(a1 + 88) = result;
  return result;
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::doCalculations(DspLib::ThermalSpeakerProtection::SpeakerModel *this, const DspLib::ThermalSpeakerProtection::SpeakerModel *a2)
{
  unint64_t v3 = *(const float **)this;
  uint64_t v5 = *((void *)this + 1) - (void)v3;
  if (!v5) {
    goto LABEL_15;
  }
  float v7 = DspLib::rms(v3, v5 >> 2) * *((float *)this + 7);
  float v8 = (float)(v7 * v7) * *((float *)this + 8);
  *((float *)this + 32) = v7;
  *((float *)this + 33) = v8;
  float v9 = v8 * *((float *)this + 14);
  double v10 = *((double *)this + 6) * (float)(v8 * *((float *)this + 9)) + *((double *)this + 14) * *((double *)this + 5);
  double v11 = *((double *)this + 9) * v9 + *((double *)this + 13) * *((double *)this + 8);
  *((double *)this + 13) = v11;
  *((double *)this + 14) = v10;
  float v12 = *((float *)this + 20);
  *(float *)&double v11 = v10 + v11 + v12;
  *((_DWORD *)this + 34) = LODWORD(v11);
  if (!a2) {
    goto LABEL_15;
  }
  double v13 = (float)(*((float *)this + 23) - v12);
  double v14 = *((double *)a2 + 13);
  float v15 = (v13 - v14) / (v10 + 1.0);
  float v16 = 1.0;
  if (v15 <= 1.0) {
    float v16 = v15;
  }
  BOOL v17 = v15 < 0.0;
  float v18 = 0.0;
  if (!v17) {
    float v18 = v16;
  }
  float v19 = sqrtf(v18);
  float v20 = *((float *)this + 30);
  if (v19 > v20)
  {
    float v21 = v19 - v20;
    float v22 = *((float *)this + 22);
LABEL_11:
    float v20 = v20 + (float)(v21 * v22);
    goto LABEL_12;
  }
  if (v19 < v20)
  {
    float v21 = v19 - v20;
    float v22 = *((float *)this + 21);
    goto LABEL_11;
  }
LABEL_12:
  float v23 = v14 + *((double *)a2 + 14) + *((float *)a2 + 20);
  BOOL v17 = (float)(*((float *)a2 + 23) + *((float *)a2 + 24)) < v23;
  float v24 = 0.1;
  if (!v17) {
    float v24 = v20;
  }
  *((float *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v24;
  *((float *)this + 31) = v24;
LABEL_15:
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 35) = (*((void *)this + 1) - *(void *)this) >> 2;
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay(DspLib::ThermalSpeakerProtection::SpeakerModel *this, float a2, float a3)
{
  if (*((void *)this + 1) != *(void *)this)
  {
    double v4 = (float)(a2 * a3);
    long double v5 = log(*((long double *)this + 8));
    *((long double *)this + 13) = *((double *)this + 13) * exp(v5 * v4);
    long double v6 = log(*((long double *)this + 5));
    *((long double *)this + 14) = *((double *)this + 14) * exp(v6 * v4);
  }
}

double DspLib::ThermalSpeakerProtection::Algorithm::Algorithm(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ThermalSpeakerProtection::Parameters::kDefault, 0x33uLL, (uint64_t)&DspLib::ThermalSpeakerProtection::Parameters::kMinimum, 51, (uint64_t)&DspLib::ThermalSpeakerProtection::Parameters::kMaximum, 51);
  *(void *)uint64_t v1 = &unk_1F14A7D10;
  *(void *)(v1 + 216) = 0;
  *(_DWORD *)(v1 + 224) = 0;
  *(unsigned char *)(v1 + 552) = 0;
  *(unsigned char *)(v1 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v1 + 704) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(unsigned char *)(v1 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 393) = 0u;
  return result;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::initialize(DspLib::ThermalSpeakerProtection::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this) >= 0x11)
  {
    float v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    int v16 = 175;
LABEL_14:
    printf("DSP Sound assertion in %s at line %d\n", v15, v16);
    ++DspLibDebug::mAssertCounter;
    return v4;
  }
  if (!(*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this))
  {
    float v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    int v16 = 176;
    goto LABEL_14;
  }
  unint64_t v5 = (*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this);
  DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel((DspLib::ThermalSpeakerProtection::SpeakerModel *)&__p, 0);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize((uint64_t *)this + 29, v5, (uint64_t)&__p);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  unint64_t v6 = (*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this);
  DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel((DspLib::ThermalSpeakerProtection::SpeakerModel *)&__p, 0);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize((uint64_t *)this + 32, v6, (uint64_t)&__p);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  unsigned int v7 = (*(uint64_t (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 48, v7);
  uint64_t v8 = *((void *)this + 48);
  uint64_t v9 = *((void *)this + 49);
  while (v8 != v9)
  {
    unint64_t v10 = (*(uint64_t (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 216))(this);
    std::vector<float>::resize(v8, v10);
    v8 += 24;
  }
  vDSP_Length v11 = (*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this);
  double v12 = (*(double (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 40))(this);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 280), v11, v12, 1uLL);
  *((void *)this + 89) = 0;
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *, void))(*(void *)this + 200))(this, *((unsigned __int8 *)this + 24));
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 128))(this);
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 136))(this);
  DspLib::elapsedTimeInMilliseconds((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 712), v13);
  return v4;
}

void sub_1BB2DFD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 4);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 144 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        vDSP_Length v11 = *(void **)(v9 - 144);
        v9 -= 144;
        unint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 136) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::uninitialize(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 48);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)this + 29);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)this + 32);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 280));
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 408);

  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 560);
}

void std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    uint64_t v4 = (void **)(a1 + 112);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    float v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(void *)(a1 + 96) = v2;
      operator delete(v2);
    }
    unint64_t v3 = *(void **)(a1 + 64);
    if (v3)
    {
      *(void *)(a1 + 72) = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void **)(a1 + 40);
    std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v4);
    *(unsigned char *)(a1 + 144) = 0;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::reset(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)this + 29);
    uint64_t v3 = *((void *)this + 30);
    if (v2 != v3)
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        DspLib::clear(*(float **)v2, (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 2);
        *(_DWORD *)(v2 + 24) = 0;
        *(void *)(v2 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _D8;
        *(void *)(v2 + 104) = 0;
        *(void *)(v2 + 112) = 0;
        *(void *)(v2 + 128) = 0;
        *(void *)(v2 + 136) = 0;
        v2 += 144;
      }
      while (v2 != v3);
    }
    uint64_t v9 = *((void *)this + 32);
    uint64_t v10 = *((void *)this + 33);
    if (v9 != v10)
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        DspLib::clear(*(float **)v9, (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
        *(_DWORD *)(v9 + 24) = 0;
        *(void *)(v9 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _D8;
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 128) = 0;
        *(void *)(v9 + 136) = 0;
        v9 += 144;
      }
      while (v9 != v10);
    }
    MEMORY[0x1F4188790](this);
    double v14 = (char *)v24 - v13;
    if (v12 >= 0x200) {
      size_t v15 = 512;
    }
    else {
      size_t v15 = v12;
    }
    bzero((char *)v24 - v13, v15);
    int v16 = (void *)*((void *)this + 48);
    BOOL v17 = (void *)*((void *)this + 49);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - v16);
    if (v17 == v16) {
      goto LABEL_16;
    }
    uint64_t v19 = 0;
    float v20 = (uint64_t *)*((void *)this + 48);
    do
    {
      uint64_t v21 = *v20;
      v20 += 3;
      *(void *)&v14[8 * v19++] = v21;
    }
    while (v18 > v19);
    if (v17 == v16) {
LABEL_16:
    }
      uint64_t v22 = 0;
    else {
      uint64_t v22 = (uint64_t)(v16[1] - *v16) >> 2;
    }
    v24[0] = v14;
    v24[1] = v18;
    _OWORD v24[2] = v22;
    DspLib::clear(v24);
    DspLib::Biquad::SetupWrapper::reset((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 328));
    if (*((unsigned char *)this + 552)) {
      DspLib::AudioMeter::Algorithm::reset((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 408));
    }
    if (*((unsigned char *)this + 704)) {
      DspLib::AudioMeter::Algorithm::reset((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 560));
    }
  }
  else
  {
    float v23 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v23, 207);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  *(unsigned char *)(this + 24) = a2;
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v2 = (void *)this;
    if (a2)
    {
      uint64_t v8 = 0;
      long long v9 = DspLib::AudioMeter::Parameters::kDefault;
      long long v10 = unk_1BB8739E8;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)uint64_t v13 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>(this + 408, (uint64_t)&v8);
      unint64_t v18 = (void **)&v15 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v12 + 1))
      {
        v13[0] = *((void **)&v12 + 1);
        operator delete(*((void **)&v12 + 1));
      }
      unint64_t v18 = (void **)&v11;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v18);
      uint64_t v8 = 0;
      long long v9 = DspLib::AudioMeter::Parameters::kDefault;
      long long v10 = unk_1BB8739E8;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)uint64_t v13 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v17 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>((uint64_t)(v2 + 70), (uint64_t)&v8);
      unint64_t v18 = (void **)&v15 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v12 + 1))
      {
        v13[0] = *((void **)&v12 + 1);
        operator delete(*((void **)&v12 + 1));
      }
      unint64_t v18 = (void **)&v11;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v18);
      unsigned int v3 = (*(uint64_t (**)(void *))(*v2 + 56))(v2);
      double v4 = (*(double (**)(void *))(*v2 + 40))(v2);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(v2 + 51), v3, v4);
      unsigned int v5 = (*(uint64_t (**)(void *))(*v2 + 56))(v2);
      double v6 = (*(double (**)(void *))(*v2 + 40))(v2);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(v2 + 70), v5, v6);
      uint64_t v7 = v2[4];
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)(v2 + 51), v7);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)(v2 + 70), v7);
    }
    else
    {
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100](this + 408);
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)(v2 + 70));
    }
    return (*(uint64_t (**)(void *))(*v2 + 128))(v2);
  }
  return this;
}

void sub_1BB2E03D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DspLib::AudioMeter::Algorithm::~Algorithm((DspLib::AudioMeter::Algorithm *)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    long long v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    std::vector<DspLib::RMS>::__vdeallocate((void **)(a1 + 40));
    *(_OWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    std::vector<float>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
    std::vector<float>::__move_assign(a1 + 88, (__n128 *)(a2 + 88));
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)(a1 + 112));
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(void *)(a2 + 128) = 0;
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  }
  else
  {
    std::construct_at[abi:ne180100]<DspLib::AudioMeter::Algorithm,DspLib::AudioMeter::Algorithm,DspLib::AudioMeter::Algorithm*>(a1, a2);
    *(unsigned char *)(a1 + 144) = 1;
  }
  return a1;
}

void DspLib::AudioMeter::Algorithm::~Algorithm(DspLib::AudioMeter::Algorithm *this)
{
  long long v4 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  long long v4 = (void **)((char *)this + 40);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void DspLib::ThermalSpeakerProtection::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    float v5 = *(double *)(a1 + 16);
    float v6 = *(float *)(*(void *)(a1 + 32) + 36);
    unsigned int v7 = vcvtas_u32_f32((float)(v6 * v5) / 1000.0);
    if (v7 <= 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = v7;
    }
    char v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    long long v10 = *(float **)(a1 + 32);
    unsigned int v11 = vcvtas_u32_f32(v10[23]) & ~(-1 << v9);
    unsigned int v12 = vcvtas_u32_f32(v10[36]) & ~(-1 << v9);
    unsigned int v13 = vcvtas_u32_f32(v10[49]) & ~(-1 << v9);
    if ((*(_DWORD *)(a1 + 216) != v11 || *(_DWORD *)(a1 + 220) != v12 || *(_DWORD *)(a1 + 224) != v13)
      && (v12 ^ v11 ^ v13) == ~(-1 << v9))
    {
      *(_DWORD *)(a1 + 216) = v11;
      *(_DWORD *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      *(_DWORD *)(a1 + 224) = v13;
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v14 = 0;
      __asm { FMOV            V9.2S, #1.0 }
      float v20 = 1000.0 / v6;
      do
      {
        uint64_t v21 = 0;
        while (1)
        {
          int v22 = DspLib::ThermalSpeakerProtection::kSpeakerTypeList[v21];
          if (v22 == 2)
          {
            int v23 = *(_DWORD *)(a1 + 224);
          }
          else if (v22 == 1)
          {
            int v23 = *(_DWORD *)(a1 + 220);
          }
          else
          {
            int v23 = v22 ? 0 : *(_DWORD *)(a1 + 216);
          }
          if ((v23 & (1 << v14)) != 0) {
            break;
          }
          if (++v21 == 3) {
            goto LABEL_24;
          }
        }
        if (v22 == 4)
        {
LABEL_24:
          uint64_t v24 = *(void *)(a1 + 232) + 144 * v14;
          DspLib::clear(*(float **)v24, (uint64_t)(*(void *)(v24 + 8) - *(void *)v24) >> 2);
          *(_DWORD *)(v24 + 24) = 0;
          *(void *)(v24 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _D9;
          *(void *)(v24 + 104) = 0;
          *(void *)(v24 + 112) = 0;
          *(void *)(v24 + 128) = 0;
          *(void *)(v24 + 136) = 0;
          *(_OWORD *)(v24 + 28) = 0u;
          *(_OWORD *)(v24 + 44) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
          *(_DWORD *)(v24 + 96) = 0;
          uint64_t v25 = *(void *)(a1 + 256) + 144 * v14;
          DspLib::clear(*(float **)v25, (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 2);
          *(_DWORD *)(v25 + 24) = 0;
          *(void *)(v25 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _D9;
          *(void *)(v25 + 104) = 0;
          *(void *)(v25 + 112) = 0;
          *(void *)(v25 + 128) = 0;
          *(void *)(v25 + 136) = 0;
          *(_OWORD *)(v25 + 28) = 0u;
          *(_OWORD *)(v25 + 44) = 0u;
          *(_OWORD *)(v25 + 64) = 0u;
          *(_OWORD *)(v25 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
          *(_DWORD *)(v25 + 96) = 0;
          goto LABEL_26;
        }
        uint64_t v26 = *(void *)(a1 + 32) + 4 * (13 * v22 + 11);
        DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(*(void *)(a1 + 232) + 144 * v14, v26, v20);
        DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*(void *)(a1 + 232) + 144 * v14), v8);
        DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(*(void *)(a1 + 256) + 144 * v14, v26, v20);
        DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*(void *)(a1 + 256) + 144 * v14), v8);
LABEL_26:
        ++v14;
      }
      while (v14 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    uint64_t v27 = *(unsigned int *)(*(void *)(a1 + 32) + 40);
    vDSP_Length v28 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
    double v29 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 280), v28, v29, 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 280, v27 << 32, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 408, v30);
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 560, v30);
    }
  }
}

void *DspLib::ThermalSpeakerProtection::Algorithm::updateGainLinkage(void *result, void *a2)
{
  unsigned int v3 = result;
  if (*(float *)(result[4] + 200) <= 0.5)
  {
    unsigned int v7 = (char *)&DspLib::ThermalSpeakerProtection::kSpeakerTypeList;
    do
    {
      int v8 = *(_DWORD *)v7;
      if (*(float *)(*((void *)v3 + 4) + 52 * *(unsigned int *)v7 + 88) > 0.5)
      {
        if (v8 == 2)
        {
          unsigned int v9 = v3[56];
        }
        else if (v8 == 1)
        {
          unsigned int v9 = v3[55];
        }
        else if (v8)
        {
          unsigned int v9 = 0;
        }
        else
        {
          unsigned int v9 = v3[54];
        }
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v3 + 56))(v3))
        {
          unint64_t v10 = 0;
          float v11 = 1.0;
          uint64_t v12 = 120;
          do
          {
            if (((v9 >> v10) & 1) != 0 && *(float *)(*a2 + v12) < v11) {
              float v11 = *(float *)(*a2 + v12);
            }
            ++v10;
            v12 += 144;
          }
          while (v10 < (*(unsigned int (**)(_DWORD *))(*(void *)v3 + 56))(v3));
        }
        else
        {
          float v11 = 1.0;
        }
        double result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 56))(v3);
        if (result)
        {
          unint64_t v13 = 0;
          uint64_t v14 = 124;
          do
          {
            if ((v9 >> v13)) {
              *(float *)(*a2 + v14) = v11;
            }
            ++v13;
            double result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 56))(v3);
            v14 += 144;
          }
          while (v13 < result);
        }
      }
      v7 += 4;
    }
    while (v7 != "N6DspLib24ThermalSpeakerProtection9AlgorithmE");
  }
  else
  {
    if ((*(unsigned int (**)(void *))(*result + 56))(result))
    {
      unint64_t v4 = 0;
      float v5 = 1.0;
      uint64_t v6 = 120;
      do
      {
        if (*(float *)(*a2 + v6) < v5) {
          float v5 = *(float *)(*a2 + v6);
        }
        ++v4;
        v6 += 144;
      }
      while (v4 < (*(unsigned int (**)(_DWORD *))(*(void *)v3 + 56))(v3));
    }
    else
    {
      float v5 = 1.0;
    }
    double result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 56))(v3);
    if (result)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 124;
      do
      {
        *(float *)(*a2 + v16) = v5;
        ++v15;
        double result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)v3 + 56))(v3);
        v16 += 144;
      }
      while (v15 < result);
    }
  }
  return result;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v7 = (void *)result;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (a3)
  {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    if (result)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        unsigned int v11 = *(_DWORD *)(a3 + 16);
        uint64_t v12 = *a4 + v9;
        unsigned int v13 = *(_DWORD *)(v12 + 140);
        if (v13 >= v11) {
          vDSP_Length v14 = v11;
        }
        else {
          vDSP_Length v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = *(float **)(*(void *)a3 + 8 * v10);
          *(_DWORD *)(v12 + 14DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v13 - v14;
          DspLib::fill(v15, v14, *(float *)(v12 + 124));
        }
        ++v10;
        double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
        v9 += 144;
      }
      while (v10 < result);
    }
  }
  if (v8)
  {
    LODWORD(v16) = 0;
    unsigned int v39 = v8;
    while (1)
    {
      uint64_t v17 = *a4;
      int v41 = v16;
      uint64_t v18 = v8 - v16;
      uint64_t v19 = *(unsigned int *)(*a4 + 24);
      unsigned int v20 = ((*(void *)(v17 + 8) - *(void *)v17) >> 2) - v19;
      if (v20 >= v18) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = v20;
      }
      DspLib::copy((void *)(**(void **)a2 + 4 * *(void *)(a2 + 16) - 4 * v18), v21, (void *)(*(void *)v17 + 4 * v19));
      int v40 = v21;
      *(_DWORD *)(v17 + 24) += v21;
      double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
      if (result >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 1;
        do
        {
          uint64_t v24 = *a4 + v22;
          uint64_t v25 = *(void *)(v24 + 144);
          uint64_t v26 = *(unsigned int *)(v24 + 168);
          unsigned int v27 = ((unint64_t)(*(void *)(v24 + 152) - v25) >> 2) - v26;
          if (v27 >= v18) {
            uint64_t v28 = v18;
          }
          else {
            uint64_t v28 = v27;
          }
          DspLib::copy((void *)(*(void *)(*(void *)a2 + 8 * v23) + 4 * *(void *)(a2 + 16) - 4 * v18), v28, (void *)(v25 + 4 * v26));
          *(_DWORD *)(v24 + 168) += v28;
          ++v23;
          double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
          v22 += 144;
        }
        while (v23 < result);
      }
      uint64_t v16 = (v40 + v41);
      if (*(_DWORD *)(*a4 + 24) == (uint64_t)(*(void *)(*a4 + 8) - *(void *)*a4) >> 2) {
        break;
      }
      unsigned int v8 = v39;
      if (a3) {
        goto LABEL_31;
      }
LABEL_39:
      if (v8 <= v16) {
        return result;
      }
    }
    double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
    unsigned int v8 = v39;
    if (result)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      do
      {
        if (a3) {
          int v31 = (const DspLib::ThermalSpeakerProtection::SpeakerModel *)(v7[32] + v29);
        }
        else {
          int v31 = 0;
        }
        DspLib::ThermalSpeakerProtection::SpeakerModel::doCalculations((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*a4 + v29), v31);
        ++v30;
        double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
        v29 += 144;
      }
      while (v30 < result);
    }
    if (!a3) {
      goto LABEL_39;
    }
    DspLib::ThermalSpeakerProtection::Algorithm::updateGainLinkage(v7, a4);
LABEL_31:
    double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
    if (result)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      unsigned int v34 = v8 - v16;
      do
      {
        uint64_t v35 = *a4 + v32;
        unsigned int v36 = *(_DWORD *)(v35 + 140);
        if (v36 >= v34) {
          vDSP_Length v37 = v34;
        }
        else {
          vDSP_Length v37 = v36;
        }
        if (v37)
        {
          uint64_t v38 = (float *)(*(void *)(*(void *)a3 + 8 * v33) + 4 * v16);
          *(_DWORD *)(v35 + 14DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v36 - v37;
          DspLib::fill(v38, v37, *(float *)(v35 + 124));
        }
        ++v33;
        double result = (*(uint64_t (**)(void *))(*v7 + 56))(v7);
        v32 += 144;
      }
      while (v33 < result);
    }
    goto LABEL_39;
  }
  return result;
}

void DspLib::ThermalSpeakerProtection::Algorithm::detectAudioProcessingPause(DspLib::ThermalSpeakerProtection::Algorithm *this, unint64_t *a2)
{
  float v3 = DspLib::elapsedTimeInMilliseconds((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 712), a2);
  if (v3 > 100.0)
  {
    float v4 = v3 <= 1000000000.0 ? v3 / 1000.0 : 1000000.0;
    float v5 = *(float *)(*((void *)this + 4) + 36);
    if ((*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      float v8 = 1000.0 / v5;
      do
      {
        DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*((void *)this + 29) + v6), v4, v8);
        DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*((void *)this + 32) + v6), v4, v8);
        uint64_t v9 = *((void *)this + 29) + v6;
        if (*(void *)(v9 + 8) != *(void *)v9)
        {
          float v10 = 1.0 - *(float *)(v9 + 120);
          float v11 = logf(1.0 - *(float *)(v9 + 88));
          *(float *)(v9 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1.0 - (float)(v10 * expf((float)(v4 * v8) * v11));
        }
        ++v7;
        v6 += 144;
      }
      while (v7 < (*(unsigned int (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(void *)this + 56))(this));
    }
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::processBlock(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v4 = *((unsigned int *)a2 + 4);
    if (*((_DWORD *)a2 + 4))
    {
      if (*(unsigned char *)(a1 + 24))
      {
        long long v39 = *a2;
        uint64_t v40 = *((void *)a2 + 2);
        DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 408), (uint64_t *)&v39);
        DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
      }
      if (*(float *)(*(void *)(a1 + 32) + 32) <= 0.5)
      {
        long long v33 = *a2;
        uint64_t v34 = *((void *)a2 + 2);
        long long v31 = *a3;
        uint64_t v32 = *((void *)a3 + 2);
        DspLib::clip(&v33, &v31, -2.0, 2.0);
        DspLib::ThermalSpeakerProtection::Algorithm::detectAudioProcessingPause((DspLib::ThermalSpeakerProtection::Algorithm *)a1, v7);
        MEMORY[0x1F4188790](v8);
        float v11 = (char *)&v19 - v10;
        if (v9 >= 0x200) {
          size_t v12 = 512;
        }
        else {
          size_t v12 = v9;
        }
        bzero((char *)&v19 - v10, v12);
        unsigned int v13 = *(uint64_t **)(a1 + 384);
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 392) - (void)v13) >> 3);
        if (*(uint64_t **)(a1 + 392) != v13)
        {
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = *v13;
            v13 += 3;
            *(void *)&v11[8 * v15++] = v16;
          }
          while (v14 > v15);
        }
        *(void *)unint64_t v30 = v11;
        *(void *)&v30[8] = v14;
        *(void *)&v30[16] = v4;
        uint64_t v28 = *(void *)a3;
        long long v29 = *(long long *)((char *)a3 + 8);
        DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels(a1, (uint64_t)&v28, (uint64_t)v30, (void *)(a1 + 232));
        long long v41 = *(_OWORD *)v30;
        uint64_t v42 = *(void *)&v30[16];
        long long v43 = *(_OWORD *)v30;
        uint64_t v44 = *(void *)&v30[16];
        DspLib::Biquad::Filter::process((void *)(a1 + 280), &v43, &v41);
        long long v17 = *a3;
        uint64_t v27 = *((void *)a3 + 2);
        uint64_t v24 = *(void *)v30;
        long long v25 = *(_OWORD *)&v30[8];
        long long v26 = v17;
        DspLib::multiply((uint64_t *)&v26, (long long *)&v24);
        uint64_t v22 = *(void *)a3;
        long long v23 = *(long long *)((char *)a3 + 8);
        DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels(a1, (uint64_t)&v22, 0, (void *)(a1 + 256));
      }
      else if (**(void **)a2 != **(void **)a3)
      {
        long long v37 = *a2;
        uint64_t v38 = *((void *)a2 + 2);
        long long v35 = *a3;
        uint64_t v36 = *((void *)a3 + 2);
        DspLib::copy(&v37, &v35);
      }
      if (*(unsigned char *)(a1 + 24))
      {
        DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v4, *(double *)(a1 + 16));
        uint64_t v20 = *(void *)a3;
        long long v21 = *(long long *)((char *)a3 + 8);
        DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 560), &v20);
      }
    }
  }
  else
  {
    uint64_t v18 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v18, 438);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  if (*(unsigned char *)(a1 + 8))
  {
    DspLib::clear(a2, __N);
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v6 = *(double *)(a1 + 16);
    *a2 = (float)v5;
    a2[1] = v6;
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 408), a2 + 114, 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 560), a2 + 146, 0x20uLL);
      unint64_t v7 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 98;
        do
        {
          uint64_t v10 = *(void *)(a1 + 232) + v8;
          a2[(v9 - 16)] = *(float *)(v10 + 132);
          a2[(v9 - 48)] = DspLib::amp2dBSafe(v7, *(float *)(v10 + 120), 0.000001);
          a2[(v9 - 32)] = DspLib::amp2dBSafe(v11, *(float *)(*(void *)(a1 + 232) + v8 + 124), 0.000001);
          uint64_t v12 = *(void *)(a1 + 256) + v8;
          a2[v9] = *(float *)(v12 + 132);
          double v13 = *(double *)(v12 + 112);
          float v14 = *(double *)(v12 + 104);
          a2[(v9 - 96)] = v14;
          float v15 = v13;
          a2[(v9 - 80)] = v15;
          a2[(v9 - 64)] = *(float *)(v12 + 136);
          unint64_t v7 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
          unint64_t v16 = v9 - 97;
          ++v9;
          v8 += 144;
        }
        while (v16 < v7);
      }
      a2[178] = DspLib::sum(*(const float **)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
    }
    else
    {
      DspLib::fill(a2 + 114, 0x10uLL, -100.0);
      DspLib::fill(a2 + 130, 0x10uLL, -100.0);
      DspLib::fill(a2 + 146, 0x10uLL, -100.0);
      DspLib::fill(a2 + 162, 0x10uLL, -100.0);
    }
  }
  else
  {
    long long v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v17, 473);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::~Algorithm(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  DspLib::ThermalSpeakerProtection::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1F14A7D10;
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 560);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 408);
  unint64_t v4 = (void **)((char *)this + 384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = (void **)((char *)this + 360);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 328));
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)((char *)this + 256);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = (void **)((char *)this + 232);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_1F14A87D8;
  float v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

double DspLib::ThermalSpeakerProtection::Algorithm::latencySamples(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::numStatus(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  return 179;
}

void *std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  double result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0x8E38E38E38E38E39 * ((v8 - v9) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 144 * a2;
      unint64_t v16 = (long long *)(a3 + 24);
      uint64_t v17 = 144 * a2;
      do
      {
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        double result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        long long v18 = *v16;
        long long v19 = *(_OWORD *)(a3 + 40);
        long long v20 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(v9 + 56) = v20;
        *(_OWORD *)(v9 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v19;
        *(_OWORD *)(v9 + 24) = v18;
        long long v21 = *(_OWORD *)(a3 + 88);
        long long v22 = *(_OWORD *)(a3 + 104);
        long long v23 = *(_OWORD *)(a3 + 120);
        *(void *)(v9 + 136) = *(void *)(a3 + 136);
        *(_OWORD *)(v9 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
        *(_OWORD *)(v9 + 104) = v22;
        *(_OWORD *)(v9 + 88) = v21;
        v9 += 144;
        v17 -= 144;
      }
      while (v17);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v9 - *a1) >> 4);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x1C71C71C71C71C7) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xE38E38E38E38E3) {
      unint64_t v13 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v28 = result;
    if (v13) {
      float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>>((uint64_t)result, v13);
    }
    else {
      float v14 = 0;
    }
    uint64_t v24 = v14;
    long long v25 = &v14[144 * v10];
    long long v26 = v25;
    uint64_t v27 = &v14[144 * v13];
    std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__construct_at_end(&v24, a2, a3);
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__swap_out_circular_buffer(a1, &v24);
    return (void *)std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer((uint64_t)&v24);
  }
  return result;
}

void sub_1BB2E181C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  float v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 144 * a2;
    uint64_t v7 = (long long *)(a3 + 24);
    uint64_t v8 = 144 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      double result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      long long v9 = *v7;
      long long v10 = v7[1];
      long long v11 = v7[2];
      *(_OWORD *)(v4 + 72) = v7[3];
      *(_OWORD *)(v4 + 56) = v11;
      *(_OWORD *)(v4 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v10;
      *(_OWORD *)(v4 + 24) = v9;
      long long v12 = v7[4];
      long long v13 = v7[5];
      long long v14 = v7[6];
      *(void *)(v4 + 136) = *((void *)v7 + 14);
      *(_OWORD *)(v4 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v14;
      *(_OWORD *)(v4 + 104) = v13;
      *(_OWORD *)(v4 + 88) = v12;
      v4 += 144;
      v8 -= 144;
    }
    while (v8);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1BB2E18F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v20 = a6;
  *((void *)&v20 + 1) = a7;
  long long v19 = v20;
  v17[0] = a1;
  v17[1] = &v19;
  vDSP_Length v17[2] = &v20;
  if (a3 == a5)
  {
    uint64_t v15 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 136) = 0;
      *(void *)(v7 - 128) = 0;
      long long v8 = *(_OWORD *)(a3 - 144);
      a3 -= 144;
      *(_OWORD *)(v7 - 144) = v8;
      *(void *)(v7 - 128) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      long long v9 = *(_OWORD *)(a3 + 104);
      long long v10 = *(_OWORD *)(a3 + 120);
      uint64_t v11 = *(void *)(a3 + 136);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 88);
      *(void *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
      long long v12 = *(_OWORD *)(a3 + 24);
      long long v13 = *(_OWORD *)(a3 + 40);
      long long v14 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(v7 - 88) = v14;
      *(_OWORD *)(v7 - 104) = v13;
      *(_OWORD *)(v7 - 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      uint64_t v7 = *((void *)&v20 + 1) - 144;
      *((void *)&v20 + 1) -= 144;
    }
    while (a3 != a5);
    uint64_t v15 = v20;
  }
  char v18 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
  return v15;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    float v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 144;
  }
}

uint64_t std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 144);
    *(void *)(a1 + 16) = v2 - 144;
    if (v5)
    {
      *(void *)(v2 - 136) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 144);
      v4 -= 144;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 136) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<DspLib::RMS>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 std::construct_at[abi:ne180100]<DspLib::AudioMeter::Algorithm,DspLib::AudioMeter::Algorithm,DspLib::AudioMeter::Algorithm*>(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  __n128 result = *(__n128 *)(a2 + 112);
  *(__n128 *)(a1 + 112) = result;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return result;
}

uint64_t std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    uint64_t v5 = (void **)(a1 + 112);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    long long v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(void *)(a1 + 96) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 64);
    if (v3)
    {
      *(void *)(a1 + 72) = v3;
      operator delete(v3);
    }
    uint64_t v5 = (void **)(a1 + 40);
    std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  return a1;
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t DspLib::BassQueen::Parameters::loudspeakerModelMode(uint64_t a1)
{
  return DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
}

double DspLib::BassQueen::Parameters::min(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 0x31)
  {
    int v5 = DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
    return DspLib::LoudspeakerModel::Parameters::min(v5, a3 - 50);
  }
  else
  {
    LODWORD(result) = DspLib::BassQueen::Parameters::kMinimum[a3];
  }
  return result;
}

double DspLib::BassQueen::Parameters::max(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 0x31)
  {
    int v5 = DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
    return DspLib::LoudspeakerModel::Parameters::max(v5, a3 - 50);
  }
  else
  {
    LODWORD(result) = DspLib::BassQueen::Parameters::kMaximum[a3];
  }
  return result;
}

void DspLib::BassQueen::Parameters::setBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void DspLib::LoudspeakerController::BiquadModel::initialize(DspLib::LoudspeakerController::BiquadModel *this, vDSP_Length __M)
{
  DspLib::Biquad::Filter::initialize(this, 1uLL, __M);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 72), 1uLL, __M);

  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 48));
}

void DspLib::LoudspeakerController::BiquadModel::zeroInputResponse(DspLib::Biquad::Filter *a1, uint64_t a2, vDSP_Length a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (a3 >= *((void *)a1 + 18)) {
    vDSP_Length v5 = *((void *)a1 + 18);
  }
  else {
    vDSP_Length v5 = a3;
  }
  uint64_t v6 = (void *)((char *)a1 + 72);
  DspLib::Biquad::Filter::copyStatesFrom((DspLib::Biquad::Filter *)((char *)a1 + 72), a1);
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)v10 - v8;
  DspLib::clear((float *)((char *)v10 - v8), v5);
  DspLib::Biquad::Filter::process(v6, (uint64_t)v9, v5, a2, v5);
  DspLib::clear((float *)(a2 + 4 * a3 - 4 * (a3 - v5)), a3 - v5);
}

void DspLib::LoudspeakerController::ThermalModel::process(float32x2_t *a1, uint64_t a2, unint64_t a3, float *__C, vDSP_Length __N)
{
  float v5 = a1[21].f32[0] + a1[21].f32[1];
  if (a3)
  {
    uint64_t v6 = 0;
    float32x2_t v7 = a1[19];
    float32x2_t v8 = a1[20];
    do
    {
      float32x2_t v9 = vmla_f32(a1[18], vmla_n_f32(vneg_f32(a1[18]), v8, *(float *)(a2 + 4 * v6)), v7);
      a1[18] = v9;
      __C[v6++] = vaddv_f32(v9);
    }
    while (a3 > v6);
  }
  if (v5 != 0.0) {
    DspLib::add(__C, __N, v5);
  }
}

void DspLib::LoudspeakerController::ThermalModel::processNoUpdate(float32x2_t *a1, uint64_t a2, unint64_t a3, float *__C, vDSP_Length __N)
{
  float v5 = a1[21].f32[0] + a1[21].f32[1];
  if (a3)
  {
    uint64_t v6 = 0;
    float32x2_t v8 = a1[19];
    float32x2_t v7 = a1[20];
    float32x2_t v9 = a1[18];
    do
    {
      float32x2_t v9 = vmla_f32(v9, vmla_n_f32(vneg_f32(v9), v7, *(float *)(a2 + 4 * v6)), v8);
      __C[v6++] = vaddv_f32(v9);
    }
    while (a3 > v6);
  }
  if (v5 != 0.0) {
    DspLib::add(__C, __N, v5);
  }
}

vDSP_Length DspLib::LoudspeakerController::EfficiencyModel::processKernel(uint64_t a1, int a2, vDSP_Length a3, float *__C, vDSP_Length __N, float *a6, vDSP_Length a7, unint64_t a8)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 64))
  {
    MEMORY[0x1F4188790](a1);
    long long v19 = (float *)((char *)v36 - v18);
    DspLib::multiply(v20, v21, (float *)((char *)v36 - v18), *(float *)(a1 + 4));
    DspLib::abs(v19, a3);
    if (*(unsigned char *)(a1 + 44))
    {
      vDSP_Length v22 = HIDWORD(a8);
      if (*(unsigned char *)(a1 + 24))
      {
        if (a3 > v22)
        {
          uint64_t v23 = 0;
          while (1)
          {
            float v24 = v19[v23];
            if (v24 <= *(float *)(a1 + 48))
            {
              if (v22) {
                vDSP_Length v22 = (v22 - 1);
              }
              else {
                vDSP_Length v22 = 0;
              }
              if (v22)
              {
LABEL_12:
                LODWORD(a8) = 0;
                __C[v23] = *(float *)(a1 + 56);
                long long v25 = (float *)(a1 + 60);
                goto LABEL_25;
              }
            }
            else
            {
              vDSP_Length v22 = *(unsigned int *)(a1 + 52);
              if (v22) {
                goto LABEL_12;
              }
            }
            if (v24 <= *(float *)(a1 + 28))
            {
              if (a8) {
                LODWORD(a8) = a8 - 1;
              }
              else {
                LODWORD(a8) = 0;
              }
              if (!a8)
              {
LABEL_24:
                __C[v23] = *(float *)(a1 + 16);
                long long v25 = (float *)(a1 + 20);
                goto LABEL_25;
              }
            }
            else
            {
              LODWORD(a8) = *(_DWORD *)(a1 + 32);
              if (!a8) {
                goto LABEL_24;
              }
            }
            __C[v23] = *(float *)(a1 + 36);
            long long v25 = (float *)(a1 + 40);
LABEL_25:
            a6[v23++] = *v25;
            if (a3 <= v23) {
              goto LABEL_67;
            }
          }
        }
        DspLib::fill(__C, __N, *(float *)(a1 + 56));
        DspLib::fill(a6, a7, *(float *)(a1 + 60));
        vDSP_Length v22 = (HIDWORD(a8) - a3);
        if (a3)
        {
          unsigned int v34 = 0;
          long long v35 = &v19[a3 - 1];
          while (*v35 <= *(float *)(a1 + 48))
          {
            ++v34;
            --v35;
            if (v34 >= a3) {
              goto LABEL_64;
            }
          }
          LODWORD(a8) = 0;
          vDSP_Length v22 = *(_DWORD *)(a1 + 52) - v34;
          goto LABEL_67;
        }
      }
      else if (a3)
      {
        uint64_t v31 = 0;
        do
        {
          if (v19[v31] <= *(float *)(a1 + 48))
          {
            if (v22) {
              vDSP_Length v22 = (v22 - 1);
            }
            else {
              vDSP_Length v22 = 0;
            }
          }
          else
          {
            vDSP_Length v22 = *(unsigned int *)(a1 + 52);
          }
          if (v22) {
            uint64_t v32 = 56;
          }
          else {
            uint64_t v32 = 16;
          }
          __C[v31] = *(float *)(a1 + v32);
          if (v22) {
            uint64_t v33 = 60;
          }
          else {
            uint64_t v33 = 20;
          }
          a6[v31++] = *(float *)(a1 + v33);
        }
        while (a3 > v31);
      }
LABEL_64:
      LODWORD(a8) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 24))
      {
        if (a3)
        {
          uint64_t v28 = 0;
          do
          {
            if (v19[v28] <= *(float *)(a1 + 28))
            {
              if (a8) {
                LODWORD(a8) = a8 - 1;
              }
              else {
                LODWORD(a8) = 0;
              }
            }
            else
            {
              LODWORD(a8) = *(_DWORD *)(a1 + 32);
            }
            if (a8) {
              uint64_t v29 = 36;
            }
            else {
              uint64_t v29 = 16;
            }
            __C[v28] = *(float *)(a1 + v29);
            if (a8) {
              uint64_t v30 = 40;
            }
            else {
              uint64_t v30 = 20;
            }
            a6[v28++] = *(float *)(a1 + v30);
          }
          while (a3 > v28);
        }
      }
      else
      {
        DspLib::fill(__C, __N, *(float *)(a1 + 16));
        DspLib::fill(a6, a7, *(float *)(a1 + 20));
        LODWORD(a8) = 0;
      }
      vDSP_Length v22 = 0;
    }
LABEL_67:
    DspLib::multiply(a6, a7, *(float *)(a1 + 4));
    return a8 | (v22 << 32);
  }
  uint64_t v13 = 0;
  while (v13 != -36)
  {
    float v14 = *(float *)(a1 + v13 + 92);
    v13 -= 12;
    if (*(float *)(a1 + 8) >= v14)
    {
      uint64_t v15 = (float *)(a1 + v13 + 108);
      goto LABEL_28;
    }
  }
  uint64_t v15 = (float *)(a1 + 16);
LABEL_28:
  DspLib::fill(__C, __N, *v15);
  float v26 = DspLib::LoudspeakerController::EfficiencyModel::powerRatio((DspLib::LoudspeakerController::EfficiencyModel *)a1);
  DspLib::fill(a6, a7, v26);
  return 0;
}

float DspLib::LoudspeakerController::EfficiencyModel::powerRatio(DspLib::LoudspeakerController::EfficiencyModel *this)
{
  if (*((unsigned char *)this + 64))
  {
    uint64_t v1 = 0;
    while (v1 != -36)
    {
      float v2 = *(float *)((char *)this + v1 + 92);
      v1 -= 12;
      if (*((float *)this + 2) >= v2)
      {
        uint64_t v3 = (float *)((char *)this + v1 + 112);
        return *((float *)this + 1) * *v3;
      }
    }
    uint64_t v3 = (float *)((char *)this + 20);
  }
  else if (*((_DWORD *)this + 27))
  {
    uint64_t v3 = (float *)((char *)this + 60);
  }
  else if (*((_DWORD *)this + 26))
  {
    uint64_t v3 = (float *)((char *)this + 40);
  }
  else
  {
    uint64_t v3 = (float *)((char *)this + 20);
  }
  return *((float *)this + 1) * *v3;
}

void DspLib::LoudspeakerController::SpeakerSystemModel::initialize(DspLib::LoudspeakerController::SpeakerSystemModel *this, double a2, char *a3)
{
  *(double *)this = a2;
  DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 160), 4uLL);
  DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 312), 3uLL);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 464), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 536), 1uLL, 1uLL);
  *((_DWORD *)this + 159) = 0;
  *((void *)this + 76) = 0;
  DspLib::AveragingDecimator::setSrcFactor((void **)this + 80, a3, (uint64_t)(a3 - 1));
  DspLib::AveragingDecimator::setSrcFactor((void **)this + 86, a3, (uint64_t)(a3 - 1));

  DspLib::LoudspeakerController::SpeakerSystemModel::reset(this);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::reset(DspLib::LoudspeakerController::SpeakerSystemModel *this)
{
  *((void *)this + 19) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 208));
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 360));
  *((_DWORD *)this + 159) = 0;
  *((void *)this + 76) = 0;
  DspLib::AveragingDecimator::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 640));
  DspLib::AveragingDecimator::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 688));
  if (*((unsigned char *)this + 888))
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 784));
  }
}

float DspLib::LoudspeakerController::SpeakerSystemModel::configure(uint64_t a1, uint64_t a2, _OWORD *a3, float a4)
{
  uint64_t v8 = 0;
  long long v9 = *(_OWORD *)(a1 + 32);
  do
  {
    long long v16 = v9;
    float v10 = 1.0 - exp(-1.0 / *(double *)(a2 + 8 * v8));
    long long v17 = v16;
    *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) = v10;
    long long v9 = v17;
    *(_OWORD *)(a1 + 32) = v17;
    ++v8;
  }
  while (v8 != 4);
  long long v11 = a3[1];
  *(_OWORD *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *a3;
  *(_OWORD *)(a1 + 76) = v11;
  long long v12 = a3[2];
  long long v13 = a3[3];
  long long v14 = a3[4];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)((char *)a3 + 76);
  *(_OWORD *)(a1 + 124) = v14;
  *(_OWORD *)(a1 + 108) = v13;
  *(_OWORD *)(a1 + 92) = v12;
  float result = (float)(*(float *)(a1 + 60) * *(float *)(a1 + 48)) + 1.0;
  *(float *)(a1 + 52) = result;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 456) = (unint64_t)a4;
  *(void *)(a1 + 304) = (unint64_t)a4;
  return result;
}

void DspLib::LoudspeakerController::SpeakerSystemModel::process(uint64_t a1, uint64_t a2, vDSP_Length a3, const float *a4, vDSP_Length a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, vDSP_Length a12, char a13)
{
  int v17 = a2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a13) {
    DspLib::LoudspeakerController::SpeakerSystemModel::voltagePath(a1, a2, a3, a7, a8, a9, a10, a8, v33, v34);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePath((float32x2_t *)a1, (uint64_t)a4, a5, a11, a12);
  MEMORY[0x1F4188790](v19);
  vDSP_Length v21 = (float *)((char *)&v35 - v20);
  vDSP_Length v22 = (DspLib::LoudspeakerController::EfficiencyModel *)(a1 + 48);
  if (*(unsigned char *)(a1 + 112))
  {
    float v23 = DspLib::LoudspeakerController::EfficiencyModel::powerRatio(v22);
    uint64_t v24 = 0;
    while (v24 != -36)
    {
      float v25 = *(float *)(a1 + v24 + 140);
      v24 -= 12;
      if (*(float *)(a1 + 56) >= v25)
      {
        float v26 = (float *)(a1 + v24 + 156);
        goto LABEL_10;
      }
    }
    float v26 = (float *)(a1 + 64);
LABEL_10:
    DspLib::multiplyAdd(a4, a5, v21, v23, *v26);
  }
  else
  {
    uint64_t v27 = MEMORY[0x1F4188790](v22);
    uint64_t v29 = (float *)((char *)&v35 - v28);
    uint64_t v30 = MEMORY[0x1F4188790](v27);
    uint64_t v32 = (const float *)((char *)&v35 - v31);
    *(void *)(a1 + 152) = DspLib::LoudspeakerController::EfficiencyModel::processKernel(v30, v17, a3, v29, a5, (float *)((char *)&v35 - v31), a5, *(void *)(a1 + 152));
    DspLib::multiplyAdd(a4, a5, v32, a5, v29, a5, v21);
  }
  long long v35 = *a6;
  uint64_t v36 = *((void *)a6 + 2);
  DspLib::LoudspeakerController::SpeakerSystemModel::powerPath((float32x4_t *)a1, (uint64_t)v21, a5, (void **)&v35);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::voltagePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  DspLib::Biquad::Filter::process((void *)(a1 + 160), a2, a3, a4, a5);
  DspLib::Biquad::Filter::process((void *)(a1 + 312), a2, a3, a6, a7);
  if (*(unsigned char *)(a1 + 888))
  {
    DspLib::Biquad::Filter::process((void *)(a1 + 736), a2, a3, a9, a10);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePath(float32x2_t *a1, uint64_t a2, uint64_t a3, float *a4, vDSP_Length a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](&a1[86]);
  uint64_t v17 = (uint64_t)&v16 - v9;
  unint64_t v18 = v10;
  DspLib::AveragingDecimator::processKernel(v8, v11, v12, (uint64_t)&v17, v13, v14, v15);
  if (v18) {
    DspLib::LoudspeakerController::ThermalModel::process(a1 + 58, v17, v18, a4, a5);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::powerPath(float32x4_t *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1F4188790](&a1[40]);
  float v23 = (char *)&v22 - v7;
  unint64_t v24 = v8;
  DspLib::AveragingDecimator::processKernel(v6, v9, v10, (uint64_t)&v23, v11, v12, v13);
  unint64_t v14 = v24;
  if (v24)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v23;
    uint64_t v17 = *a4;
    float32x4_t v18 = a1[2];
    do
    {
      uint64_t v19 = (const float *)&v16[4 * v15];
      float32x4_t v20 = vld1q_dup_f32(v19);
      float32x4_t v21 = vmlaq_f32(a1[1], vsubq_f32(v20, a1[1]), v18);
      a1[1] = v21;
      *(_DWORD *)(*v17 + 4 * v15) = v21.i32[0];
      *(_DWORD *)(v17[1] + 4 * v15) = a1[1].i32[1];
      *(_DWORD *)(v17[2] + 4 * v15) = a1[1].i32[2];
      *(_DWORD *)(v17[3] + 4 * v15++) = a1[1].i32[3];
    }
    while (v14 > v15);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::displacementZeroState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14 = (void *)(a1 + 232);
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 280));
  DspLib::Biquad::Filter::process(v14, a2, a3, a4, a5);
  if (*(unsigned char *)(a1 + 888))
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 856));
    DspLib::Biquad::Filter::process((void *)(a1 + 808), a2, a3, a6, a7);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (unint64_t)(float)(a1[40].f32[2] * (float)(unint64_t)(a3 + ((a1[41].i64[1] - a1[41].i64[0]) >> 2)));
  uint64_t v7 = MEMORY[0x1F4188790](&a1[40]);
  uint64_t v9 = (char *)v21 - v8;
  DspLib::AveragingDecimator::zeroStateResponse(v7, v10, v11, (uint64_t)v21 - v8, v6);
  if (v6)
  {
    uint64_t v12 = 0;
    float32x4_t v13 = a1[2];
    uint64_t v14 = **a4;
    uint64_t v15 = (*a4)[1];
    uint64_t v16 = (*a4)[2];
    uint64_t v17 = (*a4)[3];
    float32x4_t v18 = 0uLL;
    do
    {
      uint64_t v19 = (const float *)&v9[4 * v12];
      float32x4_t v20 = vld1q_dup_f32(v19);
      float32x4_t v18 = vmlaq_f32(v18, vsubq_f32(v20, v18), v13);
      *(_DWORD *)(v14 + 4 * v12) = v18.i32[0];
      *(_DWORD *)(v15 + 4 * v12) = v18.i32[1];
      *(_DWORD *)(v16 + 4 * v12) = v18.i32[2];
      *(_DWORD *)(v17 + 4 * v12++) = v18.i32[3];
    }
    while (v6 > v12);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (unint64_t)(float)(a1[87].f32[0]
                               * (float)(unint64_t)(a3 + ((uint64_t)(*(void *)&a1[89] - *(void *)&a1[88]) >> 2)));
  uint64_t v7 = MEMORY[0x1F4188790](&a1[86]);
  uint64_t v9 = (char *)v16 - v8;
  DspLib::AveragingDecimator::zeroStateResponse(v7, v10, v11, (uint64_t)v16 - v8, v6);
  if (v6)
  {
    uint64_t v12 = 0;
    float32x2_t v13 = a1[77];
    float32x2_t v14 = a1[78];
    float32x2_t v15 = 0;
    do
    {
      float32x2_t v15 = vmla_f32(v15, vmla_n_f32(vneg_f32(v15), v14, *(float *)&v9[4 * v12]), v13);
      *(float *)(a4 + 4 * v12++) = vaddv_f32(v15);
    }
    while (v6 > v12);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperatureZeroInput(float32x2_t *a1, float *a2, unint64_t a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v10 - v7;
  DspLib::AveragingDecimator::zeroInputResponse(v6 + 688, (float *)((char *)v10 - v7), v9);
  DspLib::LoudspeakerController::ThermalModel::processNoUpdate(a1 + 58, (uint64_t)v8, a3, a2, a3);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::averagePowersZeroInput(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  float v23 = (char *)&v22 - v8;
  unint64_t v24 = v7;
  DspLib::AveragingDecimator::processKernel(v6 + 640, v9, v10, (uint64_t)&v23, a1[41].i64[0], (a1[41].i64[1] - a1[41].i64[0]) >> 2, 0);
  unint64_t v11 = v24;
  if (v24)
  {
    uint64_t v12 = 0;
    float32x2_t v13 = v23;
    float32x4_t v15 = a1[1];
    float32x4_t v14 = a1[2];
    uint64_t v16 = **a4;
    uint64_t v17 = (*a4)[1];
    uint64_t v18 = (*a4)[2];
    uint64_t v19 = (*a4)[3];
    do
    {
      float32x4_t v20 = (const float *)&v13[4 * v12];
      float32x4_t v21 = vld1q_dup_f32(v20);
      float32x4_t v15 = vmlaq_f32(v15, vsubq_f32(v21, v15), v14);
      *(_DWORD *)(v16 + 4 * v12) = v15.i32[0];
      *(_DWORD *)(v17 + 4 * v12) = v15.i32[1];
      *(_DWORD *)(v18 + 4 * v12) = v15.i32[2];
      *(_DWORD *)(v19 + 4 * v12++) = v15.i32[3];
    }
    while (v11 > v12);
  }
}

void DspLib::LoudspeakerController::YoYoSmoother::configure(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (a2 != *(float *)(a1 + 8) || a3 != *(float *)(a1 + 12) || a4 != *(float *)(a1 + 16) || a5 != *(float *)(a1 + 20))
  {
    *(float *)(a1 + 8) = a2;
    *(float *)(a1 + 12) = a3;
    *(float *)(a1 + 16) = a4;
    *(float *)(a1 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a5;
    float v9 = -(float)*(unint64_t *)a1;
    float v10 = 1.0 - expf(v9 / a2);
    float v11 = 1.0 - expf(v9 / a4);
    float v12 = expf(v9 / a3);
    *(float *)(a1 + 24) = v10;
    *(float *)(a1 + 28) = v11;
    *(float *)(a1 + 32) = 1.0 - v12;
    *(float *)(a1 + 36) = 1.0 / a5;
    *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
}

void DspLib::LoudspeakerController::YoYoSmoother::process(DspLib::LoudspeakerController::YoYoSmoother *this, float a2, unint64_t a3)
{
  if (a3)
  {
    if (*(void *)this == a3)
    {
      float v6 = *((float *)this + 6);
      float v5 = *((float *)this + 7);
      float v7 = *((float *)this + 8);
      float v8 = *((float *)this + 10);
      float v9 = *((float *)this + 11);
      if (v9 >= a2) {
        float v10 = *((float *)this + 8);
      }
      else {
        float v10 = *((float *)this + 6);
      }
      float v11 = v9 + (float)(v10 * (float)(a2 - v9));
      float v12 = *((float *)this + 12) + (float)(v5 * (float)(a2 - *((float *)this + 12)));
      *((float *)this + 11) = v11;
      *((float *)this + 12) = v12;
      if (v8 < a2)
      {
        float v13 = (float)(v12 - v11) * *((float *)this + 9);
        if (v13 <= 1.0) {
          float v14 = (float)(v12 - v11) * *((float *)this + 9);
        }
        else {
          float v14 = 1.0;
        }
        BOOL v15 = v13 < 0.0;
        float v16 = 0.0;
        if (!v15) {
          float v16 = v14;
        }
        float v7 = (float)(v6 * (float)(1.0 - v16)) + (float)(v16 * v5);
      }
      float v17 = v8 + (float)(v7 * (float)(a2 - v8));
    }
    else
    {
      float v18 = -(float)a3;
      float v19 = 1.0 - expf(v18 / *((float *)this + 2));
      float v20 = 1.0 - expf(v18 / *((float *)this + 4));
      float v21 = 1.0 - expf(v18 / *((float *)this + 3));
      float v22 = *((float *)this + 11);
      float v23 = *((float *)this + 12) + (float)(v20 * (float)(a2 - *((float *)this + 12)));
      float v24 = *((float *)this + 10);
      if (v22 >= a2) {
        float v25 = v21;
      }
      else {
        float v25 = v19;
      }
      float v26 = v22 + (float)(v25 * (float)(a2 - v22));
      *((float *)this + 11) = v26;
      *((float *)this + 12) = v23;
      if (v24 < a2)
      {
        float v27 = v23 - v26;
        float v28 = v27 * *((float *)this + 9);
        if (v28 <= 1.0) {
          float v29 = v27 * *((float *)this + 9);
        }
        else {
          float v29 = 1.0;
        }
        BOOL v15 = v28 < 0.0;
        float v30 = 0.0;
        if (!v15) {
          float v30 = v29;
        }
        float v21 = (float)(v19 * (float)(1.0 - v30)) + (float)(v30 * v20);
      }
      float v17 = v24 + (float)(v21 * (float)(a2 - v24));
    }
    *((float *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
  }
}

uint64_t DspLib::LoudspeakerController::MaskingEstimator::configure(uint64_t this, double a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = this;
  if (*(double *)this != a2
    || a3 != (uint64_t)(*(void *)(this + 24) - *(void *)(this + 16)) >> 2
    || *(void *)(this + 8) != a4)
  {
    uint64_t v6 = 0;
    *(void *)(this + 8) = a4;
    *(double *)this = a2;
    unint64_t v7 = 2 * a3;
    while (1)
    {
      unint64_t v8 = qword_1BB875BD8[v6];
      double v9 = (double)a3 / (double)v8;
      if (v9 <= 1.0) {
        char v10 = 0;
      }
      else {
        char v10 = vcvtpd_u64_f64(log2(v9));
      }
      unint64_t v11 = v8 << v10;
      if (v11 < v7) {
        unint64_t v7 = v11;
      }
      if (++v6 == 4)
      {
        if (v7 >= 0x400) {
          uint64_t v12 = 1024;
        }
        else {
          uint64_t v12 = v7;
        }
        *(void *)(v5 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
        if (a3 >= 0x400) {
          unint64_t v13 = 1024;
        }
        else {
          unint64_t v13 = a3;
        }
        std::vector<float>::resize(v5 + 16, v13);
        DspLib::makePeriodicHannWindow(*(_DWORD **)(v5 + 16), (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 2);
        float v14 = *(float **)(v5 + 16);
        vDSP_Length v15 = (uint64_t)(*(void *)(v5 + 24) - (void)v14) >> 2;
        float v16 = DspLib::norm(v14, v15);
        DspLib::multiply(v14, v15, 1.0 / v16);
        std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)(v5 + 48), 0);
        operator new();
      }
    }
  }
  return this;
}

void sub_1BB2E3608(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

DspLib::LoudspeakerController::MaskingEstimator *DspLib::LoudspeakerController::MaskingEstimator::setMaskFreqs(DspLib::LoudspeakerController::MaskingEstimator *this, float a2, float a3)
{
  if (a2 <= a3)
  {
    uint64_t v4 = this;
    unint64_t started = DspLib::LoudspeakerController::MaskingEstimator::nearestStartBand(this, a2);
    if (started >= 0x62) {
      uint64_t v6 = 98;
    }
    else {
      uint64_t v6 = started;
    }
    *((void *)v4 + 69) = v6;
    this = (DspLib::LoudspeakerController::MaskingEstimator *)DspLib::LoudspeakerController::MaskingEstimator::nearestStopBand(v4, a3);
    if ((unint64_t)this <= v6 + 1) {
      unint64_t v7 = (DspLib::LoudspeakerController::MaskingEstimator *)(v6 + 1);
    }
    else {
      unint64_t v7 = this;
    }
    *((void *)v4 + 7DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  }
  return this;
}

uint64_t DspLib::LoudspeakerController::MaskingEstimator::nearestStartBand(DspLib::LoudspeakerController::MaskingEstimator *this, float a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t result = 0;
  float v6 = fabsf(a2);
  uint64_t v7 = *((void *)this + 61);
  double v8 = *(double *)this;
  unint64_t v9 = *((void *)this + 5);
  do
  {
    double v10 = (double)v4;
    unint64_t v4 = *(void *)(v7 + 8 * v3);
    *(float *)&double v10 = v8 * v10 / (float)v9;
    float v11 = vabds_f32(a2, *(float *)&v10);
    if (v11 < v6)
    {
      uint64_t result = v3;
      float v6 = v11;
    }
    ++v3;
  }
  while (v3 != 99);
  return result;
}

uint64_t DspLib::LoudspeakerController::MaskingEstimator::nearestStopBand(DspLib::LoudspeakerController::MaskingEstimator *this, float a2)
{
  uint64_t v3 = 0;
  uint64_t result = 0;
  float v5 = fabsf(a2);
  uint64_t v6 = *((void *)this + 61);
  double v7 = *(double *)this;
  unint64_t v8 = *((void *)this + 5);
  do
  {
    float v9 = v7 * (double)*(unint64_t *)(v6 + 8 * v3) / (float)v8;
    float v10 = vabds_f32(a2, v9);
    if (v10 < v5)
    {
      float v5 = v10;
      uint64_t result = v3;
    }
    ++v3;
  }
  while (v3 != 99);
  return result;
}

void DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, DSPSplitComplex a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a15 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v16);
  a10.unint64_t realp = v18;
  a10.imagp = (float *)(((unint64_t)&v23 - v17) & 0xFFFFFFFFFFFFFFC0);
  a11 = v19;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(void **)(v20 + 48), v21, v22, &a10);
  DspLib::FFT::amplitude((uint64_t)&a10, *(float **)(a1 + 464), (uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 2);
  DspLib::multiply(*(float **)(a1 + 464), (uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 2, 0.5);
}

void DspLib::LoudspeakerController::MaskingEstimator::process(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v45 = a4;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  float v10 = (DSPComplex *)((char *)&v44 - v9);
  float v11 = *(const float **)(v7 + 16);
  uint64_t v12 = *(void *)(v7 + 24) - (void)v11;
  if (a3 <= v12 >> 2)
  {
    DspLib::multiply(v8, a3, v11, a3, (float *)v10);
    DspLib::clear((float *)v10 + v6 - (*(void *)(a1 + 40) - a3), *(void *)(a1 + 40) - a3);
  }
  else
  {
    DspLib::multiply(&v8[a3 - (v12 >> 2)], v12 >> 2, v11, v12 >> 2, (float *)v10);
    vDSP_Length v13 = *(void *)(a1 + 40) - ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    DspLib::clear((float *)v10 + v6 - v13, v13);
  }
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  MEMORY[0x1F4188790](v15);
  v46.unint64_t realp = v17;
  v46.imagp = (float *)(((unint64_t)&v44 - v16) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v47 = v18;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(void **)(a1 + 48), v10, v6, &v46);
  vDSP_Length v19 = *(void *)(a1 + 56);
  DspLib::FFT::amplitude((uint64_t)&v46, (float *)v10, v19);
  DspLib::multiply((float *)v10, v19, *(const float **)(a1 + 464));
  float v20 = *(float *)(a1 + 544);
  *(float *)(a1 + 544) = (float)(DspLib::peakiness((const float *)v10, v19) * 0.9) + (float)(v20 * 0.1);
  DspLib::square((float *)v10, v19);
  uint64_t v22 = *(void *)(a1 + 488);
  uint64_t v21 = *(void *)(a1 + 496);
  vDSP_Length v23 = *(void *)(a1 + 536);
  uint64_t v24 = *(void *)(a1 + 512);
  if (v19 >= v23) {
    uint64_t v25 = *(void *)(a1 + 536);
  }
  else {
    uint64_t v25 = v19;
  }
  DspLib::copy(v10, v25, (void *)(a1 + 64));
  unint64_t v26 = (v21 - v22) >> 3;
  if (v25) {
    uint64_t v27 = *(void *)(v22 + 8 * v25 - 8);
  }
  else {
    uint64_t v27 = 0;
  }
  if (v26 >= v19) {
    unint64_t v26 = v19;
  }
  unint64_t v28 = v26 - v23;
  if (v26 > v23)
  {
    float v29 = (float *)(v24 + 4 * v23);
    float v30 = (float *)(a1 + 4 * v23 + 64);
    uint64_t v31 = (uint64_t *)(v22 + 8 * v23);
    do
    {
      uint64_t v32 = *v31;
      if (*v31 - v27 == -1) {
        vDSP_Length v33 = v19 - v27;
      }
      else {
        vDSP_Length v33 = *v31 - v27;
      }
      float v34 = DspLib::sum((const float *)v10 + v27, v33);
      *float v30 = v34;
      float v35 = *v29++;
      *v30++ = v34 * v35;
      ++v31;
      uint64_t v27 = v32;
      --v28;
    }
    while (v28);
  }
  float v36 = *(float *)(a1 + 544);
  float v37 = DspLib::median(a1 + 64 + 4 * *(void *)(a1 + 552), *(void *)(a1 + 560) - *(void *)(a1 + 552));
  float v39 = DspLib::power2dBSafe(v38, v37, 1.0e-30) + 97.0;
  float v40 = v36 + -1.0;
  if (v36 <= 1.0) {
    float v40 = 0.0;
  }
  float v41 = v39 + (float)(fminf(v40, 4.0) * -4.0);
  float v42 = *(float *)(a1 + 576);
  if ((float)(v42 + *(float *)(a1 + 572)) < v41)
  {
    unint64_t v43 = v45;
LABEL_23:
    *(float *)(a1 + 576) = v41;
    float v42 = v41;
    goto LABEL_24;
  }
  float v41 = v41 + *(float *)(a1 + 568);
  unint64_t v43 = v45;
  if (v41 < v42) {
    goto LABEL_23;
  }
LABEL_24:
  DspLib::LoudspeakerController::YoYoSmoother::process((DspLib::LoudspeakerController::YoYoSmoother *)(a1 + 584), v42, v43);
}

void DspLib::LoudspeakerController::MaskingEstimator::status(uint64_t a1, char *__dst)
{
  DspLib::copy((void *)(a1 + 64), 100, __dst);
  uint64_t v3 = 0;
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0xDA24260u);
  do
  {
    *(int8x16_t *)&__dst[v3] = vbslq_s8((int8x16_t)vcgtq_f32(v4, *(float32x4_t *)&__dst[v3]), (int8x16_t)v4, *(int8x16_t *)&__dst[v3]);
    v3 += 16;
  }
  while (v3 != 400);
  DspLib::power2dB((float *)__dst, 0x64uLL, 1.0);
  DspLib::add((float *)__dst, 0x64uLL, 97.0);
  *((_DWORD *)__dst + 99) = 0;
}

void DspLib::LoudspeakerController::TargetInterpolator::process(float **this, float a2, vDSP_Length a3)
{
  if (a3)
  {
    if (*((unsigned char *)this + 16))
    {
      DspLib::fill(this[3], this[4] - this[3], a2);
      *((unsigned char *)this + 16) = 0;
    }
    else
    {
      DspLib::copy(&this[4][-(this[4] - this[3] - a3)], this[4] - this[3] - a3, this[3]);
      uint64_t v6 = &this[3][(uint64_t)this[1] + (void)*this - a3];
      float v7 = *(v6 - 1);
      if (v7 <= a2)
      {
        DspLib::fill(v6, a3, a2);
      }
      else
      {
        DspLib::linSpace((uint64_t)(v6 - 1), a3 + 1, v7, a2);
      }
    }
  }
}

DspLib::LoudspeakerController::Algorithm *DspLib::LoudspeakerController::Algorithm::Algorithm(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition);
  *(void *)uint64_t v2 = &unk_1F14A7E28;
  *(unsigned char *)(v2 + 296) = 1;
  *(void *)(v2 + 304) = 32;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_WORD *)(v2 + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v2 + 496) = 16843009;
  *(_WORD *)(v2 + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 257;
  *(void *)(v2 + 544) = 0;
  *(unsigned char *)(v2 + 552) = 0;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_WORD *)(v2 + 536) = 0;
  *(_DWORD *)(v2 + 556) = 1065353216;
  *(unsigned char *)(v2 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v2 + 564) = 0;
  *(unsigned char *)(v2 + 568) = 0;
  *(void *)(v2 + 592) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(unsigned char *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 624) = 0u;
  *(_OWORD *)(v2 + 64DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 656) = 0u;
  DspLib::LoudspeakerController::Algorithm::reset((DspLib::LoudspeakerController::Algorithm *)v2);
  return this;
}

void sub_1BB2E3DFC(_Unwind_Exception *a1)
{
  float v5 = (std::__shared_weak_count *)*((void *)v1 + 83);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  DspLib::LoudspeakerController::Algorithm::Algorithm(v1, v3, v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerController::Algorithm::initialize(DspLib::LoudspeakerController::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    double v5 = *((double *)this + 2);
    if (v5 == 4000.0)
    {
      uint64_t v6 = 3;
    }
    else if (v5 == 6000.0)
    {
      uint64_t v6 = 4;
    }
    else if (v5 == 8000.0)
    {
      uint64_t v6 = 6;
    }
    else
    {
      uint64_t v6 = 8;
      if (v5 != 11025.0 && v5 != 12000.0)
      {
        if (v5 == 16000.0)
        {
          uint64_t v6 = 12;
        }
        else
        {
          uint64_t v6 = 16;
          if (v5 != 22050.0 && v5 != 24000.0)
          {
            if (v5 == 32000.0)
            {
              uint64_t v6 = 24;
            }
            else
            {
              uint64_t v6 = 32;
              if (v5 != 44100.0 && v5 != 48000.0)
              {
                uint64_t v6 = 64;
                if (v5 != 88200.0 && v5 != 96000.0)
                {
                  BOOL v17 = v5 == 192000.0 || v5 == 176400.0;
                  uint64_t v6 = 128;
                  if (!v17) {
                    uint64_t v6 = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
    *((void *)this + 38) = v6;
    (*(void (**)(DspLib::LoudspeakerController::Algorithm *, uint64_t))(*(void *)this + 232))(this, 8 * v6);
    *((_WORD *)this + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    DspLib::clear((float *)this + 106, 4uLL);
    unsigned int v7 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::resize((uint64_t)this + 512, v7);
    unsigned int v8 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::resize((uint64_t *)this + 72, v8);
    uint64_t v9 = *((void *)this + 72);
    uint64_t v10 = *((void *)this + 73);
    if (v9 != v10)
    {
      uint64_t v11 = v9 + 2256;
      do
      {
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(v11 + 2104), 1uLL, 1uLL);
        int v19 = 0;
        long long v18 = DspLib::Biquad::kBypassSection;
        DspLib::Biquad::Filter::setCoefficients(v11 + 2104, (uint64_t)&v18, 1, 0, 0x41uLL);
        DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::BiquadModel *)(v11 - 2208), 4uLL);
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v11 - 2160));
        std::vector<DspLib::LinearDelay>::resize((uint64_t *)(v11 - 1000), 4uLL);
        DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::BiquadModel *)(v11 + 864), 4uLL);
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v11 + 912));
        DspLib::LoudspeakerController::SpeakerSystemModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)(v11 - 2048), *((double *)this + 2), *((char **)this + 38));
        DspLib::LoudspeakerController::SpeakerSystemModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)(v11 + 1024), *((double *)this + 2), *((char **)this + 38));
        uint64_t v12 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 216))(this);
        DspLib::LinearPhaseFilterbank::initialize(v11, v12);
        unint64_t v13 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 216))(this);
        DspLib::BandCombiner::initialize((DspLib::BandCombiner *)(v11 + 328), v13);
        unint64_t v14 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 216))(this);
        DspLib::GainSmoother::initialize((DspLib::GainSmoother *)(v11 + 600), v14);
        uint64_t v15 = v11 + 2288;
        v11 += 4544;
      }
      while (v15 != v10);
    }
    *((unsigned char *)this + 8) = 1;
    *((unsigned char *)this + 501) = 1;
    (*(void (**)(DspLib::LoudspeakerController::Algorithm *, char *, void))(*(void *)this + 264))(this, (char *)this + 264, 0);
  }
  (*(void (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 136))(this);
  return v4;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x193D4BB7E327A977 * ((v3 - *a1) >> 6);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 4544 * a2;
    while (v3 != v7)
      DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v3 - 4544));
    a1[1] = v7;
  }
}

void DspLib::LoudspeakerController::Algorithm::configureLogging(DspLib::LoudspeakerController::Algorithm *this, int a2)
{
  *((unsigned char *)this + 616) = a2;
  if (a2) {
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[23],void>((uint64_t)&v2, "ControllerFrameLog.bin");
  }

  DspLib::LoudspeakerController::Algorithm::uninitializeLogging(this);
}

void DspLib::LoudspeakerController::Algorithm::uninitializeLogging(DspLib::LoudspeakerController::Algorithm *this)
{
  char v2 = (DspLib::Logger *)*((void *)this + 78);
  if (v2)
  {
    DspLib::Logger::FlushLog(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 79);
    *((_OWORD *)this + 39) = 0u;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  unint64_t v4 = (DspLib::Logger *)*((void *)this + 80);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 81);
    *((_OWORD *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  unint64_t v6 = (DspLib::Logger *)*((void *)this + 82);
  if (v6)
  {
    DspLib::Logger::FlushLog(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 83);
    *((_OWORD *)this + 41) = 0u;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void DspLib::LoudspeakerController::Algorithm::uninitialize(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2 = *((void *)this + 72);
  uint64_t v3 = *((void *)this + 73);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 72);
    do
    {
      uint64_t v6 = v2 + 4544 * v4;
      uint64_t v7 = v6 + 2544;
      uint64_t v8 = v6 + 2504;
      DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 4360));
      DspLib::LinearDelay::setLength((float **)v5, 0);
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v5 + 1256));
      DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(v5 + 4440), 0);
      uint64_t v9 = 2376;
      do
      {
        uint64_t v10 = v5 + v9;
        *(void *)(v10 + 8) = *(void *)(v5 + v9);
        v9 += 24;
      }
      while (v10 + 24 != v5 + 2496);
      *(void *)(v8 + 32) = 0;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      v5 += 4544;
      ++v4;
      *(void *)(v7 + 32) = 0;
    }
    while (v5 != v3);
  }
  DspLib::LoudspeakerController::Algorithm::uninitializeLogging(this);
  *((unsigned char *)this + 8) = 0;
}

uint64_t DspLib::LoudspeakerController::Algorithm::checkParameterConstraints(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 264);
  unint64_t v3 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u));
  if (v3 > (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this)) {
    return 0;
  }
  float v4 = DspLib::AlgorithmParametersInstance::operator[](v2, 0xCu);
  if (v4 < DspLib::AlgorithmParametersInstance::operator[](v2, 0xDu)) {
    return 0;
  }
  if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
  {
    int v6 = 0;
LABEL_6:
    uint64_t v7 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)v2, v6 + 10);
    if (v7[4] <= v7[3] && v7[5] <= v7[6])
    {
      uint64_t v8 = 0;
      char v9 = 1;
      while (1)
      {
        char v10 = v9;
        uint64_t v11 = &v7[v8];
        if (v11[9] > *(float *)((char *)v7 + ((4 * v8) | 0x28)) || *(float *)((char *)v7 + ((4 * v8) | 0x30)) > v11[13]) {
          break;
        }
        char v9 = 0;
        uint64_t v8 = 1;
        if ((v10 & 1) == 0)
        {
          if (v7[14] <= v7[15])
          {
            uint64_t v12 = 0;
            while (1)
            {
              float v13 = v7[v12 + 18];
              if (v7[v12 + 17] > v13 || v13 > v7[v12 + 19]) {
                break;
              }
              if (++v12 == 3)
              {
                if (v3 && v7[30] >= (float)v3) {
                  return 0;
                }
                if (++v6 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this)) {
                  goto LABEL_6;
                }
                goto LABEL_20;
              }
            }
          }
          return 0;
        }
      }
    }
    return 0;
  }
LABEL_20:
  unint64_t v14 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)v2, 1u);
  if (v14[26] != 0.0)
  {
    float v15 = v14[31];
    if (v14[28] >= v15 || v15 >= v14[34]) {
      return 0;
    }
  }
  return 1;
}

BOOL DspLib::LoudspeakerController::Algorithm::configureLookaheads(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 264);
  unint64_t v3 = vcvtad_u64_f64(*((double *)this + 2) * DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) / 1000.0);
  unint64_t v4 = vcvtad_u64_f64(*((double *)this + 2) * DspLib::AlgorithmParametersInstance::operator[](v2, 0x10u) / 1000.0);
  unint64_t v5 = *((void *)this + 38);
  unint64_t v6 = v3 - 2 * v5;
  if (v6 >= v4) {
    unint64_t v6 = v4;
  }
  if (v5 <= v6) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = *((void *)this + 38);
  }
  uint64_t v8 = 0;
  unint64_t v9 = vcvtad_u64_f64(*((double *)this + 2) * DspLib::AlgorithmParametersInstance::operator[](v2, 0x11u) / 1000.0);
  if (v3 - v5 - v7 < v9) {
    unint64_t v9 = v3 - v5 - v7;
  }
  if (v5 > v9) {
    unint64_t v9 = v5;
  }
  unint64_t v10 = *((void *)this + 38);
  unint64_t v11 = (v3 - v7 - v9) / v10;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  unint64_t v12 = 2 * v11;
  double v13 = (double)v11;
  do
  {
    unint64_t v14 = qword_1BB875BD8[v8];
    double v15 = v13 / (double)v14;
    if (v15 <= 1.0) {
      char v16 = 0;
    }
    else {
      char v16 = vcvtpd_u64_f64(log2(v15));
    }
    unint64_t v17 = v14 << v16;
    if (v17 < v12) {
      unint64_t v12 = v17;
    }
    ++v8;
  }
  while (v8 != 4);
  uint64_t v18 = *((void *)this + 41);
  BOOL result = v12 != v18;
  if (v12 == v18)
  {
    unint64_t v20 = *((void *)this + 42);
  }
  else
  {
    unint64_t v20 = v12 * v10;
    *((void *)this + 41) = v12;
    *((void *)this + 42) = v12 * v10;
  }
  if (v20 + 2 * v10 <= v3) {
    unint64_t v21 = v3;
  }
  else {
    unint64_t v21 = v20 + 2 * v10;
  }
  unint64_t v22 = v21 - (v20 + v5);
  if (v22 >= v4) {
    unint64_t v22 = v4;
  }
  if (v5 > v22) {
    unint64_t v22 = v5;
  }
  unint64_t v23 = v22 / v10;
  if (*((void *)this + 46) == v23)
  {
    uint64_t v24 = *((void *)this + 45);
  }
  else
  {
    uint64_t v24 = v23 * v10;
    *((void *)this + 45) = v23 * v10;
    *((void *)this + 46) = v23;
    BOOL result = 1;
  }
  unint64_t v25 = (v21 - v20 - v24) / v10;
  if (v25 <= 1) {
    unint64_t v25 = 1;
  }
  if (v25 != *((void *)this + 48))
  {
    *((void *)this + 47) = v25 * v10;
    *((void *)this + 48) = v25;
    BOOL result = 1;
  }
  unint64_t v26 = v23 + v25;
  *((void *)this + 43) = v26 * v10;
  *((void *)this + 44) = v26;
  unint64_t v27 = v12 + v26;
  *((void *)this + 39) = v27;
  *((void *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v27 * v10;
  return result;
}

void DspLib::LoudspeakerController::Algorithm::configureChannel(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(a1 + 576);
  uint64_t v14 = v13 + 4544 * a2;
  uint64_t v15 = *(void *)(a1 + 320);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  DspLib::LinearDelay::setLength((float **)v14, v16 + v15);
  uint64_t v17 = *(void *)(a1 + 320);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  DspLib::LinearDelay::setLength((float **)(v14 + 1160), v18 + v17);
  uint64_t v19 = *(void *)(a1 + 320);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  DspLib::LinearDelay::setLength((float **)(v14 + 1184), v20 + v19);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  DspLib::LinearDelay::setLength((float **)(v14 + 1208), v22 + v21);
  DspLib::LinearDelay::setLength((float **)(v14 + 1232), *(void *)(a1 + 312) + a3);
  unint64_t v23 = *(float ***)(v14 + 1256);
  uint64_t v24 = *(float ***)(v14 + 1264);
  if (v23 != v24)
  {
    unint64_t v25 = *(void *)(a1 + 312) + a3;
    do
    {
      DspLib::LinearDelay::setLength(v23, v25);
      v23 += 3;
    }
    while (v23 != v24);
  }
  uint64_t v26 = v13 + 4544 * a2;
  float v27 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)(a1 + 264), 0xCu);
  DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(v26 + 4440), (unint64_t)(*(double *)(a1 + 16) / (double)*(unint64_t *)(a1 + 304) * (float)(v27 / 1000.0)));
  unint64_t v28 = (double *)(v26 + 1280);
  double v29 = *(double *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 320);
  unint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1) + v30;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  DspLib::LoudspeakerController::MaskingEstimator::configure(v26 + 1280, v29, v31, v32);
  uint64_t v33 = DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)(a1 + 264), (int)a2 + 10);
  uint64_t v34 = *(void *)(a1 + 512) + 16 * a2;
  *(_DWORD *)uint64_t v34 = vcvtas_u32_f32(*(float *)(v33 + 116));
  *(void *)(v34 + 8) = (unint64_t)*(float *)(v33 + 120);
  *(_DWORD *)(v26 + 32) = *(_DWORD *)(v33 + 64);
  int v35 = *(_DWORD *)v33;
  *(_DWORD *)(v26 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)v33;
  *(_DWORD *)(v26 + 3112) = v35;
  *(_DWORD *)(v26 + 1104) = *(_DWORD *)(v33 + 8);
  DspLib::copy((void *)(v33 + 36), 3, (void *)(v26 + 1108));
  DspLib::copy((void *)(v33 + 48), 4, (void *)(v26 + 1120));
  float v36 = *(float *)(v26 + 1120);
  float v37 = *(float *)(v26 + 1124);
  float v38 = 1.0;
  float v39 = 1.0;
  if (v37 > v36) {
    float v39 = (float)(*(float *)(v26 + 1112) - *(float *)(v26 + 1108)) / (float)(v37 - v36);
  }
  *(float *)(v26 + 1136) = v39;
  float v40 = *(float *)(v26 + 1128);
  if (v40 > v37) {
    float v38 = (float)(*(float *)(v26 + 1116) - *(float *)(v26 + 1112)) / (float)(v40 - v37);
  }
  *(float *)(v26 + 114DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v38;
  float v42 = *(float *)(v26 + 1128);
  float v41 = *(float *)(v26 + 1132);
  if (v41 <= v42) {
    *(_DWORD *)(v26 + 1132) = 1065353216;
  }
  else {
    *(float *)(v13 + 4544 * a2 + 1144) = (float)(2.0 - *(float *)(v26 + 1116)) / (float)(v41 - v42);
  }
  DspLib::LoudspeakerController::MaskingEstimator::setMaskFreqs((DspLib::LoudspeakerController::MaskingEstimator *)(v26 + 1280), *(float *)(v33 + 20), *(float *)(v33 + 24));
  uint64_t v43 = v13 + 4544 * a2;
  float32x2_t v44 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v33 + 28)), *v28));
  float v45 = *v28 * *(float *)(v33 + 108) / 1000.0;
  DspLib::LoudspeakerController::YoYoSmoother::configure(v43 + 1864, v44.f32[0], v44.f32[1], v45, *(float *)(v33 + 112));
  *(float *)(v43 + 4228) = DspLib::dB2Amp(v46, -*(float *)(v33 + 88));
  *(void *)(v43 + 4232) = *(float *)(v33 + 92) != 0.0;
  uint64_t v48 = 5;
  if (*(float *)(v33 + 96) != 0.0) {
    uint64_t v48 = 4;
  }
  *(void *)(v43 + 424DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v48;
  *(void *)(v43 + 4248) = vcvtad_u64_f64(*(double *)(a1 + 16) * 0.00100000005);
  float v49 = *(float *)(v33 + 12);
  *(float *)(v43 + 1152) = v49;
  if (v49 >= *(float *)(v33 + 16)) {
    float v49 = *(float *)(v33 + 16);
  }
  *(float *)(v43 + 1148) = v49;
  *(float *)(v43 + 428DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Amp(v47, -*(float *)(v33 + 100));
  uint64_t v50 = *(void *)(a1 + 344);
  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  if (*(void *)(v43 + 1920) != v50 || *(void *)(v13 + 4544 * a2 + 1928) != v51)
  {
    *(void *)(v43 + 192DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v50;
    uint64_t v52 = v13 + 4544 * a2;
    *(void *)(v52 + 1928) = v51;
    std::vector<float>::resize(v52 + 1944, v51 + v50);
    *(unsigned char *)(v52 + 1936) = 1;
  }
  uint64_t v53 = v13 + 4544 * a2;
  uint64_t v54 = *(void *)(a1 + 344);
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  if (*(void *)(v53 + 1968) != v54 || *(void *)(v13 + 4544 * a2 + 1976) != v55)
  {
    *(void *)(v53 + 1968) = v54;
    uint64_t v56 = v13 + 4544 * a2;
    *(void *)(v56 + 1976) = v55;
    std::vector<float>::resize(v56 + 1992, v55 + v54);
    *(unsigned char *)(v56 + 1984) = 1;
  }
  uint64_t v57 = v13 + 4544 * a2;
  uint64_t v58 = *(void *)(a1 + 352);
  if (*(void *)(v57 + 2016) != v58 || *(void *)(v13 + 4544 * a2 + 2024) != 8)
  {
    *(void *)(v57 + 2016) = v58;
    uint64_t v59 = v13 + 4544 * a2;
    *(void *)(v59 + 2024) = 8;
    std::vector<float>::resize(v59 + 2040, v58 + 8);
    *(unsigned char *)(v59 + 2032) = 1;
  }
  uint64_t v60 = 0;
  uint64_t v61 = v13 + 4544 * a2;
  do
  {
    uint64_t v62 = v61 + v60;
    uint64_t v63 = *(void *)(a1 + 352);
    if (*(void *)(v61 + v60 + 2064) != v63 || *(void *)(v62 + 2072) != 8)
    {
      *(void *)(v62 + 2064) = v63;
      *(void *)(v62 + 2072) = 8;
      std::vector<float>::resize(v62 + 2088, v63 + 8);
      *(unsigned char *)(v62 + 208DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
    }
    v60 += 48;
  }
  while (v60 != 192);
  uint64_t v64 = 0;
  double v65 = *(double *)(a1 + 16);
  do
  {
    float v66 = *(float *)(v33 + 68 + v64) / v65;
    *(float *)&v107[v64] = v66;
    v64 += 4;
  }
  while (v64 != 20);
  float v67 = (void *)(v13 + 4544 * a2);
  DspLib::LinearPhaseFilterbank::configure(v67 + 282, *(void *)(a1 + 336), (uint64_t)v107, 5uLL);
  uint64_t v68 = v67 + 297;
  for (uint64_t i = 318; i != 323; ++i)
  {
    unint64_t v70 = v67[294];
    unint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    if (v70 <= v71) {
      unint64_t v72 = v71;
    }
    else {
      unint64_t v72 = v70;
    }
    std::vector<float>::resize((uint64_t)v68, *(void *)(a1 + 344) + v72);
    uint64_t v73 = *v68;
    v68 += 3;
    v67[i] = v73;
  }
  uint64_t v74 = v13 + 4544 * a2;
  DspLib::BandCombiner::configure((unint64_t *)(v74 + 2584), 5uLL, *(void *)(a1 + 376), a9, (float)a4);
  DspLib::GainSmoother::configure((DspLib::GainSmoother *)(v74 + 2856), *(void *)(a1 + 376), (float)a5);
  if (*(unsigned char *)(a1 + 552)) {
    operator new();
  }
  uint64_t v76 = v13 + 4544 * a2;
  uint64_t v77 = *(void *)(v76 + 4472);
  *(void *)(v76 + 4472) = 0;
  if (v77) {
    std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100](v76 + 4472, v77);
  }
  LODWORD(v95) = *(_DWORD *)(v33 + 4);
  *(void *)((char *)&v95 + 4) = *(void *)(a6 + 4);
  BOOL v78 = *(float *)(a6 + 12) != 0.0;
  int v96 = *(_DWORD *)(a6 + 16);
  double v79 = *(double *)(a1 + 16) / 1000.0;
  unsigned int v80 = vcvtad_u64_f64(v79 * *(float *)(a6 + 20));
  uint64_t v98 = *(void *)(a6 + 24);
  BOOL v81 = *(float *)(a6 + 32) != 0.0;
  int v100 = *(_DWORD *)(a6 + 36);
  unsigned int v82 = vcvtad_u64_f64(v79 * *(float *)(a6 + 40));
  uint64_t v102 = *(void *)(a6 + 44);
  float v83 = *(float *)(a6 + 100);
  BOOL v84 = *(float *)(a6 + 104) == 0.0;
  long long v85 = *(_OWORD *)(a6 + 128);
  long long v104 = *(_OWORD *)(a6 + 112);
  long long v105 = v85;
  BYTE12(v95) = v78;
  unsigned int v97 = v80;
  BOOL v99 = v81;
  unsigned int v101 = v82;
  char v86 = !v84;
  char v103 = v86;
  int v106 = *(_DWORD *)(a6 + 144);
  uint64_t v87 = v13 + 4544 * a2;
  *(float *)(v87 + 4348) = DspLib::dB2Amp(v75, -v83);
  float v88 = (float)*(unint64_t *)(a1 + 360) * 5.0;
  *(void *)(v87 + 192) = (unint64_t)v88;
  DspLib::LoudspeakerController::SpeakerSystemModel::configure(v87 + 208, a8, &v95, v88);
  *(void *)(v87 + 3264) = (unint64_t)v88;
  DspLib::LoudspeakerController::SpeakerSystemModel::configure(v87 + 3280, a8, &v95, v88);
  *(_DWORD *)(v87 + 4352) = *(_DWORD *)(v33 + 104);
  *(_DWORD *)(v87 + 4512) = *(_DWORD *)(v33 + 124);
  if (*(unsigned char *)(*(void *)(a1 + 576) + 4544 * a2 + 1096))
  {
    float64x2_t v89 = (float **)(v13 + 4544 * a2 + 4488);
    uint64_t v90 = *(void *)(a1 + 320);
    uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    DspLib::LinearDelay::setLength(v89, v91 + v90);
  }
}

char *DspLib::LoudspeakerController::Algorithm::setParameters(DspLib::LoudspeakerController::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  BOOL result = DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((unsigned char *)this + 8))
  {
    BOOL result = (char *)DspLib::LoudspeakerController::Algorithm::checkParameterConstraints(this);
    if (result)
    {
      *((void *)this + 63) = (unint64_t)DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u);
      *((unsigned char *)this + 536) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xAu) != 0.0;
      *((unsigned char *)this + 568) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u) != 0.0;
      *((unsigned char *)this + 296) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u) >= 0.5;
      BOOL v5 = DspLib::LoudspeakerController::Algorithm::configureLookaheads(this);
      unint64_t v6 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 216))(this);
      unint64_t v7 = *((void *)this + 38);
      uint64_t v8 = DspLib::AlgorithmParametersInstance::group((DspLib::LoudspeakerController::Algorithm *)((char *)this + 264), 1u);
      uint64_t v9 = v8;
      uint64_t v10 = 0;
      uint64_t v11 = 408;
      double v12 = *((double *)this + 2) / (double)*((unint64_t *)this + 38);
      do
      {
        uint64_t v13 = (float *)((char *)this + v11);
        *(v13 - 4) = *(float *)(v8 + v11 - 340);
        *uint64_t v13 = *(float *)(v8 + v11 - 324) * 0.01;
        *(double *)&v33[v10] = v12 * *(float *)(v8 + v11 - 356);
        v11 += 4;
        v10 += 8;
      }
      while (v10 != 32);
      *((unsigned char *)this + 441) = *(float *)v8 != 0.0;
      *((unsigned char *)this + 552) = *(float *)(v8 + 104) != 0.0;
      *((_DWORD *)this + 139) = *(_DWORD *)(v8 + 108);
      *((unsigned char *)this + 496) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u) != 0.0;
      *((unsigned char *)this + 497) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 5u) != 0.0;
      *((unsigned char *)this + 498) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 6u) != 0.0;
      *((unsigned char *)this + 499) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 7u) != 0.0;
      *((unsigned char *)this + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 8u) != 0.0;
      *((unsigned char *)this + 537) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xBu) != 0.0;
      float v14 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xCu);
      unint64_t v15 = vcvtad_u64_f64(*((double *)this + 2)/ (double)*((unint64_t *)this + 38)* (float)(v14 - DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xDu))/ 1000.0);
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      *((void *)this + 68) = v15;
      *((unsigned char *)this + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xEu) != 0.0;
      float v16 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xFu);
      float v17 = *((double *)this + 2);
      *((float *)this + 141) = expf(-1.0 / (float)((float)(v16 * v17) / 1000.0));
      float v18 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u);
      double v19 = *((double *)this + 2);
      float v20 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x12u);
      double v21 = *((double *)this + 2);
      float v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
      double v23 = *((double *)this + 2);
      BOOL result = (char *)(*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
      if (result)
      {
        unint64_t v24 = 0;
        uint64_t v25 = v6 / v7;
        float v27 = v21 * v20 / 1000.0;
        uint64_t v28 = v27 >= 0.0;
        if (v27 < 0.0) {
          float v27 = 0.0;
        }
        float v29 = v19 * v18 / 1000.0;
        unint64_t v30 = (unint64_t)v29;
        uint64_t v31 = LODWORD(v27) | (unint64_t)(v28 << 32);
        float v26 = v23 * v22 / 1000.0;
        unint64_t v32 = (unint64_t)v26;
        do
        {
          DspLib::LoudspeakerController::Algorithm::configureChannel((uint64_t)this, v24++, v25, v30, v32, v9, 37, (uint64_t)v33, v31);
          BOOL result = (char *)(*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
        }
        while (v24 < result);
      }
      if (v5) {
        return (char *)(*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 136))(this);
      }
    }
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::setSpeakerModel(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v7 = (float *)a2;
  uint64_t v8 = *(void *)(a1 + 576);
  switch(a4)
  {
    case 1:
      uint64_t v9 = v8 + 4544 * a5;
      DspLib::Biquad::Filter::setCoefficients(v9 + 48, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 120, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 3120, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 3192, (uint64_t)v7, a3, 0, 0x41uLL);
      float v10 = 1.0;
      if (a3)
      {
        uint64_t v11 = &v7[5 * a3];
        do
        {
          float v10 = v10 * (float)((float)((float)(*v7 + v7[1]) + v7[2]) / (float)((float)(v7[3] + 1.0) + v7[4]));
          v7 += 5;
        }
        while (v7 != v11);
      }
      double v12 = (float *)(v8 + 4544 * a5);
      v12[64] = v10;
      v12[65] = (float)(v12[67] * v10) + 1.0;
      v12[832] = v10;
      v12[833] = (float)(v12[835] * v10) + 1.0;
      return;
    case 2:
      uint64_t v13 = v8 + 4544 * a5;
      DspLib::Biquad::Filter::setCoefficients(v13 + 368, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v13 + 440, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v13 + 3440, (uint64_t)v7, a3, 0, 0x41uLL);
      uint64_t v14 = v13 + 3512;
      goto LABEL_9;
    case 3:
      uint64_t v15 = v8 + 4544 * a5;
      DspLib::Biquad::Filter::setCoefficients(v15 + 520, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v15 + 592, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v15 + 3592, (uint64_t)v7, a3, 0, 0x41uLL);
      uint64_t v14 = v15 + 3664;
      goto LABEL_9;
    case 6:
      uint64_t v14 = v8 + 4544 * a5 + 4360;
LABEL_9:
      DspLib::Biquad::Filter::setCoefficients(v14, (uint64_t)v7, a3, 0, 0x41uLL);
      break;
    default:
      return;
  }
}

void DspLib::LoudspeakerController::Algorithm::setPassiveRadiatorDisplacementModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 576) + 4544 * a4;
  DspLib::Biquad::Filter::setCoefficients(v6 + 944, a2, a3, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients(v6 + 1016, a2, a3, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients(v6 + 4016, a2, a3, 0, 0x41uLL);

  DspLib::Biquad::Filter::setCoefficients(v6 + 4088, a2, a3, 0, 0x41uLL);
}

float DspLib::LoudspeakerController::Algorithm::setVoiceCoilModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 4);
  uint64_t v6 = (float *)(*(void *)(a1 + 576) + 4544 * a3);
  float v12 = *(float *)a2;
  float v4 = v12;
  uint64_t v13 = v5;
  uint64_t v14 = *(void *)(a2 + 12);
  float v10 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v6 + 186), (uint64_t)&v12, 1, 0, 0x41uLL);
  v6[206] = v10 + 1.0;
  v6[208] = (float)(v4 + v4) / (float)(v10 + 1.0);
  uint64_t v8 = *(void *)(a2 + 4);
  float v12 = *(float *)a2;
  float v7 = v12;
  uint64_t v13 = v8;
  uint64_t v14 = *(void *)(a2 + 12);
  float v11 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v6 + 954), (uint64_t)&v12, 1, 0, 0x41uLL);
  v6[974] = v11 + 1.0;
  float result = (float)(v7 + v7) / (float)(v11 + 1.0);
  v6[976] = result;
  return result;
}

float DspLib::LoudspeakerController::Algorithm::setMagnetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = (float *)(*(void *)(a1 + 576) + 4544 * a3);
  uint64_t v6 = *(void *)(a2 + 4);
  float v12 = *(float *)a2;
  float v5 = v12;
  uint64_t v13 = v6;
  uint64_t v14 = *(void *)(a2 + 12);
  float v10 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v4 + 168), (uint64_t)&v12, 1, 0, 0x41uLL);
  v4[207] = v10 + 1.0;
  v4[209] = (float)(v5 + v5) / (float)(v10 + 1.0);
  uint64_t v8 = *(void *)(a2 + 4);
  float v12 = *(float *)a2;
  float v7 = v12;
  uint64_t v13 = v8;
  uint64_t v14 = *(void *)(a2 + 12);
  float v11 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v4 + 936), (uint64_t)&v12, 1, 0, 0x41uLL);
  v4[975] = v11 + 1.0;
  float result = (float)(v7 + v7) / (float)(v11 + 1.0);
  v4[977] = result;
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::setAmbientTemperature(uint64_t this, float a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(this + 576) + 4544 * a3;
  *(float *)(v3 + 84DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  *(float *)(v3 + 3912) = a2;
  return this;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findCLTempMatch(uint64_t this, float a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(this + 576) + 4544 * a3;
  if (*(void *)(v3 + 4448) != *(void *)(v3 + 4440))
  {
    uint64_t v5 = this;
    uint64_t v6 = (char **)MEMORY[0x1F4188790](v3 + 4440);
    uint64_t v8 = (const float *)((char *)v15 - v7);
    unint64_t v9 = *(void *)(v5 + 544);
    float v11 = DspLib::CircularDelay::read(v6, v10, (char *)v15 - v7, v9);
    vDSP_Length v12 = *(void *)(v5 + 544);
    MEMORY[0x1F4188790](v11);
    uint64_t v14 = (const float *)((char *)v15 - v13);
    DspLib::add(v8, v9, (float *)((char *)v15 - v13), -a2);
    return DspLib::minmgvi(v14, v12);
  }
  return this;
}

uint64_t DspLib::LoudspeakerController::Algorithm::setClosedLoopTemperature(DspLib::LoudspeakerController::Algorithm *this, float a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 72);
  uint64_t result = DspLib::LoudspeakerController::Algorithm::findCLTempMatch((uint64_t)this, a2, a3);
  if (vabds_f32(a2, v7) > 0.1)
  {
    float v8 = a2 - v7;
    uint64_t v9 = v5 + 4544 * a3;
    *(float *)(v9 + 844) = v8 + *(float *)(v9 + 844);
    *(float *)(v9 + 3916) = v8 + *(float *)(v9 + 3916);
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::decayClosedLoopTemperatureOffset(DspLib::LoudspeakerController::Algorithm *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 72);
  uint64_t v4 = v3 + 4544 * a2;
  unint64_t v5 = *(void *)(v4 + 4432) + a3;
  *(void *)(v4 + 4432) = v5;
  unint64_t v6 = *((void *)this + 38);
  if (v6 <= v5)
  {
    float v7 = (unint64_t *)(v4 + 4432);
    float v8 = (float *)(v3 + 4544 * a2);
    v8[211] = v8[211] * powf(1.0 - v8[207], (float)(v5 / v6));
    v8[979] = v8[979] * powf(1.0 - v8[975], (float)(v5 / v6));
    *float v7 = v5 % v6;
  }
}

uint64_t DspLib::LoudspeakerController::Algorithm::resetClosedLoopTemperature(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 576);
  for (uint64_t i = *(void *)(this + 584); v1 != i; v1 += 4544)
  {
    *(_DWORD *)(v1 + 844) = 0;
    *(_DWORD *)(v1 + 3916) = 0;
  }
  return this;
}

void *DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(uint64_t a1, void *__src)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 424;
  uint64_t result = DspLib::copy(__src, 4, (void *)(a1 + 424));
  *(unsigned char *)(a1 + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  if (*(unsigned char *)(a1 + 499))
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 476;
    uint64_t v22 = a1 + 444;
    uint64_t v23 = a1 + 476;
    uint64_t v7 = 4332;
    do
    {
      if (*(float *)(v6 + 4 * v5) > *(float *)(v3 + 4 * v5))
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        __n128 v9 = MEMORY[0x1F4188790](v8);
        float v11 = (char *)&v21 - v10;
        unsigned int v12 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v9);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v13 = 0;
          uint64_t v14 = v7;
          do
          {
            *(_DWORD *)&v11[4 * v13++] = *(_DWORD *)(*(void *)(a1 + 576) + v14);
            v14 += 4544;
          }
          while (v13 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        float v15 = (float)(*(float *)(*(void *)(a1 + 576) + 4348) * *(float *)(*(void *)(a1 + 576) + 4348))
            * *(float *)(v22 + 4 * v5);
        if (*(float *)(v3 + 4 * v5) >= v15) {
          float v15 = *(float *)(v3 + 4 * v5);
        }
        DspLib::waterFillingSolution((uint64_t)v11, v12, v15);
        float v17 = v16;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        if (result)
        {
          unint64_t v18 = 0;
          uint64_t v19 = 3296;
          do
          {
            float v20 = *(float *)&v11[4 * v18];
            if (v20 >= v17) {
              float v20 = v17;
            }
            *(float *)(*(void *)(a1 + 576) + v19 + 4 * v5) = v20;
            ++v18;
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            v19 += 4544;
          }
          while (v18 < result);
        }
        uint64_t v6 = v23;
      }
      ++v5;
      v7 += 4;
    }
    while (v5 != 4);
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::reset(DspLib::LoudspeakerController::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)this + 72);
    for (uint64_t i = *((void *)this + 73); v2 != i; v2 += 4544)
    {
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 4408));
      DspLib::clear(*(float **)v2, (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 2);
      *(void *)(v2 + 24) = (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 2;
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 96));
      DspLib::LoudspeakerController::SpeakerSystemModel::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)(v2 + 208));
      DspLib::clear(*(float **)(v2 + 1160), (uint64_t)(*(void *)(v2 + 1168) - *(void *)(v2 + 1160)) >> 2);
      DspLib::clear(*(float **)(v2 + 1184), (uint64_t)(*(void *)(v2 + 1192) - *(void *)(v2 + 1184)) >> 2);
      DspLib::clear(*(float **)(v2 + 1208), (uint64_t)(*(void *)(v2 + 1216) - *(void *)(v2 + 1208)) >> 2);
      DspLib::clear(*(float **)(v2 + 1232), (uint64_t)(*(void *)(v2 + 1240) - *(void *)(v2 + 1232)) >> 2);
      DspLib::MultiChannelLinearDelay::reset((DspLib::MultiChannelLinearDelay *)(v2 + 1256));
      *(_DWORD *)(v2 + 1824) = 1065353216;
      *(_DWORD *)(v2 + 1856) = 0;
      *(void *)(v2 + 1904) = 0;
      *(_DWORD *)(v2 + 1912) = 0;
      *(unsigned char *)(v2 + 2032) = 1;
      *(unsigned char *)(v2 + 1984) = 1;
      uint64_t v4 = 2080;
      *(unsigned char *)(v2 + 1936) = 1;
      do
      {
        *(unsigned char *)(v2 + v4) = 1;
        v4 += 48;
      }
      while (v4 != 2272);
      DspLib::LinearPhaseFilterbank::reset((float **)(v2 + 2256));
      uint64_t v5 = (void *)(v2 + 2496);
      uint64_t v6 = 2376;
      do
      {
        uint64_t v7 = v2 + v6;
        DspLib::clear(*(float **)(v2 + v6), (uint64_t)(*(void *)(v2 + v6 + 8) - *(void *)(v2 + v6)) >> 2);
        v6 += 24;
      }
      while ((void *)(v7 + 24) != v5);
      uint64_t v8 = *((void *)this + 43);
      void *v5 = v8;
      uint64_t v9 = 2504;
      for (uint64_t j = 2376; j != 2496; j += 24)
      {
        *(void *)(v2 + v9) = *(void *)(v2 + j) + 4 * v8;
        v9 += 8;
      }
      DspLib::BandCombiner::reset((float **)(v2 + 2584));
      DspLib::GainSmoother::reset((DspLib::GainSmoother *)(v2 + 2856));
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 3168));
      DspLib::LoudspeakerController::SpeakerSystemModel::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)(v2 + 3280));
      DspLib::clear((float *)(v2 + 4284), 4uLL);
      DspLib::clear((float *)(v2 + 4300), 4uLL);
      DspLib::clear((float *)(v2 + 4332), 4uLL);
      DspLib::fill((float *)(v2 + 4316), 4uLL, 1.0);
      *(void *)(v2 + 4272) = 1065353216;
      *(_DWORD *)(v2 + 4224) = 1065353216;
      *(_OWORD *)(v2 + 4256) = 0u;
      *(_OWORD *)(v2 + 4208) = xmmword_1BB875820;
      *(_OWORD *)(v2 + 4176) = xmmword_1BB875830;
      *(_OWORD *)(v2 + 4192) = xmmword_1BB875840;
      *(void *)(v2 + 4432) = 0;
      uint64_t v11 = *(void *)(v2 + 4472);
      if (v11)
      {
        DspLib::fill(*(float **)v11, (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2, 0.0);
        *(_DWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
        *(void *)(v11 + 48) = 0;
      }
      *(_DWORD *)(v2 + 448DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
      *(_OWORD *)(v2 + 4516) = xmmword_1BB875840;
      DspLib::clear(*(float **)(v2 + 4488), (uint64_t)(*(void *)(v2 + 4496) - *(void *)(v2 + 4488)) >> 2);
    }
    if (*((unsigned char *)this + 501))
    {
      uint64_t v12 = *((void *)this + 72);
      if (*((void *)this + 73) != v12)
      {
        uint64_t v13 = 0;
        unsigned int v14 = 1;
        do
        {
          DspLib::LoudspeakerController::ThermalNVM::read((uint64_t)&DspLib::LoudspeakerController::gThermalRecord, v12 + 4544 * v13 + 672, (float32x2_t *)(v12 + 4544 * v13 + 3744), v13, *((double *)this + 2) / (double)*((unint64_t *)this + 38));
          uint64_t v13 = v14;
          uint64_t v12 = *((void *)this + 72);
        }
        while (0x193D4BB7E327A977 * ((*((void *)this + 73) - v12) >> 6) > (unint64_t)v14++);
      }
    }
    DspLib::LoudspeakerController::Algorithm::resetLogging(this);
  }
}

void DspLib::MultiChannelLinearDelay::reset(DspLib::MultiChannelLinearDelay *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  while (v1 != v2)
  {
    uint64_t v3 = *(float **)v1;
    uint64_t v4 = *(void *)(v1 + 8);
    v1 += 24;
    DspLib::clear(v3, (v4 - (uint64_t)v3) >> 2);
  }
}

void DspLib::LoudspeakerController::ThermalNVM::read(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, double a5)
{
  uint64_t v5 = (long long *)(a1 + 32 * a4);
  long long v19 = *v5;
  long long v20 = v5[1];
  if (*((void *)&v20 + 1))
  {
    unint64_t v8 = vcvtad_u64_f64((float)(DspLib::elapsedTimeInMilliseconds((DspLib *)((char *)&v20 + 8), (unint64_t *)a2)
                              * 0.001) * a5);
    *(void *)(a2 + 144) = v19;
    *(float *)(a2 + 172) = *(float *)(a2 + 172)
                         + (float)((float)(*(float *)&v20 + *((float *)&v20 + 1))
                                 - (float)(*(float *)(a2 + 168) + *(float *)(a2 + 172)));
    __asm { FMOV            V9.2S, #1.0 }
    *(float *)v14.i32 = (float)v8;
    *(float32x2_t *)v15.f32 = vsub_f32(_D9, *(float32x2_t *)(a2 + 152));
    simd_float4 y = (simd_float4)vdupq_lane_s32(v14, 0).u64[0];
    float v18 = (float)v8;
    *(float32x2_t *)(a2 + 144) = vmul_f32(*(float32x2_t *)(a2 + 144), (float32x2_t)*(_OWORD *)&_simd_pow_f4(v15, y));
    *(float *)(a2 + 172) = *(float *)(a2 + 172) * powf(1.0 - *(float *)(a2 + 156), v18);
    a3[18] = *(float32x2_t *)((char *)&v19 + 8);
    a3[21].f32[1] = a3[21].f32[1]
                  + (float)((float)(*(float *)&v20 + *((float *)&v20 + 1)) - (float)(a3[21].f32[0] + a3[21].f32[1]));
    *(float32x2_t *)v16.f32 = vsub_f32(_D9, a3[19]);
    a3[18] = vmul_f32(a3[18], (float32x2_t)*(_OWORD *)&_simd_pow_f4(v16, y));
    a3[21].f32[1] = a3[21].f32[1] * powf(1.0 - a3[19].f32[1], v18);
  }
}

void DspLib::LoudspeakerController::Algorithm::resetLogging(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2 = (DspLib::Logger *)*((void *)this + 78);
  if (v2) {
    DspLib::Logger::FlushLog(v2);
  }
  uint64_t v3 = (DspLib::Logger *)*((void *)this + 80);
  if (v3) {
    DspLib::Logger::FlushLog(v3);
  }
  uint64_t v4 = (DspLib::Logger *)*((void *)this + 82);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
  }
}

void DspLib::LoudspeakerController::Algorithm::inputCompensation(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 537) && a2[1])
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      DspLib::Biquad::Filter::process((void *)(*(void *)(a1 + 576) + 4544 * v4 + 4360), *(void *)(*a2 + 8 * v4), a2[2], *(void *)(*a2 + 8 * v4), a2[2]);
      uint64_t v4 = v5;
    }
    while (a2[1] > (unint64_t)v5++);
  }
}

vDSP_Length DspLib::LoudspeakerController::Algorithm::inputAnalysis(uint64_t a1, void *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  vDSP_Length v2 = a2[2];
  float v3 = *(float *)(*(void *)(a1 + 576) + 856)
     * (float)(v2
             + ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 872) - *(void *)(*(void *)(a1 + 576) + 864)) >> 2));
  vDSP_Length v4 = (unint64_t)v3;
  *(_DWORD *)(a1 + 492) = -998637568;
  int v106 = a2;
  uint64_t v5 = a2[1];
  uint64_t v109 = a1;
  vDSP_Length v111 = v2;
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    if (v2 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v2;
    }
    if (v4 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = (unint64_t)v3;
    }
    unint64_t v10 = ((4 * (v9 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
    uint64_t v107 = 4 * v8;
    v102[2] = 4 * (4 * ((v9 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 16);
    v102[1] = 4 * v9;
    while (1)
    {
      int v105 = v7;
      uint64_t v110 = *(void *)(a1 + 576);
      uint64_t v11 = v110 + 4544 * v6;
      uint64_t v12 = (void *)(v11 + 24);
      if (*(void *)(v11 + 24) >= v2)
      {
        float v17 = DspLib::LinearDelay::write((char **)v11, *(char **)(*v106 + 8 * v6), v106[2]);
        *v12 -= v111;
      }
      else
      {
        uint64_t v13 = (char **)MEMORY[0x1F4188790](v11);
        simd_float4 v15 = (char *)v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        DspLib::LinearDelay::process(v13, *(char **)(*v106 + 8 * v6), v106[2], v15, v16);
        float v17 = DspLib::LinearPhaseFilterbank::consumeInput(v110 + 4544 * v6 + 2256, v15, v111 - *v12);
        void *v12 = 0;
      }
      long long v104 = v102;
      uint64_t v18 = MEMORY[0x1F4188790](v17);
      MEMORY[0x1F4188790](v18);
      long long v20 = (const float *)((char *)v102 - v19);
      uint64_t v21 = *(const float **)(*v106 + 8 * v6);
      vDSP_Length v22 = v106[2];
      float v23 = *(float *)(v110 + 4544 * v6 + 40);
      uint64_t v108 = (float *)v24;
      DspLib::multiply(v21, v22, (float *)v24, v23);
      DspLib::Biquad::Filter::process((void *)(v110 + 4544 * v6 + 48), (uint64_t)v108, v111, (uint64_t)v20, v111);
      MEMORY[0x1F4188790](v25);
      float v27 = (float *)((char *)v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
      DspLib::multiply(v108, v111, v20, v111, v27);
      uint64_t v29 = MEMORY[0x1F4188790](v28);
      uint64_t v30 = MEMORY[0x1F4188790](v29);
      uint64_t v31 = MEMORY[0x1F4188790](v30);
      uint64_t v33 = (char *)v102 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v34 = 0;
      memset(v115, 0, sizeof(v115));
      do
      {
        *(void *)((char *)v115 + v34) = v33;
        v34 += 8;
        v33 += v10;
      }
      while (v34 != 32);
      uint64_t v35 = MEMORY[0x1F4188790](v31);
      float v37 = (float *)((char *)v102 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v38 = *(void *)(v109 + 512);
      uint64_t v103 = 16 * v6;
      char v39 = *(_DWORD *)(v38 + 16 * v6) != 2;
      if (*(unsigned char *)(*(void *)(v109 + 576) + 4544 * v6 + 1096)) {
        unint64_t v40 = v111;
      }
      else {
        unint64_t v40 = 0;
      }
      MEMORY[0x1F4188790](v35);
      float v42 = (char *)v102 - v41;
      *(void *)&long long v113 = v115;
      *((void *)&v113 + 1) = 4;
      vDSP_Length v114 = v4;
      float v45 = (char *)v44;
      DSPSplitComplex v46 = v27;
      uint64_t v48 = (char *)v47;
      DspLib::LoudspeakerController::SpeakerSystemModel::process(v110 + v43 + 208, (uint64_t)v108, v49, v46, v49, &v113, v47, v49, v44, v49, v37, v4, v39);
      DspLib::LinearDelay::write((char **)(v110 + 4544 * v6 + 1232), (char *)v37, v4);
      if (v39)
      {
        DspLib::LinearDelay::write((char **)(v110 + 4544 * v6 + 1184), v48, v111);
        DspLib::LinearDelay::write((char **)(v110 + 4544 * v6 + 1208), v45, v111);
        if (*(unsigned char *)(*(void *)(v109 + 576) + 4544 * v6 + 1096)) {
          DspLib::LinearDelay::write((char **)(v110 + 4544 * v6 + 4488), v42, v40);
        }
      }
      v112[0] = v115;
      v112[1] = 4;
      v112[2] = v4;
      DspLib::MultiChannelLinearDelay::write((char **)(v110 + 4544 * v6 + 1256), v112);
      a1 = v109;
      vDSP_Length v2 = v111;
      if (!*(unsigned char *)(v109 + 498)) {
        goto LABEL_31;
      }
      int v50 = *(_DWORD *)(*(void *)(v109 + 512) + v103);
      if (v50 == 2) {
        break;
      }
      if (v50 == 1)
      {
        float v53 = -20.0;
        if (*(unsigned char *)(v109 + 24))
        {
          DspLib::LoudspeakerController::MaskingEstimator::process(v110 + 4544 * v6 + 1280, *(void *)(v110 + 4544 * v6 + 1208), (uint64_t)(*(void *)(v110 + 4544 * v6 + 1216) - *(void *)(v110 + 4544 * v6 + 1208)) >> 2, v111);
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      if (!v50)
      {
        DspLib::LoudspeakerController::MaskingEstimator::process(v110 + 4544 * v6 + 1280, *(void *)(v110 + 4544 * v6 + 1208), (uint64_t)(*(void *)(v110 + 4544 * v6 + 1216) - *(void *)(v110 + 4544 * v6 + 1208)) >> 2, v111);
        goto LABEL_26;
      }
LABEL_31:
      uint64_t v54 = v110 + 4544 * v6;
      float v55 = *(float *)(a1 + 492);
      if (v55 < *(float *)(v54 + 4212)) {
        float v55 = *(float *)(v54 + 4212);
      }
      *(float *)(a1 + 492) = v55;
      unint64_t v6 = (v105 + 1);
      int v7 = v105 + 1;
      if (v106[1] <= v6) {
        goto LABEL_34;
      }
    }
    uint64_t v52 = v110 + 4544 * v6 + 1160;
    DspLib::LinearDelay::write((char **)v52, (char *)v108, v111);
    DspLib::LoudspeakerController::MaskingEstimator::process(v110 + 4544 * v6 + 1280, *(void *)v52, (uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 2, v111);
LABEL_26:
    float v53 = v51;
LABEL_29:
    a1 = v109;
    vDSP_Length v2 = v111;
LABEL_30:
    *(float *)(v110 + 4544 * v6 + 4212) = v53;
    goto LABEL_31;
  }
LABEL_34:
  if (*(unsigned char *)(a1 + 24))
  {
    int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v57 = (void *)v109;
    if (v56)
    {
      unint64_t v58 = 0;
      vDSP_Length v59 = 8 - v4;
      uint64_t v60 = 4300;
      do
      {
        BOOL v61 = v111 == -1;
        uint64_t v62 = v57[72];
        uint64_t v63 = (uint64_t *)(v62 + 4544 * v58);
        uint64_t v64 = *v63;
        uint64_t v65 = v63[1];
        uint64_t v66 = (*(uint64_t (**)(void *))(*v57 + 216))(v57);
        if (v61) {
          vDSP_Length v67 = ((v65 - v64) >> 2) - (v66 - v111);
        }
        else {
          vDSP_Length v67 = v111;
        }
        float v68 = DspLib::maxMagnitude((const float *)(v64 + 4 * (v66 - v111)), v67);
        uint64_t v69 = v62 + 4544 * v58;
        *(float *)(v69 + 418DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v68;
        uint64_t v70 = *(void *)(v69 + 1184);
        uint64_t v71 = *(void *)(v69 + 1192);
        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 216))(v109);
        if (v61) {
          vDSP_Length v73 = ((v71 - v70) >> 2) - (v72 - v111);
        }
        else {
          vDSP_Length v73 = v111;
        }
        float v74 = DspLib::maxMagnitude((const float *)(v70 + 4 * (v72 - v111)), v73);
        uint64_t v75 = (void *)v109;
        *(float *)(v62 + 4544 * v58 + 420DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v74;
        if (*(unsigned char *)(v75[72] + 4544 * v58 + 1096))
        {
          BOOL v76 = v111 == -1;
          uint64_t v77 = v62 + 4544 * v58;
          uint64_t v78 = *(void *)(v77 + 4488);
          uint64_t v79 = *(void *)(v77 + 4496);
          uint64_t v80 = (*(uint64_t (**)(void *))(*v75 + 216))(v75);
          if (v76) {
            vDSP_Length v81 = ((v79 - v78) >> 2) - (v80 - v111);
          }
          else {
            vDSP_Length v81 = v111;
          }
          *(float *)(v62 + 4544 * v58 + 452DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::maxMagnitude((const float *)(v78 + 4 * (v80 - v111)), v81);
          uint64_t v75 = (void *)v109;
        }
        BOOL v82 = v111 == -1;
        uint64_t v83 = v62 + 4544 * v58;
        uint64_t v84 = *(void *)(v83 + 1208);
        uint64_t v85 = *(void *)(v83 + 1216);
        uint64_t v86 = (*(uint64_t (**)(void *))(*v75 + 216))(v75);
        if (v82) {
          vDSP_Length v87 = ((v85 - v84) >> 2) - (v86 - v111);
        }
        else {
          vDSP_Length v87 = v111;
        }
        *(float *)(v62 + 4544 * v58 + 4256) = DspLib::maxMagnitude((const float *)(v84 + 4 * (v86 - v111)), v87);
        if (v4)
        {
          uint64_t v88 = 0;
          for (unint64_t i = 0; i != 4; ++i)
          {
            uint64_t v90 = *(void *)(v62 + 4544 * v58 + 1256);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v62 + 4544 * v58 + 1264) - v90) >> 3) <= i)
            {
              uint64_t v92 = 0;
              uint64_t v93 = 0;
            }
            else
            {
              uint64_t v91 = v90 + v88;
              uint64_t v92 = *(void *)(v90 + v88);
              uint64_t v93 = (*(void *)(v91 + 8) - v92) >> 2;
            }
            vDSP_Length v94 = v93 - v59;
            if (v4 == -1) {
              vDSP_Length v95 = v94;
            }
            else {
              vDSP_Length v95 = v4;
            }
            *(float *)(v62 + v60 + 4 * i) = DspLib::maxv((const float *)(v92 + 4 * v59), v95);
            v88 += 24;
          }
          uint64_t v96 = v62 + 4544 * v58;
          uint64_t v97 = *(void *)(v96 + 1232);
          vDSP_Length v98 = ((*(void *)(v96 + 1240) - v97) >> 2) - v59;
          if (v4 == -1) {
            vDSP_Length v99 = v98;
          }
          else {
            vDSP_Length v99 = v4;
          }
          *(float *)(v62 + 4544 * v58 + 4268) = DspLib::maxv((const float *)(v97 + 4 * v59), v99);
        }
        unsigned int v100 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 56))(v109);
        ++v58;
        v60 += 4544;
        uint64_t v57 = (void *)v109;
      }
      while (v58 < v100);
    }
  }
  return v4;
}

char **DspLib::MultiChannelLinearDelay::write(char **result, void *a2)
{
  vDSP_Length v2 = *result;
  if (result[1] != *result)
  {
    vDSP_Length v4 = result;
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t result = DspLib::LinearDelay::write((char **)&v2[24 * v5], *(char **)(*a2 + 8 * v5), a2[2]);
      uint64_t v5 = v6;
      vDSP_Length v2 = *v4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3) > v6++);
  }
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findAmplitudeTarget@<X0>(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v5 = (_OWORD *)(a2 + i);
    v5[1] = xmmword_1BB873C90;
    v5[2] = xmmword_1BB875850;
    _OWORD *v5 = xmmword_1BB873F80;
  }
  uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, __int128, __int128, __int128))(*(void *)this + 56))(this, xmmword_1BB875850, xmmword_1BB873C90, xmmword_1BB873F80);
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = (float *)(a2 + 8);
    do
    {
      uint64_t v11 = *((void *)this + 72);
      float v12 = 1.0;
      if (*((unsigned char *)this + 496) && *(_DWORD *)(*((void *)this + 64) + v7) != 2)
      {
        float v13 = *(float *)(v11 + v8 + 32) - *(float *)(v11 + v8 + 36);
        float v14 = *(float *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v9 + 10) | 0x1000000000)+ 16);
        if (v13 >= v14) {
          float v14 = v13;
        }
        DspLib::LoudspeakerController::findTarget(*(const float **)(v11 + v8), ((uint64_t)(*(void *)(v11 + v8 + 8) - *(void *)(v11 + v8)) >> 2) - *((void *)this + 42), 0, (float *)(v11 + v8 + 4176), v14, v14);
        *((_DWORD *)v10 - 2) = v15;
        *(v10 - 1) = v12;
        *(_DWORD *)unint64_t v10 = v16;
      }
      *(float *)(v11 + v8 + 4184) = v12;
      float v17 = *(float *)(v11 + v8 + 4188);
      if (v17 >= v12) {
        float v17 = v12;
      }
      *(float *)(v11 + v8 + 4188) = v17;
      ++v9;
      uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
      v8 += 4544;
      v7 += 16;
      v10 += 3;
    }
    while (v9 < result);
  }
  return result;
}

void DspLib::LoudspeakerController::findTarget(const float *a1, vDSP_Length a2, int a3, float *a4, float a5, float a6)
{
  if (a3) {
    float v9 = DspLib::maxv(a1, a2);
  }
  else {
    float v9 = DspLib::maxMagnitude(a1, a2);
  }
  *a4 = v9;
  if (v9 > a5) {
    expf((float)-(float)(v9 - a5) / fmaxf(a6 - a5, 1.0e-15));
  }
}

uint64_t DspLib::LoudspeakerController::Algorithm::findDisplacementTarget@<X0>(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v5 = (_OWORD *)(a2 + i);
    v5[1] = xmmword_1BB873C90;
    v5[2] = xmmword_1BB875850;
    _OWORD *v5 = xmmword_1BB873F80;
  }
  uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, __int128, __int128, __int128))(*(void *)this + 56))(this, xmmword_1BB875850, xmmword_1BB873C90, xmmword_1BB873F80);
  if (result)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float v9 = (float *)(a2 + 8);
    uint64_t v10 = 4204;
    do
    {
      uint64_t v11 = *((void *)this + 72);
      float v12 = 1.0;
      if (*((unsigned char *)this + 497))
      {
        if (*(_DWORD *)(*((void *)this + 64) + v7) != 2)
        {
          DspLib::LoudspeakerController::findTarget(*(const float **)(v11 + v10 - 3020), ((uint64_t)(*(void *)(v11 + v10 - 3012) - *(void *)(v11 + v10 - 3020)) >> 2) - *((void *)this + 42), 0, (float *)(v11 + v10 - 8), *(float *)(v11 + v10 - 3100) * 0.99, *(float *)(v11 + v10 - 3100));
          *((_DWORD *)v9 - 2) = v13;
          *(v9 - 1) = v12;
          *(_DWORD *)float v9 = v14;
        }
      }
      *(float *)(v11 + v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      ++v8;
      uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
      v10 += 4544;
      v7 += 16;
      v9 += 3;
    }
    while (v8 < result);
  }
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findPassiveRadiatorDisplacementTarget@<X0>(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v5 = (_OWORD *)(a2 + i);
    v5[1] = xmmword_1BB873C90;
    v5[2] = xmmword_1BB875850;
    _OWORD *v5 = xmmword_1BB873F80;
  }
  uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, __int128, __int128, __int128))(*(void *)this + 56))(this, xmmword_1BB875850, xmmword_1BB873C90, xmmword_1BB873F80);
  if (result)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float v9 = (float *)(a2 + 8);
    uint64_t v10 = 4528;
    do
    {
      uint64_t v11 = *((void *)this + 72);
      float v12 = 1.0;
      if (*(unsigned char *)(v11 + v10 - 3432) && *((unsigned char *)this + 497) && *(_DWORD *)(*((void *)this + 64) + v7) != 2)
      {
        DspLib::LoudspeakerController::findTarget(*(const float **)(v11 + v10 - 40), ((uint64_t)(*(void *)(v11 + v10 - 32) - *(void *)(v11 + v10 - 40)) >> 2) - *((void *)this + 42), 0, (float *)(v11 + v10 - 12), *(float *)(v11 + v10 - 16) * 0.99, *(float *)(v11 + v10 - 16));
        *((_DWORD *)v9 - 2) = v13;
        *(v9 - 1) = v12;
        *(_DWORD *)float v9 = v14;
      }
      *(float *)(v11 + v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      ++v8;
      uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
      v10 += 4544;
      v7 += 16;
      v9 += 3;
    }
    while (v8 < result);
  }
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findVelocityTarget@<X0>(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v5 = (_OWORD *)(a2 + i);
    v5[1] = xmmword_1BB873C90;
    v5[2] = xmmword_1BB875850;
    _OWORD *v5 = xmmword_1BB873F80;
  }
  uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, __int128, __int128, __int128))(*(void *)this + 56))(this, xmmword_1BB875850, xmmword_1BB873C90, xmmword_1BB873F80);
  if (result)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float v9 = (float *)(a2 + 8);
    uint64_t v10 = 4224;
    do
    {
      uint64_t v11 = *((void *)this + 72);
      float v12 = 1.0;
      if (*((unsigned char *)this + 498) && *(_DWORD *)(*((void *)this + 64) + v7) != 2)
      {
        float v13 = *((float *)this + 123);
        uint64_t v14 = v11 + v10;
        int v15 = (float *)(v11 + v10 - 3116);
        float v16 = *(float *)(v11 + v10 - 3104);
        if (v16 >= v13)
        {
          float v23 = *v15;
        }
        else
        {
          float v17 = *(float *)(v14 - 3100);
          if (v17 >= v13)
          {
            float v20 = v13 - v16;
            float v21 = *v15;
            float v24 = *(float *)(v14 - 3088);
          }
          else
          {
            uint64_t v18 = v11 + v10;
            float v19 = *(float *)(v11 + v10 - 3096);
            if (v19 >= v13)
            {
              float v20 = v13 - v17;
              float v21 = *(float *)(v18 - 3112);
              vDSP_Length v22 = (float *)(v18 - 3084);
            }
            else
            {
              float v20 = v13 - v19;
              float v21 = *(float *)(v18 - 3108);
              vDSP_Length v22 = (float *)(v18 - 3080);
            }
            float v24 = *v22;
          }
          float v23 = v21 + (float)(v24 * v20);
        }
        *(float *)(v11 + v10 - 8) = v23;
        DspLib::LoudspeakerController::findTarget(*(const float **)(v11 + v10 - 3016), ((uint64_t)(*(void *)(v11 + v10 - 3008) - *(void *)(v11 + v10 - 3016)) >> 2) - *((void *)this + 42), 0, (float *)(v11 + v10 - 4), v23 * 0.95, v23);
        *((_DWORD *)v9 - 2) = v25;
        *(v9 - 1) = v12;
        *(_DWORD *)float v9 = v26;
      }
      *(float *)(v11 + v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      ++v8;
      uint64_t result = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this);
      v7 += 16;
      v10 += 4544;
      v9 += 3;
    }
    while (v8 < result);
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::findPowerTargets(void *a1@<X0>, vDSP_Length a2@<X1>, uint64_t a3@<X2>, float *a4@<X8>)
{
  vDSP_Length v105 = a2;
  vDSP_Length v4 = a1;
  uint64_t v6 = 0;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[39];
  unint64_t v8 = a4;
  do
  {
    for (uint64_t i = 0; i != 24; i += 12)
    {
      uint64_t v10 = &v8[i];
      *((_OWORD *)v10 + 1) = xmmword_1BB873C90;
      *((_OWORD *)v10 + 2) = xmmword_1BB875850;
      *(_OWORD *)uint64_t v10 = xmmword_1BB873F80;
    }
    ++v6;
    v8 += 24;
  }
  while (v6 != 4);
  vDSP_Length v11 = v7 + v105;
  uint64_t v12 = a1[72];
  uint64_t v13 = a1[73];
  uint64_t v103 = a3;
  for (float j = 0.0; v12 != v13; v12 += 4544)
  {
    if (*(unsigned char *)(v12 + 3392))
    {
      uint64_t v15 = 0;
      while (v15 != -36)
      {
        float v16 = *(float *)(v12 + v15 + 3420);
        v15 -= 12;
        if (*(float *)(v12 + 3336) >= v16)
        {
          float v17 = (float *)(v12 + v15 + 3436);
          goto LABEL_17;
        }
      }
      float v17 = (float *)(v12 + 3344);
    }
    else if (*(_DWORD *)(v12 + 3436))
    {
      float v17 = (float *)(v12 + 3384);
    }
    else if (*(_DWORD *)(v12 + 3432))
    {
      float v17 = (float *)(v12 + 3364);
    }
    else
    {
      float v17 = (float *)(v12 + 3344);
    }
LABEL_17:
    float j = j + *v17;
  }
  unint64_t v18 = 0;
  if (v11 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v11;
  }
  vDSP_Length v20 = 8 - v105;
  unsigned int v101 = (float *)(a1 + 53);
  uint64_t v102 = (float *)(a1 + 49);
  vDSP_Length v99 = (char *)a1 + 444;
  unsigned int v100 = (float *)(a1 + 51);
  uint64_t v97 = (char *)a1 + 460;
  vDSP_Length v98 = a1 + 75;
  uint64_t v108 = 4284;
  uint64_t v107 = 4316;
  uint64_t v104 = 4 * v19;
  do
  {
    int v106 = &v92;
    MEMORY[0x1F4188790](a1);
    vDSP_Length v22 = (float *)((char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    DspLib::clear(v22, v11);
    a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
    if (a1)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      do
      {
        uint64_t v25 = v4[72] + v23;
        uint64_t v26 = *(void *)(v25 + 1264);
        uint64_t v27 = *(void *)(v25 + 1256);
        if (0xAAAAAAAAAAAAAAABLL * ((v26 - v27) >> 3) <= v18)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v28 = (uint64_t *)(v27 + 24 * v18);
          uint64_t v29 = *v28;
          uint64_t v30 = (v28[1] - *v28) >> 2;
        }
        vDSP_Length v31 = v30 - v20;
        if (v11 - v4[41] == -1) {
          vDSP_Length v32 = v31;
        }
        else {
          vDSP_Length v32 = v11 - v4[41];
        }
        float v33 = DspLib::maxv((const float *)(v29 + 4 * v20), v32);
        uint64_t v34 = v4[72] + v23;
        *(float *)(v34 + v108) = v33;
        uint64_t v35 = *(void *)(v34 + 1264);
        uint64_t v36 = *(void *)(v34 + 1256);
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3) <= v18) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = *(void *)(v36 + 24 * v18);
        }
        DspLib::add(v22, v11, (const float *)(v37 + 4 * v20));
        a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
        ++v24;
        v23 += 4544;
      }
      while (v24 < a1);
    }
    if (v105 && *((unsigned char *)v4 + 24))
    {
      float v38 = DspLib::maxv(v22, v105);
      *(float *)&v97[4 * v18] = v38;
    }
    if (!*((unsigned char *)v4 + 440) || (char v39 = v101, *((unsigned char *)v4 + 441))) {
      char v39 = v102;
    }
    if (*((unsigned char *)v4 + 499))
    {
      float v40 = v39[v18];
      uint64_t v41 = (float *)&v99[4 * v18];
      DspLib::LoudspeakerController::findTarget(v22, v11 - v4[41], 1, v41, v40 * v100[v18], v40);
      uint64_t v42 = v103;
      uint64_t v43 = (float *)(v103 + 12 * v18);
      *(_DWORD *)uint64_t v43 = v44;
      *((_DWORD *)v43 + 1) = v45;
      *((_DWORD *)v43 + 2) = v46;
      *((_DWORD *)v98 + v18) = v44;
      if (*((unsigned char *)v4 + 536))
      {
        uint64_t v47 = v42 + 12 * v18;
        float v49 = *(float *)(v47 + 4);
        uint64_t v48 = (float *)(v47 + 4);
        float v50 = v49;
        if (v49 < 1.0)
        {
          float v51 = (float)(v50 * v50) * *v41;
          float v52 = 0.0;
          if (v51 > j) {
            float v52 = sqrtf((float)(v51 - j) / (float)(*v41 - j));
          }
          float v50 = v50 * 0.8414;
          if (v52 >= v50) {
            float v50 = v52;
          }
          *uint64_t v48 = v50;
        }
        for (uint64_t k = 1; k != 25; k += 3)
          a4[k] = v50;
        a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
        if (a1)
        {
          unint64_t v54 = 0;
          uint64_t v55 = v107;
          uint64_t v56 = 1;
          do
          {
            *(float *)(v4[72] + v55) = a4[v56];
            a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
            ++v54;
            v56 += 3;
            v55 += 4544;
          }
          while (v54 < a1);
        }
      }
      else
      {
        vDSP_Length v95 = v43;
        uint64_t v59 = (*(uint64_t (**)(void *))(*v4 + 56))(v4);
        uint64_t v96 = &v92;
        MEMORY[0x1F4188790](v59);
        BOOL v61 = (char *)&v92 - v60;
        unsigned int v93 = (*(uint64_t (**)(void *))(*v4 + 56))(v4);
        uint64_t v62 = (*(uint64_t (**)(void *))(*v4 + 56))(v4);
        MEMORY[0x1F4188790](v62);
        uint64_t v64 = (char *)&v92 - v63;
        unsigned int v94 = (*(uint64_t (**)(void *))(*v4 + 56))(v4);
        if ((*(unsigned int (**)(void *))(*v4 + 56))(v4))
        {
          unint64_t v65 = 0;
          uint64_t v66 = 1264;
          vDSP_Length v67 = a4;
          do
          {
            uint64_t v68 = *(void *)(v4[72] + v66 - 8);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4[72] + v66) - v68) >> 3) <= v18)
            {
              uint64_t v70 = 0;
              uint64_t v71 = 0;
            }
            else
            {
              uint64_t v69 = (uint64_t *)(v68 + 24 * v18);
              uint64_t v70 = *v69;
              uint64_t v71 = (v69[1] - *v69) >> 2;
            }
            vDSP_Length v72 = v71 - v20;
            if (v11 - v4[41] == -1) {
              vDSP_Length v73 = v72;
            }
            else {
              vDSP_Length v73 = v11 - v4[41];
            }
            float v74 = DspLib::maxv((const float *)(v70 + 4 * v20), v73);
            *(float *)&v61[4 * v65] = v74;
            *vDSP_Length v67 = v74;
            *(float *)&v64[4 * v65++] = v74;
            v67 += 3;
            v66 += 4544;
          }
          while (v65 < (*(unsigned int (**)(void *))(*v4 + 56))(v4));
        }
        if (*(float *)(v103 + 12 * v18 + 4) >= 1.0)
        {
          for (uint64_t m = 1; m != 25; m += 3)
            a4[m] = 1.0;
        }
        else
        {
          DspLib::waterFillingSolution((uint64_t)v64, v94, *v95);
          float v76 = v75;
          if ((*(unsigned int (**)(void *))(*v4 + 56))(v4))
          {
            unint64_t v77 = 0;
            uint64_t v78 = 1;
            do
            {
              float v79 = *(float *)&v61[4 * v77];
              float v80 = 1.0;
              if (v79 > 0.0)
              {
                float v81 = *(float *)&v64[4 * v77];
                if (v81 >= v76) {
                  float v81 = v76;
                }
                float v80 = sqrtf(v81 / v79);
              }
              a4[v78] = v80;
              ++v77;
              v78 += 3;
            }
            while (v77 < (*(unsigned int (**)(void *))(*v4 + 56))(v4));
          }
          DspLib::waterFillingSolution((uint64_t)v61, v93, v40);
          float v83 = v82;
          if ((*(unsigned int (**)(void *))(*v4 + 56))(v4))
          {
            unint64_t v84 = 0;
            uint64_t v85 = a4;
            do
            {
              float v86 = *(float *)&v61[4 * v84];
              if (v86 >= v83) {
                float v86 = v83;
              }
              *uint64_t v85 = v86;
              ++v84;
              v85 += 3;
            }
            while (v84 < (*(unsigned int (**)(void *))(*v4 + 56))(v4));
          }
        }
        for (uint64_t n = 2; n != 26; n += 3)
          a4[n] = 0.0;
        a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
        if (a1)
        {
          unint64_t v89 = 0;
          uint64_t v90 = v107;
          uint64_t v91 = 1;
          do
          {
            *(float *)(v4[72] + v9DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a4[v91];
            a1 = (void *)(*(uint64_t (**)(void *))(*v4 + 56))(v4);
            ++v89;
            v91 += 3;
            v90 += 4544;
          }
          while (v89 < a1);
        }
      }
    }
    else
    {
      uint64_t v57 = v4[72];
      for (iuint64_t i = v4[73]; v57 != ii; v57 += 4544)
        *(_DWORD *)(v57 + v107) = 1065353216;
    }
    ++v18;
    a4 += 24;
    v107 += 4;
    v108 += 4;
  }
  while (v18 != 4);
}

uint64_t DspLib::LoudspeakerController::Algorithm::findTemperatureTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v7 = (_OWORD *)(a3 + i);
    v7[1] = xmmword_1BB873C90;
    v7[2] = xmmword_1BB875850;
    *uint64_t v7 = xmmword_1BB873F80;
  }
  uint64_t v8 = *(void *)(a1 + 312);
  uint64_t result = (*(uint64_t (**)(uint64_t, __int128, __int128, __int128))(*(void *)a1 + 56))(a1, xmmword_1BB875850, xmmword_1BB873C90, xmmword_1BB873F80);
  if (result)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v8 + a2;
    uint64_t v13 = 8 - a2;
    float32x2_t v45 = (float32x2_t)vdup_n_s32(0x358637BDu);
    uint64_t v14 = (float *)(a3 + 8);
    do
    {
      uint64_t v15 = *(void *)(a1 + 576);
      float v16 = 1.0;
      if (*(unsigned char *)(a1 + 500))
      {
        float v17 = (float *)(v15 + v10);
        uint64_t v18 = *(void *)(v15 + v10 + 1232);
        if (v12 - *(void *)(a1 + 328) == -1) {
          vDSP_Length v19 = ((*(void *)(v15 + v10 + 1240) - v18) >> 2) - v13;
        }
        else {
          vDSP_Length v19 = v12 - *(void *)(a1 + 328);
        }
        float v20 = DspLib::maxv((const float *)(v18 + 4 * v13), v19);
        v17[1066] = v20;
        float v21 = v17[287];
        float v22 = v17[288];
        float v16 = 1.0;
        if (v20 > v21)
        {
          float v23 = v20;
          float v24 = expf((float)-(float)(v20 - v21) / fmaxf(v22 - v21, 1.0e-15));
          float v16 = 1.0;
          float v25 = v21 + (float)((float)(v22 - v21) * (float)(1.0 - v24));
          if (v25 < v23)
          {
            float v26 = *(float *)(v15 + v10 + 3892);
            float32x2_t v27 = vmaxnm_f32(*(float32x2_t *)(v15 + v10 + 832), v45);
            float v28 = fminf(vdiv_f32(v27, vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1))).f32[0], 0.995);
            uint64_t v29 = *(void *)(v15 + v10 + 816);
            float v30 = v22 * (float)(1.0 - v28);
            BOOL v31 = v30 <= v26;
            float v32 = fmaxf(v26 / v30, 0.0);
            if (v31) {
              float v32 = 1.0;
            }
            float v33 = *(float *)(v15 + v10 + 840) + *(float *)(v15 + v10 + 844);
            if (v33 >= v25) {
              float v34 = 0.0;
            }
            else {
              float v34 = v25 - v33;
            }
            float v35 = fmaxf(*(float *)&v29, 0.001);
            float v36 = v34 * fminf(v35 / (float)(v35 + fmaxf(*((float *)&v29 + 1), 0.001)), 0.995);
            float v37 = v34 - v36;
            float v38 = v34 * v28;
            float v39 = v32 * v32;
            float v40 = v36 + (float)(v39 * (float)(v38 - v36));
            float v41 = v37 + (float)(v39 * (float)((float)(v34 - v38) - v37));
            float v42 = v40 / *(float *)&v29;
            if (*(float *)&v29 <= v40) {
              float v42 = 1.0;
            }
            if (*((float *)&v29 + 1) <= v41) {
              float v43 = 1.0;
            }
            else {
              float v43 = v41 / *((float *)&v29 + 1);
            }
            if (v43 >= v42) {
              float v43 = v42;
            }
            float v44 = fmaxf(v43, 0.0);
            float v16 = sqrtf(v44);
            if (v44 >= 1.0) {
              float v16 = 1.0;
            }
          }
        }
        *(v14 - 2) = v22 + v17[1088];
        *(v14 - 1) = v16;
        *uint64_t v14 = 0.0;
      }
      *(float *)(v15 + v10 + 4272) = v16;
      ++v11;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      v10 += 4544;
      v14 += 3;
    }
    while (v11 < result);
  }
  return result;
}

double DspLib::LoudspeakerController::Algorithm::findTargets@<D0>(DspLib::LoudspeakerController::Algorithm *this@<X0>, vDSP_Length a2@<X2>, _OWORD *a3@<X8>)
{
  DspLib::LoudspeakerController::Algorithm::findAmplitudeTarget(this, (uint64_t)v57);
  DspLib::LoudspeakerController::Algorithm::findDisplacementTarget(this, (uint64_t)v56);
  DspLib::LoudspeakerController::Algorithm::findPassiveRadiatorDisplacementTarget(this, (uint64_t)v55);
  DspLib::LoudspeakerController::Algorithm::findVelocityTarget(this, (uint64_t)v54);
  for (uint64_t i = 0; i != 6; i += 3)
  {
    uint64_t v7 = &v53[i];
    v7[1] = xmmword_1BB873C90;
    v7[2] = xmmword_1BB875850;
    *uint64_t v7 = xmmword_1BB873F80;
  }
  DspLib::LoudspeakerController::Algorithm::findPowerTargets(this, a2, (uint64_t)v53, __src);
  DspLib::LoudspeakerController::Algorithm::findTemperatureTarget((uint64_t)this, a2, (uint64_t)v51);
  if (*((unsigned char *)this + 616))
  {
    if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
    {
      unint64_t v8 = 0;
      uint64_t v9 = 4184;
      do
      {
        uint64_t v10 = (DspLib::Logger *)*((void *)this + 78);
        if (v10) {
          DspLib::Logger::logData(v10, *(float *)(*((void *)this + 72) + v9));
        }
        ++v8;
        v9 += 4544;
      }
      while (v8 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this));
    }
    if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
    {
      unint64_t v11 = 0;
      uint64_t v12 = 4204;
      do
      {
        uint64_t v13 = (DspLib::Logger *)*((void *)this + 78);
        if (v13) {
          DspLib::Logger::logData(v13, *(float *)(*((void *)this + 72) + v12));
        }
        ++v11;
        v12 += 4544;
      }
      while (v11 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this));
    }
    if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
    {
      unint64_t v14 = 0;
      uint64_t v15 = 4224;
      do
      {
        float v16 = (DspLib::Logger *)*((void *)this + 78);
        if (v16) {
          DspLib::Logger::logData(v16, *(float *)(*((void *)this + 72) + v15));
        }
        ++v14;
        v15 += 4544;
      }
      while (v14 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this));
    }
    if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
    {
      unint64_t v17 = 0;
      uint64_t v18 = 4216;
      do
      {
        vDSP_Length v19 = (DspLib::Logger *)*((void *)this + 78);
        if (v19) {
          DspLib::Logger::logData(v19, *(float *)(*((void *)this + 72) + v18));
        }
        ++v17;
        v18 += 4544;
      }
      while (v17 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this));
    }
    if (*((unsigned char *)this + 440)) {
      BOOL v20 = *((unsigned char *)this + 441) == 0;
    }
    else {
      BOOL v20 = 0;
    }
    float v21 = (float *)v53 + 1;
    float v22 = 1.0;
    uint64_t v23 = -16;
    do
    {
      float v24 = (DspLib::Logger *)*((void *)this + 78);
      if (v24)
      {
        if (v20) {
          uint64_t v25 = 440;
        }
        else {
          uint64_t v25 = 408;
        }
        DspLib::Logger::logData(v24, *(float *)((char *)this + v23 + v25));
      }
      float v26 = *v21;
      v21 += 3;
      float v27 = v26;
      if (v26 < v22) {
        float v22 = v27;
      }
      v23 += 4;
    }
    while (v23);
    float v28 = (DspLib::Logger *)*((void *)this + 78);
    if (v28) {
      DspLib::Logger::logData(v28, v22);
    }
    if ((*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this))
    {
      unint64_t v29 = 0;
      uint64_t v30 = 4272;
      do
      {
        BOOL v31 = (DspLib::Logger *)*((void *)this + 78);
        if (v31) {
          DspLib::Logger::logData(v31, *(float *)(*((void *)this + 72) + v30));
        }
        ++v29;
        v30 += 4544;
      }
      while (v29 < (*(unsigned int (**)(DspLib::LoudspeakerController::Algorithm *))(*(void *)this + 56))(this));
    }
  }
  long long v32 = v57[3];
  a3[2] = v57[2];
  a3[3] = v32;
  long long v33 = v57[5];
  a3[4] = v57[4];
  a3[5] = v33;
  long long v34 = v57[1];
  *a3 = v57[0];
  a3[1] = v34;
  long long v35 = v56[3];
  a3[8] = v56[2];
  a3[9] = v35;
  long long v36 = v56[5];
  a3[10] = v56[4];
  a3[11] = v36;
  long long v37 = v56[1];
  a3[6] = v56[0];
  a3[7] = v37;
  long long v38 = v54[1];
  a3[12] = v54[0];
  a3[13] = v38;
  long long v39 = v54[5];
  a3[16] = v54[4];
  a3[17] = v39;
  long long v40 = v54[3];
  a3[14] = v54[2];
  a3[15] = v40;
  long long v41 = v53[3];
  a3[20] = v53[2];
  a3[21] = v41;
  long long v42 = v53[5];
  a3[22] = v53[4];
  a3[23] = v42;
  long long v43 = v53[1];
  a3[18] = v53[0];
  a3[19] = v43;
  memcpy(a3 + 24, __src, 0x180uLL);
  long long v44 = v51[3];
  a3[50] = v51[2];
  a3[51] = v44;
  long long v45 = v51[5];
  a3[52] = v51[4];
  a3[53] = v45;
  long long v46 = v51[1];
  a3[48] = v51[0];
  a3[49] = v46;
  long long v47 = v55[3];
  a3[56] = v55[2];
  a3[57] = v47;
  long long v48 = v55[5];
  a3[58] = v55[4];
  a3[59] = v48;
  double result = *(double *)v55;
  long long v50 = v55[1];
  a3[54] = v55[0];
  a3[55] = v50;
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findTargetActivity@<X0>(float *__src@<X1>, uint64_t a2@<X0>, _OWORD *a3@<X8>)
{
  float v3 = __src;
  for (uint64_t i = 0; i != 6; i += 3)
  {
    uint64_t v7 = &a3[i];
    v7[1] = xmmword_1BB873C90;
    v7[2] = xmmword_1BB875850;
    *uint64_t v7 = xmmword_1BB873F80;
  }
  do
  {
    unint64_t v8 = &a3[i];
    v8[1] = xmmword_1BB873C90;
    _DWORD v8[2] = xmmword_1BB875850;
    *unint64_t v8 = xmmword_1BB873F80;
    i += 3;
  }
  while (i != 12);
  do
  {
    uint64_t v9 = &a3[i];
    v9[1] = xmmword_1BB873C90;
    _DWORD v9[2] = xmmword_1BB875850;
    *uint64_t v9 = xmmword_1BB873F80;
    i += 3;
  }
  while (i != 18);
  do
  {
    uint64_t v10 = &a3[i];
    v10[1] = xmmword_1BB873C90;
    void v10[2] = xmmword_1BB875850;
    *uint64_t v10 = xmmword_1BB873F80;
    i += 3;
  }
  while (i != 24);
  uint64_t v11 = 0;
  uint64_t v12 = a3 + 24;
  do
  {
    for (uint64_t j = 0; j != 6; j += 3)
    {
      unint64_t v14 = &v12[j];
      v14[1] = xmmword_1BB873C90;
      _OWORD v14[2] = xmmword_1BB875850;
      *unint64_t v14 = xmmword_1BB873F80;
    }
    ++v11;
    v12 += 6;
  }
  while (v11 != 4);
  for (uint64_t k = 48; k != 54; k += 3)
  {
    float v16 = &a3[k];
    v16[1] = xmmword_1BB873C90;
    void v16[2] = xmmword_1BB875850;
    *float v16 = xmmword_1BB873F80;
  }
  do
  {
    unint64_t v17 = &a3[k];
    v17[1] = xmmword_1BB873C90;
    vDSP_Length v17[2] = xmmword_1BB875850;
    *unint64_t v17 = xmmword_1BB873F80;
    k += 3;
  }
  while (k != 60);
  *(void *)&long long v18 = 0x101010101010101;
  *((void *)&v18 + 1) = 0x101010101010101;
  a3[65] = v18;
  a3[63] = v18;
  a3[64] = v18;
  a3[61] = v18;
  a3[62] = v18;
  a3[60] = v18;
  memcpy(a3, __src, 0x3C0uLL);
  memset(v56, 0, sizeof(v56));
  unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  DspLib::LoudspeakerController::calculatePowerGain((uint64_t)(v3 + 96), v19, (float *)v56);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (result)
  {
    unint64_t v21 = 0;
    float v22 = a3 + 60;
    uint64_t v23 = (char *)(v3 + 192);
    float v24 = (char *)(v3 + 24);
    float v52 = (char *)(v3 + 216);
    unint64_t v54 = (char *)(v3 + 48);
    uint64_t v25 = v3 + 97;
    float v26 = (char *)a3 + 966;
    long long v50 = (char *)(v3 + 192);
    float v51 = (char *)(v3 + 24);
    float v53 = v3;
    while (1)
    {
      float v27 = *((float *)v56 + v21);
      BOOL v28 = v27 < 1.0 && *(unsigned char *)(a2 + 536) == 0;
      uint64_t v29 = 0;
      *((unsigned char *)v22 + 12 * v21 + 5) = v28;
      uint64_t v30 = v25;
      do
      {
        BOOL v31 = *v30 < 1.0 && *(unsigned char *)(a2 + 536) == 0;
        v26[v29++] = v31;
        v30 += 24;
      }
      while (v29 != 4);
      BOOL v32 = v27 < 1.0;
      float v33 = *(float *)&v23[12 * v21 + 4];
      long long v34 = (char *)v22 + 12 * v21;
      v34[10] = v33 < 1.0;
      if (v33 < 1.0) {
        BOOL v28 = 1;
      }
      void v34[4] = v28;
      char v35 = v33 < 1.0 || v32;
      v34[11] = v35;
      BOOL v36 = *(float *)&v24[12 * v21 + 4] < 1.0 || *(float *)&v52[12 * v21 + 4] < 1.0;
      float v37 = v3[3 * v21 + 1];
      float v38 = *(float *)&v54[12 * v21 + 4];
      BOOL v55 = v36;
      if (v37 < 1.0) {
        break;
      }
      char v41 = v38 < 1.0 || v36;
      uint64_t v39 = *(void *)(a2 + 576);
      BOOL isReleasing = DspLib::BandCombiner::isReleasing((const float **)(v39 + 4544 * v21 + 2584));
      if (v41)
      {
        BOOL v40 = isReleasing;
LABEL_39:
        uint64_t v23 = v50;
        float v24 = v51;
LABEL_40:
        float v43 = *(float *)(v39 + 4544 * v21 + 4176);
        float v44 = *(float *)(*(void *)(a2 + 576) + 4544 * v21 + 32) - *(float *)(*(void *)(a2 + 576) + 4544 * v21 + 36);
        float v45 = *(float *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v21 + 10) | 0x1000000000)+ 16);
        if (v44 >= v45) {
          float v45 = v44;
        }
        BOOL v46 = v43 > (float)(v45 * 0.9);
        int v47 = 1;
        goto LABEL_43;
      }
      BOOL v40 = isReleasing;
      if (DspLib::BandCombiner::isReleasing((const float **)(v39 + 4544 * v21 + 2584))) {
        goto LABEL_39;
      }
      int v47 = 0;
      BOOL v46 = 0;
      uint64_t v23 = v50;
      float v24 = v51;
LABEL_43:
      if (*(unsigned char *)(a2 + 496))
      {
        if (v37 < 1.0) {
          BOOL v46 = 1;
        }
        if (*(unsigned char *)(a2 + 560)) {
          BOOL v46 = 0;
        }
      }
      else
      {
        BOOL v46 = 0;
      }
      *((unsigned char *)v22 + 12 * v21 + 1) = v46;
      if (v47) {
        BOOL v48 = *(float *)(v39 + 4544 * v21 + 4196) > (float)(*(float *)(v39 + 4544 * v21 + 1104) * 0.9)
      }
           || *(float *)(v39 + 4544 * v21 + 4516) > (float)(*(float *)(v39 + 4544 * v21 + 4512) * 0.9);
      else {
        BOOL v48 = 0;
      }
      if (*(unsigned char *)(a2 + 497)) {
        BOOL v49 = v55 || v48;
      }
      else {
        BOOL v49 = 0;
      }
      *((unsigned char *)v22 + 12 * v21 + 2) = v49;
      if (*(unsigned char *)(a2 + 498))
      {
        if (*(float *)(v39 + 4544 * v21 + 4220) <= (float)(*(float *)(v39 + 4544 * v21 + 4216) * 0.9)) {
          LOBYTE(v47) = 0;
        }
        if (v38 < 1.0) {
          LOBYTE(v47) = 1;
        }
      }
      else
      {
        LOBYTE(v47) = 0;
      }
      float v3 = v53;
      *((unsigned char *)v22 + 12 * v21 + 3) = v47;
      *((unsigned char *)v22 + 12 * v21++) = v46 | v47 | (v49 || v40);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
      v25 += 3;
      v26 += 12;
      if (v21 >= result) {
        return result;
      }
    }
    uint64_t v39 = *(void *)(a2 + 576);
    BOOL v40 = DspLib::BandCombiner::isReleasing((const float **)(v39 + 4544 * v21 + 2584));
    goto LABEL_40;
  }
  return result;
}

void DspLib::LoudspeakerController::calculatePowerGain(uint64_t a1@<X0>, unint64_t a2@<X1>, float *a3@<X8>)
{
  DspLib::fill(a3, 8uLL, 1.0);
  uint64_t v6 = 0;
  uint64_t v7 = (float *)(a1 + 4);
  do
  {
    if (a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v7;
      do
      {
        float v10 = *v9;
        v9 += 3;
        float v11 = v10;
        if (v10 >= a3[v8]) {
          float v11 = a3[v8];
        }
        a3[v8++] = v11;
      }
      while (a2 > v8);
    }
    ++v6;
    v7 += 24;
  }
  while (v6 != 4);
}

void DspLib::LoudspeakerController::Algorithm::filterbankAnalysis(void *a1, unint64_t a2, uint64_t a3)
{
  float v3 = (void *)a1[72];
  vDSP_Length v4 = (void *)a1[73];
  if (v3 != v4)
  {
    unsigned int v7 = 0;
    do
    {
      if (*(unsigned char *)(a3 + v7))
      {
        uint64_t v8 = v3[3];
        uint64_t v9 = a1[40];
        if (v8 == v9 - a2 + (*(uint64_t (**)(void *))(*a1 + 216))(a1))
        {
          uint64_t v10 = v3[3];
          if (a2 == -1) {
            unint64_t v11 = ((uint64_t)(v3[1] - *v3) >> 2) - v10;
          }
          else {
            unint64_t v11 = a2;
          }
          uint64_t v12 = (char *)(*v3 + 4 * v10);
          uint64_t v13 = v3[294];
          v47[0] = v3 + 313;
          v47[1] = 5;
          v47[2] = v13;
          DspLib::LinearPhaseFilterbank::process((uint64_t)(v3 + 282), v12, v11, v47);
          v3[3] += a2;
          unint64_t v14 = v3[312] + a2;
          v3[312] = v14;
          uint64_t v15 = 313;
          for (uint64_t i = 297; i != 312; i += 3)
            v3[v15++] = v3[i] + 4 * v14;
        }
        else
        {
          unint64_t v17 = v3[3];
          uint64_t v18 = a1[42];
          if (v17 < v18 - a2 + (*(uint64_t (**)(void *))(*a1 + 216))(a1) && v3[312] == 0)
          {
            do
            {
              unint64_t v20 = (*(uint64_t (**)(void *))(*a1 + 216))(a1);
              uint64_t v21 = a1[42];
              uint64_t v22 = (*(uint64_t (**)(void *))(*a1 + 216))(a1);
              uint64_t v23 = v3[3];
              if (v21 + v22 - (v23 + a2) < v20) {
                unint64_t v20 = v21 + v22 - (v23 + a2);
              }
              if (v20 == -1) {
                unint64_t v24 = ((uint64_t)(v3[1] - *v3) >> 2) - v23;
              }
              else {
                unint64_t v24 = v20;
              }
              DspLib::LinearPhaseFilterbank::consumeInput((uint64_t)(v3 + 282), (char *)(*v3 + 4 * v23), v24);
              unint64_t v25 = v3[3] + v20;
              v3[3] = v25;
              uint64_t v26 = a1[42];
            }
            while (v25 < v26 - a2 + (*(uint64_t (**)(void *))(*a1 + 216))(a1) && v3[312] == 0);
          }
          unint64_t v28 = v3[3];
          uint64_t v29 = a1[40];
          if (v28 < (*(uint64_t (**)(void *))(*a1 + 216))(a1) + v29)
          {
            do
            {
              uint64_t v30 = a1[40];
              unint64_t v31 = v30 + (*(uint64_t (**)(void *))(*a1 + 216))(a1) - (v3[3] + a2);
              unint64_t v32 = v31 % (*(uint64_t (**)(void *))(*a1 + 216))(a1);
              if (!v32) {
                unint64_t v32 = (*(uint64_t (**)(void *))(*a1 + 216))(a1);
              }
              uint64_t v33 = a1[40];
              uint64_t v34 = (*(uint64_t (**)(void *))(*a1 + 216))(a1);
              uint64_t v35 = v3[3];
              if (v34 + v33 - v35 >= v32) {
                unint64_t v36 = v32;
              }
              else {
                unint64_t v36 = v34 + v33 - v35;
              }
              float v37 = (char *)(*v3 + 4 * v35);
              uint64_t v38 = v3[294];
              if (v36 == -1) {
                unint64_t v39 = ((uint64_t)(v3[1] - *v3) >> 2) - v35;
              }
              else {
                unint64_t v39 = v36;
              }
              v46[0] = v3 + 313;
              v46[1] = 5;
              v46[2] = v38;
              DspLib::LinearPhaseFilterbank::process((uint64_t)(v3 + 282), v37, v39, v46);
              unint64_t v40 = v3[3] + v36;
              v3[3] = v40;
              unint64_t v41 = v3[312] + v36;
              v3[312] = v41;
              uint64_t v42 = 313;
              for (uint64_t j = 297; j != 312; j += 3)
                v3[v42++] = v3[j] + 4 * v41;
              uint64_t v44 = a1[40];
            }
            while (v40 < (*(uint64_t (**)(void *))(*a1 + 216))(a1) + v44);
          }
        }
      }
      ++v7;
      v3 += 568;
    }
    while (v3 != v4);
  }
}

uint64_t DspLib::LoudspeakerController::Algorithm::calculateGains@<X0>(vDSP_Length *a1@<X0>, vDSP_Length a2@<X1>, vDSP_Length *a3@<X2>, uint64_t a4@<X8>)
{
  vDSP_Length v4 = a3;
  uint64_t v6 = a1;
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  vDSP_Length v175 = a2;
  memset(v174, 0, sizeof(v174));
  uint64_t v8 = (uint64_t)(a3 + 48);
  unsigned int v9 = (*(uint64_t (**)(vDSP_Length *))(*a1 + 56))(a1);
  DspLib::LoudspeakerController::calculatePowerGain(v8, v9, (float *)v174);
  vDSP_Length v10 = v6[72];
  uint64_t v11 = *(void *)(v10 + 3944);
  uint64_t v12 = *(void *)(v10 + 3936);
  float v13 = *(float *)(v10 + 3928);
  unsigned int v173 = 0;
  uint64_t result = (*(uint64_t (**)(vDSP_Length *))(*v6 + 56))(v6);
  if (result)
  {
    uint64_t v130 = v4 + 24;
    long long v131 = v4 + 12;
    uint64_t v15 = v4 + 96;
    uint64_t v129 = a4 + 32;
    vDSP_Length v16 = (unint64_t)(float)(v13 * (float)(a2 + ((v11 - v12) >> 2)));
    uint64_t v134 = v4 + 120;
    long long v132 = DspLib::LoudspeakerController::kUnityGains;
    float v122 = v6;
    uint64_t v123 = a4;
    uint64_t v126 = v4;
    int v121 = v4 + 96;
    do
    {
      vDSP_Length v136 = v6[72];
      uint64_t v137 = v173;
      unint64_t v17 = (float **)(v136 + 4544 * v173);
      DspLib::LoudspeakerController::TargetInterpolator::process(v17 + 240, *((float *)v131 + 3 * v173), v175);
      DspLib::LoudspeakerController::TargetInterpolator::process(v17 + 246, *((float *)v130 + 3 * v173), v175);
      uint64_t v18 = v17 + 258;
      for (uint64_t i = 384; i != 768; i += 96)
      {
        DspLib::LoudspeakerController::TargetInterpolator::process(v18, *(float *)((char *)v4 + 12 * v173 + i), v16);
        v18 += 6;
      }
      vDSP_Length v135 = v136 + 4544 * v137;
      DspLib::LoudspeakerController::TargetInterpolator::process((float **)(v135 + 2016), *((float *)v15 + 3 * v173), v16);
      uint64_t v20 = v173;
      *(_DWORD *)(a4 + 4 * v173) = 1065353216;
      uint64_t v21 = (long long *)(v129 + 20 * v20);
      *((_DWORD *)v21 + 4) = 1065353216;
      *uint64_t v21 = v132;
      if (*((unsigned char *)v6 + 296))
      {
        uint64_t v22 = (uint64_t)v134 + 12 * v20;
        int v24 = *(unsigned __int8 *)(v22 + 11);
        uint64_t v23 = (unsigned char *)(v22 + 11);
        if (v24 | *((unsigned __int8 *)v134 + 12 * v20))
        {
          unsigned int v128 = (vDSP_Length *)((char *)v134 + 12 * v20);
          uint64_t v133 = v21;
          float v124 = v23;
          unint64_t v125 = &v120;
          vDSP_Length v172 = v175 + v6[43];
          unint64_t v171 = 0;
          vDSP_Length v25 = v136 + 4544 * v137;
          unint64_t v171 = (unint64_t)(float)(*(float *)(v25 + 3928)
                                         * (float)(v172
                                                 + ((uint64_t)(*(void *)(v25 + 3944) - *(void *)(v25 + 3936)) >> 2)));
          MEMORY[0x1F4188790](v20);
          v170[0] = (char *)&v120 - v26;
          v170[1] = v172;
          MEMORY[0x1F4188790](v27);
          uint64_t v168 = (uint64_t)&v120 - v34;
          vDSP_Length v169 = v35;
          uint64_t v127 = v28;
          uint64_t v36 = (uint64_t)v134 + 12 * v28;
          int v37 = *(unsigned __int8 *)(v36 + 2);
          char v140 = (unsigned char *)(v36 + 2);
          if (v37)
          {
            DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(v33 + v32 * (unint64_t)v31 + 3440), v29, v30);
            if (*(unsigned char *)(v6[72] + 4544 * v173 + 1096)) {
              DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(v136 + 4544 * v137 + 4016), v168, v169);
            }
          }
          MEMORY[0x1F4188790](v28);
          v167[0] = (char *)&v120 - v39;
          v167[1] = v38;
          uint64_t v43 = (uint64_t)v134 + 12 * v127;
          int v44 = *(unsigned __int8 *)(v43 + 3);
          uint64_t v139 = (unsigned char *)(v43 + 3);
          if (v44) {
            DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(v42 + v41 * (unint64_t)v40 + 3592), (uint64_t)&v120 - v39, v38);
          }
          float v138 = (vDSP_Length *)(v25 + 3280);
          unsigned int v141 = (float *)(v25 + 3112);
          MEMORY[0x1F4188790](5);
          BOOL v49 = (char *)&v120 - 4 * v48;
          uint64_t v50 = 0;
          uint64_t v187 = 0;
          long long v185 = 0u;
          long long v186 = 0u;
          unint64_t v52 = ((4 * v51) & 0xFFFFFFFFFFFFFFF0) + 16;
          do
          {
            *(void *)(v47 + v5DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v49;
            v50 += 8;
            v49 += v52;
          }
          while (v50 != 40);
          v165[0] = v47;
          v165[1] = v45;
          uint64_t v166 = v46;
          __n128 v57 = MEMORY[0x1F4188790](v45);
          uint64_t v59 = (char *)&v120 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v60 = 0;
          uint64_t v184 = 0;
          __n128 v182 = v57;
          __n128 v183 = v57;
          do
          {
            *(void *)(v55 + v6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v59;
            v60 += 8;
            v59 += v56;
          }
          while (v60 != 40);
          v163[0] = v55;
          v163[1] = v53;
          uint64_t v164 = v54;
          __n128 v66 = MEMORY[0x1F4188790](v53);
          uint64_t v68 = (char *)&v120 - v67;
          uint64_t v69 = 0;
          uint64_t v181 = 0;
          __n128 v179 = v66;
          __n128 v180 = v66;
          do
          {
            *(void *)(v63 + v69) = v68;
            v69 += 8;
            v68 += 4 * v64;
          }
          while (v69 != 40);
          if (*v65) {
            uint64_t v70 = v62;
          }
          else {
            uint64_t v70 = 0;
          }
          v161[0] = v63;
          v161[1] = v61;
          uint64_t v162 = v70;
          __n128 v76 = MEMORY[0x1F4188790](v61);
          uint64_t v78 = (char *)&v120 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v79 = 0;
          uint64_t v178 = 0;
          __n128 v176 = v76;
          __n128 v177 = v76;
          vDSP_Length v80 = v136;
          do
          {
            *(void *)(v74 + v79) = v78;
            v79 += 8;
            v78 += v75;
          }
          while (v79 != 40);
          uint64_t v81 = 0;
          v159[0] = v74;
          v159[1] = v71;
          uint64_t v160 = v73;
          vDSP_Length v82 = v80 + v137 * (unint64_t)v72;
          vDSP_Length v83 = v82 + 2544;
          unint64_t v84 = (void *)(v82 + 3664);
          uint64_t v85 = (DspLib::Biquad::SetupWrapper *)(v82 + 3712);
          do
          {
            DspLib::multiply(*(const float **)(v83 + v81), v172, *(float **)(v165[0] + v81), *v141);
            if (*v140) {
              DspLib::LoudspeakerController::SpeakerSystemModel::displacementZeroState((uint64_t)v138, *(void *)(v165[0] + v81), v166, *(void *)(v163[0] + v81), v164, *(void *)(v161[0] + v81), v162);
            }
            if (*v139)
            {
              uint64_t v86 = v166;
              uint64_t v87 = *(void *)(v165[0] + v81);
              uint64_t v88 = v160;
              uint64_t v89 = *(void *)(v159[0] + v81);
              DspLib::Biquad::SetupWrapper::reset(v85);
              DspLib::Biquad::Filter::process(v84, v87, v86, v89, v88);
            }
            v81 += 8;
          }
          while (v81 != 40);
          v158[0] = &v172;
          v158[1] = v128;
          v158[2] = v165;
          void v158[3] = (vDSP_Length *)v141;
          v158[4] = (vDSP_Length *)v135;
          uint64_t v6 = v122;
          v158[5] = v122;
          v158[6] = &v175;
          v158[7] = &v171;
          v158[8] = v138;
          v158[9] = (vDSP_Length *)v174;
          v158[10] = (vDSP_Length *)&v173;
          v158[11] = v126;
          __int16 v157 = 0;
          vDSP_Length v90 = v136 + 4544 * v137;
          uint64_t v156 = 0;
          DspLib::BandCombiner::gainEstimate(v90 + 2584, (uint64_t)&DspLib::LoudspeakerController::kUnityGains, 5, 0x100uLL, (uint64_t)&v156, 5, (uint64_t)&v154);
          __int16 v153 = 0;
          DspLib::GainSmoother::gainEstimate(v90 + 2856, 0x100uLL, (BOOL *)&v153, 1.0);
          float v92 = v91;
          if (*v124)
          {
            long long v151 = v154;
            int v152 = v155;
            float v93 = DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_0::operator()(v158, (float *)&v151, v91);
            a4 = v123;
            *(float *)(v123 + 4 * v127) = v93;
            DspLib::GainSmoother::gainEstimate(v90 + 2856, 0x100uLL, (BOOL *)&v153, v93);
            float v92 = v94;
          }
          else
          {
            a4 = v123;
          }
          v150[0] = (unsigned int *)v128;
          v150[1] = (unsigned int *)v170;
          vDSP_Length v4 = v126;
          v150[2] = (unsigned int *)v163;
          v150[3] = (unsigned int *)v126;
          v150[4] = &v173;
          v150[5] = (unsigned int *)v135;
          v150[6] = (unsigned int *)v6;
          v150[7] = (unsigned int *)&v168;
          v150[8] = (unsigned int *)v161;
          v150[9] = (unsigned int *)v167;
          v150[10] = (unsigned int *)v159;
          v150[11] = (unsigned int *)&v172;
          if (*(_DWORD *)(v6[64] + 16 * v173) != 2)
          {
            int v147 = 1065353216;
            long long v146 = v132;
            DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()(v150, (uint64_t)&v146, (uint64_t)&v148, v92);
            vDSP_Length v95 = v133;
            *uint64_t v133 = v148;
            *((_DWORD *)v95 + 4) = v149;
          }
          DspLib::BandCombiner::gainEstimate(v90 + 2584, (uint64_t)v133, 5, 0x100uLL, (uint64_t)&v156, 5, (uint64_t)&v154);
          uint64_t v96 = v133;
          uint64_t v97 = 0;
          uint64_t v15 = v121;
          while (!*((unsigned char *)&v156 + v97))
          {
            v97 += 2;
            if (v97 == 10) {
              goto LABEL_48;
            }
          }
          uint64_t v98 = 0;
          vDSP_Length v99 = (void *)(v136 + 4544 * v137 + 2832);
          unsigned int v100 = (unsigned __int8 *)&v156;
          do
          {
            int v101 = *v100;
            v100 += 2;
            if (!v101 || *(float *)((char *)v96 + v98) < (float)(*(float *)(*v99 + v98) * 1.4125)) {
              *(_DWORD *)((char *)&v154 + v98) = 1065353216;
            }
            v98 += 4;
          }
          while (v98 != 20);
          long long v148 = v154;
          int v149 = v155;
          long long v142 = v154;
          int v143 = v155;
          DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()(v150, (uint64_t)&v142, (uint64_t)&v144, v92);
          uint64_t v102 = v133;
          uint64_t v103 = 0;
          long long v154 = v144;
          int v155 = v145;
          uint64_t v104 = (unsigned __int8 *)&v156;
          do
          {
            int v105 = *v104;
            v104 += 2;
            float v106 = *(float *)((char *)&v154 + v103);
            if (!v105 || v106 < *(float *)((char *)&v148 + v103)) {
              *(float *)((char *)v102 + v103) = v106;
            }
            v103 += 4;
          }
          while (v103 != 20);
LABEL_48:
          LODWORD(v2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v173;
        }
      }
      unsigned int v107 = v20 + 1;
      unsigned int v173 = v20 + 1;
      uint64_t result = (*(uint64_t (**)(vDSP_Length *))(*v6 + 56))(v6);
    }
    while (v107 < result);
  }
  if (*((unsigned char *)v6 + 536) && !*((unsigned char *)v6 + 568))
  {
    if ((*(unsigned int (**)(vDSP_Length *))(*v6 + 56))(v6))
    {
      unint64_t v117 = 0;
      float v118 = 1.0;
      do
      {
        if (*(float *)(a4 + 4 * v117) < v118) {
          float v118 = *(float *)(a4 + 4 * v117);
        }
        ++v117;
      }
      while (v117 < (*(unsigned int (**)(vDSP_Length *))(*v6 + 56))(v6));
    }
    else
    {
      float v118 = 1.0;
    }
    uint64_t result = (*(uint64_t (**)(vDSP_Length *))(*v6 + 56))(v6);
    if (result)
    {
      unint64_t v119 = 0;
      do
      {
        *(float *)(a4 + 4 * v119++) = v118;
        uint64_t result = (*(uint64_t (**)(vDSP_Length *))(*v6 + 56))(v6);
      }
      while (v119 < result);
    }
  }
  else
  {
    vDSP_Length v108 = v6[63];
    if (v108)
    {
      vDSP_Length v109 = 0;
      vDSP_Length v110 = v6[64];
      vDSP_Length v111 = v6[65];
      do
      {
        if (v110 != v111)
        {
          unsigned int v112 = 0;
          float v113 = 1.0;
          vDSP_Length v114 = v110;
          do
          {
            if (*(void *)(v114 + 8) == v109 && *(float *)(a4 + 4 * v112) < v113) {
              float v113 = *(float *)(a4 + 4 * v112);
            }
            ++v112;
            v114 += 16;
          }
          while (v114 != v111);
          if (v110 != v111)
          {
            unsigned int v115 = 0;
            vDSP_Length v116 = v110;
            do
            {
              if (*(void *)(v116 + 8) == v109) {
                *(float *)(a4 + 4 * v115) = v113;
              }
              ++v115;
              v116 += 16;
            }
            while (v116 != v111);
          }
        }
        vDSP_Length v109 = (v109 + 1);
      }
      while (v108 > v109);
    }
  }
  return result;
}

float DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_0::operator()(vDSP_Length **a1, float *a2, float a3)
{
  v111[5] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[5];
  vDSP_Length v7 = **a1;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  vDSP_Length v10 = (float *)((char *)&v99 - v9);
  if (**(unsigned char **)(v8 + 8))
  {
    DspLib::multiply(*(const float **)*a1[2], a1[2][2], v10, *a2);
    for (uint64_t i = 1; i != 5; ++i)
      DspLib::multiplyAccumulate(v10, v7, *(const float **)(*a1[2] + 8 * i), a2[i]);
  }
  else
  {
    unint64_t v14 = (float *)a1[3];
    float v13 = a1[4];
    vDSP_Length v15 = *v13;
    uint64_t v16 = (uint64_t)(v13[1] - *v13) >> 2;
    uint64_t v17 = (*(uint64_t (**)(vDSP_Length *))(*v6 + 216))(v6) - *a1[6];
    if (**a1 == -1) {
      vDSP_Length v18 = v16 - v17;
    }
    else {
      vDSP_Length v18 = **a1;
    }
    DspLib::multiply((const float *)(v15 + 4 * v17), v18, v10, *v14);
  }
  vDSP_Length v19 = **a1;
  uint64_t v20 = MEMORY[0x1F4188790](v12);
  uint64_t v22 = (const float *)((char *)&v99 - v21);
  if (*((unsigned char *)a1[1] + 4))
  {
    uint64_t v23 = a1[3];
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v23 + 16));
    DspLib::Biquad::Filter::process(v23 + 10, (uint64_t)v10, v7, (uint64_t)v22, v19);
    vDSP_Length v24 = **a1;
    uint64_t v26 = MEMORY[0x1F4188790](v25);
    uint64_t v28 = (float *)((char *)&v99 - v27);
    if (v29) {
      DspLib::multiply(v10, v7, v22, v19, (float *)((char *)&v99 - v27));
    }
    vDSP_Length v19 = v24;
  }
  else
  {
    uint64_t v26 = MEMORY[0x1F4188790](v20);
    uint64_t v28 = (float *)((char *)&v99 - v30);
  }
  uint64_t v31 = MEMORY[0x1F4188790](v26);
  uint64_t v34 = (const float *)((char *)&v99 - v33);
  LODWORD(v33) = *(unsigned __int8 *)(v35 + 10);
  uint64_t v103 = v32;
  uint64_t v102 = v34;
  if (v33)
  {
    DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState((float32x2_t *)a1[8], (uint64_t)v28, v19, (uint64_t)v34);
    int v105 = (uint64_t *)*a1[7];
  }
  else
  {
    int v105 = v32;
  }
  vDSP_Length v36 = **a1;
  uint64_t v37 = MEMORY[0x1F4188790](v31);
  uint64_t v39 = (float *)((char *)&v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v42 = (float *)((char *)&v99 - v41);
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v104 = (float *)((char *)&v99 - v44);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  BOOL v49 = &v99 - 2 * v48;
  uint64_t v50 = 0;
  *uint64_t v47 = 0u;
  v47[1] = 0u;
  do
  {
    *(void *)((char *)v47 + v5DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v49;
    v50 += 8;
    BOOL v49 = (uint64_t *)((char *)v49 + ((4 * v46) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  while (v50 != 32);
  uint64_t v51 = MEMORY[0x1F4188790](v45);
  uint64_t v54 = (char *)&v99 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = 0;
  memset(v110, 0, sizeof(v110));
  do
  {
    *(void *)((char *)v110 + v55) = v54;
    v55 += 8;
    v54 += (v52 & 0xFFFFFFFFFFFFFFF0) + 16;
  }
  while (v55 != 32);
  if (*((unsigned char *)a1[1] + 5))
  {
    uint64_t v56 = *(unsigned int *)a1[10];
    __n128 v57 = a1[4];
    float v58 = *((float *)a1[9] + v56);
    if (v58 < *((float *)v57 + 1087)) {
      float v58 = *((float *)v57 + 1087);
    }
    if (v58 >= a3) {
      float v58 = a3;
    }
    float v59 = *((float *)a1[11] + 3 * v56 + 193);
    if (v59 < *((float *)v57 + 1070)) {
      float v59 = *((float *)v57 + 1070);
    }
    if (v59 < v58) {
      float v58 = v59;
    }
    DspLib::multiply(v10, v7, v39, v58);
    DspLib::LoudspeakerController::EfficiencyModel::processKernel((uint64_t)(a1[8] + 6), (int)v39, v36, v42, v36, v104, v36, a1[8][19]);
    uint64_t v60 = (float32x4_t *)a1[8];
    v108[0] = v111;
    v108[1] = (uint64_t *)4;
    v108[2] = v105;
    DspLib::LoudspeakerController::SpeakerSystemModel::averagePowersZeroInput(v60, (uint64_t)v42, v36, v108);
    DspLib::multiply(v28, v19, v104);
    uint64_t v61 = (float32x4_t *)a1[8];
    v107[0] = (uint64_t *)v110;
    v107[1] = (uint64_t *)4;
    v107[2] = v105;
    DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(v61, (uint64_t)v28, v19, v107);
    vDSP_Length v62 = **a1;
  }
  else
  {
    vDSP_Length v62 = v36;
  }
  uint64_t v63 = MEMORY[0x1F4188790](v51);
  unint64_t v65 = (const float *)((char *)&v99 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(v66 + 4))
  {
    DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(a1[3] + 1), (uint64_t)v65, v62);
    DspLib::multiply(v10, v7, v65, v62, v28);
  }
  uint64_t v67 = MEMORY[0x1F4188790](v63);
  int v71 = *(unsigned __int8 *)(v70 + 10);
  vDSP_Length v101 = v68;
  unsigned int v100 = (const float *)((char *)&v99 - v69);
  if (v71)
  {
    DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState((float32x2_t *)a1[8], (uint64_t)v28, v19, (uint64_t)&v99 - v69);
    unsigned int v72 = (uint64_t *)*a1[7];
  }
  else
  {
    unsigned int v72 = (uint64_t *)v68;
  }
  uint64_t v73 = MEMORY[0x1F4188790](v67);
  __n128 v76 = (char *)&v99 - ((v75 + 79) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v77 = 0;
  HIDWORD(v78) = 0;
  memset(v109, 0, sizeof(v109));
  do
  {
    *(void *)((char *)v109 + v77) = v76;
    v77 += 8;
    v76 += ((4 * v74) & 0xFFFFFFFFFFFFFFF0) + 16;
  }
  while (v77 != 32);
  if (*((unsigned char *)a1[1] + 5))
  {
    DspLib::multiply(v28, v19, v104);
    uint64_t v79 = (float32x4_t *)a1[8];
    v106[0] = (uint64_t *)v109;
    v106[1] = (uint64_t *)4;
    v106[2] = v72;
    DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(v79, (uint64_t)v28, v19, v106);
  }
  uint64_t v80 = 0;
  float v81 = 1.0;
  uint64_t v82 = 262;
  uint64_t v83 = 292;
  uint64_t v84 = 384;
  do
  {
    if (*((unsigned char *)v6 + 536))
    {
      LODWORD(v78) = *(_DWORD *)((char *)a1[11] + v83);
    }
    else
    {
      if (!*((unsigned char *)a1[1] + v80 + 6)) {
        goto LABEL_48;
      }
      uint64_t v85 = (float *)((char *)a1[11] + 12 * *(unsigned int *)a1[10] + v84);
      *(float *)&double v78 = *v85;
      *(float *)&double v78 = DspLib::LoudspeakerController::computeGainsSquared((const float *)v111[v80], (vDSP_Length)v105, *((const float **)v110 + v80), v78, v85[1], v85[2], (uint64_t)v105, *((const float **)v109 + v80), (vDSP_Length)v72, a1[4][v82 - 1]);
    }
    if (*(float *)&v78 < v81) {
      float v81 = *(float *)&v78;
    }
LABEL_48:
    ++v80;
    v82 += 6;
    v83 += 12;
    v84 += 96;
  }
  while (v80 != 4);
  float v86 = 1.0;
  if (v81 <= 1.0) {
    float v86 = v81;
  }
  if (v81 >= *((float *)a1[4] + 1087)) {
    float v87 = v86;
  }
  else {
    float v87 = *((float *)a1[4] + 1087);
  }
  if (*((unsigned char *)a1[1] + 10))
  {
    MEMORY[0x1F4188790](v73);
    uint64_t v89 = (const float *)((char *)&v99 - v88);
    unint64_t v90 = *a1[7];
    DspLib::LoudspeakerController::SpeakerSystemModel::temperatureZeroInput((float32x2_t *)a1[8], (float *)((char *)&v99 - v88), v90);
    float v92 = a1[4];
    float v91 = a1 + 4;
    uint64_t v93 = (uint64_t)v91[7] + 12 * *(unsigned int *)v91[6];
    LODWORD(v94) = *(_DWORD *)(v93 + 768);
    float v95 = DspLib::LoudspeakerController::computeGainsSquared(v89, v90, v102, v94, *(float *)(v93 + 772), *(float *)(v93 + 776), (uint64_t)v103, v100, v101, v92[255]);
    float v96 = 1.0;
    if (v95 <= 1.0) {
      float v96 = v95;
    }
    if (v95 >= *((float *)*v91 + 1070)) {
      float v97 = v96;
    }
    else {
      float v97 = *((float *)*v91 + 1070);
    }
    if (v97 < v87) {
      return v97;
    }
  }
  return v87;
}

void DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a4 == 0.0)
  {
    *(_DWORD *)(a3 + 16) = 1065353216;
    *(_OWORD *)a3 = DspLib::LoudspeakerController::kUnityGains;
  }
  else
  {
    if (*(unsigned char *)*a1)
    {
      uint64_t v8 = a1[6];
      if (*((unsigned char *)*a1 + 2))
      {
        vDSP_Length v10 = a1 + 4;
        uint64_t v9 = a1[4];
        uint64_t v11 = (uint64_t *)a1[1];
        uint64_t v12 = a1[2];
        uint64_t v13 = *v11;
        uint64_t v14 = v11[1];
        uint64_t v65 = *(void *)v12;
        long long v66 = *(_OWORD *)(v12 + 2);
        float v15 = *(float *)&a1[3][3 * *v9 + 26];
        long long v63 = *(_OWORD *)a2;
        int v64 = *(_DWORD *)(a2 + 16);
        DspLib::LoudspeakerController::computeGainsSigned(v13, v14, &v65, &v63, *((void *)a1[5] + 243), 0, &v67, v15, a4);
        *(_OWORD *)a2 = v67;
        *(_DWORD *)(a2 + 16) = v68;
        if (*(unsigned char *)(*((void *)v8 + 72) + 4544 * **v10 + 1096))
        {
          uint64_t v16 = (*(uint64_t (**)(unsigned int *))(*(void *)v8 + 216))(v8);
          MEMORY[0x1F4188790](v16);
          vDSP_Length v18 = (float *)((char *)&v52 - v17);
          uint64_t v20 = *v19;
          uint64_t v21 = (*(uint64_t (**)(unsigned int *))(*(void *)v8 + 216))(v8);
          DspLib::fill(v18, v21 + v20, *((float *)a1[5] + 1128));
          uint64_t v22 = (uint64_t *)a1[7];
          uint64_t v23 = a1[8];
          uint64_t v24 = *v22;
          uint64_t v25 = v22[1];
          uint64_t v61 = *(void *)v23;
          long long v62 = *(_OWORD *)(v23 + 2);
          float v26 = *(float *)&a1[3][3 * *a1[4] + 218];
          long long v59 = *(_OWORD *)a2;
          int v60 = *(_DWORD *)(a2 + 16);
          DspLib::LoudspeakerController::computeGainsSigned(v24, v25, &v61, &v59, (uint64_t)v18, 0, &v67, v26, a4);
          *(_OWORD *)a2 = v67;
          *(_DWORD *)(a2 + 16) = v68;
        }
      }
      uint64_t v27 = *a1;
      if (*((unsigned char *)*a1 + 3))
      {
        long long v67 = 0uLL;
        int v68 = 0;
        uint64_t v28 = (uint64_t *)a1[9];
        int v29 = a1[10];
        uint64_t v30 = *v28;
        uint64_t v31 = v28[1];
        uint64_t v57 = *(void *)v29;
        long long v58 = *(_OWORD *)(v29 + 2);
        float v32 = *(float *)&a1[3][3 * *a1[4] + 50];
        long long v33 = *(_OWORD *)a2;
        int v56 = *(_DWORD *)(a2 + 16);
        uint64_t v34 = a1[5];
        long long v55 = v33;
        DspLib::LoudspeakerController::computeGainsSigned(v30, v31, &v57, &v55, *((void *)v34 + 249), *((void *)v34 + 531), &v67, v32, a4);
        uint64_t v35 = a1[5];
        unint64_t v36 = *((void *)v35 + 529);
        unint64_t v37 = *((void *)v35 + 530);
        BOOL v38 = v37 > v36;
        unint64_t v39 = v37 - v36;
        if (v38)
        {
          uint64_t v40 = (float *)&v67 + v36;
          uint64_t v41 = (float *)(a2 + 4 * v36);
          do
          {
            float v42 = *v40 * a4;
            if (v42 < *((float *)v35 + 1057)) {
              float v42 = *((float *)v35 + 1057);
            }
            float v43 = v42 / a4;
            *uint64_t v40 = v43;
            if (v43 < *v41) {
              *uint64_t v41 = v43;
            }
            ++v40;
            ++v41;
            --v39;
          }
          while (v39);
        }
        uint64_t v27 = *a1;
      }
      if (*((unsigned char *)v27 + 1))
      {
        uint64_t v45 = a1[4];
        uint64_t v44 = (uint64_t *)a1[5];
        uint64_t v46 = *v44;
        vDSP_Length v47 = *(void *)a1[11];
        v54[0] = (uint64_t)(v44 + 318);
        v54[1] = 5;
        v54[2] = v47;
        LODWORD(v44) = *v45;
        long long v52 = *(_OWORD *)a2;
        int v53 = *(_DWORD *)(a2 + 16);
        uint64_t v48 = *((void *)v8 + 72) + 4544 * v44;
        float v49 = *(float *)(v48 + 32);
        float v50 = *(float *)(v48 + 36);
        float v51 = *(float *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v44 + 10) | 0x1000000000)+ 16);
        if ((float)(v49 - v50) >= v51) {
          float v51 = v49 - v50;
        }
        DspLib::LoudspeakerController::computeGainsAmplitude(v46, v47, v54, &v52, &v67, a4, v51);
        *(_OWORD *)a2 = v67;
        *(_DWORD *)(a2 + 16) = v68;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 16);
  }
}

void DspLib::LoudspeakerController::Algorithm::filterbankSynthesis(void *a1, uint64_t a2, void *a3)
{
  if (a3[1])
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = a3[2];
    uint64_t v26 = a2 + 32;
    do
    {
      uint64_t v8 = a1[72];
      uint64_t v9 = (const float **)(v8 + 4544 * v5);
      vDSP_Length v10 = (const float *)(v26 + 20 * v5);
      if (DspLib::BandCombiner::isReleasing(v9 + 323) || DspLib::minv(v10, 5uLL) < 1.0)
      {
        v28[0] = v8 + 4544 * v5 + 2544;
        v28[1] = 5;
        v28[2] = v7;
        DspLib::BandCombiner::process((DspLib::BandCombiner *)(v9 + 323), v28, (uint64_t)v10, 5, *(float **)(*a3 + 8 * v5), a3[2]);
      }
      else
      {
        uint64_t v11 = *v9;
        uint64_t v12 = v9[1] - *v9;
        uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 216))(a1);
        if (v7 == -1) {
          uint64_t v14 = v12 - (v13 + 1);
        }
        else {
          uint64_t v14 = v7;
        }
        DspLib::copy((void *)&v11[v13 - v7], v14, *(void **)(*a3 + 8 * v5));
      }
      uint64_t v15 = 4544 * v6;
      uint64_t v16 = v8 + 4544 * v5;
      DspLib::GainSmoother::process(v16 + 2856, *(void **)(*a3 + 8 * v5), a3[2], *(void **)(*a3 + 8 * v5), a3[2], *(float *)(a2 + 4 * v5));
      uint64_t v17 = (void *)(v16 + 2496);
      if (*(void *)(v16 + 2496) <= v7)
      {
        unint64_t v22 = 0;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = v8 + v15;
        do
        {
          uint64_t v20 = *(char **)(v19 + v18 + 2376);
          if (a1[43] == -1) {
            uint64_t v21 = ((uint64_t)(*(void *)(v19 + v18 + 2384) - (void)v20) >> 2) - v7;
          }
          else {
            uint64_t v21 = a1[43];
          }
          DspLib::copy(&v20[4 * v7], v21, v20);
          v18 += 24;
        }
        while (v18 != 120);
        unint64_t v22 = *v17 - v7;
      }
      uint64_t v23 = 0;
      *uint64_t v17 = v22;
      uint64_t v24 = (uint64_t *)(v8 + v15 + 2376);
      do
      {
        uint64_t v25 = *v24;
        v24 += 3;
        *(void *)(v8 + v15 + 2504 + v23) = v25 + 4 * v22;
        v23 += 8;
      }
      while (v23 != 40);
      uint64_t v5 = ++v6;
    }
    while (a3[1] > (unint64_t)v6);
  }
}

uint64_t DspLib::LoudspeakerController::Algorithm::fastPeakLimiter(uint64_t result, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(result + 560))
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 496))
    {
      if (*(unsigned char *)(result + 296))
      {
        v28[1] = v28;
        float v4 = *(float *)(result + 564);
        __n128 v5 = MEMORY[0x1F4188790](result);
        unint64_t v7 = (float *)((char *)v28 - v6);
        vDSP_Length v9 = *(void *)(v8 + 16);
        uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v2 + 56))(v2, v5);
        if (result)
        {
          unint64_t v10 = 0;
          float v11 = 1.0 - v4;
          do
          {
            uint64_t v12 = *(void *)(v2 + 576);
            uint64_t v13 = (float *)(v12 + 4544 * v10);
            float v14 = v13[8] - v13[9];
            v15.i32[0] = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v10 + 10) | 0x1000000000)+ 16);
            if (v14 >= *(float *)v15.i32) {
              *(float *)v15.i32 = v14;
            }
            int8x16_t v29 = v15;
            DspLib::abs(*(const float **)(*a2 + 8 * v10), a2[2], v7);
            if (v13[1120] != 1.0 || (*(float *)v16.i32 = DspLib::maxv(v7, v9), *(float *)v16.i32 > *(float *)v29.i32))
            {
              uint64_t v17 = a2[2];
              if (v17)
              {
                uint64_t v18 = 0;
                uint64_t v19 = v13 + 1120;
                uint64_t v20 = *(void *)(*a2 + 8 * v10);
                uint64_t v21 = (float *)(v12 + 4544 * v10 + 4484);
                uint64_t v22 = 4 * v17;
                do
                {
                  float v23 = 1.0;
                  if (*v19 < 0.99) {
                    float v23 = v11 + (float)(*v19 * *(float *)(v2 + 564));
                  }
                  *uint64_t v19 = v23;
                  float v24 = v7[v18];
                  int8x16_t v25 = v29;
                  if ((float)(v23 * v24) <= *(float *)v29.i32)
                  {
                    *(float *)v16.i32 = v23 * *(float *)(v20 + 4 * v18);
                  }
                  else
                  {
                    *uint64_t v19 = *(float *)v29.i32 / v24;
                    v16.i32[0] = *(_DWORD *)(v20 + 4 * v18);
                    v26.i64[0] = 0x8000000080000000;
                    v26.i64[1] = 0x8000000080000000;
                    v16.i32[0] = vbslq_s8(v26, v25, v16).u32[0];
                  }
                  *(_DWORD *)(v20 + 4 * v18) = v16.i32[0];
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 192))(v2))
                  {
                    float v27 = *v21;
                    if (*v21 >= *v19) {
                      float v27 = *v19;
                    }
                    *uint64_t v21 = v27;
                  }
                  ++v18;
                  v22 -= 4;
                }
                while (v22);
              }
            }
            ++v10;
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
          }
          while (v10 < result);
        }
      }
    }
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::outputAnalysis(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = a2;
  vDSP_Length v3 = a2[2];
  float v4 = *(float *)(*(void *)(a1 + 576) + 3928)
     * (float)(v3
             + ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 3944) - *(void *)(*(void *)(a1 + 576) + 3936)) >> 2));
  unint64_t v5 = (unint64_t)v4;
  if ((unint64_t)v4 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = (unint64_t)v4;
  }
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v64[-2 * v7];
  uint64_t v9 = 0;
  memset(v82, 0, sizeof(v82));
  do
  {
    *(void *)((char *)v82 + v9) = v8;
    v9 += 8;
    uint64_t v8 = (void *)((char *)v8 + 4 * ((v6 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 16);
  }
  while (v9 != 32);
  for (uint64_t i = 0; i != 32; i += 8)
    DspLib::clear(*(float **)((char *)v82 + i), v5);
  if (v70[1])
  {
    LODWORD(v12) = 0;
    if (v3 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v3;
    }
    unint64_t v14 = ((4 * (v6 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
    uint64_t v66 = 4 * v13;
    v64[2] = 16 * (((v6 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 4);
    v64[1] = 4 * v6;
    v64[0] = v2;
    do
    {
      int v68 = v64;
      int v69 = v12;
      uint64_t v67 = 4544 * v12;
      MEMORY[0x1F4188790](v11);
      int v71 = (float *)((char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1F4188790](v16);
      uint64_t v18 = (float *)((char *)v64 - v17);
      MEMORY[0x1F4188790](v19);
      uint64_t v21 = (float *)((char *)v64 - v20);
      MEMORY[0x1F4188790](v22);
      uint64_t v74 = (float *)((char *)v64 - v24);
      if (*(unsigned char *)(*(void *)(v2 + 576) + 4544 * v25 + 1096)) {
        vDSP_Length v26 = v3;
      }
      else {
        vDSP_Length v26 = 0;
      }
      vDSP_Length v72 = v26;
      MEMORY[0x1F4188790](v23);
      uint64_t v73 = (float *)((char *)v64 - v27);
      MEMORY[0x1F4188790](v28);
      __n128 v76 = (float *)((char *)v64 - v29);
      MEMORY[0x1F4188790](v30);
      long long v33 = (char *)v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v34 = 0;
      memset(v81, 0, sizeof(v81));
      do
      {
        *(void *)((char *)v81 + v34) = v33;
        v34 += 8;
        v33 += v14;
      }
      while (v34 != 32);
      MEMORY[0x1F4188790](v31);
      unint64_t v36 = (float *)((char *)v64 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v39 = v38 + 4544 * v37;
      uint64_t v75 = v38;
      uint64_t v41 = v70;
      uint64_t v40 = v71;
      float v42 = *(const float **)(*v70 + 8 * v37);
      vDSP_Length v43 = v70[2];
      float v44 = *(float *)(v39 + 3112);
      uint64_t v77 = v37;
      vDSP_Length v3 = v45;
      DspLib::multiply(v42, v43, v71, v44);
      DspLib::Biquad::Filter::process((void *)(v39 + 3120), (uint64_t)v40, v3, (uint64_t)v18, v3);
      uint64_t v65 = v18;
      DspLib::multiply(v40, v3, v18, v3, v21);
      int v46 = *(_DWORD *)(*(void *)(v64[0] + 512) + 16 * v77);
      *(void *)&long long v79 = v81;
      *((void *)&v79 + 1) = 4;
      unint64_t v80 = v5;
      double v78 = v36;
      uint64_t v47 = (uint64_t)v40;
      uint64_t v2 = v64[0];
      uint64_t v48 = v21;
      uint64_t v49 = v77;
      DspLib::LoudspeakerController::SpeakerSystemModel::process(v39 + 3280, v47, v3, v48, v3, &v79, (uint64_t)v74, v3, (uint64_t)v76, v3, v36, v5, v46 != 2);
      float v50 = *(const float **)(*v41 + 8 * v49);
      vDSP_Length v51 = v41[2];
      uint64_t v52 = v75;
      *(float *)(v39 + 4192) = DspLib::maxMagnitude(v50, v51);
      if (v46 != 2)
      {
        *(float *)(v52 + 4544 * v49 + 4208) = DspLib::maxMagnitude(v74, v3);
        if (*(unsigned char *)(*(void *)(v2 + 576) + 4544 * v49 + 1096)) {
          *(float *)(v52 + 4544 * v49 + 4524) = DspLib::maxMagnitude(v73, v72);
        }
        *(float *)(v52 + 4544 * v49 + 426DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::maxMagnitude(v76, v3);
      }
      float v11 = (char **)v78;
      if (v5)
      {
        uint64_t v53 = 0;
        *(float *)(v52 + 4544 * v49 + 4276) = DspLib::maxv(v78, v5);
        uint64_t v54 = v52 + v67 + 4332;
        do
        {
          *(float *)(v54 + 4 * v53) = DspLib::maxv(*((const float **)v81 + v53), v5);
          DspLib::add(*((float **)v82 + v53), v5, *((const float **)v81 + v53));
          ++v53;
        }
        while (v53 != 4);
        uint64_t v52 = v75;
        float v11 = DspLib::CircularDelay::write((char **)(v75 + 4544 * v49 + 4440), (char *)v78, v5);
      }
      if (!*(unsigned char *)(v2 + 616)) {
        goto LABEL_48;
      }
      if (v3)
      {
        long long v55 = *(DspLib::Logger **)(v2 + 656);
        if (v55)
        {
          DspLib::Logger::logData(v55, v71, v3);
          long long v55 = *(DspLib::Logger **)(v2 + 656);
          if (v55)
          {
            DspLib::Logger::logData(v55, v65, v3);
            long long v55 = *(DspLib::Logger **)(v2 + 656);
            if (v55) {
              DspLib::Logger::logData(v55, v74, v3);
            }
          }
        }
        if (!*(unsigned char *)(*(void *)(v2 + 576) + 4544 * v49 + 1096))
        {
          MEMORY[0x1F4188790](v55);
          uint64_t v57 = (float *)((char *)v64 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
          DspLib::clear(v57, v3);
          long long v58 = *(DspLib::Logger **)(v2 + 656);
          if (v58) {
            DspLib::Logger::logData(v58, v57, v3);
          }
          goto LABEL_37;
        }
        float v11 = *(char ***)(v2 + 656);
        if (v11)
        {
          DspLib::Logger::logData((DspLib::Logger *)v11, v73, v3);
LABEL_37:
          float v11 = *(char ***)(v2 + 656);
          if (v11) {
            DspLib::Logger::logData((DspLib::Logger *)v11, v76, v3);
          }
        }
      }
      if (v5)
      {
        for (uint64_t j = 0; j != 32; j += 8)
        {
          int v60 = *(DspLib::Logger **)(v2 + 640);
          if (v60) {
            DspLib::Logger::logData(v60, *(float **)((char *)v81 + j), v5);
          }
        }
        uint64_t v61 = *(DspLib::Logger **)(v2 + 640);
        long long v62 = v78;
        if (v61) {
          DspLib::Logger::logData(v61, v78, v5);
        }
        DspLib::add(v62, v5, -*(float *)(v52 + 4544 * v49 + 3916));
        float v11 = *(char ***)(v2 + 640);
        if (v11) {
          DspLib::Logger::logData((DspLib::Logger *)v11, v62, v5);
        }
      }
LABEL_48:
      unint64_t v12 = (v69 + 1);
    }
    while (v70[1] > v12);
  }
  if (v5)
  {
    for (uint64_t k = 0; k != 4; ++k)
      *(float *)(v2 + 476 + 4 * k) = DspLib::maxv(*((const float **)v82 + k), v5);
  }
}

void DspLib::LoudspeakerController::Algorithm::processBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v63[13] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 616))
    {
      uint64_t v9 = *(DspLib::Logger **)(a1 + 624);
      if (v9) {
        DspLib::Logger::logData(v9, (float)v4);
      }
      unint64_t v10 = *(DspLib::Logger **)(a1 + 656);
      if (v10) {
        DspLib::Logger::logData(v10, (float)v4);
      }
    }
    vDSP_Length v40 = v4;
    *(void *)&long long v41 = a2;
    *(void *)&long long v42 = a3;
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 552))
    {
      if (*(unsigned char *)(a4 + 24))
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = 3336;
          do
          {
            uint64_t v14 = *(void *)(a1 + 576);
            MEMORY[0x1F4188790](v11);
            uint64_t v16 = (const float *)((char *)&v39 - v15);
            vDSP_Length v17 = *(void *)(a4 + 16);
            DspLib::multiply(*(const float **)(*(void *)a4 + 8 * v12), v17, (float *)((char *)&v39 - v15), *(float *)(a1 + 556));
            uint64_t v18 = v14 + v13;
            float v19 = DspLib::DCTracker::process(*(void *)(v18 + 1136), v16, v17);
            *(float *)(v18 - 3072) = v19;
            *(float *)uint64_t v18 = v19;
            ++v12;
            uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            v13 += 4544;
          }
          while (v12 < v11);
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v59 = 136315394;
        int v60 = "DspLibLoudspeakerController.cpp";
        __int16 v61 = 1024;
        int v62 = 2645;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d LoudspeakerController battery tracking is enabled, but no telemetry is present", (uint8_t *)&v59, 0x12u);
      }
    }
    uint64_t v20 = (long long *)v42;
    if (**(void **)v41 != **(void **)v42)
    {
      long long v57 = *(_OWORD *)v41;
      uint64_t v58 = *(void *)(v41 + 16);
      long long v55 = *(_OWORD *)v42;
      uint64_t v56 = *(void *)(v42 + 16);
      DspLib::copy(&v57, &v55);
    }
    long long v53 = *v20;
    uint64_t v54 = *((void *)v20 + 2);
    DspLib::LoudspeakerController::Algorithm::inputCompensation(a1, &v53);
    uint64_t v51 = *(void *)v20;
    long long v52 = *(long long *)((char *)v20 + 8);
    unint64_t v21 = DspLib::LoudspeakerController::Algorithm::inputAnalysis(a1, &v51);
    if (*(unsigned char *)(a1 + 616))
    {
      uint64_t v22 = *(DspLib::Logger **)(a1 + 640);
      if (v22) {
        DspLib::Logger::logData(v22, (float)v21);
      }
    }
    DspLib::LoudspeakerController::Algorithm::findTargets((DspLib::LoudspeakerController::Algorithm *)a1, v21, v50);
    DspLib::LoudspeakerController::Algorithm::findTargetActivity((float *)v50, a1, &v59);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    __n128 v24 = MEMORY[0x1F4188790](v23);
    vDSP_Length v26 = (char *)&v39 - v25;
    if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v24))
    {
      unint64_t v27 = 0;
      uint64_t v28 = (char *)v63;
      do
      {
        char v29 = *v28;
        v28 += 12;
        v26[v27++] = v29;
      }
      while (v27 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    vDSP_Length v30 = v40;
    DspLib::LoudspeakerController::Algorithm::filterbankAnalysis((void *)a1, v40, (uint64_t)v26);
    memset(v49, 0, 192);
    DspLib::LoudspeakerController::Algorithm::calculateGains((vDSP_Length *)a1, v30, (vDSP_Length *)&v59, (uint64_t)v49);
    long long v47 = *v20;
    uint64_t v48 = *((void *)v20 + 2);
    DspLib::LoudspeakerController::Algorithm::filterbankSynthesis((void *)a1, (uint64_t)v49, &v47);
    long long v45 = *v20;
    uint64_t v46 = *((void *)v20 + 2);
    DspLib::LoudspeakerController::Algorithm::fastPeakLimiter(a1, &v45);
    uint64_t v43 = *(void *)v20;
    long long v44 = *(long long *)((char *)v20 + 8);
    DspLib::LoudspeakerController::Algorithm::outputAnalysis(a1, &v43);
    if (*(unsigned char *)(a1 + 501) && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v32 = 0;
      uint64_t v33 = 3912;
      uint64_t v34 = &qword_1E9F807A0;
      do
      {
        uint64_t v35 = (uint64_t *)(*(void *)(a1 + 576) + v33);
        *(void *)&long long v31 = *(v35 - 387);
        long long v42 = v31;
        *(void *)&long long v31 = *(v35 - 3);
        long long v41 = v31;
        uint64_t v36 = *v35;
        uint64_t v37 = DspLib::currentTimeStamp();
        *(void *)&long long v38 = v42;
        *((void *)&v38 + 1) = v41;
        *(_OWORD *)(v34 - 3) = v38;
        *(v34 - 1) = v36;
        *uint64_t v34 = v37;
        v34 += 4;
        ++v32;
        v33 += 4544;
      }
      while (v32 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v30, *(double *)(a1 + 16));
    }
  }
}

float DspLib::DCTracker::process(uint64_t a1, const float *a2, vDSP_Length __N)
{
  uint64_t v11 = a1;
  if (__N)
  {
    vDSP_Length v4 = __N;
    unint64_t v5 = (float *)a2;
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 8) - *(void *)a1;
    if (v6 + __N < v7 >> 2)
    {
LABEL_5:
      DspLib::DCTracker::process(std::span<float const,18446744073709551615ul>)::{lambda(std::span<float const,18446744073709551615ul>)#1}::operator()(&v11, v5, v4);
      return *(float *)(a1 + 32) * *(float *)(a1 + 36);
    }
    vDSP_Length v8 = (v7 >> 2) - v6;
    float v9 = *(float *)(a1 + 40);
    *(float *)(a1 + 32) = v9 + DspLib::sum(a2, v8);
    DspLib::CircularDelay::write((char **)a1, (char *)v5, v8);
    *(_DWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(void *)(a1 + 48) = 0;
    if (v4 != v8)
    {
      unint64_t v5 = &v5[v4 - (v4 - v8)];
      v4 -= v8;
      goto LABEL_5;
    }
  }
  return *(float *)(a1 + 32) * *(float *)(a1 + 36);
}

float DspLib::LoudspeakerController::Algorithm::channelStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = *(double *)(a1 + 16);
  unint64_t v7 = *(void *)(a2 + 424);
  *(float *)a3 = v6;
  *(float *)(a3 + 4) = (float)v7;
  if (!v7)
  {
    LODWORD(v9) = 0;
LABEL_7:
    uint64_t v10 = a3 + 20 * v9 + 8;
    uint64_t v11 = v9 + 1;
    do
    {
      int v62 = 0;
      long long v61 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v61, v10);
      v10 += 20;
      BOOL v12 = v11++ == 4;
    }
    while (!v12);
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 368), v8, 0, &v63);
    DspLib::Biquad::write((uint64_t)&v63, a3 + 20 * v8 + 8);
    unint64_t v9 = (v9 + 1);
    uint64_t v8 = v9;
  }
  while (v7 > v9);
  if (v9 <= 3) {
    goto LABEL_7;
  }
LABEL_10:
  float v13 = *(double *)(a1 + 16);
  unint64_t v14 = *(void *)(a2 + 576);
  *(float *)(a3 + 88) = v13;
  *(float *)(a3 + 92) = (float)v14;
  if (!v14)
  {
    LODWORD(v16) = 0;
LABEL_16:
    uint64_t v17 = a3 + 20 * v16 + 96;
    uint64_t v18 = v16 + 1;
    do
    {
      int v59 = 0;
      long long v58 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v58, v17);
      v17 += 20;
      BOOL v12 = v18++ == 4;
    }
    while (!v12);
    goto LABEL_19;
  }
  uint64_t v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 520), v15, 0, &v60);
    DspLib::Biquad::write((uint64_t)&v60, a3 + 20 * v15 + 96);
    unint64_t v16 = (v16 + 1);
    uint64_t v15 = v16;
  }
  while (v14 > v16);
  if (v16 <= 3) {
    goto LABEL_16;
  }
LABEL_19:
  float v19 = *(double *)(a1 + 16);
  unint64_t v20 = *(void *)(a2 + 104);
  *(float *)(a3 + 176) = v19;
  *(float *)(a3 + 18DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)v20;
  if (!v20)
  {
    LODWORD(v22) = 0;
LABEL_25:
    uint64_t v23 = a3 + 20 * v22 + 184;
    uint64_t v24 = v22 + 1;
    do
    {
      int v56 = 0;
      long long v55 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v55, v23);
      v23 += 20;
      BOOL v12 = v24++ == 4;
    }
    while (!v12);
    goto LABEL_28;
  }
  uint64_t v21 = 0;
  LODWORD(v22) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 48), v21, 0, &v57);
    DspLib::Biquad::write((uint64_t)&v57, a3 + 20 * v21 + 184);
    unint64_t v22 = (v22 + 1);
    uint64_t v21 = v22;
  }
  while (v20 > v22);
  if (v22 <= 3) {
    goto LABEL_25;
  }
LABEL_28:
  float v25 = *(double *)(a1 + 16) / (double)*(unint64_t *)(a1 + 304);
  *(float *)(a3 + 264) = v25;
  unint64_t v26 = *(void *)(a2 + 800);
  *(float *)(a3 + 268) = (float)v26;
  if (!v26)
  {
    LODWORD(v28) = 0;
LABEL_34:
    uint64_t v29 = a3 + 20 * v28 + 272;
    uint64_t v30 = v28 + 1;
    do
    {
      int v53 = 0;
      long long v52 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v52, v29);
      v29 += 20;
      BOOL v12 = v30++ == 4;
    }
    while (!v12);
    goto LABEL_37;
  }
  uint64_t v27 = 0;
  LODWORD(v28) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 744), v27, 0, &v54);
    DspLib::Biquad::write((uint64_t)&v54, a3 + 20 * v27 + 272);
    unint64_t v28 = (v28 + 1);
    uint64_t v27 = v28;
  }
  while (v26 > v28);
  if (v28 <= 3) {
    goto LABEL_34;
  }
LABEL_37:
  unint64_t v31 = *(void *)(a2 + 728);
  *(float *)(a3 + 352) = (float)v31;
  if (!v31)
  {
    LODWORD(v33) = 0;
LABEL_43:
    uint64_t v34 = a3 + 20 * v33 + 356;
    uint64_t v35 = v33 + 1;
    do
    {
      int v50 = 0;
      long long v49 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v49, v34);
      v34 += 20;
      BOOL v12 = v35++ == 4;
    }
    while (!v12);
    goto LABEL_46;
  }
  uint64_t v32 = 0;
  LODWORD(v33) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 672), v32, 0, &v51);
    DspLib::Biquad::write((uint64_t)&v51, a3 + 20 * v32 + 356);
    unint64_t v33 = (v33 + 1);
    uint64_t v32 = v33;
  }
  while (v31 > v33);
  if (v33 <= 3) {
    goto LABEL_43;
  }
LABEL_46:
  uint64_t v36 = 0;
  uint64_t v37 = a2 + 4332;
  do
  {
    long long v38 = (_DWORD *)(a3 + 436 + v36);
    *long long v38 = *(_DWORD *)(v37 + v36 - 32);
    void v38[4] = *(_DWORD *)(v37 + v36 - 16);
    v38[8] = *(_DWORD *)(v37 + v36);
    v36 += 4;
  }
  while (v36 != 16);
  *(_DWORD *)(a3 + 484) = *(_DWORD *)(a2 + 4268);
  *(_DWORD *)(a3 + 488) = *(_DWORD *)(a2 + 4272);
  *(_DWORD *)(a3 + 492) = *(_DWORD *)(a2 + 4276);
  *(_DWORD *)(a3 + 496) = *(_DWORD *)(a2 + 4200);
  *(_DWORD *)(a3 + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 4204);
  *(_DWORD *)(a3 + 504) = *(_DWORD *)(a2 + 4208);
  *(_DWORD *)(a3 + 908) = *(_DWORD *)(a2 + 4212);
  *(_DWORD *)(a3 + 912) = *(_DWORD *)(a2 + 4216);
  DspLib::LoudspeakerController::MaskingEstimator::status(a2 + 1280, (char *)(a3 + 508));
  *(_DWORD *)(a3 + 916) = *(_DWORD *)(a2 + 4256);
  *(_DWORD *)(a3 + 92DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 4224);
  *(_DWORD *)(a3 + 924) = *(_DWORD *)(a2 + 4260);
  *(_DWORD *)(a3 + 928) = *(_DWORD *)(a2 + 4180);
  *(_DWORD *)(a3 + 932) = *(_DWORD *)(a2 + 4188);
  *(_DWORD *)(a2 + 4188) = 1065353216;
  *(_DWORD *)(a3 + 936) = *(_DWORD *)(a2 + 4192);
  *(_DWORD *)(a3 + 94DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 4484);
  *(_DWORD *)(a2 + 4484) = 1065353216;
  DspLib::copy(*(void **)(a2 + 2832), (uint64_t)(*(void *)(a2 + 2840) - *(void *)(a2 + 2832)) >> 2, (void *)(a3 + 1040));
  DspLib::multiply((float *)(a3 + 1040), 5uLL, *(float *)(a2 + 3104));
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 4360), 0, 0, &v48);
  float result = DspLib::Biquad::write((uint64_t)&v48, a3 + 1060);
  if (*(void *)(a2 + 4472))
  {
    float result = *(float *)(a2 + 3336);
    *(float *)(a3 + 108DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = result;
  }
  if (*(unsigned char *)(a2 + 4168))
  {
    unint64_t v40 = *(void *)(a2 + 1000);
    *(float *)(a3 + 956) = (float)v40;
    if (v40)
    {
      uint64_t v41 = 0;
      LODWORD(v42) = 0;
      do
      {
        DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 944), v41, 0, &v47);
        DspLib::Biquad::write((uint64_t)&v47, a3 + 20 * v41 + 960);
        unint64_t v42 = (v42 + 1);
        uint64_t v41 = v42;
      }
      while (v40 > v42);
      if (v42 > 3) {
        goto LABEL_60;
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    uint64_t v43 = a3 + 20 * v42 + 960;
    uint64_t v44 = v42 + 1;
    do
    {
      int v46 = 0;
      long long v45 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v45, v43);
      v43 += 20;
      BOOL v12 = v44++ == 4;
    }
    while (!v12);
LABEL_60:
    *(_DWORD *)(a3 + 944) = *(_DWORD *)(a2 + 4520);
    *(_DWORD *)(a3 + 948) = *(_DWORD *)(a2 + 4528);
    float result = *(float *)(a2 + 4524);
    *(float *)(a3 + 952) = result;
  }
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::status(uint64_t a1, float32x2_t *a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  for (uint64_t i = 0; i != 16; i += 4)
  {
    float v6 = (float32x2_t *)((char *)a2 + i + 16);
    v6[-2].i32[0] = *(_DWORD *)(a1 + i + 460);
    v6->i32[0] = *(_DWORD *)(a1 + i + 600);
    v6[2].i32[0] = *(_DWORD *)(a1 + i + 476);
  }
  int v7 = *(unsigned __int8 *)(a1 + 440);
  float v8 = 0.0;
  if (*(unsigned char *)(a1 + 440)) {
    float v8 = 1.0;
  }
  a2[6].i32[0] = *(_DWORD *)(a1 + 492);
  a2[6].f32[1] = v8;
  if (v7) {
    DspLib::copy((void *)(a1 + 424), 4, &a2[7]);
  }
  else {
    DspLib::clear((float *)&a2[7], 4uLL);
  }
  double v9 = *(double *)(a1 + 16);
  v10.i64[0] = *(void *)(a1 + 336);
  v10.i64[1] = *(void *)(a1 + 360);
  a2[9] = vcvt_f32_f64(vmulq_f64(vdivq_f64(vcvtq_f64_u64(v10), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0)), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
  *(float *)&double v9 = (double)*(unint64_t *)(a1 + 376) / v9 * 1000.0;
  a2[10].i32[0] = LODWORD(v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (result)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = (uint64_t)&a2[10] + 4;
    do
    {
      float v15 = DspLib::LoudspeakerController::Algorithm::channelStatus(a1, *(void *)(a1 + 576) + v12, v14);
      ++v13;
      uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)a1 + 56))(a1, v15);
      v14 += 1084;
      v12 += 4544;
    }
    while (v13 < result);
  }
  return result;
}

double DspLib::LoudspeakerController::Algorithm::resetNVM(DspLib::LoudspeakerController::Algorithm *this)
{
  double result = 0.0;
  xmmword_1E9F80868 = 0u;
  unk_1E9F80878 = 0u;
  xmmword_1E9F80848 = 0u;
  unk_1E9F80858 = 0u;
  xmmword_1E9F80828 = 0u;
  unk_1E9F80838 = 0u;
  xmmword_1E9F80808 = 0u;
  unk_1E9F80818 = 0u;
  xmmword_1E9F807E8 = 0u;
  unk_1E9F807F8 = 0u;
  xmmword_1E9F807C8 = 0u;
  unk_1E9F807D8 = 0u;
  xmmword_1E9F807A8 = 0u;
  unk_1E9F807B8 = 0u;
  DspLib::LoudspeakerController::gThermalRecord = 0u;
  *(_OWORD *)algn_1E9F80798 = 0u;
  return result;
}

void DspLib::LoudspeakerController::Algorithm::~Algorithm(DspLib::LoudspeakerController::Algorithm *this)
{
  DspLib::LoudspeakerController::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14A7E28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  vDSP_Length v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  vDSP_Length v4 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  float v8 = (void **)((char *)this + 576);
  std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v5 = (void *)*((void *)this + 64);
  if (v5)
  {
    *((void *)this + 65) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1F14A88D8;
  float v6 = (void *)*((void *)this + 34);
  if (v6)
  {
    *((void *)this + 35) = v6;
    operator delete(v6);
  }
  float v8 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v8);
  *(void *)this = &unk_1F14A87D8;
  int v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

double DspLib::LoudspeakerController::Algorithm::latencySamples(DspLib::LoudspeakerController::Algorithm *this)
{
  return (double)*((unint64_t *)this + 40);
}

uint64_t DspLib::LoudspeakerController::Algorithm::tailTimeSamples(DspLib::LoudspeakerController::Algorithm *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t DspLib::LoudspeakerController::Algorithm::numStatus(DspLib::LoudspeakerController::Algorithm *this)
{
  return 2189;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    vDSP_Length v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v4 - 4544));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule(DspLib::LoudspeakerController::Algorithm::ChannelModule *this)
{
  uint64_t v2 = (void *)*((void *)this + 561);
  if (v2)
  {
    *((void *)this + 562) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 559);
  *((void *)this + 559) = 0;
  if (v3) {
    std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100]((uint64_t)this + 4472, v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 555);
  if (v4)
  {
    *((void *)this + 556) = v4;
    operator delete(v4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 4408));
  unint64_t v5 = (void *)*((void *)this + 548);
  if (v5)
  {
    *((void *)this + 549) = v5;
    operator delete(v5);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 3280));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 3240));
  float v6 = (void *)*((void *)this + 402);
  if (v6)
  {
    *((void *)this + 403) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 3168));
  int v7 = (void *)*((void *)this + 393);
  if (v7)
  {
    *((void *)this + 394) = v7;
    operator delete(v7);
  }
  DspLib::GainSmoother::~GainSmoother((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 2856));
  DspLib::BandCombiner::~BandCombiner((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 2584));
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    double v9 = *(void **)((char *)this + i + 2472);
    if (v9)
    {
      *(void *)((char *)this + i + 248DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
      operator delete(v9);
    }
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)this + 296, 0);
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 295, 0);
  uint64x2_t v10 = (void *)*((void *)this + 291);
  if (v10)
  {
    *((void *)this + 292) = v10;
    operator delete(v10);
  }
  unint64_t v28 = (void **)((char *)this + 2304);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v11 = (void *)*((void *)this + 285);
  if (v11)
  {
    *((void *)this + 286) = v11;
    operator delete(v11);
  }
  for (uint64_t j = 0; j != -192; j -= 48)
  {
    unint64_t v13 = *(void **)((char *)this + j + 2232);
    if (v13)
    {
      *(void *)((char *)this + j + 224DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v13;
      operator delete(v13);
    }
  }
  uint64_t v14 = (void *)*((void *)this + 255);
  if (v14)
  {
    *((void *)this + 256) = v14;
    operator delete(v14);
  }
  float v15 = (void *)*((void *)this + 249);
  if (v15)
  {
    *((void *)this + 25DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 243);
  if (v16)
  {
    *((void *)this + 244) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 224);
  if (v17)
  {
    *((void *)this + 225) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 221);
  if (v18)
  {
    *((void *)this + 222) = v18;
    operator delete(v18);
  }
  float v19 = (void *)*((void *)this + 218);
  if (v19)
  {
    *((void *)this + 219) = v19;
    operator delete(v19);
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 166, 0);
  unint64_t v20 = (void *)*((void *)this + 162);
  if (v20)
  {
    *((void *)this + 163) = v20;
    operator delete(v20);
  }
  unint64_t v28 = (void **)((char *)this + 1256);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v21 = (void *)*((void *)this + 154);
  if (v21)
  {
    *((void *)this + 155) = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 151);
  if (v22)
  {
    *((void *)this + 152) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 148);
  if (v23)
  {
    *((void *)this + 149) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 145);
  if (v24)
  {
    *((void *)this + 146) = v24;
    operator delete(v24);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 208));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 168));
  float v25 = (void *)*((void *)this + 18);
  if (v25)
  {
    *((void *)this + 19) = v25;
    operator delete(v25);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 96));
  unint64_t v26 = (void *)*((void *)this + 9);
  if (v26)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v27;
    operator delete(v27);
  }
}

void DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel(DspLib::LoudspeakerController::ElectricalModel *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ElectricalModel *)((char *)this + 128));
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ElectricalModel *)((char *)this + 56));
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

void DspLib::LinearPhaseFilterbank::~LinearPhaseFilterbank(DspLib::LinearPhaseFilterbank *this)
{
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)this + 14, 0);
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 13, 0);
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
    operator delete(v2);
  }
  vDSP_Length v4 = (void **)((char *)this + 48);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void DspLib::LoudspeakerController::MaskingEstimator::~MaskingEstimator(DspLib::LoudspeakerController::MaskingEstimator *this)
{
  uint64_t v2 = (void *)*((void *)this + 64);
  if (v2)
  {
    *((void *)this + 65) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 61);
  if (v3)
  {
    *((void *)this + 62) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 58);
  if (v4)
  {
    *((void *)this + 59) = v4;
    operator delete(v4);
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 6, 0);
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(DspLib::LoudspeakerController::SpeakerSystemModel *this)
{
  std::__optional_destruct_base<DspLib::LoudspeakerController::BiquadModel,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 736);
  uint64_t v2 = (void *)*((void *)this + 88);
  if (v2)
  {
    *((void *)this + 89) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 82);
  if (v3)
  {
    *((void *)this + 83) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 584));
  vDSP_Length v4 = (void *)*((void *)this + 70);
  if (v4)
  {
    *((void *)this + 71) = v4;
    operator delete(v4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 512));
  unint64_t v5 = (void *)*((void *)this + 61);
  if (v5)
  {
    *((void *)this + 62) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 432));
  float v6 = (void *)*((void *)this + 51);
  if (v6)
  {
    *((void *)this + 52) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 360));
  int v7 = (void *)*((void *)this + 42);
  if (v7)
  {
    *((void *)this + 43) = v7;
    operator delete(v7);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 280));
  float v8 = (void *)*((void *)this + 32);
  if (v8)
  {
    *((void *)this + 33) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 208));
  double v9 = (void *)*((void *)this + 23);
  if (v9)
  {
    *((void *)this + 24) = v9;
    operator delete(v9);
  }
}

void DspLib::LoudspeakerController::ThermalModel::~ThermalModel(DspLib::LoudspeakerController::ThermalModel *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ThermalModel *)((char *)this + 120));
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ThermalModel *)((char *)this + 48));
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t std::__optional_destruct_base<DspLib::LoudspeakerController::BiquadModel,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 120));
    uint64_t v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
    }
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 48));
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void DspLib::GainSmoother::~GainSmoother(DspLib::GainSmoother *this)
{
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 2);
  if (v8)
  {
    *((void *)this + 3) = v8;
    operator delete(v8);
  }
}

void DspLib::BandCombiner::~BandCombiner(DspLib::BandCombiner *this)
{
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  uint64x2_t v10 = (void **)((char *)this + 168);
  std::vector<DspLib::BandCombiner::GainState>::__destroy_vector::operator()[abi:ne180100](&v10);
  vDSP_Length v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  double v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::BandCombiner::GainState>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    vDSP_Length v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::__append(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    float v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(result - 8);
  if (0x193D4BB7E327A977 * ((v6 - (uint64_t)v7) >> 6) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[4544 * a2];
      uint64_t v14 = 4544 * a2;
      do
      {
        bzero(v7, 0x11C0uLL);
        uint64_t result = DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule((uint64_t)v7);
        v7 += 4544;
        v14 -= 4544;
      }
      while (v14);
      int v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x193D4BB7E327A977 * ((uint64_t)&v7[-*a1] >> 6);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xE6C2B4481CD85) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x193D4BB7E327A977 * ((v5 - *a1) >> 6);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x73615A240E6C2) {
      unint64_t v11 = 0xE6C2B4481CD85;
    }
    else {
      unint64_t v11 = v9;
    }
    v18[4] = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    float v15 = &v12[4544 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[4544 * v11];
    uint64_t v16 = 4544 * a2;
    uint64_t v17 = &v15[4544 * a2];
    do
    {
      bzero(v15, 0x11C0uLL);
      DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule((uint64_t)v15);
      v15 += 4544;
      v16 -= 4544;
    }
    while (v16);
    _OWORD v18[2] = v17;
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1BB2ECF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)(this + 16) = 0;
  *(_OWORD *)this = 0u;
  *(void *)(this + 32) = 1065353216;
  *(_DWORD *)(this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1091567616;
  *(unsigned char *)(this + 48) = 0;
  *(_OWORD *)(this + 128) = 0u;
  *(_OWORD *)(this + 144) = 0u;
  *(_OWORD *)(this + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 176) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(unsigned char *)(this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 192) = -1;
  *(void *)(this + 208) = 0;
  *(void *)(this + 224) = 0;
  *(void *)(this + 232) = 0;
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(this + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _Q2;
  *(_OWORD *)(this + 256) = xmmword_1BB873AB0;
  *(void *)(this + 272) = 0x3F80000000000000;
  *(unsigned char *)(this + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 284) = 0;
  *(void *)(this + 292) = 0x3F80000000000000;
  *(unsigned char *)(this + 30DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 304) = 0;
  *(void *)(this + 312) = 0x3F80000000000000;
  *(unsigned char *)(this + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 496) = 0u;
  *(_OWORD *)(this + 448) = 0u;
  *(_OWORD *)(this + 464) = 0u;
  *(_OWORD *)(this + 376) = 0u;
  *(_OWORD *)(this + 392) = 0u;
  *(_OWORD *)(this + 408) = 0u;
  *(_OWORD *)(this + 424) = 0u;
  *(unsigned char *)(this + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 324) = 0u;
  *(_OWORD *)(this + 34DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 353) = 0u;
  *(void *)(this + 512) = -1;
  *(unsigned char *)(this + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 616) = 0u;
  *(_OWORD *)(this + 632) = 0u;
  *(_OWORD *)(this + 648) = 0u;
  *(unsigned char *)(this + 592) = 0;
  *(_OWORD *)(this + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 576) = 0u;
  *(_OWORD *)(this + 528) = 0u;
  *(_OWORD *)(this + 544) = 0u;
  *(void *)(this + 664) = -1;
  *(unsigned char *)(this + 672) = 0;
  *(unsigned char *)(this + 744) = 0;
  *(_OWORD *)(this + 68DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 696) = 0u;
  *(_OWORD *)(this + 712) = 0u;
  *(_OWORD *)(this + 728) = 0u;
  *(void *)(this + 816) = 0;
  *(_OWORD *)(this + 784) = 0u;
  *(_OWORD *)(this + 80DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 752) = 0u;
  *(_OWORD *)(this + 768) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(this + 824) = _D0;
  *(void *)(this + 832) = _D0;
  *(void *)(this + 84DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 848) = 1;
  *(_DWORD *)(this + 856) = 1065353216;
  *(_OWORD *)(this + 864) = 0u;
  *(_OWORD *)(this + 88DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(this + 896) = 1;
  *(_DWORD *)(this + 904) = 1065353216;
  *(unsigned char *)(this + 1096) = 0;
  *(unsigned char *)(this + 944) = 0;
  *(_OWORD *)(this + 912) = 0u;
  *(_OWORD *)(this + 928) = 0u;
  *(_OWORD *)(this + 1808) = 0u;
  *(_OWORD *)(this + 1792) = 0u;
  *(_OWORD *)(this + 1776) = 0u;
  *(_OWORD *)(this + 176DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 1744) = 0u;
  *(_DWORD *)(this + 1152) = 0;
  *(_OWORD *)(this + 1136) = 0u;
  *(_OWORD *)(this + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 1104) = 0u;
  *(void *)(this + 1336) = 0;
  *(_OWORD *)(this + 1304) = 0u;
  *(_OWORD *)(this + 132DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 1272) = 0u;
  *(_OWORD *)(this + 1288) = 0u;
  *(_OWORD *)(this + 124DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 1256) = 0u;
  *(_OWORD *)(this + 1208) = 0u;
  *(_OWORD *)(this + 1224) = 0u;
  *(_OWORD *)(this + 1176) = 0u;
  *(_OWORD *)(this + 1192) = 0u;
  *(_OWORD *)(this + 116DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_DWORD *)(this + 1824) = 1065353216;
  *(_OWORD *)(this + 1832) = 0u;
  *(_DWORD *)(this + 1856) = 0;
  *(void *)(this + 1848) = 0;
  *(void *)(this + 1864) = 1;
  *(_OWORD *)(this + 1872) = xmmword_1BB875840;
  *(void *)(this + 1888) = _D0;
  *(_DWORD *)(this + 1896) = 1065353216;
  *(_OWORD *)(this + 190DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 192DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(unsigned char *)(this + 1936) = 1;
  *(void *)(this + 1976) = 0;
  *(_OWORD *)(this + 196DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 1944) = 0u;
  *(unsigned char *)(this + 1984) = 1;
  *(void *)(this + 2024) = 0;
  *(_OWORD *)(this + 2008) = 0u;
  *(_OWORD *)(this + 1992) = 0u;
  *(unsigned char *)(this + 2032) = 1;
  *(void *)(this + 2048) = 0;
  *(void *)(this + 204DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 2056) = 0;
  do
  {
    uint64_t v8 = this + v1;
    *(_OWORD *)(v8 + 2064) = 0uLL;
    *(unsigned char *)(v8 + 208DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
    *(void *)(v8 + 2088) = 0;
    *(_OWORD *)(v8 + 2096) = 0uLL;
    v1 += 48;
  }
  while (v1 != 192);
  *(void *)(this + 280DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 2792) = 0;
  *(void *)(this + 2808) = 0;
  *(_OWORD *)(this + 2584) = 0u;
  *(_OWORD *)(this + 2608) = 0u;
  *(_OWORD *)(this + 2624) = 0u;
  *(_OWORD *)(this + 264DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2656) = 0u;
  *(_OWORD *)(this + 2672) = 0u;
  *(_OWORD *)(this + 2688) = 0u;
  *(_OWORD *)(this + 2704) = 0u;
  *(_OWORD *)(this + 272DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2736) = 0u;
  *(_OWORD *)(this + 2752) = 0u;
  *(void *)(this + 2768) = 0;
  *(void *)(this + 3024) = 0;
  *(void *)(this + 3008) = 0;
  *(void *)(this + 3016) = 0;
  *(void *)(this + 3072) = 0;
  *(void *)(this + 3064) = 0;
  *(void *)(this + 308DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 2872) = 0u;
  *(_OWORD *)(this + 2888) = 0u;
  *(_OWORD *)(this + 2904) = 0u;
  *(_OWORD *)(this + 292DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2936) = 0u;
  *(_OWORD *)(this + 2952) = 0u;
  *(_OWORD *)(this + 2968) = 0u;
  *(void *)(this + 2984) = 0;
  *(_OWORD *)(this + 2256) = 0u;
  *(_OWORD *)(this + 2272) = 0u;
  *(_OWORD *)(this + 2288) = 0u;
  *(_OWORD *)(this + 2304) = 0u;
  *(_OWORD *)(this + 232DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2336) = 0u;
  *(_OWORD *)(this + 2352) = 0u;
  *(_OWORD *)(this + 2368) = 0u;
  *(_OWORD *)(this + 2384) = 0u;
  *(_OWORD *)(this + 240DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2416) = 0u;
  *(_OWORD *)(this + 2432) = 0u;
  *(_OWORD *)(this + 2448) = 0u;
  *(_OWORD *)(this + 2464) = 0u;
  *(_OWORD *)(this + 248DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 2848) = 0u;
  *(_OWORD *)(this + 2832) = 0u;
  *(_DWORD *)(this + 3112) = 1091567616;
  *(unsigned char *)(this + 312DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 320DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3216) = 0u;
  *(_OWORD *)(this + 3232) = 0u;
  *(_OWORD *)(this + 3248) = 0u;
  *(unsigned char *)(this + 3192) = 0;
  *(_OWORD *)(this + 316DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3176) = 0u;
  *(_OWORD *)(this + 3128) = 0u;
  *(_OWORD *)(this + 3144) = 0u;
  *(void *)(this + 3264) = -1;
  *(void *)(this + 328DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(this + 3304) = 0;
  *(void *)(this + 3296) = 0;
  *(_OWORD *)(this + 3312) = _Q2;
  *(_OWORD *)(this + 3328) = xmmword_1BB873AB0;
  *(void *)(this + 3344) = 0x3F80000000000000;
  *(unsigned char *)(this + 3352) = 0;
  *(void *)(this + 3356) = 0;
  *(void *)(this + 3364) = 0x3F80000000000000;
  *(unsigned char *)(this + 3372) = 0;
  *(void *)(this + 3376) = 0;
  *(void *)(this + 3384) = 0x3F80000000000000;
  *(unsigned char *)(this + 3392) = 0;
  *(_OWORD *)(this + 3568) = 0u;
  *(_OWORD *)(this + 3552) = 0u;
  *(_OWORD *)(this + 3536) = 0u;
  *(_OWORD *)(this + 352DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(unsigned char *)(this + 3512) = 0;
  *(_OWORD *)(this + 3496) = 0u;
  *(_OWORD *)(this + 348DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3464) = 0u;
  *(_OWORD *)(this + 3448) = 0u;
  *(_OWORD *)(this + 3425) = 0u;
  *(_OWORD *)(this + 3412) = 0u;
  *(_OWORD *)(this + 3396) = 0u;
  *(void *)(this + 3584) = -1;
  *(unsigned char *)(this + 3592) = 0;
  *(_OWORD *)(this + 3704) = 0u;
  *(_OWORD *)(this + 372DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3672) = 0u;
  *(_OWORD *)(this + 3688) = 0u;
  *(unsigned char *)(this + 3664) = 0;
  *(_OWORD *)(this + 3648) = 0u;
  *(_OWORD *)(this + 3632) = 0u;
  *(_OWORD *)(this + 3616) = 0u;
  *(_OWORD *)(this + 360DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(this + 3736) = -1;
  *(unsigned char *)(this + 3744) = 0;
  *(unsigned char *)(this + 3816) = 0;
  *(_OWORD *)(this + 380DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3784) = 0u;
  *(_OWORD *)(this + 3768) = 0u;
  *(_OWORD *)(this + 3752) = 0u;
  *(void *)(this + 3888) = 0;
  *(_OWORD *)(this + 3872) = 0u;
  *(_OWORD *)(this + 3856) = 0u;
  *(_OWORD *)(this + 384DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3824) = 0u;
  *(void *)(this + 3896) = _D0;
  *(void *)(this + 3904) = _D0;
  *(void *)(this + 3912) = 0;
  *(void *)(this + 392DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  *(_DWORD *)(this + 3928) = 1065353216;
  *(_OWORD *)(this + 3952) = 0u;
  *(_OWORD *)(this + 3936) = 0u;
  *(void *)(this + 3968) = 1;
  *(_DWORD *)(this + 3976) = 1065353216;
  *(unsigned char *)(this + 4168) = 0;
  *(unsigned char *)(this + 4016) = 0;
  *(_OWORD *)(this + 400DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 3984) = 0u;
  *(_DWORD *)(this + 4276) = 0;
  *(unsigned char *)(this + 436DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(this + 4464) = 0u;
  *(_OWORD *)(this + 4448) = 0u;
  *(_OWORD *)(this + 4432) = 0u;
  *(_OWORD *)(this + 4416) = 0u;
  *(_OWORD *)(this + 440DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(this + 4384) = 0u;
  *(_OWORD *)(this + 4368) = 0u;
  *(void *)(this + 448DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = _D0;
  *(_OWORD *)(this + 4516) = 0u;
  *(_OWORD *)(this + 4488) = 0u;
  *(_OWORD *)(this + 4504) = 0u;
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE6C2B4481CD86) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4544 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a7 - 4544;
  uint64_t v11 = 4544;
  uint64_t v12 = a7;
  while (a3 != a5)
  {
    a3 -= 4544;
    v11 -= 4544;
    v12 -= 4544;
    uint64_t v13 = v10 - 4544;
    DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(v10, a3);
    uint64_t v10 = v13;
  }
  return a6;
}

void sub_1BB2ED4C4(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 4544)
    DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = a1 + 40;
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 48, a2 + 48);
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(a1 + 208, a2 + 208);
  long long v5 = *(_OWORD *)(a2 + 1104);
  long long v6 = *(_OWORD *)(a2 + 1120);
  long long v7 = *(_OWORD *)(a2 + 1136);
  *(_DWORD *)(a1 + 1152) = *(_DWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v7;
  *(_OWORD *)(a1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
  *(_OWORD *)(a1 + 1104) = v5;
  *(void *)(v4 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v4 + 1128) = 0u;
  *(_OWORD *)(v4 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a2 + 1160);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a2 + 1176) = 0;
  *(_OWORD *)(a2 + 116DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(a1 + 120DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(void *)(a1 + 120DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 1200);
  *(void *)(a2 + 120DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a2 + 1184) = 0u;
  *(_OWORD *)(v4 + 1168) = 0u;
  *(void *)(v4 + 1184) = 0;
  *(_OWORD *)(v4 + 1168) = *(_OWORD *)(a2 + 1208);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(void *)(a2 + 1224) = 0;
  *(_OWORD *)(a2 + 1208) = 0u;
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a2 + 1248) = 0;
  *(_OWORD *)(a2 + 1232) = 0u;
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1256) = 0u;
  *(_OWORD *)(a1 + 128DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a2 + 1280);
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a2 + 1312) = 0;
  *(_OWORD *)(a2 + 1296) = 0u;
  *(void *)(a1 + 132DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 1320);
  uint64_t v8 = *(void *)(a2 + 1328);
  *(void *)(a2 + 1328) = 0;
  *(void *)(a1 + 1328) = v8;
  memcpy((void *)(a1 + 1336), (const void *)(a2 + 1336), 0x198uLL);
  uint64_t v9 = 0;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(void *)(a1 + 176DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 1760);
  *(_OWORD *)(a2 + 1744) = 0u;
  *(void *)(a2 + 176DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(_OWORD *)(a2 + 1768) = 0u;
  *(void *)(a2 + 1784) = 0;
  *(void *)(a1 + 1808) = 0;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  *(void *)(a2 + 1808) = 0;
  *(_OWORD *)(a2 + 1792) = 0u;
  long long v11 = *(_OWORD *)(a2 + 1832);
  long long v10 = *(_OWORD *)(a2 + 1848);
  *(_OWORD *)(a1 + 1816) = *(_OWORD *)(a2 + 1816);
  *(_OWORD *)(a1 + 1832) = v11;
  *(_OWORD *)(a1 + 1848) = v10;
  long long v13 = *(_OWORD *)(a2 + 1864);
  long long v12 = *(_OWORD *)(a2 + 1880);
  long long v14 = *(_OWORD *)(a2 + 1896);
  *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  *(_OWORD *)(a1 + 188DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
  *(_OWORD *)(a1 + 1896) = v14;
  *(_OWORD *)(a1 + 1864) = v13;
  long long v15 = *(_OWORD *)(a2 + 1920);
  *(unsigned char *)(a1 + 1936) = *(unsigned char *)(a2 + 1936);
  *(_OWORD *)(a1 + 192DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
  *(void *)(v4 + 1912) = 0;
  *(void *)(v4 + 192DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v4 + 1904) = 0;
  *(_OWORD *)(v4 + 1904) = *(_OWORD *)(a2 + 1944);
  *(void *)(a1 + 196DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 1960);
  *(void *)(a2 + 1944) = 0;
  *(void *)(a2 + 1952) = 0;
  *(void *)(a2 + 196DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  char v16 = *(unsigned char *)(a2 + 1984);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a2 + 1968);
  *(unsigned char *)(a1 + 1984) = v16;
  *(void *)(v4 + 1952) = 0;
  *(void *)(v4 + 196DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v4 + 1968) = 0;
  *(_OWORD *)(v4 + 1952) = *(_OWORD *)(a2 + 1992);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(void *)(a2 + 1992) = 0;
  *(void *)(a2 + 200DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2008) = 0;
  long long v17 = *(_OWORD *)(a2 + 2016);
  *(unsigned char *)(a1 + 2032) = *(unsigned char *)(a2 + 2032);
  *(_OWORD *)(a1 + 2016) = v17;
  *(void *)(v4 + 200DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v4 + 2008) = 0;
  *(void *)(v4 + 2016) = 0;
  *(_OWORD *)(v4 + 200DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a2 + 2040);
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  *(void *)(a2 + 204DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2048) = 0;
  *(void *)(a2 + 2056) = 0;
  do
  {
    uint64_t v18 = a1 + v9;
    long long v19 = *(_OWORD *)(a2 + v9 + 2064);
    *(unsigned char *)(v18 + 208DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(unsigned char *)(a2 + v9 + 2080);
    *(_OWORD *)(v18 + 2064) = v19;
    unint64_t v20 = (_OWORD *)(a2 + v9 + 2088);
    *(void *)(v18 + 2088) = 0;
    *(_OWORD *)(v18 + 2096) = 0uLL;
    *(_OWORD *)(a1 + v9 + 2088) = *v20;
    *(void *)(v18 + 2104) = *(void *)(a2 + v9 + 2104);
    *(void *)(a2 + v9 + 2104) = 0;
    *unint64_t v20 = 0uLL;
    v9 += 48;
  }
  while (v9 != 192);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(a2 + 2256);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(_OWORD *)(a1 + 2256) = v22;
  *(void *)(a1 + 228DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2288) = 0;
  *(void *)(a1 + 228DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2280);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  *(void *)(a2 + 2288) = 0;
  *(void *)(a2 + 228DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 232DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 2304) = *(_OWORD *)(a2 + 2304);
  *(void *)(a1 + 232DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2320);
  *(void *)(a2 + 2312) = 0;
  *(void *)(a2 + 2304) = 0;
  *(void *)(a2 + 232DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2336) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2344) = 0;
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a2 + 2336) = 0;
  *(void *)(a2 + 2328) = 0;
  *(void *)(a2 + 2344) = 0;
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  uint64_t v23 = *(void *)(a2 + 2360);
  *(void *)(a2 + 236DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 236DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
  uint64_t v24 = *(void *)(a2 + 2368);
  *(void *)(a2 + 2368) = 0;
  *(void *)(a1 + 2368) = v24;
  do
  {
    uint64_t v25 = a1 + v21;
    unint64_t v26 = (_OWORD *)(a1 + v21 + 2376);
    uint64_t v27 = (_OWORD *)(a2 + v21 + 2376);
    *(void *)(v25 + 2392) = 0;
    *unint64_t v26 = 0uLL;
    *unint64_t v26 = *v27;
    *(void *)(v25 + 2392) = *(void *)(a2 + v21 + 2392);
    *(void *)(a2 + v21 + 2392) = 0;
    *uint64_t v27 = 0uLL;
    v21 += 24;
  }
  while (v21 != 120);
  long long v28 = *(_OWORD *)(a2 + 2496);
  *(_OWORD *)(a1 + 2512) = *(_OWORD *)(a2 + 2512);
  *(_OWORD *)(a1 + 2496) = v28;
  long long v29 = *(_OWORD *)(a2 + 2528);
  long long v30 = *(_OWORD *)(a2 + 2544);
  long long v31 = *(_OWORD *)(a2 + 2560);
  *(void *)(a1 + 2576) = *(void *)(a2 + 2576);
  *(_OWORD *)(a1 + 256DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v31;
  *(_OWORD *)(a1 + 2544) = v30;
  *(_OWORD *)(a1 + 2528) = v29;
  long long v32 = *(_OWORD *)(a2 + 2584);
  *(void *)(a1 + 260DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2600);
  *(_OWORD *)(a1 + 2584) = v32;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2608) = *(_OWORD *)(a2 + 2608);
  *(void *)(a1 + 2624) = *(void *)(a2 + 2624);
  *(void *)(a2 + 2616) = 0;
  *(void *)(a2 + 2608) = 0;
  *(void *)(a2 + 2624) = 0;
  *(void *)(a1 + 264DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2648) = 0;
  *(void *)(a1 + 2632) = *(void *)(a2 + 2632);
  *(void *)(a1 + 264DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2640);
  *(void *)(a1 + 2648) = *(void *)(a2 + 2648);
  *(void *)(a2 + 264DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2632) = 0;
  *(void *)(a2 + 2648) = 0;
  *(void *)(a1 + 2664) = 0;
  *(void *)(a1 + 2656) = 0;
  *(void *)(a1 + 2672) = 0;
  *(_OWORD *)(a1 + 2656) = *(_OWORD *)(a2 + 2656);
  *(void *)(a1 + 2672) = *(void *)(a2 + 2672);
  *(void *)(a2 + 2664) = 0;
  *(void *)(a2 + 2656) = 0;
  *(void *)(a2 + 2672) = 0;
  *(void *)(a1 + 2688) = 0;
  *(void *)(a1 + 268DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2696) = 0;
  *(void *)(a1 + 268DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2680);
  *(void *)(a1 + 2688) = *(void *)(a2 + 2688);
  *(void *)(a1 + 2696) = *(void *)(a2 + 2696);
  *(void *)(a2 + 2688) = 0;
  *(void *)(a2 + 268DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2696) = 0;
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2704) = 0;
  *(void *)(a1 + 272DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 2704);
  *(void *)(a1 + 272DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2720);
  *(void *)(a2 + 2712) = 0;
  *(void *)(a2 + 2704) = 0;
  *(void *)(a2 + 272DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2736) = 0;
  *(void *)(a1 + 2728) = 0;
  *(void *)(a1 + 2744) = 0;
  *(void *)(a1 + 2728) = *(void *)(a2 + 2728);
  *(void *)(a1 + 2736) = *(void *)(a2 + 2736);
  *(void *)(a1 + 2744) = *(void *)(a2 + 2744);
  *(void *)(a2 + 2736) = 0;
  *(void *)(a2 + 2728) = 0;
  *(void *)(a2 + 2744) = 0;
  *(void *)(a1 + 276DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2752) = 0;
  *(void *)(a1 + 2768) = 0;
  *(_OWORD *)(a1 + 2752) = *(_OWORD *)(a2 + 2752);
  *(void *)(a1 + 2768) = *(void *)(a2 + 2768);
  *(void *)(a2 + 2768) = 0;
  *(void *)(a2 + 276DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2752) = 0;
  *(_OWORD *)(a1 + 2776) = *(_OWORD *)(a2 + 2776);
  *(void *)(a1 + 280DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2808) = 0;
  *(void *)(a1 + 2792) = 0;
  *(void *)(a1 + 2792) = *(void *)(a2 + 2792);
  *(void *)(a1 + 280DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2800);
  *(void *)(a1 + 2808) = *(void *)(a2 + 2808);
  *(void *)(a2 + 2808) = 0;
  *(void *)(a2 + 280DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2792) = 0;
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 2816);
  *(void *)(a1 + 284DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2848) = 0;
  *(void *)(a1 + 2832) = 0;
  *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
  *(void *)(a1 + 2848) = *(void *)(a2 + 2848);
  *(void *)(a2 + 2848) = 0;
  *(void *)(a2 + 284DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2832) = 0;
  *(_OWORD *)(a1 + 2856) = *(_OWORD *)(a2 + 2856);
  *(void *)(a1 + 288DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2888) = 0;
  *(void *)(a1 + 2872) = 0;
  *(void *)(a1 + 2872) = *(void *)(a2 + 2872);
  *(void *)(a1 + 288DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2880);
  *(void *)(a1 + 2888) = *(void *)(a2 + 2888);
  *(void *)(a2 + 288DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2872) = 0;
  *(void *)(a2 + 2888) = 0;
  *(void *)(a1 + 2904) = 0;
  *(void *)(a1 + 2896) = 0;
  *(void *)(a1 + 2912) = 0;
  *(_OWORD *)(a1 + 2896) = *(_OWORD *)(a2 + 2896);
  *(void *)(a1 + 2912) = *(void *)(a2 + 2912);
  *(void *)(a2 + 2904) = 0;
  *(void *)(a2 + 2896) = 0;
  *(void *)(a2 + 2912) = 0;
  *(void *)(a1 + 2928) = 0;
  *(void *)(a1 + 292DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 292DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2920);
  *(void *)(a1 + 2928) = *(void *)(a2 + 2928);
  *(void *)(a1 + 2936) = *(void *)(a2 + 2936);
  *(void *)(a2 + 2928) = 0;
  *(void *)(a2 + 292DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a2 + 2936) = 0;
  *(void *)(a1 + 2952) = 0;
  *(void *)(a1 + 2944) = 0;
  *(void *)(a1 + 296DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 2944) = *(_OWORD *)(a2 + 2944);
  *(void *)(a1 + 296DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 2960);
  *(void *)(a2 + 2952) = 0;
  *(void *)(a2 + 2944) = 0;
  *(void *)(a2 + 296DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 2976) = 0;
  *(void *)(a1 + 2968) = 0;
  *(void *)(a1 + 2984) = 0;
  *(void *)(a1 + 2968) = *(void *)(a2 + 2968);
  *(void *)(a1 + 2976) = *(void *)(a2 + 2976);
  *(void *)(a1 + 2984) = *(void *)(a2 + 2984);
  *(void *)(a2 + 2984) = 0;
  *(void *)(a2 + 2976) = 0;
  *(void *)(a2 + 2968) = 0;
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  *(void *)(a1 + 3016) = 0;
  *(void *)(a1 + 3024) = 0;
  *(void *)(a1 + 3008) = 0;
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a2 + 3008);
  *(void *)(a1 + 3024) = *(void *)(a2 + 3024);
  *(void *)(a2 + 3016) = 0;
  *(void *)(a2 + 3008) = 0;
  *(void *)(a2 + 3024) = 0;
  *(_OWORD *)(a1 + 3032) = *(_OWORD *)(a2 + 3032);
  *(_OWORD *)(a1 + 3048) = *(_OWORD *)(a2 + 3048);
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 308DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3064) = *(void *)(a2 + 3064);
  *(void *)(a1 + 3072) = *(void *)(a2 + 3072);
  *(void *)(a1 + 308DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 3080);
  *(void *)(a2 + 3072) = 0;
  *(void *)(a2 + 3064) = 0;
  *(void *)(a2 + 308DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 3088) = *(_OWORD *)(a2 + 3088);
  *(_DWORD *)(a1 + 3104) = *(_DWORD *)(a2 + 3104);
  *(_DWORD *)(a1 + 3112) = *(_DWORD *)(a2 + 3112);
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 3120, a2 + 3120);
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(a1 + 3280, a2 + 3280);
  long long v33 = *(_OWORD *)(a2 + 4176);
  long long v34 = *(_OWORD *)(a2 + 4192);
  long long v35 = *(_OWORD *)(a2 + 4208);
  *(_OWORD *)(a1 + 4224) = *(_OWORD *)(a2 + 4224);
  *(_OWORD *)(a1 + 4208) = v35;
  *(_OWORD *)(a1 + 4192) = v34;
  *(_OWORD *)(a1 + 4176) = v33;
  long long v36 = *(_OWORD *)(a2 + 4240);
  long long v37 = *(_OWORD *)(a2 + 4256);
  long long v38 = *(_OWORD *)(a2 + 4272);
  *(_OWORD *)(a1 + 4288) = *(_OWORD *)(a2 + 4288);
  *(_OWORD *)(a1 + 4272) = v38;
  *(_OWORD *)(a1 + 4256) = v37;
  *(_OWORD *)(a1 + 424DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v36;
  long long v39 = *(_OWORD *)(a2 + 4304);
  long long v40 = *(_OWORD *)(a2 + 4320);
  long long v41 = *(_OWORD *)(a2 + 4336);
  *(_DWORD *)(a1 + 4352) = *(_DWORD *)(a2 + 4352);
  *(_OWORD *)(a1 + 4336) = v41;
  *(_OWORD *)(a1 + 432DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v40;
  *(_OWORD *)(a1 + 4304) = v39;
  *(unsigned char *)(v4 + 432DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(unsigned char *)(a2 + 4360);
  *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
  *(void *)(a1 + 4384) = 0;
  *(void *)(a1 + 440DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 4392) = 0;
  *(_OWORD *)(a1 + 4384) = *(_OWORD *)(a2 + 4384);
  *(void *)(a1 + 440DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 4400);
  *(void *)(a2 + 4392) = 0;
  *(void *)(a2 + 4384) = 0;
  *(void *)(a2 + 440DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 4408), (__n128 *)(a2 + 4408));
  *(void *)(a1 + 4432) = *(void *)(a2 + 4432);
  *(void *)(a1 + 444DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(void *)(a1 + 444DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 4440);
  *(void *)(a1 + 4448) = *(void *)(a2 + 4448);
  *(void *)(a1 + 4456) = *(void *)(a2 + 4456);
  *(_OWORD *)(a2 + 444DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(a2 + 4456) = 0;
  *(void *)(a1 + 4464) = *(void *)(a2 + 4464);
  uint64_t v42 = *(void *)(a2 + 4472);
  *(void *)(a2 + 4472) = 0;
  *(void *)(a1 + 4472) = v42;
  *(void *)(a1 + 448DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 4480);
  *(void *)(a1 + 4488) = 0;
  *(_OWORD *)(a1 + 4496) = 0u;
  *(void *)(a1 + 4488) = *(void *)(a2 + 4488);
  *(void *)(a1 + 4496) = *(void *)(a2 + 4496);
  *(void *)(a1 + 4504) = *(void *)(a2 + 4504);
  *(_OWORD *)(a2 + 4488) = 0u;
  *(void *)(a2 + 4504) = 0;
  long long v43 = *(_OWORD *)(a2 + 4512);
  *(_DWORD *)(a1 + 4528) = *(_DWORD *)(a2 + 4528);
  *(_OWORD *)(a1 + 4512) = v43;
  return a1;
}

void sub_1BB2EDE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::LinearPhaseFilterbank *a9, DspLib::LoudspeakerController::MaskingEstimator *a10, uint64_t a11, void **a12, void **a13, void **a14, void **a15, DspLib::LoudspeakerController::SpeakerSystemModel *a16, uint64_t a17, uint64_t a18)
{
  long long v28 = *v26;
  if (*v26)
  {
    *(void *)(v18 + 4392) = v28;
    operator delete(v28);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(v25);
  DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel((DspLib::LoudspeakerController::ElectricalModel *)(v18 + 3112));
  DspLib::GainSmoother::~GainSmoother(v24);
  DspLib::BandCombiner::~BandCombiner(v23);
  uint64_t v29 = 0;
  while (1)
  {
    long long v30 = *(void **)(v18 + v29 + 2472);
    if (v30)
    {
      *(void *)(v18 + v29 + 248DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v30;
      operator delete(v30);
    }
    v29 -= 24;
    if (v29 == -120)
    {
      DspLib::LinearPhaseFilterbank::~LinearPhaseFilterbank(a9);
      uint64_t v31 = 0;
      while (1)
      {
        long long v32 = *(void **)(v18 + v31 + 2232);
        if (v32)
        {
          *(void *)(v18 + v31 + 224DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v32;
          operator delete(v32);
        }
        v31 -= 48;
        if (v31 == -192)
        {
          long long v33 = *v20;
          if (*v20)
          {
            *(void *)(v18 + 2048) = v33;
            operator delete(v33);
          }
          long long v34 = *v21;
          if (*v21)
          {
            *(void *)(v18 + 200DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v34;
            operator delete(v34);
          }
          long long v35 = *v22;
          if (*v22)
          {
            *(void *)(v18 + 1952) = v35;
            operator delete(v35);
          }
          DspLib::LoudspeakerController::MaskingEstimator::~MaskingEstimator(a10);
          a18 = a11;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
          long long v36 = *a12;
          if (*a12)
          {
            *(void *)(v18 + 124DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v36;
            operator delete(v36);
          }
          long long v37 = *a13;
          if (*a13)
          {
            *(void *)(v18 + 1216) = v37;
            operator delete(v37);
          }
          long long v38 = *a14;
          if (*a14)
          {
            *(void *)(v18 + 1192) = v38;
            operator delete(v38);
          }
          long long v39 = *a15;
          if (*a15)
          {
            *(void *)(v18 + 1168) = v39;
            operator delete(v39);
          }
          DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(a16);
          DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel(v19);
          long long v40 = *(void **)v18;
          if (*(void *)v18)
          {
            *(void *)(v18 + 8) = v40;
            operator delete(v40);
          }
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 160, a2 + 160);
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 312, a2 + 312);
  DspLib::LoudspeakerController::ThermalModel::ThermalModel(a1 + 464, a2 + 464);
  uint64_t v11 = *(void *)(a2 + 640);
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
  *(void *)(a1 + 64DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a2 + 664) = 0;
  *(void *)(a2 + 656) = 0;
  *(void *)(a2 + 672) = 0;
  *(void *)(a1 + 68DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 680);
  uint64_t v12 = *(void *)(a2 + 688);
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  *(void *)(a1 + 688) = v12;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 720);
  *(void *)(a2 + 712) = 0;
  *(void *)(a2 + 704) = 0;
  *(void *)(a2 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  std::__optional_move_base<DspLib::LoudspeakerController::BiquadModel,false>::__optional_move_base[abi:ne180100]((unsigned char *)(a1 + 736), a2 + 736);
  return a1;
}

void sub_1BB2EE0C8(_Unwind_Exception *a1)
{
  long long v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 712) = v8;
    operator delete(v8);
  }
  long long v9 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 664) = v9;
    operator delete(v9);
  }
  DspLib::LoudspeakerController::ThermalModel::~ThermalModel(v4);
  DspLib::LoudspeakerController::BiquadModel::~BiquadModel(v3);
  DspLib::LoudspeakerController::BiquadModel::~BiquadModel(v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerController::ThermalModel::ThermalModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 120), (__n128 *)(a2 + 120));
  long long v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
  return a1;
}

void sub_1BB2EE1E0(_Unwind_Exception *a1)
{
  long long v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 104) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup(v2);
  long long v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<DspLib::LoudspeakerController::BiquadModel,false>::__optional_move_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[152] = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    DspLib::LoudspeakerController::BiquadModel::BiquadModel((uint64_t)a1, a2);
    a1[152] = 1;
  }
  return a1;
}

void sub_1BB2EE264(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DspLib::LoudspeakerController::BiquadModel,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 4544;
    DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(i - 4544));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<DspLib::LinearDelay>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LinearDelay>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        long long v10 = *(void **)(v8 - 24);
        v8 -= 24;
        long long v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<DspLib::LinearDelay>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    char v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    long long v17 = &v16[v14];
    std::vector<DspLib::LinearDelay>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2EE4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LinearDelay>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

float DspLib::LoudspeakerController::computeGainsSquared(const float *a1, vDSP_Length a2, const float *a3, double a4, float a5, float a6, uint64_t a7, const float *a8, vDSP_Length a9, uint64_t a10)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  float v17 = fminf(a5, 1.0);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (float *)((char *)v31 - v18);
  DspLib::multiply(v20, v21, (float *)((char *)v31 - v18), v17);
  DspLib::multiplyAccumulate(v19, a2, a3, v17 * v17);
  DspLib::add(v19, a2, a1);
  float v22 = COERCE_FLOAT(DspLib::maxIndex(v19, a2));
  float v24 = a6 + *(float *)(a10 + 4 * v23);
  if (v24 < v22)
  {
    while (1)
    {
      float v25 = v24 - a1[v23];
      if (v25 <= 0.0) {
        break;
      }
      float v26 = (float)(sqrtf(fmaxf((float)(v25 * (float)(a3[v23] * 4.0)) + (float)(a8[v23] * a8[v23]), 0.0)) - a8[v23])
          / (float)(a3[v23] + a3[v23]);
      if (v26 <= 1.0) {
        float v27 = v26;
      }
      else {
        float v27 = 1.0;
      }
      if (v26 >= 0.0) {
        float v28 = v27;
      }
      else {
        float v28 = 0.0;
      }
      if (v28 != 1.0)
      {
        float v17 = v17 * v28;
        if (v17 != 0.0)
        {
          DspLib::multiply(a8, a9, v19, v17);
          DspLib::multiplyAccumulate(v19, a2, a3, v17 * v17);
          DspLib::add(v19, a2, a1);
          float v29 = COERCE_FLOAT(DspLib::maxIndex(v19, a2));
          float v24 = a6 + *(float *)(a10 + 4 * v23);
          if (v24 < v29) {
            continue;
          }
        }
      }
      return v17;
    }
    return 0.0;
  }
  return v17;
}

void DspLib::LoudspeakerController::computeGainsSigned(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, long long *a7@<X8>, float a8@<S2>, float a9@<S3>)
{
  uint64_t v42 = a5;
  uint64_t v43 = a1;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  vDSP_Length v15 = a2 - a6;
  MEMORY[0x1F4188790](a1);
  float v17 = (float *)((char *)&v40 - v16);
  DspLib::clear((float *)((char *)&v40 - v16), v15);
  uint64_t v18 = 0;
  *a7 = *a4;
  *((_DWORD *)a7 + 4) = *((_DWORD *)a4 + 4);
  do
  {
    DspLib::multiplyAccumulate(v17, v15, (const float *)(*(void *)(*a3 + 8 * v18) + 4 * a6), *((float *)a7 + v18) * a9);
    ++v18;
  }
  while (v18 != 5);
  long long v41 = (const float *)(v43 + 4 * a6);
  DspLib::add(v17, v15, v41);
  float v19 = COERCE_FLOAT(DspLib::maxmgvi(v17, v15));
  uint64_t v21 = v20 + a6;
  float v22 = *(float *)(v42 + 4 * (v20 + a6));
  if ((float)(a8 + v22) < v19)
  {
    do
    {
      uint64_t v23 = 0;
      if (v17[v20] <= 0.0)
      {
        float v31 = (float)-v22 - *(float *)(v43 + 4 * v21);
        long long __C = 0uLL;
        int v55 = 0;
        long long v46 = *a7;
        int v47 = *((_DWORD *)a7 + 4);
        uint64_t v32 = *a3;
        do
        {
          *((float *)&__C + v23) = *((float *)&v46 + v23) * *(float *)(*(void *)(v32 + 8 * v23) + 4 * v21);
          ++v23;
        }
        while (v23 != 5);
        DspLib::multiply((float *)&__C, 5uLL, a9);
        DspLib::negate((float *)&__C, 5uLL);
        float v33 = -v31;
        if (v31 >= (float)-a8) {
          float v33 = a8;
        }
        DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, v33);
        uint64_t v35 = 0;
        long long v44 = __C;
        int v45 = v55;
        int v51 = 1065353216;
        long long v50 = xmmword_1BB875BF8;
        do
        {
          float v36 = *(float *)((char *)&v44 + v35);
          float v37 = 1.0;
          if (v36 > v34) {
            float v37 = fminf(v34 / v36, 1.0);
          }
          *(float *)((char *)&v50 + v35) = v37;
          v35 += 4;
        }
        while (v35 != 20);
        if (DspLib::minv((const float *)&v50, 5uLL) >= 1.0) {
          return;
        }
      }
      else
      {
        float v24 = v22 - *(float *)(v43 + 4 * v21);
        long long __C = 0uLL;
        int v55 = 0;
        long long v52 = *a7;
        int v53 = *((_DWORD *)a7 + 4);
        uint64_t v25 = *a3;
        do
        {
          *((float *)&__C + v23) = *((float *)&v52 + v23) * *(float *)(*(void *)(v25 + 8 * v23) + 4 * v21);
          ++v23;
        }
        while (v23 != 5);
        if (a8 >= v24) {
          float v26 = a8;
        }
        else {
          float v26 = v24;
        }
        DspLib::multiply((float *)&__C, 5uLL, a9);
        DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, v26);
        uint64_t v28 = 0;
        long long v48 = __C;
        int v49 = v55;
        int v51 = 1065353216;
        long long v50 = xmmword_1BB875BF8;
        do
        {
          float v29 = *(float *)((char *)&v48 + v28);
          float v30 = 1.0;
          if (v29 > v27) {
            float v30 = fminf(v27 / v29, 1.0);
          }
          *(float *)((char *)&v50 + v28) = v30;
          v28 += 4;
        }
        while (v28 != 20);
        if (DspLib::minv((const float *)&v50, 5uLL) >= 1.0) {
          return;
        }
      }
      DspLib::multiply((float *)a7, 5uLL, (const float *)&v50);
      DspLib::clear(v17, v15);
      for (uint64_t i = 0; i != 5; ++i)
        DspLib::multiplyAccumulate(v17, v15, (const float *)(*(void *)(*a3 + 8 * i) + 4 * a6), *((float *)a7 + i) * a9);
      DspLib::add(v17, v15, v41);
      float v39 = COERCE_FLOAT(DspLib::maxmgvi(v17, v15));
      uint64_t v21 = v20 + a6;
      float v22 = *(float *)(v42 + 4 * (v20 + a6));
    }
    while ((float)(a8 + v22) < v39);
  }
}

void DspLib::LoudspeakerController::computeGainsAmplitude(uint64_t a1@<X0>, vDSP_Length a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, long long *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *a5 = *a4;
  *((_DWORD *)a5 + 4) = *((_DWORD *)a4 + 4);
  MEMORY[0x1F4188790](a1);
  long long v13 = (float *)((char *)&v27 - v12);
  DspLib::clear((float *)((char *)&v27 - v12), v14);
  for (uint64_t i = 0; i != 5; ++i)
    DspLib::multiplyAccumulate(v13, a2, *(const float **)(*a3 + 8 * i), *((float *)a5 + i) * a6);
  if (COERCE_FLOAT(DspLib::maxmgvi(v13, a2)) > a7)
  {
    uint64_t v17 = v16;
    long long v27 = xmmword_1BB875BF8;
    do
    {
      uint64_t v18 = 0;
      long long __C = 0uLL;
      int v35 = 0;
      long long v32 = *a5;
      int v33 = *((_DWORD *)a5 + 4);
      uint64_t v19 = *a3;
      do
      {
        *((float *)&__C + v18) = *((float *)&v32 + v18) * *(float *)(*(void *)(v19 + 8 * v18) + 4 * v17);
        ++v18;
      }
      while (v18 != 5);
      DspLib::multiply((float *)&__C, 5uLL, a6);
      if (v13[v17] < 0.0) {
        DspLib::negate((float *)&__C, 5uLL);
      }
      DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, a7);
      uint64_t v21 = 0;
      long long v28 = __C;
      int v29 = v35;
      int v31 = 1065353216;
      long long v30 = v27;
      do
      {
        float v22 = *(float *)((char *)&v28 + v21);
        float v23 = 1.0;
        if (v22 > v20) {
          float v23 = fminf(v20 / v22, 1.0);
        }
        *(float *)((char *)&v30 + v21) = v23;
        v21 += 4;
      }
      while (v21 != 20);
      if (DspLib::minv((const float *)&v30, 5uLL) >= 1.0) {
        break;
      }
      DspLib::multiply((float *)a5, 5uLL, (const float *)&v30);
      DspLib::clear(v13, a2);
      for (uint64_t j = 0; j != 5; ++j)
        DspLib::multiplyAccumulate(v13, a2, *(const float **)(*a3 + 8 * j), *((float *)a5 + j) * a6);
      float v25 = COERCE_FLOAT(DspLib::maxmgvi(v13, a2));
      uint64_t v17 = v26;
    }
    while (v25 > a7);
  }
}

void DspLib::DCTracker::process(std::span<float const,18446744073709551615ul>)::{lambda(std::span<float const,18446744073709551615ul>)#1}::operator()(uint64_t *a1, float *a2, vDSP_Length __N)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  float v6 = DspLib::sum(a2, __N);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (const float *)((char *)v10 - v8);
  DspLib::CircularDelay::process((void *)v5, (char *)a2, __N, (char *)v10 - v8, __N);
  *(float *)(v5 + 32) = *(float *)(v5 + 32) + (float)(v6 - DspLib::sum(v9, __N));
  *(float *)(v5 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6 + *(float *)(v5 + 40);
  *(void *)(v5 + 48) += __N;
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[23],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[23],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2EF170(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[23],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[23],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2EF1CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[23],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2EF230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C185D370);
  }
}

void DspLib::LoudspeakerController::Algorithm::Algorithm(void *a1, void **a2, void **a3)
{
  float v6 = (std::__shared_weak_count *)a1[81];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[79];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = a2;
  std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v8 = *a3;
  if (*a3)
  {
    a1[65] = v8;
    operator delete(v8);
  }
}

__n128 DspLib::Biquad::SetupWrapper::SetupWrapper(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 DspLib::Biquad::SetupWrapper::operator=(DspLib::Biquad::SetupWrapper *a1, __n128 *a2)
{
  if (a1 != (DspLib::Biquad::SetupWrapper *)a2)
  {
    DspLib::Biquad::SetupWrapper::~SetupWrapper(a1);
    v3->n128_u64[0] = 0;
    v3->n128_u64[1] = 0;
    v3[1].n128_u64[0] = 0;
    __n128 result = *a2;
    *uint64_t v3 = *a2;
    v3[1].n128_u64[0] = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  return result;
}

void DspLib::Biquad::SetupWrapper::initialize(vDSP_Length *a1, const double *__coeffs, int a3, vDSP_Length __M, vDSP_Length a5)
{
  *a1 = a5;
  a1[1] = __M;
  uint64_t v7 = (vDSP_biquadm_SetupStruct *)a1[2];
  if (v7)
  {
    vDSP_biquadm_DestroySetup(v7);
    a1[2] = 0;
    __M = a1[1];
  }
  if (__M)
  {
    vDSP_biquadm_Setup Setup = vDSP_biquadm_CreateSetup(__coeffs, __M, *a1);
    a1[2] = (vDSP_Length)Setup;
    if (!Setup)
    {
      uint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v9, 43);
      ++DspLibDebug::mAssertCounter;
      unint64_t v10 = (vDSP_biquadm_SetupStruct *)a1[2];
      if (v10)
      {
        vDSP_biquadm_DestroySetup(v10);
        a1[2] = 0;
      }
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

void DspLib::Biquad::SetupWrapper::destroyvDSPSetup(DspLib::Biquad::SetupWrapper *this)
{
  uint64_t v2 = (vDSP_biquadm_SetupStruct *)*((void *)this + 2);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((void *)this + 2) = 0;
  }
}

void DspLib::Biquad::SetupWrapper::reset(DspLib::Biquad::SetupWrapper *this)
{
  if (*(void *)this && *((void *)this + 1))
  {
    uint64_t v1 = (vDSP_biquadm_SetupStruct *)*((void *)this + 2);
    if (v1) {
      vDSP_biquadm_ResetState(v1);
    }
  }
}

void DspLib::Biquad::Filter::initialize(DspLib::Biquad::Filter *this, vDSP_Length a2, vDSP_Length __M)
{
  float v6 = (vDSP_Length *)((char *)this + 48);
  if (*((void *)this + 6) == a2)
  {
    if (*((void *)this + 7) == __M) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = (vDSP_biquadm_SetupStruct *)*((void *)this + 8);
    if (v7)
    {
      vDSP_biquadm_DestroySetup(v7);
      *((void *)this + 8) = 0;
    }
    *float v6 = 0;
    v6[1] = 0;
    *((void *)this + 4) = *((void *)this + 3);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(unsigned char *)this = 0;
    if (!__M) {
      goto LABEL_12;
    }
  }
  *((void *)this + 1) = a2;
  *((void *)this + 2) = __M;
  std::vector<double>::resize((uint64_t)this + 24, 5 * a2 * __M);
  vDSP_Length v8 = *((void *)this + 7);
  if (v8 < __M)
  {
    do
    {
      if (a2)
      {
        vDSP_Length v9 = 0;
        vDSP_Length v10 = *((void *)this + 1) * v8;
        uint64_t v11 = *((void *)this + 3);
        unsigned int v12 = 1;
        do
        {
          vDSP_Length v13 = v11 + 40 * (v10 + v9);
          *(void *)vDSP_Length v13 = 0x3FF0000000000000;
          vDSP_Length v9 = v12;
          *(_OWORD *)(v13 + 8) = 0uLL;
          *(_OWORD *)(v13 + 24) = 0uLL;
          ++v12;
        }
        while (v9 < a2);
      }
      ++v8;
    }
    while (v8 != __M);
  }
LABEL_12:
  DspLib::Biquad::SetupWrapper::initialize(v6, *((const double **)this + 3), (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3, __M, a2);
LABEL_13:
  *(unsigned char *)this = 1;
}

void DspLib::Biquad::Filter::uninitialize(DspLib::Biquad::Filter *this)
{
  uint64_t v2 = (vDSP_biquadm_SetupStruct *)*((void *)this + 8);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((void *)this + 8) = 0;
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(unsigned char *)this = 0;
}

void DspLib::Biquad::Filter::setNumberOfStages(DspLib::Biquad::Filter *this, vDSP_Length __M)
{
  if (*(unsigned char *)this)
  {
    vDSP_Length v3 = *((void *)this + 6);
    DspLib::Biquad::Filter::initialize(this, v3, __M);
  }
  else
  {
    uint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 152);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::Biquad::Filter::initializeStates(DspLib::Biquad::Filter *this, float a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    unint64_t v4 = *((void *)this + 7);
    if (v4)
    {
      if (*((void *)this + 8))
      {
        vDSP_Length v6 = 0;
        unsigned int v7 = 0;
        uint64_t v8 = 1;
        long long v9 = 0uLL;
        do
        {
          if (v8)
          {
            vDSP_Length v10 = 0;
            unsigned int v11 = 1;
            do
            {
              long long v41 = v9;
              long long v42 = v9;
              double __coeffs = 1.0;
              vDSP_biquadm_SetCoefficientsDouble(*((vDSP_biquadm_Setup *)this + 8), &__coeffs, v6, v10, 1uLL, 1uLL);
              long long v9 = 0uLL;
              vDSP_Length v10 = v11;
              unint64_t v2 = *((void *)this + 6);
            }
            while (v2 > v11++);
            unint64_t v4 = *((void *)this + 7);
            uint64_t v8 = *((void *)this + 6);
          }
          vDSP_Length v6 = ++v7;
        }
        while (v4 > v7);
        char v13 = 2 * (v2 != 1);
        uint64_t v14 = MEMORY[0x1F4188790](this);
        uint64_t v16 = (char *)&v34 - v15;
        unint64_t v17 = *((void *)this + 6);
        MEMORY[0x1F4188790](v14);
        uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v18 >= 0x200) {
          size_t v20 = 512;
        }
        else {
          size_t v20 = v18;
        }
        bzero((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
        if (v17)
        {
          uint64_t v21 = 0;
          do
          {
            *(void *)&v19[8 * v21] = &v16[4 * (v21 << v13)];
            ++v21;
          }
          while (v17 > v21);
        }
        v39[0] = v19;
        v39[1] = v17;
        v39[2] = 1;
        DspLib::fill(v39, a2);
        vDSP_Length v22 = *((void *)this + 6);
        uint64_t v24 = MEMORY[0x1F4188790](v23);
        uint64_t v26 = (char *)&v34 - v25;
        MEMORY[0x1F4188790](v24);
        long long v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v27 >= 0x200) {
          size_t v29 = 512;
        }
        else {
          size_t v29 = v27;
        }
        bzero((char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
        if (v22)
        {
          uint64_t v30 = 0;
          do
          {
            *(void *)&v28[8 * v30] = &v26[4 * (v30 << (2 * (v22 != 1)))];
            ++v30;
          }
          while (v22 > v30);
        }
        vDSP_Length v31 = *((void *)this + 7);
        if ((v31 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          unsigned int v32 = 1;
          do
          {
            *(void *)&long long v37 = v19;
            *((void *)&v37 + 1) = v17;
            uint64_t v38 = 1;
            *(void *)&long long v35 = v28;
            *((void *)&v35 + 1) = v22;
            uint64_t v36 = 1;
            DspLib::Biquad::Filter::process(this, &v37, &v35);
            unint64_t v33 = v32;
            vDSP_Length v31 = *((void *)this + 7);
            ++v32;
          }
          while (v33 < 2 * v31);
          vDSP_Length v22 = *((void *)this + 6);
        }
        vDSP_biquadm_SetCoefficientsDouble(*((vDSP_biquadm_Setup *)this + 8), *((const double **)this + 3), 0, 0, v31, v22);
      }
    }
  }
}

void DspLib::Biquad::Filter::process(void *a1, long long *a2, long long *a3)
{
  if (a1[6] && a1[7] && (vDSP_Length v3 = (vDSP_biquadm_SetupStruct *)a1[8]) != 0)
  {
    vDSP_Length v4 = *((void *)a2 + 2);
    uint64_t v5 = *(float ***)a3;
    vDSP_Length v6 = *(const float ***)a2;
    vDSP_biquadm(v3, v6, 1, v5, 1, v4);
  }
  else if (*(void *)a2 != *(void *)a3)
  {
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
    DspLib::copy(&v9, &v7);
  }
}

void DspLib::Biquad::Filter::copyStatesFrom(DspLib::Biquad::Filter *this, const DspLib::Biquad::Filter *a2)
{
  if (*((void *)this + 6))
  {
    if (*((void *)this + 7))
    {
      unint64_t v2 = (vDSP_biquadm_SetupStruct *)*((void *)this + 8);
      if (v2)
      {
        if (*((void *)a2 + 6) && *((void *)a2 + 7))
        {
          vDSP_Length v3 = (const vDSP_biquadm_SetupStruct *)*((void *)a2 + 8);
          if (v3) {
            vDSP_biquadm_CopyState(v2, v3);
          }
        }
      }
    }
  }
}

void *DspLib::Biquad::Filter::latencySamples(void *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (this[7])
  {
    uint64_t v1 = this;
    if (this[6])
    {
      uint64_t v2 = 0;
      unsigned int v3 = 0;
      float v4 = 0.0;
      do
      {
        DspLib::clear(v24, 0x80uLL);
        v24[0] = 1.0;
        unint64_t v5 = v1[7];
        if (v5)
        {
          unint64_t v6 = 0;
          uint64_t v7 = v1[1];
          uint64_t v8 = v1[3];
          do
          {
            uint64_t v9 = 0;
            uint64_t v10 = (double *)(v8 + 40 * (v2 + v7 * v6));
            float v11 = *v10;
            float v12 = v10[1];
            float v13 = v10[2];
            float v14 = v10[3];
            float v15 = v10[4];
            float v16 = -v14;
            float v17 = -v15;
            float v18 = 0.0;
            float v19 = 0.0;
            float v20 = 0.0;
            float v21 = 0.0;
            do
            {
              float v22 = v18;
              float v18 = v24[v9];
              float v23 = (float)((float)((float)((float)(v22 * v12) + (float)(v11 * v18)) + (float)(v13 * v21))
                          + (float)(v16 * v20))
                  + (float)(v17 * v19);
              v24[v9++] = v23;
              float v19 = v20;
              float v20 = v23;
              float v21 = v22;
            }
            while (v9 != 128);
            unint64_t v6 = (v6 + 1);
          }
          while (v5 > v6);
        }
        this = (void *)DspLib::maxmgvi(v24, 0x80uLL);
        if (v4 < *(float *)&this) {
          float v4 = *(float *)&this;
        }
        uint64_t v2 = ++v3;
      }
      while (v1[6] > (unint64_t)v3);
    }
  }
  return this;
}

void DspLib::Biquad::Filter::process(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a4;
  uint64_t v10 = a2;
  *(void *)&long long v7 = &v10;
  *((void *)&v7 + 1) = 1;
  uint64_t v8 = a3;
  *(void *)&long long v5 = &v9;
  *((void *)&v5 + 1) = 1;
  uint64_t v6 = a5;
  DspLib::Biquad::Filter::process(a1, &v7, &v5);
}

void DspLib::Biquad::Filter::setCoefficients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, vDSP_Length a5)
{
  v13[0] = a2;
  v13[1] = a3;
  v11[0] = a1;
  v11[1] = (uint64_t)v13;
  void v11[2] = (uint64_t)&v12;
  uint64_t v12 = a4;
  if (a5 < 0x41)
  {
    DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(v11, a5);
  }
  else if (*(void *)(a1 + 48))
  {
    vDSP_Length v6 = 0;
    unsigned int v7 = 1;
    do
    {
      DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(v11, v6);
      vDSP_Length v6 = v7;
      unint64_t v8 = *(void *)(a1 + 48);
      BOOL v9 = v8 >= v7;
      BOOL v10 = v8 == v7++;
    }
    while (!v10 && v9);
  }
}

void DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(uint64_t *a1, vDSP_Length a2)
{
  uint64_t v2 = (void *)a1[1];
  if (v2[1])
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    unsigned int v7 = 1;
    while (1)
    {
      unint64_t v8 = (float32x2_t *)(*v2 + 20 * v5);
      long long v9 = *(_OWORD *)v8->f32;
      __int32 v17 = v8[2].i32[0];
      long long v16 = v9;
      if ((DspLib::Biquad::validate((uint64_t)&v16) & 1) == 0) {
        break;
      }
      float v10 = v8[2].f32[0];
      vDSP_Length v11 = *(void *)a1[2] + v5;
      uint64_t v12 = *(void *)(v6 + 24) + 40 * (a2 + *(void *)(v6 + 8) * v11);
      float64x2_t v13 = vcvtq_f64_f32(v8[1]);
      *(float64x2_t *)uint64_t v12 = vcvtq_f64_f32(*v8);
      *(float64x2_t *)(v12 + 16) = v13;
      *(double *)(v12 + 32) = v10;
      vDSP_biquadm_SetCoefficientsDouble(*(vDSP_biquadm_Setup *)(v6 + 64), (const double *)v12, v11, a2, 1uLL, 1uLL);
      uint64_t v5 = v7;
      uint64_t v2 = (void *)a1[1];
      if (v2[1] <= (unint64_t)v7++) {
        return;
      }
    }
    float v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 260);
    ++DspLibDebug::mAssertCounter;
  }
}

float32_t DspLib::Biquad::Filter::section@<S0>(DspLib::Biquad::Filter *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  float v4 = (float64x2_t *)(*((void *)this + 3) + 40 * (a3 + *((void *)this + 1) * a2));
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
  float32_t result = v4[2].f64[0];
  a4[1].f32[0] = result;
  return result;
}

void DspLib::Biquad::ParametricFilter::initialize(DspLib::Biquad::ParametricFilter *this, vDSP_Length a2, double a3, vDSP_Length a4)
{
  DspLib::Biquad::Filter::initialize(this, a2, a4);
  std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::resize((uint64_t *)this + 10, *((void *)this + 6));
  uint64_t v6 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 11);
  while (v6 != v7)
  {
    std::vector<DspLib::Biquad::Design::ParametricEQ>::resize(v6, *((void *)this + 7));
    v6 += 24;
  }
  if (*((double *)this + 9) != a3)
  {
    *((double *)this + 9) = a3;
    unint64_t v8 = *((void *)this + 7);
    if (v8)
    {
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = *((void *)this + 6);
      do
      {
        if (v11)
        {
          vDSP_Length v12 = 0;
          unsigned int v13 = 1;
          do
          {
            uint64_t v14 = *(void *)(*((void *)this + 10) + 24 * v12) + 16 * v9;
            DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, *(void *)v14, *(double **)(v14 + 8), v9, v12);
            vDSP_Length v12 = v13;
            unint64_t v11 = *((void *)this + 6);
          }
          while (v11 > v13++);
          unint64_t v8 = *((void *)this + 7);
        }
        uint64_t v9 = ++v10;
      }
      while (v8 > v10);
    }
  }
}

void std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unsigned int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<DspLib::Biquad::Design::ParametricEQ>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<DspLib::Biquad::Design::ParametricEQ>::__append((void **)a1, a2 - v2);
  }
}

void DspLib::Biquad::ParametricFilter::setParametricEQ(uint64_t a1, unint64_t a2, double *a3, uint64_t a4, vDSP_Length a5)
{
  float v6 = *(float *)&a3;
  int v7 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = (unint64_t)a3 >> 32;
  if (a5 < 0x41)
  {
    double v22 = *(double *)(a1 + 72);
    float v23 = v22 * 0.49000001;
    float v24 = v23;
    if (*((float *)&a2 + 1) <= v23) {
      float v24 = *((float *)&a2 + 1);
    }
    if (*((float *)&a2 + 1) < 1.0) {
      float v24 = 1.0;
    }
    if (*(float *)&a3 <= 40.0) {
      int v25 = (int)a3;
    }
    else {
      int v25 = 1109393408;
    }
    if (*(float *)&a3 < -40.0) {
      int v25 = -1038090240;
    }
    if (*((float *)&a3 + 1) <= 100.0) {
      int v26 = HIDWORD(a3);
    }
    else {
      int v26 = 1120403456;
    }
    unint64_t v27 = (float *)(*(void *)(*(void *)(a1 + 80) + 24 * a5) + 16 * a4);
    *(_DWORD *)unint64_t v27 = a2;
    v27[1] = v24;
    if (*((float *)&a3 + 1) >= 0.1) {
      int v28 = v26;
    }
    else {
      int v28 = 1036831949;
    }
    *((_DWORD *)v27 + 2) = v25;
    *((_DWORD *)v27 + 3) = v28;
    if (a2 != 25)
    {
      float v29 = v22;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)v27, v29, 0, a3, (uint64_t)&v32);
      long long v30 = v32;
      int v31 = v33;
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)&v30, 1, a4, a5);
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      vDSP_Length v12 = 0;
      unsigned int v13 = 1;
      do
      {
        double v14 = *(double *)(a1 + 72);
        float v15 = v14 * 0.49000001;
        if (*(float *)&v9 <= v15) {
          float v15 = *(float *)&v9;
        }
        if (*(float *)&v9 >= 1.0) {
          *(float *)&unint64_t v9 = v15;
        }
        else {
          LODWORD(v9) = 1065353216;
        }
        if (v6 <= 40.0) {
          *(float *)&int v16 = v6;
        }
        else {
          *(float *)&int v16 = 40.0;
        }
        if (v6 >= -40.0) {
          float v6 = *(float *)&v16;
        }
        else {
          float v6 = -40.0;
        }
        if (*(float *)&v10 <= 100.0) {
          int v17 = v10;
        }
        else {
          int v17 = 1120403456;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 24 * v12) + 16 * a4;
        *(_DWORD *)uint64_t v18 = v7;
        *(_DWORD *)(v18 + 4) = v9;
        if (*(float *)&v10 >= 0.1) {
          LODWORD(v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
        }
        else {
          LODWORD(v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1036831949;
        }
        *(float *)(v18 + 8) = v6;
        *(_DWORD *)(v18 + 12) = v10;
        if (v7 != 25)
        {
          float v19 = v14;
          DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)v18, v19, 0, a3, (uint64_t)&v32);
          long long v30 = v32;
          int v31 = v33;
          DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)&v30, 1, a4, v12);
          unint64_t v11 = *(void *)(a1 + 48);
        }
        vDSP_Length v12 = v13;
      }
      while (v11 > v13++);
    }
  }
}

void DspLib::Biquad::ParametricFilter::uninitialize(DspLib::Biquad::ParametricFilter *this)
{
  unint64_t v2 = (vDSP_biquadm_SetupStruct *)*((void *)this + 8);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((void *)this + 8) = 0;
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(unsigned char *)this = 0;

  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 10);
}

void DspLib::Biquad::ParametricFilter::setParametricEQs(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    vDSP_Length v7 = 0;
    for (unsigned int i = 0; i < v3; v7 = ++i)
    {
      if (a3)
      {
        uint64_t v9 = 0;
        unsigned int v10 = 1;
        do
        {
          DspLib::Biquad::ParametricFilter::setParametricEQ(a1, *(void *)(a2 + 16 * v9), *(double **)(a2 + 16 * v9 + 8), v9, v7);
          uint64_t v9 = v10;
        }
        while (a3 > v10++);
        unint64_t v3 = *(void *)(a1 + 48);
      }
    }
  }
}

void DspLib::Biquad::amplitudeResponse(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  v9[0] = a4;
  v9[1] = a5;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, (uint64_t)v9, 0, a6, 0, a7, a8, a9);
}

void DspLib::Biquad::frequencyResponse(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, DspLib::ComplexVector *this, double a8, double a9, double a10)
{
  if (a3 >= 0xF4241)
  {
    long long v37 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v37, 390);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (a4) {
      DspLib::fill(*(float **)a4, *(void *)(a4 + 8), 1.0);
    }
    if (a5) {
      DspLib::clear(*(float **)a5, *(void *)(a5 + 8));
    }
    if (this)
    {
      DspLib::ComplexVector::setLength(this, a3);
      DspLib::ComplexVector::operator=(this, 1.0);
    }
    unint64_t v18 = a1[7];
    if (v18)
    {
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      float v21 = a8;
      double v22 = (float)(6.2832 / v21);
      do
      {
        if (a3)
        {
          unint64_t v23 = 0;
          float v24 = (float64x2_t *)(a1[3] + 40 * (a6 + a1[1] * v19));
          float32x4_t v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v24), v24[1]);
          float32x4_t v38 = v25;
          float v26 = v24[2].f64[0];
          do
          {
            float32x4_t v39 = v38;
            float v40 = v26;
            double v27 = DspLib::Biquad::frequencyResponse(v39.f32, 0, v22 * *(float *)(a2 + 4 * v23), *(double *)v25.i64, a10);
            long double v28 = v27;
            long double v29 = *(double *)v25.i64;
            if (a4)
            {
              double v30 = sqrt(*(double *)v25.i64 * *(double *)v25.i64 + v27 * v27);
              *(double *)v25.i64 = *(float *)(*(void *)a4 + 4 * v23);
              *(float *)&double v30 = v30 * *(double *)v25.i64;
              *(_DWORD *)(*(void *)a4 + 4 * v23) = LODWORD(v30);
            }
            if (a5)
            {
              long double v31 = atan2(v29, v28);
              *(double *)v25.i64 = *(float *)(*(void *)a5 + 4 * v23);
              *(float *)&long double v31 = v31 + *(double *)v25.i64;
              *(_DWORD *)(*(void *)a5 + 4 * v23) = LODWORD(v31);
            }
            if (this)
            {
              float v32 = v28;
              float v33 = v29;
              float v34 = DspLib::ComplexSpan::operator[](this, v23);
              float v36 = (float)(v34 * v32) - (float)(v35 * v33);
              v41.imag = (float)(v35 * v32) + (float)(v34 * v33);
              v41.real = v36;
              DspLib::ComplexSpan::setElement(this, v23, v41);
            }
            ++v23;
          }
          while (a3 != v23);
          unint64_t v18 = a1[7];
        }
        uint64_t v19 = ++v20;
      }
      while (v18 > v20);
    }
  }
}

void DspLib::Biquad::phaseResponse(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  v9[0] = a4;
  v9[1] = a5;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, 0, (uint64_t)v9, a6, 0, a7, a8, a9);
}

void DspLib::Biquad::amplitudeAndPhaseResponse(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  v12[0] = a4;
  v12[1] = a5;
  v11[0] = a6;
  v11[1] = a7;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, (uint64_t)v12, (uint64_t)v11, a8, 0, a9, a10, a11);
}

void DspLib::Biquad::complexResponse(void *a1, uint64_t a2, unint64_t a3, DspLib::ComplexVector *this, uint64_t a5, double a6, double a7, double a8)
{
}

void DspLib::Biquad::SetupWrapper::~SetupWrapper(DspLib::Biquad::SetupWrapper *this)
{
  unint64_t v2 = (vDSP_biquadm_SetupStruct *)*((void *)this + 2);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((void *)this + 2) = 0;
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  BOOL v5 = v6;
  vDSP_Length v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      uint64_t v8 = *a1;
      vDSP_Length v7 = a1[1];
    }
    else
    {
      double v14 = 0;
    }
    float v15 = &v14[8 * v11];
    int v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    int v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float v15 = v12;
    int v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2F0854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<DspLib::Biquad::Design::ParametricEQ>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      long long v14 = &v7[16 * a2];
      do
      {
        *(_DWORD *)uint64_t v7 = 23;
        *(void *)(v7 + 4) = 1148846080;
        *((_DWORD *)v7 + 3) = 1065353216;
        v7 += 16;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    float v15 = &v13[16 * v10];
    int v16 = &v15[16 * a2];
    int v17 = v15;
    do
    {
      *(_DWORD *)int v17 = 23;
      *(void *)(v17 + 4) = 1148846080;
      *((_DWORD *)v17 + 3) = 1065353216;
      v17 += 16;
    }
    while (v17 != v16);
    uint64_t v18 = &v13[16 * v12];
    unsigned int v20 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

double DspLib::PilotToneV2::PilotTone::initialize(DspLib::PilotToneV2::PilotTone *this, double a2)
{
  *((double *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  unint64_t v3 = vcvtad_u64_f64(a2 * 5.0 / 1000.0);
  *((void *)this + 11) = v3;
  std::vector<float>::resize((uint64_t)this + 192, v3);
  DspLib::makeSecondHalfHannWindow(*((void *)this + 24), (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2);
  DspLib::Biquad::Filter::initialize((DspLib::PilotToneV2::PilotTone *)((char *)this + 8), 1uLL, 1uLL);
  *(unsigned char *)this = 1;

  return DspLib::PilotToneV2::PilotTone::reset(this);
}

double DspLib::PilotToneV2::PilotTone::reset(DspLib::PilotToneV2::PilotTone *this)
{
  *((void *)this + 12) = 0;
  uint64_t v2 = 220;
  if (!*((unsigned char *)this + 256)) {
    uint64_t v2 = 216;
  }
  int v3 = *(_DWORD *)((char *)this + v2);
  *((unsigned char *)this + 104) = 1;
  *((_DWORD *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
  *((void *)this + 14) = ((uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2) - 1;
  *((_WORD *)this + 62) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::PilotToneV2::PilotTone *)((char *)this + 56));
  if (*((unsigned char *)this + 256)) {
    *((_DWORD *)this + 36) = 925353388;
  }
  float v4 = 512.0 / *((double *)this + 10);
  *((float *)this + 65) = expf(-1.0 / (float)((float)(v4 * 7.5) / 1000.0));
  float v5 = expf(-1.0 / (float)((float)(v4 * 30.0) / 1000.0));
  *((float *)this + 66) = v5;
  *((float *)this + 68) = v5;
  *(void *)&double result = 512;
  *(_OWORD *)((char *)this + 152) = xmmword_1BB875C30;
  return result;
}

unsigned char *DspLib::PilotToneV2::PilotTone::uninitialize(unsigned char *this)
{
  *this = 0;
  return this;
}

void DspLib::PilotToneV2::PilotTone::setParameters(uint64_t a1, float *a2)
{
  DspLib::PilotToneV2::PilotTone::lookupTableNeedsUpdate(a1, a2);
  *(float *)(a1 + 216) = DspLib::dB2Power(v4, a2[3]);
  float v6 = DspLib::dB2Power(v5, a2[4]);
  *(float *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
  if (*(unsigned char *)(a1 + 256)) {
    *(float *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
  }
  float v7 = *(double *)(a1 + 176) + *(double *)(a1 + 176);
  float v8 = *(double *)(a1 + 80);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)2, v7, v8, 0, &__p);
  DspLib::Biquad::Filter::setCoefficients(a1 + 8, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)__p) >> 2), 0, 0x41uLL);
  *(void *)(a1 + 152) = 512;
  float v9 = 512.0 / *(double *)(a1 + 80);
  *(float *)(a1 + 26DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = expf(-1.0 / (float)((float)(v9 * 7.5) / 1000.0));
  float v10 = expf(-1.0 / (float)((float)(v9 * 30.0) / 1000.0));
  *(float *)(a1 + 264) = v10;
  *(float *)(a1 + 272) = v10;
  *(_DWORD *)(a1 + 268) = 1128792064;
  *(float *)(a1 + 224) = DspLib::dB2Amp(v11, -a2[7]);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 184);
  *(unsigned char *)(a1 + 228) = *a2 != 0.0;
  *(unsigned char *)(a1 + 1) = 1;
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_1BB2F0DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double DspLib::PilotToneV2::PilotTone::lookupTableNeedsUpdate(uint64_t a1, float *a2)
{
  double v4 = *(double *)(a1 + 176);
  float v5 = DspLib::dB2Amp((DspLib *)a1, a2[2]);
  float v6 = *(double *)(a1 + 80);
  float v7 = v6 / fmaxf(roundf(v6 / a2[5]), 1.0);
  float v8 = v7 * 0.00048828;
  float v10 = (DspLib *)DspLib::PilotToneV2::pilotToneBestFftBinFit(v9, a2[1], v7);
  float v12 = v8 * (float)v10;
  double v13 = v12;
  if (v12 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    LODWORD(v11) = vcvtad_u64_f64(v6 / v13);
  }
  *(void *)(a1 + 168) = v11 | ((void)v10 << 32);
  *(double *)(a1 + 176) = v13;
  float v14 = a2[6];
  BOOL isEqual = DspLib::isEqual(v10, v5, *(float *)(a1 + 184), 1.0e-20);
  if (!isEqual) {
    goto LABEL_12;
  }
  BOOL v16 = DspLib::isEqual((DspLib *)isEqual, v4, *(double *)(a1 + 176), 1.0e-20);
  if (!v16) {
    goto LABEL_12;
  }
  double v17 = 0.0;
  if (v14 < 0.5) {
    double v18 = 0.0;
  }
  else {
    double v18 = 1.0;
  }
  if (*(unsigned char *)(a1 + 256)) {
    double v17 = 1.0;
  }
  if (!DspLib::isEqual((DspLib *)v16, v18, v17, 1.0e-20))
  {
LABEL_12:
    *(float *)(a1 + 184) = v5;
    std::vector<float>::resize(a1 + 232, *(unsigned int *)(a1 + 168));
    unsigned int v20 = *(float **)(a1 + 232);
    uint64_t v21 = *(void *)(a1 + 240) - (void)v20;
    vDSP_Length v22 = v21 >> 2;
    if (v21)
    {
      uint64_t v23 = 0;
      do
      {
        float v24 = (float)((float)v23 / (float)v22) * 6.28318531;
        v20[v23++] = sinf(v24);
      }
      while (v22 > v23);
    }
    if (v14 < 0.5) {
      DspLib::multiply(v20, v22, v5);
    }
    else {
      float v5 = 0.00001;
    }
    *(float *)(a1 + 144) = v5;
    *(unsigned char *)(a1 + 256) = v14 >= 0.5;
    return DspLib::PilotToneV2::PilotTone::reset((DspLib::PilotToneV2::PilotTone *)a1);
  }
  return result;
}

void DspLib::PilotToneV2::PilotTone::process(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, vDSP_Length a5)
{
  if (*(unsigned char *)(a1 + 228)) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (*(void *)(a1 + 88) >= a5) {
      vDSP_Length v10 = a5;
    }
    else {
      vDSP_Length v10 = *(void *)(a1 + 88);
    }
    double v11 = DspLib::meanSquare((const float *)(a4 + 4 * a5 - 4 * v10), v10);
    float v12 = *(float *)(a1 + 120);
    *(unsigned char *)(a1 + 104) = *(float *)&v11 < v12;
    if (*(float *)&v11 >= v12 && !*(unsigned char *)(a1 + 125))
    {
      unint64_t v13 = *(void *)(a1 + 128) + a3;
      *(void *)(a1 + 128) = v13;
      *(unsigned char *)(a1 + 125) = v13 >= a5;
    }
    uint64_t v14 = *(void *)(a1 + 232);
    unint64_t v15 = (*(void *)(a1 + 240) - v14) >> 2;
    uint64_t v16 = *(void *)(a1 + 192);
    uint64_t v17 = (*(void *)(a1 + 200) - v16) >> 2;
    DspLib::PilotToneV2::PilotTone::addPilotTone(a1, a2, a3, v14, v15, v16, v17);
  }
}

void DspLib::PilotToneV2::PilotTone::addPilotTone(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(unsigned char *)(a1 + 256)) {
    DspLib::PilotToneV2::PilotTone::processAdaptivePilotTone(a1, a2, a3, a4, a5);
  }
  else {
    DspLib::PilotToneV2::PilotTone::processStaticPilotTone(a1, (uint64_t)a2, a3, a4, a5, a6, a7);
  }
}

uint64_t DspLib::PilotToneV2::PilotTone::status(uint64_t result, uint64_t a2)
{
  float v2 = *(double *)(result + 176);
  *(float *)a2 = v2;
  *(float *)(a2 + 4) = (float)*(unsigned int *)(result + 172);
  if (*(unsigned char *)(result + 228)) {
    int v3 = *(_DWORD *)(result + 144);
  }
  else {
    int v3 = 925353388;
  }
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

void DspLib::PilotToneV2::PilotTone::processAdaptivePilotTone(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v10 = MEMORY[0x1F4188790](a1);
    float v12 = (float *)((char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v13 = 0;
    unint64_t v14 = *(void *)(v10 + 96);
    do
    {
      if (a5 - v14 >= a3 - v13) {
        uint64_t v15 = a3 - v13;
      }
      else {
        uint64_t v15 = a5 - v14;
      }
      if (v15 == -1) {
        uint64_t v16 = a5 - v14;
      }
      else {
        uint64_t v16 = v15;
      }
      DspLib::copy((void *)(a4 + 4 * v14), v16, &v12[v13]);
      unint64_t v14 = *(void *)(a1 + 96) + v15;
      if (v14 >= a5) {
        unint64_t v14 = 0;
      }
      *(void *)(a1 + 96) = v14;
      v13 += v15;
    }
    while (v13 < a3);
    if (*(unsigned char *)(a1 + 104))
    {
      float v17 = 0.00001;
    }
    else
    {
      float v17 = DspLib::rms(a2, a3);
      if (v17 < 0.00001) {
        float v17 = 0.00001;
      }
    }
    if (*(void *)(a1 + 152) == a3)
    {
      float v18 = *(float *)(a1 + 260);
      float v19 = *(float *)(a1 + 264);
    }
    else
    {
      float v20 = (double)a3 / *(double *)(a1 + 80);
      float v18 = expf(-1.0 / (float)((float)(v20 * 7.5) / 1000.0));
      *(float *)(a1 + 26DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v18;
      float v19 = expf(-1.0 / (float)((float)(v20 * 30.0) / 1000.0));
      *(float *)(a1 + 264) = v19;
      *(void *)(a1 + 152) = a3;
    }
    float v21 = v17 + (float)(v18 * (float)(*(float *)(a1 + 136) - v17));
    float v22 = v17 + (float)(v19 * (float)(*(float *)(a1 + 140) - v17));
    *(float *)(a1 + 136) = v21;
    *(float *)(a1 + 14DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v22;
    float v23 = *(float *)(a1 + 268) * (float)((float)((float)(v22 - v21) / v17) * 100.0);
    if (v23 <= 1.0) {
      float v24 = v23;
    }
    else {
      float v24 = 1.0;
    }
    BOOL v25 = v23 < 0.0;
    float v26 = 0.0;
    if (v25) {
      float v24 = 0.0;
    }
    float v27 = (float)(v19 * (float)(1.0 - (float)(v24 * v24))) + (float)((float)(v24 * v24) * v18);
    *(float *)(a1 + 272) = v27;
    float v28 = (float)(v17 * *(float *)(a1 + 224))
        + (float)(v27 * (float)(*(float *)(a1 + 144) - (float)(v17 * *(float *)(a1 + 224))));
    *(float *)(a1 + 144) = v28;
    if (v28 >= 0.0)
    {
      uint64_t v29 = 144;
      if (*(float *)(a1 + 276) < v28) {
        uint64_t v29 = 276;
      }
      float v26 = *(float *)(a1 + v29);
      *(float *)(a1 + 144) = v26;
      if (v26 >= 0.0001)
      {
        unint64_t v30 = 0;
        *(void *)(a1 + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
LABEL_31:
        if (v30 >= (unint64_t)(*(double *)(a1 + 80) * 0.0399999991))
        {
          *(void *)(a1 + 96) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 56));
        }
        else
        {
          DspLib::multiply(v12, a3, v12, v26);
          DspLib::Biquad::Filter::process((void *)(a1 + 8), (uint64_t)v12, a3, (uint64_t)v12, a3);
          DspLib::add(a2, a3, v12);
        }
        return;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 144) = 0;
    }
    unint64_t v30 = *(void *)(a1 + 160) + a3;
    *(void *)(a1 + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v30;
    goto LABEL_31;
  }
}

void DspLib::PilotToneV2::PilotTone::processStaticPilotTone(uint64_t a1, uint64_t a2, vDSP_Length a3, uint64_t a4, vDSP_Length a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v14 = 0;
    unint64_t v15 = a7 - 1;
    do
    {
      if (*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 124) || !*(unsigned char *)(a1 + 125))
      {
        *(_DWORD *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 216);
        *(unsigned char *)(a1 + 125) = 0;
        unint64_t v16 = *(void *)(a1 + 112);
        if (v16 >= v15)
        {
          *(unsigned char *)(a1 + 124) = 0;
          *(void *)(a1 + 96) = 0;
          *(_DWORD *)(a1 + 144) = 925353388;
          return;
        }
        if (a7 - v16 >= a3) {
          vDSP_Length v17 = a3;
        }
        else {
          vDSP_Length v17 = a7 - v16;
        }
        uint64_t v18 = *(void *)(a1 + 96);
        if (a5 - v18 >= v17) {
          vDSP_Length v19 = v17;
        }
        else {
          vDSP_Length v19 = a5 - v18;
        }
        if (v19 == -1) {
          vDSP_Length v20 = a5 - v18;
        }
        else {
          vDSP_Length v20 = v19;
        }
        if (v19 == -1) {
          int v21 = a3 - v14;
        }
        else {
          int v21 = v19;
        }
        DspLib::multiplyAccumulate((float *)(a2 + 4 * v14), v21, (const float *)(a4 + 4 * v18), v20, (const float *)(a6 + 4 * v16));
        *(void *)(a1 + 112) += v19;
        *(unsigned char *)(a1 + 124) = 1;
        *(void *)(a1 + 128) = 0;
      }
      else
      {
        uint64_t v23 = *(void *)(a1 + 96);
        if (a5 - v23 >= a3 - v14) {
          vDSP_Length v19 = a3 - v14;
        }
        else {
          vDSP_Length v19 = a5 - v23;
        }
        if (v19 == -1) {
          vDSP_Length v24 = a3 - v14;
        }
        else {
          vDSP_Length v24 = v19;
        }
        DspLib::add((float *)(a2 + 4 * v14), v24, (const float *)(a4 + 4 * v23));
        *(_DWORD *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 220);
        *(void *)(a1 + 112) = 0;
        *(unsigned char *)(a1 + 124) = 0;
        *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 184);
      }
      vDSP_Length v22 = *(void *)(a1 + 96) + v19;
      if (v22 >= a5) {
        vDSP_Length v22 = 0;
      }
      *(void *)(a1 + 96) = v22;
      v14 += v19;
    }
    while (v14 < a3);
  }
}

uint64_t DspLib::PilotToneV2::pilotToneBestFftBinFit(DspLib::PilotToneV2 *this, float a2, float a3)
{
  float v4 = a3 * 0.00048828;
  unsigned int v5 = vcvtas_u32_f32(a2 / (float)(a3 * 0.00048828));
  if (v5 >= 0x3FF) {
    unsigned int v5 = 1023;
  }
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  if (fmodf(a3, v4 * (float)v6) > 0.5)
  {
    if (v6 >= 3)
    {
      unsigned int v10 = v6;
      do
      {
        float v8 = v4 * (float)v10;
        float v11 = a3 - (float)(v8 * floorf(a3 / v8));
        BOOL v9 = v11 >= 0.5;
        unsigned int v12 = v10 + 1;
        if (v11 < 0.5) {
          break;
        }
        unsigned int v13 = v10 - 2;
        ++v10;
      }
      while (v13 < 0x3FE);
      unsigned int v7 = v12 - 1;
    }
    else
    {
      unsigned int v7 = v6 - 1;
      float v8 = 0.0;
      BOOL v9 = 1;
    }
    unsigned int v14 = v6;
    while (v14 - 1023 >= 0xFFFFFC02)
    {
      float v15 = v4 * (float)v14--;
      if ((float)(a3 - (float)(v15 * floorf(a3 / v15))) < 0.5)
      {
        unsigned int v16 = v14 + 1;
        if (vabds_f32(v4 * (float)v6, v8) >= vabds_f32(v4 * (float)v6, v15)) {
          unsigned int v7 = v16;
        }
        if (v9) {
          return v6;
        }
        else {
          return v7;
        }
      }
    }
  }
  return v6;
}

BOOL DspLib::ToneMeister::Parameters::filterStateIsEnabled(DspLib::ToneMeister::Parameters *this)
{
  return this != 0;
}

unint64_t DspLib::ToneMeister::Parameters::filterStateIsActive(unint64_t this)
{
  return (this >> 1) & 1;
}

BOOL DspLib::ToneMeister::Parameters::isFilterParameter(DspLib::ToneMeister::Parameters *this)
{
  return (unint64_t)this - 16 < 0x1F4;
}

uint64_t DspLib::ToneMeister::Parameters::filterParameter(DspLib::ToneMeister::Parameters *this)
{
  return this - 10 * (((unint64_t)this - 16) / 0xA) - 16;
}

uint64_t DspLib::ToneMeister::Parameters::toneMeisterParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  return (a2 + 10 * this + 16);
}

float DspLib::ToneMeister::Parameters::filterCenterFrequency(float *a1)
{
  unsigned int v1 = a1[1];
  if (v1 > 0x15) {
    abort();
  }
  int v2 = 1 << v1;
  if ((v2 & 0x17FDFE) != 0) {
    return a1[3];
  }
  if ((v2 & 0x280200) != 0) {
    return 1000.0;
  }
  return sqrtf(a1[4] * a1[5]);
}

uint64_t DspLib::ToneMeister::Parameters::automationParameterForSlot(DspLib::ToneMeister::Parameters *this, uint64_t a2)
{
  return a2 + 10 * (void)this + 518;
}

BOOL DspLib::ToneMeister::Parameters::isAutomatedFilterStateParameter(DspLib::ToneMeister::Parameters *this)
{
  if ((unint64_t)this - 518 > 0x63) {
    return 0;
  }
  HIDWORD(v1) = -858993459 * ((_BYTE)this - 6) + 858993459;
  LODWORD(v1) = HIDWORD(v1);
  return (v1 >> 1) < 0x1999999A;
}

float DspLib::ToneMeister::Parameters::automatedGain(float *a1, float a2, float a3)
{
  float v3 = a1[2];
  float v4 = 0.0;
  if (v3 < a2)
  {
    float v5 = a1[3];
    if (v5 <= a2)
    {
      float v8 = a1[4];
    }
    else
    {
      if (a1[6] < 0.5)
      {
        float v6 = (float)(a2 - v3) / (float)(v5 - v3);
        float v7 = a1[4] - a3;
        return v6 * v7;
      }
      float v10 = a1[7];
      float v9 = a1[8];
      if (v10 >= a2)
      {
        float v6 = (float)(a2 - v3) / (float)(v10 - v3);
        float v7 = v9 - a3;
        return v6 * v7;
      }
      float v8 = v9 + (float)((float)((float)(a2 - v10) / (float)(v5 - v10)) * (float)(a1[4] - v9));
    }
    return v8 - a3;
  }
  return v4;
}

float DspLib::ToneMeister::Parameters::automatedFrequency(float *a1, float a2, float a3)
{
  float v4 = a1[2];
  float v5 = 1.0;
  if (v4 >= a2) {
    return v5;
  }
  float v6 = a1[3];
  if (v6 <= a2)
  {
    float v8 = a1[5];
    return v8 / a3;
  }
  if (a1[6] >= 0.5)
  {
    float v9 = a1[7];
    float v10 = a1[9];
    if (v9 >= a2)
    {
      float v7 = (float)((float)(a2 - v4) / (float)(v9 - v4)) * logf(v10 / a3);
      goto LABEL_11;
    }
    float v11 = (float)(a2 - v9) / (float)(v6 - v9);
    float v12 = logf(a1[5] / v10);
    float v8 = v10 * expf(v11 * v12);
    return v8 / a3;
  }
  float v7 = (float)((float)(a2 - v4) / (float)(v6 - v4)) * logf(a1[5] / a3);
LABEL_11:

  return expf(v7);
}

BOOL DspLib::ToneMeister::Parameters::findAutomationForFilter@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  LODWORD(a4) = vcvtas_u32_f32(fmaxf(*(float *)(a2 + 2072), 0.0));
  if (a4 == a1)
  {
    unint64_t v5 = 0;
    BOOL result = 1;
    if (a3) {
LABEL_3:
    }
      *a3 = v5;
  }
  else
  {
    float v7 = (float *)(a2 + 2112);
    unint64_t v8 = -1;
    do
    {
      if (v8 == 8) {
        return 0;
      }
      float v9 = *v7;
      v7 += 10;
      LODWORD(v4) = vcvtas_u32_f32(fmaxf(v9, 0.0));
      ++v8;
    }
    while (v4 != a1);
    BOOL result = v8 < 9;
    unint64_t v5 = v8 + 1;
    if (a3) {
      goto LABEL_3;
    }
  }
  return result;
}

BOOL DspLib::ToneMeister::Parameters::isFilterFrequencyParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  if (this == (DspLib::ToneMeister::Parameters *)3 || !a2 && (unint64_t)this - 4 < 3) {
    return 1;
  }
  return this == (DspLib::ToneMeister::Parameters *)4 && a2 == 2;
}

uint64_t DspLib::ToneMeister::Parameters::categoryOfFilterType(DspLib::ToneMeister::Parameters *this)
{
  if ((unint64_t)this - 8 > 0xD) {
    return 0;
  }
  else {
    return dword_1BB875C40[(void)this - 8];
  }
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasQuality(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x11) & (0x1FD62u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasGain(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x16) & (0x2F9AA7u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasOrder(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x15) & (0x100118u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasFrequency(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this > 0x15) | (0x17FDFFu >> (char)this) & 1;
}

uint64_t DspLib::ToneMeister::Parameters::dynamicFilterParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  return (3 * this + a2 + 618);
}

BOOL DspLib::isEqual(DspLib *this, double a2, double a3, double a4)
{
  if (a2 != 0.0) {
    a3 = (a3 - a2) / a2;
  }
  return fabs(a3) * 100.0 <= a4;
}

float DspLib::sign(DspLib *this, double a2)
{
  if (a2 >= 0.0) {
    float v2 = 1.0;
  }
  else {
    float v2 = -1.0;
  }
  if (a2 == 0.0) {
    float v2 = 0.0;
  }
  if (a2 >= 0.0) {
    float result = 1.0;
  }
  else {
    float result = -1.0;
  }
  if (!this) {
    return v2;
  }
  return result;
}

float DspLib::dB2Amp(DspLib *this, float a2)
{
  return expf(a2 * 0.11513);
}

void DspLib::dB2Amp(float *__C, vDSP_Length __N)
{
  int v2 = __N;
  float __B = 0.11513;
  vDSP_vsmul(__C, 1, &__B, __C, 1, __N);
  int v4 = v2;
  vvexpf(__C, __C, &v4);
}

void DspLib::multiply(float *__C, vDSP_Length __N, float a3)
{
  float __B = a3;
  vDSP_vsmul(__C, 1, &__B, __C, 1, __N);
}

float DspLib::dB2Power(DspLib *this, float a2)
{
  return expf(a2 * 0.23026);
}

float DspLib::amp2dB(DspLib *this, float a2)
{
  return log10f(a2) * 20.0;
}

float DspLib::amp2dBSafe(DspLib *this, float a2, float a3)
{
  return log10f(fabsf(a2) + a3) * 20.0;
}

void DspLib::amp2dB(float *__C, vDSP_Length __N, float a3)
{
  float __B = a3;
  vDSP_vdbcon(__C, 1, &__B, __C, 1, __N, 1u);
}

void DspLib::amp2dBSafe(const float *a1, vDSP_Length __N, float *a3, vDSP_Length a4, float a5)
{
  vDSP_vabs(a1, 1, a3, 1, __N);
  float __B = a5;
  vDSP_vsadd(a3, 1, &__B, a3, 1, a4);
  float v9 = 1.0;
  vDSP_vdbcon(a3, 1, &v9, a3, 1, a4, 1u);
}

void DspLib::abs(const float *a1, vDSP_Length __N, float *a3)
{
}

void DspLib::add(float *__C, vDSP_Length __N, float a3)
{
  float __B = a3;
  vDSP_vsadd(__C, 1, &__B, __C, 1, __N);
}

void DspLib::amp2dBSafe(float *a1, vDSP_Length a2, float a3)
{
}

void DspLib::amp2dBSafe(void *a1, float a2)
{
  if (a1[1])
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      DspLib::amp2dBSafe(*(const float **)(*a1 + 8 * v4), a1[2], *(float **)(*a1 + 8 * v4), a1[2], a2);
      uint64_t v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

float DspLib::power2dBSafe(DspLib *this, float a2, float a3)
{
  return log10f(fabsf(a2) + a3) * 10.0;
}

void DspLib::power2dB(float *__C, vDSP_Length __N, float a3)
{
  float __B = a3;
  vDSP_vdbcon(__C, 1, &__B, __C, 1, __N, 0);
}

void DspLib::abs(float *__C, vDSP_Length __N)
{
}

double DspLib::bark2Hz(DspLib *this, double a2)
{
  if (a2 < 2.0)
  {
    double v2 = a2 + -0.3;
    double v3 = 0.85;
LABEL_5:
    a2 = v2 / v3;
    return (a2 + 0.53) * 1960.0 / (26.28 - a2);
  }
  if (a2 > 20.1)
  {
    double v2 = a2 + 4.422;
    double v3 = 1.22;
    goto LABEL_5;
  }
  return (a2 + 0.53) * 1960.0 / (26.28 - a2);
}

float DspLib::sum(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  return __C;
}

BOOL DspLib::isFinite(void *a1)
{
  if (!a1[1]) {
    return 1;
  }
  uint64_t v2 = 0;
  unsigned int v3 = 1;
  do
  {
    uint64_t v4 = *(const float **)(*a1 + 8 * v2);
    vDSP_Length v5 = a1[2];
    float __C = 0.0;
    vDSP_sve(v4, 1, &__C, v5);
    BOOL result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
      break;
    }
    uint64_t v2 = v3;
  }
  while (a1[1] > (unint64_t)v3++);
  return result;
}

float DspLib::maxMagnitude(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_maxmgv(a1, 1, &__C, __N);
  return __C;
}

BOOL DspLib::isSilent(long long *a1, float a2)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return DspLib::maxMagnitude(&v3) < a2;
}

float DspLib::maxMagnitude(void *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  uint64_t v2 = 0;
  float v3 = 0.0;
  unsigned int v4 = 1;
  do
  {
    vDSP_Length v5 = *(const float **)(*a1 + 8 * v2);
    vDSP_Length v6 = a1[2];
    float __C = 0.0;
    vDSP_maxmgv(v5, 1, &__C, v6);
    if (v3 < __C) {
      float v3 = __C;
    }
    uint64_t v2 = v4;
  }
  while (a1[1] > (unint64_t)v4++);
  return v3;
}

void *DspLib::copy(void *__src, uint64_t a2, void *__dst)
{
  if (a2) {
    return memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

void *DspLib::copy(void *result, void *a2)
{
  unint64_t v2 = result[1];
  if (v2)
  {
    unsigned int v4 = result;
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = v4[2];
      if (v7)
      {
        BOOL result = memmove(*(void **)(*a2 + 8 * v5), *(const void **)(*v4 + 8 * v5), 4 * v7);
        unint64_t v2 = v4[1];
      }
      uint64_t v5 = v6;
    }
    while (v2 > v6++);
  }
  return result;
}

void *DspLib::copy_backward(void *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return memmove((void *)(a3 + 4 * a4 - 4 * a2), __src, 4 * a2);
  }
  return __src;
}

float DspLib::copyWithStrides(DspLib *this, const float *a2, char *__dst, float *a4, unint64_t a5)
{
  uint64_t v5 = this;
  if (a2 == 1)
  {
    if (a4 == 1)
    {
      if (a5) {
        memmove(__dst, this, 4 * a5);
      }
    }
    else
    {
      if (a5 >= 4)
      {
        unsigned int v8 = 0;
        uint64_t v21 = 4 * a4;
        do
        {
          vDSP_Length v22 = __dst;
          float result = *(float *)v5;
          int v23 = *((_DWORD *)v5 + 1);
          int v24 = *((_DWORD *)v5 + 2);
          int v25 = *((_DWORD *)v5 + 3);
          *(_DWORD *)__dst = *(_DWORD *)v5;
          *(_DWORD *)&__dst[4 * a4] = v23;
          float v26 = &__dst[v21 + v21];
          *(_DWORD *)float v26 = v24;
          float v27 = &v26[v21];
          *(_DWORD *)float v27 = v25;
          uint64_t v5 = (DspLib *)((char *)v5 + 16);
          unint64_t v28 = v8 + 8;
          v8 += 4;
          __dst = &v27[v21];
        }
        while (v28 <= a5);
        __dst = &v22[16 * a4];
      }
      else
      {
        unsigned int v8 = 0;
      }
      if (v8 < a5)
      {
        unsigned int v29 = v8 + 1;
        do
        {
          float v30 = *(float *)v5;
          uint64_t v5 = (DspLib *)((char *)v5 + 4);
          float result = v30;
          *(float *)__dst = v30;
          unint64_t v31 = v29++;
          __dst += 4 * a4;
        }
        while (v31 < a5);
      }
    }
  }
  else if (a4 == 1)
  {
    if (a5 >= 4)
    {
      unsigned int v7 = 0;
      uint64_t v10 = a2;
      do
      {
        float v11 = v5;
        float result = *(float *)v5;
        float v12 = (int *)((char *)v5 + v10 * 4);
        int v13 = *v12;
        unsigned int v14 = &v12[v10];
        int v15 = *v14;
        unsigned int v16 = &v14[v10];
        int v17 = *v16;
        *(float *)__dst = result;
        *((_DWORD *)__dst + 1) = v13;
        *((_DWORD *)__dst + 2) = v15;
        *((_DWORD *)__dst + 3) = v17;
        __dst += 16;
        unint64_t v18 = v7 + 8;
        v7 += 4;
        uint64_t v5 = (DspLib *)&v16[v10];
      }
      while (v18 <= a5);
      uint64_t v5 = (DspLib *)((char *)v11 + 16 * a2);
    }
    else
    {
      unsigned int v7 = 0;
    }
    if (v7 < a5)
    {
      unsigned int v19 = v7 + 1;
      do
      {
        float result = *(float *)v5;
        *(_DWORD *)__dst = *(_DWORD *)v5;
        __dst += 4;
        unint64_t v20 = v19++;
        uint64_t v5 = (DspLib *)((char *)v5 + 4 * a2);
      }
      while (v20 < a5);
    }
  }
  else
  {
    if (a5 >= 4)
    {
      unsigned int v9 = 0;
      uint64_t v32 = a2;
      do
      {
        float v33 = v5;
        float result = *(float *)v5;
        float v34 = (int *)((char *)v5 + v32 * 4);
        int v35 = *v34;
        float v36 = &v34[v32];
        int v37 = *v36;
        float32x4_t v38 = &v36[v32];
        int v39 = *v38;
        *(float *)__dst = result;
        *(_DWORD *)&__dst[4 * a4] = v35;
        *(_DWORD *)&__dst[8 * a4] = v37;
        *(_DWORD *)&__dst[12 * a4] = v39;
        unint64_t v40 = v9 + 8;
        v9 += 4;
        __dst += 4 * (4 * a4);
        uint64_t v5 = (DspLib *)&v38[v32];
      }
      while (v40 <= a5);
      uint64_t v5 = (DspLib *)((char *)v33 + 16 * a2);
    }
    else
    {
      unsigned int v9 = 0;
    }
    if (v9 < a5)
    {
      unsigned int v41 = v9 + 1;
      do
      {
        unint64_t v42 = v41;
        float result = *(float *)v5;
        *(_DWORD *)__dst = *(_DWORD *)v5;
        __dst += 4 * a4;
        uint64_t v5 = (DspLib *)((char *)v5 + 4 * a2);
        ++v41;
      }
      while (v42 < a5);
    }
  }
  return result;
}

float DspLib::sumOfSquares(void *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  uint64_t v2 = 0;
  float v3 = 0.0;
  unsigned int v4 = 1;
  do
  {
    uint64_t v5 = *(const float **)(*a1 + 8 * v2);
    vDSP_Length v6 = a1[2];
    float __C = 0.0;
    vDSP_svesq(v5, 1, &__C, v6);
    float v3 = v3 + __C;
    uint64_t v2 = v4;
  }
  while (a1[1] > (unint64_t)v4++);
  return v3;
}

void DspLib::fill(float *__C, vDSP_Length __N, float a3)
{
  float __A = a3;
  if (__N) {
    vDSP_vfill(&__A, __C, 1, __N);
  }
}

void DspLib::fill(void *a1, float a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      unsigned int v7 = *(float **)(*a1 + 8 * v5);
      vDSP_Length v8 = a1[2];
      float __A = a2;
      if (v8)
      {
        vDSP_vfill(&__A, v7, 1, v8);
        unint64_t v2 = a1[1];
      }
      uint64_t v5 = v6;
    }
    while (v2 > v6++);
  }
}

void DspLib::clear(float *a1, vDSP_Length __N)
{
}

void DspLib::clear(void *a1)
{
  if (a1[1])
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      vDSP_vclr(*(float **)(*a1 + 8 * v2), 1, a1[2]);
      uint64_t v2 = v3;
    }
    while (a1[1] > (unint64_t)v3++);
  }
}

void DspLib::diracDelta(float *a1, vDSP_Length __N)
{
  *a1 = 1.0;
}

void DspLib::negate(float *__C, vDSP_Length __N)
{
}

void DspLib::negate(const float *a1, vDSP_Length __N, float *a3)
{
}

void DspLib::reverse(float *a1, vDSP_Length __N)
{
}

void DspLib::abs(void *a1, void *a2)
{
  if (a1[1])
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      vDSP_vabs(*(const float **)(*a1 + 8 * v4), 1, *(float **)(*a2 + 8 * v4), 1, a1[2]);
      uint64_t v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::add(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B = a4;
  vDSP_vsadd(a1, 1, &__B, __C, 1, __N);
}

void DspLib::add(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
}

void DspLib::add(float *__C, vDSP_Length __N, const float *a3)
{
}

void DspLib::add(void *a1, void *a2, void *a3)
{
  if (a1[1])
  {
    unint64_t v6 = 0;
    do
    {
      vDSP_vadd(*(const float **)(*a1 + 8 * v6), 1, *(const float **)(*a2 + 8 * v6), 1, *(float **)(*a3 + 8 * v6), 1, a1[2]);
      ++v6;
    }
    while (v6 < a1[1]);
  }
}

void DspLib::add(uint64_t *a1, long long *a2)
{
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  long long v2 = *(_OWORD *)a1;
  uint64_t v3 = a1[2];
  DspLib::add(&v6, &v4, &v2);
}

void DspLib::subtract(const float *__A, vDSP_Length __N, const float *__B, uint64_t a4, float *a5)
{
}

void DspLib::subtract(float *__C, vDSP_Length __N, const float *__B)
{
}

void DspLib::subtract(void *a1, void *a2)
{
  if (a1[1])
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      vDSP_vsub(*(const float **)(*a2 + 8 * v4), 1, *(const float **)(*a1 + 8 * v4), 1, *(float **)(*a1 + 8 * v4), 1, a1[2]);
      uint64_t v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::multiply(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B = a4;
  vDSP_vsmul(a1, 1, &__B, __C, 1, __N);
}

void DspLib::multiply(void *a1, void *a2, float a3)
{
  if (a1[1])
  {
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      vDSP_Length v8 = *(const float **)(*a1 + 8 * v6);
      vDSP_Length v9 = a1[2];
      uint64_t v10 = *(float **)(*a2 + 8 * v6);
      float __B = a3;
      vDSP_vsmul(v8, 1, &__B, v10, 1, v9);
      uint64_t v6 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::multiply(uint64_t *a1, float a2)
{
  uint64_t v2 = *a1;
  long long v6 = *(_OWORD *)(a1 + 1);
  long long v3 = *(_OWORD *)a1;
  uint64_t v4 = a1[2];
  uint64_t v5 = v2;
  DspLib::multiply(&v5, &v3, a2);
}

void DspLib::multiply(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
}

void DspLib::multiply(float *__C, vDSP_Length __N, const float *a3)
{
}

void DspLib::multiply(void *a1, const float *__B)
{
  if (a1[1])
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      vDSP_vmul(*(const float **)(*a1 + 8 * v4), 1, __B, 1, *(float **)(*a1 + 8 * v4), 1, a1[2]);
      uint64_t v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::multiply(void *a1, void *a2, void *a3)
{
  if (a1[1])
  {
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      vDSP_vmul(*(const float **)(*a1 + 8 * v6), 1, *(const float **)(*a2 + 8 * v6), 1, *(float **)(*a3 + 8 * v6), 1, a1[2]);
      uint64_t v6 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::multiply(uint64_t *a1, long long *a2)
{
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  long long v2 = *(_OWORD *)a1;
  uint64_t v3 = a1[2];
  DspLib::multiply(&v6, &v4, &v2);
}

void DspLib::multiply(uint64_t a1, uint64_t a2, float **a3)
{
}

void DspLib::svdiv(const float *__B, vDSP_Length __N, float *__C, float a4)
{
  float __A = a4;
  vDSP_svdiv(&__A, __B, 1, __C, 1, __N);
}

void DspLib::svdiv(float *__B, vDSP_Length __N, float a3)
{
  float __A = a3;
  vDSP_svdiv(&__A, __B, 1, __B, 1, __N);
}

void DspLib::divide(const float *__A, vDSP_Length __N, const float *__B, uint64_t a4, float *a5)
{
}

void DspLib::divide(float *__C, vDSP_Length __N, const float *__B)
{
}

void DspLib::clip(const float *a1, vDSP_Length __N, float *__D, float a4, float a5)
{
  float __B = a4;
  float __C = a5;
  vDSP_vclip(a1, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::clip(float *__D, vDSP_Length __N, float a3, float a4)
{
  float __B = a3;
  float __C = a4;
  vDSP_vclip(__D, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::clip(void *a1, void *a2, float a3, float a4)
{
  if (a1[1])
  {
    unint64_t v8 = 0;
    do
    {
      vDSP_Length v9 = *(const float **)(*a1 + 8 * v8);
      vDSP_Length v10 = a1[2];
      float v11 = *(float **)(*a2 + 8 * v8);
      float __C = a4;
      float __B = a3;
      vDSP_vclip(v9, 1, &__B, &__C, v11, 1, v10);
      ++v8;
    }
    while (v8 < a1[1]);
  }
}

void DspLib::clip(uint64_t *a1, float a2, float a3)
{
  uint64_t v3 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  long long v4 = *(_OWORD *)a1;
  uint64_t v5 = a1[2];
  uint64_t v6 = v3;
  DspLib::clip(&v6, &v4, a2, a3);
}

void DspLib::threshold(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B = a4;
  vDSP_vthr(a1, 1, &__B, __C, 1, __N);
}

void DspLib::threshold(float *__C, vDSP_Length __N, float a3)
{
  float __B = a3;
  vDSP_vthr(__C, 1, &__B, __C, 1, __N);
}

void DspLib::multiplyAccumulate(float *__D, int a2, const float *__A, vDSP_Length __N, const float *__B)
{
}

void DspLib::multiplyAdd(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, const float *a5, uint64_t a6, float *a7)
{
}

void DspLib::multiplyAccumulate(float *__C, vDSP_Length __N, const float *__A, float a4)
{
  float __B = a4;
  vDSP_vsma(__A, 1, &__B, __C, 1, __C, 1, __N);
}

void DspLib::multiplyAdd(const float *a1, vDSP_Length __N, float *__D, float a4, float a5)
{
  float __B = a4;
  float __C = a5;
  vDSP_vsmsa(a1, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::convexCombination(float *__E, vDSP_Length __N, const float *__C, float a4)
{
  float __D = a4;
  float __B = 1.0 - a4;
  vDSP_vsmsma(__E, 1, &__B, __C, 1, &__D, __E, 1, __N);
}

void DspLib::vmma(const float *a1, vDSP_Length a2, const float *a3, int a4, const float *a5, int a6, const float *a7, int a8, float *__E)
{
}

void DspLib::square(const float *a1, vDSP_Length __N, float *a3)
{
}

void DspLib::square(float *__C, vDSP_Length __N)
{
}

void DspLib::square(void *a1)
{
  if (a1[1])
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      vDSP_vsq(*(const float **)(*a1 + 8 * v2), 1, *(float **)(*a1 + 8 * v2), 1, a1[2]);
      uint64_t v2 = v3;
    }
    while (a1[1] > (unint64_t)v3++);
  }
}

void DspLib::sqrt(float *a1, int a2)
{
  int v2 = a2;
  vvsqrtf(a1, a1, &v2);
}

void DspLib::poly(const float *a1, uint64_t a2, const float *a3, vDSP_Length __N, float *a5)
{
}

void DspLib::poly(void *a1, const float *__A, uint64_t a3)
{
  if (a1[1])
  {
    uint64_t v5 = 0;
    vDSP_Length v6 = a3 - 1;
    unsigned int v7 = 1;
    do
    {
      vDSP_vpoly(__A, 1, *(const float **)(*a1 + 8 * v5), 1, *(float **)(*a1 + 8 * v5), 1, a1[2], v6);
      uint64_t v5 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::vsin(const float *a1, int a2, float *a3)
{
  int v3 = a2;
  vvsinf(a3, a1, &v3);
}

void DspLib::vsin(void *a1, void *a2)
{
  if (a1[1])
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(const float **)(*a1 + 8 * v4);
      vDSP_Length v6 = *(float **)(*a2 + 8 * v4);
      int v7 = a1[2];
      vvsinf(v6, v5, &v7);
      ++v4;
    }
    while (v4 < a1[1]);
  }
}

void DspLib::vtanh(const float *a1, int a2, float *a3)
{
  int v3 = a2;
  vvtanhf(a3, a1, &v3);
}

void DspLib::runningSum(float *__C, vDSP_Length __N, float a3, float a4)
{
  float __S = a3;
  float v6 = a4 + (float)(a3 * *__C);
  vDSP_vrsum(__C, 1, &__S, __C, 1, __N);
  float __B = v6;
  vDSP_vsadd(__C, 1, &__B, __C, 1, __N);
}

float DspLib::rms(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_rmsqv(a1, 1, &__C, __N);
  return __C;
}

float DspLib::minv(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_minv(a1, 1, &__C, __N);
  return __C;
}

uint64_t DspLib::minIndex(const float *a1, vDSP_Length __N)
{
  LODWORD(v3) = 0;
  vDSP_Length v4 = 0;
  vDSP_minvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

float DspLib::maxv(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_maxv(a1, 1, &__C, __N);
  return __C;
}

uint64_t DspLib::maxIndex(const float *a1, vDSP_Length __N)
{
  LODWORD(v3) = 0;
  vDSP_Length v4 = 0;
  vDSP_maxvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

uint64_t DspLib::maxmgvi(const float *a1, vDSP_Length __N)
{
  LODWORD(v3) = 0;
  vDSP_Length v4 = 0;
  vDSP_maxmgvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

uint64_t DspLib::minmgvi(const float *a1, vDSP_Length __N)
{
  LODWORD(v3) = 0;
  vDSP_Length v4 = 0;
  vDSP_minmgvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

void DspLib::vmax(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
}

void DspLib::vmax(float *__C, vDSP_Length __N, const float *a3)
{
}

void DspLib::vmin(float *__C, vDSP_Length __N, const float *a3)
{
}

void DspLib::vmaxmg(float *__C, vDSP_Length __N, const float *a3)
{
}

void DspLib::slidingWindowMaxima(const float *a1, uint64_t a2, float *a3, vDSP_Length __N)
{
}

void DspLib::sum(uint64_t a1, float *__A, vDSP_Length __N)
{
  float v6 = **(float ***)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6 != __A && v7 != 0) {
    memmove(__A, v6, 4 * v7);
  }
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    unsigned int v9 = 2;
    uint64_t v10 = 1;
    do
    {
      vDSP_vadd(__A, 1, *(const float **)(*(void *)a1 + 8 * v10), 1, __A, 1, __N);
      uint64_t v10 = v9;
    }
    while (*(void *)(a1 + 8) > (unint64_t)v9++);
  }
}

float DspLib::sumOfSquares(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_svesq(a1, 1, &__C, __N);
  return __C;
}

float DspLib::mean(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  return __C / (float)__N;
}

float DspLib::median(uint64_t a1, unint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1.0;
  }
  MEMORY[0x1F4188790](a1);
  vDSP_Length v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  memmove(v4, v5, v3);
  std::__sort<std::__less<float,float> &,float *>();
  unint64_t v6 = a2 >> 1;
  if (a2) {
    return *(float *)&v4[4 * v6];
  }
  else {
    return (float)(*(float *)&v4[4 * v6 - 4] + *(float *)&v4[4 * v6]) * 0.5;
  }
}

double DspLib::meanSquare(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  if (!__N) {
    return 0.0;
  }
  vDSP_measqv(a1, 1, &__C, __N);
  *(float *)&double result = __C;
  return result;
}

float DspLib::norm(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_svesq(a1, 1, &__C, __N);
  return sqrtf(__C);
}

void DspLib::ramp(float *__C, vDSP_Length __N, int a3, float a4, float a5)
{
  float __A = a4;
  if (a3)
  {
    double v8 = pow((float)(a5 / a4), 1.0 / ((double)__N + -1.0));
    if (__N)
    {
      uint64_t v9 = 0;
      double v10 = a4;
      do
      {
        float v11 = v10;
        __C[v9] = v11;
        double v10 = v8 * v10;
        ++v9;
      }
      while (__N > v9);
    }
  }
  else
  {
    float __B = (float)(a5 - a4) / (float)(__N - 1);
    vDSP_vramp(&__A, &__B, __C, 1, __N);
  }
}

void DspLib::makeTukeyWindow(uint64_t a1, unint64_t a2, float a3)
{
  if (a2)
  {
    uint64_t v6 = 0;
    float v7 = a3 * 0.5;
    float v8 = 1.0 - (float)(a3 * 0.5);
    float v9 = 6.28318531 / a3;
    float v10 = (float)(a2 - 1);
    while (1)
    {
      float v11 = (float)v6 / v10;
      if (v11 < v7) {
        break;
      }
      float v13 = 1.0;
      if (v11 > v8)
      {
        float v12 = (float)(v11 + -1.0) + (float)(a3 * 0.5);
        goto LABEL_7;
      }
LABEL_8:
      *(float *)(a1 + 4 * v6++) = v13;
      if (a2 <= v6) {
        return;
      }
    }
    float v12 = v11 + (float)(a3 * -0.5);
LABEL_7:
    float v13 = (float)(cosf(v12 * v9) + 1.0) * 0.5;
    goto LABEL_8;
  }
}

void DspLib::makeChebychevWindow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memcpy(__dst, &unk_1BB875D20, sizeof(__dst));
  if (a2)
  {
    uint64_t v4 = 0;
    do
    {
      *(float *)(a1 + 4 * v4) = DspLib::elementAtIndexWithInterpolation((uint64_t)__dst, 100, (float)((float)v4 / (float)(a2 - 1)) * 99.0);
      ++v4;
    }
    while (a2 > v4);
  }
}

float DspLib::elementAtIndexWithInterpolation(uint64_t a1, uint64_t a2, float a3)
{
  float v3 = fmaxf(a3, 0.0);
  uint64_t v4 = v3;
  float v5 = v3 - (float)(v4 - 1);
  float v6 = 2.0 - v5;
  if (v5 >= 1.0) {
    float v7 = v6 * (float)(v6 * (float)(v6 * 0.16667));
  }
  else {
    float v7 = (float)((float)(v5 * (float)(v5 * -0.5)) * v6) + 0.66667;
  }
  unint64_t v8 = v4 + 1;
  float v9 = v3 - (float)v4;
  float v10 = 2.0 - v9;
  if (v9 >= 1.0) {
    float v11 = v10 * (float)(v10 * (float)(v10 * 0.16667));
  }
  else {
    float v11 = (float)((float)(v9 * (float)(v9 * -0.5)) * v10) + 0.66667;
  }
  unint64_t v12 = v4 + 2;
  float v13 = (float)v8 - v3;
  float v14 = 2.0 - v13;
  if (v13 >= 1.0) {
    float v15 = v14 * (float)(v14 * (float)(v14 * 0.16667));
  }
  else {
    float v15 = (float)((float)(v13 * (float)(v13 * -0.5)) * v14) + 0.66667;
  }
  if (v8 >= a2 - 1) {
    unint64_t v8 = a2 - 1;
  }
  float v16 = (float)v12 - v3;
  float v17 = 2.0 - v16;
  if (v16 >= 1.0) {
    float v18 = v17 * (float)(v17 * (float)(v17 * 0.16667));
  }
  else {
    float v18 = (float)((float)(v16 * (float)(v16 * -0.5)) * v17) + 0.66667;
  }
  float v19 = (float)((float)(v11 * *(float *)(a1 + 4 * v4))
              + (float)(v7 * *(float *)(a1 + 4 * ((v4 - 1) & ~(((int)v4 - 1) >> 31)))))
      + (float)(v15 * *(float *)(a1 + 4 * v8));
  if (v12 >= a2 - 1) {
    uint64_t v20 = a2 - 1;
  }
  else {
    uint64_t v20 = v4 + 2;
  }
  return v19 + (float)(v18 * *(float *)(a1 + 4 * v20));
}

void DspLib::makeRaisedCosineWindow(float *__A, vDSP_Length __N)
{
  if (__N)
  {
    uint64_t v4 = 0;
    do
    {
      float v5 = sin((double)(v4 + 1) * 3.14159265 / (double)(__N + 1));
      __A[v4++] = v5;
    }
    while (__N > v4);
  }
  float __C = 0.0;
  vDSP_sve(__A, 1, &__C, __N);
  float __B = __C;
  vDSP_vsdiv(__A, 1, &__B, __A, 1, __N);
}

float *DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs(float *a1, uint64_t a2, int a3, vDSP_Length a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (2 * a3 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  float v10 = (char *)v19 - v9;
  MEMORY[0x1F4188790](v8);
  float v13 = (char *)v19 - v12;
  unint64_t v14 = (v7 + 1) >> 1;
  *(_DWORD *)&v10[4 * v14 - 4] = 1065353216;
  if (v14 != 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 4 * (v11 - 2);
    do
    {
      float v17 = (float)(v15 + 1) / (float)v14;
      *(float *)&v10[4 * v15] = v17;
      *(float *)&v10[v16] = v17;
      v16 -= 4;
      ++v15;
    }
    while (v14 - 1 != v15);
  }
  DspLib::makeRaisedCosineWindow((float *)((char *)v19 - v12), a4);
  return DspLib::convolve(a1, a2, (uint64_t)v10, v7, (uint64_t)v13, a4);
}

float *DspLib::convolve(float *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v6) = 0;
  int v7 = 0;
  do
  {
    float v8 = 0.0;
    uint64_t v9 = v7;
    LODWORD(v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
    do
    {
      float v8 = v8 + (float)(*(float *)(a3 + 4 * v10) * *(float *)(a5 + 4 * v9));
      if (v9-- < 1) {
        break;
      }
      unint64_t v10 = (v10 + 1);
    }
    while (a4 > v10);
    *result++ = v8;
    if (v7 + 1 < a6) {
      unint64_t v6 = v6;
    }
    else {
      unint64_t v6 = (v6 + 1);
    }
    if (v7 + 1 < a6) {
      ++v7;
    }
    else {
      int v7 = a6 - 1;
    }
  }
  while (a4 > v6);
  return result;
}

float DspLib::makeSincWindow(float *a1, vDSP_Length a2, unsigned int a3, unsigned int a4, uint64_t a5, float a6)
{
  unsigned int v11 = a4 * a3;
  uint64_t v12 = a4 * a3 + 1;
  BOOL v13 = a4 * a3 == -1;
  std::function<void ()(std::span<float,18446744073709551615ul>)>::operator()(a5, (uint64_t)a1, a2);
  double v14 = 0.0;
  if (!v13)
  {
    double v15 = 1.0 / ((double)a3 / a6);
    double v16 = (double)v11 * -0.5 * v15;
    float v17 = a1;
    do
    {
      float v18 = *v17;
      double v19 = 1.0;
      if (fabs(v16) >= 0.000001) {
        double v19 = sin(v16 * 3.14159265) / (v16 * 3.14159265);
      }
      float v20 = v19 * v18;
      *v17++ = v20;
      double v14 = v14 + v20;
      double v16 = v15 + v16;
      --v12;
    }
    while (v12);
  }
  float v21 = 1.0 / v14;
  float __B = v21;
  vDSP_vsmul(a1, 1, &__B, a1, 1, a2);
  return (float)((float)a3 * (float)a4) * 0.5;
}

uint64_t std::function<void ()(std::span<float,18446744073709551615ul>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

void DspLib::makeSymmetricHannWindow(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    double v5 = (double)(a2 - 1);
    do
    {
      float v6 = cos((double)v4 * 6.28318531 / v5) * -0.5 + 0.5;
      *(float *)(a1 + 4 * v4++) = v6;
    }
    while (a2 > v4);
  }
}

void DspLib::makeSecondHalfHannWindow(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    double v5 = (float)((float)(a2 - 1) + (float)(a2 - 1));
    do
    {
      float v6 = cos((double)(a2 + v4) * 6.28318531 / v5) * -0.5 + 0.5;
      *(float *)(a1 + 4 * v4++) = v6;
    }
    while (a2 > v4);
  }
}

void DspLib::makePeriodicHannWindow(_DWORD *a1, unint64_t a2)
{
  *a1 = 0;
  unint64_t v4 = a2 >> 1;
  if (a2 >= 2)
  {
    unint64_t v5 = 1;
    do
    {
      float v6 = cos((double)v5 * 6.28318531 / (double)a2) * -0.5 + 0.5;
      *(float *)&a1[v5] = v6;
      unint64_t v5 = (v5 + 1);
    }
    while (v4 >= v5);
  }
  if (a2 - v4 >= 2)
  {
    unsigned int v7 = 2;
    uint64_t v8 = 1;
    do
    {
      a1[v8 + v4] = a1[v4 - v8];
      uint64_t v8 = v7;
    }
    while (a2 - v4 > v7++);
  }
}

float DspLib::dotProduct(const float *a1, vDSP_Length __N, const float *a3)
{
  float __C = 0.0;
  vDSP_dotpr(a1, 1, a3, 1, &__C, __N);
  return __C;
}

uint64_t DspLib::linSpace(uint64_t result, unint64_t a2, float a3, float a4)
{
  if (a2)
  {
    uint64_t v4 = 0;
    float v5 = (float)(a4 - a3) / (float)(a2 - 1);
    do
    {
      *(float *)(result + 4 * v4) = a3 + (float)((float)v4 * v5);
      ++v4;
    }
    while (a2 > v4);
  }
  return result;
}

float DspLib::createInterpolationTable(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >= 4 * a2)
  {
    int v4 = a2 - 1;
    if ((int)a2 >= 1)
    {
      uint64_t v5 = 0;
      float result = 0.5;
      do
      {
        if ((int)v5 <= 1) {
          int v7 = 1;
        }
        else {
          int v7 = v5;
        }
        float v8 = *(float *)(a1 + 4 * (v7 - 1));
        float v9 = *(float *)(a1 + 4 * v5);
        uint64_t v10 = v5 + 1;
        if (v4 >= (int)v5 + 1) {
          int v11 = v5 + 1;
        }
        else {
          int v11 = a2 - 1;
        }
        float v12 = *(float *)(a1 + 4 * v11);
        int v13 = v5 + 2;
        if (v4 < (int)v5 + 2) {
          int v13 = a2 - 1;
        }
        v14.f32[0] = v9 * 0.5;
        v14.f32[1] = -v9;
        *(float32x2_t *)&v14.u32[2] = vmul_n_f32((float32x2_t)0x3F2AAAAB00000000, v9);
        *(float32x4_t *)(a3 + 16 * v5++) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v14, (float32x4_t)xmmword_1BB875CF0, v8), (float32x4_t)xmmword_1BB875D00, v12), (float32x4_t)xmmword_1BB875D10, *(float *)(a1 + 4 * v13));
      }
      while (a2 != v10);
    }
  }
  return result;
}

void DspLib::elementAtIndexWithInterpolation(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4, uint64_t a5, vDSP_Length a6)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    uint64_t v10 = 4 * a6;
    MEMORY[0x1F4188790](a1);
    int v11 = (float *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    vDSP_vfrac(v12, 1, v11, 1, v13);
    MEMORY[0x1F4188790](v14);
    vDSP_vfixu32(a3, 1, (unsigned int *)v11, 1, a6);
    vDSP_Length v15 = 0;
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = 0;
    float v19 = *v11;
LABEL_3:
    unsigned int v20 = v16;
    do
    {
      if (LODWORD(v11[v15]) != LODWORD(v19))
      {
        vDSP_Length v21 = v18;
        unsigned int v18 = 1;
        vDSP_vpoly((const float *)(a1 + 4 * (4 * LODWORD(v19))), 1, &v11[v17], 1, (float *)(a5 + 4 * v17), 1, v21, 3uLL);
        float v19 = v11[v15];
        vDSP_Length v15 = v20 + 1;
        unsigned int v16 = v20 + 1;
        unsigned int v17 = v20;
        if (a6 > v15) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
      ++v18;
      vDSP_Length v15 = ++v20;
    }
    while (a6 > v20);
    unsigned int v20 = v17;
    if (!v18) {
      return;
    }
LABEL_10:
    vDSP_vpoly((const float *)(a1 + 4 * (4 * LODWORD(v19))), 1, &v11[v20], 1, (float *)(a5 + 4 * v20), 1, v18, 3uLL);
  }
}

float DspLib::inv3x3real(float *a1)
{
  float v1 = a1[1];
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[4];
  float v5 = a1[5];
  float v6 = a1[6];
  float v7 = a1[7];
  float v8 = a1[8];
  float v9 = (float)(v4 * v8) - (float)(v5 * v7);
  float v10 = (float)(v3 * v8) - (float)(v5 * v6);
  float v11 = (float)(v3 * v7) - (float)(v4 * v6);
  float v12 = (float)(v1 * v8) - (float)(v2 * v7);
  float v13 = (float)(*a1 * v8) - (float)(v2 * v6);
  float v14 = (float)(*a1 * v7) - (float)(v1 * v6);
  float v15 = (float)(v1 * v5) - (float)(v2 * v4);
  float v16 = (float)(*a1 * v5) - (float)(v2 * v3);
  float v17 = (float)(*a1 * v4) - (float)(v1 * v3);
  float v18 = 1.0 / (float)((float)((float)(*a1 * v9) - (float)(v10 * v1)) + (float)(v2 * v11));
  *a1 = v9 * v18;
  a1[1] = -(float)(v12 * v18);
  a1[2] = v15 * v18;
  a1[3] = -(float)(v10 * v18);
  a1[4] = v13 * v18;
  a1[5] = -(float)(v16 * v18);
  a1[6] = v11 * v18;
  a1[7] = -(float)(v14 * v18);
  float result = v17 * v18;
  a1[8] = result;
  return result;
}

uint64_t DspLib::matNxNInv(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  __CLPK_integer __lda = *(void *)(a1 + 16);
  __CLPK_integer __info = -1;
  float v2 = (__CLPK_real **)MEMORY[0x1F4188790](a1);
  float v4 = (__CLPK_integer *)&v8[-((v3 + 15) & 0x7FFFFFFF0)];
  uint64_t v5 = sgetrf_(&__lda, &__lda, *v2, &__lda, v4, &__info);
  __lworuint64_t k = __lda * __lda;
  MEMORY[0x1F4188790](v5);
  sgetri_(&__lda, *(__CLPK_real **)a1, &__lda, v4, (__CLPK_real *)&v8[-v6], &__lwork, &__info);
  return __info;
}

float DspLib::peakiness(const float *a1, vDSP_Length __N)
{
  float __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  float v4 = __C;
  float v7 = 0.0;
  vDSP_svesq(a1, 1, &v7, __N);
  return (float)(sqrtf((float)__N) * sqrtf(v7)) / (float)(v4 + 0.000000001);
}

void DspLib::waterFillingSolution(uint64_t a1, vDSP_Length a2, float a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  float v7 = (float *)((char *)v12 - v6);
  if (a2)
  {
    memmove((char *)v12 - v6, v5, 4 * a2);
    vDSP_vsort(v7, a2, 1);
    uint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      float v10 = v7[v8];
      if ((float)(v10 * (float)(a2 - v8)) >= a3) {
        break;
      }
      a3 = a3 - v10;
      uint64_t v8 = v9;
    }
    while (a2 > v9++);
  }
  else
  {
    vDSP_vsort((float *)((char *)v12 - v6), 0, 1);
  }
}

uint64_t DspLib::AverageRms::initialize(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = 1;
  return this;
}

uint64_t DspLib::AverageRms::configure(uint64_t result, int a2, double a3, float a4)
{
  *(float *)(result + 12) = a4;
  *(double *)(result + 16) = a3;
  *(_DWORD *)(result + 48) = a2;
  *(void *)(result + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  float v4 = -100.0;
  if (a2 != 1) {
    float v4 = 0.0;
  }
  *(float *)(result + 32) = v4;
  return result;
}

uint64_t DspLib::AverageRms::reset(uint64_t this)
{
  *(void *)(this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  float v1 = -100.0;
  if (*(_DWORD *)(this + 48) != 1) {
    float v1 = 0.0;
  }
  *(float *)(this + 32) = v1;
  return this;
}

void DspLib::AverageRms::process(uint64_t a1, uint64_t a2, vDSP_Length a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v6 = (float *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    HIDWORD(v11) = *(_DWORD *)(a1 + 12);
    vDSP_vsmul(v7, 1, (const float *)&v11 + 1, v6, 1, a3);
    HIDWORD(v11) = 0;
    vDSP_rmsqv(v6, 1, (float *)&v11 + 1, a3);
    float v8 = *((float *)&v11 + 1);
    if (*(_DWORD *)(a1 + 48) == 1) {
      float v8 = log10f(*((float *)&v11 + 1) + 0.00001) * 20.0;
    }
    if (a3 == *(void *)(a1 + 40))
    {
      double v9 = *(double *)(a1 + 24);
    }
    else
    {
      double v9 = exp(-1.0 / (*(double *)(a1 + 16) * 1000.0 * ceil(*(double *)a1 / (double)a3) / 1000.0));
      *(double *)(a1 + 24) = v9;
      *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a3;
    }
    float v10 = v9;
    *(float *)(a1 + 32) = v8 + (float)(v10 * (float)(*(float *)(a1 + 32) - v8));
  }
}

void DspLib::SideChain::Algorithm::initialize(DspLib::SideChain::Algorithm *this, double a2, unint64_t a3)
{
  std::vector<float>::resize((uint64_t)this, a3);
  std::vector<float>::resize((uint64_t)this + 24, a3);
  *((unsigned char *)this + 48) = 1;
  float v6 = a2;
  *((float *)this + 13) = v6;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::SideChain::Algorithm *)((char *)this + 792), 1uLL, v6, 1uLL);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::SideChain::Algorithm *)((char *)this + 896), 1uLL, *((float *)this + 13), 1uLL);
  *((_OWORD *)this + 69) = xmmword_1BB875EB0;

  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 896, 0x41A0000000000000uLL, (double *)0x3F34FDF400000000, 0, 0x41uLL);
}

void DspLib::SideChain::Algorithm::uninitialize(DspLib::SideChain::Algorithm *this)
{
  *((unsigned char *)this + 48) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 792));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 896));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 1000));
  *((void *)this + 1) = *(void *)this;
  *((void *)this + 4) = *((void *)this + 3);
}

void DspLib::SideChain::Algorithm::reset(DspLib::SideChain::Algorithm *this)
{
  *((_DWORD *)this + 277) = 0;
  *((_DWORD *)this + 279) = 0;
  *((_DWORD *)this + 19DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 194) = 0;
  *((void *)this + 98) = 0;
}

void DspLib::SideChain::Algorithm::setParameters(uint64_t a1, unint64_t a2, double *a3, uint64_t a4)
{
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 792, a2, a3, 0, 0x41uLL);
  if (*(unsigned char *)(a4 + 12)) {
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 1000));
  }
  else {
    DspLib::SideChain::Algorithm::configureHilbertTransform(a1, a2, *((float *)&a2 + 1));
  }
  DspLib::SideChain::Algorithm::createGainTable((DspLib *)a1, *(float *)a4, *(float *)(a4 + 4), *(float *)(a4 + 8));
  uint64_t v7 = *(void *)(a4 + 12);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a4 + 20);
  *(void *)(a1 + 764) = v7;
}

void DspLib::SideChain::Algorithm::configureHilbertTransform(uint64_t a1, int a2, float a3)
{
  if (a2 == 8)
  {
    float v4 = 20.0;
  }
  else
  {
    if (a2 != 9) {
      goto LABEL_6;
    }
    float v4 = 20000.0;
  }
  a3 = sqrtf(a3 * v4);
LABEL_6:
  uint64_t v5 = a1 + 1000;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 1000), 2uLL, *(float *)(a1 + 52), 1uLL);
  float v6 = 10000.0;
  if (a3 <= 10000.0) {
    float v6 = a3;
  }
  if (a3 >= 40.0) {
    float v7 = v6;
  }
  else {
    float v7 = 40.0;
  }
  DspLib::Biquad::ParametricFilter::setParametricEQ(v5, ((unint64_t)COERCE_UNSIGNED_INT(v7 * 0.5) << 32) | 0xB, (double *)0x3EBD70A400000000, 0, 0);

  DspLib::Biquad::ParametricFilter::setParametricEQ(v5, ((unint64_t)COERCE_UNSIGNED_INT(v7 + v7) << 32) | 0xB, (double *)0x3EBD70A400000000, 0, 1uLL);
}

void DspLib::SideChain::Algorithm::createGainTable(DspLib *a1, float a2, float a3, float a4)
{
  uint64_t v6 = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a3 <= 0.0) {
    float v7 = a3;
  }
  else {
    float v7 = 0.0;
  }
  float v8 = fmaxf(a3, 0.0);
  float v9 = (float)(1.0 / a4) + -1.0;
  if (a4 > 10.0) {
    float v9 = -0.9;
  }
  if (a4 < 0.1) {
    float v9 = 9.0;
  }
  if (a4 >= 9.9) {
    float v10 = -1.0;
  }
  else {
    float v10 = v9;
  }
  float v11 = -100.0;
  do
  {
    float v12 = (float)(v11 - a2) * v10;
    if (v8 >= v12) {
      float v13 = (float)(v11 - a2) * v10;
    }
    else {
      float v13 = v8;
    }
    if (v12 >= v7) {
      float v14 = v13;
    }
    else {
      float v14 = v7;
    }
    *(float *)&v15[v6] = DspLib::dB2Amp(a1, v14);
    float v11 = v11 + 2.3256;
    v6 += 4;
  }
  while (v6 != 176);
  DspLib::createInterpolationTable((uint64_t)v15, 44, (uint64_t)a1 + 56, 0xB0uLL);
}

void DspLib::SideChain::Algorithm::process(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  DspLib::Biquad::Filter::process((void *)(a1 + 792), a2, a3, (uint64_t)a4, a5);
  if (*(unsigned char *)(a1 + 1000))
  {
    unint64_t v8 = *(unsigned int *)(a1 + 1104);
    v28[0] = a4;
    v28[1] = a4;
    float v9 = *(float **)(a1 + 24);
    float v26 = *(float **)a1;
    float v27 = v9;
    *(void *)&long long v23 = v28;
    *((void *)&v23 + 1) = 2;
    uint64_t v10 = a5 / v8 + 1;
    vDSP_Length v24 = a5;
    __A.unint64_t realp = (float *)&v26;
    __A.imagp = (float *)2;
    unint64_t v22 = a5;
    DspLib::Biquad::Filter::process((void *)(a1 + 1000), &v23, (long long *)&__A);
    MEMORY[0x1F4188790](v11);
    v25[0] = &v20[-v12 - 1];
    v25[1] = v25[0] + 4 * v12;
    *(void *)&long long v23 = v25;
    *((void *)&v23 + 1) = 2;
    vDSP_Length v24 = v10;
    v20[0] = &v26;
    v20[1] = 2;
    vDSP_Length v20[2] = a5;
    DspLib::DownSampler::process((unsigned int *)(a1 + 1104), v20, &v23);
    vDSP_Length v13 = v24;
    float v14 = (DSPSplitComplex *)v23;
    *(void *)(a1 + 784) = v24;
    DSPSplitComplex __A = *v14;
    unint64_t v22 = v13;
    vDSP_zvabs(&__A, 1, v27, 1, v13);
    DspLib::SideChain::Algorithm::gainForLevel(a1, v27, *(void *)(a1 + 784), v26, *(void *)(a1 + 784));
    DspLib::SampleAndHoldUpSampler::process((float *)(a1 + 1112), (uint64_t)v26, *(void *)(a1 + 784), (uint64_t)a4, a5);
  }
  else
  {
    float v15 = DspLib::sumOfSquares(a4, a5);
    float v16 = sqrtf((float)(v15 / (float)a5) + (float)(v15 / (float)a5));
    if (a5)
    {
      float v17 = *(float *)(a1 + 776);
      uint64_t v18 = 772;
      if (v17 < v16) {
        uint64_t v18 = 768;
      }
      float v16 = v17
          + (float)((float)(v16 - v17)
                  * (float)(1.0
                          - expf(-1.0/ (float)((float)(*(float *)(a1 + v18) * (float)(*(float *)(a1 + 52) / (float)a5)) / 1000.0))));
      *(float *)(a1 + 776) = v16;
    }
    *(float *)(a1 + 76DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v16;
    *(float *)&long long v23 = v16;
    LODWORD(__A.realp) = 0;
    DspLib::SideChain::Algorithm::gainForLevel(a1, (const float *)&v23, 1uLL, (float *)&__A, 1uLL);
    DspLib::fill(a4, a5, *(float *)&__A.realp);
  }
  DspLib::Biquad::Filter::process((void *)(a1 + 896), (uint64_t)a4, a5, (uint64_t)a4, a5);
}

void DspLib::SideChain::Algorithm::gainForLevel(uint64_t a1, const float *a2, vDSP_Length __N, float *__D, vDSP_Length a5)
{
  DspLib::clip(a2, __N, __D, 0.00001, 1.0);
  DspLib::amp2dB(__D, a5, 1.0);
  DspLib::add(__D, a5, 100.0);
  DspLib::multiply(__D, a5, 0.43);

  DspLib::elementAtIndexWithInterpolation(a1 + 56, 176, __D, a5, (uint64_t)__D, a5);
}

float DspLib::SideChain::Algorithm::gainForLevel(DspLib::SideChain::Algorithm *this, float a2)
{
  float v4 = a2;
  float __D = 0.0;
  DspLib::SideChain::Algorithm::gainForLevel((uint64_t)this, &v4, 1uLL, &__D, 1uLL);
  return __D;
}

double DspLib::SideChain::Algorithm::sideChainLevelLinear(DspLib::SideChain::Algorithm *this)
{
  if (*((unsigned char *)this + 1000))
  {
    vDSP_Length v1 = *((void *)this + 98);
    if (v1) {
      *(float *)&double result = DspLib::mean(*((const float **)this + 3), v1);
    }
    else {
      return 0.0;
    }
  }
  else
  {
    LODWORD(result) = *((_DWORD *)this + 190);
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV1::PilotTone::initialize(DspLib::LoudspeakerSystemIDV1::PilotTone *this, double a2)
{
  *((double *)this + 1) = a2;
  *(unsigned char *)this = 1;
  *((_DWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_WORD *)this + 42) = 257;
  *((_DWORD *)this + 22) = 0;
  float result = *((float *)this + 10);
  *((float *)this + 8) = result;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::PilotTone::reset(DspLib::LoudspeakerSystemIDV1::PilotTone *this)
{
  *((_DWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_WORD *)this + 42) = 257;
  *((_DWORD *)this + 22) = 0;
  float result = *((float *)this + 10);
  *((float *)this + 8) = result;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::PilotTone::setParameters(DspLib::LoudspeakerSystemIDV1::PilotTone *this, const DspLib::AlgorithmParametersInstance *a2)
{
  if (*(unsigned char *)this)
  {
    double v3 = *((double *)this + 2);
    float v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 5u);
    float v5 = DspLib::dB2Amp((DspLib *)v4, v4[1]);
    float v6 = *v4;
    float v7 = *((double *)this + 1);
    float v8 = (float)(v7 / fmaxf(roundf(v7 / 2000.0), 1.0)) * 0.00097656;
    float v9 = *v4 / v8;
    unsigned int v10 = vcvtas_u32_f32(v9);
    *((_DWORD *)this + 6) = v10;
    float v11 = v8 * (float)roundf(v9);
    double v12 = v11;
    *((double *)this + 2) = v11;
    if (fmodf(v7, v11) > 0.5)
    {
      if (v10 - 513 >= 0xFFFFFE02)
      {
        unsigned int v17 = v10;
        do
        {
          float v15 = v8 * (float)v17;
          float v18 = v7 - (float)(v15 * floorf(v7 / v15));
          BOOL v16 = v18 >= 0.5;
          unsigned int v19 = v17 - 2;
          ++v17;
        }
        while (v19 <= 0x1FD && v18 >= 0.5);
        unsigned int v14 = v17 - 1;
      }
      else
      {
        unsigned int v14 = v10 - 1;
        float v15 = 0.0;
        BOOL v16 = 1;
      }
      do
      {
        if (v10 - 511 < 0xFFFFFE02) {
          goto LABEL_12;
        }
        float v20 = v8 * (float)v10--;
      }
      while ((float)(v7 - (float)(v20 * floorf(v7 / v20))) >= 0.5);
      if (v16)
      {
LABEL_12:
        double v12 = (float)(v7 / floorf(v7 / v6));
        *((double *)this + 2) = v12;
        goto LABEL_18;
      }
      double v21 = v15;
      if (vabdd_f64(v12, v15) >= vabdd_f64(v12, v20)) {
        float v15 = v20;
      }
      double v12 = v15;
      *((double *)this + 2) = v15;
      if (vabdd_f64(v15, v21) >= vabdd_f64(v15, v20)) {
        unsigned int v14 = v10 + 1;
      }
      *((_DWORD *)this + 6) = v14;
    }
LABEL_18:
    if (v12 == 0.0) {
      unint64_t v22 = 0;
    }
    else {
      unint64_t v22 = (v7 / v12);
    }
    BOOL isEqual = DspLib::isEqual(v13, v5, *((float *)this + 7), 1.0e-20);
    if (!isEqual || (float v24 = v3, !(v25 = DspLib::isEqual((DspLib *)isEqual, v24, *((double *)this + 2), 1.0e-20))))
    {
      *((float *)this + 7) = v5;
      *((float *)this + 23) = 1.0 - v5;
      std::vector<float>::resize((uint64_t)this + 56, v22);
      *((_DWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      uint64_t v26 = *((void *)this + 7);
      uint64_t v27 = *((void *)this + 8) - v26;
      if (v27)
      {
        uint64_t v28 = 0;
        unint64_t v29 = v27 >> 2;
        float v30 = (float)(unint64_t)(v27 >> 2);
        do
        {
          float v31 = (float)((float)v28 / v30) * 6.28318531;
          *(float *)(v26 + 4 * v28++) = sinf(v31) * *((float *)this + 7);
        }
        while (v29 > v28);
      }
    }
    *((float *)this + 9) = DspLib::dB2Power((DspLib *)v25, v4[3]);
    *((float *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Power(v32, v4[4]);
    float v33 = *((double *)this + 1);
    *((float *)this + 12) = expf(-1.0 / (float)((float)((float)(v4[2] * 1000.0) * v33) / 1000.0));
    *((float *)this + 11) = expf(-1.0 / (float)((float)((float)((float)(v4[2] + v4[2]) * 1000.0) * v33) / 1000.0));
    *((unsigned char *)this + 1) = 1;
  }
  else
  {
    float v34 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v34, 41);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV1::PilotTone::process(uint64_t a1, float *a2, vDSP_Length a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1)
  {
    unsigned int v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    int v11 = 71;
LABEL_7:
    printf("DSP Sound assertion in %s at line %d\n", v10, v11);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!*(unsigned char *)(a1 + 1))
  {
    unsigned int v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    int v11 = 72;
    goto LABEL_7;
  }
  MEMORY[0x1F4188790](a1);
  float v7 = (const float *)((char *)v12 - v6);
  DspLib::LoudspeakerSystemIDV1::PilotTone::updatePilotToneVectorFromLookUpTable((void *)a1, (float *)((char *)v12 - v6), v8);
  double v9 = DspLib::meanSquare(a2, a3);
  *(unsigned char *)(a1 + 85) = *(float *)&v9 < *(float *)(a1 + 32);
  DspLib::multiply(a2, a3, *(float *)(a1 + 92));
  DspLib::add(a2, a3, v7);
}

void *DspLib::LoudspeakerSystemIDV1::PilotTone::updatePilotToneVectorFromLookUpTable(void *this, float *__dst, unsigned int a3)
{
  float v4 = __dst;
  uint64_t v5 = (uint64_t)this;
  uint64_t v6 = a3;
  uint64_t v7 = this[7];
  uint64_t v8 = this[8] - v7;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 >= (unint64_t)a3)
  {
    uint64_t v21 = *((unsigned int *)this + 20);
    if (v9 - v21 >= (unint64_t)a3)
    {
      if (a3)
      {
        this = DspLib::copy((void *)(v7 + 4 * v21), a3, __dst);
        LODWORD(v21) = *(_DWORD *)(v5 + 80);
      }
      LODWORD(v25) = v21 + a3;
    }
    else
    {
      unint64_t v22 = (unint64_t)v8 >> 2;
      long long v23 = __dst;
      int v24 = v22 - v21;
      if (v22 != v21)
      {
        this = DspLib::copy((void *)(v7 + 4 * v21), (v22 - v21), __dst);
        long long v23 = &v4[v24];
      }
      uint64_t v25 = a3 - v24;
      if (v25) {
        this = DspLib::copy(*(void **)(v5 + 56), v25, v23);
      }
    }
    *(_DWORD *)(v5 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v25;
  }
  else
  {
    unsigned int v10 = vcvtps_u32_f32((float)a3 / (float)(unint64_t)v9);
    if (v10)
    {
      unsigned int v11 = 0;
      unsigned int v12 = *((_DWORD *)this + 20);
      vDSP_Length v13 = __dst;
      uint64_t v14 = a3;
      do
      {
        uint64_t v15 = *(void *)(v5 + 56);
        unint64_t v16 = (unint64_t)(*(void *)(v5 + 64) - v15) >> 2;
        unsigned int v17 = v16 - v12;
        unsigned int v18 = a3 - v11;
        if (v16 - v12 <= a3 - v11)
        {
          if (v16 != v12)
          {
            this = DspLib::copy((void *)(v15 + 4 * v12), v16 - v12, v13);
            float v20 = &v13[v14];
            v14 -= v17;
            vDSP_Length v13 = &v20[-v14];
          }
          unsigned int v18 = 0;
          v11 += v17;
        }
        else
        {
          if (v18)
          {
            this = DspLib::copy((void *)(v15 + 4 * v12), a3 - v11, v13);
            unsigned int v19 = &v13[v14];
            v14 -= v18;
            vDSP_Length v13 = &v19[-v14];
          }
          unsigned int v11 = a3;
        }
        *(_DWORD *)(v5 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v18;
        unsigned int v12 = v18;
        --v10;
      }
      while (v10);
    }
  }
  if (!*(unsigned char *)(v5 + 84))
  {
    if (!*(unsigned char *)(v5 + 85)) {
      return this;
    }
    goto LABEL_26;
  }
  if (*(unsigned char *)(v5 + 85))
  {
LABEL_26:
    uint64_t v28 = (_DWORD *)(v5 + 36);
    float v26 = *(float *)(v5 + 48);
    float v27 = 0.0;
    goto LABEL_27;
  }
  float v26 = *(float *)(v5 + 44);
  float v27 = 1.0 - v26;
  uint64_t v28 = (_DWORD *)(v5 + 40);
LABEL_27:
  *(_DWORD *)(v5 + 32) = *v28;
  float v29 = *(float *)(v5 + 88);
  if (a3)
  {
    do
    {
      *float v4 = v29 * *v4;
      ++v4;
      float v29 = v27 + (float)(*(float *)(v5 + 88) * v26);
      *(float *)(v5 + 88) = v29;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)(v5 + 84) = v29 < v26;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::PilotTone::status(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)result)
  {
    float v2 = *(double *)(result + 16);
    *(float *)(a2 + 44) = v2;
    *(float *)(a2 + 136) = (float)*(unsigned int *)(result + 24);
  }
  else
  {
    double v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    float result = printf("DSP Sound assertion in %s at line %d\n", v3, 82);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerHealth::initialize(DspLib::LoudspeakerHealth *this, double a2, unsigned int a3)
{
  *(double *)this = a2;
  *((_DWORD *)this + 3) = a3;
  *((void *)this + 26) = vcvtad_u64_f64(a2 * 0.300000012);
  std::vector<DspLib::AverageRms>::resize((uint64_t)this + 16, a3);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  if (v4 != v5)
  {
    do
    {
      DspLib::AverageRms::initialize(v4, *(double *)this);
      v4 += 56;
    }
    while (v4 != v5);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 3);
    while (v6 != v7)
    {
      DspLib::AverageRms::configure(v6, 1, 1.0, 1.0);
      v6 += 56;
    }
  }
  std::vector<float>::resize((uint64_t)this + 40, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 5), (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  std::vector<float>::resize((uint64_t)this + 64, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 8), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2);
  std::vector<float>::resize((uint64_t)this + 88, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 11), (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 2);
  std::vector<float>::resize((uint64_t)this + 112, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 14), (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 2);
  std::vector<float>::resize((uint64_t)this + 136, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 17), (uint64_t)(*((void *)this + 18) - *((void *)this + 17)) >> 2);
  std::vector<float>::resize((uint64_t)this + 160, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 20), (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 2);
  std::vector<unsigned long>::resize((uint64_t)this + 184, *((unsigned int *)this + 3));
  uint64_t v8 = (void *)*((void *)this + 23);
  uint64_t v9 = *((void *)this + 24) - (void)v8;
  if (v9 >= 1) {
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
  }
  *((unsigned char *)this + 8) = 1;

  DspLib::LoudspeakerHealth::reset(this);
}

void std::vector<DspLib::AverageRms>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::AverageRms>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 56 * a2;
  }
}

void DspLib::LoudspeakerHealth::reset(DspLib::LoudspeakerHealth *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  while (v2 != v3)
  {
    DspLib::AverageRms::reset(v2);
    v2 += 56;
  }
  unint64_t v4 = (unsigned char *)*((void *)this + 11);
  uint64_t v5 = (unsigned char *)*((void *)this + 12);
  if (v4 != v5) {
    memset_pattern16(v4, &unk_1BB875EE0, ((v5 - v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 14);
  uint64_t v7 = (unsigned char *)*((void *)this + 15);
  if (v6 != v7) {
    memset_pattern16(v6, &unk_1BB875EE0, ((v7 - v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  uint64_t v8 = (void *)*((void *)this + 23);
  uint64_t v9 = *((void *)this + 24) - (void)v8;
  if (v9 >= 1)
  {
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
  }
}

uint64_t DspLib::LoudspeakerHealth::uninitialize(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  uint64_t v2 = *(void *)(this + 24);
  if (v1 != v2)
  {
    uint64_t v3 = *(void *)(this + 16);
    do
    {
      *(unsigned char *)(v3 + 8) = 0;
      v3 += 56;
    }
    while (v3 != v2);
  }
  *(void *)(this + 24) = v1;
  *(void *)(this + 48) = *(void *)(this + 40);
  *(void *)(this + 72) = *(void *)(this + 64);
  *(void *)(this + 96) = *(void *)(this + 88);
  *(void *)(this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(this + 112);
  *(void *)(this + 144) = *(void *)(this + 136);
  *(void *)(this + 168) = *(void *)(this + 160);
  *(void *)(this + 192) = *(void *)(this + 184);
  *(unsigned char *)(this + 8) = 0;
  return this;
}

float DspLib::LoudspeakerHealth::setAmplifierVoltsPerFullScale(DspLib::LoudspeakerHealth *this, unsigned int a2, float a3)
{
  *(float *)(*((void *)this + 17) + 4 * a2) = DspLib::amp2dB(this, a3) + -50.0;
  DspLib::AverageRms::configure(*((void *)this + 2) + 56 * a2, 1, 1.0, a3);
  float result = *(float *)(*((void *)this + 17) + 4 * a2) + -3.0;
  *(float *)(*((void *)this + 5) + 4 * a2) = result;
  return result;
}

void DspLib::LoudspeakerHealth::process(uint64_t a1, uint64_t a2, vDSP_Length a3, uint64_t a4, unsigned int a5)
{
  int v5 = *(unsigned __int8 *)(a4 + 196);
  *(unsigned char *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  if (a3 && v5)
  {
    uint64_t v10 = a5;
    uint64_t v11 = 56 * a5;
    DspLib::AverageRms::process(*(void *)(a1 + 16) + v11, a2, a3);
    *(_DWORD *)(*(void *)(a1 + 88) + 4 * a5) = *(_DWORD *)(a4 + 184);
    *(_DWORD *)(*(void *)(a1 + 112) + 4 * a5) = *(_DWORD *)(a4 + 188);
    uint64_t v13 = *(void *)(a1 + 136);
    uint64_t v14 = *(void *)(a1 + 184);
    if (*(float *)(*(void *)(a1 + 16) + v11 + 32) <= *(float *)(v13 + 4 * a5)) {
      vDSP_Length v15 = 0;
    }
    else {
      vDSP_Length v15 = *(void *)(v14 + 8 * v10) + a3;
    }
    *(void *)(v14 + 8 * v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    float v16 = *(float *)(a4 + 192);
    uint64_t v17 = *(void *)(a1 + 160);
    if (v16 != *(float *)(v17 + 4 * v10))
    {
      *(float *)(v17 + 4 * v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v16;
      float v18 = *(float *)(v13 + 4 * v10);
      *(float *)(*(void *)(a1 + 64) + 4 * v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(v18 - DspLib::amp2dB(v12, v16)) + -3.0;
    }
  }
}

uint64_t DspLib::LoudspeakerHealth::status(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = DspLib::LoudspeakerHealth::updateSpeakerHealthStatus(a1);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if (v7)
  {
    uint64_t v8 = *(int **)(a1 + 136);
    uint64_t v9 = *(int **)(a1 + 88);
    uint64_t v10 = *(int **)(a1 + 112);
    uint64_t v11 = *(int **)(a1 + 40);
    unsigned int v12 = *(int **)(a1 + 64);
    uint64_t v13 = (int *)(*(void *)(a1 + 16) + 32);
    uint64_t v14 = (_DWORD *)(a2 + 12);
    do
    {
      int v15 = *v13;
      v13 += 14;
      *(v14 - 3) = v15;
      int v16 = *v8++;
      *(v14 - 2) = v16;
      int v17 = *v9++;
      *(v14 - 1) = v17;
      int v18 = *v10++;
      *uint64_t v14 = v18;
      int v19 = *v11++;
      v14[1] = v19;
      int v20 = *v12++;
      _OWORD v14[2] = v20;
      v14 += 6;
      --v7;
    }
    while (v7);
  }
  uint64_t v21 = a2 + 4 * a3;
  float v22 = 0.0;
  if (*(unsigned char *)(a1 + 220)) {
    float v22 = 1.0;
  }
  *(float *)(v21 - 8) = (float)*(unsigned int *)(a1 + 216);
  *(float *)(v21 - 4) = v22;
  return result;
}

uint64_t DspLib::LoudspeakerHealth::updateSpeakerHealthStatus(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 12);
  if (v1)
  {
    char v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      if (*(void *)(*(void *)(this + 184) + 8 * v3) <= *(void *)(this + 208))
      {
        int v7 = *(_DWORD *)(this + 216) & (3 << v2);
      }
      else
      {
        float v5 = *(float *)(*(void *)(this + 88) + 4 * v3);
        float v6 = *(float *)(*(void *)(this + 40) + 4 * v3);
        if (v5 >= v6 || *(float *)(*(void *)(this + 112) + 4 * v3) >= *(float *)(*(void *)(this + 64) + 4 * v3))
        {
          if ((v5 <= v6 || *(float *)(*(void *)(this + 112) + 4 * v3) >= *(float *)(*(void *)(this + 64) + 4 * v3))
            && (v5 >= v6 || *(float *)(*(void *)(this + 112) + 4 * v3) <= *(float *)(*(void *)(this + 64) + 4 * v3)))
          {
            int v7 = 1 << v2;
          }
          else
          {
            int v7 = 2 << v2;
          }
        }
        else
        {
          int v7 = 3 << v2;
        }
      }
      v4 |= v7;
      ++v3;
      v2 += 2;
    }
    while (v1 != v3);
  }
  else
  {
    int v4 = 0;
  }
  *(_DWORD *)(this + 216) = v4;
  return this;
}

uint64_t DspLib::LoudspeakerHealth::speakerHealthStatus(DspLib::LoudspeakerHealth *this)
{
  return *((unsigned int *)this + 54);
}

void std::vector<DspLib::AverageRms>::__append(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  int v7 = *(_OWORD **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (_OWORD *)((char *)v7 + 56 * a2);
      do
      {
        *int v7 = 0uLL;
        v7[1] = 0uLL;
        *((void *)v7 + 6) = 0;
        v7[2] = 0uLL;
        *((_DWORD *)v7 + 3) = 1065353216;
        *((void *)v7 + 2) = 0x4024000000000000;
        int v7 = (_OWORD *)((char *)v7 + 56);
      }
      while (v7 != v13);
      int v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unsigned int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v4, v11);
    }
    else {
      unsigned int v12 = 0;
    }
    uint64_t v14 = &v12[56 * v8];
    int v15 = &v14[56 * a2];
    int v16 = v14;
    do
    {
      *(_OWORD *)int v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((void *)v16 + 6) = 0;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_DWORD *)v16 + 3) = 1065353216;
      *((void *)v16 + 2) = 0x4024000000000000;
      v16 += 56;
    }
    while (v16 != v15);
    int v17 = &v12[56 * v11];
    int v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 56);
        long long v21 = *(_OWORD *)(v18 - 40);
        long long v22 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 56;
        v18 -= 56;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t DspLib::BuzzKill::Algorithm::initialize(DspLib::BuzzKill::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    unint64_t v5 = (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 216))(this);
    DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 264), v5);
    unsigned int v6 = (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 27, v6);
    uint64_t v7 = *((void *)this + 27);
    uint64_t v8 = *((void *)this + 28);
    while (v7 != v8)
    {
      unint64_t v9 = (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v7, v9);
      v7 += 24;
    }
    unsigned int v10 = (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 30, v10);
    uint64_t v11 = *((void *)this + 30);
    uint64_t v12 = *((void *)this + 31);
    while (v11 != v12)
    {
      unint64_t v13 = (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v11, v13);
      v11 += 24;
    }
    double v14 = (*(double (**)(DspLib::BuzzKill::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352), 1uLL, v14, 1uLL);
    operator new();
  }
  return v4;
}

void DspLib::BuzzKill::Algorithm::uninitialize(DspLib::BuzzKill::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 264), 0);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 27);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 30);
  std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  uint64_t v2 = *((void *)this + 148);
  *((void *)this + 148) = 0;
  if (v2) {
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100]((uint64_t)this + 1184, v2);
  }
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352));
  uint64_t v3 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  DspLib::FFT::Filterbank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
  DspLib::FFT::Filterbank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 1280), 0);
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 1360), 0);
  *((void *)this + 151) = *((void *)this + 150);
  *((void *)this + 157) = *((void *)this + 156);
  *((void *)this + 154) = *((void *)this + 153);
  *((_DWORD *)this + 298) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 310, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 297, 0);
  *((void *)this + 181) = *((void *)this + 180);
  *((void *)this + 184) = *((void *)this + 183);
  DspLib::BuzzKill::MitigationFilterBank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 1504));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 287);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 2520));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 329);
  *((_DWORD *)this + 628) = 0;
  *((_DWORD *)this + 58DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 584) = *((void *)this + 583);
}

uint64_t *std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v2 + 392));
    DspLib::FFT::Filterbank::~Filterbank((DspLib::FFT::Filterbank *)(v2 + 24));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void DspLib::BuzzKill::Algorithm::reset(DspLib::BuzzKill::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = (DspLib::BuzzKill::FFTForDisplay *)*((void *)this + 43);
    if (v2) {
      DspLib::BuzzKill::FFTForDisplay::reset(v2);
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 400));
    uint64_t v3 = *((void *)this + 57);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
    DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
    uint64_t v4 = (DspLib::FFT::Filterbank *)*((void *)this + 148);
    if (v4) {
      DspLib::FFT::Filterbank::reset(v4);
    }
    DspLib::fill(*((float **)this + 156), (uint64_t)(*((void *)this + 157) - *((void *)this + 156)) >> 2, 1.0);
    DspLib::clear(*((float **)this + 183), (uint64_t)(*((void *)this + 184) - *((void *)this + 183)) >> 2);
    DspLib::clear(*((float **)this + 180), (uint64_t)(*((void *)this + 181) - *((void *)this + 180)) >> 2);
    DspLib::BuzzKill::MitigationFilterBank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 1504));
    unint64_t v5 = (DspLib::CircularDelay *)*((void *)this + 287);
    unsigned int v6 = (DspLib::CircularDelay *)*((void *)this + 288);
    while (v5 != v6)
    {
      DspLib::CircularDelay::reset(v5);
      unint64_t v5 = (DspLib::CircularDelay *)((char *)v5 + 32);
    }
    uint64_t v7 = *((void *)this + 297);
    uint64_t v8 = *((void *)this + 298);
    while (v7 != v8)
    {
      uint64_t v9 = *(void *)(v7 + 8);
      if (*(void *)v7 != v9) {
        bzero(*(void **)v7, (v9 - *(void *)v7) & 0xFFFFFFFFFFFFFFFCLL);
      }
      v7 += 24;
    }
    *((_DWORD *)this + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    DspLib::FIRDecimator::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 2432));
    DspLib::Biquad::SetupWrapper::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 2568));
    *((_DWORD *)this + 657) = 0;
    unsigned int v10 = (DspLib::CircularDelay *)*((void *)this + 329);
    uint64_t v11 = (DspLib::CircularDelay *)*((void *)this + 330);
    while (v10 != v11)
    {
      DspLib::CircularDelay::reset(v10);
      unsigned int v10 = (DspLib::CircularDelay *)((char *)v10 + 32);
    }
    *((unsigned char *)this + 2656) = 1;
  }
  else
  {
    uint64_t v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v12, 143);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::BuzzKill::Algorithm::setMeteringIsEnabled(DspLib::BuzzKill::Algorithm *this, char a2)
{
  *((unsigned char *)this + 24) = a2;
  return (*(uint64_t (**)(void))(*(void *)this + 128))();
}

void DspLib::BuzzKill::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  v83[4] = *MEMORY[0x1E4F143B8];
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (!*(unsigned char *)(a1 + 8)) {
    return;
  }
  DspLib::BuzzKill::Algorithm::setAlgorithmVersion((DspLib::BuzzKill::Algorithm *)a1, vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 68)));
  unsigned int v5 = vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 64)) - 1;
  switch(v5)
  {
    case 0u:
      int v6 = 1161527296;
      goto LABEL_5;
    case 1u:
      *(_DWORD *)(a1 + 4688) = 1165623296;
      float v7 = 14700.0;
      break;
    case 2u:
      *(_DWORD *)(a1 + 4688) = 1169915904;
      float v7 = 22050.0;
      break;
    case 3u:
      *(_DWORD *)(a1 + 4688) = 1184645120;
      float v7 = 44100.0;
      break;
    default:
      int v6 = 1159479296;
LABEL_5:
      *(_DWORD *)(a1 + 4688) = v6;
      float v7 = 11025.0;
      break;
  }
  double v8 = *(double *)(a1 + 16);
  float v9 = v8;
  unsigned int v10 = (float)(v9 / v7);
  if (v10 >= 0x3E8) {
    unsigned int v11 = 1000;
  }
  else {
    unsigned int v11 = (float)(v9 / v7);
  }
  if (v10) {
    int v12 = v11;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(a1 + 2512) = v12;
  if (v12)
  {
    *(_DWORD *)(a1 + 2624) = v12;
    *(_DWORD *)(a1 + 2628) = 0;
  }
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 2520), 1uLL, v8, 1uLL);
  if (v5 > 3) {
    unint64_t v13 = 0x451C400000000008;
  }
  else {
    unint64_t v13 = *(void *)&asc_1BB876078[8 * v5];
  }
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 2520, v13, (double *)0x3F33333300000000, 0, 0x41uLL);
  double v14 = *(double *)(a1 + 16);
  unsigned int v15 = *(_DWORD *)(a1 + 2512);
  BOOL isEqual = DspLib::isEqual(v16, *(float *)(*(void *)(a1 + 32) + 64), 0.0, 1.0e-20);
  if (isEqual)
  {
    int v18 = &DspLib::BuzzKill::kPolynomial2k5kHz;
  }
  else
  {
    float v19 = v14 / (double)v15;
    double v20 = v19;
    BOOL v21 = DspLib::isEqual((DspLib *)isEqual, v19, 11025.0, 4.0);
    if (v21)
    {
      int v18 = &DspLib::BuzzKill::kPolynomial3kHz1;
    }
    else
    {
      BOOL v22 = DspLib::isEqual((DspLib *)v21, v20, 12000.0, 4.0);
      if (v22)
      {
        int v18 = &DspLib::BuzzKill::kPolynomial3kHz2;
      }
      else
      {
        BOOL v23 = DspLib::isEqual((DspLib *)v22, v20, 14700.0, 4.0);
        if (v23)
        {
          int v18 = &DspLib::BuzzKill::kPolynomial4kHz1;
        }
        else
        {
          BOOL v24 = DspLib::isEqual((DspLib *)v23, v20, 16000.0, 4.0);
          if (v24)
          {
            int v18 = &DspLib::BuzzKill::kPolynomial4kHz2;
          }
          else
          {
            BOOL v25 = DspLib::isEqual((DspLib *)v24, v20, 22050.0, 4.0);
            if (v25)
            {
              int v18 = &DspLib::BuzzKill::kPolynomial6kHz1;
            }
            else
            {
              BOOL v26 = DspLib::isEqual((DspLib *)v25, v20, 24000.0, 4.0);
              if (!v26)
              {
                BOOL v80 = DspLib::isEqual((DspLib *)v26, v20, 44100.0, 4.0);
                if (v80)
                {
                  int v18 = &DspLib::BuzzKill::kPolynomial20kHz1;
                  unint64_t v27 = 10;
                }
                else
                {
                  BOOL v81 = DspLib::isEqual((DspLib *)v80, v20, 48000.0, 4.0);
                  if (v81) {
                    unint64_t v27 = 10;
                  }
                  else {
                    unint64_t v27 = 1;
                  }
                  if (v81) {
                    int v18 = &DspLib::BuzzKill::kPolynomial20kHz2;
                  }
                  else {
                    int v18 = &DspLib::BuzzKill::kPolynomialBypass;
                  }
                }
                goto LABEL_35;
              }
              int v18 = &DspLib::BuzzKill::kPolynomial6kHz2;
            }
          }
        }
      }
    }
  }
  unint64_t v27 = 5;
LABEL_35:
  std::vector<float>::resize(a1 + 4664, v27);
  DspLib::copy(v18, v27, *(void **)(a1 + 4664));
  uint64_t v28 = (DspLib::BuzzKill::FFTForDisplay **)(a1 + 344);
  if (*(unsigned char *)(a1 + 24))
  {
    float v29 = *v28;
    if (!*v28) {
      operator new();
    }
    double v30 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    unsigned int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    DspLib::BuzzKill::FFTForDisplay::initialize(v29, v30, v31);
    DspLib::BuzzKill::FFTForDisplay::setParameters(*(void *)(a1 + 344), *(void *)(a1 + 32), 10, *(float *)(*(void *)(a1 + 32) + 104));
  }
  else
  {
    std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)(a1 + 344), 0);
  }
  float v33 = (void *)(*(void *)(a1 + 32) + 120);
  DspLib::FFT::Filterbank::setParameters(a1 + 464, v33, 10, v32);
  DspLib::FFT::Filterbank::setParameters(a1 + 824, v33, 10, v34);
  unsigned int v35 = 1 << *(float *)(*(void *)(a1 + 32) + 120);
  float v36 = *(double *)(a1 + 16);
  float v37 = fmaxf((float)(v36 / (float)*(unsigned int *)(a1 + 2512)) / (float)v35, 0.001);
  unsigned int v38 = vcvtas_u32_f32(*(float *)(a1 + 4688) / v37);
  *(_DWORD *)(a1 + 1196) = v35;
  unsigned int v39 = v35 >> 1;
  if (v39 >= v38) {
    unsigned int v39 = v38;
  }
  if (*(_DWORD *)(a1 + 1192) != v39)
  {
    *(_DWORD *)(a1 + 1192) = v39;
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1280), v39 + 1);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1360), (*(_DWORD *)(a1 + 1192) + 1));
    std::vector<float>::resize(a1 + 1200, (*(_DWORD *)(a1 + 1192) + 1));
    std::vector<float>::resize(a1 + 1248, *(unsigned int *)(a1 + 1192));
    DspLib::fill(*(float **)(a1 + 1248), (uint64_t)(*(void *)(a1 + 1256) - *(void *)(a1 + 1248)) >> 2, 1.0);
    std::vector<void const*>::resize(a1 + 1224, *(unsigned int *)(a1 + 1192));
    unsigned int v39 = *(_DWORD *)(a1 + 1192);
  }
  BOOL v40 = __CFADD__(v39, 1);
  LODWORD(v41) = v39 + 1;
  if (!v40)
  {
    unint64_t v42 = 0;
    uint64_t v43 = *(void *)(a1 + 1200);
    unsigned int v44 = vcvtas_u32_f32(v37 / 2.15);
    float v45 = v37 * 0.5;
    do
    {
      float v46 = v37 * (float)v42;
      if (v41 >= v44) {
        LODWORD(v41) = v44;
      }
      if (v41 <= 2) {
        vDSP_Length v47 = 2;
      }
      else {
        vDSP_Length v47 = v41;
      }
      float v48 = v46 - v45;
      if ((float)(v46 - v45) < 0.0) {
        float v48 = 0.0;
      }
      DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, *(float **)(a1 + 1368), v47, v48, v45 + v46, 0);
      *(float *)(v43 + 4 * v42++) = DspLib::minv(*(const float **)(a1 + 1368), v47);
      unint64_t v41 = (*(_DWORD *)(a1 + 1192) + 1);
    }
    while (v42 < v41);
  }
  int v49 = *(float **)(a1 + 32);
  BOOL v50 = *(_DWORD *)(a1 + 2228) == vcvtas_u32_f32(v49[23]);
  DspLib::BuzzKill::MitigationFilterBank::setParameters(a1 + 1504, v49, (float)*(unsigned int *)(a1 + 2512));
  if (!v50)
  {
    std::vector<float>::resize(a1 + 1464, *(unsigned int *)(a1 + 2228));
    std::vector<float>::resize(a1 + 1440, *(unsigned int *)(a1 + 2228));
  }
  MEMORY[0x1F4188790](v51);
  int v53 = (float *)((char *)&v83[-1] - v52);
  unsigned int v54 = *(_DWORD *)(a1 + 2512);
  vDSP_Length v56 = v55 | (24 * v54);
  v83[0] = &unk_1F14A6C50;
  v83[1] = DspLib::makeChebychevWindow;
  v83[3] = v83;
  DspLib::makeSincWindow((float *)((char *)&v83[-1] - v52), v56, v54, 0x18u, (uint64_t)v83, 0.75);
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v83);
  unsigned int v57 = *(_DWORD *)(a1 + 2512);
  if (v57 != *(_DWORD *)(a1 + 2320))
  {
    *(_DWORD *)(a1 + 232DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v57;
    DspLib::multiply(v53, v56, sqrtf((float)v57));
    unint64_t v58 = *(unsigned int *)(a1 + 2320);
    unint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(a1 + 2432), v58, v59);
    DspLib::FIRDecimator::setCoefficients(a1 + 2432, v53, v56);
    LODWORD(v58) = *(_DWORD *)(a1 + 2320);
    unint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 2328), v58, v60 / *(unsigned int *)(a1 + 2320) + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 2328), (uint64_t)v53, v56);
  }
  long long v61 = *(DspLib::CircularDelay **)(a1 + 2632);
  for (i = *(DspLib::CircularDelay **)(a1 + 2640); v61 != i; long long v61 = (DspLib::CircularDelay *)((char *)v61 + 32))
    DspLib::CircularDelay::setLength(v61, v56 - 1);
  float32x4_t v63 = *(float **)(a1 + 32);
  float v64 = exp2f(v63[20]) + -1.0;
  *(float *)(a1 + 1496) = v64;
  float v65 = v64 + 1.0;
  *(float *)(a1 + 1488) = v65;
  *(float *)(a1 + 1492) = 1.0 / v65;
  unsigned int v66 = vcvtas_u32_f32((float)(v63[25] / v37) * 0.5);
  *(_DWORD *)(a1 + 1272) = v66;
  unsigned int v67 = 3 * v66;
  unsigned int v68 = *(_DWORD *)(a1 + 1192);
  if (v67 > v68) {
    *(_DWORD *)(a1 + 1272) = v68 / 3;
  }
  float v69 = *(double *)(a1 + 16);
  unsigned int v70 = vcvtas_u32_f32((float)(v63[19] / 1000.0) * v69);
  *(_DWORD *)(a1 + 2288) = v70;
  int v71 = *(DspLib::CircularDelay **)(a1 + 2296);
  vDSP_Length v72 = *(DspLib::CircularDelay **)(a1 + 2304);
  if (v71 != v72)
  {
    unint64_t v73 = (v70 - v56) & ~((int)(v70 - v56) >> 31);
    do
    {
      DspLib::CircularDelay::setLength(v71, v73);
      int v71 = (DspLib::CircularDelay *)((char *)v71 + 32);
    }
    while (v71 != v72);
    float32x4_t v63 = *(float **)(a1 + 32);
  }
  float v74 = v63[28];
  uint64_t v75 = (uint64_t *)(a1 + 1184);
  uint64_t v76 = *(void *)(a1 + 1184);
  if (v76) {
    BOOL v77 = v74 <= 0.5;
  }
  else {
    BOOL v77 = 0;
  }
  if (v77)
  {
    *uint64_t v75 = 0;
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100](a1 + 1184, v76);
    uint64_t v76 = *v75;
  }
  else if (!v76 && v74 > 0.5)
  {
    operator new();
  }
  if (v76)
  {
    double v78 = (float *)DspLibBuffer::channel((DspLibBuffer *)(v76 + 448), 0);
    float v79 = *(double *)(a1 + 16) * 0.5;
    DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, v78, 0x21uLL, 0.0, v79, 0);
    DspLib::multiply(v78, 0x21uLL, 0.5);
    memset_pattern16(v78, &unk_1BB873A60, 0x18uLL);
  }
}

void sub_1BB2F6F8C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E0C40DBB5BFDCLL);
  _Unwind_Resume(a1);
}

uint64_t DspLib::BuzzKill::Algorithm::setAlgorithmVersion(DspLib::BuzzKill::Algorithm *this, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 57) + 16))(*((void *)this + 57));
  if (a2)
  {
    if (result != 2) {
      operator new();
    }
  }
  else if (result)
  {
    operator new();
  }
  *((unsigned char *)this + 1504) = a2 > 1;
  *((unsigned char *)this + 2658) = a2 > 2;
  return result;
}

void DspLib::BuzzKill::Algorithm::getThresholdSpectrum(DspLib::BuzzKill::Algorithm *this, float *a2, vDSP_Length a3, float a4, float a5, int a6)
{
  v28[1] = *(float **)MEMORY[0x1E4F143B8];
  v28[0] = a2;
  if (!a2)
  {
    int v26 = 701;
LABEL_37:
    unint64_t v27 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v27, v26);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (a3 > 0xF4240)
  {
    int v26 = 702;
    goto LABEL_37;
  }
  if (a4 < 0.0)
  {
    int v26 = 703;
    goto LABEL_37;
  }
  if (a4 < 1.0 && (a6 & 1) != 0)
  {
    int v26 = 704;
    goto LABEL_37;
  }
  if (a3 < 2)
  {
    int v26 = 705;
    goto LABEL_37;
  }
  if (a5 < 1.0)
  {
    int v26 = 706;
    goto LABEL_37;
  }
  if (a5 < a4)
  {
    int v26 = 707;
    goto LABEL_37;
  }
  if (!*((unsigned char *)this + 8))
  {
    int v26 = 708;
    goto LABEL_37;
  }
  double v8 = *((double *)this + 2) * 0.5;
  if (v8 >= a4) {
    float v9 = a4;
  }
  else {
    float v9 = v8;
  }
  if (v8 >= a5) {
    float v10 = a5;
  }
  else {
    float v10 = v8;
  }
  if (a6)
  {
    float v11 = powf(v10 / v9, 1.0 / (float)((float)a3 + -1.0));
    float v12 = 0.0;
  }
  else
  {
    float v12 = (float)(v10 - v9) / (float)(a3 - 1);
    float v11 = 1.0;
  }
  float v13 = DspLib::dB2Amp(this, *(float *)(*((void *)this + 4) + 40));
  DspLib::fill(v28[0], a3, v13);
  uint64_t v14 = 0;
  if (a3 >= 0x1F5) {
    unint64_t v15 = 501;
  }
  else {
    unint64_t v15 = a3;
  }
  float v16 = 1.0;
  do
  {
    *((float *)this + v14 + 665) = (float)(v12 * (float)v14) + (float)(v9 * v16);
    float v16 = v11 * v16;
    ++v14;
  }
  while (v15 != v14);
  uint64_t v17 = 0;
  uint64_t v18 = 4 * v15;
  do
  {
    uint64_t v19 = *((void *)this + 4) + v17;
    if (*(float *)(v19 + 224) > 0.5)
    {
      uint64_t v20 = *(unsigned int *)(v19 + 228);
      uint64_t v21 = *(unsigned int *)(v19 + 232);
      uint64_t v22 = *(unsigned int *)(v19 + 236);
      DspLib::Biquad::ParametricFilter::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352), 1uLL, *((double *)this + 2), 1uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 352, (v20 << 32) | 3, (double *)(v21 | (v22 << 32)), 0, 0x41uLL);
      MEMORY[0x1F4188790](v23);
      DspLib::Biquad::amplitudeResponse((void *)this + 44, (uint64_t)this + 2660, v15, (uint64_t)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v15, 0, *((double *)this + 53), v24, v25);
      DspLib::multiply(v28[0], a3, (const float *)((char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0)));
    }
    v17 += 16;
  }
  while (v17 != 160);
}

void DspLib::BuzzKill::Algorithm::processBlock(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v58 = a3;
  uint64_t v4 = a1;
  v79[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 24)) {
    DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
  }
  vDSP_Length v5 = a2[2];
  float v6 = *(float *)(*(void *)(v4 + 32) + 60);
  vDSP_Length v57 = v5;
  if (v6 <= 0.5)
  {
    float v7 = **(float ***)(v4 + 216);
    long long v69 = *(_OWORD *)a2;
    unsigned int v54 = a2;
    uint64_t v70 = a2[2];
    DspLib::sum((uint64_t)&v69, v7, v5);
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    DspLib::multiply(v7, v57, 2.0 / (float)v8);
    if (*(_DWORD *)(v4 + 2512) < 2u)
    {
      uint64_t v9 = v57;
    }
    else
    {
      DspLib::Biquad::Filter::process((void *)(v4 + 2520), (uint64_t)v7, v57, (uint64_t)v7, v57);
      v77[0] = v79;
      v77[1] = 1;
      vDSP_Length v78 = v57;
      v79[0] = v7;
      v75[2] = v57;
      uint64_t v76 = v7;
      v75[0] = &v76;
      v75[1] = 1;
      DspLib::DownSampler::process((unsigned int *)(v4 + 2624), v75, v77);
      uint64_t v9 = v78;
    }
    uint64_t v10 = *(void *)(v4 + 264);
    uint64_t v11 = *(void *)(v4 + 456);
    float v12 = *(void (**)(uint64_t, float *))(*(void *)v11 + 56);
    uint64_t v55 = *(void *)(v4 + 272);
    uint64_t v56 = v10;
    v12(v11, v7);
    LODWORD(v77[0]) = 0;
    uint64_t v13 = DspLib::BuzzKill::Algorithm::processBuzzAnalysis(v4, v77, v56, v9, v55, v9);
    if (v13)
    {
      LODWORD(v14) = 0;
      int v53 = (uint64_t *)(v4 + 2296);
      vDSP_Length v5 = v57;
      do
      {
        uint64_t v15 = v4;
        uint64_t v16 = v14;
        if (v5 >= (*(_DWORD *)(v4 + 2512) * v13 + v14)) {
          vDSP_Length v17 = (*(_DWORD *)(v4 + 2512) * v13);
        }
        else {
          vDSP_Length v17 = v5 - v14;
        }
        uint64_t v18 = v54;
        MEMORY[0x1F4188790](v13);
        uint64_t v21 = (char *)&v52 - v20;
        if (v19 >= 0x200) {
          size_t v22 = 512;
        }
        else {
          size_t v22 = v19;
        }
        bzero((char *)&v52 - v20, v22);
        unint64_t v24 = v18[1];
        if (v24)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *v18;
          do
          {
            *(void *)&v21[8 * v25] = *(void *)(v26 + 8 * v25) + 4 * v16;
            ++v25;
          }
          while (v24 > v25);
        }
        unint64_t v27 = v58[1];
        MEMORY[0x1F4188790](v23);
        double v30 = (char *)&v52 - v29;
        if (v28 >= 0x200) {
          size_t v31 = 512;
        }
        else {
          size_t v31 = v28;
        }
        bzero((char *)&v52 - v29, v31);
        if (v27)
        {
          uint64_t v32 = 0;
          float v33 = (void *)*v58;
          do
          {
            *(void *)&v30[8 * v32] = v33[v32] + 4 * v16;
            ++v32;
          }
          while (v27 > v32);
        }
        v68[0] = v21;
        v68[1] = v24;
        v68[2] = v17;
        v67[0] = v30;
        v67[1] = v27;
        v67[2] = v17;
        DspLib::MultiChannelCircularDelay::process(v53, v68, v67);
        uint64_t v4 = v15;
        v66[0] = v30;
        v66[1] = v27;
        v66[2] = v17;
        v65[0] = v30;
        v65[1] = v27;
        v65[2] = v17;
        DspLib::BuzzKill::Algorithm::processFilterBank(v15, (uint64_t)v66, (uint64_t)v65);
        uint64_t v13 = DspLib::BuzzKill::Algorithm::processBuzzAnalysis(v15, v77, v56, v9, v55, v9);
        unint64_t v14 = (v16 + v17);
        vDSP_Length v5 = v57;
      }
      while (v13);
    }
    else
    {
      unint64_t v14 = 0;
      vDSP_Length v5 = v57;
    }
    __n128 v34 = v54;
    vDSP_Length v35 = v5 - v14;
    if (v5 > v14)
    {
      MEMORY[0x1F4188790](v13);
      unsigned int v38 = (char *)&v52 - v37;
      if (v36 >= 0x200) {
        size_t v39 = 512;
      }
      else {
        size_t v39 = v36;
      }
      bzero((char *)&v52 - v37, v39);
      unint64_t v41 = v34[1];
      if (v41)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *v34;
        do
        {
          *(void *)&v38[8 * v42] = *(void *)(v43 + 8 * v42) + 4 * v14;
          ++v42;
        }
        while (v41 > v42);
      }
      unint64_t v44 = v58[1];
      MEMORY[0x1F4188790](v40);
      vDSP_Length v47 = (char *)&v52 - v46;
      if (v45 >= 0x200) {
        size_t v48 = 512;
      }
      else {
        size_t v48 = v45;
      }
      bzero((char *)&v52 - v46, v48);
      if (v44)
      {
        uint64_t v49 = 0;
        BOOL v50 = (void *)*v58;
        do
        {
          *(void *)&v47[8 * v49] = v50[v49] + 4 * v14;
          ++v49;
        }
        while (v44 > v49);
      }
      v64[0] = v38;
      v64[1] = v41;
      v64[2] = v35;
      v63[0] = v47;
      v63[1] = v44;
      v63[2] = v35;
      DspLib::MultiChannelCircularDelay::process((uint64_t *)(v4 + 2296), v64, v63);
      v62[0] = v47;
      v62[1] = v44;
      v62[2] = v35;
      v61[0] = v47;
      v61[1] = v44;
      v61[2] = v35;
      DspLib::BuzzKill::Algorithm::processFilterBank(v4, (uint64_t)v62, (uint64_t)v61);
      goto LABEL_43;
    }
  }
  else if (*(void *)*v58 != *(void *)*a2)
  {
    long long v73 = *(_OWORD *)a2;
    uint64_t v74 = a2[2];
    long long v71 = *(_OWORD *)v58;
    uint64_t v72 = v58[2];
    DspLib::copy(&v73, &v71);
LABEL_43:
    vDSP_Length v5 = v57;
  }
  if (*(unsigned char *)(v4 + 24))
  {
    DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v4 + 56), v5, *(double *)(v4 + 16));
    if (*(unsigned char *)(v4 + 24))
    {
      if (*(void *)(v4 + 344))
      {
        uint64_t v51 = **(float ***)(v4 + 216);
        unint64_t v59 = (void *)*v58;
        long long v60 = *(_OWORD *)(v58 + 1);
        DspLib::sum((uint64_t)&v59, v51, v57);
        DspLib::BuzzKill::FFTForDisplay::process(*(void *)(v4 + 344), v51, v57);
      }
    }
  }
}

uint64_t DspLib::BuzzKill::Algorithm::processBuzzAnalysis(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  uint64_t v44 = a6 - *a2;
  v45[0] = a5 + 4 * a6 - 4 * v44;
  uint64_t v42 = v45;
  uint64_t v43 = 1;
  DspLib::FFT::Filterbank::audioInput(a1 + 464, &v42);
  uint64_t v44 = a4 - *a2;
  v45[0] = a3 + 4 * a4 - 4 * v44;
  uint64_t v42 = v45;
  uint64_t v43 = 1;
  *a2 += DspLib::FFT::Filterbank::audioInput(a1 + 824, &v42);
  uint64_t v10 = *(void *)(*(void *)(a1 + 776) + 88);
  if (v10 == *(void *)(*(void *)(a1 + 1136) + 88))
  {
    if (v10 && !*(unsigned char *)(a1 + 2657))
    {
      if (!*(unsigned char *)(a1 + 2656))
      {
        float v11 = *(double *)(a1 + 16);
        float v12 = 1.0
            - expf(-1.0/ (float)((float)(*(float *)(*(void *)(a1 + 32) + 88)* (float)(v11 / (float)(v10 * (unint64_t)*(unsigned int *)(a1 + 2512))))/ 1000.0));
        uint64_t v13 = *(unsigned int *)(a1 + 2228);
        unint64_t v14 = *(float **)(a1 + 1248);
        unint64_t v15 = *(void *)(a1 + 1256) - (void)v14;
        if (v13)
        {
          uint64_t v16 = *(float **)(a1 + 2256);
          do
          {
            *uint64_t v16 = *v16 + (float)((float)(1.0 - *v16) * v12);
            ++v16;
            --v13;
          }
          while (v13);
        }
        if ((v15 & 0x3FFFFFFFCLL) != 0)
        {
          uint64_t v17 = (v15 >> 2);
          do
          {
            *unint64_t v14 = *v14 + (float)((float)(1.0 - *v14) * v12);
            ++v14;
            --v17;
          }
          while (v17);
        }
      }
      DspLib::FFT::amplitude(*(void *)(a1 + 752), *(float **)(a1 + 1288), *(void *)(a1 + 1296));
      MEMORY[0x1F4188790](v18);
      uint64_t v20 = (char *)&v41 - v19;
      vDSP_Length v21 = *(unsigned int *)(a1 + 1192);
      DspLib::multiply(*v22, v21, *(const float **)(a1 + 1248), (uint64_t)(*(void *)(a1 + 1256) - *(void *)(a1 + 1248)) >> 2, (float *)((char *)&v41 - v19));
      MEMORY[0x1F4188790](v23);
      uint64_t v25 = (float *)((char *)&v41 - v24);
      MEMORY[0x1F4188790](v26);
      uint64_t v28 = (v27 + 15) & 0x7FFFFFFF0;
      uint64_t v29 = (float *)((char *)&v41 - v28);
      MEMORY[0x1F4188790](v28);
      size_t v31 = (float *)((char *)&v41 - v30);
      HIDWORD(v4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v34;
      LODWORD(v2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::BuzzKill::Algorithm::getPartialsBeyondThreshold(a1, *(void *)(a1 + 1200), (uint64_t)(*(void *)(a1 + 1208) - *(void *)(a1 + 1200)) >> 2, *v32, (*v33 - *v32) >> 2, (uint64_t)v20, v21, v35, (uint64_t)&v41 - v30, v36, (uint64_t)v29, v36, (uint64_t)v25);
      char v37 = (DspLib::BuzzKill::MitigationFilterBank::numActiveFilters((DspLib::BuzzKill::MitigationFilterBank *)(a1 + 1504)) | v20) == 0;
      *(unsigned char *)(a1 + 2656) = v37;
      DspLib::BuzzKill::MitigationFilterBank::assignFilters((DspLib::BuzzKill::MitigationFilterBank *)(a1 + 1504), v37, v31, v29, (int)v20, v25, *(float *)(a1 + 1496));
    }
  }
  else
  {
    size_t v39 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v39, 475);
    ++DspLibDebug::mAssertCounter;
  }
  return v10;
}

void DspLib::BuzzKill::Algorithm::processFilterBank(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(_DWORD *)(a1 + 2320);
  if (*(unsigned char *)(a1 + 2656))
  {
    unint64_t v7 = *(void *)(a1 + 1184);
    if (v6 < 2)
    {
      if (!v7) {
        return;
      }
      long long v33 = *(_OWORD *)a2;
      uint64_t v34 = *(void *)(a2 + 16);
      long long v31 = *(_OWORD *)a3;
      uint64_t v32 = *(void *)(a3 + 16);
      unsigned int v8 = (uint64_t *)&v33;
      uint64_t v9 = (uint64_t *)&v31;
      goto LABEL_24;
    }
    if (v7)
    {
      long long v41 = *(_OWORD *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
      long long v39 = *(_OWORD *)a3;
      uint64_t v40 = *(void *)(a3 + 16);
      unsigned int v8 = (uint64_t *)&v41;
      uint64_t v9 = (uint64_t *)&v39;
LABEL_24:
      DspLib::BuzzKill::HighBuzzKillFFT::process(v7, v8, v9);
      return;
    }
    long long v37 = *(_OWORD *)a2;
    uint64_t v38 = *(void *)(a2 + 16);
    long long v35 = *(_OWORD *)a3;
    uint64_t v36 = *(void *)(a3 + 16);
    DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 2632), &v37, &v35);
  }
  else
  {
    if (v6 < 2)
    {
      long long v71 = *(_OWORD *)a2;
      uint64_t v72 = *(void *)(a2 + 16);
      long long v69 = *(_OWORD *)a3;
      uint64_t v70 = *(void *)(a3 + 16);
      LOBYTE(v67[0]) = 0;
      char v68 = 0;
      DspLib::AlgorithmBase::process((unsigned char *)(a1 + 1536), &v71, &v69, v67);
      unint64_t v7 = *(void *)(a1 + 1184);
      if (!v7) {
        return;
      }
      long long v45 = *(_OWORD *)a2;
      uint64_t v46 = *(void *)(a2 + 16);
      long long v43 = *(_OWORD *)a3;
      uint64_t v44 = *(void *)(a3 + 16);
      unsigned int v8 = (uint64_t *)&v45;
      uint64_t v9 = (uint64_t *)&v43;
      goto LABEL_24;
    }
    v30[1] = v30;
    uint64_t v10 = *(void *)(a2 + 16);
    MEMORY[0x1F4188790](a1);
    uint64_t v13 = (char *)v30 - v12;
    if (v11 >= 0x200) {
      size_t v14 = 512;
    }
    else {
      size_t v14 = v11;
    }
    bzero((char *)v30 - v12, v14);
    unint64_t v15 = *(uint64_t **)(a1 + 216);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 224) - (void)v15) >> 3);
    if (*(uint64_t **)(a1 + 224) != v15)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = *v15;
        v15 += 3;
        *(void *)&v13[8 * v17++] = v18;
      }
      while (v16 > v17);
    }
    *(void *)unsigned int v66 = v13;
    *(void *)&v66[8] = v16;
    *(void *)&v66[16] = v10;
    long long v64 = *(_OWORD *)a2;
    uint64_t v65 = *(void *)(a2 + 16);
    uint64_t v19 = DspLib::FIRDecimator::process((void *)(a1 + 2432), &v64, v66);
    vDSP_Length v21 = *(uint64_t **)(a1 + 240);
    uint64_t v20 = *(void **)(a1 + 248);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v20 - v21);
    MEMORY[0x1F4188790](v19);
    uint64_t v25 = (char *)v30 - v24;
    if (v23 >= 0x200) {
      size_t v26 = 512;
    }
    else {
      size_t v26 = v23;
    }
    bzero((char *)v30 - v24, v26);
    if (v20 != v21)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *v21;
        v21 += 3;
        *(void *)&v25[8 * v27++] = v28;
      }
      while (v22 > v27);
    }
    long long v71 = *(_OWORD *)v66;
    uint64_t v72 = *(void *)&v66[16];
    *(void *)&long long v69 = v25;
    *((void *)&v69 + 1) = v22;
    uint64_t v70 = *(void *)&v66[16];
    LOBYTE(v67[0]) = 0;
    char v68 = 0;
    DspLib::AlgorithmBase::process((unsigned char *)(a1 + 1536), &v71, &v69, v67);
    long long v62 = *(_OWORD *)v66;
    uint64_t v63 = *(void *)&v66[16];
    v61[0] = v25;
    v61[1] = v22;
    v61[2] = *(void *)&v66[16];
    DspLib::subtract(&v62, v61);
    v58[2] = v10;
    uint64_t v59 = *(void *)v66;
    long long v60 = *(_OWORD *)&v66[8];
    v58[0] = v25;
    v58[1] = v22;
    DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 2328), &v59, v58);
    unint64_t v29 = *(void *)(a1 + 1184);
    if (v29)
    {
      long long v56 = *(_OWORD *)a2;
      uint64_t v57 = *(void *)(a2 + 16);
      long long v54 = *(_OWORD *)a3;
      uint64_t v55 = *(void *)(a3 + 16);
      DspLib::BuzzKill::HighBuzzKillFFT::process(v29, (uint64_t *)&v56, (uint64_t *)&v54);
    }
    else
    {
      long long v52 = *(_OWORD *)a2;
      uint64_t v53 = *(void *)(a2 + 16);
      long long v50 = *(_OWORD *)a3;
      uint64_t v51 = *(void *)(a3 + 16);
      DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 2632), &v52, &v50);
    }
    long long v48 = *(_OWORD *)a3;
    uint64_t v49 = *(void *)(a3 + 16);
    v47[0] = v25;
    v47[1] = v22;
    v47[2] = v10;
    DspLib::subtract(&v48, v47);
  }
}

uint64_t DspLib::BuzzKill::Algorithm::getPartialsBeyondThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a7 >= 2)
  {
    uint64_t v13 = a6;
    unsigned int v17 = 0;
    unint64_t v18 = 1;
    uint64_t v19 = *(void *)(a1 + 1224);
    do
    {
      if (*(float *)(a6 + 4 * v18) > *(float *)(a2 + 4 * v18))
      {
        uint64_t v20 = (_DWORD *)(v19 + 8 * v17);
        *uint64_t v20 = *(_DWORD *)(a4 + 4 * v18);
        v20[1] = v18;
        ++v17;
      }
      unint64_t v18 = (v18 + 1);
    }
    while (a7 > v18);
    if (v17)
    {
      DspLib::BuzzKill::quicksort();
      DspLib::copy(*(void **)(a1 + 1288), *(void *)(a1 + 1296), *(void **)(a1 + 1368));
      DspLib::FFT::amplitude(*(void *)(a1 + 1112), *(float **)(a1 + 1360), *(void *)(a1 + 1376));
      DspLib::BuzzKill::BuzzKillFFT::processWithDifference((DspLib::BuzzKill::BuzzKillFFT *)(a1 + 824));
      DspLib::BuzzKill::BuzzKillFFT::processWithDifference((DspLib::BuzzKill::BuzzKillFFT *)(a1 + 464));
      DspLib::FFT::amplitude(*(void *)(a1 + 1112), *(float **)(a1 + 1280), *(void *)(a1 + 1296));
      DspLib::FFT::amplitude(*(void *)(a1 + 752), *(float **)(a1 + 1288), *(void *)(a1 + 1296));
      uint64_t v21 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = v17;
      while (1)
      {
        unint64_t v22 = *(unsigned int *)(*(void *)(a1 + 1224) + 8 * v21 + 4);
        uint64_t v23 = v13;
        float v24 = *(float *)(a2 + 4 * v22) / (float)(*(float *)(v13 + 4 * v22) + COERCE_FLOAT(71362));
        *(float *)(a4 + 4 * v22) = *(float *)(a4 + 4 * v22) * v24;
        float v25 = sqrtf(v24);
        uint64_t v26 = (v22 - 1);
        *(float *)(a4 + 4 * v26) = *(float *)(a4 + 4 * v26) * v25;
        unsigned int v27 = v22 + 1;
        if ((v22 + 1) < *(_DWORD *)(a1 + 1192)) {
          *(float *)(a4 + 4 * v27) = v25 * *(float *)(a4 + 4 * v27);
        }
        float v28 = DspLib::ComplexSpan::operator[]((void *)(a1 + 1280), v22);
        float v30 = v29;
        float v31 = DspLib::ComplexSpan::operator[]((void *)(a1 + 1360), v22);
        uint64_t v32 = *(const float **)(a1 + 4664);
        uint64_t v33 = (uint64_t)(*(void *)(a1 + 4672) - (void)v32) >> 2;
        float v34 = *(double *)(a1 + 16);
        float v36 = sqrtf((float)(v30 * v30) + (float)(v28 * v28))
            / (float)(sqrtf((float)(v35 * v35) + (float)(v31 * v31)) + COERCE_FLOAT(71362));
        double v37 = (float)(v34 / (float)*(unsigned int *)(a1 + 2512)) / 6.28318531 * (float)(v36 * v36);
        long double v38 = cos(v36);
        *(float *)&long double v38 = v37 / sqrt(1.0 - v38 + 1.0 - v38);
        v48[0] = *(float *)&v38;
        float v47 = 1.0;
        DspLib::poly(v32, v33, v48, 1uLL, &v47);
        float v39 = v48[0] * v47;
        if ((float)(v48[0] * v47) <= *(float *)(*(void *)(a1 + 32) + 84) || v39 >= *(float *)(a1 + 4688)) {
          goto LABEL_18;
        }
        if (v45) {
          break;
        }
        uint64_t v41 = 0;
LABEL_22:
        *(float *)(a9 + 4 * v41) = v39;
        *(float *)(a11 + 4 * v41) = v24;
        if (*(unsigned char *)(a1 + 2658))
        {
          uint64_t v42 = *(void *)(a1 + 1368);
          float v43 = *(float *)(a2 + 4 * v22)
              / (float)((float)(sqrtf((float)((float)(*(float *)(v42 + 4 * v22) * *(float *)(v42 + 4 * v22))+ (float)(*(float *)(v42 + 4 * v26) * *(float *)(v42 + 4 * v26)))+ (float)(*(float *)(v42 + 4 * v27) * *(float *)(v42 + 4 * v27)))* 0.82)+ 1.0e-20);
        }
        else
        {
          float v43 = *(float *)(a4 + 4 * v22);
        }
        uint64_t v13 = v23;
        *(float *)(a13 + 4 * v41) = v43;
        *(float *)(*(void *)(a1 + 1440) + 4 * v41) = v39 * *(float *)(a1 + 1488);
        *(float *)(*(void *)(a1 + 1464) + 4 * v41) = v39 * *(float *)(a1 + 1492);
        uint64_t v45 = (v45 + 1);
        if (v45 == *(_DWORD *)(a1 + 2228)) {
          return v45;
        }
LABEL_19:
        if (++v21 == v46) {
          return v45;
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v45;
      while (v39 <= *(float *)(*(void *)(a1 + 1464) + v40) || v39 >= *(float *)(*(void *)(a1 + 1440) + v40))
      {
        v40 += 4;
        if (4 * v45 == v40) {
          goto LABEL_22;
        }
      }
LABEL_18:
      uint64_t v13 = v23;
      goto LABEL_19;
    }
  }
  return 0;
}

double DspLib::BuzzKill::Algorithm::latencySamples(DspLib::BuzzKill::Algorithm *this, double a2)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 508);
    ++DspLibDebug::mAssertCounter;
  }
  LODWORD(a2) = *((_DWORD *)this + 572);
  return (double)*(unint64_t *)&a2;
}

void DspLib::BuzzKill::Algorithm::status(double *a1, uint64_t a2, vDSP_Length __N)
{
  if (*((unsigned char *)a1 + 8))
  {
    DspLib::clear((float *)a2, __N);
    float v6 = a1[2];
    *(float *)(a2 + 12) = v6;
    double v7 = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
    float v8 = a1[2];
    *(float *)&double v7 = v7 / v8 * 1000.0;
    *(_DWORD *)(a2 + 16) = LODWORD(v7);
    DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, (float *)(a2 + 40), 0x1F5uLL, *(float *)(*((void *)a1 + 4) + 48), *(float *)(*((void *)a1 + 4) + 52), 1);
    DspLib::amp2dB((float *)(a2 + 40), 0x1F5uLL, 1.0);
    DspLib::BuzzKill::MitigationFilterBank::status((uint64_t)(a1 + 188), a2, *(float *)(*((void *)a1 + 4) + 48), *(float *)(*((void *)a1 + 4) + 52), __N, *(float *)(*((void *)a1 + 4) + 60) > 0.5);
    if (*((unsigned char *)a1 + 24) && (uint64_t v9 = *((void *)a1 + 43)) != 0)
    {
      DspLib::BuzzKill::FFTForDisplay::status(v9, a2);
    }
    else
    {
      DspLib::fill((float *)(a2 + 4048), 0x1F5uLL, -100.0);
    }
  }
  else
  {
    uint64_t v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 768);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::BuzzKill::Algorithm::~Algorithm(DspLib::BuzzKill::Algorithm *this)
{
  DspLib::BuzzKill::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void **v17;

  *(void *)this = &unk_1F14A7F70;
  uint64_t v2 = (void *)*((void *)this + 583);
  if (v2)
  {
    *((void *)this + 584) = v2;
    operator delete(v2);
  }
  unsigned int v17 = (void **)((char *)this + 2632);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v17);
  unsigned int v17 = (void **)((char *)this + 2600);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BuzzKill::Algorithm *)((char *)this + 2568));
  uint64_t v3 = (void *)*((void *)this + 318);
  if (v3)
  {
    *((void *)this + 319) = v3;
    operator delete(v3);
  }
  unsigned int v17 = (void **)((char *)this + 2480);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v4 = (void *)*((void *)this + 305);
  if (v4)
  {
    *((void *)this + 306) = v4;
    operator delete(v4);
  }
  vDSP_Length v5 = (void *)*((void *)this + 301);
  if (v5)
  {
    *((void *)this + 302) = v5;
    operator delete(v5);
  }
  unsigned int v17 = (void **)((char *)this + 2376);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  unsigned int v17 = (void **)((char *)this + 2344);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  unsigned int v17 = (void **)((char *)this + 2296);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v17);
  float v6 = (void *)*((void *)this + 282);
  if (v6)
  {
    *((void *)this + 283) = v6;
    operator delete(v6);
  }
  double v7 = (void *)*((void *)this + 279);
  if (v7)
  {
    *((void *)this + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
    operator delete(v7);
  }
  DspLib::NotchFilterBank::FilterBank::~FilterBank((DspLib::BuzzKill::Algorithm *)((char *)this + 1536));
  float v8 = (void *)*((void *)this + 183);
  if (v8)
  {
    *((void *)this + 184) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 180);
  if (v9)
  {
    *((void *)this + 181) = v9;
    operator delete(v9);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 1360));
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 1280));
  uint64_t v10 = (void *)*((void *)this + 156);
  if (v10)
  {
    *((void *)this + 157) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 153);
  if (v11)
  {
    *((void *)this + 154) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 150);
  if (v12)
  {
    *((void *)this + 151) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *((void *)this + 148);
  *((void *)this + 148) = 0;
  if (v13) {
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100]((uint64_t)this + 1184, v13);
  }
  DspLib::FFT::Filterbank::~Filterbank((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
  DspLib::FFT::Filterbank::~Filterbank((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
  size_t v14 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  unsigned int v17 = (void **)((char *)this + 432);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BuzzKill::Algorithm *)((char *)this + 400));
  unint64_t v15 = (void *)*((void *)this + 47);
  if (v15)
  {
    *((void *)this + 48) = v15;
    operator delete(v15);
  }
  std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 264));
  unsigned int v17 = (void **)((char *)this + 240);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  unsigned int v17 = (void **)((char *)this + 216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  *(void *)this = &unk_1F14A87D8;
  unint64_t v16 = (void *)*((void *)this + 4);
  if (v16)
  {
    *((void *)this + 5) = v16;
    operator delete(v16);
  }
}

uint64_t DspLib::BuzzKill::Algorithm::numStatus(DspLib::BuzzKill::Algorithm *this)
{
  return 2214;
}

uint64_t DspLib::BuzzKill::quicksort()
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t result = MEMORY[0x1F4188790](v0);
  vDSP_Length v5 = (_DWORD *)((char *)v22 - v4);
  if ((v2 & 0x80000000) == 0)
  {
    int v6 = 0;
    *uint64_t v3 = 0;
    _DWORD *v5 = v2;
    do
    {
      while (1)
      {
        uint64_t v7 = (int)v3[v6];
        int v8 = v5[v6];
        if ((int)v7 < v8) {
          break;
        }
        if (--v6 < 0) {
          return result;
        }
      }
      int v9 = v8 + v7;
      if (v8 + (int)v7 < 0 != __OFADD__(v8, v7)) {
        ++v9;
      }
      int v10 = v9 >> 1;
      unint64_t v11 = (float *)(result + 8 * v7);
      uint64_t v12 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)(result + 8 * v10);
      *(void *)(result + 8 * v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
      int v13 = v7 + 1;
      float v14 = *v11;
      int v15 = v8;
      do
      {
        if (v13 <= v8)
        {
          uint64_t v16 = v8 + 1 - v13;
          unsigned int v17 = (float *)(result + 8 * v13);
          while (*v17 <= v14)
          {
            ++v13;
            v17 += 2;
            if (!--v16)
            {
              int v13 = v8 + 1;
              break;
            }
          }
        }
        if (v15 >= (int)v7)
        {
          uint64_t v18 = v15 + 1;
          uint64_t v19 = (float *)(result + 8 * v15);
          while (*v19 > v14)
          {
            --v15;
            --v18;
            v19 -= 2;
            if (v18 <= v7)
            {
              int v15 = v7 - 1;
              break;
            }
          }
        }
        if (v13 < v15)
        {
          uint64_t v20 = *(void *)(result + 8 * v13);
          *(void *)(result + 8 * v13) = *(void *)(result + 8 * v15);
          *(void *)(result + 8 * v15) = v20;
        }
      }
      while (v13 <= v15);
      uint64_t v21 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)(result + 8 * v15);
      *(void *)(result + 8 * v15) = v21;
      v5[v6++] = v15 - 1;
      v3[v6] = v15 + 1;
      v5[v6] = v8;
    }
    while ((v6 & 0x80000000) == 0);
  }
  return result;
}

void std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(a2 + 448));
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(a2 + 360));
    DspLib::FFT::Filterbank::~Filterbank((DspLib::FFT::Filterbank *)a2);
    JUMPOUT(0x1C185D370);
  }
}

DspLib::BuzzKill::HighBuzzKillFFT *DspLib::BuzzKill::HighBuzzKillFFT::HighBuzzKillFFT(DspLib::BuzzKill::HighBuzzKillFFT *this)
{
  DspLib::FFT::Filterbank::Filterbank(this, 1);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(v2 + 360));
  DspLibBuffer::DspLibBuffer((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 448));
  return this;
}

void sub_1BB2F8C8C(_Unwind_Exception *a1)
{
  DspLibBuffer::~DspLibBuffer(v2);
  DspLib::FFT::Filterbank::~Filterbank(v1);
  _Unwind_Resume(a1);
}

float DspLib::Biquad::read@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  float result = *(float *)(a1 + 16);
  *(float *)(a2 + 16) = result;
  return result;
}

float DspLib::Biquad::read(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = (float *)(a1 + 16);
    vDSP_Length v5 = (float *)(a3 + 16);
    unsigned int v6 = 1;
    do
    {
      float result = *v4;
      *((_OWORD *)v5 - 1) = *((_OWORD *)v4 - 1);
      float *v5 = result;
      v5 += 5;
      v4 += 5;
    }
    while (a4 > v6++);
  }
  return result;
}

float DspLib::Biquad::write(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  float result = *(float *)(a1 + 16);
  *(float *)(a2 + 16) = result;
  return result;
}

float DspLib::Biquad::write(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = (float *)(a3 + 16);
    uint64_t v4 = (float *)(a1 + 16);
    unsigned int v5 = 1;
    do
    {
      float result = *v4;
      *((_OWORD *)v3 - 1) = *((_OWORD *)v4 - 1);
      *uint64_t v3 = result;
      v3 += 5;
      v4 += 5;
    }
    while (a2 > v5++);
  }
  return result;
}

uint64_t DspLib::Biquad::validate(uint64_t a1)
{
  BOOL v2 = (*(_DWORD *)a1 & 0x7FFFFFFFu) < 0x7F800000
    && (*(_DWORD *)(a1 + 4) & 0x7FFFFFFFu) < 0x7F800000
    && (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu) < 0x7F800000;
  float v3 = *(float *)(a1 + 16);
  BOOL v4 = v2 && (*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) < 0x7F800000;
  double v5 = v3;
  unsigned int v7 = v4 && (LODWORD(v3) & 0x7FFFFFFFu) < 0x7F800000;
  double v8 = *(float *)(a1 + 12) * -0.5;
  double v9 = -(v5 - v8 * v8);
  double v10 = fabs(v8) + sqrt(v9);
  if (v9 >= 0.0) {
    double v5 = v10;
  }
  if (v5 < 1.0) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t DspLib::Biquad::validate(long long *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = a2;
  LODWORD(v4) = 1;
  do
  {
    long long v6 = *a1;
    int v7 = *((_DWORD *)a1 + 4);
    uint64_t v4 = v4 & DspLib::Biquad::validate((uint64_t)&v6);
    a1 = (long long *)((char *)a1 + 20);
    --v2;
  }
  while (v2);
  return v4;
}

double DspLib::Biquad::frequencyResponse(float *a1, int a2, double a3, double a4, double a5)
{
  if (a2 == 1)
  {
    double v17 = 0.0 - a3 * a3;
    double v18 = a3 * 0.0 + a3 * 0.0;
    float v19 = a1[2];
    if (v19 == 0.0)
    {
      float v20 = a1[1];
      double v21 = *a1;
      BOOL v22 = v20 == 0.0;
      double v23 = v21 * 0.0 + v20;
      if (v20 == 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = v21 * a3;
      }
      if (!v22) {
        double v21 = v23;
      }
    }
    else
    {
      double v25 = *a1;
      double v26 = a1[1];
      double v27 = v17 * v25 + v26 * 0.0;
      double v24 = v18 * v25 + v26 * a3;
      double v21 = v27 + v19;
    }
    float v29 = a1[3];
    float v28 = a1[4];
    double v30 = v18 + v29 * a3;
    double v31 = v17 + v29 * 0.0 + v28;
    a5 = 1.0;
    BOOL v22 = v29 == 0.0;
    double v32 = v29 + 0.0;
    if (v22)
    {
      double v32 = 1.0;
      double v33 = 0.0;
    }
    else
    {
      double v33 = a3;
    }
    if (v28 == 0.0) {
      double v34 = v32;
    }
    else {
      double v34 = v31;
    }
    if (v28 == 0.0) {
      double v30 = v33;
    }
    double v35 = v30 * v30 + v34 * v34;
    if (v35 != 0.0) {
      return (v24 * v30 + v21 * v34) * (1.0 / v35);
    }
  }
  else if (!a2)
  {
    __double2 v7 = __sincos_stret(a3);
    double sinval = v7.__sinval;
    double cosval = v7.__cosval;
    double v9 = cosval * cosval - sinval * sinval;
    double v10 = -(sinval * cosval) - cosval * sinval;
    double v11 = a1[3];
    double v12 = a1[4];
    double v13 = v9 * v12;
    double v14 = v10 * v12 - v7.__sinval * v11;
    a5 = 1.0;
    double v15 = v7.__cosval * v11 + v13 + 1.0;
    double v16 = v14 * v14 + v15 * v15;
    if (v16 != 0.0) {
      return (v14 * (v10 * a1[2] - v7.__sinval * a1[1]) + (v7.__cosval * a1[1] + v9 * a1[2] + *a1) * v15) / v16;
    }
  }
  return a5;
}

uint64_t DspLib::ToneMeister::Algorithm::initialize(vDSP_Length *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize((DspLib::AlgorithmBase *)this, a2, a3);
  if (v4)
  {
    unsigned int v5 = (*(uint64_t (**)(vDSP_Length *))(*this + 56))(this);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(this + 411), v5, this[418]);
    unsigned int v6 = (*(uint64_t (**)(vDSP_Length *))(*this + 56))(this);
    DspLibBuffer::initialize((DspLibBuffer *)(this + 498), v6, 1u);
    unsigned int v7 = (*(uint64_t (**)(vDSP_Length *))(*this + 56))(this);
    DspLibBuffer::setNumFrames(this + 498, v7);
    *((unsigned char *)this + 8) = 1;
    DspLib::ToneMeister::Algorithm::setMaxFrequencies((DspLib::ToneMeister::Algorithm *)this);
    (*(void (**)(vDSP_Length *, void))(*this + 200))(this, *((unsigned __int8 *)this + 24));
  }
  (*(void (**)(vDSP_Length *))(*this + 128))(this);
  return v4;
}

uint64_t DspLib::ToneMeister::Algorithm::setMaxFrequencies(DspLib::ToneMeister::Algorithm *this)
{
  uint64_t v1 = 0;
  float v2 = *((double *)this + 2);
  float v3 = v2 * 0.49;
  if (v3 <= 20000.0) {
    float v4 = v3;
  }
  else {
    float v4 = 20000.0;
  }
  unsigned int v5 = (char *)this + 216;
  do
  {
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 3)] = v4;
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 4)] = v4;
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 5)] = v4;
    uint64_t result = DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 6);
    *(float *)&v5[4 * result] = v4;
    uint64_t v1 = (DspLib::ToneMeister::Parameters *)((char *)v1 + 1);
  }
  while (v1 != (DspLib::ToneMeister::Parameters *)50);
  return result;
}

void DspLib::ToneMeister::Algorithm::uninitialize(DspLib::ToneMeister::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
}

void DspLib::ToneMeister::Algorithm::deleteSharedBuffers(DspLib::ToneMeister::Algorithm *this)
{
  float v2 = (std::__shared_weak_count *)*((void *)this + 513);
  long long v3 = 0uLL;
  *((_OWORD *)this + 256) = 0u;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    long long v3 = 0uLL;
  }
  float v4 = (std::__shared_weak_count *)*((void *)this + 515);
  *((_OWORD *)this + 257) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void DspLib::ToneMeister::Algorithm::reset(uint64_t **this)
{
  DspLib::ToneMeister::Algorithm::resetBiquadChainsAndRTA((DspLib::ToneMeister::Algorithm *)this);
  float v2 = this[516];
  long long v3 = this[517];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  }
  unsigned int v5 = this[519];
  if (v5)
  {
    void v5[2] = 0;
    *((unsigned char *)v5 + 32) = 0;
  }
}

void DspLib::ToneMeister::Algorithm::resetBiquadChainsAndRTA(DspLib::ToneMeister::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::ToneMeister::Algorithm *)((char *)this + 3336));
  DspLib::FFT::Filterbank::reset((DspLib::ToneMeister::Algorithm *)((char *)this + 3536));
  float v2 = (float *)DspLibBuffer::channel((DspLib::ToneMeister::Algorithm *)((char *)this + 3448), 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLib::ToneMeister::Algorithm *)((char *)this + 3448));
  DspLib::clear(v2, cycle_count);
  uint64_t v4 = (float *)DspLibBuffer::channel((DspLib::ToneMeister::Algorithm *)((char *)this + 3896), 0);
  vDSP_Length v5 = vp::utility::CPU_Profiler::get_cycle_count((DspLib::ToneMeister::Algorithm *)((char *)this + 3896));
  DspLib::clear(v4, v5);
  *((unsigned char *)this + 408DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
}

void DspLib::ToneMeister::Algorithm::copyStatesFrom(DspLib::ToneMeister::Algorithm *this, const DspLib::ToneMeister::Algorithm *a2)
{
  if (*((unsigned char *)this + 24)) {
    BOOL v4 = *((unsigned char *)a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    DspLibBuffer::operator=((uint64_t)this + 3448, (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3448));
    DspLib::FFT::Filterbank::copyStatesFrom((DspLib::ToneMeister::Algorithm *)((char *)this + 3536), (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3536));
    DspLibBuffer::operator=((uint64_t)this + 3896, (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3896));
    long long v5 = *(_OWORD *)((char *)a2 + 56);
    long long v6 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 72) = v6;
    *(_OWORD *)((char *)this + 56) = v5;
    long long v7 = *(_OWORD *)((char *)a2 + 104);
    long long v8 = *(_OWORD *)((char *)a2 + 120);
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
    *(_OWORD *)((char *)this + 136) = v9;
    *(_OWORD *)((char *)this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v8;
    *(_OWORD *)((char *)this + 104) = v7;
  }
  double v10 = (DspLib::DynamicFilter::Algorithm **)*((void *)this + 517);
  double v11 = (DspLib::DynamicFilter::Algorithm **)*((void *)this + 516);
  if ((char *)v10 - (char *)v11 == *((void *)a2 + 517) - *((void *)a2 + 516) && v11 != v10)
  {
    unsigned int v13 = 0;
    do
    {
      double v14 = *v11++;
      unsigned int v15 = v13 + 1;
      DspLib::DynamicFilter::Algorithm::copyStatesFrom(v14, *(const DspLib::DynamicFilter::Algorithm **)(*((void *)a2 + 516) + 8 * v13));
      unsigned int v13 = v15;
    }
    while (v11 != v10);
  }
  uint64_t v16 = *((void *)this + 519);
  if (v16)
  {
    uint64_t v17 = *((void *)a2 + 519);
    if (v17)
    {
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(unsigned char *)(v16 + 32) = *(void *)(v17 + 16) != 0;
    }
  }
  uint64_t v18 = *((void *)this + 418);
  if (v18 && v18 == *((void *)a2 + 418))
  {
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::ToneMeister::Algorithm *)((char *)this + 3288), (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3288));
  }
}

double DspLib::DynamicFilter::Algorithm::copyStatesFrom(DspLib::DynamicFilter::Algorithm *this, const DspLib::DynamicFilter::Algorithm *a2)
{
  DspLib::SideChain::Algorithm::copyStatesFrom((DspLib::DynamicFilter::Algorithm *)((char *)this + 328), (const DspLib::DynamicFilter::Algorithm *)((char *)a2 + 328));
  BOOL v4 = (DspLib::Biquad::Filter *)*((void *)this + 208);
  long long v5 = (const DspLib::Biquad::Filter *)*((void *)a2 + 208);
  if (*((void *)v4 + 7) == *((void *)v5 + 7))
  {
    uint64_t v6 = *((void *)v4 + 6);
    if (v6)
    {
      if (v6 == *((void *)v5 + 6)) {
        DspLib::Biquad::Filter::copyStatesFrom(v4, v5);
      }
    }
  }
  long long v7 = (DspLib::Biquad::Filter *)*((void *)this + 209);
  long long v8 = (const DspLib::Biquad::Filter *)*((void *)a2 + 209);
  if (*((void *)v7 + 7) == *((void *)v8 + 7))
  {
    uint64_t v9 = *((void *)v7 + 6);
    if (v9)
    {
      if (v9 == *((void *)v8 + 6)) {
        DspLib::Biquad::Filter::copyStatesFrom(v7, v8);
      }
    }
  }
  (*(void (**)(const DspLib::DynamicFilter::Algorithm *, _DWORD *, uint64_t))(*(void *)a2 + 184))(a2, v11, 1);
  *((_DWORD *)this + 43DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11[0];
  *((unsigned char *)this + 168DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((unsigned char *)a2 + 1680);
  *((_DWORD *)this + 431) = *((_DWORD *)a2 + 431);
  double result = *((double *)a2 + 216);
  *((double *)this + 216) = result;
  return result;
}

_DWORD *DspLib::ToneMeister::Algorithm::setChannelLinkMode(_DWORD *result, int a2)
{
  if (result[1021] != a2)
  {
    result[1021] = a2;
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

void DspLib::ToneMeister::Algorithm::setMeteringIsEnabled(DspLib::ToneMeister::Algorithm *this, int a2)
{
  *((unsigned char *)this + 24) = a2;
  long long v3 = (unint64_t *)((char *)this + 3360);
  BOOL v4 = (DspLib::ToneMeister::Algorithm *)((char *)this + 3448);
  if (a2)
  {
    DspLibBuffer::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3360), 0x65uLL, 1u);
    DspLibBuffer::initialize(v4, 0x2001uLL, 1u);
    DspLibBuffer::setNumFrames(v3, 0x65uLL);
    DspLibBuffer::setNumFrames((unint64_t *)v4, 0x2001uLL);
    DspLib::FFT::Filterbank::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3536), 1, *((double *)this + 2));
    DspLibBuffer::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3896), 0x2001uLL, 1u);
    DspLibBuffer::setNumFrames((unint64_t *)this + 487, 0x2001uLL);
    long long v5 = (float *)DspLibBuffer::channel((DspLibBuffer *)v3, 0);
    vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v3);
    unsigned int v7 = DspLib::ToneMeister::Parameters::toneMeisterParameter(0, 3);
    (*(void (**)(DspLib::ToneMeister::Algorithm *, void))(*(void *)this + 104))(this, v7);
    DspLib::ramp(v5, cycle_count, 1, 20.0, v8);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v9 = xmmword_1BB8760A0;
    DspLib::FFT::Filterbank::setParameters((uint64_t)this + 3536, &v9, 10, (__n128)xmmword_1BB8760A0);
  }
  else
  {
    DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3360));
    DspLibBuffer::uninitialize(v4);
    DspLib::FFT::Filterbank::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3536));
    DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3896));
  }
}

void DspLib::ToneMeister::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v36 = 0;
  double v37 = 0;
  unint64_t v38 = 0;
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    unint64_t v5 = 0;
    *(unsigned char *)(a1 + 4088) = **(float **)(a1 + 32) >= 0.5;
    while (1)
    {
      uint64_t v6 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v5 >= v6) {
        break;
      }
      uint64_t v7 = *(void *)(a1 + 32);
      float v8 = 0.0;
      if (((1 << v5) & vcvtas_u32_f32(*(float *)(v7 + 48))) == 0) {
        float v8 = DspLib::dB2Amp(v6, *(float *)(v7 + 16));
      }
      *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3984), v5) = v8;
      if (((1 << v5) & vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 40))) != 0)
      {
        long long v9 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3984), v5);
        *long long v9 = -*v9;
      }
      ++v5;
    }
    unsigned int v10 = 0;
    *(void *)(a1 + 4072) = 0;
    while (v10 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      double v33 = 0;
      double v34 = 0;
      unint64_t v35 = 0;
      do
      {
        if (DspLib::ToneMeister::Algorithm::channelHasBiquads((DspLib::ToneMeister::Algorithm *)a1, v11, v10))
        {
          DspLib::ToneMeister::Algorithm::designFilter((DspLib::ToneMeister::Algorithm *)a1, v11, v10, (uint64_t)&__p);
          if (DspLib::Biquad::validate((long long *)__p, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)__p) >> 2)))
          {
            unsigned int v13 = v34;
            if ((unint64_t)v34 >= v35)
            {
              double v14 = (void *)std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<std::vector<DspLib::Biquad::Section>&>((uint64_t *)&v33, (uint64_t)&__p);
            }
            else
            {
              *double v34 = 0;
              v13[1] = 0;
              void v13[2] = 0;
              std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v13, __p, (uint64_t)v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)__p) >> 2));
              double v14 = v13 + 3;
            }
            double v34 = v14;
            v12 -= 858993459 * ((*(v14 - 2) - *(v14 - 3)) >> 2);
          }
          if (__p)
          {
            double v32 = __p;
            operator delete(__p);
          }
        }
        ++v11;
      }
      while (v11 != 50);
      *(_DWORD *)(a1 + 4072) += v12;
      unsigned int v15 = *(_DWORD *)(a1 + 4076);
      if (v15 <= v12) {
        unsigned int v15 = v12;
      }
      *(_DWORD *)(a1 + 4076) = v15;
      uint64_t v16 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v17 = std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__emplace_back_slow_path<std::vector<std::vector<DspLib::Biquad::Section>>&>(&v36, (uint64_t *)&v33);
      }
      else
      {
        *double v37 = 0;
        v16[1] = 0;
        void v16[2] = 0;
        std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v16, (uint64_t)v33, (uint64_t)v34, 0xAAAAAAAAAAAAAAABLL * ((void **)v34 - v33));
        uint64_t v17 = (uint64_t)(v16 + 3);
      }
      double v37 = (void *)v17;
      __p = &v33;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v10;
    }
    DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)(a1 + 3288), *(unsigned int *)(a1 + 4076));
    for (vDSP_Length i = 0; i < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1); ++i)
    {
      uint64_t v19 = v36;
      float v20 = (uint64_t *)(v36 + 24 * i);
      uint64_t v21 = *v20;
      if (v20[1] == *v20)
      {
        LODWORD(v23) = 0;
      }
      else
      {
        uint64_t v22 = 0;
        LODWORD(v23) = 0;
        unsigned int v24 = 1;
        do
        {
          double v25 = (uint64_t *)(v21 + 24 * v22);
          uint64_t v26 = v25[1];
          uint64_t v27 = v26 - *v25;
          if (v26 != *v25)
          {
            DspLib::Biquad::Filter::setCoefficients(a1 + 3288, *v25, 0xCCCCCCCCCCCCCCCDLL * (v27 >> 2), v23, i);
            LODWORD(v23) = v23 - 858993459 * ((unint64_t)(v25[1] - *v25) >> 2);
            uint64_t v19 = v36;
          }
          uint64_t v22 = v24;
          uint64_t v21 = *(void *)(v19 + 24 * i);
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v19 + 24 * i + 8) - v21) >> 3) > v24++);
      }
      if (v23 < *(_DWORD *)(a1 + 4076))
      {
        unint64_t v23 = v23;
        do
        {
          int v30 = 0;
          long long v29 = DspLib::Biquad::kBypassSection;
          DspLib::Biquad::Filter::setCoefficients(a1 + 3288, (uint64_t)&v29, 1, v23++, i);
        }
        while (v23 < *(unsigned int *)(a1 + 4076));
      }
    }
    *(unsigned char *)(a1 + 408DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    DspLib::ToneMeister::Algorithm::setupDynamicFilters((DspLib::ToneMeister::Algorithm *)a1);
  }
  double v33 = (void **)&v36;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1BB2F9C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  a15 = &a18;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

BOOL DspLib::ToneMeister::Algorithm::channelHasBiquads(DspLib::ToneMeister::Algorithm *this, unsigned int a2, char a3)
{
  unint64_t v5 = this;
  uint64_t v6 = 10 * a2 + 17;
  LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 4 * v6), 0.0));
  uint64_t v7 = (DspLib::ToneMeister::Parameters *)DspLib::ToneMeister::Parameters::categoryOfFilterType(this);
  if (v7 == 4) {
    return 0;
  }
  LODWORD(v7) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)v5 + 4) + 4 * v6), 0.0));
  int v10 = DspLib::ToneMeister::Parameters::categoryOfFilterType(v7);
  int v11 = DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(v5, (DspLib::ToneMeister::Parameters *)a2);
  if (v10 == 5)
  {
    if (v11) {
      return *((_DWORD *)v5 + 1021) == 0;
    }
    return 0;
  }
  if (!v11) {
    return 0;
  }
  uint64_t v8 = 1;
  if (*((_DWORD *)v5 + 1021) != 1)
  {
    int v12 = 1 << a3;
    if ((v12 & vcvtas_u32_f32(*(float *)(*((void *)v5 + 4)
                                        + 4
                                        * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 7)))) == 0)return (v12 & vcvtas_u32_f32(*(float *)(*((void *)v5 + 4)+ 4* DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 8)))) != 0;
  }
  return v8;
}

void DspLib::ToneMeister::Algorithm::designFilter(DspLib::ToneMeister::Algorithm *this@<X0>, unsigned int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v7 = a2;
  uint64_t v8 = 10 * a2;
  uint64_t v9 = *((void *)this + 4);
  unsigned int v10 = vcvtas_u32_f32(fmaxf(*(float *)(v9 + 4 * (v8 + 17)), 0.0));
  BOOL v11 = v10 > 0xE;
  int v12 = (1 << v10) & 0x78FF;
  BOOL v13 = v11 || v12 == 0;
  if (v13 || *((_DWORD *)this + 1021))
  {
    BOOL v14 = 0;
  }
  else
  {
    unsigned int v15 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 7);
    uint64_t v9 = *((void *)this + 4);
    if ((vcvtas_u32_f32(*(float *)(v9 + 4 * v15)) >> a3))
    {
      unsigned int v16 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8);
      uint64_t v9 = *((void *)this + 4);
      BOOL v14 = vcvtas_u32_f32(*(float *)(v9 + 4 * v16)) != 0;
    }
    else
    {
      BOOL v14 = 1;
    }
  }
  switch(vcvtas_u32_f32(fmaxf(*(float *)(v9 + 4 * (v8 + 17)), 0.0)))
  {
    case 0u:
      float v17 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v18 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      float v19 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      float v20 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
      float v21 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v22 = *((double *)this + 2);
      DspLib::Biquad::Design::fractionalOrderBandShelf((DspLib::Biquad::Design *)v14, v17, v18, v19, v20, v21, *(float *)(*((void *)this + 4) + 24), v22, (void **)&v93);
      goto LABEL_69;
    case 1u:
      float v23 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      if (v23 <= 19.9) {
        float v24 = v23;
      }
      else {
        float v24 = 19.9;
      }
      if (v23 >= 0.1) {
        float v25 = v24;
      }
      else {
        float v25 = 0.1;
      }
      float v26 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v28 = v25 * DspLib::dB2Amp(v27, fabsf(v26) * 0.5);
      if (*(float *)(*((void *)this + 4) + 52) < 0.5)
      {
        float v29 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
        DspLib::ToneMeister::makeGunnesQ(v30, v28, v29);
        float v28 = v31;
      }
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 16;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      if (v28 <= 19.9) {
        float v34 = v28;
      }
      else {
        float v34 = 19.9;
      }
      if (v28 < 0.1) {
        float v34 = 0.1;
      }
      goto LABEL_61;
    case 2u:
      float v53 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v54 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      float v55 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v56 = *((double *)this + 2);
      DspLib::Biquad::Design::fractionalOrderShelf((DspLib::Biquad::Design *)v14, v53, v54, v55, v56, *(float *)(*((void *)this + 4) + 24), &v93);
      goto LABEL_69;
    case 3u:
      float v57 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      float v58 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      LODWORD(v59) = vcvtas_u32_f32(fmaxf(v57, 1.0));
      float v60 = *((double *)this + 2);
      DspLib::Biquad::Design::butterworthLowPass(v59, v58, v60, v14, &v93);
      goto LABEL_69;
    case 4u:
      float v35 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      float v36 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      LODWORD(v37) = vcvtas_u32_f32(fmaxf(v35, 1.0));
      float v38 = *((double *)this + 2);
      DspLib::Biquad::Design::butterworthHighPass(v37, v36, v38, v14, (float **)&v93);
      goto LABEL_69;
    case 5u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 14;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v99 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v40 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      float v41 = 19.9;
      if (v40 <= 19.9) {
        float v41 = v40;
      }
      if (v40 >= 0.1) {
        float v42 = v41;
      }
      else {
        float v42 = 0.1;
      }
      goto LABEL_66;
    case 6u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 2;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v99 = 0.0;
      float v61 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      float v62 = 19.9;
      if (v61 <= 19.9) {
        float v62 = v61;
      }
      if (v61 >= 0.1) {
        float v42 = v62;
      }
      else {
        float v42 = 0.1;
      }
      goto LABEL_66;
    case 7u:
      float v63 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v64 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v65 = *((double *)this + 2);
      DspLib::Biquad::Design::easttyBaxandallToneTilt((DspLib::Biquad::Design *)v14, LODWORD(v63), LODWORD(v64), v65, v66, (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)a4, (char *)&v93, (uint64_t)&v96, 2uLL);
      break;
    case 8u:
      float v67 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v68 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v69) = vcvtas_u32_f32(fmaxf(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5), 1.0));
      float v70 = *((double *)this + 2);
      DspLib::Biquad::Design::allpass(v69, LODWORD(v67), LODWORD(v68), v70, v71, &v93);
      goto LABEL_69;
    case 9u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      uint64_t v98 = 26;
      float v99 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v100 = 0.0;
      float v72 = *((double *)this + 2);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v72, 0, v73, (uint64_t)&v93);
      goto LABEL_67;
    case 0xAu:
      if (*((_DWORD *)this + 1021) == 1) {
        break;
      }
      if (((1 << a3) & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                                + 4
                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 7)))) != 0)
      {
        float v43 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
        float v44 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
        float v45 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
        DspLib::Biquad::Design::phaseEqualizer(v43, v44, v45, *((double *)this + 2), (uint64_t)&v93);
        std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
        uint64_t v46 = *(_DWORD **)a4;
        long long v47 = *(_OWORD *)&v94[4];
        v46[4] = v95;
        *(_OWORD *)uint64_t v46 = v47;
      }
      if (((1 << a3) & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                                + 4
                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))) == 0)break;
      float v48 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v49 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      float v50 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
      DspLib::Biquad::Design::phaseEqualizer(v48, v49, v50, *((double *)this + 2), (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      goto LABEL_67;
    case 0xBu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      float v74 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 19;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v34 = 19.9;
      if (v74 <= 19.9) {
        float v34 = v74;
      }
      if (v74 < 0.1) {
        float v34 = 0.1;
      }
      goto LABEL_61;
    case 0xCu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      float v51 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 17;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v34 = 19.9;
      if (v51 <= 19.9) {
        float v34 = v51;
      }
      if (v51 < 0.1) {
        float v34 = 0.1;
      }
LABEL_61:
      float v99 = v33;
      float v100 = v34;
      float v75 = *((double *)this + 2);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v75, v14, v32, (uint64_t)&v93);
      goto LABEL_67;
    case 0xDu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      float v52 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 0;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v99 = 0.0;
      float v42 = 19.9;
      if (v52 <= 19.9) {
        float v42 = v52;
      }
      if (v52 < 0.1) {
        float v42 = 0.1;
      }
      goto LABEL_66;
    case 0xEu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      float v76 = *(float *)(*((void *)this + 4) + 4 * v8 + 80);
      LODWORD(v98) = 1;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      float v99 = 0.0;
      float v42 = 19.9;
      if (v76 <= 19.9) {
        float v42 = v76;
      }
      if (v76 < 0.1) {
        float v42 = 0.1;
      }
LABEL_66:
      float v100 = v42;
      float v77 = *((double *)this + 2);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v77, v14, v39, (uint64_t)&v93);
LABEL_67:
      vDSP_Length v78 = *(_DWORD **)a4;
      long long v79 = v93;
      v78[4] = *(_DWORD *)v94;
      *(_OWORD *)vDSP_Length v78 = v79;
      break;
    case 0x14u:
      DspLib::ToneMeister::Algorithm::designLinkwitzRileyCrossover(this, v7, a3, &v93);
LABEL_69:
      BOOL v80 = *(_DWORD **)a4;
      if (*(void *)a4)
      {
        *(void *)(a4 + 8) = v80;
        operator delete(v80);
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
      }
      *(_OWORD *)a4 = v93;
      *(void *)(a4 + 16) = *(void *)v94;
      break;
    case 0x15u:
      uint64_t v85 = v9 + 4 * v8;
      float v86 = *(float *)(v85 + 80);
      float v87 = *(float *)(v85 + 84);
      float v88 = *(float *)(v9 + 12);
      float v89 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      float v90 = 30.0;
      if (v87 <= 30.0) {
        float v90 = v87;
      }
      float v91 = 1.0;
      if (v87 >= 1.0) {
        float v91 = v90;
      }
      float v92 = -1.0;
      if (v86 <= -1.0) {
        float v92 = v86;
      }
      if (v86 < -30.0) {
        float v92 = -30.0;
      }
      DspLib::Biquad::Design::iso226LoudnessEQ(v88 - v89, v92, v91, *((double *)this + 2), (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)a4, (char *)&v93, (uint64_t)&v97, 3uLL);
      break;
    default:
      break;
  }
  if (v14)
  {
    int v81 = 1 << a3;
    BOOL v82 = (v81 & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                         + 4
                                         * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 7)))) != 0&& vcvtas_u32_f32(*(float *)(*((void *)this + 4)+ 4* DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))&& *((_DWORD *)this + 1021) == 0;
    int v83 = (v81 & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                         + 4
                                         * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))) == 0|| v82;
    if (v83 == 1)
    {
      if (!v82) {
        return;
      }
      DspLib::ToneMeister::makeSquaredFilter(*(const void **)a4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2), &v93);
    }
    else
    {
      if (*((_DWORD *)this + 1021)) {
        return;
      }
      DspLib::Biquad::Design::allpassFromPoles(*(void *)a4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2), 1, &v93);
    }
    uint64_t v84 = *(void **)a4;
    if (*(void *)a4)
    {
      *(void *)(a4 + 8) = v84;
      operator delete(v84);
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v93;
    *(void *)(a4 + 16) = *(void *)v94;
  }
}

void sub_1BB2FA83C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ToneMeister::Algorithm::setupDynamicFilters(DspLib::ToneMeister::Algorithm *this)
{
  unsigned int v2 = 0;
  unsigned int v3 = 0;
  do
    v3 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v2++);
  while (v2 != 50);
  if (v3 >= 0x32) {
    unint64_t v4 = 50;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4) {
    DspLib::ToneMeister::Algorithm::createSharedBuffers(this);
  }
  else {
    DspLib::ToneMeister::Algorithm::deleteSharedBuffers(this);
  }
  uint64_t v5 = *((void *)this + 517);
  unint64_t v6 = (v5 - *((void *)this + 516)) >> 3;
  if (v6 > v4)
  {
    uint64_t v7 = (uint64_t *)(v5 - 8);
    uint64_t v8 = v5 - 8;
    do
    {
      uint64_t v9 = *v7;
      *uint64_t v7 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      *((void *)this + 517) = v7;
      unint64_t v6 = (v8 - *((void *)this + 516)) >> 3;
      v8 -= 8;
      --v7;
    }
    while (v6 > v4);
  }
  if (v6 < v4) {
    std::make_unique[abi:ne180100]<DspLib::DynamicFilter::Algorithm,std::shared_ptr<DspLibBuffer> &,std::shared_ptr<DspLibBuffer> &>();
  }
  uint64_t v10 = 0;
  char v11 = 0;
  unint64_t v12 = 0;
  int v13 = 1;
  do
  {
    if (DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v10) && v12 <= 0x31)
    {
      char v14 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 56))(this);
      unsigned int v15 = ~(-1 << v14);
      if (*((_DWORD *)this + 1021) == 1)
      {
        unsigned int v16 = ~(-1 << v14);
      }
      else
      {
        unsigned int v16 = vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                      + 4
                                      * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v10, 7)));
        if (*((_DWORD *)this + 1021) != 1) {
          unsigned int v15 = vcvtas_u32_f32(*(float *)(*((void *)this + 4)
        }
                                        + 4
                                        * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v10, 8)));
      }
      unsigned int v17 = 0;
      int v18 = -1;
      do
        v18 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v17++);
      while (v13 != v17);
      float v19 = *(float *)(*((void *)this + 4)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v18, 0));
      float v20 = *(float *)(*((void *)this + 4)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v18, 1));
      float v21 = *(float *)(*((void *)this + 4)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v18, 2));
      DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(&v40, &DspLib::DynamicFilter::Parameters::kDefinition);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 9, (float)v16);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 10, (float)v15);
      float v22 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v10, (DspLib::ToneMeister::Parameters *)2);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 4, v22);
      float v23 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v10, (DspLib::ToneMeister::Parameters *)3);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 0, v23);
      unsigned int v24 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v10, 4);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 1, *(float *)(*((void *)this + 4) + 4 * v24));
      unsigned int v25 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v10, 5);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 5, *(float *)(*((void *)this + 4) + 4 * v25));
      unsigned int v26 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v10, 6);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 2, *(float *)(*((void *)this + 4) + 4 * v26));
      uint64_t v27 = 10 * v10 + 17;
      float v28 = 0.0;
      unsigned int v29 = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 4 * v27), 0.0)) - 16;
      if (v29 <= 3) {
        float v28 = flt_1BB8760C0[v29];
      }
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 3, v28);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 6, v19);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 7, v20);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v40, 8, v21);
      uint64_t v30 = *(void *)(*((void *)this + 516) + 8 * v12);
      uint64_t v31 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 56))(this);
      (*(void (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 40))(this);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v31);
      (*(void (**)(void, uint64_t *, void))(**(void **)(*((void *)this + 516) + 8 * v12) + 264))(*(void *)(*((void *)this + 516) + 8 * v12), &v40, 0);
      float v32 = *(float *)(*((void *)this + 4) + 4 * v27);
      float v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v10, (DspLib::ToneMeister::Parameters *)2);
      unsigned int v34 = vcvtas_u32_f32(fmaxf(v32, 0.0));
      unsigned int v35 = v34 & 0xFFFFFFFC;
      int v36 = v34 - 15;
      if (v35 == 16) {
        int v37 = v36;
      }
      else {
        int v37 = 0;
      }
      char IsNeeded = DspLib::DynamicFilter::crossFadeIsNeeded(v37, v33);
      if (__p)
      {
        float v42 = __p;
        operator delete(__p);
      }
      ++v12;
      v11 |= IsNeeded;
    }
    ++v10;
    ++v13;
  }
  while (v10 != 50);
  float v39 = (void *)*((void *)this + 519);
  if (v11)
  {
    if (!v39)
    {
      (*(void (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 216))(this);
      operator new();
    }
    DspLib::ToneMeister::CrossFade::setParameters((uint64_t)v39, 0x241A00000uLL);
  }
  else
  {
    *((void *)this + 519) = 0;
    if (v39) {
      std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 4152, v39);
    }
  }
}

void sub_1BB2FAFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void *DspLib::ToneMeister::Algorithm::latencySamples(DspLib::ToneMeister::Algorithm *this)
{
  return DspLib::Biquad::Filter::latencySamples((void *)this + 411);
}

void DspLib::ToneMeister::Algorithm::processBlock(uint64_t a1, long long *a2, long long *a3, int8x16_t a4)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    if (**(void **)a3 != **(void **)a2)
    {
      long long v35 = *a2;
      uint64_t v36 = *((void *)a2 + 2);
      long long v33 = *a3;
      uint64_t v34 = *((void *)a3 + 2);
      DspLib::copy(&v35, &v33);
    }
    if (*(unsigned char *)(a1 + 24)) {
      a4 = DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    if (!*(unsigned char *)(a1 + 4088))
    {
      if ((*(unsigned int (**)(uint64_t, int8x16_t))(*(void *)a1 + 56))(a1, a4))
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(float **)(*(void *)a3 + 8 * v7);
          vDSP_Length v9 = *((void *)a3 + 2);
          uint64_t v10 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3984), v7);
          DspLib::multiply(v8, v9, *v10);
          ++v7;
        }
        while (v7 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      uint64_t v11 = *((void *)a3 + 1);
      uint64_t v12 = *((void *)a3 + 2);
      *(void *)&long long v39 = *(void *)a3;
      *((void *)&v39 + 1) = v11;
      uint64_t v40 = v12;
      *(void *)&long long v37 = v39;
      *((void *)&v37 + 1) = v11;
      uint64_t v38 = v12;
      DspLib::Biquad::Filter::process((void *)(a1 + 3288), &v39, &v37);
      uint64_t v13 = *(void *)(a1 + 4152);
      char v14 = *(uint64_t **)(a1 + 4128);
      unsigned int v15 = *(uint64_t **)(a1 + 4136);
      if (v13)
      {
        if (v14 != v15)
        {
          do
          {
            uint64_t v16 = *(void *)(a1 + 4152);
            uint64_t v17 = *(void *)(v16 + 16);
            *(void *)&long long v39 = *(void *)(v16 + 40) + 4 * v17;
            *((void *)&v39 + 1) = v4;
            *(void *)&long long v37 = *(void *)(v16 + 64) + 4 * v17;
            *((void *)&v37 + 1) = v4;
            uint64_t v18 = *v14++;
            uint64_t v32 = *((void *)a3 + 2);
            long long v31 = *a3;
            DspLib::DynamicFilter::Algorithm::processBlock(v18, (uint64_t *)&v31, (uint64_t)&v39, (uint64_t)&v37, *(unsigned char *)(v16 + 32));
          }
          while (v14 != v15);
          uint64_t v13 = *(void *)(a1 + 4152);
        }
        unint64_t v19 = *(void *)(v13 + 24);
        unint64_t v20 = *(void *)(v13 + 16) + v4;
        BOOL v21 = v20 >= v19;
        BOOL v22 = v20 < v19;
        if (v21) {
          unint64_t v20 = 0;
        }
        *(void *)(v13 + 16) = v20;
        *(unsigned char *)(v13 + 32) = v22;
      }
      else
      {
        while (v14 != v15)
        {
          uint64_t v23 = *v14++;
          long long v29 = *a3;
          uint64_t v30 = *((void *)a3 + 2);
          DspLib::DynamicFilter::Algorithm::processBlock(v23, (uint64_t *)&v29, 0, 0, 0);
        }
      }
    }
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), *((void *)a3 + 2), *(double *)(a1 + 16));
      unsigned int v24 = *(DspLib::DynamicFilter::Algorithm ***)(a1 + 4128);
      unsigned int v25 = *(DspLib::DynamicFilter::Algorithm ***)(a1 + 4136);
      while (v24 != v25)
      {
        unsigned int v26 = *v24++;
        DspLib::DynamicFilter::Algorithm::updateSidechainLevelForDisplay(v26);
      }
      uint64_t v27 = *(void *)a3;
      long long v28 = *(long long *)((char *)a3 + 8);
      DspLib::ToneMeister::Algorithm::processRTA((double *)a1, &v27, (unint64_t *)(a1 + 3448));
    }
  }
}

void DspLib::ToneMeister::Algorithm::processRTA(double *a1, void *a2, unint64_t *a3)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  vDSP_Length v6 = a2[2];
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (float *)((char *)&v22[-1] - v7);
  DspLib::clear((float *)((char *)&v22[-1] - v7), v6);
  if ((*(unsigned int (**)(double *))(*(void *)a1 + 56))(a1))
  {
    unint64_t v9 = 0;
    do
    {
      if ((vcvtas_u32_f32(*(float *)(*((void *)a1 + 4) + 28)) >> v9)) {
        DspLib::add(v8, v6, *(const float **)(*a2 + 8 * v9));
      }
      ++v9;
    }
    while (v9 < (*(unsigned int (**)(double *))(*(void *)a1 + 56))(a1));
  }
  DspLibBuffer::setNumFrames(a3, 0x2001uLL);
  unsigned int v10 = (*(uint64_t (**)(double *))(*(void *)a1 + 56))(a1);
  DspLib::multiply(v8, v6, 2.0 / (float)v10);
  if (v6)
  {
    for (vDSP_Length i = 0; i < v6; vDSP_Length i = (v12 + i))
    {
      v22[0] = v23;
      v22[1] = 1;
      void v22[2] = v6 - i;
      v23[0] = &v8[i];
      int v12 = DspLib::FFT::Filterbank::audioInput((uint64_t)(a1 + 442), v22);
      unint64_t v13 = *(void *)(*((void *)a1 + 481) + 88);
      if (v13)
      {
        float v14 = a1[2] / (double)v13 * *(float *)(*((void *)a1 + 4) + 36) / 1000.0;
        float v15 = expf(-1.0 / v14);
        uint64_t v16 = (float *)DspLibBuffer::channel((DspLibBuffer *)a3, 0);
        DspLib::multiply(v16, 0x2001uLL, v15);
        uint64_t v17 = *((void *)a1 + 478);
        uint64_t v18 = (float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 487), 0);
        DspLib::FFT::amplitude(v17, v18, 0x2001uLL);
        unint64_t v19 = (float *)DspLibBuffer::channel((DspLibBuffer *)a3, 0);
        unint64_t v20 = (const float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 487), 0);
        DspLib::vmax(v19, 0x2001uLL, v20);
      }
    }
  }
}

void DspLib::ToneMeister::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  DspLib::clear((float *)a2, __N);
  if (v5)
  {
    *(_DWORD *)(a2 + 12) = 0;
    *(int32x2_t *)(a2 + 16) = vrev64_s32((int32x2_t)vcvt_f32_u32(*(uint32x2_t *)(a1 + 4072)));
    float v6 = *(double *)(a1 + 16);
    memset_pattern16((void *)(a2 + 32), &unk_1BB8760B0, 0x194uLL);
    unint64_t v7 = 0;
    unsigned int v8 = 0;
    LODWORD(v9) = 0;
    float v10 = v6 * 0.000061035;
    while (1)
    {
      unsigned int v11 = v9;
      unint64_t v9 = v7;
      float v12 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v7) / v10;
      float v13 = (float)(unint64_t)(vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 3448))
                                    - 2);
      if (v12 <= v13) {
        float v13 = v12;
      }
      unsigned int v14 = v13;
      float v15 = v13 - (float)v13;
      float v16 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3448), v13);
      *(float *)(a2 + 32 + 4 * v9) = (float)((float)(*(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3448), v14 + 1)* v15)+ (float)((float)(1.0 - v15) * v16))+ 0.00001;
      float v17 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v9);
      if ((float)(v17 - *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v11)) > v10) {
        break;
      }
      unint64_t v7 = v9 + 1;
      unsigned int v8 = v14;
      if (v9 == 100) {
        goto LABEL_20;
      }
    }
    if (v9 <= 0x64)
    {
      do
      {
        float v18 = (float)(*(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v9) / v10) + 0.5;
        float v19 = (float)(unint64_t)(vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 3448))
                                      - 1);
        if (v18 <= v19) {
          float v19 = v18;
        }
        unsigned int v20 = v19;
        float v21 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3448), v19);
        while (v8 <= v20)
        {
          BOOL v22 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3448), v8);
          if (*v22 > v21) {
            float v21 = *v22;
          }
          ++v8;
        }
        *(float *)(a2 + 4 * v9++ + 32) = v21 + 0.00001;
      }
      while (v9 != 101);
    }
LABEL_20:
    DspLib::amp2dBSafe((float *)(a2 + 32), 0x65uLL, 1.0e-20);
    uint64_t v23 = *(uint64_t **)(a1 + 4128);
    unsigned int v24 = *(uint64_t **)(a1 + 4136);
    if (v23 != v24)
    {
      unsigned int v25 = 109;
      do
      {
        uint64_t v26 = *v23++;
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v26 + 184))(v26, &v27, 1);
        *(_DWORD *)(a2 + 4 * v25++) = v27;
      }
      while (v23 != v24);
    }
  }
  else
  {
    memset_pattern16((void *)(a2 + 32), &unk_1BB875EE0, 0x194uLL);
  }
}

float DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(DspLib::ToneMeister::Algorithm *this, uint64_t a2, DspLib::ToneMeister::Parameters *a3)
{
  uint64_t v6 = 10 * a2;
  uint64_t v7 = 10 * a2 + 16;
  float v8 = *(float *)(*((void *)this + 4) + 4 * ((void)a3 + v7));
  if (DspLib::ToneMeister::Algorithm::filterIsAutomated(this, a2))
  {
    uint64_t v9 = *((void *)this + 4);
    float v10 = *(float *)(v9 + 4 * v6 + 68);
    float v11 = *(float *)(v9 + 12);
    float v12 = (float *)DspLib::ToneMeister::Algorithm::automationForFilter(this, a2);
    unint64_t v13 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 0);
    LODWORD(v13) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 4 * v13), 0.0));
    if (DspLib::ToneMeister::Parameters::filterStateIsActive(v13))
    {
      if (v12[1] == 2.0)
      {
        if (a3 == (DspLib::ToneMeister::Parameters *)2)
        {
          return v8 + DspLib::ToneMeister::Parameters::automatedGain(v12, v11, v8);
        }
        else if (DspLib::ToneMeister::Parameters::isFilterFrequencyParameter(a3, vcvtas_u32_f32(fmaxf(v10, 0.0))))
        {
          float v14 = DspLib::ToneMeister::Parameters::filterCenterFrequency((float *)(*((void *)this + 4) + 4 * v7));
          return v8 * DspLib::ToneMeister::Parameters::automatedFrequency(v12, v11, v14);
        }
      }
    }
  }
  return v8;
}

void DspLib::ToneMeister::makeGunnesQ(DspLib::ToneMeister *this, float a2, float a3)
{
}

void DspLib::ToneMeister::Algorithm::designLinkwitzRileyCrossover(DspLib::ToneMeister::Algorithm *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = a2;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v23 = 0;
  LODWORD(v4) = vcvtas_u32_f32(fmaxf(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, a2, (DspLib::ToneMeister::Parameters *)5), 1.0));
  int v9 = 1 << a3;
  unsigned int v10 = v9 & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                     + 4
                                     * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v6, 7)));
  unsigned int v11 = v9 & vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                     + 4
                                     * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v6, 8)));
  float v12 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v6, (DspLib::ToneMeister::Parameters *)3);
  if (v4)
  {
    float v14 = *((double *)this + 2);
    if (v10) {
      DspLib::Biquad::Design::butterworthLowPass(v4, v12, v14, 0, __p);
    }
    else {
      DspLib::Biquad::Design::butterworthHighPass(v4, v12, v14, 0, (float **)__p);
    }
    long long v16 = *(_OWORD *)__p;
    uint64_t v17 = v21;
    if ((v10 != 0) == (v11 != 0))
    {
      *(float32x2_t *)__p[0] = vneg_f32(*(float32x2_t *)__p[0]);
      *(float *)(v16 + 8) = -*(float *)(v16 + 8);
    }
    goto LABEL_24;
  }
  LODWORD(v6) = vcvtas_u32_f32(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v6, (DspLib::ToneMeister::Parameters *)5)* 0.5);
  if ((v10 != 0) != (v11 != 0))
  {
    float v13 = *((double *)this + 2);
    if (v10) {
      DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)v6, v12, v13, 0, __p);
    }
    else {
      DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)v6, v12, v13, 0, (float **)__p);
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)__dst, 0x999999999999999ALL * (((char *)__p[1] - (char *)__p[0]) >> 2));
    if (__p[1] != __p[0])
    {
      memmove(__dst[0], __p[0], (char *)__p[1] - (char *)__p[0]);
      if (__p[1] != __p[0]) {
        memmove((char *)__dst[0] + (char *)__p[1] - (char *)__p[0], __p[0], (char *)__p[1] - (char *)__p[0]);
      }
    }
    if (v11) {
      BOOL v18 = (v6 & 1) == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      float v19 = (float *)__dst[0];
      *(float32x2_t *)__dst[0] = vneg_f32(*(float32x2_t *)__dst[0]);
      void v19[2] = -v19[2];
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    long long v16 = *(_OWORD *)__dst;
    uint64_t v17 = v23;
LABEL_24:
    *(_OWORD *)a4 = v16;
    a4[2] = v17;
    return;
  }
  float v15 = *((double *)this + 2);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)v6, v12, v15, 0, __p);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)__p[0], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 2), 0, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BB2FBC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ToneMeister::makeSquaredFilter(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(a3, a1, (uint64_t)a1 + 20 * a2, 0xCCCCCCCCCCCCCCCDLL * ((20 * a2) >> 2));
  DspLib::Biquad::Design::phaseComplement(a1, a2, (uint64_t *)&__p);
  std::vector<DspLib::Biquad::Section>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section*>,std::__wrap_iter<DspLib::Biquad::Section*>>((uint64_t)a3, a3[1], (char *)__p, v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)__p) >> 2));
  if (__p)
  {
    uint64_t v7 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1BB2FBD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  float v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL DspLib::ToneMeister::Algorithm::filterIsEnabled(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  unsigned int v3 = (DspLib::ToneMeister::Parameters *)DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 0);
  LODWORD(v3) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 4 * v3), 0.0));

  return DspLib::ToneMeister::Parameters::filterStateIsEnabled(v3);
}

unint64_t DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  unint64_t v4 = DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 0);
  LODWORD(v4) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 4 * v4), 0.0));
  unint64_t result = DspLib::ToneMeister::Parameters::filterStateIsActive(v4);
  if (result) {
    return ((vcvtas_u32_f32(*(float *)(*((void *)this + 4) + 4)) >> vcvtas_u32_f32(*(float *)(*((void *)this + 4)
  }
                                                                                                + 4
                                                                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 9)))) & 1) == 0;
  return result;
}

unsigned int DspLib::ToneMeister::Algorithm::filterGroup(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  return vcvtas_u32_f32(*(float *)(*((void *)this + 4)
                                 + 4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 9)));
}

BOOL DspLib::ToneMeister::Algorithm::filterIsAutomated(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  float v8 = 0;
  uint64_t v4 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 120))(this);
  BOOL result = DspLib::ToneMeister::Parameters::findAutomationForFilter(a2, v4, (unint64_t *)&v8, v5);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 120))(this);
    return vcvtas_u32_f32(*(float *)(v7 + 4 * DspLib::ToneMeister::Parameters::automationParameterForSlot(v8, 1))) == 2;
  }
  return result;
}

unint64_t DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(DspLib::ToneMeister::Algorithm *this, unsigned int a2)
{
  unsigned int v3 = this;
  LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)this + 4) + 40 * a2 + 68), 0.0));
  if (DspLib::ToneMeister::Parameters::categoryOfFilterType(this) != 4) {
    return 0;
  }

  return DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(v3, (DspLib::ToneMeister::Parameters *)a2);
}

uint64_t DspLib::ToneMeister::Algorithm::dynamicFilterIndex(DspLib::ToneMeister::Algorithm *this, unint64_t a2)
{
  unsigned int v3 = this;
  unint64_t v4 = 0;
  int v5 = -1;
  unsigned int v6 = 1;
  do
  {
    LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((void *)v3 + 4) + 40 * v4 + 68), 0.0));
    this = (DspLib::ToneMeister::Algorithm *)DspLib::ToneMeister::Parameters::categoryOfFilterType(this);
    if (this == 4) {
      ++v5;
    }
    unint64_t v4 = v6++;
  }
  while (v4 <= a2);
  return v5;
}

uint64_t DspLib::ToneMeister::Algorithm::automationForFilter(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  int v5 = 0;
  BOOL AutomationForFilter = DspLib::ToneMeister::Parameters::findAutomationForFilter(a2, *((void *)this + 4), (unint64_t *)&v5, a2);
  uint64_t result = 0;
  if (AutomationForFilter) {
    return *((void *)this + 4) + 4 * DspLib::ToneMeister::Parameters::automationParameterForSlot(v5, 0);
  }
  return result;
}

void DspLib::ToneMeister::Algorithm::createSharedBuffers(DspLib::ToneMeister::Algorithm *this)
{
  unsigned int v2 = 0;
  int v3 = 0;
  do
    v3 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v2++);
  while (v2 != 50);
  if (v3)
  {
    if (!*((void *)this + 512))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
      long long v4 = v17;
      long long v17 = 0uLL;
      int v5 = (std::__shared_weak_count *)*((void *)this + 513);
      *((_OWORD *)this + 256) = v4;
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (*((void *)&v17 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
        }
      }
      unsigned int v6 = (DspLibBuffer *)*((void *)this + 512);
      unint64_t v7 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 216))(this);
      unsigned int v8 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 56))(this);
      DspLibBuffer::initialize(v6, v7, v8);
    }
    if (!*((void *)this + 514))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
      long long v9 = v17;
      long long v17 = 0uLL;
      unsigned int v10 = (std::__shared_weak_count *)*((void *)this + 515);
      *((_OWORD *)this + 257) = v9;
      if (v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        if (*((void *)&v17 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
        }
      }
      uint64_t v11 = (DspLibBuffer *)*((void *)this + 514);
      unint64_t v12 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 216))(this);
      unsigned int v13 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(void *)this + 56))(this);
      DspLibBuffer::initialize(v11, v12, v13);
    }
  }
  else
  {
    float v14 = (std::__shared_weak_count *)*((void *)this + 513);
    long long v15 = 0uLL;
    *((_OWORD *)this + 256) = 0u;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      long long v15 = 0uLL;
    }
    long long v16 = (std::__shared_weak_count *)*((void *)this + 515);
    *((_OWORD *)this + 257) = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void std::make_unique[abi:ne180100]<DspLib::DynamicFilter::Algorithm,std::shared_ptr<DspLibBuffer> &,std::shared_ptr<DspLibBuffer> &>()
{
}

void sub_1BB2FC324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1C185D370](v12, 0x10E1C40DC98D035);
  _Unwind_Resume(a1);
}

void DspLib::ToneMeister::CrossFade::setParameters(uint64_t a1, unint64_t a2)
{
  LODWORD(v2) = vcvtad_u64_f64(*(double *)a1 * (float)(*(float *)&a2 / 1000.0));
  uint64_t v5 = (v2 + 1);
  *(void *)(a1 + 24) = v5;
  unint64_t v6 = *(void *)(a1 + 8) + v5 - 1;
  unint64_t v7 = (const float **)(a1 + 40);
  std::vector<float>::resize(a1 + 40, v6);
  std::vector<float>::resize(a1 + 64, v6);
  DspLib::fill(*(float **)(a1 + 40), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2, 1.0);
  DspLib::clear(*(float **)(a1 + 64), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2);
  if (v2)
  {
    unint64_t v8 = HIDWORD(a2);
    vDSP_Length v9 = *(void *)(a1 + 24);
    unsigned int v10 = *(float **)(a1 + 40);
    if (v8 == 1)
    {
      DspLib::ramp(v10, v9, 1, 1.0 / (float)v2, 1.0);
    }
    else
    {
      DspLib::ramp(v10, v9, 0, 0.0, 1.0);
      if (v8 == 2) {
        DspLib::square(*(float **)(a1 + 40), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
      }
    }
    uint64_t v11 = *(float **)(a1 + 64);
    DspLib::multiply(*v7, v2, v11, -1.0);
    DspLib::add(v11, v2, 1.0);
  }
}

void DspLib::ToneMeister::Algorithm::~Algorithm(DspLib::ToneMeister::Algorithm *this)
{
  DspLib::ToneMeister::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  void **v7;

  *(void *)this = &unk_1F14A8088;
  vDSP_Length v2 = (void *)*((void *)this + 519);
  *((void *)this + 519) = 0;
  if (v2) {
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 4152, v2);
  }
  unint64_t v7 = (void **)((char *)this + 4128);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v3 = (std::__shared_weak_count *)*((void *)this + 515);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 513);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3984));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3896));
  DspLib::FFT::Filterbank::~Filterbank((DspLib::ToneMeister::Algorithm *)((char *)this + 3536));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3448));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3360));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ToneMeister::Algorithm *)((char *)this + 3336));
  uint64_t v5 = (void *)*((void *)this + 414);
  if (v5)
  {
    *((void *)this + 415) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1F14A87D8;
  unint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

float DspLib::ToneMeister::Algorithm::parameterBounds(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  return DspLib::ToneMeister::Parameters::kMinimum[a2];
}

uint64_t DspLib::ToneMeister::Algorithm::numStatus(DspLib::ToneMeister::Algorithm *this)
{
  return 159;
}

void DspLib::SideChain::Algorithm::copyStatesFrom(DspLib::SideChain::Algorithm *this, const DspLib::SideChain::Algorithm *a2)
{
  if (*((unsigned char *)this + 48)) {
    BOOL v2 = *((unsigned char *)a2 + 48) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    *((void *)this + 98) = *((void *)a2 + 98);
    *((_DWORD *)this + 19DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)a2 + 190);
    *((_DWORD *)this + 194) = *((_DWORD *)a2 + 194);
    *((_DWORD *)this + 277) = *((_DWORD *)a2 + 277);
    *((_DWORD *)this + 279) = *((_DWORD *)a2 + 279);
    *((_DWORD *)this + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)a2 + 280);
    if (*((void *)this + 119) == *((void *)a2 + 119))
    {
      uint64_t v5 = *((void *)this + 118);
      if (v5)
      {
        if (v5 == *((void *)a2 + 118)) {
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 896), (const DspLib::SideChain::Algorithm *)((char *)a2 + 896));
        }
      }
    }
    if (*((void *)this + 106) == *((void *)a2 + 106))
    {
      uint64_t v6 = *((void *)this + 105);
      if (v6)
      {
        if (v6 == *((void *)a2 + 105)) {
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 792), (const DspLib::SideChain::Algorithm *)((char *)a2 + 792));
        }
      }
    }
    if (*((void *)this + 132) == *((void *)a2 + 132))
    {
      uint64_t v7 = *((void *)this + 131);
      if (v7)
      {
        if (v7 == *((void *)a2 + 131))
        {
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 1000), (const DspLib::SideChain::Algorithm *)((char *)a2 + 1000));
        }
      }
    }
  }
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<std::vector<DspLib::Biquad::Section>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v11, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  v15 += 24;
  std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1BB2FC72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB2FC7A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__emplace_back_slow_path<std::vector<std::vector<DspLib::Biquad::Section>>&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer(v14);
  return v12;
}

void sub_1BB2FC8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB2FC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v4, *(const void **)v6, *(void *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2));
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BB2FCA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  BOOL v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<DspLib::Biquad::Section>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section*>,std::__wrap_iter<DspLib::Biquad::Section*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 2)) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 2);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 2);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x666666666666666) {
      unint64_t v18 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v37 = v9;
    if (v18) {
      float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v9, v18);
    }
    else {
      float v19 = 0;
    }
    long long v28 = &v19[20 * v15];
    __p = v19;
    uint64_t v34 = v28;
    uint64_t v36 = &v19[20 * v18];
    long long v29 = &v28[20 * a5];
    uint64_t v30 = 20 * a5;
    do
    {
      long long v31 = *(_OWORD *)v7;
      *((_DWORD *)v28 + 4) = *((_DWORD *)v7 + 4);
      *(_OWORD *)long long v28 = v31;
      v28 += 20;
      v7 += 20;
      v30 -= 20;
    }
    while (v30);
    long long v35 = v29;
    uint64_t v5 = (char *)std::vector<DspLib::Biquad::Section>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      long long v35 = &v34[(v35 - v34 - 20) % 0x14uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 2)) >= a5)
  {
    uint64_t v21 = &__src[20 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unsigned int v24 = &v5[20 * a5];
    unsigned int v25 = &v23[-20 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((_DWORD *)v26 + 4) = *((_DWORD *)v25 + 4);
        *(_OWORD *)uint64_t v26 = v27;
        v26 += 20;
        v25 += 20;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[20 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * ((uint64_t)(v12 - __dst) >> 2)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * ((uint64_t)(v12 - __dst) >> 2)], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1BB2FCF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<DspLib::Biquad::Section>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 20);
      uint64_t v7 = (void *)(v9 - 20);
      *(_DWORD *)(v9 - 4) = *((_DWORD *)v8 - 1);
      *(_OWORD *)(v9 - 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v10;
      v8 -= 20;
      v9 -= 20;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  unint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  unint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::vector<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[8];
    if (v3)
    {
      a2[9] = v3;
      operator delete(v3);
    }
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1C185D370);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::initialize(DspLib::LoudspeakerSystemIDV1::ModelFit *this, double a2)
{
  *((double *)this + 22) = a2;
  unint64_t v4 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184), a2);
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::initialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232), a2);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), *((void *)this + 79));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), *((void *)this + 209));
  *(unsigned char *)this = 1;
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(v4);
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
  *((unsigned char *)this + 17DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::reset(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
  *((unsigned char *)this + 17DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::uninitialize(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), 0);

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), 0);
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::setParameters(DspLib::LoudspeakerSystemIDV1::ModelFit *this, const DspLib::AlgorithmParametersInstance *a2)
{
  if (*(unsigned char *)this)
  {
    unint64_t v4 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184), a2);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::setParameters((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232), a2);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), *((void *)this + 79));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), *((void *)this + 209));
    *((unsigned char *)this + 168) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 7) >= 0.5;
    *((unsigned char *)this + 169) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000006) >= 0.5;
    float v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000000);
    BOOL v6 = v5 >= 0.5;
    if (v5 >= 0.5 && !*((unsigned char *)this + 2))
    {
      DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(v4);
      DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
      *((unsigned char *)this + 17DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    }
    *((unsigned char *)this + 2) = v6;
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm(v4);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
    *((unsigned char *)this + 1) = 1;
  }
  else
  {
    uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v7, 47);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::LoudspeakerSystemIDV1::ModelFit::process(DspLib::LoudspeakerSystemIDV1::ModelFit *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, int a6)
{
  if (*((unsigned char *)this + 1))
  {
    uint64_t v12 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
    if (a6)
    {
      *((unsigned char *)this + 588) = 0;
      *((unsigned char *)this + 1636) = 0;
    }
    else
    {
      int v13 = *((_DWORD *)this + 1);
      if (v13 == 2)
      {
        if (*((unsigned char *)this + 169))
        {
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel((uint64_t)v12, (DSPSplitComplex *)((char *)this + 88), (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1736), (float *)this + 286);
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::process((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232), a2, a3, a4, a5, (DSPSplitComplex *)((char *)this + 88));
        }
        else
        {
          *((unsigned char *)this + 1636) = 0;
        }
        *((unsigned char *)this + 17DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
        *((_DWORD *)this + 1) = 0;
      }
      else if (v13 == 1)
      {
        if (*((unsigned char *)this + 168))
        {
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel((uint64_t)this + 1232, (DSPSplitComplex *)((char *)this + 8), (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 696), (float *)this + 546);
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::process(v12, a2, a3, a4, a5, (DSPSplitComplex *)((char *)this + 8));
        }
        else
        {
          *((unsigned char *)this + 588) = 0;
        }
        *((_DWORD *)this + 1) = 2;
      }
    }
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::writeToNvm(v12);
    return DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1232));
  }
  else
  {
    long long v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v15, 84);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateEstimatedModel(DspLib::LoudspeakerSystemIDV1 *this, DSPSplitComplex *a2, float a3, DspLib::ComplexSpan *a4, float a5, const DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *a6, const DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *a7)
{
  v32[5] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = MEMORY[0x1F4188790](this);
  unsigned int v12 = MEMORY[0x1F4188790](v11);
  v32[0] = v14;
  v32[1] = (char *)&__B - v13;
  v32[2] = 2 * v12;
  void v32[3] = 2;
  void v32[4] = v12;
  DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1 *)v32, 0.0, v16, v15);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  MEMORY[0x1F4188790](v18);
  __A.unint64_t realp = v20;
  __A.imagp = (float *)((char *)&__B - v19);
  uint64_t v31 = v21;
  int64_t v22 = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel((uint64_t)a4, &__A, (DspLib::ComplexMatrixSpan *)v32, (float *)a4 + 240);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  MEMORY[0x1F4188790](v23);
  __B.unint64_t realp = v25;
  __B.imagp = (float *)((char *)&__B - v24);
  uint64_t v29 = v26;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel((uint64_t)a6, &__B, (DspLib::ComplexMatrixSpan *)v32, (float *)a6 + 238);
  DspLib::ComplexSpan::operator=(a2, &__A);
  DspLib::operator+=(a2, &__B);
  return DspLib::operator+=((uint64_t)a2, a5);
}

void DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector(DspLib::LoudspeakerSystemIDV1 *this, float a2, float a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](this);
  uint64_t v8 = (void *)MEMORY[0x1F4188790](v7);
  __A.unint64_t realp = v10;
  __A.imagp = (float *)((char *)&v20 - v9);
  unint64_t v24 = v11;
  if (v11)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    do
    {
      v26.imag = (float)(a2 + (float)((float)v13 * a3)) * 6.2832;
      v26.real = 0.0;
      uint64_t v8 = DspLib::ComplexSpan::setElement(&__A, v12, v26);
      unint64_t v12 = ++v13;
    }
    while (v24 > v13);
  }
  uint64_t v14 = MEMORY[0x1F4188790](v8);
  MEMORY[0x1F4188790](v14);
  __C.unint64_t realp = v16;
  __C.imagp = (float *)((char *)&v20 - v15);
  uint64_t v22 = v17;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::ComplexMatrixSpan::setRow(this, 0, &__C);
  if (*((void *)this + 3) >= 2uLL)
  {
    unsigned int v18 = 3;
    do
    {
      DspLib::operator*=(&__C, &__A);
      DspLib::ComplexMatrixSpan::setRow(this, v18 - 2, &__C);
    }
    while (*((void *)this + 3) >= (unint64_t)v18++);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::status(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)v1)
  {
    float v6 = v5;
    unint64_t v7 = v3;
    uint64_t v8 = v2;
    float v9 = *(double *)(v1 + 176) * 0.0009765625;
    __A.unint64_t realp = (float *)&v17;
    __A.imagp = (float *)&v16;
    vDSP_Length v15 = 513;
    uint64_t v10 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)(v1 + 184);
    unint64_t v11 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v1 + 1232);
    DspLib::LoudspeakerSystemIDV1::updateEstimatedModel((DspLib::LoudspeakerSystemIDV1 *)0x201, &__A, v9, (DspLib::ComplexSpan *)(v1 + 184), v6, (const DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)(v1 + 1232), v4);
    vDSP_zvabs(&__A, 1, (float *)(v8 + 6556), 1, v15);
    vDSP_zvphas(&__A, 1, (float *)(v8 + 8608), 1, v15);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::status(v10, v8);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::status(v11, v8);
    if (v7)
    {
      uint64_t v12 = 0;
      do
      {
        if ((*(_DWORD *)(v8 + 4 * v12) & 0x7FFFFFFFu) >= 0x7F800000) {
          *(_DWORD *)(v8 + 4 * v12) = 0;
        }
        ++v12;
      }
      while (v7 > v12);
    }
  }
  else
  {
    unsigned int v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v13, 150);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::SingleSampleDelay::process(float *a1, _DWORD *__src, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (a3)
  {
    int v7 = __src[a3 - 1];
    DspLib::copy_backward(__src, a3 - 1, (uint64_t)&a4[a5 + 1 - a3], a3 - 1);
    float result = *a1;
    *a4 = *(_DWORD *)a1;
    *(_DWORD *)a1 = v7;
  }
  return result;
}

void DspLib::CircularDelay::setLength(DspLib::CircularDelay *this, unint64_t a2)
{
  if (a2 != (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2)
  {
    std::vector<float>::resize((uint64_t)this, a2);
    *((void *)this + 3) = 0;
    unint64_t v3 = *(float **)this;
    vDSP_Length v4 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
    DspLib::clear(v3, v4);
  }
}

void DspLib::CircularDelay::reset(DspLib::CircularDelay *this)
{
  *((void *)this + 3) = 0;
  DspLib::clear(*(float **)this, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2);
}

char **DspLib::CircularDelay::read(char **result, unint64_t a2, char *__dst, unint64_t a4)
{
  if (a4)
  {
    float v5 = *result;
    unint64_t v6 = (result[1] - *result) >> 2;
    if (v6 >= a2 && a4 <= v6)
    {
      uint64_t v8 = __dst;
      unint64_t v9 = (unint64_t)&result[3][v6 - a2];
      if (v9 >= v6) {
        uint64_t v10 = (result[1] - *result) >> 2;
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v11 = v9 - v10;
      uint64_t v12 = a4 - (v6 - v11);
      if (a4 <= v6 - v11)
      {
        if (a4 == -1) {
          uint64_t v12 = v6 - v11;
        }
        else {
          uint64_t v12 = a4;
        }
        v5 += 4 * v11;
      }
      else
      {
        DspLib::copy(&v5[4 * v11], v6 - v11, __dst);
        uint64_t v8 = &v8[4 * a4 + -4 * v12];
      }
      return (char **)DspLib::copy(v5, v12, v8);
    }
  }
  return result;
}

char **DspLib::CircularDelay::write(char **result, char *__src, unint64_t a3)
{
  if (a3)
  {
    float v5 = result;
    int v7 = *result;
    unint64_t v6 = result[1];
    unint64_t v8 = (v6 - *result) >> 2;
    if (a3 <= v8)
    {
      uint64_t v12 = result[3];
      uint64_t v13 = a3 - (v8 - (void)v12);
      if (a3 <= v8 - (unint64_t)v12)
      {
        float result = (char **)DspLib::copy(__src, a3, &v7[4 * (void)v12]);
        if (v5[3] + a3 == v8) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v5[3] + a3;
        }
      }
      else
      {
        DspLib::copy(__src, v8 - (void)v12, &v7[4 * v8 + -4 * (v8 - (void)v12)]);
        float result = (char **)DspLib::copy(&__src[4 * a3 + -4 * v13], v13, v7);
      }
      v5[3] = v13;
    }
    else if (v6 != v7)
    {
      unint64_t v9 = &__src[4 * a3];
      uint64_t v10 = &v9[-4 * v8];
      uint64_t v11 = v5[3];
      if (v11)
      {
        DspLib::copy(v10, v8 - v11, &v7[4 * v8 + -4 * (v8 - v11)]);
        unint64_t v8 = v5[3];
        uint64_t v10 = &v9[-4 * v8];
      }
      return (char **)DspLib::copy(v10, v8, v7);
    }
  }
  return result;
}

void *DspLib::CircularDelay::process(void *result, char *a2, unint64_t a3, char *__dst, unint64_t a5)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v9 = result;
    uint64_t v10 = (char *)*result;
    uint64_t v11 = (char *)result[1];
    uint64_t v12 = (uint64_t)&v11[-*result];
    uint64_t v13 = v12 >> 2;
    if (a3 <= v12 >> 2)
    {
      if (__dst == a2)
      {
        MEMORY[0x1F4188790](result);
        DSPComplex v26 = (char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
        DspLib::CircularDelay::read((char **)v9, v13, v26, a3);
        uint64_t v27 = *((void *)v9 + 3);
        uint64_t v28 = a3 - (v13 - v27);
        if (a3 <= v13 - v27)
        {
          DspLib::copy(a2, a3, &v10[4 * v27]);
          if (*((void *)v9 + 3) + a3 == v13) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = *((void *)v9 + 3) + a3;
          }
        }
        else
        {
          DspLib::copy(a2, v13 - v27, &v10[4 * v13 + -4 * (v13 - v27)]);
          DspLib::copy(&a2[4 * a3 + -4 * v28], v28, v10);
        }
        *((void *)v9 + 3) = v28;
        return DspLib::copy(v26, a3, __dst);
      }
      else
      {
        DspLib::CircularDelay::read((char **)result, v12 >> 2, __dst, a5);
        uint64_t v17 = *((void *)v9 + 3);
        uint64_t v18 = a3 - (v13 - v17);
        if (a3 <= v13 - v17)
        {
          float result = DspLib::copy(a2, a3, &v10[4 * v17]);
          if (*((void *)v9 + 3) + a3 == v13) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = *((void *)v9 + 3) + a3;
          }
        }
        else
        {
          DspLib::copy(a2, v13 - v17, &v10[4 * v13 + -4 * (v13 - v17)]);
          float result = DspLib::copy(&a2[4 * a3 + -4 * v18], v18, v10);
        }
        *((void *)v9 + 3) = v18;
      }
    }
    else if (__dst == a2)
    {
      if (v11 != v10)
      {
        MEMORY[0x1F4188790](result);
        uint64_t v20 = (char *)v29 - v19;
        DspLib::CircularDelay::read((char **)v9, v13, (char *)v29 - v19, v13);
        uint64_t v21 = &a2[4 * a3];
        uint64_t v22 = &v21[-4 * v13];
        uint64_t v23 = *((void *)v9 + 3);
        if (v23)
        {
          DspLib::copy(v22, v13 - v23, &v10[4 * v13 + -4 * (v13 - v23)]);
          uint64_t v24 = *((void *)v9 + 3);
          uint64_t v22 = &v21[-4 * v24];
        }
        else
        {
          uint64_t v24 = v13;
        }
        DspLib::copy(v22, v24, v10);
        DspLib::copy_backward(a2, a3 - v13, (uint64_t)&a2[4 * a5 + -4 * (a3 - v13)], a3 - v13);
        return DspLib::copy(v20, v13, __dst);
      }
    }
    else
    {
      DspLib::CircularDelay::read((char **)result, v12 >> 2, __dst, v12 >> 2);
      float result = DspLib::copy(a2, a3 - v13, &__dst[4 * a5 + -4 * (a3 - v13)]);
      if (v11 != v10)
      {
        uint64_t v14 = &a2[4 * a3];
        vDSP_Length v15 = &v14[-4 * v13];
        uint64_t v16 = *((void *)v9 + 3);
        if (v16)
        {
          DspLib::copy(v15, v13 - v16, &v10[4 * v13 + -4 * (v13 - v16)]);
          uint64_t v13 = *((void *)v9 + 3);
          vDSP_Length v15 = &v14[-4 * v13];
        }
        return DspLib::copy(v15, v13, v10);
      }
    }
  }
  return result;
}

char **DspLib::MultiChannelCircularDelay::read(char **result, unint64_t a2, void *a3)
{
  unint64_t v3 = *result;
  if (result[1] != *result)
  {
    unint64_t v6 = result;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      float result = DspLib::CircularDelay::read((char **)&v3[32 * v7], a2, *(char **)(*a3 + 8 * v7), a3[2]);
      unint64_t v7 = v8;
      unint64_t v3 = *v6;
      ++v8;
    }
    while (v7 < (v6[1] - *v6) >> 5);
  }
  return result;
}

char **DspLib::MultiChannelCircularDelay::write(char **result, void *a2)
{
  uint64_t v2 = *result;
  if (result[1] != *result)
  {
    vDSP_Length v4 = result;
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      float result = DspLib::CircularDelay::write((char **)&v2[32 * v5], *(char **)(*a2 + 8 * v5), a2[2]);
      unint64_t v5 = v6;
      uint64_t v2 = *v4;
      ++v6;
    }
    while (v5 < (v4[1] - *v4) >> 5);
  }
  return result;
}

uint64_t *DspLib::MultiChannelCircularDelay::process(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3 = *result;
  if (result[1] != *result)
  {
    unsigned int v6 = result;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      float result = DspLib::CircularDelay::process((void *)(v3 + 32 * v7), *(char **)(*a2 + 8 * v7), a2[2], *(char **)(*a3 + 8 * v7), a3[2]);
      unint64_t v7 = v8;
      uint64_t v3 = *v6;
      ++v8;
    }
    while (v7 < (v6[1] - *v6) >> 5);
  }
  return result;
}

void DspLib::LinearDelay::setLength(float **this, unint64_t a2)
{
  if (a2 != this[1] - *this)
  {
    std::vector<float>::resize((uint64_t)this, a2);
    uint64_t v3 = *this;
    vDSP_Length v4 = this[1] - *this;
    DspLib::clear(v3, v4);
  }
}

char **DspLib::LinearDelay::process(char **result, char *__src, unint64_t a3, char *__dst, uint64_t a5)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v9 = *result;
    uint64_t v10 = result[1] - *result;
    if (v10)
    {
      uint64_t v11 = v10 >> 2;
      uint64_t v12 = a3 - (v10 >> 2);
      if (a3 <= v10 >> 2)
      {
        MEMORY[0x1F4188790](result);
        uint64_t v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        DspLib::copy(__src, a3, v16);
        DspLib::copy(v9, a3, __dst);
        uint64_t v17 = &v9[4 * v11];
        DspLib::copy(&v17[-4 * (v11 - a3)], v11 - a3, v9);
        return (char **)DspLib::copy(v16, a3, &v17[-4 * a3]);
      }
      else
      {
        MEMORY[0x1F4188790](result);
        uint64_t v14 = (char *)v18 - v13;
        DspLib::copy(&__src[4 * a3 + -4 * v11], v11, (char *)v18 - v13);
        DspLib::copy_backward(__src, v12, (uint64_t)&__dst[4 * a5 + -4 * v12], v12);
        DspLib::copy(v9, v11, __dst);
        return (char **)DspLib::copy(v14, v11, v9);
      }
    }
    else if (__src != __dst)
    {
      return (char **)DspLib::copy(__src, a3, __dst);
    }
  }
  return result;
}

char **DspLib::LinearDelay::write(char **result, char *a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v5 = *result;
    uint64_t v6 = result[1] - *result;
    uint64_t v7 = v6 >> 2;
    if (v6 >> 2 >= a3)
    {
      unsigned int v8 = &v5[4 * v7];
      DspLib::copy(&v8[-4 * ((v6 >> 2) - a3)], (v6 >> 2) - a3, v5);
      unint64_t v5 = &v8[-4 * a3];
      uint64_t v7 = a3;
    }
    else
    {
      a2 = &a2[4 * a3 + -4 * v7];
    }
    return (char **)DspLib::copy(a2, v7, v5);
  }
  return result;
}

DspLib::FourBandRandomOrderLrFilterBank::FilterBank *DspLib::FourBandRandomOrderLrFilterBank::FilterBank::FilterBank(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 512;
  *((unsigned char *)this + 24) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 11) = 0;
  *(void *)((char *)this + 93) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((unsigned char *)this + 176) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 248) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((unsigned char *)this + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 392) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((unsigned char *)this + 464) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  DspLib::copy(&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kDefault, 15, (char *)this + 28);
  return this;
}

void sub_1BB2FE910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 560);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 536);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  DspLib::Biquad::Filter::~Filter(v12);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 392));
  DspLib::Biquad::Filter::~Filter(v11);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 248));
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 176));
  uint64_t v14 = *(void **)(v10 + 152);
  if (v14)
  {
    *(void *)(v10 + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v14;
    operator delete(v14);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setPhaseCompensationOnlyMode(uint64_t this, char a2)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v2, 19);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    *(unsigned char *)(this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  }
  return this;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::initialize(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned __int16 a2, double a3)
{
  if (*((unsigned char *)this + 24)) {
    BOOL v3 = *((_DWORD *)this + 2) == a2;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = !v3;
  if (a2 >= 0x41u)
  {
    unint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    int v10 = 29;
LABEL_17:
    printf("DSP Sound assertion in %s at line %d\n", v9, v10);
    ++DspLibDebug::mAssertCounter;
    return v4;
  }
  if (!a2)
  {
    unint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    int v10 = 30;
    goto LABEL_17;
  }
  *((_DWORD *)this + 2) = a2;
  if (a3 <= 0.0)
  {
    unint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    int v10 = 32;
    goto LABEL_17;
  }
  BOOL isEqual = DspLib::isEqual(this, *(double *)this, a3, 1.0e-20);
  *(double *)this = a3;
  if ((v4 | !isEqual) != 1) {
    return 0;
  }
  std::vector<std::vector<DspLib::Biquad::Section>>::reserve((uint64_t *)this + 67, 3uLL);
  std::vector<std::vector<DspLib::Biquad::Section>>::reserve((uint64_t *)this + 70, 3uLL);
  uint64_t v4 = 1;
  *((unsigned char *)this + 24) = 1;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters((uint64_t)this, (char *)this + 28, 15);
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset(this);
  return v4;
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    _DWORD v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BB2FEBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters(uint64_t a1, void *__src, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a3 == 15)
  {
    uint64_t v4 = (char *)(a1 + 28);
    if ((void *)(a1 + 28) != __src) {
      DspLib::copy(__src, 15, v4);
    }
    for (uint64_t i = 0; i != 60; i += 4)
    {
      float v6 = *(float *)&v4[i];
      uint64_t v7 = (char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMinimum + i;
      unsigned int v8 = (char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMaximum + i;
      if (*(float *)((char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMaximum + i) >= v6) {
        unsigned int v8 = &v4[i];
      }
      if (v6 >= *(float *)((char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMinimum + i)) {
        uint64_t v7 = v8;
      }
      *(_DWORD *)&v4[i] = *(_DWORD *)v7;
    }
    if (*(unsigned char *)(a1 + 24))
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 52);
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      int16x8_t v10 = (int16x8_t)vcgeq_f32(*(float32x4_t *)(a1 + 72), v9);
      char v11 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1BB8723F0));
      *(int8x8_t *)v10.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v10), (int8x8_t)0x1000100010001);
      *(int8x8_t *)v10.i8 = vmovn_s16(v10);
      *(_DWORD *)(a1 + 108) = v10.i32[0];
      v10.i32[0] = v11 & 0xF;
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v10.i8);
      v12.i16[0] = vaddlv_u8(v12);
      unsigned int v13 = v12.i32[0];
      if (!*(unsigned char *)(a1 + 100))
      {
        int v14 = v12.i32[0] <= 2u ? 2 : v12.i32[0];
        std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 128), (*(_DWORD *)(a1 + 8) * v14));
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v15 = *(void *)(a1 + 136);
        if (v16 == v15)
        {
          uint64_t v17 = *(void *)(a1 + 128);
        }
        else
        {
          do
          {
            std::vector<float>::resize(v16, *(void *)(a1 + 16));
            v16 += 24;
          }
          while (v16 != v15);
          uint64_t v16 = *(void *)(a1 + 128);
          uint64_t v17 = *(void *)(a1 + 136);
        }
        std::vector<void const*>::resize(a1 + 152, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
        uint64_t v18 = *(void *)(a1 + 128);
        if (*(void *)(a1 + 136) != v18)
        {
          uint64_t v19 = 0;
          unsigned int v20 = 1;
          do
          {
            *(void *)(*(void *)(a1 + 152) + 8 * v19) = *(void *)(v18 + 24 * v19);
            uint64_t v19 = v20;
            uint64_t v18 = *(void *)(a1 + 128);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 136) - v18) >> 3) > v20++);
        }
      }
      if ((v13 & 0xF) > 1)
      {
        unint64_t v22 = v13 - 1;
        BOOL v53 = *(_DWORD *)(a1 + 104) != v13;
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)(a1 + 536), v22);
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)(a1 + 560), v22);
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = 0;
          int v25 = 0;
          do
          {
            if (*(unsigned char *)(a1 + v24 + 108))
            {
              if (v23 == v25) {
                goto LABEL_31;
              }
              ++v25;
            }
            ++v24;
          }
          while (v24 != 4);
          LODWORD(v24) = 0;
LABEL_31:
          unsigned int v26 = vcvtas_u32_f32(*(float *)&v4[4 * ((2 * v24) | 1)] * 0.5);
          uint64_t v27 = a1 + 4 * v23;
          int v29 = *(_DWORD *)(v27 + 88);
          uint64_t v28 = (unsigned int *)(v27 + 88);
          if (v29 != v26)
          {
            *uint64_t v28 = v26;
            BOOL v53 = 1;
          }
          std::vector<DspLib::Biquad::Section>::resize(*(void *)(a1 + 560) + 24 * v23, 1uLL);
          uint64_t v30 = (DspLib::Biquad::Design *)*v28;
          float v31 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)a1, v24);
          float v32 = *(double *)a1;
          DspLib::Biquad::Design::butterworthLowPass(v30, v31, v32, 0, &v56);
          uint64_t v33 = *(void *)(a1 + 536);
          uint64_t v34 = v33 + 24 * v23;
          long long v35 = *(void **)v34;
          if (*(void *)v34)
          {
            *(void *)(v33 + 24 * v23 + 8) = v35;
            operator delete(v35);
            *(void *)uint64_t v34 = 0;
            *(void *)(v34 + 8) = 0;
            *(void *)(v34 + 16) = 0;
          }
          *(_OWORD *)uint64_t v34 = v56;
          *(void *)(v33 + 24 * v23 + 16) = v57;
          uint64_t v36 = (DspLib::Biquad::Design *)*v28;
          float v37 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)a1, v24);
          float v38 = *(double *)a1;
          DspLib::Biquad::Design::butterworthHighPass(v36, v37, v38, 0, (float **)&v56);
          uint64_t v39 = *(void *)(a1 + 560);
          uint64_t v40 = v39 + 24 * v23;
          float v41 = *(void **)v40;
          if (*(void *)v40)
          {
            *(void *)(v39 + 24 * v23 + 8) = v41;
            operator delete(v41);
            *(void *)uint64_t v40 = 0;
            *(void *)(v40 + 8) = 0;
            *(void *)(v40 + 16) = 0;
          }
          *(_OWORD *)uint64_t v40 = v56;
          *(void *)(v39 + 24 * v23 + 16) = v57;
          *(&v61 + v23) = -858993459
                        * ((*(void *)(*(void *)(a1 + 536) + 24 * v23 + 8)
                          - *(void *)(*(void *)(a1 + 536) + 24 * v23)) >> 2);
          ++v23;
        }
        while (v23 != v22);
        uint64_t v42 = 0;
        if (v13 <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = v13;
        }
        uint64_t v44 = a1 + 112;
        do
        {
          uint64_t v45 = 0;
          int v46 = 0;
          do
          {
            if (*(unsigned char *)(a1 + v45 + 108))
            {
              if (v42 == v46) {
                goto LABEL_48;
              }
              ++v46;
            }
            ++v45;
          }
          while (v45 != 4);
          LODWORD(v45) = 0;
LABEL_48:
          float v47 = 0.0;
          if (*(float *)(v44 + 4 * v45) != -100.0)
          {
            float v47 = DspLib::dB2Amp((DspLib *)v41, *(float *)(v44 + 4 * v45));
            uint64_t v44 = a1 + 112;
          }
          *(&v58 + v42++) = v47;
        }
        while (v42 != v43);
        if (*(unsigned char *)(a1 + 88)) {
          float v59 = -v59;
        }
        if (v22 == 3)
        {
          if (*(unsigned char *)(a1 + 96)) {
            float v60 = -v60;
          }
          unsigned int v48 = v62;
          if (v61 <= v63) {
            unsigned int v49 = v63;
          }
          else {
            unsigned int v49 = v61;
          }
          unsigned int v50 = v61 + v62 + v63;
        }
        else if ((v13 & 0xF) == 3)
        {
          unsigned int v49 = v61;
          unsigned int v48 = v62;
          unsigned int v50 = v61 + v62;
        }
        else
        {
          unsigned int v49 = 0;
          unsigned int v48 = v61;
          unsigned int v50 = v61;
        }
        if (v53)
        {
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 176));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 248));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 320));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 392));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 464));
          vDSP_Length v51 = *(unsigned int *)(a1 + 8);
          if (*(unsigned char *)(a1 + 100))
          {
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 464), v51, v50);
          }
          else
          {
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 176), (2 * v51), v48);
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 320), (2 * *(_DWORD *)(a1 + 8)), v48);
            if (v13 == 3)
            {
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 248), (2 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 392), (3 * *(_DWORD *)(a1 + 8)), v49);
            }
            else if (v13 == 4)
            {
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 248), (4 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 392), (4 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 464), (2 * *(_DWORD *)(a1 + 8)), v49);
            }
          }
        }
        memset(v55, 0, sizeof(v55));
        std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v55, *(void *)(a1 + 536), *(void *)(a1 + 544), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3));
        memset(v54, 0, sizeof(v54));
        std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v54, *(void *)(a1 + 560), *(void *)(a1 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3));
        DspLib::FourBandRandomOrderLrFilterBank::FilterBank::assignCoeffsToBiquadStages(a1, v55, v54, &v61, &v58, v13);
        *(void *)&long long v56 = v54;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        *(void *)&long long v56 = v55;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      }
      else
      {
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 176));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 248));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 320));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 392));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 464));
      }
      *(_DWORD *)(a1 + 104) = v13;
    }
  }
  else
  {
    float v52 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v52, 151);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1BB2FF2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 224));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 296));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 368));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 440));

  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 512));
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::uninitialize(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  *((unsigned char *)this + 24) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 176));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 248));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 320));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 392));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 464));
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 16);
  *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((void *)this + 19);
  *((_DWORD *)this + 26) = 0;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, uint8x8_t a2)
{
  a2.i32[0] = *((_DWORD *)this + 27);
  return vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a2)));
}

unint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::buffer(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned int a2)
{
  if (a2)
  {
    unsigned int v2 = 0;
    BOOL v3 = (unsigned __int8 *)this + 108;
    uint64_t v4 = a2;
    do
    {
      int v5 = *v3++;
      v2 += v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    unsigned int v2 = 0;
  }
  return *((void *)this + 19) + 8 * v2 * (unint64_t)*((unsigned int *)this + 2);
}

float DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, int a2)
{
  if (a2 == 2) {
    return *((float *)this + 11);
  }
  if (a2 == 1)
  {
    float result = *((float *)this + 11) / 1.25;
    if (result >= *((float *)this + 9)) {
      return *((float *)this + 9);
    }
  }
  else
  {
    float result = 0.0;
    if (!a2)
    {
      float result = *((float *)this + 9) / 1.25;
      if (result >= *((float *)this + 7)) {
        float result = *((float *)this + 7);
      }
      if ((float)((float)(*((float *)this + 11) / 1.25) / 1.25) < result) {
        return (float)(*((float *)this + 11) / 1.25) / 1.25;
      }
    }
  }
  return result;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverOrder(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned int a2)
{
  if (a2 >= 2) {
    int v2 = 2;
  }
  else {
    int v2 = a2;
  }
  return *((float *)this + ((2 * v2) | 1u) + 7);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::assignCoeffsToBiquadStages(uint64_t a1, uint64_t **a2, uint64_t **a3, _DWORD *a4, float *a5, unsigned int a6)
{
  if (*(_DWORD *)(a1 + 8))
  {
    vDSP_Length v10 = 0;
    uint64_t v11 = a1 + 464;
    float v32 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 320);
    uint64_t v33 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 176);
    uint8x8_t v12 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 248);
    BOOL v34 = a6 > 2;
    uint64_t v35 = a1 + 392;
    uint64_t v13 = (8 * (a6 > 2)) | (16 * (a6 > 2));
    while (1)
    {
      if (*(unsigned char *)(a1 + 100))
      {
        DspLib::Biquad::Design::allpassFromPoles((*a2)[3 * v34], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[3 * v34 + 1] - (*a2)[3 * v34]) >> 2), 0, &__p);
        DspLib::Biquad::Filter::setCoefficients(v11, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v37 - (unsigned char *)__p) >> 2), 0, v10);
        if (__p)
        {
          float v37 = __p;
          operator delete(__p);
        }
      }
      else
      {
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v33, *(uint64_t *)((char *)*a2 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a2 + v13 + 8) - *(uint64_t *)((char *)*a2 + v13)) >> 2), 0, v10);
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v33, *(uint64_t *)((char *)*a3 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a3 + v13 + 8) - *(uint64_t *)((char *)*a3 + v13)) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v32, *(uint64_t *)((char *)*a2 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a2 + v13 + 8) - *(uint64_t *)((char *)*a2 + v13)) >> 2), 0, v10);
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v32, *(uint64_t *)((char *)*a3 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a3 + v13 + 8) - *(uint64_t *)((char *)*a3 + v13)) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
      }
      if (a6 >= 3)
      {
        DspLib::Biquad::Design::allpassFromPoles(**a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, &__p);
        if (*(unsigned char *)(a1 + 100))
        {
          int v14 = __p;
          uint64_t v15 = v37 - (unsigned char *)__p;
          uint64_t v16 = a4[1];
          uint64_t v17 = v11;
          vDSP_Length v18 = v10;
        }
        else
        {
          DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, **a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, v10);
          DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, **a3, 0xCCCCCCCCCCCCCCCDLL * (((*a3)[1] - **a3) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
          DspLib::Biquad::Filter::setCoefficients(v35, **a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, v10);
          DspLib::Biquad::Filter::setCoefficients(v35, **a3, 0xCCCCCCCCCCCCCCCDLL * (((*a3)[1] - **a3) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
          int v14 = __p;
          uint64_t v15 = v37 - (unsigned char *)__p;
          int v19 = *(_DWORD *)(a1 + 8);
          uint64_t v16 = 0;
          if (a6 == 4)
          {
            vDSP_Length v18 = (v10 + v19);
            uint64_t v17 = v11;
          }
          else
          {
            vDSP_Length v18 = (v10 + 2 * v19);
            uint64_t v17 = v35;
          }
        }
        DspLib::Biquad::Filter::setCoefficients(v17, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * (v15 >> 2), v16, v18);
        if (__p)
        {
          float v37 = __p;
          operator delete(__p);
        }
        if (a6 == 4) {
          break;
        }
      }
      if (*(unsigned char *)(a1 + 100)) {
        goto LABEL_34;
      }
      if (a6 == 2)
      {
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v33, 0, v10, *a5, *(unsigned int *)(a1 + 8));
        float v27 = a5[1];
        uint64_t v28 = *(unsigned int *)(a1 + 8);
        int v29 = v33;
LABEL_33:
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v29, (DspLib::Biquad::Filter *)1, v10, v27, v28);
        goto LABEL_34;
      }
      if (a6 == 3)
      {
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, 0, v10, *a5, *(unsigned int *)(a1 + 8));
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)1, v10, a5[1], *(unsigned int *)(a1 + 8));
        float v23 = a5[2];
        uint64_t v24 = *(unsigned int *)(a1 + 8);
        int v25 = v33;
        uint64_t v26 = 1;
LABEL_30:
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v25, (DspLib::Biquad::Filter *)v26, v10, v23, v24);
        goto LABEL_31;
      }
      if (a6 < 3) {
        goto LABEL_34;
      }
LABEL_31:
      if (*(unsigned char *)(a1 + 92))
      {
        uint64_t v28 = *(unsigned int *)(a1 + 8);
        float v27 = -1.0;
        int v29 = v32;
        goto LABEL_33;
      }
LABEL_34:
      if (++v10 >= *(unsigned int *)(a1 + 8)) {
        return;
      }
    }
    DspLib::Biquad::Design::allpassFromPoles((*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, &__p);
    if (*(unsigned char *)(a1 + 100))
    {
      unsigned int v20 = __p;
      uint64_t v21 = v37 - (unsigned char *)__p;
      uint64_t v22 = (*a4 + a4[1]);
    }
    else
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, (*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, (v10 + 2 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, (*a3)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a3)[7] - (*a3)[6]) >> 2), 0, (v10 + 3 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients(v35, (*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, (v10 + 2 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients(v35, (*a3)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a3)[7] - (*a3)[6]) >> 2), 0, (v10 + 3 * *(_DWORD *)(a1 + 8)));
      uint64_t v22 = 0;
      unsigned int v20 = __p;
      uint64_t v21 = v37 - (unsigned char *)__p;
    }
    DspLib::Biquad::Filter::setCoefficients(v11, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * (v21 >> 2), v22, v10);
    if (__p)
    {
      float v37 = __p;
      operator delete(__p);
    }
    if (*(unsigned char *)(a1 + 100)) {
      goto LABEL_34;
    }
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, 0, v10, *a5, *(unsigned int *)(a1 + 8));
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)1, v10, a5[1], *(unsigned int *)(a1 + 8));
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)2, v10, a5[2], *(unsigned int *)(a1 + 8));
    float v23 = a5[3];
    uint64_t v24 = *(unsigned int *)(a1 + 8);
    int v25 = v12;
    uint64_t v26 = 3;
    goto LABEL_30;
  }
}

void sub_1BB2FF9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v6 = *(_OWORD *)(a2 + 1);
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = v2;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(a1, (uint64_t)&v5, (uint64_t)&v3);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 16) = *(void *)(a2 + 16);
  if (*(unsigned char *)(a1 + 100))
  {
    if (*(_DWORD *)(a1 + 104) < 2u)
    {
      uint64_t v16 = 0;
      while (!*(unsigned char *)(a1 + 108 + v16))
      {
        if (++v16 == 4)
        {
          uint64_t v16 = 0;
          break;
        }
      }
      float v17 = 0.0;
      if (*(float *)(a1 + 112 + 4 * v16) != -100.0) {
        float v17 = DspLib::dB2Amp((DspLib *)a1, *(float *)(a1 + 112 + 4 * v16));
      }
      long long v22 = *(_OWORD *)a2;
      uint64_t v23 = *(void *)(a2 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a3 + 16);
      DspLib::multiply(&v22, &v20, v17);
    }
    else
    {
      long long v26 = *(_OWORD *)a2;
      uint64_t v27 = *(void *)(a2 + 16);
      long long v24 = *(_OWORD *)a3;
      uint64_t v25 = *(void *)(a3 + 16);
      DspLib::Biquad::Filter::process((void *)(a1 + 464), &v26, &v24);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 8))
    {
      unint64_t v6 = 0;
      do
      {
        DspLib::copy(*(void **)(*(void *)a2 + 8 * v6), *(void *)(a2 + 16), *(void **)(*(void *)(a1 + 152) + 8 * v6));
        if (*(_DWORD *)(a1 + 104) >= 2u) {
          DspLib::copy(*(void **)(*(void *)a2 + 8 * v6), *(void *)(a2 + 16), *(void **)(*(void *)(a1 + 152) + 8 * (v6 + *(unsigned int *)(a1 + 8))));
        }
        ++v6;
      }
      while (v6 < *(unsigned int *)(a1 + 8));
    }
    uint64_t v7 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3;
    uint64_t v8 = *(void *)(a2 + 16);
    v19[0] = *(void *)(a1 + 152);
    v19[1] = v7;
    void v19[2] = v8;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(a1, v19);
    uint64_t v9 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3;
    uint64_t v10 = *(void *)(a2 + 16);
    v18[0] = *(void *)(a1 + 152);
    v18[1] = v9;
    void v18[2] = v10;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(a1, v18);
    unint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(a1 + 152);
        int v14 = *(void **)(v13 + 8 * i);
        vDSP_Length v15 = *(void *)(a2 + 16);
        if (*(_DWORD *)(a1 + 104) < 2u) {
          DspLib::copy(v14, v15, *(void **)(*(void *)a3 + 8 * i));
        }
        else {
          DspLib::add((const float *)v14, v15, *(const float **)(v13 + 8 * (i + v11)), *(void *)(a2 + 16), *(float **)(*(void *)a3 + 8 * i));
        }
        unint64_t v11 = *(unsigned int *)(a1 + 8);
      }
    }
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 104) < 2u)
  {
    uint64_t v6 = 0;
    while (!*(unsigned char *)(a1 + 108 + v6))
    {
      if (++v6 == 4)
      {
        uint64_t v6 = 0;
        break;
      }
    }
    float v7 = *(float *)(a1 + 112 + 4 * v6);
    float v8 = 0.0;
    if (v7 != -100.0) {
      float v8 = DspLib::dB2Amp((DspLib *)a1, v7);
    }
    if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
    {
      unint64_t v9 = 0;
      do
        DspLib::multiply(*(float **)(*a2 + 8 * v9++), a2[2], v8);
      while (v9 < (2 * *(_DWORD *)(a1 + 8)));
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 224);
    uint64_t v5 = a2[2];
    *(void *)&long long v16 = *a2;
    *((void *)&v16 + 1) = v4;
    uint64_t v17 = v5;
    *(void *)&long long v14 = v16;
    *((void *)&v14 + 1) = v4;
    uint64_t v15 = v5;
    DspLib::Biquad::Filter::process((void *)(a1 + 176), &v16, &v14);
  }
  if (*(_DWORD *)(a1 + 104) >= 3u)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        if (*(_DWORD *)(a1 + 104) == 4)
        {
          DspLib::copy(*(void **)(*a2 + 8 * (i + v10)), a2[2], *(void **)(*a2 + 24 * v10 + 8 * i));
          unint64_t v10 = *(unsigned int *)(a1 + 8);
        }
        DspLib::copy(*(void **)(*a2 + 8 * (i + v10)), a2[2], *(void **)(*a2 + 16 * v10 + 8 * i));
        DspLib::copy(*(void **)(*a2 + 8 * i), a2[2], *(void **)(*a2 + 8 * (i + *(unsigned int *)(a1 + 8))));
        unint64_t v10 = *(unsigned int *)(a1 + 8);
      }
    }
    uint64_t v12 = *(void *)(a1 + 296);
    uint64_t v13 = a2[2];
    *(void *)&long long v16 = *a2;
    *((void *)&v16 + 1) = v12;
    uint64_t v17 = v13;
    *(void *)&long long v14 = v16;
    *((void *)&v14 + 1) = v12;
    uint64_t v15 = v13;
    DspLib::Biquad::Filter::process((void *)(a1 + 248), &v16, &v14);
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 104);
  if (v4 >= 3)
  {
    uint64_t v5 = *(void *)(a1 + 440);
    uint64_t v6 = a2[2];
    *(void *)&long long v16 = *a2;
    *((void *)&v16 + 1) = v5;
    uint64_t v17 = v6;
    *(void *)&long long v14 = v16;
    *((void *)&v14 + 1) = v5;
    uint64_t v15 = v6;
    DspLib::Biquad::Filter::process((void *)(a1 + 392), &v16, &v14);
    unint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      for (unint64_t i = 0; i < v7; ++i)
      {
        DspLib::add(*(float **)(*a2 + 8 * i), a2[2], *(const float **)(*a2 + 8 * (i + v7)));
        int v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 3)
        {
          DspLib::copy(*(void **)(*a2 + 16 * *(unsigned int *)(a1 + 8) + 8 * i), a2[2], *(void **)(*a2 + 8 * (i + *(unsigned int *)(a1 + 8))));
        }
        else if (v9 == 4)
        {
          DspLib::add(*(const float **)(*a2 + 16 * *(unsigned int *)(a1 + 8) + 8 * i), a2[2], *(const float **)(*a2 + 24 * *(unsigned int *)(a1 + 8) + 8 * i), a2[2], *(float **)(*a2 + 8 * (i + *(unsigned int *)(a1 + 8))));
        }
        unint64_t v7 = *(unsigned int *)(a1 + 8);
      }
    }
    unsigned int v4 = *(_DWORD *)(a1 + 104);
  }
  if (v4 >= 2)
  {
    uint64_t v10 = *(void *)(a1 + 368);
    uint64_t v11 = a2[2];
    *(void *)&long long v16 = *a2;
    *((void *)&v16 + 1) = v10;
    uint64_t v17 = v11;
    *(void *)&long long v14 = v16;
    *((void *)&v14 + 1) = v10;
    uint64_t v15 = v11;
    DspLib::Biquad::Filter::process((void *)(a1 + 320), &v16, &v14);
    if (*(_DWORD *)(a1 + 104) == 4)
    {
      uint64_t v12 = *(void *)(a1 + 512);
      uint64_t v13 = a2[2];
      *(void *)&long long v16 = *a2;
      *((void *)&v16 + 1) = v12;
      uint64_t v17 = v13;
      *(void *)&long long v14 = v16;
      *((void *)&v14 + 1) = v12;
      uint64_t v15 = v13;
      DspLib::Biquad::Filter::process((void *)(a1 + 464), &v16, &v14);
    }
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::analyze(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 100))
  {
    if (*(_DWORD *)(a1 + 8))
    {
      unint64_t v4 = 0;
      do
      {
        DspLib::copy(*(void **)(*a2 + 8 * v4), a2[2], *(void **)(*(void *)(a1 + 152) + 8 * v4));
        if (*(_DWORD *)(a1 + 104) >= 2u) {
          DspLib::copy(*(void **)(*a2 + 8 * v4), a2[2], *(void **)(*(void *)(a1 + 152) + 8 * (v4 + *(unsigned int *)(a1 + 8))));
        }
        ++v4;
      }
      while (v4 < *(unsigned int *)(a1 + 8));
    }
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3;
    uint64_t v6 = a2[2];
    v7[0] = *(void *)(a1 + 152);
    v7[1] = v5;
    v7[2] = v6;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(a1, v7);
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::synthesize(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3;
  uint64_t v5 = a2[2];
  v11[0] = *(void *)(a1 + 152);
  v11[1] = v4;
  void v11[2] = v5;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(a1, v11);
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v8 = *(void *)(a1 + 152);
      int v9 = *(void **)(v8 + 8 * i);
      vDSP_Length v10 = a2[2];
      if (*(_DWORD *)(a1 + 104) < 2u) {
        DspLib::copy(v9, v10, *(void **)(*a2 + 8 * i));
      }
      else {
        DspLib::add((const float *)v9, v10, *(const float **)(v8 + 8 * (i + v6)), a2[2], *(float **)(*a2 + 8 * i));
      }
      unint64_t v6 = *(unsigned int *)(a1 + 8);
    }
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::applyGain(DspLib::FourBandRandomOrderLrFilterBank *this, DspLib::Biquad::Filter *a2, unsigned int a3, float a4, uint64_t a5)
{
  vDSP_Length v6 = a2 * a5 + a3;
  DspLib::Biquad::Filter::section(this, 0, v6, &v10);
  *(float32x2_t *)v10.f32 = vmul_n_f32(*(float32x2_t *)v10.f32, a4);
  v10.f32[2] = v10.f32[2] * a4;
  int v9 = v11;
  float32x4_t v8 = v10;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)&v8, 1, 0, v6);
}

DspLib::VirtualBass::Algorithm *DspLib::VirtualBass::Algorithm::Algorithm(DspLib::VirtualBass::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::VirtualBass::Parameters::kDefault, 0x30uLL, (uint64_t)&DspLib::VirtualBass::Parameters::kMinimum, 48, (uint64_t)&DspLib::VirtualBass::Parameters::kMaximum, 48);
  *(void *)uint64_t v2 = &unk_1F14A81A0;
  *(_WORD *)(v2 + 216) = 0;
  *(unsigned char *)(v2 + 218) = 1;
  *(_DWORD *)(v2 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 832) = 0u;
  *(_OWORD *)(v2 + 848) = 0u;
  *(_OWORD *)(v2 + 864) = 0u;
  *(_OWORD *)(v2 + 88DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  *(unsigned char *)(v2 + 464) = 0;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(unsigned char *)(v2 + 536) = 0;
  *(_OWORD *)(v2 + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(unsigned char *)(v2 + 608) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(unsigned char *)(v2 + 68DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v2 + 752) = 0;
  *(_OWORD *)(v2 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  *(_OWORD *)(v2 + 688) = 0u;
  *(_OWORD *)(v2 + 704) = 0u;
  *(_OWORD *)(v2 + 76DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  *(unsigned char *)(v2 + 824) = 0;
  *(_OWORD *)(v2 + 896) = xmmword_1BB873AB0;
  *(_DWORD *)(v2 + 912) = 0;
  *(void *)&_Q0 = 0x100000001;
  *((void *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)(v2 + 916) = _Q0;
  *(_DWORD *)(v2 + 932) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 117) = _Q0;
  DspLib::NonLinearDevice::Algorithm::Algorithm((DspLib::NonLinearDevice::Algorithm *)(v2 + 944));
  *((_DWORD *)this + 334) = 10;
  *(void *)((char *)this + 134DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)((char *)this + 1348) = 0u;
  *((_DWORD *)this + 341) = 981668463;
  *((void *)this + 171) = 0x3A83126F00000000;
  *((void *)this + 172) = 0;
  *((void *)this + 175) = 0x3A83126F00000000;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((void *)this + 176) = 0x3A83126F00000000;
  *((_DWORD *)this + 354) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 9DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = xmmword_1BB876200;
  *((_DWORD *)this + 364) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 148DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((void *)this + 189) = 981668463;
  *((_DWORD *)this + 38DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 981668463;
  *((unsigned char *)this + 184DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 1848) = 0;
  *((unsigned char *)this + 1992) = 0;
  *(_OWORD *)((char *)this + 1681) = 0u;
  *(_OWORD *)((char *)this + 1668) = 0u;
  *(_OWORD *)((char *)this + 1652) = 0u;
  *(_OWORD *)((char *)this + 1636) = 0u;
  *(_OWORD *)((char *)this + 162DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 154DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1524) = 0u;
  *((_OWORD *)this + 125) = xmmword_1BB876210;
  return this;
}

void sub_1BB3003DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 103));
  DspLib::Biquad::Filter::~Filter(v13);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 85));
  DspLib::Biquad::Filter::~Filter(v12);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 67));
  DspLib::Biquad::Filter::~Filter(v11);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 49));
  long long v14 = (void *)v10[46];
  if (v14)
  {
    v10[47] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)v10[43];
  if (v15)
  {
    v10[44] = v15;
    operator delete(v15);
  }
  long long v16 = (void *)v10[40];
  if (v16)
  {
    v10[41] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)v10[37];
  if (v17)
  {
    v10[38] = v17;
    operator delete(v17);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *float32x4_t v10 = &unk_1F14A87D8;
  vDSP_Length v18 = (void *)v10[4];
  if (v18)
  {
    v10[5] = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::VirtualBass::Algorithm::initialize(DspLib::VirtualBass::Algorithm *this, int a2, double a3)
{
  uint64_t v5 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((*(unsigned int (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this) >= 9)
  {
    int v97 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    int v98 = 83;
LABEL_102:
    printf("DSP Sound assertion in %s at line %d\n", v97, v98);
    ++DspLibDebug::mAssertCounter;
    return v5;
  }
  if (!(*(unsigned int (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this))
  {
    int v97 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    int v98 = 84;
    goto LABEL_102;
  }
  *((unsigned char *)this + 8) = 1;
  unsigned int v6 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 28, v6);
  uint64_t v7 = *((void *)this + 28);
  uint64_t v8 = *((void *)this + 29);
  while (v7 != v8)
  {
    unint64_t v9 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
    std::vector<float>::resize(v7, v9);
    v7 += 24;
  }
  unsigned int v10 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 31, v10);
  uint64_t v11 = *((void *)this + 31);
  uint64_t v12 = *((void *)this + 32);
  while (v11 != v12)
  {
    unint64_t v13 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
    std::vector<float>::resize(v11, v13);
    v11 += 24;
  }
  unsigned int v14 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 34, v14);
  uint64_t v15 = *((void *)this + 34);
  uint64_t v16 = *((void *)this + 35);
  while (v15 != v16)
  {
    unint64_t v17 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
    std::vector<float>::resize(v15, v17);
    v15 += 24;
  }
  unint64_t v18 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
  std::vector<float>::resize((uint64_t)this + 296, v18);
  unint64_t v19 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
  std::vector<float>::resize((uint64_t)this + 320, v19);
  unint64_t v20 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
  std::vector<float>::resize((uint64_t)this + 344, v20);
  unint64_t v21 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
  std::vector<float>::resize((uint64_t)this + 368, v21);
  long long v22 = (DspLib::VirtualBass::Algorithm *)((char *)this + 1696);
  for (uint64_t i = 1648; i != 1696; i += 24)
  {
    unint64_t v24 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
    std::vector<float>::resize((uint64_t)this + i, v24);
  }
  unsigned int v25 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 216))(this);
  LODWORD(v11DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  std::vector<float>::assign((char **)this + 183, v25, &v110);
  unsigned int v26 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 392), v26, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 464), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 536), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 608), 1uLL, 1uLL);
  unsigned int v27 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 752), v27, 1uLL);
  uint64_t v28 = (DspLib::VirtualBass::Algorithm *)((char *)this + 824);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 824), 1uLL, 0);
  *((void *)this + 195) = *((void *)this + 194);
  *((void *)this + 192) = *((void *)this + 191);
  uint64_t v30 = (void *)*((void *)this + 201);
  float v31 = (void *)*((void *)this + 200);
  while (v30 != v31)
  {
    v30 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v30);
  }
  *((void *)this + 201) = v31;
  float v32 = (void *)*((void *)this + 204);
  uint64_t v33 = (void *)*((void *)this + 203);
  while (v32 != v33)
  {
    v32 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v32);
  }
  *((void *)this + 204) = v33;
  unsigned int v107 = 0;
  vDSP_Length v108 = 0;
  uint64_t v109 = 0;
  uint64_t v104 = 0;
  int v105 = 0;
  uint64_t v106 = 0;
  __p = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  DspLib::VirtualBass::Algorithm::populateSRClowpassCoeffs(v29, a3, 8000, (uint64_t)&v107, &v104, (uint64_t)&__p);
  uint64_t v34 = (v108 - (unsigned char *)v107) >> 2;
  *((_DWORD *)this + 502) = v34;
  std::vector<unsigned long>::resize((uint64_t)this + 1576, v34);
  if (*((_DWORD *)this + 502))
  {
    unsigned int v99 = v5;
    unint64_t v35 = 0;
    uint64_t v36 = (char **)((char *)this + 1528);
    float v37 = (void *)((char *)this + 1600);
    float v38 = (void *)((char *)this + 1624);
    float v100 = (char **)((char *)this + 1552);
    do
    {
      uint64_t v39 = (void *)*((void *)this + 195);
      unint64_t v40 = *((void *)this + 196);
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v42 = ((char *)v39 - *v100) >> 3;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v43 = v40 - (void)*v100;
        uint64_t v44 = v43 >> 2;
        if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
          uint64_t v44 = v42 + 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)this + 1568, v45);
        }
        else {
          int v46 = 0;
        }
        float v47 = &v46[8 * v42];
        *(void *)float v47 = 1;
        float v41 = v47 + 8;
        unsigned int v48 = (char *)*((void *)this + 195);
        unsigned int v49 = (char *)*((void *)this + 194);
        if (v48 != v49)
        {
          do
          {
            uint64_t v50 = *((void *)v48 - 1);
            v48 -= 8;
            *((void *)v47 - 1) = v50;
            v47 -= 8;
          }
          while (v48 != v49);
          unsigned int v48 = *v100;
        }
        *((void *)this + 194) = v47;
        *((void *)this + 195) = v41;
        *((void *)this + 196) = &v46[8 * v45];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *uint64_t v39 = 1;
        float v41 = v39 + 1;
      }
      *((void *)this + 195) = v41;
      vDSP_Length v51 = (void *)*((void *)this + 192);
      unint64_t v52 = *((void *)this + 193);
      if ((unint64_t)v51 >= v52)
      {
        uint64_t v54 = ((char *)v51 - *v36) >> 3;
        if ((unint64_t)(v54 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v52 - (void)*v36;
        uint64_t v56 = v55 >> 2;
        if (v55 >> 2 <= (unint64_t)(v54 + 1)) {
          uint64_t v56 = v54 + 1;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57) {
          float v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)this + 1544, v57);
        }
        else {
          float v58 = 0;
        }
        float v59 = &v58[8 * v54];
        *(void *)float v59 = 1;
        BOOL v53 = v59 + 8;
        float v60 = (char *)*((void *)this + 192);
        unsigned int v61 = (char *)*((void *)this + 191);
        if (v60 != v61)
        {
          do
          {
            uint64_t v62 = *((void *)v60 - 1);
            v60 -= 8;
            *((void *)v59 - 1) = v62;
            v59 -= 8;
          }
          while (v60 != v61);
          float v60 = *v36;
        }
        *((void *)this + 191) = v59;
        *((void *)this + 192) = v53;
        *((void *)this + 193) = &v58[8 * v57];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *vDSP_Length v51 = 1;
        BOOL v53 = v51 + 1;
      }
      *((void *)this + 192) = v53;
      unint64_t v63 = *((void *)this + 201);
      unint64_t v64 = *((void *)this + 202);
      if (v63 >= v64)
      {
        unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *v37) >> 3);
        unint64_t v67 = v66 + 1;
        if (v66 + 1 > 0x38E38E38E38E38ELL) {
          goto LABEL_103;
        }
        unint64_t v68 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *v37) >> 3);
        if (2 * v68 > v67) {
          unint64_t v67 = 2 * v68;
        }
        if (v68 >= 0x1C71C71C71C71C7) {
          unint64_t v69 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v69 = v67;
        }
        vDSP_Length v114 = (char *)this + 1616;
        if (v69) {
          float v70 = (float32x2_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>((uint64_t)this + 1616, v69);
        }
        else {
          float v70 = 0;
        }
        unint64_t v71 = &v70[9 * v66];
        vDSP_Length v110 = v70;
        vDSP_Length v111 = v71;
        float v113 = &v70[9 * v69];
        *(_OWORD *)v71->f32 = 0u;
        *(_OWORD *)v71[2].f32 = 0u;
        *(_OWORD *)v71[4].f32 = 0u;
        *(_OWORD *)v71[6].f32 = 0u;
        v71[8] = 0;
        unsigned int v112 = (char *)&v71[9];
        std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer((uint64_t *)this + 200, &v110);
        unint64_t v65 = *((void *)this + 201);
        std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer((uint64_t)&v110);
      }
      else
      {
        *(void *)(v63 + 64) = 0;
        *(_OWORD *)(v63 + 32) = 0u;
        *(_OWORD *)(v63 + 48) = 0u;
        *(_OWORD *)unint64_t v63 = 0u;
        *(_OWORD *)(v63 + 16) = 0u;
        unint64_t v65 = v63 + 72;
        *((void *)this + 201) = v63 + 72;
      }
      *((void *)this + 201) = v65;
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*((void *)this + 200) + 72 * v35), 1uLL, 1uLL);
      unint64_t v72 = *((void *)this + 204);
      unint64_t v73 = *((void *)this + 205);
      if (v72 >= v73)
      {
        unint64_t v75 = 0x8E38E38E38E38E39 * ((uint64_t)(v72 - *v38) >> 3);
        unint64_t v76 = v75 + 1;
        if (v75 + 1 > 0x38E38E38E38E38ELL) {
LABEL_103:
        }
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        unint64_t v77 = 0x8E38E38E38E38E39 * ((uint64_t)(v73 - *v38) >> 3);
        if (2 * v77 > v76) {
          unint64_t v76 = 2 * v77;
        }
        if (v77 >= 0x1C71C71C71C71C7) {
          unint64_t v78 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v78 = v76;
        }
        vDSP_Length v114 = (char *)this + 1640;
        if (v78) {
          long long v79 = (float32x2_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>((uint64_t)this + 1640, v78);
        }
        else {
          long long v79 = 0;
        }
        BOOL v80 = &v79[9 * v75];
        vDSP_Length v110 = v79;
        vDSP_Length v111 = v80;
        float v113 = &v79[9 * v78];
        *(_OWORD *)v80->f32 = 0u;
        *(_OWORD *)v80[2].f32 = 0u;
        *(_OWORD *)v80[4].f32 = 0u;
        *(_OWORD *)v80[6].f32 = 0u;
        v80[8] = 0;
        unsigned int v112 = (char *)&v80[9];
        std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer((uint64_t *)this + 203, &v110);
        unint64_t v74 = *((void *)this + 204);
        std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer((uint64_t)&v110);
      }
      else
      {
        *(void *)(v72 + 64) = 0;
        *(_OWORD *)(v72 + 32) = 0u;
        *(_OWORD *)(v72 + 48) = 0u;
        *(_OWORD *)unint64_t v72 = 0u;
        *(_OWORD *)(v72 + 16) = 0u;
        unint64_t v74 = v72 + 72;
        *((void *)this + 204) = v72 + 72;
      }
      *((void *)this + 204) = v74;
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*((void *)this + 203) + 72 * v35++), 1uLL, 1uLL);
      unint64_t v81 = *((unsigned int *)this + 502);
    }
    while (v35 < v81);
    *((_DWORD *)this + 501) = 1;
    if (v81)
    {
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      unint64_t v84 = 0;
      do
      {
        unsigned int v85 = *((_DWORD *)v107 + v84);
        unint64_t v86 = *((unsigned int *)__p + v84);
        std::vector<DspLib::Biquad::Section>::vector(&v110, v86);
        DspLib::Biquad::read(*((void *)v104 + v84), 5 * v86, (uint64_t)v110, 0xCCCCCCCCCCCCCCCDLL * (((char *)v111 - (char *)v110) >> 2));
        DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)(*v37 + v83), v86);
        DspLib::Biquad::Filter::setCoefficients(*v37 + v83, (uint64_t)v110, 0xCCCCCCCCCCCCCCCDLL * (((char *)v111 - (char *)v110) >> 2), 0, 0x41uLL);
        float v87 = v110;
        float32x2_t *v110 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v110), (double)v85));
        float32_t v88 = (double)v85 * v87[1].f32[0];
        v87[1].f32[0] = v88;
        DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)(*v38 + v83), v86);
        DspLib::Biquad::Filter::setCoefficients(*v38 + v83, (uint64_t)v110, 0xCCCCCCCCCCCCCCCDLL * (((char *)v111 - (char *)v110) >> 2), 0, 0x41uLL);
        if (v85)
        {
          float v90 = (unsigned int *)&(*v100)[v82];
          *float v90 = v85;
          v90[1] = 0;
          float v91 = (unsigned int *)&(*v36)[v82];
          *float v91 = v85;
          v91[1] = 0;
        }
        *((_DWORD *)this + 501) *= v85;
        if (v110)
        {
          vDSP_Length v111 = v110;
          operator delete(v110);
        }
        ++v84;
        v83 += 72;
        v82 += 8;
      }
      while (v84 < *((unsigned int *)this + 502));
      LODWORD(v89) = *((_DWORD *)this + 501);
      double v92 = (double)v89;
    }
    else
    {
      double v92 = 1.0;
    }
    uint64_t v5 = v99;
    uint64_t v28 = (DspLib::VirtualBass::Algorithm *)((char *)this + 824);
    long long v22 = (DspLib::VirtualBass::Algorithm *)((char *)this + 1696);
  }
  else
  {
    *((_DWORD *)this + 501) = 1;
    double v92 = 1.0;
  }
  unsigned int v93 = (*((double *)this + 2) / v92);
  *((_DWORD *)this + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v93;
  DspLib::NonLinearDevice::Algorithm::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 944), 1, (double)v93);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 680), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize(v28, 1uLL, 0);
  (*(void (**)(DspLib::VirtualBass::Algorithm *, void))(*(void *)this + 200))(this, *((unsigned __int8 *)this + 24));
  if (*((unsigned char *)this + 24))
  {
    unsigned int v94 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
    DspLib::AudioMeter::Algorithm::initialize(v22, v94, *((double *)this + 2));
    unsigned int v95 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
    DspLib::AudioMeter::Algorithm::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 1848), v95, *((double *)this + 2));
  }
  else
  {
    std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)v22);
    std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1848);
  }
  (*(void (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 128))(this);
  (*(void (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 136))(this);
  if (__p)
  {
    uint64_t v102 = __p;
    operator delete(__p);
  }
  if (v104)
  {
    int v105 = v104;
    operator delete(v104);
  }
  if (v107)
  {
    vDSP_Length v108 = v107;
    operator delete(v107);
  }
  return v5;
}

void sub_1BB3010F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB30115C()
{
  uint64_t v1 = *(void **)(v0 - 144);
  if (v1)
  {
    *(void *)(v0 - 136) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1BB301124);
}

void DspLib::VirtualBass::Algorithm::populateSRClowpassCoeffs(uint64_t a1, unsigned int a2, int a3, uint64_t a4, void **a5, uint64_t a6)
{
  if (a2 >= 2 * a3)
  {
    uint64_t v9 = 0;
    float v10 = (float)a2;
    unsigned int v11 = 1000;
    float v12 = 1000000.0;
    do
    {
      float v13 = DspLib::VirtualBass::kStartFrequency[v9];
      float v14 = v13 - v10;
      float v15 = vabds_f32(v13, v10);
      if (v15 < v12 && v14 <= 0.0)
      {
        float v12 = v15;
        unsigned int v11 = v9;
      }
      ++v9;
    }
    while (v9 != 9);
    unsigned int v16 = DspLib::VirtualBass::kSRCFactors[v11];
    unint64_t v17 = *(void *)(a4 + 16);
    unint64_t v18 = *(unsigned int **)(a4 + 8);
    if ((unint64_t)v18 >= v17)
    {
      unint64_t v20 = *(unsigned int **)a4;
      uint64_t v21 = ((uint64_t)v18 - *(void *)a4) >> 2;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v17 - (void)v20;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        unsigned int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4 + 16, v24);
        unint64_t v20 = *(unsigned int **)a4;
        unint64_t v18 = *(unsigned int **)(a4 + 8);
      }
      else
      {
        unsigned int v25 = 0;
      }
      unsigned int v26 = (unsigned int *)&v25[4 * v21];
      unsigned int v27 = &v25[4 * v24];
      *unsigned int v26 = v16;
      unint64_t v19 = v26 + 1;
      while (v18 != v20)
      {
        unsigned int v28 = *--v18;
        *--unsigned int v26 = v28;
      }
      *(void *)a4 = v26;
      *(void *)(a4 + 8) = v19;
      *(void *)(a4 + 16) = v27;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *unint64_t v18 = v16;
      unint64_t v19 = v18 + 1;
    }
    *(void *)(a4 + 8) = v19;
    uint64_t v29 = (char *)&DspLib::VirtualBass::kEllipticalCoeff + 80 * v11;
    unint64_t v30 = (unint64_t)a5[2];
    float v31 = a5[1];
    if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = ((char *)v31 - (unsigned char *)*a5) >> 3;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v30 - (void)*a5;
      uint64_t v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
        uint64_t v35 = v33 + 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36) {
        float v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(a5 + 2), v36);
      }
      else {
        float v37 = 0;
      }
      float v38 = &v37[8 * v33];
      uint64_t v39 = &v37[8 * v36];
      *(void *)float v38 = v29;
      float v32 = v38 + 8;
      float v41 = (char *)*a5;
      unint64_t v40 = (char *)a5[1];
      if (v40 != *a5)
      {
        do
        {
          uint64_t v42 = *((void *)v40 - 1);
          v40 -= 8;
          *((void *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        unint64_t v40 = (char *)*a5;
      }
      *a5 = v38;
      a5[1] = v32;
      a5[2] = v39;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *float v31 = v29;
      float v32 = v31 + 1;
    }
    a5[1] = v32;
    unint64_t v43 = *(void *)(a6 + 16);
    uint64_t v44 = *(_DWORD **)(a6 + 8);
    if ((unint64_t)v44 >= v43)
    {
      int v46 = *(_DWORD **)a6;
      uint64_t v47 = ((uint64_t)v44 - *(void *)a6) >> 2;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 62) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v43 - (void)v46;
      if (v49 >> 1 > v48) {
        unint64_t v48 = v49 >> 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        vDSP_Length v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a6 + 16, v50);
        int v46 = *(_DWORD **)a6;
        uint64_t v44 = *(_DWORD **)(a6 + 8);
      }
      else
      {
        vDSP_Length v51 = 0;
      }
      unint64_t v52 = &v51[4 * v47];
      BOOL v53 = &v51[4 * v50];
      *(_DWORD *)unint64_t v52 = 4;
      unint64_t v45 = v52 + 4;
      while (v44 != v46)
      {
        int v54 = *--v44;
        *((_DWORD *)v52 - 1) = v54;
        v52 -= 4;
      }
      *(void *)a6 = v52;
      *(void *)(a6 + 8) = v45;
      *(void *)(a6 + 16) = v53;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v44 = 4;
      unint64_t v45 = v44 + 1;
    }
    *(void *)(a6 + 8) = v45;
  }
}

void DspLib::VirtualBass::Algorithm::uninitialize(DspLib::VirtualBass::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 28);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 31);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 34);
  *((void *)this + 38) = *((void *)this + 37);
  *((void *)this + 41) = *((void *)this + 40);
  *((void *)this + 44) = *((void *)this + 43);
  *((void *)this + 47) = *((void *)this + 46);
  uint64_t v2 = (void *)((char *)this + 1648);
  do
  {
    v2[1] = *v2;
    v2 += 3;
  }
  while (v2 != (void *)((char *)this + 1696));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 392));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 464));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 536));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 608));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 680));
  DspLib::NonLinearDevice::Algorithm::uninitialize((uint64_t)this + 944);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1696);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1848);
  *((void *)this + 195) = *((void *)this + 194);
  *((void *)this + 192) = *((void *)this + 191);
  *((void *)this + 198) = *((void *)this + 197);
  long long v3 = (void *)*((void *)this + 201);
  uint64_t v4 = (void *)*((void *)this + 200);
  while (v3 != v4)
  {
    v3 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v3);
  }
  *((void *)this + 201) = v4;
  uint64_t v5 = (void *)*((void *)this + 204);
  unsigned int v6 = (void *)*((void *)this + 203);
  while (v5 != v6)
  {
    v5 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v5);
  }
  *((void *)this + 204) = v6;
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 752));

  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 824));
}

void DspLib::VirtualBass::Algorithm::reset(DspLib::VirtualBass::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 440));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 512));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 584));
    DspLib::NonLinearDevice::Algorithm::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 944));
    if (*((unsigned char *)this + 1840)) {
      DspLib::AudioMeter::Algorithm::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 1696));
    }
    if (*((unsigned char *)this + 1992)) {
      DspLib::AudioMeter::Algorithm::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 1848));
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 656));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 728));
    *((_DWORD *)this + 341) = 981668463;
    *(void *)((char *)this + 1372) = 981668463;
    *((_DWORD *)this + 351) = 981668463;
    *(void *)((char *)this + 1412) = 981668463;
    *((_DWORD *)this + 378) = 981668463;
    *((void *)this + 19DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 981668463;
    uint64_t v2 = *((void *)this + 194);
    if (*((void *)this + 195) != v2)
    {
      unint64_t v3 = 0;
      unsigned int v4 = 1;
      do
      {
        *(_DWORD *)(v2 + 8 * v3 + 4) = 0;
        *(_DWORD *)(*((void *)this + 191) + 8 * v3 + 4) = 0;
        uint64_t v5 = 9 * v3;
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(*((void *)this + 200) + 72 * v3 + 48));
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(*((void *)this + 203) + 8 * v5 + 48));
        unint64_t v3 = v4;
        uint64_t v2 = *((void *)this + 194);
        ++v4;
      }
      while (v3 < (*((void *)this + 195) - v2) >> 3);
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 800));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 872));
  }
  else
  {
    unsigned int v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 259);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::VirtualBass::Algorithm::setMeteringIsEnabled(DspLib::VirtualBass::Algorithm *this, int a2)
{
  *((unsigned char *)this + 24) = a2;
  uint64_t result = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 32))(this);
  if (result)
  {
    if (a2)
    {
      uint64_t v9 = 0;
      long long v10 = DspLib::AudioMeter::Parameters::kDefault;
      long long v11 = unk_1BB8739E8;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)float v14 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>((uint64_t)this + 1696, (uint64_t)&v9);
      unint64_t v19 = (void **)&v16 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v13 + 1))
      {
        v14[0] = *((void **)&v13 + 1);
        operator delete(*((void **)&v13 + 1));
      }
      unint64_t v19 = (void **)&v12;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v19);
      uint64_t v9 = 0;
      long long v10 = DspLib::AudioMeter::Parameters::kDefault;
      long long v11 = unk_1BB8739E8;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)float v14 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>((uint64_t)this + 1848, (uint64_t)&v9);
      unint64_t v19 = (void **)&v16 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v13 + 1))
      {
        v14[0] = *((void **)&v13 + 1);
        operator delete(*((void **)&v13 + 1));
      }
      unint64_t v19 = (void **)&v12;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v19);
      unsigned int v5 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
      double v6 = (*(double (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 1696), v5, v6);
      unsigned int v7 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
      double v8 = (*(double (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 1848), v7, v8);
    }
    else
    {
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1696);
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1848);
    }
    return (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 128))(this);
  }
  return result;
}

void sub_1BB3019AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DspLib::AudioMeter::Algorithm::~Algorithm((DspLib::AudioMeter::Algorithm *)va);
  _Unwind_Resume(a1);
}

uint64_t DspLib::VirtualBass::Algorithm::latencySamples(DspLib::VirtualBass::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    DspLib::Biquad::Filter::latencySamples((void *)this + 49);
    return (uint64_t)DspLib::Biquad::Filter::latencySamples((void *)this + 94);
  }
  else
  {
    unint64_t v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v3, 309);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  if (*(unsigned char *)(a1 + 8))
  {
    DspLib::clear(a2, __N);
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1696), a2 + 3, 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1848), a2 + 35, 0x20uLL);
    }
    else
    {
      DspLib::fill(a2 + 3, 0x40uLL, -100.0);
    }
    float v5 = *(double *)(a1 + 16);
    a2[1] = v5;
  }
  else
  {
    double v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 317);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::VirtualBass::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  float v5 = (DspLib *)DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    double v6 = *(float **)(a1 + 32);
    float v7 = v6[1];
    *(unsigned char *)(a1 + 218) = *v6 > 0.5;
    *(_DWORD *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = vcvtas_u32_f32(v7);
    *(unsigned char *)(a1 + 217) = v6[17] > 0.5;
    *(unsigned char *)(a1 + 216) = v6[24] > 0.5;
    *(float *)(a1 + 94DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Amp(v5, v6[10]);
    *(float *)(a1 + 936) = DspLib::dB2Amp(v8, *(float *)(*(void *)(a1 + 32) + 44));
    *(float *)(a1 + 896) = DspLib::dB2Amp(v9, *(float *)(*(void *)(a1 + 32) + 48));
    *(float *)(a1 + 90DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Amp(v10, *(float *)(*(void *)(a1 + 32) + 52));
    uint64_t v11 = *(void *)(a1 + 32);
    float v12 = *(float *)(v11 + 100);
    unsigned int v13 = vcvtas_u32_f32(v12);
    if (*(_DWORD *)(a1 + 1336) != v13)
    {
      *(_DWORD *)(a1 + 1336) = v13;
      *(_DWORD *)(a1 + 1404) = 981668463;
      *(void *)(a1 + 1412) = 981668463;
      float v12 = *(float *)(v11 + 100);
    }
    DspLib::AlgorithmBase::setParameter((DspLib::AlgorithmBase *)(a1 + 944), 0, v12);
    float v14 = *(float **)(a1 + 32);
    float v15 = v14[15];
    float v16 = v14[16];
    float v17 = v14[44];
    float v18 = v14[45];
    float v19 = (float)*(unsigned int *)(a1 + 2000);
    *(float *)(a1 + 1348) = v15;
    *(float *)(a1 + 1352) = v16;
    *(float *)(a1 + 136DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v19;
    *(float *)(a1 + 134DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = expf(-1.0 / (float)(v15 * v19));
    *(float *)(a1 + 1344) = expf(-1.0 / (float)(v16 * v19));
    *(float *)(a1 + 1368) = expf(-1.0 / (float)(v18 * v19));
    *(float *)(a1 + 1356) = (float)((float)(v17 * v19) + 1);
    float v20 = v14[15];
    float v21 = v14[16];
    float v22 = v14[44];
    float v23 = v14[45];
    *(float *)(a1 + 1388) = v20;
    *(float *)(a1 + 1392) = v21;
    *(float *)(a1 + 140DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v19;
    *(float *)(a1 + 138DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = expf(-1.0 / (float)(v20 * v19));
    *(float *)(a1 + 1384) = expf(-1.0 / (float)(v21 * v19));
    *(float *)(a1 + 1408) = expf(-1.0 / (float)(v23 * v19));
    *(float *)(a1 + 1396) = (float)((float)(v22 * v19) + 1);
    DspLib::VirtualBass::Compressor::setParameters((DspLib::VirtualBass::Compressor *)(a1 + 1424), v14[22], v14[23], v14[46], v14[18], v14[19], v14[20], v14[21], v14[47], v19);
    uint64_t v24 = *(void *)(a1 + 32);
    v25.i32[0] = *(_DWORD *)(v24 + 20);
    v25.i32[1] = *(_DWORD *)(v24 + 36);
    v25.i64[1] = *(void *)(v24 + 28);
    v26.i64[0] = 0x3F0000003F000000;
    v26.i64[1] = 0x3F0000003F000000;
    uint32x4_t v27 = vcvtq_u32_f32(vmlaq_f32(v26, v26, vcvtq_f32_u32(vcvtq_u32_f32(vrndaq_f32(v25)))));
    *(_DWORD *)(a1 + 916) = v27.i32[1];
    *(uint32x4_t *)(a1 + 92DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v27;
    *(_DWORD *)(a1 + 904) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(a1 + 908) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(a1 + 912) = *(_DWORD *)(v24 + 16);
    DspLib::VirtualBass::Algorithm::setupFilters((DspLib::VirtualBass::Algorithm *)a1);
  }
}

float DspLib::VirtualBass::Compressor::setParameters(DspLib::VirtualBass::Compressor *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  *(float *)this = a5;
  *((float *)this + 1) = a6;
  *((float *)this + 2) = a7;
  *((float *)this + 3) = a8;
  *((float *)this + 4) = (float)(1.0 / a6) + -1.0;
  *((float *)this + 5) = a8 * 0.5;
  *((float *)this + 6) = 1.0 / (float)(a8 + a8);
  *((float *)this + 7) = 1.0 / a6;
  *((float *)this + 8) = a10;
  *((float *)this + 18) = a2;
  *((float *)this + 19) = a3;
  *((float *)this + 21) = a10;
  *((float *)this + 16) = expf(-1.0 / (float)(a2 * a10));
  *((float *)this + 17) = expf(-1.0 / (float)(a3 * a10));
  *((float *)this + 23) = expf(-1.0 / (float)(a9 * a10));
  float result = (float)((float)(a4 * a10) + 1);
  *((float *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = result;
  return result;
}

void DspLib::VirtualBass::Algorithm::setupFilters(DspLib::VirtualBass::Algorithm *this)
{
  unsigned int v2 = *((_DWORD *)this + 232) + 1;
  vDSP_Length v3 = (*((_DWORD *)this + 233) + 1) >> 1;
  unsigned int v4 = (char *)this + 824;
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::VirtualBass::Algorithm *)((char *)this + 824), v3 + (v2 >> 1));
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 232), *((float *)this + 227), (float)*((unsigned int *)this + 500), 0, &v37);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v37, 0xCCCCCCCCCCCCCCCDLL * (v38 - v37), 1, &v35);
  float v5 = v35;
  float v6 = *((float *)this + 234);
  *uint64_t v35 = vmul_n_f32(*v35, v6);
  v5[1].f32[0] = v6 * v5[1].f32[0];
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v4, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * (((char *)v36 - (char *)v5) >> 2), 0, 0x41uLL);
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 233), *((float *)this + 228), (float)*((unsigned int *)this + 500), 0, &v35);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v35, 0xCCCCCCCCCCCCCCCDLL * (((char *)v36 - (char *)v35) >> 2), 1, &v33);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v4, (uint64_t)v33, 0xCCCCCCCCCCCCCCCDLL * ((v34 - v33) >> 2), v2 >> 1, 0x41uLL);
  unsigned int v7 = *((_DWORD *)this + 229) + 1;
  vDSP_Length v8 = v7 & 0xFFFFFFFE;
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::VirtualBass::Algorithm *)((char *)this + 392), v8);
  float v9 = *((double *)this + 2);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 229), *((float *)this + 227), v9, 0, (float **)&v31);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 392, (uint64_t)v31, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)v31) >> 2), 0, 0x41uLL);
  uint64_t v10 = v7 >> 1;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 392, (uint64_t)v31, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (unsigned char *)v31) >> 2), v10, 0x41uLL);
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::VirtualBass::Algorithm *)((char *)this + 464), v8);
  float v11 = *((double *)this + 2);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 229), *((float *)this + 227), v11, 0, &__p);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 464, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 2), 0, 0x41uLL);
  LODWORD(v8) = *((_DWORD *)this + 229);
  unsigned int v12 = (*(uint64_t (**)(DspLib::VirtualBass::Algorithm *))(*(void *)this + 56))(this);
  float v13 = -1.0;
  if ((v8 & 1) == 0) {
    float v13 = 1.0;
  }
  float v14 = v13 / (float)v12;
  float v15 = (float *)__p;
  *(float32x2_t *)__p = vmul_n_f32(*(float32x2_t *)__p, v14);
  void v15[2] = v14 * v15[2];
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 464, (uint64_t)v15, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)v15) >> 2), v10, 0x41uLL);
  if (__p)
  {
    unint64_t v30 = __p;
    operator delete(__p);
  }
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::VirtualBass::Algorithm *)((char *)this + 536), v3 + (v2 & 0xFFFFFFFE));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)v37, 0xCCCCCCCCCCCCCCCDLL * (v38 - v37), 0, 0x41uLL);
  DspLib::Biquad::Design::phaseComplement(v37, 0xCCCCCCCCCCCCCCCDLL * (v38 - v37), (uint64_t *)&__p);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 2), v2 >> 1, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)v35, 0xCCCCCCCCCCCCCCCDLL * (((char *)v36 - (char *)v35) >> 2), v2 & 0xFFFFFFFE, 0x41uLL);
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::VirtualBass::Algorithm *)((char *)this + 608), v3);
  DspLib::Biquad::Design::phaseComplement(v35, 0xCCCCCCCCCCCCCCCDLL * (((char *)v36 - (char *)v35) >> 2), (uint64_t *)&v27);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 608, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (unsigned char *)v27) >> 2), 0, 0x41uLL);
  float v16 = *((double *)this + 2);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 232), *((float *)this + 227), v16, 0, (float **)&v25);
  float v17 = *((double *)this + 2);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 233), *((float *)this + 228), v17, 0, &v23);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v25, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (unsigned char *)v25) >> 2), 1, &v21);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (unsigned char *)v23) >> 2), 1, &v19);
  float v18 = (DspLib::VirtualBass::Algorithm *)((char *)this + 752);
  DspLib::Biquad::Filter::setNumberOfStages(v18, v3 + (v2 >> 1));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v18, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (unsigned char *)v21) >> 2), 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v18, (uint64_t)v19, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (unsigned char *)v19) >> 2), v2 >> 1, 0x41uLL);
  if (v19)
  {
    float v20 = v19;
    operator delete(v19);
  }
  if (v21)
  {
    float v22 = v21;
    operator delete(v21);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v25)
  {
    float32x4_t v26 = v25;
    operator delete(v25);
  }
  if (v27)
  {
    unsigned int v28 = v27;
    operator delete(v27);
  }
  if (__p)
  {
    unint64_t v30 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    float v32 = v31;
    operator delete(v31);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v37)
  {
    float v38 = v37;
    operator delete(v37);
  }
}

void sub_1BB302370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  unint64_t v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(void *)(v28 - 144) = v30;
    operator delete(v30);
  }
  float v31 = *(void **)(v28 - 128);
  if (v31)
  {
    *(void *)(v28 - 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v31;
    operator delete(v31);
  }
  float v32 = *(void **)(v28 - 104);
  if (v32)
  {
    *(void *)(v28 - 96) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::VirtualBass::Algorithm::multiRateDownsample(uint64_t a1, void *a2, unint64_t a3)
{
  if (*(_DWORD *)(a1 + 2008))
  {
    *(_DWORD *)(a1 + 2012) = 0;
    uint64_t v6 = a1 + 1648;
    std::vector<float>::resize(a1 + 1648, (uint64_t)(*(void *)(a1 + 1664) - *(void *)(a1 + 1648)) >> 2);
    unsigned int v7 = (uint64_t *)(v6 + 24 * *(unsigned int *)(a1 + 2012));
    uint64_t v8 = *v7;
    float v9 = *(unsigned int **)(a1 + 1552);
    unint64_t v27 = (v7[1] - *v7) >> 2;
    uint64_t v28 = v8;
    float32x4_t v25 = &v28;
    uint64_t v26 = 1;
    unint64_t v23 = a3;
    uint64_t v24 = a2;
    float v21 = &v24;
    uint64_t v22 = 1;
    DspLib::DownSampler::process(v9, &v21, &v25);
    std::vector<float>::resize(v6 + 24 * *(unsigned int *)(a1 + 2012), v27);
    **(void **)(a1 + 1576) = a3;
    uint64_t result = *(unsigned int *)(a1 + 2012);
    if (*(_DWORD *)(a1 + 2008) >= 2u)
    {
      uint64_t v11 = 8;
      unint64_t v12 = 1;
      do
      {
        float v13 = (uint64_t *)(v6 + 24 * (result == 0));
        uint64_t v14 = *v13;
        uint64_t v15 = (v13[1] - *v13) >> 2;
        float v16 = (unsigned int *)(*(void *)(a1 + 1552) + v11);
        float v17 = (void **)(v6 + 24 * result);
        float v18 = *v17;
        uint64_t v19 = ((unsigned char *)v17[1] - (unsigned char *)*v17) >> 2;
        unint64_t v27 = v15;
        uint64_t v28 = v14;
        float32x4_t v25 = &v28;
        uint64_t v26 = 1;
        unint64_t v23 = v19;
        uint64_t v24 = v18;
        float v21 = &v24;
        uint64_t v22 = 1;
        DspLib::DownSampler::process(v16, &v21, &v25);
        std::vector<float>::resize(v6 + 24 * (*(_DWORD *)(a1 + 2012) == 0), v27);
        uint64_t v20 = *(unsigned int *)(a1 + 2012);
        *(void *)(*(void *)(a1 + 1576) + v11) = (uint64_t)(*(void *)(v6 + 24 * v20 + 8)
                                                            - *(void *)(v6 + 24 * v20)) >> 2;
        uint64_t result = v20 == 0;
        *(_DWORD *)(a1 + 2012) = result;
        ++v12;
        v11 += 8;
      }
      while (v12 < *(unsigned int *)(a1 + 2008));
    }
  }
  else
  {
    std::vector<float>::resize(a1 + 1648, a3);
    DspLib::copy(a2, a3, *(void **)(a1 + 1648));
    return 0;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::multiRateUpsample(uint64_t a1, void *__src, uint64_t a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(a1 + 2008);
  if (v4)
  {
    uint64_t v6 = (v4 - 1);
    if (v6)
    {
      uint64_t v7 = a1 + 1648;
      uint64_t v8 = 8 * v6;
      uint64_t v9 = 72 * v6;
      uint64_t v10 = v6 - 1;
      unsigned int v11 = *(_DWORD *)(a1 + 2012);
      do
      {
        std::vector<float>::resize(v7 + 24 * (v11 == 0), *(void *)(*(void *)(a1 + 1576) + v8));
        unint64_t v12 = (uint64_t *)(v7 + 24 * (*(_DWORD *)(a1 + 2012) == 0));
        uint64_t v13 = *v12;
        uint64_t v14 = (v12[1] - *v12) >> 2;
        uint64_t v15 = (unsigned int *)(*(void *)(a1 + 1528) + v8);
        float v16 = (uint64_t *)(v7 + 24 * *(unsigned int *)(a1 + 2012));
        uint64_t v17 = *v16;
        uint64_t v18 = (v16[1] - *v16) >> 2;
        uint64_t v36 = v17;
        uint64_t v37 = v13;
        uint64_t v33 = &v36;
        uint64_t v34 = 1;
        uint64_t v35 = v18;
        unint64_t v30 = &v37;
        uint64_t v31 = 1;
        uint64_t v32 = v14;
        DspLib::UpSampler::process(v15, &v33, &v30);
        DspLib::Biquad::Filter::process((void *)(*(void *)(a1 + 1624) + v9), v13, v14, v13, v14);
        unsigned int v11 = *(_DWORD *)(a1 + 2012) == 0;
        *(_DWORD *)(a1 + 2012) = v11;
        v8 -= 8;
        v9 -= 72;
      }
      while (v10--);
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(a1 + 2012);
    }
    uint64_t v23 = **(void **)(a1 + 1576);
    uint64_t v24 = *a4;
    a4[1] = v23;
    float32x4_t v25 = *(unsigned int **)(a1 + 1528);
    uint64_t v26 = a1 + 24 * v11;
    uint64_t v27 = *(void *)(v26 + 1648);
    uint64_t v28 = (*(void *)(v26 + 1656) - v27) >> 2;
    uint64_t v36 = v27;
    uint64_t v37 = v24;
    uint64_t v33 = &v36;
    uint64_t v34 = 1;
    uint64_t v35 = v28;
    unint64_t v30 = &v37;
    uint64_t v31 = 1;
    uint64_t v32 = v23;
    DspLib::UpSampler::process(v25, &v33, &v30);
    DspLib::Biquad::Filter::process(*(void **)(a1 + 1624), *a4, a4[1], *a4, a4[1]);
  }
  else
  {
    uint64_t v22 = (void *)*a4;
    DspLib::copy(__src, a3, v22);
  }
}

void DspLib::VirtualBass::Algorithm::processBlock(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v65 = a3;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v63 = a1 + 320;
    std::vector<float>::resize(a1 + 320, v5);
    unint64_t v64 = &v58;
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v58 - v8;
    if (v7 >= 0x200) {
      size_t v10 = 512;
    }
    else {
      size_t v10 = v7;
    }
    bzero((char *)&v58 - v8, v10);
    unsigned int v11 = *(uint64_t **)(a1 + 224);
    uint64_t v12 = *(void *)(a1 + 232) - (void)v11;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    if (v12)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *v11;
        v11 += 3;
        *(void *)&v9[8 * v14++] = v15;
      }
      while (v13 > v14);
    }
    long long v85 = *a2;
    uint64_t v86 = *((void *)a2 + 2);
    v84[0] = v9;
    v84[1] = v13;
    v84[2] = v5;
    float v16 = DspLib::copy(&v85, v84);
    uint64_t v17 = *(uint64_t **)(a1 + 248);
    uint64_t v18 = *(void **)(a1 + 256);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 - v17);
    MEMORY[0x1F4188790](v16);
    uint64_t v22 = (char *)&v58 - v21;
    if (v20 >= 0x200) {
      size_t v23 = 512;
    }
    else {
      size_t v23 = v20;
    }
    bzero((char *)&v58 - v21, v23);
    if (v18 != v17)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = *v17;
        v17 += 3;
        *(void *)&v22[8 * v25++] = v26;
      }
      while (v19 > v25);
    }
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 216))
    {
      v83[0] = v9;
      v83[1] = v13;
      v83[2] = v5;
      v82[0] = v22;
      v82[1] = v19;
      _OWORD v82[2] = v5;
      DspLib::copy(v83, v82);
    }
    else
    {
      float v27 = *(float *)(a1 + 896);
      if (v27 != 1.0)
      {
        v81[0] = (uint64_t)v9;
        v81[1] = v13;
        _OWORD v81[2] = v5;
        DspLib::multiply(v81, v27);
      }
      unsigned int v61 = &v58;
      MEMORY[0x1F4188790](v24);
      unint64_t v30 = (char *)&v58 - v29;
      if (v28 >= 0x200) {
        size_t v31 = 512;
      }
      else {
        size_t v31 = v28;
      }
      bzero((char *)&v58 - v29, v31);
      uint64_t v32 = *(uint64_t **)(a1 + 272);
      uint64_t v33 = *(void *)(a1 + 280) - (void)v32;
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
      if (v33)
      {
        uint64_t v35 = 0;
        do
        {
          uint64_t v36 = *v32;
          v32 += 3;
          *(void *)&v30[8 * v35++] = v36;
        }
        while (v34 > v35);
      }
      *(void *)&long long v79 = v9;
      *((void *)&v79 + 1) = v13;
      uint64_t v80 = v5;
      *(void *)&long long v77 = v30;
      *((void *)&v77 + 1) = v34;
      uint64_t v78 = v5;
      DspLib::Biquad::Filter::process((void *)(a1 + 392), &v79, &v77);
      *(void *)&long long v89 = v30;
      *((void *)&v89 + 1) = v34;
      uint64_t v90 = v5;
      *(void *)&long long v87 = v30;
      *((void *)&v87 + 1) = v34;
      uint64_t v88 = v5;
      DspLib::Biquad::Filter::process((void *)(a1 + 752), &v89, &v87);
      v76[0] = v9;
      v76[1] = v13;
      v76[2] = v5;
      DspLib::sum((uint64_t)v76, *(float **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2);
      DspLib::Biquad::Filter::process((void *)(a1 + 464), *(void *)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2, *(void *)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2);
      unsigned int v37 = DspLib::VirtualBass::Algorithm::multiRateDownsample(a1, *(void **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2);
      unsigned int v38 = v37;
      int v39 = *(_DWORD *)(a1 + 220);
      if (!v39)
      {
        uint64_t v40 = (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2;
        *(void *)&long long v89 = *(void *)(a1 + 320);
        *((void *)&v89 + 1) = v40;
        DspLib::VirtualBass::Algorithm::multiRateUpsample(a1, *(void **)(a1 + 24 * v37 + 1648), (uint64_t)(*(void *)(a1 + 24 * v37 + 1656) - *(void *)(a1 + 24 * v37 + 1648)) >> 2, (uint64_t *)&v89);
        std::vector<float>::resize(v63, *((unint64_t *)&v89 + 1));
        v75[0] = v9;
        v75[1] = v13;
        v75[2] = v5;
        v74[0] = v22;
        v74[1] = v19;
        v74[2] = v5;
        DspLib::copy(v75, v74);
        int v39 = *(_DWORD *)(a1 + 220);
      }
      if (v39 == 2)
      {
        uint64_t v41 = (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2;
        *(void *)&long long v89 = *(void *)(a1 + 320);
        *((void *)&v89 + 1) = v41;
        DspLib::VirtualBass::Algorithm::multiRateUpsample(a1, *(void **)(a1 + 24 * v38 + 1648), (uint64_t)(*(void *)(a1 + 24 * v38 + 1656) - *(void *)(a1 + 24 * v38 + 1648)) >> 2, (uint64_t *)&v89);
        std::vector<float>::resize(v63, *((unint64_t *)&v89 + 1));
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v42 = 0;
          do
            DspLib::copy(*(void **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2, *(void **)&v22[8 * v42++]);
          while (v42 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
      }
      uint64_t v43 = a1 + 24 * v38;
      uint64_t v44 = *(void *)(v43 + 1648);
      uint64_t v45 = (*(void *)(v43 + 1656) - v44) >> 2;
      float v59 = *(const float **)(a1 + 296);
      uint64_t v60 = v45;
      DspLib::Biquad::Filter::process((void *)(a1 + 824), v44, v45, (uint64_t)v59, v45);
      unint64_t v66 = (void *)(v43 + 1656);
      unint64_t v67 = (float **)(v43 + 1648);
      int v46 = *(const float **)(v43 + 1648);
      uint64_t v47 = (uint64_t)(*(void *)(v43 + 1656) - (void)v46) >> 2;
      unint64_t v48 = *(float **)(a1 + 344);
      uint64_t v49 = *(float **)(a1 + 368);
      int v50 = *(unsigned __int8 *)(a1 + 218);
      uint64_t v62 = v48;
      if (v50)
      {
        DspLib::VirtualBass::PeakFollower::process(a1 + 1340, v46, v47, v48);
        DspLib::clip(v62, v47, v49, *(float *)(*(void *)(a1 + 32) + 56), 1000.0);
        DspLib::svdiv(v49, v47, 1.0);
        DspLib::multiply(*v67, (uint64_t)(*v66 - (void)*v67) >> 2, v49);
        DspLib::clip(*v67, (uint64_t)(*v66 - (void)*v67) >> 2, -1.2, 1.2);
        int v46 = *v67;
        uint64_t v51 = (uint64_t)(*v66 - (void)*v67) >> 2;
      }
      else
      {
        uint64_t v51 = v47;
      }
      (*(void (**)(uint64_t, const float *, uint64_t, const float *, uint64_t))(*(void *)(a1 + 944) + 160))(a1 + 944, v46, v51, v46, v51);
      DspLib::Biquad::Filter::process((void *)(a1 + 536), (uint64_t)*v67, (uint64_t)(*v66 - (void)*v67) >> 2, (uint64_t)*v67, (uint64_t)(*v66 - (void)*v67) >> 2);
      if (*(unsigned char *)(a1 + 218))
      {
        DspLib::VirtualBass::PeakFollower::process(a1 + 1380, *v67, (uint64_t)(*v66 - (void)*v67) >> 2, v49);
        DspLib::clip(v49, v47, *(float *)(*(void *)(a1 + 32) + 56), 1000.0);
        DspLib::divide(v62, v47, v49, v47, v49);
        DspLib::multiply(*v67, (uint64_t)(*v66 - (void)*v67) >> 2, v49);
      }
      DspLib::multiply(*v67, (uint64_t)(*v66 - (void)*v67) >> 2, *(float *)(a1 + 940));
      if (*(unsigned char *)(a1 + 217)) {
        DspLib::VirtualBass::Compressor::process(a1 + 1424, *v67, (uint64_t)(*v66 - (void)*v67) >> 2, *v67);
      }
      DspLib::Biquad::Filter::process((void *)(a1 + 608), (uint64_t)*v67, (uint64_t)(*v66 - (void)*v67) >> 2, (uint64_t)*v67, (uint64_t)(*v66 - (void)*v67) >> 2);
      if (*(_DWORD *)(a1 + 220) == 3)
      {
        uint64_t v52 = (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2;
        *(void *)&long long v89 = *(void *)(a1 + 320);
        *((void *)&v89 + 1) = v52;
        DspLib::VirtualBass::Algorithm::multiRateUpsample(a1, *v67, (uint64_t)(*v66 - (void)*v67) >> 2, (uint64_t *)&v89);
        std::vector<float>::resize(v63, *((unint64_t *)&v89 + 1));
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v53 = 0;
          do
            DspLib::copy(*(void **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2, *(void **)&v22[8 * v53++]);
          while (v53 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
      }
      DspLib::add(*v67, (uint64_t)(*v66 - (void)*v67) >> 2, v59);
      if (*(_DWORD *)(a1 + 220) == 1)
      {
        uint64_t v54 = (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2;
        *(void *)&long long v89 = *(void *)(a1 + 320);
        *((void *)&v89 + 1) = v54;
        DspLib::VirtualBass::Algorithm::multiRateUpsample(a1, *v67, (uint64_t)(*v66 - (void)*v67) >> 2, (uint64_t *)&v89);
        std::vector<float>::resize(v63, *((unint64_t *)&v89 + 1));
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v55 = 0;
          do
          {
            DspLib::add(*(const float **)(a1 + 320), (uint64_t)(*(void *)(a1 + 328) - *(void *)(a1 + 320)) >> 2, *(const float **)&v30[8 * v55], v5, *(float **)&v22[8 * v55]);
            ++v55;
          }
          while (v55 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
      }
      float v56 = *(float *)(a1 + 900);
      if (v56 != 1.0)
      {
        v73[0] = (uint64_t)v22;
        v73[1] = v19;
        v73[2] = v5;
        DspLib::multiply(v73, v56);
      }
    }
    v72[0] = v22;
    v72[1] = v19;
    v72[2] = v5;
    long long v70 = *v65;
    uint64_t v71 = *((void *)v65 + 2);
    DspLib::copy(v72, &v70);
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v5, *(double *)(a1 + 16));
      v69[0] = (uint64_t)v9;
      v69[1] = v13;
      v69[2] = v5;
      DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 1696), v69);
      v68[0] = (uint64_t)v22;
      v68[1] = v19;
      v68[2] = v5;
      DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 1848), v68);
    }
  }
  else
  {
    unint64_t v57 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v57, 551);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::VirtualBass::PeakFollower::process(uint64_t a1, const float *a2, vDSP_Length __N, float *a4)
{
  DspLib::abs(a2, __N, a4);
  if (__N)
  {
    uint64_t v8 = 0;
    float result = 1.0;
    do
    {
      float v9 = a4[v8];
      float v11 = *(float *)(a1 + 24);
      float v10 = *(float *)(a1 + 28);
      if (v9 <= v11)
      {
        float v12 = *(float *)(a1 + 4);
        if (v9 < v11)
        {
          unsigned int v13 = *(_DWORD *)(a1 + 36);
          if (*(float *)(a1 + 16) > (float)v13)
          {
            *(_DWORD *)(a1 + 36) = v13 + 1;
            float v12 = 1.0;
            if (v9 >= (float)(v11 * 0.9)) {
              *(_DWORD *)(a1 + 36) = 0;
            }
          }
        }
      }
      else
      {
        float v12 = *(float *)a1;
        *(_DWORD *)(a1 + 36) = 0;
        if (v11 > *(float *)(a1 + 32)) {
          float v10 = v12;
        }
      }
      float v14 = (float)(v9 * (float)(1.0 - v12)) + (float)(v12 * v11);
      *(float *)(a1 + 24) = v14;
      float v15 = (float)((float)(1.0 - v10) * v14) + (float)(v10 * *(float *)(a1 + 32));
      *(float *)(a1 + 32) = v15;
      a4[v8++] = v15;
    }
    while (__N > v8);
  }
  return result;
}

void DspLib::VirtualBass::Compressor::process(uint64_t a1, const float *a2, vDSP_Length __N, float *a4)
{
  uint64_t v8 = *(float **)(a1 + 40);
  DspLib::abs(a2, __N, v8);
  DspLib::add(v8, __N, 0.000001);
  DspLib::amp2dB(v8, __N, 1.0);
  if (__N)
  {
    uint64_t v9 = 0;
    do
    {
      float v10 = v8[v9];
      float v11 = v10 - *(float *)a1;
      float v12 = *(float *)(a1 + 20);
      float v13 = 0.0;
      if (v11 > v12) {
        float v13 = v10 - (float)(*(float *)a1 + (float)(v11 * *(float *)(a1 + 28)));
      }
      if (fabsf(v11) <= v12) {
        float v13 = *(float *)(a1 + 24)
      }
            * (float)((float)(v11 + v12) * (float)-(float)(*(float *)(a1 + 16) * (float)(v11 + v12)));
      v8[v9++] = v13 - *(float *)(a1 + 8);
    }
    while (__N > v9);
  }
  DspLib::VirtualBass::PeakFollower::process(a1 + 64, v8, __N, v8);
  DspLib::negate(v8, __N);
  DspLib::dB2Amp(v8, __N);

  DspLib::multiply(a2, __N, v8, __N, a4);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  float result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    float v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      float v16 = result;
      do
      {
        *(_DWORD *)float v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      uint64_t v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)float v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    float result = std::vector<unsigned int>::__vallocate[abi:ne180100](a1, v9);
    float v10 = a1[1];
    float v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)float v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::~Algorithm(DspLib::VirtualBass::Algorithm *this)
{
  DspLib::VirtualBass::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void **v21;

  *(void *)this = &unk_1F14A81A0;
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1848);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1696);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    vDSP_Length v3 = *(void **)((char *)this + i + 1672);
    if (v3)
    {
      *(void *)((char *)this + i + 168DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
      operator delete(v3);
    }
  }
  uint64_t v21 = (void **)((char *)this + 1624);
  std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 1600);
  std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](&v21);
  int v4 = (void *)*((void *)this + 197);
  if (v4)
  {
    *((void *)this + 198) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 194);
  if (v5)
  {
    *((void *)this + 195) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 191);
  if (v6)
  {
    *((void *)this + 192) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 183);
  if (v7)
  {
    *((void *)this + 184) = v7;
    operator delete(v7);
  }
  *((void *)this + 118) = &unk_1F14A87D8;
  uint64_t v8 = (void *)*((void *)this + 122);
  if (v8)
  {
    *((void *)this + 123) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 872));
  unint64_t v9 = (void *)*((void *)this + 106);
  if (v9)
  {
    *((void *)this + 107) = v9;
    operator delete(v9);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 800));
  float v10 = (void *)*((void *)this + 97);
  if (v10)
  {
    *((void *)this + 98) = v10;
    operator delete(v10);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 728));
  float v11 = (void *)*((void *)this + 88);
  if (v11)
  {
    *((void *)this + 89) = v11;
    operator delete(v11);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 656));
  uint64_t v12 = (void *)*((void *)this + 79);
  if (v12)
  {
    *((void *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
    operator delete(v12);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 584));
  float v13 = (void *)*((void *)this + 70);
  if (v13)
  {
    *((void *)this + 71) = v13;
    operator delete(v13);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 512));
  unint64_t v14 = (void *)*((void *)this + 61);
  if (v14)
  {
    *((void *)this + 62) = v14;
    operator delete(v14);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 440));
  uint64_t v15 = (void *)*((void *)this + 52);
  if (v15)
  {
    *((void *)this + 53) = v15;
    operator delete(v15);
  }
  float v16 = (void *)*((void *)this + 46);
  if (v16)
  {
    *((void *)this + 47) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 43);
  if (v17)
  {
    *((void *)this + 44) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 40);
  if (v18)
  {
    *((void *)this + 41) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 37);
  if (v19)
  {
    *((void *)this + 38) = v19;
    operator delete(v19);
  }
  uint64_t v21 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
  uint64_t v21 = (void **)((char *)this + 224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
  *(void *)this = &unk_1F14A87D8;
  unint64_t v20 = (void *)*((void *)this + 4);
  if (v20)
  {
    *((void *)this + 5) = v20;
    operator delete(v20);
  }
}

uint64_t DspLib::VirtualBass::Algorithm::numStatus(DspLib::VirtualBass::Algorithm *this)
{
  return 67;
}

void std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(void *a1)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 6));
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
}

uint64_t std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 72;
    std::construct_at[abi:ne180100]<DspLib::Biquad::Filter,DspLib::Biquad::Filter,DspLib::Biquad::Filter*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Biquad::Filter,DspLib::Biquad::Filter,DspLib::Biquad::Filter*>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  return a1;
}

void sub_1BB303774(_Unwind_Exception *exception_object)
{
  long long v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>((void *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double DspLib::ControlFreak::Algorithm::Algorithm(DspLib::ControlFreak::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ControlFreak::Parameters::kDefault, 0x1BuLL, (uint64_t)&DspLib::ControlFreak::Parameters::kMinimum, 27, (uint64_t)&DspLib::ControlFreak::Parameters::kMaximum, 27);
  *(void *)uint64_t v1 = &unk_1F14A82B8;
  *(_DWORD *)(v1 + 244) = 0;
  *(_WORD *)(v1 + 248) = 0;
  *(unsigned char *)(v1 + 256) = 0;
  *(void *)(v1 + 224) = 0;
  *(void *)(v1 + 232) = 0;
  *(void *)(v1 + 216) = 0;
  *(unsigned char *)(v1 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(void *)(v1 + 357) = 0;
  *(_OWORD *)(v1 + 368) = xmmword_1BB8767C0;
  *(_DWORD *)(v1 + 384) = 0x40000000;
  *(void *)(v1 + 392) = 0;
  *(_DWORD *)(v1 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v1 + 404) = 0;
  *(void *)(v1 + 408) = 0;
  *(unsigned char *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 432) = 897988541;
  *(void *)(v1 + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v1 + 448) = 0;
  *(unsigned char *)(v1 + 456) = 0;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_OWORD *)(v1 + 544) = 0u;
  *(unsigned char *)(v1 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(unsigned char *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_OWORD *)(v1 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 736) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 764) = 0u;
  *(void *)(v1 + 784) = 1;
  *(void *)(v1 + 856) = 0;
  *(_OWORD *)(v1 + 84DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 864) = 1;
  *(void *)(v1 + 952) = 0;
  *(void *)(v1 + 944) = 0;
  *(void *)(v1 + 96DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 936) = 0;
  *(_OWORD *)(v1 + 92DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 904) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(void *)(v1 + 968) = 1;
  *(_DWORD *)(v1 + 976) = 1;
  *(void *)(v1 + 1064) = 0;
  *(void *)(v1 + 1056) = 0;
  *(void *)(v1 + 1072) = 0;
  *(_DWORD *)(v1 + 1048) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_DWORD *)(v1 + 108DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  *(_DWORD *)(v1 + 1152) = 0;
  *(_OWORD *)(v1 + 1136) = 0u;
  *(_OWORD *)(v1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1104) = 0u;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(void *)(v1 + 1236) = 0;
  *(_OWORD *)(v1 + 122DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1204) = 0u;
  *(_OWORD *)(v1 + 1188) = 0u;
  *(void *)(v1 + 1288) = 0;
  *(void *)(v1 + 128DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 1296) = 0;
  *(void *)(v1 + 1168) = 0;
  *(void *)(v1 + 116DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v1 + 1184) = 0;
  *(void *)(v1 + 1176) = 0;
  *(void *)(v1 + 1256) = 0;
  *(void *)(v1 + 1248) = 0;
  *(unsigned char *)(v1 + 1272) = 0;
  *(void *)(v1 + 1264) = 0;
  *(_DWORD *)(v1 + 130DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1137180672;
  *(void *)(v1 + 140DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 1408) = 0;
  *(void *)(v1 + 1424) = 0;
  *(void *)(v1 + 1416) = 0;
  *(void *)(v1 + 1432) = 0;
  *(_DWORD *)(v1 + 1336) = 0;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 132DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_DWORD *)(v1 + 1392) = 0;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 136DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1344) = 0u;
  *(_DWORD *)(v1 + 144DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 730643660;
  *(unsigned char *)(v1 + 1444) = 0;
  *(void *)(v1 + 1489) = 0;
  *(void *)(v1 + 1484) = 0;
  *(unsigned char *)(v1 + 148DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 1448) = 0u;
  *(_OWORD *)(v1 + 1464) = 0u;
  *(_OWORD *)(v1 + 150DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = xmmword_1BB873AB0;
  *(unsigned char *)(v1 + 1std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = 1;
  *(_DWORD *)(v1 + 152DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v1 + 1608) = 0;
  *(_OWORD *)(v1 + 1576) = 0u;
  *(_OWORD *)(v1 + 1592) = 0u;
  *(_OWORD *)(v1 + 1544) = 0u;
  *(_OWORD *)(v1 + 156DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 1528) = 0u;
  double result = 7.42284587e-51;
  *(_OWORD *)(v1 + 1616) = xmmword_1BB8767D0;
  return result;
}

uint64_t DspLib::ControlFreak::Algorithm::initialize(DspLib::ControlFreak::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4 && (*(unsigned int (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 56))(this))
  {
    uint64_t v5 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 216))(this);
    DspLib::FIR::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1528), *((void **)this + 192), *((void *)this + 195), v5);
    unsigned int v6 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 199, v6);
    DspLib::EnvelopeProcessor::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1184), 1u);
    DspLib::RMS::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1256), 1u, *((double *)this + 2) / 40.0);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 104, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 114, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 128, 1uLL);
    unint64_t v7 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 216))(this);
    DspLib::FIRDecimator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 784), 4uLL, v7);
    DspLib::FIRDecimator::setCoefficients((uint64_t)this + 784, &DspLib::ControlFreak::kDownSampler4coeffs, 0x20uLL);
    unint64_t v8 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 216))(this);
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 864), 4, (v8 >> 2) + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 216, (uint64_t)&DspLib::ControlFreak::kUpSampler4coeffs, 4uLL);
    *((void *)this + 121) = 10;
    unint64_t v9 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 216))(this);
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 976), 10, v9 / 0xA + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 244, (uint64_t)&DspLib::ControlFreak::kUpSampler10coeffs, 0xAuLL);
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::ControlFreak::Algorithm::uninitialize(DspLib::ControlFreak::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 28) = *((void *)this + 27);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 104, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 114, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 128, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 141, 0);
  DspLib::EnvelopeProcessor::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1184));
  DspLib::RMS::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1256));
  DspLib::FIR::uninitialize((void *)this + 191);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 199);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 256));
  DspLib::Biquad::Filter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 664));
  *((unsigned char *)this + 416) = 0;
}

void DspLib::ControlFreak::Algorithm::reset(float **this)
{
  DspLib::clear(this[27], this[28] - this[27]);
  *((_DWORD *)this + 376) = 1065353216;
  *((unsigned char *)this + 1std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = 1;
  *((unsigned char *)this + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 148DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 367) = *((_DWORD *)this + 368);
  *((unsigned char *)this + 1496) = 0;
  *((_DWORD *)this + 371) = *((_DWORD *)this + 372);
  this[182] = 0;
  this[202] = (float *)vdup_n_s32(0x358637BDu);
  *((_DWORD *)this + 406) = 1065353216;
  DspLib::clear(this[196], this[197] - this[196]);
  DspLib::ControlFreak::Algorithm::clearAudioBuffers((DspLib::ControlFreak::Algorithm *)this);
  DspLib::EnvelopeProcessor::reset((DspLib::EnvelopeProcessor *)(this + 148));
  DspLib::FIRDecimator::reset((DspLib::FIRDecimator *)(this + 98));
  unsigned int v2 = this[114];
  uint64_t v3 = this[115];
  while (v2 != v3)
  {
    uint64_t v4 = *((void *)v2 + 1);
    if (*(void *)v2 != v4) {
      bzero(*(void **)v2, (v4 - *(void *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v2 += 6;
  }
  *((_DWORD *)this + 234) = 0;
  *((_DWORD *)this + 243) = 0;
  uint64_t v5 = this[128];
  unsigned int v6 = this[129];
  while (v5 != v6)
  {
    uint64_t v7 = *((void *)v5 + 1);
    if (*(void *)v5 != v7) {
      bzero(*(void **)v5, (v7 - *(void *)v5) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v5 += 6;
  }
  *((_DWORD *)this + 262) = 0;
  DspLib::RMS::reset((DspLib::RMS *)(this + 157));
  unint64_t v8 = this[141];
  unint64_t v9 = this[142];
  while (v8 != v9)
  {
    uint64_t v10 = *((void *)v8 + 1);
    if (*(void *)v8 != v10) {
      bzero(*(void **)v8, (v10 - *(void *)v8) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v8 += 6;
  }
  *((_DWORD *)this + 288) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(this + 38));

  DspLib::Saturation::SmartSaturation::reset((DspLib::Saturation::SmartSaturation *)(this + 45));
}

void DspLib::ControlFreak::Algorithm::clearAudioBuffers(DspLib::ControlFreak::Algorithm *this)
{
  unsigned int v2 = (DspLib::CircularDelay *)*((void *)this + 199);
  uint64_t v3 = (DspLib::CircularDelay *)*((void *)this + 200);
  while (v2 != v3)
  {
    DspLib::CircularDelay::reset(v2);
    unsigned int v2 = (DspLib::CircularDelay *)((char *)v2 + 32);
  }
  if (*((unsigned char *)this + 416))
  {
    DspLib::Saturation::SmartSaturation::reset((DspLib::ControlFreak::Algorithm *)((char *)this + 360));
  }
}

void DspLib::Saturation::SmartSaturation::reset(DspLib::Saturation::SmartSaturation *this)
{
  *(_OWORD *)((char *)this + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = xmmword_1BB8767E0;
  *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 352));
  DspLib::CircularDelay::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 384));
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 144));
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 248));
  unsigned int v2 = (DspLib::Saturation::OversampledProcess *)*((void *)this + 47);
  if (v2)
  {
    DspLib::Saturation::OversampledProcess::reset(v2);
  }
}

uint64_t DspLib::ControlFreak::Algorithm::numStatus(DspLib::ControlFreak::Algorithm *this)
{
  return 9;
}

double DspLib::ControlFreak::Algorithm::latencySamples(DspLib::ControlFreak::Algorithm *this)
{
  if (!*((unsigned char *)this + 8))
  {
    unsigned int v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ControlFreak/dsp/DspLibControlFreak.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 123);
    ++DspLibDebug::mAssertCounter;
  }
  double v2 = 0.0;
  double v3 = 0.0;
  if (*((unsigned char *)this + 249))
  {
    LODWORD(v3) = *((_DWORD *)this + 380);
    double v3 = (double)*(unint64_t *)&v3;
  }
  uint64_t v4 = *((void *)this + 92);
  if (v4) {
    double v2 = (float)(*(float *)(v4 + 24) / (float)*(unsigned int *)(v4 + 16))
  }
       + (float)(*(float *)(v4 + 24) / (float)*(unsigned int *)(v4 + 16));
  return v3 + v2;
}

void DspLib::ControlFreak::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    DspLib::ControlFreak::Algorithm::setParameterInputGain((DspLib::ControlFreak::Algorithm *)a1);
    DspLib::ControlFreak::Algorithm::configureInputHPF((DspLib::ControlFreak::Algorithm *)a1);
    unsigned int v6 = *(float **)(a1 + 32);
    BOOL v7 = v6[11] >= 0.5 && *v6 < 0.5;
    *(unsigned char *)(a1 + 249) = v7;
    *(float *)(a1 + 244) = DspLib::dB2Amp(v5, v6[13]);
    uint64_t v10 = *(float **)(a1 + 32);
    if (v10[18] < 0.5 || *v10 >= 0.5)
    {
      char v11 = 0;
    }
    else
    {
      BOOL isEqual = (DspLib *)DspLib::isEqual(isEqual, v10[13], 0.0, 1.0e-20);
      char v11 = isEqual ^ 1;
      uint64_t v10 = *(float **)(a1 + 32);
    }
    *(unsigned char *)(a1 + 248) = v11;
    LODWORD(v9) = vcvtad_u64_f64(*(double *)(a1 + 16) * v10[2] / 1000.0);
    *(_DWORD *)(a1 + 152DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    if (*(void *)(a1 + 1560) != v9)
    {
      std::vector<float>::vector(&v49, v9);
      DspLib::makeRaisedCosineWindow(v49, v50 - v49);
      DspLib::FIR::initialize((DspLib::FIR *)(a1 + 1528), v49, v50 - v49, *(void *)(a1 + 1528));
      DspLib::clear(*(float **)(a1 + 1568), (uint64_t)(*(void *)(a1 + 1576) - *(void *)(a1 + 1568)) >> 2);
      BOOL isEqual = (DspLib *)v49;
      if (v49)
      {
        int v50 = v49;
        operator delete(v49);
      }
    }
    uint64_t v12 = *(DspLib::CircularDelay **)(a1 + 1592);
    float v13 = *(DspLib::CircularDelay **)(a1 + 1600);
    while (v12 != v13)
    {
      DspLib::CircularDelay::setLength(v12, *(unsigned int *)(a1 + 1520));
      uint64_t v12 = (DspLib::CircularDelay *)((char *)v12 + 32);
    }
    float v14 = *(float *)(a1 + 1468);
    float v15 = DspLib::dB2Amp(isEqual, *(float *)(*(void *)(a1 + 32) + 16) + -0.00002);
    if (!DspLib::isEqual(v16, v14, v15, 1.0e-20) && *(float *)(*(void *)(a1 + 32) + 80) == 0.0)
    {
      float v17 = DspLib::maxv(*(const float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2);
      if (!DspLib::isEqual(v18, v17, 0.0, 1.0e-20)) {
        DspLib::FIR::scaleHistory((float **)(a1 + 1528), (float)(v15 / v17) / (float)(v14 / v17));
      }
    }
    DspLib::ControlFreak::Algorithm::RampedValue::set((DspLib::ControlFreak::Algorithm::RampedValue *)(a1 + 1468), v15, vcvtad_u64_f64(*(double *)(a1 + 16) * *(float *)(*(void *)(a1 + 32) + 80) * 0.00100000005));
    if (*(float *)(*(void *)(a1 + 32) + 32) >= 0.5)
    {
      if (*(void *)(a1 + 1136) == *(void *)(a1 + 1128))
      {
        unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 1128), v19);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1080), 4, v20);
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1080), (uint64_t)&DspLib::kTruePeakFIRcoefficients, 0x30uLL);
      }
    }
    else
    {
      std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 1128), 0);
    }
    unsigned int v21 = *(_DWORD *)(a1 + 1520)
        + vcvtad_u64_f64(*(double *)(a1 + 16) * *(float *)(*(void *)(a1 + 32) + 12) / 1000.0);
    *(_DWORD *)(a1 + 776) = (v21 & 0xFFFFFFFE) + 2;
    uint64_t v22 = v21 | 1;
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1) + v22;
    if (v23 != (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2)
    {
      std::vector<float>::resize(a1 + 216, v23);
      DspLib::clear(*(float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2);
      unsigned int v24 = *(_DWORD *)(a1 + 1520);
      if (v24 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v24;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 4 * (((v25 - 1) >> 2) + 1);
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      __n128 v28 = MEMORY[0x1F4188790](v27);
      unint64_t v30 = (float *)((char *)&v49 - v29);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v28);
      MEMORY[0x1F4188790](v31);
      unint64_t v34 = (float **)((char *)&v49 - v33);
      if (v32 >= 0x200) {
        size_t v35 = 512;
      }
      else {
        size_t v35 = v32;
      }
      bzero((char *)&v49 - v33, v35);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unint64_t v36 = 0;
        uint64_t v37 = 4 * v26;
        do
        {
          v34[v36++] = v30;
          unint64_t v30 = (float *)((char *)v30 + v37);
        }
        while (v36 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
      unint64_t v38 = *(unsigned int *)(a1 + 1520);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        do
        {
          DspLib::CircularDelay::read((char **)(*(void *)(a1 + 1592) + v39), *(unsigned int *)(a1 + 1520), (char *)v34[v40++], v38);
          v39 += 32;
        }
        while (v40 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      uint64_t v41 = *v34;
      DspLib::abs(*v34, v38);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) >= 2)
      {
        unint64_t v42 = 1;
        do
          DspLib::vmaxmg(v41, v38, v34[v42++]);
        while (v42 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      DspLib::copy(v41, v38, (void *)(*(void *)(a1 + 216) + 4 * v22));
      DspLib::copy((void *)(*(void *)(a1 + 216) + 4 * *(unsigned int *)(a1 + 1520)), v22, *(void **)(a1 + 216));
    }
    DspLib::RMS::setParameters(a1 + 1256, 1, *(float *)(*(void *)(a1 + 32) + 28));
    float v44 = DspLib::dB2Amp(v43, *(float *)(*(void *)(a1 + 32) + 64) * 0.5);
    *(float *)(a1 + 1448) = v44;
    *(float *)(a1 + 1452) = 1.0 / v44;
    double v45 = *(double *)(a1 + 16);
    int v46 = *(float **)(a1 + 32);
    *(_DWORD *)(a1 + 1464) = vcvtad_u64_f64(v45 * 0.25 / 10.0 * v46[19] / 1000.0);
    float v47 = v45;
    *(float *)(a1 + 1508) = 1.0 - expf(-1.0 / (float)((float)(v46[14] * v47) / 1000.0));
    *(float *)(a1 + 1512) = 1.0 - expf(-1.0 / (float)((float)(v46[17] * v47) / 1000.0));
    *(float *)(a1 + 150DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Amp(v48, -v46[21]);
    DspLib::ControlFreak::Algorithm::configureSaturation((DspLib::ControlFreak::Algorithm *)a1);
  }
}

void sub_1BB304B14(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ControlFreak::Algorithm::setParameterInputGain(DspLib::ControlFreak::Algorithm *this)
{
  double v2 = *((double *)this + 2);
  double v3 = (float *)*((void *)this + 4);
  float v4 = v3[20];
  float v5 = 1.0;
  if (v3[6] >= 0.5) {
    float v5 = DspLib::dB2Amp(this, v3[15]);
  }
  unsigned int v6 = vcvtad_u64_f64(v2 * v4 * 0.00100000005);

  DspLib::ControlFreak::Algorithm::RampedValue::set((DspLib::ControlFreak::Algorithm *)((char *)this + 1484), v5, v6);
}

void DspLib::ControlFreak::Algorithm::configureInputHPF(DspLib::ControlFreak::Algorithm *this)
{
  uint64_t v1 = (DspLib::ControlFreak::Algorithm *)((char *)this + 256);
  if (*(float *)(*((void *)this + 4) + 36) >= 0.5)
  {
    unsigned int v4 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 56))(this);
    DspLib::Biquad::ParametricFilter::initialize(v1, v4, *((double *)this + 2), 1uLL);
    unint64_t v5 = ((unint64_t)*(unsigned int *)(*((void *)this + 4) + 40) << 32) | 9;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v1, v5, (double *)0x3F3504F300000000, 0, 0x41uLL);
  }
  else
  {
    double v2 = (DspLib::ControlFreak::Algorithm *)((char *)this + 256);
    DspLib::Biquad::ParametricFilter::uninitialize(v2);
  }
}

void DspLib::ControlFreak::Algorithm::RampedValue::set(DspLib::ControlFreak::Algorithm::RampedValue *this, float a2, unsigned int a3)
{
  *((float *)this + 1) = a2;
  BOOL isEqual = DspLib::isEqual(this, a2, *(float *)this, 1.0e-20);
  if (!isEqual)
  {
    float v6 = *((float *)this + 1);
    if (a3)
    {
      float v7 = DspLib::amp2dBSafe((DspLib *)isEqual, v6 / *(float *)this, 0.000001);
      *((float *)this + 2) = DspLib::dB2Amp(v8, v7 / (float)a3);
      *((unsigned char *)this + 12) = 1;
    }
    else
    {
      *(float *)this = v6;
    }
  }
}

void DspLib::ControlFreak::Algorithm::configureSaturation(DspLib::ControlFreak::Algorithm *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (*(float *)(v2 + 88) < 0.5 || *(float *)v2 >= 0.5)
  {
    DspLib::Biquad::Filter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 664));
    *((unsigned char *)this + 416) = 0;
  }
  else
  {
    unsigned int v3 = vcvtas_u32_f32(*(float *)(v2 + 20));
    BOOL v4 = v3 != 0;
    unsigned int v5 = v3 - 2;
    if (v5 > 5) {
      int v6 = 1183621120;
    }
    else {
      int v6 = dword_1BB876ABC[v5];
    }
    unsigned int v7 = llroundf(*(float *)(v2 + 48));
    float32x2x2_t v8 = *(float32x2x2_t *)(v2 + 92);
    if (!*((unsigned char *)this + 416))
    {
      float32x2x2_t v14 = *(float32x2x2_t *)(v2 + 92);
      int v9 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 56))(this);
      double v10 = *((double *)this + 2);
      uint64_t v11 = (*(uint64_t (**)(DspLib::ControlFreak::Algorithm *))(*(void *)this + 216))(this);
      DspLib::Saturation::SmartSaturation::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 360), v9, v10, v11);
      float32x2x2_t v8 = v14;
    }
    LODWORD(v15) = v7;
    BYTE4(v15) = v4;
    DWORD2(v15) = v6;
    uint64_t v12 = (float *)&v15 + 3;
    unint64_t v13 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    vst2_f32(v12, v8);
    DspLib::Saturation::SmartSaturation::configure((uint64_t)this + 360, &v15);
  }
}

void DspLib::ControlFreak::Algorithm::processBlock(void *a1, long long *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  vDSP_Length v6 = *((void *)a2 + 2);
  if (*((unsigned char *)a1 + 24)) {
    DspLib::CPUMeasure::start((int8x16_t *)(a1 + 7));
  }
  if (*(void *)*a3 != **(void **)a2)
  {
    long long v41 = *a2;
    uint64_t v42 = *((void *)a2 + 2);
    long long v39 = *(_OWORD *)a3;
    uint64_t v40 = a3[2];
    a1 = DspLib::copy(&v41, &v39);
  }
  if (v6)
  {
    MEMORY[0x1F4188790](a1);
    float32x2x2_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    long long v37 = *(_OWORD *)a3;
    uint64_t v38 = a3[2];
    DspLib::ControlFreak::Algorithm::processInputGain(v5, &v37);
    if (*(unsigned char *)(v5 + 256))
    {
      uint64_t v9 = a3[1];
      uint64_t v10 = a3[2];
      *(void *)&long long v43 = *a3;
      *((void *)&v43 + 1) = v9;
      uint64_t v44 = v10;
      *(void *)&long long v45 = v43;
      *((void *)&v45 + 1) = v9;
      uint64_t v46 = v10;
      DspLib::Biquad::Filter::process((void *)(v5 + 256), &v45, &v43);
    }
    if (*(unsigned char *)(v5 + 24))
    {
      uint64_t v35 = *a3;
      long long v36 = *(_OWORD *)(a3 + 1);
      float v11 = DspLib::maxMagnitude(&v35);
      if (*(float *)(v5 + 1616) >= v11) {
        float v11 = *(float *)(v5 + 1616);
      }
      *(float *)(v5 + 1616) = v11;
    }
    if (*(unsigned char *)(v5 + 416))
    {
      long long v33 = *(_OWORD *)a3;
      uint64_t v34 = a3[2];
      DspLib::Saturation::SmartSaturation::process(v5 + 360, (uint64_t *)&v33);
    }
    if (!*(unsigned char *)(v5 + 249)) {
      goto LABEL_22;
    }
    uint64_t v31 = *a3;
    long long v32 = *(_OWORD *)(a3 + 1);
    if (DspLib::ControlFreak::Algorithm::processPeakSampleDetector(v5, (long long *)&v31, (float *)v8, v6) > *(float *)(v5 + 1468)
      || *(unsigned char *)(v5 + 1480))
    {
      *(unsigned char *)(v5 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    }
    else if (*(unsigned char *)(v5 + 240))
    {
LABEL_19:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 56))(v5))
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          DspLib::CircularDelay::process((void *)(*(void *)(v5 + 1592) + v12), *(char **)(*a3 + 8 * v13), a3[2], *(char **)(*a3 + 8 * v13), a3[2]);
          ++v13;
          v12 += 32;
        }
        while (v13 < (*(unsigned int (**)(uint64_t))(*(void *)v5 + 56))(v5));
      }
LABEL_22:
      float32x2x2_t v14 = *(float **)(v5 + 32);
      if (v14[1] >= 0.5 && *(unsigned char *)(v5 + 249))
      {
        long long v27 = *(_OWORD *)a3;
        uint64_t v28 = a3[2];
        DspLib::ControlFreak::Algorithm::outputModulator((unsigned char *)v5, v8, v6, (uint64_t)&v27);
      }
      else
      {
        if (!*(unsigned char *)(v5 + 240) && *v14 < 0.5 && *(unsigned char *)(v5 + 249))
        {
          long long v25 = *(_OWORD *)a3;
          uint64_t v26 = a3[2];
          DspLib::multiply(&v25, (const float *)v8);
        }
        if (*(unsigned char *)(v5 + 248))
        {
          long long v23 = *(_OWORD *)a3;
          uint64_t v24 = a3[2];
          DspLib::multiply((uint64_t *)&v23, *(float *)(v5 + 244));
        }
      }
      if (!*(unsigned char *)(v5 + 240) && *(unsigned char *)(v5 + 249) && DspLib::minv((const float *)v8, v6) > 0.99)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 56))(v5))
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0;
          float v18 = 0.0;
          do
          {
            float v19 = DspLib::maxMagnitude(*(const float **)(*(void *)(v5 + 1592) + v16), (uint64_t)(*(void *)(*(void *)(v5 + 1592) + v16 + 8) - *(void *)(*(void *)(v5 + 1592) + v16)) >> 2);
            if (v18 < v19) {
              float v18 = v19;
            }
            ++v17;
            v16 += 32;
          }
          while (v17 < (*(unsigned int (**)(uint64_t))(*(void *)v5 + 56))(v5));
        }
        else
        {
          float v18 = 0.0;
        }
        if (v18 <= *(float *)(v5 + 1468)) {
          *(unsigned char *)(v5 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
        }
      }
      goto LABEL_32;
    }
    DspLib::ControlFreak::Algorithm::computeModulator(v5, (float *)v8, v6);
    uint64_t v29 = *a3;
    long long v30 = *(_OWORD *)(a3 + 1);
    DspLib::ControlFreak::Algorithm::processAutorelease(v5, (uint64_t)&v29, (float *)v8, v6);
    DspLib::FIR::process(v5 + 1528, (float *)v8, v6, (float *)v8);
    goto LABEL_19;
  }
LABEL_32:
  if (*(unsigned char *)(v5 + 24))
  {
    DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v5 + 56), v6, *(double *)(v5 + 16));
    if (*(float *)(*(void *)(v5 + 32) + 4) < 0.5)
    {
      uint64_t v21 = *a3;
      long long v22 = *(_OWORD *)(a3 + 1);
      float v15 = DspLib::maxMagnitude(&v21);
      if (*(float *)(v5 + 1620) >= v15) {
        float v15 = *(float *)(v5 + 1620);
      }
      *(float *)(v5 + 162DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    }
  }
}

void DspLib::ControlFreak::Algorithm::processInputGain(uint64_t a1, long long *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (float *)(a1 + 1484);
  if (*(unsigned char *)(a1 + 1496))
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v5 = (const float *)((char *)&v7 - v4);
    DspLib::ControlFreak::Algorithm::RampedValue::ramp((uint64_t)v3, (uint64_t)&v7 - v4, *((void *)a2 + 2));
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    DspLib::multiply(&v9, v5);
  }
  else if (!DspLib::isEqual((DspLib *)a1, *v3, 1.0, 1.0e-20) && **(float **)(a1 + 32) < 0.5)
  {
    long long v7 = *a2;
    uint64_t v8 = *((void *)a2 + 2);
    DspLib::multiply((uint64_t *)&v7, *v3);
  }
}

void DspLib::Saturation::SmartSaturation::process(uint64_t a1, uint64_t *a2)
{
  void v33[4] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = *a2;
  long long v28 = *(_OWORD *)(a2 + 1);
  DspLib::Saturation::SmartSaturation::processAnalysis(a1, (uint64_t)&v27);
  float v5 = v4;
  if (*(unsigned char *)(a1 + 96))
  {
    long long v6 = *(_OWORD *)(a2 + 1);
    long long v29 = *(_OWORD *)a2;
    uint64_t v30 = a2[2];
    uint64_t v31 = v29;
    long long v32 = v6;
    DspLib::Biquad::Filter::process((void *)(a1 + 96), (long long *)&v31, &v29);
  }
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = a2[2];
  DspLib::multiply((uint64_t *)&v25, v5);
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v23 = *a2;
    long long v24 = *(_OWORD *)(a2 + 1);
    float v7 = DspLib::maxMagnitude(&v23);
    if (*(float *)(a1 + 72) >= v7) {
      float v7 = *(float *)(a1 + 72);
    }
    *(float *)(a1 + 72) = v7;
  }
  uint64_t v8 = *(void *)(a1 + 376);
  float v9 = 1.0 / v5;
  if (v8)
  {
    v33[0] = &unk_1F14A83D0;
    v33[1] = a1;
    v33[3] = v33;
    DspLib::Saturation::OversampledProcess::processWith(v8, a2, (uint64_t)v33);
    uint64_t v10 = std::__function::__value_func<void ()(DspLib::MultiSpan<float> &)>::~__value_func[abi:ne180100](v33);
    MEMORY[0x1F4188790](v10);
    uint64_t v12 = (char *)&v17 - v11;
    vDSP_Length v13 = a2[2];
    DspLib::fill((float *)((char *)&v17 - v11), v13, v9);
    DspLib::CircularDelay::process((void *)(a1 + 384), v12, v13, v12, v13);
    long long v21 = *(_OWORD *)a2;
    uint64_t v22 = a2[2];
    DspLib::multiply(&v21, (const float *)v12);
  }
  else
  {
    long long v19 = *(_OWORD *)a2;
    uint64_t v20 = a2[2];
    DspLib::Saturation::process(&v19, *(_DWORD *)a1);
    long long v17 = *(_OWORD *)a2;
    uint64_t v18 = a2[2];
    DspLib::multiply((uint64_t *)&v17, v9);
  }
  int v15 = *(unsigned __int8 *)(a1 + 200);
  float32x2x2_t v14 = (void *)(a1 + 200);
  if (v15)
  {
    long long v16 = *(_OWORD *)(a2 + 1);
    long long v29 = *(_OWORD *)a2;
    uint64_t v30 = a2[2];
    uint64_t v31 = v29;
    long long v32 = v16;
    DspLib::Biquad::Filter::process(v14, (long long *)&v31, &v29);
  }
}

void sub_1BB3056A8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(DspLib::MultiSpan<float> &)>::~__value_func[abi:ne180100]((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

float DspLib::ControlFreak::Algorithm::processPeakSampleDetector(uint64_t a1, long long *a2, float *a3, vDSP_Length a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(float *)(*(void *)(a1 + 32) + 32) >= 0.5)
  {
    unint64_t v9 = 4 * *((void *)a2 + 2);
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    if (*((void *)a2 + 1) == 1) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = ((v9 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    MEMORY[0x1F4188790](a1);
    uint64_t v12 = (float *)((char *)&v31[-1] - v11);
    unint64_t v13 = *((void *)a2 + 1);
    MEMORY[0x1F4188790](v14);
    long long v16 = (float **)((char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v15 >= 0x200) {
      size_t v17 = 512;
    }
    else {
      size_t v17 = v15;
    }
    bzero((char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
    if (v13)
    {
      uint64_t v18 = 0;
      do
      {
        v16[v18++] = v12;
        v12 += v10;
      }
      while (v13 > v18);
    }
    uint64_t v19 = *((void *)a2 + 2);
    vDSP_Length v20 = 4 * v19;
    long long v32 = *a2;
    uint64_t v33 = v19;
    v31[0] = v16;
    v31[1] = v13;
    void v31[2] = 4 * v19;
    DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 1080), &v32, v31);
    long long v21 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v21 >= 2)
    {
      unint64_t v22 = 1;
      do
      {
        DspLib::vmaxmg(*v16, v20, v16[v22]);
        long long v21 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        ++v22;
      }
      while (v22 < v21);
    }
    if (*((void *)a2 + 2))
    {
      int v23 = 0;
      uint64_t v24 = 0;
      unsigned int v25 = 1;
      do
      {
        a3[v24] = DspLib::maxMagnitude(&(*v16)[v23], 4uLL);
        uint64_t v24 = v25;
        BOOL v26 = *((void *)a2 + 2) > (unint64_t)v25++;
        v23 += 4;
      }
      while (v26);
    }
    float v27 = DspLib::dB2Amp(v21, 0.688);
    DspLib::multiply(a3, a4, v27);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v28 = 0;
      do
        DspLib::vmaxmg(a3, a4, *(const float **)(*(void *)a2 + 8 * v28++));
      while (v28 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
  }
  else
  {
    DspLib::abs(**(const float ***)a2, *((void *)a2 + 2), a3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) >= 2)
    {
      unint64_t v8 = 1;
      do
        DspLib::vmaxmg(a3, a4, *(const float **)(*(void *)a2 + 8 * v8++));
      while (v8 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
  }
  return DspLib::maxv(a3, a4);
}

void DspLib::ControlFreak::Algorithm::computeModulator(uint64_t a1, float *a2, unint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (a3 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a3;
  }
  uint64_t v7 = 4 * v6;
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (float *)((char *)v20 - v8);
  uint64_t v11 = *(float **)(v10 + 216);
  uint64_t v12 = (*(_DWORD *)(v10 + 776) - 1);
  DspLib::copy(v13, a3, &v11[v12]);
  DspLib::slidingWindowMaxima(v11, a3 + v12, v9, a3);
  uint64_t v14 = DspLib::copy(&v11[a3], v12, v11);
  unint64_t v15 = (float *)(a1 + 1468);
  if (*(unsigned char *)(a1 + 1480))
  {
    MEMORY[0x1F4188790](v14);
    long long v16 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    DspLib::ControlFreak::Algorithm::RampedValue::ramp((uint64_t)v15, (uint64_t)v16, a3);
    if (a3)
    {
      uint64_t v17 = 0;
      do
      {
        float v18 = *(float *)&v16[4 * v17];
        float v19 = v9[v17];
        if (v19 < v18) {
          float v19 = *(float *)&v16[4 * v17];
        }
        a2[v17++] = v18 / v19;
      }
      while (a3 > v17);
    }
  }
  else
  {
    DspLib::threshold(v9, a3, a2, *v15);
    DspLib::svdiv(a2, a3, *v15);
  }
}

void DspLib::ControlFreak::Algorithm::processAutorelease(uint64_t a1, uint64_t a2, float *a3, vDSP_Length a4)
{
  vDSP_Length v21 = a4;
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (vDSP_Length *)(a2 + 16);
  vDSP_Length v6 = *(void *)(a2 + 16);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (float *)((char *)&v20 - v8);
  long long v22 = *v10;
  vDSP_Length v23 = *v7;
  DspLib::sum((uint64_t)&v22, (float *)((char *)&v20 - v8), v6);
  vDSP_Length v29 = v6;
  v30[0] = v9;
  *(void *)&long long v28 = v30;
  *((void *)&v28 + 1) = 1;
  vDSP_Length v26 = v6;
  float v27 = v9;
  uint64_t v24 = (float *)&v27;
  uint64_t v25 = 1;
  DspLib::FIRDecimator::process((void *)(a1 + 784), &v24, &v28);
  vDSP_Length v11 = v29;
  v30[0] = v9;
  float v27 = v9;
  *(void *)&long long v28 = v30;
  *((void *)&v28 + 1) = 1;
  uint64_t v24 = (float *)&v27;
  uint64_t v25 = 1;
  vDSP_Length v26 = v29;
  DspLib::EnvelopeProcessor::process((unsigned char *)(a1 + 1184), (uint64_t *)&v28, (uint64_t *)&v24);
  vDSP_Length v29 = v11;
  v30[0] = v9;
  *(void *)&long long v28 = v30;
  *((void *)&v28 + 1) = 1;
  vDSP_Length v26 = v11;
  float v27 = v9;
  uint64_t v24 = (float *)&v27;
  uint64_t v25 = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 968), &v24, &v28);
  uint64_t v12 = v29;
  uint64_t v24 = v9;
  *(void *)&long long v28 = &v24;
  *((void *)&v28 + 1) = 1;
  DspLib::RMS::process(a1 + 1256, &v28, v9, v29);
  uint64_t v13 = DspLib::ControlFreak::Algorithm::audioActivityDetector(a1, v9, v12);
  vDSP_Length v14 = *v7;
  MEMORY[0x1F4188790](v13);
  long long v16 = (float *)((char *)&v20 - v15);
  vDSP_Length v29 = v12;
  v30[0] = (char *)&v20 - v15;
  float v27 = v9;
  *(void *)&long long v28 = &v27;
  *((void *)&v28 + 1) = 1;
  uint64_t v24 = (float *)v30;
  uint64_t v25 = 1;
  vDSP_Length v26 = v11;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 976), &v28, &v24);
  vDSP_Length v17 = *v7;
  vDSP_Length v29 = v11;
  v30[0] = v9;
  float v27 = v16;
  *(void *)&long long v28 = &v27;
  *((void *)&v28 + 1) = 1;
  uint64_t v24 = (float *)v30;
  uint64_t v25 = 1;
  vDSP_Length v26 = v17;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 864), &v28, &v24);
  DspLib::ControlFreak::Algorithm::computeSlowGain(a1, a3, v21, (uint64_t)v9, v17, v16, v14);
  DspLib::clip(a3, v21, *(float *)(a1 + 1500), 1.0);
  if (*(unsigned char *)(a1 + 24))
  {
    float v18 = DspLib::minv(a3, v21);
    if (v18 >= *(float *)(a1 + 1628)) {
      float v18 = *(float *)(a1 + 1628);
    }
    *(float *)(a1 + 1628) = v18;
  }
  DspLib::multiply(a3, v21, v16);
  if (*(unsigned char *)(a1 + 24))
  {
    float v19 = DspLib::minv(a3, v21);
    if (v19 >= *(float *)(a1 + 1624)) {
      float v19 = *(float *)(a1 + 1624);
    }
    *(float *)(a1 + 1624) = v19;
  }
}

uint64_t DspLib::ControlFreak::Algorithm::outputModulator(unsigned char *a1, void *__src, uint64_t a3, uint64_t a4)
{
  vDSP_Length v6 = **(float ***)a4;
  vDSP_Length v7 = *(void *)(a4 + 16);
  if (a1[240]) {
    DspLib::fill(v6, v7, 1.0);
  }
  else {
    DspLib::copy(__src, a3, v6);
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
  if (result >= 2)
  {
    unint64_t v9 = 1;
    do
    {
      DspLib::clear(*(float **)(*(void *)a4 + 8 * v9++), *(void *)(a4 + 16));
      uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 56))(a1);
    }
    while (v9 < result);
  }
  return result;
}

void DspLib::ControlFreak::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  if (*(unsigned char *)(a1 + 24))
  {
    *(float *)a2 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 1628), 0.000001);
    *(float *)(a2 + 12) = DspLib::amp2dBSafe(v6, *(float *)(a1 + 1624), 0.000001);
    *(float *)(a2 + 16) = DspLib::amp2dBSafe(v7, *(float *)(a1 + 1616), 0.000001);
    *(float *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::amp2dBSafe(v8, *(float *)(a1 + 1620), 0.000001);
    if (*(unsigned char *)(a1 + 416))
    {
      float v10 = *(float *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = 897988541;
      int v11 = *(_DWORD *)(a1 + 428);
      uint64_t v12 = *(void *)(a1 + 420);
      float v13 = DspLib::amp2dBSafe(v9, v10, 0.000001);
      *(void *)(a2 + 24) = v12;
      *(_DWORD *)(a2 + 32) = v11;
      *(float *)(a2 + 4) = v13;
    }
    *(_OWORD *)(a1 + 1616) = xmmword_1BB8767D0;
  }
  else
  {
    *(int32x2_t *)(a2 + 16) = vdup_n_s32(0xC2C80000);
    *(_DWORD *)(a2 + 4) = -1027080192;
  }
}

uint64_t DspLib::ControlFreak::Algorithm::RampedValue::ramp(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    do
    {
      float v4 = *(float *)(result + 8);
      float v5 = v4 * *(float *)result;
      *(float *)uint64_t result = v5;
      if (v4 > 1.0 && (float v6 = *(float *)(result + 4), v5 >= v6) || v4 < 1.0 && (float v6 = *(float *)(result + 4), v5 <= v6))
      {
        *(float *)uint64_t result = v6;
        *(unsigned char *)(result + 12) = 0;
        float v5 = v6;
      }
      *(float *)(a2 + 4 * v3++) = v5;
    }
    while (a3 > v3);
  }
  return result;
}

uint64_t DspLib::ControlFreak::Algorithm::audioActivityDetector(uint64_t result, float *a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(result + 1460);
    do
    {
      float v4 = *a2;
      float v5 = *(float *)(result + 1456);
      if (*a2 > (float)(v5 * *(float *)(result + 1448)))
      {
        *(float *)(result + 1456) = v4;
        v3 += *(_DWORD *)(result + 1464);
        *(_DWORD *)(result + 146DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
        float v5 = v4;
      }
      if (v4 < (float)(v5 * *(float *)(result + 1452))) {
        *(float *)(result + 1456) = v4;
      }
      if (v3)
      {
        int v6 = *(_DWORD *)(result + 1508);
        *(_DWORD *)(result + 146DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = --v3;
      }
      else
      {
        int v6 = *(_DWORD *)(result + 1512);
      }
      *(_DWORD *)a2++ = v6;
      --a3;
    }
    while (a3);
  }
  return result;
}

void DspLib::ControlFreak::Algorithm::computeSlowGain(uint64_t a1, const float *a2, vDSP_Length __N, uint64_t a4, int a5, float *__C, vDSP_Length a7)
{
  DspLib::multiply(a2, __N, __C, 1.0 / *(float *)(a1 + 1500));
  DspLib::clip(__C, a7, 0.0, 1.0);
  if (DspLib::minv(__C, a7) < 0.99)
  {
    *(unsigned char *)(a1 + 1std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = 1;
LABEL_6:
    if (a7)
    {
      uint64_t v11 = 0;
      do
      {
        float v12 = __C[v11];
        float v13 = *(float *)(a1 + 1504);
        if (v12 >= v13) {
          float v12 = v13 + (float)((float)(v12 - v13) * *(float *)(a4 + 4 * v11));
        }
        *(float *)(a1 + 1504) = v12;
        __C[v11++] = v12;
      }
      while (a7 > v11);
    }
    return;
  }
  if (*(float *)(a1 + 1504) > 0.99)
  {
    *(unsigned char *)(a1 + 1std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = 0;
    return;
  }
  if (*(unsigned char *)(a1 + 1516)) {
    goto LABEL_6;
  }
}

void DspLib::Saturation::SmartSaturation::initialize(DspLib::Saturation::SmartSaturation *this, int a2, double a3, uint64_t a4)
{
  *((_DWORD *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  *((double *)this + 4) = a3;
  *((void *)this + 6) = a4;
  DspLib::Saturation::SmartSaturation::configureAnalysisFilter(this);
  DspLib::Saturation::SmartSaturation::reset(this);
  *((unsigned char *)this + 56) = 1;
  v5[0] = *(_OWORD *)this;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)this + 12);
  DspLib::Saturation::SmartSaturation::configure((uint64_t)this, v5);
}

void DspLib::Saturation::SmartSaturation::configure(uint64_t a1, _OWORD *a2)
{
  long long v3 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 12) = v3;
  float v4 = *(DspLib::Saturation::OversampledProcess **)(a1 + 376);
  if (*(unsigned char *)(a1 + 4))
  {
    if (!v4) {
      operator new();
    }
    DspLib::Saturation::OversampledProcess::setCutoffFrequency(v4, *(float *)(a1 + 8));
    DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(a1 + 384), (unint64_t)((float)(*(float *)(*(void *)(a1 + 376) + 24)/ (float)*(unsigned int *)(*(void *)(a1 + 376) + 16))+ (float)(*(float *)(*(void *)(a1 + 376) + 24)/ (float)*(unsigned int *)(*(void *)(a1 + 376) + 16))));
  }
  else
  {
    *(void *)(a1 + 376) = 0;
    if (v4) {
      std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100](a1 + 376, (uint64_t)v4);
    }
  }
  if (*(float *)(a1 + 16) <= 0.0)
  {
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 96));
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 200));
  }
  else
  {
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 96), *(unsigned int *)(a1 + 40), *(double *)(a1 + 32), 1uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 200), *(unsigned int *)(a1 + 40), *(double *)(a1 + 32), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 96, ((unint64_t)*(unsigned int *)(a1 + 20) << 32) | 0x10, (double *)(*(_DWORD *)(a1 + 16) ^ 0x80000000 | ((unint64_t)*(unsigned int *)(a1 + 24) << 32)), 0, 0x41uLL);
    unint64_t v5 = ((unint64_t)*(unsigned int *)(a1 + 20) << 32) | 0x10;
    int v6 = (double *)(*(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32));
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 200, v5, v6, 0, 0x41uLL);
  }
}

void sub_1BB306440(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A0C40D6B359F6);
  _Unwind_Resume(a1);
}

void DspLib::ControlFreak::Algorithm::~Algorithm(DspLib::ControlFreak::Algorithm *this)
{
  DspLib::ControlFreak::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;

  *(void *)this = &unk_1F14A82B8;
  uint64_t v15 = (void **)((char *)this + 1592);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v2 = (void *)*((void *)this + 196);
  if (v2)
  {
    *((void *)this + 197) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 192);
  if (v3)
  {
    *((void *)this + 193) = v3;
    operator delete(v3);
  }
  uint64_t v15 = (void **)((char *)this + 1416);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  float v4 = (void *)*((void *)this + 171);
  if (v4)
  {
    *((void *)this + 172) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 168);
  if (v5)
  {
    *((void *)this + 169) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 163);
  if (v6)
  {
    *((void *)this + 164) = v6;
    operator delete(v6);
  }
  vDSP_Length v7 = *((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v15 = (void **)((char *)this + 1216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)((char *)this + 1192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v8 = (void *)*((void *)this + 145);
  if (v8)
  {
    *((void *)this + 146) = v8;
    operator delete(v8);
  }
  uint64_t v15 = (void **)((char *)this + 1128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)((char *)this + 1096);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v9 = (void *)*((void *)this + 132);
  if (v9)
  {
    *((void *)this + 133) = v9;
    operator delete(v9);
  }
  uint64_t v15 = (void **)((char *)this + 1024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)((char *)this + 992);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  float v10 = (void *)*((void *)this + 118);
  if (v10)
  {
    *((void *)this + 119) = v10;
    operator delete(v10);
  }
  uint64_t v15 = (void **)((char *)this + 912);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)((char *)this + 880);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)((char *)this + 832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v11 = (void *)*((void *)this + 99);
  if (v11)
  {
    *((void *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
    operator delete(v11);
  }
  DspLib::Saturation::SmartSaturation::~SmartSaturation((DspLib::ControlFreak::Algorithm *)((char *)this + 360));
  uint64_t v15 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ControlFreak::Algorithm *)((char *)this + 304));
  float v12 = (void *)*((void *)this + 35);
  if (v12)
  {
    *((void *)this + 36) = v12;
    operator delete(v12);
  }
  float v13 = (void *)*((void *)this + 27);
  if (v13)
  {
    *((void *)this + 28) = v13;
    operator delete(v13);
  }
  *(void *)this = &unk_1F14A87D8;
  vDSP_Length v14 = (void *)*((void *)this + 4);
  if (v14)
  {
    *((void *)this + 5) = v14;
    operator delete(v14);
  }
}

uint64_t DspLib::ControlFreak::Algorithm::setMeteringIsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  *(unsigned char *)(this + 404) = a2;
  return this;
}

void DspLib::Saturation::OversampledProcess::reset(DspLib::Saturation::OversampledProcess *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *((void *)this + 11);
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (*(void *)v2 != v4) {
      bzero(*(void **)v2, (v4 - *(void *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v2 += 24;
  }
  *((_DWORD *)this + 26) = 0;

  DspLib::FIRDecimator::reset((DspLib::Saturation::OversampledProcess *)((char *)this + 136));
}

void DspLib::Saturation::SmartSaturation::processAnalysis(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7 == 1) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = ((v6 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  MEMORY[0x1F4188790](a1);
  float v10 = (char *)v34 - v9;
  MEMORY[0x1F4188790](v11);
  float v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFF0);
  if (v12 >= 0x200) {
    size_t v14 = 512;
  }
  else {
    size_t v14 = v12;
  }
  bzero((char *)v34 - ((v12 + 15) & 0xFFFFFFFF0), v14);
  if (v7)
  {
    uint64_t v15 = v7;
    long long v16 = v13;
    do
    {
      *v16++ = v10;
      v10 += 4 * v8;
      --v15;
    }
    while (v15);
  }
  long long v41 = *(_OWORD *)a2;
  uint64_t v42 = *(void *)(a2 + 16);
  float v17 = DspLib::maxMagnitude(&v41);
  long long v39 = *(_OWORD *)a2;
  uint64_t v40 = *(void *)(a2 + 16);
  float v18 = (float)(v5 * v4);
  float v19 = sqrtf(DspLib::sumOfSquares(&v39) / v18);
  float v22 = DspLib::dB2Amp(v20, *(float *)(a1 + 12)) / v17;
  if (v22 > 1.0) {
    float v22 = 1.0;
  }
  *(float *)(a1 + 64) = DspLib::amp2dBSafe(v21, v22, 0.000001);
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  *(void *)&long long v35 = v13;
  *((void *)&v35 + 1) = v7;
  unint64_t v36 = v4;
  DspLib::Biquad::Filter::process((void *)(a1 + 304), &v37, &v35);
  v34[0] = v13;
  v34[1] = v7;
  v34[2] = v4;
  float v23 = DspLib::sumOfSquares(v34);
  float v26 = DspLib::amp2dBSafe(v24, sqrtf(v23 / v18) / (float)(v19 + 0.000001), 0.000001);
  if (v4 == *(void *)(a1 + 80))
  {
    float v28 = *(float *)(a1 + 88);
    float v27 = *(float *)(a1 + 92);
  }
  else
  {
    float v29 = *(double *)(a1 + 32) / (double)v4;
    float v27 = 1.0 - expf(-1.0 / (float)((float)(v29 * 100.0) / 1000.0));
    *(float *)(a1 + 88) = v27;
    *(float *)(a1 + 92) = v27;
    float v28 = v27;
  }
  float v30 = *(float *)(a1 + 60);
  if (v26 < v30) {
    float v27 = v28;
  }
  float v31 = v30 + (float)((float)(v26 - v30) * v27);
  *(float *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v31;
  float v32 = -40.0;
  if (v31 >= -40.0)
  {
    float v32 = -30.0;
    if (v31 <= -30.0) {
      float v32 = v31;
    }
  }
  float v33 = (float)(v32 * 0.5) + 15.0;
  *(float *)(a1 + 68) = v33;
  DspLib::dB2Amp(v25, v33 + *(float *)(a1 + 64));
}

void *DspLib::Saturation::OversampledProcess::processWith(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v8 = v6 * *(unsigned int *)(a1 + 16);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v6 * *(unsigned int *)(a1 + 16);
  }
  if (v7 == 1) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = ((v9 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v20 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14 >= 0x200) {
    size_t v16 = 512;
  }
  else {
    size_t v16 = v14;
  }
  bzero((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  if (v7)
  {
    uint64_t v17 = 0;
    do
    {
      *(void *)&v15[8 * v17++] = v12;
      v12 += 4 * v10;
    }
    while (v7 > v17);
  }
  *(void *)float v26 = v15;
  *(void *)&v26[8] = v7;
  *(void *)&v26[16] = v8;
  v25[0] = *a2;
  v25[1] = v7;
  void v25[2] = v6;
  unint64_t v24 = v8;
  long long v23 = *(_OWORD *)v26;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 32), v25, &v23);
  uint64_t v18 = *(void *)(a3 + 24);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 48))(v18, v26);
  uint64_t v21 = *(void *)v26;
  long long v22 = *(_OWORD *)&v26[8];
  return DspLib::FIRDecimator::process((void *)(a1 + 136), &v21, a2);
}

void std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::~__func()
{
}

void *std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14A83D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A83D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int **)(a1 + 8);
  long long v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  DspLib::Saturation::process(&v3, *v2);
}

uint64_t std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::target_type()
{
}

void *std::__function::__value_func<void ()(DspLib::MultiSpan<float> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void DspLib::Saturation::SmartSaturation::configureAnalysisFilter(DspLib::Saturation::SmartSaturation *this)
{
  float v2 = *((double *)this + 4);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)4, 7000.0, v2, 0, (float **)&v6);
  float v3 = *((double *)this + 4);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)2, 13000.0, v3, 0, &__p);
  DspLib::Biquad::Filter::initialize((DspLib::Saturation::SmartSaturation *)((char *)this + 304), *((unsigned int *)this + 10), 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 2) - 0x3333333333333333 * ((v5 - (unsigned char *)__p) >> 2));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 304, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 2), 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 304, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 2), -858993459 * ((unint64_t)(v7 - (unsigned char *)v6) >> 2), 0x41uLL);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    unint64_t v7 = v6;
    operator delete(v6);
  }
}

void sub_1BB306C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::Saturation::OversampledProcess::setCutoffFrequency(DspLib::Saturation::OversampledProcess *this, float a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  vDSP_Length v3 = (*((_DWORD *)this + 5) * *((_DWORD *)this + 4) + 1);
  LODWORD(v4) = MEMORY[0x1F4188790](this).n128_u32[0];
  uint64_t v6 = (char *)&v13[-1] - v5;
  v13[0] = &unk_1F14A6C50;
  v13[1] = DspLib::makeChebychevWindow;
  void v13[3] = v13;
  *((float *)this + 6) = DspLib::makeSincWindow((float *)((char *)&v13[-1] - v5), v3, v7, v8, (uint64_t)v13, v4);
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v13);
  DspLib::FIRDecimator::setCoefficients((uint64_t)this + 136, v6, v3);
  DspLib::FIRDecimator::reset((DspLib::Saturation::OversampledProcess *)((char *)this + 136));
  DspLib::multiply((float *)v6, v3, (float)*((unsigned int *)this + 4));
  DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 8, (uint64_t)v6, v3);
  uint64_t v9 = *((void *)this + 10);
  uint64_t v10 = *((void *)this + 11);
  while (v9 != v10)
  {
    uint64_t v11 = *(void *)(v9 + 8);
    if (*(void *)v9 != v11) {
      bzero(*(void **)v9, (v11 - *(void *)v9) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v9 += 24;
  }
  *((_DWORD *)this + 26) = 0;
}

void sub_1BB306DD8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

DspLib::Saturation::OversampledProcess *DspLib::Saturation::OversampledProcess::OversampledProcess(DspLib::Saturation::OversampledProcess *this, unsigned int a2, unsigned int a3, double a4, unsigned int a5, int a6)
{
  *((_DWORD *)this + 8) = 1;
  uint64_t v9 = (DspLib::Saturation::OversampledProcess *)((char *)this + 32);
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 17) = 1;
  uint64_t v10 = (DspLib::Saturation::OversampledProcess *)((char *)this + 136);
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 26) = 0;
  *(_DWORD *)this = a2;
  *((double *)this + 1) = a4;
  *((_DWORD *)this + 4) = a5;
  *((_DWORD *)this + 5) = a6;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 10, a2);
  DspLib::PolyPhaseInterpolator::setSrcParameters(v9, a5, a3);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 23, *(unsigned int *)this);
  DspLib::FIRDecimator::setSrcParameters(v10, a5, *((_DWORD *)this + 4) * a3);
  return this;
}

void sub_1BB306EBC(_Unwind_Exception *a1)
{
  DspLib::FIRDecimator::~FIRDecimator(v2);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 184);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    vDSP_Length v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(void *)(a2 + 152) = v3;
      operator delete(v3);
    }
    float v4 = *(void **)(a2 + 112);
    if (v4)
    {
      *(void *)(a2 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void **)(a2 + 80);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v5 = (void **)(a2 + 48);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1C185D370](a2, 0x10A0C40D6B359F6);
  }
}

void DspLib::Saturation::SmartSaturation::~SmartSaturation(DspLib::Saturation::SmartSaturation *this)
{
  float v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v3) {
    std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100]((uint64_t)this + 376, v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 352));
  float v4 = (void *)*((void *)this + 41);
  if (v4)
  {
    *((void *)this + 42) = v4;
    operator delete(v4);
  }
  unsigned int v7 = (void **)((char *)this + 280);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 248));
  uint64_t v5 = (void *)*((void *)this + 28);
  if (v5)
  {
    *((void *)this + 29) = v5;
    operator delete(v5);
  }
  unsigned int v7 = (void **)((char *)this + 176);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 144));
  uint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
}

uint64_t DspLib::LinearPhaseFilterbank::initialize(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

void *DspLib::LinearPhaseFilterbank::configure(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  float v4 = result;
  if (*result != 2 * a2) {
    goto LABEL_7;
  }
  if (result[1] != a4) {
    goto LABEL_7;
  }
  if (a4)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    do
    {
      v6 |= *(void *)(result[3] + 8 * v5) != vcvtas_u32_f32(*(float *)(a3 + 4 * v5) * (float)(unint64_t)*result);
      ++v5;
    }
    while (a4 > v5);
    if (v6)
    {
LABEL_7:
      *uint64_t result = 2 * a2;
      result[1] = a4;
      std::vector<unsigned long>::resize((uint64_t)(result + 3), a4);
      uint64_t v7 = 0;
      unint64_t v8 = v4[2] + *v4;
      unint64_t v9 = 2 * v8;
      double v10 = (double)v8;
      while (1)
      {
        unint64_t v11 = qword_1BB876AE8[v7];
        double v12 = v10 / (double)v11;
        if (v12 <= 1.0) {
          char v13 = 0;
        }
        else {
          char v13 = vcvtpd_u64_f64(log2(v12));
        }
        unint64_t v14 = v11 << v13;
        if (v14 < v9) {
          unint64_t v9 = v14;
        }
        if (++v7 == 4)
        {
          v4[12] = v9;
          operator new();
        }
      }
    }
  }
  return result;
}

void sub_1BB307464(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::ComplexVector>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::ComplexVector>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 80 * a2;
    while (v3 != v7)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 80));
    a1[1] = v7;
  }
}

void DspLib::LinearPhaseFilterbank::calculateCoeffsFromCenterFrequencies(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 24);
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      unint64_t v6 = vcvtas_u32_f32(*(float *)(a2 + 4 * v4) * (float)*(unint64_t *)a1);
      v3[v4] = v6;
      if (v5 != 1)
      {
        uint64_t v7 = v3[v5 - 2];
        if (v7 + 1 > v6) {
          unint64_t v6 = v7 + 1;
        }
        v3[v4] = v6;
      }
      uint64_t v4 = v5;
      BOOL v8 = *(void *)(a1 + 8) > (unint64_t)v5++;
    }
    while (v8);
  }
  uint64_t v9 = v3[1] - *v3;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<float>::resize((uint64_t)&v43, 2 * v9);
  DspLib::makePeriodicHannWindow(v43, v44 - v43);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = *(void *)a1 >> 1;
  __Z.unint64_t realp = v14;
  __Z.imagp = (float *)((char *)&v33 - v13);
  uint64_t v42 = v12;
  DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
  DspLib::fill(__Z.realp, **(void **)(a1 + 24), 1.0);
  DspLib::copy(&v44[-v9], v9, &__Z.realp[**(void **)(a1 + 24)]);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<std::vector<float>>::resize(&v38, *(void *)(a1 + 8));
  uint64_t v15 = v38;
  uint64_t v16 = v39;
  while (v15 != v16)
  {
    std::vector<float>::resize(v15, *(void *)a1);
    v15 += 24;
  }
  uint64_t v17 = DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v37, *(void *)a1);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v17, &__Z, *(DSPComplex **)v38);
  DspLib::FFT::shift(*(void **)v38, (uint64_t)(*(void *)(v38 + 8) - *(void *)v38) >> 2);
  if ((unint64_t)(*(void *)(a1 + 8) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v18 = 2;
    unint64_t v19 = 1;
    do
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 8 * v18) - *(void *)(*(void *)(a1 + 24) + 8 * v19);
      uint64_t v34 = 0;
      long long v35 = 0;
      uint64_t v36 = 0;
      std::vector<float>::resize((uint64_t)&v34, 2 * v20);
      DspLib::makePeriodicHannWindow(v34, ((char *)v35 - (char *)v34) >> 2);
      DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
      DspLib::copy(v43, v9, &__Z.realp[*(void *)(*(void *)(a1 + 24) + 8 * v19) - v9]);
      uint64_t v9 = v20;
      DspLib::copy((char *)v35 - 4 * v20, v20, &__Z.realp[*(void *)(*(void *)(a1 + 24) + 8 * v19)]);
      DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v37, &__Z, *(DSPComplex **)(v38 + 24 * v19));
      DspLib::FFT::shift(*(void **)(v38 + 24 * v19), (uint64_t)(*(void *)(v38 + 24 * v19 + 8) - *(void *)(v38 + 24 * v19)) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v43, (char *)v34, (uint64_t)v35, ((char *)v35 - (char *)v34) >> 2);
      if (v34)
      {
        long long v35 = v34;
        operator delete(v34);
      }
      unint64_t v19 = v18++;
    }
    while (*(void *)(a1 + 8) - 1 > v19);
  }
  DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
  DspLib::copy(v43, v9, &__Z.realp[*(void *)(*(void *)(a1 + 24) + 8 * *(void *)(a1 + 8) - 8) - v9]);
  vDSP_Length v21 = (*(void *)a1 >> 1) - *(void *)(*(void *)(a1 + 24) + 8 * *(void *)(a1 + 8) - 8);
  DspLib::fill(&__Z.realp[v42 - v21], v21, 1.0);
  *__Z.imagp = 1.0;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v37, &__Z, *(DSPComplex **)(v38 + 24 * *(void *)(a1 + 8) - 24));
  long long v22 = DspLib::FFT::shift(*(void **)(v38 + 24 * *(void *)(a1 + 8) - 24), (uint64_t)(*(void *)(v38 + 24 * *(void *)(a1 + 8) - 16)- *(void *)(v38 + 24 * *(void *)(a1 + 8) - 24)) >> 2);
  if (*(void *)(a1 + 8))
  {
    uint64_t v23 = 0;
    unsigned int v24 = 1;
    do
    {
      DspLib::multiply(*(float **)(v38 + 24 * v23), (uint64_t)(*(void *)(v38 + 24 * v23 + 8) - *(void *)(v38 + 24 * v23)) >> 2, 1.0 / (float)*(unint64_t *)a1);
      uint64_t v23 = v24;
      BOOL v8 = *(void *)(a1 + 8) > (unint64_t)v24++;
    }
    while (v8);
    vDSP_Length v26 = *(void *)(a1 + 96);
    MEMORY[0x1F4188790](v25);
    float v28 = (DSPComplex *)((char *)&v33 - v27);
    if (v29 == 1) {
      goto LABEL_24;
    }
  }
  else
  {
    vDSP_Length v26 = *(void *)(a1 + 96);
    MEMORY[0x1F4188790](v22);
    float v28 = (DSPComplex *)((char *)&v33 - v30);
  }
  uint64_t v31 = 0;
  unsigned int v32 = 1;
  do
  {
    DspLib::clear((float *)v28, v26);
    DspLib::copy(*(void **)(v38 + 24 * v31), (uint64_t)(*(void *)(v38 + 24 * v31 + 8) - *(void *)(v38 + 24 * v31)) >> 2, (char *)v28 + 4 * *(void *)(a1 + 16));
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(void **)(a1 + 104), v28, v26, (DSPSplitComplex *)(*(void *)(a1 + 48) + 80 * v31));
    DspLib::operator*=(*(void *)(a1 + 48) + 80 * v31, 0.25 / (float)*(unint64_t *)(a1 + 96));
    uint64_t v31 = v32;
    BOOL v8 = *(void *)(a1 + 8) - 1 > (unint64_t)v32++;
  }
  while (v8);
LABEL_24:
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v37);
  uint64_t v34 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
}

void sub_1BB307AC0(_Unwind_Exception *a1)
{
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(v1 - 176);
  *(void *)(v1 - 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v1 - 160;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 200));
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void DspLib::LinearPhaseFilterbank::reset(float **this)
{
}

char **DspLib::LinearPhaseFilterbank::consumeInput(uint64_t a1, char *a2, unint64_t a3)
{
  return DspLib::LinearDelay::write((char **)(a1 + 72), a2, a3);
}

void DspLib::LinearPhaseFilterbank::process(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    DspLib::LinearDelay::write((char **)(a1 + 72), a2, a3);
    uint64_t v7 = *(void *)(a1 + 72);
    unint64_t v8 = *(void *)(a1 + 96) - (a3 + (*(void *)a1 >> 1));
    uint64_t v9 = a3 == -1 ? ((*(void *)(a1 + 80) - v7) >> 2) - v8 : a3;
    uint64_t v10 = DspLib::copy((void *)(v7 + 4 * v8), v9, *(void **)(*a4 + 8 * *(void *)(a1 + 8) - 8));
    v29[1] = v29;
    uint64_t v11 = MEMORY[0x1F4188790](v10);
    MEMORY[0x1F4188790](v11);
    uint64_t v13 = *(void **)(a1 + 104);
    vDSP_Length v14 = *(void *)(a1 + 96) >> 1;
    v32.unint64_t realp = v15;
    v32.imagp = (float *)(((unint64_t)v29 - v12) & 0xFFFFFFFFFFFFFFC0);
    vDSP_Length v33 = v14;
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v13, *(DSPComplex **)(a1 + 72), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2, &v32);
    if (*(void *)(a1 + 8) != 1)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 1;
      do
      {
        uint64_t v19 = MEMORY[0x1F4188790](v16);
        MEMORY[0x1F4188790](v19);
        uint64_t v21 = *(void *)(a1 + 96) >> 1;
        v30.unint64_t realp = v22;
        v30.imagp = (float *)(((unint64_t)v29 - v20) & 0xFFFFFFFFFFFFFFC0);
        uint64_t v31 = v21;
        uint64_t v23 = (const DSPSplitComplex *)(*(void *)(a1 + 48) + 80 * v17);
        float v24 = *v32.realp;
        float v25 = *v32.imagp;
        vDSP_zvmul(&v32, 1, v23, 1, &v30, 1, v33, 1);
        *v30.unint64_t realp = v24 * *v23->realp;
        *v30.imagp = v25 * *v23->imagp;
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(*(void **)(a1 + 112), &v30, *(DSPComplex **)(*a4 + 8 * v17));
        unint64_t v26 = *(void *)(a1 + 16);
        BOOL v27 = v26 > a3;
        unint64_t v28 = v26 - a3;
        if (v27) {
          DspLib::copy((void *)(*(void *)(*a4 + 8 * v17) + 4 * v28), a3, *(void **)(*a4 + 8 * v17));
        }
        DspLib::subtract(*(float **)(*a4 + 8 * *(void *)(a1 + 8) - 8), a3, *(const float **)(*a4 + 8 * v17));
        uint64_t v17 = v18;
        BOOL v27 = *(void *)(a1 + 8) - 1 > (unint64_t)v18++;
      }
      while (v27);
    }
  }
}

void *DspLib::FFT::shift(void *a1, unint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 >> 1;
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)v10 - v5;
  unint64_t v8 = (void *)(v4 + 4 * v7 - 4 * v3);
  DspLib::copy(v8, v3, (char *)v10 - v5);
  DspLib::copy(a1, v3, v8);
  return DspLib::copy(v6, v3, a1);
}

void DspLib::GainSmoother::initialize(DspLib::GainSmoother *this, unint64_t a2)
{
  if (*(void *)this != a2)
  {
    *(void *)this = a2;
    std::vector<float>::resize((uint64_t)this + 112, a2);
  }
}

void DspLib::GainSmoother::configure(DspLib::GainSmoother *this, unint64_t a2, float a3)
{
  float v4 = 4.60517021 / a3;
  float v5 = fminf(v4, 1.0);
  unint64_t v6 = (float *)*((void *)this + 14);
  uint64_t v7 = *((void *)this + 15) - (void)v6;
  *unint64_t v6 = v5;
  if ((unint64_t)v7 >= 5)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    unint64_t v10 = 1;
    do
    {
      v6[v10] = v5 + (float)((float)(1.0 - v5) * v6[v8]);
      unint64_t v10 = (v8++ + 2);
    }
    while (v9 > v10);
  }
  uint64_t v11 = *(void *)this;
  if (*(void *)this >= a2) {
    uint64_t v11 = a2;
  }
  if (v11 != *((void *)this + 1))
  {
    *((void *)this + 1) = v11;
    std::vector<float>::resize((uint64_t)this + 16, v11 + 1);
    std::vector<float>::resize((uint64_t)this + 40, *((void *)this + 1) + 1);
    std::vector<float>::resize((uint64_t)this + 64, *((void *)this + 1) + 1);
    unint64_t v12 = *((void *)this + 1);
    if (v12 != -1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *((void *)this + 2);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = *((void *)this + 8);
      do
      {
        __double2 v17 = __sincos_stret(3.14159265 / (double)v12 * (double)v13);
        float v18 = v17.__cosval + 1.0;
        *(float *)(v14 + 4 * v13) = v18;
        float v19 = 1.0 / (v17.__cosval + 1.0);
        *(float *)(v15 + 4 * v13) = v19;
        float sinval = v17.__sinval;
        *(float *)(v16 + 4 * v13++) = sinval;
      }
      while (v12 + 1 > v13);
    }
    std::vector<float>::resize((uint64_t)this + 88, v12);
    unint64_t v21 = *((void *)this + 1);
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *((void *)this + 11);
      do
      {
        float v24 = tan(3.14159265 / ((double)v21 + (double)v21) * (double)v22);
        *(float *)(v23 + 4 * v22++) = v24;
      }
      while (v21 > v22);
    }
    std::vector<float>::resize((uint64_t)this + 152, v21);
    std::vector<float>::resize((uint64_t)this + 208, *((void *)this + 1));
    DspLib::GainSmoother::reset(this);
  }
}

void DspLib::GainSmoother::reset(DspLib::GainSmoother *this)
{
  *((_DWORD *)this + 62) = 1065353216;
  *((void *)this + 17) = 0x3F80000000000000;
  *((void *)this + 18) = *((void *)this + 1);
  DspLib::fill(*((float **)this + 19), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 2, 1.0);
  *((void *)this + 22) = *((void *)this + 1);
  *((void *)this + 23) = 0;
}

void DspLib::GainSmoother::gainEstimate(uint64_t a1, vDSP_Length a2, BOOL *a3, float a4)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  float v7 = *(float *)(a1 + 248);
  *a3 = v7 < a4;
  a3[1] = v7 > a4;
  if (*(float *)(a1 + 140) < v7 || v7 != a4 && (v7 <= a4 || *(void *)(a1 + 8) >= a2) && v7 >= a4)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 136);
    uint64_t v8 = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 208), *(char **)(a1 + 152), *(void *)(a1 + 160), (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a1 + 176);
    MEMORY[0x1F4188790](v8);
    DspLib::GainSmoother::generateGainCurve((DspLib::GainSmoother *)a1, a1 + 192, *(const float **)(a1 + 112), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2, (float *)((char *)v10 - v9), a2, *(float *)(a1 + 248), a4, 1.0);
  }
}

void DspLib::GainSmoother::generateGainCurve(DspLib::GainSmoother *this, uint64_t a2, const float *a3, int a4, float *__D, vDSP_Length __N, float a7, float a8, float a9)
{
  unint64_t v9 = __N;
  float v15 = *(float *)(a2 + 4);
  if (v15 <= a8)
  {
    if (v15 >= a7)
    {
      DspLib::multiplyAdd(a3, __N, __D, a8 - a7, a7);
      uint64_t v29 = *((void *)this + 1);
      *(void *)(a2 + 8) = v29;
      *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v29;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)a2 = 0;
      float v16 = __D[v9 - 1];
    }
    else
    {
      uint64_t v24 = *(void *)(a2 + 40);
      uint64_t v25 = *(void *)(a2 + 16);
      unint64_t v26 = *(void *)(a2 + 8) - v24;
      vDSP_Length v27 = __N - v26;
      if (__N < v26)
      {
        DspLib::copy((void *)(v25 + 4 * v24), __N, __D);
        uint64_t v28 = *(void *)(a2 + 40);
        float v16 = *(float *)(a2 + 4);
        *(float *)a2 = *(float *)a2
                     * (float)(*(float *)(*((void *)this + 8) + 4 * (v28 + *(void *)(a2 + 48) + v9))
                             / *(float *)(*((void *)this + 8) + 4 * (v28 + *(void *)(a2 + 48))));
        *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v28 + v9;
        goto LABEL_15;
      }
      if (v26 == -1) {
        uint64_t v30 = ((*(void *)(a2 + 24) - v25) >> 2) - v24;
      }
      else {
        uint64_t v30 = *(void *)(a2 + 8) - v24;
      }
      DspLib::copy((void *)(v25 + 4 * v24), v30, __D);
      uint64_t v31 = &__D[v9];
      DspLib::multiplyAdd(a3, v27, &v31[-v27], a8 - *(float *)(a2 + 4), *(float *)(a2 + 4));
      uint64_t v32 = *((void *)this + 1);
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v32;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)a2 = 0;
      float v16 = *(v31 - 1);
    }
  }
  else
  {
    float v16 = a8 * a9;
    float v17 = a7 - v16;
    unint64_t Offset = DspLib::GainSmoother::findOffset(this, a7 - v16, *(float *)a2);
    *(void *)(a2 + 48) = Offset;
    unint64_t v19 = *((void *)this + 1) - Offset;
    *(void *)(a2 + 8) = v19;
    std::vector<float>::resize(a2 + 16, v19);
    DspLib::multiplyAdd((const float *)(*((void *)this + 2) + 4 * *(void *)(a2 + 48) + 4), *(void *)(a2 + 8), *(float **)(a2 + 16), v17 * *(float *)(*((void *)this + 5) + 4 * *(void *)(a2 + 48)), v16);
    unint64_t v21 = *(void *)(a2 + 8);
    uint64_t v20 = *(void **)(a2 + 16);
    if (v9 >= v21)
    {
      DspLib::copy(v20, v21, __D);
      DspLib::fill(&__D[v9 - (v9 - *(void *)(a2 + 8))], v9 - *(void *)(a2 + 8), v16);
      unint64_t v9 = *((void *)this + 1);
      *(void *)(a2 + 8) = v9;
      *(void *)(a2 + 48) = 0;
      float v22 = 0.0;
    }
    else
    {
      DspLib::copy(v20, v9, __D);
      float v22 = (float)(v17 * *(float *)(*((void *)this + 8) + 4 * (v9 + *(void *)(a2 + 48)) + 4))
          * *(float *)(*((void *)this + 5) + 4 * *(void *)(a2 + 48));
    }
    *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    *(float *)a2 = v22;
  }
  *(float *)(a2 + 4) = v16;
LABEL_15:
  if (v16 > 0.99885) {
    *(_DWORD *)(a2 + 4) = 1065353216;
  }
}

unint64_t DspLib::GainSmoother::findOffset(DspLib::GainSmoother *this, float a2, float a3)
{
  unint64_t result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    unint64_t v5 = *((void *)this + 1) - 1;
    uint64_t v6 = *((void *)this + 11);
    float v7 = a3 / a2;
    if (v5 < 2)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = vcvtad_u64_f64((double)(v8 + v5) * 0.5);
        if (v7 > *(float *)(v6 + 4 * v9)) {
          uint64_t v8 = v9;
        }
        else {
          unint64_t v5 = v9;
        }
      }
      while (v5 - v8 > 1);
    }
    if (vabds_f32(*(float *)(v6 + 4 * v8), v7) <= vabds_f32(*(float *)(v6 + 4 * v5), v7)) {
      return v8;
    }
    else {
      return v5;
    }
  }
  return result;
}

void DspLib::GainSmoother::process(uint64_t a1, void *__src, vDSP_Length a3, void *__dst, vDSP_Length a5, float a6)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a6 >= 1.0 && *(float *)(a1 + 140) >= 1.0)
    {
      if (__src != __dst)
      {
        DspLib::copy(__src, a3, __dst);
      }
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v12 = (float *)((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      DspLib::GainSmoother::generateGainCurve((DspLib::GainSmoother *)a1, a1 + 136, *(const float **)(a1 + 112), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2, v12, a5, *(float *)(a1 + 248), v13, 0.99);
      float v14 = v12[a5 - 1];
      if (v14 > 0.99885) {
        float v14 = 1.0;
      }
      *(float *)(a1 + 248) = v14;
      DspLib::multiply((const float *)__src, a3, v12, a5, (float *)__dst);
    }
  }
}

void DspLib::BandCombiner::initialize(DspLib::BandCombiner *this, unint64_t a2)
{
  if (*((void *)this + 1) != a2)
  {
    *((void *)this + 1) = a2;
    std::vector<float>::resize((uint64_t)this + 120, a2);
  }
}

void DspLib::BandCombiner::configure(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, float a5)
{
  if (*a1 != a2)
  {
    *a1 = a2;
    std::vector<DspLib::BandCombiner::GainState>::resize((uint64_t *)a1 + 21, a2);
    std::vector<float>::resize((uint64_t)(a1 + 31), *a1);
    DspLib::BandCombiner::reset((float **)a1);
  }
  float v9 = 4.60517021 / a5;
  float v10 = fminf(v9, 1.0);
  uint64_t v11 = (float *)a1[15];
  uint64_t v12 = a1[16] - (void)v11;
  *uint64_t v11 = v10;
  if ((unint64_t)v12 >= 5)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v12 >> 2;
    unint64_t v15 = 1;
    do
    {
      v11[v15] = v10 + (float)((float)(1.0 - v10) * v11[v13]);
      unint64_t v15 = (v13++ + 2);
    }
    while (v14 > v15);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    float v16 = 4.60517021 / *(float *)&a4;
    float v17 = fminf(v16, 1.0);
    std::vector<float>::resize((uint64_t)(a1 + 18), a1[1]);
    float v18 = (float *)a1[18];
    uint64_t v19 = a1[19] - (void)v18;
    *float v18 = v17;
    if ((unint64_t)v19 >= 5)
    {
      uint64_t v20 = 0;
      unint64_t v21 = v19 >> 2;
      unint64_t v22 = 1;
      do
      {
        v18[v22] = v17 + (float)((float)(1.0 - v17) * v18[v20]);
        unint64_t v22 = (v20++ + 2);
      }
      while (v21 > v22);
    }
  }
  else
  {
    a1[19] = a1[18];
  }
  unint64_t v23 = a1[1];
  if (v23 >= a3) {
    unint64_t v23 = a3;
  }
  if (v23 != a1[2])
  {
    a1[2] = v23;
    std::vector<float>::resize((uint64_t)(a1 + 3), v23 + 1);
    std::vector<float>::resize((uint64_t)(a1 + 6), a1[2] + 1);
    std::vector<float>::resize((uint64_t)(a1 + 9), a1[2] + 1);
    unint64_t v24 = a1[2];
    if (v24 != -1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = a1[3];
      unint64_t v27 = a1[6];
      unint64_t v28 = a1[9];
      do
      {
        __double2 v29 = __sincos_stret(3.14159265 / (double)v24 * (double)v25);
        float v30 = v29.__cosval + 1.0;
        *(float *)(v26 + 4 * v25) = v30;
        float v31 = 1.0 / (v29.__cosval + 1.0);
        *(float *)(v27 + 4 * v25) = v31;
        float sinval = v29.__sinval;
        *(float *)(v28 + 4 * v25++) = sinval;
      }
      while (v24 + 1 > v25);
    }
    std::vector<float>::resize((uint64_t)(a1 + 12), v24);
    unint64_t v33 = a1[2];
    if (v33)
    {
      uint64_t v34 = 0;
      unint64_t v35 = a1[12];
      do
      {
        float v36 = tan(3.14159265 / ((double)v33 + (double)v33) * (double)v34);
        *(float *)(v35 + 4 * v34++) = v36;
      }
      while (v33 > v34);
    }
    unint64_t v37 = a1[21];
    unint64_t v38 = a1[22];
    if (v37 != v38)
    {
      do
      {
        std::vector<float>::resize(v37 + 16, a1[2]);
        v37 += 56;
      }
      while (v37 != v38);
      unint64_t v33 = a1[2];
    }
    std::vector<float>::resize((uint64_t)(a1 + 26), v33);
    DspLib::BandCombiner::reset((float **)a1);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::BandCombiner::GainState>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      uint64_t v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(void *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 56;
    }
    a1[1] = v7;
  }
}

void DspLib::BandCombiner::reset(float **this)
{
  DspLib::fill(this[31], this[32] - this[31], 1.0);
  float v2 = this[21];
  uint64_t v3 = this[22];
  if (v2 != v3)
  {
    unint64_t v4 = this[2];
    do
    {
      *(void *)float v2 = 0x3F80000000000000;
      *((void *)v2 + 1) = v4;
      DspLib::fill(*((float **)v2 + 2), (uint64_t)(*((void *)v2 + 3) - *((void *)v2 + 2)) >> 2, 1.0);
      unint64_t v4 = this[2];
      *((void *)v2 + 5) = v4;
      *((void *)v2 + 6) = 0;
      v2 += 14;
    }
    while (v2 != v3);
  }
}

BOOL DspLib::BandCombiner::isReleasing(const float **this)
{
  return DspLib::minv(this[31], this[32] - this[31]) < 1.0;
}

void DspLib::BandCombiner::gainEstimate(uint64_t a1, uint64_t a2, uint64_t a3, vDSP_Length a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  vDSP_Length v36 = a4 - 1;
  vDSP_Length v37 = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (float *)((char *)&v31 - v11);
  unint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = 0;
    uint64_t v34 = a1 + 120;
    uint64_t v35 = a1 + 144;
    float v16 = (_OWORD *)(a1 + 192);
    uint64_t v32 = (char *)(a1 + 208);
    unint64_t v33 = (_OWORD *)(a1 + 232);
    unsigned int v17 = 1;
    while (1)
    {
      uint64_t v18 = *(void *)(a1 + 248);
      float v19 = *(float *)(v18 + 4 * v15);
      float v20 = *(float *)(a2 + 4 * v15);
      unint64_t v21 = (BOOL *)(a5 + 2 * v15);
      *unint64_t v21 = v19 < v20;
      v21[1] = v20 < v19;
      uint64_t v22 = *(void *)(a1 + 168);
      uint64_t v23 = v22 + 56 * v15;
      if (*(float *)(v23 + 4) < v19) {
        goto LABEL_4;
      }
      if (v20 != v19 && (v20 >= v19 || *(void *)(a1 + 16) >= v37)) {
        break;
      }
      *(float *)(a7 + 4 * v15) = v20;
LABEL_13:
      uint64_t v15 = v17;
      if (v14 <= v17++) {
        return;
      }
    }
    if (v19 < v20)
    {
      BOOL v29 = *(void *)(a1 + 152) != *(void *)(a1 + 144) && v17 == 1;
      uint64_t v30 = 120;
      if (v29) {
        uint64_t v30 = 144;
      }
      *(float *)(a7 + 4 * v15) = v19 + (float)((float)(v20 - v19) * *(float *)(*(void *)(a1 + v30) + 4 * v36));
      goto LABEL_13;
    }
LABEL_4:
    *float v16 = *(_OWORD *)v23;
    if (v16 != (_OWORD *)v23)
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v32, *(char **)(v22 + 56 * v15 + 16), *(void *)(v22 + 56 * v15 + 24), (uint64_t)(*(void *)(v22 + 56 * v15 + 24) - *(void *)(v22 + 56 * v15 + 16)) >> 2);
      uint64_t v18 = *(void *)(a1 + 248);
    }
    uint64_t v24 = v34;
    *unint64_t v33 = *(_OWORD *)(v22 + 56 * v15 + 40);
    float v25 = *(float *)(v18 + 4 * v15);
    uint64_t v26 = 120;
    if (v17 == 1 && *(void *)(a1 + 152) != *(void *)(a1 + 144)) {
      uint64_t v26 = 144;
    }
    uint64_t v27 = v35;
    if (v17 != 1 || *(void *)(a1 + 152) == *(void *)(a1 + 144)) {
      uint64_t v27 = v24;
    }
    DspLib::BandCombiner::generateGainCurve((DspLib::BandCombiner *)a1, a1 + 192, *(const float **)(a1 + v26), (uint64_t)(*(void *)(v27 + 8) - *(void *)(a1 + v26)) >> 2, v12, v37, v25, *(float *)(a2 + 4 * v15), 1.0);
    *(float *)(a7 + 4 * v15) = v12[v36];
    unint64_t v14 = *(void *)a1;
    goto LABEL_13;
  }
}

void DspLib::BandCombiner::generateGainCurve(DspLib::BandCombiner *this, uint64_t a2, const float *a3, int a4, float *__D, vDSP_Length __N, float a7, float a8, float a9)
{
  unint64_t v9 = __N;
  float v15 = *(float *)(a2 + 4);
  if (v15 <= a8)
  {
    if (v15 >= a7)
    {
      DspLib::multiplyAdd(a3, __N, __D, a8 - a7, a7);
      uint64_t v29 = *((void *)this + 2);
      *(void *)(a2 + 8) = v29;
      *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v29;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)a2 = 0;
      float v16 = __D[v9 - 1];
    }
    else
    {
      uint64_t v24 = *(void *)(a2 + 40);
      uint64_t v25 = *(void *)(a2 + 16);
      unint64_t v26 = *(void *)(a2 + 8) - v24;
      vDSP_Length v27 = __N - v26;
      if (__N < v26)
      {
        DspLib::copy((void *)(v25 + 4 * v24), __N, __D);
        uint64_t v28 = *(void *)(a2 + 40);
        float v16 = *(float *)(a2 + 4);
        *(float *)a2 = *(float *)a2
                     * (float)(*(float *)(*((void *)this + 9) + 4 * (v28 + *(void *)(a2 + 48) + v9))
                             / *(float *)(*((void *)this + 9) + 4 * (v28 + *(void *)(a2 + 48))));
        *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v28 + v9;
        goto LABEL_15;
      }
      if (v26 == -1) {
        uint64_t v30 = ((*(void *)(a2 + 24) - v25) >> 2) - v24;
      }
      else {
        uint64_t v30 = *(void *)(a2 + 8) - v24;
      }
      DspLib::copy((void *)(v25 + 4 * v24), v30, __D);
      uint64_t v31 = &__D[v9];
      DspLib::multiplyAdd(a3, v27, &v31[-v27], a8 - *(float *)(a2 + 4), *(float *)(a2 + 4));
      uint64_t v32 = *((void *)this + 2);
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v32;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)a2 = 0;
      float v16 = *(v31 - 1);
    }
  }
  else
  {
    float v16 = a8 * a9;
    float v17 = a7 - v16;
    unint64_t Offset = DspLib::BandCombiner::findOffset(this, a7 - v16, *(float *)a2);
    *(void *)(a2 + 48) = Offset;
    unint64_t v19 = *((void *)this + 2) - Offset;
    *(void *)(a2 + 8) = v19;
    std::vector<float>::resize(a2 + 16, v19);
    DspLib::multiplyAdd((const float *)(*((void *)this + 3) + 4 * *(void *)(a2 + 48) + 4), *(void *)(a2 + 8), *(float **)(a2 + 16), v17 * *(float *)(*((void *)this + 6) + 4 * *(void *)(a2 + 48)), v16);
    unint64_t v21 = *(void *)(a2 + 8);
    float v20 = *(void **)(a2 + 16);
    if (v9 >= v21)
    {
      DspLib::copy(v20, v21, __D);
      DspLib::fill(&__D[v9 - (v9 - *(void *)(a2 + 8))], v9 - *(void *)(a2 + 8), v16);
      unint64_t v9 = *((void *)this + 2);
      *(void *)(a2 + 8) = v9;
      *(void *)(a2 + 48) = 0;
      float v22 = 0.0;
    }
    else
    {
      DspLib::copy(v20, v9, __D);
      float v22 = (float)(v17 * *(float *)(*((void *)this + 9) + 4 * (v9 + *(void *)(a2 + 48)) + 4))
          * *(float *)(*((void *)this + 6) + 4 * *(void *)(a2 + 48));
    }
    *(void *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    *(float *)a2 = v22;
  }
  *(float *)(a2 + 4) = v16;
LABEL_15:
  if (v16 > 0.99885) {
    *(_DWORD *)(a2 + 4) = 1065353216;
  }
}

unint64_t DspLib::BandCombiner::findOffset(DspLib::BandCombiner *this, float a2, float a3)
{
  unint64_t result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    unint64_t v5 = *((void *)this + 2) - 1;
    uint64_t v6 = *((void *)this + 12);
    float v7 = a3 / a2;
    if (v5 < 2)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = vcvtad_u64_f64((double)(v8 + v5) * 0.5);
        if (v7 > *(float *)(v6 + 4 * v9)) {
          uint64_t v8 = v9;
        }
        else {
          unint64_t v5 = v9;
        }
      }
      while (v5 - v8 > 1);
    }
    if (vabds_f32(*(float *)(v6 + 4 * v8), v7) <= vabds_f32(*(float *)(v6 + 4 * v5), v7)) {
      return v8;
    }
    else {
      return v5;
    }
  }
  return result;
}

void DspLib::BandCombiner::process(DspLib::BandCombiner *a1, void *a2, uint64_t a3, int a4, float *a5, vDSP_Length __N)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (__N)
  {
    DspLib::clear(a5, __N);
    v23[1] = v23;
    MEMORY[0x1F4188790](v11);
    uint64_t v13 = (float *)((char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (*(void *)a1)
    {
      uint64_t v14 = 0;
      uint64_t v24 = (void *)((char *)a1 + 144);
      unsigned int v15 = 1;
      do
      {
        float v16 = *(float *)(a3 + 4 * v14);
        uint64_t v17 = *((void *)a1 + 21);
        if (v16 >= 1.0 && *(float *)(v17 + 56 * v14 + 4) >= 1.0)
        {
          DspLib::add(a5, __N, *(const float **)(*a2 + 8 * v14));
        }
        else
        {
          uint64_t v18 = v17 + 56 * v14;
          uint64_t v19 = 120;
          if (v15 == 1 && *((void *)a1 + 19) != *((void *)a1 + 18)) {
            uint64_t v19 = 144;
          }
          float v20 = v24;
          if (v15 != 1 || *((void *)a1 + 19) == *((void *)a1 + 18)) {
            float v20 = (void *)((char *)a1 + 120);
          }
          DspLib::BandCombiner::generateGainCurve(a1, v18, *(const float **)((char *)a1 + v19), (uint64_t)(v20[1] - *(void *)((char *)a1 + v19)) >> 2, v13, __N, *(float *)(*((void *)a1 + 31) + 4 * v14), v16, 0.99);
          float v21 = v13[__N - 1];
          if (v21 > 0.99885) {
            float v21 = 1.0;
          }
          *(float *)(*((void *)a1 + 31) + 4 * v14) = v21;
          DspLib::multiplyAccumulate(a5, __N, v13, __N, *(const float **)(*a2 + 8 * v14));
        }
        uint64_t v14 = v15;
      }
      while (*(void *)a1 > (unint64_t)v15++);
    }
  }
}

uint64_t std::vector<DspLib::ComplexVector>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    return std::vector<DspLib::ComplexVector>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = (DspLib::ComplexVector *)&v12[80 * v8];
    v18[0] = v12;
    v18[1] = v14;
    uint64_t v19 = v14;
    float v20 = &v12[80 * v11];
    uint64_t v15 = 5 * a2;
    float v16 = (DspLib::ComplexVector *)((char *)v14 + 80 * a2);
    uint64_t v17 = 16 * v15;
    do
    {
      DspLib::ComplexVector::ComplexVector(v14, 0, 0);
      uint64_t v14 = (DspLib::ComplexVector *)((char *)v14 + 80);
      v17 -= 80;
    }
    while (v17);
    uint64_t v19 = v16;
    std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)v18);
  }
}

void sub_1BB30942C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ComplexVector>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(DspLib::ComplexVector **)(result + 8);
  if (a2)
  {
    uint64_t v4 = (DspLib::ComplexVector *)((char *)v3 + 80 * a2);
    uint64_t v5 = 80 * a2;
    do
    {
      unint64_t result = DspLib::ComplexVector::ComplexVector(v3, 0, 0);
      uint64_t v3 = (DspLib::ComplexVector *)((char *)v3 + 80);
      v5 -= 80;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_1BB3094B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<DspLib::BandCombiner::GainState>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    float v16 = &v12[56 * v8];
    uint64_t v18 = &v12[56 * v11];
    size_t v14 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<DspLib::BandCombiner::GainState>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB30964C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::BandCombiner::GainState>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(_OWORD *)(v7 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v13 + 1) - 56;
      *((void *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DspLib::BandCombiner::GainState>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 56;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

float32x2_t DspLib::LowFlow::EnergyToVelocityLimit::setParameters(uint64_t a1, uint64_t a2)
{
  int v2 = 24 * *(_DWORD *)a1;
  float v3 = *(float *)(a2 + 4 * (v2 + 12));
  float v4 = *(float *)(a2 + 4 * (v2 + 14));
  float v5 = *(float *)(a2 + 4 * (v2 + 16));
  BOOL v6 = v3 > v4 || v4 > v5;
  if (!v6 && v5 <= *(float *)(a1 + 44))
  {
    *(float *)(a1 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
    *(float *)(a1 + 24) = v4;
    *(float *)(a1 + 28) = v5;
  }
  float v7 = *(float *)(a2 + 4 * (v2 + 13));
  float v8 = *(float *)(a2 + 4 * (v2 + 15));
  float32x2_t v9 = *(float32x2_t *)(a2 + 4 * (v2 + 17));
  BOOL v10 = v7 < v8 && v8 < v9.f32[0];
  if (v10 && (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v9, 1), v9).u8[0] & 1) != 0)
  {
    *(float *)(a1 + 4) = v7;
    *(float *)(a1 + 8) = v8;
    *(float32x2_t *)(a1 + 12) = v9;
  }
  else
  {
    float v7 = *(float *)(a1 + 4);
    float v8 = *(float *)(a1 + 8);
    float32x2_t v9 = *(float32x2_t *)(a1 + 12);
  }
  float v11 = v8 - v7;
  float32x2_t v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0);
  v12.f32[0] = v8;
  float32x2_t v13 = vsub_f32(v9, v12);
  float32x2_t v14 = *(float32x2_t *)(a1 + 24);
  v15.i32[0] = vdup_lane_s32((int32x2_t)v14, 1).u32[0];
  *(float *)(a1 + 32) = (float)(v14.f32[0] - *(float *)(a1 + 20)) / v11;
  v15.i32[1] = *(_DWORD *)(a1 + 44);
  float32x2_t result = vdiv_f32(vsub_f32(v15, v14), v13);
  *(float32x2_t *)(a1 + 36) = result;
  return result;
}

float DspLib::LowFlow::EnergyToVelocityLimit::process(DspLib::LowFlow::EnergyToVelocityLimit *this, float a2)
{
  float v2 = *((float *)this + 1);
  if (v2 >= a2) {
    return *((float *)this + 5);
  }
  float v3 = *((float *)this + 2);
  if (v3 >= a2)
  {
    float v5 = a2 - v2;
    float v6 = *((float *)this + 5);
    float v7 = *((float *)this + 8);
  }
  else
  {
    float v4 = *((float *)this + 3);
    if (v4 >= a2)
    {
      float v5 = a2 - v3;
      float v6 = *((float *)this + 6);
      float v7 = *((float *)this + 9);
    }
    else
    {
      float v5 = a2 - v4;
      float v6 = *((float *)this + 7);
      float v7 = *((float *)this + 10);
    }
  }
  return v6 + (float)(v7 * v5);
}

float DspLib::LowFlow::Controller::setAttenuationLimit(float *a1, uint64_t a2)
{
  int v2 = 24 * *(_DWORD *)a1;
  float v3 = *(float *)(a2 + 4 * (v2 + 21));
  float v4 = *(float *)(a2 + 4 * (v2 + 25));
  if (v4 <= v3)
  {
    a1[13] = v3;
    a1[14] = v4;
  }
  float v5 = *(float *)(a2 + 16);
  float v6 = *(float *)(a2 + 4 * (v2 + 26));
  float v7 = a1[14];
  if (v5 > v6) {
    float v7 = v7 + (float)((float)((float)(v5 - v6) / (float)-v6) * (float)(a1[13] - v7));
  }
  return DspLib::dB2Amp((DspLib *)a1, -v7);
}

uint32x2_t DspLib::LowFlow::Controller::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(float *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::LowFlow::Controller::setAttenuationLimit((float *)a1, a2);
  DspLib::LowFlow::EnergyToVelocityLimit::setParameters(a1 + 4, a2);
  int v7 = 24 * *(_DWORD *)a1;
  v8.i32[0] = *(_DWORD *)(a2 + 4 * (v7 + 23));
  float v9 = *(float *)(a2 + 4 * (v7 + 24));
  if (v8.f32[0] >= v9)
  {
    float32x2_t v8 = *(float32x2_t *)(a1 + 68);
  }
  else
  {
    *(_DWORD *)(a1 + 68) = v8.i32[0];
    *(float *)(a1 + 72) = v9;
    v8.f32[1] = v9;
  }
  uint32x2_t result = vcvt_u32_f32(vrnda_f32(vdiv_f32(vmul_n_f32(v8, (float)a4), (float32x2_t)vdup_n_s32(0x473B8000u))));
  *(uint32x2_t *)(a1 + 76) = result;
  return result;
}

float DspLib::LowFlow::Controller::process(uint64_t a1, uint64_t a2, DspLib::LowFlow *a3, uint64_t a4, float *a5, vDSP_Length a6)
{
  *(float *)v12.i32 = DspLib::LowFlow::EnergyToVelocityLimit::process((DspLib::LowFlow::EnergyToVelocityLimit *)(a1 + 4), *(float *)(a2 + 4));
  *(_DWORD *)(a1 + 88) = v12.i32[0];
  float32x2_t v13 = (float32x2_t)vdup_lane_s32(v12, 0);
  float32x2_t v14 = vdiv_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, *(float32x2_t *)(a1 + 92)), (int8x8_t)v13, *(int8x8_t *)(a1 + 92)), v13);
  if (v14.f32[0] < v14.f32[1]) {
    v14.f32[0] = v14.f32[1];
  }
  float v15 = 1.0 / v14.f32[0];
  if (v15 < *(float *)(a1 + 60)) {
    float v15 = *(float *)(a1 + 60);
  }
  *(float *)(a1 + 64) = v15;
  DspLib::LowFlow::velocityClipper(a3, (const float *)*(unsigned int *)(a1 + 76), *(_DWORD *)(a1 + 80), v15, a5, a6, v11);
  float result = *(float *)(a1 + 92);
  int v17 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)a2;
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 84) = v17;
  return result;
}

void DspLib::LowFlow::velocityClipper(DspLib::LowFlow *this, const float *a2, unsigned int a3, float a4, float *a5, vDSP_Length a6, float *a7)
{
  unsigned int v10 = a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int32x2_t v12 = (const float *)((char *)this + 4 * a2);
  vDSP_Length v13 = a3 - a2;
  float v14 = DspLib::rms(v12, v13);
  if (a4 >= 1.0 || v14 <= 0.0)
  {
    DspLib::fill(a5, a6, 1.0);
  }
  else
  {
    float v15 = DspLib::maxv(v12, v13);
    float v16 = v15 * a4;
    MEMORY[0x1F4188790](v17);
    uint64_t v19 = (float *)((char *)&v30 - v18);
    DspLib::clip(v12, v13, (float *)((char *)&v30 - v18), -1.0, v15 * a4);
    float v20 = DspLib::rms(v19, v13);
    if (fabsf(v20 - (float)(a4 * v14)) > (float)(v14 * 0.01))
    {
      float v21 = v14 * a4;
      float v30 = -a4;
      float v31 = a4;
      BOOL v22 = v20 <= (float)(v14 * a4);
      if (v20 <= (float)(v14 * a4)) {
        float v23 = v15 * a4;
      }
      else {
        float v23 = 0.0;
      }
      if (v20 <= (float)(v14 * a4)) {
        float v24 = v20;
      }
      else {
        float v24 = 0.0;
      }
      if (v20 <= (float)(v14 * a4)) {
        float v25 = v15;
      }
      else {
        float v25 = v15 * a4;
      }
      if (v22) {
        float v26 = v14;
      }
      else {
        float v26 = v20;
      }
      int v27 = 20;
      do
      {
        float v16 = v23
            + (float)((float)((float)-(float)(v24 - (float)(v31 * v14)) / (float)(v26 - v24)) * (float)(v25 - v23));
        DspLib::clip(v12, v13, v19, -1.0, v16);
        float v28 = DspLib::rms(v19, v13);
        if (!--v27) {
          break;
        }
        if (v28 <= v21)
        {
          float v24 = v28;
        }
        else
        {
          float v26 = v28;
          float v25 = v16;
        }
        if (v28 <= v21) {
          float v23 = v16;
        }
      }
      while (fabsf(v28 + (float)(v30 * v14)) > (float)(v14 * 0.01));
    }
    DspLib::fill(a5, v10, 1.0);
    uint64_t v29 = &a5[v10];
    DspLib::svdiv(v12, v13, v29, v16);
    DspLib::clip(v29, v13, 0.0, 1.0);
    DspLib::fill(&a5[a3], a6 - a3, 1.0);
  }
}

float DspLib::LowFlow::Controller::status(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 750 * *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4 * v4) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a2 + 4 * (v4 + 425)) = *(_DWORD *)(a1 + 88);
  *(float *)(a2 + 4 * (750 * *(_DWORD *)a1 + 426)) = -DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 64), 0.000001);
  float v6 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 60), 0.000001);
  int v7 = *(_DWORD *)(a1 + 4);
  int v8 = 750 * *(_DWORD *)a1;
  *(float *)(a2 + 4 * (v8 + 427)) = -v6;
  *(_DWORD *)(a2 + 4 * (v8 + 424)) = *(_DWORD *)(a1 + 84);
  float result = *(float *)(a1 + 48);
  *(float *)(a2 + 4 * ((750 * v7) | 1u)) = result;
  return result;
}

void DspLib::LowFlow::Mitigator::initialize(DspLib::LowFlow::Mitigator *this, int a2, int a3)
{
  *(_DWORD *)this = a2;
  *((unsigned char *)this + 16) = a3;
  *((_DWORD *)this + 14) = a2;
  *((_DWORD *)this + 15) = a2;
  if (a3) {
    operator new();
  }

  DspLib::LowFlow::Mitigator::reset(this);
}

void DspLib::LowFlow::Mitigator::reset(DspLib::LowFlow::Mitigator *this)
{
  int v2 = (DspLib::FFT::PartialFrameForwardSTFT *)*((void *)this + 6);
  if (v2) {
    DspLib::FFT::PartialFrameForwardSTFT::reset(v2);
  }
  *((void *)this + 18) = 1067030938;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  float v3 = (DspLib::FFT::PartialFrameForwardSTFT *)*((void *)this + 23);
  if (v3) {
    DspLib::FFT::PartialFrameForwardSTFT::reset(v3);
  }
  DspLib::fill(*((float **)this + 24), (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2, 1.0);
  uint64_t v4 = *((void *)this + 28);
  if (v4)
  {
    float v5 = *(float **)v4;
    vDSP_Length v6 = (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2;
    DspLib::clear(v5, v6);
  }
}

void DspLib::LowFlow::Mitigator::uninitialize(DspLib::LowFlow::Mitigator *this)
{
  uint64_t v4 = *((void *)this + 6);
  int v2 = (void *)((char *)this + 48);
  uint64_t v3 = v4;
  *(v2 - 5) = 0;
  *((unsigned char *)v2 - 32) = 0;
  *int v2 = 0;
  if (v4) {
    std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v5) {
    std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100]((uint64_t)this + 184, v5);
  }
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 21) = *((void *)this + 20);
  *((void *)this + 25) = *((void *)this + 24);
}

uint32x2_t DspLib::LowFlow::Mitigator::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(a1 + 8) != a4)
  {
    *(void *)(a1 + 8) = a4;
    std::vector<float>::resize(a1 + 24, a4);
    DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 24), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
    DspLib::multiply(*(float **)(a1 + 24), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2, 256.0 / (float)*(unint64_t *)(a1 + 8));
    DspLib::sqrt(*(float **)(a1 + 24), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
    operator new();
  }
  int v8 = 24 * *(_DWORD *)a1;
  *(unsigned char *)(a1 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(float *)(a2 + 4 * (v8 + 8)) != 0.0;
  *(unsigned char *)(a1 + 221) = *(float *)(a2 + 4 * (v8 + 9)) != 0.0;
  *(float *)(a1 + 216) = 1.0
                       - expf(-1.0/ (float)((float)((float)(*(float *)(a2 + 4 * (v8 + 22)) * 1000.0) * 375.0)/ 1000.0));

  return DspLib::LowFlow::Controller::setParameters(a1 + 56, a2, a3, a4);
}

void sub_1BB30A280(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E0C40E0F8E434);
  _Unwind_Resume(a1);
}

void DspLib::LowFlow::Mitigator::releaseSmooth(float **this, const float *a2, vDSP_Length a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  int v7 = (const float *)((char *)v10 - v6);
  vDSP_vsbsm(v9, 1, *(const float **)(v8 + 192), 1, (const float *)(v8 + 216), (float *)((char *)v10 - v6), 1, a3);
  DspLib::add(this[24], this[25] - this[24], v7);
  DspLib::vmin(this[24], this[25] - this[24], a2);
}

void DspLib::LowFlow::Mitigator::process(uint64_t a1, void *a2, int a3, int a4, vDSP_Length a5, float *a6, vDSP_Length __N, int a8, char *a9, float *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12 = __N;
  if (a8)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v18 = (const float *)((char *)&v25 - v17);
    DspLib::LowFlow::Controller::process(a1 + 56, v19, v20, (uint64_t)v20, (float *)((char *)&v25 - v17), a5);
    if (*(unsigned char *)(a1 + 220)) {
      DspLib::LowFlow::Mitigator::releaseSmooth((float **)a1, v18, a5);
    }
    else {
      DspLib::fill(*(float **)(a1 + 192), (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2, 1.0);
    }
  }
  if (*(unsigned char *)(a1 + 221))
  {
    DspLib::clear(a6, v12);
    if (a10) {
      DspLib::clear(a10, v12);
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    MEMORY[0x1F4188790](v21);
    uint64_t v23 = *(void *)(a1 + 8) >> 1;
    v26.unint64_t realp = v24;
    v26.imagp = (float *)(((unint64_t)&v25 - v22) & 0xFFFFFFFFFFFFFFC0);
    uint64_t v27 = v23;
    DspLib::FFT::PartialFrameForwardSTFT::process(*(void *)(a1 + 48), a2, v12, &v26);
    DspLib::FFT::multiply((uint64_t)&v26, *(void *)(a1 + 192), (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2);
    DspLib::FFT::PartialFrameInverseSTFT::process(*(DspLib::FFT::InverseSTFT **)(a1 + 184), &v26, a6, v12);
    if (a9 && a10) {
      DspLib::LinearDelay::process(*(char ***)(a1 + 224), a9, v12, (char *)a10, v12);
    }
  }
}

float DspLib::LowFlow::Mitigator::status(uint64_t a1, uint64_t a2)
{
  DspLib::copy(*(void **)(a1 + 192), (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 2, (void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 428)));

  return DspLib::LowFlow::Controller::status(a1 + 56, a2);
}

void std::default_delete<DspLib::LinearDelay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C185D370);
  }
}

void std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(void *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(a2);
    JUMPOUT(0x1C185D370);
  }
}

void std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(void *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(a2);
    JUMPOUT(0x1C185D370);
  }
}

BOOL DspLib::AnalyticSignalTransformBase::initialize(DspLib::AnalyticSignalTransformBase *this, unsigned int a2)
{
  int v3 = *((unsigned __int8 *)this + 8);
  int v4 = *((_DWORD *)this + 3);
  if (a2 >= 0x41)
  {
    int v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    int v8 = 15;
  }
  else
  {
    if (a2)
    {
      *((_DWORD *)this + 3) = a2;
      goto LABEL_4;
    }
    int v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    int v8 = 16;
  }
  printf("DSP Sound assertion in %s at line %d\n", v7, v8);
  ++DspLibDebug::mAssertCounter;
LABEL_4:
  if (v3) {
    BOOL v5 = v4 == a2;
  }
  else {
    BOOL v5 = 0;
  }
  return !v5;
}

BOOL DspLib::AnalyticSignalTransformBiquad::initialize(DspLib::AnalyticSignalTransformBiquad *this, unsigned int a2)
{
  BOOL v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  v8[0] = xmmword_1BB876B20;
  v8[1] = unk_1BB876B30;
  uint64_t v9 = 0x3D81CD60BF567621;
  v6[0] = xmmword_1BB876B48;
  v6[1] = unk_1BB876B58;
  uint64_t v7 = 0x3F5EE547BFEF2B02;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 16), (2 * *((_DWORD *)this + 3)), 2uLL);
  if (*((_DWORD *)this + 3))
  {
    vDSP_Length v4 = 0;
    do
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v8, 2, 0, v4);
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v6, 2, 0, (v4++ + *((_DWORD *)this + 3)));
    }
    while (v4 < *((unsigned int *)this + 3));
  }
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformBiquad *))(*(void *)this + 40))(this);
  return v3;
}

void DspLib::AnalyticSignalTransformBiquad::uninitialize(DspLib::AnalyticSignalTransformBiquad *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 16));
}

void DspLib::AnalyticSignalTransformBiquad::reset(DspLib::AnalyticSignalTransformBiquad *this)
{
}

void DspLib::AnalyticSignalTransformBiquad::process(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a2 + 16))
    {
      MEMORY[0x1F4188790](a1);
      unsigned int v10 = &v20 - v9;
      if (v8 >= 0x200) {
        size_t v11 = 512;
      }
      else {
        size_t v11 = v8;
      }
      bzero(&v20 - v9, v11);
      uint64_t v12 = *(unsigned int *)(a1 + 12);
      uint64_t v13 = (2 * v12);
      MEMORY[0x1F4188790](v14);
      if (v15 >= 0x200) {
        size_t v16 = 512;
      }
      else {
        size_t v16 = v15;
      }
      bzero(&v20 - v13, v16);
      if (v12)
      {
        uint64_t v17 = *(const void **)a2;
        uint64_t v20 = (uint64_t)&v20;
        memmove(v10, v17, 8 * v12);
        memmove(&v10[v12], v17, 8 * v12);
        memmove(&v20 - v13, *a3, 8 * v12);
        memmove(&v20 + v12 - v13, *a4, 8 * v12);
      }
      uint64_t v18 = *(void *)(a2 + 16);
      *(void *)&long long v23 = v10;
      *((void *)&v23 + 1) = (2 * v12);
      uint64_t v24 = v18;
      *(void *)&long long v21 = &v20 - v13;
      *((void *)&v21 + 1) = *((void *)&v23 + 1);
      uint64_t v22 = v18;
      DspLib::Biquad::Filter::process((void *)(a1 + 16), &v23, &v21);
    }
  }
  else
  {
    uint64_t v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v19, 81);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::AnalyticSignalTransformAllpass::initialize(DspLib::AnalyticSignalTransformAllpass *this, unsigned int a2)
{
  BOOL v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  void v9[2] = xmmword_1BB876B90;
  v9[3] = unk_1BB876BA0;
  v9[4] = xmmword_1BB876BB0;
  v9[0] = xmmword_1BB876B70;
  v9[1] = unk_1BB876B80;
  _OWORD v8[2] = xmmword_1BB876BE0;
  void v8[3] = unk_1BB876BF0;
  v8[4] = xmmword_1BB876C00;
  vDSP_Length v4 = (2 * *((_DWORD *)this + 3));
  v8[0] = xmmword_1BB876BC0;
  v8[1] = unk_1BB876BD0;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 16), v4, 4uLL);
  if (*((_DWORD *)this + 3))
  {
    vDSP_Length v5 = 0;
    do
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v9, 4, 0, v5);
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v8, 4, 0, (v5++ + *((_DWORD *)this + 3)));
      unint64_t v6 = *((unsigned int *)this + 3);
    }
    while (v5 < v6);
  }
  else
  {
    unint64_t v6 = 0;
  }
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 88, v6);
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformAllpass *))(*(void *)this + 40))(this);
  return v3;
}

void std::vector<DspLib::SingleSampleDelay>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<DspLib::SingleSampleDelay>::__append((char **)a1, a2 - v2);
  }
}

void DspLib::AnalyticSignalTransformAllpass::uninitialize(DspLib::AnalyticSignalTransformAllpass *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 16));
  *((void *)this + 12) = *((void *)this + 11);
}

void DspLib::AnalyticSignalTransformAllpass::reset(DspLib::AnalyticSignalTransformAllpass *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  unint64_t v2 = (unsigned char *)*((void *)this + 11);
  BOOL v3 = (unsigned char *)*((void *)this + 12);
  if (v2 != v3)
  {
    bzero(v2, ((v3 - v2 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
}

void DspLib::AnalyticSignalTransformAllpass::process(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a2 + 16))
    {
      MEMORY[0x1F4188790](a1);
      unsigned int v10 = &v22 - v9;
      if (v8 >= 0x200) {
        size_t v11 = 512;
      }
      else {
        size_t v11 = v8;
      }
      bzero(&v22 - v9, v11);
      uint64_t v12 = *(unsigned int *)(a1 + 12);
      uint64_t v13 = (2 * v12);
      MEMORY[0x1F4188790](v14);
      if (v15 >= 0x200) {
        size_t v16 = 512;
      }
      else {
        size_t v16 = v15;
      }
      bzero(&v22 - v13, v16);
      if (v12)
      {
        uint64_t v17 = *(const void **)a2;
        uint64_t v22 = (uint64_t)&v22;
        memmove(v10, v17, 8 * v12);
        memmove(&v10[v12], v17, 8 * v12);
        memmove(&v22 - v13, *(const void **)a3, 8 * v12);
        memmove(&v22 + v12 - v13, *a4, 8 * v12);
      }
      uint64_t v18 = *(void *)(a2 + 16);
      *(void *)&long long v25 = v10;
      *((void *)&v25 + 1) = (2 * v12);
      uint64_t v26 = v18;
      *(void *)&long long v23 = &v22 - v13;
      *((void *)&v23 + 1) = *((void *)&v25 + 1);
      uint64_t v24 = v18;
      DspLib::Biquad::Filter::process((void *)(a1 + 16), &v25, &v23);
      if (*(_DWORD *)(a1 + 12))
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        do
        {
          DspLib::SingleSampleDelay::process((float *)(*(void *)(a1 + 88) + v19), *(_DWORD **)(*(void *)a3 + 8 * v20), *(void *)(a3 + 16), *(_DWORD **)(*(void *)a3 + 8 * v20), *(void *)(a3 + 16));
          ++v20;
          v19 += 4;
        }
        while (v20 < *(unsigned int *)(a1 + 12));
      }
    }
  }
  else
  {
    long long v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 182);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::AnalyticSignalTransformPolyPhase::initialize(DspLib::AnalyticSignalTransformPolyPhase *this, unsigned int a2)
{
  BOOL v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 56, *((unsigned int *)this + 3));
  uint64_t v4 = *((void *)this + 56);
  uint64_t v5 = *((void *)this + 57);
  while (v4 != v5)
  {
    std::vector<float>::resize(v4, 0x21uLL);
    v4 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 59, *((unsigned int *)this + 3));
  uint64_t v6 = *((void *)this + 59);
  uint64_t v7 = *((void *)this + 60);
  while (v6 != v7)
  {
    std::vector<float>::resize(v6, 0x21uLL);
    v6 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 62, *((unsigned int *)this + 3));
  uint64_t v8 = *((void *)this + 62);
  uint64_t v9 = *((void *)this + 63);
  while (v8 != v9)
  {
    std::vector<float>::resize(v8, 0x40uLL);
    v8 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 65, *((unsigned int *)this + 3));
  uint64_t v10 = *((void *)this + 65);
  uint64_t v11 = *((void *)this + 66);
  while (v10 != v11)
  {
    std::vector<float>::resize(v10, 0x40uLL);
    v10 += 24;
  }
  v15[0] = xmmword_1BB876C10;
  v15[1] = unk_1BB876C20;
  uint64_t v16 = 0x3F79623EBFFCAF34;
  v13[0] = xmmword_1BB876C38;
  v13[1] = unk_1BB876C48;
  uint64_t v14 = 0x3F6FBC03BFF7CD2CLL;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 16), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 88), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 160), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 232), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v15, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 88, (uint64_t)v15, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 160, (uint64_t)v13, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 232, (uint64_t)v13, 2, 0, 0x41uLL);
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 304, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 328, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 352, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 376, *((unsigned int *)this + 3));
  *((_OWORD *)this + 25) = xmmword_1BB876B10;
  *((_OWORD *)this + 26) = xmmword_1BB876B10;
  *((_OWORD *)this + 27) = xmmword_1BB876B10;
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformPolyPhase *))(*(void *)this + 40))(this);
  return v3;
}

void DspLib::AnalyticSignalTransformPolyPhase::uninitialize(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 16));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 88));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 160));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 232));
  *((void *)this + 39) = *((void *)this + 38);
  *((void *)this + 42) = *((void *)this + 41);
  *((void *)this + 45) = *((void *)this + 44);
  *((void *)this + 48) = *((void *)this + 47);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 56);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 59);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 62);

  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 65);
}

void DspLib::AnalyticSignalTransformPolyPhase::reset(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 64));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 136));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 208));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 280));
  unint64_t v2 = (unsigned char *)*((void *)this + 38);
  BOOL v3 = (unsigned char *)*((void *)this + 39);
  if (v2 != v3) {
    bzero(v2, ((v3 - v2 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  uint64_t v4 = (unsigned char *)*((void *)this + 41);
  uint64_t v5 = (unsigned char *)*((void *)this + 42);
  if (v4 != v5) {
    bzero(v4, ((v5 - v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 44);
  uint64_t v7 = (unsigned char *)*((void *)this + 45);
  if (v6 != v7) {
    bzero(v6, ((v7 - v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  uint64_t v8 = (unsigned char *)*((void *)this + 47);
  uint64_t v9 = (unsigned char *)*((void *)this + 48);
  if (v8 != v9) {
    bzero(v8, ((v9 - v8 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  *((_DWORD *)this + 101) = 0;
  *((_DWORD *)this + 103) = 0;
  *((_DWORD *)this + 105) = 0;
  *((_DWORD *)this + 107) = 0;
  *((_DWORD *)this + 109) = 0;
  *((_DWORD *)this + 111) = 0;
}

void DspLib::AnalyticSignalTransformPolyPhase::process(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v29 = a3;
  float v30 = a4;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      for (unint64_t i = 0; i < v5; unint64_t i = (v8 + i))
      {
        if (v5 - i >= 0x40) {
          uint64_t v8 = 64;
        }
        else {
          uint64_t v8 = v5 - i;
        }
        if (v8)
        {
          float v31 = &v28;
          MEMORY[0x1F4188790](a1);
          uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFF0);
          size_t v11 = 512;
          if (v9 >= 0x200) {
            size_t v12 = 512;
          }
          else {
            size_t v12 = v9;
          }
          bzero((char *)&v28 - ((v9 + 15) & 0xFFFFFFFF0), v12);
          uint64_t v13 = *(unsigned int *)(a1 + 12);
          MEMORY[0x1F4188790](v14);
          uint64_t v15 = (8 * v13 + 15) & 0xFFFFFFFF0;
          if ((unint64_t)(8 * v13) < 0x200) {
            size_t v11 = 8 * v13;
          }
          bzero((char *)&v28 - v15, v11);
          MEMORY[0x1F4188790](v16);
          bzero((char *)&v28 - v15, v11);
          if (v13)
          {
            uint64_t v17 = *(uint64_t **)a2;
            uint64_t v18 = *v29;
            uint64_t v19 = v13;
            unint64_t v20 = (uint64_t *)((char *)&v28 - v15);
            long long v21 = (uint64_t *)((char *)&v28 - v15);
            uint64_t v22 = v10;
            long long v23 = *v30;
            do
            {
              uint64_t v24 = *v17++;
              *v22++ = v24 + 4 * i;
              uint64_t v25 = *v18++;
              *v21++ = v25 + 4 * i;
              uint64_t v26 = *v23++;
              *v20++ = v26 + 4 * i;
              --v19;
            }
            while (v19);
          }
          *(void *)&long long v34 = v10;
          *((void *)&v34 + 1) = v13;
          uint64_t v35 = v8;
          v33[0] = (uint64_t)&v28 - v15;
          v33[1] = v13;
          void v33[2] = v8;
          v32[0] = (char *)&v28 - v15;
          v32[1] = v13;
          v32[2] = v8;
          DspLib::AnalyticSignalTransformPolyPhase::processBlock(a1, &v34, v33, v32);
          unint64_t v5 = *(void *)(a2 + 16);
        }
      }
    }
  }
  else
  {
    uint64_t v27 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v27, 321);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::AnalyticSignalTransformPolyPhase::processBlock(uint64_t a1, long long *a2, uint64_t *a3, void *a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(uint64_t **)(a1 + 448);
  unint64_t v9 = *(uint64_t **)(a1 + 456);
  MEMORY[0x1F4188790](a1);
  size_t v12 = (char *)&v62 - v11;
  if (v10 >= 0x200) {
    size_t v13 = 512;
  }
  else {
    size_t v13 = v10;
  }
  bzero((char *)&v62 - v11, v13);
  if (v9 == v8) {
    goto LABEL_9;
  }
  uint64_t v14 = 0;
  uint64_t v15 = v8;
  do
  {
    uint64_t v16 = *v15;
    v15 += 3;
    *(void *)&v12[8 * v14++] = v16;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v9 - v8) > v14);
  if (v9 == v8) {
LABEL_9:
  }
    uint64_t v17 = 0;
  else {
    uint64_t v17 = (v8[1] - *v8) >> 2;
  }
  *(void *)unsigned int v107 = v12;
  *(void *)&v107[8] = 0xAAAAAAAAAAAAAAABLL * (v9 - v8);
  *(void *)&v107[16] = v17;
  long long v105 = *a2;
  uint64_t v106 = *((void *)a2 + 2);
  DspLib::DownSampler::process((unsigned int *)(a1 + 400), &v105, v107);
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(void *)(a1 + 304) + v19), *(_DWORD **)(*(void *)a2 + 8 * v20), *((void *)a2 + 2), *(_DWORD **)(*a3 + 8 * v20), a3[2]);
      ++v20;
      v19 += 4;
    }
    while (v20 < *(unsigned int *)(a1 + 12));
  }
  long long v21 = *(uint64_t **)(a1 + 472);
  uint64_t v22 = *(uint64_t **)(a1 + 480);
  MEMORY[0x1F4188790](v18);
  uint64_t v25 = (char *)&v62 - v24;
  if (v23 >= 0x200) {
    size_t v26 = 512;
  }
  else {
    size_t v26 = v23;
  }
  bzero((char *)&v62 - v24, v26);
  unint64_t v64 = a4;
  if (v22 == v21) {
    goto LABEL_21;
  }
  uint64_t v27 = 0;
  uint64_t v28 = v21;
  do
  {
    uint64_t v29 = *v28;
    v28 += 3;
    *(void *)&v25[8 * v27++] = v29;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v22 - v21) > v27);
  if (v22 == v21) {
LABEL_21:
  }
    uint64_t v30 = 0;
  else {
    uint64_t v30 = (v21[1] - *v21) >> 2;
  }
  uint64_t v103 = v25;
  *(void *)&long long v104 = 0xAAAAAAAAAAAAAAABLL * (v22 - v21);
  *((void *)&v104 + 1) = v30;
  uint64_t v101 = *a3;
  long long v102 = *(_OWORD *)(a3 + 1);
  DspLib::DownSampler::process((unsigned int *)(a1 + 408), &v101, &v103);
  uint64_t v32 = *(uint64_t **)(a1 + 496);
  float v31 = *(void **)(a1 + 504);
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v31 - v32);
  MEMORY[0x1F4188790](v34);
  vDSP_Length v37 = (char *)&v62 - v36;
  if (v35 >= 0x200) {
    size_t v38 = 512;
  }
  else {
    size_t v38 = v35;
  }
  bzero((char *)&v62 - v36, v38);
  if (v31 != v32)
  {
    uint64_t v39 = 0;
    do
    {
      uint64_t v40 = *v32;
      v32 += 3;
      *(void *)&v37[8 * v39++] = v40;
    }
    while (v33 > v39);
  }
  long long v99 = *(_OWORD *)v107;
  uint64_t v100 = *(void *)&v107[16];
  *(void *)&long long v97 = v37;
  *((void *)&v97 + 1) = v33;
  uint64_t v66 = *(void *)&v107[16];
  uint64_t v98 = *(void *)&v107[16];
  DspLib::Biquad::Filter::process((void *)(a1 + 16), &v99, &v97);
  long long v41 = *(void **)(a1 + 528);
  uint64_t v42 = *(uint64_t **)(a1 + 520);
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v41 - v42);
  MEMORY[0x1F4188790](v44);
  uint64_t v47 = (char *)&v62 - v46;
  if (v45 >= 0x200) {
    size_t v48 = 512;
  }
  else {
    size_t v48 = v45;
  }
  bzero((char *)&v62 - v46, v48);
  if (v41 != v42)
  {
    uint64_t v49 = 0;
    do
    {
      uint64_t v50 = *v42;
      v42 += 3;
      *(void *)&v47[8 * v49++] = v50;
    }
    while (v43 > v49);
  }
  uint64_t v94 = *(void *)&v107[16];
  unsigned int v95 = v103;
  long long v96 = v104;
  *(void *)&long long v93 = v47;
  *((void *)&v93 + 1) = v43;
  uint64_t v65 = *(void *)&v107[16];
  DspLib::Biquad::Filter::process((void *)(a1 + 88), (long long *)&v95, &v93);
  v92[0] = v37;
  v92[1] = v33;
  v92[2] = v66;
  long long v90 = *(_OWORD *)a3;
  uint64_t v91 = a3[2];
  DspLib::UpSampler::process((unsigned int *)(a1 + 416), v92, &v90);
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(void *)(a1 + 328) + v51), *(_DWORD **)(*a3 + 8 * v52), a3[2], *(_DWORD **)(*a3 + 8 * v52), a3[2]);
      ++v52;
      v51 += 4;
    }
    while (v52 < *(unsigned int *)(a1 + 12));
  }
  uint64_t v53 = *((void *)a2 + 2);
  v89[0] = v47;
  v89[1] = v43;
  uint64_t v54 = v65;
  v89[2] = v65;
  v88[0] = v37;
  v88[1] = v33;
  v88[2] = v53;
  DspLib::UpSampler::process((unsigned int *)(a1 + 424), v89, v88);
  long long v86 = *(_OWORD *)a3;
  uint64_t v87 = a3[2];
  *(void *)&long long v84 = v37;
  *((void *)&v84 + 1) = v33;
  uint64_t v63 = v53;
  uint64_t v85 = v53;
  DspLib::add((uint64_t *)&v86, &v84);
  long long v83 = *(_OWORD *)&v107[8];
  *(void *)&long long v80 = v37;
  *((void *)&v80 + 1) = v33;
  uint64_t v55 = v66;
  uint64_t v81 = v66;
  uint64_t v82 = *(void *)v107;
  DspLib::Biquad::Filter::process((void *)(a1 + 160), (long long *)&v82, &v80);
  uint64_t v77 = v54;
  uint64_t v78 = v103;
  long long v79 = v104;
  *(void *)&long long v76 = v47;
  *((void *)&v76 + 1) = v43;
  DspLib::Biquad::Filter::process((void *)(a1 + 232), (long long *)&v78, &v76);
  v75[0] = v37;
  v75[1] = v33;
  v75[2] = v55;
  float v56 = v64;
  long long v73 = *(_OWORD *)v64;
  uint64_t v74 = v64[2];
  DspLib::UpSampler::process((unsigned int *)(a1 + 432), v75, &v73);
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(void *)(a1 + 352) + v57), *(_DWORD **)(*v56 + 8 * v58), v56[2], *(_DWORD **)(*v56 + 8 * v58), v56[2]);
      ++v58;
      v57 += 4;
    }
    while (v58 < *(unsigned int *)(a1 + 12));
  }
  v72[0] = v47;
  v72[1] = v43;
  v72[2] = v65;
  v71[0] = v37;
  v71[1] = v33;
  uint64_t v59 = v63;
  v71[2] = v63;
  DspLib::UpSampler::process((unsigned int *)(a1 + 440), v72, v71);
  long long v69 = *(_OWORD *)v56;
  uint64_t v70 = v56[2];
  *(void *)&long long v67 = v37;
  *((void *)&v67 + 1) = v33;
  uint64_t v68 = v59;
  DspLib::add((uint64_t *)&v69, &v67);
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(void *)(a1 + 376) + v60), *(_DWORD **)(*a3 + 8 * v61), a3[2], *(_DWORD **)(*a3 + 8 * v61), a3[2]);
      ++v61;
      v60 += 4;
    }
    while (v61 < *(unsigned int *)(a1 + 12));
  }
}

BOOL DspLib::EnvelopeProcessor::initialize(DspLib::EnvelopeProcessor *this, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)this;
  int v4 = *((_DWORD *)this + 1);
  if (a2 >= 0x41)
  {
    uint64_t v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    int v15 = 415;
LABEL_25:
    printf("DSP Sound assertion in %s at line %d\n", v14, v15);
    ++DspLibDebug::mAssertCounter;
    goto LABEL_17;
  }
  if (!a2)
  {
    uint64_t v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    int v15 = 416;
    goto LABEL_25;
  }
  *((_DWORD *)this + 1) = a2;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1, a2);
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  while (v6 != v7)
  {
    std::vector<float>::resize(v6, 0x40uLL);
    v6 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 4, *((unsigned int *)this + 1));
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *((void *)this + 5);
  while (v8 != v9)
  {
    std::vector<float>::resize(v8, 0x40uLL);
    v8 += 24;
  }
  int v10 = *((_DWORD *)this + 14);
  switch(v10)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
  }
  (*(void (**)(void, void))(**((void **)this + 8) + 24))(*((void *)this + 8), *((unsigned int *)this + 1));
  *(unsigned char *)this = 1;
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
LABEL_17:
  if (v3) {
    BOOL v12 = v4 == a2;
  }
  else {
    BOOL v12 = 0;
  }
  return !v12;
}

uint64_t DspLib::EnvelopeProcessor::reset(DspLib::EnvelopeProcessor *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t DspLib::EnvelopeProcessor::uninitialize(DspLib::EnvelopeProcessor *this)
{
  *(unsigned char *)this = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 1);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 4);
  uint64_t result = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

void DspLib::EnvelopeProcessor::process(unsigned char *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  size_t v26 = a1;
  if (*a1)
  {
    unint64_t v5 = a2[2];
    if (v5 >= 0x41)
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v5 - v6;
        if (v7 >= 0x40) {
          uint64_t v8 = 64;
        }
        else {
          uint64_t v8 = v7;
        }
        MEMORY[0x1F4188790](a1);
        uint64_t v11 = (char *)&v25 - v10;
        if (v9 >= 0x200) {
          size_t v12 = 512;
        }
        else {
          size_t v12 = v9;
        }
        bzero((char *)&v25 - v10, v12);
        unint64_t v14 = a2[1];
        if (v14)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *a2;
          do
          {
            *(void *)&v11[8 * v15] = *(void *)(v16 + 8 * v15) + 4 * v6;
            ++v15;
          }
          while (v14 > v15);
        }
        unint64_t v17 = a3[1];
        MEMORY[0x1F4188790](v13);
        unint64_t v20 = (char *)&v25 - v19;
        if (v18 >= 0x200) {
          size_t v21 = 512;
        }
        else {
          size_t v21 = v18;
        }
        bzero((char *)&v25 - v19, v21);
        if (v17)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *a3;
          do
          {
            *(void *)&v20[8 * v22] = *(void *)(v23 + 8 * v22) + 4 * v6;
            ++v22;
          }
          while (v17 > v22);
        }
        *(void *)&long long v28 = v11;
        *((void *)&v28 + 1) = v14;
        uint64_t v29 = v8;
        v27[0] = v20;
        v27[1] = v17;
        void v27[2] = v8;
        DspLib::EnvelopeProcessor::processBlock((uint64_t)v26, &v28, v27);
        v6 += v8;
        unint64_t v5 = a2[2];
      }
      while (v6 < v5);
    }
    else
    {
      long long v32 = *(_OWORD *)a2;
      uint64_t v33 = a2[2];
      long long v30 = *(_OWORD *)a3;
      uint64_t v31 = a3[2];
      DspLib::EnvelopeProcessor::processBlock((uint64_t)v26, &v32, &v30);
    }
  }
  else
  {
    uint64_t v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v24, 471);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::EnvelopeProcessor::processBlock(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1)
  {
    if (*((void *)a2 + 2))
    {
      uint64_t v32 = (uint64_t)&v32;
      MEMORY[0x1F4188790](a1);
      uint64_t v8 = (char *)&v32 - v7;
      if (v6 >= 0x200) {
        size_t v9 = 512;
      }
      else {
        size_t v9 = v6;
      }
      bzero((char *)&v32 - v7, v9);
      uint64_t v11 = *(uint64_t **)(a1 + 8);
      uint64_t v12 = *(void *)(a1 + 16) - (void)v11;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v12)
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = *v11;
          v11 += 3;
          *(void *)&v8[8 * v14++] = v15;
        }
        while (v13 > v14);
      }
      uint64_t v16 = *((void *)a2 + 2);
      unint64_t v18 = *(uint64_t **)(a1 + 32);
      unint64_t v17 = *(void **)(a1 + 40);
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v17 - v18);
      MEMORY[0x1F4188790](v10);
      uint64_t v22 = (char *)&v32 - v21;
      if (v20 >= 0x200) {
        size_t v23 = 512;
      }
      else {
        size_t v23 = v20;
      }
      bzero((char *)&v32 - v21, v23);
      if (v17 != v18)
      {
        uint64_t v24 = 0;
        do
        {
          uint64_t v25 = *v18;
          v18 += 3;
          *(void *)&v22[8 * v24++] = v25;
        }
        while (v19 > v24);
      }
      uint64_t v26 = *(void *)(a1 + 64);
      long long v37 = *a2;
      uint64_t v38 = *((void *)a2 + 2);
      v36[0] = v8;
      v36[1] = v13;
      void v36[2] = v16;
      v35[0] = v22;
      v35[1] = v19;
      v35[2] = v16;
      (*(void (**)(uint64_t, long long *, void *, void *))(*(void *)v26 + 48))(v26, &v37, v36, v35);
      if (*(_DWORD *)(a1 + 4))
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          uint64_t v29 = *(float **)(*(void *)(a1 + 32) + v27);
          vDSP_Length v30 = *((void *)a2 + 2);
          __A.unint64_t realp = *(float **)(*(void *)(a1 + 8) + v27);
          __A.imagp = v29;
          vDSP_Length v34 = v30;
          vDSP_zvabs(&__A, 1, *(float **)(*a3 + 8 * v28++), 1, v30);
          v27 += 24;
        }
        while (v28 < *(unsigned int *)(a1 + 4));
      }
    }
  }
  else
  {
    uint64_t v31 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v31, 493);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::AnalyticSignalTransformBase::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a4;
  uint64_t v13 = a2;
  uint64_t v11 = a6;
  v10[0] = &v13;
  v10[1] = 1;
  void v10[2] = a3;
  v9[0] = &v12;
  v9[1] = 1;
  void v9[2] = a5;
  v8[0] = &v11;
  v8[1] = 1;
  _OWORD v8[2] = a7;
  return (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)a1 + 48))(a1, v10, v9, v8);
}

void DspLib::AnalyticSignalTransformBiquad::~AnalyticSignalTransformBiquad(DspLib::AnalyticSignalTransformBiquad *this)
{
  *(void *)this = &unk_1F14A8470;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 64));
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14A8470;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 64));
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::AnalyticSignalTransformBiquad::mode(DspLib::AnalyticSignalTransformBiquad *this)
{
  return 0;
}

uint64_t DspLib::AnalyticSignalTransformAllpass::mode(DspLib::AnalyticSignalTransformAllpass *this)
{
  return 1;
}

void DspLib::AnalyticSignalTransformPolyPhase::~AnalyticSignalTransformPolyPhase(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  DspLib::AnalyticSignalTransformPolyPhase::~AnalyticSignalTransformPolyPhase(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(void *)this = &unk_1F14A8540;
  uint64_t v10 = (void **)((char *)this + 520);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 496);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 472);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v2 = (void *)*((void *)this + 47);
  if (v2)
  {
    *((void *)this + 48) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 44);
  if (v3)
  {
    *((void *)this + 45) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 41);
  if (v4)
  {
    *((void *)this + 42) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 38);
  if (v5)
  {
    *((void *)this + 39) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 280));
  unint64_t v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 208));
  uint64_t v7 = (void *)*((void *)this + 23);
  if (v7)
  {
    *((void *)this + 24) = v7;
    operator delete(v7);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 136));
  uint64_t v8 = (void *)*((void *)this + 14);
  if (v8)
  {
    *((void *)this + 15) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 64));
  size_t v9 = (void *)*((void *)this + 5);
  if (v9)
  {
    *((void *)this + 6) = v9;
    operator delete(v9);
  }
}

uint64_t DspLib::AnalyticSignalTransformPolyPhase::mode(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  return 2;
}

void std::vector<DspLib::SingleSampleDelay>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    unint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

DspLib::LoudnessNormalizer::Algorithm *DspLib::LoudnessNormalizer::Algorithm::Algorithm(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v2 = (_OWORD *)((char *)this + 340);
  uint64_t v3 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::LoudnessNormalizer::Parameters::kParameterDefault, 0x3AuLL, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kMinimum, 58, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kParameterMaxima, 58);
  *(void *)uint64_t v3 = &unk_1F14A85A8;
  *(unsigned char *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_DWORD *)(v3 + 336) = 0;
  *unint64_t v2 = xmmword_1BB873AA0;
  v2[1] = xmmword_1BB873AA0;
  *(void *)(v3 + 372) = 1;
  *(_DWORD *)(v3 + 38DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)(v3 + 384) = 1;
  *(void *)(v3 + 392) = 0x100000000;
  *(void *)(v3 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 536) = 1;
  *(_DWORD *)(v3 + 616) = 0;
  *(unsigned char *)(v3 + 624) = 0;
  *(unsigned char *)(v3 + 768) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 0;
  *((unsigned char *)this + 728) = 0;
  *(_OWORD *)(v3 + 712) = 0u;
  *(_OWORD *)(v3 + 696) = 0u;
  *(_OWORD *)(v3 + 68DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v3 + 664) = 0u;
  *(_OWORD *)(v3 + 648) = 0u;
  *(_OWORD *)(v3 + 632) = 0u;
  *(_DWORD *)(v3 + 735) = 0;
  *((_DWORD *)this + 183) = 0;
  *(void *)(v3 + 756) = 0;
  *(_OWORD *)(v3 + 74DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  bzero((void *)(v3 + 776), 0x209uLL);
  *((_DWORD *)this + 325) = 1065353216;
  *((void *)this + 164) = 0;
  *((_DWORD *)this + 33DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_WORD *)this + 662) = 256;
  *((unsigned char *)this + 1326) = 1;
  *((unsigned char *)this + 1304) = 1;
  float v5 = DspLib::elapsedTimeInMilliseconds((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1312), v4);
  *((_DWORD *)this + 33DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 1324) = 1;
  *((_DWORD *)this + 34DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 1364) = 0;
  *((void *)this + 173) = 0;
  *((void *)this + 166) = 0;
  *((void *)this + 168) = 0;
  *((void *)this + 167) = 0;
  *(void *)((char *)this + 135DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 171) = 0;
  *(void *)((char *)this + 1373) = 0;
  DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor((char *)this + 1408, 0, v5);
  *((unsigned char *)this + 956DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)((char *)this + 9628) = 0u;
  *((_OWORD *)this + 598) = 0u;
  *((_OWORD *)this + 599) = 0u;
  *((_OWORD *)this + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((_OWORD *)this + 601) = 0u;
  *((_OWORD *)this + 603) = 0u;
  *((unsigned char *)this + 9664) = 0;
  *((_DWORD *)this + 2418) = 0;
  *((void *)this + 1219) = 0;
  *((_OWORD *)this + 596) = 0u;
  *((_DWORD *)this + 2388) = 0;
  *((_OWORD *)this + 605) = 0u;
  *((_OWORD *)this + 606) = 0u;
  *((unsigned char *)this + 9712) = 0;
  *(_OWORD *)((char *)this + 972DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((_DWORD *)this + 2436) = 0;
  *((void *)this + 1217) = 0;
  DspLibBuffer::DspLibBuffer((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  *(_OWORD *)((char *)this + 9953) = 0u;
  *(_OWORD *)((char *)this + 9928) = 0u;
  *(_OWORD *)((char *)this + 9944) = 0u;
  *(_OWORD *)((char *)this + 9896) = 0u;
  *(_OWORD *)((char *)this + 9912) = 0u;
  *(_OWORD *)((char *)this + 9864) = 0u;
  *(_OWORD *)((char *)this + 988DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 9848) = 0u;
  *(_OWORD *)((char *)this + 9972) = 0u;
  *(_OWORD *)((char *)this + 9988) = 0u;
  *(_OWORD *)((char *)this + 10004) = 0u;
  *(_OWORD *)((char *)this + 1002DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 10036) = 0u;
  *(_OWORD *)((char *)this + 10052) = 0u;
  *(_OWORD *)((char *)this + 10068) = 0u;
  return this;
}

void sub_1BB30C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  unint64_t v17 = *v15;
  if (*v15)
  {
    v10[1211] = v17;
    operator delete(v17);
  }
  DspLib::LoudnessNormalizer::ShapingFilter::~ShapingFilter(v13);
  uint64_t v18 = *v14;
  *uint64_t v14 = 0;
  if (v18) {
    MEMORY[0x1C185D360](v18, 64);
  }
  uint64_t v19 = v10[161];
  v10[161] = 0;
  if (v19) {
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)(v10 + 161), v19);
  }
  a10 = v10 + 158;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 96));
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v12);
  vp::vx::io::Direction_Pair<std::vector<std::tuple<unsigned int,vp::services::Audio_Issue_Detector_Node_ID>>>::~Direction_Pair((uint64_t)(v10 + 69));
  unint64_t v20 = (void *)v10[64];
  if (v20)
  {
    v10[65] = v20;
    operator delete(v20);
  }
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)(v10 + 51));
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v11);
  *unint64_t v10 = &unk_1F14A87D8;
  uint64_t v21 = (void *)v10[4];
  if (v21)
  {
    v10[5] = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::ShapingFilter::~ShapingFilter(DspLib::LoudnessNormalizer::ShapingFilter *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::ShapingFilter *)((char *)this + 48));
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::initialize(DspLib::LoudnessNormalizer::Algorithm *this, int a2, double a3)
{
  uint64_t v6 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (!a2)
  {
    uint64_t v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    int v13 = 29;
LABEL_7:
    printf("DSP Sound assertion in %s at line %d\n", v12, v13);
    ++DspLibDebug::mAssertCounter;
    return v6;
  }
  if (a3 == 0.0)
  {
    uint64_t v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    int v13 = 30;
    goto LABEL_7;
  }
  unint64_t v7 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 216))(this);
  std::vector<float>::resize((uint64_t)this + 9680, v7);
  unsigned int v8 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1231, v8);
  **((_DWORD **)this + 121DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *((void *)this + 1213) = 0;
  *((_DWORD *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), 1uLL, *((double *)this + 2), 1uLL);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216), 1uLL, *((double *)this + 2), 1uLL);
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 216, 0x4348000000000006uLL, (double *)0x3F80000000000000, 0, 0x41uLL);
  unsigned int v9 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this);
  std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 158, v9);
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 128))(this);
  (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *, void))(*(void *)this + 200))(this, *((unsigned __int8 *)this + 24));
  DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
  DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v10);
  DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  return v6;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetLoudnessHistory(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, a2);

  return DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
}

void DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (!DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(8, *((float *)this + 186)))
  {
    int v2 = *((_DWORD *)this + 188);
    int v3 = *((_DWORD *)this + 183);
    DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    if (v2 == 1)
    {
      if (v3 == 1) {
        DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
      }
      else {
        DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
      }
      DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    }
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::uninitialize(DspLib::LoudnessNormalizer::Algorithm *this)
{
  *((unsigned char *)this + 24) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 1231);
  *((void *)this + 1235) = *((void *)this + 1234);
  *((void *)this + 1238) = *((void *)this + 1237);
  *((void *)this + 1241) = *((void *)this + 1240);
  *((void *)this + 1244) = *((void *)this + 1243);
  *((void *)this + 1211) = *((void *)this + 1210);
  *((void *)this + 1213) = 0;
  DspLibBuffer::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  DspLib::LinearDelay::setLength((float **)this + 64, 0);
  uint64_t v2 = *((void *)this + 1192);
  *((void *)this + 1192) = 0;
  if (v2) {
    MEMORY[0x1C185D360](v2, 64);
  }
  DspLib::FastMedianFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552));
  uint64_t v3 = *((void *)this + 161);
  *((void *)this + 161) = 0;
  if (v3) {
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)this + 1288, v3);
  }
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216));
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 768));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 158);
  uint64_t v4 = *((void *)this + 1253);
  *((void *)this + 1253) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = *((void *)this + 1254);
  *((void *)this + 1254) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((unsigned char *)this + 8) = 0;
  return result;
}

double DspLib::LoudnessNormalizer::Algorithm::reset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (!DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(1, *((float *)this + 186)))
  {
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v2);
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  }
  uint64_t v3 = (DspLib::CircularDelay *)*((void *)this + 158);
  uint64_t v4 = (DspLib::CircularDelay *)*((void *)this + 159);
  while (v3 != v4)
  {
    DspLib::CircularDelay::reset(v3);
    uint64_t v3 = (DspLib::CircularDelay *)((char *)v3 + 32);
  }
  *((unsigned char *)this + 9712) = 0;
  *((_DWORD *)this + 2436) = 0;
  *((_DWORD *)this + 34DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((unsigned char *)this + 1364) = 0;
  *((void *)this + 1259) = 0;
  *((_DWORD *)this + 252DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 972DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((_DWORD *)this + 2434) = 0;
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)this + 768)) {
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 816));
    }
    if (*((unsigned char *)this + 624)) {
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 672));
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 456));
    if (*((_DWORD *)this + 183) < 2u)
    {
      float v8 = DspLib::dB2Power(v4, a2 + 0.691);
      DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), v8);
      DspLib::fill(*((float **)this + 64), (uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 2, v8);
    }
    else
    {
      float v5 = DspLib::dB2Power(v4, -70.0);
      DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), v5);
      float v7 = DspLib::dB2Power(v6, -70.0);
      DspLib::fill(*((float **)this + 64), (uint64_t)(*((void *)this + 65) - *((void *)this + 64)) >> 2, v7);
      *((float *)this + 95) = a2;
    }
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1408), a2);
    *((_DWORD *)this + 2386) = 0;
    unsigned int v9 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)*((void *)this + 1192);
    if (v9) {
      DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(v9, a2);
    }
    *((float *)this + 2387) = a2;
    if (*((unsigned char *)this + 737)) {
      float v10 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
    }
    else {
      float v10 = 0.0;
    }
    uint64_t v11 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9560);
    *((float *)this + 2388) = v10;
    uint64_t v12 = *((void *)this + 161);
    if (v12) {
      DspLib::fill(*(float **)v12, (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 2, a2);
    }
    *((float *)this + 152) = a2;
    DspLib::FastMedianFilter::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552));
    *((float *)this + 342) = a2;
    *((float *)this + 343) = a2;
    DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 264));
    *((float *)this + 2495) = a2;
    float __D = *((float *)this + 2388) + a2;
    DspLib::LoudnessNormalizer::GainTable::gainForLevel((uint64_t)this + 840, &__D, 1uLL);
    float v13 = __D;
    *((float *)this + 2493) = __D;
    float v15 = DspLib::dB2Amp(v14, v13);
    DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216), v15);
    vDSP_Length v16 = *((void *)this + 1213);
    unint64_t v17 = (float *)*((void *)this + 1210);
    float v19 = DspLib::dB2Amp(v18, *((float *)this + 2493));
    DspLib::fill(v17, v16, v19);
    *((_DWORD *)this + 344) = 0;
    *((unsigned char *)this + 138DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *((_DWORD *)this + 346) = 0;
    *((unsigned char *)this + 1304) = 1;
    DspLib::elapsedTimeInMilliseconds((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1312), v20);
    *((_DWORD *)this + 33DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *((unsigned char *)this + 1324) = 1;
    *((unsigned char *)this + 9664) = 0;
    *((void *)this + 1207) = 0;
    uint64_t v21 = (DspLib::CircularDelay *)*((void *)this + 158);
    uint64_t v22 = (DspLib::CircularDelay *)*((void *)this + 159);
    while (v21 != v22)
    {
      DspLib::CircularDelay::reset(v21);
      uint64_t v21 = (DspLib::CircularDelay *)((char *)v21 + 32);
    }
    if (*(unsigned char *)v11)
    {
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9608));
      *((_DWORD *)this + 241DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = -1054867456;
      DspLib::LoudnessNormalizer::ShapingFilter::setGain(v11, 0.0);
    }
    *((_DWORD *)this + 2418) = 1148846080;
    *((void *)this + 1251) = 1148846080;
    uint64_t v23 = *((void *)this + 1253);
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 136))(v23);
    }
    uint64_t result = *((void *)this + 1254);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
    }
    *((float *)this + 2494) = *((float *)this + 2493) + *((float *)this + 2388);
    *((int32x4_t *)this + 624) = vdupq_n_s32(0xC2C80000);
    *((void *)this + 125DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0xC2C8000000000000;
    *((void *)this + 1252) = 0;
    *((unsigned char *)this + 9968) = 1;
  }
  else
  {
    uint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v25, 141);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters(uint64_t this)
{
  if (*(unsigned char *)(this + 8))
  {
    *(_DWORD *)(this + 344) = 0;
    *(_DWORD *)(this + 352) = 0;
    *(_DWORD *)(this + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(_DWORD *)(this + 368) = 0;
    *(_DWORD *)(this + 376) = 0;
    *(_DWORD *)(this + 388) = 0;
    *(_DWORD *)(this + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(void *)(this + 544) = 0;
  }
  else
  {
    uint64_t v1 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v1, 126);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

float DspLib::LoudnessNormalizer::Algorithm::targetLoudness(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (*((_DWORD *)this + 188) != 2) {
    return *(float *)(*((void *)this + 4) + 20);
  }
  uint64_t v1 = *((void *)this + 4);
  float v3 = *(float *)(v1 + 200);
  float v2 = (float *)(v1 + 200);
  float v4 = v3;
  float v5 = (float)((float)(*((float *)this + 2436) - *(v2 - 4)) - *(v2 - 3)) + *(v2 - 2);
  float v6 = v2[1];
  float v12 = v5;
  BOOL v7 = v6 < v3;
  if (v6 >= v3) {
    float v8 = v6;
  }
  else {
    float v8 = v4;
  }
  if (v7) {
    unsigned int v9 = v2;
  }
  else {
    unsigned int v9 = v2 + 1;
  }
  if (v7)
  {
    float v4 = v6;
    ++v2;
  }
  float v10 = &v12;
  if (v8 < v5) {
    float v10 = v9;
  }
  if (v5 >= v4) {
    float v2 = v10;
  }
  return *v2;
}

double DspLib::LoudnessNormalizer::Algorithm::latencySamples(DspLib::LoudnessNormalizer::Algorithm *this)
{
  float v2 = *(float *)(*((void *)this + 4) + 40);
  if (*((_DWORD *)this + 183) >= 2u)
  {
    (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *, uint64_t))(*(void *)this + 104))(this, 10);
    float v4 = 3.0;
    if (v2 <= 3.0) {
      float v4 = v2;
    }
    if (v2 >= v3) {
      float v2 = v4;
    }
    else {
      float v2 = v3;
    }
  }
  return round(*((double *)this + 2) * v2 / 1000.0);
}

unsigned char *DspLib::LoudnessNormalizer::Algorithm::setMeteringIsEnabled(unsigned char *this, int a2)
{
  this[24] = a2;
  if (this[8])
  {
    float v2 = this;
    this = (unsigned char *)*((void *)this + 1253);
    if (a2)
    {
      if (!this) {
        operator new();
      }
      if (!*((void *)v2 + 1254)) {
        operator new();
      }
    }
    else
    {
      *((void *)v2 + 1253) = 0;
      if (this) {
        (*(void (**)(unsigned char *))(*(void *)this + 8))(this);
      }
      this = (unsigned char *)*((void *)v2 + 1254);
      *((void *)v2 + 1254) = 0;
      if (this)
      {
        float v3 = *(uint64_t (**)(void))(*(void *)this + 8);
        return (unsigned char *)v3();
      }
    }
  }
  return this;
}

void sub_1BB30D76C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40AC40406ELL);
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::Algorithm::setEnvironmentalNoiseSPL(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  *((float *)this + 2436) = a2;
  DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
}

void DspLib::LoudnessNormalizer::Algorithm::configureGainTable(DspLib::LoudnessNormalizer::Algorithm *this)
{
  int v2 = *((_DWORD *)this + 188);
  if (v2 == 2)
  {
    float v3 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    uint64_t v14 = (float *)*((void *)this + 4);
    float v5 = v14[4];
    float v6 = *((float *)this + 189);
    float v7 = *((float *)this + 185);
    float v9 = v14[38];
    BOOL v10 = v14[37] != 0.0;
    float v11 = v14[42];
    BOOL v12 = v14[43] >= 0.5;
    float v13 = (char *)this + 840;
    unsigned int v8 = 0;
  }
  else if (v2 == 1)
  {
    float v15 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    float v16 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)4);
    float v17 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
    float v18 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    uint64_t v19 = *((void *)this + 4);
    unsigned int v20 = vcvtas_u32_f32(*(float *)(v19 + 128));
    BOOL v21 = *(float *)(v19 + 148) != 0.0;
    float v9 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0x26);
    uint64_t v22 = *((void *)this + 4);
    float v11 = *(float *)(v22 + 168);
    BOOL v12 = *(float *)(v22 + 172) >= 0.5;
    float v13 = (char *)this + 840;
    float v3 = v15;
    float v5 = v16;
    float v6 = v17;
    float v7 = v18;
    unsigned int v8 = v20;
    BOOL v10 = v21;
  }
  else
  {
    if (v2) {
      return;
    }
    float v3 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    float v4 = (float *)*((void *)this + 4);
    float v5 = v4[4];
    float v6 = *((float *)this + 189);
    float v7 = *((float *)this + 185);
    unsigned int v8 = vcvtas_u32_f32(v4[32]);
    float v9 = v4[38];
    BOOL v10 = v4[37] != 0.0;
    float v11 = v4[42];
    BOOL v12 = v4[43] >= 0.5;
    float v13 = (char *)this + 840;
  }

  DspLib::LoudnessNormalizer::GainTable::setParameters((uint64_t)v13, v8, v10, v12, v3, v5, v6, v7, v9, v11);
}

float DspLib::LoudnessNormalizer::Algorithm::processEnvironmentalNoiseSmoothing(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  uint64_t v2 = *((void *)this + 1215);
  uint64_t v3 = *((void *)this + 1216);
  *((float *)this + 2435) = a2;
  *((void *)this + 1216) = v2;
  unint64_t v4 = v2 - v3;
  if (v4)
  {
    float v5 = *((double *)this + 2);
    *((float *)this + 2434) = *((float *)this + 2434)
                            + (float)((float)((float)(v5 / (float)v4) - *((float *)this + 2434)) * 0.05);
  }
  if (*((unsigned char *)this + 736) || *((unsigned char *)this + 1364)) {
    return *((float *)this + 2520);
  }
  float v7 = (float)((float)(*(float *)(*((void *)this + 4) + 204) + *(float *)(*((void *)this + 4) + 184))
             + *(float *)(*((void *)this + 4) + 188))
     - *(float *)(*((void *)this + 4) + 192);
  if (v7 >= a2) {
    float v7 = a2;
  }
  BOOL v8 = a2 < 0.0;
  float v9 = 0.0;
  if (!v8) {
    float v9 = v7;
  }
  return DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::process((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 10040), v9, *((void *)this + 1219) > 0);
}

float DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::process(DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother *this, float a2, int a3)
{
  float v3 = *((float *)this + 9);
  float v4 = *((float *)this + 8)
     + (float)(*((float *)this + (*((float *)this + 8) >= a2)) * (float)(a2 - *((float *)this + 8)));
  uint64_t v5 = 12;
  if (v3 < a2) {
    uint64_t v5 = 8;
  }
  float v6 = v3 + (float)(*(float *)((char *)this + v5) * (float)(a2 - v3));
  *((float *)this + 8) = v4;
  *((float *)this + 9) = v6;
  float v7 = *((float *)this + 10);
  if (v7 >= a2)
  {
    uint64_t v12 = 24;
    if (a3) {
      uint64_t v12 = 28;
    }
    float v11 = *(float *)((char *)this + v12);
  }
  else
  {
    float v8 = (float)(v4 - v6) * 0.08;
    float v9 = 1.0 - v8;
    if (v8 > 1.0) {
      float v9 = 0.0;
    }
    if (v8 >= 0.0) {
      float v10 = v9;
    }
    else {
      float v10 = 1.0;
    }
    float v11 = (float)((float)(1.0 - (float)(v10 * v10)) * *((float *)this + 5))
        + (float)((float)(v10 * v10) * *((float *)this + 4));
  }
  float result = v7 + (float)(v11 * (float)(a2 - v7));
  *((float *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = result;
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::setParameter(DspLib::LoudnessNormalizer::Algorithm *this, uint64_t a2, float a3)
{
  switch(a2)
  {
    case 47:
      if (!DspLib::isEqual(this, a3, *(float *)(*((void *)this + 4) + 188), 1.0e-20))
      {
        *(float *)(*((void *)this + 4) + 188) = a3;
        if (*((_DWORD *)this + 188) == 2)
        {
          *((void *)this + 1219) = vcvtad_u64_f64(*((double *)this + 2) * 0.25);
          DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
        }
      }
      break;
    case 34:
      *(float *)(*((void *)this + 4) + 136) = a3;
      *((float *)this + 2376) = a3;
      break;
    case 1:
      *(float *)(*((void *)this + 4) + 4) = a3;
      *((float *)this + 19DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a3;
      DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
      DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
      *((_DWORD *)this + 152) = v5;
      break;
    default:
      DspLib::AlgorithmBase::setParameter(this, a2, a3);
      break;
  }
}

float DspLib::LoudnessNormalizer::GainTable::setParameters(uint64_t a1, unsigned int a2, int a3, int a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  float v35 = a7 + a8;
  float v36 = a5 - (float)(a7 + a8);
  float v34 = a5 + a6;
  uint64_t v17 = a1 + 4;
  float v18 = 1.0 - (float)(1.0 / a9);
  if (a9 > 100.0) {
    float v18 = 0.99;
  }
  if (a9 < 1.0) {
    float v18 = 0.0;
  }
  float v33 = v18;
  float v19 = -100.0;
  for (uint64_t i = 4; i != 88; i += 4)
  {
    if (a2)
    {
      if (a2 > 2) {
        goto LABEL_25;
      }
      float v21 = (float)(a5 - v19) * 0.8;
      float v22 = v21 * -0.03125;
      if (v21 < 0.0)
      {
        float v23 = 12.0;
      }
      else
      {
        float v22 = v21 / 22.0;
        float v23 = 9.0;
      }
      float v24 = logf(v22);
      float v25 = expf(v24 * v23);
      float v26 = logf(v25 + 1.0);
      float v27 = v21 / expf(v26 / v23);
      if (v27 > 0.0 && a2 == 2) {
        float v27 = v27 * 0.66;
      }
    }
    else
    {
      float v27 = a8;
      if (v19 >= v36)
      {
        if (v19 >= a5)
        {
          if (a3)
          {
            float v29 = a5 - v19;
            float v30 = v33;
          }
          else
          {
            float v29 = 1.0 - (float)(v19 / a5);
            float v30 = v34;
          }
          float v27 = v30 * v29;
        }
        else
        {
          float v27 = (float)((float)(a5 - v19) * a8) / v35;
        }
      }
    }
    *(float *)(a1 + i) = v27;
LABEL_25:
    if (a4)
    {
      float v31 = a10 - v19;
      if ((float)(a10 - v19) >= *(float *)(a1 + i)) {
        float v31 = *(float *)(a1 + i);
      }
      *(float *)(a1 + i) = v31;
    }
    float v19 = v19 + 5.5;
  }

  return DspLib::createInterpolationTable(v17, 21, a1 + 88, 0x54uLL);
}

float DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(DspLib::LoudnessNormalizer::Algorithm *this, DspLib::LoudnessNormalizer::Parameters *a2)
{
  float v4 = *(float *)(*((void *)this + 4)
                + 4
                * DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(a2, 0));
  float v5 = *(float *)(*((void *)this + 4)
                + 4
                * DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(a2, 1));
  float v6 = *(float *)(*((void *)this + 4)
                + 4 * DspLib::LoudnessNormalizer::Parameters::automationParameter(a2, 0));
  unsigned int v7 = DspLib::LoudnessNormalizer::Parameters::automationParameter(a2, 1);
  if (v5 >= v4) {
    float v8 = v4;
  }
  else {
    float v8 = v5;
  }
  if (v4 >= v5) {
    float v9 = v4;
  }
  else {
    float v9 = v5;
  }
  float v10 = *((float *)this + 190);
  if (v9 >= v10) {
    float v11 = *((float *)this + 190);
  }
  else {
    float v11 = v9;
  }
  if (v10 >= v8) {
    float v12 = v11;
  }
  else {
    float v12 = v8;
  }
  return v6
       + (float)((float)(*(float *)(*((void *)this + 4) + 4 * v7) - v6)
               * (float)((float)(v12 - v8) / (float)((float)(v9 - v8) + 1.0)));
}

float DspLib::LoudnessNormalizer::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  float v6 = (DspLib *)DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (!*(unsigned char *)(a1 + 8)) {
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  unsigned int v9 = vcvtas_u32_f32(*(float *)(v8 + 68));
  BOOL v10 = *(float *)(v8 + 160) >= 0.5;
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(v8 + 176);
  float v11 = *(float *)(v8 + 24);
  float v12 = *(float *)(v8 + 28);
  *(_DWORD *)(a1 + 732) = v9;
  *(unsigned char *)(a1 + 736) = v10;
  *(unsigned char *)(a1 + 737) = v11 >= 0.5;
  *(unsigned char *)(a1 + 738) = v12 >= 0.5;
  *(_DWORD *)(a1 + 74DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(v8 + 64);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(a1 + 752) = vcvtas_u32_f32(*(float *)(v8 + 76));
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(a1 + 76DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v8 + 4);
  *(unsigned char *)(a1 + 728) = *(float *)v8 < 0.5;
  *(float *)(a1 + 1348) = DspLib::dB2Amp(v6, *(float *)(v8 + 220));
  *(float *)(a1 + 1352) = DspLib::dB2Amp(v13, *(float *)(*(void *)(a1 + 32) + 224));
  BOOL isEqual = DspLib::isEqual(v14, *(float *)(*(void *)(a1 + 32) + 220), 0.0, 1.0e-20);
  *(unsigned char *)(a1 + 1356) = !isEqual;
  *(unsigned char *)(a1 + 1357) = !DspLib::isEqual((DspLib *)isEqual, *(float *)(*(void *)(a1 + 32) + 224), 0.0, 1.0e-20);
  if (*(unsigned char *)(a1 + 1356))
  {
    unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    DspLibBuffer::initialize((DspLibBuffer *)(a1 + 9760), v4, v16);
  }
  else
  {
    DspLibBuffer::uninitialize((DspLibBuffer *)(a1 + 9760));
  }
  if (DspLib::LoudnessNormalizer::Algorithm::computeSRCFactors((DspLib::LoudnessNormalizer::Algorithm *)a1))
  {
    float v17 = *(float *)(a1 + 328);
    unsigned int v18 = vcvtas_u32_f32(v17 * 0.8);
    LODWORD(v4) = vcvtas_u32_f32(v17 / *(float *)(a1 + 336));
    DspLib::LoudnessNormalizer::Algorithm::configureSamplerateConverters(a1);
    DspLib::LoudnessNormalizer::Algorithm::resizeTempBuffers((DspLib::LoudnessNormalizer::Algorithm *)a1);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = v18;
    }
    DspLib::LinearDelay::setLength((float **)(a1 + 512), v19);
    *(void *)(a1 + 536) = v4;
    float v20 = *(float *)(a1 + 336);
    *(float *)(a1 + 9448) = v20;
    *(float *)(a1 + 948DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1.0 - expf(-1.0 / (float)((float)(v20 * (float)(*(float *)(a1 + 9476) * 1000.0)) / 1000.0));
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters(a1);
  }
  uint64_t v21 = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 9504) = *(_DWORD *)(v21 + 136);
  *(unsigned char *)(a1 + 9496) = *(float *)(v21 + 140) >= 0.5;
  *(_DWORD *)(a1 + 950DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 732);
  float v22 = *(float *)(v21 + 180);
  *(float *)(a1 + 9476) = v22;
  *(float *)(a1 + 948DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1.0 - expf(-1.0 / (float)((float)((float)(v22 * 1000.0) * *(float *)(a1 + 9448)) / 1000.0));
  DspLib::LoudnessNormalizer::Algorithm::configureSideChainLowPassFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  unsigned int v23 = vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 144));
  if (!v23)
  {
    float v24 = 1.0e10;
    goto LABEL_15;
  }
  if (v23 == 1)
  {
    float v24 = 2000.0;
LABEL_15:
    *(float *)(a1 + 1388) = 1.0 - expf(-1.0 / (float)((float)(v24 * *(float *)(a1 + 328)) / 1000.0));
  }
  DspLib::LoudnessNormalizer::Algorithm::configureHysteresisAndOffsets((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureWeightingFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configurePeakPowerFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  if (*(_DWORD *)(a1 + 732) >= 2u) {
    *(double *)(a1 + 9648) = *(float *)(a1 + 328);
  }
  DspLib::LoudnessNormalizer::Algorithm::configureIntegratedLoudnessDelay((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureGainTable((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureMedianFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureAGC((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureShapingFilter((float **)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureMeters((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureAutoReset((DspLib::LoudnessNormalizer::Algorithm *)a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  float v26 = *(DspLib::CircularDelay **)(a1 + 1264);
  float v27 = *(DspLib::CircularDelay **)(a1 + 1272);
  if (v26 != v27)
  {
    unint64_t v28 = (unint64_t)v25;
    do
    {
      DspLib::CircularDelay::setLength(v26, v28);
      float v26 = (DspLib::CircularDelay *)((char *)v26 + 32);
    }
    while (v26 != v27);
  }
  float v29 = *(float **)(a1 + 32);
  float v30 = v29[49];
  float v31 = v29[52];
  float v32 = v29[53];
  float v33 = v29[54];

  return DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::setParameters((float *)(a1 + 10040), v30, v31, v32, v33);
}

BOOL DspLib::LoudnessNormalizer::Algorithm::computeSRCFactors(DspLib::LoudnessNormalizer::Algorithm *this)
{
  double v1 = *((double *)this + 2);
  if (v1 >= 50000.0) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  unsigned int v3 = vcvtas_u32_f32(*(float *)(*((void *)this + 4) + 8));
  if (v1 < 30000.0) {
    int v2 = 1;
  }
  int v4 = 2 * v2;
  if (v3 == 3) {
    int v2 = 1;
  }
  if (v3 >= 2) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = v4;
  }
  BOOL v6 = v5 != *((_DWORD *)this + 80);
  *((_DWORD *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  float v7 = v1 / (double)v5;
  float v8 = roundf(v7);
  *((float *)this + 81) = v8;
  *((float *)this + 82) = v8 / (float)(0x40 / v5);
  *((float *)this + 83) = v8 / (float)(0x200 / v5);
  *((float *)this + 84) = v8 / (float)(0x1000 / v5);
  return v6;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::configureSamplerateConverters(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 320);
  unsigned int v2 = 0x40 / v1;
  unsigned int v3 = 0x200 / v1;
  *(_DWORD *)(this + 34DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v1;
  *(_DWORD *)(this + 344) = 0;
  if (v1 <= 0x40)
  {
    *(_DWORD *)(this + 348) = v2;
    *(_DWORD *)(this + 352) = 0;
  }
  if (v2 <= v3)
  {
    unsigned int v4 = v3 / v2;
    *(void *)(this + 356) = v4;
    *(void *)(this + 364) = v4;
  }
  float v5 = *(float *)(this + 332);
  unsigned int v6 = vcvtas_u32_f32(v5 / *(float *)(this + 336));
  if (v6)
  {
    *(_DWORD *)(this + 372) = v6;
    *(_DWORD *)(this + 376) = 0;
  }
  float v7 = *(float *)(this + 328);
  unsigned int v8 = vcvtas_u32_f32(v7 / v5);
  if (v8)
  {
    *(_DWORD *)(this + 384) = v8;
    *(_DWORD *)(this + 388) = 0;
  }
  unsigned int v9 = vcvtad_u64_f64(*(double *)(this + 16) / v7);
  if (v9)
  {
    *(_DWORD *)(this + 396) = v9;
    *(_DWORD *)(this + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  }
  return this;
}

void DspLib::LoudnessNormalizer::Algorithm::resizeTempBuffers(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v2 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 216))(this)
     / (unint64_t)*((unsigned int *)this + 80)
     + 1;
  unint64_t v3 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 216))(this);
  unint64_t v4 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 216))(this);
  uint64_t v5 = *((void *)this + 1231);
  uint64_t v6 = *((void *)this + 1232);
  while (v5 != v6)
  {
    std::vector<float>::resize(v5, v2);
    v5 += 24;
  }
  unint64_t v7 = (v4 >> 9) + 1;
  std::vector<float>::resize((uint64_t)this + 9872, v2);
  std::vector<float>::resize((uint64_t)this + 9896, (v3 >> 6) + 1);
  std::vector<float>::resize((uint64_t)this + 9920, v7);

  std::vector<float>::resize((uint64_t)this + 9944, v7);
}

void DspLib::LoudnessNormalizer::Algorithm::configureSideChainLowPassFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (*(float *)(v2 + 156) >= 0.5)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 164);
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624));
    vDSP_Length v5 = (*(unsigned int (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this);
    double v6 = (*(double (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624), v5, round(v6), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 624, (v4 << 32) | 8, (double *)0x3F80000000000000, 0, 0x41uLL);
  }
  else
  {
    unint64_t v3 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624);
    DspLib::Biquad::ParametricFilter::uninitialize(v3);
  }
}

double DspLib::LoudnessNormalizer::Algorithm::configureHysteresisAndOffsets(DspLib::LoudnessNormalizer::Algorithm *this)
{
  LODWORD(result) = *(_DWORD *)(*((void *)this + 4) + 144);
  unsigned int v2 = vcvtas_u32_f32(*(float *)&result);
  if (v2 == 1)
  {
    double result = -131072.094;
    *((void *)this + 166) = 0xC1000000C0E00000;
    *(void *)((char *)this + 134DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0xC100000040400000;
  }
  else if (!v2)
  {
    unsigned int v3 = *((_DWORD *)this + 183);
    if (v3 < 2)
    {
      *((void *)this + 166) = 0xC0800000BFD872B0;
      double result = -131072.031;
      *(void *)((char *)this + 134DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0xC100000040400000;
    }
    else
    {
      *((void *)this + 166) = 0xC1000000C0A00000;
      *((_DWORD *)this + 335) = 0;
      *(void *)&double result = COERCE_UNSIGNED_INT(-7.0) | 0xC100000000000000;
      if (v3 == 2) {
        *(float *)&double result = -10.0;
      }
      *((_DWORD *)this + 336) = LODWORD(result);
    }
  }
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::configureWeightingFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v28 = 0;
  float v29 = 0;
  uint64_t v30 = 0;
  unsigned int v2 = vcvtas_u32_f32(*(float *)(*((void *)this + 4) + 144));
  if (v2 == 1)
  {
    DspLib::Biquad::Design::aWeighting(*((float *)this + 81), __p);
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)&v28, (char *)__p, (uint64_t)&v22, 3uLL);
    uint64_t v6 = *((void *)this + 4);
    if (*(float *)(v6 + 56) >= 0.5)
    {
      int v25 = 9;
      int v26 = *(_DWORD *)(v6 + 60);
      uint64_t v27 = 0x3F80000000000000;
      std::vector<DspLib::Biquad::Section>::resize((uint64_t)&v28, 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 2) + 1);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v25, *((float *)this + 81), 0, v7, (uint64_t)&v23);
      unsigned int v8 = v29;
      long long v9 = v23;
      *((_DWORD *)v29 - 1) = v24;
      *(_OWORD *)(v8 - 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    }
  }
  else if (!v2)
  {
    DspLib::Biquad::Design::kWeighting(*((float *)this + 81), (uint64_t)__p);
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)&v28, (char *)__p, (uint64_t)&v21, 2uLL);
    uint64_t v4 = *((void *)this + 4);
    if (*(float *)(v4 + 56) >= 0.5)
    {
      int v25 = 9;
      int v26 = *(_DWORD *)(v4 + 60);
      uint64_t v27 = 0x3F80000000000000;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v25, *((float *)this + 81), 0, v3, (uint64_t)&v23);
      vDSP_Length v5 = v28;
      *(_OWORD *)(v28 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
      *((_DWORD *)v5 + 9) = v24;
    }
  }
  float v10 = *(float *)(*((void *)this + 4) + 68);
  float v11 = (char *)(*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 48))(this);
  DspLib_ITU1770_channelWeightsForLayout(v11, v10 < 4.0, (uint64_t)__p);
  float v13 = __p[0];
  float v12 = __p[1];
  if ((*(unsigned int (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this) != (v12 - v13) >> 2)
  {
    unsigned int v14 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this);
    std::vector<float>::resize((uint64_t)__p, v14);
    *((unsigned char *)this + 728) = 1;
  }
  unsigned int v15 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this);
  DspLib::Biquad::Filter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 768), v15, 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 2));
  vDSP_Length v16 = 0;
  long long v23 = *(_OWORD *)v28;
  int v24 = *((_DWORD *)v28 + 4);
  while (v16 < (*(unsigned int (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 56))(this))
  {
    float v17 = v28;
    *(_OWORD *)unint64_t v28 = v23;
    *((_DWORD *)v17 + 4) = v24;
    unsigned int v18 = (float *)v28;
    float v19 = sqrtf(*((float *)__p[0] + v16));
    *(float32x2_t *)unint64_t v28 = vmul_n_f32(*(float32x2_t *)v28, v19);
    void v18[2] = v19 * v18[2];
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 768, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (char *)v18) >> 2), 0, v16++);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v28)
  {
    float v29 = v28;
    operator delete(v28);
  }
}

void sub_1BB30E9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  float v12 = *(void **)(v10 - 72);
  if (v12)
  {
    *(void *)(v10 - 64) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudnessNormalizer::Algorithm::configurePeakPowerFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (*((_DWORD *)this + 183) <= 1u) {
    unint64_t v1 = ((unint64_t)*(unsigned int *)(*((void *)this + 4) + 72) << 32) | 0x1B;
  }
  else {
    unint64_t v1 = 0x41F000000000001BLL;
  }
  unsigned int v2 = (char *)this + 408;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), 1uLL, roundf(*((float *)this + 81)), 1uLL);

  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v2, v1, (double *)0x3F80000000000000, 0, 0x41uLL);
}

void DspLib::LoudnessNormalizer::Algorithm::configureIntegratedLoudnessDelay(DspLib::LoudnessNormalizer::Algorithm *this)
{
  LODWORD(v1) = vcvtas_u32_f32(*((float *)this + 84) * 0.25);
  unsigned int v2 = (DspLib::CircularDelay *)*((void *)this + 161);
  if (v1)
  {
    if (!v2) {
      operator new();
    }
    DspLib::CircularDelay::setLength(v2, v1);
  }
  else
  {
    *((void *)this + 161) = 0;
    if (v2)
    {
      unsigned int v3 = (char *)this + 1288;
      std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)v3, (uint64_t)v2);
    }
  }
}

void DspLib::LoudnessNormalizer::Algorithm::configureMedianFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unsigned int v2 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552);
  DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
  *((_DWORD *)this + 152) = v3;
  DspLib::FastMedianFilter::initialize(v2, vcvtas_u32_f32(*((float *)this + 83)));
  float v4 = 1.0;
  if (*((_DWORD *)this + 183) >= 2u) {
    float v4 = 1.0 - expf(-1.0 / (float)((float)(*((float *)this + 83) * 2316.0) / 1000.0));
  }
  *((float *)this + 154) = v4;
}

void DspLib::LoudnessNormalizer::Algorithm::configureAGC(DspLib::LoudnessNormalizer::Algorithm *this)
{
  int v2 = *((unsigned __int8 *)this + 737);
  uint64_t v3 = *((void *)this + 1192);
  if (v2)
  {
    if (v3) {
      return;
    }
    float v4 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)operator new(0x1FC0uLL, (std::align_val_t)0x40uLL);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor(v4, 1, v5);
    uint64_t v6 = *((void *)this + 1192);
    *((void *)this + 1192) = v4;
    if (v6)
    {
      MEMORY[0x1C185D360](v6, 64);
      float v4 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)*((void *)this + 1192);
    }
    *((_DWORD *)v4 + 2023) = *((_DWORD *)this + 183);
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(v4, v7);
    unsigned int v8 = (float *)*((void *)this + 1192);
    float v9 = *((float *)this + 84);
    v8[2010] = v9;
    v8[2018] = 1.0 - expf(-1.0 / (float)((float)(v9 * (float)(v8[2017] * 1000.0)) / 1000.0));
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    *((_DWORD *)this + 2387) = v10;
    float v11 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
  }
  else
  {
    *((void *)this + 1192) = 0;
    float v11 = 0.0;
    if (v3) {
      MEMORY[0x1C185D360](v3, 64);
    }
  }
  *((float *)this + 2388) = v11;
}

void sub_1BB30ECC4(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D360](v1, 64);
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::Algorithm::configureShapingFilter(float **this)
{
  if (DspLib::LoudnessNormalizer::Parameters::shapingFilterIsOn(this[4]))
  {
    unsigned int v2 = (*((uint64_t (**)(float **))*this + 7))(this);
    (*((void (**)(float **))*this + 5))(this);
    DspLib::LoudnessNormalizer::ShapingFilter::initialize((DspLib::LoudnessNormalizer::ShapingFilter *)(this + 1195), v2, v3);
  }
  else
  {
    DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(this + 1195));
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::configureMeters(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v2 = *((void *)this + 1253);
  if (v2)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
    if (v3 != (*(unsigned int (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 48))(this)
      || (float v4 = (DspLib *)(*(uint64_t (**)(void))(**((void **)this + 1253) + 40))(*((void *)this + 1253)),
          !DspLib::isEqual(v4, v5, *((double *)this + 2), 1.0e-20)))
    {
      uint64_t v6 = *((void *)this + 1253);
      uint64_t v7 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 48))(this);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v6 + 16))(v6, v7, *((double *)this + 2));
    }
    (*(void (**)(void, void, float))(**((void **)this + 1253) + 112))(*((void *)this + 1253), 0, *(float *)(*((void *)this + 4) + 44));
  }
  uint64_t result = *((void *)this + 1254);
  if (result)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    if (v9 != (*(unsigned int (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 48))(this)
      || (int v10 = (DspLib *)(*(uint64_t (**)(void))(**((void **)this + 1254) + 40))(*((void *)this + 1254)),
          !DspLib::isEqual(v10, v11, *((double *)this + 2), 1.0e-20)))
    {
      uint64_t v13 = *((void *)this + 1254);
      uint64_t v14 = (*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 48))(this);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v13 + 16))(v13, v14, *((double *)this + 2));
    }
    v12.n128_u32[0] = *(_DWORD *)(*((void *)this + 4) + 48);
    unsigned int v15 = *(uint64_t (**)(__n128))(**((void **)this + 1254) + 112);
    return v15(v12);
  }
  return result;
}

BOOL DspLib::LoudnessNormalizer::Algorithm::configureAutoReset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(2, *((float *)this + 186)))
  {
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v2);
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  }
  BOOL result = DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(4, *((float *)this + 186));
  if (result && (BOOL result = DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(1, *((float *)this + 186))))
  {
    *((_DWORD *)this + 325) = *(_DWORD *)(*((void *)this + 4) + 36);
    *((unsigned char *)this + 1296) = 1;
  }
  else
  {
    *((unsigned char *)this + 1296) = 0;
  }
  *((unsigned char *)this + 1326) = *((_DWORD *)this + 183) > 1u;
  return result;
}

float DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::setParameters(float *a1, float a2, float a3, float a4, float a5)
{
  float v10 = 1.0 - expf(-1.0 / (float)(a5 * 0.0));
  *a1 = v10;
  a1[1] = 1.0 - expf(-1.0 / (float)(a5 * 0.8));
  a1[2] = 1.0 - expf(-1.0 / (float)(a5 * 0.2));
  a1[3] = v10;
  a1[4] = 1.0 - expf(-1.0 / (float)(a5 * 0.5));
  a1[5] = 1.0 - expf(-1.0 / (float)(a2 * a5));
  a1[6] = 1.0 - expf(-1.0 / (float)(a3 * a5));
  float result = 1.0 - expf(-1.0 / (float)(a4 * a5));
  a1[7] = result;
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::sidechainFilterAndDownsample(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 624))
  {
    if (*(void *)(a2 + 16) <= 1uLL) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = *(void *)(a2 + 16);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = ((v6 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    __n128 v9 = MEMORY[0x1F4188790](v8);
    double v11 = (char *)&v22 - v10;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v9);
    MEMORY[0x1F4188790](v12);
    unsigned int v15 = (char *)&v22 - v14;
    if (v13 >= 0x200) {
      size_t v16 = 512;
    }
    else {
      size_t v16 = v13;
    }
    bzero((char *)&v22 - v14, v16);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v17 = 0;
      uint64_t v18 = 4 * v7;
      do
      {
        *(void *)&v15[8 * v17++] = v11;
        v11 += v18;
      }
      while (v17 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    uint64_t v19 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v20 = *(void *)(a2 + 16);
    long long v27 = *(_OWORD *)a2;
    uint64_t v28 = *(void *)(a2 + 16);
    *(void *)&long long v25 = v15;
    *((void *)&v25 + 1) = v19;
    uint64_t v26 = v20;
    DspLib::Biquad::Filter::process((void *)(a1 + 624), &v27, &v25);
    v24[0] = v15;
    v24[1] = v19;
    _OWORD v24[2] = v20;
    DspLib::DownSampler::process((unsigned int *)(a1 + 340), v24, a3);
  }
  else
  {
    long long v22 = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
    DspLib::DownSampler::process((unsigned int *)(a1 + 340), &v22, a3);
  }
  return a3[2];
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::calculatePeakPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  DspLib::Biquad::Filter::process((void *)(a1 + 408), a2, a3, a2, a3);
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  v13[0] = &v15;
  v13[1] = 1;
  void v11[2] = a3;
  uint64_t v12 = a2;
  v11[0] = &v12;
  v11[1] = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 348), v11, v13);
  return v14;
}

void DspLib::LoudnessNormalizer::Algorithm::audioActivityShift(uint64_t a1, const float *a2, vDSP_Length a3, float *a4, vDSP_Length a5)
{
  double v8 = DspLib::AudioActivityDetector::process(a1 + 9648, a2, a3, *(float *)(a1 + 9468));
  if (*(float *)&v8 > 0.0)
  {
    float v9 = *(float *)&v8;
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::shift((DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)(a1 + 1408), *(int32x2_t *)&v8);
    uint64_t v10 = *(void *)(a1 + 1288);
    if (v10) {
      DspLib::add(*(float **)v10, (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 2, -v9);
    }
    DspLib::add(a4, a5, -v9);
    *(float *)(a1 + 38DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(float *)(a1 + 380) - v9;
    float v11 = *(float *)(a1 + 392) - v9;
    *(float *)(a1 + 1376) = *(float *)(a1 + 1376) - v9;
    *(float *)(a1 + 392) = v11 - v9;
  }
}

double DspLib::AudioActivityDetector::process(uint64_t a1, const float *a2, vDSP_Length __N, float a4)
{
  if (!__N) {
    return 0.0;
  }
  float v7 = DspLib::maxv(a2, __N);
  float v8 = fmaxf(v7, -70.0);
  float v9 = *(float *)(a1 + 8);
  float v10 = *(double *)a1 * (float)(v8 - *(float *)(a1 + 12)) / (double)__N / 100.0;
  BOOL v11 = v8 > (float)(v9 + 4.0);
  if (v10 >= 1.0) {
    BOOL v11 = 0;
  }
  float v12 = *(double *)a1;
  float v13 = v9 + (float)((float)((float)((float)(v8 - v9) * 10.0) / v12) * (float)__N);
  if (v8 < v9) {
    float v13 = v8;
  }
  if (v11) {
    float v13 = v8;
  }
  *(float *)(a1 + 8) = v13;
  *(float *)(a1 + 12) = v8;
  int v14 = v7 < (float)(a4 + -10.0) && v11;
  double result = 0.0;
  if (v14) {
    *(float *)&double result = 1.5;
  }
  *(unsigned char *)(a1 + 16) |= v14;
  return result;
}

vDSP_Length DspLib::LoudnessNormalizer::Algorithm::medianLevelWithHysteresis(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  uint64_t v20 = a4;
  v18[0] = &v20;
  v18[1] = 1;
  vDSP_Length v19 = a5;
  void v16[2] = a3;
  uint64_t v17 = a2;
  v16[0] = &v17;
  v16[1] = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 356), v16, v18);
  vDSP_Length v7 = v19;
  DspLib::FastMedianFilter::process((DspLib::FastMedianFilter *)(a1 + 552), (uint64_t)a4, v19, (uint64_t)a4);
  DspLib::add(a4, v7, *(float *)(a1 + 1328));
  if (!v7) {
    return v7;
  }
  float v8 = *(float *)(a1 + 616);
  uint64_t v9 = 4 * v7;
  float v10 = a4;
  do
  {
    float v11 = *v10;
    float v12 = *(float *)(a1 + 1372);
    if (*v10 <= (float)(v12 + 0.0))
    {
      float v13 = v11 + 5.0;
      if (v13 >= v12) {
        goto LABEL_7;
      }
      float v11 = v12 + (float)((float)(v13 - v12) * v8);
    }
    *(float *)(a1 + 1372) = v11;
    float v12 = v11;
LABEL_7:
    *v10++ = v12;
    v9 -= 4;
  }
  while (v9);
  if (*(unsigned char *)(a1 + 24))
  {
    float v14 = DspLib::maxv(a4, v7);
    if (*(float *)(a1 + 9992) >= v14) {
      float v14 = *(float *)(a1 + 9992);
    }
    *(float *)(a1 + 9992) = v14;
  }
  return v7;
}

vDSP_Length DspLib::LoudnessNormalizer::Algorithm::gatingAndModifiedPeakLevel(uint64_t a1, float *__C, vDSP_Length __N, const float *a4, vDSP_Length a5)
{
  if (*(_DWORD *)(a1 + 732) >= 2u)
  {
    vDSP_Length __Na = a5;
    uint64_t v42 = a4;
    uint64_t v39 = &v42;
    uint64_t v40 = 1;
    vDSP_Length v37 = __N;
    uint64_t v38 = __C;
    float v35 = &v38;
    uint64_t v36 = 1;
    DspLib::DownSampler::process((unsigned int *)(a1 + 364), &v35, &v39);
    vDSP_Length v10 = __Na;
    if (!__N) {
      return v10;
    }
    float v11 = DspLib::maxv(__C, __N);
    float v12 = *(float **)(a1 + 9896);
    float *v12 = v11;
    float v13 = v11 + (float)(*(float *)(a1 + 1332) + *(float *)(a1 + 1336));
    float *v12 = v13;
    if (v13 <= -70.0)
    {
      float v15 = *(float *)(a1 + 9672);
      float v14 = *(float *)(a1 + 324) / (float)__N;
    }
    else
    {
      float v14 = *(float *)(a1 + 324) / (float)__N;
      float v15 = *(float *)(a1 + 9672) + (float)((float)((float)(1.0 - *(float *)(a1 + 9672)) * 100.0) / v14);
      *(float *)(a1 + 9672) = v15;
    }
    float v24 = *(float *)(a1 + 1368);
    float v25 = *(float *)(a1 + 9984);
    if (v25 < *(float *)(a1 + 9992)) {
      float v25 = *(float *)(a1 + 9992);
    }
    float v26 = v24 - v25;
    float v27 = 0.0;
    if (v26 <= 12.0) {
      float v27 = 1.0 - (float)(v26 / 12.0);
    }
    if (v26 >= 0.0) {
      float v28 = v27;
    }
    else {
      float v28 = 1.0;
    }
    float v29 = (float)((float)(v28 * v28) * 99.0) + 1.0;
    if (v29 >= v15) {
      float v15 = v29;
    }
    *(float *)(a1 + 10008) = v15;
    float v30 = expf(-1.0 / (float)((float)(v14 * v15) / 1000.0));
    float v31 = *__C;
    if (*__C <= (float)(*(float *)(a1 + 1340) + v24))
    {
      float v32 = v31 - *(float *)(a1 + 1344);
      if (v32 >= v24)
      {
LABEL_31:
        *DSPSplitComplex __C = v24;
        if (*(unsigned char *)(a1 + 24))
        {
          float v33 = *(float *)(a1 + 9996);
          if (v33 < *v12) {
            float v33 = *v12;
          }
          *(float *)(a1 + 9996) = v33;
        }
        DspLib::fill(__C, __N, *v12);
        return v10;
      }
      float v31 = v24 + (float)((float)(v32 - v24) * (float)(1.0 - v30));
    }
    *(float *)(a1 + 1368) = v31;
    float v24 = v31;
    goto LABEL_31;
  }
  DspLib::add(__C, __N, *(float *)(a1 + 1332));
  if (__N)
  {
    float v16 = *(float *)(a1 + 1340);
    float v17 = *(float *)(a1 + 1344);
    vDSP_Length v18 = 4 * __N;
    vDSP_Length v19 = __C;
    while (1)
    {
      float v20 = *v19;
      float v21 = *(float *)(a1 + 1368);
      if (*v19 > (float)(v16 + v21)) {
        goto LABEL_10;
      }
      float v22 = v20 - v17;
      if (v22 < v21) {
        break;
      }
LABEL_11:
      *v19++ = v21;
      v18 -= 4;
      if (!v18) {
        goto LABEL_12;
      }
    }
    float v20 = v21 + (float)(v22 - v21);
LABEL_10:
    *(float *)(a1 + 1368) = v20;
    float v21 = v20;
    goto LABEL_11;
  }
LABEL_12:
  vDSP_Length __Na = a5;
  uint64_t v42 = a4;
  uint64_t v39 = &v42;
  uint64_t v40 = 1;
  vDSP_Length v37 = __N;
  uint64_t v38 = __C;
  float v35 = &v38;
  uint64_t v36 = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 364), &v35, &v39);
  vDSP_Length v10 = __Na;
  if (*(unsigned char *)(a1 + 24) && __Na)
  {
    float v23 = DspLib::maxv(a4, __Na);
    if (*(float *)(a1 + 9996) >= v23) {
      float v23 = *(float *)(a1 + 9996);
    }
    *(float *)(a1 + 9996) = v23;
  }
  return v10;
}

void DspLib::LoudnessNormalizer::Algorithm::gateIntegratedLoudness(uint64_t a1, const float *a2, vDSP_Length a3, float *__C, vDSP_Length __N)
{
  float v10 = -2.0;
  if (*(_DWORD *)(a1 + 732) <= 1u) {
    float v10 = -4.0 - *(float *)(a1 + 1332);
  }
  DspLib::add(__C, __N, v10);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v11 = __N == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    float v12 = DspLib::maxv(__C, __N);
    if (*(float *)(a1 + 10004) >= v12) {
      float v12 = *(float *)(a1 + 10004);
    }
    *(float *)(a1 + 10004) = v12;
  }
  DspLib::LoudnessNormalizer::AGatingBProcessor::process(a1 + 1376, (uint64_t)__C, __N, (uint64_t)a2);
  if (*(unsigned char *)(a1 + 24) && a3)
  {
    float v13 = DspLib::maxv(a2, a3);
    if (*(float *)(a1 + 9984) >= v13) {
      float v13 = *(float *)(a1 + 9984);
    }
    *(float *)(a1 + 9984) = v13;
  }
}

uint64_t DspLib::LoudnessNormalizer::AGatingBProcessor::process(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    char v5 = *(unsigned char *)(result + 4);
    do
    {
      float v6 = *(float *)(a2 + 4 * v4);
      float v7 = *(float *)(a4 + 4 * v4);
      char v8 = v5;
      char v5 = v6 > v7;
      if (v7 >= *(float *)result && v6 <= v7)
      {
        if (v8)
        {
          if (v7 >= *(float *)(result + 8)) {
            float v7 = *(float *)(result + 8);
          }
        }
        else
        {
          float v7 = *(float *)result + (float)((float)(v7 - *(float *)result) * *(float *)(result + 12));
        }
      }
      *(float *)double result = v7;
      *(float *)(result + 8) = v6;
      *(float *)(a4 + 4 * v4++) = v7;
    }
    while (a3 > v4);
    *(unsigned char *)(result + 4) = v5;
  }
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::applyGain(void *a1, uint64_t a2, uint64_t a3, const float *a4, uint64_t a5)
{
  DspLib::Biquad::Filter::process(a1 + 27, (uint64_t)a4, a5, (uint64_t)a4, a5);
  if (*((unsigned char *)a1 + 9560))
  {
    long long v22 = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
    long long v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
    DspLib::Biquad::Filter::process(a1 + 1195, &v22, &v20);
    uint64_t v9 = a1 + 158;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = *(void *)(a3 + 16);
    *(void *)&long long v22 = *(void *)a3;
    *((void *)&v22 + 1) = v10;
    uint64_t v23 = v11;
    *(void *)&long long v20 = v22;
    *((void *)&v20 + 1) = v10;
    uint64_t v21 = v11;
    float v12 = &v22;
    float v13 = &v20;
  }
  else
  {
    uint64_t v9 = a1 + 158;
    long long v18 = *(_OWORD *)a2;
    uint64_t v19 = *(void *)(a2 + 16);
    long long v16 = *(_OWORD *)a3;
    uint64_t v17 = *(void *)(a3 + 16);
    float v12 = &v18;
    float v13 = &v16;
  }
  DspLib::MultiChannelCircularDelay::process(v9, v12, v13);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (result)
  {
    unint64_t v15 = 0;
    do
    {
      DspLib::multiply(*(float **)(*(void *)a3 + 8 * v15++), *(void *)(a3 + 16), a4);
      uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    }
    while (v15 < result);
  }
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::applyAGC(DspLib::LoudnessNormalizer::Algorithm *this, float *a2, vDSP_Length a3, unint64_t a4)
{
  if (*((unsigned char *)this + 737))
  {
    float v8 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
    uint64_t v9 = (float *)((char *)this + 9552);
    *((float *)this + 2388) = v8;
    if (v8 > 24.0) {
      uint64_t v9 = (float *)&DspLib::LoudnessNormalizer::Algorithm::kAGCMaxGain;
    }
    if (v8 < -24.0) {
      uint64_t v9 = (float *)&DspLib::LoudnessNormalizer::Algorithm::kAGCMinGain;
    }
    float v10 = *v9;
    *((float *)this + 2388) = *v9;
    float v11 = *((float *)this + 2386);
    if (v11 < 1.0 && a3 != 0)
    {
      float v13 = (double)a4 / (*((double *)this + 2) * 10.0);
      float v14 = v11 + v13;
      float v15 = 0.0;
      if (v14 >= 0.0)
      {
        float v15 = 1.0;
        if (v14 <= 1.0) {
          float v15 = v14;
        }
      }
      *((float *)this + 2386) = v15;
      float v16 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
      float v17 = v16 - DspLib::maxv(a2, a3);
      float v18 = 24.0;
      if (v17 <= 24.0) {
        float v18 = v17;
      }
      if (v17 >= -24.0) {
        float v19 = v18;
      }
      else {
        float v19 = -24.0;
      }
      float v10 = (float)((float)(1.0 - *((float *)this + 2386)) * v19)
          + (float)(*((float *)this + 2388) * *((float *)this + 2386));
      *((float *)this + 2388) = v10;
    }
    DspLib::add(a2, a3, v10);
  }
  else
  {
    *((_DWORD *)this + 2388) = 0;
  }
}

void DspLib::LoudnessNormalizer::Algorithm::applyCompressor(uint64_t a1, float *__D, vDSP_Length __N)
{
  if (*(unsigned char *)(a1 + 738)) {
    DspLib::LoudnessNormalizer::GainTable::gainForLevel(a1 + 840, __D, __N);
  }
  else {
    DspLib::clear(__D, __N);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v6 = __N == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    *(float *)(a1 + 9972) = DspLib::mean(__D, __N);
  }
}

void DspLib::LoudnessNormalizer::GainTable::gainForLevel(uint64_t a1, float *__D, vDSP_Length __N)
{
  if (__N)
  {
    DspLib::clip(__D, __N, -100.0, 10.0);
    DspLib::add(__D, __N, 100.0);
    DspLib::multiply(__D, __N, 0.18182);
    DspLib::elementAtIndexWithInterpolation(a1 + 88, 84, __D, __N, (uint64_t)__D, __N);
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::processBlock(uint64_t result, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a3;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unint64_t)a2[2];
  if (v4)
  {
    uint64_t v7 = result;
    float v8 = *a2;
    uint64_t v68 = a2[1];
    if (*(_DWORD *)(result + 752) == 2)
    {
      *(void *)(result + 9720) += v4;
      uint64_t v9 = *(void *)(result + 9752);
      if (v9 <= 0) {
        unint64_t v10 = 0;
      }
      else {
        unint64_t v10 = v9 - v4;
      }
      *(void *)(result + 9752) = v10;
    }
    DspLibBuffer::setNumFrames((unint64_t *)(result + 9760), v4);
    uint64_t v11 = DspLibBuffer::numChannels((DspLibBuffer *)(v7 + 9760));
    uint64_t v66 = v63;
    MEMORY[0x1F4188790](v11);
    float v14 = (char *)v63 - v13;
    if (v12 >= 0x200) {
      size_t v15 = 512;
    }
    else {
      size_t v15 = v12;
    }
    bzero((char *)v63 - v13, v15);
    if (DspLibBuffer::numChannels((DspLibBuffer *)(v7 + 9760)))
    {
      unint64_t v16 = 0;
      do
      {
        *(void *)&v14[8 * v16] = DspLibBuffer::channel((DspLibBuffer *)(v7 + 9760), v16);
        ++v16;
      }
      while (v16 < DspLibBuffer::numChannels((DspLibBuffer *)(v7 + 9760)));
    }
    unsigned int v17 = DspLibBuffer::numChannels((DspLibBuffer *)(v7 + 9760));
    uint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(v7 + 9760));
    if (*(unsigned char *)(v7 + 1356))
    {
      long long v92 = *(_OWORD *)a2;
      long long v93 = a2[2];
      float v19 = *(float *)(v7 + 1348);
      v91[0] = v14;
      v91[1] = v17;
      unint64_t v67 = cycle_count;
      uint64_t v68 = (char *)v17;
      v91[2] = cycle_count;
      DspLib::multiply(&v92, v91, v19);
    }
    else
    {
      float v14 = v8;
      unint64_t v67 = v4;
    }
    uint64_t isSilent = *(void *)(v7 + 10024);
    if (isSilent)
    {
      v90[0] = v14;
      v90[1] = v68;
      v90[2] = v67;
      (*(void (**)(uint64_t, void *))(*(void *)isSilent + 152))(isSilent, v90);
      v89[0] = v14;
      v89[1] = v68;
      v89[2] = v67;
      float v21 = DspLib::maxMagnitude(v89);
      if (*(float *)(v7 + 10000) >= v21) {
        float v21 = *(float *)(v7 + 10000);
      }
      *(float *)(v7 + 1000DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v21;
      DspLib::CPUMeasure::start((int8x16_t *)(v7 + 56));
    }
    int v22 = *(unsigned __int8 *)(a4 + 24);
    if (*(unsigned char *)(a4 + 24))
    {
      long long v87 = *(_OWORD *)a4;
      uint64_t v88 = *(void *)(a4 + 16);
      uint64_t isSilent = DspLib::isSilent(&v87, 0.000001);
      int v22 = isSilent ^ 1;
    }
    *(unsigned char *)(v7 + 9712) = v22;
    if (*(unsigned char *)(v7 + 728))
    {
      v86[0] = v14;
      v86[1] = v68;
      v86[2] = v67;
      long long v84 = *(_OWORD *)v69;
      uint64_t v85 = *(void *)(v69 + 16);
      DspLib::MultiChannelCircularDelay::process((uint64_t *)(v7 + 1264), v86, &v84);
    }
    else
    {
      if (*(unsigned char *)(v7 + 736)) {
        int v22 = 1;
      }
      if (v22 == 1)
      {
        if (*(unsigned char *)(v7 + 9560))
        {
          long long v94 = *(_OWORD *)v69;
          uint64_t v95 = *(void *)(v69 + 16);
          *(void *)&long long v96 = v14;
          *((void *)&v96 + 1) = v68;
          uint64_t v97 = v67;
          DspLib::Biquad::Filter::process((void *)(v7 + 9560), &v96, &v94);
          uint64_t v23 = *(void *)(v69 + 8);
          uint64_t v24 = *(void *)(v69 + 16);
          *(void *)&long long v96 = *(void *)v69;
          *((void *)&v96 + 1) = v23;
          uint64_t v97 = v24;
          *(void *)&long long v94 = v96;
          *((void *)&v94 + 1) = v23;
          uint64_t v95 = v24;
          DspLib::MultiChannelCircularDelay::process((uint64_t *)(v7 + 1264), &v96, &v94);
        }
        else
        {
          v83[0] = v14;
          v83[1] = v68;
          v83[2] = v67;
          long long v81 = *(_OWORD *)v69;
          uint64_t v82 = *(void *)(v69 + 16);
          DspLib::MultiChannelCircularDelay::process((uint64_t *)(v7 + 1264), v83, &v81);
        }
        uint64_t v38 = *(void *)(v7 + 9704);
        if (v38)
        {
          long long v79 = *(_OWORD *)v69;
          uint64_t v80 = *(void *)(v69 + 16);
          DspLib::multiply((uint64_t *)&v79, *(float *)(*(void *)(v7 + 9680) + 4 * v38 - 4));
        }
        DspLib::elapsedTimeInMilliseconds((DspLib *)(v7 + 1312), v25);
      }
      else
      {
        v63[1] = (const float *)v63;
        MEMORY[0x1F4188790](isSilent);
        float v28 = (uint64_t *)((char *)v63 - v27);
        if (v26 >= 0x200) {
          size_t v29 = 512;
        }
        else {
          size_t v29 = v26;
        }
        bzero((char *)v63 - v27, v29);
        float v30 = *(void **)(v7 + 9856);
        float v31 = *(uint64_t **)(v7 + 9848);
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v30 - v31);
        unint64_t v64 = (DspLib::LoudnessNormalizer::ShapingFilter *)(v7 + 9560);
        if (v30 == v31)
        {
          uint64_t v37 = 0;
          unint64_t v35 = v67;
        }
        else
        {
          uint64_t v33 = 0;
          float v34 = v31;
          unint64_t v35 = v67;
          do
          {
            uint64_t v36 = *v34;
            v34 += 3;
            v28[v33++] = v36;
          }
          while (v32 > v33);
          if (v30 == v31) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = (v31[1] - *v31) >> 2;
          }
        }
        v78[0] = v14;
        v78[1] = v68;
        v78[2] = v35;
        v77[0] = v28;
        v77[1] = v32;
        void v77[2] = v37;
        uint64_t v39 = DspLib::LoudnessNormalizer::Algorithm::sidechainFilterAndDownsample(v7, (uint64_t)v78, v77);
        if (*(unsigned char *)(v7 + 768))
        {
          *(void *)&long long v96 = v28;
          *((void *)&v96 + 1) = v32;
          uint64_t v97 = v39;
          *(void *)&long long v94 = v28;
          *((void *)&v94 + 1) = v32;
          uint64_t v95 = v39;
          DspLib::Biquad::Filter::process((void *)(v7 + 768), &v96, &v94);
        }
        uint64_t v40 = *(float **)(v7 + 9872);
        *(void *)&long long v96 = v28;
        *((void *)&v96 + 1) = v32;
        uint64_t v97 = v39;
        DspLib::square(&v96);
        *(void *)&long long v94 = v28;
        *((void *)&v94 + 1) = v32;
        uint64_t v95 = v39;
        DspLib::sum((uint64_t)&v94, v40, v39);
        DspLib::threshold(v40, v39, 1.0e-12);
        if (DspLib::LoudnessNormalizer::AutoReset::process(v7 + 1296, v40, v39))
        {
          DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset((DspLib::LoudnessNormalizer::Algorithm *)v7);
          DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation((DspLib::LoudnessNormalizer::Algorithm *)v7, v41);
        }
        uint64_t v42 = DspLib::LoudnessNormalizer::Algorithm::calculatePeakPower(v7, (uint64_t)v40, v39, *(void *)(v7 + 9896), (uint64_t)(*(void *)(v7 + 9904) - *(void *)(v7 + 9896)) >> 2);
        uint64_t v43 = *v28;
        uint64_t v65 = *(float **)(v7 + 9896);
        unint64_t v44 = DspLib::MovingAverageProcessor::process(v7 + 512, (uint64_t)v65, v42, v43);
        DspLib::power2dB(v65, v42, 1.0);
        if (v44)
        {
          uint64_t v45 = *(void *)(v7 + 9536);
          if (v45)
          {
            DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process(v45, *v28, v44, *(void *)(v7 + 9872));
            *(_DWORD *)(v7 + 9548) = **(_DWORD **)(v7 + 9872);
          }
          DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process(v7 + 1408, *v28, v44, *v28);
          if (*(unsigned char *)(v7 + 24)) {
            *(_DWORD *)(v7 + 9988) = *(_DWORD *)*v28;
          }
          uint64_t v46 = *(void **)(v7 + 1288);
          if (v46) {
            DspLib::CircularDelay::process(v46, (char *)*v28, v44, (char *)*v28, v44);
          }
        }
        if (*(_DWORD *)(v7 + 732) >= 2u)
        {
          uint64_t v47 = *(void *)(v7 + 32);
          if (*(float *)(v47 + 140) < 0.5 || *(float *)(v47 + 136) > 0.1) {
            DspLib::LoudnessNormalizer::Algorithm::audioActivityShift(v7, v65, v42, (float *)*v28, v44);
          }
        }
        vDSP_Length v48 = DspLib::LoudnessNormalizer::Algorithm::medianLevelWithHysteresis(v7, (uint64_t)v65, v42, *(float **)(v7 + 9944), (uint64_t)(*(void *)(v7 + 9952) - *(void *)(v7 + 9944)) >> 2);
        v63[0] = *(const float **)(v7 + 9944);
        vDSP_Length v49 = DspLib::LoudnessNormalizer::Algorithm::gatingAndModifiedPeakLevel(v7, v65, v42, *(const float **)(v7 + 9920), (uint64_t)(*(void *)(v7 + 9928) - *(void *)(v7 + 9920)) >> 2);
        uint64_t v50 = v44;
        uint64_t v51 = *(float **)(v7 + 9920);
        unint64_t v52 = *(float **)(v7 + 9872);
        DspLib::SampleAndHoldUpSampler::process((float *)(v7 + 372), *v28, v50, (uint64_t)v52, v48);
        DspLib::LoudnessNormalizer::Algorithm::gateIntegratedLoudness(v7, v52, v48, v51, v49);
        DspLib::vmax(v52, v48, v63[0]);
        DspLib::SampleAndHoldUpSampler::process((float *)(v7 + 384), (uint64_t)v52, v48, *v28, v42);
        uint64_t v53 = *(float **)(v7 + 9872);
        DspLib::vmax(v65, v42, (const float *)*v28, v42, v53);
        if (*(unsigned char *)(v7 + 24) && v42) {
          *(float *)(v7 + 998DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::mean(v53, v42);
        }
        DspLib::LoudnessNormalizer::Algorithm::applyAGC((DspLib::LoudnessNormalizer::Algorithm *)v7, v53, v42, v4);
        if (*(_DWORD *)(v7 + 752) != 2 || v42 == 0)
        {
          DspLib::LoudnessNormalizer::Algorithm::applyCompressor(v7, v53, v42);
        }
        else
        {
          uint64_t v55 = *(float **)(v7 + 32);
          float v56 = DspLib::mean(v53, v42);
          float v57 = v55[57];
          float v58 = v55[46];
          float v59 = v55[47];
          DspLib::LoudnessNormalizer::Algorithm::applyCompressor(v7, v53, v42);
          float v60 = fmaxf((float)((float)(v57 - v56) - v58) - v59, 0.0);
          *(float *)(v7 + 10012) = v60;
          DspLib::clip(v53, v42, -100.0, v60);
        }
        if (*(unsigned char *)v64 && v42)
        {
          float v61 = DspLib::mean(v53, v42);
          DspLib::LoudnessNormalizer::ShapingFilter::setGain(v64, v61);
        }
        if (*(unsigned char *)(v7 + 737)) {
          DspLib::add(v53, v42, *(float *)(v7 + 9552));
        }
        if (*(unsigned char *)(v7 + 24) && v42) {
          *(float *)(v7 + 9976) = DspLib::mean(v53, v42);
        }
        DspLib::dB2Amp(v53, v42);
        *(void *)(v7 + 9704) = v4;
        uint64_t v62 = *(const float **)(v7 + 9680);
        DspLib::SampleAndHoldUpSampler::process((float *)(v7 + 396), (uint64_t)v53, v42, (uint64_t)v62, v4);
        v76[0] = v14;
        v76[1] = v68;
        v76[2] = v67;
        long long v74 = *(_OWORD *)v69;
        uint64_t v75 = *(void *)(v69 + 16);
        DspLib::LoudnessNormalizer::Algorithm::applyGain((void *)v7, (uint64_t)v76, (uint64_t)&v74, v62, v4);
      }
    }
    if (*(unsigned char *)(v7 + 1357))
    {
      long long v72 = *(_OWORD *)v69;
      uint64_t v73 = *(void *)(v69 + 16);
      DspLib::multiply((uint64_t *)&v72, *(float *)(v7 + 1352));
    }
    if (*(unsigned char *)(v7 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v7 + 56), v4, *(double *)(v7 + 16));
    }
    uint64_t result = *(void *)(v7 + 10032);
    if (result)
    {
      long long v70 = *(_OWORD *)v69;
      uint64_t v71 = *(void *)(v69 + 16);
      return (*(uint64_t (**)(uint64_t, long long *))(*(void *)result + 152))(result, &v70);
    }
  }
  return result;
}

BOOL DspLib::LoudnessNormalizer::AutoReset::process(uint64_t a1, const float *a2, vDSP_Length __N)
{
  if (*(unsigned char *)(a1 + 30)) {
    BOOL v4 = *(unsigned char *)(a1 + 29) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  *(unsigned char *)(a1 + 29) = 0;
  if (*(unsigned char *)a1) {
    BOOL v5 = __N == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    float v6 = DspLib::mean(a2, __N);
    float v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)(a1 + 16), v7) / 1000.0;
    if (v9 <= 0.2 && v6 >= DspLib::dB2Power(v8, -100.0))
    {
      if (v6 > DspLib::dB2Power(v10, -70.0)) {
        *(unsigned char *)(a1 + 8) = 0;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 8))
      {
        if (*(unsigned char *)(a1 + 28)) {
          return v4;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 28) = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      float v11 = v9 + *(float *)(a1 + 24);
      *(float *)(a1 + 24) = v11;
      if (v11 >= *(float *)(a1 + 4))
      {
        BOOL v4 = 1;
        *(unsigned char *)(a1 + 28) = 1;
      }
    }
  }
  return v4;
}

uint64_t DspLib::MovingAverageProcessor::process(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 32);
  do
  {
    if (!v10)
    {
      *(void *)(a1 + 32) = *(void *)(a1 + 24);
      *(float *)(a4 + 4 * v9++) = DspLib::mean(*(const float **)a1, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
      unint64_t v10 = *(void *)(a1 + 32);
    }
    uint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
    if (v10 >= a3 - v8) {
      unint64_t v10 = a3 - v8;
    }
    if (v10 >= v11 >> 2) {
      uint64_t v12 = v11 >> 2;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12 == -1) {
      unint64_t v13 = a3 - v8;
    }
    else {
      unint64_t v13 = v12;
    }
    DspLib::LinearDelay::write((char **)a1, (char *)(a2 + 4 * v8), v13);
    unint64_t v10 = *(void *)(a1 + 32) - v12;
    *(void *)(a1 + 32) = v10;
    v8 += v12;
  }
  while (v8 < a3);
  return v9;
}

void DspLib::LoudnessNormalizer::ShapingFilter::setGain(DspLib::LoudnessNormalizer::ShapingFilter *this, float a2)
{
  if (vabds_f32(a2, *((float *)this + 20)) > 0.1)
  {
    *((float *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
    float v3 = DspLib::dB2Amp(this, a2);
    double v4 = *((double *)this + 9);
    float v5 = 2.0;
    float v6 = 0.25;
    float v7 = 3.5;
    float v8 = 2.1991;
    float v9 = 0.62;
    if (v4 <= 16000.0)
    {
      int v12 = 0;
      float v11 = 0.94;
      float v10 = -0.994;
    }
    else
    {
      float v10 = -0.997;
      if (v4 <= 24000.0)
      {
        int v12 = 0;
        float v11 = 0.96;
      }
      else if (v4 <= 32000.0)
      {
        int v12 = 1;
        float v11 = 0.97;
      }
      else if (v4 <= 48000.0)
      {
        float v5 = 1.5;
        float v7 = 4.0;
        int v12 = 1;
        float v11 = 0.98;
        float v10 = -0.999;
        float v8 = 1.2566;
        float v6 = 0.4;
        float v9 = 0.87;
      }
      else
      {
        if (v4 <= 64000.0) {
          float v9 = 0.75;
        }
        else {
          float v9 = 0.1;
        }
        float v6 = flt_1BB876D48[v4 > 64000.0];
        float v8 = flt_1BB876D50[v4 > 64000.0];
        float v10 = -1.0;
        if (v4 <= 64000.0) {
          float v10 = -0.9995;
        }
        float v11 = flt_1BB876D58[v4 > 64000.0];
        float v7 = 6.0;
        int v12 = 1;
        float v5 = 1.2;
      }
    }
    float v13 = v3 + -1.0;
    v21[0] = 1065353216;
    *(float *)&v21[1] = -(float)(v11
                               - (float)((float)((float)(v10 + v11) / (float)(39.0 / (float)(v5 + 39.0)))
                                       * (float)((float)(v3 + -1.0) / (float)((float)(v3 + -1.0) + v5))));
    void v21[2] = 0;
    *(float *)&v21[3] = -v11;
    v21[4] = 0;
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)v21, 1, 0, 0x41uLL);
    if (v12)
    {
      float v14 = (float)(v6 * cosf(v8)) * -2.0;
      float v15 = v14
          + (float)((float)((float)(v9 - v14) / (float)(39.0 / (float)(v7 + 39.0))) * (float)(v13 / (float)(v13 + v7)));
      float v16 = 1.0
          / (float)((float)((float)(v15 + 1.0) + (float)(v6 * v6)) / (float)((float)(v14 + 1.0) + (float)(v6 * v6)));
      float v17 = v15 * v16;
      float v18 = v6 * (float)(v6 * v16);
      float v19 = v6 * v6;
    }
    else
    {
      float v16 = 1.0;
      float v17 = 0.0;
      float v18 = 0.0;
      float v14 = 0.0;
      float v19 = 0.0;
    }
    *(float *)long long v20 = v16;
    *(float *)&v20[1] = v17;
    *(float *)&void v20[2] = v18;
    *(float *)&void v20[3] = v14;
    *(float *)&void v20[4] = v19;
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)v20, 1, 1, 0x41uLL);
  }
}

double DspLib::LoudnessNormalizer::Algorithm::totalMomentaryGainIndB(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (*((unsigned char *)this + 728)) {
    return 0.0;
  }
  float v2 = (DspLib *)(*(uint64_t (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(void *)this + 32))(this);
  if (!v2) {
    return 0.0;
  }
  float v3 = **((float **)this + 1210);

  *(float *)&double result = DspLib::amp2dBSafe(v2, v3, 0.000001);
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::numStatus(DspLib::LoudnessNormalizer::Algorithm *this)
{
  return 133;
}

float DspLib::LoudnessNormalizer::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  DspLib::clear((float *)a2, __N);
  if (**(float **)(a1 + 32) >= 0.5)
  {
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 9552);
    *(_DWORD *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 9972);
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 9976);
  }
  float v5 = *(DspLib **)(a1 + 10024);
  if (v5 && *(void *)(a1 + 10032))
  {
    uint64_t v6 = (*(uint64_t (**)(DspLib *))(*(void *)v5 + 176))(v5);
    __n128 v7 = MEMORY[0x1F4188790](v6);
    float v9 = (_DWORD *)((char *)v22 - v8);
    uint64_t v10 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 10024) + 176))(*(void *)(a1 + 10024), v7);
    (*(void (**)(void, _DWORD *, uint64_t))(**(void **)(a1 + 10024) + 184))(*(void *)(a1 + 10024), v9, v10);
    *(_DWORD *)(a2 + 4) = *v9;
    *(_DWORD *)(a2 + 8) = v9[3];
    float v5 = (DspLib *)(*(uint64_t (**)(void, _DWORD *, uint64_t))(**(void **)(a1 + 10032) + 184))(*(void *)(a1 + 10032), v9, v10);
    *(_DWORD *)(a2 + 12) = *v9;
    *(_DWORD *)(a2 + 16) = v9[3];
  }
  else
  {
    *(int32x4_t *)(a2 + 4) = vdupq_n_s32(0xC28C0000);
  }
  float v11 = (unsigned char *)(a1 + 9664);
  *(_DWORD *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 9980);
  float v12 = 0.0;
  float v13 = 1.0;
  if (!*(unsigned char *)(a1 + 9968)) {
    float v13 = 0.0;
  }
  *(float *)(a2 + 24) = *(float *)(a1 + 9980) + *(float *)(a1 + 9976);
  *(float *)(a2 + 28) = v13;
  *(unsigned char *)(a1 + 9968) = 0;
  if (*(unsigned char *)(a1 + 1296) && !*(unsigned char *)(a1 + 1324) && *(unsigned char *)(a1 + 1304)) {
    float v12 = (float)(*(float *)(a1 + 1300) - *(float *)(a1 + 1320));
  }
  *(float *)(a2 + 32) = v12;
  uint64_t v14 = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v14 + 136);
  if (*(_DWORD *)(a1 + 732) < 2u)
  {
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 9988);
  }
  else
  {
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 9468);
    float v15 = 0.0;
    if (*v11) {
      float v15 = 1.0;
    }
    *(float *)(a2 + 64) = v15;
    *float v11 = 0;
    *(float *)(a2 + 68) = DspLib::amp2dBSafe(v5, *(float *)(a1 + 10000), 0.000001);
    *(_DWORD *)(a1 + 1000DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 9460);
    *(_DWORD *)(a2 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 9464);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 10004);
    *(_DWORD *)(a1 + 10004) = -1027080192;
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 10008);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::histogram(a1 + 1408, a2 + 92, 0x64u);
    unint64_t v16 = *(void *)(a1 + 10016);
    *(void *)(a1 + 10016) = v16 + 1;
    *(float *)(a2 + 72) = (float)v16;
    float v17 = 0.0;
    if (*(unsigned char *)(a1 + 9712)) {
      float v18 = 1.0;
    }
    else {
      float v18 = 0.0;
    }
    *(float *)(a2 + 492) = v18;
    if (*(unsigned char *)(a1 + 736)) {
      float v17 = 1.0;
    }
    *(float *)(a2 + 496) = v17;
    uint64_t v14 = *(void *)(a1 + 32);
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 9984);
  *(_DWORD *)(a1 + 9984) = -1027080192;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 9992);
  *(_DWORD *)(a1 + 9992) = -1027080192;
  *(_DWORD *)(a2 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 9996);
  *(_DWORD *)(a1 + 9996) = -1027080192;
  *(_DWORD *)(a2 + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v14 + 188);
  *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 9736);
  *(_DWORD *)(a2 + 508) = *(_DWORD *)(a1 + 1360);
  float v19 = 0.0;
  if (*(unsigned char *)(a1 + 1364)) {
    float v20 = 1.0;
  }
  else {
    float v20 = 0.0;
  }
  *(float *)(a2 + 512) = v20;
  *(_DWORD *)(a2 + std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = *(_DWORD *)(a1 + 9740);
  *(_DWORD *)(a2 + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 9744);
  if (*(uint64_t *)(a1 + 9752) > 0) {
    float v19 = 1.0;
  }
  *(float *)(a2 + 524) = v19;
  float result = *(float *)(a1 + 10012);
  *(float *)(a2 + 528) = result;
  return result;
}

float DspLib::LoudnessNormalizer::Algorithm::maxGainKneePoint(DspLib::LoudnessNormalizer::Algorithm *this)
{
  if (*((_DWORD *)this + 188) == 1)
  {
    float v2 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    float v3 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
  }
  else
  {
    float v2 = *((float *)this + 185);
    float v3 = *((float *)this + 189);
  }
  return (float)(DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - v3) - v2;
}

void DspLib::LoudnessNormalizer::ShapingFilter::initialize(DspLib::LoudnessNormalizer::ShapingFilter *this, unsigned int a2, double a3)
{
  *((double *)this + 9) = a3;
  DspLib::Biquad::Filter::initialize(this, a2, 2uLL);
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::ShapingFilter *)((char *)this + 48));
  *((_DWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = -1054867456;

  DspLib::LoudnessNormalizer::ShapingFilter::setGain(this, 0.0);
}

void DspLib::LoudnessNormalizer::Algorithm::~Algorithm(DspLib::LoudnessNormalizer::Algorithm *this)
{
  DspLib::LoudnessNormalizer::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D360);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(void *)this = &unk_1F14A85A8;
  float v2 = *((void *)this + 1254);
  *((void *)this + 1254) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  float v3 = *((void *)this + 1253);
  *((void *)this + 1253) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (void *)*((void *)this + 1243);
  if (v4)
  {
    *((void *)this + 1244) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 1240);
  if (v5)
  {
    *((void *)this + 1241) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1237);
  if (v6)
  {
    *((void *)this + 1238) = v6;
    operator delete(v6);
  }
  __n128 v7 = (void *)*((void *)this + 1234);
  if (v7)
  {
    *((void *)this + 1235) = v7;
    operator delete(v7);
  }
  float v20 = (void **)((char *)this + 9848);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLibBuffer::~DspLibBuffer((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  uint64_t v8 = (void *)*((void *)this + 1210);
  if (v8)
  {
    *((void *)this + 1211) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9608));
  float v9 = (void *)*((void *)this + 1198);
  if (v9)
  {
    *((void *)this + 1199) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *((void *)this + 1192);
  *((void *)this + 1192) = 0;
  if (v10) {
    MEMORY[0x1C185D360](v10, 64);
  }
  float v11 = *((void *)this + 161);
  *((void *)this + 161) = 0;
  if (v11) {
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)this + 1288, v11);
  }
  float v20 = (void **)((char *)this + 1264);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 816));
  float v12 = (void *)*((void *)this + 99);
  if (v12)
  {
    *((void *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
    operator delete(v12);
  }
  float v20 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 672));
  float v13 = (void *)*((void *)this + 81);
  if (v13)
  {
    *((void *)this + 82) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 72);
  if (v14)
  {
    *((void *)this + 73) = v14;
    operator delete(v14);
  }
  float v15 = (void *)*((void *)this + 69);
  if (v15)
  {
    *((void *)this + 7DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 64);
  if (v16)
  {
    *((void *)this + 65) = v16;
    operator delete(v16);
  }
  float v20 = (void **)((char *)this + 488);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 456));
  float v17 = (void *)*((void *)this + 54);
  if (v17)
  {
    *((void *)this + 55) = v17;
    operator delete(v17);
  }
  float v20 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 264));
  float v18 = (void *)*((void *)this + 30);
  if (v18)
  {
    *((void *)this + 31) = v18;
    operator delete(v18);
  }
  *(void *)this = &unk_1F14A87D8;
  float v19 = (void *)*((void *)this + 4);
  if (v19)
  {
    *((void *)this + 5) = v19;
    operator delete(v19);
  }
}

void std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    float v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C185D370);
  }
}

double DspLib::NonLinearDevice::Algorithm::Algorithm(DspLib::NonLinearDevice::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib15NonLinearDevice10Parameters8kDefaultE_, 0x13uLL, (uint64_t)&_ZGRN6DspLib15NonLinearDevice10Parameters8kMinimumE_, 19, (uint64_t)&_ZGRN6DspLib15NonLinearDevice10Parameters8kMaximumE_, 19);
  *(void *)uint64_t v1 = &unk_1F14A86C0;
  *(void *)(v1 + 216) = 0x3F80000000000000;
  *(void *)(v1 + 224) = 0;
  *(void *)(v1 + 232) = 0;
  *(void *)(v1 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_DWORD *)(v1 + 248) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 316) = 0u;
  *(_OWORD *)(v1 + 332) = 0u;
  *(_OWORD *)(v1 + 348) = 0u;
  *(_OWORD *)(v1 + 364) = 0u;
  *(void *)(v1 + 38DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  return result;
}

uint64_t DspLib::NonLinearDevice::Algorithm::initialize(DspLib::NonLinearDevice::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((*(unsigned int (**)(DspLib::NonLinearDevice::Algorithm *))(*(void *)this + 56))(this) >= 9)
  {
    __n128 v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v7, 20);
    ++DspLibDebug::mAssertCounter;
  }
  else if (v4)
  {
    float v5 = 0.00999999978 / *((double *)this + 2) * 44100.0;
    *((float *)this + 55) = v5;
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::NonLinearDevice::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::NonLinearDevice::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

uint64_t DspLib::NonLinearDevice::Algorithm::uninitialize(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  return this;
}

void DspLib::NonLinearDevice::Algorithm::reset(DspLib::NonLinearDevice::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    DspLib::clear((float *)this + 63, 8uLL);
    DspLib::clear((float *)this + 71, 8uLL);
  }
  else
  {
    float v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v2, 40);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::NonLinearDevice::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  uint64_t v5 = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 216) = vcvtas_u32_f32(*(float *)v5);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(a1 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(v5 + 32);
  float v6 = logf(*(float *)(v5 + 28) + 0.000001);
  *(_DWORD *)(a1 + 348) = 1065353216;
  __n128 v7 = (float *)(a1 + 344);
  uint64_t v8 = -8;
  float v9 = 1.0;
  float v10 = 1.0;
  do
  {
    float v10 = v6 * v10;
    float v9 = v9 * (float)(v8 + 9);
    *v7-- = v10 * (float)(1.0 / v9);
  }
  while (!__CFADD__(v8++, 1));
  uint64_t v12 = 0;
  float v13 = (float *)(a1 + 384);
  do
  {
    float result = *(float *)(v5 + 36 + v12);
    *v13-- = result;
    v12 += 4;
  }
  while (v12 != 36);
  return result;
}

void DspLib::NonLinearDevice::Algorithm::process(uint64_t a1, long long *a2, long long *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    switch(*(_DWORD *)(a1 + 216))
    {
      case 0:
        long long v28 = *a2;
        uint64_t v29 = *((void *)a2 + 2);
        long long v26 = *a3;
        uint64_t v27 = *((void *)a3 + 2);
        DspLib::clip(&v28, &v26, 0.0, 1000.0);
        break;
      case 1:
        long long v24 = *a2;
        uint64_t v25 = *((void *)a2 + 2);
        long long v22 = *a3;
        uint64_t v23 = *((void *)a3 + 2);
        DspLib::abs(&v24, &v22);
        break;
      case 2:
        unint64_t v6 = *((void *)a2 + 2);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v7 = 0;
          do
          {
            if (v6)
            {
              uint64_t v8 = 0;
              uint64_t v9 = *(void *)(*(void *)a3 + 8 * v7);
              uint64_t v10 = *(void *)(*(void *)a2 + 8 * v7);
              uint64_t v11 = a1 + 4 * v7;
              uint64_t v12 = (float *)(v11 + 252);
              float v13 = (float *)(v11 + 284);
              do
              {
                float v14 = *v12;
                if (*(float *)(v10 + 4 * v8) <= 0.0 || (float v15 = 0.0, v14 > 0.0)) {
                  float v15 = *v13 + (float)(*(float *)(a1 + 220) * fabsf(v14));
                }
                *float v13 = v15;
                float *v12 = *(float *)(v10 + 4 * v8);
                *(float *)(v9 + 4 * v8++) = v15;
              }
              while (v6 > v8);
            }
            ++v7;
          }
          while (v7 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      case 3:
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v16 = 0;
          do
          {
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(void *)a2 + 8 * v16), *((void *)a2 + 2), *(float **)(*(void *)a3 + 8 * v16), *((void *)a3 + 2), *(float *)(a1 + 224), *(float *)(a1 + 228));
            ++v16;
          }
          while (v16 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      case 4:
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v17 = 0;
          do
          {
            DspLib::add(*(const float **)(*(void *)a2 + 8 * v17), *((void *)a2 + 2), *(float **)(*(void *)a3 + 8 * v17), *(float *)(a1 + 232));
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(void *)a3 + 8 * v17), *((void *)a3 + 2), *(float **)(*(void *)a3 + 8 * v17), *((void *)a3 + 2), *(float *)(a1 + 224), *(float *)(a1 + 228));
            ++v17;
          }
          while (v17 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      case 5:
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v18 = 0;
          do
          {
            DspLib::add(*(const float **)(*(void *)a2 + 8 * v18), *((void *)a2 + 2), *(float **)(*(void *)a3 + 8 * v18), *(float *)(a1 + 244));
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(void *)a3 + 8 * v18), *((void *)a3 + 2), *(float **)(*(void *)a3 + 8 * v18), *((void *)a3 + 2), *(float *)(a1 + 236), *(float *)(a1 + 240));
            ++v18;
          }
          while (v18 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      case 6:
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v19 = 0;
          do
          {
            DspLib::poly((const float *)(a1 + 316), 9, *(const float **)(*(void *)a2 + 8 * v19), *((void *)a2 + 2), *(float **)(*(void *)a3 + 8 * v19));
            DspLib::multiply(*(float **)(*(void *)a3 + 8 * v19), *((void *)a3 + 2), *(float *)(a1 + 248));
            DspLib::add(*(float **)(*(void *)a3 + 8 * v19++), *((void *)a3 + 2), -1.0);
          }
          while (v19 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      case 7:
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v20 = 0;
          do
          {
            DspLib::poly((const float *)(a1 + 352), 9, *(const float **)(*(void *)a2 + 8 * v20), *((void *)a2 + 2), *(float **)(*(void *)a3 + 8 * v20));
            ++v20;
          }
          while (v20 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        break;
      default:
        return;
    }
  }
  else
  {
    float v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 87);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::NonLinearDevice::tanhNonlinearity(const float *a1, vDSP_Length a2, float *a3, vDSP_Length a4, float a5, float a6)
{
  DspLib::multiply(a1, a2, a3, a5);
  DspLib::vtanh(a3, a4, a3);

  DspLib::multiply(a3, a4, a6);
}

void DspLib::NonLinearDevice::Algorithm::~Algorithm(DspLib::NonLinearDevice::Algorithm *this)
{
  *(void *)this = &unk_1F14A87D8;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14A87D8;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::NonLinearDevice::Algorithm::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a2, a3, a2, a3);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::initialize(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, double a2)
{
  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776), 0);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 51) = 0;
  *((_WORD *)this + 202) = 0;
  *(void *)((char *)this + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1120403456;
  BOOL result = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  *((unsigned char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 10) <= 4uLL) {
    unint64_t v1 = 4;
  }
  else {
    unint64_t v1 = *((void *)this + 10);
  }
  uint64_t v2 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v2);
  unint64_t v3 = 0;
  unsigned int v4 = 0;
  v36[0] = v6;
  v36[1] = &v28[-v5];
  void v36[2] = 3 * v1;
  void v36[3] = 3;
  *(void *)(v7 + 32) = v1;
  __A.unint64_t realp = (float *)&v38;
  __A.imagp = (float *)&v37;
  uint64_t v35 = 3;
  do
  {
    for (unint64_t i = 0; i != 3; ++i)
    {
      float v9 = (float)rand() * 4.6566e-10;
      v40.imag = (float)rand() * 4.6566e-10;
      v40.real = v9;
      DspLib::ComplexSpan::setElement(&__A, i, v40);
    }
    DspLib::ComplexMatrixSpan::setColumn((DspLib::ComplexMatrixSpan *)v36, v3, &__A);
    unint64_t v3 = ++v4;
  }
  while (v1 > v4);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  unint64_t v12 = 0;
  unsigned int v13 = 0;
  v33[0] = v14;
  v33[1] = &v28[-v15];
  void v33[2] = 3 * v1;
  uint64_t v33[3] = v1;
  void v33[4] = 3;
  do
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v17 = (float)rand() * 4.6566e-10;
      v41.imag = (float)rand() * 4.6566e-10;
      v41.real = v17;
      DspLib::ComplexSpan::setElement(&__A, j, v41);
    }
    DspLib::ComplexMatrixSpan::setRow((DspLib::ComplexMatrixSpan *)v33, v12, &__A);
    unint64_t v12 = ++v13;
  }
  while (v1 > v13);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  unint64_t v20 = 0;
  v32[0] = v22;
  v32[1] = &v28[-v21];
  unsigned int v23 = 1;
  v32[2] = v1;
  do
  {
    float v24 = (float)rand() * 4.6566e-10;
    v42.imag = (float)rand() * 4.6566e-10;
    v42.real = v24;
    DspLib::ComplexSpan::setElement(v32, v20, v42);
    unint64_t v20 = v23;
  }
  while (v1 > v23++);
  int v31 = 0;
  float v30 = 0.0;
  return DspLib::LoudspeakerSystemIDV1::updateModelParameters((DspLib::LoudspeakerSystemIDV1 *)&v31, &v30, &v29, (float *)v36, (DspLib::ComplexMatrixSpan *)v33, (DspLib::ComplexMatrixSpan *)v32, v25, 0.0);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 51) = 0;
  *((_WORD *)this + 202) = 0;
  *(void *)((char *)this + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1120403456;
  return DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
}

BOOL DspLib::LoudspeakerSystemIDV1::updateModelParameters(DspLib::LoudspeakerSystemIDV1 *this, float *a2, float *a3, float *a4, DspLib::ComplexMatrixSpan *a5, DspLib::ComplexMatrixSpan *a6, DspLib::ComplexSpan *a7, float a8)
{
  long long v28 = a3;
  float v30 = a2;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v29 = xmmword_1BB873120;
  long long v47 = xmmword_1BB873120;
  uint64_t v46 = v51;
  uint64_t v48 = 3;
  DspLib::LoudspeakerSystemIDV1::updateMTimesX((uint64_t)&v46, a4, a5);
  uint64_t v12 = 0;
  unsigned int v13 = v51;
  do
  {
    *unsigned int v13 = *v13 + a8;
    v13 += 4;
    ++v12;
  }
  while (v12 != 3);
  DspLib::inv3x3real(v51);
  uint64_t v27 = (uint64_t)&v27;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  float v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = *((void *)a4 + 4);
  v45[0] = v17;
  v45[1] = (char *)&v27 - v18;
  void v45[2] = 3 * v20;
  void v45[3] = 3;
  v45[4] = v20;
  long long v43 = v29;
  DSPComplex v42 = v51;
  uint64_t v44 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v45, &v42, a4);
  v41[0] = __C;
  v41[1] = v49;
  void v41[2] = 3;
  v40[0] = v17;
  v40[1] = 3 * v20;
  v40[2] = 3;
  void v40[3] = v20;
  uint64_t v21 = *((void *)a6 + 2);
  v39[0] = *(void *)a6;
  v39[1] = v21;
  v39[2] = v21;
  void v39[3] = 1;
  uint64_t v36 = __C;
  int64x2_t v37 = vdupq_n_s64(3uLL);
  uint64_t v38 = 1;
  DspLib::multiply((uint64_t)v40, (uint64_t)v39, &v36);
  v35[0] = v19;
  v35[1] = 3 * v20;
  v35[2] = 3;
  void v35[3] = v20;
  uint64_t v22 = *((void *)a6 + 2);
  v34[0] = *((void *)a6 + 1);
  v34[1] = v22;
  v34[2] = v22;
  void v34[3] = 1;
  int v31 = v49;
  int64x2_t v32 = vdupq_n_s64(3uLL);
  uint64_t v33 = 1;
  DspLib::multiply((uint64_t)v35, (uint64_t)v34, &v31);
  DspLib::add(__C, 3uLL, v49);
  *(float *)this = DspLib::ComplexSpan::operator[](v41, 0);
  float v23 = DspLib::ComplexSpan::operator[](v41, 1uLL);
  *float v30 = v23;
  float v24 = DspLib::ComplexSpan::operator[](v41, 2uLL);
  *long long v28 = v24;
  if ((*(_DWORD *)this & 0x7FFFFFFFu) >= 0x7F800000) {
    return 0;
  }
  return (*(_DWORD *)v30 & 0x7FFFFFFFu) < 0x7F800000 && (LODWORD(v24) & 0x7FFFFFFFu) < 0x7F800000;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::uninitialize(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 880), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776), 0);
}

uint64_t DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::setParameters(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, const DspLib::AlgorithmParametersInstance *a2)
{
  if (*((unsigned char *)this + 40))
  {
    uint64_t v4 = DspLib::AlgorithmParametersInstance::group(a2, 7u);
    uint64_t v5 = v4;
    float v6 = *(float *)(v4 + 24);
    if (*(float *)(v4 + 28) + *(double *)this * 0.0009765625 * -2.0 > v6)
    {
      *((float *)this + 216) = v6;
      *((_DWORD *)this + 217) = *(_DWORD *)(v4 + 28);
    }
    float v7 = DspLib::dB2Amp((DspLib *)v4, *(float *)(v4 + 44));
    *((float *)this + 246) = v7 / (float)(v7 + 1.0);
    *((float *)this + 247) = *(float *)(v5 + 48) / 100.0;
    *((float *)this + 248) = DspLib::dB2Amp(v8, *(float *)(v5 + 40));
    float v10 = DspLib::dB2Amp(v9, *(float *)(v5 + 56));
    *((float *)this + 249) = v10 / (float)(v10 + 1.0);
    *((_DWORD *)this + 25DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v5 + 32);
    *((float *)this + 251) = *(float *)(v5 + 12) * 0.001;
    *((float *)this + 252) = *(float *)(v5 + 60) * 0.001;
    *((float *)this + 253) = *(float *)(v5 + 64) * 0.001;
    *((_DWORD *)this + 254) = *(_DWORD *)(v5 + 76);
    *((_DWORD *)this + 255) = *(_DWORD *)(v5 + 80);
    *((_DWORD *)this + 256) = *(_DWORD *)(v5 + 68);
    *((_DWORD *)this + 257) = *(_DWORD *)(v5 + 72);
    *((unsigned char *)this + 872) = *(float *)(v5 + 4) != 0.0;
    float v11 = *(float *)(v5 + 92);
    *((unsigned char *)this + 873) = v11 != 0.0;
    *((_DWORD *)this + 258) = *(_DWORD *)(v5 + 8);
    *((_DWORD *)this + 259) = *(_DWORD *)(v5 + 84);
    *((_DWORD *)this + 26DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v5 + 88);
    if (v11 != 0.0) {
      *((unsigned char *)this + 872) = 0;
    }
    float v12 = *(double *)this * 0.0009765625;
    v13.i64[0] = 0xFFFFFFFFLL;
    v13.i64[1] = 0xFFFFFFFFLL;
    float32x2_t v14 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 864)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v12), 0)))), v13)), v12));
    *((float32x2_t *)this + 107) = v14;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 2, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v14, 1), v14).f32[0] / v12));
    DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), *((float *)this + 214), v12, v15);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((void *)this + 68));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x400, *((float *)this + 214), *((float *)this + 215), *(double *)this, 1uLL, (unint64_t **)&v20);
    uint64_t v16 = (void *)*((void *)this + 1);
    if (v16)
    {
      *((void *)this + 2) = v16;
      operator delete(v16);
    }
    *(_OWORD *)((char *)this + 8) = v20;
    *((void *)this + 3) = v21;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), *((void *)this + 68));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), *((void *)this + 68), 1u);
    DspLibBuffer::setNumFrames((unint64_t *)this + 86, *((void *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776), *((void *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 880), *((void *)this + 68));
    DspLib::ComplexVector::operator=((char *)this + 880, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 3, *((void *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), *((void *)this + 68));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), *((void *)this + 68), 3);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), *((void *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), *((void *)this + 68));
    *((_DWORD *)this + 104) = *(float *)(v5 + 32);
    float v17 = *(double *)this
        / (double)(unint64_t)round(*(double *)this* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000003));
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 36) * 1000.0) * v17) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 52) * 1000.0) * v17) / 1000.0));
    *((unsigned char *)this + 41) = 1;
    return DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  }
  else
  {
    uint64_t v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v19, 116);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  char v2 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readSingleResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t)this + 960, &v2);
  if (!v2)
  {
    *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *((void *)this + 51) = 0;
    *((_WORD *)this + 202) = 0;
    *(void *)((char *)this + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1120403456;
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  }
}

uint64_t DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeSingleResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t *)this + 120);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::process(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 41))
  {
    float v10 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688);
    float v11 = (uint64_t *)((char *)this + 8);
    uint64_t v46 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608);
    DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (void *)this + 76, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), (uint64_t *)this + 1);
    float v12 = *((float *)this + 246);
    uint64_t v44 = (DSPSplitComplex *)((char *)this + 880);
    uint64_t v45 = v10;
    DspLib::LoudspeakerSystemIDV2::updateWeights(v10, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 880), v13, v12);
    *((float *)this + 102) = v14;
    BOOL result = DspLib::LoudspeakerSystemIDV1::safeToAdapt((uint64_t *)a5, (float *)this + 100, v11, (float *)this + 106, v14, *((float *)this + 246), *((float *)this + 247), *((float *)this + 248));
    if (result)
    {
      if (*((_DWORD *)this + 104))
      {
        int v37 = 0;
        unsigned int v16 = 0;
        long long v47 = (float *)((char *)this + 960);
        DSPComplex v42 = (char *)this + 432;
        long long v43 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48);
        DSPComplex v40 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224);
        DSPComplex v41 = (DSPSplitComplex *)((char *)this + 144);
        uint64_t v38 = (float *)&v50;
        uint64_t v39 = (DspLib::LoudspeakerSystemIDV1 *)((char *)&v49 + 4);
        uint64_t v48 = (DspLib::ComplexSpan *)a6;
        float v17 = (DSPSplitComplex *)((char *)this + 432);
        do
        {
          uint64_t v18 = v47;
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(result, (DSPSplitComplex *)((char *)this + 776), (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v47);
          DspLib::operator+=((char *)this + 776, a6);
          DspLib::operator+=((uint64_t)this + 776, a4);
          DspLib::LoudspeakerSystemIDV2::updateModelFitData(v46, v45, a6, a4, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776), v17, v19);
          uint64_t v21 = (float *)v43;
          long long v20 = v44;
          DspLib::LoudspeakerSystemIDV1::updateMInResonanceModel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v18, v44, v43);
          uint64_t v22 = (uint64_t)v18;
          float v23 = v41;
          DspLib::LoudspeakerSystemIDV1::updateAInverseInResonanceModel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v22, (uint64_t)v41, (uint64_t)v20);
          float v24 = v40;
          DspLib::LoudspeakerSystemIDV1::updateXInResonanceModel(v17, v23, v40, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v25);
          uint64_t v27 = MEMORY[0x1F4188790](v26);
          MEMORY[0x1F4188790](v27);
          uint64_t v28 = *((void *)this + 68);
          __B.unint64_t realp = v30;
          __B.imagp = (float *)((char *)&v36 - v29);
          uint64_t v52 = v28;
          DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 1uLL, &__B);
          DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, v17);
          DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
          DspLib::operator*=((DSPSplitComplex *)this + 20, v23);
          uint64_t v49 = 0;
          int v50 = 0;
          BOOL result = DspLib::LoudspeakerSystemIDV1::updateModelParameters(v39, v38, (float *)&v49, v21, v24, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), v31, 1.0e-15);
          if (result)
          {
            BOOL result = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::parametersAreValid((uint64_t)this, (uint64_t)&v49, (uint64_t)v48, a4, v32, v33);
            if (result)
            {
              float v34 = v47;
              *(void *)long long v47 = v49;
              *((_DWORD *)v34 + 2) = v50;
              int v37 = 1;
            }
          }
          ++v16;
          a6 = (DSPSplitComplex *)v48;
        }
        while (v16 < *((_DWORD *)this + 104));
      }
      else
      {
        int v37 = 0;
      }
      return v37 & 1;
    }
    else
    {
      *((unsigned char *)this + 404) = 0;
    }
  }
  else
  {
    uint64_t v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v35, 214);
    BOOL result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV1::safeToAdapt(uint64_t *a1, float *a2, uint64_t *a3, float *a4, float a5, float a6, float a7, float a8)
{
  *a2 = 0.0;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1] - *a3;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v9 >> 3;
  uint64_t v12 = *a1;
  float v13 = 0.0;
  float v14 = 0.0;
  do
  {
    unint64_t v15 = *(void *)(v8 + 8 * v10);
    if (v15 >= 0x1FF) {
      unint64_t v15 = 511;
    }
    float v16 = *(float *)(v12 + 4 * v15);
    float v14 = v16 + v14;
    *a2 = v14;
    if (v16 > v13) {
      float v13 = v16;
    }
    ++v10;
  }
  while (v11 > v10);
  if (v14 == 0.0) {
    return 0;
  }
  float v18 = v13 / v14;
  *a4 = v18;
  float v19 = *a2 / (float)v11;
  *a2 = v19;
  BOOL v20 = a5 >= a6;
  if (v18 <= a7) {
    BOOL v20 = 1;
  }
  return v19 > a8 && v20;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(uint64_t a1, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v7);
  __A.unint64_t realp = v9;
  __A.imagp = (float *)((char *)&__B - v8);
  uint64_t v27 = v10;
  DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  MEMORY[0x1F4188790](v12);
  v24.unint64_t realp = v14;
  v24.imagp = (float *)((char *)&__B - v13);
  uint64_t v25 = v15;
  DspLib::ComplexMatrixSpan::row(a3, 0, &v24);
  DspLib::operator*=((uint64_t)&__A, *a4);
  DspLib::operator*=((uint64_t)&v24, a4[2]);
  uint64_t v16 = DspLib::operator+=((uint64_t)&v24, a4[1]);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  MEMORY[0x1F4188790](v17);
  __B.unint64_t realp = v19;
  __B.imagp = (float *)((char *)&__B - v18);
  uint64_t v23 = v20;
  DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
  DspLib::operator+=(&v24, &__B);
  DspLib::ComplexSpan::operator=(a2, &__A);
  return DspLib::operator/=(a2, &v24);
}

void DspLib::LoudspeakerSystemIDV1::updateMInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  __A.unint64_t realp = v11;
  __A.imagp = (float *)((char *)&__C - v10);
  uint64_t v28 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  float v14 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v13);
  __B.unint64_t realp = v16;
  __B.imagp = (float *)((char *)&__C - v15);
  uint64_t v26 = v17;
  DspLib::ComplexMatrixSpan::row(v14, 0, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[2]);
  DspLib::operator+=((uint64_t)&__B, a2[1]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator+=(&__B, &__A);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  uint64_t v18 = DspLib::operator*=(&__A, a3);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  __C.unint64_t realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  uint64_t v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::operator*=((uint64_t)&__A, -*a2);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -*a2);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateAInverseInResonanceModel(DspLib::ComplexMatrixSpan *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v8);
  __A.unint64_t realp = v11;
  __A.imagp = (float *)((char *)&v19 - v10);
  uint64_t v23 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, *(float *)(a2 + 8));
  uint64_t v13 = DspLib::operator+=((uint64_t)&__A, *(float *)(a2 + 4));
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  __B.unint64_t realp = v16;
  __B.imagp = (float *)((char *)&v19 - v15);
  uint64_t v21 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &__A);
}

void DspLib::LoudspeakerSystemIDV1::updateXInResonanceModel(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v9);
  __C.unint64_t realp = v11;
  __C.imagp = (float *)((char *)&v18 - v10);
  uint64_t v22 = v12;
  DspLib::ComplexSpan::operator=(&__C, this);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexSpan::operator=(&__C, this);
  uint64_t v13 = DspLib::operator*=((uint64_t)&__C, -1.0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  __B.unint64_t realp = v16;
  __B.imagp = (float *)((char *)&v18 - v15);
  uint64_t v20 = v17;
  DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
  DspLib::operator*=(&__C, &__B);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::parametersAreValid(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  uint64_t v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 608);
  uint64_t v11 = (DSPSplitComplex *)(a1 + 776);
  uint64_t v12 = (const DspLib::ComplexSpan *)(a1 + 432);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 608), *(const DspLib::ComplexSpan **)(a1 + 880), (float *)(a1 + 776), (const DspLib::ComplexSpan *)(a1 + 432), a6);
  *(_DWORD *)(a1 + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v13;
  uint64_t v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 996)) {
    uint64_t v14 = 32;
  }
  float v15 = *(float *)(a1 + v14);
  float v16 = *(float *)(a2 + 8) + (float)(v15 * (float)(*(float *)(a1 + 968) - *(float *)(a2 + 8)));
  *(float *)(a2 + 8) = v16;
  float32x2_t v17 = vmla_n_f32(*(float32x2_t *)a2, vsub_f32(*(float32x2_t *)(a1 + 960), *(float32x2_t *)a2), v15);
  *(float32x2_t *)a2 = v17;
  float v18 = *(float *)(a1 + 1032);
  if (*(unsigned char *)(a1 + 872))
  {
    if (v17.f32[0] <= 0.00001) {
      float v19 = *(float *)(a1 + 1012);
    }
    else {
      float v19 = (float)(v18 * v18) / v17.f32[0];
    }
  }
  else
  {
    float v19 = *(float *)(a1 + 1004);
    float v20 = sqrtf(v17.f32[0] * v19);
    if (v17.f32[0] > 0.0) {
      float v18 = v20;
    }
  }
  float v28 = v18;
  float v29 = v19;
  v30.f32[0] = v16 * v19;
  v30.i32[1] = vmuls_lane_f32(v19, v17, 1);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::clipTsParameters((float *)a1, &v28);
  *(float *)v21.i32 = v29;
  *(float *)a2 = (float)(v28 * v28) / v29;
  *(int32x2_t *)(a2 + 4) = vrev64_s32((int32x2_t)vdiv_f32(v30, (float32x2_t)vdup_lane_s32(v21, 0)));
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(v22, v11, (DspLib::ComplexMatrixSpan *)(a1 + 512), (float *)a2);
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 880), (float *)v11, v12, v23);
  float v25 = *(float *)(a1 + 420);
  if (v24 >= v25)
  {
    char v26 = 0;
  }
  else
  {
    *(float *)(a1 + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v24;
    char v26 = 1;
  }
  BOOL result = v24 < v25;
  *(unsigned char *)(a1 + 405) = v26;
  *(unsigned char *)(a1 + 404) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::status(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((unsigned char *)this + 872))
    {
      float v4 = *((float *)this + 240);
      if (v4 == 0.0) {
        float v5 = 0.0;
      }
      else {
        float v5 = (float)(*((float *)this + 258) * *((float *)this + 258)) / v4;
      }
      float v7 = v5 * 1000.0;
    }
    else
    {
      float v5 = *((float *)this + 251);
      float v6 = *((float *)this + 240);
      if (v6 <= 0.0) {
        float v7 = *((float *)this + 258);
      }
      else {
        float v7 = sqrtf(v5 * v6);
      }
    }
    *(float *)(a2 + 8) = v7;
    int32x2_t v8 = (int32x2_t)vmul_n_f32(*(float32x2_t *)((char *)this + 964), v5);
    *(_DWORD *)(a2 + 144) = *((_DWORD *)this + 100);
    *(int32x2_t *)(a2 + 12) = vrev64_s32(v8);
    *(float *)v8.i32 = sqrtf(*((float *)this + 241));
    float v9 = *(float *)v8.i32 / 6.2832;
    float v10 = *((float *)this + 242);
    float v11 = *(float *)v8.i32 / v10;
    if (v10 == 0.0) {
      float v11 = 0.0;
    }
    float v12 = (float)(unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
    *(float *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    *(float *)(a2 + 24) = v11;
    float v13 = 1.0;
    if (*((unsigned char *)this + 404)) {
      float v14 = 1.0;
    }
    else {
      float v14 = 0.0;
    }
    *(float *)(a2 + 28) = v12;
    *(float *)(a2 + 32) = v14;
    *(float *)(a2 + 36) = v14;
    *(float *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v14;
    if (!*((unsigned char *)this + 405)) {
      float v13 = 0.0;
    }
    *(float *)(a2 + 124) = v13;
    *(float *)(a2 + 128) = v13;
    *(float *)(a2 + 132) = v13;
    *(_DWORD *)(a2 + 148) = *((_DWORD *)this + 106);
    *(_DWORD *)(a2 + 152) = *((_DWORD *)this + 102);
    *(float *)(a2 + 156) = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 168) = *((_DWORD *)this + 105);
    *(_DWORD *)(a2 + 16DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 214);
    *(_DWORD *)(a2 + 164) = *((_DWORD *)this + 215);
    *(void *)(a2 + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *(_OWORD *)(a2 + 204) = 0u;
    *(_OWORD *)(a2 + 188) = 0u;
    *(_OWORD *)(a2 + 172) = 0u;
  }
  else
  {
    float v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 257);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::clipTsParameters(float *a1, float *a2)
{
  char v2 = a1 + 259;
  unint64_t v3 = a1 + 260;
  if (a1[260] >= *a2) {
    unint64_t v3 = a2;
  }
  if (*a2 >= a1[259]) {
    char v2 = v3;
  }
  *a2 = *v2;
  float v4 = a1 + 252;
  float v5 = a1 + 253;
  float v6 = a2[1];
  if (a1[253] >= v6) {
    float v5 = a2 + 1;
  }
  if (v6 >= a1[252]) {
    float v4 = v5;
  }
  a2[1] = *v4;
  float v7 = a1 + 254;
  int32x2_t v8 = a1 + 255;
  float v9 = a2[3];
  if (a1[255] >= v9) {
    int32x2_t v8 = a2 + 3;
  }
  if (v9 >= a1[254]) {
    float v7 = v8;
  }
  a2[3] = *v7;
  float v10 = a1 + 256;
  float v11 = a1 + 257;
  float v13 = a2[2];
  float v12 = a2 + 2;
  float v14 = v13;
  if (a1[257] >= v13) {
    float v11 = v12;
  }
  if (v14 >= a1[256]) {
    float v10 = v11;
  }
  float result = *v10;
  float *v12 = *v10;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(float a1, float a2)
{
  return (float)(a1 * a1) / a2;
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::initialize(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, double a2)
{
  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 768), 0);
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_WORD *)this + 202) = 0;
  *(void *)&double result = 1120403456;
  *((void *)this + 52) = 1120403456;
  *((unsigned char *)this + 44) = 1;
  return result;
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_WORD *)this + 202) = 0;
  *(void *)&double result = 1120403456;
  *((void *)this + 52) = 1120403456;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::setParameters(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, const DspLib::AlgorithmParametersInstance *a2)
{
  if (*((unsigned char *)this + 44))
  {
    uint64_t v4 = DspLib::AlgorithmParametersInstance::group(a2, 6u);
    uint64_t v5 = v4;
    float v6 = *(float *)(v4 + 20);
    if (*(float *)(v4 + 24) + *(double *)this * 0.0009765625 * -2.0 * *(float *)(v4 + 68) > v6)
    {
      *((float *)this + 214) = v6;
      *((_DWORD *)this + 215) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)this + 216) = *(_DWORD *)(v4 + 68);
    }
    float v7 = DspLib::dB2Amp((DspLib *)v4, *(float *)(v4 + 56));
    *((float *)this + 244) = v7 / (float)(v7 + 1.0);
    *((float *)this + 245) = *(float *)(v5 + 60) * 0.01;
    *((float *)this + 246) = DspLib::dB2Amp(v8, *(float *)(v5 + 64));
    float v10 = DspLib::dB2Amp(v9, *(float *)(v5 + 76));
    *((float *)this + 247) = v10 / (float)(v10 + 1.0);
    *((_DWORD *)this + 248) = *(_DWORD *)(v5 + 32);
    *((_DWORD *)this + 249) = *(_DWORD *)(v5 + 36);
    *((_DWORD *)this + 25DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(v5 + 40);
    *((_DWORD *)this + 251) = *(_DWORD *)(v5 + 44);
    *((_DWORD *)this + 252) = *(_DWORD *)(v5 + 48);
    *((_DWORD *)this + 253) = *(_DWORD *)(v5 + 52);
    float v11 = *(double *)this * 0.0009765625;
    v12.i64[0] = 0xFFFFFFFFLL;
    v12.i64[1] = 0xFFFFFFFFLL;
    float32x2_t v13 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 856)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v11), 0)))), v12)), v11));
    *((float32x2_t *)this + 106) = v13;
    float v14 = *((float *)this + 216) * v11;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 2, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v13, 1), v13).f32[0] / v14));
    DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), *((float *)this + 212), v14, v15);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((void *)this + 67));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x400, *((float *)this + 212), *((float *)this + 213), *(double *)this, (unint64_t)*((float *)this + 216), (unint64_t **)&v20);
    float v16 = (void *)*((void *)this + 1);
    if (v16)
    {
      *((void *)this + 2) = v16;
      operator delete(v16);
    }
    *(_OWORD *)((char *)this + 8) = v20;
    *((void *)this + 3) = v21;
    float v17 = *(double *)this * 0.0009765625 * *((float *)this + 216);
    *((float *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), *((void *)this + 67));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), *((void *)this + 67), 1u);
    DspLibBuffer::setNumFrames((unint64_t *)this + 85, *((void *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 768), *((void *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 872), *((void *)this + 67));
    DspLib::ComplexVector::operator=((char *)this + 872, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48), 3, *((void *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144), *((void *)this + 67));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224), *((void *)this + 67), 3);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), *((void *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424), *((void *)this + 67));
    *((_DWORD *)this + 103) = *(float *)(v5 + 16);
    float v18 = *(double *)this
        / (double)(unint64_t)round(*(double *)this* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000003));
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 28) * 1000.0) * v18) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 72) * 1000.0) * v18) / 1000.0));
    *((unsigned char *)this + 45) = 1;
  }
  else
  {
    float v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v19, 539);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  char v3 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t)this + 952, &v3);
  if (!v3)
  {
    *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    *((_DWORD *)this + 102) = 0;
    *((_WORD *)this + 202) = 0;
    *(void *)&double result = 1120403456;
    *((void *)this + 52) = 1120403456;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t *)this + 119);
}

BOOL DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::process(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 45))
  {
    float v10 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680);
    float v11 = (uint64_t *)((char *)this + 8);
    uint64_t v46 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600);
    DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (void *)this + 75, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), (uint64_t *)this + 1);
    float v12 = *((float *)this + 244);
    uint64_t v44 = (DSPSplitComplex *)((char *)this + 872);
    uint64_t v45 = v10;
    DspLib::LoudspeakerSystemIDV2::updateWeights(v10, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 872), v13, v12);
    *((float *)this + 102) = v14;
    BOOL result = DspLib::LoudspeakerSystemIDV1::safeToAdapt((uint64_t *)a5, (float *)this + 100, v11, (float *)this + 105, v14, *((float *)this + 244), *((float *)this + 245), *((float *)this + 246));
    if (result)
    {
      if (*((_DWORD *)this + 103))
      {
        int v37 = 0;
        unsigned int v16 = 0;
        long long v47 = (float *)((char *)this + 952);
        DSPComplex v42 = (char *)this + 424;
        long long v43 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48);
        DSPComplex v40 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224);
        DSPComplex v41 = (DSPSplitComplex *)((char *)this + 144);
        uint64_t v38 = (DspLib::LoudspeakerSystemIDV1 *)&v50;
        uint64_t v39 = (float *)&v49 + 1;
        uint64_t v48 = (DspLib::ComplexSpan *)a6;
        float v17 = (DSPSplitComplex *)((char *)this + 424);
        do
        {
          float v18 = v47;
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(result, (DSPSplitComplex *)this + 48, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v47);
          DspLib::operator+=((char *)this + 768, a6);
          DspLib::operator+=((uint64_t)this + 768, a4);
          DspLib::LoudspeakerSystemIDV2::updateModelFitData(v46, v45, a6, a4, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 768), v17, v19);
          uint64_t v21 = (float *)v43;
          long long v20 = v44;
          DspLib::LoudspeakerSystemIDV1::updateMInInductanceModel((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v18, v44, v43);
          uint64_t v22 = (uint64_t)v18;
          uint64_t v23 = v41;
          DspLib::LoudspeakerSystemIDV1::updateAInverseInInductanceModel((uint64_t)this + 504, v22, (uint64_t)v41, (uint64_t)v20);
          float v24 = v40;
          DspLib::LoudspeakerSystemIDV1::updateXInInductanceModel((DspLib::LoudspeakerSystemIDV1 *)v17, v23, v40, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v25);
          uint64_t v27 = MEMORY[0x1F4188790](v26);
          MEMORY[0x1F4188790](v27);
          uint64_t v28 = *((void *)this + 67);
          __B.unint64_t realp = v30;
          __B.imagp = (float *)((char *)&v36 - v29);
          uint64_t v52 = v28;
          DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 0, &__B);
          DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, v17);
          DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
          DspLib::operator*=((DSPSplitComplex *)this + 20, v23);
          float32x2_t v49 = 0;
          int v50 = 0;
          BOOL result = DspLib::LoudspeakerSystemIDV1::updateModelParameters(v38, (float *)&v49, v39, v21, v24, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), v31, 1.0e-10);
          if (result)
          {
            BOOL result = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::parametersAreValid((uint64_t)this, &v49, (uint64_t)v48, a4, v32, v33);
            if (result)
            {
              float v34 = v47;
              *(float32x2_t *)long long v47 = v49;
              *((_DWORD *)v34 + 2) = v50;
              int v37 = 1;
            }
          }
          ++v16;
          a6 = (DSPSplitComplex *)v48;
        }
        while (v16 < *((_DWORD *)this + 103));
      }
      else
      {
        int v37 = 0;
      }
      return v37 & 1;
    }
    else
    {
      *((unsigned char *)this + 404) = 0;
    }
  }
  else
  {
    uint64_t v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v35, 628);
    BOOL result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(uint64_t a1, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v7);
  __A.unint64_t realp = v9;
  __A.imagp = (float *)((char *)&v17 - v8);
  uint64_t v21 = v10;
  DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  MEMORY[0x1F4188790](v12);
  __B.unint64_t realp = v14;
  __B.imagp = (float *)((char *)&v17 - v13);
  uint64_t v19 = v15;
  DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__A, *a4);
  DspLib::operator*=((uint64_t)&__B, a4[1]);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
  DspLib::operator+=((uint64_t)&__B, a4[2]);
  if (fabsf(*__B.realp) < 0.00000011921) {
    *__B.unint64_t realp = 0.00000011921;
  }
  DspLib::ComplexSpan::operator=(a2, &__A);
  return DspLib::operator/=(a2, &__B);
}

void DspLib::LoudspeakerSystemIDV1::updateMInInductanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  float v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v8);
  __B.unint64_t realp = v11;
  __B.imagp = (float *)((char *)&__C - v10);
  uint64_t v28 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__B);
  uint64_t v13 = DspLib::operator+=((uint64_t)&__B, a2[2]);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  __A.unint64_t realp = v16;
  __A.imagp = (float *)((char *)&__C - v15);
  uint64_t v26 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  float v18 = DspLib::operator*=(&__A, a3);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  __C.unint64_t realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  uint64_t v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__C);
  DspLib::operator*=((uint64_t)&__C, -*a2);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[1]);
  DspLib::operator+=(&__A, &__C);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateAInverseInInductanceModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1F4188790](v7);
  v13.unint64_t realp = v10;
  v13.imagp = (float *)((char *)&v13 - v9);
  uint64_t v14 = v11;
  DspLib::ComplexMatrixSpan::row(v8, 0, &v13);
  DspLib::operator+=((uint64_t)&v13, *(float *)(a2 + 8));
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &v13);
}

void DspLib::LoudspeakerSystemIDV1::updateXInInductanceModel(DspLib::LoudspeakerSystemIDV1 *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1F4188790](this);
  MEMORY[0x1F4188790](v8);
  __C.unint64_t realp = v10;
  __C.imagp = (float *)((char *)&__C - v9);
  uint64_t v14 = v11;
  DspLib::ComplexSpan::operator=(&__C, v12);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::parametersAreValid(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  uint64_t v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 600);
  uint64_t v11 = (DSPSplitComplex *)(a1 + 768);
  uint64_t v12 = (const DspLib::ComplexSpan *)(a1 + 424);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 600), *(const DspLib::ComplexSpan **)(a1 + 872), (float *)(a1 + 768), (const DspLib::ComplexSpan *)(a1 + 424), a6);
  uint64_t v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 988)) {
    uint64_t v14 = 32;
  }
  float v15 = *(float *)(a1 + v14);
  *(_DWORD *)(a1 + 416) = v13;
  _S0 = a2[1].f32[0] + (float)(v15 * (float)(*(float *)(a1 + 960) - a2[1].f32[0]));
  a2[1].f32[0] = _S0;
  _D2 = vmla_n_f32(*a2, vsub_f32(*(float32x2_t *)(a1 + 952), *a2), v15);
  *a2 = _D2;
  float v18 = *(float *)(a1 + 1004);
  __asm { FMLS            S3, S0, V2.S[1] }
  float v33 = _D2.f32[1];
  if (_S0 == 1.0e-12) {
    float v24 = v18;
  }
  else {
    float v24 = _S3 / _S0;
  }
  float v34 = v24;
  float v35 = _S3;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::clipTsParameters((float *)a1, &v33);
  float v25 = v33;
  float32_t v26 = v35 / v34;
  a2->f32[0] = v35 + (float)((float)(v33 * v35) / v34);
  a2->f32[1] = v25;
  a2[1].f32[0] = v26;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(v27, v11, (DspLib::ComplexMatrixSpan *)(a1 + 504), (float *)a2);
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 872), (float *)v11, v12, v28);
  float v30 = *(float *)(a1 + 416);
  if (v29 >= v30)
  {
    char v31 = 0;
  }
  else
  {
    *(float *)(a1 + 416) = v29;
    char v31 = 1;
  }
  BOOL result = v29 < v30;
  *(unsigned char *)(a1 + 405) = v31;
  *(unsigned char *)(a1 + 404) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::status(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, uint64_t a2)
{
  if (*((unsigned char *)this + 44))
  {
    float v4 = *((float *)this + 239);
    float v5 = *((float *)this + 240);
    float v6 = *((float *)this + 238) - (float)(v4 * v5);
    if (v5 == 0.0) {
      float v7 = *((float *)this + 251);
    }
    else {
      float v7 = v6 / v5;
    }
    *(float *)(a2 + 52) = v4;
    *(float *)(a2 + 56) = v7;
    if (*((unsigned char *)this + 404)) {
      float v8 = 1.0;
    }
    else {
      float v8 = 0.0;
    }
    *(float *)(a2 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6;
    *(float *)(a2 + 64) = v8;
    *(float *)(a2 + 68) = v8;
    *(float *)(a2 + 72) = v8;
    if (*((unsigned char *)this + 405)) {
      float v9 = 1.0;
    }
    else {
      float v9 = 0.0;
    }
    *(float *)(a2 + 112) = v9;
    *(float *)(a2 + 116) = v9;
    *(float *)(a2 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    *(float *)(a2 + 76) = (float)*((unint64_t *)this + 67);
    *(_DWORD *)(a2 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 10);
    *(_DWORD *)(a2 + 96) = *((_DWORD *)this + 212);
    *(_DWORD *)(a2 + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 213);
    *(_DWORD *)(a2 + 48) = *((_DWORD *)this + 100);
    *(_DWORD *)(a2 + 84) = *((_DWORD *)this + 105);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)this + 102);
    *(float *)(a2 + 92) = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 108) = *((_DWORD *)this + 104);
  }
  else
  {
    uint64_t v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 671);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::clipTsParameters(float *a1, float *a2)
{
  char v2 = a1 + 248;
  char v3 = a1 + 249;
  if (a1[249] >= *a2) {
    char v3 = a2;
  }
  if (*a2 >= a1[248]) {
    char v2 = v3;
  }
  *a2 = *v2;
  float v4 = a1 + 250;
  float v5 = a1 + 251;
  float v6 = a2[1];
  if (a1[251] >= v6) {
    float v5 = a2 + 1;
  }
  if (v6 >= a1[250]) {
    float v4 = v5;
  }
  a2[1] = *v4;
  float v7 = a1 + 252;
  float v8 = a1 + 253;
  float v10 = a2[2];
  float v9 = a2 + 2;
  float v11 = v10;
  if (a1[253] >= v10) {
    float v8 = v9;
  }
  if (v11 >= a1[252]) {
    float v7 = v8;
  }
  float result = *v7;
  *float v9 = *v7;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::coeffsToTsParameters(double a1, float a2)
{
  return a2;
}

float DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(float a1, float a2, float a3)
{
  return a3 + (float)((float)(a1 * a3) / a2);
}

void DspLib::LoudspeakerSystemIDV1::updateMTimesX(uint64_t a1, void *a2, void *a3)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  v26[0] = *a2;
  v26[1] = v7 * v6;
  v26[2] = v6;
  v26[3] = v7;
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  v25[0] = *a3;
  v25[1] = v9 * v8;
  void v25[2] = v8;
  void v25[3] = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v10;
  DspLib::multiply((uint64_t)v26, (uint64_t)v25, (float **)v24);
  uint64_t v12 = a2[3];
  uint64_t v13 = a3[4];
  if ((unint64_t)(v13 * v12) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v13 * v12;
  }
  MEMORY[0x1F4188790](v11);
  unsigned int v16 = (const float *)((char *)v21 - v15);
  uint64_t v17 = a2[4];
  v23[0] = a2[1];
  v23[1] = v17 * (void)v18;
  void v23[2] = v18;
  v23[3] = v17;
  uint64_t v19 = a3[3];
  v22[0] = a3[1];
  v22[1] = v19 * (void)v20;
  void v22[2] = v19;
  void v22[3] = v20;
  v21[0] = (float *)((char *)v21 - v15);
  v21[1] = (float *)v14;
  void v21[2] = v18;
  v21[3] = v20;
  DspLib::multiply((uint64_t)v23, (uint64_t)v22, v21);
  DspLib::add(*(float **)a1, *(void *)(a1 + 8), v16);
}

uint64_t DspLib::AlgorithmBase::AlgorithmBase(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &unk_1F14A87D8;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x40E5888000000000;
  *(unsigned char *)(a1 + 24) = 0;
  std::vector<float>::vector((void *)(a1 + 32), a3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 512;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 192) = a5;
  *(void *)(a1 + 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a6;
  *(void *)(a1 + 208) = a7;
  if (a3) {
    DspLib::copy(a2, a3, *(void **)(a1 + 32));
  }
  return a1;
}

void sub_1BB314D50(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::AlgorithmBase::initialize(DspLib::AlgorithmBase *this, int a2, double a3)
{
  int v5 = (unsigned __int16)a2;
  if ((unsigned __int16)a2 == 2)
  {
    int v6 = *((_DWORD *)this + 45);
    int v7 = 6619138;
    goto LABEL_5;
  }
  if ((unsigned __int16)a2 == 1)
  {
    int v6 = *((_DWORD *)this + 45);
    int v7 = 6553601;
LABEL_5:
    BOOL v8 = v6 != v7;
    *((_DWORD *)this + 45) = v7;
    goto LABEL_7;
  }
  BOOL v8 = *((_DWORD *)this + 45) != a2;
  *((_DWORD *)this + 45) = a2;
LABEL_7:
  int v9 = *((unsigned __int8 *)this + 8);
  long long v10 = (DspLib *)(*(uint64_t (**)(DspLib::AlgorithmBase *))(*(void *)this + 56))(this);
  *((_DWORD *)this + 44) = v5;
  if (a3 <= 0.0)
  {
    uint64_t v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v14, 58);
    uint64_t result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (v9) {
      int v11 = v8;
    }
    else {
      int v11 = 1;
    }
    if (v10 == v5) {
      int v12 = v11;
    }
    else {
      int v12 = 1;
    }
    uint64_t result = v12 | !DspLib::isEqual(v10, *((double *)this + 2), a3, 1.0e-20);
    *((double *)this + 2) = a3;
  }
  return result;
}

uint64_t DspLib::AlgorithmBase::setParameter(DspLib::AlgorithmBase *this, uint64_t a2, float a3)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  *(float *)(v3 + 4 * a2) = a3;
  return (*(uint64_t (**)(DspLib::AlgorithmBase *, uint64_t, uint64_t))(*(void *)this + 128))(this, v3, (v4 - v3) >> 2);
}

void *DspLib::AlgorithmBase::setParameters(void *result, void *__src, uint64_t a3, __n128 a4)
{
  uint64_t v4 = result;
  int v5 = (void *)result[4];
  if (v5 != __src)
  {
    uint64_t result = DspLib::copy(__src, a3, v5);
    __src = (void *)v4[4];
  }
  if ((void *)v4[5] != __src)
  {
    unint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      a4.n128_u32[0] = *((_DWORD *)__src + v6);
      uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, __n128))(*v4 + 104))(v4, v6, a4);
      __src = (void *)v4[4];
      uint64_t v9 = v4[5];
      float v10 = *((float *)__src + v6);
      if (v8 >= v10) {
        float v8 = *((float *)__src + v6);
      }
      if (v10 >= a4.n128_f32[0]) {
        a4.n128_f32[0] = v8;
      }
      *((_DWORD *)__src + v6) = a4.n128_u32[0];
      unint64_t v6 = v7++;
    }
    while (v6 < (v9 - (uint64_t)__src) >> 2);
  }
  return result;
}

uint64_t DspLib::AlgorithmBase::process(unsigned char *a1, long long *a2, long long *a3, void *a4)
{
  unint64_t v6 = a2;
  unsigned int v7 = a1;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *((void *)a2 + 1);
  if (v8 < (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 56))(a1))
  {
    long long v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    int v44 = 100;
LABEL_41:
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v43, v44);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (!*((void *)v6 + 1))
  {
    long long v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    int v44 = 101;
    goto LABEL_41;
  }
  unint64_t v9 = *((void *)a3 + 1);
  if (v9 < (*(unsigned int (**)(unsigned char *))(*(void *)v7 + 56))(v7))
  {
    long long v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    int v44 = 102;
    goto LABEL_41;
  }
  if (!*((void *)a3 + 1))
  {
    long long v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    int v44 = 103;
    goto LABEL_41;
  }
  if (!v7[8])
  {
    long long v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    int v44 = 104;
    goto LABEL_41;
  }
  unint64_t v10 = *((void *)v6 + 2);
  if (v10 <= (*(uint64_t (**)(unsigned char *))(*(void *)v7 + 216))(v7))
  {
    long long v61 = *v6;
    uint64_t v62 = *((void *)v6 + 2);
    long long v41 = *a3;
    uint64_t v60 = *((void *)a3 + 2);
    long long v42 = *((_OWORD *)a4 + 1);
    v58[0] = *(_OWORD *)a4;
    v58[1] = v42;
    long long v59 = v41;
    return (*(uint64_t (**)(unsigned char *, long long *, long long *, _OWORD *))(*(void *)v7 + 224))(v7, &v61, &v59, v58);
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v45 = a3;
    uint64_t v46 = v7;
    unint64_t v47 = v10;
    uint64_t v48 = v6;
    do
    {
      unint64_t v12 = v10 - v11;
      unint64_t v13 = (*(uint64_t (**)(unsigned char *))(*(void *)v7 + 216))(v7);
      int v50 = &v45;
      if (v13 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v13;
      }
      MEMORY[0x1F4188790](v13);
      uint64_t v17 = (char *)&v45 - v16;
      if (v15 >= 0x200) {
        size_t v18 = 512;
      }
      else {
        size_t v18 = v15;
      }
      bzero((char *)&v45 - v16, v18);
      unint64_t v20 = *((void *)v6 + 1);
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)v6;
        do
        {
          *(void *)&v17[8 * v21] = *(void *)(v22 + 8 * v21) + 4 * v11;
          ++v21;
        }
        while (v20 > v21);
      }
      unint64_t v23 = *((void *)a3 + 1);
      MEMORY[0x1F4188790](v19);
      float32_t v26 = (char *)&v45 - v25;
      if (v24 >= 0x200) {
        size_t v27 = 512;
      }
      else {
        size_t v27 = v24;
      }
      bzero((char *)&v45 - v25, v27);
      if (v23)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *(void *)a3;
        do
        {
          *(void *)&v26[8 * v29] = *(void *)(v30 + 8 * v29) + 4 * v11;
          ++v29;
        }
        while (v23 > v29);
      }
      if (*((unsigned char *)a4 + 24))
      {
        float32x2_t v49 = &v45;
        MEMORY[0x1F4188790](v28);
        float v33 = a4;
        float v34 = (char *)&v45 - v32;
        if (v31 >= 0x200) {
          size_t v35 = 512;
        }
        else {
          size_t v35 = v31;
        }
        bzero((char *)&v45 - v32, v35);
        uint64_t v36 = v33;
        unint64_t v37 = v33[1];
        if (v37)
        {
          uint64_t v38 = 0;
          uint64_t v39 = *v33;
          do
          {
            *(void *)&v34[8 * v38] = *(void *)(v39 + 8 * v38) + 4 * v11;
            ++v38;
          }
          while (v37 > v38);
        }
        v57[0] = v17;
        v57[1] = v20;
        v57[2] = v14;
        v56[0] = v26;
        v56[1] = v23;
        _OWORD v56[2] = v14;
        v54[0] = v34;
        v54[1] = v37;
        v54[2] = v14;
        char v55 = 1;
        unsigned int v7 = v46;
        uint64_t result = (*(uint64_t (**)(unsigned char *, void *, void *, void *))(*(void *)v46 + 224))(v46, v57, v56, v54);
        a4 = v36;
        a3 = v45;
      }
      else
      {
        v53[0] = v17;
        v53[1] = v20;
        void v53[2] = v14;
        v52[0] = v26;
        v52[1] = v23;
        v52[2] = v14;
        v51[0] = 0;
        v51[24] = 0;
        uint64_t result = (*(uint64_t (**)(unsigned char *, void *, void *, unsigned char *))(*(void *)v7 + 224))(v7, v53, v52, v51);
      }
      v11 += v14;
      unint64_t v10 = v47;
      unint64_t v6 = v48;
    }
    while (v11 < v47);
  }
  return result;
}

uint64_t DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(uint64_t a1, long long *a2)
{
  uint64_t v4 = DspLib::AlgorithmBase::AlgorithmBase(a1, 0, 0, 0, 0, 0, 0);
  *(void *)uint64_t v4 = &unk_1F14A88D8;
  uint64_t v5 = *((void *)a2 + 2);
  long long v6 = *a2;
  *(void *)(v4 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v4 + 216) = v6;
  *(void *)(v4 + 232) = v5;
  *(void *)(v4 + 248) = 0;
  *(void *)(v4 + 256) = 0;
  DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(v4 + 264, *(void *)(v4 + 216));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  if (*(void *)(v7 + 16)) {
    DspLib::algorithmFactory(**(void **)(v7 + 8));
  }
  return a1;
}

void sub_1BB315618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  unint64_t v8 = (void *)v6[34];
  if (v8)
  {
    v6[35] = v8;
    operator delete(v8);
  }
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *long long v6 = &unk_1F14A87D8;
  unint64_t v9 = (void *)v6[4];
  if (v9)
  {
    v6[5] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void DspLib::algorithmFactory(uint64_t a1)
{
  if (DspLib::operator==(a1, (uint64_t)&DspLib::PowerGuard::Parameters::kDefinition)) {
    operator new();
  }
  if (DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerSystemIDV1::Parameters::kDefinition)) {
    operator new();
  }
  if (DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerSystemIDV2::Parameters::kDefinition)) {
    operator new();
  }
  if (DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition)) {
    operator new();
  }
  abort();
}

void sub_1BB3157C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40CB77DE89);
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = DspLib::AlgorithmBase::AlgorithmBase(a1, 0, 0, 0, 0, 0, 0);
  *(void *)uint64_t v4 = &unk_1F14A88D8;
  *(void *)(v4 + 216) = a2;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(void *)(v4 + 256) = 0;
  DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(v4 + 264, a2);
  return a1;
}

void sub_1BB3158B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(void *)uint64_t v10 = &unk_1F14A87D8;
  unint64_t v12 = *(void **)(v10 + 32);
  if (v12)
  {
    *(void *)(v10 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmBaseNewParameters::initialize(uint64_t **this, uint64_t a2, double a3)
{
  int v6 = DspLib::AlgorithmBase::initialize((DspLib::AlgorithmBase *)this, a2, a3);
  unint64_t v8 = this[30];
  uint64_t v7 = this[31];
  while (v8 != v7)
  {
    uint64_t v9 = *v8++;
    v6 |= (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)v9 + 16))(v9, a2, a3);
  }
  return v6 & 1;
}

uint64_t DspLib::AlgorithmBaseNewParameters::parameters(DspLib::AlgorithmBaseNewParameters *this, int a2)
{
  if (!a2) {
    return (uint64_t)this + 264;
  }
  unint64_t v2 = (a2 - 1);
  uint64_t v3 = *((void *)this + 30);
  if (v2 >= (*((void *)this + 31) - v3) >> 3) {
    abort();
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 8 * v2) + 256);

  return v4();
}

uint64_t DspLib::AlgorithmBaseNewParameters::subAlgorithm(uint64_t this, int a2)
{
  if (a2)
  {
    unint64_t v2 = (a2 - 1);
    uint64_t v3 = *(void *)(this + 240);
    if (v2 >= (*(void *)(this + 248) - v3) >> 3) {
      abort();
    }
    return *(void *)(v3 + 8 * v2);
  }
  return this;
}

char *DspLib::AlgorithmBaseNewParameters::setParameters(char *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = (a3 - 1);
    uint64_t v4 = *((void *)this + 30);
    if (v3 >= (*((void *)this + 31) - v4) >> 3) {
      abort();
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v4 + 8 * v3) + 264);
    return (char *)v5();
  }
  else
  {
    *((void *)this + 33) = *(void *)a2;
    if (this + 264 != (char *)a2)
    {
      int v6 = this + 272;
      uint64_t v7 = *((void *)a2 + 2);
      unint64_t v8 = (v7 - *((void *)a2 + 1)) >> 2;
      uint64_t v9 = (char *)*((void *)a2 + 1);
      return std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v6, v9, v7, v8);
    }
  }
  return this;
}

float DspLib::AlgorithmBaseNewParameters::parameter(void *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = (a3 - 1);
    uint64_t v4 = a1[30];
    if (v3 >= (a1[31] - v4) >> 3) {
      abort();
    }
    uint64_t v5 = *(void (**)(void))(**(void **)(v4 + 8 * v3) + 272);
    v5();
  }
  else
  {
    uint64_t v7 = a1 + 33;
    return DspLib::AlgorithmParametersInstance::operator[](v7, a2);
  }
  return result;
}

uint64_t DspLib::AlgorithmBaseNewParameters::parameter(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 240))(this);
  uint64_t v6 = DspLib::parameterAddress(v4, a2);
  uint64_t v7 = *(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *, unint64_t, uint64_t))(*(void *)this
                                                                                                 + 272);

  return v7(this, __PAIR64__(v5, HIDWORD(v6)), v6);
}

uint64_t DspLib::AlgorithmBaseNewParameters::setParameter(uint64_t *a1, uint64_t a2, int a3, float a4)
{
  if (a3)
  {
    unint64_t v5 = (a3 - 1);
    uint64_t v6 = a1[30];
    if (v5 >= (a1[31] - v6) >> 3) {
      abort();
    }
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(v6 + 8 * v5) + 280);
    return v7();
  }
  else
  {
    DspLib::AlgorithmParametersInstance::setValue(a1 + 33, a2, a4);
    uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t *, void))(*a1 + 264);
    return v9(a1, a1 + 33, 0);
  }
}

uint64_t DspLib::AlgorithmBaseNewParameters::setParameter(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2, float a3)
{
  uint64_t v6 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 240))(this);
  uint64_t v8 = DspLib::parameterAddress(v6, a2);
  uint64_t v9 = *(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *, unint64_t, uint64_t, __n128))(*(void *)this + 280);
  v10.n128_f32[0] = a3;

  return v9(this, __PAIR64__(v7, HIDWORD(v8)), v8, v10);
}

uint64_t DspLib::AlgorithmBaseNewParameters::setMeteringIsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  unint64_t v2 = *(uint64_t **)(this + 240);
  unint64_t v3 = *(uint64_t **)(this + 248);
  if (v2 != v3)
  {
    uint64_t v4 = this;
    do
    {
      this = *v2;
      if (*v2) {
        this = (*(uint64_t (**)(uint64_t, void))(*(void *)this + 200))(this, *(unsigned __int8 *)(v4 + 24));
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t DspLib::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)a1;
  size_t v5 = strlen(*(const char **)a1);
  if (v5 != strlen(*(const char **)a2) || memcmp(v4, *(const void **)a2, v5)) {
    return 0;
  }
  unsigned int v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);

  return DspLib::operator==(v7, v8);
}

{
  const char *v4;
  size_t v5;
  void *v7;
  void *v8;
  uint64_t vars8;

  uint64_t v4 = *(const char **)a1;
  size_t v5 = strlen(*(const char **)a1);
  if (v5 != strlen(*(const char **)a2) || memcmp(v4, *(const void **)a2, v5)) {
    return 0;
  }
  unsigned int v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);

  return DspLib::operator==(v7, v8);
}

uint64_t DspLib::AlgorithmBaseNewParameters::uninitialize(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 240);
  unint64_t v2 = *(uint64_t **)(this + 248);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return this;
}

uint64_t DspLib::AlgorithmBaseNewParameters::reset(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 240);
  unint64_t v2 = *(uint64_t **)(this + 248);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v3);
  }
  return this;
}

uint64_t std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>,std::reverse_iterator<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>,std::reverse_iterator<std::unique_ptr<DspLib::DynamicFilter::Algorithm>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t DspLib::operator==(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (v2 != a2[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 1;
  LODWORD(v7) = 1;
  do
  {
    uint64_t v7 = v7 & DspLib::operator==(*a1 + 16 * v5, *a2 + 16 * v5);
    uint64_t v5 = v6;
  }
  while (a1[1] > (unint64_t)v6++);
  return v7;
}

{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  uint64_t v2 = a1[1];
  if (v2 != a2[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 1;
  LODWORD(v7) = 1;
  do
  {
    uint64_t v7 = v7 & DspLib::operator==(*a1 + 24 * v5, *a2 + 24 * v5);
    uint64_t v5 = v6;
  }
  while (a1[1] > (unint64_t)v6++);
  return v7;
}

BOOL DspLib::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)a1;
  size_t v5 = strlen(*(const char **)a1);
  if (v5 != strlen(*(const char **)a2)
    || memcmp(v4, *(const void **)a2, v5)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(float *)(a1 + 12) != *(float *)(a2 + 12))
  {
    return 0;
  }
  if (*(float *)(a1 + 20) == *(float *)(a2 + 20)) {
    return *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return 0;
}

float DspLib::MozartCompressor::Curve::setParameters(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 164);
  float v3 = *(float *)(a2 + 96);
  float v4 = *(float *)(a2 + 28);
  float v5 = *(float *)(a2 + 12);
  BOOL v6 = v5 < 0.5;
  if (v5 < 0.5) {
    float v4 = *(float *)(a2 + 96);
  }
  float v7 = *(float *)(a2 + 4);
  if (v6) {
    float v7 = *(float *)(a2 + 164);
  }
  float v8 = 1.0 / *(float *)(a2 + 8);
  float v9 = *(float *)(a2 + 48);
  float v10 = (float)(v7 * (float)(1.0 - v8)) - (float)(*(float *)(a2 + 44) * (float)(v9 - v8));
  float v11 = (float)((float)(v10 - (float)(v2 * (float)(1.0 - v8))) / (float)(v8 - v9)) - (float)(v10 / (float)(1.0 - v9));
  float v12 = v9 + -1.0;
  *(float *)(a1 + 12) = v12;
  float v13 = -(float)(v12 * *(float *)(a2 + 44));
  *(float *)(a1 + 24) = v13;
  *(float *)(a1 + 16) = *(float *)(a2 + 44) - v11;
  *(float *)(a1 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11 + *(float *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 44);
  float v14 = (float)(1.0 / *(float *)(a2 + 8)) + -1.0;
  *(float *)(a1 + 44) = v14;
  float v15 = (float)(1.0 / *(float *)(a2 + 8)) + -1.0;
  *(float *)(a1 + 48) = v15;
  float v16 = v14 * (float)(*(float *)(a2 + 44) - v7);
  *(float *)(a1 + 52) = v16;
  *(float *)(a1 + 56) = -(float)(v7 * v14);
  float v17 = -(float)(v2 * v15);
  *(float *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
  *(float *)(a1 + 64) = v7 - (float)(v2 - v7);
  *(float *)(a1 + 68) = v7 + (float)(v2 - v7);
  *(float *)(a1 + 36) = v2;
  *(float *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v11;
  *(float *)(a1 + 28) = (float)((float)(v17 - v16) - v13) / (float)(v12 - v15);
  *(float *)(a1 + 32) = v7;
  *(float *)(a1 + 76) = v3;
  *(float *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v4;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 92);
  float v18 = (float)(1.0 / *(float *)(a2 + 88)) + -1.0;
  *(float *)(a1 + 84) = v18;
  *(float *)(a1 + 88) = -(float)(v18 * v4);
  *(float *)(a1 + 92) = -(float)(v18 * v3);
  float result = *(float *)(a2 + 80);
  *(float *)(a1 + 72) = result;
  return result;
}

void DspLib::MozartCompressor::Curve::vectCurve(float *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      float v11 = *(float *)(a2 + 4 * i);
      float v12 = a1[2];
      if (v12 > v11)
      {
        float v14 = a1[14];
        float v15 = (float)(a1[13] + (float)(a1[3] * v11)) + a1[6];
        float v13 = a1[11];
      }
      else
      {
        float v13 = a1[11];
        float v14 = a1[14];
        if (a1[8] > v11) {
          float v15 = v14 + (float)(v13 * v11);
        }
        else {
          float v15 = 0.0;
        }
      }
      float v16 = a1[13];
      float v17 = a1[3];
      float v18 = a1[6];
      float v20 = DspLib::MozartCompressor::curveInterpolate((DspLib::MozartCompressor *)a1, a1[4], (float)(v16 + (float)(v17 * a1[4])) + v18, a1[5], v14 + (float)(v13 * a1[5]), v15, *(float *)(a2 + 4 * i));
      if (v20 < 0.0) {
        float v20 = 0.0;
      }
      float v21 = a1[18];
      if (v20 >= v21 || v12 <= v11) {
        float v23 = v20;
      }
      else {
        float v23 = a1[18];
      }
      float v25 = DspLib::MozartCompressor::curveInterpolate(v19, a1[16], v14 + (float)(v13 * a1[16]), a1[17], 0.0, v23, v11);
      float v26 = a1[7];
      float v27 = a1[12];
      float v28 = a1[15];
      if (v26 <= v11)
      {
        if (a1[9] > v11) {
          float v29 = v28 + (float)(v27 * v11);
        }
        else {
          float v29 = 0.0;
        }
      }
      else
      {
        float v29 = (float)(v16 + (float)(v17 * v11)) + v18;
      }
      float v30 = DspLib::MozartCompressor::curveInterpolate(v24, v26 - a1[10], v18 + (float)(v16 + (float)(v17 * (float)(v26 - a1[10]))), v26 + a1[10], v28 + (float)(v27 * (float)(v26 + a1[10])), v29, v11);
      float v31 = 0.0;
      if (v30 < 0.0) {
        float v30 = 0.0;
      }
      if (v30 < v21 && v12 > v11) {
        float v30 = v21;
      }
      float v33 = a1[20];
      if (v33 <= v11) {
        float v31 = a1[22] + (float)(a1[21] * v11);
      }
      float v34 = a1[24];
      float v35 = v33 + v34;
      float v36 = v33 - v34;
      if (v36 < v11 && v35 > v11)
      {
        float v39 = (float)((float)((float)(v36 + v35) * 0.5) - v11) / (float)(v36 - v35);
        if (v39 < 0.0) {
          float v39 = -v39;
        }
        float v38 = a1[22] + (float)(a1[21] * v35);
        float v31 = (float)((float)(1.0 - (float)(v39 + 0.5))
                    * (float)((float)(v38 - (float)((float)(v38 / (float)(v35 - v36)) * v35))
                            + (float)((float)(v38 / (float)(v35 - v36)) * v11)))
            + (float)((float)(v39 + 0.5) * v31);
      }
      float v40 = a1[19];
      float v41 = 0.0;
      if (v40 < v11) {
        float v41 = a1[23] + (float)(a1[21] * v11);
      }
      float v42 = v40 - v34;
      if ((float)(v40 - v34) < v11)
      {
        float v43 = v34 + v40;
        if (v43 > v11)
        {
          float v45 = (float)((float)((float)(v42 + v43) * 0.5) - v11) / (float)(v42 - v43);
          if (v45 < 0.0) {
            float v45 = -v45;
          }
          float v44 = a1[23] + (float)(a1[21] * v43);
          float v41 = (float)((float)(1.0 - (float)(v45 + 0.5))
                      * (float)((float)(v44 - (float)((float)(v44 / (float)(v43 - v42)) * v43))
                              + (float)((float)(v44 / (float)(v43 - v42)) * v11)))
              + (float)((float)(v45 + 0.5) * v41);
        }
      }
      if (a4) {
        *(float *)(*a4 + 4 * i) = a1[1] + (float)((float)(v25 + v31) * *a1);
      }
      if (a5) {
        *(float *)(*a5 + 4 * i) = a1[1] + (float)((float)(v30 + v41) * *a1);
      }
    }
  }
}

float *DspLib::MozartCompressor::AttackReleaseFilter::process(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  float v10 = result[7];
  if (a10)
  {
    uint64_t v11 = 0;
    int v12 = *(unsigned __int8 *)result;
    do
    {
      float v13 = *(float *)(a2 + 4 * v11);
      if (v13 < v10) {
        float v10 = v10 + (float)((float)(v13 - v10) * result[5]);
      }
      if (*(float *)(a4 + 4 * v11) > v10) {
        float v10 = v10 * (float)((float)(result[2] * *(float *)(a9 + 4 * v11)) + 1.0);
      }
      if (!v12) {
        float v10 = 1.0;
      }
      *(float *)(a6 + 4 * v11++) = v10;
    }
    while (a10 > v11);
  }
  result[7] = v10;
  return result;
}

void DspLib::MozartCompressor::Limiter::autoThresholdCompressorGain(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    uint64_t v12 = 0;
    float v13 = *(float *)(a2 + 60);
    float v14 = *(float *)(a2 + 48) + 1.0;
    float v15 = -v14;
    float v16 = 1.0 - v14;
    unsigned int v17 = 1;
    while (1)
    {
      float v18 = *(float *)(a5 + 4 * v12);
      float v20 = *(float *)(a1 + 44)
          + (float)((float)((float)(v13 + (float)(v15 * DspLib::amp2dBSafe((DspLib *)a1, v18, 0.000001))) / v16)
                  * *(float *)(a1 + 40));
      if (v20 < -40.0) {
        float v20 = -40.0;
      }
      float v21 = DspLib::dB2Amp(v19, -v20);
      float v22 = v21 * (float)(v18 * *(float *)(a3 + 4 * v12));
      float v23 = *(float *)(a1 + 4);
      if (v22 > v23) {
        break;
      }
      float v26 = *(float *)(a1 + 48) * v22;
      if (v26 < v23)
      {
        if (*(unsigned char *)a1)
        {
          float v24 = v26 - v23;
          float v25 = *(float *)(a1 + 16);
LABEL_10:
          float v23 = v23 + (float)(v24 * v25);
        }
        else
        {
          float v23 = v23 * (float)(1.0 - *(float *)(a1 + 16));
        }
        *(float *)(a1 + 4) = v23;
      }
      float v27 = v18 / *(float *)(a1 + 36);
      if (v27 < 1.0)
      {
        float v23 = v27 * v23;
        *(float *)(a1 + 4) = v23;
      }
      *(float *)(a1 + 36) = v18;
      if (v23 < 1.0)
      {
        *(_DWORD *)(a1 + 4) = 1065353216;
        float v23 = 1.0;
      }
      float v28 = *(float *)(a1 + 8);
      float v29 = (float)(3.0 - (float)(v28 * v23)) * 0.5;
      if (v29 < 0.01) {
        float v29 = 0.01;
      }
      float v30 = v28 * v29;
      *(float *)(a1 + 8) = v30;
      *(float *)(a7 + 4 * v12) = v18 * v30;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 8);
      uint64_t v12 = v17;
      if (a4 <= v17++)
      {
        *(float *)(a1 + 56) = v21;
        return;
      }
    }
    float v24 = v22 - v23;
    float v25 = *(float *)(a1 + 28);
    goto LABEL_10;
  }
}

void DspLib::MozartCompressor::Limiter::setParameters(uint64_t a1, uint64_t a2, float a3)
{
  *(_DWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 108);
  *(float *)(a1 + 48) = DspLib::dB2Amp((DspLib *)a1, *(float *)(a2 + 140));
  *(unsigned char *)a1 = *(float *)(a2 + 148) != 0.0;
  float v6 = expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 40) / 2.2) * a3) / 1000.0));
  *(float *)(a1 + 12) = v6;
  *(float *)(a1 + 16) = 1.0 - v6;
  float v7 = expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 56) / 2.2) * a3) / 1000.0));
  *(float *)(a1 + 24) = v7;
  *(float *)(a1 + 28) = 1.0 - v7;
}

double DspLib::MozartCompressor::Algorithm::Algorithm(DspLib::MozartCompressor::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::MozartCompressor::Parameters::kDefault, 0x35uLL, (uint64_t)&DspLib::MozartCompressor::Parameters::kMinimum, 53, (uint64_t)&DspLib::MozartCompressor::Parameters::kMaximum, 53);
  *(void *)uint64_t v1 = &unk_1F14A8A30;
  *(unsigned char *)(v1 + 288) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_DWORD *)(v1 + 392) = 1;
  *(void *)(v1 + 472) = 0;
  *(_OWORD *)(v1 + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(void *)(v1 + 496) = 1;
  *(_OWORD *)(v1 + 512) = 0u;
  *(unsigned char *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(void *)(v1 + 552) = 0x43C8000000000000;
  *(void *)(v1 + 656) = 0;
  *(_DWORD *)(v1 + 664) = 0;
  *(void *)(v1 + 688) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_DWORD *)(v1 + 592) = 0;
  *(_OWORD *)(v1 + 60DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_DWORD *)(v1 + 648) = 0;
  *(_DWORD *)(v1 + 696) = 730643660;
  *(unsigned char *)(v1 + 70DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v1 + 72DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(void *)(v1 + 744) = 0x43C8000000000000;
  *(void *)(v1 + 848) = 0;
  *(_DWORD *)(v1 + 856) = 0;
  *(void *)(v1 + 88DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 864) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_DWORD *)(v1 + 84DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 888) = 730643660;
  *(unsigned char *)(v1 + 892) = 0;
  *(void *)(v1 + 1208) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_DWORD *)(v1 + 1228) = 0;
  return result;
}

uint64_t DspLib::MozartCompressor::Algorithm::initialize(DspLib::MozartCompressor::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    unsigned int v5 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 28, v5);
    uint64_t v6 = *((void *)this + 28);
    uint64_t v7 = *((void *)this + 29);
    while (v6 != v7)
    {
      unint64_t v8 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v6, v8);
      v6 += 24;
    }
    unsigned int v9 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 31, v9);
    uint64_t v10 = *((void *)this + 31);
    uint64_t v11 = *((void *)this + 32);
    while (v10 != v11)
    {
      unint64_t v12 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v10, v12);
      v10 += 24;
    }
    vDSP_Length v13 = (*(unsigned int (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    double v14 = (*(double (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 288), v13, v14, 3uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 55, 1uLL);
    LODWORD(v13) = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    double v15 = (*(double (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 40))(this);
    DspLib::RMS::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 512), v13, v15);
    unsigned int v16 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    double v17 = (*(double (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 40))(this);
    DspLib::RMS::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 704), v16, v17);
    unsigned int v18 = (*(uint64_t (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 149, v18);
    *((unsigned char *)this + 8) = 1;
    *((_DWORD *)this + 126) = 1;
    *((_DWORD *)this + 297) = 0;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this + 512, *((_DWORD *)this + 307));
    DspLib::RMS::setExcludeChannelMask((uint64_t)this + 704, *((_DWORD *)this + 307));
    (*(void (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::MozartCompressor::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

uint64_t DspLib::MozartCompressor::Algorithm::setExcludeChannelMask(DspLib::MozartCompressor::Algorithm *this, unsigned int a2)
{
  *((_DWORD *)this + 307) = a2;
  DspLib::RMS::setExcludeChannelMask((uint64_t)this + 512, a2);
  unsigned int v3 = *((_DWORD *)this + 307);

  return DspLib::RMS::setExcludeChannelMask((uint64_t)this + 704, v3);
}

void DspLib::MozartCompressor::Algorithm::reset(DspLib::MozartCompressor::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    float v2 = DspLib::dB2Amp(this, *(float *)(*((void *)this + 4) + 80));
    float v4 = DspLib::dB2Amp(v3, *(float *)(*((void *)this + 4) + 32));
    *(void *)((char *)this + 90DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    float v5 = v2 * v4;
    *((float *)this + 279) = v5;
    *((float *)this + 278) = v5;
    *((float *)this + 275) = v5;
    *((_DWORD *)this + 229) = 814313567;
    *((_DWORD *)this + 232) = 814313567;
    *((_DWORD *)this + 235) = 814313567;
    *((_DWORD *)this + 241) = 0;
    *((unsigned char *)this + 968) = 0;
    *(void *)((char *)this + 972) = 0;
    *((unsigned char *)this + 984) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)this + 141) = _D0;
    *((_DWORD *)this + 29DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
    *((void *)this + 147) = 1065353216;
    *((_DWORD *)this + 296) = 1065353216;
    *((void *)this + 152) = _D0;
    *((_DWORD *)this + 306) = 0;
    DspLib::MozartCompressor::Algorithm::clearAudioBuffers(this);
    DspLib::RMS::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 512));
    DspLib::RMS::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 704));
    uint64_t v11 = (DspLib::CircularDelay *)*((void *)this + 149);
    unint64_t v12 = (DspLib::CircularDelay *)*((void *)this + 150);
    while (v11 != v12)
    {
      DspLib::CircularDelay::reset(v11);
      uint64_t v11 = (DspLib::CircularDelay *)((char *)v11 + 32);
    }
    *((_DWORD *)this + 125) = 0;
    uint64_t v13 = *((void *)this + 55);
    uint64_t v14 = *((void *)this + 56);
    while (v13 != v14)
    {
      uint64_t v15 = *(void *)(v13 + 8);
      if (*(void *)v13 != v15) {
        bzero(*(void **)v13, (v15 - *(void *)v13) & 0xFFFFFFFFFFFFFFFCLL);
      }
      v13 += 24;
    }
    *((_DWORD *)this + 116) = 0;
    DspLib::Biquad::SetupWrapper::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 336));
  }
  else
  {
    unsigned int v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v16, 373);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MozartCompressor::Algorithm::clearAudioBuffers(DspLib::MozartCompressor::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v1 = (DspLib::CircularDelay *)*((void *)this + 149);
    float v2 = (DspLib::CircularDelay *)*((void *)this + 150);
    while (v1 != v2)
    {
      DspLib::CircularDelay::reset(v1);
      uint64_t v1 = (DspLib::CircularDelay *)((char *)v1 + 32);
    }
  }
  else
  {
    unsigned int v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 414);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MozartCompressor::Algorithm::uninitialize(DspLib::MozartCompressor::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::RMS::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 512));
  DspLib::RMS::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 704));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 55, 0);
  *((_DWORD *)this + 125) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 288));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 149);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 28);

  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 31);
}

void DspLib::MozartCompressor::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  v53[1] = *MEMORY[0x1E4F143B8];
  float v5 = (DspLib *)DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(float *)(v6 + 64) <= 0.5 || *(float *)(v6 + 72) >= 0.5)
    {
      *(unsigned char *)(a1 + 1088) = 0;
      *(void *)(a1 + 988) = 0;
      *(float *)(a1 + 272) = DspLib::dB2Amp(v5, *(float *)(v6 + 36));
      float v9 = 1.0;
    }
    else
    {
      *(unsigned char *)(a1 + 1088) = 1;
      int v7 = *(_DWORD *)(v6 + 32);
      *(_DWORD *)(a1 + 988) = 1065353216;
      *(_DWORD *)(a1 + 992) = v7;
      *(float *)(a1 + 272) = DspLib::dB2Amp(v5, *(float *)v6);
      float v9 = DspLib::dB2Amp(v8, *(float *)(*(void *)(a1 + 32) + 184));
    }
    *(float *)(a1 + 276) = v9;
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(float *)(v10 + 68) <= 0.5 || (float v11 = *(float *)(v10 + 72), v11 >= 0.5))
    {
      *(unsigned char *)(a1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(_DWORD *)(a1 + 1176) = 1065353216;
      float v11 = *(float *)(v10 + 72);
    }
    else
    {
      *(unsigned char *)(a1 + 112DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
    }
    *(unsigned char *)(a1 + 216) = v11 < 0.5;
    vDSP_Length v12 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
    double v13 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 288), v12, v13, 3uLL);
    uint64_t v14 = *(void *)(a1 + 32);
    *(unsigned char *)(a1 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(*(float *)(v14 + 112) + 0.5) != 0;
    uint64_t v16 = *(unsigned int *)(v14 + 188);
    uint64_t v15 = (double *)*(unsigned int *)(v14 + 192);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, ((unint64_t)*(unsigned int *)(v14 + 156) << 32) | 1, (double *)0x3F11EB8500000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, 0x44D200000000000CuLL, (double *)0x40800000, 1, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, (v16 << 32) | 0xC, v15, 2, 0x41uLL);
    unsigned int v18 = *(float **)(a1 + 32);
    unsigned int v19 = vcvtas_u32_f32(v18[44]);
    if (v19 <= 1) {
      unsigned int v19 = 1;
    }
    unsigned int v20 = v19 + vcvtad_u64_f64(*(double *)(a1 + 16) * v18[15] / 1000.0) - 1;
    if (v20 <= 1) {
      unint64_t v21 = 1;
    }
    else {
      unint64_t v21 = v20;
    }
    if (*(_DWORD *)(a1 + 1188) != v21 || *(_DWORD *)(a1 + 504) != v19)
    {
      *(_DWORD *)(a1 + 1188) = v21;
      *(_DWORD *)(a1 + 504) = v19;
      float v22 = *(DspLib::CircularDelay **)(a1 + 1192);
      float v23 = *(DspLib::CircularDelay **)(a1 + 1200);
      if (v22 == v23) {
        goto LABEL_20;
      }
      do
      {
        DspLib::CircularDelay::setLength(v22, v21);
        float v22 = (DspLib::CircularDelay *)((char *)v22 + 32);
      }
      while (v22 != v23);
      unsigned int v19 = *(_DWORD *)(a1 + 504);
      if (v19)
      {
LABEL_20:
        *(_DWORD *)(a1 + 496) = v19;
        *(_DWORD *)(a1 + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      }
      MEMORY[0x1F4188790](v17);
      float v25 = (char *)v53 - v24;
      int v26 = *(_DWORD *)(a1 + 504);
      vDSP_Length v27 = *(unsigned int *)(a1 + 1188);
      uint64_t v28 = v27 + (2 * v26) - 2;
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs((float *)((char *)v53 - v24), v28, v26, v27);
      int v29 = *(_DWORD *)(a1 + 504);
      unint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 392), v29, v30 / *(unsigned int *)(a1 + 504) + 1);
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 392), (uint64_t)v25, v28);
      unsigned int v18 = *(float **)(a1 + 32);
    }
    float v31 = v18[1];
    if (v18[41] < v31) {
      v18[41] = v31;
    }
    DspLib::MozartCompressor::Curve::setParameters(a1 + 988, (uint64_t)v18);
    float v32 = *(double *)(a1 + 16);
    float v33 = v32 / (float)*(unsigned int *)(a1 + 504);
    uint64_t v34 = *(void *)(a1 + 32);
    float v35 = *(float *)(v34 + 20) / 2.2;
    float v36 = expf(-1.0 / (float)((float)(v33 * (float)(*(float *)(v34 + 16) / 2.2)) / 1000.0));
    *(float *)(a1 + 1104) = v36;
    *(float *)(a1 + 1108) = 1.0 - v36;
    float v37 = expf(-1.0 / (float)((float)(v33 * v35) / 1000.0));
    *(float *)(a1 + 1092) = v37;
    *(float *)(a1 + 1096) = 1.0 - v37;
    DspLib::MozartCompressor::Limiter::setParameters(a1 + 1124, v34, v33);
    unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    double v39 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    LODWORD(v4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_DWORD *)(a1 + 504);
    DspLib::RMS::initialize((DspLib::RMS *)(a1 + 704), v38, v39 / (double)v40);
    DspLib::RMS::setParameters(a1 + 704, 1, *(float *)(*(void *)(a1 + 32) + 84));
    uint64_t v41 = *(void *)(a1 + 32);
    *(unsigned char *)(a1 + 896) = *(float *)(v41 + 116) != 0.0;
    *(float *)(a1 + 952) = DspLib::dB2Power(v42, *(float *)(v41 + 132));
    *(float *)(a1 + 944) = DspLib::dB2Power(v43, *(float *)(*(void *)(a1 + 32) + 136));
    *(float *)(a1 + 948) = DspLib::dB2Power(v44, -*(float *)(*(void *)(a1 + 32) + 136));
    float v45 = *(float **)(a1 + 32);
    if (v45[3] < 0.5) {
      *(unsigned char *)(a1 + 896) = 0;
    }
    float v46 = expf(-1.0 / (float)((float)(v33 * v45[31]) / 1000.0));
    *(float *)(a1 + 908) = v46;
    *(float *)(a1 + 912) = 1.0 - v46;
    float v47 = expf(-1.0 / (float)((float)(v33 * v45[36]) / 1000.0));
    *(float *)(a1 + 924) = 1.0 - v47;
    *(float *)(a1 + 92DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(v47 * v47) * (float)(v47 * v47);
    float v48 = expf(-1.0 / (float)((float)(v33 * v45[32]) / 1000.0));
    *(float *)(a1 + 932) = v48;
    *(float *)(a1 + 936) = 1.0 - v48;
    *(_DWORD *)(a1 + 98DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)((float)((float)(v45[40] / 1000.0) * v33) + 0.5);
    *(float *)(a1 + 956) = DspLib::dB2Power(v49, v45[42] * 0.5);
    *(float *)(a1 + 96DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = DspLib::dB2Power(v50, *(float *)(*(void *)(a1 + 32) + 168) * -0.5);
    unsigned int v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    DspLib::RMS::initialize((DspLib::RMS *)(a1 + 512), v51, (double)v33);
    DspLib::RMS::setParameters(a1 + 512, *(float *)(*(void *)(a1 + 32) + 120) > 0.5, *(float *)(*(void *)(a1 + 32) + 24));
    if (*(float *)(*(void *)(a1 + 32) + 52) > 0.5)
    {
      float v52 = *(float *)(a1 + 1116) * *(float *)(a1 + 1176);
      *(float *)(a1 + 1216) = v52;
      *(float *)(a1 + 122DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v52;
    }
  }
}

void DspLib::MozartCompressor::Algorithm::processBlock(uint64_t a1, long long *a2, char **a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v6 = *((void *)a2 + 2);
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    long long v55 = *a2;
    uint64_t v56 = *((void *)a2 + 2);
    float v7 = *(float *)(a1 + 272);
    long long v53 = *(_OWORD *)a3;
    uint64_t v54 = a3[2];
    DspLib::multiply(&v55, &v53, v7);
    if (*(unsigned char *)(a1 + 216))
    {
      float v9 = *a3;
      MEMORY[0x1F4188790](v8);
      vDSP_Length v12 = (char *)&v44 - v11;
      if (v10 >= 0x200) {
        size_t v13 = 512;
      }
      else {
        size_t v13 = v10;
      }
      bzero((char *)&v44 - v11, v13);
      uint64_t v15 = *(uint64_t **)(a1 + 248);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 256) - (void)v15) >> 3);
      if (*(uint64_t **)(a1 + 256) != v15)
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = *v15;
          v15 += 3;
          *(void *)&v12[8 * v17++] = v18;
        }
        while (v16 > v17);
      }
      if (*(unsigned char *)(a1 + 280))
      {
        uint64_t v19 = (uint64_t)*a3;
        unint64_t v58 = v6;
        uint64_t v59 = v19;
        long long v60 = *(_OWORD *)(a3 + 1);
        *(void *)&long long v57 = v12;
        *((void *)&v57 + 1) = v16;
        DspLib::Biquad::Filter::process((void *)(a1 + 288), (long long *)&v59, &v57);
        float v9 = v12;
      }
      unsigned int v20 = *(uint64_t **)(a1 + 224);
      unint64_t v21 = *(uint64_t **)(a1 + 232);
      MEMORY[0x1F4188790](v14);
      uint64_t v24 = (char *)&v44 - v23;
      if (v22 >= 0x200) {
        size_t v25 = 512;
      }
      else {
        size_t v25 = v22;
      }
      bzero((char *)&v44 - v23, v25);
      if (v21 == v20) {
        goto LABEL_21;
      }
      uint64_t v26 = 0;
      vDSP_Length v27 = v20;
      do
      {
        uint64_t v28 = *v27;
        v27 += 3;
        *(void *)&v24[8 * v26++] = v28;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v21 - v20) > v26);
      if (v21 == v20) {
LABEL_21:
      }
        uint64_t v29 = 0;
      else {
        uint64_t v29 = (v20[1] - *v20) >> 2;
      }
      unsigned int v51 = v24;
      *(void *)&long long v52 = 0xAAAAAAAAAAAAAAABLL * (v21 - v20);
      *((void *)&v52 + 1) = v29;
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      v50[0] = v9;
      v50[1] = v30;
      v50[2] = v6;
      DspLib::DownSampler::process((unsigned int *)(a1 + 496), v50, &v51);
      vDSP_Length v32 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) <= 1uLL) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = *((void *)&v52 + 1);
      }
      unint64_t v34 = (4 * v33 + 15) & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x1F4188790](v31);
      float v35 = (char *)&v44 - v34;
      uint64_t v37 = *v36;
      *(void *)&long long v48 = v51;
      *((void *)&v48 + 1) = v37;
      vDSP_Length v49 = v32;
      DspLib::RMS::process(a1 + 512, &v48, (const float *)((char *)&v44 - v34), v32);
      MEMORY[0x1F4188790](v38);
      double v39 = (const float *)((char *)&v44 - v34);
      if (*(unsigned char *)(a1 + 1120))
      {
        float v46 = v51;
        long long v47 = v52;
        DspLib::RMS::process(a1 + 704, (long long *)&v46, v39, v32);
      }
      unint64_t v40 = **(const float ***)(a1 + 224);
      DspLib::MozartCompressor::Algorithm::calculateGain(a1, (uint64_t)v35, v32, (uint64_t)v39, v32, (uint64_t)v40, v6);
      uint64_t v41 = a3[1];
      unint64_t v42 = (unint64_t)a3[2];
      uint64_t v59 = (uint64_t)*a3;
      *(void *)&long long v60 = v41;
      *((void *)&v60 + 1) = v42;
      *(void *)&long long v57 = v59;
      *((void *)&v57 + 1) = v41;
      unint64_t v58 = v42;
      DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 1192), &v59, &v57);
      long long v44 = *(_OWORD *)a3;
      float v45 = a3[2];
      DspLib::multiply(&v44, v40);
    }
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v6, *(double *)(a1 + 16));
    }
  }
  else
  {
    float v43 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v43, 586);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MozartCompressor::Algorithm::calculateGain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  size_t v13 = (float *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v39 = v13;
  vDSP_Length v40 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v37 = (float *)((char *)&v36 - v17);
  vDSP_Length v38 = v16;
  MEMORY[0x1F4188790](v18);
  unint64_t v22 = (float *)((char *)&v36 - v21);
  if (v23) {
    *(_DWORD *)(a1 + 904) = *v19;
  }
  if (*(unsigned char *)(a1 + 896)) {
    DspLib::MozartCompressor::Algorithm::processGating((float *)a1, (uint64_t)v19, v20, (uint64_t)v13);
  }
  else {
    DspLib::copy(v19, v20, v13);
  }
  float v24 = *(float *)(*(void *)(a1 + 32) + 180);
  if (v24 <= 1.5)
  {
    if (v24 <= 0.5)
    {
      DspLib::fill(v22, a5, 1.0);
      if (!a5) {
        goto LABEL_16;
      }
    }
    else
    {
      size_t v25 = (DspLib *)DspLib::MozartCompressor::Algorithm::audioActivityDetector_1(a1, (uint64_t)v13, a5, (uint64_t)v22);
      if (!a5) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    size_t v25 = (DspLib *)DspLib::MozartCompressor::Algorithm::audioActivityDetector_2(a1, (uint64_t)v13, a5, (uint64_t)v22);
    if (!a5) {
      goto LABEL_16;
    }
  }
  uint64_t v26 = 0;
  unsigned int v27 = 1;
  do
  {
    v13[v26] = DspLib::power2dBSafe(v25, v13[v26], 1.0e-20) + -0.691;
    uint64_t v26 = v27;
  }
  while (a5 > v27++);
  *(float *)(a1 + 90DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *v13;
LABEL_16:
  DspLib::MozartCompressor::Curve::vectCurve((float *)(a1 + 988), (uint64_t)v13, a5, &v39, &v37);
  DspLib::dB2Amp(v39, v40);
  DspLib::dB2Amp(v37, v38);
  DspLib::MozartCompressor::AttackReleaseFilter::process((float *)(a1 + 1088), (uint64_t)v37, v38, (uint64_t)v39, v40, (uint64_t)v39, v40, v29, (uint64_t)v22, a5);
  if (*(unsigned char *)(a1 + 1120))
  {
    unsigned int v30 = v37;
    if (a5)
    {
      uint64_t v31 = 0;
      do
      {
        v30[v31] = sqrtf(*(float *)(a4 + 4 * v31)) * 0.92353;
        ++v31;
      }
      while (a5 > v31);
      vDSP_Length v32 = v39;
      *(float *)(a1 + 1184) = *v30 * *v39;
    }
    else
    {
      vDSP_Length v32 = v39;
    }
    DspLib::MozartCompressor::Limiter::autoThresholdCompressorGain(a1 + 1124, a1 + 988, (uint64_t)v30, v38, (uint64_t)v32, v40, (uint64_t)v32);
  }
  uint64_t v33 = v39;
  if (a5)
  {
    uint64_t v34 = 0;
    do
    {
      float v35 = v33[v34];
      if (v35 < *(float *)(a1 + 1216)) {
        *(float *)(a1 + 1216) = v35;
      }
      if (v35 > *(float *)(a1 + 1220)) {
        *(float *)(a1 + 122DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v35;
      }
      v33[v34] = *(float *)(a1 + 276) * v33[v34];
      ++v34;
    }
    while (a5 > v34);
  }
  float v43 = v33;
  v44[0] = a6;
  v42[0] = &v43;
  v42[1] = 1;
  v42[2] = v40;
  v41[0] = v44;
  v41[1] = 1;
  void v41[2] = a7;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 392), v42, v41);
}

float *DspLib::MozartCompressor::Algorithm::processGating(float *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    for (uint64_t i = 0; a3 > i; ++i)
    {
      float v5 = *(float *)(a2 + 4 * i);
      if (v5 > result[238])
      {
        float v6 = result[232];
        if (v5 > v6)
        {
          float v7 = result[231] + 1.0;
LABEL_8:
          result[232] = v6 * v7;
          goto LABEL_9;
        }
        if (result[235] < v6)
        {
          float v7 = result[230];
          goto LABEL_8;
        }
      }
LABEL_9:
      float v8 = (float)(v5 * result[228]) + (float)(result[229] * result[227]);
      result[229] = v8;
      if (v5 <= (float)(v8 * result[236]))
      {
        float v9 = result[235];
      }
      else
      {
        float v9 = result[235];
        if (v5 < (float)(result[232] * result[237]))
        {
          if (v5 <= v9) {
            float v10 = result[233];
          }
          else {
            float v10 = result[234] + 1.0;
          }
          float v9 = v9 * v10;
          result[235] = v9;
        }
      }
      *(float *)(a4 + 4 * i) = v9;
    }
  }
  return result;
}

uint64_t DspLib::MozartCompressor::Algorithm::audioActivityDetector_2(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    int v5 = *(_DWORD *)(result + 976);
    do
    {
      float v6 = *(float *)(a2 + 4 * v4);
      float v7 = *(float *)(result + 964);
      if (v6 <= (float)(v7 * *(float *)(result + 956)))
      {
        if (v6 < (float)(v7 * *(float *)(result + 960))) {
          *(float *)(result + 964) = v6;
        }
      }
      else
      {
        *(float *)(result + 964) = v6;
        v5 += *(_DWORD *)(result + 980);
        *(_DWORD *)(result + 976) = v5;
      }
      if (v5)
      {
        *(_DWORD *)(result + 976) = --v5;
      }
      else
      {
        int v5 = 0;
        if (v6 >= *(float *)(result + 952))
        {
          *(_DWORD *)(a4 + 4 * v4) = 0;
          goto LABEL_11;
        }
      }
      *(_DWORD *)(a4 + 4 * v4) = 1065353216;
      *(unsigned char *)(result + 984) = 1;
LABEL_11:
      ++v4;
    }
    while (a3 > v4);
  }
  return result;
}

uint64_t DspLib::MozartCompressor::Algorithm::audioActivityDetector_1(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    int v5 = *(unsigned __int8 *)(result + 968);
    int v6 = *(_DWORD *)(result + 972);
    while (1)
    {
      float v7 = *(float *)(a2 + 4 * v4);
      float v8 = *(float *)(result + 964);
      if (v7 > (float)(v8 * *(float *)(result + 956)))
      {
        *(float *)(result + 964) = v7;
        int v5 = 1;
        *(unsigned char *)(result + 968) = 1;
        float v8 = v7;
      }
      if (v7 < (float)(v8 * *(float *)(result + 960)))
      {
        int v5 = 0;
        *(float *)(result + 964) = v7;
        *(unsigned char *)(result + 968) = 0;
      }
      if (v6 != v5) {
        break;
      }
      int v9 = *(_DWORD *)(result + 976);
      if (v9)
      {
        int v10 = v9 - 1;
LABEL_11:
        *(_DWORD *)(result + 976) = v10;
        goto LABEL_12;
      }
      if (v7 >= *(float *)(result + 952))
      {
        *(_DWORD *)(result + 972) = v6;
        *(_DWORD *)(a4 + 4 * v4) = 0;
        goto LABEL_13;
      }
LABEL_12:
      *(_DWORD *)(result + 972) = v5;
      *(_DWORD *)(a4 + 4 * v4) = 1065353216;
      *(unsigned char *)(result + 984) = 1;
LABEL_13:
      ++v4;
      int v6 = v5;
      if (a3 <= v4) {
        return result;
      }
    }
    int v10 = *(_DWORD *)(result + 980);
    goto LABEL_11;
  }
  return result;
}

uint64_t DspLib::MozartCompressor::Algorithm::numStatus(DspLib::MozartCompressor::Algorithm *this)
{
  return 21;
}

void DspLib::MozartCompressor::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  if (*(unsigned char *)(a1 + 24))
  {
    *(float *)a2 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 1116), 0.000001);
    float v7 = DspLib::amp2dBSafe(v6, *(float *)(a1 + 1176), 0.000001);
    *(float *)(a2 + 4) = v7;
    *(float *)(a2 + 48) = v7 + *(float *)a2;
    *(float *)(a2 + 8) = -DspLib::amp2dBSafe(v8, *(float *)(a1 + 1180), 0.000001);
    *(float *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(DspLib::power2dBSafe(v9, *(float *)(a1 + 916), 1.0e-20) + -0.691)
                        + *(float *)(*(void *)(a1 + 32) + 136);
    *(float *)(a2 + 28) = (float)(DspLib::power2dBSafe(v10, *(float *)(a1 + 928), 1.0e-20) + -0.691)
                        - *(float *)(*(void *)(a1 + 32) + 136);
    *(float *)(a2 + 24) = DspLib::power2dBSafe(v11, *(float *)(a1 + 904), 1.0e-20) + -0.691;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 900);
    float v13 = 0.0;
    if (*(unsigned char *)(a1 + 984)) {
      float v13 = 1.0;
    }
    *(float *)(a2 + 52) = v13;
    *(unsigned char *)(a1 + 984) = 0;
    float v14 = DspLib::amp2dBSafe(v12, *(float *)(a1 + 1184), 0.000001);
    float v15 = *(float *)(a2 + 24);
    if (v14 > v15) {
      float v15 = v14;
    }
    *(float *)(a2 + 12) = v15;
    uint64_t v16 = *(unsigned int *)(a1 + 1224);
    *(float *)(a2 + 32) = v14;
    *(float *)(a2 + 36) = (float)v16;
    uint64_t v17 = *(const float **)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    *(float *)(a2 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17[v16];
    *(_DWORD *)(a1 + 1224) = ((int)v16 + 1) % 0x35u;
    *(float *)(a2 + 44) = DspLib::sum(v17, (v18 - (uint64_t)v17) >> 2);
    *(float *)(a2 + 56) = DspLib::amp2dBSafe(v19, *(float *)(a1 + 1216), 0.000001);
    float v21 = DspLib::amp2dBSafe(v20, *(float *)(a1 + 1220), 0.000001);
    float v22 = *(double *)(a1 + 16);
    *(float *)(a2 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v21;
    *(float *)(a2 + 64) = v22;
    *(void *)(a2 + 68) = 0;
    *(void *)(a2 + 76) = 0;
  }
}

double DspLib::MozartCompressor::Algorithm::latencySamples(DspLib::MozartCompressor::Algorithm *this, double a2)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 909);
    ++DspLibDebug::mAssertCounter;
  }
  LODWORD(a2) = *((_DWORD *)this + 297);
  return (double)*(unint64_t *)&a2;
}

void DspLib::MozartCompressor::Algorithm::~Algorithm(DspLib::MozartCompressor::Algorithm *this)
{
  DspLib::MozartCompressor::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  *(void *)this = &unk_1F14A8A30;
  uint64_t v11 = (void **)((char *)this + 1192);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 864);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  float v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    *((void *)this + 103) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 99);
  if (v3)
  {
    *((void *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 94);
  if (v4)
  {
    *((void *)this + 95) = v4;
    operator delete(v4);
  }
  uint64_t v11 = (void **)((char *)this + 672);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  int v5 = (void *)*((void *)this + 78);
  if (v5)
  {
    *((void *)this + 79) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 75);
  if (v6)
  {
    *((void *)this + 76) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 70);
  if (v7)
  {
    *((void *)this + 71) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 59);
  if (v8)
  {
    *((void *)this + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v8;
    operator delete(v8);
  }
  uint64_t v11 = (void **)((char *)this + 440);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 408);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 368);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MozartCompressor::Algorithm *)((char *)this + 336));
  int v9 = (void *)*((void *)this + 39);
  if (v9)
  {
    *((void *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    operator delete(v9);
  }
  uint64_t v11 = (void **)((char *)this + 248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)this = &unk_1F14A87D8;
  int v10 = (void *)*((void *)this + 4);
  if (v10)
  {
    *((void *)this + 5) = v10;
    operator delete(v10);
  }
}

float DspLib::MozartCompressor::curveInterpolate(DspLib::MozartCompressor *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  if (a7 <= a2 || a7 >= a4) {
    return a6;
  }
  float v9 = (float)((float)((float)(a2 + a4) * 0.5) - a7) / (float)(a2 - a4);
  if (v9 < 0.0) {
    float v9 = -v9;
  }
  return (float)((float)((float)(a5 - (float)((float)((float)(a5 - a3) / (float)(a4 - a2)) * a4))
                       + (float)((float)((float)(a5 - a3) / (float)(a4 - a2)) * a7))
               * (float)(1.0 - (float)(v9 + 0.5)))
       + (float)((float)(v9 + 0.5) * a6);
}

void DspLib::FIR::initialize(DspLib::FIR *a1, void *a2, unint64_t a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *((void *)a1 + 4) = a3;
  std::vector<float>::resize((uint64_t)a1 + 8, a3);
  float v7 = (void *)*((void *)a1 + 1);
  if (v7 != a2) {
    DspLib::copy(a2, a3, v7);
  }

  DspLib::FIR::configure(a1);
}

void DspLib::FIR::configure(DspLib::FIR *this)
{
  if (*(void *)this)
  {
    unint64_t v2 = *((void *)this + 4);
    if (v2)
    {
      unint64_t v3 = ((v2 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      uint64_t v4 = (char *)this + 8;
      uint64_t v5 = *((void *)this + 2) - *((void *)this + 1);
      if (v3 > v5 >> 2)
      {
        vDSP_Length v6 = v3 - (v5 >> 2);
        std::vector<float>::resize((uint64_t)v4, v3);
        DspLib::clear((float *)(*((void *)this + 2) - 4 * v6), v6);
        unint64_t v2 = *((void *)this + 4);
      }
      if (v2 >= 2) {
        unint64_t v7 = *(void *)this + ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2) - 1;
      }
      else {
        unint64_t v7 = 0;
      }
      DspLib::LinearDelay::setLength((float **)this + 5, v7);
    }
  }
}

void *DspLib::FIR::uninitialize(void *this)
{
  this[6] = this[5];
  this[2] = this[1];
  this[4] = 0;
  *this = 0;
  return this;
}

void DspLib::FIR::scaleHistory(float **this, float a2)
{
  if (*this)
  {
    if (this[4]) {
      DspLib::multiply(this[5], this[6] - this[5], a2);
    }
  }
}

void DspLib::FIR::process(uint64_t a1, float *a2, vDSP_Length __N, float *__C)
{
  if (__N)
  {
    if (*(void *)(a1 + 32) == 1)
    {
      float v7 = **(float **)(a1 + 8);
      DspLib::multiply(a2, __N, __C, v7);
    }
    else
    {
      DspLib::copy(a2, __N, (void *)(*(void *)(a1 + 48) - 4 * *(void *)a1));
      vDSP_conv(*(const float **)(a1 + 40), 1, (const float *)(*(void *)(a1 + 16) - 4), -1, __C, 1, __N, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      int v10 = *(char **)(a1 + 40);
      if (v8 == v9) {
        uint64_t v11 = ((uint64_t)(*(void *)(a1 + 48) - (void)v10) >> 2) - __N;
      }
      else {
        uint64_t v11 = ((v8 - v9) >> 2) - 1;
      }
      DspLib::copy(&v10[4 * __N], v11, v10);
    }
  }
}

void *DspLib::FastFIR::initialize(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  *a1 = a4;
  std::vector<float>::resize((uint64_t)(a1 + 1), a3);
  float v7 = (void *)a1[1];
  if (v7 != a2) {
    DspLib::copy(a2, a3, v7);
  }

  return DspLib::FastFIR::configure(a1);
}

void *DspLib::FastFIR::configure(void *this)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (*this)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[2] - this[1];
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = *this + (v2 >> 2) - 1;
      unint64_t v5 = 2 * v4;
      double v6 = (double)(unint64_t)v4;
      do
      {
        unint64_t v7 = qword_1BB8773C8[v3];
        double v8 = v6 / (double)v7;
        if (v8 <= 1.0) {
          char v9 = 0;
        }
        else {
          char v9 = vcvtpd_u64_f64(log2(v8));
        }
        unint64_t v10 = v7 << v9;
        if (v10 < v5) {
          unint64_t v5 = v10;
        }
        ++v3;
      }
      while (v3 != 4);
      uint64_t v11 = (void *)v1[17];
      if (!v11 || v5 != *v11) {
        operator new();
      }
      MEMORY[0x1F4188790](this);
      float v13 = (char *)v18 - v12;
      float v14 = (unint64_t **)(v1 + 17);
      vDSP_Length v15 = *(void *)v1[17];
      DspLib::clear((float *)((char *)v18 - v12), v15);
      if (*v1 == *(void *)v1[17]) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *v1;
      }
      DspLib::circularCopy((char *)v1[1], (uint64_t)(v1[2] - v1[1]) >> 2, v16, v13, v15);
      uint64_t v17 = (DSPSplitComplex *)(v1 + 4);
      DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*v14, (DSPComplex *)v13, v15, v17);
      return (void *)DspLib::operator*=(v17, 0.25 / (float)**v14);
    }
  }
  return this;
}

void sub_1BB318A7C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

void DspLib::FastFIR::process(uint64_t a1, char *a2, unint64_t a3, DSPComplex *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v7 = DspLib::LinearDelay::write((char **)(a1 + 112), a2, a3);
    uint64_t v8 = MEMORY[0x1F4188790](v7);
    MEMORY[0x1F4188790](v8);
    char v9 = *(void **)(a1 + 136);
    vDSP_Length v10 = *v9 >> 1;
    __C.unint64_t realp = v12;
    __C.imagp = (float *)((char *)&__C - v11);
    vDSP_Length v16 = v10;
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v9, *(DSPComplex **)(a1 + 112), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2, &__C);
    float v13 = *__C.realp;
    float v14 = *__C.imagp;
    vDSP_zvmul(&__C, 1, (const DSPSplitComplex *)(a1 + 32), 1, &__C, 1, v16, 1);
    *__C.unint64_t realp = v13 * **(float **)(a1 + 32);
    *__C.imagp = v14 * **(float **)(a1 + 40);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(*(void **)(a1 + 144), &__C, a4);
    if (a3 != *(void *)a1) {
      DspLib::copy((char *)a4 + 4 * *(void *)a1 + -4 * a3, a3, a4);
    }
  }
}

void *DspLib::circularCopy(char *a1, uint64_t a2, uint64_t a3, char *__dst, unint64_t a5)
{
  uint64_t v7 = a2;
  unint64_t v9 = a2 + a3 - a5;
  if (a2 + a3 <= a5)
  {
    vDSP_Length v10 = &__dst[4 * a3];
  }
  else
  {
    DspLib::copy(&a1[4 * a2 + -4 * v9], a2 + a3 - a5, __dst);
    vDSP_Length v10 = &__dst[4 * a5 + -4 * (v7 - v9)];
    v7 -= v9;
  }

  return DspLib::copy(a1, v7, v10);
}

void *DspLib::LowFlow::Algorithm::Algorithm(DspLib::LowFlow::Algorithm *this)
{
  uint64_t v1 = (_WORD *)((char *)this + 11920);
  double result = (void *)DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib7LowFlow10ParametersL8kDefaultE_, 0x38uLL, (uint64_t)&_ZGRN6DspLib7LowFlow10ParametersL8kMinimumE_, 56, (uint64_t)&_ZGRN6DspLib7LowFlow10ParametersL8kMaximumE_, 56);
  uint64_t v3 = 0;
  *double result = &unk_1F14A8B48;
  uint64_t v4 = 2;
  do
  {
    unint64_t v5 = &result[v3];
    *((_DWORD *)v5 + 56) = 0;
    *((unsigned char *)v5 + 228) = 0;
    v5[29] = 0;
    v5[30] = 0x42C8000000000000;
    *((unsigned char *)v5 + 256) = 0;
    double v6 = &result[v3 + 33];
    *((_DWORD *)v5 + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    v5[51] = 0;
    *((unsigned char *)v5 + 416) = 0;
    v5[566] = 0;
    *((_DWORD *)v5 + 1134) = 0;
    *((_OWORD *)v5 + 284) = 0uLL;
    *((_OWORD *)v5 + 285) = 0uLL;
    *((_OWORD *)v5 + 286) = 0uLL;
    *double v6 = 0uLL;
    v6[1] = 0uLL;
    _OWORD v6[2] = 0uLL;
    v6[3] = 0uLL;
    void v6[4] = 0uLL;
    v6[5] = 0uLL;
    v6[6] = 0uLL;
    v6[7] = 0uLL;
    v5[673] = 1065353216;
    *((_DWORD *)v5 + 1348) = 0;
    uint64_t v7 = &result[v3 + 673];
    *(void *)((char *)v7 + 12) = 0x5D00000055;
    *(_OWORD *)((char *)v7 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = xmmword_1BB873AB0;
    v3 += 702;
    *((unsigned char *)v7 + 44DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    --v4;
  }
  while (v4);
  uint64_t v8 = 0;
  unint64_t v9 = (char *)result + 11572;
  uint64_t v10 = 1460;
  do
  {
    uint64_t v11 = &result[v8];
    *((_DWORD *)v11 + 2864) = 0;
    v11[1433] = 0;
    uint64_t v12 = &v9[v8 * 8];
    *(v12 - 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    float v13 = &result[v10];
    *(_OWORD *)((char *)v13 - 172) = 0uLL;
    *(_OWORD *)(v13 - 23) = 0uLL;
    *(_OWORD *)(v13 - 25) = 0uLL;
    *((_OWORD *)v12 - 3) = xmmword_1BB8773F0;
    *((_OWORD *)v12 - 2) = xmmword_1BB877400;
    *((_OWORD *)v12 - 1) = xmmword_1BB877410;
    *(_OWORD *)&v9[v8 * 8] = xmmword_1BB877420;
    *(void *)((char *)v13 - 84) = 0;
    *(void *)((char *)v13 - 92) = 0;
    *(void *)((char *)v13 - 76) = 0;
    *((_OWORD *)v13 - 4) = 0uLL;
    *((_OWORD *)v13 - 3) = 0uLL;
    *((_OWORD *)v13 - 2) = 0uLL;
    *(v13 - 2) = 0;
    *((_DWORD *)v11 + 2918) = 1065353216;
    *((_WORD *)v12 + 52) = 1;
    v8 += 29;
    v10 += 29;
    *float v13 = 0;
  }
  while (v8 != 58);
  *uint64_t v1 = 0;
  result[1491] = 0;
  result[21] = 128;
  return result;
}

uint64_t DspLib::LowFlow::Algorithm::initialize(DspLib::LowFlow::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  int v5 = (*(uint64_t (**)(DspLib::LowFlow::Algorithm *))(*(void *)this + 56))(this);
  if (v4)
  {
    BOOL v6 = v5 == 4;
    DspLib::LowFlow::AnalysisPath::initialize((uint64_t)this + 224, 0, v6);
    DspLib::LowFlow::Mitigator::initialize((DspLib::LowFlow::Algorithm *)((char *)this + 11456), 0, v6);
    DspLib::LowFlow::AnalysisPath::initialize((uint64_t)this + 5840, 1, v6);
    DspLib::LowFlow::Mitigator::initialize((DspLib::LowFlow::Algorithm *)((char *)this + 11688), 1, v6);
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LowFlow::Algorithm *))(*(void *)this + 128))(this);
  }
  (*(void (**)(DspLib::LowFlow::Algorithm *))(*(void *)this + 136))(this);
  return v4;
}

void DspLib::LowFlow::Algorithm::uninitialize(DspLib::LowFlow::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  uint64_t v1 = (DspLib::LowFlow::Algorithm *)((char *)this + 224);
  uint64_t v2 = (char *)this + 11456;
  uint64_t v3 = 11232;
  do
  {
    DspLib::LowFlow::AnalysisPath::uninitialize(v1);
    uint64_t v1 = (DspLib::LowFlow::AnalysisPath *)((char *)v1 + 5616);
    v3 -= 5616;
  }
  while (v3);
  for (uint64_t i = 0; i != 464; i += 232)
    DspLib::LowFlow::Mitigator::uninitialize((DspLib::LowFlow::Mitigator *)&v2[i]);
}

void DspLib::LowFlow::Algorithm::reset(DspLib::LowFlow::Algorithm *this)
{
  uint64_t v1 = (DspLib::LowFlow::Algorithm *)((char *)this + 224);
  uint64_t v2 = (char *)this + 11456;
  uint64_t v3 = 11232;
  do
  {
    DspLib::LowFlow::AnalysisPath::reset(v1);
    uint64_t v1 = (DspLib::LowFlow::AnalysisPath *)((char *)v1 + 5616);
    v3 -= 5616;
  }
  while (v3);
  for (uint64_t i = 0; i != 464; i += 232)
    DspLib::LowFlow::Mitigator::reset((DspLib::LowFlow::Mitigator *)&v2[i]);
}

void DspLib::LowFlow::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  int v5 = (BOOL *)(a1 + 11920);
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  BOOL v6 = *(float **)(a1 + 32);
  float v7 = *v6;
  v5[1] = v6[1] >= 0.5;
  BOOL *v5 = v7 >= 0.5;
  LODWORD(v6) = vcvtas_u32_f32(v6[5]);
  *(void *)(a1 + 11928) = v6;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v8 = a1 + 224;
    uint64_t v9 = 11232;
    do
    {
      DspLib::LowFlow::AnalysisPath::setParameters(v8, *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, *(void *)(a1 + 11928) << 7);
      v8 += 5616;
      v9 -= 5616;
    }
    while (v9);
    for (uint64_t i = 0; i != 464; i += 232)
      DspLib::LowFlow::Mitigator::setParameters(a1 + 11456 + i, *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, *(void *)(a1 + 11928) << 7);
  }
}

void DspLib::LowFlow::Algorithm::processBlock(uint64_t a1, long long *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 11920))
  {
    if (*(void *)*a3 != **(void **)a2)
    {
      long long v34 = *a2;
      uint64_t v35 = *((void *)a2 + 2);
      long long v32 = *(_OWORD *)a3;
      uint64_t v33 = a3[2];
      DspLib::copy(&v34, &v32);
    }
  }
  else
  {
    uint64_t v29 = a1 + 11920;
    unint64_t v6 = *((void *)a2 + 2);
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v6)
    {
      int v8 = v7;
      unint64_t v9 = 0;
      uint64_t v10 = a1 + 224;
      unint64_t v27 = v6;
      uint64_t v28 = a3;
      uint64_t v26 = a1 + 5824;
      do
      {
        uint64_t v11 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        char v12 = 1;
        do
        {
          char v13 = v12;
          if (v8 == 4) {
            float v14 = (float *)(*(void *)(*(void *)a2 + ((8 * v11) | 0x10)) + 4 * v9);
          }
          else {
            float v14 = 0;
          }
          unint64_t v15 = DspLib::LowFlow::AnalysisPath::process((DspLib::LowFlow::AnalysisPath *)(v10 + 5616 * v11), (const float *)(*(void *)(*(void *)a2 + 8 * v11) + 4 * v9), v6 - v9, v14, *(unsigned __int8 *)(a1 + 24));
          char v12 = 0;
          *(&v30 + v11) = *(void *)(v10 + 5616 * v11 + 16);
          uint64_t v11 = 1;
        }
        while ((v13 & 1) != 0);
        vDSP_Length v16 = v15;
        if (*(unsigned char *)(v29 + 1))
        {
          float v17 = fmaxf(*((float *)&v30 + 1), 0.0);
          if (v17 < *((float *)&v31 + 1)) {
            float v17 = *((float *)&v31 + 1);
          }
          *((float *)&v30 + 1) = v17;
          *((float *)&v31 + 1) = v17;
        }
        uint64_t v18 = 0;
        char v19 = 1;
        unint64_t v20 = (unsigned __int8 *)v26;
        do
        {
          char v21 = v19;
          if (v8 == 4)
          {
            uint64_t v22 = (8 * v18) | 0x10;
            uint64_t v23 = (char *)(*(void *)(*(void *)a2 + v22) + 4 * v9);
            float v24 = (float *)(*(void *)(*v28 + v22) + 4 * v9);
          }
          else
          {
            uint64_t v23 = 0;
            float v24 = 0;
          }
          DspLib::LowFlow::Mitigator::process(a1 + 11456 + 232 * v18, (void *)(*(void *)(*(void *)a2 + 8 * v18) + 4 * v9), (int)(&v30 + v18), *(void *)(v10 + 5616 * v18 + 144), ((*(void *)(a1 + 11928) & 0x1FFFFFFFFFFFFFFLL) << 6) | 1, (float *)(*(void *)(*v28 + 8 * v18) + 4 * v9), v16, *v20 != 0, v23, v24, v25, v26);
          char v19 = 0;
          uint64_t v18 = 1;
        }
        while ((v21 & 1) != 0);
        unint64_t v9 = (v16 + v9);
        unint64_t v6 = v27;
      }
      while (v9 < v27);
    }
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), *((void *)a2 + 2), *(double *)(a1 + 16));
    }
  }
}

void DspLib::LowFlow::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  uint64_t v5 = a1 + 224;
  uint64_t v6 = a1 + 11456;
  uint64_t v7 = 11232;
  do
  {
    DspLib::LowFlow::AnalysisPath::status(v5, (uint64_t)a2);
    v5 += 5616;
    v7 -= 5616;
  }
  while (v7);
  for (uint64_t i = 0; i != 464; i += 232)
    DspLib::LowFlow::Mitigator::status(v6 + i, (uint64_t)a2);
}

uint64_t DspLib::LowFlow::Algorithm::setModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, _DWORD *a5)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
    return 1;
  }
  DspLib::LowFlow::AnalysisPath::setModelParameters(a1 + 224, a2, (const void *)a3, a4, a5, v10, v11, v12, v18, v20, v22, v24);
  if (a4) {
    vDSP_Length v16 = a4 + 4096;
  }
  else {
    vDSP_Length v16 = 0;
  }
  DspLib::LowFlow::AnalysisPath::setModelParameters(a1 + 5840, a2 + 36, (const void *)(a3 + 4096), v16, a5, v13, v14, v15, v19, v21, v23, v25);
  return 0;
}

void DspLib::LowFlow::Algorithm::~Algorithm(DspLib::LowFlow::Algorithm *this)
{
  DspLib::LowFlow::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  DspLib::LowFlow::AnalysisPath *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  uint64_t v2 = 0;
  *(void *)this = &unk_1F14A8B48;
  uint64_t v3 = (char *)this + 11848;
  do
  {
    uint64_t v4 = *(void *)((char *)this + v2 + 11912);
    *(void *)((char *)this + v2 + 11912) = 0;
    if (v4) {
      std::default_delete<DspLib::LinearDelay>::operator()[abi:ne180100]((uint64_t)&v3[v2 + 64], v4);
    }
    uint64_t v5 = *(void **)((char *)this + v2 + 11880);
    if (v5)
    {
      *(void *)((char *)this + v2 + 11888) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void *)((char *)this + v2 + 11872);
    *(void *)((char *)this + v2 + 11872) = 0;
    if (v6) {
      std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100]((uint64_t)&v3[v2 + 24], v6);
    }
    uint64_t v7 = *(void **)((char *)this + v2 + 11848);
    if (v7)
    {
      *(void *)((char *)this + v2 + 11856) = v7;
      operator delete(v7);
    }
    int v8 = *(void *)((char *)this + v2 + 11736);
    *(void *)((char *)this + v2 + 11736) = 0;
    if (v8) {
      std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100]((uint64_t)&v3[v2 - 112], v8);
    }
    unint64_t v9 = *(void **)((char *)this + v2 + 11712);
    if (v9)
    {
      *(void *)((char *)this + v2 + 1172DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
      operator delete(v9);
    }
    v2 -= 232;
  }
  while (v2 != -464);
  uint64_t v10 = (DspLib::LowFlow::Algorithm *)((char *)this + 5840);
  uint64_t v11 = -11232;
  do
  {
    DspLib::LowFlow::AnalysisPath::~AnalysisPath(v10);
    uint64_t v10 = (DspLib::LowFlow::AnalysisPath *)(v12 - 5616);
    v11 += 5616;
  }
  while (v11);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v13 = (void *)*((void *)this + 4);
  if (v13)
  {
    *((void *)this + 5) = v13;
    operator delete(v13);
  }
}

double DspLib::LowFlow::Algorithm::latencySamples(DspLib::LowFlow::Algorithm *this)
{
  return (double)(unint64_t)((*((void *)this + 1491) << 7) - 128);
}

uint64_t DspLib::LowFlow::Algorithm::numStatus(DspLib::LowFlow::Algorithm *this)
{
  return 1500;
}

void DspLib::LowFlow::AnalysisPath::~AnalysisPath(DspLib::LowFlow::AnalysisPath *this)
{
  uint64_t v2 = (void *)*((void *)this + 543);
  if (v2)
  {
    *((void *)this + 544) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 540);
  if (v3)
  {
    *((void *)this + 541) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 538);
  *((void *)this + 538) = 0;
  if (v4) {
    MEMORY[0x1C185D370](v4, 0x1000C40BAFFE814);
  }
  uint64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 136, v6);
  }
  uint64_t v7 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 128, v7);
  }
  int v8 = (void *)*((void *)this + 13);
  if (v8)
  {
    *((void *)this + 14) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LowFlow::AnalysisPath *)((char *)this + 80));
  unint64_t v9 = (void *)*((void *)this + 7);
  if (v9)
  {
    *((void *)this + 8) = v9;
    operator delete(v9);
  }
}

void DspLib::LoudspeakerManagerV1::PowerMeter::reset(DspLib::CircularDelay **this)
{
  DspLib::FIRDecimator::reset((DspLib::FIRDecimator *)this);
  uint64_t v2 = this[12];
  uint64_t v3 = this[13];
  while (v2 != v3)
  {
    *((_DWORD *)v2 + 8) = 0;
    DspLib::CircularDelay::reset(v2);
    uint64_t v2 = (DspLib::CircularDelay *)((char *)v2 + 40);
  }
  uint64_t v4 = this[17];
  uint64_t v5 = this[18];
  if (v4 != v5) {
    bzero(v4, ((v5 - v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  this[15] = 0;
}

void DspLib::LoudspeakerManagerV1::PowerMeter::setParameters(DspLib::LoudspeakerManagerV1::PowerMeter *this, float a2, float a3, unint64_t a4, double a5, const float *a6, unint64_t a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 80))
  {
    *((float *)this + 21) = a2;
    *((float *)this + 22) = a3;
  }
  std::vector<DspLib::MovingAverage>::__clear[abi:ne180100]((uint64_t *)this + 12);
  std::vector<DspLib::MovingAverage>::resize((uint64_t *)this + 12, a7);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 6, 2uLL);
  DspLib::FIRDecimator::setSrcParameters(this, 6uLL, a4);
  v16[0] = &unk_1F14A6C50;
  v16[1] = DspLib::makeChebychevWindow;
  void v16[3] = v16;
  DspLib::makeSincWindow(v17, 0x3DuLL, 6u, 0xAu, (uint64_t)v16, 0.6);
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v16);
  DspLib::FIRDecimator::setCoefficients((uint64_t)this, v17, 0x3DuLL);
  *((double *)this + 16) = a5 / (double)*(unint64_t *)this;
  if (a7)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      DspLib::MovingAverage::setLength((DspLib::MovingAverage *)(*((void *)this + 12) + 40 * v12), vcvtad_u64_f64(*((double *)this + 16) * a6[v12]));
      unint64_t v12 = v13++;
    }
    while (v12 < a7);
  }
  uint64_t v15 = *((void *)this + 17);
  uint64_t v14 = (char *)this + 136;
  *((void *)v14 + 1) = v15;
  std::vector<float>::resize((uint64_t)v14, a7);
}

void sub_1BB3199EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<DspLib::MovingAverage>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::MovingAverage>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 40);
        v8 -= 40;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 32) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

int32x2_t DspLib::LoudspeakerManagerV1::PowerMeter::setSpVACalibration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1;
  int32x2_t result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(a1 + 84) = result;
  return result;
}

void DspLib::LoudspeakerManagerV1::PowerMeter::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v28[2] = *MEMORY[0x1E4F143B8];
  if (*(double *)(a1 + 128) <= (double)*(unint64_t *)(a1 + 120))
  {
    uint64_t v8 = *(DspLib::MovingAverage **)(a1 + 96);
    unint64_t v9 = *(DspLib::MovingAverage **)(a1 + 104);
    while (v8 != v9)
    {
      DspLib::MovingAverage::recalculateState(v8);
      uint64_t v8 = (DspLib::MovingAverage *)((char *)v8 + 40);
    }
    *(void *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  }
  if (a3)
  {
    vDSP_Length v10 = *(void *)(a1 + 32);
    uint64_t v11 = MEMORY[0x1F4188790](a1);
    unsigned int v13 = (float *)((char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1F4188790](v11);
    uint64_t v15 = (float *)((char *)&v24[-1] - v14);
    v28[0] = a2;
    v28[1] = a4;
    v27[0] = v13;
    v27[1] = (char *)&v24[-1] - v14;
    v25[0] = v27;
    v25[1] = 2;
    vDSP_Length v26 = v10;
    v24[0] = v28;
    v24[1] = 2;
    _OWORD v24[2] = a3;
    DspLib::FIRDecimator::process((void *)a1, v24, v25);
    if (v26)
    {
      DspLib::multiply(v13, v10, v15);
      uint64_t v16 = *(void *)(a1 + 96);
      if (*(void *)(a1 + 104) != v16)
      {
        uint64_t v17 = 0;
        unsigned int v18 = 1;
        do
        {
          DspLib::MovingAverage::process((char **)(v16 + 40 * v17), v13, v10, (char *)v15, v10);
          float v19 = *(float *)(a1 + 84) * *(float *)(a1 + 88);
          float v20 = v19 * DspLib::maxv(v15, v10);
          uint64_t v21 = *(void *)(a1 + 136);
          if (*(float *)(v21 + 4 * v17) >= v20) {
            float v20 = *(float *)(v21 + 4 * v17);
          }
          *(float *)(v21 + 4 * v17) = v20;
          uint64_t v17 = v18;
          uint64_t v16 = *(void *)(a1 + 96);
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 104) - v16) >> 3) > v18++);
      }
      *(void *)(a1 + 120) += v26;
    }
  }
}

float DspLib::LoudspeakerManagerV1::PowerMeter::status(uint64_t a1, uint64_t a2)
{
  float v2 = 0.0;
  if (*(unsigned char *)(a1 + 80)) {
    float v2 = 1.0;
  }
  *(float *)(a2 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 84);
  float result = *(float *)(a1 + 88);
  *(float *)(a2 + 28) = result;
  return result;
}

void DspLib::LoudspeakerManagerV1::PowerMeter::getPeakPowers(uint64_t a1, void *__dst)
{
  DspLib::copy(*(void **)(a1 + 136), (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 2, __dst);
  uint64_t v3 = *(float **)(a1 + 136);
  vDSP_Length v4 = (uint64_t)(*(void *)(a1 + 144) - (void)v3) >> 2;

  DspLib::clear(v3, v4);
}

uint64_t std::vector<DspLib::MovingAverage>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(void *)(v7 + 32) = 0;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 36) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[40 * v11];
    uint64_t v15 = &v14[40 * a2];
    do
    {
      *((void *)v14 + 4) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 9) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    void v16[2] = v15;
    std::vector<DspLib::MovingAverage>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<DspLib::MovingAverage>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1BB319E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::MovingAverage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::MovingAverage>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>,std::reverse_iterator<DspLib::MovingAverage*>,std::reverse_iterator<DspLib::MovingAverage*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>,std::reverse_iterator<DspLib::MovingAverage*>,std::reverse_iterator<DspLib::MovingAverage*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      long long v8 = *(_OWORD *)(a3 - 5);
      a3 -= 5;
      *(_OWORD *)(v7 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v8;
      *(void *)(v7 - 24) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)(v7 - 16) = a3[3];
      *(void *)(v7 - 8) = a3[4];
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::MovingAverage>,std::reverse_iterator<DspLib::MovingAverage*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<DspLib::MovingAverage>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DspLib::MovingAverage>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 40);
    *(void *)(a1 + 16) = v2 - 40;
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

DspLib::MeisterStueck::Algorithm *DspLib::MeisterStueck::Algorithm::Algorithm(DspLib::MeisterStueck::Algorithm *this, char a2)
{
  uint64_t v4 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::MeisterStueck::Parameters::kDefault, 0x87uLL, (uint64_t)&DspLib::MeisterStueck::Parameters::kMinimum, 135, (uint64_t)&DspLib::MeisterStueck::Parameters::kMaximum, 135);
  *(_OWORD *)(v4 + 216) = 0u;
  *(void *)uint64_t v4 = &unk_1F14A8C60;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(unsigned char *)(v4 + 264) = 1;
  *(_DWORD *)(v4 + 268) = 1065353216;
  *(unsigned char *)(v4 + 272) = 0;
  *(_DWORD *)(v4 + 276) = 1065353216;
  *(unsigned char *)(v4 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(v4 + 284) = v5;
  *(unsigned char *)(v4 + 30DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(unsigned char *)(v4 + 328) = 0;
  *(_DWORD *)(v4 + 332) = 0;
  *(void *)(v4 + 304) = 0;
  *(void *)(v4 + 312) = 0;
  *(void *)(v4 + 32DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = &unk_1F14A84D8;
  *(unsigned char *)(v4 + 336) = 0;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 36DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  uint64_t v6 = v4 + 432;
  *(void *)(v4 + 424) = 0;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::FilterBank((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(v4 + 432));
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::FilterBank((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016));
  *((unsigned char *)this + 1896) = 0;
  *((unsigned char *)this + 1904) = 0;
  *((unsigned char *)this + 2048) = 0;
  *((_OWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 1737) = 0u;
  *((unsigned char *)this + 30DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setPhaseCompensationOnlyMode(v6, a2);
  return this;
}

void sub_1BB31A270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100](v15);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100](v10 + 1752);
  uint64_t v17 = 0;
  uint64_t v18 = v10 + 1744;
  while (1)
  {
    uint64_t v19 = *(void *)(v18 + v17);
    *(void *)(v18 + v17) = 0;
    if (v19) {
      MEMORY[0x1C185D370](v19, 0x1000C4027586B93);
    }
    v17 -= 8;
    if (v17 == -24)
    {
      DspLib::MeisterStueck::Kernel::ScratchArea::~ScratchArea(v14);
      uint64_t v20 = 0;
      uint64_t v21 = v10 + 1624;
      while (1)
      {
        uint64_t v22 = *(void *)(v21 + v20);
        *(void *)(v21 + v2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        v20 -= 8;
        if (v20 == -32)
        {
          DspLib::FourBandRandomOrderLrFilterBank::FilterBank::~FilterBank(v13);
          DspLib::FourBandRandomOrderLrFilterBank::FilterBank::~FilterBank(v12);
          DspLib::AnalyticSignalTransformAllpass::~AnalyticSignalTransformAllpass(v11);
          a10 = (void **)(v10 + 240);
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
          *(void *)uint64_t v10 = &unk_1F14A87D8;
          uint64_t v23 = *(void **)(v10 + 32);
          if (v23)
          {
            *(void *)(v10 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
            operator delete(v23);
          }
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

void DspLib::MeisterStueck::Kernel::ScratchArea::~ScratchArea(DspLib::MeisterStueck::Kernel::ScratchArea *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)this;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t DspLib::MeisterStueck::Algorithm::initialize(DspLib::MeisterStueck::Algorithm *this, int a2, double a3)
{
  uint64_t v5 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  uint64_t v6 = v5;
  if (a2 != 1 && *((unsigned char *)this + 300))
  {
    uint64_t v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueck.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v17, 23);
    ++DspLibDebug::mAssertCounter;
  }
  else if (v5)
  {
    unsigned int v7 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 27, v7);
    uint64_t v8 = *((void *)this + 27);
    uint64_t v9 = *((void *)this + 28);
    while (v8 != v9)
    {
      unint64_t v10 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v8, v10);
      v8 += 24;
    }
    unsigned int v11 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 30, v11);
    uint64_t v12 = *((void *)this + 30);
    uint64_t v13 = *((void *)this + 31);
    while (v12 != v13)
    {
      unint64_t v14 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 216))(this);
      std::vector<float>::resize(v12, v14);
      v12 += 24;
    }
    unsigned __int16 v15 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::initialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 432), v15, *((double *)this + 2));
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::MeisterStueck::Algorithm *, void))(*(void *)this + 200))(this, *((unsigned __int8 *)this + 24));
  }
  return v6;
}

void DspLib::MeisterStueck::Algorithm::uninitialize(DspLib::MeisterStueck::Algorithm *this)
{
  uint64_t v2 = 0;
  *((unsigned char *)this + 8) = 0;
  uint64_t v3 = (char *)this + 1600;
  uint64_t v4 = (uint64_t *)((char *)this + 1632);
  do
  {
    uint64_t v5 = *(void *)&v3[v2];
    *(void *)&v3[v2] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    v2 += 8;
  }
  while (v2 != 32);
  std::vector<std::vector<float>>::__clear[abi:ne180100](v4);
  *((void *)this + 208) = *((void *)this + 207);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 210);
  uint64_t v6 = 0;
  *((void *)this + 214) = *((void *)this + 213);
  unsigned int v7 = (char *)this + 1728;
  do
  {
    uint64_t v8 = *(void *)&v7[v6];
    *(void *)&v7[v6] = 0;
    if (v8) {
      MEMORY[0x1C185D370](v8, 0x1000C4027586B93);
    }
    v6 += 8;
  }
  while (v6 != 24);
  DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 320));
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::uninitialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 432));
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::uninitialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016));
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1752);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)this + 1904);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 27);

  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 30);
}

void DspLib::MeisterStueck::Algorithm::reset(DspLib::MeisterStueck::Algorithm *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 1600;
  do
  {
    uint64_t v4 = *(void *)&v3[v2];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
    }
    v2 += 8;
  }
  while (v2 != 32);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    uint64_t v6 = *(_DWORD **)((char *)this + i + 1728);
    if (v6)
    {
      _OWORD v6[2] = 0;
      void v6[4] = 0;
      v6[6] = 0;
    }
  }
  if (*((unsigned char *)this + 1896)) {
    DspLib::AudioMeter::Algorithm::reset((DspLib::MeisterStueck::Algorithm *)((char *)this + 1752));
  }
  if (*((unsigned char *)this + 2048)) {
    DspLib::AudioMeter::Algorithm::reset((DspLib::MeisterStueck::Algorithm *)((char *)this + 1904));
  }
  DspLib::AnalyticSignalTransformAllpass::reset((DspLib::MeisterStueck::Algorithm *)((char *)this + 320));
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset((DspLib::MeisterStueck::Algorithm *)((char *)this + 432));

  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016));
}

unsigned char *DspLib::MeisterStueck::Algorithm::setMeteringIsEnabled(unsigned char *this, int a2)
{
  this[24] = a2;
  if (!this[300])
  {
    uint64_t v2 = (uint64_t)this;
    if (a2)
    {
      uint64_t v9 = 0;
      long long v10 = DspLib::AudioMeter::Parameters::kDefault;
      long long v11 = unk_1BB8739E8;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)unint64_t v14 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>((uint64_t)(this + 1752), (uint64_t)&v9);
      uint64_t v19 = (void **)&v16 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v13 + 1))
      {
        v14[0] = *((void **)&v13 + 1);
        operator delete(*((void **)&v13 + 1));
      }
      uint64_t v19 = (void **)&v12;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v19);
      uint64_t v9 = 0;
      long long v10 = DspLib::AudioMeter::Parameters::kDefault;
      long long v11 = unk_1BB8739E8;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)unint64_t v14 = 0u;
      *(_OWORD *)__p_8 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      std::optional<DspLib::AudioMeter::Algorithm>::operator=[abi:ne180100]<DspLib::AudioMeter::Algorithm,void>(v2 + 1904, (uint64_t)&v9);
      uint64_t v19 = (void **)&v16 + 1;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (__p_8[0])
      {
        __p_8[1] = __p_8[0];
        operator delete(__p_8[0]);
      }
      if (*((void *)&v13 + 1))
      {
        v14[0] = *((void **)&v13 + 1);
        operator delete(*((void **)&v13 + 1));
      }
      uint64_t v19 = (void **)&v12;
      std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v19);
      unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      double v4 = (*(double (**)(uint64_t))(*(void *)v2 + 40))(v2);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(v2 + 1752), v3, v4);
      unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      double v6 = (*(double (**)(uint64_t))(*(void *)v2 + 40))(v2);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(v2 + 1904), v5, v6);
      uint64_t v7 = *(void *)(v2 + 32) + 488;
      DspLib::AudioMeter::Algorithm::setParameters(v2 + 1752, v7);
      DspLib::AudioMeter::Algorithm::setParameters(v2 + 1904, v7);
    }
    else
    {
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100]((uint64_t)(this + 1752));
      std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::reset[abi:ne180100](v2 + 1904);
    }
    for (uint64_t i = 0; i != 32; i += 8)
    {
      this = *(unsigned char **)(v2 + 1600 + i);
      if (this) {
        this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)this + 200))(this, *(unsigned __int8 *)(v2 + 24));
      }
    }
  }
  return this;
}

void sub_1BB31AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DspLib::AudioMeter::Algorithm::~Algorithm((DspLib::AudioMeter::Algorithm *)va);
  _Unwind_Resume(a1);
}

void DspLib::MeisterStueck::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (!*(unsigned char *)(a1 + 8)) {
    return;
  }
  unsigned int v5 = *(float **)(a1 + 32);
  if (vcvtas_u32_f32(v5[134]) >= 3 && v5[131] >= 0.5)
  {
    *(unsigned char *)(a1 + 264) = 0;
  }
  else
  {
    unsigned int v6 = vcvtas_u32_f32(v5[132]);
    if (!*(unsigned char *)(a1 + 264) && v6 != 2)
    {
      for (uint64_t i = 0; i != 24; i += 8)
      {
        uint64_t v8 = *(_DWORD **)(a1 + 1728 + i);
        if (v8)
        {
          _OWORD v8[2] = 0;
          v8[4] = 0;
          v8[6] = 0;
        }
      }
    }
    *(unsigned char *)(a1 + 264) = v6 != 2;
    if (v6 != 2)
    {
      if (!*(unsigned char *)(a1 + 328))
      {
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        DspLib::AnalyticSignalTransformAllpass::initialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 320), v9);
      }
      goto LABEL_16;
    }
  }
  DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 320));
LABEL_16:
  if (*(float *)(*(void *)(a1 + 32) + 472) >= 0.5)
  {
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 264))
    {
      if (*(unsigned char *)(a1 + 300)) {
        long long v10 = DspLib::MeisterStueck::Algorithm::processAnalyticalPhaseCompensator;
      }
      else {
        long long v10 = DspLib::MeisterStueck::Algorithm::processAnalyticalSignal;
      }
    }
    else if (*(unsigned char *)(a1 + 300))
    {
      long long v10 = DspLib::MeisterStueck::Algorithm::processRegularPhaseCompensator;
    }
    else
    {
      long long v10 = DspLib::MeisterStueck::Algorithm::processRegularSignal;
    }
    *(void *)(a1 + 304) = v10;
    *(void *)(a1 + 312) = 0;
  }
  DspLib::MeisterStueck::Algorithm::setFilterbankParameters((DspLib::MeisterStueck::Algorithm *)a1);
  DspLib::MeisterStueck::Algorithm::setInputAndOutputGainParameters(a1);
  DspLib::MeisterStueck::Algorithm::setSRCParameters(a1);
  DspLib::MeisterStueck::Algorithm::setCompressorKernelParameters((DspLib::MeisterStueck::Algorithm *)a1);

  DspLib::MeisterStueck::Algorithm::setOSCFilterParameters((DspLib::MeisterStueck::Algorithm *)a1, v11);
}

void DspLib::MeisterStueck::Algorithm::setFilterbankParameters(DspLib::MeisterStueck::Algorithm *this)
{
  uint64_t v2 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 120))(this);
  DspLib::copy((void *)(v2 + 404), 15, __dst);
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = *((void *)this + 4);
  do
  {
    if (*(float *)(v8 + v6 + 88) >= 0.5 && *(float *)(v8 + v6 + 24) >= 0.5) {
      v7 |= *((unsigned char *)this + 300) == 0;
    }
    v6 += 100;
  }
  while (v6 != 400);
  uint64_t v9 = v8 + 72;
  uint64_t v10 = 44;
  v3.n128_u32[0] = 0.5;
  v4.n128_u64[0] = 0;
  v5.n128_u32[0] = 1.0;
  do
  {
    if (*(float *)(v9 + 16) < 0.5) {
      float v11 = 0.0;
    }
    else {
      float v11 = 1.0;
    }
    *(float *)&__dst[v10] = v11;
    if (*(float *)(v9 + 16) >= 0.5)
    {
      if (((v7 & 1) != 0 && *(float *)(v9 - 48) < 0.5 || *(float *)v9 >= 0.5) && !*((unsigned char *)this + 300)) {
        int v12 = -1027080192;
      }
      else {
        int v12 = *(_DWORD *)(v9 + 20);
      }
      *(_DWORD *)&__dst[v10 - 20] = v12;
    }
    v10 += 4;
    v9 += 100;
  }
  while (v10 != 60);
  if (*((unsigned char *)this + 264))
  {
    if (!*((unsigned char *)this + 300))
    {
      unsigned __int16 v13 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *, __n128, __n128, __n128))(*(void *)this
                                                                                                  + 56))(this, v3, v4, v5);
      DspLib::FourBandRandomOrderLrFilterBank::FilterBank::initialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016), v13, *((double *)this + 2));
    }
  }
  else
  {
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::uninitialize((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016));
  }
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters((uint64_t)this + 432, __dst, 15);
  if (!*((unsigned char *)this + 300))
  {
    if (*((unsigned char *)this + 1040)) {
      DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters((uint64_t)this + 1016, __dst, 15);
    }
  }
}

uint64_t DspLib::MeisterStueck::Algorithm::setInputAndOutputGainParameters(uint64_t this)
{
  if (!*(unsigned char *)(this + 300))
  {
    uint64_t v1 = this;
    *(float *)(this + 268) = DspLib::dB2Amp((DspLib *)this, *(float *)(*(void *)(this + 32) + 400));
    BOOL isEqual = DspLib::isEqual(v2, *(float *)(*(void *)(v1 + 32) + 400), 0.0, 1.0e-20);
    *(unsigned char *)(v1 + 272) = !isEqual;
    *(float *)(v1 + 276) = DspLib::dB2Amp((DspLib *)isEqual, *(float *)(*(void *)(v1 + 32) + 480));
    this = DspLib::isEqual(v4, *(float *)(*(void *)(v1 + 32) + 480), 0.0, 1.0e-20);
    *(unsigned char *)(v1 + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = this ^ 1;
  }
  return this;
}

uint64_t DspLib::MeisterStueck::Algorithm::setSRCParameters(uint64_t this)
{
  if (!*(unsigned char *)(this + 300))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(float **)(this + 32);
    unsigned int v3 = vcvtas_u32_f32(v2[134]);
    unsigned int v4 = vcvtas_u32_f32(v2[132]);
    if (v3)
    {
      float v5 = 100.0;
      if (v4 != 1) {
        float v5 = 65.0;
      }
    }
    else if (v4 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)this + 104))(this, 130);
    }
    else
    {
      float v5 = v2[130];
    }
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    float v8 = fabsf(v5);
    uint64_t v9 = 88;
    do
    {
      unsigned int v10 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverOrder((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(v1 + 432), v6);
      unsigned int v11 = vcvtas_u32_f32((float)v10 * 0.5);
      if (v3) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v10;
      }
      float v13 = *(double *)(v1 + 16);
      float v14 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(v1 + 432), v6);
      *(float *)v15.i32 = exp2f(v8 / (float)((float)v12 * 6.0));
      unsigned int v16 = (float)(v13 / (float)(v14 * (float)(*(float *)v15.i32 + *(float *)v15.i32)));
      if (v16 <= 1) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = (float)(v13 / (float)(v14 * (float)(*(float *)v15.i32 + *(float *)v15.i32)));
      }
      v15.i32[0] = *(_DWORD *)(*(void *)(v1 + 32) + v9);
      if (*(float *)v15.i32 < 0.5
        || v16 < 2
        || (this = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(v1 + 432), v15), v7 >= (int)this - 1))
      {
        *(_DWORD *)(v1 + 4 * v6 + 284) = 1;
        uint64_t v21 = v1 + 8 * v6;
        this = *(void *)(v21 + 1728);
        *(void *)(v21 + 1728) = 0;
        if (this) {
          this = MEMORY[0x1C185D370](this, 0x1000C4027586B93);
        }
      }
      else
      {
        uint64_t v18 = v1 + 8 * v6;
        if (!*(void *)(v18 + 1728)) {
          operator new();
        }
        uint64_t v19 = v1 + 4 * v6;
        if (*(_DWORD *)(v19 + 284) != v17)
        {
          *(_DWORD *)(v19 + 284) = v17;
          uint64_t v20 = *(unsigned int **)(v18 + 1728);
          void v20[2] = 0;
          void v20[3] = v17;
          void v20[4] = 0;
          _DWORD v20[5] = v17;
          v20[6] = 0;
          *uint64_t v20 = v17;
          v20[1] = v17;
        }
      }
      if (*(float *)(*(void *)(v1 + 32) + v9) >= 0.5) {
        ++v7;
      }
      ++v6;
      v9 += 100;
    }
    while (v6 != 3);
  }
  return this;
}

void DspLib::MeisterStueck::Algorithm::setCompressorKernelParameters(DspLib::MeisterStueck::Algorithm *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 300))
  {
    DspLib::clear(v29, 4uLL);
    if (*(float *)(*((void *)this + 4) + 484) >= 0.5)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      float v6 = 0.0;
      unsigned int v7 = v29;
      uint64_t v8 = 88;
      float v9 = 0.0;
      do
      {
        v3.i32[0] = *(_DWORD *)(*((void *)this + 4) + v8);
        if (*(float *)v3.i32 >= 0.5)
        {
          float v10 = 20000.0;
          float v11 = 20000.0;
          if (v4 != 24)
          {
            float v10 = 20000.0;
            if (v5 < DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands((DspLib::MeisterStueck::Algorithm *)((char *)this + 432), v3)- 1)float v10 = *(float *)((char *)&DspLib::MeisterStueck::Parameters::kDefault + v4 + 404); {
            active = (DspLib *)DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands((DspLib::MeisterStueck::Algorithm *)((char *)this + 432), v12);
            }
            if (v5 >= (int)active - 1) {
              float v11 = 20000.0;
            }
            else {
              float v11 = *(float *)(*((void *)this + 4) + v4 + 404);
            }
          }
          *unsigned int v7 = DspLib::amp2dBSafe(active, (float)(v10 - v6) / (float)(v11 - v9), 0.000001);
          ++v5;
          float v6 = v10;
          float v9 = v11;
        }
        v4 += 8;
        ++v7;
        v8 += 100;
      }
      while (v4 != 32);
    }
    uint64_t v13 = 0;
    uint64_t v14 = -400;
    do
    {
      uint8x8_t v15 = (char *)this + 8 * v13;
      uint64_t v16 = *((void *)v15 + 200);
      if (*(float *)(*((void *)this + 4) + v14 + 488) >= 0.5)
      {
        if (!v16) {
          operator new();
        }
        uint64_t v17 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
        float v18 = *((double *)this + 2);
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v16 + 16))(v16, v17, roundf(v18 / (float)*((unsigned int *)this + v13 + 71)));
        uint64_t v19 = *((void *)this + 4);
        uint64_t v20 = v19 + v14;
        *(_DWORD *)(v20 + 464) = *(_DWORD *)(v19 + 476);
        *(float *)(v20 + 476) = v29[v13];
        int v21 = 0;
        if (vcvtas_u32_f32(*(float *)(v19 + 536)) <= 1) {
          float v22 = 0.0;
        }
        else {
          float v22 = 20.0;
        }
        *(float *)(v20 + 432) = v22;
        if (*(float *)(v19 + 524) >= 0.5) {
          int v21 = *(_DWORD *)(v19 + 464);
        }
        *(_DWORD *)(v20 + 408) = v21;
        if (*((unsigned char *)this + 264)) {
          float v23 = 1.0;
        }
        else {
          float v23 = 0.0;
        }
        *(float *)(v20 + 496) = v23;
        unsigned int v24 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
        unint64_t v25 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 216))(this);
        DspLib::MeisterStueck::Kernel::allocate((DspLib::MeisterStueck::Algorithm *)((char *)this + 1632), (DspLib::MeisterStueck::Kernel::ScratchArea *)v24, v25, *((unsigned char *)this + 264));
        uint64_t v26 = *((void *)v15 + 200);
        uint64_t v27 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 120))(this);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 128))(v26, v14 + v27 + 400, 25);
        if (*(float *)(*((void *)this + 4) + 472) >= 0.5) {
          (*(void (**)(void, void, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 0, 1.0);
        }
        if (!*((unsigned char *)this + 264))
        {
          if (v13 == 2)
          {
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 16, 4.0);
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 7, 2.0);
          }
          else if (v13 == 1)
          {
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 16, 2.0);
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 7, 8.0);
          }
          else if (v13)
          {
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 16, 4.0);
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 7, 1.0);
          }
          else
          {
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 16, 1.0);
            (*(void (**)(void, uint64_t, float))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 7, 10.0);
          }
          (*(void (**)(void, uint64_t, double))(**((void **)v15 + 200) + 112))(*((void *)v15 + 200), 5, 0.0);
        }
        (*(void (**)(void, void))(**((void **)v15 + 200) + 200))(*((void *)v15 + 200), *((unsigned __int8 *)this + 24));
      }
      else
      {
        *((void *)v15 + 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      ++v13;
      v14 += 100;
    }
    while (v14);
    if (*((unsigned char *)this + 264))
    {
      uint64_t v28 = *((void *)this + 203);
      if (v28) {
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v28 + 112))(v28, 5, 0.0);
      }
    }
  }
}

void sub_1BB31B7B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40643E07E7);
  _Unwind_Resume(a1);
}

void DspLib::MeisterStueck::Algorithm::setOSCFilterParameters(DspLib::MeisterStueck::Algorithm *this, uint8x8_t a2)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 300))
  {
    v16[0] = 0;
    v16[1] = 0;
    v15[0] = 0;
    v15[1] = 0;
    int active = DspLib::MeisterStueck::Algorithm::activeCrossOverFrequencies((uint64_t)this, (uint64_t)v16, a2, 4, (uint64_t)v15, 4uLL);
    double v12 = 0.0;
    uint64_t v13 = 0;
    int v14 = 0;
    v10[0] = *(float *)(*((void *)this + 4) + 532) >= 0.5;
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    int v11 = (*(uint64_t (**)(DspLib::MeisterStueck::Algorithm *))(*(void *)this + 56))(this);
    float v6 = (char *)this + 1600;
    for (uint64_t i = 88; *(float *)(*((void *)this + 4) + i) < 0.5; i += 100)
    {
LABEL_11:
      if (++v4 == 4) {
        return;
      }
    }
    float v8 = *((double *)this + 2);
    double v12 = (float)(v8 / (float)*(unsigned int *)&v6[4 * v4 - 1316]);
    int v14 = *((_DWORD *)v15 + v5);
    if (v5)
    {
      if (v5 == active)
      {
        LODWORD(v13) = *((_DWORD *)v16 + (active - 1));
        int v9 = 0;
LABEL_10:
        HIDWORD(v13) = v9;
        DspLib::MeisterStueck::OSCFilter::setParameters((DspLib::Biquad::ParametricFilter *)(*(void *)&v6[8 * v4] + 520), (uint64_t)v10);
        ++v5;
        goto LABEL_11;
      }
      LODWORD(v13) = *((_DWORD *)v16 + v5 - 1);
    }
    else
    {
      LODWORD(v13) = 0;
    }
    int v9 = *((_DWORD *)v16 + v5);
    goto LABEL_10;
  }
}

void DspLib::MeisterStueck::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  if (*(unsigned char *)(a1 + 8))
  {
    DspLib::clear(a2, __N);
    float v5 = (float)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v6 = *(double *)(a1 + 16);
    a2[1] = v5;
    a2[2] = v6;
    if (!*(unsigned char *)(a1 + 300))
    {
      uint64_t v7 = 0;
      float v8 = a2 + 67;
      do
      {
        uint64_t v9 = *(void *)(a1 + 1600 + v7);
        if (v9) {
          (*(void (**)(uint64_t, float *, uint64_t))(*(void *)v9 + 184))(v9, v8, 7);
        }
        v7 += 8;
        v8 += 7;
      }
      while (v7 != 32);
    }
    if (*(unsigned char *)(a1 + 24))
    {
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1752), a2 + 3, 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((void *)(a1 + 1904), a2 + 35, 0x20uLL);
    }
    else
    {
      DspLib::fill(a2 + 3, 0x20uLL, -100.0);
      DspLib::fill(a2 + 35, 0x20uLL, -100.0);
    }
  }
  else
  {
    float v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueck.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 171);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Algorithm::processBlock(uint64_t a1, long long *a2, long long *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = *((void *)a2 + 2);
    if (v3)
    {
      if (**(void **)a3 != **(void **)a2)
      {
        long long v20 = *a2;
        uint64_t v21 = *((void *)a2 + 2);
        long long v18 = *a3;
        uint64_t v19 = *((void *)a3 + 2);
        DspLib::copy(&v20, &v18);
      }
      if (*(unsigned char *)(a1 + 272))
      {
        long long v16 = *a3;
        uint64_t v17 = *((void *)a3 + 2);
        DspLib::multiply((uint64_t *)&v16, *(float *)(a1 + 268));
      }
      if (*(unsigned char *)(a1 + 24))
      {
        uint64_t v14 = *(void *)a3;
        long long v15 = *(long long *)((char *)a3 + 8);
        DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 1752), &v14);
        DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
      }
      unint64_t v6 = *(void *)(a1 + 304);
      uint64_t v7 = *(void *)(a1 + 312);
      if (v7 & 1 | v6)
      {
        float v8 = (void *)(a1 + (v7 >> 1));
        if (v7) {
          unint64_t v6 = *(void *)(*v8 + v6);
        }
        long long v12 = *a3;
        uint64_t v13 = *((void *)a3 + 2);
        ((void (*)(void *, long long *))v6)(v8, &v12);
      }
      if (*(unsigned char *)(a1 + 24))
      {
        DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v3, *(double *)(a1 + 16));
        uint64_t v10 = *(void *)a3;
        long long v11 = *(long long *)((char *)a3 + 8);
        DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 1904), &v10);
      }
    }
  }
  else
  {
    uint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueck.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 204);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Algorithm::processAnalyticalPhaseCompensator(void *a1, void *a2)
{
  void v34[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)a2[2];
  float v5 = (uint64_t *)a1[27];
  unint64_t v6 = (void *)a1[28];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v25 - v9;
  if (v8 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v8;
  }
  bzero((char *)&v25 - v9, v11);
  if (v6 != v5)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v5;
      v5 += 3;
      *(void *)&v10[8 * v13++] = v14;
    }
    while (v7 > v13);
  }
  long long v15 = (uint64_t *)a1[30];
  long long v16 = (void *)a1[31];
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v16 - v15);
  MEMORY[0x1F4188790](v12);
  long long v20 = (char *)&v25 - v19;
  if (v18 >= 0x200) {
    size_t v21 = 512;
  }
  else {
    size_t v21 = v18;
  }
  bzero((char *)&v25 - v19, v21);
  if (v16 != v15)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *v15;
      v15 += 3;
      *(void *)&v20[8 * v22++] = v23;
    }
    while (v17 > v22);
  }
  uint64_t v24 = a2[1];
  v34[0] = *a2;
  v34[1] = v24;
  v34[2] = v4;
  v33[0] = v10;
  v33[1] = v7;
  void v33[2] = v4;
  v32[0] = v20;
  v32[1] = (const void *)v17;
  v32[2] = v4;
  DspLib::AnalyticSignalTransformAllpass::process((uint64_t)(a1 + 40), (uint64_t)v34, (uint64_t)v33, v32);
  v31[0] = (uint64_t)v10;
  v31[1] = v7;
  void v31[2] = (uint64_t)v4;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v17;
  uint64_t v30 = v4;
  DspLib::add(v31, &v29);
  v28[0] = (uint64_t)v10;
  v28[1] = v7;
  void v28[2] = (uint64_t)v4;
  DspLib::multiply(v28, 0.70711);
  v27[0] = v10;
  v27[1] = v7;
  void v27[2] = v4;
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = a2[2];
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock((uint64_t)(a1 + 54), (uint64_t)v27, (uint64_t)&v25);
}

void DspLib::MeisterStueck::Algorithm::processAnalyticalSignal(uint64_t a1, void *a2)
{
  void v40[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)a2[2];
  float v5 = *(uint64_t **)(a1 + 216);
  unint64_t v6 = *(void **)(a1 + 224);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v25 - v9;
  if (v8 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v8;
  }
  bzero((char *)&v25 - v9, v11);
  if (v6 != v5)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v5;
      v5 += 3;
      *(void *)&v10[8 * v13++] = v14;
    }
    while (v7 > v13);
  }
  long long v15 = *(uint64_t **)(a1 + 240);
  long long v16 = *(void **)(a1 + 248);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v16 - v15);
  MEMORY[0x1F4188790](v12);
  long long v20 = (char *)&v25 - v19;
  if (v18 >= 0x200) {
    size_t v21 = 512;
  }
  else {
    size_t v21 = v18;
  }
  bzero((char *)&v25 - v19, v21);
  if (v16 != v15)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *v15;
      v15 += 3;
      *(void *)&v20[8 * v22++] = v23;
    }
    while (v17 > v22);
  }
  uint64_t v24 = a2[1];
  v40[0] = *a2;
  v40[1] = v24;
  v40[2] = v4;
  v39[0] = v10;
  v39[1] = v7;
  v39[2] = v4;
  v38[0] = v20;
  v38[1] = (const void *)v17;
  _DWORD v38[2] = v4;
  DspLib::AnalyticSignalTransformAllpass::process(a1 + 320, (uint64_t)v40, (uint64_t)v39, v38);
  if (*(unsigned char *)(a1 + 300))
  {
    v37[0] = (uint64_t)v10;
    v37[1] = v7;
    vDSP_Length v37[2] = (uint64_t)v4;
    *(void *)&long long v35 = v20;
    *((void *)&v35 + 1) = v17;
    uint64_t v36 = v4;
    DspLib::add(v37, &v35);
    v34[0] = (uint64_t)v10;
    v34[1] = v7;
    v34[2] = (uint64_t)v4;
    DspLib::multiply(v34, 0.70711);
    v33[0] = v10;
    v33[1] = v7;
    void v33[2] = v4;
    long long v31 = *(_OWORD *)a2;
    uint64_t v32 = a2[2];
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(a1 + 432, (uint64_t)v33, (uint64_t)&v31);
  }
  else
  {
    v30[0] = v10;
    v30[1] = v7;
    void v30[2] = v4;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::analyze(a1 + 432, v30);
    v29[0] = v20;
    v29[1] = v17;
    void v29[2] = v4;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::analyze(a1 + 1016, v29);
    DspLib::MeisterStueck::Algorithm::processAnalyticalCompressorKernels((uint64_t **)a1, (DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(a1 + 432), (DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(a1 + 1016), (uint64_t)v4);
    long long v27 = *(_OWORD *)a2;
    uint64_t v28 = a2[2];
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::synthesize(a1 + 432, &v27);
    if (*(unsigned char *)(a1 + 280))
    {
      long long v25 = *(_OWORD *)a2;
      uint64_t v26 = a2[2];
      DspLib::multiply((uint64_t *)&v25, *(float *)(a1 + 276));
    }
  }
}

void DspLib::MeisterStueck::Algorithm::processAnalyticalCompressorKernels(uint64_t **this, DspLib::FourBandRandomOrderLrFilterBank::FilterBank *a2, DspLib::FourBandRandomOrderLrFilterBank::FilterBank *a3, uint64_t a4)
{
  long long v47 = a2;
  uint64_t v48 = a4;
  float v5 = (DspLib::MeisterStueck::Algorithm *)this;
  void v65[3] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = this[27];
  unint64_t v6 = this[28];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
  MEMORY[0x1F4188790](this);
  size_t v11 = (char *)&v41 - v10;
  if (v9 >= 0x200) {
    size_t v12 = 512;
  }
  else {
    size_t v12 = v9;
  }
  bzero((char *)&v41 - v10, v12);
  if (v6 != v7)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *v7;
      v7 += 3;
      *(void *)&v11[8 * v14++] = v15;
    }
    while (v8 > v14);
  }
  long long v44 = v11;
  unint64_t v45 = v8;
  unint64_t v17 = (uint64_t *)*((void *)v5 + 30);
  long long v16 = (void *)*((void *)v5 + 31);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v16 - v17);
  MEMORY[0x1F4188790](v13);
  size_t v21 = (char *)&v41 - v20;
  if (v19 >= 0x200) {
    size_t v22 = 512;
  }
  else {
    size_t v22 = v19;
  }
  bzero((char *)&v41 - v20, v22);
  if (v16 != v17)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = *v17;
      v17 += 3;
      *(void *)&v21[8 * v23++] = v24;
    }
    while (v18 > v23);
  }
  unint64_t v42 = v21;
  unint64_t v43 = v18;
  unint64_t v25 = 0;
  uint64_t v26 = (void *)((char *)v5 + 1728);
  float v46 = (char *)v5 + 1632;
  uint64_t v27 = 88;
  uint64_t v41 = a3;
  do
  {
    if (*(float *)(*((void *)v5 + 4) + v27) >= 0.5)
    {
      unint64_t v49 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::buffer(v47, v25);
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 28) - *((void *)v5 + 27)) >> 3);
      unint64_t v29 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::buffer(a3, v25);
      uint64_t v30 = v5;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 31) - *((void *)v5 + 30)) >> 3);
      if (v25 <= 2 && (uint64_t v32 = *v26) != 0)
      {
        v62[0] = v44;
        v62[1] = v45;
        uint64_t v33 = v48;
        uint64_t v63 = v48;
        v61[0] = v42;
        v61[1] = v43;
        v61[2] = v48;
        v65[0] = v49;
        v65[1] = v28;
        v65[2] = v48;
        DspLib::DownSampler::process((unsigned int *)(v32 + 4), v65, v62);
        long long v34 = (unsigned int *)(v32 + 12);
        v64[0] = v29;
        v64[1] = v31;
        v64[2] = v33;
        uint64_t v36 = (uint64_t)v44;
        uint64_t v35 = v45;
        DspLib::DownSampler::process(v34, v64, v61);
        uint64_t v37 = v63;
        float v5 = v30;
        if (v63)
        {
          uint64_t v38 = *(v26 - 16);
          v60[0] = v36;
          v60[1] = v35;
          v60[2] = v63;
          v59[0] = v42;
          v59[1] = v43;
          v59[2] = v63;
          *(void *)&long long v57 = v36;
          *((void *)&v57 + 1) = v35;
          uint64_t v58 = v63;
          DspLib::MeisterStueck::Kernel::Algorithm::processBlock(v38, (uint64_t)v60, (uint64_t)v59, &v57);
          v56[0] = v36;
          v56[1] = v35;
          _OWORD v56[2] = v37;
          DspLib::multiply(v56, (float)*((unsigned int *)v30 + v25 + 71));
        }
        double v39 = (unsigned int *)(*v26 + 20);
        v55[0] = v36;
        v55[1] = v35;
        v55[2] = v37;
        v54[0] = v49;
        v54[1] = v28;
        v54[2] = v48;
        DspLib::UpSampler::process(v39, v55, v54);
        a3 = v41;
      }
      else
      {
        uint64_t v40 = *(v26 - 16);
        v53[0] = v49;
        v53[1] = v28;
        void v53[2] = v48;
        v52[0] = v29;
        v52[1] = v31;
        v52[2] = v48;
        *(void *)&long long v50 = v49;
        *((void *)&v50 + 1) = v28;
        uint64_t v51 = v48;
        DspLib::MeisterStueck::Kernel::Algorithm::processBlock(v40, (uint64_t)v53, (uint64_t)v52, &v50);
        float v5 = v30;
      }
    }
    ++v25;
    v27 += 100;
    ++v26;
  }
  while (v27 != 488);
}

void DspLib::MeisterStueck::Algorithm::processRegularPhaseCompensator(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  uint64_t v3 = *((void *)a2 + 2);
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(a1 + 432, (uint64_t *)&v2);
}

void DspLib::MeisterStueck::Algorithm::processRegularSignal(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(a1 + 432);
  uint64_t v9 = *a2;
  long long v10 = *(_OWORD *)(a2 + 1);
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::analyze(a1 + 432, &v9);
  DspLib::MeisterStueck::Algorithm::processRegularCompressorKernels((DspLib::MeisterStueck::Algorithm *)a1, v4, a2[2]);
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = a2[2];
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::synthesize((uint64_t)v4, &v7);
  if (*(unsigned char *)(a1 + 280))
  {
    long long v5 = *(_OWORD *)a2;
    uint64_t v6 = a2[2];
    DspLib::multiply((uint64_t *)&v5, *(float *)(a1 + 276));
  }
}

void DspLib::MeisterStueck::Algorithm::processRegularCompressorKernels(DspLib::MeisterStueck::Algorithm *this, DspLib::FourBandRandomOrderLrFilterBank::FilterBank *a2, uint64_t a3)
{
  unint64_t v25 = a2;
  uint64_t v37[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)*((void *)this + 27);
  long long v5 = (void *)*((void *)this + 28);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 - v6);
  MEMORY[0x1F4188790](this);
  long long v10 = (char *)&v25 - v9;
  if (v8 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v8;
  }
  bzero((char *)&v25 - v9, v11);
  if (v5 != v6)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *v6;
      v6 += 3;
      *(void *)&v10[8 * v12++] = v13;
    }
    while (v7 > v12);
  }
  unint64_t v14 = 0;
  uint64_t v15 = (void *)((char *)this + 1728);
  uint64_t v16 = 88;
  unint64_t v17 = v25;
  do
  {
    if (*(float *)(*((void *)this + 4) + v16) >= 0.5)
    {
      unint64_t v18 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::buffer(v17, v14);
      unint64_t v19 = v18;
      if (v14 <= 2 && (uint64_t v20 = *v15) != 0)
      {
        v35[0] = v10;
        v35[1] = v7;
        uint64_t v36 = a3;
        v37[0] = v18;
        v37[1] = v7;
        vDSP_Length v37[2] = a3;
        DspLib::DownSampler::process((unsigned int *)(v20 + 4), v37, v35);
        uint64_t v21 = v36;
        if (v36)
        {
          uint64_t v22 = *(v15 - 16);
          v34[0] = v10;
          v34[1] = v7;
          v34[2] = v36;
          *(void *)&long long v32 = v10;
          *((void *)&v32 + 1) = v7;
          uint64_t v33 = v36;
          DspLib::MeisterStueck::Kernel::Algorithm::processBlock(v22, (uint64_t)v34, &v32);
          v31[0] = (uint64_t)v10;
          v31[1] = v7;
          void v31[2] = v21;
          DspLib::multiply(v31, (float)*((unsigned int *)this + v14 + 71));
        }
        uint64_t v23 = (unsigned int *)(*v15 + 20);
        v30[0] = v10;
        v30[1] = v7;
        void v30[2] = v21;
        v29[0] = v19;
        v29[1] = v7;
        void v29[2] = a3;
        DspLib::UpSampler::process(v23, v30, v29);
        unint64_t v17 = v25;
      }
      else
      {
        uint64_t v24 = *(v15 - 16);
        v28[0] = v19;
        v28[1] = v7;
        void v28[2] = a3;
        *(void *)&long long v26 = v19;
        *((void *)&v26 + 1) = v7;
        uint64_t v27 = a3;
        DspLib::MeisterStueck::Kernel::Algorithm::processBlock(v24, (uint64_t)v28, &v26);
      }
    }
    ++v14;
    v16 += 100;
    ++v15;
  }
  while (v16 != 488);
}

uint64_t DspLib::MeisterStueck::Algorithm::activeCrossOverFrequencies(uint64_t a1, uint64_t a2, uint8x8_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  long long v10 = (DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(a1 + 432);
  if (DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)(a1 + 432), a3) < 2)return 0; {
  if (a6)
  }
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    do
    {
      if (*(float *)(*(void *)(a1 + 32) + 4 * (25 * v11 + 22)) >= 0.5)
      {
        *(float *)(a2 + 4 * v13) = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency(v10, v12);
        *(_DWORD *)(a5 + 4 * v13++) = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverOrder(v10, v12);
      }
      unsigned int v11 = ++v12;
    }
    while (a6 > v12);
  }
  else
  {
    unsigned int v13 = 0;
  }
  return v13 - 1;
}

void DspLib::MeisterStueck::Kernel::allocate(DspLib::MeisterStueck::Kernel *this, DspLib::MeisterStueck::Kernel::ScratchArea *a2, unint64_t a3, char a4)
{
  std::vector<std::vector<float>>::resize((uint64_t *)this, (unint64_t)a2);
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  while (v8 != v9)
  {
    std::vector<float>::resize(v8, a3);
    v8 += 24;
  }
  std::vector<void const*>::resize((uint64_t)this + 24, (unint64_t)a2);
  if (a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      *(void *)(*((void *)this + 3) + 8 * v10++) = *(void *)(*(void *)this + v11);
      v11 += 24;
    }
    while ((unint64_t)a2 > v10);
  }
  unsigned int v12 = (void *)((char *)this + 48);
  if (a4)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)this + 6, (unint64_t)a2);
    uint64_t v13 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 7);
    while (v13 != v14)
    {
      std::vector<float>::resize(v13, a3);
      v13 += 24;
    }
    uint64_t v15 = (void *)((char *)this + 72);
    std::vector<void const*>::resize((uint64_t)v15, (unint64_t)a2);
    if (a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        *(void *)(*v15 + 8 * v16++) = *(void *)(*v12 + v17);
        v17 += 24;
      }
      while ((unint64_t)a2 > v16);
    }
  }
  else
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 6);
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((void *)this + 9);
  }
}

void DspLib::MeisterStueck::Algorithm::~Algorithm(DspLib::MeisterStueck::Algorithm *this)
{
  DspLib::MeisterStueck::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t j;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  *(void *)this = &unk_1F14A8C60;
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1904);
  std::__optional_destruct_base<DspLib::AudioMeter::Algorithm,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1752);
  for (uint64_t i = 1744; i != 1720; i -= 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    *(void *)((char *)this + i) = 0;
    if (v3) {
      MEMORY[0x1C185D370](v3, 0x1000C4027586B93);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 213);
  if (v4)
  {
    *((void *)this + 214) = v4;
    operator delete(v4);
  }
  uint64_t v11 = (void **)((char *)this + 1680);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v5 = (void *)*((void *)this + 207);
  if (v5)
  {
    *((void *)this + 208) = v5;
    operator delete(v5);
  }
  uint64_t v11 = (void **)((char *)this + 1632);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  for (unint64_t j = 1624; j != 1592; j -= 8)
  {
    unint64_t v7 = *(void *)((char *)this + j);
    *(void *)((char *)this + j) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::~FilterBank((DspLib::MeisterStueck::Algorithm *)((char *)this + 1016));
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::~FilterBank((DspLib::MeisterStueck::Algorithm *)((char *)this + 432));
  *((void *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = &unk_1F14A84D8;
  uint64_t v8 = (void *)*((void *)this + 51);
  if (v8)
  {
    *((void *)this + 52) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Algorithm *)((char *)this + 384));
  uint64_t v9 = (void *)*((void *)this + 45);
  if (v9)
  {
    *((void *)this + 46) = v9;
    operator delete(v9);
  }
  uint64_t v11 = (void **)((char *)this + 240);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v10 = (void *)*((void *)this + 4);
  if (v10)
  {
    *((void *)this + 5) = v10;
    operator delete(v10);
  }
}

double DspLib::MeisterStueck::Algorithm::latencySamples(DspLib::MeisterStueck::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::MeisterStueck::Algorithm::numStatus(DspLib::MeisterStueck::Algorithm *this)
{
  return 95;
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::~FilterBank(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  uint64_t v8 = (void **)((char *)this + 560);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 536);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 512));
  long long v2 = (void *)*((void *)this + 61);
  if (v2)
  {
    *((void *)this + 62) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 440));
  uint64_t v3 = (void *)*((void *)this + 52);
  if (v3)
  {
    *((void *)this + 53) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 368));
  uint64_t v4 = (void *)*((void *)this + 43);
  if (v4)
  {
    *((void *)this + 44) = v4;
    operator delete(v4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 296));
  long long v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    *((void *)this + 35) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 224));
  uint64_t v6 = (void *)*((void *)this + 25);
  if (v6)
  {
    *((void *)this + 26) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void **)((char *)this + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void *DspLib::forAllParametersOf(void *result, uint64_t a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  if (*((_DWORD *)result + 4) != -1)
  {
    uint64_t v3 = result;
    unsigned int v4 = 0;
    do
    {
      if (v4) {
        long long v5 = (void **)(v3[1] + 8 * (v4 - 1));
      }
      else {
        long long v5 = (void **)v3;
      }
      uint64_t v6 = *v5;
      v8[0] = &unk_1F14A8D78;
      v8[1] = a2;
      _OWORD v8[2] = &v7;
      void v8[3] = v8;
      DspLib::forAllParametersOf(v6, (uint64_t)v8);
      uint64_t result = std::__function::__value_func<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100](v8);
      unsigned int v4 = v7 + 1;
      unsigned int v7 = v4;
    }
    while (v4 < *((_DWORD *)v3 + 4) + 1);
  }
  return result;
}

{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void v8[5];

  v8[4] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  long long v2 = (void *)result[1];
  if (v2[1])
  {
    unsigned int v4 = result;
    long long v5 = 0;
    do
    {
      uint64_t v6 = *v2 + 16 * v5;
      v8[0] = &unk_1F14A8E08;
      v8[1] = a2;
      _OWORD v8[2] = &v7;
      void v8[3] = v8;
      DspLib::forAllParametersOf(v6, (uint64_t)v8);
      uint64_t result = std::__function::__value_func<void ()(unsigned int,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100](v8);
      long long v5 = ++v7;
      long long v2 = (void *)v4[1];
    }
    while (v2[1] > (unint64_t)v7);
  }
  return result;
}

void sub_1BB31CDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BB31CED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned int,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t DspLib::forAllParametersOf(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)(result + 8) + 8))
  {
    uint64_t v3 = result;
    unsigned int v4 = 0;
    do
      uint64_t result = std::function<void ()(unsigned int,DspLib::ParameterDefinition)>::operator()(a2, v4++);
    while (*(void *)(*(void *)(v3 + 8) + 8) > (unint64_t)v4);
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,DspLib::ParameterDefinition)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t *DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = a2;
  unsigned int v4 = DspLib::groupOffset(a2, *(_DWORD *)(*(void *)(a2 + 8) + 8));
  std::vector<float>::resize((uint64_t)v3, v4);
  for (unint64_t i = 0; i < DspLib::groupOffset(*a1, *(_DWORD *)(*(void *)(*a1 + 8) + 8)); ++i)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = DspLib::parameterAddress(*a1, i);
    *(_DWORD *)(*v3 + 4 * i) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[](v6, v7) + 12);
  }
  return a1;
}

void sub_1BB31D06C(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::AlgorithmParametersInstance::group(DspLib::AlgorithmParametersInstance *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  return v2 + 4 * DspLib::groupOffset(*(void *)this, a2);
}

uint64_t DspLib::AlgorithmParametersInstance::setValue(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v5 = DspLib::groupOffset(*a1, a2) + HIDWORD(a2);

  return DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)a1, v5, a3);
}

float DspLib::AlgorithmParametersInstance::operator[](uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = DspLib::groupOffset(*a1, a2) + HIDWORD(a2);

  return DspLib::AlgorithmParametersInstance::operator[](a1, v3);
}

float DspLib::AlgorithmParametersInstance::operator[](uint64_t *a1, unsigned int a2)
{
  if (DspLib::groupOffset(*a1, *(_DWORD *)(*(void *)(*a1 + 8) + 8)) < a2) {
    abort();
  }
  return *(float *)(a1[1] + 4 * a2);
}

uint64_t DspLib::AlgorithmParametersInstance::setValue(DspLib::AlgorithmParametersInstance *this, uint64_t a2, float a3)
{
  unsigned int v4 = a2;
  uint64_t v6 = *(void *)this;
  uint64_t v7 = DspLib::parameterAddress(*(void *)this, a2);
  uint64_t result = DspLib::AlgorithmParametersDefinition::operator[](v6, v7);
  float v9 = *(float *)(result + 16);
  float v10 = *(float *)(result + 20);
  if (v10 >= a3) {
    float v10 = a3;
  }
  if (v9 <= a3) {
    float v9 = v10;
  }
  *(float *)(*((void *)this + 1) + 4 * v4) = v9;
  return result;
}

void std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::~__func()
{
}

__n128 std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14A8D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A8D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::operator()(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = **(unsigned int **)(a1 + 16);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  return std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>::operator()(v5, v6 | (v3 << 32), v4, (uint64_t)&v8);
}

uint64_t std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::SystemParametersDefinition const&,std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::target_type()
{
}

uint64_t std::function<void ()(DspLib::SystemParameterAddress,DspLib::ParameterDefinition)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = a2;
  int v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 48))(v4, &v6, a4);
}

void *std::__function::__value_func<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::~__func()
{
}

__n128 std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14A8E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A8E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::operator()(uint64_t a1, unsigned int *a2)
{
  return std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::operator()(*(void *)(a1 + 8), **(unsigned int **)(a1 + 16) | ((unint64_t)*a2 << 32));
}

uint64_t std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0,std::allocator<DspLib::forAllParametersOf(DspLib::AlgorithmParametersDefinition const&,std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>)::$_0>,void ()(unsigned int,DspLib::ParameterDefinition)>::target_type()
{
}

uint64_t std::function<void ()(DspLib::AlgorithmParameterAddress,DspLib::ParameterDefinition)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(unsigned int,DspLib::ParameterDefinition)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

int DspLib::LoudspeakerModel::Parameters::mode(float *a1)
{
  int result = vcvtas_u32_f32(fmaxf(*a1, 0.0));
  if (result >= 4)
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerModel/dsp/DspLibLoudspeakerModelParameters.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v2, 17);
    int result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerModel::Parameters::setBoundaries(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  for (uint64_t i = 0; i != 39; ++i)
  {
    int v9 = DspLib::LoudspeakerModel::Parameters::mode(a1);
    double v10 = DspLib::LoudspeakerModel::Parameters::min(v9, i);
    *(_DWORD *)(a3 + 4 * i) = LODWORD(v10);
    int v11 = DspLib::LoudspeakerModel::Parameters::mode(a1);
    double v12 = DspLib::LoudspeakerModel::Parameters::max(v11, i);
    *(_DWORD *)(a5 + 4 * i) = LODWORD(v12);
  }
}

double DspLib::LoudspeakerModel::Parameters::min(int a1, unsigned int a2)
{
  if (a2 > 4)
  {
    switch(a1)
    {
      case 1:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::ThieleSmall::kMinimum;
        goto LABEL_8;
      case 2:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::Sdomain_0::kMinimum;
        goto LABEL_8;
      case 3:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMinimum;
LABEL_8:
        LODWORD(result) = v4[v3];
        break;
      case 4:
        double result = 0.0;
        break;
      default:
        LODWORD(result) = -552941789;
        break;
    }
  }
  else
  {
    LODWORD(result) = *((_DWORD *)&DspLib::LoudspeakerModel::Parameters::kMinimum + a2);
  }
  return result;
}

double DspLib::LoudspeakerModel::Parameters::max(int a1, unsigned int a2)
{
  if (a2 > 4)
  {
    switch(a1)
    {
      case 1:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::ThieleSmall::kMaximum;
        goto LABEL_8;
      case 2:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::Sdomain_0::kMaximum;
        goto LABEL_8;
      case 3:
        unsigned int v3 = a2 - 5;
        uint64_t v4 = &DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMaximum;
LABEL_8:
        LODWORD(result) = v4[v3];
        break;
      case 4:
        double result = 0.0;
        break;
      default:
        LODWORD(result) = 1594541859;
        break;
    }
  }
  else
  {
    LODWORD(result) = *((_DWORD *)&DspLib::LoudspeakerModel::Parameters::kMaximum + a2);
  }
  return result;
}

void DspLib::ConstantQFilterbank::Analyzer::setParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, double a6)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v11 - *a1) >> 3) == a3)
  {
    uint64_t v12 = a1[1];
  }
  else
  {
    uint64_t v13 = a3;
    while (v11 != v12)
    {
      v11 -= 104;
      std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v11);
    }
    a1[1] = v12;
    if (v13)
    {
      uint64_t v14 = 0;
      do
      {
        unint64_t v15 = a1[1];
        unint64_t v16 = a1[2];
        if (v15 >= v16)
        {
          uint64_t v18 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v15 - *a1) >> 3);
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) > 0x276276276276276) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v16 - *a1) >> 3);
          if (2 * v20 > v19) {
            unint64_t v19 = 2 * v20;
          }
          if (v20 >= 0x13B13B13B13B13BLL) {
            unint64_t v21 = 0x276276276276276;
          }
          else {
            unint64_t v21 = v19;
          }
          v30[4] = a1 + 2;
          if (v21) {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>((uint64_t)(a1 + 2), v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[104 * v18];
          v30[0] = v22;
          v30[1] = v23;
          void v30[3] = &v22[104 * v21];
          *(_OWORD *)uint64_t v23 = 0u;
          *((_OWORD *)v23 + 1) = 0u;
          *((_OWORD *)v23 + 2) = 0u;
          *((_OWORD *)v23 + 3) = 0u;
          *((_OWORD *)v23 + 4) = 0u;
          *((_OWORD *)v23 + 5) = 0u;
          *((void *)v23 + 12) = 0;
          void v30[2] = v23 + 104;
          std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer(a1, v30);
          uint64_t v17 = a1[1];
          std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)v30);
        }
        else
        {
          *(void *)(v15 + 96) = 0;
          *(_OWORD *)(v15 + 64) = 0u;
          *(_OWORD *)(v15 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
          *(_OWORD *)(v15 + 48) = 0u;
          *(_OWORD *)unint64_t v15 = 0u;
          *(_OWORD *)(v15 + 16) = 0u;
          uint64_t v17 = v15 + 104;
          a1[1] = v15 + 104;
        }
        a1[1] = v17;
        DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(*a1 + v14), 1uLL, a6, 1uLL);
        v14 += 104;
        --v13;
      }
      while (v13);
      uint64_t v12 = a1[1];
    }
  }
  uint64_t v24 = *a1;
  if (v12 != *a1)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    double v27 = (double)vcvtad_u64_f64(a6);
    do
    {
      uint64_t v28 = *(unsigned int *)(a4 + 4 * v26);
      uint64_t v29 = *(unsigned int *)(a2 + 4 * v26);
      DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(v24 + v25), 1uLL, v27, 1uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ(*a1 + v25, (v29 << 32) | 0xE, (double *)(((unint64_t)LODWORD(a5) << 32) | v28), 0, 0x41uLL);
      ++v26;
      uint64_t v24 = *a1;
      v25 += 104;
    }
    while (v26 < 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3));
  }
}

void sub_1BB31DAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DspLib::ConstantQFilterbank::Modifier::initialize(DspLib::ConstantQFilterbank::Modifier *this, unsigned int a2, double a3)
{
  int v7 = *((unsigned __int8 *)this + 8);
  uint64_t v6 = (DspLib::ConstantQFilterbank::Modifier *)((char *)this + 8);
  if (!v7) {
    DspLib::Biquad::ParametricFilter::initialize(v6, a2, a3, 1uLL);
  }
  if (!*((unsigned char *)this + 216)) {
    DspLib::Biquad::ParametricFilter::initialize((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 216), a2, a3, 1uLL);
  }
  if (!*((unsigned char *)this + 320)) {
    DspLib::Biquad::ParametricFilter::initialize((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 320), a2, a3, 1uLL);
  }
  int v9 = *((unsigned __int8 *)this + 112);
  long long v8 = (DspLib::ConstantQFilterbank::Modifier *)((char *)this + 112);
  if (!v9)
  {
    DspLib::Biquad::ParametricFilter::initialize(v8, a2, a3, 1uLL);
  }
}

void DspLib::ConstantQFilterbank::Modifier::setMaxFrameSize(DspLib::ConstantQFilterbank::Modifier *this, unint64_t a2)
{
  std::vector<float>::resize((uint64_t)this + 432, a2);

  std::vector<float>::resize((uint64_t)this + 456, a2);
}

void DspLib::ConstantQFilterbank::Modifier::setSampleRate(DspLib::ConstantQFilterbank::Modifier *this, double a2)
{
  vDSP_Length v2 = *((void *)this + 7);
  if (!v2) {
    abort();
  }
  double v4 = (double)vcvtad_u64_f64(a2);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 8), v2, v4, *((void *)this + 8));
  DspLib::Biquad::ParametricFilter::initialize((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 216), v2, v4, *((void *)this + 34));
  vDSP_Length v5 = *((void *)this + 47);

  DspLib::Biquad::ParametricFilter::initialize((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 320), v2, v4, v5);
}

void DspLib::ConstantQFilterbank::Modifier::uninitialize(DspLib::ConstantQFilterbank::Modifier *this)
{
  *((void *)this + 55) = *((void *)this + 54);
  *((void *)this + 58) = *((void *)this + 57);
  *((void *)this + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 66);
  *((void *)this + 7DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((void *)this + 69);
}

void DspLib::ConstantQFilterbank::Modifier::reset(DspLib::ConstantQFilterbank::Modifier *this)
{
  *((unsigned char *)this + 424) = 0;
}

void DspLib::ConstantQFilterbank::Modifier::setParameters(uint64_t a1, void *a2, unint64_t a3, char a4, int a5, float a6)
{
  std::vector<float>::resize(a1 + 496, a3);
  DspLib::copy(a2, a3, *(void **)(a1 + 496));
  *(float *)(a1 + 488) = a6;
  DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 8), a3);
  DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 112), a3);
  if ((a4 & 1) == 0)
  {
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 216), a3);
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 320), a3);
  }
  *(unsigned char *)(a1 + 52DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a5;
  uint64_t v12 = (uint64_t *)(a1 + 528);
  if (a5)
  {
    std::vector<std::vector<float>>::resize(v12, *(void *)(a1 + 56));
    std::vector<void const*>::resize(a1 + 552, *(void *)(a1 + 56));
    uint64_t v13 = *(uint64_t **)(a1 + 528);
    uint64_t v14 = *(uint64_t **)(a1 + 536);
    if (v13 != v14)
    {
      unsigned int v15 = 0;
      do
      {
        std::vector<float>::resize((uint64_t)v13, (uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 2);
        uint64_t v16 = *v13;
        v13 += 3;
        *(void *)(*(void *)(a1 + 552) + 8 * v15++) = v16;
      }
      while (v13 != v14);
    }
  }
  else
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](v12);
    *(void *)(a1 + 56DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a1 + 552);
  }
}

void DspLib::ConstantQFilterbank::calculateCoefficients(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  if (v3)
  {
    uint64_t v6 = &v11[-2 * v3];
    do
    {
      *(_DWORD *)uint64_t v6 = 23;
      *(void *)((char *)v6 + 4) = 1148846080;
      *((_DWORD *)v6 + 3) = 1065353216;
      v6 += 2;
    }
    while (v6 != v11);
    uint64_t v7 = 0;
    long long v8 = &v11[-2 * v3 + 1];
    do
    {
      int v9 = *(_DWORD *)(v4 + 4 * v7);
      int v10 = *(_DWORD *)(v2 + 4 * v7);
      *(v8 - 2) = 28;
      *(v8 - 1) = v9;
      *long long v8 = v10;
      v8[1] = v5;
      ++v7;
      v8 += 4;
    }
    while (v3 > v7);
  }
  DspLib::Biquad::ParametricFilter::setParametricEQs(v1, (uint64_t)&v11[-2 * v3], v3);
}

void DspLib::ConstantQFilterbank::Modifier::apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v24[0] = a4;
  v24[1] = a5;
  uint64_t v23 = a6;
  v22[0] = a1;
  v22[1] = (uint64_t)&v23;
  void v22[2] = (uint64_t)v24;
  void v22[3] = a2;
  void v22[4] = a3;
  if (*(unsigned char *)(a1 + 520))
  {
    if (*(unsigned char *)(a1 + 424))
    {
      DspLib::ConstantQFilterbank::Modifier::apply(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::span<float const,18446744073709551615ul>,DspLib::Biquad::ParametricFilter const*)::$_0::operator()(v22, (DspLib::Biquad::ParametricFilter *)(a1 + 320));
      long long v27 = *(_OWORD *)a2;
      uint64_t v28 = *(void *)(a2 + 16);
      uint64_t v25 = *(void *)(a1 + 552);
      long long v26 = *(_OWORD *)(a2 + 8);
      DspLib::Biquad::Filter::process((void *)(a1 + 216), &v27, (long long *)&v25);
      char v9 = 0;
    }
    else
    {
      DspLib::ConstantQFilterbank::Modifier::apply(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::span<float const,18446744073709551615ul>,DspLib::Biquad::ParametricFilter const*)::$_0::operator()(v22, (DspLib::Biquad::ParametricFilter *)(a1 + 216));
      long long v27 = *(_OWORD *)a2;
      uint64_t v28 = *(void *)(a2 + 16);
      uint64_t v25 = *(void *)(a1 + 552);
      long long v26 = *(_OWORD *)(a2 + 8);
      DspLib::Biquad::Filter::process((void *)(a1 + 320), &v27, (long long *)&v25);
      char v9 = 1;
    }
    *(unsigned char *)(a1 + 424) = v9;
    vDSP_Length v10 = *(void *)(a2 + 16);
    if (v10 >= 2)
    {
      if (*(void *)(a1 + 480) != v10)
      {
        *(void *)(a1 + 48DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v10;
        DspLib::ramp(*(float **)(a1 + 432), v10, 0, 0.0, 1.0);
        DspLib::ramp(*(float **)(a1 + 456), *(void *)(a1 + 480), 0, 1.0, 0.0);
      }
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a3 + 16);
      DspLib::multiply(&v20, *(const float **)(a1 + 432));
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a2 + 16);
      v19[0] = *(void *)(a1 + 552);
      v19[1] = v11;
      void v19[2] = v12;
      DspLib::multiply(v19, *(const float **)(a1 + 456));
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = *(void *)(a3 + 16);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(a2 + 16);
      *(void *)&long long v15 = *(void *)(a1 + 552);
      *((void *)&v15 + 1) = v13;
      uint64_t v16 = v14;
      DspLib::add((uint64_t *)&v17, &v15);
    }
  }
  else
  {
    DspLib::ConstantQFilterbank::Modifier::apply(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::span<float const,18446744073709551615ul>,DspLib::Biquad::ParametricFilter const*)::$_0::operator()(v22, (DspLib::Biquad::ParametricFilter *)(a1 + 320));
  }
}

__n128 DspLib::ConstantQFilterbank::Modifier::apply(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::span<float const,18446744073709551615ul>,DspLib::Biquad::ParametricFilter const*)::$_0::operator()(uint64_t *a1, DspLib::Biquad::ParametricFilter *this)
{
  uint64_t v4 = *a1;
  DspLib::Biquad::ParametricFilter::setNumberOfStages(this, ((*(void *)(*a1 + 504) - *(void *)(*a1 + 496)) >> 2));
  if (!*(void *)a1[1]) {
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::Biquad::Filter *)(v4 + 112), this);
  }
  DspLib::ConstantQFilterbank::calculateCoefficients((uint64_t)this);
  if (*(void *)a1[1]) {
    int v5 = *(const DspLib::Biquad::Filter **)a1[1];
  }
  else {
    int v5 = (const DspLib::Biquad::Filter *)(v4 + 112);
  }
  DspLib::Biquad::Filter::copyStatesFrom(this, v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v12 = *(void *)(v6 + 16);
  long long v11 = *(_OWORD *)v6;
  long long v10 = *(_OWORD *)v7;
  uint64_t v8 = *(void *)(v7 + 16);
  long long v15 = v11;
  uint64_t v16 = v12;
  long long v13 = v10;
  uint64_t v14 = v8;
  DspLib::Biquad::Filter::process(this, &v15, &v13);
  return result;
}

void DspLib::ConstantQFilterbank::Modifier::setGains(uint64_t a1)
{
}

void *DspLib::XTC::FIRMatrix::initialize(DspLib::XTC::FIRMatrix *this, uint64_t a2)
{
  for (uint64_t i = 0; i != 608; i += 152)
    __n128 result = DspLib::FastFIR::initialize((DspLib::XTC::FIRMatrix *)((char *)this + i), *(void **)((char *)this + i + 8), (uint64_t)(*(void *)((char *)this + i + 16) - *(void *)((char *)this + i + 8)) >> 2, a2);
  return result;
}

void DspLib::XTC::FIRMatrix::reset(DspLib::XTC::FIRMatrix *this)
{
  for (uint64_t i = 0; i != 608; i += 152)
    DspLib::clear(*(float **)((char *)this + i + 112), (uint64_t)(*(void *)((char *)this + i + 120) - *(void *)((char *)this + i + 112)) >> 2);
}

void *DspLib::XTC::FIRMatrix::setCoefficients(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)(a1 + 608) = a2[2];
  if (v2 == 4)
  {
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      uint64_t v7 = 0;
      char v8 = v6;
      char v9 = 1;
      do
      {
        char v10 = v9;
        __n128 result = DspLib::FastFIR::initialize((void *)(a1 + 152 * (v7 | v5)), *(void **)(*a2 + 8 * (v7 | v5)), a2[2], *(void *)(a1 + 152 * (v7 | v5)));
        char v9 = 0;
        uint64_t v7 = 1;
      }
      while ((v10 & 1) != 0);
      char v6 = 0;
      uint64_t v5 = 2;
    }
    while ((v8 & 1) != 0);
  }
  else
  {
    uint64_t v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC_FIRMatrix.cpp");
    __n128 result = (void *)printf("DSP Sound assertion in %s at line %d\n", v12, 37);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::XTC::FIRMatrix::process(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 608))
  {
    long long v18 = *a3;
    uint64_t v19 = *((void *)a3 + 2);
    DspLib::clear(&v18);
    MEMORY[0x1F4188790](v7);
    char v9 = (DSPComplex *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v16 = v10;
    uint64_t v11 = 0;
    int v12 = 1;
    do
    {
      uint64_t v13 = 0;
      int v17 = v12;
      char v14 = 1;
      do
      {
        char v15 = v14;
        DspLib::FastFIR::process(a1 + 152 * ((2 * v11) | v13), *(char **)(*a2 + 8 * v13), a2[2], v9);
        DspLib::add(*(float **)(*(void *)a3 + 8 * v11), *((void *)a3 + 2), (const float *)v9);
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while ((v15 & 1) != 0);
      int v12 = 0;
      uint64_t v11 = 1;
    }
    while ((v17 & 1) != 0);
  }
  else
  {
    vDSP_Length v6 = *((void *)a3 + 2);
    long long v20 = *(_OWORD *)a2;
    uint64_t v21 = a2[2];
    DspLib::sum((uint64_t)&v20, **(float ***)a3, v6);
    long long v20 = *(_OWORD *)a2;
    uint64_t v21 = a2[2];
    DspLib::sum((uint64_t)&v20, *(float **)(*(void *)a3 + 8), *((void *)a3 + 2));
  }
}

double DspLib::PowerGuard::PowerAnalyzerBase::initialize(DspLib::PowerGuard::PowerAnalyzerBase *this, double a2)
{
  LODWORD(v2) = 4 * vcvtad_u64_f64(a2 / 1500.0 * 0.25);
  unsigned int v3 = 5 * vcvtad_u64_f64(a2 / 1500.0 / 5.0);
  uint64_t v4 = 4;
  if (vabdd_f64(a2 / 1500.0, (double)v2) <= vabdd_f64(a2 / 1500.0, (double)v3))
  {
    uint64_t v2 = v2;
  }
  else
  {
    uint64_t v4 = 5;
    uint64_t v2 = v3;
  }
  *((void *)this + 2) = v4;
  *((void *)this + 3) = v2;
  double result = a2 / (double)v2;
  *((double *)this + 1) = result;
  return result;
}

void DspLib::PowerGuard::PowerAnalyzerBase::setParameters(DspLib::PowerGuard::PowerAnalyzerBase *this, float *a2, unint64_t a3)
{
  if (a3 >= 5)
  {
    uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/PowerGuard/dsp/DspLibPowerGuardClasses.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v7, 38);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (a3)
    {
      double v3 = *((double *)this + 1);
      uint64_t v4 = v8;
      unint64_t v5 = a3;
      do
      {
        float v6 = *a2++;
        *v4++ = vcvtad_u64_f64(v3 * v6);
        --v5;
      }
      while (v5);
    }
    DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 4, v8, a3);
  }
}

void DspLib::PowerGuard::PowerAnalyzerBase::process(DspLib::PowerGuard::PowerAnalyzerBase *this@<X0>, const float *const *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, unint64_t a6@<D0>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(a6) = *((_DWORD *)this + 22);
  if (*((double *)this + 1) <= (double)a6)
  {
    DspLib::MultiMovingAverage::recalculateState((DspLib::PowerGuard::PowerAnalyzerBase *)((char *)this + 32));
    *((_DWORD *)this + 22) = 0;
  }
  if (a3 && a4)
  {
    vDSP_Length v11 = (**(uint64_t (***)(DspLib::PowerGuard::PowerAnalyzerBase *, const float *const *, uint64_t, uint64_t, void *))this)(this, a2, a3, a4, a5);
    int64x2_t v12 = vdupq_n_s64((unint64_t)(a5 + 2));
    a5[10] = v11;
    v16[0] = vaddq_s64(v12, (int64x2_t)xmmword_1BB8727A0);
    v16[1] = vaddq_s64(v12, (int64x2_t)xmmword_1BB878000);
    v15[0] = (uint64_t)v16;
    v15[1] = 4;
    void v15[2] = v11;
    DspLib::MultiMovingAverage::process((char **)this + 4, a5, v11, v15);
    *((_DWORD *)this + 22) += a4;
  }
  else
  {
    a5[10] = 0;
    DspLib::clear((float *)a5, 4uLL);
    uint64_t v13 = 0;
    char v14 = a5 + 2;
    do
    {
      DspLib::clear((float *)&v14[v13], 4uLL);
      v13 += 2;
    }
    while (v13 != 8);
  }
}

void DspLib::PowerGuard::WooferPowerAnalyzer::initialize(void **this, double a2)
{
  DspLib::PowerGuard::PowerAnalyzerBase::initialize((DspLib::PowerGuard::PowerAnalyzerBase *)this, a2);
  *((double *)this + 15) = a2 / (double)((unint64_t)this[3] / (unint64_t)this[2]);
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(this + 16), 1uLL, 0);
  DspLib::AveragingDecimator::setSrcFactor(this + 25, (char *)((unint64_t)this[3] / (unint64_t)this[2]), 0);
  uint64_t v4 = (char *)this[2];

  DspLib::AveragingDecimator::setSrcFactor(this + 31, v4, 0);
}

void DspLib::PowerGuard::WooferPowerAnalyzer::uninitialize(DspLib::PowerGuard::WooferPowerAnalyzer *this)
{
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 4, (unint64_t *)1, 0);

  DspLib::Biquad::Filter::uninitialize((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 128));
}

void DspLib::PowerGuard::WooferPowerAnalyzer::setParameters(DspLib::PowerGuard::WooferPowerAnalyzer *this, float a2, float a3, float *a4, unint64_t a5, float a6, float a7)
{
  DspLib::PowerGuard::PowerAnalyzerBase::setParameters(this, a4, a5);
  *((float *)this + 23) = (float)(a2 * a2) / a3;
  float v12 = *((double *)this + 15);
  float v13 = 1.0;
  float v14 = 1.0;
  if ((float)(1.0 / v12) < a6) {
    float v14 = (float)(1000.0 / v12) / (float)(a6 / 4.6052);
  }
  if (v14 <= 1.0) {
    float v13 = v14;
  }
  *((float *)this + 25) = v13;
  *((float *)this + 28) = a7;
}

void DspLib::PowerGuard::WooferPowerAnalyzer::setAdmittanceCoeffs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 128;
  DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)(a1 + 128), a3);

  DspLib::Biquad::Filter::setCoefficients(v5, a2, a3, 0, 0x41uLL);
}

void DspLib::PowerGuard::WooferPowerAnalyzer::reset(DspLib::PowerGuard::WooferPowerAnalyzer *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  while (v2 != v3)
  {
    *(_DWORD *)(v2 + 8) = 0;
    v2 += 16;
  }
  DspLib::CircularDelay::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 56));
  *((_DWORD *)this + 22) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 176));
  DspLib::AveragingDecimator::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 200));
  DspLib::AveragingDecimator::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 248));
  *((void *)this + 13) = 0;
}

uint64_t DspLib::PowerGuard::WooferPowerAnalyzer::powerFunction(DspLib::PowerGuard::WooferPowerAnalyzer *this, const float *const *a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t result = 0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3 && a4)
  {
    MEMORY[0x1F4188790](0);
    uint64_t v8 = 4 * *((void *)this + 3);
    uint64_t v9 = *((void *)this + 27);
    unint64_t v31 = (const float *)((char *)&v28 - v10);
    unint64_t v32 = v8;
    DspLib::AveragingDecimator::processKernel((uint64_t)this + 200, *v11, v12, (uint64_t)&v31, v9, (*((void *)this + 28) - v9) >> 2, (void **)this + 27);
    unint64_t v14 = v32;
    if (v32 <= 1) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = v32;
    }
    uint64_t v16 = 4 * v15;
    MEMORY[0x1F4188790](v13);
    unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v18 = (char *)&v28 - v17;
    uint64_t v19 = v31;
    DspLib::Biquad::Filter::process((void *)this + 16, (uint64_t)v31, v14, (uint64_t)&v28 - v17, v14);
    DspLib::multiply((float *)((char *)&v28 - v17), v14, v19);
    MEMORY[0x1F4188790](v20);
    float v21 = *((float *)this + 24);
    DspLib::multiply(v31, v32, v31, v32, (float *)((char *)&v28 - v17));
    DspLib::multiply((float *)((char *)&v28 - v17), v14, v21);
    if (v14)
    {
      uint64_t v22 = 0;
      float v23 = *((float *)this + 25);
      float v24 = *((float *)this + 26);
      float v25 = *((float *)this + 27);
      float v26 = *((float *)this + 28);
      do
      {
        float v24 = v24 + (float)(v23 * (float)(*(float *)&v18[4 * v22] - v24));
        float v27 = *(float *)((char *)&v28 + 4 * v22 - v17);
        float v25 = v25 + (float)(v23 * (float)(v27 - v25));
        if (v24 < (float)(v26 * v25)) {
          *(float *)&v18[4 * v22] = v27 * v26;
        }
        ++v22;
      }
      while (v14 > v22);
      *((float *)this + 26) = v24;
      *((float *)this + 27) = v25;
    }
    DspLib::multiply((float *)((char *)&v28 - v17), v14, *((float *)this + 23));
    uint64_t v29 = a5;
    uint64_t v30 = 4;
    DspLib::AveragingDecimator::processKernel((uint64_t)this + 248, (char *)&v28 - v17, v14, (uint64_t)&v29, *((void *)this + 33), (uint64_t)(*((void *)this + 34) - *((void *)this + 33)) >> 2, (void **)this + 33);
    return v30;
  }
  return result;
}

void DspLib::PowerGuard::TweeterPowerAnalyzer::initialize(void **this, double a2)
{
  DspLib::PowerGuard::PowerAnalyzerBase::initialize((DspLib::PowerGuard::PowerAnalyzerBase *)this, a2);
  uint64_t v3 = (char *)this[3];

  DspLib::AveragingDecimator::setSrcFactor(this + 12, v3, 0);
}

float DspLib::PowerGuard::TweeterPowerAnalyzer::setParameters(DspLib::PowerGuard::TweeterPowerAnalyzer *this, float a2, float a3, float a4, float *a5, unint64_t a6)
{
  DspLib::PowerGuard::PowerAnalyzerBase::setParameters(this, a5, a6);
  float result = (float)((float)(a2 * a2) * a3) / a4;
  *((float *)this + 23) = result;
  return result;
}

void DspLib::PowerGuard::TweeterPowerAnalyzer::reset(DspLib::PowerGuard::TweeterPowerAnalyzer *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  while (v2 != v3)
  {
    *(_DWORD *)(v2 + 8) = 0;
    v2 += 16;
  }
  DspLib::CircularDelay::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)((char *)this + 56));
  *((_DWORD *)this + 22) = 0;

  DspLib::AveragingDecimator::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)((char *)this + 96));
}

uint64_t DspLib::PowerGuard::TweeterPowerAnalyzer::powerFunction(DspLib::PowerGuard::TweeterPowerAnalyzer *this, const float *const *a2, unint64_t a3, vDSP_Length a4, float *a5)
{
  uint64_t result = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3 && a4)
  {
    MEMORY[0x1F4188790](0);
    uint64_t v12 = (float *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    DspLib::clear(v12, a4);
    unint64_t v13 = 0;
    unsigned int v14 = 1;
    do
    {
      DspLib::multiplyAccumulate(v12, a4, a2[v13], a4, a2[v13]);
      unint64_t v13 = v14++;
    }
    while (v13 < a3);
    DspLib::multiply(v12, a4, *((float *)this + 23));
    uint64_t v16 = a5;
    uint64_t v17 = 4;
    DspLib::AveragingDecimator::processKernel((uint64_t)this + 96, v12, a4, (uint64_t)&v16, *((void *)this + 14), (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 2, (void **)this + 14);
    return v17;
  }
  return result;
}

BOOL DspLib::PowerGuard::TargetCalculator::setParameters(DspLib::PowerGuard::TargetCalculator *this, unint64_t a2, const float *a3, const float *a4, unint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
  do
  {
    DspLib::LinearDelay::setLength((float **)((char *)this + v10), a2);
    v10 += 24;
  }
  while (v10 != 96);
  do
  {
    DspLib::LinearDelay::setLength((float **)((char *)this + v10), a2);
    v10 += 24;
  }
  while (v10 != 192);
  if (a5 > 4)
  {
    uint64_t v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/PowerGuard/dsp/DspLibPowerGuardClasses.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v16, 205);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (a5)
    {
      uint64_t v12 = (_DWORD *)((char *)this + 272);
      do
      {
        int v13 = *(_DWORD *)a3++;
        *(v12 - 4) = v13;
        int v14 = *(_DWORD *)a4++;
        *v12++ = v14;
        --a5;
      }
      while (a5);
    }
    if (v11 != a2) {
      DspLib::PowerGuard::TargetCalculator::reset(this);
    }
  }
  return v11 != a2;
}

double DspLib::PowerGuard::TargetCalculator::reset(DspLib::PowerGuard::TargetCalculator *this)
{
  for (uint64_t i = 0; i != 96; i += 24)
    DspLib::clear(*(float **)((char *)this + i), (uint64_t)(*(void *)((char *)this + i + 8) - *(void *)((char *)this + i)) >> 2);
  uint64_t v3 = (char *)this + 96;
  uint64_t v4 = (char *)this + 192;
  do
  {
    uint64_t v5 = *(float **)v3;
    uint64_t v6 = *((void *)v3 + 1);
    v3 += 24;
    DspLib::clear(v5, (v6 - (uint64_t)v5) >> 2);
  }
  while (v3 != v4);
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)this + 13) = 0u;
  memset_pattern16((char *)this + 288, &unk_1BB873A60, 0x10uLL);
  memset_pattern16((char *)this + 304, &unk_1BB873A60, 0x10uLL);
  double result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return result;
}

void DspLib::PowerGuard::TargetCalculator::process(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v67 = a5;
  uint64_t v68 = a4;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = a1;
  uint64_t v65 = a1 + 208;
  uint64_t v66 = a1 + 192;
  uint64_t v72 = a2;
  uint64_t v5 = (float *)(a2 + 16);
  uint64_t v69 = a3;
  long long v76 = (float *)(a3 + 16);
  uint64_t v6 = -16;
  for (uint64_t i = 8; i != 104; i += 24)
  {
    uint64_t v8 = (uint64_t *)(v72 + 80);
    vDSP_Length v73 = *(void *)(v72 + 80);
    long long v74 = v5;
    float v9 = DspLib::maxv(v5, v73);
    uint64_t v10 = v75;
    *(float *)(v75 + v6 + 208) = v9;
    uint64_t v11 = (float *)(v10 + v6 + 208);
    uint64_t v12 = (void *)(v10 + i);
    int v13 = (const float **)(v10 + i - 8);
    float v14 = DspLib::maxv(*v13, (uint64_t)(*(void *)(v10 + i) - (void)*v13) >> 2);
    if (*v11 >= v14) {
      float v14 = *v11;
    }
    *uint64_t v11 = v14;
    uint64_t v15 = (void *)(v69 + 80);
    vDSP_Length v71 = *(void *)(v69 + 80);
    float v16 = DspLib::maxv(v76, v71);
    uint64_t v17 = v75;
    *(float *)(v75 + v6 + 224) = v16;
    uint64_t v18 = (float *)(v17 + v6 + 224);
    uint64_t v19 = (const float **)(v17 + i + 88);
    uint64_t v20 = (void *)(v17 + i + 96);
    float v22 = DspLib::maxv(*v19, (uint64_t)(*v20 - (void)*v19) >> 2);
    long long v70 = &v65;
    if (*v18 >= v22) {
      float v22 = *v18;
    }
    *uint64_t v18 = v22;
    MEMORY[0x1F4188790](v21);
    float v24 = (const float *)((char *)&v65 - v23);
    uint64_t v25 = *v8;
    uint64_t v27 = v26[1] - *v26;
    DspLib::add(*v13, (uint64_t)(*v12 - (void)*v13) >> 2, *v19, (uint64_t)(*v20 - (void)*v19) >> 2, (float *)((char *)&v65 - v23));
    vDSP_Length v28 = v25 + (v27 >> 2);
    if (*v15) {
      DspLib::add(v74, v73, v76, v73, (float *)&v24[v28 - *(void *)(v72 + 80)]);
    }
    else {
      DspLib::copy(v74, v73, (void *)&v24[v28 - *(void *)(v72 + 80)]);
    }
    float v29 = DspLib::maxv(v24, v28);
    uint64_t v30 = (char *)v74;
    *(float *)(v75 + v6 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v29;
    DspLib::LinearDelay::write((char **)v13, v30, v73);
    DspLib::LinearDelay::write((char **)v19, (char *)v76, v71);
    uint64_t v5 = v74 + 4;
    v6 += 4;
    v76 += 4;
  }
  uint64_t v31 = 0;
  uint64_t v32 = v75;
  do
  {
    float v33 = *(float *)(v32 + v31 + 224);
    float v34 = *(float *)(v32 + v31 + 256);
    if (v33 >= v34)
    {
      float v35 = *(float *)(v32 + v31 + 272) - v34;
      float v34 = v34 + (float)(v35 * (float)(1.0 - expf((float)-(float)(v33 - v34) / fmaxf(v35, 1.0e-15))));
    }
    *(float *)((char *)&v77 + v31) = v34;
    v31 += 4;
  }
  while (v31 != 16);
  uint64_t v36 = 0;
  *(_OWORD *)(v32 + 24DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v77;
  long long v77 = *(_OWORD *)(v32 + 240);
  uint64_t v39 = v67;
  uint64_t v38 = v68;
  uint64_t v41 = v65;
  uint64_t v40 = v66;
  do
  {
    uint64_t v37 = v32 + 240;
    float v42 = *(float *)(v32 + 240 + 4 * v36);
    float v43 = *(float *)(v40 + 4 * v36);
    if (v43 <= v42) {
      float v44 = *(float *)(v40 + 4 * v36);
    }
    else {
      float v44 = *(float *)(v37 + 4 * v36);
    }
    float v45 = *(float *)(v41 + 4 * v36);
    if (v45 <= v42) {
      float v46 = *(float *)(v41 + 4 * v36);
    }
    else {
      float v46 = *(float *)(v37 + 4 * v36);
    }
    float v47 = v44 + v46;
    if (v47 <= v42)
    {
      float v48 = *(float *)(v37 + 4 * v36);
    }
    else
    {
      float v48 = v42 * 0.5;
      if (v43 <= (float)(v42 * 0.5)) {
        float v49 = *(float *)(v40 + 4 * v36);
      }
      else {
        float v49 = v42 * 0.5;
      }
      if (v45 <= v48) {
        float v50 = *(float *)(v41 + 4 * v36);
      }
      else {
        float v50 = v42 * 0.5;
      }
      float v51 = v49 + v50;
      int v52 = 10;
      float v53 = *(float *)(v37 + 4 * v36);
      do
      {
        float v54 = v48 + (float)((float)((float)((float)(v42 - v51) / (float)(v47 - v51)) * 0.9) * (float)(v53 - v48));
        if (v43 <= v54) {
          float v55 = *(float *)(v40 + 4 * v36);
        }
        else {
          float v55 = v48 + (float)((float)((float)((float)(v42 - v51) / (float)(v47 - v51)) * 0.9) * (float)(v53 - v48));
        }
        if (v45 <= v54) {
          float v56 = *(float *)(v41 + 4 * v36);
        }
        else {
          float v56 = v48 + (float)((float)((float)((float)(v42 - v51) / (float)(v47 - v51)) * 0.9) * (float)(v53 - v48));
        }
        float v57 = v55 + v56;
        if (v57 <= v42)
        {
          float v48 = v48 + (float)((float)((float)((float)(v42 - v51) / (float)(v47 - v51)) * 0.9) * (float)(v53 - v48));
          float v51 = v57;
        }
        if ((float)(v42 - v51) < (float)(v42 * 0.00001)) {
          break;
        }
        if (v57 > v42)
        {
          float v47 = v57;
          float v53 = v54;
        }
        --v52;
      }
      while (v52);
    }
    *((float *)&v77 + v36++) = v48;
  }
  while (v36 != 4);
  uint64_t v58 = 0;
  *uint64_t v38 = v77;
  do
  {
    *(float *)(v39 + v58) = *(float *)(v32 + 272 + v58) - *(float *)((char *)v38 + v58);
    v58 += 4;
  }
  while (v58 != 16);
  uint64_t v59 = 0;
  float v60 = 1.0;
  do
  {
    float v61 = fminf(*(float *)((char *)v38 + v59) / fmaxf(*(float *)(v32 + v59 + 192), 1.0e-15), 1.0);
    *(float *)(v32 + v59 + 288) = v61;
    if (v61 < v60) {
      float v60 = v61;
    }
    v59 += 4;
  }
  while (v59 != 16);
  uint64_t v62 = 0;
  float v63 = 1.0;
  do
  {
    float v64 = fminf(*(float *)((char *)v38 + v62) / fmaxf(*(float *)(v32 + v62 + 208), 1.0e-15), 1.0);
    *(float *)(v32 + v62 + 304) = v64;
    if (v64 < v63) {
      float v63 = v64;
    }
    v62 += 4;
  }
  while (v62 != 16);
}

void *DspLib::PowerGuard::TargetCalculator::status(uint64_t a1, char *__dst)
{
  DspLib::copy((void *)(a1 + 192), 4, __dst);
  uint64_t v4 = (DspLib *)DspLib::copy((void *)(a1 + 208), 4, __dst + 140);
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 304;
  uint64_t v7 = __dst + 172;
  do
  {
    *(float *)&v7[v5 - 140] = DspLib::power2dBSafe(v4, *(float *)(v6 + v5 - 16), 1.0e-20);
    *(float *)&v7[v5] = DspLib::power2dBSafe(v8, *(float *)(v6 + v5), 1.0e-20);
    v5 += 4;
  }
  while (v5 != 16);
  DspLib::copy((void *)(a1 + 224), 4, __dst + 192);

  return DspLib::copy((void *)(a1 + 240), 4, __dst + 208);
}

BOOL DspLib::PowerGuard::GainCalculator::setParameters(DspLib::PowerGuard::GainCalculator *this, unint64_t a2, float a3)
{
  uint64_t v6 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
  DspLib::LinearDelay::setLength((float **)this, a2);
  *((float *)this + 6) = a3;
  if (v6 != a2) {
    DspLib::clear(*(float **)this, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2);
  }
  return v6 != a2;
}

float DspLib::PowerGuard::GainCalculator::process(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, float a6)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (void *)(a1 + 8);
  unint64_t v12 = *(void *)(a2 + 80) + ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  int v13 = (char **)MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v21 - v14;
  DspLib::LinearDelay::process(v13, v16, v17, (char *)v21 - v14, v17);
  DspLib::copy(*(void **)a1, (uint64_t)(*v11 - *(void *)a1) >> 2, &v15[4 * v12 - (*v11 - *(void *)a1)]);
  float v18 = sqrtf(DspLib::PowerGuard::findGainFromZeroInputZeroStateDecomposition(a3, (uint64_t)v15, v12, a4, a5));
  if (v18 < *(float *)(a1 + 24)) {
    float v18 = *(float *)(a1 + 24);
  }
  float v19 = sqrtf(a6);
  if (v18 < (float)(v19 * 0.70711)) {
    float v18 = v19 * 0.70711;
  }
  if (v19 < v18) {
    float v18 = v19;
  }
  return fmaxf(v18, 0.0);
}

float DspLib::PowerGuard::findGainFromZeroInputZeroStateDecomposition(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = a3;
  }
  MEMORY[0x1F4188790](a1);
  int v13 = &v30[-2 * v12];
  uint64_t v14 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v15 = 4 * v11;
  do
  {
    *(void *)((char *)v33 + v14) = v13;
    int v13 = (void *)((char *)v13 + ((4 * v11) & 0xFFFFFFFFFFFFFFF0) + 16);
    v14 += 8;
  }
  while (v14 != 32);
  v31[0] = v33;
  v31[1] = 4;
  void v31[2] = a3;
  DspLib::MultiMovingAverage::zeroStateResponse(a1, v10, a3, v31);
  MEMORY[0x1F4188790](v16);
  float v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 0;
  memset(v32, 0, sizeof(v32));
  do
  {
    *(void *)((char *)v32 + v19) = v18;
    v18 += (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    v19 += 8;
  }
  while (v19 != 32);
  v30[0] = v32;
  v30[1] = 4;
  void v30[2] = a3;
  DspLib::MultiMovingAverage::zeroInputResponse(a1, v30);
  uint64_t v21 = 0;
  float v22 = 1.0;
  uint64_t v23 = 4 * v9;
  do
  {
    MEMORY[0x1F4188790](v20);
    DspLib::add(*((const float **)v33 + v21), a3, *((const float **)v32 + v21), a3, (float *)((char *)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0)));
    uint64_t v20 = DspLib::maxIndex((const float *)((char *)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0)), a3);
    float v25 = *(float *)(a5 + 4 * v21) * 0.1;
    float v26 = *(float *)(a4 + 4 * v21);
    if ((float)(*(float *)&v20 - v26) > v25)
    {
      float v27 = v26 - *(float *)(*((void *)v32 + v21) + 4 * v24);
      if (v25 < v27) {
        float v25 = v27;
      }
      float v28 = v25 / *(float *)(*((void *)v33 + v21) + 4 * v24);
      if (v28 < v22) {
        float v22 = v28;
      }
    }
    ++v21;
  }
  while (v21 != 4);
  return v22;
}

uint64_t DspLib::PowerGuard::PowerController::setParameters(DspLib::PowerGuard::PowerController *this, unint64_t a2, const float *a3, const float *a4, unint64_t a5, float a6)
{
  BOOL v9 = DspLib::PowerGuard::TargetCalculator::setParameters(this, a2, a3, a4, a5);
  int v10 = v9 | DspLib::PowerGuard::GainCalculator::setParameters((DspLib::PowerGuard::PowerController *)((char *)this + 336), a2, a6);
  uint64_t v11 = v10 | DspLib::PowerGuard::GainCalculator::setParameters((DspLib::PowerGuard::PowerController *)((char *)this + 368), a2, a6);
  if (v11 == 1) {
    DspLib::PowerGuard::PowerController::reset((float **)this);
  }
  return v11;
}

void DspLib::PowerGuard::PowerController::reset(float **this)
{
  this[40] = 0;
  this[41] = 0;
}

BOOL DspLib::PowerGuard::PowerController::uninitialize(DspLib::PowerGuard::PowerController *this)
{
  DspLib::PowerGuard::GainCalculator::setParameters((DspLib::PowerGuard::PowerController *)((char *)this + 336), 0, 0.0);

  return DspLib::PowerGuard::GainCalculator::setParameters((DspLib::PowerGuard::PowerController *)((char *)this + 368), 0, 0.0);
}

float DspLib::PowerGuard::PowerController::process(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = a1 + 320;
  DspLib::PowerGuard::TargetCalculator::process(a1, a2, a4, (_OWORD *)(a1 + 320), (uint64_t)v16);
  float v12 = v11;
  float v14 = DspLib::PowerGuard::GainCalculator::process(a1 + 336, a2, a3, v10, (uint64_t)v16, v13);
  DspLib::PowerGuard::GainCalculator::process(a1 + 368, a4, a5, v10, (uint64_t)v16, v12);
  return v14;
}

void DspLib::PowerGuard::GainApplier::initialize(DspLib::PowerGuard::GainApplier *this, double a2, unint64_t a3, unint64_t a4)
{
  *(double *)this = a2;
  uint64_t v7 = *((void *)this + 9);
  uint64_t v8 = *((void *)this + 8);
  std::vector<DspLib::LinearDelay>::resize((uint64_t *)this + 8, a3);
  if (a4 == (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) == a3) {
      return;
    }
  }
  else
  {
    std::vector<float>::resize((uint64_t)this + 8, a4);
    std::vector<float>::resize((uint64_t)this + 32, a4);
  }

  DspLib::PowerGuard::GainApplier::reset(this);
}

void DspLib::PowerGuard::GainApplier::reset(DspLib::PowerGuard::GainApplier *this)
{
  *((_DWORD *)this + 14) = 1065353216;
  uint64_t v1 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  while (v1 != v2)
  {
    uint64_t v3 = *(float **)v1;
    uint64_t v4 = *(void *)(v1 + 8);
    v1 += 24;
    DspLib::clear(v3, (v4 - (uint64_t)v3) >> 2);
  }
}

void DspLib::PowerGuard::GainApplier::uninitialize(DspLib::PowerGuard::GainApplier *this)
{
  *((void *)this + 2) = *((void *)this + 1);
  *((void *)this + 5) = *((void *)this + 4);
}

BOOL DspLib::PowerGuard::GainApplier::setParameters(DspLib::PowerGuard::GainApplier *this, unint64_t a2, float a3, float a4)
{
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9);
  if (v8 == v7)
  {
    BOOL v10 = 0;
  }
  else
  {
    BOOL v10 = a2 != (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2;
    do
    {
      DspLib::LinearDelay::setLength((float **)v7, a2);
      v7 += 24;
    }
    while (v7 != v8);
  }
  float v11 = (float *)*((void *)this + 1);
  uint64_t v12 = *((void *)this + 2) - (void)v11;
  if (v12)
  {
    float v13 = *(double *)this;
    float v14 = 1.0;
    float v15 = 1.0;
    if ((float)(1.0 / v13) < a3) {
      float v15 = (float)(1000.0 / v13) / (float)(a3 / 4.6052);
    }
    if (v15 > 1.0) {
      float v15 = 1.0;
    }
    if ((float)(1.0 / v13) < a4) {
      float v14 = (float)(1000.0 / v13) / (float)(a4 / 4.6052);
    }
    if (v14 > 1.0) {
      float v14 = 1.0;
    }
    *float v11 = v15;
    uint64_t v16 = (float *)*((void *)this + 4);
    *uint64_t v16 = v14;
    if ((unint64_t)v12 >= 5)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v12 >> 2;
      unint64_t v19 = 1;
      do
      {
        v11[v19] = v11[v17] + (float)(v15 * (float)(1.0 - v11[v17]));
        v16[v19] = v16[v17] + (float)(v14 * (float)(1.0 - v16[v17]));
        unint64_t v19 = (v17++ + 2);
      }
      while (v18 > v19);
    }
  }
  if (v10) {
    DspLib::PowerGuard::GainApplier::reset(this);
  }
  return v10;
}

void DspLib::PowerGuard::GainApplier::process(DspLib::PowerGuard::GainApplier *this, const float *const *a2, float *const *a3, unint64_t a4, float a5)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 9) - *((void *)this + 8);
  if (v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    unsigned int v13 = 1;
    do
    {
      DspLib::LinearDelay::process((char **)(*((void *)this + 8) + 24 * v11), (char *)a2[v11], a4, (char *)a3[v11], a4);
      uint64_t v11 = v13;
      BOOL v14 = v12 > v13++;
    }
    while (v14);
    float v15 = *((float *)this + 14);
    if (a5 != 1.0 || v15 != 1.0)
    {
      uint64_t v17 = 8;
      if (v15 < a5) {
        uint64_t v17 = 32;
      }
      unint64_t v18 = (const float *)MEMORY[0x1F4188790](*(void *)((char *)this + v17));
      uint64_t v20 = (const float *)((char *)v25 - v19);
      DspLib::multiplyAdd(v18, a4, (float *)((char *)v25 - v19), v21, *((float *)this + 14));
      uint64_t v22 = 0;
      float v23 = v20[a4 - 1];
      if (v23 > 0.9977) {
        float v23 = 1.0;
      }
      *((float *)this + 14) = v23;
      unsigned int v24 = 1;
      do
      {
        DspLib::multiply(a3[v22], a4, v20);
        uint64_t v22 = v24;
        BOOL v14 = v12 > v24++;
      }
      while (v14);
    }
  }
}

uint64_t *GetAudioDSPManager()
{
  {
    if (v1)
    {
      AudioDSPManager::AudioDSPManager(v1);
    }
  }
  return &GetAudioDSPManager::gAudioDSPManager;
}

void sub_1BB31FF00(_Unwind_Exception *a1)
{
}

void AudioDSPManager::AudioDSPManager(AudioDSPManager *this)
{
  GetAudioDSPManager::gAudioDSPManager = (uint64_t)&unk_1F14A8EF8;
  dword_1EB801C88 = 0;
  uint64_t v1 = (const void *)MGCopyAnswer();
  uint64_t v2 = v1;
  if (v1 && (CFTypeID v3 = CFGetTypeID(v1), v3 != CFStringGetTypeID()))
  {
    qword_1EB801C90 = 0;
    CFRelease(v2);
  }
  else
  {
    qword_1EB801C90 = (uint64_t)v2;
  }
  if (queryBuildType(void)::once != -1) {
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_99);
  }
  byte_1EB801C98 = gIsInternal;
  byte_1EB801C99 = gIsUI;
  std::__fs::filesystem::path::path[abi:ne180100]<char [23],void>((std::string *)&qword_1EB801CA0, "/Library/Audio/Tunings");
  vp::utility::temporary_directory_path(&v10);
  std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(&__p, "AudioCapture/VP");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v10, (std::__fs::filesystem::path *)&qword_1EB801CB8);
  uint64_t v4 = std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>((std::string *)&qword_1EB801CD0, "/usr/local/lib/");
  word_1EB801CE8 = 0;
  CFMutableStringRef v5 = PlatformUtilities::CopyHardwareModelShortName((PlatformUtilities *)v4);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t v6 = (PlatformUtilities_iOS *)applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&qword_1EB801CF0);
  byte_1EB801D08 = 0;
  byte_1EB801D0C = 0;
  dword_1EB801D10 = PlatformUtilities_iOS::GetProductType(v6);
  byte_1EB801D14 = 1;
  dword_1EB801D18 = MGGetSInt32Answer();
  qword_1EB801D1C = GetAcousticID();
  byte_1EB801D24 = 0;
  byte_1EB801D28 = 0;
  byte_1EB801D2C = 0;
  byte_1EB801D30 = 0;
  *(void *)&algn_1EB801D31[7] = 0;
  byte_1EB801D40 = 0;
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1BB320148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  applesauce::CF::StringRef::~StringRef(&a10);
  if (byte_1EB801CE7 < 0) {
    operator delete((void *)qword_1EB801CD0);
  }
  if (byte_1EB801CCF < 0) {
    operator delete((void *)qword_1EB801CB8);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (byte_1EB801CB7 < 0) {
    operator delete((void *)qword_1EB801CA0);
  }
  applesauce::CF::StringRef::~StringRef((const void **)&qword_1EB801C90);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [23],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  CFTypeID v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1BB320274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  CFTypeID v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1BB3202D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioDSPManager::CreateVibeAnalyzer(AudioDSPManager *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t AudioDSPManager::GetVoiceProcessorVersion(AudioDSPManager *this)
{
  if (_os_feature_enabled_impl())
  {
    return MEMORY[0x1F4167CF8]();
  }
  else
  {
    return GetVoiceProcessorVersion((AudioDSPManager *)((char *)this + 8), 0, 0, 0, 0);
  }
}

uint64_t AudioDSPManager::CreateVoiceProcessor(AudioDSPManager *this)
{
  if (!_os_feature_enabled_impl()) {
    operator new();
  }

  return MEMORY[0x1F4167CF0]();
}

void sub_1BB320C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::Decorator_Assembler_Template<VoiceProcessorBase>::add_decorator(uint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5)
    {
      uint64_t v7 = (uint64_t)(v4 - *a1) >> 5;
      if ((unint64_t)(v7 + 1) >> 59) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v5 - *a1;
      uint64_t v9 = v8 >> 4;
      if (v8 >> 4 <= (unint64_t)(v7 + 1)) {
        uint64_t v9 = v7 + 1;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10)
      {
        if (v10 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(32 * v10);
      }
      else
      {
        uint64_t v11 = 0;
      }
      unint64_t v12 = &v11[32 * v10];
      uint64_t v13 = std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::__value_func[abi:ne180100]((uint64_t)&v11[32 * v7], a2);
      uint64_t v6 = v13 + 32;
      float v15 = (void *)*a1;
      BOOL v14 = (void *)a1[1];
      if (v14 == (void *)*a1)
      {
        *a1 = v13;
        a1[1] = v6;
        a1[2] = (uint64_t)v12;
        if (!v14) {
          goto LABEL_21;
        }
      }
      else
      {
        do
        {
          v14 -= 4;
          uint64_t v13 = std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::__value_func[abi:ne180100](v13 - 32, (uint64_t)v14);
        }
        while (v14 != v15);
        uint64_t v16 = (void *)*a1;
        BOOL v14 = (void *)a1[1];
        *a1 = v13;
        a1[1] = v6;
        a1[2] = (uint64_t)v12;
        if (v14 != v16)
        {
          do
          {
            v14 -= 4;
            std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::~__value_func[abi:ne180100](v14);
          }
          while (v14 != v16);
          BOOL v14 = v16;
        }
        if (!v14) {
          goto LABEL_21;
        }
      }
      operator delete(v14);
    }
    else
    {
      uint64_t v6 = std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::__value_func[abi:ne180100](v4, a2)+ 32;
    }
LABEL_21:
    a1[1] = v6;
  }
}

void *std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t applesauce::CF::convert_as<BOOL,0>(const __CFBoolean *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    LOBYTE(v3) = CFBooleanGetValue(a1) != 0;
    int v4 = 1;
  }
  else
  {
    CFTypeID v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      __int16 v3 = applesauce::CF::details::number_convert_as<BOOL>(a1);
      int v4 = HIBYTE(v3);
    }
    else
    {
      LOBYTE(v3) = 0;
      int v4 = 0;
    }
  }
  return v3 | (v4 << 8);
}

void std::vector<std::function<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    CFTypeID v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      CFTypeID v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::__shared_weak_count **std::unique_ptr<VPStrategyManager>::reset[abi:ne180100](std::__shared_weak_count ***a1)
{
  double result = *a1;
  *a1 = 0;
  if (result)
  {
    VPStrategyManager::~VPStrategyManager(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t vp::Decorator_Assembler_Template<VoiceProcessorBase>::add_decorator<vp::decorators::CPU_Profiler,vp::Context const&,vp::Decorator_Assembler_Product &,std::shared_ptr<caulk::concurrent::messenger> &>(vp::Context const&,vp::Decorator_Assembler_Product &,std::shared_ptr<caulk::concurrent::messenger> &)::{lambda(vp::decorators::CPU_Profiler)#1}::~add_decorator(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  vp::Context::~Context((vp::Context *)(a1 + 8));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EEclEOSU_(uint64_t a1, void *a2)
{
  *a2 = 0;
  vp::Context::Context((uint64_t)v4, a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 216);
  if (*((void *)&v3 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1BB3212D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, CFTypeRef a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef cf)
{
  float v47 = *(std::__shared_weak_count **)(v45 - 56);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  uint64_t v48 = *(void *)(v45 - 40);
  *(void *)(v45 - 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  MEMORY[0x1C185D370](v44, 0x10A1C40319A4EC9);
  if (cf) {
    CFRelease(cf);
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void _ZNSt3__110__function12__alloc_funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE7destroyB8ne180100Ev(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  vp::Context::~Context((vp::Context *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE7destroyEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE7__cloneEPNS0_6__baseISV_EE(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  *a2 = &unk_1F14A8FB0;
  a2[1] = v4;
  uint64_t result = vp::Context::Context((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  uint64_t v6 = a1[28];
  a2[27] = a1[27];
  a2[28] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EE7__cloneEv(void *a1)
{
  uint64_t v2 = operator new(0xE8uLL);
  uint64_t v3 = a1[1];
  *uint64_t v2 = &unk_1F14A8FB0;
  v2[1] = v3;
  vp::Context::Context((uint64_t)(v2 + 2), (uint64_t)(a1 + 2));
  uint64_t v4 = a1[28];
  v2[27] = a1[27];
  v2[28] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_1BB321574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A8FB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[28];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  vp::Context::~Context((vp::Context *)(a1 + 2));

  JUMPOUT(0x1C185D370);
}

void *_ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators12CPU_ProfilerEJRKNS2_7ContextERNS2_27Decorator_Assembler_ProductERNS_10shared_ptrIN5caulk10concurrent9messengerEEEEEEvDpOT0_EUlT_E_NS_9allocatorISO_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESU_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A8FB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[28];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  vp::Context::~Context((vp::Context *)(a1 + 2));
  return a1;
}

uint64_t std::__function::__value_func<std::unique_ptr<VoiceProcessorBase> ()(std::unique_ptr<VoiceProcessorBase>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators17Xcode_InstrumentsEJRNS2_27Decorator_Assembler_ProductEEEEvDpOT0_EUlT_E_NS_9allocatorISF_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESL_EEclEOSL_(uint64_t a1, void *a2)
{
  *a2 = 0;
  operator new();
}

void sub_1BB321764(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 _ZNKSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators17Xcode_InstrumentsEJRNS2_27Decorator_Assembler_ProductEEEEvDpOT0_EUlT_E_NS_9allocatorISF_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESL_EE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A8F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators17Xcode_InstrumentsEJRNS2_27Decorator_Assembler_ProductEEEEvDpOT0_EUlT_E_NS_9allocatorISF_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESL_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14A8F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp28Decorator_Assembler_TemplateI18VoiceProcessorBaseE13add_decoratorINS2_10decorators17Xcode_InstrumentsEJRNS2_27Decorator_Assembler_ProductEEEEvDpOT0_EUlT_E_NS_9allocatorISF_EEFNS_10unique_ptrIS4_NS_14default_deleteIS4_EEEESL_EED0Ev()
{
}

void AudioDSPManager::RegisterAudioUnits(AudioDSPManager *this, char a2)
{
  if ((a2 & 2) != 0)
  {
    if (CACFPreferencesGetAppBooleanValue(@"AllAUsPublic", @"com.apple.coreaudio", 0)) {
      UInt32 v3 = 0;
    }
    else {
      UInt32 v3 = 0x8000;
    }
    RegisterInternalAudioUnits_iOS(v3);
  }
  if (a2) {
    RegisterPublicAudioUnits();
  }
  global_queue = dispatch_get_global_queue(-32768, 0);

  dispatch_async(global_queue, &__block_literal_global_2);
}

void ___ZN15AudioDSPManager18RegisterAudioUnitsEj_block_invoke()
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = "audiomxd";
  int v1 = _os_feature_enabled_impl();
  if (!v1) {
    uint64_t v0 = "mediaserverd";
  }
  uint64_t v2 = (caulk::platform *)getpid();
  caulk::platform::process_name(v2);
  int v3 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = 12;
  if (v1) {
    uint64_t v5 = 8;
  }
  if (size != v5
    || ((uint64_t v6 = (void *)v51.__r_.__value_.__r.__words[0], (v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (uint64_t v7 = &v51)
      : (uint64_t v7 = (std::string *)v51.__r_.__value_.__r.__words[0]),
        memcmp(v7, v0, size)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "cannot migrate AudioUnit assets for current process", (uint8_t *)&buf, 2u);
      LOBYTE(v3) = *((unsigned char *)&v51.__r_.__value_.__s + 23);
    }
    if ((v3 & 0x80) != 0)
    {
      uint64_t v8 = (void *)v51.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
    return;
  }
  if (v3 < 0) {
    operator delete(v6);
  }
  uint64_t v45 = getenv("TMPDIR");
  if (!v45) {
    return;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "start migrating AudioUnit assets", (uint8_t *)&v51, 2u);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v44, &v45);
  std::__fs::filesystem::path::path[abi:ne180100]<char [6],void>(&v51, "Cache");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v51, (uint64_t)&v44, &v43);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = open("/dev/urandom", 0x1000000);
  if (v9 == -1)
  {
    std::string::size_type v33 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&buf, "open /dev/urandom");
    uint64_t v34 = std::runtime_error::runtime_error((std::runtime_error *)&v51, &buf);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14B63D8;
    v51.__r_.__value_.__r.__words[2] = v33;
    __base.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-"
                                                                        "11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Co"
                                                                        "ntents/Developer/Platforms/iPhoneOS.platform/Dev"
                                                                        "eloper/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/"
                                                                        "include/boost/uuid/detail/random_provider_posix.ipp";
    __base.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"boost::uuids::detail::random_provider_base::random_provider_base()";
    __base.__pn_.__r_.__value_.__r.__words[2] = 60;
    boost::throw_exception<boost::uuids::entropy_error>(v34, (int8x16_t *)&__base);
  }
  char v10 = 0;
  uint64_t v11 = 0;
  long long v42 = xmmword_1E623F1D8;
  do
  {
    char v12 = v10;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v41.__pn_, (char **)&v42 + v11);
    std::__fs::filesystem::__status(&v41, 0);
    if (!v51.__r_.__value_.__s.__data_[0] || v51.__r_.__value_.__s.__data_[0] == 255) {
      goto LABEL_90;
    }
    char v35 = v12;
    MEMORY[0x1C185CFD0](&v40, &v41, 0, 0);
    while (v40.__imp_.__ptr_)
    {
      uint64_t v13 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v40);
      std::__fs::filesystem::path::extension[abi:ne180100](&v13->__p_, (uint64_t)&v51);
      std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&__base.__pn_, ".mil");
      v53.__data_ = (const std::string_view::value_type *)&__base;
      BOOL v14 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v51, v53);
      if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__base.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        if (!v14) {
          goto LABEL_84;
        }
      }
      else if (!v14)
      {
        goto LABEL_84;
      }
      if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, v43.__pn_.__r_.__value_.__l.__data_, v43.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        puint64_t n = v43.__pn_;
      }
      std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(&__base.__pn_, "/");
      std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&v51, &v13->__p_, &__base);
      std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&pn, (std::__fs::filesystem::path *)&v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__base.__pn_.__r_.__value_.__l.__data_);
      }
      std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v51, ".ir");
      std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&pn, (const std::__fs::filesystem::path *)&v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        p_puint64_t n = &pn;
        if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_puint64_t n = (std::string *)pn.__r_.__value_.__r.__words[0];
        }
        LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_pn;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "compiling \"%s\"", (uint8_t *)&v51, 0xCu);
      }
      std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&pn, (uint64_t)&__from);
      std::__fs::filesystem::__create_directories(&__from, 0);
      unint64_t v16 = 0;
      do
      {
        ssize_t v17 = read(v9, (char *)&v49 + v16, 16 - v16);
        if (v17 < 0)
        {
          unint64_t v18 = __error();
          if (*v18 != 4)
          {
            std::string::size_type v19 = *v18;
            std::string::basic_string[abi:ne180100]<0>(&buf, "read");
            uint64_t v20 = std::runtime_error::runtime_error((std::runtime_error *)&v51, &buf);
            v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14B63D8;
            v51.__r_.__value_.__r.__words[2] = v19;
            __base.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)"/AppleInternal/Library/BuildRoots/cb0942"
                                                                                "9a-9ee5-11ef-b491-ce2c30f2a3e7/Applicati"
                                                                                "ons/Xcode.app/Contents/Developer/Platfor"
                                                                                "ms/iPhoneOS.platform/Developer/SDKs/iPho"
                                                                                "neOS18.2.Internal.sdk/usr/local/include/"
                                                                                "boost/uuid/detail/random_provider_posix.ipp";
            __base.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"void boost::uuids::detail::random_provider_"
                                                                             "base::get_random_bytes(void *, std::size_t)";
            __base.__pn_.__r_.__value_.__r.__words[2] = 98;
            boost::throw_exception<boost::uuids::entropy_error>(v20, (int8x16_t *)&__base);
          }
        }
        else
        {
          v16 += v17;
        }
      }
      while (v16 < 0x10);
      BYTE8(v49) = BYTE8(v49) & 0x3F | 0x80;
      BYTE6(v49) = BYTE6(v49) & 0xF | 0x40;
      long long v48 = v49;
      float v21 = operator new(0x28uLL);
      unint64_t v22 = 0;
      std::string __p = v21;
      long long v37 = xmmword_1BB879B40;
      *float v21 = 0u;
      v21[1] = 0u;
      *(void *)((char *)v21 + 29) = 0;
      do
      {
        if (*((unsigned __int8 *)&v48 + v22) >= 0xA0u) {
          char v23 = 87;
        }
        else {
          char v23 = 48;
        }
        *(unsigned char *)float v21 = v23 + (*((unsigned char *)&v48 + v22) >> 4);
        unsigned int v24 = *((unsigned char *)&v48 + v22) & 0xF;
        if (v24 >= 0xA) {
          char v25 = 87;
        }
        else {
          char v25 = 48;
        }
        char v26 = v25 + v24;
        float v27 = (char *)v21 + 2;
        *((unsigned char *)v21 + 1) = v26;
        if (v22 <= 9 && ((1 << v22) & 0x2A8) != 0)
        {
          float v27 = (char *)v21 + 3;
          *((unsigned char *)v21 + 2) = 45;
        }
        ++v22;
        float v21 = v27;
      }
      while (v22 != 16);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&__from.__pn_, (uint64_t)&__p);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
      v51.__r_.__value_.__r.__words[0] = BNNSGraphCompileOptionsMakeDefault();
      v51.__r_.__value_.__l.__size_ = v28;
      std::string __p = &v51;
      BNNSGraphCompileOptionsSetTargetSingleThread();
      BNNSGraphCompileOptionsSetOptimizationPreference();
      BNNSGraphCompileOptionsSetOutputPath();
      float v29 = (void *)BNNSGraphCompileFromFile_v2();
      if (v29 && v30)
      {
        munmap(v29, v30);
        std::__fs::filesystem::__rename(&__from, (const std::__fs::filesystem::path *)&pn, 0);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = &pn;
          if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v31 = (std::string *)pn.__r_.__value_.__r.__words[0];
          }
          LODWORD(__base.__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__base.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "compiled \"%s\"", (uint8_t *)&__base, 0xCu);
        }
      }
      else
      {
        std::__fs::filesystem::__status(&__from, 0);
        if (v46 && v46 != 255) {
          std::__fs::filesystem::__remove(&__from, 0);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          uint64_t v32 = &pn;
          if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v32 = (std::string *)pn.__r_.__value_.__r.__words[0];
          }
          LODWORD(__base.__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__base.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
          _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failed to compile \"%s\"", (uint8_t *)&__base, 0xCu);
        }
      }
      applesauce::raii::v1::detail::ScopeGuard<MigrateAudioUnitAssets::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)&__p);
      if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__from.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
LABEL_84:
      std::__fs::filesystem::recursive_directory_iterator::__increment(&v40, 0);
    }
    char v12 = v35;
    if (v40.__imp_.__cntrl_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40.__imp_.__cntrl_);
    }
LABEL_90:
    if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__pn_.__r_.__value_.__l.__data_);
    }
    char v10 = 1;
    uint64_t v11 = 1;
  }
  while ((v12 & 1) == 0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "stop migrating AudioUnit assets", (uint8_t *)&v51, 2u);
  }
  boost::uuids::detail::random_provider_base::destroy(v9);
  if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v8 = (void *)v44.__r_.__value_.__r.__words[0];
LABEL_17:
    operator delete(v8);
  }
}

void sub_1BB322290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
  {
    __cxa_end_catch();
    if (a26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a26);
    }
    if (a33 < 0) {
      operator delete(__p);
    }
    boost::uuids::detail::random_provider_base::destroy(v47);
    if (a41 < 0) {
      operator delete(a36);
    }
    if (a47 < 0) {
      operator delete(a42);
    }
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)(v48 - 176) = 0;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "failed to migrate AudioUnit assets due to uncaught exception", (uint8_t *)(v48 - 176), 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB3219B0);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioDSPManager::ImplementedInterfaceVersion(AudioDSPManager *this)
{
  return 1;
}

void AudioDSPManager::~AudioDSPManager(AudioDSPManager *this)
{
  vp::Context::~Context((AudioDSPManager *)((char *)this + 8));

  JUMPOUT(0x1C185D370);
}

{
  vp::Context::~Context((AudioDSPManager *)((char *)this + 8));
}

void CircularModelDOA::UpdateKappa(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const void **)a2;
  int64_t v6 = *(void *)(a2 + 8) - (void)v4;
  if (*(_DWORD *)(a1 + 8) == v6 >> 2)
  {
    memcpy(*(void **)(a1 + 24), v4, v6);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8);
    v7(a1, a2);
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      uint64_t v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      int v10 = *(_DWORD *)(a1 + 8);
      int v11 = 136315906;
      char v12 = "CircularModels.cpp";
      __int16 v13 = 1024;
      int v14 = 187;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CircularModels: Kappa not set. Input length (%lu) and internal length (%u) do not match.\n", (uint8_t *)&v11, 0x22u);
    }
  }
}

uint64_t CircularModelDOA::UpdateKappa(float **this, float a2)
{
  float __A = a2;
  vDSP_vfill(&__A, this[3], 1, *((unsigned int *)this + 2));
  v3.n128_f32[0] = __A;
  return (*(uint64_t (**)(float **, __n128))*this)(this, v3);
}

void VonMisesModelDOA::GetValue(uint64_t a1, const float **a2, const float **a3, float **a4)
{
  CircularModelDOA::innerProductTargetTimesSubbandDOA(a1, a2, a3, a4);
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 24), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vvexpf(*a4, *a4, (const int *)(a1 + 72));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 48), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(float **)(a1 + 24);
    uint64_t v8 = *a4;
    do
    {
      if (*v7 < 1.0e-15) {
        *uint64_t v8 = *(float *)(a1 + 88);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void CircularModelDOA::innerProductTargetTimesSubbandDOA(uint64_t a1, const float **a2, const float **a3, float **a4)
{
  vDSP_vclr(*a4, 1, *(unsigned int *)(a1 + 8));
  vDSP_vsmul(*a2, 1, (const float *)(a1 + 92), *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vvsincosf(*(float **)(a1 + 120), *(float **)(a1 + 96), *(const float **)(a1 + 192), (const int *)(a1 + 72));
  vDSP_vsmul(*a3, 1, (const float *)(a1 + 92), *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vvsincosf(*(float **)(a1 + 168), *(float **)(a1 + 144), *(const float **)(a1 + 192), (const int *)(a1 + 72));
  float v8 = *(float *)(a1 + 92);
  float v9 = cosf(*(float *)(a1 + 12) * v8);
  float __B = v9 * cosf(v8 * *(float *)(a1 + 16));
  vDSP_vmul(*(const float **)(a1 + 96), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 192), 1, &__B, *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vDSP_vadd(*(const float **)(a1 + 192), 1, *a4, 1, *a4, 1, *(unsigned int *)(a1 + 8));
  float v10 = *(float *)(a1 + 92);
  float v11 = sinf(*(float *)(a1 + 12) * v10);
  float __B = v11 * cosf(v10 * *(float *)(a1 + 16));
  vDSP_vmul(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 192), 1, &__B, *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vDSP_vadd(*(const float **)(a1 + 192), 1, *a4, 1, *a4, 1, *(unsigned int *)(a1 + 8));
  float __B = sinf(*(float *)(a1 + 16) * *(float *)(a1 + 92));
  vDSP_vsmul(*(const float **)(a1 + 168), 1, &__B, *(float **)(a1 + 192), 1, *(unsigned int *)(a1 + 8));
  vDSP_vadd(*(const float **)(a1 + 192), 1, *a4, 1, *a4, 1, *(unsigned int *)(a1 + 8));
}

void VonMisesModelDOA::~VonMisesModelDOA(VonMisesModelDOA *this)
{
  CircularModelDOA::~CircularModelDOA(this);

  JUMPOUT(0x1C185D370);
}

void CircularModelDOA::~CircularModelDOA(CircularModelDOA *this)
{
  *(void *)this = &unk_1F14B8F48;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  __n128 v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
}

void VonMisesModelDOA::UpdateNormConst(uint64_t a1, const float **a2)
{
  vvsinhf(*(float **)(a1 + 48), *a2, (const int *)(a1 + 72));
  vDSP_vsmul(*(const float **)(a1 + 48), 1, (const float *)(a1 + 84), *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  vDSP_svdiv((const float *)(a1 + 76), *(const float **)(a1 + 48), 1, *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  uint64_t v4 = *(float **)(a1 + 48);
  uint64_t v5 = *a2;
  vDSP_Length v6 = *(unsigned int *)(a1 + 8);

  vDSP_vmul(v4, 1, v5, 1, v4, 1, v6);
}

void VonMisesModelDOA::UpdateNormConst(VonMisesModelDOA *this, float a2)
{
  float v3 = *((float *)this + 21);
  float __A = a2 / (float)(v3 * sinhf(a2));
  vDSP_vfill(&__A, *((float **)this + 6), 1, *((unsigned int *)this + 2));
}

void ComplementVonMisesModelDOA::GetValue(uint64_t a1, const float **a2, const float **a3, float **a4)
{
  CircularModelDOA::innerProductTargetTimesSubbandDOA(a1, a2, a3, a4);
  vvexpf(*(float **)(a1 + 216), *(const float **)(a1 + 24), (const int *)(a1 + 72));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 24), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vvexpf(*a4, *a4, (const int *)(a1 + 72));
  vDSP_vsub(*a4, 1, *(const float **)(a1 + 216), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 48), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(float **)(a1 + 24);
    float v8 = *a4;
    do
    {
      if (*v7 < 1.0e-15) {
        *float v8 = *(float *)(a1 + 88);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void ComplementVonMisesModelDOA::~ComplementVonMisesModelDOA(ComplementVonMisesModelDOA *this)
{
  *(void *)this = &unk_1F14B8FD8;
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v2;
    operator delete(v2);
  }
  CircularModelDOA::~CircularModelDOA(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B8FD8;
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v2;
    operator delete(v2);
  }

  CircularModelDOA::~CircularModelDOA(this);
}

void ComplementVonMisesModelDOA::UpdateNormConst(uint64_t a1, const float **a2)
{
  vvexpf(*(float **)(a1 + 216), *a2, (const int *)(a1 + 72));
  vDSP_vmul(*(const float **)(a1 + 216), 1, *a2, 1, *(float **)(a1 + 216), 1, *(unsigned int *)(a1 + 8));
  vvsinhf(*(float **)(a1 + 48), *a2, (const int *)(a1 + 72));
  vDSP_vsub(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 216), 1, *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 48), 1, (const float *)(a1 + 84), *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  vDSP_svdiv((const float *)(a1 + 76), *(const float **)(a1 + 48), 1, *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  uint64_t v4 = *(float **)(a1 + 48);
  uint64_t v5 = *a2;
  vDSP_Length v6 = *(unsigned int *)(a1 + 8);

  vDSP_vmul(v4, 1, v5, 1, v4, 1, v6);
}

void ComplementVonMisesModelDOA::UpdateNormConst(ComplementVonMisesModelDOA *this, float a2)
{
  float v4 = *((float *)this + 21);
  float v5 = expf(a2);
  float __A = a2 / (float)(v4 * (float)-(float)(sinhf(a2) - (float)(a2 * v5)));
  vDSP_vfill(&__A, *((float **)this + 6), 1, *((unsigned int *)this + 2));
}

void WatsonModelDOA::GetValue(uint64_t a1, const float **a2, const float **a3, float **a4)
{
  CircularModelDOA::innerProductTargetTimesSubbandDOA(a1, a2, a3, a4);
  vDSP_vmul(*a4, 1, *a4, 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 24), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vvexpf(*a4, *a4, (const int *)(a1 + 72));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 48), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(float **)(a1 + 24);
    float v8 = *a4;
    do
    {
      if (*v7 < 1.0e-15) {
        *float v8 = *(float *)(a1 + 88);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void WatsonModelDOA::~WatsonModelDOA(WatsonModelDOA *this)
{
  CircularModelDOA::~CircularModelDOA(this);

  JUMPOUT(0x1C185D370);
}

void WatsonModelDOA::UpdateNormConst(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float a6)
{
  vKummerFirstKind(*a2, a2[1], *(void *)(a1 + 48), *(float *)(a1 + 216), *(float *)(a1 + 220), a5, a6);
  vDSP_vsmul(*(const float **)(a1 + 48), 1, (const float *)(a1 + 84), *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  uint64_t v7 = *(float **)(a1 + 48);
  vDSP_Length v8 = *(unsigned int *)(a1 + 8);

  vDSP_svdiv((const float *)(a1 + 76), v7, 1, v7, 1, v8);
}

void vKummerFirstKind(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, double a6, float a7)
{
  if (a2 != a1)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (a2 - a1) >> 2;
    do
    {
      KummerFirstKind(a4, a5, *(float *)(a1 + 4 * v11), a7);
      *(_DWORD *)(a3 + 4 * v11++) = v13;
    }
    while (v12 > v11);
  }
}

void KummerFirstKind(float a1, float a2, float a3, float a4)
{
  float v4 = a1;
  float v5 = (float)(a1 * a3) / a2;
  float v6 = v5 + 1.0;
  if (fabsf(v5) > 0.000000001)
  {
    unsigned int v7 = 1;
    do
    {
      float v4 = v4 + 1.0;
      a2 = a2 + 1.0;
      float v5 = (float)((float)((float)(v5 * a3) * v4) / a2) / (float)(v7 + 1);
      float v6 = v6 + v5;
      if (v7 > 0x62) {
        break;
      }
      ++v7;
    }
    while (fabsf(v5) > 0.000000001);
  }
}

float WatsonModelDOA::UpdateNormConst(WatsonModelDOA *this, float a2, double a3, double a4, float a5)
{
  KummerFirstKind(*((float *)this + 54), *((float *)this + 55), a2, a5);
  float __A = *((float *)this + 19) / (float)(v6 * *((float *)this + 21));
  vDSP_vfill(&__A, *((float **)this + 6), 1, *((unsigned int *)this + 2));
  return result;
}

void ComplementWatsonModelDOA::GetValue(uint64_t a1, const float **a2, const float **a3, float **a4)
{
  CircularModelDOA::innerProductTargetTimesSubbandDOA(a1, a2, a3, a4);
  vvexpf(*(float **)(a1 + 224), *(const float **)(a1 + 24), (const int *)(a1 + 72));
  vDSP_vmul(*a4, 1, *a4, 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 24), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vvexpf(*a4, *a4, (const int *)(a1 + 72));
  vDSP_vsub(*a4, 1, *(const float **)(a1 + 224), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  vDSP_vmul(*a4, 1, *(const float **)(a1 + 48), 1, *a4, 1, *(unsigned int *)(a1 + 8));
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    unsigned int v7 = *(float **)(a1 + 24);
    vDSP_Length v8 = *a4;
    do
    {
      if (*v7 < 1.0e-15) {
        *vDSP_Length v8 = *(float *)(a1 + 88);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void ComplementWatsonModelDOA::~ComplementWatsonModelDOA(ComplementWatsonModelDOA *this)
{
  *(void *)this = &unk_1F14B9020;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  CircularModelDOA::~CircularModelDOA(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B9020;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }

  CircularModelDOA::~CircularModelDOA(this);
}

void ComplementWatsonModelDOA::UpdateNormConst(uint64_t a1, uint64_t a2)
{
  vvexpf(*(float **)(a1 + 224), *(const float **)a2, (const int *)(a1 + 72));
  vKummerFirstKind(*(void *)a2, *(void *)(a2 + 8), *(void *)(a1 + 48), *(float *)(a1 + 216), *(float *)(a1 + 220), v4, v5);
  vDSP_vsub(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 224), 1, *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  vDSP_vsmul(*(const float **)(a1 + 48), 1, (const float *)(a1 + 84), *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 8));
  uint64_t v6 = *(float **)(a1 + 48);
  vDSP_Length v7 = *(unsigned int *)(a1 + 8);

  vDSP_svdiv((const float *)(a1 + 76), v6, 1, v6, 1, v7);
}

void ComplementWatsonModelDOA::UpdateNormConst(ComplementWatsonModelDOA *this, float a2, double a3, double a4, float a5)
{
  KummerFirstKind(*((float *)this + 54), *((float *)this + 55), a2, a5);
  float v7 = *((float *)this + 19);
  float v8 = *((float *)this + 21);
  float __A = v7 / (float)((float)(expf(a2) - v9) * v8);
  vDSP_vfill(&__A, *((float **)this + 6), 1, *((unsigned int *)this + 2));
}

void UniformModelDOA::GetValue(uint64_t a1, uint64_t a2, uint64_t a3, float **a4)
{
}

void UniformModelDOA::~UniformModelDOA(UniformModelDOA *this)
{
  CircularModelDOA::~CircularModelDOA(this);

  JUMPOUT(0x1C185D370);
}

void UniformModelDOA::UpdateNormConst(uint64_t a1)
{
  vDSP_vfill((const float *)(a1 + 80), *(float **)(a1 + 24), 1, *(unsigned int *)(a1 + 8));
  uint64_t v2 = *(float **)(a1 + 48);
  vDSP_Length v3 = *(unsigned int *)(a1 + 8);

  vDSP_vfill((const float *)(a1 + 76), v2, 1, v3);
}

void UniformModelDOA::UpdateNormConst(UniformModelDOA *this, float a2)
{
  vDSP_vfill((const float *)this + 20, *((float **)this + 3), 1, *((unsigned int *)this + 2));
  vDSP_Length v3 = (float *)*((void *)this + 6);
  vDSP_Length v4 = *((unsigned int *)this + 2);

  vDSP_vfill((const float *)this + 19, v3, 1, v4);
}

void CircularModelSV::UpdateKappa(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *(const void **)a2;
  int64_t v6 = *(void *)(a2 + 8) - (void)v4;
  if (*(_DWORD *)(a1 + 12) == v6 >> 2)
  {
    memcpy(*(void **)(a1 + 48), v4, v6);
    float v7 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8);
    v7(a1, a2);
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      float v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return;
      }
    }
    else
    {
      float v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      int v10 = *(_DWORD *)(a1 + 12);
      int v11 = 136315906;
      unint64_t v12 = "CircularModels.cpp";
      __int16 v13 = 1024;
      int v14 = 515;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CircularModels: Kappa not set. Input length (%lu) and internal length (%u) do not match.\n", (uint8_t *)&v11, 0x22u);
    }
  }
}

uint64_t CircularModelSV::UpdateKappa(float **this, float a2)
{
  float __A = a2;
  vDSP_vfill(&__A, this[6], 1, *((unsigned int *)this + 3));
  v3.n128_f32[0] = __A;
  return (*(uint64_t (**)(float **, __n128))*this)(this, v3);
}

void WatsonModelSV::GetValue(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*(float **)(a1 + 128), 1, (2 * *(_DWORD *)(a1 + 12)));
  int v7 = *(_DWORD *)(a1 + 8);
  vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  float v8 = (float *)(*(void *)(a1 + 128) + 4 * v6);
  __D.unint64_t realp = *(float **)(a1 + 128);
  __D.imagp = v8;
  if (v7)
  {
    unsigned int v9 = 0;
    do
    {
      vDSP_Length __N = *(unsigned int *)(a1 + 12);
      unsigned int v11 = *(_DWORD *)(a1 + 16) + __N * v9;
      unint64_t v12 = (float *)(*a2 + 4 * v11);
      __B.unint64_t realp = (float *)(*a2 + 4 * __N * v9);
      __B.imagp = v12;
      uint64_t v13 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v13 + 4 * __N * v9);
      __A.imagp = (float *)(v13 + 4 * v11);
      vDSP_zvcma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 8));
    vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  }
  vDSP_zvmags(&__D, 1, *(float **)(a1 + 152), 1, v6);
  vDSP_vmul(*(const float **)(a1 + 152), 1, *(const float **)(a1 + 48), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
  vDSP_vadd(*(const float **)(a1 + 152), 1, *(const float **)(a1 + 72), 1, *a3, 1, *(unsigned int *)(a1 + 12));
}

void WatsonModelSV::~WatsonModelSV(WatsonModelSV *this)
{
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

void CircularModelSV::~CircularModelSV(CircularModelSV *this)
{
  *(void *)this = &unk_1F14C76B0;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
    operator delete(v2);
  }
  __n128 v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  vDSP_Length v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
}

void WatsonModelSV::UpdateNormConst(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float a6)
{
  vKummerFirstKind(*a2, a2[1], *(void *)(a1 + 152), *(float *)(a1 + 96), *(float *)(a1 + 108), a5, a6);
  vDSP_vsmul(*(const float **)(a1 + 152), 1, (const float *)(a1 + 112), *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 12));
  vvlogf(*(float **)(a1 + 72), *(const float **)(a1 + 72), (const int *)(a1 + 104));
  vDSP_vneg(*(const float **)(a1 + 72), 1, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 12));
  int v7 = *(float **)(a1 + 72);
  vDSP_Length v8 = *(unsigned int *)(a1 + 12);

  vDSP_vsadd(v7, 1, (const float *)(a1 + 120), v7, 1, v8);
}

void WatsonModelSV::UpdateNormConst(WatsonModelSV *this, float a2, double a3, double a4, float a5)
{
  KummerFirstKind(*((float *)this + 24), *((float *)this + 27), a2, a5);
  float v6 = *((float *)this + 30);
  float __A = v6 - logf(v7 * *((float *)this + 28));
  vDSP_vfill(&__A, *((float **)this + 9), 1, *((unsigned int *)this + 3));
}

void ComplementWatsonModelSV::GetValue(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*(float **)(a1 + 128), 1, (2 * *(_DWORD *)(a1 + 12)));
  int v7 = *(_DWORD *)(a1 + 8);
  vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  vDSP_Length v8 = (float *)(*(void *)(a1 + 128) + 4 * v6);
  __D.unint64_t realp = *(float **)(a1 + 128);
  __D.imagp = v8;
  if (v7)
  {
    unsigned int v9 = 0;
    do
    {
      vDSP_Length __N = *(unsigned int *)(a1 + 12);
      unsigned int v11 = *(_DWORD *)(a1 + 16) + __N * v9;
      unint64_t v12 = (float *)(*a2 + 4 * v11);
      __B.unint64_t realp = (float *)(*a2 + 4 * __N * v9);
      __B.imagp = v12;
      uint64_t v13 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v13 + 4 * __N * v9);
      __A.imagp = (float *)(v13 + 4 * v11);
      vDSP_zvcma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 8));
    vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  }
  vDSP_zvmags(&__D, 1, *(float **)(a1 + 152), 1, v6);
  vDSP_vmul(*(const float **)(a1 + 152), 1, *(const float **)(a1 + 48), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
  vvexpf(*a3, *(const float **)(a1 + 152), (const int *)(a1 + 104));
  vvexpf(*(float **)(a1 + 152), *(const float **)(a1 + 48), (const int *)(a1 + 104));
  vDSP_vsub(*a3, 1, *(const float **)(a1 + 152), 1, *a3, 1, *(unsigned int *)(a1 + 12));
  vDSP_vmul(*(const float **)(a1 + 72), 1, *a3, 1, *a3, 1, *(unsigned int *)(a1 + 12));
  vvlogf(*a3, *a3, (const int *)(a1 + 104));
}

void ComplementWatsonModelSV::~ComplementWatsonModelSV(ComplementWatsonModelSV *this)
{
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

void ComplementWatsonModelSV::UpdateNormConst(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float a6)
{
  uint64_t v6 = a1 + 96;
  vKummerFirstKind(*a2, a2[1], *(void *)(a1 + 152), *(float *)(a1 + 96), *(float *)(a1 + 108), a5, a6);
  vvexpf(*(float **)(v6 - 24), *(const float **)(v6 - 48), (const int *)(v6 + 8));
  vDSP_vsmul(*(const float **)(v6 - 24), 1, (const float *)(v6 + 20), *(float **)(v6 - 24), 1, *(unsigned int *)(v6 - 84));
  vDSP_vsmul(*(const float **)(v6 + 56), 1, (const float *)(v6 + 20), *(float **)(v6 + 56), 1, *(unsigned int *)(v6 - 84));
  vDSP_vsub(*(const float **)(v6 + 56), 1, *(const float **)(v6 - 24), 1, *(float **)(v6 - 24), 1, *(unsigned int *)(v6 - 84));
  int v7 = *(float **)(v6 - 24);
  vDSP_Length v8 = *(unsigned int *)(v6 - 84);

  vDSP_svdiv((const float *)v6, v7, 1, v7, 1, v8);
}

void ComplementWatsonModelSV::UpdateNormConst(ComplementWatsonModelSV *this, float a2, double a3, double a4, float a5)
{
  KummerFirstKind(*((float *)this + 24), *((float *)this + 27), a2, a5);
  float v7 = *((float *)this + 29);
  float __A = 1.0 / (float)((float)(v7 * expf(a2)) - (float)(v7 * v8));
  vDSP_vfill(&__A, *((float **)this + 9), 1, *((unsigned int *)this + 3));
}

void SumMixWatsonModelSV::GetValue(uint64_t a1, void *a2, void *a3)
{
  vDSP_vclr(*(float **)(a1 + 128), 1, (2 * *(_DWORD *)(a1 + 12)));
  int v7 = *(_DWORD *)(a1 + 8);
  vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  __D.unint64_t realp = *(float **)(a1 + 128);
  __D.imagp = &__D.realp[v6];
  if (v7)
  {
    unsigned int v8 = 0;
    do
    {
      vDSP_Length __N = *(unsigned int *)(a1 + 12);
      unsigned int v10 = *(_DWORD *)(a1 + 16) + __N * v8;
      unsigned int v11 = (float *)(*a2 + 4 * v10);
      __B.unint64_t realp = (float *)(*a2 + 4 * __N * v8);
      __B.imagp = v11;
      uint64_t v12 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v12 + 4 * __N * v8);
      __A.imagp = (float *)(v12 + 4 * v10);
      vDSP_zvcma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 8));
    vDSP_Length v6 = *(unsigned int *)(a1 + 12);
  }
  vDSP_zvneg(&__D, 1, &__D, 1, v6);
  vDSP_vclr(*(float **)(a1 + 176), 1, (2 * *(_DWORD *)(a1 + 16)));
  if (*(_DWORD *)(a1 + 8))
  {
    unsigned int v13 = 0;
    do
    {
      vDSP_Length v14 = *(unsigned int *)(a1 + 12);
      unsigned int v15 = *(_DWORD *)(a1 + 16) + v14 * v13;
      uint64_t v16 = (float *)(*a2 + 4 * v15);
      __B.unint64_t realp = (float *)(*a2 + 4 * v14 * v13);
      __B.imagp = v16;
      uint64_t v17 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v17 + 4 * v14 * v13);
      __A.imagp = (float *)(v17 + 4 * v15);
      uint64_t v18 = *(void *)(a1 + 176);
      v24.unint64_t realp = (float *)(v18 + 4 * v14 * v13);
      v24.imagp = (float *)(v18 + 4 * v15);
      vDSP_zvma(&__D, 1, &__A, 1, &__B, 1, &v24, 1, v14);
      ++v13;
      unsigned int v19 = *(_DWORD *)(a1 + 8);
    }
    while (v13 < v19);
    if (v19)
    {
      unsigned int v20 = 0;
      do
      {
        vDSP_Length v21 = *(unsigned int *)(a1 + 12);
        uint64_t v22 = *(void *)(a1 + 176);
        char v23 = (float *)(v22 + 4 * (*(_DWORD *)(a1 + 16) + v21 * v20));
        __B.unint64_t realp = (float *)(v22 + 4 * v21 * v20);
        __B.imagp = v23;
        vDSP_zvmags(&__B, 1, *(float **)(a1 + 152), 1, v21);
        vDSP_vmul(*(const float **)(a1 + 152), 1, *(const float **)(a1 + 48), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
        vDSP_vadd(*(const float **)(a1 + 152), 1, *(const float **)(a1 + 72), 1, (float *)(*a3 + 4 * *(_DWORD *)(a1 + 12) * v20++), 1, *(unsigned int *)(a1 + 12));
      }
      while (v20 < *(_DWORD *)(a1 + 8));
    }
  }
}

void SumMixWatsonModelSV::~SumMixWatsonModelSV(SumMixWatsonModelSV *this)
{
  *(void *)this = &unk_1F14C7740;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14C7740;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }

  CircularModelSV::~CircularModelSV(this);
}

void SumMixWatsonModelSV::UpdateNormConst(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float a6)
{
  vKummerFirstKind(*a2, a2[1], *(void *)(a1 + 152), *(float *)(a1 + 96), *(float *)(a1 + 108), a5, a6);
  vDSP_vsmul(*(const float **)(a1 + 152), 1, (const float *)(a1 + 112), *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 12));
  vvlogf(*(float **)(a1 + 72), *(const float **)(a1 + 72), (const int *)(a1 + 104));
  vDSP_vneg(*(const float **)(a1 + 72), 1, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 12));
  int v7 = *(float **)(a1 + 72);
  vDSP_Length v8 = *(unsigned int *)(a1 + 12);

  vDSP_vsadd(v7, 1, (const float *)(a1 + 120), v7, 1, v8);
}

void SumMixWatsonModelSV::UpdateNormConst(SumMixWatsonModelSV *this, float a2, double a3, double a4, float a5)
{
  KummerFirstKind(*((float *)this + 24), *((float *)this + 27), a2, a5);
  float v6 = *((float *)this + 30);
  float __A = v6 - logf(v7 * *((float *)this + 28));
  vDSP_vfill(&__A, *((float **)this + 9), 1, *((unsigned int *)this + 3));
}

void UniformModelSV::GetValue(uint64_t a1, uint64_t a2, float **a3)
{
  float __A = logf(1.0 / *(float *)(a1 + 116));
  vDSP_vfill(&__A, *a3, 1, *(unsigned int *)(a1 + 12));
}

void UniformModelSV::~UniformModelSV(UniformModelSV *this)
{
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

void UniformModelSV::UpdateNormConst(uint64_t a1)
{
  vDSP_vfill((const float *)(a1 + 100), *(float **)(a1 + 48), 1, *(unsigned int *)(a1 + 12));
  uint64_t v2 = *(float **)(a1 + 72);
  vDSP_Length v3 = *(unsigned int *)(a1 + 12);

  vDSP_vfill((const float *)(a1 + 96), v2, 1, v3);
}

void UniformModelSV::UpdateNormConst(UniformModelSV *this, float a2)
{
  vDSP_vfill((const float *)this + 25, *((float **)this + 6), 1, *((unsigned int *)this + 3));
  vDSP_Length v3 = (float *)*((void *)this + 9);
  vDSP_Length v4 = *((unsigned int *)this + 3);

  vDSP_vfill((const float *)this + 24, v3, 1, v4);
}

void GaussLSModelSV::GetValue(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*(float **)(a1 + 128), 1, (2 * *(_DWORD *)(a1 + 12)));
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  __D.unint64_t realp = *(float **)(a1 + 128);
  unint64_t realp = __D.realp;
  __D.imagp = &__D.realp[v7];
  if (v8)
  {
    unsigned int v9 = 0;
    do
    {
      vDSP_Length __N = *(unsigned int *)(a1 + 12);
      unsigned int v11 = *(_DWORD *)(a1 + 16) + __N * v9;
      uint64_t v12 = (float *)(*a2 + 4 * v11);
      __B.unint64_t realp = (float *)(*a2 + 4 * __N * v9);
      __B.imagp = v12;
      uint64_t v13 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v13 + 4 * __N * v9);
      __A.imagp = (float *)(v13 + 4 * v11);
      vDSP_zvcma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 8));
    unint64_t realp = *(float **)(a1 + 128);
    LODWORD(v7) = *(_DWORD *)(a1 + 12);
  }
  vDSP_vmul(realp, 1, realp, 1, realp, 1, (2 * v7));
  vDSP_vadd(*(const float **)(a1 + 128), 1, (const float *)(*(void *)(a1 + 128) + 4 * *(unsigned int *)(a1 + 12)), 1, *(float **)(a1 + 128), 1, *(unsigned int *)(a1 + 12));
  vDSP_vclr(*(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
  if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
  {
    unsigned int v14 = 0;
    do
    {
      unsigned int v15 = (const float *)(*a2 + 4 * *(_DWORD *)(a1 + 12) * v14);
      vDSP_vma(v15, 1, v15, 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
      ++v14;
    }
    while (v14 < 2 * *(_DWORD *)(a1 + 8));
  }
  vDSP_vsub(*(const float **)(a1 + 128), 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
  vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
  vDSP_vneg(*(const float **)(a1 + 152), 1, *a3, 1, *(unsigned int *)(a1 + 12));
}

void GaussLSModelSV::~GaussLSModelSV(GaussLSModelSV *this)
{
  *(void *)this = &unk_1F14C77D0;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14C77D0;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }

  CircularModelSV::~CircularModelSV(this);
}

void GaussLSModelSV::UpdateNormConst(uint64_t a1)
{
  float __A = 1.0;
  vDSP_vfill(&__A, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 12));
}

void GaussLSModelSV::UpdateNormConst(float **this, float a2)
{
  float __A = 1.0;
  vDSP_vfill(&__A, this[9], 1, *((unsigned int *)this + 3));
}

void SumMixGaussLSModelSV::GetValue(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*a3, 1, *(unsigned int *)(a1 + 16));
  if (*(_DWORD *)(a1 + 8))
  {
    unsigned int v6 = 0;
    do
    {
      vDSP_Length v7 = *(unsigned int *)(a1 + 12);
      int v8 = *(_DWORD *)(a1 + 16);
      __C.unint64_t realp = *(float **)(a1 + 128);
      __C.imagp = &__C.realp[v7];
      uint64_t v9 = *(void *)(a1 + 24);
      __A.unint64_t realp = (float *)(v9 + 4 * v7 * v6);
      __A.imagp = (float *)(v9 + 4 * (v8 + v7 * v6));
      vDSP_zvconj(&__A, 1, &__C, 1, v7);
      vDSP_zvneg(&__C, 1, &__C, 1, *(unsigned int *)(a1 + 12));
      vDSP_vclr(*(float **)(a1 + 176), 1, (2 * *(_DWORD *)(a1 + 16)));
      if (*(_DWORD *)(a1 + 8))
      {
        unsigned int v10 = 0;
        do
        {
          vDSP_Length v11 = *(unsigned int *)(a1 + 12);
          uint64_t v12 = *(void *)(a1 + 24);
          unsigned int v13 = *(_DWORD *)(a1 + 16) + v11 * v10;
          __B.unint64_t realp = (float *)(v12 + 4 * v11 * v10);
          __B.imagp = (float *)(v12 + 4 * v13);
          uint64_t v14 = *(void *)(a1 + 176);
          __D.unint64_t realp = (float *)(v14 + 4 * v11 * v10);
          __D.imagp = (float *)(v14 + 4 * v13);
          vDSP_zvmul(&__C, 1, &__B, 1, &__D, 1, v11, 1);
          ++v10;
        }
        while (v10 < *(_DWORD *)(a1 + 8));
      }
      vDSP_Length v15 = *(unsigned int *)(a1 + 12);
      uint64_t v16 = (float *)(*(void *)(a1 + 176) + 4 * v15 * v6);
      vDSP_vsadd(v16, 1, (const float *)(a1 + 96), v16, 1, v15);
      vDSP_vclr(*(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
      if (*(_DWORD *)(a1 + 8))
      {
        unsigned int v17 = 0;
        do
        {
          vDSP_Length v18 = *(unsigned int *)(a1 + 12);
          uint64_t v19 = *(void *)(a1 + 176);
          unsigned int v20 = (float *)(v19 + 4 * (*(_DWORD *)(a1 + 16) + v18 * v17));
          __B.unint64_t realp = (float *)(v19 + 4 * v18 * v17);
          __B.imagp = v20;
          vDSP_zvmgsa(&__B, 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, v18);
          ++v17;
        }
        while (v17 < *(_DWORD *)(a1 + 8));
      }
      float v42 = 2.2204e-16;
      vDSP_vthr(*(const float **)(a1 + 152), 1, &v42, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
      vDSP_svdiv((const float *)(a1 + 96), *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
      if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
      {
        unsigned int v21 = 0;
        do
        {
          vDSP_Length v22 = *(unsigned int *)(a1 + 12);
          char v23 = (float *)(*(void *)(a1 + 176) + 4 * v22 * v21);
          vDSP_vmul(v23, 1, *(const float **)(a1 + 152), 1, v23, 1, v22);
          ++v21;
        }
        while (v21 < 2 * *(_DWORD *)(a1 + 8));
      }
      vDSP_vclr(*(float **)(a1 + 128), 1, (2 * *(_DWORD *)(a1 + 12)));
      int v25 = *(_DWORD *)(a1 + 8);
      vDSP_Length v24 = *(unsigned int *)(a1 + 12);
      char v26 = (float *)(*(void *)(a1 + 128) + 4 * v24);
      __B.unint64_t realp = *(float **)(a1 + 128);
      __B.imagp = v26;
      if (v25)
      {
        unsigned int v27 = 0;
        do
        {
          vDSP_Length __N = *(unsigned int *)(a1 + 12);
          unsigned int v29 = *(_DWORD *)(a1 + 16) + __N * v27;
          size_t v30 = (float *)(*a2 + 4 * v29);
          __D.unint64_t realp = (float *)(*a2 + 4 * __N * v27);
          __D.imagp = v30;
          uint64_t v31 = *(void *)(a1 + 176);
          v41.unint64_t realp = (float *)(v31 + 4 * __N * v27);
          v41.imagp = (float *)(v31 + 4 * v29);
          vDSP_zvcma(&v41, 1, &__D, 1, &__B, 1, &__B, 1, __N);
          ++v27;
        }
        while (v27 < *(_DWORD *)(a1 + 8));
        vDSP_Length v24 = *(unsigned int *)(a1 + 12);
      }
      vDSP_zvneg(&__B, 1, &__B, 1, v24);
      vDSP_zrvmul(&__B, 1, *(const float **)(a1 + 152), 1, &__B, 1, *(unsigned int *)(a1 + 12));
      vDSP_vclr(*(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
      int v33 = *(_DWORD *)(a1 + 8);
      vDSP_Length v32 = *(unsigned int *)(a1 + 12);
      uint64_t v34 = (float *)(*(void *)(a1 + 200) + 4 * v32);
      __D.unint64_t realp = *(float **)(a1 + 200);
      __D.imagp = v34;
      if (v33)
      {
        unsigned int v35 = 0;
        do
        {
          vDSP_Length v36 = *(unsigned int *)(a1 + 12);
          unsigned int v37 = *(_DWORD *)(a1 + 16) + v36 * v35;
          uint64_t v38 = (float *)(*a2 + 4 * v37);
          v41.unint64_t realp = (float *)(*a2 + 4 * v36 * v35);
          v41.imagp = v38;
          uint64_t v39 = *(void *)(a1 + 176);
          v40.unint64_t realp = (float *)(v39 + 4 * v36 * v35);
          v40.imagp = (float *)(v39 + 4 * v37);
          vDSP_zvma(&__B, 1, &v40, 1, &v41, 1, &__D, 1, v36);
          vDSP_zvmgsa(&__D, 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, *(unsigned int *)(a1 + 12));
          ++v35;
        }
        while (v35 < *(_DWORD *)(a1 + 8));
        vDSP_Length v32 = *(unsigned int *)(a1 + 12);
      }
      vDSP_vmul(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 152), 1, *(float **)(a1 + 152), 1, v32);
      vDSP_vneg(*(const float **)(a1 + 152), 1, &(*a3)[*(_DWORD *)(a1 + 12) * v6++], 1, *(unsigned int *)(a1 + 12));
    }
    while (v6 < *(_DWORD *)(a1 + 8));
  }
}

void SumMixGaussLSModelSV::~SumMixGaussLSModelSV(SumMixGaussLSModelSV *this)
{
  *(void *)this = &unk_1F14C7818;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  vDSP_Length v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  CircularModelSV::~CircularModelSV(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14C7818;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  vDSP_Length v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }

  CircularModelSV::~CircularModelSV(this);
}

void SumMixGaussLSModelSV::UpdateNormConst(uint64_t a1, const float **a2)
{
}

float SumMixGaussLSModelSV::UpdateNormConst(float **this, float a2)
{
  float __A = -a2;
  vDSP_vfill(&__A, this[9], 1, *((unsigned int *)this + 3));
  return result;
}

uint64_t complementaryModelType(unsigned int a1)
{
  if (a1 >= 5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unknown input parameter!");
  }
  return dword_1BB87CE10[a1];
}

void sub_1BB324B74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void CircularModelDOA::SetTargetDOA(CircularModelDOA *this, float a2, float a3, float a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *((float *)this + 3) = a2;
  if (a3 >= -90.0 && a3 <= 90.0)
  {
    *((float *)this + 4) = a3;
    goto LABEL_14;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    int v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      goto LABEL_14;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = *((float *)this + 4);
    int v12 = 136315906;
    unsigned int v13 = "CircularModels.cpp";
    __int16 v14 = 1024;
    int v15 = 143;
    __int16 v16 = 2048;
    double v17 = a3;
    __int16 v18 = 2048;
    double v19 = v9;
    _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CircularModels: Target elevation not set to (%f), it remains at the current value (%f). Elevation should be in range [-90, 90].\n", (uint8_t *)&v12, 0x26u);
  }
LABEL_14:
  if (a4 >= 0.0)
  {
    *((float *)this + 5) = a4;
    return;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1) {
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    unsigned int v10 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    unsigned int v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = *((float *)this + 5);
    int v12 = 136315906;
    unsigned int v13 = "CircularModels.cpp";
    __int16 v14 = 1024;
    int v15 = 159;
    __int16 v16 = 2048;
    double v17 = a4;
    __int16 v18 = 2048;
    double v19 = v11;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CircularModels: Target distance not set to (%f), it remains at the current value (%f). Distance must be nonnegative.\n", (uint8_t *)&v12, 0x26u);
  }
}

void CircularModelSV::SetTargetSV(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *(const void **)a2;
  size_t v6 = *(void *)(a2 + 8) - (void)v4;
  uint64_t v8 = a1 + 24;
  vDSP_Length v7 = *(void **)(a1 + 24);
  if (v6 == *(void *)(v8 + 8) - (void)v7)
  {
    memcpy(v7, v4, v6);
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_8552);
    }
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      double v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(void *)AUSpatialProbabilityLogScope(void)::scope) {
        return;
      }
    }
    else
    {
      double v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
      uint64_t v11 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2;
      int v12 = 136315906;
      unsigned int v13 = "CircularModels.cpp";
      __int16 v14 = 1024;
      int v15 = 487;
      __int16 v16 = 2048;
      uint64_t v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = v11;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CircularModels: TargetSV not set. Input length (%lu) and internal length (%lu) do not match.\n", (uint8_t *)&v12, 0x26u);
    }
  }
}

uint64_t VoiceProcessorV8::ReblockerForOCNSAndSpeechEnhancer(VoiceProcessorV8 *this, uint64_t a2, const AudioBufferList **a3, AudioBufferList **a4)
{
  return 0;
}

float VoiceProcessorV5::GetDynamicDuckingOffset(VoiceProcessorV5 *this)
{
  return 1.0;
}

uint64_t VoiceProcessorV8::ApplyPortSubtypeTuningOverride(VoiceProcessorV8 *this, unsigned int a2)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  vDSP_Length v3 = (char *)this + 15961;
  if ((*(unsigned int (**)(VoiceProcessorV8 *, void, void, void))(*(void *)this + 528))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    vDSP_Length v4 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      float v5 = (*v4 ? *v4 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 444;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v141;
        _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with HW EQ AU preset override detected %s", buf, 0x1Cu);
      }
    }
    size_t v6 = (int *)*((void *)this + 1578);
    if (v6 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v7 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v6, 5, v7, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 444, "ApplyPortSubtypeTuningOverride", "known headphones with HW EQ AU preset override detected %s", (const char *)buf);
    }
    long long v157 = 0u;
    memset(v158, 0, sizeof(v158));
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    memset(buf, 0, sizeof(buf));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, a2);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__str, *((_DWORD *)this + 23));
    snprintf((char *)buf, 0xFFuLL, "%s_vprx_tmst_%s", v141, (const char *)&__str);
    uint64_t v8 = *((void *)this + 341);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
    __str.__r_.__value_.__s.__data_[8] = 1;
    CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
    char v145 = 1;
    CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
    char v139 = 1;
    *(void *)unsigned int v141 = &__str;
    *(void *)&v141[8] = &cf;
    *(void *)&v141[16] = &v138;
    uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v8, (const __CFString ***)v141, 3u, 1u);
    CACFString::~CACFString((CACFString *)&v138);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&__str);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v10 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v11 = (*v10 ? *v10 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v12 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            int v12 = (void *)*v12;
          }
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 453;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = v12;
          __int16 v142 = 2080;
          int v143 = (const char *)buf;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v141, 0x26u);
        }
      }
      unsigned int v13 = (int *)*((void *)this + 1578);
      if (v13 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
        {
          uint64_t v133 = (int *)*((void *)this + 1578);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          unsigned int v13 = v133;
        }
        __int16 v14 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          __int16 v14 = *(const char **)v14;
        }
        CALegacyLog::log(v13, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 453, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v14, (const char *)buf);
      }
    }
    CFTypeRef cf = 0;
    int v15 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
    CFTypeRef cf = v15;
    if (v15) {
      BOOL v16 = TuningInSubdirs == 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      CFRetain(v15);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1473, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v17 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        __int16 v18 = (*v17 ? *v17 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 463;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)TM";
          _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone EQ aupreset:%s for %s", v141, 0x26u);
        }
      }
      uint64_t v19 = (int *)*((void *)this + 1578);
      if (v19 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v19, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 463, "ApplyPortSubtypeTuningOverride", "found Headphone EQ aupreset:%s for %s", (const char *)buf, "(DL-)TM");
      }
      std::string::basic_string[abi:ne180100]<0>(v141, "(DL-)TM");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
      uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4584, v141, (uint64_t)&std::piecewise_construct, (long long **)&__str);
      std::string::__assign_external((std::string *)(v20 + 40), (const std::string::value_type *)buf);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v21 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        vDSP_Length v22 = (*v21 ? *v21 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 467;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)TM";
          _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to load Headphone EQ tuning aupreset:%s for %s", v141, 0x26u);
        }
      }
      char v23 = (int *)*((void *)this + 1578);
      if (v23 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v23, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 467, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone EQ tuning aupreset:%s for %s", (const char *)buf, "(DL-)TM");
      }
    }
  }
  else
  {
    uint64_t TuningInSubdirs = 0;
  }
  if ((*(unsigned int (**)(VoiceProcessorV8 *, void, void, void))(*(void *)this + 528))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    vDSP_Length v24 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      int v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 472;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v141;
        _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with downlink deesser AU preset override detected %s", buf, 0x1Cu);
      }
    }
    char v26 = (int *)*((void *)this + 1578);
    if (v26 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v27 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v26, 5, v27, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 472, "ApplyPortSubtypeTuningOverride", "known headphones with downlink deesser AU preset override detected %s", (const char *)buf);
    }
    long long v157 = 0u;
    memset(v158, 0, sizeof(v158));
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    memset(buf, 0, sizeof(buf));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, a2);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__str, *((_DWORD *)this + 23));
    snprintf((char *)buf, 0xFFuLL, "%s_vprx_dees_%s", v141, (const char *)&__str);
    uint64_t v28 = *((void *)this + 341);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
    __str.__r_.__value_.__s.__data_[8] = 1;
    CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
    char v145 = 1;
    CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
    char v139 = 1;
    *(void *)unsigned int v141 = &__str;
    *(void *)&v141[8] = &cf;
    *(void *)&v141[16] = &v138;
    uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v28, (const __CFString ***)v141, 3u, 1u);
    CACFString::~CACFString((CACFString *)&v138);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&__str);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v29 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        size_t v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v31 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            uint64_t v31 = (void *)*v31;
          }
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 480;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = v31;
          __int16 v142 = 2080;
          int v143 = (const char *)buf;
          _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to find downlink deesser aupreset: %s/Generic/Headphones/%s, using preset from strip", v141, 0x26u);
        }
      }
      vDSP_Length v32 = (int *)*((void *)this + 1578);
      if (v32 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1)
        {
          uint64_t v134 = (int *)*((void *)this + 1578);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          vDSP_Length v32 = v134;
        }
        int v33 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          int v33 = *(const char **)v33;
        }
        CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 480, "ApplyPortSubtypeTuningOverride", ": failed to find downlink deesser aupreset: %s/Generic/Headphones/%s, using preset from strip", v33, (const char *)buf);
      }
    }
    CFTypeRef cf = 0;
    uint64_t v34 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
    CFTypeRef cf = v34;
    if (v34) {
      BOOL v35 = TuningInSubdirs == 0;
    }
    else {
      BOOL v35 = 0;
    }
    if (v35)
    {
      CFRetain(v34);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1398, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      vDSP_Length v36 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        unsigned int v37 = (*v36 ? *v36 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 490;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)FEVDeesser";
          _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone deesser aupreset:%s for %s", v141, 0x26u);
        }
      }
      uint64_t v38 = (int *)*((void *)this + 1578);
      if (v38 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v38, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 490, "ApplyPortSubtypeTuningOverride", "found Headphone deesser aupreset:%s for %s", (const char *)buf, "(DL-)FEVDeesser");
      }
      std::string::basic_string[abi:ne180100]<0>(v141, "(DL-)FEVDeesser");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
      uint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4584, v141, (uint64_t)&std::piecewise_construct, (long long **)&__str);
      std::string::__assign_external((std::string *)(v39 + 40), (const std::string::value_type *)buf);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      DSPSplitComplex v40 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        DSPSplitComplex v41 = (*v40 ? *v40 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 493;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)FEVDeesser";
          _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to load Headphone deesser tuning aupreset:%s for %s", v141, 0x26u);
        }
      }
      float v42 = (int *)*((void *)this + 1578);
      if (v42 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v42, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 493, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone deesser tuning aupreset:%s for %s", (const char *)buf, "(DL-)FEVDeesser");
      }
    }
  }
  if ((*(unsigned int (**)(VoiceProcessorV8 *, void, void, void))(*(void *)this + 528))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    std::__fs::filesystem::path v43 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      std::string v44 = (*v43 ? *v43 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 498;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v141;
        _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headset with mic EQ AU preset override detected %s", buf, 0x1Cu);
      }
    }
    uint64_t v45 = (int *)*((void *)this + 1578);
    if (v45 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v46 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v45, 5, v46, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 498, "ApplyPortSubtypeTuningOverride", "known headset with mic EQ AU preset override detected %s", (const char *)buf);
    }
    long long v157 = 0u;
    memset(v158, 0, sizeof(v158));
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    memset(buf, 0, sizeof(buf));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, a2);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__str, *((_DWORD *)this + 23));
    snprintf((char *)buf, 0xFFuLL, "%s_vptx_%s", v141, (const char *)&__str);
    uint64_t v47 = *((void *)this + 341);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
    __str.__r_.__value_.__s.__data_[8] = 1;
    CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
    char v145 = 1;
    CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
    char v139 = 1;
    *(void *)unsigned int v141 = &__str;
    *(void *)&v141[8] = &cf;
    *(void *)&v141[16] = &v138;
    uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v47, (const __CFString ***)v141, 3u, 1u);
    CACFString::~CACFString((CACFString *)&v138);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&__str);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v48 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        long long v49 = (*v48 ? *v48 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          float v50 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            float v50 = (void *)*v50;
          }
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 505;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = v50;
          __int16 v142 = 2080;
          int v143 = (const char *)buf;
          _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to find headset EQ aupreset: %s/Generic/Headphones/%s, trying without usecase", v141, 0x26u);
        }
      }
      std::string v51 = (int *)*((void *)this + 1578);
      if (v51 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v52 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          uint64_t v52 = *(const char **)v52;
        }
        CALegacyLog::log(v51, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 505, "ApplyPortSubtypeTuningOverride", ": failed to find headset EQ aupreset: %s/Generic/Headphones/%s, trying without usecase", v52, (const char *)buf);
      }
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, a2);
      snprintf((char *)buf, 0xFFuLL, "%s_vptx", v141);
      uint64_t v53 = *((void *)this + 341);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
      __str.__r_.__value_.__s.__data_[8] = 1;
      CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
      char v145 = 1;
      CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
      char v139 = 1;
      *(void *)unsigned int v141 = &__str;
      *(void *)&v141[8] = &cf;
      *(void *)&v141[16] = &v138;
      uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v53, (const __CFString ***)v141, 3u, 1u);
      CACFString::~CACFString((CACFString *)&v138);
      CACFString::~CACFString((CACFString *)&cf);
      CACFString::~CACFString((CACFString *)&__str);
    }
    CFTypeRef cf = 0;
    float v54 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
    CFTypeRef cf = v54;
    if (TuningInSubdirs || !v54)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v59 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        float v60 = (*v59 ? *v59 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 519;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(UL-)Mic1EQ";
          _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to load headset EQ tuning aupreset:%s for %s", v141, 0x26u);
        }
      }
      float v61 = (int *)*((void *)this + 1578);
      if (v61 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v61, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 519, "ApplyPortSubtypeTuningOverride", ": failed to load headset EQ tuning aupreset:%s for %s", (const char *)buf, "(UL-)Mic1EQ");
      }
    }
    else
    {
      CFRetain(v54);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 905, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v55 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        float v56 = (*v55 ? *v55 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 516;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(UL-)Mic1EQ";
          _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found headset EQ aupreset:%s for %s", v141, 0x26u);
        }
      }
      float v57 = (int *)*((void *)this + 1578);
      if (v57 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v57, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 516, "ApplyPortSubtypeTuningOverride", "found headset EQ aupreset:%s for %s", (const char *)buf, "(UL-)Mic1EQ");
      }
      std::string::basic_string[abi:ne180100]<0>(v141, "(UL-)Mic1EQ");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
      uint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4624, v141, (uint64_t)&std::piecewise_construct, (long long **)&__str);
      std::string::__assign_external((std::string *)(v58 + 40), (const std::string::value_type *)buf);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
    }
  }
  uint64_t v62 = **((unsigned int **)this + 292);
  uint64_t v63 = *((unsigned int *)this + 596);
  if (v62 == 1885892727 && (v63 & 0xFFFFFFFE) == 0x62363066)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v64 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v65 = (*v64 ? *v64 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 524;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v141;
        _os_log_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with SpeechEnhancer AU preset override detected %s", buf, 0x1Cu);
      }
    }
    uint64_t v66 = (int *)*((void *)this + 1578);
    if (v66 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v67 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v66, 5, v67, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 524, "ApplyPortSubtypeTuningOverride", "known headphones with SpeechEnhancer AU preset override detected %s", (const char *)buf);
    }
    long long v157 = 0u;
    memset(v158, 0, sizeof(v158));
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    memset(buf, 0, sizeof(buf));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, a2);
    snprintf((char *)buf, 0xFFuLL, "%s_vprx_spen", v141);
    uint64_t v68 = *((void *)this + 341);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
    __str.__r_.__value_.__s.__data_[8] = 1;
    CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
    char v145 = 1;
    CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
    char v139 = 1;
    *(void *)unsigned int v141 = &__str;
    *(void *)&v141[8] = &cf;
    *(void *)&v141[16] = &v138;
    uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v68, (const __CFString ***)v141, 3u, 1u);
    CACFString::~CACFString((CACFString *)&v138);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&__str);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v69 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        long long v70 = (*v69 ? *v69 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          vDSP_Length v71 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            vDSP_Length v71 = (void *)*v71;
          }
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 530;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = v71;
          __int16 v142 = 2080;
          int v143 = (const char *)buf;
          _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to find Headphone SpeechEnhancer aupreset: %s/Generic/Headphones/%s, using preset from strip", v141, 0x26u);
        }
      }
      uint64_t v72 = (int *)*((void *)this + 1578);
      if (v72 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        vDSP_Length v73 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          vDSP_Length v73 = *(const char **)v73;
        }
        CALegacyLog::log(v72, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 530, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone SpeechEnhancer aupreset: %s/Generic/Headphones/%s, using preset from strip", v73, (const char *)buf);
      }
    }
    CFTypeRef cf = 0;
    long long v74 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
    CFTypeRef cf = v74;
    if (v74) {
      BOOL v75 = TuningInSubdirs == 0;
    }
    else {
      BOOL v75 = 0;
    }
    if (v75)
    {
      CFRetain(v74);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v76 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        long long v77 = (*v76 ? *v76 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 539;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)SpeechEnh";
          _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone SpeechEnhancer aupreset:%s for %s", v141, 0x26u);
        }
      }
      uint64_t v78 = (int *)*((void *)this + 1578);
      if (v78 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v78, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 539, "ApplyPortSubtypeTuningOverride", "found Headphone SpeechEnhancer aupreset:%s for %s", (const char *)buf, "(DL-)SpeechEnh");
      }
      std::string::basic_string[abi:ne180100]<0>(v141, "(DL-)SpeechEnh");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
      long long v79 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4584, v141, (uint64_t)&std::piecewise_construct, (long long **)&__str);
      std::string::__assign_external((std::string *)(v79 + 40), (const std::string::value_type *)buf);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v80 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        long long v81 = (*v80 ? *v80 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v141 = 136315906;
          *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&v141[12] = 1024;
          *(_DWORD *)&v141[14] = 542;
          *(_WORD *)&v141[18] = 2080;
          *(void *)&v141[20] = buf;
          __int16 v142 = 2080;
          int v143 = "(DL-)SpeechEnh";
          _os_log_impl(&dword_1BB0CE000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to load Headphone SpeechEnhancer tuning aupreset:%s for %s", v141, 0x26u);
        }
      }
      uint64_t v82 = (int *)*((void *)this + 1578);
      if (v82 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v82, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 542, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone SpeechEnhancer tuning aupreset:%s for %s", (const char *)buf, "(DL-)SpeechEnh");
      }
    }
    uint64_t v62 = **((unsigned int **)this + 292);
    uint64_t v63 = *((unsigned int *)this + 596);
  }
  if (v62 == 1885892727 && (v63 & 0xFFFFFFFE) == 0x62363066)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v83 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      long long v84 = (*v83 ? *v83 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 547;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v141;
        _os_log_impl(&dword_1BB0CE000, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with OCNS AU preset override detected %s", buf, 0x1Cu);
      }
    }
    uint64_t v85 = (int *)*((void *)this + 1578);
    if (v85 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v86 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v85, 5, v86, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 547, "ApplyPortSubtypeTuningOverride", "known headphones with OCNS AU preset override detected %s", (const char *)buf);
    }
    std::string::basic_string[abi:ne180100]<0>(v141, "telephony");
    if (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0)
    {
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__str, 0x7669736Fu);
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
      if ((v141[23] & 0x80000000) != 0) {
        operator delete(*(void **)v141);
      }
      *(_OWORD *)unsigned int v141 = *(_OWORD *)buf;
      *(void *)&v141[16] = *(void *)&buf[16];
    }
    std::operator+<char>();
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    long long v87 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      uint64_t v88 = (*v87 ? *v87 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&cf, *((_DWORD *)this + 596));
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = &cf;
        _os_log_impl(&dword_1BB0CE000, v88, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Using tuning override preset name for ocns: %s", buf, 0x1Cu);
      }
    }
    long long v89 = (int *)*((void *)this + 1578);
    if (v89 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v90 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
      CALegacyLog::log(v89, 3, v90, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 556, "ApplyPortSubtypeTuningOverride", "Using tuning override preset name for ocns: %s", (const char *)buf);
    }
    uint64_t v91 = *((void *)this + 341);
    CFTypeRef cf = CFStringCreateWithCString(0, "Generic", 0x600u);
    char v145 = 1;
    CFTypeRef v138 = CFStringCreateWithCString(0, "Headphones", 0x600u);
    char v139 = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    CFStringRef inData = CFStringCreateWithCString(0, (const char *)p_str, 0x600u);
    char v137 = 1;
    *(void *)std::string buf = &cf;
    *(void *)&buf[8] = &v138;
    *(void *)&buf[16] = &inData;
    uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v91, (const __CFString ***)buf, 3u, 1u);
    CACFString::~CACFString((CACFString *)&inData);
    CACFString::~CACFString((CACFString *)&v138);
    CACFString::~CACFString((CACFString *)&cf);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v93 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        long long v94 = (*v93 ? *v93 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v95 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            uint64_t v95 = (void *)*v95;
          }
          long long v96 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v96 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v95;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v96;
          _os_log_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to find Headphone OCNS aupreset: %s/Generic/Headphones/%s, using preset from strip", buf, 0x26u);
        }
      }
      uint64_t v97 = (int *)*((void *)this + 1578);
      if (v97 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v98 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          uint64_t v98 = *(const char **)v98;
        }
        long long v99 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v99 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        CALegacyLog::log(v97, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 559, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone OCNS aupreset: %s/Generic/Headphones/%s, using preset from strip", v98, (const char *)v99);
      }
    }
    CFTypeRef v138 = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v100 = &__str;
    }
    else {
      uint64_t v100 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v101 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)v100, 1u);
    CFTypeRef v138 = v101;
    if (TuningInSubdirs || !v101)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v108 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v109 = (*v108 ? *v108 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
        {
          vDSP_Length v110 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            vDSP_Length v110 = &__str;
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 571;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v110;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = "(UL-)OCNSV4";
          _os_log_impl(&dword_1BB0CE000, v109, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> : failed to load Headphone OCNS tuning aupreset:%s for %s", buf, 0x26u);
        }
      }
      vDSP_Length v111 = (int *)*((void *)this + 1578);
      if (v111 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v112 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v112 = &__str;
        }
        CALegacyLog::log(v111, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 571, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone OCNS tuning aupreset:%s for %s", (const char *)v112, "(UL-)OCNSV4");
      }
    }
    else
    {
      CFRetain(v101);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1046, 0, 0, 0, 8uLL, &v138, 1);
      CFRelease(v138);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      long long v102 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v103 = (*v102 ? *v102 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          long long v104 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v104 = &__str;
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 568;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v104;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = "(UL-)OCNSV4";
          _os_log_impl(&dword_1BB0CE000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone OCNS aupreset:%s for %s", buf, 0x26u);
        }
      }
      long long v105 = (int *)*((void *)this + 1578);
      if (v105 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v106 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v106 = &__str;
        }
        CALegacyLog::log(v105, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 568, "ApplyPortSubtypeTuningOverride", "found Headphone OCNS aupreset:%s for %s", (const char *)v106, "(UL-)OCNSV4");
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "(UL-)OCNSV4");
      CFTypeRef cf = buf;
      unsigned int v107 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4624, buf, (uint64_t)&std::piecewise_construct, (long long **)&cf);
      std::string::operator=((std::string *)(v107 + 40), &__str);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((v141[23] & 0x80000000) != 0) {
      operator delete(*(void **)v141);
    }
    uint64_t v62 = **((unsigned int **)this + 292);
    uint64_t v63 = *((unsigned int *)this + 596);
  }
  if ((*(unsigned int (**)(VoiceProcessorV8 *, uint64_t, uint64_t))(*(void *)this + 720))(this, v62, v63))
  {
    int v113 = *((_DWORD *)this + 21);
    if (v113 == 1718628662 || v113 == 1718628408)
    {
      LODWORD(inData) = 0;
      AudioUnitSetProperty(*((AudioUnit *)this + 405), 0x15u, 0, 0, &inData, 4u);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      vDSP_Length v114 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        unsigned int v115 = (*v114 ? *v114 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
        {
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v141, *((_DWORD *)this + 596));
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "VoiceProcessor_v8.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 579;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v141;
          _os_log_impl(&dword_1BB0CE000, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with ReverbSuppressor AU preset override detected %s", buf, 0x1Cu);
        }
      }
      vDSP_Length v116 = (int *)*((void *)this + 1578);
      if (v116 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v117 = VPLogScope(void)::scope;
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
        CALegacyLog::log(v116, 5, v117, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 579, "ApplyPortSubtypeTuningOverride", "known headphones with ReverbSuppressor AU preset override detected %s", (const char *)buf);
      }
      long long v157 = unk_1BB8D5968;
      memset(v158, 0, sizeof(v158));
      long long v153 = unk_1BB8D5928;
      long long v154 = xmmword_1BB8D5938;
      long long v155 = unk_1BB8D5948;
      long long v156 = xmmword_1BB8D5958;
      long long v149 = unk_1BB8D58E8;
      long long v150 = xmmword_1BB8D58F8;
      long long v151 = unk_1BB8D5908;
      long long v152 = xmmword_1BB8D5918;
      strcpy((char *)buf, "vptx_reverbsuppressor_telephony");
      *(_OWORD *)&buf[32] = xmmword_1BB8D58B8;
      long long v147 = unk_1BB8D58C8;
      long long v148 = xmmword_1BB8D58D8;
      uint64_t v118 = *((void *)this + 341);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "Generic", 0x600u);
      __str.__r_.__value_.__s.__data_[8] = 1;
      CFTypeRef cf = CFStringCreateWithCString(0, "Headphones", 0x600u);
      char v145 = 1;
      CFTypeRef v138 = CFStringCreateWithCString(0, (const char *)buf, 0x600u);
      char v139 = 1;
      *(void *)unsigned int v141 = &__str;
      *(void *)&v141[8] = &cf;
      *(void *)&v141[16] = &v138;
      uint64_t TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v118, (const __CFString ***)v141, 3u, 1u);
      CACFString::~CACFString((CACFString *)&v138);
      CACFString::~CACFString((CACFString *)&cf);
      CACFString::~CACFString((CACFString *)&__str);
      if (TuningInSubdirs)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unint64_t v119 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v120 = (*v119 ? *v119 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
          {
            int v121 = (void *)((char *)this + 8);
            if (*((char *)this + 31) < 0) {
              int v121 = (void *)*v121;
            }
            *(_DWORD *)unsigned int v141 = 136315906;
            *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
            *(_WORD *)&v141[12] = 1024;
            *(_DWORD *)&v141[14] = 585;
            *(_WORD *)&v141[18] = 2080;
            *(void *)&v141[20] = v121;
            __int16 v142 = 2080;
            int v143 = (const char *)buf;
            _os_log_impl(&dword_1BB0CE000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to find Headphone ReverbSuppressor aupreset: %s/Generic/Headphones/%s", v141, 0x26u);
          }
        }
        float v122 = (int *)*((void *)this + 1578);
        if (v122 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v123 = (char *)this + 8;
          if (*((char *)this + 31) < 0) {
            uint64_t v123 = *(const char **)v123;
          }
          CALegacyLog::log(v122, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 585, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone ReverbSuppressor aupreset: %s/Generic/Headphones/%s", v123, (const char *)buf);
        }
      }
      else
      {
        float v124 = TuningPListMgr::lookupPlist_(*((void *)this + 341), (const char *)buf, 1u);
        CFTypeRef cf = v124;
        if (v124)
        {
          CFRetain(v124);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1058, 0, 0, 0, 8uLL, &cf, 1);
          CFRelease(cf);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unint64_t v125 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v126 = (*v125 ? *v125 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)unsigned int v141 = 136315906;
              *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
              *(_WORD *)&v141[12] = 1024;
              *(_DWORD *)&v141[14] = 596;
              *(_WORD *)&v141[18] = 2080;
              *(void *)&v141[20] = buf;
              __int16 v142 = 2080;
              int v143 = "(UL-)ReverbSuppressor";
              _os_log_impl(&dword_1BB0CE000, v126, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone ReverbSuppressor aupreset:%s for %s", v141, 0x26u);
            }
          }
          uint64_t v127 = (int *)*((void *)this + 1578);
          if (v127 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v127, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 596, "ApplyPortSubtypeTuningOverride", "found Headphone ReverbSuppressor aupreset:%s for %s", (const char *)buf, "(UL-)ReverbSuppressor");
          }
          std::string::basic_string[abi:ne180100]<0>(v141, "(UL-)ReverbSuppressor");
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
          unsigned int v128 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4624, v141, (uint64_t)&std::piecewise_construct, (long long **)&__str);
          std::string::__assign_external((std::string *)(v128 + 40), (const std::string::value_type *)buf);
          if ((v141[23] & 0x80000000) != 0) {
            operator delete(*(void **)v141);
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v129 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v130 = (*v129 ? *v129 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int v141 = 136315906;
              *(void *)&v141[4] = "VoiceProcessor_v8.cpp";
              *(_WORD *)&v141[12] = 1024;
              *(_DWORD *)&v141[14] = 600;
              *(_WORD *)&v141[18] = 2080;
              *(void *)&v141[20] = buf;
              __int16 v142 = 2080;
              int v143 = "(UL-)ReverbSuppressor";
              _os_log_impl(&dword_1BB0CE000, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to load Headphone EQ tuning aupreset:%s for %s", v141, 0x26u);
            }
          }
          long long v131 = (int *)*((void *)this + 1578);
          if (v131 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v131, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/VoiceProcessor_v8.cpp", 600, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone EQ tuning aupreset:%s for %s", (const char *)buf, "(UL-)ReverbSuppressor");
          }
        }
      }
    }
  }
  return TuningInSubdirs;
}

void sub_1BB327E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void CAX4CCStringNoQuote::CAX4CCStringNoQuote(CAX4CCStringNoQuote *this, unsigned int a2)
{
  unsigned int v4 = bswap32(a2);
  *(_DWORD *)this = v4;
  uint64_t v5 = MEMORY[0x1E4F14390];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v6 = *((char *)this + 1);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v7 = *((char *)this + 2);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL)) {
      goto LABEL_17;
    }
LABEL_13:
    unsigned int v8 = *((char *)this + 3);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL)) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *((unsigned char *)this + 4) = 0;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_17:
  if (a2 + 199999 > 0x61A7E) {
    snprintf((char *)this, 0x10uLL, "0x%x");
  }
  else {
    snprintf((char *)this, 0x10uLL, "%d");
  }
}

void CALegacyLog::log(int *a1, int a2, uint64_t a3, char *a4, uint64_t a5, const char *a6, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (vsnprintf(__str, 0x400uLL, __format, va) < 0) {
    return;
  }
  if (!a3)
  {
    bzero(v32, 0x400uLL);
    LOBYTE(v12) = 31;
LABEL_7:
    uint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v13);
    int v17 = snprintf(v32, 0x400uLL, "%.2d:%.2d:%.2d.%.3d ", (int)((unint64_t)CurrentGregorianDate >> 24) >> 24, CurrentGregorianDate >> 56, (int)v16, (int)((v16 - (double)(int)v16) * 1000.0));
    unsigned int v14 = v17 & ~(v17 >> 31);
    if ((v12 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v12 = *(_DWORD *)(a3 + 48);
  bzero(v32, 0x400uLL);
  if (v12) {
    goto LABEL_7;
  }
  unsigned int v14 = 0;
  if ((v12 & 2) != 0)
  {
LABEL_8:
    int v18 = snprintf(&v32[v14], 1024 - v14, "%s", gPriorityStrings[a2 - 1]);
    v14 += v18 & ~(v18 >> 31);
  }
LABEL_9:
  if ((v12 & 4) != 0)
  {
    memset(v31, 0, sizeof(v31));
    uint64_t v19 = pthread_self();
    pthread_getname_np(v19, (char *)v31, 0x40uLL);
    if (LOBYTE(v31[0]))
    {
      int v20 = snprintf(&v32[v14], 1024 - v14, "[%s] ");
    }
    else
    {
      pthread_self();
      int v20 = snprintf(&v32[v14], 1024 - v14, "[%p] ");
    }
    v14 += v20 & ~(v20 >> 31);
    if (!a3) {
      goto LABEL_21;
    }
LABEL_16:
    if (*(void *)(a3 + 24))
    {
      unsigned int v21 = &v32[v14];
      size_t v22 = 1024 - v14;
      if (a2 >= 3) {
        int v23 = snprintf(v21, v22, "<%s> ");
      }
      else {
        int v23 = snprintf(v21, v22, ">%s> ");
      }
      v14 += v23 & ~(v23 >> 31);
    }
    goto LABEL_21;
  }
  if (a3) {
    goto LABEL_16;
  }
LABEL_21:
  if ((v12 & 8) != 0)
  {
    if (a4)
    {
      strrchr(a4, 47);
      int v24 = snprintf(&v32[v14], 1024 - v14, "%s:%d: ");
    }
    else
    {
      int v24 = snprintf(&v32[v14], 1024 - v14, "%d: ");
    }
    v14 += v24 & ~(v24 >> 31);
  }
  if (a6 && (v12 & 0x10) != 0)
  {
    int v25 = snprintf(&v32[v14], 1024 - v14, "%s: ", a6);
    v14 += v25 & ~(v25 >> 31);
  }
  snprintf(&v32[v14], 1024 - v14, "%s", __str);
  if (!a3
    || (char v26 = *(FILE **)(a3 + 56)) == 0
    || (fprintf(v26, "%s\n", v32), fflush(*(FILE **)(a3 + 56)), !*(unsigned char *)(a3 + 64)))
  {
    uint64_t v27 = (FILE *)*((void *)a1 + 1);
    if (v27)
    {
      fprintf(v27, "%s\n", v32);
      fflush(*((FILE **)a1 + 1));
    }
    else
    {
      if (a2 >= 3) {
        int v28 = 3;
      }
      else {
        int v28 = a2;
      }
      int v29 = *a1;
      if (*a1 == 3)
      {
        puts(v32);
      }
      else if (v29 == 2)
      {
        syslog(v28 + 2, "%s", v32);
      }
      else if (v29 == 1)
      {
        CFLog();
      }
    }
  }
}

void CACFString::~CACFString(CACFString *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void AUPropAndParamHelper::AddItemToAUPropsList(AUPropertyItem **a1, unsigned int a2, unsigned int a3, unsigned int a4, size_t size, void *a6, int a7)
{
  if (a7 && (unsigned int v8 = *a1, (v9 = a1[1] - *a1) != 0))
  {
    unint64_t v10 = v9 / 24;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    while (*(_DWORD *)v8 != a2 || *((_DWORD *)v8 + 1) != a3 || *((_DWORD *)v8 + 2) != a4)
    {
      unsigned int v8 = (AUPropertyItem *)((char *)v8 + 24);
      if (!--v10) {
        goto LABEL_9;
      }
    }
    AUPropertyItem::SetData(v8, size, a6);
  }
  else
  {
LABEL_9:
    DSPSplitComplex v40 = 0;
    unint64_t v37 = __PAIR64__(a3, a2);
    unsigned int v38 = a4;
    unsigned int v39 = 0;
    AUPropertyItem::SetData((AUPropertyItem *)&v37, size, a6);
    unint64_t v11 = (unint64_t)a1[2];
    int v12 = (unint64_t *)a1[1];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)*a1) >> 3);
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)*a1) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v17 + 1) {
        uint64_t v19 = v17 + 1;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      std::__fs::filesystem::path v43 = a1 + 2;
      unsigned int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v20);
      size_t v22 = (unint64_t *)&v21[24 * v17];
      DSPSplitComplex v41 = v21;
      *(void *)float v42 = v22;
      *(void *)&v42[8] = v22;
      *(void *)&v42[16] = &v21[24 * v23];
      void v22[2] = 0;
      unsigned int v25 = v38;
      size_t v24 = v39;
      int v15 = v40;
      *size_t v22 = v37;
      v22[1] = v25;
      AUPropertyItem::SetData((AUPropertyItem *)v22, v24, v15);
      char v26 = *(AUPropertyItem **)v42;
      *(void *)&v42[8] += 24;
      int v28 = *a1;
      uint64_t v27 = a1[1];
      *(void *)&long long v47 = *(void *)v42;
      *((void *)&v47 + 1) = *(void *)v42;
      long long v46 = v47;
      v44[0] = a1 + 2;
      v44[1] = &v46;
      void v44[2] = &v47;
      char v45 = 0;
      if (v27 != v28)
      {
        do
        {
          *((_DWORD *)v26 - 3) = 0;
          *((void *)v26 - 1) = 0;
          if (v27 != v26)
          {
            int v30 = *((_DWORD *)v27 - 4);
            size_t v29 = *((unsigned int *)v27 - 3);
            uint64_t v31 = (const void *)*((void *)v27 - 1);
            *((void *)v26 - 3) = *((void *)v27 - 3);
            vDSP_Length v32 = (AUPropertyItem *)((char *)v26 - 24);
            *((_DWORD *)v32 + 2) = v30;
            AUPropertyItem::SetData(v32, v29, v31);
            char v26 = (AUPropertyItem *)*((void *)&v47 + 1);
          }
          uint64_t v27 = (AUPropertyItem *)((char *)v27 - 24);
          char v26 = (AUPropertyItem *)((char *)v26 - 24);
          *((void *)&v47 + 1) = v26;
        }
        while (v27 != v28);
        int v15 = v40;
      }
      char v45 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,std::reverse_iterator<AUPropertyItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v44);
      uint64_t v33 = a1[2];
      long long v34 = *(_OWORD *)&v42[8];
      vDSP_Length v36 = *(AUPropertyItem **)&v42[8];
      long long v35 = *(_OWORD *)a1;
      *a1 = v26;
      *(_OWORD *)float v42 = v35;
      *(_OWORD *)(a1 + 1) = v34;
      *(void *)&v42[16] = v33;
      DSPSplitComplex v41 = (char *)v35;
      std::__split_buffer<AUPropertyItem>::~__split_buffer((uint64_t)&v41);
      double v16 = v36;
    }
    else
    {
      void v12[2] = 0;
      unsigned int v14 = v38;
      size_t v13 = v39;
      int v15 = v40;
      unint64_t *v12 = v37;
      v12[1] = v14;
      AUPropertyItem::SetData((AUPropertyItem *)v12, v13, v15);
      double v16 = (AUPropertyItem *)(v12 + 3);
      a1[1] = (AUPropertyItem *)(v12 + 3);
    }
    a1[1] = v16;
    if (v15) {
      free(v15);
    }
  }
}

void sub_1BB328710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13) {
    free(a13);
  }
  _Unwind_Resume(a1);
}

void AUPropertyItem::SetData(AUPropertyItem *this, size_t size, const void *a3)
{
  unsigned int v4 = size;
  unsigned int v6 = (void *)*((void *)this + 2);
  if (v6) {
    free(v6);
  }
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = 0;
  if (a3)
  {
    unsigned int v7 = malloc_type_malloc(v4, 0x2C8E6D5CuLL);
    unsigned int v8 = v7;
    if (v4 && !v7)
    {
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v10 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v7, v4);
    *((void *)this + 2) = v8;
    if (v8)
    {
      memcpy(v8, a3, v4);
      *((_DWORD *)this + 3) = v4;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

uint64_t std::__split_buffer<AUPropertyItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    unsigned int v4 = *(void **)(i - 8);
    if (v4)
    {
      free(v4);
      *(void *)(i - std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
    }
    *(void *)(i - 24) = 0;
    *(void *)(i - 16) = 0;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,std::reverse_iterator<AUPropertyItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    vDSP_Length v3 = *(void **)(*(void *)(a1 + 16) + 8);
    unsigned int v4 = *(void **)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = (void *)v3[2];
      if (v5)
      {
        free(v5);
        v3[2] = 0;
      }
      *vDSP_Length v3 = 0;
      v3[1] = 0;
      v3 += 3;
    }
  }
  return a1;
}

void VoiceProcessorV8::SetupDownlinkBasicAUChain(VoiceProcessorV8 *this)
{
  *((void *)this + 1112) = *((void *)this + 1112) & 0xFFFFEFF8FFFFFC53 | 0x1004000002A8;
}

uint64_t VoiceProcessorV8::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 4664);
    uint64_t v4 = v3 | 0x800101;
    uint64_t v5 = 8388895;
    if (a2 == 3) {
      uint64_t v5 = 8388879;
    }
    uint64_t v6 = v3 | v5;
    if (a2 >= 3)
    {
      BOOL v7 = a2 != 3;
    }
    else
    {
      uint64_t v6 = v3 | 0x800107;
      BOOL v7 = 0;
    }
    BOOL v8 = a2 >= 3;
    if (a2) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v4;
    }
    if (a2) {
      BOOL v10 = v7;
    }
    else {
      BOOL v10 = 0;
    }
    if (!a2) {
      BOOL v8 = 0;
    }
    unint64_t v11 = v9 & 0xF3FFFFFFBBFFE7FFLL;
    *(void *)(this + 4664) = v11 | 0xC00000004001800;
    if ((*(_DWORD *)(this + 72) & 0xFFFFFFFE) == 0x18)
    {
      if (v8) {
        uint64_t v12 = v11 | 0xC00000004001A00;
      }
      else {
        uint64_t v12 = v11 | 0xC00000004001800;
      }
      if (v10) {
        uint64_t v13 = v12 | 0x400;
      }
      else {
        uint64_t v13 = v12;
      }
      *(void *)(this + 4664) = v13 & 0xFFBA6FFFBC7FFFFFLL | 0x45100003800000;
    }
    this = VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)this);
    if (this == 2 && (*(unsigned char *)(v2 + 16608) & 4) != 0)
    {
      *(void *)(v2 + 4664) |= 0x1000000000000000uLL;
      if (*(unsigned char *)(v2 + 2246))
      {
        this = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)this);
        if (this) {
          *(void *)(v2 + 4672) |= 8uLL;
        }
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV8::SetupUplink_MMNS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    unint64_t v2 = *(void *)(this + 4664) & 0xFABF8FFFFF7FFEFFLL;
    *(void *)(this + 4664) = v2 + 0x100700000800100;
    if (a2)
    {
      *(void *)(this + 4664) = v2 | 0x100700000800106;
      if (a2 >= 3)
      {
        *(void *)(this + 4664) = v2 | 0x10070000080010ELL;
        if (a2 != 3) {
          *(void *)(this + 4664) = v2 & 0xF2B90FFCFC7FF8E1 | 0x906B0030380071ELL;
        }
      }
    }
  }
  return this;
}

void VoiceProcessorV8::InitializeDownlinkTimeFreqConverters(VoiceProcessorV8 *this)
{
  unint64_t v2 = (void *)((char *)this + 17560);
  uint64_t v3 = (VPTimeFreqConverter *)*((void *)this + 2195);
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1C185D370]();
    *unint64_t v2 = 0;
  }
  if (*((void *)this + 2194)) {
    myFreeABLDynamic((AudioBufferList **)this + 2194);
  }
  if ((~*((_DWORD *)this + 2224) & 0xC0) == 0)
  {
    double v4 = *((double *)this + 36);
    double v5 = *((double *)this + 41);
    unsigned int v6 = *((_DWORD *)this + 129);
    if (v4 != v5) {
      unsigned int v6 = vcvtpd_u64_f64(v4 * (double)v6 / v5);
    }
    if (*((unsigned char *)this + 480))
    {
      if ((double)v6 / v4 >= 0.012) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = (v4 * 0.012);
      }
      BlockSizeHelper::GetNextFFTFriendlyBlkSz(v7);
      operator new();
    }
    VPTimeFreqConverter_Create();
  }
}

void sub_1BB328CD0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<BlockProcessor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *float result = a2;
  if (v2)
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(v2 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)v2);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t VoiceProcessorV8::ReblockerForOCNSAndSpeechEnhancerCB(VoiceProcessorV8 *this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  return (*(uint64_t (**)(VoiceProcessorV8 *, void *, uint64_t, const AudioBufferList **))(*(void *)this
                                                                                                  + 768))(this, a2, a3, a4);
}

uint64_t VoiceProcessorV8::Initialize(VoiceProcessorV8 *this)
{
  *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  int v2 = *((_DWORD *)this + 153);
  if (v2)
  {
    int v3 = 0;
    do
    {
      int v3 = (2 * v3) | 1;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 10DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
  }
  uint64_t result = VoiceProcessorV2::Initialize(this);
  if (!result) {
    VoiceProcessorV4::InitializeV4Specifics(this);
  }
  return result;
}

BOOL VoiceProcessorV8::SupportsSWB(VoiceProcessorV8 *this)
{
  return (*((_DWORD *)this + 18) & 0xFFFFFFFC) == 4;
}

uint64_t VoiceProcessorV8::GetVersion(VoiceProcessorV8 *this)
{
  return 8;
}

void VoiceProcessorV8::~VoiceProcessorV8(VoiceProcessorV8 *this)
{
  VoiceProcessorV8::~VoiceProcessorV8(this);

  JUMPOUT(0x1C185D370);
}

{
  VPTimeFreqConverter *v2;
  VPTimeFreqConverter *v3;
  VPTimeFreqConverter *v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  VPTimeFreqConverter *v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1F14A8FF8;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 16696);
  myFreeABLDynamic((AudioBufferList **)this + 2184);
  myFreeABLDynamic((AudioBufferList **)this + 2185);
  myFreeABLDynamic((AudioBufferList **)this + 2186);
  myFreeABLDynamic((AudioBufferList **)this + 2187);
  myFreeABLDynamic((AudioBufferList **)this + 2188);
  int v2 = (VPTimeFreqConverter *)*((void *)this + 2195);
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1C185D370]();
    *((void *)this + 2195) = 0;
  }
  myFreeABLDynamic((AudioBufferList **)this + 2194);
  myFreeABLDynamic((AudioBufferList **)this + 2189);
  myFreeABLDynamic((AudioBufferList **)this + 2190);
  myFreeABLDynamic((AudioBufferList **)this + 2191);
  int v3 = (VPTimeFreqConverter *)*((void *)this + 2192);
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1C185D370]();
    *((void *)this + 2192) = 0;
  }
  myFreeABLDynamic((AudioBufferList **)this + 2196);
  if ((*((_DWORD *)this + 18) & 0xFFFFFFFE) == 0x18)
  {
    myFreeABLDynamic((AudioBufferList **)this + 2200);
    myFreeABLDynamic((AudioBufferList **)this + 2201);
    myFreeABLDynamic((AudioBufferList **)this + 2202);
    myFreeABLDynamic((AudioBufferList **)this + 2203);
    myFreeABLDynamic((AudioBufferList **)this + 2204);
    double v4 = (VPTimeFreqConverter *)*((void *)this + 2205);
    if (v4)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v4);
      MEMORY[0x1C185D370]();
      *((void *)this + 2205) = 0;
    }
    double v5 = (VPTimeFreqConverter *)*((void *)this + 2206);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1C185D370]();
      *((void *)this + 2206) = 0;
    }
    unsigned int v6 = (VPTimeFreqConverter *)*((void *)this + 2207);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1C185D370]();
      *((void *)this + 2207) = 0;
    }
    unint64_t v7 = (VPTimeFreqConverter *)*((void *)this + 2208);
    if (v7)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v7);
      MEMORY[0x1C185D370]();
      *((void *)this + 220std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
    }
  }
  StopVPWirelessChargingMatStateListener();
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 2210, 0);
  BOOL v8 = (void *)*((void *)this + 2197);
  if (v8)
  {
    *((void *)this + 219std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v8;
    operator delete(v8);
  }

  VoiceProcessorV7::~VoiceProcessorV7(this);
}

void VoiceProcessorV8::VoiceProcessorV8(VoiceProcessorV8 *this, const vp::Context *a2)
{
}

void sub_1BB329520(_Unwind_Exception *a1)
{
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100](v2, 0);
  double v4 = (void *)*((void *)v1 + 2197);
  if (v4)
  {
    *((void *)v1 + 219std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v4;
    operator delete(v4);
  }
  VoiceProcessorV7::~VoiceProcessorV7(v1);
  _Unwind_Resume(a1);
}

void vp::v8::create(vp::v8 *this, const vp::Context *a2)
{
}

void sub_1BB3295A4(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C40964017F0);
  _Unwind_Resume(a1);
}

uint64_t AUCNG::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 52std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = a2;
  return this;
}

uint64_t AUCNG::ShouldBypassEffect(AUCNG *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t ausdk::AUBase::ProcessScheduledSlice(ausdk::AUBase *this, void *a2)
{
  return 0;
}

uint64_t ausdk::AUBase::StopNote(ausdk::AUBase *this)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::StartNote(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int a5, const MusicDeviceNoteParams *a6)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::MIDIEventList(ausdk::AUBase *this, unsigned int a2, const MIDIEventList *a3)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::SysEx(ausdk::AUBase *this, const unsigned __int8 *a2)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::MIDIEvent(ausdk::AUBase *this)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::Stop(ausdk::AUBase *this)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::Start(ausdk::AUBase *this)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::InRenderThread(ausdk::AUBase *this)
{
  pthread_t v2 = pthread_self();
  int v3 = (_opaque_pthread_t *)*((void *)this + 32);
  if (v3) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 0;
  }
  unsigned int v5 = v4;
  BOOL v6 = v3 == 0;
  if (v2) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t ausdk::AUBase::GetScopeExtended(ausdk::AUBase *this)
{
  return 0;
}

BOOL AUCNG::ValidFormat(AUCNG *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame - 1 < 2 && v5;
}

uint64_t AUCNG::SupportedNumChannels(AUCNG *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUCNG::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

BOOL AUCNG::StreamFormatWritable(AUCNG *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUCNG::SupportsTail(AUCNG *this)
{
  return 1;
}

double AUCNG::GetTailTime(AUCNG *this)
{
  return 0.0;
}

double AUCNG::GetLatency(AUCNG *this)
{
  return 0.0;
}

uint64_t AUCNG::NewFactoryPresetSet(AUCNG *this, const AUPreset *a2)
{
  uint64_t presetNumber = a2->presetNumber;
  if (presetNumber > 1) {
    return 4294956445;
  }
  Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCNG *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, -120.0, 0);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sAUCNGPresets + presetNumber);
  return 0;
}

uint64_t ausdk::AUScope::GetElement(ausdk::AUScope *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 32))();
  }
  BOOL v6 = (char *)this + 16;
  uint64_t v5 = *((void *)this + 2);
  if (a2 >= (unint64_t)((*((void *)v6 + 1) - v5) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * a2);
  }
}

uint64_t AUCNG::GetPresets(AUCNG *this, const __CFArray **a2)
{
  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, &sAUCNGPresets);
    CFArrayAppendValue(Mutable, &unk_1E9F7B6E0);
    *a2 = Mutable;
  }
  return 0;
}

double AUCNG::GetParameterInfo(AUCNG *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (!a2)
  {
    if (a3 == 1)
    {
      buffer->cfNameString = @"Gain Offset";
      buffer->flags = -939524096;
      CFStringGetCString(@"Gain Offset", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&double result = 3250585600;
      *(void *)&buffer->minValue = 3250585600;
      AudioUnitParameterOptions v6 = buffer->flags & 0x3FFF7FFF | 0x40008000;
      buffer->defaultValue = 0.0;
      buffer->flags = v6;
    }
    else if (!a3)
    {
      buffer->cfNameString = @"Gain";
      buffer->flags = -939524096;
      CFStringGetCString(@"Gain", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      double result = 524288.381;
      *(void *)&buffer->minValue = 0x41200000C2F00000;
      buffer->defaultValue = -120.0;
    }
  }
  return result;
}

uint64_t ausdk::AUBase::BusCountWritable(ausdk::AUBase *this)
{
  return 0;
}

uint64_t AUCNG::Render(AUCNG *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  BOOL v8 = (AUCNG *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUCNG *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  BOOL v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::SafeGetElement((AUCNG *)((char *)this + 128), 0);
    uint64_t v15 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
    double v16 = *(uint64_t (**)(AUCNG *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176);
    return v16(this, a2, BufferList, v15, a4);
  }
  return result;
}

uint64_t ausdk::AUScope::SafeGetElement(ausdk::AUScope *this, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = ausdk::AUScope::GetElement(this, a2);
  if (!result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = -10877;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v4, 8u);
    }
    exceptiouint64_t n = (ausdk::AUException *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -10877);
  }
  return result;
}

void sub_1BB329B0C(_Unwind_Exception *exception_object)
{
}

uint64_t ausdk::AUBufferList::GetBufferList(ausdk::AUBufferList *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)this)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v3[0] = 67109120;
      v3[1] = -1;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v3, 8u);
    }
    exceptiouint64_t n = (ausdk::AUException *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -1);
  }
  return *((void *)this + 1) + 48;
}

void sub_1BB329C10(_Unwind_Exception *exception_object)
{
}

std::runtime_error *ausdk::AUException::AUException(std::runtime_error *this, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "OSStatus ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  AudioUnitParameterOptions v6 = std::string::append(&v10, (const std::string::value_type *)p_p, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(this, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::runtime_error_vtbl *)&unk_1F14C88F0;
  LODWORD(this[1].__vftable) = a2;
  return this;
}

void sub_1BB329D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ausdk::AUException::~AUException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x1C185D370);
}

uint64_t ausdk::AUBase::RenderBus(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3)
{
  if (a3->mSampleTime == *((double *)this + 34)) {
    return 0;
  }
  long long v3 = *(_OWORD *)&a3->mSampleTime;
  long long v4 = *(_OWORD *)&a3->mRateScalar;
  long long v5 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *((_OWORD *)this + 19) = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *((_OWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
  *((_OWORD *)this + 17) = v3;
  *((_OWORD *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v4;
  return (*(uint64_t (**)(ausdk::AUBase *, unsigned int *))(*(void *)this + 208))(this, a2);
}

uint64_t ausdk::AUBase::ComplexRender(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, unsigned int *a6, AudioStreamPacketDescription *a7, AudioBufferList *a8, void *a9, unsigned int *a10)
{
  return 4294967292;
}

uint64_t ausdk::AUBase::ProcessMultipleBufferLists(ausdk::AUBase *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  return 4294967292;
}

uint64_t AUCNG::ProcessBufferLists(AUCNG *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  if (((*(uint64_t (**)(AUCNG *, unsigned int *, const AudioBufferList *))(*(void *)this + 576))(this, a2, a3) & 1) == 0)
  {
    if (a4->mBuffers[0].mDataByteSize >= 4)
    {
      unint64_t v8 = 0;
      do
        *((float *)a4->mBuffers[0].mData + v8++) = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
      while (v8 < (unint64_t)a4->mBuffers[0].mDataByteSize >> 2);
    }
    if (a4->mNumberBuffers >= 2)
    {
      unint64_t v9 = 1;
      uint64_t v10 = 32;
      do
      {
        memcpy(*(void **)((char *)&a4->mNumberBuffers + v10), a4->mBuffers[0].mData, a4->mBuffers[0].mDataByteSize);
        ++v9;
        v10 += 16;
      }
      while (v9 < a4->mNumberBuffers);
    }
    std::string v11 = (AUCNG *)((char *)this + 32);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 0);
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v15 = Parameter + ausdk::AUElement::GetParameter(v14, 1u);
    if (v15 != 0.0)
    {
      float __B = __exp10f(v15 / 20.0);
      if (a4->mNumberBuffers)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 16;
        do
        {
          vDSP_vsmul(*(const float **)((char *)&a4->mNumberBuffers + v17), 1, &__B, *(float **)((char *)&a4->mNumberBuffers + v17), 1, a5);
          ++v16;
          v17 += 16;
        }
        while (v16 < a4->mNumberBuffers);
      }
    }
  }
  return 0;
}

uint64_t AUCNG::CanScheduleParameters(AUCNG *this)
{
  return 0;
}

uint64_t AUCNG::SetParameter(AUCNG *this, unsigned int a2, float a3)
{
  if (a2 > 1) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCNG *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a3, 0);
  return 0;
}

uint64_t AUCNG::GetParameter(AUCNG *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a2 > 1) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCNG *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  uint64_t result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUCNG::SetProperty(AUCNG *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUCNG *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUCNG *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUCNG::GetProperty(AUCNG *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    int v8 = (*(uint64_t (**)(AUCNG *))(*(void *)this + 576))(this);
    uint64_t result = 0;
    *a5 = v8;
  }
  return result;
}

uint64_t AUCNG::GetPropertyInfo(AUCNG *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUCNG::Reset(AUCNG *this)
{
  return 0;
}

uint64_t AUCNG::Initialize(AUCNG *this)
{
  pthread_t v2 = (const void *)(ausdk::AUScope::SafeGetElement((AUCNG *)((char *)this + 80), 0) + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUCNG *)((char *)this + 128), 0);
  if (!memcmp(v2, (const void *)(Element + 80), 0x28uLL)) {
    return 0;
  }
  else {
    return 4294956428;
  }
}

void AUCNG::~AUCNG(AUCNG *this)
{
  *(void *)this = &unk_1F14A9318;
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  *(void *)this = &unk_1F14A9318;
  ausdk::AUBase::~AUBase(this);
}

uint64_t LiteMatrix<float>::LiteMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = a3;
  std::vector<float>::resize(a1 + 16, a3 * a2);
  bzero(*(void **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  return a1;
}

void sub_1BB32A2F0(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiteMatrix<float>::operator()(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*a1 <= a2 || (unint64_t v3 = a1[1], v3 <= a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      AudioUnitParameterOptions v6 = "LiteMatrix.h";
      __int16 v7 = 1024;
      int v8 = 125;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  subscript out of bounds", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  return a1[2] + 4 * (a3 + v3 * a2);
}

unint64_t CLiteMatrix::Get(CLiteMatrix *this, unint64_t a2, unint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(void *)this <= a2 || (unint64_t v3 = *((void *)this + 1), v3 <= a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      AudioUnitParameterOptions v6 = "LiteMatrix.h";
      __int16 v7 = 1024;
      int v8 = 262;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  subscript out of bounds", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  return *((void *)this + 2) + 4 * (a3 + v3 * a2);
}

float *RotationUtilities::yawPitchRoll2RotationMatrixFOA(RotationUtilities *this, CLiteMatrix *a2, float a3, float a4, float a5)
{
  if (*(void *)this != 4) {
    __assert_rtn("yawPitchRoll2RotationMatrixFOA", "RotationUtilities.cpp", 119, "R.NumRows()==4");
  }
  if (*((void *)this + 1) != 4) {
    __assert_rtn("yawPitchRoll2RotationMatrixFOA", "RotationUtilities.cpp", 120, "R.NumCols()==4");
  }
  __float2 v7 = __sincosf_stret(a3);
  __float2 v8 = __sincosf_stret(a4);
  *(_DWORD *)CLiteMatrix::Get(this, 0, DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *(_DWORD *)CLiteMatrix::Get(this, 0, 1uLL) = 0;
  *(_DWORD *)CLiteMatrix::Get(this, 0, 2uLL) = 0;
  *(_DWORD *)CLiteMatrix::Get(this, 0, 3uLL) = 0;
  *(_DWORD *)CLiteMatrix::Get(this, 1uLL, DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(float *)CLiteMatrix::Get(this, 1uLL, 1uLL) = v7.__cosval + (float)(v7.__sinval * (float)(v8.__sinval * -0.0));
  *(float *)CLiteMatrix::Get(this, 1uLL, 2uLL) = v8.__cosval * 0.0;
  *(float *)CLiteMatrix::Get(this, 1uLL, 3uLL) = v7.__sinval + (float)((float)(v7.__cosval * v8.__sinval) * 0.0);
  *(_DWORD *)CLiteMatrix::Get(this, 2uLL, DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(float *)CLiteMatrix::Get(this, 2uLL, 1uLL) = (float)(v7.__cosval * -0.0) - (float)(v8.__sinval * v7.__sinval);
  *(float *)CLiteMatrix::Get(this, 2uLL, 2uLL) = v8.__cosval;
  *(float *)CLiteMatrix::Get(this, 2uLL, 3uLL) = (float)(v7.__cosval * v8.__sinval) + (float)(v7.__sinval * -0.0);
  *(_DWORD *)CLiteMatrix::Get(this, 3uLL, DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(float *)CLiteMatrix::Get(this, 3uLL, 1uLL) = -(float)(v7.__sinval * v8.__cosval);
  *(float *)CLiteMatrix::Get(this, 3uLL, 2uLL) = -v8.__sinval;
  uint64_t result = (float *)CLiteMatrix::Get(this, 3uLL, 3uLL);
  *uint64_t result = v7.__cosval * v8.__cosval;
  return result;
}

float ASAParamsGeneric::constructDerivedParams(ASAParamsGeneric *this)
{
  float v2 = *((float *)this + 2);
  float v1 = *((float *)this + 3);
  float v3 = v1 * *((float *)this + 7);
  *((float *)this + 12) = *((float *)this + 6) * v1;
  *((float *)this + 13) = v3;
  uint32x2_t v4 = *(uint32x2_t *)((char *)this + 16);
  uint32x2_t v5 = vsra_n_u32((uint32x2_t)0x100000001, v4, 1uLL);
  *((uint32x2_t *)this + 7) = v5;
  *((_DWORD *)this + 16) = (float)(unint64_t)((float)(v2 / v1) + 0.5);
  *((float *)this + 17) = v2 / (float)v4.u32[0];
  *((_DWORD *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v5.i32[0];
  float result = 1.0 / (float)v5.u32[0];
  *((float *)this + 19) = result;
  return result;
}

void ASAParamsGeneric::~ASAParamsGeneric(ASAParamsGeneric *this)
{
}

float ASAParamsChromaHiFreq::constructDerivedParams(ASAParamsChromaHiFreq *this)
{
  float result = 1.0 / (float)*((unsigned int *)this + 2);
  *((float *)this + 7) = result;
  return result;
}

void ASAParamsChromaHiFreq::~ASAParamsChromaHiFreq(ASAParamsChromaHiFreq *this)
{
}

void ASAParamsBeatsV2::~ASAParamsBeatsV2(ASAParamsBeatsV2 *this)
{
  *(void *)this = &unk_1F14A95C8;
  uint32x2_t v5 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  float v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint32x2_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C185D370](this, 0x10A1C4039B2F151);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(void *)this = &unk_1F14A95C8;
  uint32x2_t v5 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  float v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint32x2_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
}

void ASAParamsHarmonicConsistency::~ASAParamsHarmonicConsistency(ASAParamsHarmonicConsistency *this)
{
  *(void *)this = &unk_1F14A95F0;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

{
  void *v2;

  *(void *)this = &unk_1F14A95F0;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void ASAParamsModEnergy2::~ASAParamsModEnergy2(ASAParamsModEnergy2 *this)
{
  *(void *)this = &unk_1F14A9668;
  float v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

{
  void *v2;

  *(void *)this = &unk_1F14A9668;
  float v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    AudioUnitParameterOptions v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB32AAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ASAParamsRms::~ASAParamsRms(ASAParamsRms *this)
{
}

void ASAParamsModEnergy::~ASAParamsModEnergy(ASAParamsModEnergy *this)
{
}

void ASAParamsLowEnergy::~ASAParamsLowEnergy(ASAParamsLowEnergy *this)
{
}

void ASAParamsRolloff::~ASAParamsRolloff(ASAParamsRolloff *this)
{
}

void ASAParamsCentroid::~ASAParamsCentroid(ASAParamsCentroid *this)
{
}

void ASAParamsFlux::~ASAParamsFlux(ASAParamsFlux *this)
{
}

void ASAParamsReconDiff::~ASAParamsReconDiff(ASAParamsReconDiff *this)
{
}

void ASAParamsCepstralSparsity::~ASAParamsCepstralSparsity(ASAParamsCepstralSparsity *this)
{
}

void ASAParamsCepstralVariance::~ASAParamsCepstralVariance(ASAParamsCepstralVariance *this)
{
}

void ASAParamsAvgPitchDensity::~ASAParamsAvgPitchDensity(ASAParamsAvgPitchDensity *this)
{
}

void ASAParamsAvgTonalityPower::~ASAParamsAvgTonalityPower(ASAParamsAvgTonalityPower *this)
{
}

void ASAFeatures::ASAFeatures(ASAFeatures *this, const ASAParamsGeneric *a2, const ASAParamsChromaHiFreq *a3, const ASAParamsBeatsV2 *a4, const ASAParamsHarmonicConsistency *a5, const ASAParamsRms *a6, const ASAParamsModEnergy *a7, const ASAParamsModEnergy2 *a8, long long a9, long long a10, long long a11, long long a12, const ASAParamsAvgTonalityPower *a13, unsigned int a14)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((void *)this + 4) = a6;
  *((void *)this + 5) = a7;
  *((void *)this + 6) = a8;
  *(_OWORD *)((char *)this + 56) = a9;
  *(_OWORD *)((char *)this + 72) = a10;
  *(_OWORD *)((char *)this + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = a11;
  *(_OWORD *)((char *)this + 104) = a12;
  v324 = (char *)this + 768;
  *((void *)this + 15) = a13;
  v326 = (void **)((char *)this + 128);
  bzero((char *)this + 128, 0x250uLL);
  *(_OWORD *)((char *)this + 76DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((unsigned char *)this + 976) = 1;
  *(void *)((char *)this + 98DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1065353216;
  *((_DWORD *)this + 252) = 0;
  unsigned int v18 = *((_DWORD *)a3 + 2);
  double v19 = log((float)(*((float *)a2 + 2) * 0.5) / *((float *)a3 + 3));
  if (!VADGenUtils::InvLogTwo(void)::result) {
    operator new();
  }
  float v20 = *(double *)VADGenUtils::InvLogTwo(void)::result * v19;
  *((_DWORD *)this + 18DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(unint64_t)((float)((float)(1.0 / (float)v18) + v20) + 0.5);
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v325 = _Q1;
  uint32x2_t v25 = vcvt_n_u32_f32(vcvt_f32_f64(vcvtq_f64_u64(vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vmul_n_f32(*(float32x2_t *)((char *)a4 + 28), *((float *)a2 + 3)), (float32x2_t)0x3F0000003F000000)), _Q1)))), 1uLL);
  *(uint32x2_t *)((char *)this + 724) = v25;
  *((_DWORD *)this + 183) = *((_DWORD *)a2 + 11) - 2 * *((_DWORD *)a4 + 4);
  *((_DWORD *)this + 184) = ((*((_DWORD *)a4 + 6) * v25.i32[1]) >> 1) + 1;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)this + 31, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 2));
  std::vector<float>::resize((uint64_t)v324, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*((void *)this + 2) + 48) - *(void *)(*((void *)this + 2) + 40)) >> 2));
  uint64_t v26 = *((void *)this + 2);
  uint64_t v27 = *(void *)(v26 + 40);
  uint64_t v28 = *(void *)(v26 + 48) - v27;
  if (v28)
  {
    unint64_t v29 = 0;
    unint64_t v30 = v28 / 12;
    uint64_t v31 = *((void *)this + 93);
    uint64_t v32 = (*((void *)this + 94) - v31) >> 2;
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    uint64_t v33 = (int *)(v27 + 8);
    do
    {
      if (v32 == v29) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      *(_DWORD *)(v31 + 4 * v29) = *(v33 - 2);
      uint64_t v34 = *((void *)this + 96);
      if (v29 >= (*((void *)this + 97) - v34) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      int v35 = *v33;
      v33 += 3;
      *(_DWORD *)(v34 + 4 * v29++) = v35;
    }
    while (v30 != v29);
  }
  uint64_t v36 = *(void *)this;
  float v37 = *(float *)(*(void *)this + 12) * 0.2;
  *(double *)&unint64_t v38 = v37 + 0.5;
  *((_DWORD *)this + 19std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (float)(unint64_t)*(double *)&v38 + 2;
  LODWORD(v3std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *(_DWORD *)(v36 + 20);
  double v39 = 1.0 / *(float *)(*((void *)this + 3) + 8);
  VADGenUtils::TwoPoleBandpassCoeff<double>((double *)this + 100, (double *)this + 101, (double *)this + 102, (v39 + v39) * 3.14159265 / ((double)v38 / *(float *)(v36 + 8)));
  uint64_t v40 = *(void *)this;
  float v41 = *(float *)(*(void *)this + 12);
  uint64_t v42 = *((void *)this + 4);
  *((uint32x2_t *)this + 103) = vcvt_u32_f32(vcvt_f32_f64(vcvtq_f64_u64(vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(*((void *)this + 3) + 16), v41)), v325)))));
  float v43 = (float)(v41 * *(float *)(v42 + 20)) / (float)((float)(v41 * *(float *)(v42 + 20)) + 1.0);
  float v44 = (float)(v41 * *(float *)(v42 + 16)) / (float)((float)(v41 * *(float *)(v42 + 16)) + 1.0);
  *((float *)this + 21DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)((float)(1.0 - v43) * 0.5) * (float)(v44 + 1.0);
  *((float *)this + 20std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v43 + v44;
  *((float *)this + 209) = -(float)(v43 * v44);
  float v45 = *(float *)(v42 + 20) * *(float *)(v40 + 12);
  *((float *)this + 211) = v45 / (float)(v45 + 1.0);
  long long v46 = (double *)VADGenUtils::TwoPi(void)::result;
  if (!VADGenUtils::TwoPi(void)::result) {
    operator new();
  }
  float v47 = *(double *)VADGenUtils::TwoPi(void)::result;
  VADGenUtils::TwoPoleBandpassCoeff<double>((double *)this + 106, (double *)this + 107, (double *)this + 108, (float)((float)(*(float *)(*((void *)this + 5) + 8) * v47) / *(float *)(v40 + 12)));
  uint64_t v48 = *((void *)this + 6);
  float v49 = *(float *)(*(void *)this + 12);
  *((uint32x2_t *)this + 109) = vcvt_u32_f32(vcvt_f32_f64(vcvtq_f64_u64(vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v48 + 12), v49)), v325)))));
  float v50 = *v46;
  VADGenUtils::TwoPoleBandpassCoeff<double>((double *)this + 110, (double *)this + 111, (double *)this + 112, (float)((float)(*(float *)(v48 + 8) * v50) / v49));
  float v51 = *v46;
  VADGenUtils::TwoPoleBandpassCoeff<double>((double *)this + 113, (double *)this + 114, (double *)this + 115, (float)((float)(*(float *)(*((void *)this + 6) + 20) * v51)/ (float)(2 * *(_DWORD *)(*(void *)this + 44) - 1)));
  uint64_t v52 = *(void *)this;
  v53.i32[0] = *(_DWORD *)(*(void *)this + 72);
  v53.i32[1] = v53.i32[0] - 1;
  __asm { FMOV            V15.2S, #1.0 }
  *((float32x2_t *)this + 116) = vdiv_f32(_D15, vcvt_f32_u32(v53));
  int32x2_t v55 = (int32x2_t)vcvt_u32_f32(vcvt_f32_f64(vcvtq_f64_u64(vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(*((void *)this + 14) + 8), *(float *)(v52 + 8))), v325)))));
  *((int32x2_t *)this + 117) = v55;
  v55.i32[0] = vsub_s32(vdup_lane_s32(v55, 1), v55).u32[0];
  *((_DWORD *)this + 236) = v55.i32[0] + 1;
  *((float *)this + 237) = 1.0 / (float)(v55.i32[0] + 1);
  float v56 = (float (**)(uint64_t, uint64_t))*((void *)this + 16);
  *((void *)this + 17) = v56;
  unint64_t v57 = *((void *)this + 18);
  if ((unint64_t)v56 >= v57)
  {
    uint64_t v59 = v57 - (void)v56;
    uint64_t v60 = v59 >> 3;
    if ((unint64_t)(v59 >> 3) <= 1) {
      uint64_t v60 = 1;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    uint64_t v62 = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v61);
    float v64 = &v62[2 * v63];
    *uint64_t v62 = ASAFeatures::ChromaHiFreq;
    v62[1] = 0;
    uint64_t v58 = (float (**)(uint64_t, uint64_t))(v62 + 2);
    uint64_t v66 = (char *)*((void *)this + 16);
    uint64_t v65 = (char *)*((void *)this + 17);
    if (v65 != v66)
    {
      do
      {
        long long v67 = *((_OWORD *)v65 - 1);
        v65 -= 16;
        *((_OWORD *)v62 - 1) = v67;
        v62 -= 2;
      }
      while (v65 != v66);
      uint64_t v65 = (char *)*v326;
    }
    *((void *)this + 16) = v62;
    *((void *)this + 17) = v58;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v64;
    if (v65) {
      operator delete(v65);
    }
  }
  else
  {
    *float v56 = ASAFeatures::ChromaHiFreq;
    v56[1] = 0;
    uint64_t v58 = v56 + 2;
  }
  *((void *)this + 17) = v58;
  unint64_t v68 = *((void *)this + 18);
  if ((unint64_t)v58 >= v68)
  {
    uint64_t v70 = ((char *)v58 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v70 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v71 = v68 - (void)*v326;
    uint64_t v72 = v71 >> 3;
    if (v71 >> 3 <= (unint64_t)(v70 + 1)) {
      uint64_t v72 = v70 + 1;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v72;
    }
    long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v73);
    BOOL v75 = (float (**)(uint64_t, uint64_t))&v74[16 * v70];
    long long v77 = &v74[16 * v76];
    *BOOL v75 = ASAFeatures::BeatsV2;
    v75[1] = 0;
    uint64_t v69 = v75 + 2;
    long long v79 = (char *)*((void *)this + 16);
    uint64_t v78 = (char *)*((void *)this + 17);
    if (v78 != v79)
    {
      do
      {
        long long v80 = *((_OWORD *)v78 - 1);
        v78 -= 16;
        *((_OWORD *)v75 - 1) = v80;
        v75 -= 2;
      }
      while (v78 != v79);
      uint64_t v78 = (char *)*v326;
    }
    *((void *)this + 16) = v75;
    *((void *)this + 17) = v69;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v77;
    if (v78) {
      operator delete(v78);
    }
  }
  else
  {
    *uint64_t v58 = ASAFeatures::BeatsV2;
    v58[1] = 0;
    uint64_t v69 = v58 + 2;
  }
  *((void *)this + 17) = v69;
  unint64_t v81 = *((void *)this + 18);
  if ((unint64_t)v69 >= v81)
  {
    uint64_t v83 = ((char *)v69 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v83 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v84 = v81 - (void)*v326;
    uint64_t v85 = v84 >> 3;
    if (v84 >> 3 <= (unint64_t)(v83 + 1)) {
      uint64_t v85 = v83 + 1;
    }
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v85;
    }
    long long v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v86);
    uint64_t v88 = (float (**)(uint64_t, uint64_t))&v87[16 * v83];
    uint64_t v90 = &v87[16 * v89];
    *uint64_t v88 = ASAFeatures::HarmonicConsistency;
    v88[1] = 0;
    uint64_t v82 = (float (**)(uint64_t, ASAFeatures **))(v88 + 2);
    long long v92 = (char *)*((void *)this + 16);
    uint64_t v91 = (char *)*((void *)this + 17);
    if (v91 != v92)
    {
      do
      {
        long long v93 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v88 - 1) = v93;
        v88 -= 2;
      }
      while (v91 != v92);
      uint64_t v91 = (char *)*v326;
    }
    *((void *)this + 16) = v88;
    *((void *)this + 17) = v82;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v90;
    if (v91) {
      operator delete(v91);
    }
  }
  else
  {
    *uint64_t v69 = ASAFeatures::HarmonicConsistency;
    v69[1] = 0;
    uint64_t v82 = (float (**)(uint64_t, ASAFeatures **))(v69 + 2);
  }
  *((void *)this + 17) = v82;
  unint64_t v94 = *((void *)this + 18);
  if ((unint64_t)v82 >= v94)
  {
    uint64_t v96 = ((char *)v82 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v96 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v97 = v94 - (void)*v326;
    uint64_t v98 = v97 >> 3;
    if (v97 >> 3 <= (unint64_t)(v96 + 1)) {
      uint64_t v98 = v96 + 1;
    }
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v99 = v98;
    }
    uint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v99);
    uint64_t v101 = (float (**)(uint64_t, ASAFeatures **))&v100[16 * v96];
    uint64_t v103 = &v100[16 * v102];
    *uint64_t v101 = ASAFeatures::FilteredRmsDB;
    v101[1] = 0;
    uint64_t v95 = v101 + 2;
    long long v105 = (char *)*((void *)this + 16);
    long long v104 = (char *)*((void *)this + 17);
    if (v104 != v105)
    {
      do
      {
        long long v106 = *((_OWORD *)v104 - 1);
        v104 -= 16;
        *((_OWORD *)v101 - 1) = v106;
        v101 -= 2;
      }
      while (v104 != v105);
      long long v104 = (char *)*v326;
    }
    *((void *)this + 16) = v101;
    *((void *)this + 17) = v95;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v103;
    if (v104) {
      operator delete(v104);
    }
  }
  else
  {
    *uint64_t v82 = ASAFeatures::FilteredRmsDB;
    v82[1] = 0;
    uint64_t v95 = v82 + 2;
  }
  *((void *)this + 17) = v95;
  unint64_t v107 = *((void *)this + 18);
  if ((unint64_t)v95 >= v107)
  {
    uint64_t v109 = ((char *)v95 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v109 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v110 = v107 - (void)*v326;
    uint64_t v111 = v110 >> 3;
    if (v110 >> 3 <= (unint64_t)(v109 + 1)) {
      uint64_t v111 = v109 + 1;
    }
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v112 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v112 = v111;
    }
    int v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v112);
    vDSP_Length v114 = (float (**)(uint64_t, ASAFeatures **))&v113[16 * v109];
    vDSP_Length v116 = &v113[16 * v115];
    *vDSP_Length v114 = ASAFeatures::FilteredRmsDBDeriv;
    v114[1] = 0;
    uint64_t v108 = v114 + 2;
    uint64_t v118 = (char *)*((void *)this + 16);
    uint64_t v117 = (char *)*((void *)this + 17);
    if (v117 != v118)
    {
      do
      {
        long long v119 = *((_OWORD *)v117 - 1);
        v117 -= 16;
        *((_OWORD *)v114 - 1) = v119;
        v114 -= 2;
      }
      while (v117 != v118);
      uint64_t v117 = (char *)*v326;
    }
    *((void *)this + 16) = v114;
    *((void *)this + 17) = v108;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v116;
    if (v117) {
      operator delete(v117);
    }
  }
  else
  {
    *uint64_t v95 = ASAFeatures::FilteredRmsDBDeriv;
    v95[1] = 0;
    uint64_t v108 = v95 + 2;
  }
  *((void *)this + 17) = v108;
  unint64_t v120 = *((void *)this + 18);
  if ((unint64_t)v108 >= v120)
  {
    uint64_t v122 = ((char *)v108 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v122 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v123 = v120 - (void)*v326;
    uint64_t v124 = v123 >> 3;
    if (v123 >> 3 <= (unint64_t)(v122 + 1)) {
      uint64_t v124 = v122 + 1;
    }
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v125 = v124;
    }
    uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v125);
    uint64_t v127 = &v126[16 * v122];
    uint64_t v129 = &v126[16 * v128];
    *(void *)uint64_t v127 = ASAFeatures::RmsDynamicRange;
    *((void *)v127 + 1) = 0;
    int v121 = (float (**)(uint64_t, ASAFeatures **))(v127 + 16);
    long long v131 = (char *)*((void *)this + 16);
    uint64_t v130 = (char *)*((void *)this + 17);
    if (v130 != v131)
    {
      do
      {
        long long v132 = *((_OWORD *)v130 - 1);
        v130 -= 16;
        *((_OWORD *)v127 - 1) = v132;
        v127 -= 16;
      }
      while (v130 != v131);
      uint64_t v130 = (char *)*v326;
    }
    *((void *)this + 16) = v127;
    *((void *)this + 17) = v121;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v129;
    if (v130) {
      operator delete(v130);
    }
  }
  else
  {
    *uint64_t v108 = ASAFeatures::RmsDynamicRange;
    v108[1] = 0;
    int v121 = (float (**)(uint64_t, ASAFeatures **))(v108 + 2);
  }
  *((void *)this + 17) = v121;
  unint64_t v133 = *((void *)this + 18);
  if ((unint64_t)v121 >= v133)
  {
    uint64_t v135 = ((char *)v121 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v135 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v136 = v133 - (void)*v326;
    uint64_t v137 = v136 >> 3;
    if (v136 >> 3 <= (unint64_t)(v135 + 1)) {
      uint64_t v137 = v135 + 1;
    }
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v138 = v137;
    }
    char v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v138);
    char v140 = (float (**)(uint64_t, ASAFeatures **))&v139[16 * v135];
    __int16 v142 = &v139[16 * v141];
    *char v140 = ASAFeatures::NormRms;
    v140[1] = 0;
    uint64_t v134 = v140 + 2;
    long long v144 = (char *)*((void *)this + 16);
    int v143 = (char *)*((void *)this + 17);
    if (v143 != v144)
    {
      do
      {
        long long v145 = *((_OWORD *)v143 - 1);
        v143 -= 16;
        *((_OWORD *)v140 - 1) = v145;
        v140 -= 2;
      }
      while (v143 != v144);
      int v143 = (char *)*v326;
    }
    *((void *)this + 16) = v140;
    *((void *)this + 17) = v134;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v142;
    if (v143) {
      operator delete(v143);
    }
  }
  else
  {
    *int v121 = ASAFeatures::NormRms;
    v121[1] = 0;
    uint64_t v134 = v121 + 2;
  }
  *((void *)this + 17) = v134;
  unint64_t v146 = *((void *)this + 18);
  if ((unint64_t)v134 >= v146)
  {
    uint64_t v148 = ((char *)v134 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v148 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v149 = v146 - (void)*v326;
    uint64_t v150 = v149 >> 3;
    if (v149 >> 3 <= (unint64_t)(v148 + 1)) {
      uint64_t v150 = v148 + 1;
    }
    if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v151 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v151 = v150;
    }
    long long v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v151);
    long long v153 = (float (**)(uint64_t, ASAFeatures **))&v152[16 * v148];
    long long v155 = &v152[16 * v154];
    *long long v153 = ASAFeatures::LogRmsStdDev;
    v153[1] = 0;
    long long v147 = (float (**)(uint64_t, uint64_t))(v153 + 2);
    long long v157 = (char *)*((void *)this + 16);
    long long v156 = (char *)*((void *)this + 17);
    if (v156 != v157)
    {
      do
      {
        long long v158 = *((_OWORD *)v156 - 1);
        v156 -= 16;
        *((_OWORD *)v153 - 1) = v158;
        v153 -= 2;
      }
      while (v156 != v157);
      long long v156 = (char *)*v326;
    }
    *((void *)this + 16) = v153;
    *((void *)this + 17) = v147;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v155;
    if (v156) {
      operator delete(v156);
    }
  }
  else
  {
    *uint64_t v134 = ASAFeatures::LogRmsStdDev;
    v134[1] = 0;
    long long v147 = (float (**)(uint64_t, uint64_t))(v134 + 2);
  }
  *((void *)this + 17) = v147;
  unint64_t v159 = *((void *)this + 18);
  if ((unint64_t)v147 >= v159)
  {
    uint64_t v161 = ((char *)v147 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v161 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v162 = v159 - (void)*v326;
    uint64_t v163 = v162 >> 3;
    if (v162 >> 3 <= (unint64_t)(v161 + 1)) {
      uint64_t v163 = v161 + 1;
    }
    if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v164 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v164 = v163;
    }
    v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v164);
    uint64_t v166 = (float (**)(uint64_t, uint64_t))&v165[16 * v161];
    uint64_t v168 = &v165[16 * v167];
    *uint64_t v166 = ASAFeatures::ModEnergy;
    v166[1] = 0;
    uint64_t v160 = v166 + 2;
    v170 = (char *)*((void *)this + 16);
    vDSP_Length v169 = (char *)*((void *)this + 17);
    if (v169 != v170)
    {
      do
      {
        long long v171 = *((_OWORD *)v169 - 1);
        v169 -= 16;
        *((_OWORD *)v166 - 1) = v171;
        v166 -= 2;
      }
      while (v169 != v170);
      vDSP_Length v169 = (char *)*v326;
    }
    *((void *)this + 16) = v166;
    *((void *)this + 17) = v160;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v168;
    if (v169) {
      operator delete(v169);
    }
  }
  else
  {
    *long long v147 = ASAFeatures::ModEnergy;
    v147[1] = 0;
    uint64_t v160 = v147 + 2;
  }
  *((void *)this + 17) = v160;
  unint64_t v172 = *((void *)this + 18);
  if ((unint64_t)v160 >= v172)
  {
    uint64_t v174 = ((char *)v160 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v174 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v175 = v172 - (void)*v326;
    uint64_t v176 = v175 >> 3;
    if (v175 >> 3 <= (unint64_t)(v174 + 1)) {
      uint64_t v176 = v174 + 1;
    }
    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v177 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v177 = v176;
    }
    uint64_t v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v177);
    __n128 v179 = (float (**)(uint64_t, uint64_t))&v178[16 * v174];
    uint64_t v181 = &v178[16 * v180];
    *__n128 v179 = ASAFeatures::ModEnergy2;
    v179[1] = 0;
    unsigned int v173 = v179 + 2;
    __n128 v183 = (char *)*((void *)this + 16);
    __n128 v182 = (char *)*((void *)this + 17);
    if (v182 != v183)
    {
      do
      {
        long long v184 = *((_OWORD *)v182 - 1);
        v182 -= 16;
        *((_OWORD *)v179 - 1) = v184;
        v179 -= 2;
      }
      while (v182 != v183);
      __n128 v182 = (char *)*v326;
    }
    *((void *)this + 16) = v179;
    *((void *)this + 17) = v173;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v181;
    if (v182) {
      operator delete(v182);
    }
  }
  else
  {
    *uint64_t v160 = ASAFeatures::ModEnergy2;
    v160[1] = 0;
    unsigned int v173 = v160 + 2;
  }
  *((void *)this + 17) = v173;
  unint64_t v185 = *((void *)this + 18);
  if ((unint64_t)v173 >= v185)
  {
    uint64_t v187 = ((char *)v173 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v187 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v188 = v185 - (void)*v326;
    uint64_t v189 = v188 >> 3;
    if (v188 >> 3 <= (unint64_t)(v187 + 1)) {
      uint64_t v189 = v187 + 1;
    }
    if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v190 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v190 = v189;
    }
    v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v190);
    v192 = &v191[16 * v187];
    v194 = &v191[16 * v193];
    *(void *)v192 = ASAFeatures::LowEnergyFrac;
    *((void *)v192 + 1) = 0;
    long long v186 = v192 + 16;
    v196 = (char *)*((void *)this + 16);
    v195 = (char *)*((void *)this + 17);
    if (v195 != v196)
    {
      do
      {
        long long v197 = *((_OWORD *)v195 - 1);
        v195 -= 16;
        *((_OWORD *)v192 - 1) = v197;
        v192 -= 16;
      }
      while (v195 != v196);
      v195 = (char *)*v326;
    }
    *((void *)this + 16) = v192;
    *((void *)this + 17) = v186;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v194;
    if (v195) {
      operator delete(v195);
    }
  }
  else
  {
    *unsigned int v173 = ASAFeatures::LowEnergyFrac;
    v173[1] = 0;
    long long v186 = v173 + 2;
  }
  *((void *)this + 17) = v186;
  unint64_t v198 = *((void *)this + 18);
  if ((unint64_t)v186 >= v198)
  {
    uint64_t v200 = ((char *)v186 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v200 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v201 = v198 - (void)*v326;
    uint64_t v202 = v201 >> 3;
    if (v201 >> 3 <= (unint64_t)(v200 + 1)) {
      uint64_t v202 = v200 + 1;
    }
    if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v203 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v203 = v202;
    }
    v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v203);
    v205 = &v204[16 * v200];
    v207 = &v204[16 * v206];
    *(void *)v205 = ASAFeatures::SpectralRolloffHzVar;
    *((void *)v205 + 1) = 0;
    v199 = v205 + 16;
    v209 = (char *)*((void *)this + 16);
    v208 = (char *)*((void *)this + 17);
    if (v208 != v209)
    {
      do
      {
        long long v210 = *((_OWORD *)v208 - 1);
        v208 -= 16;
        *((_OWORD *)v205 - 1) = v210;
        v205 -= 16;
      }
      while (v208 != v209);
      v208 = (char *)*v326;
    }
    *((void *)this + 16) = v205;
    *((void *)this + 17) = v199;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v207;
    if (v208) {
      operator delete(v208);
    }
  }
  else
  {
    *long long v186 = ASAFeatures::SpectralRolloffHzVar;
    v186[1] = 0;
    v199 = v186 + 2;
  }
  *((void *)this + 17) = v199;
  unint64_t v211 = *((void *)this + 18);
  if ((unint64_t)v199 >= v211)
  {
    uint64_t v213 = ((char *)v199 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v213 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v214 = v211 - (void)*v326;
    uint64_t v215 = v214 >> 3;
    if (v214 >> 3 <= (unint64_t)(v213 + 1)) {
      uint64_t v215 = v213 + 1;
    }
    if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v216 = v215;
    }
    v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v216);
    v218 = &v217[16 * v213];
    v220 = &v217[16 * v219];
    *(void *)v218 = ASAFeatures::CentroidVar;
    *((void *)v218 + 1) = 0;
    v212 = (float (**)(float **, uint64_t))(v218 + 16);
    v222 = (char *)*((void *)this + 16);
    v221 = (char *)*((void *)this + 17);
    if (v221 != v222)
    {
      do
      {
        long long v223 = *((_OWORD *)v221 - 1);
        v221 -= 16;
        *((_OWORD *)v218 - 1) = v223;
        v218 -= 16;
      }
      while (v221 != v222);
      v221 = (char *)*v326;
    }
    *((void *)this + 16) = v218;
    *((void *)this + 17) = v212;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v220;
    if (v221) {
      operator delete(v221);
    }
  }
  else
  {
    void *v199 = ASAFeatures::CentroidVar;
    v199[1] = 0;
    v212 = (float (**)(float **, uint64_t))(v199 + 2);
  }
  *((void *)this + 17) = v212;
  unint64_t v224 = *((void *)this + 18);
  if ((unint64_t)v212 >= v224)
  {
    uint64_t v226 = ((char *)v212 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v226 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v227 = v224 - (void)*v326;
    uint64_t v228 = v227 >> 3;
    if (v227 >> 3 <= (unint64_t)(v226 + 1)) {
      uint64_t v228 = v226 + 1;
    }
    if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v229 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v229 = v228;
    }
    v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v229);
    v231 = (float (**)(float **, uint64_t))&v230[16 * v226];
    v233 = &v230[16 * v232];
    *v231 = ASAFeatures::FluxVar;
    v231[1] = 0;
    v225 = v231 + 2;
    v235 = (char *)*((void *)this + 16);
    v234 = (char *)*((void *)this + 17);
    if (v234 != v235)
    {
      do
      {
        long long v236 = *((_OWORD *)v234 - 1);
        v234 -= 16;
        *((_OWORD *)v231 - 1) = v236;
        v231 -= 2;
      }
      while (v234 != v235);
      v234 = (char *)*v326;
    }
    *((void *)this + 16) = v231;
    *((void *)this + 17) = v225;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v233;
    if (v234) {
      operator delete(v234);
    }
  }
  else
  {
    *v212 = ASAFeatures::FluxVar;
    v212[1] = 0;
    v225 = v212 + 2;
  }
  *((void *)this + 17) = v225;
  unint64_t v237 = *((void *)this + 18);
  if ((unint64_t)v225 >= v237)
  {
    uint64_t v239 = ((char *)v225 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v239 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v240 = v237 - (void)*v326;
    uint64_t v241 = v240 >> 3;
    if (v240 >> 3 <= (unint64_t)(v239 + 1)) {
      uint64_t v241 = v239 + 1;
    }
    if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v242 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v242 = v241;
    }
    v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v242);
    v244 = &v243[16 * v239];
    v246 = &v243[16 * v245];
    *(void *)v244 = ASAFeatures::ReconDiffVar;
    *((void *)v244 + 1) = 0;
    v238 = (float (**)(uint64_t, uint64_t))(v244 + 16);
    v248 = (char *)*((void *)this + 16);
    v247 = (char *)*((void *)this + 17);
    if (v247 != v248)
    {
      do
      {
        long long v249 = *((_OWORD *)v247 - 1);
        v247 -= 16;
        *((_OWORD *)v244 - 1) = v249;
        v244 -= 16;
      }
      while (v247 != v248);
      v247 = (char *)*v326;
    }
    *((void *)this + 16) = v244;
    *((void *)this + 17) = v238;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v246;
    if (v247) {
      operator delete(v247);
    }
  }
  else
  {
    void *v225 = ASAFeatures::ReconDiffVar;
    v225[1] = 0;
    v238 = (float (**)(uint64_t, uint64_t))(v225 + 2);
  }
  *((void *)this + 17) = v238;
  unint64_t v250 = *((void *)this + 18);
  if ((unint64_t)v238 >= v250)
  {
    uint64_t v252 = ((char *)v238 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v252 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v253 = v250 - (void)*v326;
    uint64_t v254 = v253 >> 3;
    if (v253 >> 3 <= (unint64_t)(v252 + 1)) {
      uint64_t v254 = v252 + 1;
    }
    if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v255 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v255 = v254;
    }
    v256 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v255);
    v257 = (float (**)(uint64_t, uint64_t))&v256[16 * v252];
    v259 = &v256[16 * v258];
    *v257 = ASAFeatures::CepstralSparsity;
    v257[1] = 0;
    v251 = v257 + 2;
    v261 = (char *)*((void *)this + 16);
    v260 = (char *)*((void *)this + 17);
    if (v260 != v261)
    {
      do
      {
        long long v262 = *((_OWORD *)v260 - 1);
        v260 -= 16;
        *((_OWORD *)v257 - 1) = v262;
        v257 -= 2;
      }
      while (v260 != v261);
      v260 = (char *)*v326;
    }
    *((void *)this + 16) = v257;
    *((void *)this + 17) = v251;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v259;
    if (v260) {
      operator delete(v260);
    }
  }
  else
  {
    *v238 = ASAFeatures::CepstralSparsity;
    v238[1] = 0;
    v251 = v238 + 2;
  }
  *((void *)this + 17) = v251;
  unint64_t v263 = *((void *)this + 18);
  if ((unint64_t)v251 >= v263)
  {
    uint64_t v265 = ((char *)v251 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v265 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v266 = v263 - (void)*v326;
    uint64_t v267 = v266 >> 3;
    if (v266 >> 3 <= (unint64_t)(v265 + 1)) {
      uint64_t v267 = v265 + 1;
    }
    if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v268 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v268 = v267;
    }
    v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v268);
    v270 = &v269[16 * v265];
    v272 = &v269[16 * v271];
    *(void *)v270 = ASAFeatures::CepstralVariance;
    *((void *)v270 + 1) = 0;
    v264 = (float (**)(uint64_t, uint64_t))(v270 + 16);
    v274 = (char *)*((void *)this + 16);
    v273 = (char *)*((void *)this + 17);
    if (v273 != v274)
    {
      do
      {
        long long v275 = *((_OWORD *)v273 - 1);
        v273 -= 16;
        *((_OWORD *)v270 - 1) = v275;
        v270 -= 16;
      }
      while (v273 != v274);
      v273 = (char *)*v326;
    }
    *((void *)this + 16) = v270;
    *((void *)this + 17) = v264;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v272;
    if (v273) {
      operator delete(v273);
    }
  }
  else
  {
    void *v251 = ASAFeatures::CepstralVariance;
    v251[1] = 0;
    v264 = (float (**)(uint64_t, uint64_t))(v251 + 2);
  }
  *((void *)this + 17) = v264;
  unint64_t v276 = *((void *)this + 18);
  if ((unint64_t)v264 >= v276)
  {
    uint64_t v278 = ((char *)v264 - (unsigned char *)*v326) >> 4;
    if ((unint64_t)(v278 + 1) >> 60) {
      goto LABEL_280;
    }
    uint64_t v279 = v276 - (void)*v326;
    uint64_t v280 = v279 >> 3;
    if (v279 >> 3 <= (unint64_t)(v278 + 1)) {
      uint64_t v280 = v278 + 1;
    }
    if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v281 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v281 = v280;
    }
    v282 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v281);
    v283 = (float (**)(uint64_t, uint64_t))&v282[16 * v278];
    v285 = &v282[16 * v284];
    *v283 = ASAFeatures::AvgPitchDensity;
    v283[1] = 0;
    v277 = (char *)(v283 + 2);
    v287 = (char *)*((void *)this + 16);
    v286 = (char *)*((void *)this + 17);
    if (v286 != v287)
    {
      do
      {
        long long v288 = *((_OWORD *)v286 - 1);
        v286 -= 16;
        *((_OWORD *)v283 - 1) = v288;
        v283 -= 2;
      }
      while (v286 != v287);
      v286 = (char *)*v326;
    }
    *((void *)this + 16) = v283;
    *((void *)this + 17) = v277;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v285;
    if (v286) {
      operator delete(v286);
    }
  }
  else
  {
    *v264 = ASAFeatures::AvgPitchDensity;
    v264[1] = 0;
    v277 = (char *)(v264 + 2);
  }
  *((void *)this + 17) = v277;
  unint64_t v289 = *((void *)this + 18);
  if ((unint64_t)v277 < v289)
  {
    *(void *)v277 = ASAFeatures::AvgTonalityPower;
    *((void *)v277 + 1) = 0;
    v290 = v277 + 16;
    goto LABEL_260;
  }
  uint64_t v291 = (v277 - (unsigned char *)*v326) >> 4;
  if (!((unint64_t)(v291 + 1) >> 60))
  {
    uint64_t v292 = v289 - (void)*v326;
    uint64_t v293 = v292 >> 3;
    if (v292 >> 3 <= (unint64_t)(v291 + 1)) {
      uint64_t v293 = v291 + 1;
    }
    if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v294 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v294 = v293;
    }
    v295 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v294);
    v296 = &v295[16 * v291];
    v298 = &v295[16 * v297];
    *(void *)v296 = ASAFeatures::AvgTonalityPower;
    *((void *)v296 + 1) = 0;
    v290 = v296 + 16;
    v300 = (char *)*((void *)this + 16);
    v299 = (char *)*((void *)this + 17);
    if (v299 != v300)
    {
      do
      {
        long long v301 = *((_OWORD *)v299 - 1);
        v299 -= 16;
        *((_OWORD *)v296 - 1) = v301;
        v296 -= 16;
      }
      while (v299 != v300);
      v299 = (char *)*v326;
    }
    *((void *)this + 16) = v296;
    *((void *)this + 17) = v290;
    *((void *)this + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v298;
    if (v299) {
      operator delete(v299);
    }
LABEL_260:
    *((void *)this + 17) = v290;
    uint64_t v302 = *(unsigned int *)(*((void *)this + 1) + 8);
    v303 = malloc_type_malloc(4 * v302, 0x2C8E6D5CuLL);
    v304 = v303;
    if (v302) {
      _ZF = v303 == 0;
    }
    else {
      _ZF = 0;
    }
    if (!_ZF)
    {
      bzero(v303, 4 * v302);
      *((void *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v304;
      uint64_t v306 = *(unsigned int *)(*((void *)this + 1) + 8);
      v307 = malloc_type_malloc(4 * v306, 0x2C8E6D5CuLL);
      v308 = v307;
      if (!v306 || v307 != 0)
      {
        bzero(v307, 4 * v306);
        *((void *)this + 29) = v308;
        uint64_t v310 = *(unsigned int *)(*((void *)this + 1) + 8);
        v311 = malloc_type_malloc(4 * v310, 0x2C8E6D5CuLL);
        v312 = v311;
        if (!v310 || v311)
        {
          bzero(v311, 4 * v310);
          *((void *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v312;
          uint64_t v313 = (*(_DWORD *)(*((void *)this + 1) + 8) * *(_DWORD *)(*((void *)this + 1) + 8));
          v314 = malloc_type_malloc(4 * v313, 0x2C8E6D5CuLL);
          v315 = v314;
          if (!v313 || v314)
          {
            bzero(v314, 4 * v313);
            *((void *)this + 75) = v315;
            uint64_t v316 = (*(_DWORD *)(*((void *)this + 1) + 8) * *(_DWORD *)(*((void *)this + 1) + 8));
            v317 = malloc_type_malloc(4 * v316, 0x2C8E6D5CuLL);
            v318 = v317;
            if (!v316 || v317)
            {
              bzero(v317, 4 * v316);
              *((void *)this + 76) = v318;
              uint64_t v319 = (*((_DWORD *)this + 180) * *(_DWORD *)(*((void *)this + 1) + 8));
              v320 = malloc_type_malloc(4 * v319, 0x2C8E6D5CuLL);
              v321 = v320;
              if (!v319 || v320)
              {
                bzero(v320, 4 * v319);
                *((void *)this + 77) = v321;
                operator new();
              }
            }
          }
        }
      }
    }
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v323 = std::bad_alloc::bad_alloc(exception);
  }
LABEL_280:
  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
}

void sub_1BB32E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1C185D370](v24, 0x1080C400DE93FC6);
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  uint64_t v26 = *a12;
  if (*a12)
  {
    a16[97] = v26;
    operator delete(v26);
  }
  uint64_t v27 = *a11;
  if (*a11)
  {
    a16[94] = v27;
    operator delete(v27);
  }
  uint64_t v28 = (void *)a16[25];
  if (v28)
  {
    a16[26] = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)a16[22];
  if (v29)
  {
    a16[23] = v29;
    operator delete(v29);
  }
  unint64_t v30 = (void *)a16[19];
  if (v30)
  {
    a16[20] = v30;
    operator delete(v30);
  }
  uint64_t v31 = *a15;
  if (*a15)
  {
    a16[17] = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void SlidingWindowDTFT<float>::allocateStorage(void *a1)
{
  unint64_t v1 = a1[1];
  if (!(v1 >> 62))
  {
    float v3 = malloc_type_malloc(4 * v1, 0x2C8E6D5CuLL);
    if (!v1 || v3 != 0)
    {
      uint32x2_t v5 = v3;
      bzero(v3, 4 * v1);
      a1[4] = v5;
      unint64_t v6 = a1[1];
      if (!(v6 >> 62))
      {
        __float2 v7 = malloc_type_malloc(4 * v6, 0x2C8E6D5CuLL);
        __float2 v8 = v7;
        if (!v6 || v7)
        {
          bzero(v7, 4 * v6);
          a1[5] = v8;
          unint64_t v9 = a1[1];
          if (!(v9 >> 62))
          {
            uint64_t v10 = malloc_type_malloc(4 * v9, 0x2C8E6D5CuLL);
            std::string v11 = v10;
            if (!v9 || v10)
            {
              bzero(v10, 4 * v9);
              a1[6] = v11;
              unint64_t v12 = a1[1];
              if (!(v12 >> 62))
              {
                uint64_t v13 = malloc_type_malloc(4 * v12, 0x2C8E6D5CuLL);
                uint64_t v14 = v13;
                if (!v12 || v13)
                {
                  bzero(v13, 4 * v12);
                  a1[7] = v14;
                  unint64_t v15 = a1[1];
                  if (!(v15 >> 62))
                  {
                    unint64_t v16 = malloc_type_malloc(4 * v15, 0x2C8E6D5CuLL);
                    uint64_t v17 = v16;
                    if (!v15 || v16)
                    {
                      bzero(v16, 4 * v15);
                      a1[8] = v17;
                      unint64_t v18 = a1[1];
                      if (!(v18 >> 62))
                      {
                        double v19 = malloc_type_malloc(4 * v18, 0x2C8E6D5CuLL);
                        float v20 = v19;
                        if (!v18 || v19)
                        {
                          bzero(v19, 4 * v18);
                          a1[9] = v20;
                          unint64_t v21 = a1[1];
                          if (!(v21 >> 62))
                          {
                            size_t v22 = malloc_type_malloc(4 * v21, 0x2C8E6D5CuLL);
                            uint64_t v23 = v22;
                            if (!v21 || v22)
                            {
                              bzero(v22, 4 * v21);
                              a1[10] = v23;
                              unint64_t v24 = a1[1];
                              if (!(v24 >> 62))
                              {
                                uint32x2_t v25 = malloc_type_malloc(4 * v24, 0x2C8E6D5CuLL);
                                uint64_t v26 = v25;
                                if (!v24 || v25)
                                {
                                  bzero(v25, 4 * v24);
                                  a1[11] = v26;
                                  unint64_t v27 = a1[1];
                                  if (!(v27 >> 62))
                                  {
                                    uint64_t v28 = malloc_type_malloc(4 * v27, 0x2C8E6D5CuLL);
                                    unint64_t v29 = v28;
                                    if (!v27 || v28)
                                    {
                                      bzero(v28, 4 * v27);
                                      a1[12] = v29;
                                      unint64_t v30 = a1[1];
                                      if (!(v30 >> 62))
                                      {
                                        uint64_t v31 = malloc_type_malloc(4 * v30, 0x2C8E6D5CuLL);
                                        uint64_t v32 = v31;
                                        if (!v30 || v31)
                                        {
                                          bzero(v31, 4 * v30);
                                          a1[13] = v32;
                                          operator new();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  uint64_t v34 = std::bad_alloc::bad_alloc(exception);
}

void sub_1BB32F0B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void *SlidingWindowDTFT<float>::initializeTables(void *result)
{
  uint64_t v1 = result[1];
  float v2 = (float *)result[4];
  if (v1 == 1)
  {
    *float v2 = 1.5708;
  }
  else
  {
    if (!v1) {
      return result;
    }
    uint64_t v3 = 4 * v1;
    float v4 = 0.0;
    do
    {
      *v2++ = v4;
      float v4 = (float)(3.1416 / (float)(unint64_t)(v1 - 1)) + v4;
      v3 -= 4;
    }
    while (v3);
  }
  unint64_t v6 = (_DWORD *)result[8];
  uint32x2_t v5 = (_DWORD *)result[9];
  __float2 v8 = (_DWORD *)result[6];
  __float2 v7 = (_DWORD *)result[7];
  unint64_t v9 = (_DWORD *)result[5];
  do
  {
    *v9++ = 0;
    *v8++ = 1065353216;
    *v7++ = 0;
    *v6++ = 1065353216;
    *v5++ = 0;
    --v1;
  }
  while (v1);
  return result;
}

void *SlidingWindowDTFT<float>::Update(uint64_t a1, void *a2, void *a3, float a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 116) + 1;
  *(_DWORD *)(a1 + 116) = v8;
  if (v8 >= 2)
  {
    vDSP_vadd(*(const float **)(a1 + 40), 1, *(const float **)(a1 + 32), 1, *(float **)(a1 + 40), 1, *(void *)(a1 + 8));
    uint64_t v10 = *(const float **)(a1 + 40);
    unint64_t v9 = *(float **)(a1 + 48);
    std::string v11 = *(float **)(a1 + 56);
    float __B = *(float *)(a1 + 8);
    float v12 = __B;
    vvcosf(v9, v10, (const int *)&__B);
    float __B = v12;
    vvsinf(v11, v10, (const int *)&__B);
    unsigned int v8 = *(_DWORD *)(a1 + 116);
  }
  if (v8 <= *(_DWORD *)(a1 + 16))
  {
    char v16 = 0;
LABEL_9:
    *(unsigned char *)(a1 + 112) = v16;
    float v17 = 0.0;
    goto LABEL_12;
  }
  int v13 = *(_DWORD *)(a1 + 20);
  if (v8 <= v13)
  {
    char v16 = 1;
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 112) = 2;
  uint64_t v14 = *(void *)(a1 + 120);
  if (v13 < 1) {
    int v15 = (*(_DWORD *)(v14 + 12) - v13) % *(_DWORD *)(v14 + 8);
  }
  else {
    int v15 = *(_DWORD *)(v14 + 8) + ~((*(_DWORD *)(v14 + 8) + v13 + ~*(_DWORD *)(v14 + 12)) % *(_DWORD *)(v14 + 8));
  }
  float v17 = *(float *)(*(void *)v14 + 4 * v15);
  MRRingBuffer<float>::GetSampleRange(*(uint64_t **)(a1 + 128), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(float **)(a1 + 64));
  MRRingBuffer<float>::GetSampleRange(*(uint64_t **)(a1 + 136), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(float **)(a1 + 72));
LABEL_12:
  unint64_t v18 = *(float **)(a1 + 80);
  double v19 = *(float **)(a1 + 88);
  float v20 = *(const float **)(a1 + 48);
  unint64_t v21 = *(const float **)(a1 + 56);
  size_t v22 = *(const float **)(a1 + 64);
  uint64_t v23 = *(const float **)(a1 + 72);
  vDSP_Length v24 = *(void *)(a1 + 8);
  float __B = a4;
  vDSP_vsma(v20, 1, &__B, v18, 1, v18, 1, v24);
  float __B = -v17;
  vDSP_vsma(v22, 1, &__B, v18, 1, v18, 1, v24);
  float __B = -a4;
  vDSP_vsma(v21, 1, &__B, v19, 1, v19, 1, v24);
  float __B = v17;
  vDSP_vsma(v23, 1, &__B, v19, 1, v19, 1, v24);
  memcpy(a2, *(const void **)(a1 + 80), 4 * *(void *)(a1 + 8));
  memcpy(a3, *(const void **)(a1 + 88), 4 * *(void *)(a1 + 8));
  uint64_t v25 = *(void *)(a1 + 120);
  uint64_t v26 = *(int *)(v25 + 12);
  *(float *)(*(void *)v25 + 4 * v26) = a4;
  *(_DWORD *)(v25 + 12) = ((int)v26 + 1) % *(_DWORD *)(v25 + 8);
  uint64_t v27 = *(void *)(a1 + 128);
  uint64_t v28 = *(void *)(a1 + 48);
  int v29 = *(_DWORD *)(a1 + 8);
  int v30 = *(_DWORD *)(v27 + 8);
  uint64_t v31 = *(int *)(v27 + 12);
  if (v30 < v29) {
    int v29 = *(_DWORD *)(v27 + 8);
  }
  int v32 = v31 + v29;
  int v33 = v31 + v29 - v30;
  if (v33 < 0)
  {
    memcpy((void *)(*(void *)v27 + 4 * v31), *(const void **)(a1 + 48), 4 * v29);
  }
  else
  {
    int v34 = v30 - v31;
    memcpy((void *)(*(void *)v27 + 4 * v31), *(const void **)(a1 + 48), 4 * (v30 - (int)v31));
    memcpy(*(void **)v27, (const void *)(v28 + 4 * v34), 4 * v33);
    int v32 = v33;
  }
  *(_DWORD *)(v27 + 12) = v32;
  uint64_t v35 = *(void *)(a1 + 136);
  uint64_t v36 = *(char **)(a1 + 56);
  int v37 = *(_DWORD *)(a1 + 8);
  int v38 = *(_DWORD *)(v35 + 8);
  uint64_t v39 = *(int *)(v35 + 12);
  if (v38 < v37) {
    int v37 = *(_DWORD *)(v35 + 8);
  }
  int v40 = v39 + v37;
  int v41 = v39 + v37 - v38;
  if (v41 < 0)
  {
    float result = memcpy((void *)(*(void *)v35 + 4 * v39), v36, 4 * v37);
  }
  else
  {
    int v42 = v38 - v39;
    memcpy((void *)(*(void *)v35 + 4 * v39), v36, 4 * (v38 - (int)v39));
    float result = memcpy(*(void **)v35, &v36[4 * v42], 4 * v41);
    int v40 = v41;
  }
  *(_DWORD *)(v35 + 12) = v40;
  return result;
}

float MRRingBuffer<float>::GetSampleRange(uint64_t *a1, int a2, int a3, float *a4)
{
  if (a2 < a3)
  {
    uint64_t v4 = *a1;
    do
    {
      if (a2 < 0) {
        int v5 = *((_DWORD *)a1 + 2) + ~((*((_DWORD *)a1 + 2) - a2 + ~*((_DWORD *)a1 + 3)) % *((_DWORD *)a1 + 2));
      }
      else {
        int v5 = (*((_DWORD *)a1 + 3) + a2) % *((_DWORD *)a1 + 2);
      }
      float result = *(float *)(v4 + 4 * v5);
      *a4++ = result;
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

void SlidingWindowDTFT<float>::~SlidingWindowDTFT(void *a1)
{
  *a1 = &unk_1F14A9878;
  SlidingWindowDTFT<float>::deallocateStorage(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t SlidingWindowDTFT<float>::deallocateStorage(void *a1)
{
  float v2 = (void *)a1[17];
  if (v2)
  {
    if (*v2) {
      MEMORY[0x1C185D340](*v2, 0x1000C8052888210);
    }
    MEMORY[0x1C185D370](v2, 0x1080C40FC6463CFLL);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    if (*v3) {
      MEMORY[0x1C185D340](*v3, 0x1000C8052888210);
    }
    MEMORY[0x1C185D370](v3, 0x1080C40FC6463CFLL);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    if (*v4) {
      MEMORY[0x1C185D340](*v4, 0x1000C8052888210);
    }
    MEMORY[0x1C185D370](v4, 0x1080C40FC6463CFLL);
  }
  uint64_t v5 = a1[13];
  if (v5) {
    MEMORY[0x1C185D370](v5, 0x1000C4052888210);
  }
  uint64_t v6 = a1[12];
  if (v6) {
    MEMORY[0x1C185D370](v6, 0x1000C4052888210);
  }
  uint64_t v7 = a1[11];
  if (v7) {
    MEMORY[0x1C185D370](v7, 0x1000C4052888210);
  }
  uint64_t v8 = a1[10];
  if (v8) {
    MEMORY[0x1C185D370](v8, 0x1000C4052888210);
  }
  uint64_t v9 = a1[9];
  if (v9) {
    MEMORY[0x1C185D370](v9, 0x1000C4052888210);
  }
  uint64_t v10 = a1[8];
  if (v10) {
    MEMORY[0x1C185D370](v10, 0x1000C4052888210);
  }
  uint64_t v11 = a1[7];
  if (v11) {
    MEMORY[0x1C185D370](v11, 0x1000C4052888210);
  }
  uint64_t v12 = a1[6];
  if (v12) {
    MEMORY[0x1C185D370](v12, 0x1000C4052888210);
  }
  uint64_t v13 = a1[5];
  if (v13) {
    MEMORY[0x1C185D370](v13, 0x1000C4052888210);
  }
  uint64_t result = a1[4];
  if (result)
  {
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *SlidingWindowDTFT<float>::~SlidingWindowDTFT(void *a1)
{
  *a1 = &unk_1F14A9878;
  SlidingWindowDTFT<float>::deallocateStorage(a1);
  return a1;
}

void FeatureAverager<float>::allocateStorage(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = malloc_type_malloc(4 * v2, 0x2C8E6D5CuLL);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = v3;
    bzero(v3, 4 * v2);
    *(void *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    uint64_t v7 = malloc_type_malloc(4 * v6, 0x2C8E6D5CuLL);
    uint64_t v8 = v7;
    if (!v6 || v7)
    {
      bzero(v7, 4 * v6);
      *(void *)(a1 + 4std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v8;
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      uint64_t v10 = malloc_type_malloc(4 * v9, 0x2C8E6D5CuLL);
      uint64_t v11 = v10;
      if (!v9 || v10)
      {
        bzero(v10, 4 * v9);
        *(void *)(a1 + 56) = v11;
        uint64_t v12 = *(unsigned int *)(a1 + 8);
        uint64_t v13 = malloc_type_malloc(4 * v12, 0x2C8E6D5CuLL);
        uint64_t v14 = v13;
        if (!v12 || v13)
        {
          bzero(v13, 4 * v12);
          *(void *)(a1 + 64) = v14;
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          char v16 = malloc_type_malloc(4 * v15, 0x2C8E6D5CuLL);
          float v17 = v16;
          if (!v15 || v16)
          {
            bzero(v16, 4 * v15);
            *(void *)(a1 + 72) = v17;
            uint64_t v18 = *(unsigned int *)(a1 + 8);
            double v19 = malloc_type_malloc(4 * v18, 0x2C8E6D5CuLL);
            float v20 = v19;
            if (!v18 || v19)
            {
              bzero(v19, 4 * v18);
              *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v20;
              uint64_t v21 = *(unsigned int *)(a1 + 8);
              size_t v22 = malloc_type_malloc(4 * v21, 0x2C8E6D5CuLL);
              uint64_t v23 = v22;
              if (!v21 || v22)
              {
                bzero(v22, 4 * v21);
                *(void *)(a1 + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v23;
                uint64_t v24 = *(unsigned int *)(a1 + 8);
                uint64_t v25 = malloc_type_malloc(4 * v24, 0x2C8E6D5CuLL);
                uint64_t v26 = v25;
                if (!v24 || v25)
                {
                  bzero(v25, 4 * v24);
                  *(void *)(a1 + 96) = v26;
                  uint64_t v27 = *(unsigned int *)(a1 + 8);
                  uint64_t v28 = malloc_type_malloc(4 * v27, 0x2C8E6D5CuLL);
                  int v29 = v28;
                  if (!v27 || v28)
                  {
                    bzero(v28, 4 * v27);
                    *(void *)(a1 + 104) = v29;
                    operator new();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  uint64_t v31 = std::bad_alloc::bad_alloc(exception);
}

void sub_1BB32FA48(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void FeatureAverager<float>::deallocateStorage(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    if (*v2) {
      MEMORY[0x1C185D340](*v2, 0x1000C8052888210);
    }
    MEMORY[0x1C185D370](v2, 0x1080C40FC6463CFLL);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3) {
    free(v3);
  }
  BOOL v4 = (void *)a1[12];
  if (v4) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[11];
  if (v5) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[10];
  if (v6) {
    free(v6);
  }
  uint64_t v7 = (void *)a1[9];
  if (v7) {
    free(v7);
  }
  uint64_t v8 = (void *)a1[8];
  if (v8) {
    free(v8);
  }
  uint64_t v9 = (void *)a1[7];
  if (v9) {
    free(v9);
  }
  uint64_t v10 = (void *)a1[6];
  if (v10) {
    free(v10);
  }
  uint64_t v11 = (void *)a1[5];
  if (v11)
  {
    free(v11);
  }
}

void FeatureAverager<float>::initializeTables(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 56), a2, 4 * *(unsigned int *)(a1 + 8));
  memcpy(*(void **)(a1 + 40), *(const void **)(a1 + 56), 4 * *(unsigned int *)(a1 + 8));
  vDSP_vmul(*(const float **)(a1 + 56), 1, *(const float **)(a1 + 56), 1, *(float **)(a1 + 64), 1, *(unsigned int *)(a1 + 8));
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  size_t v4 = 4 * v3;
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    do
    {
      float v8 = *(float *)(v7 + v5);
      if (v8 <= 1.0)
      {
        uint64_t v11 = (float *)(*(void *)(a1 + 64) + v5);
        float v9 = *v11;
        float v12 = 1.01;
      }
      else
      {
        float v9 = (float)(0.01 / v8) + 1.0;
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v11 = (float *)(v10 + 4 * v6);
        float v12 = *(float *)(v10 + v5);
      }
      *uint64_t v11 = v9 * v12;
      ++v6;
      v5 += 4;
    }
    while (v4 != v5);
  }
  uint64_t v13 = *(void **)(a1 + 48);
  if ((*(unsigned char *)(a1 + 120) & 2) != 0)
  {
    uint64_t v14 = *(const void **)(a1 + 64);
    memcpy(v13, v14, v4);
  }
  else
  {
    bzero(v13, v4);
  }
}

void FeatureAverager<float>::Update(uint64_t a1, const float *__A, void *__dst, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 116) + 1;
  *(_DWORD *)(a1 + 116) = v8;
  if (v8 <= *(_DWORD *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 112) = 0;
    uint64_t v14 = *(float **)(a1 + 40);
    uint64_t v15 = *(float **)(a1 + 104);
    float v16 = *(float *)(a1 + 20);
    vDSP_Length v17 = *(unsigned int *)(a1 + 8);
    vDSP_vsub(*(const float **)(a1 + 56), 1, __A, 1, v15, 1, v17);
    float __B = v16;
    vDSP_vsma(v15, 1, &__B, v14, 1, v14, 1, v17);
    float v11 = 0.0;
  }
  else
  {
    if (v8 <= *(_DWORD *)(a1 + 16)) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    *(unsigned char *)(a1 + 112) = v9;
    uint64_t v10 = *(float **)(a1 + 40);
    float v11 = 0.0;
    if (v9 == 2)
    {
      MRRingBuffer<float>::GetSampleRange(*(uint64_t **)(a1 + 128), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(float **)(a1 + 72));
      float v12 = *(float **)(a1 + 104);
      float v18 = *(float *)(a1 + 24);
      vDSP_Length v13 = *(unsigned int *)(a1 + 8);
      vDSP_vsub(*(const float **)(a1 + 72), 1, __A, 1, v12, 1, v13);
      float __B = v18;
    }
    else
    {
      float v11 = 1.0 / (float)v8;
      float v12 = *(float **)(a1 + 104);
      vDSP_Length v13 = *(unsigned int *)(a1 + 8);
      vDSP_vsub(*(const float **)(a1 + 40), 1, __A, 1, v12, 1, v13);
      float __B = v11;
    }
    vDSP_vsma(v12, 1, &__B, v10, 1, v10, 1, v13);
  }
  memcpy(__dst, *(const void **)(a1 + 40), 4 * *(unsigned int *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 120) & 2) != 0)
  {
    vDSP_vmul(__A, 1, __A, 1, *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 8));
    double v19 = *(float **)(a1 + 48);
    int v20 = *(unsigned __int8 *)(a1 + 112);
    if (v20 == 2)
    {
      vDSP_vmul(*(const float **)(a1 + 72), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 80), 1, *(unsigned int *)(a1 + 8));
      uint64_t v21 = *(const float **)(a1 + 80);
      size_t v22 = *(const float **)(a1 + 88);
      uint64_t v23 = *(float **)(a1 + 104);
      float v11 = *(float *)(a1 + 24);
    }
    else
    {
      if (v20 == 1)
      {
        size_t v22 = *(const float **)(a1 + 88);
        uint64_t v23 = *(float **)(a1 + 104);
        vDSP_Length v24 = *(unsigned int *)(a1 + 8);
        uint64_t v21 = *(const float **)(a1 + 48);
        goto LABEL_18;
      }
      if (*(unsigned char *)(a1 + 112))
      {
LABEL_19:
        memcpy(a4, *(const void **)(a1 + 48), 4 * *(unsigned int *)(a1 + 8));
        vDSP_vmul(*(const float **)(a1 + 40), 1, *(const float **)(a1 + 40), 1, *(float **)(a1 + 96), 1, *(unsigned int *)(a1 + 8));
        vDSP_vsub(*(const float **)(a1 + 96), 1, (const float *)a4, 1, (float *)a4, 1, *(unsigned int *)(a1 + 8));
        vDSP_Length v25 = *(unsigned int *)(a1 + 8);
        float __B = 0.0;
        vDSP_vthres((const float *)a4, 1, &__B, (float *)a4, 1, v25);
        goto LABEL_20;
      }
      uint64_t v21 = *(const float **)(a1 + 64);
      size_t v22 = *(const float **)(a1 + 88);
      uint64_t v23 = *(float **)(a1 + 104);
      float v11 = *(float *)(a1 + 20);
    }
    vDSP_Length v24 = *(unsigned int *)(a1 + 8);
LABEL_18:
    vDSP_vsub(v21, 1, v22, 1, v23, 1, v24);
    float __B = v11;
    vDSP_vsma(v23, 1, &__B, v19, 1, v19, 1, v24);
    goto LABEL_19;
  }
LABEL_20:
  int v26 = *(_DWORD *)(a1 + 8);
  uint64_t v27 = *(void *)(a1 + 128);
  if (v26 == 1)
  {
    uint64_t v28 = *(int *)(v27 + 12);
    *(float *)(*(void *)v27 + 4 * v2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *__A;
    *(_DWORD *)(v27 + 12) = ((int)v28 + 1) % *(_DWORD *)(v27 + 8);
  }
  else
  {
    int v29 = *(_DWORD *)(v27 + 8);
    uint64_t v30 = *(int *)(v27 + 12);
    if (v29 < v26) {
      int v26 = *(_DWORD *)(v27 + 8);
    }
    int v31 = v30 + v26;
    int v32 = v30 + v26 - v29;
    if (v32 < 0)
    {
      memcpy((void *)(*(void *)v27 + 4 * v30), __A, 4 * v26);
    }
    else
    {
      int v33 = v29 - v30;
      memcpy((void *)(*(void *)v27 + 4 * v30), __A, 4 * (v29 - (int)v30));
      memcpy(*(void **)v27, &__A[v33], 4 * v32);
      int v31 = v32;
    }
    *(_DWORD *)(v27 + 12) = v31;
  }
}

void FeatureAverager<float>::~FeatureAverager(void *a1)
{
  *a1 = &unk_1F14A97F8;
  FeatureAverager<float>::deallocateStorage(a1);

  JUMPOUT(0x1C185D370);
}

void *FeatureAverager<float>::~FeatureAverager(void *a1)
{
  *a1 = &unk_1F14A97F8;
  FeatureAverager<float>::deallocateStorage(a1);
  return a1;
}

void FeatureAverager<double>::allocateStorage(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = malloc_type_malloc(8 * v2, 0x2C8E6D5CuLL);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = v3;
    bzero(v3, 8 * v2);
    *(void *)(a1 + 4std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    uint64_t v7 = malloc_type_malloc(8 * v6, 0x2C8E6D5CuLL);
    unsigned int v8 = v7;
    if (!v6 || v7)
    {
      bzero(v7, 8 * v6);
      *(void *)(a1 + 56) = v8;
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      uint64_t v10 = malloc_type_malloc(8 * v9, 0x2C8E6D5CuLL);
      float v11 = v10;
      if (!v9 || v10)
      {
        bzero(v10, 8 * v9);
        *(void *)(a1 + 64) = v11;
        uint64_t v12 = *(unsigned int *)(a1 + 8);
        vDSP_Length v13 = malloc_type_malloc(8 * v12, 0x2C8E6D5CuLL);
        uint64_t v14 = v13;
        if (!v12 || v13)
        {
          bzero(v13, 8 * v12);
          *(void *)(a1 + 72) = v14;
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          float v16 = malloc_type_malloc(8 * v15, 0x2C8E6D5CuLL);
          vDSP_Length v17 = v16;
          if (!v15 || v16)
          {
            bzero(v16, 8 * v15);
            *(void *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v17;
            uint64_t v18 = *(unsigned int *)(a1 + 8);
            double v19 = malloc_type_malloc(8 * v18, 0x2C8E6D5CuLL);
            int v20 = v19;
            if (!v18 || v19)
            {
              bzero(v19, 8 * v18);
              *(void *)(a1 + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v20;
              uint64_t v21 = *(unsigned int *)(a1 + 8);
              size_t v22 = malloc_type_malloc(8 * v21, 0x2C8E6D5CuLL);
              uint64_t v23 = v22;
              if (!v21 || v22)
              {
                bzero(v22, 8 * v21);
                *(void *)(a1 + 96) = v23;
                uint64_t v24 = *(unsigned int *)(a1 + 8);
                vDSP_Length v25 = malloc_type_malloc(8 * v24, 0x2C8E6D5CuLL);
                int v26 = v25;
                if (!v24 || v25)
                {
                  bzero(v25, 8 * v24);
                  *(void *)(a1 + 104) = v26;
                  uint64_t v27 = *(unsigned int *)(a1 + 8);
                  uint64_t v28 = malloc_type_malloc(8 * v27, 0x2C8E6D5CuLL);
                  int v29 = v28;
                  if (!v27 || v28)
                  {
                    bzero(v28, 8 * v27);
                    *(void *)(a1 + 112) = v29;
                    operator new();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  int v31 = std::bad_alloc::bad_alloc(exception);
}

void sub_1BB33033C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void FeatureAverager<double>::deallocateStorage(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    if (*v2) {
      MEMORY[0x1C185D340](*v2, 0x1000C8000313F17);
    }
    MEMORY[0x1C185D370](v2, 0x1080C40FC6463CFLL);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3) {
    free(v3);
  }
  BOOL v4 = (void *)a1[13];
  if (v4) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[12];
  if (v5) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[11];
  if (v6) {
    free(v6);
  }
  uint64_t v7 = (void *)a1[10];
  if (v7) {
    free(v7);
  }
  unsigned int v8 = (void *)a1[9];
  if (v8) {
    free(v8);
  }
  uint64_t v9 = (void *)a1[8];
  if (v9) {
    free(v9);
  }
  uint64_t v10 = (void *)a1[7];
  if (v10) {
    free(v10);
  }
  float v11 = (void *)a1[6];
  if (v11)
  {
    free(v11);
  }
}

void FeatureAverager<double>::initializeTables(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 64), a2, 8 * *(unsigned int *)(a1 + 8));
  memcpy(*(void **)(a1 + 48), *(const void **)(a1 + 64), 8 * *(unsigned int *)(a1 + 8));
  vDSP_vmulD(*(const double **)(a1 + 64), 1, *(const double **)(a1 + 64), 1, *(double **)(a1 + 72), 1, *(unsigned int *)(a1 + 8));
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  size_t v4 = 8 * v3;
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 64);
    do
    {
      double v8 = *(double *)(v7 + v5);
      if (v8 <= 1.0)
      {
        float v11 = (double *)(*(void *)(a1 + 72) + v5);
        double v9 = *v11;
        double v12 = 1.01;
      }
      else
      {
        double v9 = 0.01 / v8 + 1.0;
        uint64_t v10 = *(void *)(a1 + 72);
        float v11 = (double *)(v10 + 8 * v6);
        double v12 = *(double *)(v10 + v5);
      }
      *float v11 = v9 * v12;
      ++v6;
      v5 += 8;
    }
    while (v4 != v5);
  }
  vDSP_Length v13 = *(void **)(a1 + 56);
  if ((*(unsigned char *)(a1 + 128) & 2) != 0)
  {
    uint64_t v14 = *(const void **)(a1 + 72);
    memcpy(v13, v14, v4);
  }
  else
  {
    bzero(v13, v4);
  }
}

void FeatureAverager<double>::Update(uint64_t a1, const double *__A, void *__dst, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 124) + 1;
  *(_DWORD *)(a1 + 124) = v8;
  if (v8 <= *(_DWORD *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    uint64_t v14 = *(double **)(a1 + 48);
    uint64_t v15 = *(double **)(a1 + 112);
    double v16 = *(double *)(a1 + 24);
    vDSP_Length v17 = *(unsigned int *)(a1 + 8);
    vDSP_vsubD(*(const double **)(a1 + 64), 1, __A, 1, v15, 1, v17);
    double __B = v16;
    vDSP_vsmaD(v15, 1, &__B, v14, 1, v14, 1, v17);
    double v11 = 0.0;
  }
  else
  {
    if (v8 <= *(_DWORD *)(a1 + 16)) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    *(unsigned char *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v9;
    uint64_t v10 = *(double **)(a1 + 48);
    double v11 = 0.0;
    if (v9 == 2)
    {
      int v18 = *(_DWORD *)(a1 + 40);
      int v19 = *(_DWORD *)(a1 + 44);
      int v20 = *(const double **)(a1 + 80);
      if (v18 < v19)
      {
        uint64_t v21 = *(uint64_t **)(a1 + 136);
        uint64_t v22 = *v21;
        int v23 = -v18;
        int v24 = -v19;
        vDSP_Length v25 = *(void **)(a1 + 80);
        do
        {
          if (v18 < 0) {
            int v26 = *((_DWORD *)v21 + 2)
          }
                + ~((v23 + *((_DWORD *)v21 + 2) - *((_DWORD *)v21 + 3) - 1) % *((_DWORD *)v21 + 2));
          else {
            int v26 = (v18 + *((_DWORD *)v21 + 3)) % *((_DWORD *)v21 + 2);
          }
          *v25++ = *(void *)(v22 + 8 * v26);
          ++v18;
          --v23;
        }
        while (v24 != v23);
      }
      double v12 = *(double **)(a1 + 112);
      double v27 = *(double *)(a1 + 32);
      vDSP_Length v13 = *(unsigned int *)(a1 + 8);
      vDSP_vsubD(v20, 1, __A, 1, v12, 1, v13);
      double __B = v27;
    }
    else
    {
      double v11 = 1.0 / (double)v8;
      double v12 = *(double **)(a1 + 112);
      vDSP_Length v13 = *(unsigned int *)(a1 + 8);
      vDSP_vsubD(*(const double **)(a1 + 48), 1, __A, 1, v12, 1, v13);
      double __B = v11;
    }
    vDSP_vsmaD(v12, 1, &__B, v10, 1, v10, 1, v13);
  }
  memcpy(__dst, *(const void **)(a1 + 48), 8 * *(unsigned int *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 128) & 2) != 0)
  {
    vDSP_vmulD(__A, 1, __A, 1, *(double **)(a1 + 96), 1, *(unsigned int *)(a1 + 8));
    uint64_t v28 = *(double **)(a1 + 56);
    int v29 = *(unsigned __int8 *)(a1 + 120);
    if (v29 == 2)
    {
      vDSP_vmulD(*(const double **)(a1 + 80), 1, *(const double **)(a1 + 80), 1, *(double **)(a1 + 88), 1, *(unsigned int *)(a1 + 8));
      uint64_t v30 = *(const double **)(a1 + 88);
      int v31 = *(const double **)(a1 + 96);
      int v32 = *(double **)(a1 + 112);
      double v11 = *(double *)(a1 + 32);
    }
    else
    {
      if (v29 == 1)
      {
        int v31 = *(const double **)(a1 + 96);
        int v32 = *(double **)(a1 + 112);
        vDSP_Length v33 = *(unsigned int *)(a1 + 8);
        uint64_t v30 = *(const double **)(a1 + 56);
        goto LABEL_24;
      }
      if (*(unsigned char *)(a1 + 120))
      {
LABEL_25:
        memcpy(a4, *(const void **)(a1 + 56), 8 * *(unsigned int *)(a1 + 8));
        vDSP_vmulD(*(const double **)(a1 + 48), 1, *(const double **)(a1 + 48), 1, *(double **)(a1 + 104), 1, *(unsigned int *)(a1 + 8));
        vDSP_vsubD(*(const double **)(a1 + 104), 1, (const double *)a4, 1, (double *)a4, 1, *(unsigned int *)(a1 + 8));
        vDSP_Length v34 = *(unsigned int *)(a1 + 8);
        double __B = 0.0;
        vDSP_vthresD((const double *)a4, 1, &__B, (double *)a4, 1, v34);
        goto LABEL_26;
      }
      uint64_t v30 = *(const double **)(a1 + 72);
      int v31 = *(const double **)(a1 + 96);
      int v32 = *(double **)(a1 + 112);
      double v11 = *(double *)(a1 + 24);
    }
    vDSP_Length v33 = *(unsigned int *)(a1 + 8);
LABEL_24:
    vDSP_vsubD(v30, 1, v31, 1, v32, 1, v33);
    double __B = v11;
    vDSP_vsmaD(v32, 1, &__B, v28, 1, v28, 1, v33);
    goto LABEL_25;
  }
LABEL_26:
  int v35 = *(_DWORD *)(a1 + 8);
  uint64_t v36 = *(void *)(a1 + 136);
  if (v35 == 1)
  {
    uint64_t v37 = *(int *)(v36 + 12);
    *(double *)(*(void *)v36 + 8 * v37) = *__A;
    *(_DWORD *)(v36 + 12) = ((int)v37 + 1) % *(_DWORD *)(v36 + 8);
  }
  else
  {
    int v38 = *(_DWORD *)(v36 + 8);
    uint64_t v39 = *(int *)(v36 + 12);
    if (v38 < v35) {
      int v35 = *(_DWORD *)(v36 + 8);
    }
    int v40 = v39 + v35;
    int v41 = v39 + v35 - v38;
    if (v41 < 0)
    {
      memcpy((void *)(*(void *)v36 + 8 * v39), __A, 8 * v35);
    }
    else
    {
      int v42 = v38 - v39;
      memcpy((void *)(*(void *)v36 + 8 * v39), __A, 8 * (v38 - (int)v39));
      memcpy(*(void **)v36, &__A[v42], 8 * v41);
      int v40 = v41;
    }
    *(_DWORD *)(v36 + 12) = v40;
  }
}

void FeatureAverager<double>::~FeatureAverager(void *a1)
{
  *a1 = &unk_1F14A9838;
  FeatureAverager<double>::deallocateStorage(a1);

  JUMPOUT(0x1C185D370);
}

void *FeatureAverager<double>::~FeatureAverager(void *a1)
{
  *a1 = &unk_1F14A9838;
  FeatureAverager<double>::deallocateStorage(a1);
  return a1;
}

float ASAFeatures::computeCepstralSpeechWindow(ASAFeatures *this, float a2, float a3, float *a4, float *a5)
{
  float v10 = a3;
  float v11 = a2;
  float __B = -a3;
  vDSP_Length v6 = a5;
  vDSP_vsadd((const float *)this, 1, &__B, a4, 1, a5);
  vDSP_vsmul(a4, 1, &v11, a4, 1, v6);
  vDSP_vsadd(a4, 1, &v10, a4, 1, v6);
  float v8 = 0.0;
  vDSP_sve(a4, 1, &v8, v6);
  float v8 = 1.0 / v8;
  vDSP_vsmul(a4, 1, &v8, a4, 1, v6);
  return result;
}

void *std::vector<float *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1BB330B20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

float ASAFeatures::AvgTonalityPower(void *a1, uint64_t a2)
{
  int v15 = 0;
  float v16 = 0.0;
  ASAFeatures::getRMS((uint64_t)a1, (ASAFeatures **)a2, &v16, (float *)&v15);
  size_t v4 = *(const float **)(a2 + 88);
  vDSP_Length v5 = *(unsigned int *)(*a1 + 72);
  float v6 = *(float *)(a1[15] + 8);
  float __C = 0.0;
  vDSP_maxmgv(v4, 1, &__C, v5);
  float v7 = 0.0;
  if (__C > v6) {
    float v7 = 1.0;
  }
  float __C = v7 + (float)((float)(1.0 - v7) * 0.005);
  float v14 = __C * v16;
  uint64_t v13 = 0;
  float v12 = 0.0;
  (*(void (**)(void, float *, char *, int *))(**(void **)(a1[22] + 120) + 16))(*(void *)(a1[22] + 120), &v16, (char *)&v13 + 4, &v15);
  (*(void (**)(void, float *, uint64_t *, int *))(**(void **)(a1[22] + 128) + 16))(*(void *)(a1[22] + 128), &__C, &v13, &v15);
  (*(void (**)(void, float *, float *, int *))(**(void **)(a1[22] + 136) + 16))(*(void *)(a1[22] + 136), &v14, &v12, &v15);
  uint64_t v8 = *(void *)(a1[22] + 120);
  int v9 = *(unsigned __int8 *)(v8 + 112);
  if (v9 == 2)
  {
    unsigned int v10 = *(_DWORD *)(v8 + 16);
  }
  else if (v9 == 1)
  {
    unsigned int v10 = *(_DWORD *)(v8 + 116);
  }
  else
  {
    unsigned int v10 = 0;
    if (!*(unsigned char *)(v8 + 112)) {
      unsigned int v10 = *(_DWORD *)(v8 + 12);
    }
  }
  return log((float)((float)((float)(v12 * (float)v10)
                           / (float)((float)(*(float *)&v13 * (float)v10) + *(float *)(a1[15] + 12)))
                   / *((float *)&v13 + 1)));
}

float ASAFeatures::getRMS(uint64_t a1, ASAFeatures **a2, float *a3, float *a4)
{
  if (*(unsigned char *)(a1 + 976))
  {
    float v7 = ASAFeatures::computeCenteredRMS(*a2, *(unsigned int *)(*(void *)a1 + 64), *(_DWORD *)(*(void *)a1 + 16));
    *(float *)(a1 + 98DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
    float v8 = log10(v7);
    *(float *)(a1 + 984) = v8 * 20.0;
  }
  else
  {
    float v7 = *(float *)(a1 + 980);
  }
  *a3 = v7;
  float result = *(float *)(a1 + 984);
  *a4 = result;
  return result;
}

float ASAFeatures::computeCenteredRMS(ASAFeatures *this, vDSP_Length __N, int a3)
{
  unsigned int v3 = __N;
  float __C = 0.0;
  vDSP_svesq((const float *)this+ (unint64_t)(float)(unint64_t)((float)((float)(a3 - __N) * 0.5) + 0.5), 1, &__C, __N);
  return sqrt(__C / (double)v3);
}

float ASAFeatures::AvgPitchDensity(uint64_t a1, uint64_t a2)
{
  vDSP_Length v3 = *(unsigned int *)(a1 + 944);
  float v4 = *(float *)(a1 + 948);
  vDSP_Length v5 = (const float *)(*(void *)(a2 + 88) + 4 * *(unsigned int *)(a1 + 936));
  float __C = 0.0;
  vDSP_svemg(v5, 1, &__C, v3);
  float __C = v4 * __C;
  int v8 = 0;
  float v9 = 0.0;
  (*(void (**)(void, float *, float *, int *))(**(void **)(*(void *)(a1 + 176) + 112) + 16))(*(void *)(*(void *)(a1 + 176) + 112), &__C, &v9, &v8);
  float v6 = log(v9);
  return -v6;
}

float ASAFeatures::CepstralVariance(void *a1, uint64_t a2)
{
  vDSP_Length v3 = *(unsigned int *)(*a1 + 72);
  float v4 = (float *)a1[69];
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 88);
    uint64_t v7 = a1[88];
    long double v8 = *(float *)(a1[13] + 8);
    float v9 = 0.0;
    do
    {
      float v10 = 0.0;
      if (v5 * 4) {
        float v10 = pow(fabsf(*(float *)(v6 + v5 * 4) * *(float *)(v7 + v5 * 4)), v8);
      }
      float v9 = v10 + v9;
      v4[v5++] = v10;
    }
    while (v3 != v5);
  }
  else
  {
    float v9 = 0.0;
  }
  float __B = 1.0 / v9;
  vDSP_vsmul(v4, 1, &__B, v4, 1, v3);
  float __C = 0.0;
  float v18 = 0.0;
  float v11 = (const float *)a1[69];
  float v12 = (const float *)a1[89];
  uint64_t v13 = (float *)a1[73];
  vDSP_Length v14 = *(unsigned int *)(*a1 + 72);
  vDSP_vmul(v11, 1, v12, 1, v13, 1, v14);
  vDSP_sve(v13, 1, &__C, v14);
  float __B = -1.0;
  vDSP_vsmsa(v12, 1, &__B, &__C, v13, 1, v14);
  vDSP_vsq(v13, 1, v13, 1, v14);
  vDSP_vmul(v13, 1, v11, 1, v13, 1, v14);
  vDSP_sve(v13, 1, &v18, v14);
  float __B = *(float *)(*a1 + 8) * (float)(*(float *)(*a1 + 8) / v18);
  float v16 = 0.0;
  (*(void (**)(void, float *, float *, float *))(**(void **)(a1[22] + 104) + 16))(*(void *)(a1[22] + 104), &__B, &v16, &__C);
  return log(v16);
}

float ASAFeatures::CepstralSparsity(uint64_t a1, uint64_t a2)
{
  vDSP_Length v3 = *(const float **)(a2 + 88);
  float v4 = *(const float **)(a1 + 680);
  uint64_t v5 = *(float **)(a1 + 688);
  uint64_t v6 = *(float **)(a1 + 696);
  vDSP_Length v7 = *(unsigned int *)(*(void *)a1 + 72);
  HIDWORD(__B) = *(_DWORD *)(a1 + 928);
  vDSP_vsmul(v3, 1, (const float *)&__B + 1, v5, 1, v7);
  vDSP_vmul(v3, 1, v4, 1, v6, 1, v7);
  float *v5 = 0.0;
  *uint64_t v6 = 0.0;
  long double v8 = *(const float **)(a1 + 688);
  float v9 = *(const float **)(a1 + 696);
  vDSP_Length v10 = *(unsigned int *)(*(void *)a1 + 72);
  uint64_t __B = 0;
  vDSP_svemg(v8, 1, (float *)&__B + 1, v10);
  vDSP_svesq(v9, 1, (float *)&__B, v10);
  *((float *)&__B + 1) = sqrtf(*(float *)&__B) / *((float *)&__B + 1);
  float v12 = 0.0;
  LODWORD(__B) = 0;
  (*(void (**)(void, char *, uint64_t *, float *))(**(void **)(*(void *)(a1 + 176) + 96) + 16))(*(void *)(*(void *)(a1 + 176) + 96), (char *)&__B + 4, &__B, &v12);
  return log(v12);
}

float ASAFeatures::ReconDiffVar(void *a1, uint64_t a2)
{
  float __C = 0.0;
  vDSP_svesq(*(const float **)(a2 + 56), 1, &__C, *(unsigned int *)(*a1 + 56));
  float __C = sqrtf(__C);
  float v6 = 0.0;
  vDSP_svesq(*(const float **)(a2 + 16), 1, &v6, *(unsigned int *)(*a1 + 56));
  float __C = __C / sqrtf(v6);
  uint64_t v5 = 0;
  (*(void (**)(void, float *, char *, uint64_t *))(**(void **)(a1[22] + 88) + 16))(*(void *)(a1[22] + 88), &__C, (char *)&v5 + 4, &v5);
  return log(*(float *)&v5);
}

float ASAFeatures::FluxVar(float **a1, uint64_t a2)
{
  float __C = 0.0;
  vDSP_vsub(*(const float **)(a2 + 48), 1, *(const float **)(a2 + 40), 1, a1[70], 1, *((unsigned int *)*a1 + 14));
  vDSP_svesq(a1[70], 1, &__C, *((unsigned int *)*a1 + 14));
  float v4 = *a1;
  float __C = sqrtf(__C) * (*a1)[3];
  float v7 = 0.0;
  vDSP_svesq(*(const float **)(a2 + 40), 1, &v7, *((unsigned int *)v4 + 14));
  float __C = __C / sqrtf(v7);
  uint64_t v6 = 0;
  (*(void (**)(void, float *, char *, uint64_t *))(**((void **)a1[22] + 10) + 16))(*((void *)a1[22] + 10), &__C, (char *)&v6 + 4, &v6);
  return log(*(float *)&v6);
}

float ASAFeatures::CentroidVar(void *a1, uint64_t a2)
{
  vDSP_Length v3 = *(const float **)(a2 + 40);
  float v4 = (float)*(float *)(*a1 + 68);
  uint64_t v5 = (const float *)a1[83];
  uint64_t v6 = (float *)a1[70];
  vDSP_Length v7 = *(unsigned int *)(*a1 + 56);
  float __C = 0.0;
  vDSP_sve(v3, 1, &__C, v7);
  float v8 = __C;
  vDSP_vmul(v3, 1, v5, 1, v6, 1, v7);
  float __C = 0.0;
  vDSP_sve(v6, 1, &__C, v7);
  float __C = (float)(__C / v8) * v4;
  float v10 = 0.0;
  int v11 = 0;
  (*(void (**)(void, float *, int *, float *))(**(void **)(a1[22] + 72) + 16))(*(void *)(a1[22] + 72), &__C, &v11, &v10);
  return sqrtf(v10);
}

float ASAFeatures::SpectralRolloffHzVar(void *a1, uint64_t a2)
{
  vDSP_Length v3 = *(const float **)(a2 + 40);
  float v4 = *(float *)(a1[8] + 8);
  float v5 = *(float *)(*a1 + 68);
  vDSP_Length v6 = *(unsigned int *)(*a1 + 56);
  float __C = 0.0;
  vDSP_sve(v3, 1, &__C, v6);
  float v7 = __C * v4;
  float v8 = *v3;
  float v9 = 0.0;
  if (v6) {
    BOOL v10 = v8 < v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    int v11 = (float *)(v3 + 1);
    int v12 = 1;
    while (v6 != v12)
    {
      float v13 = *v11++;
      float v8 = v8 + v13;
      ++v12;
      if (v8 >= v7)
      {
        LODWORD(v6) = v12 - 1;
        break;
      }
    }
    float v9 = (float)v6;
  }
  float __C = v9 * (float)v5;
  float v15 = 0.0;
  int v16 = 0;
  (*(void (**)(void, float *, int *, float *))(**(void **)(a1[22] + 64) + 16))(*(void *)(a1[22] + 64), &__C, &v16, &v15);
  return sqrtf(v15);
}

float ASAFeatures::LowEnergyFrac(void *a1, ASAFeatures **a2)
{
  int v18 = 0;
  float RMS = ASAFeatures::getRMS((uint64_t)a1, a2, (float *)&v18, &v17);
  int v15 = 0;
  float v16 = 0.0;
  (*(void (**)(void, int *, float *, int *, float))(**(void **)(a1[22] + 56) + 16))(*(void *)(a1[22] + 56), &v18, &v16, &v15, RMS);
  uint64_t v4 = *(void *)(a1[22] + 56);
  if (*(unsigned char *)(v4 + 112))
  {
    if (*(unsigned char *)(v4 + 112) == 1) {
      unsigned int v5 = *(_DWORD *)(v4 + 116);
    }
    else {
      unsigned int v5 = *(float *)(*a1 + 52);
    }
    if (v5)
    {
      int v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = 0;
      float v9 = v16 * *(float *)(a1[7] + 8);
      int v10 = -v5;
      do
      {
        float v19 = 0.0;
        --v6;
        MRRingBuffer<float>::GetSampleRange(*(uint64_t **)(v4 + 128), *(_DWORD *)(v4 + 8) * v6, *(_DWORD *)(v4 + 8) * v6 + *(_DWORD *)(v4 + 8), &v19);
        if (v19 >= v9) {
          unsigned int v11 = v8;
        }
        else {
          unsigned int v11 = v8 + 1;
        }
        if (v19 > 0.00055)
        {
          unsigned int v8 = v11;
          ++v7;
        }
      }
      while (v10 != v6);
    }
    else
    {
      unsigned int v8 = 0;
      unsigned int v7 = 0;
    }
    if (v7 <= 1) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = v7;
    }
    double v12 = (float)((float)((float)v8 / (float)v13) + 0.025);
  }
  else
  {
    double v12 = 0.0250000004;
  }
  return log(v12 / (1.0 - v12));
}

float ASAFeatures::ModEnergy2(uint64_t a1, uint64_t a2)
{
  vDSP_Length v3 = *(const float **)(a2 + 32);
  uint64_t v4 = *(float **)(a1 + 464);
  uint64_t v5 = *(void *)(a1 + 472);
  uint64_t v6 = *(void *)(a1 + 544);
  uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 40);
  unsigned int v8 = *(_DWORD *)(a1 + 1008);
  unsigned int v9 = *(_DWORD *)(a1 + 872);
  float __B = *(float *)(*(void *)a1 + 44);
  vvlogf(v4, v3, (const int *)&__B);
  if (v8 <= v9) {
    (*(void (**)(uint64_t, float *, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v4, v5, v6);
  }
  int v10 = *(float **)(a1 + 480);
  unsigned int v11 = *(float **)(a1 + 488);
  unsigned int v13 = *(float **)(a1 + 496);
  double v12 = *(float **)(a1 + 504);
  vDSP_Length v14 = *(float **)(a1 + 512);
  int v15 = *(float **)(a1 + 520);
  float v17 = *(float **)(a1 + 464);
  float v16 = *(const float **)(a1 + 472);
  int v18 = *(float **)(a1 + 528);
  float v51 = v18;
  float v19 = *(double *)(a1 + 880);
  float v20 = *(double *)(a1 + 888);
  float v21 = *(double *)(a1 + 896);
  vDSP_Length v22 = *(unsigned int *)(*(void *)a1 + 44);
  float v23 = 0.0;
  float __B = (float)((float)(*(float *)(a1 + 968) * v19)
              + (float)(v21
                      * (float)((float)((float)(*(float *)(a1 + 956) + 0.0) - *(float *)(a1 + 960))
                              - *(float *)(a1 + 964))))
      + (float)(v20 * *(float *)(a1 + 972));
  vDSP_vsmul(v16, 1, &__B, v18, 1, v22);
  *(void *)(a1 + 96DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(void *)(a1 + 956);
  *(_DWORD *)(a1 + 956) = 0;
  *(_DWORD *)(a1 + 972) = *(_DWORD *)(a1 + 968);
  *(float *)(a1 + 96std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = __B;
  VADGenUtils::TwoPoleBandpass_Array<float>(v17, v10, v11, v13, v14, v15, v12, v22, v19, v20, v21);
  ASAFeatures::backupBandpassArrayStates((ASAFeatures *)v17, v10, v11, v13, v12, v14, v15, v22, v50);
  vDSP_vadd(v12, 1, v51, 1, v12, 1, v22);
  int v24 = *(float **)(a1 + 536);
  double v25 = *(double *)(a1 + 904);
  double v26 = *(double *)(a1 + 912);
  double v27 = *(double *)(a1 + 920);
  uint64_t v28 = *(unsigned int *)(*(void *)a1 + 44);
  uint64_t v29 = 4 * v28;
  memcpy(v24, *(const void **)(a1 + 504), 4 * v28);
  if (v28)
  {
    float v33 = 0.0;
    float v34 = 0.0;
    float v35 = 0.0;
    float v36 = 0.0;
    do
    {
      float v37 = *v24;
      float v30 = v25;
      float v31 = v26;
      float v32 = v27;
      float v38 = (float)((float)(v33 * v30) + (float)(v32 * (float)((float)((float)(v36 + *v24) - v35) - v34)))
          + (float)(v31 * v23);
      *v24++ = v38;
      float v23 = v33;
      float v33 = v38;
      float v34 = v35;
      float v35 = v36;
      float v36 = v37;
      v29 -= 4;
    }
    while (v29);
  }
  uint64_t v39 = *(float **)(a1 + 536);
  int v40 = *(float **)(a1 + 544);
  int v41 = *(float **)(a1 + 568);
  int v42 = *(float **)(a1 + 48);
  float v43 = v42[6];
  float v44 = v42[7];
  float v45 = v42[8];
  float v46 = v42[9];
  vDSP_Length v47 = *(unsigned int *)(*(void *)a1 + 44);
  vDSP_vabs(v39, 1, v39, 1, v47);
  VADGenUtils::VectorSigmoid<float>(v39, v39, v40, v41, v47, v43, v44);
  float __B = 0.0;
  vDSP_vsq(v39, 1, v39, 1, v47);
  vDSP_sve(v39, 1, &__B, v47);
  float v48 = exp((float)((float)(sqrtf(__B) - v45) * v46));
  float __B = v48 / (float)(v48 + 1.0);
  int v52 = 0;
  float v53 = 0.0;
  (*(void (**)(void, float *, float *, int *))(**(void **)(*(void *)(a1 + 176) + 48) + 16))(*(void *)(*(void *)(a1 + 176) + 48), &__B, &v53, &v52);
  return log(v53 / (1.0 - v53));
}

void ASAFeatures::backupBandpassArrayStates(ASAFeatures *this, float *a2, float *__A, float *__C, const float *a5, float *a6, float *a7, vDSP_Length __M, unsigned int a9)
{
  vDSP_Length v15 = __M;
  vDSP_mmov(__A, __C, __M, 1uLL, __M, __M);
  vDSP_mmov(a2, __A, v15, 1uLL, v15, v15);
  vDSP_mmov((const float *)this, a2, v15, 1uLL, v15, v15);
  vDSP_mmov(a6, a7, v15, 1uLL, v15, v15);

  vDSP_mmov(a5, a6, v15, 1uLL, v15, v15);
}

float ASAFeatures::ModEnergy(uint64_t a1, uint64_t a2)
{
  vDSP_Length v3 = *(float **)(a1 + 408);
  uint64_t v4 = *(float **)(a1 + 432);
  float v21 = *(float **)(a1 + 424);
  vDSP_Length v22 = *(float **)(a1 + 416);
  uint64_t v6 = *(float **)(a1 + 448);
  uint64_t v5 = *(float **)(a1 + 456);
  double v7 = *(double *)(a1 + 848);
  double v8 = *(double *)(a1 + 856);
  double v9 = *(double *)(a1 + 864);
  int v10 = *(float **)(a1 + 440);
  vDSP_Length v11 = *(unsigned int *)(*(void *)a1 + 44);
  if (v11)
  {
    double v12 = *(float **)(a2 + 32);
    uint64_t v13 = 4 * v11;
    vDSP_Length v14 = *(float **)(a1 + 408);
    do
    {
      float v15 = *v12++;
      float v16 = log(v15);
      *v14++ = v16;
      v13 -= 4;
    }
    while (v13);
  }
  float v17 = v9;
  float v18 = v8;
  float v19 = v7;
  VADGenUtils::TwoPoleBandpass_Array<float>(v3, v22, v21, v4, v6, v5, v10, v11, v19, v18, v17);
  ASAFeatures::backupBandpassArrayStates((ASAFeatures *)v3, v22, v21, v4, v10, v6, v5, v11, v21);
  float __C = 0.0;
  vDSP_svesq(v10, 1, &__C, v11);
  float __C = sqrtf(__C);
  int v23 = 0;
  float v24 = 0.0;
  (*(void (**)(void, float *, float *, int *))(**(void **)(*(void *)(a1 + 176) + 32) + 16))(*(void *)(*(void *)(a1 + 176) + 32), &__C, &v24, &v23);
  return log(v24);
}

float ASAFeatures::LogRmsStdDev(uint64_t a1, ASAFeatures **a2)
{
  float v5 = 0.0;
  ASAFeatures::getRMS(a1, a2, &v6, &v5);
  float v5 = v5 * 0.11513;
  uint64_t v4 = 0;
  (*(void (**)(void, float *, char *, uint64_t *))(**(void **)(*(void *)(a1 + 176) + 24) + 16))(*(void *)(*(void *)(a1 + 176) + 24), &v5, (char *)&v4 + 4, &v4);
  return log((float)(*(float *)&v4 + 0.000821));
}

float ASAFeatures::NormRms(uint64_t a1, ASAFeatures **a2)
{
  float v8 = 0.0;
  ASAFeatures::getRMS(a1, a2, &v8, &v7);
  double v6 = v8;
  double v4 = 0.0;
  double v5 = 0.0;
  (*(void (**)(void, double *, double *, double *))(**(void **)(a1 + 592) + 16))(*(void *)(a1 + 592), &v6, &v5, &v4);
  return log10(sqrt(v4) / v5) * 20.0;
}

float ASAFeatures::RmsDynamicRange(void *a1, ASAFeatures **a2)
{
  float v16 = 0.0;
  ASAFeatures::getRMS((uint64_t)a1, a2, &v17, &v16);
  float v3 = v16 * 0.11513;
  double v4 = (uint64_t *)a1[50];
  uint64_t v5 = *v4;
  int v6 = *((_DWORD *)v4 + 2);
  uint64_t v7 = *((int *)v4 + 3);
  *(float *)(*v4 + 4 * v7) = v16 * 0.11513;
  int v8 = ((int)v7 + 1) % v6;
  *((_DWORD *)v4 + 3) = v8;
  int v9 = (int)(float)(1.0 - *(float *)(*a1 + 52));
  if (v9 < 0)
  {
    int v11 = -v9;
    int v12 = v6 - v8;
    float v10 = v3;
    do
    {
      int v13 = v6 + ~((v12 + v11) % v6);
      float v14 = *(float *)(v5 + 4 * v13);
      if (v10 > v14) {
        float v10 = *(float *)(v5 + 4 * v13);
      }
      if (v3 < v14) {
        float v3 = *(float *)(v5 + 4 * v13);
      }
      --v11;
    }
    while (v11);
  }
  else
  {
    float v10 = v3;
  }
  return log((float)(v3 - v10));
}

float ASAFeatures::FilteredRmsDBDeriv(uint64_t a1, ASAFeatures **a2)
{
  float v5 = 0.0;
  ASAFeatures::getRMS(a1, a2, &v6, &v5);
  float v3 = v5 - *(float *)(*(void *)(a1 + 32) + 8);
  float result = (float)(v3 - *(float *)(a1 + 1000))
         + (float)(*(float *)(a1 + 844) * (float)(*(float *)(a1 + 1004) - (float)(v3 - *(float *)(a1 + 1000))));
  *(float *)(a1 + 1004) = result;
  *(float *)(a1 + 100DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v3;
  return result;
}

float ASAFeatures::FilteredRmsDB(uint64_t a1, ASAFeatures **a2)
{
  float v6 = 0.0;
  ASAFeatures::getRMS(a1, a2, &v7, &v6);
  float v3 = v6 - *(float *)(*(void *)(a1 + 32) + 8);
  float v4 = *(float *)(a1 + 992);
  float result = (float)((float)(v4 * *(float *)(a1 + 832))
                 + (float)(*(float *)(a1 + 840) * (float)(v3 - *(float *)(a1 + 988))))
         + (float)(*(float *)(a1 + 836) * *(float *)(a1 + 996));
  *(float *)(a1 + 996) = v4;
  *(float *)(a1 + 992) = result;
  *(float *)(a1 + 98std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v3;
  return result;
}

float ASAFeatures::HarmonicConsistency(uint64_t a1, uint64_t a2)
{
  float v3 = *(float **)(a1 + 344);
  double v4 = *(double *)(a1 + 800);
  double v5 = *(double *)(a1 + 808);
  double v6 = *(double *)(a1 + 816);
  uint64_t v7 = *(unsigned int *)(*(void *)a1 + 60);
  uint64_t v8 = 4 * v7;
  memcpy(v3, *(const void **)(a2 + 24), 4 * v7);
  int v36 = v7;
  vvlogf(v3, v3, &v36);
  if (v7)
  {
    float v12 = 0.0;
    uint64_t v13 = 4 * v7;
    float v14 = v3;
    float v15 = 0.0;
    float v16 = 0.0;
    float v17 = 0.0;
    float v18 = 0.0;
    do
    {
      float v19 = *v14;
      float v9 = v4;
      float v10 = v5;
      float v11 = v6;
      float v20 = (float)((float)(v15 * v9) + (float)(v11 * (float)((float)((float)(v18 + *v14) - v17) - v16)))
          + (float)(v10 * v12);
      *v14++ = v20;
      float v12 = v15;
      float v15 = v20;
      float v16 = v17;
      float v17 = v18;
      float v18 = v19;
      v13 -= 4;
    }
    while (v13);
    do
    {
      if (*v3 < 0.0) {
        *float v3 = 0.0;
      }
      ++v3;
      v8 -= 4;
    }
    while (v8);
  }
  if (*(_DWORD *)(a1 + 1008) <= *(_DWORD *)(a1 + 824)) {
    (*(void (**)(void, void, void, void))(**(void **)(*(void *)(a1 + 176) + 16) + 16))(*(void *)(*(void *)(a1 + 176) + 16), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 368));
  }
  vDSP_Length v22 = *(const float **)(a1 + 344);
  float v21 = *(const float **)(a1 + 352);
  float v24 = *(float **)(a1 + 376);
  int v23 = *(float **)(a1 + 384);
  double v25 = *(float **)(a1 + 360);
  double v26 = *(float **)(a1 + 368);
  double v27 = *(float **)(a1 + 576);
  vDSP_Length v28 = *(unsigned int *)(*(void *)a1 + 60);
  uint64_t v29 = *(float **)(a1 + 24);
  float v30 = v29[6];
  float v31 = v29[7];
  float __B = v29[3];
  *(float *)(a1 + 952) = *(float *)(a1 + 952) * __B;
  vDSP_vsmul(v21, 1, (const float *)(a1 + 952), v23, 1, v28);
  vDSP_vsub(v22, 1, v24, 1, v24, 1, v28);
  vDSP_vsma(v24, 1, &__B, v22, 1, v25, 1, v28);
  memcpy(v24, v25, 4 * v28);
  vDSP_vadd(v25, 1, v23, 1, v25, 1, v28);
  VADGenUtils::VectorSigmoid<float>(v25, v25, v26, v27, v28, v30, v31);
  float v32 = *(const float **)(a1 + 360);
  vDSP_Length v33 = *(unsigned int *)(*(void *)a1 + 60);
  float __C = 0.0;
  vDSP_svesq(v32, 1, &__C, v33);
  float v34 = sqrt(__C / (double)v33);
  return log(v34 / (1.0 - v34));
}

float ASAFeatures::BeatsV2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const float **)(a2 + 32);
  double v5 = *(float **)(a1 + 248);
  double v4 = *(float **)(a1 + 256);
  double v6 = *(float **)(a1 + 264);
  uint64_t v7 = *(float **)(a1 + 568);
  uint64_t v8 = *(float **)(a1 + 656);
  uint64_t v9 = *(unsigned int *)(a1 + 792);
  uint64_t v10 = *(void *)(a1 + 392);
  LODWORD(__A.realp) = *(_DWORD *)(*(void *)a1 + 44);
  vDSP_Length realp_low = LODWORD(__A.realp);
  vvlogf(v5, v2, (const int *)&__A);
  int v11 = *(_DWORD *)(v10 + 8);
  uint64_t v12 = *(int *)(v10 + 12);
  if (v11 >= (int)realp_low) {
    int v13 = realp_low;
  }
  else {
    int v13 = *(_DWORD *)(v10 + 8);
  }
  int v14 = v12 + v13;
  int v15 = v12 + v13 - v11;
  if (v15 < 0)
  {
    memcpy((void *)(*(void *)v10 + 4 * v12), v5, 4 * v13);
  }
  else
  {
    int v16 = v11 - v12;
    memcpy((void *)(*(void *)v10 + 4 * v12), v5, 4 * (v11 - (int)v12));
    memcpy(*(void **)v10, &v5[v16], 4 * v15);
    int v14 = v15;
  }
  *(_DWORD *)(v10 + 12) = v14;
  uint64_t v17 = a1;
  if (realp_low)
  {
    int v18 = ~v14 + realp_low;
    int v19 = -(int)realp_low;
    float v20 = v4;
    do
    {
      *float v20 = 0.0;
      if (v9)
      {
        float v21 = *(float **)v10;
        float v22 = 0.0;
        int v23 = v19;
        int v24 = v18;
        uint64_t v25 = 4 * v9;
        double v26 = v8;
        do
        {
          if (v23 + 1 <= 0) {
            int v27 = *(_DWORD *)(v10 + 8) + ~((v24 + *(_DWORD *)(v10 + 8)) % *(_DWORD *)(v10 + 8));
          }
          else {
            int v27 = (v14 + v23) % *(_DWORD *)(v10 + 8);
          }
          float v28 = *v26++;
          float v22 = v22 + (float)(v28 * v21[v27]);
          *float v20 = v22;
          v24 += realp_low;
          v23 -= realp_low;
          v25 -= 4;
        }
        while (v25);
      }
      ++v20;
      --v18;
      ++v19;
    }
    while (v20 != &v4[realp_low]);
    uint64_t v29 = 4 * realp_low;
    float v30 = v4;
    do
    {
      if (*v30 < 0.0) {
        *float v30 = 0.0;
      }
      ++v30;
      v29 -= 4;
    }
    while (v29);
  }
  VADGenUtils::VectorSigmoid<float>(v4, v4, v6, v7, realp_low, 0.8, 3.0);
  float v31 = *(const float **)(a1 + 256);
  uint64_t v32 = *(unsigned int *)(a1 + 732);
  vDSP_Length v33 = *(float **)(a1 + 272);
  int v34 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  if (v34)
  {
    float v35 = *(float **)(a1 + 568);
    int v36 = *(const float **)(a1 + 296);
    vDSP_Length v37 = *(unsigned int *)(*(void *)a1 + 44);
    __B[0] = -1.0;
    float __C = 1.0;
    vDSP_vsmsa(v31, 1, __B, &__C, v35, 1, v37);
    vDSP_vdiv(v35, 1, v31, 1, v35, 1, v37);
    LODWORD(__A.realp) = v37;
    vvlogf(v35, v35, (const int *)&__A);
    if (v32)
    {
      float v38 = &v35[v32];
      uint64_t v39 = (float *)v36;
      do
      {
        unint64_t v40 = 0;
        *uint64_t v39 = 0.0;
        float v41 = 0.0;
        do
        {
          float v41 = v41 + v35[v40 / 4];
          *uint64_t v39 = v41;
          v40 += 4;
        }
        while (4 * (2 * v34) + 4 != v40);
        *v39++ = (float)(1.0 / (float)((2 * v34) | 1u)) * v41;
        ++v35;
      }
      while (v35 != v38);
      LODWORD(__A.realp) = v32;
      vvexpf(v33, v36, (const int *)&__A);
      uint64_t v42 = 4 * v32;
      do
      {
        *vDSP_Length v33 = *v33 / (float)(*v33 + 1.0);
        ++v33;
        v42 -= 4;
      }
      while (v42);
    }
    else
    {
      LODWORD(__A.realp) = 0;
      vvexpf(v33, v36, (const int *)&__A);
    }
  }
  else
  {
    memcpy(*(void **)(a1 + 272), *(const void **)(a1 + 256), 4 * v32);
  }
  float v43 = *(float **)(a1 + 272);
  LODWORD(__A.realp) = *(_DWORD *)(a1 + 732);
  vvlogf(v43, v43, (const int *)&__A);
  vDSP_Length v44 = *(unsigned int *)(a1 + 732);
  float v46 = *(const float **)(a1 + 272);
  float v45 = *(const float **)(a1 + 280);
  vDSP_Length v47 = *(float **)(a1 + 296);
  (*(void (**)(void, const float *, const float *, void))(**(void **)(*(void *)(a1 + 176) + 8)
                                                                       + 16))(*(void *)(*(void *)(a1 + 176) + 8), v46, v45, *(void *)(a1 + 288));
  vDSP_vsub(v45, 1, v46, 1, v47, 1, v44);
  vDSP_Length v48 = *(unsigned int *)(a1 + 736);
  int v49 = *(_DWORD *)(a1 + 732);
  uint64_t v50 = *(void *)(a1 + 320);
  float v51 = *(uint64_t **)(a1 + 200);
  uint64_t v52 = 4 * v48;
  if (v51 != *(uint64_t **)(a1 + 208))
  {
    float v54 = *(float **)(a1 + 304);
    float v53 = *(float **)(a1 + 312);
    int32x2_t v55 = *(float **)(a1 + 320);
    float v56 = *(_DWORD **)(a1 + 296);
    do
    {
      uint64_t v58 = *v51++;
      uint64_t v57 = v58;
      LODWORD(v5std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *v56++;
      (*(void (**)(uint64_t, float *, float *, float))(*(void *)v57 + 16))(v57, v54, v53, *(float *)&v58);
      __A.unint64_t realp = v54;
      __A.imagp = v53;
      vDSP_zvabs(&__A, 1, v55, 1, v48);
      int32x2_t v55 = (float *)((char *)v55 + v52);
    }
    while (v51 != *(uint64_t **)(a1 + 208));
  }
  uint64_t v59 = (v49 * v48);
  if (v59)
  {
    uint64_t v60 = 0;
    uint64_t v61 = 4 * v59;
    do
    {
      uint64_t v62 = v50 + v60;
      *(_DWORD *)uint64_t v62 = 0;
      *(float *)(v62 + 4) = *(float *)(v50 + v60 + 4) * 0.5;
      v60 += v52;
    }
    while (v61 != v60);
  }
  uint64_t v63 = *(float **)(a1 + 304);
  float v64 = *(float **)(a1 + 288);
  vDSP_Length v65 = *(unsigned int *)(a1 + 736);
  vDSP_Length v66 = *(unsigned int *)(a1 + 732);
  long long v67 = *(const float **)(a1 + 320);
  unint64_t v68 = *(_DWORD **)(a1 + 328);
  uint64_t v69 = *(_DWORD **)(a1 + 336);
  uint64_t v126 = *(void **)(a1 + 648);
  LODWORD(__A.realp) = -1054867456;
  uint64_t v117 = v64;
  vDSP_vfill((const float *)&__A, v64, 1, v66);
  int v119 = v66;
  if (v66)
  {
    int v70 = 0;
    unint64_t v71 = *(void *)(a1 + 752) - *(void *)(a1 + 744);
    uint64_t v118 = v71 & 0x3FFFFFFFCLL;
    uint64_t v125 = (v71 >> 2);
    uint64_t v123 = v68;
    int v121 = v117;
    uint64_t v122 = v69;
    do
    {
      int v120 = v70;
      if (v118)
      {
        unint64_t v72 = 0;
        float v73 = -10.0;
        do
        {
          if (v72 >= (uint64_t)(v126[1] - *v126) >> 3) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          vDSP_vmul(*(const float **)(*v126 + 8 * v72), 1, v67, 1, v63, 1, v65);
          float v74 = *v63;
          if (v65)
          {
            uint64_t v75 = 0;
            unsigned int v76 = 0;
            uint64_t v77 = 4 * v65;
            float v78 = *v63;
            do
            {
              float v79 = v63[v75];
              if (v79 <= v78)
              {
                float v78 = v63[v75];
              }
              else if (v79 >= v74)
              {
                unsigned int v76 = v75;
                float v74 = v63[v75];
              }
              ++v75;
              v77 -= 4;
            }
            while (v77);
          }
          else
          {
            unsigned int v76 = 0;
            float v78 = *v63;
          }
          if (v74 != v78)
          {
            unsigned int v80 = v65 - 2;
            if (v76 != v65 - 1) {
              unsigned int v80 = v76;
            }
            if (!v76) {
              unsigned int v80 = 1;
            }
            uint64_t v81 = *(void *)(v17 + 744);
            if (v72 >= (*(void *)(v17 + 752) - v81) >> 2) {
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            }
            unsigned int v82 = *(_DWORD *)(v81 + 4 * v72);
            if (v82)
            {
              uint64_t v83 = 0;
              float v84 = v63[v80 - 1];
              float v85 = v63[v80 + 1];
              float v86 = v85 + (float)(v84 - (float)(v63[v80] + v63[v80]));
              float v87 = (float)((float)((float)(v84 - v85) / (float)(v86 + v86)) + (float)v80) + 1.0;
              while (1)
              {
                float v88 = (double)v83 + 0.5;
                float v89 = (double)v83 + 1.5;
                unsigned int v90 = (float)(unint64_t)((float)(v87 * v88) + 0.5) - 1;
                unsigned int v91 = (float)(unint64_t)((float)(v87 * v89) + 0.5) - 1;
                if (v90 >= v65 || v91 >= v65) {
                  break;
                }
                v68[v83] = v90;
                v69[v83++] = v91;
                if (v82 == v83) {
                  goto LABEL_66;
                }
              }
              unsigned int v82 = v83;
            }
LABEL_66:
            uint64_t v93 = *(void *)(v17 + 768);
            if (v72 >= (*(void *)(v17 + 776) - v93) >> 2) {
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            }
            float v94 = *(float *)(v93 + 4 * v72);
            if (v82)
            {
              uint64_t v95 = 4 * v82;
              float v96 = 1.0;
              float v97 = 0.0;
              uint64_t v98 = v68;
              unint64_t v99 = v69;
              do
              {
                int v101 = *v98++;
                int v100 = v101;
                uint64_t v102 = &v67[v101];
                int v103 = *v99++;
                vDSP_Length v104 = (float)(v103 - v100 + 1);
                LODWORD(__A.realp) = 0;
                vDSP_svesq(v102, 1, (float *)&__A, v104);
                __B[0] = 0.0;
                double v105 = sqrt(*(float *)&__A.realp);
                vDSP_svemg(v102, 1, __B, v104);
                float v106 = log((double)v104 / (__B[0] / v105 * (__B[0] / v105)));
                float v97 = v97 + (float)(v96 * v106);
                float v96 = v96 * v94;
                v95 -= 4;
              }
              while (v95);
            }
            else
            {
              float v97 = 0.0;
            }
            float v107 = pow(v94, (double)v82);
            float v108 = (float)((float)(1.0 - v94) / (float)(1.0 - v107)) * v97;
            uint64_t v17 = a1;
            uint64_t v69 = v122;
            unint64_t v68 = v123;
            if (v108 > v73)
            {
              *int v121 = v108;
              float v73 = v108;
            }
          }
          ++v72;
        }
        while (v72 != v125);
      }
      v67 += v65;
      ++v121;
      int v70 = v120 + 1;
    }
    while (v120 + 1 != v119);
  }
  uint64_t v109 = *(unsigned int *)(v17 + 732);
  long double v110 = *(float *)(*(void *)(v17 + 16) + 20);
  if (v109)
  {
    uint64_t v111 = 4 * v109;
    long double v112 = 0.0;
    int v113 = v117;
    do
    {
      float v114 = *v113++;
      long double v112 = v112 + pow(v114, v110);
      v111 -= 4;
    }
    while (v111);
  }
  else
  {
    long double v112 = 0.0;
  }
  float v115 = pow(v112, 1.0 / v110);
  return log(v115 + 2.2204e-16);
}

float ASAFeatures::ChromaHiFreq(uint64_t a1, uint64_t a2)
{
  vDSP_Length v3 = *(unsigned int *)(*(void *)(a1 + 8) + 8);
  double v4 = *(float **)(a1 + 224);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v3)
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(unsigned int **)(a1 + 616);
    float v10 = 0.0;
    int v11 = v4;
    int v12 = *(_DWORD *)(a1 + 720);
    do
    {
      *int v11 = 0.0;
      float v13 = 0.0;
      if (v12)
      {
        int v14 = v12;
        do
        {
          unsigned int v15 = *v9++;
          float v13 = *(float *)(v8 + 4 * v15) + v13;
          *int v11 = v13;
          --v14;
        }
        while (v14);
      }
      float v10 = v10 + (float)(v13 * v13);
      ++v11;
      ++v7;
    }
    while (v7 != v3);
    double v6 = v10;
  }
  float v16 = 1.0 / sqrt(v6);
  float __B = v16;
  vDSP_vsmul(v4, 1, &__B, v4, 1, v3);
  uint64_t v17 = *(const float **)(a1 + 608);
  int v19 = *(const float **)(a1 + 224);
  int v18 = *(float **)(a1 + 232);
  float v20 = *(float **)(a1 + 240);
  uint64_t v21 = *(void *)(a1 + 8);
  int v23 = *(_DWORD *)(v21 + 16);
  uint64_t v22 = *(unsigned int *)(v21 + 20);
  float v24 = *(float *)(v21 + 28);
  vDSP_Length __P = *(unsigned int *)(v21 + 8);
  vDSP_mmul(*(const float **)(a1 + 600), 1, v19, 1, v18, 1, __P, 1uLL, __P);
  vDSP_mmul(v17, 1, v19, 1, v20, 1, __P, 1uLL, __P);
  unsigned int v26 = v23 - 1;
  if (v23 - 1 != v22)
  {
    int v27 = &v20[v26];
    float v28 = &v18[v26];
    float v29 = 0.0;
    uint64_t v30 = 4 * v22 - 4 * v26;
    do
    {
      float v31 = *v28++;
      float v32 = v31;
      float v33 = *v27++;
      float v29 = v29 + (float)((float)(v33 * v33) + (float)(v32 * v32));
      v30 -= 4;
    }
    while (v30);
    double v5 = v29;
  }
  float v34 = sqrt(v5 * v24);
  float __B = 1.0 - v34;
  float v36 = 0.0;
  int v37 = 0;
  (*(void (**)(void, float *, float *, int *))(***(void ***)(a1 + 176) + 16))(**(void **)(a1 + 176), &__B, &v36, &v37);
  return log(v36 / (1.0 - v36));
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  begiuint64_t n = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::vector<unsigned int>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    float v20 = &begin[__sz];
    goto LABEL_15;
  }
  std::vector<unsigned int>::size_type v6 = __sz - v5;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(end, 4 * v6);
    float v20 = &end[v6];
LABEL_15:
    this->__end_ = v20;
    return;
  }
  if (__sz >> 62) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (char *)value - (char *)begin;
  std::vector<unsigned int>::size_type v10 = v9 >> 1;
  if (v9 >> 1 <= __sz) {
    std::vector<unsigned int>::size_type v10 = __sz;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v11);
  std::vector<unsigned int>::pointer v13 = this->__begin_;
  std::vector<unsigned int>::pointer v14 = this->__end_;
  unsigned int v15 = &v12[4 * v5];
  uint64_t v17 = (unsigned int *)&v12[4 * v16];
  bzero(v15, 4 * v6);
  int v18 = (unsigned int *)&v15[4 * v6];
  while (v14 != v13)
  {
    int v19 = *--v14;
    *((_DWORD *)v15 - 1) = v19;
    v15 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v15;
  this->__end_ = v18;
  this->__end_cap_.__value_ = v17;
  if (v13)
  {
    operator delete(v13);
  }
}

void VADGenUtils::TwoPoleBandpassCoeff<double>(double *a1, double *a2, double *a3, double a4)
{
  double v7 = a4;
  unsigned int v8 = 0;
  double v9 = a4 * 0.5;
  double v18 = a4 + -0.0001;
  double v19 = a4 + 0.0001;
  do
  {
    double v10 = (v9 + v7) * 0.5;
    double v11 = 1.0 / ((v10 + 1.0) * (v10 + 1.0));
    double v12 = v10 * v11;
    double v13 = (v10 * v10 + -1.0) * -2.0 * v11;
    double v14 = -((v10 + -1.0) * (v10 + -1.0)) * v11;
    double v15 = VADGenUtils::priv_TwopoleBandpass_Evalmagresp<double>(v19, v13, v14, v10 * v11);
    double v16 = v15 - VADGenUtils::priv_TwopoleBandpass_Evalmagresp<double>(v18, v13, v14, v12);
    if (v16 < 0.0) {
      double v9 = (v9 + v7) * 0.5;
    }
    if (v16 > 0.0) {
      double v7 = v10;
    }
    if (v16 == 0.0) {
      break;
    }
  }
  while (v8++ < 0x31);
  *a3 = v12;
  *a1 = v13;
  *a2 = v14;
}

double VADGenUtils::priv_TwopoleBandpass_Evalmagresp<double>(double a1, double a2, double a3, double a4)
{
  double v7 = a1 + a1;
  double v8 = a1 + a1 + a1;
  __double2 v9 = __sincos_stret(a1);
  __double2 v10 = __sincos_stret(v7);
  __double2 v11 = __sincos_stret(v8);
  return sqrt(((v10.__sinval - v9.__sinval + v11.__sinval) * (v10.__sinval - v9.__sinval + v11.__sinval)+ (v9.__cosval + 1.0 - v10.__cosval - v11.__cosval) * (v9.__cosval + 1.0 - v10.__cosval - v11.__cosval))/ ((v10.__sinval * a3 + a2 * v9.__sinval) * (v10.__sinval * a3 + a2 * v9.__sinval)+ (1.0 - a2 * v9.__cosval - a3 * v10.__cosval) * (1.0 - a2 * v9.__cosval - a3 * v10.__cosval)))* a4;
}

uint64_t ausdk::AUEffectBase::ShouldBypassEffect(ausdk::AUEffectBase *this)
{
  return *((unsigned __int8 *)this + 552);
}

uint64_t ausdk::AUEffectBase::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 552) = a2;
  return this;
}

void ausdk::AUEffectBase::NewKernel(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AULittleLateNightMode::SetAudioChannelLayout(AULittleLateNightMode *this, unsigned int a2, unsigned int a3, const AudioChannelLayout *a4)
{
  return 0;
}

uint64_t AULittleLateNightMode::SupportedNumChannels(AULittleLateNightMode *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AULittleLateNightMode::SupportedNumChannels(AUChannelInfo const**)::kSupportedNumChannels;
  }
  return 32;
}

uint64_t AULittleLateNightMode::SupportsTail(AULittleLateNightMode *this)
{
  return 1;
}

double AULittleLateNightMode::GetTailTime(AULittleLateNightMode *this)
{
  uint64_t v1 = (AudioUnit *)*((void *)this + 74);
  if (v1 == *((AudioUnit **)this + 75)) {
    return 0.0;
  }
  double v3 = 0.0;
  while (1)
  {
    double outData = 0.0;
    UInt32 ioDataSize = 8;
    Propertsimd_float4 y = AudioUnitGetProperty(*v1, 0x14u, 0, 0, &outData, &ioDataSize);
    if (Property) {
      break;
    }
    double v3 = v3 + outData;
    if (++v1 == *((AudioUnit **)this + 75)) {
      return v3;
    }
  }
  return (double)Property;
}

double AULittleLateNightMode::GetLatency(AULittleLateNightMode *this)
{
  uint64_t v1 = (AudioUnit *)*((void *)this + 74);
  if (v1 == *((AudioUnit **)this + 75)) {
    return 0.0;
  }
  double v3 = 0.0;
  while (1)
  {
    double outData = 0.0;
    UInt32 ioDataSize = 8;
    Propertsimd_float4 y = AudioUnitGetProperty(*v1, 0xCu, 0, 0, &outData, &ioDataSize);
    if (Property) {
      break;
    }
    double v3 = v3 + outData;
    if (++v1 == *((AudioUnit **)this + 75)) {
      return v3;
    }
  }
  return (double)Property;
}

uint64_t AULittleLateNightMode::CopyClumpName(AULittleLateNightMode *this, int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if (!a3) {
    return 4294956428;
  }
  uint64_t v6 = *((void *)this + 74);
  if (a3 > (unint64_t)((*((void *)this + 75) - v6) >> 3)) {
    return 4294956428;
  }
  Component = AudioComponentInstanceGetComponent(*(AudioComponentInstance *)(v6 + 8 * (a3 - 1)));
  AudioComponentCopyName(Component, a5);
  return 0;
}

uint64_t AULittleLateNightMode::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (*((_DWORD *)this + 155))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, v4);
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, void, float))*this + 19))(this, v4, 0, 0, 0, Parameter);
      uint64_t v4 = (v4 + 1);
    }
    while (v4 < *((_DWORD *)this + 155));
  }
  *((unsigned char *)this + 616) = 1;
  return v3;
}

uint64_t AULittleLateNightMode::SaveState(AULittleLateNightMode *this, ausdk **a2)
{
  return 0;
}

uint64_t AULittleLateNightMode::GetParameterInfo(AULittleLateNightMode *this, AudioUnitScope a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  UInt32 ioDataSize = 104;
  if (a3 <= 1)
  {
    std::vector<unsigned int>::size_type v5 = (char *)&kAUHostParameters + 104 * a3;
    *(_OWORD *)&buffer->clumpID = *((_OWORD *)v5 + 4);
    *(_OWORD *)&buffer->name[48] = *((_OWORD *)v5 + 3);
    *(_OWORD *)&buffer->unit = *((_OWORD *)v5 + 5);
    *(_OWORD *)buffer->name = *(_OWORD *)v5;
    *(_OWORD *)&buffer->name[16] = *((_OWORD *)v5 + 1);
    *(_OWORD *)&buffer->name[32] = *((_OWORD *)v5 + 2);
    uint64_t v6 = *((void *)v5 + 12);
    *(void *)&buffer->flags = v6;
    p_flags = &buffer->flags;
    CFStringRef v8 = (const __CFString *)*((void *)v5 + 9);
    buffer->cfNameString = v8;
    buffer->flags = v6 | 0x8000010;
    CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->clumpID = 0;
LABEL_5:
    *p_flags |= 0x100000u;
    return result;
  }
  inuint64_t Element = 0;
  unsigned int v13 = 0;
  __double2 v11 = AULittleLateNightMode::audioUnitForParameterID(this, a3 - 2, &v13, &inElement);
  if (v11)
  {
    uint64_t result = AudioUnitGetProperty(v11, 4u, a2, inElement, buffer, &ioDataSize);
    buffer->clumpID = v13 + 1;
    p_flags = &buffer->flags;
    goto LABEL_5;
  }
  return 4294956421;
}

OpaqueAudioComponentInstance *AULittleLateNightMode::audioUnitForParameterID(AULittleLateNightMode *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  *a3 = 0;
  uint64_t v4 = (OpaqueAudioComponentInstance **)*((void *)this + 74);
  if (v4 == *((OpaqueAudioComponentInstance ***)this + 75)) {
    return 0;
  }
  unsigned int v9 = 0;
  while (1)
  {
    *a4 = a2 - v9;
    __double2 v10 = *v4;
    UInt32 outDataSize = 0;
    AudioUnitGetPropertyInfo(v10, 3u, 0, 0, &outDataSize, 0);
    v9 += outDataSize >> 2;
    if (v9 > a2) {
      break;
    }
    ++*a3;
    if (++v4 == *((OpaqueAudioComponentInstance ***)this + 75)) {
      return 0;
    }
  }
  return *v4;
}

uint64_t AULittleLateNightMode::ProcessBufferLists(AULittleLateNightMode *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *ioData, UInt32 a5)
{
  if (*((_DWORD *)this + 84) < a5) {
    return 4294956422;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956421;
  }
  unint64_t v9 = *((unsigned int *)this + 156);
  if (v9)
  {
    unint64_t v10 = 0;
    p_mData = &ioData->mBuffers[0].mData;
    double v12 = &a3->mBuffers[0].mData;
    do
    {
      if (*v12 != *p_mData)
      {
        DspLib::copy(*v12, a5, *p_mData);
        unint64_t v9 = *((unsigned int *)this + 156);
      }
      ++v10;
      p_mData += 2;
      v12 += 2;
    }
    while (v10 < v9);
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (*((unsigned char *)this + 552)) {
    return 0;
  }
  long long v13 = *((_OWORD *)this + 18);
  *(_OWORD *)&inTimeStamp.mSampleTime = *((_OWORD *)this + 17);
  *(_OWORD *)&inTimeStamp.mRateScalar = v13;
  long long v14 = *((_OWORD *)this + 20);
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *((_OWORD *)this + 19);
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v14;
  AudioUnitRenderActionFlags ioActionFlags = 512;
  if (v9)
  {
    unint64_t v15 = 0;
    double v16 = &ioData->mBuffers[0].mData;
    do
    {
      uint64_t v17 = (float *)*v16;
      v16 += 2;
      DspLib::multiply(v17, a5, *((float *)this + 157));
      ++v15;
      unint64_t v9 = *((unsigned int *)this + 156);
    }
    while (v15 < v9);
  }
  double v18 = (AudioUnit *)*((void *)this + 74);
  double v19 = (AudioUnit *)*((void *)this + 75);
  if (v18 == v19)
  {
LABEL_20:
    if (v9)
    {
      unint64_t v20 = 0;
      uint64_t v21 = &ioData->mBuffers[0].mData;
      do
      {
        uint64_t v22 = (float *)*v21;
        v21 += 2;
        DspLib::multiply(v22, a5, *((float *)this + 158));
        ++v20;
      }
      while (v20 < *((unsigned int *)this + 156));
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = AudioUnitProcess(*v18, &ioActionFlags, &inTimeStamp, a5, ioData);
    if (result) {
      return result;
    }
    if (++v18 == v19)
    {
      LODWORD(v9) = *((_DWORD *)this + 156);
      goto LABEL_20;
    }
  }
}

uint64_t ausdk::AUEffectBase::CanScheduleParameters(ausdk::AUEffectBase *this)
{
  return 1;
}

uint64_t AULittleLateNightMode::SetParameter(AULittleLateNightMode *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 <= 1)
  {
    if (a2 == 1) {
      *((float *)this + 15std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = DspLib::dB2Amp(this, a5);
    }
    else {
      *((float *)this + 157) = DspLib::dB2Amp(this, a5);
    }
    goto LABEL_7;
  }
  *(void *)inID = 0;
  unint64_t v10 = AULittleLateNightMode::audioUnitForParameterID(this, a2 - 2, &inID[1], inID);
  if (v10)
  {
    AudioUnitSetParameter(v10, inID[0], 0, 0, a5, 0);
LABEL_7:
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    return 0;
  }
  return 4294956418;
}

uint64_t AULittleLateNightMode::SetProperty(AULittleLateNightMode *this, const __CFString *a2, int a3, AudioUnitElement a4, _DWORD *a5, UInt32 a6)
{
  if (!a3)
  {
    if (a2 == 6625)
    {
      AudioUnitWithSubType = AULittleLateNightMode::findAudioUnitWithSubType(this, a2);
      if (AudioUnitWithSubType) {
        AudioUnitSetProperty(AudioUnitWithSubType, 0x19E1u, 0, a4, a5, a6);
      }
    }
    else
    {
      if (a2 != 1635022431)
      {
        a3 = 0;
        goto LABEL_2;
      }
      *((unsigned char *)this + 636) = *a5 != 0;
    }
    return 0;
  }
LABEL_2:

  return ausdk::AUEffectBase::SetProperty(this, (int)a2, a3, a4, a5, a6);
}

AudioComponentInstance AULittleLateNightMode::findAudioUnitWithSubType(AULittleLateNightMode *this, const __CFString *a2)
{
  int v3 = convertCFStringToOSType(@"'mozs'");
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (AudioComponentInstance *)*((void *)this + 74);
  if (v4 == *((AudioComponentInstance **)this + 75)) {
    return 0;
  }
  int v5 = v3;
  while (1)
  {
    Component = AudioComponentInstanceGetComponent(*v4);
    AudioComponentGetDescription(Component, &outDesc);
    if (v5 == outDesc.componentSubType) {
      break;
    }
    if (++v4 == *((AudioComponentInstance **)this + 75)) {
      return 0;
    }
  }
  return *v4;
}

uint64_t convertCFStringToOSType(const __CFString *a1)
{
  if (!a1 || CFStringGetLength(a1) < 6) {
    return 0;
  }
  LODWORD(v2) = 0;
  int v3 = 24;
  for (CFIndex i = 1; i != 5; ++i)
  {
    uint64_t v2 = (CFStringGetCharacterAtIndex(a1, i) << v3) + (int)v2;
    v3 -= 8;
  }
  return v2;
}

uint64_t AULittleLateNightMode::GetProperty(AULittleLateNightMode *this, const __CFString *a2, int a3, AudioUnitElement a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t result = 4294956417;
  if ((int)a2 <= 6619)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29) {
        return result;
      }
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 554);
    }
    goto LABEL_15;
  }
  if (a2 == 6620)
  {
    uint64_t result = 0;
    *a5 = (char *)this + 592;
    return result;
  }
  if (a2 != 6625)
  {
    if (a2 != 1635022431) {
      return result;
    }
    uint64_t result = 0;
    int v10 = *((unsigned __int8 *)this + 636);
LABEL_15:
    *(_DWORD *)a5 = v10;
    return result;
  }
  uint64_t result = (uint64_t)AULittleLateNightMode::findAudioUnitWithSubType(this, a2);
  if (result)
  {
    UInt32 ioDataSize = 4;
    AudioUnitGetProperty((AudioUnit)result, 0x19E1u, 0, a4, a5, &ioDataSize);
    return 0;
  }
  return result;
}

uint64_t AULittleLateNightMode::GetPropertyInfo(AULittleLateNightMode *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v7 = 4;
  BOOL v8 = 1;
  uint64_t result = 4294956417;
  if (a2 > 6619)
  {
    if (a2 != 1635022431 && a2 != 6625)
    {
      if (a2 != 6620) {
        return result;
      }
      BOOL v8 = 0;
      unsigned int v7 = 8;
    }
    goto LABEL_10;
  }
  if (a2 == 21 || a2 == 29)
  {
LABEL_10:
    uint64_t result = 0;
    *a6 = v8;
    *a5 = v7;
  }
  return result;
}

uint64_t AULittleLateNightMode::Reset(AULittleLateNightMode *this)
{
  uint64_t v2 = (AudioUnit *)*((void *)this + 74);
  for (CFIndex i = (AudioUnit *)*((void *)this + 75);
        v2 != i && !AudioUnitReset(*v2, 0, 0);
        CFIndex i = (AudioUnit *)*((void *)this + 75))
  {
    ++v2;
  }
  uint64_t v4 = (void *)*((void *)this + 66);
  uint64_t v5 = (void *)*((void *)this + 67);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
    }
    ++v4;
  }
  return 0;
}

uint64_t AULittleLateNightMode::Cleanup(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 592);
  uint64_t v2 = *(void *)(this + 600);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 8;
    do
    {
      this = AudioUnitUninitialize(*(AudioUnit *)(v3 - 8));
      if (this) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = v3 == v2;
      }
      v3 += 8;
    }
    while (!v4);
  }
  return this;
}

uint64_t AULittleLateNightMode::Initialize(AULittleLateNightMode *this)
{
  uint64_t v2 = (AULittleLateNightMode *)((char *)this + 80);
  int v3 = *(__int16 *)(ausdk::AUScope::SafeGetElement((AULittleLateNightMode *)((char *)this + 80), 0) + 108);
  if (v3 != *(__int16 *)(ausdk::AUScope::SafeGetElement((AULittleLateNightMode *)((char *)this + 128), 0) + 108)) {
    return 4294956428;
  }
  *((_DWORD *)this + 156) = v3;
  double v4 = *(double *)(ausdk::AUScope::SafeGetElement((AULittleLateNightMode *)((char *)this + 128), 0) + 80);
  if (v4 != *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80)) {
    return 4294956428;
  }
  if (!*((unsigned char *)this + 616))
  {
    CFPropertyListRef v7 = presetCreateForNumberOfChannels(*((_DWORD *)this + 156), *((unsigned __int8 *)this + 636));
    uint64_t v5 = (*(uint64_t (**)(AULittleLateNightMode *, CFPropertyListRef))(*(void *)this + 288))(this, v7);
    CFRelease(v7);
    if (v5) {
      return v5;
    }
  }
  for (CFIndex i = (AudioUnit *)*((void *)this + 74); i != *((AudioUnit **)this + 75); ++i)
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement(v2, 0);
    long long v10 = *(_OWORD *)(Element + 96);
    inData[0] = *(_OWORD *)(Element + 80);
    inData[1] = v10;
    uint64_t v17 = *(void *)(Element + 112);
    uint64_t v11 = ausdk::AUScope::SafeGetElement((AULittleLateNightMode *)((char *)this + 128), 0);
    long long v12 = *(_OWORD *)(v11 + 96);
    v14[0] = *(_OWORD *)(v11 + 80);
    v14[1] = v12;
    uint64_t v15 = *(void *)(v11 + 112);
    int v13 = *((_DWORD *)this + 84);
    if (AudioUnitSetProperty(*i, 8u, 1u, 0, inData, 0x28u)
      || AudioUnitSetProperty(*i, 8u, 2u, 0, v14, 0x28u)
      || AudioUnitSetProperty(*i, 0xEu, 0, 0, &v13, 4u)
      || AudioUnitInitialize(*i))
    {
      break;
    }
  }

  return ausdk::AUEffectBase::Initialize(this);
}

CFPropertyListRef presetCreateForNumberOfChannels(unsigned int a1, int a2)
{
  uint64_t v2 = MAC_stereo_Mitch_2017_05_22_aupreset;
  if (a2) {
    uint64_t v2 = (char *)&ATV_stereo_2017_05_22_aupreset;
  }
  if (a1 <= 2) {
    int v3 = (const UInt8 *)v2;
  }
  else {
    int v3 = (const UInt8 *)&ATV_MAC_surround_2017_05_22_aupreset;
  }
  if (a1 <= 2) {
    CFIndex v4 = 1013;
  }
  else {
    CFIndex v4 = 1019;
  }
  CFDataRef v5 = CFDataCreate(0, v3, v4);
  CFPropertyListRef v6 = CFPropertyListCreateWithData(0, v5, 0, 0, 0);
  CFRelease(v5);
  return v6;
}

void AULittleLateNightMode::~AULittleLateNightMode(AULittleLateNightMode *this)
{
  *(void *)this = &unk_1F14A98B0;
  uint64_t v2 = (void **)((char *)this + 592);
  std::vector<std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F14C8258;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14A98B0;
  uint64_t v2 = (void **)((char *)this + 592);
  std::vector<std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F14C8258;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void std::vector<std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (OpaqueAudioComponentInstance **)**a1;
  if (v2)
  {
    CFIndex v4 = (OpaqueAudioComponentInstance **)v1[1];
    CFDataRef v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      CFDataRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100](v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    CFIndex v4 = (void *)*--v3;
    uint64_t result = v4;
    *int v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

OpaqueAudioComponentInstance *std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](OpaqueAudioComponentInstance **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
  }
  return result;
}

float lmsfilt_v3::preemphasisFilter(lmsfilt_v3 *this, const float *a2, float *a3, float *a4, float *a5)
{
  int v7 = (int)a2;
  float __B = -0.9;
  int v9 = a2 - 1;
  memcpy(a4 + 1, this, 4 * ((int)a2 - 1));
  vDSP_vsma(a4, 1, &__B, (const float *)this, 1, a4, 1, v7);
  *a4 = *(float *)this + (float)(__B * *a3);
  float result = *((float *)this + v9);
  *a3 = result;
  return result;
}

void lmsfilt_v3::initLmsFilter(int a1, int a2, int a3, uint64_t a4, float ***a5)
{
  float __A = 0.0;
  int v9 = *(_DWORD *)(a4 + 16);
  int v10 = *(_DWORD *)(a4 + 44);
  uint64_t v11 = malloc_type_malloc(0x58uLL, 0x2C8E6D5CuLL);
  if (!v11) {
    goto LABEL_28;
  }
  v11[10] = 0;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *a5 = (float **)v11;
  int v12 = v10 * v9;
  *((_DWORD *)v11 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v10;
  *((_DWORD *)v11 + 9) = v10 * v9;
  int v13 = 4 * v10 * v9;
  uint64_t v14 = (float *)malloc_type_malloc(v13, 0x2C8E6D5CuLL);
  if (v13 && v14 == 0) {
    goto LABEL_28;
  }
  double v16 = v14;
  bzero(v14, v13);
  **a5 = v16;
  uint64_t v17 = (float *)malloc_type_malloc(v13, 0x2C8E6D5CuLL);
  if (v13 && v17 == 0) {
    goto LABEL_28;
  }
  double v19 = v17;
  bzero(v17, v13);
  (*a5)[1] = v19;
  unint64_t v20 = (float *)malloc_type_malloc(v13, 0x2C8E6D5CuLL);
  if (v13 && v20 == 0) {
    goto LABEL_28;
  }
  uint64_t v22 = v20;
  bzero(v20, v13);
  (*a5)[2] = v22;
  int v23 = (float *)malloc_type_malloc(v13, 0x2C8E6D5CuLL);
  float v24 = v23;
  if (v13)
  {
    if (!v23) {
      goto LABEL_28;
    }
  }
  bzero(v23, v13);
  (*a5)[3] = v24;
  uint64_t v25 = (float *)malloc_type_malloc(v13, 0x2C8E6D5CuLL);
  unsigned int v26 = v25;
  if (v13)
  {
    if (!v25)
    {
LABEL_28:
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      float v32 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v25, v13);
  (*a5)[6] = v26;
  vDSP_vfill(&__A, **a5, 1, v12);
  vDSP_vfill(&__A, (*a5)[1], 1, v12);
  vDSP_vfill(&__A, (*a5)[2], 1, v12);
  vDSP_vfill(&__A, (*a5)[3], 1, v12);
  vDSP_vfill(&__A, (*a5)[6], 1, v12);
  int v27 = *a5;
  *((float *)v27 + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)(1.0 - *(float *)(a4 + 88)) + (float)(1.0 - *(float *)(a4 + 88));
  *((_DWORD *)v27 + 11) = 1;
  v27[7] = 0;
  *((_DWORD *)v27 + 16) = 0;
  *((_DWORD *)v27 + 17) = a1;
  *((_DWORD *)v27 + 1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
  *((_DWORD *)v27 + 19) = v10 - 1;
  int v28 = a3 / v9;
  if (a3 / v9 >= v10) {
    int v28 = v10;
  }
  int v29 = (a3 - a2) / v9;
  *((_DWORD *)v27 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v29;
  *((_DWORD *)v27 + 21) = v28;
  if (v28 - v29 <= 1)
  {
    if (v10 == 4) {
      int v30 = -1;
    }
    else {
      int v30 = 0;
    }
    if (v10 > 4) {
      int v30 = -2;
    }
    *((_DWORD *)v27 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v28 + v30;
  }
}

void lmsfilt_v3::removeLmsFilter(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(void *)v2)
      {
        free(*(void **)v2);
        *(void *)uint64_t v2 = 0;
        uint64_t v2 = *a1;
      }
      int v3 = *(void **)(v2 + 8);
      if (v3)
      {
        free(v3);
        *(void *)(v2 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
        uint64_t v2 = *a1;
      }
      CFIndex v4 = *(void **)(v2 + 16);
      if (v4)
      {
        free(v4);
        *(void *)(v2 + 16) = 0;
        uint64_t v2 = *a1;
      }
      CFDataRef v5 = *(void **)(v2 + 24);
      if (v5)
      {
        free(v5);
        *(void *)(v2 + 24) = 0;
        uint64_t v2 = *a1;
      }
      CFPropertyListRef v6 = *(void **)(v2 + 48);
      if (!v6 || (free(v6), *(void *)(v2 + 48) = 0, (uint64_t v2 = *a1) != 0))
      {
        free((void *)v2);
        *a1 = 0;
      }
    }
  }
}

void lmsfilt_v3::runLmsFilter_v3(DSPSplitComplex *this, DSPSplitComplex *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float *a7, float *a8, float *a9, int *a10, int a11, int a12)
{
  int v12 = (int)a8;
  int v18 = (int)a2;
  double v19 = this;
  DSPSplitComplex __D = *this;
  vDSP_Length __N = (int)a2;
  vDSP_vclr(__D.realp, 1, (int)a2);
  vDSP_vclr(v19->imagp, 1, __N);
  float v21 = 0.0;
  float v22 = 0.0;
  if (v12 <= (int)a9)
  {
    float v35 = a7;
    float v36 = v19;
    uint64_t v33 = v12 * v18;
    uint64_t v34 = v12;
    int v32 = a9 - v12;
    int v23 = a9 - v12 + 1;
    float v24 = &a7[v12];
    uint64_t v25 = 4 * v33;
    uint64_t v26 = 4 * __N;
    do
    {
      int v27 = *(_DWORD *)v24++;
      __A.unint64_t realp = (float *)(a3 + v25);
      __A.imagp = (float *)(a4 + v25);
      __B.unint64_t realp = (float *)(a5 + 4 * v27 * v18);
      __B.imagp = &a6[v27 * v18];
      vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      v25 += v26;
      --v23;
    }
    while (v23);
    int v28 = v32 + 1;
    uint64_t v29 = 4 * v33;
    float v22 = 0.0;
    float v21 = 0.0;
    double v19 = v36;
    int v30 = &v35[v34];
    do
    {
      int v31 = *(_DWORD *)v30++;
      float v21 = v21 + (float)(*(float *)(a3 + v29) * *(float *)(a5 + 4 * v31 * v18));
      float v22 = v22 + (float)(*(float *)(a4 + v29) * a6[v31 * v18]);
      v29 += v26;
      --v28;
    }
    while (v28);
  }
  *v19->unint64_t realp = v21;
  *v19->imagp = v22;
}

void std::default_delete<NoiseSuppression::Noise::LPCPitch>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  CFIndex v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  CFDataRef v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (std::__shared_weak_count *)a1[7];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }

  JUMPOUT(0x1C185D370);
}

NoiseSuppression::Noise::VPv3 *NoiseSuppression::Noise::VPv3::VPv3(NoiseSuppression::Noise::VPv3 *this, float a2, int a3, float a4)
{
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((float *)this + 4) = a4;
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 7) = 981668463;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(void *)this = &unk_1F14AE1C0;
  *((_DWORD *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 1025758986;
  *((_DWORD *)this + 22) = 0;
  *(void *)((char *)this + 92) = 0x3F0000003EAA7EFALL;
  *((void *)this + 13) = 0x4140000042480000;
  *((_DWORD *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0x40000000;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((float *)this + 36) = a2;
  *((_DWORD *)this + 37) = a3;
  *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  uint64_t v6 = operator new(0x30uLL);
  *((void *)this + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v6 + 3;
  *((void *)this + 21) = v6 + 3;
  *uint64_t v6 = xmmword_1BB879B50;
  v6[1] = xmmword_1BB879B60;
  *((void *)v6 + 4) = 0x40E00000453B8000;
  *((_DWORD *)v6 + 11) = 1088421888;
  *((void *)this + 19) = v6;
  *((float *)v6 + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a2 * 0.5;
  *(_OWORD *)((char *)this + 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 24std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  return this;
}

void sub_1BB334748(_Unwind_Exception *a1)
{
  NoiseSuppression::Noise::NoiseEstimator::~NoiseEstimator(v1);
  _Unwind_Resume(a1);
}

VPTimeFreqConverter *std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100](VPTimeFreqConverter **a1, VPTimeFreqConverter *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void NoiseSuppression::Noise::NoiseEstimator::~NoiseEstimator(NoiseSuppression::Noise::NoiseEstimator *this)
{
  *(void *)this = &unk_1F14C2718;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2) {
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

uint64_t NoiseSuppression::Noise::NoiseEstimator::SetNoiseMinInit(uint64_t this, float a2)
{
  *(float *)(this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = a2;
  return this;
}

float NoiseSuppression::Noise::NoiseEstimator::GetNoiseMinInit(NoiseSuppression::Noise::NoiseEstimator *this)
{
  return *((float *)this + 7);
}

uint64_t NoiseSuppression::Noise::NoiseEstimator::GetNoiseBins(NoiseSuppression::Noise::NoiseEstimator *this)
{
  return (uint64_t)this + 56;
}

uint64_t NoiseSuppression::Noise::LPCLevinson::GetInternalBuffer(NoiseSuppression::Noise::LPCLevinson *this)
{
  return (uint64_t)this + 48;
}

void *NoiseSuppression::Noise::LPCLevinson::Process(NoiseSuppression::Noise::LPCLevinson *this, float *a2, float *a3, float *a4)
{
  if (*((unsigned char *)this + 24))
  {
    v10[0] = 1;
    void v10[2] = 1;
    void v10[3] = 4 * a4;
    uint64_t v11 = a2;
    v8[0] = 1;
    _OWORD v8[2] = 1;
    void v8[3] = 4 * a4;
    int v9 = a3;
    (*(void (**)(void, float *, _DWORD *, _DWORD *))(**((void **)this + 4) + 32))(*((void *)this + 4), a4, v10, v8);
    memcpy(*((void **)this + 6), (const void *)(*((void *)this + 6) + 4 * *((unsigned int *)this + 4)), 4 * *((unsigned int *)this + 4));
    memcpy((void *)(*((void *)this + 6) + 4 * *((unsigned int *)this + 4)), a3, 4 * *((unsigned int *)this + 4));
    NoiseSuppression::Noise::LPCLevinson::ProcessBlock(this, a3, *((NoiseSuppression::Noise::LPCLevinson **)this + 9), a4);
    uint64_t v11 = (float *)*((void *)this + 9);
    int v9 = a3;
    return (void *)(*(uint64_t (**)(void, float *, _DWORD *, _DWORD *))(**((void **)this + 5) + 32))(*((void *)this + 5), a4, v10, v8);
  }
  else
  {
    return NoiseSuppression::Noise::LPCLevinson::ProcessBlock(this, a2, (NoiseSuppression::Noise::LPCLevinson *)a3, a4);
  }
}

void *NoiseSuppression::Noise::LPCLevinson::ProcessBlock(NoiseSuppression::Noise::LPCLevinson *this, float *a2, NoiseSuppression::Noise::LPCLevinson *a3, float *a4)
{
  vDSP_vmul(*((const float **)this + 6), 1, *((const float **)this + 12), 1, *((float **)this + 15), 1, (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2);
  NoiseSuppression::Noise::LPCLevinson::Correlation(*((void *)this + 15), *((void *)this + 16), (uint64_t)this + 192);
  BOOL v8 = (float *)*((void *)this + 24);
  float v9 = (float)(*v8 + 2.2204e-16) * 1.01;
  *BOOL v8 = v9;
  NoiseSuppression::Noise::LPCLevinson::Levinson((uint64_t *)this + 24, (uint64_t)this + 216, *((_DWORD *)this + 5));
  int v10 = (const float *)*((void *)this + 27);
  uint64_t v11 = (float *)*((void *)this + 18);
  unsigned int v12 = *((_DWORD *)this + 5);

  return NoiseSuppression::Noise::LPCLevinson::Filter(a3, a2, v10, v11, a4, v12);
}

void NoiseSuppression::Noise::LPCLevinson::Correlation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a3 + 8) - *(void *)a3;
  size_t v5 = a2 - a1;
  vDSP_Length v6 = (a2 - a1) >> 2;
  MEMORY[0x1F4188790](a1);
  BOOL v8 = (const float *)&v10[-v7];
  memcpy(&v10[-v7], v9, v5);
  bzero((char *)v8 + v5, v4 - 4);
  int v11 = 0;
  std::vector<float>::assign((char **)a3, v4 >> 2, &v11);
  vDSP_conv(v8, 1, v8, 1, *(float **)a3, 1, v4 >> 2, v6);
}

void NoiseSuppression::Noise::LPCLevinson::Levinson(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v33 - v6;
  float v9 = **v8;
  unint64_t v11 = (uint64_t)(v10[1] - *v10) >> 2;
  HIDWORD(v33) = 0;
  std::vector<float>::assign((char **)a2, v11, (_DWORD *)&v33 + 1);
  bzero(v7, 4 * a3);
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = a3;
    uint64_t v15 = *a1;
    double v16 = *(char **)a2;
    uint64_t v17 = (float *)(*(void *)a2 + 4);
    size_t v18 = 4 * a3;
    do
    {
      uint64_t v19 = v13++;
      float v20 = *(float *)(v15 + 4 * v13);
      if (v19)
      {
        float v21 = v17;
        uint64_t v22 = v12;
        do
        {
          float v23 = *v21++;
          float v20 = v20 - (float)(v23 * *(float *)(v15 + v22));
          v22 -= 4;
        }
        while (v22);
        float v24 = v20 / v9;
        *(float *)&v16[4 * v13] = v24;
        float v25 = -v24;
        uint64_t v26 = 4;
        uint64_t v27 = v12;
        do
        {
          *(float *)&v16[v26] = *(float *)&v7[v26 - 4] + (float)(v25 * *(float *)&v7[v27 - 4]);
          v26 += 4;
          v27 -= 4;
        }
        while (v27);
      }
      else
      {
        float v24 = v20 / v9;
        *(float *)&v16[4 * v13] = v24;
        float v25 = -v24;
      }
      float v9 = v9 * (float)((float)(v25 * v24) + 1.0);
      memcpy(v7, v17, v18);
      v12 += 4;
    }
    while (v13 != v14);
  }
  int v28 = *(char **)a2;
  uint64_t v29 = *(void *)(a2 + 8);
  *(_DWORD *)int v28 = 1065353216;
  if ((unint64_t)(v29 - (void)v28) >= 5)
  {
    unint64_t v30 = (v29 - (uint64_t)v28) >> 2;
    if (v30 <= 2) {
      unint64_t v30 = 2;
    }
    unint64_t v31 = v30 - 1;
    int v32 = (float *)(v28 + 4);
    do
    {
      *int v32 = -*v32;
      ++v32;
      --v31;
    }
    while (v31);
  }
}

void *NoiseSuppression::Noise::LPCLevinson::Filter(NoiseSuppression::Noise::LPCLevinson *this, float *a2, const float *a3, float *a4, float *a5, unsigned int a6)
{
  unsigned int v7 = a5;
  v16[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  uint64_t v13 = (const float *)((char *)v16 - v12);
  memcpy((char *)v16 - v12, v14, 4 * a6);
  memcpy((void *)&v13[a6], a2, 4 * v7);
  vDSP_conv(v13, 1, &a3[a6], -1, (float *)this, 1, v7, a6 + 1);
  return memcpy(a4, &v13[v7], 4 * a6);
}

void NoiseSuppression::Noise::LPCLevinson::~LPCLevinson(NoiseSuppression::Noise::LPCLevinson *this)
{
  NoiseSuppression::Noise::LPCLevinson::~LPCLevinson(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(void *)this = &unk_1F14A9B18;
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  BOOL v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 6);
  if (v9)
  {
    *((void *)this + 7) = v9;
    operator delete(v9);
  }
  int v10 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
}

uint64_t NoiseSuppression::Noise::LPCLevinson::Init(NoiseSuppression::Noise::LPCLevinson *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
  v48.mSampleRate = *((float *)this + 3);
  *(_OWORD *)&v48.mFormatID = xmmword_1BB8727B0;
  *(_OWORD *)&v48.mBytesPerFrame = xmmword_1BB8727C0;
  v47.mSampleRate = v48.mSampleRate;
  *(_OWORD *)&v47.mFormatID = xmmword_1BB8727B0;
  *(_OWORD *)&v47.mBytesPerFrame = xmmword_1BB8727C0;
  uint64_t v2 = NewIIRFilter(&v48, &v47, (const CAStreamBasicDescription *)1);
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = NewIIRFilter(&v48, &v47, (const CAStreamBasicDescription *)1);
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  if (!v6 || !*((void *)this + 5)) {
    return 4294956428;
  }
  v53[0] = 0;
  v53[1] = 0;
  long long v54 = xmmword_1BB879B70;
  uint64_t v55 = 0;
  long long v49 = xmmword_1BB879B80;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0x3FF0000000000000;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 16))(v6, 1, v53);
  (*(void (**)(void, uint64_t, long long *))(**((void **)this + 5) + 16))(*((void *)this + 5), 1, &v49);
  std::vector<float>::resize((uint64_t)this + 72, *((unsigned int *)this + 4));
  unint64_t v7 = *((unsigned int *)this + 4);
  int v46 = 0;
  std::vector<float>::assign((char **)this + 9, v7, &v46);
  std::vector<float>::resize((uint64_t)this + 192, (*((_DWORD *)this + 5) + 1));
  std::vector<float>::resize((uint64_t)this + 216, (*((_DWORD *)this + 5) + 1));
  std::vector<float>::resize((uint64_t)this + 48, (2 * *((_DWORD *)this + 4)));
  unint64_t v8 = (2 * *((_DWORD *)this + 4));
  int v46 = 0;
  std::vector<float>::assign((char **)this + 6, v8, &v46);
  std::vector<float>::resize((uint64_t)this + 96, (2 * *((_DWORD *)this + 4)));
  std::vector<float>::resize((uint64_t)this + 120, (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2);
  std::vector<float>::resize((uint64_t)this + 144, (*((_DWORD *)this + 5) + 1));
  unint64_t v9 = (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2;
  int v46 = 0;
  std::vector<float>::assign((char **)this + 18, v9, &v46);
  uint64_t v10 = *((void *)this + 12);
  uint64_t v11 = *((void *)this + 13) - v10;
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 2;
    unint64_t v14 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
    int64x2_t v35 = vdupq_n_s64(v13);
    uint64x2_t v36 = (uint64x2_t)vdupq_n_s64(v13 - 1);
    float64x2_t v34 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((float)((float)((float)v13 * 2.0) + -1.0)), 0);
    uint64x2_t v15 = (uint64x2_t)xmmword_1BB872720;
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0xBEEB851E);
    float32x2_t v17 = (float32x2_t)vdup_n_s32(0x3F0A3D71u);
    int64x2_t v32 = vdupq_n_s64(2uLL);
    float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    do
    {
      int32x2_t v42 = vmovn_s64((int64x2_t)vcgeq_u64(v36, v15));
      int64x2_t v44 = (int64x2_t)v15;
      uint64_t v18 = v12 + 1;
      v19.i64[0] = v12;
      v19.i64[1] = v12 + 1;
      *(float32x2_t *)v19.i8 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v19, v35)), v33), v34));
      float v38 = *(float *)v19.i32;
      float v40 = cosf(*(float *)&v19.i32[1]);
      v20.f32[0] = cosf(v38);
      v20.f32[1] = v40;
      float32x2_t v21 = vmla_f32(v17, v16, v20);
      if (v42.i8[0]) {
        *(_DWORD *)(v10 + 4 * v12) = v21.i32[0];
      }
      if (v42.i8[4]) {
        *(_DWORD *)(v10 + 4 * v12 + 4) = v21.i32[1];
      }
      uint64x2_t v15 = (uint64x2_t)vaddq_s64(v44, v32);
      v12 += 2;
    }
    while (v18 + 1 != v14);
  }
  std::vector<float>::resize((uint64_t)this + 168, (uint64_t)(*((void *)this + 28) - *((void *)this + 27)) >> 2);
  uint64_t v22 = *((void *)this + 21);
  uint64_t v23 = *((void *)this + 22) - v22;
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v23 >> 2;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    unint64_t v26 = (v25 + 1) & 0xFFFFFFFFFFFFFFFELL;
    uint64x2_t v39 = (uint64x2_t)vdupq_n_s64(v25 - 1);
    uint64x2_t v27 = (uint64x2_t)xmmword_1BB872720;
    int64x2_t v37 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v43 = vmovn_s64((int64x2_t)vcgeq_u64(v39, v27));
      int64x2_t v45 = (int64x2_t)v27;
      double v41 = pow(0.949999988, (double)(int)v24);
      double v28 = pow(0.949999988, (double)((int)v24 + 1));
      if (v43.i8[0])
      {
        float v29 = v41;
        *(float *)(v22 + 4 * v24) = v29;
      }
      if (v43.i8[4])
      {
        float v30 = v28;
        *(float *)(v22 + 4 * v24 + 4) = v30;
      }
      v24 += 2;
      uint64x2_t v27 = (uint64x2_t)vaddq_s64(v45, v37);
    }
    while (v26 != v24);
  }
  uint64_t result = 0;
  *((unsigned char *)this + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 1;
  return result;
}

void NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(NoiseSuppression::Noise::LPCore *this, float *a2, float *a3, VPTimeFreqConverter *a4, VPTimeFreqConverter *a5, float *a6, float *a7)
{
  unsigned int v7 = a3;
  v10.unint64_t realp = (float *)a5;
  v10.imagp = a6;
  VPTimeFreqConverter::Analyze(a4, (const float *)this, &v10);
  float v9 = *v10.realp;
  vDSP_zvmags(&v10, 1, a2, 1, v7);
  *a2 = v9 * v9;
  {
    NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(float *,float *,unsigned int,VPTimeFreqConverter *,float *,float *)::scaleup = 1317011456;
  }
  vDSP_vsmul(a2, 1, (const float *)&NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(float *,float *,unsigned int,VPTimeFreqConverter *,float *,float *)::scaleup, a2, 1, v7);
}

void fb::ComplexMat::transposed(fb::ComplexMat *this, const float *a2)
{
  vDSP_Length v3 = *(int *)a2;
  vDSP_Length v2 = *((int *)a2 + 1);
  *(_DWORD *)this = v2;
  *((_DWORD *)this + 1) = v3;
  *(_OWORD *)((char *)this + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  if ((int)v3 * (int)v2 >= 26) {
    __assert_rtn("ComplexMat", "fbComplexMat.h", 41, "mNumRows * mNumCols <= mCapacity");
  }
  vDSP_mtrans(a2 + 2, 2, (float *)this + 2, 2, v2, v3);
  vDSP_Length v7 = *(int *)a2;
  vDSP_Length v6 = *((int *)a2 + 1);

  vDSP_mtrans(a2 + 3, 2, (float *)this + 3, 2, v6, v7);
}

void fb::ComplexMat::pseudoInverse(fb::ComplexMat *this, const fb::ComplexMat *a2, const fb::ComplexMat *a3)
{
  fb::operator*((uint64_t)v6, (const float *)a2, (uint64_t)a3);
  fb::ComplexMat::inversed((fb::ComplexMat *)v5, v6);
  fb::operator*((uint64_t)this, (const float *)a3, (uint64_t)v5);
}

_DWORD *fb::ComplexMat::stabilize(_DWORD *this, float a2)
{
  LODWORD(v2) = *this;
  unsigned int v3 = this[1];
  if ((signed int)v3 >= *this) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v3;
  }
  if ((int)v2 >= 1)
  {
    unsigned int v4 = 0;
    unsigned int v5 = v3 + 1;
    do
    {
      if (v4 >= 0x19) {
        std::__throw_out_of_range[abi:ne180100]("array::at");
      }
      vDSP_Length v6 = (float *)&this[2 * v4 + 2];
      if (*v6 < 0.000000001) {
        *(void *)vDSP_Length v6 = 814313567;
      }
      v4 += v5;
      --v2;
    }
    while (v2);
  }
  return this;
}

void fb::operator*(uint64_t a1, const float *a2, uint64_t a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  vDSP_Length v3 = *((int *)a2 + 1);
  if (v3 != *(_DWORD *)a3) {
    __assert_rtn("operator*", "fbComplexMat.h", 157, "lhs.mNumCols == rhs.mNumRows");
  }
  vDSP_Length v7 = *(int *)a2;
  vDSP_Length v8 = *(int *)(a3 + 4);
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  float v9 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 20DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  if ((int)v8 * (int)v7 >= 26) {
    __assert_rtn("ComplexMat", "fbComplexMat.h", 41, "mNumRows * mNumCols <= mCapacity");
  }
  DSPSplitComplex v10 = (const float *)(a3 + 8);
  vDSP_mmul(a2 + 2, 2, (const float *)(a3 + 8), 2, v9, 2, v7, v8, v3);
  uint64_t v11 = (const float *)(a3 + 4);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (float *)((char *)v18 - v13);
  vDSP_mmul(a2 + 3, 2, v11 + 2, 2, (float *)((char *)v18 - v13), 1, v15, v16, *((int *)a2 + 1));
  vDSP_vsub(v14, 1, v9, 2, v9, 2, *(int *)v11 * (uint64_t)*(int *)a2);
  float32x2_t v17 = (float *)(a1 + 12);
  vDSP_mmul(a2 + 3, 2, v10, 2, v17, 2, *(int *)a2, *(int *)v11, *((int *)a2 + 1));
  vDSP_mmul(a2 + 2, 2, v11 + 2, 2, v14, 1, *(int *)a2, *(int *)v11, *((int *)a2 + 1));
  vDSP_vadd(v14, 1, v17, 2, v17, 2, *(int *)v11 * (uint64_t)*(int *)a2);
}

void fb::ComplexMat::inversed(fb::ComplexMat *this, float *a2)
{
  if (*(_DWORD *)a2 != *((_DWORD *)a2 + 1)) {
    __assert_rtn("inversed", "fbComplexMat.h", 132, "mNumRows == mNumCols");
  }
  if (*(_DWORD *)a2 != 2) {
    __assert_rtn("inversed", "fbComplexMat.h", 133, "mNumRows == 2");
  }
  float v4 = a2[8];
  float v5 = a2[9];
  float v32 = a2[3];
  float v33 = a2[2];
  float v6 = std::operator*[abi:ne180100]<float>(v33, v32, v4, v5);
  float v8 = v7;
  float v9 = a2[6];
  float v10 = a2[7];
  float v11 = a2[4];
  float v12 = a2[5];
  float v13 = v6 - std::operator*[abi:ne180100]<float>(v9, v10, v11, v12);
  float v15 = v8 - v14;
  if (v13 == 0.0 && v15 == 0.0) {
    __assert_rtn("inversed", "fbComplexMat.h", 135, "det != Complexf{0.f}");
  }
  float v30 = std::operator/[abi:ne180100]<float>(1.0, 0.0, v13, v15);
  float v31 = v16;
  float32x2_t v29 = (float32x2_t)__PAIR64__(LODWORD(v16), LODWORD(v30));
  float v17 = std::operator*[abi:ne180100]<float>(v30, v16, v4, v5);
  int v19 = v18;
  float32x2_t v20 = vneg_f32(v29);
  float v21 = std::operator*[abi:ne180100]<float>(v20.f32[0], v20.f32[1], v11, v12);
  int v23 = v22;
  float v24 = std::operator*[abi:ne180100]<float>(v20.f32[0], v20.f32[1], v9, v10);
  int v26 = v25;
  float v27 = std::operator*[abi:ne180100]<float>(v30, v31, v33, v32);
  *(void *)this = 0x200000002;
  *(_OWORD *)((char *)this + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  *((float *)this + 2) = v17;
  *((_DWORD *)this + 3) = v19;
  *((float *)this + 4) = v21;
  *((_DWORD *)this + 5) = v23;
  *((float *)this + 6) = v24;
  *((_DWORD *)this + 7) = v26;
  *((float *)this + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v27;
  *((_DWORD *)this + 9) = v28;
}

float std::operator*[abi:ne180100]<float>(float a1, float a2, float a3, float a4)
{
  return (float)(a1 * a3) - (float)(a2 * a4);
}

float std::operator/[abi:ne180100]<float>(float a1, float a2, float a3, float a4)
{
  float v15 = a3;
  float v4 = logb(fmaxf(fabsf(a3), fabsf(a4)));
  if ((LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    int v5 = 0;
    float v7 = a4;
  }
  else
  {
    int v5 = (int)v4;
    float v6 = scalbn(v15, -(int)v4);
    float v15 = v6;
    float v7 = scalbn(a4, -(int)v4);
  }
  float v14 = v7;
  float v8 = (float)(v7 * v7) + (float)(v15 * v15);
  float v9 = scalbn((float)((float)((float)(v7 * a2) + (float)(a1 * v15)) / v8), -v5);
  scalbn((float)((float)((float)(a2 * v15) - (float)(a1 * v14)) / v8), -v5);
  return v9;
}

void AULando::LRCLsRs::algoUpmixPI(vDSP_Length a1, AULando::LRCLsRs *this, float *__C, float *__E, float *a5, float *a6, float *a7, float *a8, uint64_t a9, IR::IRProcessor **a10, unsigned int a11, BOOL a12)
{
  v40[2] = *(float **)MEMORY[0x1E4F143B8];
  if ((_BYTE)a9)
  {
    int64x2_t v35 = &v33;
    int64x2_t v37 = a8;
    MEMORY[0x1F4188790](a1);
    int v18 = (float *)((char *)&v33 - ((v17 + 15) & 0x7FFFFFFF0));
    MEMORY[0x1F4188790](v19);
    float v21 = (float *)((char *)&v33 - v20);
    MEMORY[0x1F4188790](v22);
    float v24 = (float *)((char *)&v33 - v23);
    MEMORY[0x1F4188790](v25);
    float v27 = (float *)((char *)&v33 - v26);
    v40[0] = v18;
    v40[1] = v21;
    int v28 = *a10;
    v39[0] = v29;
    uint64x2_t v36 = v30;
    IR::IRProcessor::processMultipleInputs(v28, (const float **)v39, v40, 1u, 2u, a1, 1.0, 0);
    v39[0] = v24;
    v39[1] = v27;
    float v31 = a10[1];
    float v38 = __C;
    IR::IRProcessor::processMultipleInputs(v31, (const float **)&v38, v39, 1u, 2u, a1, 1.0, 0);
    BYTE4(v32) = 1;
    LODWORD(v32) = a1;
    AULando::LRCLsRs::decode_PI((AULando::LRCLsRs *)v18, v21, v24, v27, __E, a5, a6, v36, v37, v32, v33, v34);
  }
  else
  {
    BYTE4(a1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
    LODWORD(a1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a1;
    AULando::LRCLsRs::decode_PI(this, (const float *)this, __C, __C, __E, a5, a6, a7, a8, (vDSP_Length)a10, a11, a12);
  }
}

void AULando::LRCLsRs::decode_PI(AULando::LRCLsRs *this, const float *a2, const float *__C, const float *a4, float *__E, float *a6, float *a7, float *a8, float *a9, vDSP_Length a10, unsigned int a11, BOOL a12)
{
  float __D = 0.057827;
  float __B = 0.40819;
  vDSP_vsmsma((const float *)this, 1, &__B, __C, 1, &__D, __E, 1, a10);
  float v26 = 0.40819;
  float v27 = 0.057827;
  vDSP_vsmsma((const float *)this, 1, &v27, __C, 1, &v26, a6, 1, a10);
  float v24 = 0.32953;
  float v25 = 0.32953;
  vDSP_vsmsma((const float *)this, 1, &v25, __C, 1, &v24, a7, 1, a10);
  if (BYTE4(a10)) {
    float v18 = 1.0;
  }
  else {
    float v18 = -1.0;
  }
  float v22 = v18 * 0.14956;
  float v23 = v18 * -0.32752;
  vDSP_vsmsma(a2, 1, &v23, a4, 1, &v22, a8, 1, a10);
  float v20 = v18 * 0.32752;
  float v21 = v18 * -0.14956;
  vDSP_vsmsma(a2, 1, &v21, a4, 1, &v20, a9, 1, a10);
}

void AULando::LRCLsRs::algoUpmixPISteered(const float *a1, unsigned int a2, AULando::LRCLsRs *a3, const float *a4, float *a5, float *a6, float *a7, float *a8, float a9, float a10, float a11, float *a12, unsigned __int8 a13, char a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17)
{
  float v119 = a10;
  uint64_t v136 = a8;
  uint64_t v137 = a6;
  unint64_t v138 = a7;
  char v139 = a5;
  long long v131 = a4;
  long long v132 = a3;
  uint64_t v149 = a1;
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  unsigned int v120 = a2;
  if (a2)
  {
    int v128 = a16;
    BYTE4(v109) = a13;
    LODWORD(v109) = v120;
    uint64_t v134 = a12;
    AULando::LRCLsRs::decode_PI(v132, (const float *)v132, v131, v131, v139, v137, v138, v136, a12, v109, v110, v111);
    uint64_t v19 = 0;
    int v126 = a15;
    int v118 = (a14 & a15);
    float v116 = 1.0 - a9;
    float v117 = a9 + 1.0;
    uint64_t v129 = v149 + 156;
    int v143 = v149 + 52;
    uint64_t v125 = (IR::FixedIntegerDelay *)(a17 + 16);
    uint64_t v123 = (IR::FixedIntegerDelay *)(a17 + 72);
    uint64_t v122 = v149 + 208;
    unint64_t v114 = v120;
    uint64_t v115 = a17 + 240;
    uint64_t v130 = v152;
    float v20 = v149 + 158;
    int v127 = a13;
    if (a13) {
      float v21 = 1.0;
    }
    else {
      float v21 = -1.0;
    }
    uint64_t v148 = v149 + 210;
    uint64_t v124 = v177;
    float v113 = 0.01;
    float v112 = 0.99;
    float32x2_t v22 = (float32x2_t)vdup_n_s32(0x44800000u);
    uint64_t v135 = a17;
    do
    {
      uint64_t v133 = v19;
      int v140 = v120 - v19;
      if ((int)(v120 - v19) >= 256) {
        vDSP_Length v23 = 256;
      }
      else {
        vDSP_Length v23 = v120 - v19;
      }
      if ((int)v23 <= 0) {
        __assert_rtn("algoUpmixPISteered", "AULando_LRCLsRs.cpp", 95, "N1 > 0");
      }
      uint64_t v165 = 0;
      uint64_t v164 = 0;
      float v163 = 0.0;
      uint64_t v121 = v19;
      LODWORD(v176[0]) = 0;
      vDSP_normalize(&v139[v19], 1, 0, 1, (float *)v176, (float *)&v165 + 1, v23);
      vDSP_normalize(&v137[v121], 1, 0, 1, (float *)v176, (float *)&v165, v23);
      vDSP_normalize(&v138[v121], 1, 0, 1, (float *)v176, (float *)&v164 + 1, v23);
      vDSP_normalize(&v136[v121], 1, 0, 1, (float *)v176, (float *)&v164, v23);
      vDSP_normalize(&v134[v121], 1, 0, 1, (float *)v176, &v163, v23);
      *((float *)&v165 + 1) = v117 * (float)(*((float *)&v165 + 1) * *((float *)&v165 + 1));
      *(float *)&uint64_t v165 = v117 * (float)(*(float *)&v165 * *(float *)&v165);
      *((float *)&v164 + 1) = v117 * (float)(*((float *)&v164 + 1) * *((float *)&v164 + 1));
      *(float *)&uint64_t v164 = v116 * (float)(*(float *)&v164 * *(float *)&v164);
      float v163 = v116 * (float)(v163 * v163);
      v174[0] = *((float *)&v165 + 1);
      LODWORD(v174[1]) = v165;
      _OWORD v174[2] = *((float *)&v164 + 1);
      LODWORD(v174[3]) = v164;
      v174[4] = v163;
      float v24 = 1.0;
      if (v118)
      {
        uint64_t v25 = v135;
        unsigned int v26 = (*(_DWORD *)(v135 + 380) + 1) % 0x8Cu;
        *(_DWORD *)(v135 + 38DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v26;
        if (*(unsigned char *)(v115 + v26)) {
          --*(_DWORD *)(v25 + 384);
        }
        LODWORD(v176[0]) = 1065353216;
        vDSP_meanv(v174, 1, (float *)v176, 5uLL);
        uint64_t v27 = 0;
        int v28 = 0;
        uint64_t v29 = v135;
        unsigned int v30 = *(_DWORD *)(v135 + 396);
        do
        {
          v28 |= (v174[v27] >= (float)(*(float *)v176 * flt_1BB8780F8[((v30 >> v27) & 1) == 0])) << v27;
          ++v27;
        }
        while (v27 != 5);
        BOOL v31 = v30 == v28;
        *(unsigned char *)(v115 + *(unsigned int *)(v135 + 380)) = v30 != v28;
        *(_DWORD *)(v29 + 396) = v28;
        unsigned int v32 = *(_DWORD *)(v29 + 384);
        if (!v31) {
          *(_DWORD *)(v29 + 384) = ++v32;
        }
        unsigned int v33 = *(_DWORD *)(v29 + 388);
        float v24 = 1.0;
        if (v32 > v33)
        {
          unsigned int v34 = *(_DWORD *)(v29 + 392);
          float v24 = 0.0;
          if (v32 < v34) {
            float v24 = 1.0 - (float)((float)(v32 - v33) / (float)(v34 - v33));
          }
        }
        float v35 = *(float *)(v29 + 400);
        if (v24 > v35) {
          float v24 = (float)(v24 * v113) + (float)(v35 * v112);
        }
        *(float *)(v29 + 40DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v24;
      }
      int v36 = 0;
      uint64_t v37 = 0;
      float v38 = v24 * v119;
      do
      {
        int v39 = v36;
        int v40 = dword_1BB87C0B0[2 * v37];
        int v41 = dword_1BB87C0B0[2 * v37 + 1];
        if (v140 - v40 >= v41) {
          vDSP_Length __N = v41;
        }
        else {
          vDSP_Length __N = (v140 - v40);
        }
        if ((int)__N < 1) {
          break;
        }
        unsigned int v43 = HIDWORD(v165);
        int v44 = v165;
        int v45 = HIDWORD(v164);
        int v46 = v164;
        float v47 = (float)(int)__N;
        float v48 = v163;
        *(void *)&long long v151 = 0x500000005;
        long long v49 = v130;
        *((void *)v130 + 22) = 0;
        v49[9] = 0u;
        v49[10] = 0u;
        v49[7] = 0u;
        v49[8] = 0u;
        v49[5] = 0u;
        v49[6] = 0u;
        v49[3] = 0u;
        float v49[4] = 0u;
        v49[1] = 0u;
        v49[2] = 0u;
        *long long v49 = 0u;
        *((void *)&v151 + 1) = v43;
        DWORD2(v153) = v44;
        DWORD2(v156) = v45;
        DWORD2(v159) = v46;
        *((void *)&v162 + 1) = LODWORD(v48);
        for (uint64_t i = 8; i != 248; i += 48)
          *(float32x2_t *)((char *)&v152[-1] + i) = vmul_f32(*(float32x2_t *)((char *)&v152[-1] + i), v22);
        uint64_t v51 = 0;
        uint64_t v52 = (int)v133 + (uint64_t)v40;
        do
        {
          float v53 = (float *)&v152[v51 - 1];
          void v53[2] = powf(*((float *)&v152[v51 - 1] + 2), v38);
          void v53[3] = 0.0;
          v51 += 3;
        }
        while (v51 != 15);
        float v54 = powf(a11, (float)(int)__N * 0.0039062);
        if (v54 != 0.0)
        {
          unsigned int v55 = 0;
          uint64_t v56 = 0;
          int v57 = *((_DWORD *)v149 + 157) + 1;
          do
          {
            if (v55 >= 0x19) {
              std::__throw_out_of_range[abi:ne180100]("array::at");
            }
            float v58 = v20[2 * v55] * v54;
            uint64_t v59 = (float *)&v152[v56 - 1];
            if (v58 < *((float *)&v152[v56 - 1] + 2)) {
              float v58 = *((float *)&v152[v56 - 1] + 2);
            }
            v59[2] = v58;
            void v59[3] = 0.0;
            v56 += 3;
            v55 += v57;
          }
          while (v56 != 15);
        }
        int v142 = v39;
        fb::ComplexMat::stabilize(&v151, v54);
        long long v60 = v161;
        uint64_t v61 = (float *)v129;
        *((_OWORD *)v129 + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v160;
        *((_OWORD *)v61 + 11) = v60;
        *((_OWORD *)v61 + 12) = v162;
        long long v62 = v157;
        *((_OWORD *)v61 + 6) = v156;
        *((_OWORD *)v61 + 7) = v62;
        long long v63 = v159;
        *((_OWORD *)v61 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v158;
        *((_OWORD *)v61 + 9) = v63;
        long long v64 = v153;
        *((_OWORD *)v61 + 2) = v152[1];
        *((_OWORD *)v61 + 3) = v64;
        long long v65 = v155;
        *((_OWORD *)v61 + 4) = v154;
        *((_OWORD *)v61 + 5) = v65;
        long long v66 = v152[0];
        *(_OWORD *)uint64_t v61 = v151;
        *((_OWORD *)v61 + 1) = v66;
        fb::operator*((uint64_t)v175, v149, (uint64_t)&v151);
        fb::operator*((uint64_t)v176, (const float *)v175, (uint64_t)v143);
        fb::ComplexMat::inversed((fb::ComplexMat *)v175, (float *)v176);
        fb::operator*((uint64_t)v166, (const float *)&v151, (uint64_t)v143);
        fb::operator*((uint64_t)v150, (const float *)v166, (uint64_t)v175);
        if (v128)
        {
          unint64_t v68 = v124;
          *((void *)v124 + 14) = 0;
          v68[5] = 0u;
          v68[6] = 0u;
          uint64_t v68[3] = 0u;
          v68[4] = 0u;
          v68[1] = 0u;
          v68[2] = 0u;
          *unint64_t v68 = 0u;
          memset(&v176[2], 0, 48);
          v176[0] = xmmword_1BB87CF00;
          v176[1] = unk_1BB87CF10;
          *(void *)uint64_t v150 = 0x200000005;
          *(void *)&v150[200] = v178;
          *(_OWORD *)&v150[168] = v177[5];
          *(_OWORD *)&v150[184] = v177[6];
          memset(&v150[40], 0, 48);
          *(_OWORD *)&v150[8] = xmmword_1BB87CF00;
          *(_OWORD *)&v150[24] = unk_1BB87CF10;
          *(_OWORD *)&v150[136] = v177[3];
          *(_OWORD *)&v150[152] = v177[4];
          *(_OWORD *)&v150[104] = v177[1];
          *(_OWORD *)&v150[120] = v177[2];
          *(_OWORD *)&v150[88] = v177[0];
        }
        uint64_t v141 = &v110;
        MEMORY[0x1F4188790](v67);
        int v70 = (float *)((char *)&v110 - ((v69 + 15) & 0x7FFFFFFF0));
        MEMORY[0x1F4188790](v71);
        MEMORY[0x1F4188790](v72);
        float v74 = (float *)((char *)&v110 - v73);
        MEMORY[0x1F4188790](v75);
        long long v147 = (float *)((char *)&v110 - v77);
        if (v127)
        {
          *(void *)&v176[0] = v70;
          unint64_t v146 = v76;
          *((void *)&v176[0] + 1) = v76;
          float v78 = *(IR::IRProcessor **)v135;
          v175[0] = (const float *)((char *)v132 + 4 * (int)v52);
          IR::IRProcessor::processMultipleInputs(v78, v175, (float *const *)v176, 1u, 2u, __N, 1.0, 0);
          uint64_t v52 = (int)v52;
          v175[0] = v74;
          v175[1] = v147;
          float v79 = *(IR::IRProcessor **)(v135 + 8);
          v166[0] = &v131[(int)v52];
          IR::IRProcessor::processMultipleInputs(v79, v166, (float *const *)v175, 1u, 2u, __N, 1.0, 0);
        }
        else
        {
          IR::FixedIntegerDelay::process(v125, (float *)v132 + v52, v70, __N);
          IR::FixedIntegerDelay::process(v123, (float *)&v131[v52], v74, __N);
          unint64_t v146 = v70;
          long long v147 = v74;
        }
        unsigned int v80 = &v139[v52];
        uint64_t v81 = &v137[v52];
        long long v144 = &v136[v52];
        long long v145 = &v138[v52];
        unsigned int v82 = &v134[v52];
        if (v126)
        {
          float v83 = 1.0 / v47;
          *(float *)uint64_t v176 = v149[210];
          *(float *)uint64_t v175 = (float)(1.0 / v47) * (float)(*(float *)&v150[8] - *(float *)v176);
          vDSP_vrampmul(v70, 1, (float *)v176, (const float *)v175, v80, 1, __N);
          *(float *)uint64_t v176 = v149[212];
          *(float *)uint64_t v175 = (float)(1.0 / v47) * (float)(*(float *)&v150[16] - *(float *)v176);
          vDSP_vrampmuladd(v74, 1, (float *)v176, (const float *)v175, v80, 1, __N);
          uint64_t v84 = *((unsigned int *)v149 + 209);
          if (v84 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v85 = v148[2 * v84];
          *(float *)uint64_t v176 = v85;
          if (*(_DWORD *)&v150[4] >= 0x19u) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)(*(float *)&v150[8 * *(unsigned int *)&v150[4] + 8] - v85);
          vDSP_vrampmul(v70, 1, (float *)v176, (const float *)v175, v81, 1, __N);
          if ((*((_DWORD *)v149 + 209) + 1) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v86 = v148[2 * (*((_DWORD *)v149 + 209) + 1)];
          *(float *)uint64_t v176 = v86;
          if ((*(_DWORD *)&v150[4] + 1) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)(*(float *)&v150[8 * (*(_DWORD *)&v150[4] + 1) + 8] - v86);
          vDSP_vrampmuladd(v74, 1, (float *)v176, (const float *)v175, v81, 1, __N);
          if ((2 * *((_DWORD *)v149 + 209)) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v87 = v148[4 * *((_DWORD *)v149 + 209)];
          *(float *)uint64_t v176 = v87;
          if ((2 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)(*(float *)&v150[16 * *(_DWORD *)&v150[4] + 8] - v87);
          vDSP_vrampmul(v70, 1, (float *)v176, (const float *)v175, v145, 1, __N);
          if (((2 * *((_DWORD *)v149 + 209)) | 1u) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v88 = v148[2 * ((2 * *((_DWORD *)v149 + 209)) | 1)];
          *(float *)uint64_t v176 = v88;
          if (((2 * *(_DWORD *)&v150[4]) | 1u) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)(*(float *)&v150[8 * ((2 * *(_DWORD *)&v150[4]) | 1) + 8] - v88);
          vDSP_vrampmuladd(v74, 1, (float *)v176, (const float *)v175, v145, 1, __N);
          unsigned int v89 = 3 * *((_DWORD *)v149 + 209);
          if (v89 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v90 = v21 * v148[2 * v89 + 1];
          *(float *)uint64_t v176 = v90;
          if ((3 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)-(float)(v90 - (float)(v21 * *(float *)&v150[24 * *(_DWORD *)&v150[4] + 12]));
          vDSP_vrampmul(v146, 1, (float *)v176, (const float *)v175, v144, 1, __N);
          unsigned int v91 = 3 * *((_DWORD *)v149 + 209) + 1;
          if (v91 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v92 = v21 * v148[2 * v91 + 1];
          *(float *)uint64_t v176 = v92;
          unsigned int v93 = 3 * *(_DWORD *)&v150[4] + 1;
          if (v93 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)-(float)(v92 - (float)(v21 * *(float *)&v150[8 * v93 + 12]));
          vDSP_vrampmuladd(v147, 1, (float *)v176, (const float *)v175, v144, 1, __N);
          unsigned int v94 = 4 * *((_DWORD *)v149 + 209);
          if (v94 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v95 = v21 * v148[2 * v94 + 1];
          *(float *)uint64_t v176 = v95;
          if ((4 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)-(float)(v95 - (float)(v21 * *(float *)&v150[32 * *(_DWORD *)&v150[4] + 12]));
          vDSP_vrampmul(v146, 1, (float *)v176, (const float *)v175, v82, 1, __N);
          unsigned int v96 = (4 * *((_DWORD *)v149 + 209)) | 1;
          if (v96 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v97 = v21 * v148[2 * v96 + 1];
          *(float *)uint64_t v176 = v97;
          unsigned int v98 = (4 * *(_DWORD *)&v150[4]) | 1;
          if (v98 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *(float *)uint64_t v175 = v83 * (float)-(float)(v97 - (float)(v21 * *(float *)&v150[8 * v98 + 12]));
          vDSP_vrampmuladd(v147, 1, (float *)v176, (const float *)v175, v82, 1, __N);
          long long v99 = *(_OWORD *)&v150[176];
          int v100 = (float *)v122;
          *((_OWORD *)v122 + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *(_OWORD *)&v150[160];
          *((_OWORD *)v100 + 11) = v99;
          *((_OWORD *)v100 + 12) = *(_OWORD *)&v150[192];
          long long v101 = *(_OWORD *)&v150[112];
          *((_OWORD *)v100 + 6) = *(_OWORD *)&v150[96];
          *((_OWORD *)v100 + 7) = v101;
          long long v102 = *(_OWORD *)&v150[144];
          *((_OWORD *)v100 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *(_OWORD *)&v150[128];
          *((_OWORD *)v100 + 9) = v102;
          long long v103 = *(_OWORD *)&v150[48];
          *((_OWORD *)v100 + 2) = *(_OWORD *)&v150[32];
          *((_OWORD *)v100 + 3) = v103;
          long long v104 = *(_OWORD *)&v150[80];
          *((_OWORD *)v100 + 4) = *(_OWORD *)&v150[64];
          *((_OWORD *)v100 + 5) = v104;
          long long v105 = *(_OWORD *)&v150[16];
          *(_OWORD *)int v100 = *(_OWORD *)v150;
          *((_OWORD *)v100 + 1) = v105;
        }
        else
        {
          LODWORD(v176[0]) = *(_DWORD *)&v150[8];
          LODWORD(v175[0]) = *(_DWORD *)&v150[16];
          vDSP_vsmsma(v70, 1, (const float *)v176, v74, 1, (const float *)v175, v80, 1, __N);
          if (*(_DWORD *)&v150[4] >= 0x19u) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          LODWORD(v166[0]) = *(_DWORD *)&v150[8 * *(unsigned int *)&v150[4] + 8];
          if (*(_DWORD *)&v150[4] == 24) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v173 = *(float *)&v150[8 * (*(_DWORD *)&v150[4] + 1) + 8];
          vDSP_vsmsma(v70, 1, (const float *)v166, v74, 1, &v173, v81, 1, __N);
          if ((2 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v172 = *(float *)&v150[16 * *(_DWORD *)&v150[4] + 8];
          if (((2 * *(_DWORD *)&v150[4]) | 1u) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v171 = *(float *)&v150[8 * ((2 * *(_DWORD *)&v150[4]) | 1) + 8];
          vDSP_vsmsma(v70, 1, &v172, v74, 1, &v171, v145, 1, __N);
          int v106 = 3 * *(_DWORD *)&v150[4];
          if ((3 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v170 = v21 * *(float *)&v150[8 * v106 + 12];
          if (*(_DWORD *)&v150[4] == 8) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v169 = v21 * *(float *)&v150[8 * (v106 + 1) + 12];
          vDSP_vsmsma(v146, 1, &v170, v147, 1, &v169, v144, 1, __N);
          int v107 = 4 * *(_DWORD *)&v150[4];
          if ((4 * *(_DWORD *)&v150[4]) >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v168 = v21 * *(float *)&v150[8 * v107 + 12];
          unsigned int v108 = v107 | 1;
          if (v108 >= 0x19) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          float v167 = v21 * *(float *)&v150[8 * v108 + 12];
          vDSP_vsmsma(v146, 1, &v168, v147, 1, &v167, v82, 1, __N);
        }
        int v36 = 1;
        uint64_t v37 = 1;
      }
      while ((v142 & 1) == 0);
      uint64_t v19 = v121 + 256;
    }
    while (v121 + 256 < v114);
  }
}

BOOL AUMixSwitch::ValidFormat(AUMixSwitch *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  return a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105 && a4->mChannelsPerFrame == 1;
}

uint64_t AUMixSwitch::SupportedNumChannels(AUMixSwitch *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMixSwitch::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUMixSwitch::StreamFormatWritable(AUMixSwitch *this, int a2, unsigned int a3)
{
  BOOL v3 = a3 == 0;
  BOOL v4 = a3 < 2;
  if (a2 != 1) {
    BOOL v4 = 0;
  }
  if (a2 != 2) {
    BOOL v3 = v4;
  }
  return !*((unsigned char *)this + 17) && v3;
}

uint64_t AUMixSwitch::SupportsTail(AUMixSwitch *this)
{
  return 1;
}

double AUMixSwitch::GetTailTime(AUMixSwitch *this)
{
  return 0.0;
}

double ausdk::AUBase::GetLatency(ausdk::AUBase *this)
{
  return 0.0;
}

uint64_t AUMixSwitch::GetParameterValueStrings(AUMixSwitch *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3) {
    return 4294956418;
  }
  CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"Front Mic", 9, 0x8000100u, 0);
  if (!v13)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"Back Mic", 8, 0x8000100u, 0))
  {
    float v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"Beam Mics", 9, 0x8000100u, 0))
  {
    float v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  v12[0] = &v13;
  v12[1] = 3;
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef>((uint64_t)v12);
  for (uint64_t i = 16; i != -8; i -= 8)
  {
    float v8 = *(CFStringRef *)((char *)&v13 + i);
    if (v8) {
      CFRelease(v8);
    }
  }
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

void sub_1BB33769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v13);
  while (v13 != &a11);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef>(uint64_t a1)
{
  std::vector<void const*>::vector(__p, *(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    BOOL v3 = *(uint64_t **)a1;
    BOOL v4 = __p[0];
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3++;
      *v4++ = v6;
      v5 -= 8;
    }
    while (v5);
  }
  CFArrasimd_float4 y = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_1BB3377E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUMixSwitch::GetParameterInfo(AUMixSwitch *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  if (a2 == 2)
  {
    buffer->unitName = 0;
    buffer->flags = 0x2000;
    int v5 = 1073774592;
    AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Ratio;
    CFStringRef v8 = @"EC delta EIR";
    int v9 = 1148846080;
    AudioUnitParameterValue v6 = 1000.0;
    switch(a3)
    {
      case 0:
        goto LABEL_15;
      case 1:
LABEL_8:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Milliseconds;
        CFStringRef v8 = @"EC main lobe delay";
        int v9 = 1137180672;
        break;
      case 2:
LABEL_11:
        AudioUnitParameterValue v6 = 1.0;
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Boolean;
        CFStringRef v8 = @"EC adaptation state";
        goto LABEL_15;
      case 3:
LABEL_12:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Generic;
        CFStringRef v8 = @"EC time aligned ref signal energy";
        break;
      case 4:
LABEL_14:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Generic;
        AudioUnitParameterValue v6 = 1.0;
        CFStringRef v8 = @"EC mic LEE signal cross-correlation";
        goto LABEL_15;
      default:
        return 4294956418;
    }
    AudioUnitParameterValue v6 = *(float *)&v9;
  }
  else
  {
    if (a2 == 1)
    {
      buffer->unitName = 0;
      buffer->flags = 0x2000;
      int v5 = 1073774592;
      AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Ratio;
      CFStringRef v8 = @"EC delta EIR";
      int v9 = 1148846080;
      AudioUnitParameterValue v6 = 1000.0;
      switch(a3)
      {
        case 0:
          goto LABEL_15;
        case 1:
          goto LABEL_8;
        case 2:
          goto LABEL_11;
        case 3:
          goto LABEL_12;
        case 4:
          goto LABEL_14;
        default:
          return 4294956418;
      }
    }
    if (a2) {
      return 4294956430;
    }
    buffer->unitName = 0;
    buffer->flags = 0x2000;
    if (a3) {
      return 4294956418;
    }
    int v5 = -1073741824;
    AudioUnitParameterValue v6 = 2.0;
    AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Indexed;
    CFStringRef v8 = @"Beam";
  }
LABEL_15:
  buffer->cfNameString = v8;
  buffer->flags = 134225920;
  CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v7;
  buffer->minValue = 0.0;
  buffer->maxValue = v6;
  AudioUnitParameterOptions v11 = buffer->flags | v5;
  buffer->defaultValue = 0.0;
  buffer->flags = v11;
  return result;
}

uint64_t AUMixSwitch::GetParameterList(AUMixSwitch *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 2 || a2 == 1)
  {
    *a4 = 5;
    if (a3)
    {
      uint64_t result = 0;
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      a3[4] = 4;
      return result;
    }
    return 0;
  }
  if (!a2)
  {
    *a4 = 1;
    if (a3)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  *a4 = 0;
  return 4294956430;
}

uint64_t ausdk::AUBase::Render(ausdk::AUBase *this, unsigned int *a2, const AudioTimeStamp *a3)
{
  return 0;
}

uint64_t AUMixSwitch::ProcessMultipleBufferLists(AUMixSwitch *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a3)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    unsigned int v91 = getAUMixSwitchLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v96 = *((_DWORD *)this + 84);
      *(_DWORD *)long long v102 = 134218496;
      *(void *)&v102[4] = this;
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = a3;
      __int16 v103 = 1024;
      int v104 = v96;
      _os_log_error_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_ERROR, "[%p] cannot process %u frames (maximum frame size is %u)", v102, 0x18u);
    }
    return 4294956422;
  }
  if (a4 != 2)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    uint64_t v92 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294967246;
    }
    *(_DWORD *)long long v102 = 134218496;
    *(void *)&v102[4] = this;
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = a4;
    __int16 v103 = 1024;
    int v104 = 2;
    unsigned int v93 = "[%p] cannot process %u input busses (expected input bus count is %u)";
    unsigned int v94 = v92;
    goto LABEL_32;
  }
  if (a6 != 1)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    uint64_t v95 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294967246;
    }
    *(_DWORD *)long long v102 = 134218496;
    *(void *)&v102[4] = this;
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = a6;
    __int16 v103 = 1024;
    int v104 = 1;
    unsigned int v93 = "[%p] cannot process %u output busses (expected output bus count is %u)";
    unsigned int v94 = v95;
LABEL_32:
    _os_log_error_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_ERROR, v93, v102, 0x18u);
    return 4294967246;
  }
  mData = (float *)(*a5)->mBuffers[0].mData;
  size_t mDataByteSize = (*a5)->mBuffers[0].mDataByteSize;
  CFStringRef v13 = (float *)(*a7)->mBuffers[0].mData;
  if (*((unsigned char *)this + 528)) {
    goto LABEL_5;
  }
  float v35 = a5[1];
  int v36 = (float *)v35->mBuffers[0].mData;
  size_t v37 = v35->mBuffers[0].mDataByteSize;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMixSwitch *)((char *)this + 32), 0);
  int Parameter = (int)ausdk::AUElement::GetParameter(Element, 0);
  if (Parameter == 2)
  {
    uint64_t v40 = *((unsigned int *)this + 147);
    float v41 = hypotf(*(float *)(*((void *)this + 67) + 4 * v40), *(float *)(*((void *)this + 67) + 4 * (v40 + a3)));
    float v42 = hypotf(*(float *)(*((void *)this + 70) + 4 * v40), *(float *)(*((void *)this + 70) + 4 * (v40 + a3)));
    float v43 = v41 + v42;
    float v44 = 0.0;
    float v45 = 1.0;
    if ((float)(v41 + v42) > 0.0)
    {
      float v45 = v41 / v43;
      float v44 = v42 / v43;
    }
    int v46 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v47 = ausdk::AUElement::GetParameter(v46, 0);
    float v48 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v49 = (float)(v44 * ausdk::AUElement::GetParameter(v48, 0)) + (float)(v47 * v45);
    uint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 128), 0);
    ausdk::AUElement::SetParameter(v50, 0, v49, 0);
    uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v52 = ausdk::AUElement::GetParameter(v51, 1u);
    float v53 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v54 = (float)(v44 * ausdk::AUElement::GetParameter(v53, 1u)) + (float)(v52 * v45);
    unsigned int v55 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 128), 0);
    ausdk::AUElement::SetParameter(v55, 1u, v54, 0);
    uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v57 = ausdk::AUElement::GetParameter(v56, 2u);
    float v58 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v59 = ausdk::AUElement::GetParameter(v58, 2u);
    BOOL v60 = v57 == 1.0;
    if (v59 != 1.0) {
      BOOL v60 = 0;
    }
    float v61 = (float)v60;
    long long v62 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 128), 0);
    ausdk::AUElement::SetParameter(v62, 2u, v61, 0);
    long long v63 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v64 = ausdk::AUElement::GetParameter(v63, 3u);
    long long v65 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v66 = (float)(v44 * ausdk::AUElement::GetParameter(v65, 3u)) + (float)(v64 * v45);
    uint64_t v67 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 128), 0);
    ausdk::AUElement::SetParameter(v67, 3u, v66, 0);
    unint64_t v68 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v69 = ausdk::AUElement::GetParameter(v68, 4u);
    int v70 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v71 = (float)(v44 * ausdk::AUElement::GetParameter(v70, 4u)) + (float)(v69 * v45);
    uint64_t v72 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 128), 0);
    ausdk::AUElement::SetParameter(v72, 4u, v71, 0);
    float __A = 0.0;
    *(void *)long long v102 = mData;
    *(void *)&v102[8] = &mData[a3];
    __B.unint64_t realp = (float *)*((void *)this + 67);
    __B.imagp = &__B.realp[a3];
    __C.unint64_t realp = v36;
    __C.imagp = &v36[a3];
    uint64_t v73 = (float *)(*((void *)this + 70) + 4 * a3);
    __D.unint64_t realp = (float *)*((void *)this + 70);
    __D.imagp = v73;
    __E.unint64_t realp = v13;
    __E.imagp = &v13[a3];
    vDSP_vfill(&__A, v13, 1, 2 * a3);
    vDSP_zvmmaa((const DSPSplitComplex *)v102, 1, &__B, 1, &__C, 1, &__D, 1, &__E, 1, &__E, 1, a3);
    return 0;
  }
  if (Parameter == 1)
  {
    float v74 = (AUMixSwitch *)((char *)this + 80);
    uint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 1u);
    float v76 = ausdk::AUElement::GetParameter(v75, 0);
    uint64_t v77 = (AUMixSwitch *)((char *)this + 128);
    float v78 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v77, 0);
    ausdk::AUElement::SetParameter(v78, 0, v76, 0);
    float v79 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v74, 1u);
    float v80 = ausdk::AUElement::GetParameter(v79, 1u);
    uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v77, 0);
    ausdk::AUElement::SetParameter(v81, 1u, v80, 0);
    unsigned int v82 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v74, 1u);
    float v83 = ausdk::AUElement::GetParameter(v82, 2u);
    uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v77, 0);
    ausdk::AUElement::SetParameter(v84, 2u, v83, 0);
    float v85 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v74, 1u);
    float v86 = ausdk::AUElement::GetParameter(v85, 3u);
    float v87 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v77, 0);
    ausdk::AUElement::SetParameter(v87, 3u, v86, 0);
    float v88 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v74, 1u);
    float v89 = ausdk::AUElement::GetParameter(v88, 4u);
    float v90 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v77, 0);
    ausdk::AUElement::SetParameter(v90, 4u, v89, 0);
    BOOL v31 = v13;
    unsigned int v32 = v36;
    size_t v33 = v37;
    goto LABEL_6;
  }
  uint64_t result = 0;
  if (!Parameter)
  {
LABEL_5:
    float v14 = (AUMixSwitch *)((char *)this + 80);
    float v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitch *)((char *)this + 80), 0);
    float v16 = ausdk::AUElement::GetParameter(v15, 0);
    uint64_t v17 = (AUMixSwitch *)((char *)this + 128);
    float v18 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, 0);
    ausdk::AUElement::SetParameter(v18, 0, v16, 0);
    uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v14, 0);
    float v20 = ausdk::AUElement::GetParameter(v19, 1u);
    float v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, 0);
    ausdk::AUElement::SetParameter(v21, 1u, v20, 0);
    float32x2_t v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v14, 0);
    float v23 = ausdk::AUElement::GetParameter(v22, 2u);
    float v24 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, 0);
    ausdk::AUElement::SetParameter(v24, 2u, v23, 0);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v14, 0);
    float v26 = ausdk::AUElement::GetParameter(v25, 3u);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, 0);
    ausdk::AUElement::SetParameter(v27, 3u, v26, 0);
    int v28 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v14, 0);
    float v29 = ausdk::AUElement::GetParameter(v28, 4u);
    unsigned int v30 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, 0);
    ausdk::AUElement::SetParameter(v30, 4u, v29, 0);
    BOOL v31 = v13;
    unsigned int v32 = mData;
    size_t v33 = mDataByteSize;
LABEL_6:
    memcpy(v31, v32, v33);
    return 0;
  }
  return result;
}

os_log_t ___Z17getAUMixSwitchLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUMixSwitch");
  getAUMixSwitchLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t ausdk::AUBase::ProcessBufferLists(ausdk::AUBase *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  return 4294967292;
}

uint64_t AUMixSwitch::CanScheduleParameters(AUMixSwitch *this)
{
  return 0;
}

uint64_t AUMixSwitch::SetProperty(AUMixSwitch *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1651335778)
  {
    if (a2 == 1651335779)
    {
      CFStringRef v8 = (char *)this + 560;
    }
    else
    {
      if (a2 != 1718444643)
      {
        if (a2 == 1886222438)
        {
          uint64_t result = 0;
          *((_DWORD *)this + 146) = *(_DWORD *)__src;
        }
        return result;
      }
      CFStringRef v8 = (char *)this + 536;
    }
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v8, __src, (uint64_t)&__src[4 * (a6 >> 2)], a6 >> 2);
    return 0;
  }
  if (a2 == 21)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 52std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *(_DWORD *)__src != 0;
  }
  else if (a2 == 3700)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 376) = __src != 0;
  }
  return result;
}

uint64_t AUMixSwitch::GetProperty(AUMixSwitch *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 1651335778)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 528);
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 376);
    }
    *__dst = v7;
    return result;
  }
  switch(a2)
  {
    case 1651335779:
      CFStringRef v8 = (const void *)*((void *)this + 70);
      uint64_t v9 = *((void *)this + 71);
LABEL_14:
      memcpy(__dst, v8, v9 - (void)v8);
      return 0;
    case 1718444643:
      CFStringRef v8 = (const void *)*((void *)this + 67);
      uint64_t v9 = *((void *)this + 68);
      goto LABEL_14;
    case 1886222438:
      uint64_t result = 0;
      *__dst = *((_DWORD *)this + 146);
      break;
  }
  return result;
}

uint64_t AUMixSwitch::GetPropertyInfo(AUMixSwitch *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1651335778)
  {
    if (a2 == 1651335779 || a2 == 1718444643)
    {
      *a6 = 1;
      int v9 = 8 * *((_DWORD *)this + 84);
LABEL_14:
      uint64_t result = 0;
      *a5 = v9;
      return result;
    }
    if (a2 != 1886222438) {
      return result;
    }
    goto LABEL_10;
  }
  if (a2 == 21)
  {
    char v8 = 1;
    goto LABEL_13;
  }
  if (a2 == 3700)
  {
LABEL_10:
    char v8 = *((unsigned char *)this + 17) ^ 1;
LABEL_13:
    *a6 = v8;
    int v9 = 4;
    goto LABEL_14;
  }
  return result;
}

uint64_t AUMixSwitch::Initialize(AUMixSwitch *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (getAUMixSwitchLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
  }
  uint64_t v2 = getAUMixSwitchLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", v13, 0xCu);
  }
  if (!*((unsigned char *)this + 376))
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    int v5 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - cannot operate in variable block size mode";
    goto LABEL_31;
  }
  (*(void (**)(unsigned char *__return_ptr, AUMixSwitch *, uint64_t, void))(*(void *)this + 392))(v13, this, 1, 0);
  double v3 = *(double *)v13;
  (*(void (**)(unsigned char *__return_ptr, AUMixSwitch *, uint64_t, uint64_t))(*(void *)this + 392))(v13, this, 1, 1);
  double v4 = *(double *)v13;
  (*(void (**)(unsigned char *__return_ptr, AUMixSwitch *, uint64_t, void))(*(void *)this + 392))(v13, this, 2, 0);
  if (v3 != *(double *)v13)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    int v5 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - sample rates of FrontMic input bus and main output bus must be equal";
    goto LABEL_31;
  }
  if (v4 != *(double *)v13)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    int v5 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - sample rates of BackMic input bus and main output bus must be equal";
    goto LABEL_31;
  }
  float v7 = *((float *)this + 146);
  if (v7 < 0.0)
  {
    if (getAUMixSwitchLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
    }
    int v5 = getAUMixSwitchLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - parameter mix frequency must be positive";
    goto LABEL_31;
  }
  if (*(double *)v13 > v7)
  {
    unsigned int v8 = *((_DWORD *)this + 84);
    *((_DWORD *)this + 147) = vcvtmd_u64_f64((float)(v7 * (float)v8) / *(double *)v13);
    *(_DWORD *)CFStringRef v13 = 0;
    std::vector<float>::assign((char **)this + 67, 2 * v8, v13);
    unint64_t v9 = *((unsigned int *)this + 84);
    *(_DWORD *)CFStringRef v13 = 1056964608;
    std::vector<float>::assign((char **)this + 67, v9, v13);
    unint64_t v10 = (2 * *((_DWORD *)this + 84));
    *(_DWORD *)CFStringRef v13 = 0;
    std::vector<float>::assign((char **)this + 70, v10, v13);
    unint64_t v11 = *((unsigned int *)this + 84);
    *(_DWORD *)CFStringRef v13 = 1056964608;
    std::vector<float>::assign((char **)this + 70, v11, v13);
    (*(void (**)(AUMixSwitch *, void, void))(*(void *)this + 72))(this, 0, 0);
    return 0;
  }
  if (getAUMixSwitchLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
  }
  int v5 = getAUMixSwitchLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CFStringRef v13 = 134217984;
    *(void *)&v13[4] = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - parameter mix frequency must not exceed Nyquist frequency";
LABEL_31:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, v13, 0xCu);
  }
  return 4294956421;
}

void AUMixSwitch::~AUMixSwitch(AUMixSwitch *this)
{
  AUMixSwitch::~AUMixSwitch(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  int v5;
  AUMixSwitch *v6;
  uint64_t v7;

  float v7 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14A9B50;
  if (getAUMixSwitchLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchLog(void)::onceToken, &__block_literal_global_182);
  }
  uint64_t v2 = getAUMixSwitchLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    int v5 = 134217984;
    AudioUnitParameterValue v6 = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", (uint8_t *)&v5, 0xCu);
  }
  double v3 = (void *)*((void *)this + 70);
  if (v3)
  {
    *((void *)this + 71) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 67);
  if (v4)
  {
    *((void *)this + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v4;
    operator delete(v4);
  }
  ausdk::AUBase::~AUBase(this);
}

const void **ausdk::Owned<__CFString const*>::operator=(const void **a1, const void *a2)
{
  double v3 = *a1;
  if (v3 != a2)
  {
    ausdk::Owned<__CFString const*>::releaseRef(v3);
    *a1 = a2;
    ausdk::Owned<__CFString const*>::retainRef(a2);
  }
  return a1;
}

void ausdk::Owned<__CFString const*>::releaseRef(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

CFTypeRef ausdk::Owned<__CFString const*>::retainRef(CFTypeRef result)
{
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t AUMixGainCompensation::SupportedNumChannels(AUMixGainCompensation *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMixGainCompensation::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

BOOL AUMixGainCompensation::StreamFormatWritable(AUMixGainCompensation *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMixGainCompensation::SupportsTail(AUMixGainCompensation *this)
{
  return 1;
}

double AUMixGainCompensation::GetTailTime(AUMixGainCompensation *this)
{
  return 0.0;
}

uint64_t AUMixGainCompensation::GetParameterInfo(AUMixGainCompensation *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  if (!a3)
  {
    uint64_t v6 = 0x41400000C2C00000;
    int v7 = -1073733632;
    CFStringRef v8 = @"Input mix gain";
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    uint64_t v6 = 0x42400000C1400000;
    int v7 = 1073782784;
    CFStringRef v8 = @"Applied compensation gain";
LABEL_7:
    buffer->cfNameString = v8;
    buffer->flags = -939524096;
    CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(void *)&buffer->minValue = v6;
    AudioUnitParameterOptions v9 = buffer->flags | v7;
    buffer->defaultValue = 0.0;
    buffer->flags = v9;
    return result;
  }
  return 0;
}

uint64_t AUMixGainCompensation::GetParameterList(AUMixGainCompensation *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3) {
    *(void *)a3 = 0x100000000;
  }
  uint64_t result = 0;
  *a4 = 2;
  return result;
}

uint64_t AUMixGainCompensation::Render(AUMixGainCompensation *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  int v7 = (AUMixGainCompensation *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMixGainCompensation *)((char *)this + 80), 0);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((AUMixGainCompensation *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  unint64_t v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v7, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    CFStringRef v13 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v9 + 144));
    return AUMixGainCompensation::ProcessBufferLists(this, v14, BufferList, v13, a4);
  }
  return result;
}

uint64_t AUMixGainCompensation::ProcessBufferLists(AUMixGainCompensation *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  if (*((_DWORD *)this + 84) < a5) {
    return 4294956422;
  }
  if (*((unsigned char *)this + 528)) {
    goto LABEL_4;
  }
  int v16 = *((_DWORD *)this + 134);
  float v17 = 0.0;
  if (v16 > 19)
  {
    if (v16 == 20)
    {
      float v17 = 0.66667;
    }
    else if (v16 == 30)
    {
      float v17 = 1.3333;
    }
    goto LABEL_20;
  }
  if (v16)
  {
    if (v16 == 10) {
      float v17 = 0.33333;
    }
LABEL_20:
    float v18 = *((float *)this + 133);
    float v19 = v17 * v18;
    if (v19 <= -7.0) {
      float v20 = v19;
    }
    else {
      float v20 = -7.0;
    }
    if (v18 <= -7.0) {
      float v19 = v20;
    }
    unint64_t v21 = 0;
    float __B = __exp10f((float)(v19 - v18) * 0.05);
    p_mData = &a3->mBuffers[0].mData;
    float v23 = &a4->mBuffers[0].mData;
    while (v21 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUMixGainCompensation *)((char *)this + 128), 0)
                                  + 108))
    {
      uint64_t v25 = (const float *)*p_mData;
      p_mData += 2;
      float v24 = v25;
      float v26 = (float *)*v23;
      v23 += 2;
      vDSP_vsmul(v24, 1, &__B, v26, 1, a5);
      ++v21;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMixGainCompensation *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, 1u, __B, 0);
    return 0;
  }
LABEL_4:
  unint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers == a4->mNumberBuffers && a3->mNumberBuffers)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      size_t mDataByteSize = a3->mBuffers[v10].mDataByteSize;
      if (mDataByteSize == a4->mBuffers[v10].mDataByteSize)
      {
        mData = a3->mBuffers[v10].mData;
        uint64_t v14 = a4->mBuffers[v10].mData;
        if (mData != v14)
        {
          memcpy(v14, mData, mDataByteSize);
          unint64_t mNumberBuffers = a3->mNumberBuffers;
        }
      }
      ++v11;
      ++v10;
    }
    while (v11 < mNumberBuffers);
  }
  return 0;
}

uint64_t AUMixGainCompensation::CanScheduleParameters(AUMixGainCompensation *this)
{
  return 0;
}

uint64_t AUMixGainCompensation::SetParameter(AUMixGainCompensation *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  if (ausdk::AUElement::GetParameter(Element, a2) != a5)
  {
    float v12 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    CFStringRef v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v12, a4);
    ausdk::AUElement::SetParameter(v13, a2, a5, 0);
    if (!a2) {
      *((float *)this + 133) = a5;
    }
  }
  return 0;
}

uint64_t AUMixGainCompensation::SetProperty(AUMixGainCompensation *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 != 1920035958)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 52std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a6 < 4) {
    return 4294956445;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 134) = *a5;
  return result;
}

uint64_t AUMixGainCompensation::GetProperty(AUMixGainCompensation *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 1920035958)
  {
    int v6 = *((_DWORD *)this + 134);
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = *((unsigned __int8 *)this + 528);
  }
  uint64_t result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUMixGainCompensation::GetPropertyInfo(AUMixGainCompensation *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 1920035958 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUMixGainCompensation::Reset(AUMixGainCompensation *this)
{
  return 0;
}

uint64_t AUMixGainCompensation::Initialize(AUMixGainCompensation *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMixGainCompensation *)((char *)this + 80), 0);
  double v3 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUMixGainCompensation *)((char *)this + 128), 0);
  double v4 = (CA::Implementation *)(Element + 80);
  if (*(double *)(Element + 80) != v3[2].mSampleRate
    || *(_DWORD *)(Element + 88) != v3[2].mFormatID
    || *(_DWORD *)(Element + 96) != v3[2].mBytesPerPacket
    || *(_DWORD *)(Element + 100) != v3[2].mFramesPerPacket
    || *(_DWORD *)(Element + 108) != v3[2].mChannelsPerFrame)
  {
    return 4294956428;
  }
  int v5 = *(_DWORD *)(Element + 112);
  uint64_t v6 = 4294956428;
  if (v5 == v3[2].mBitsPerChannel)
  {
    if (CA::Implementation::EquivalentFormatFlags(v4, v3 + 2, 0, 0)) {
      return 0;
    }
    else {
      return 4294956428;
    }
  }
  return v6;
}

void AUMixGainCompensation::~AUMixGainCompensation(AUMixGainCompensation *this)
{
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

void vtRunFFT(uint64_t a1, int a2)
{
  if (a2 < 1)
  {
    vDSP_fft_zrip(*(FFTSetup *)(a1 + 24), (const DSPSplitComplex *)(a1 + 32), 1, *(int *)(a1 + 20), -1);
    int v5 = *(DSPComplex **)a1;
    int v6 = *(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0);
    vDSP_ztoc((const DSPSplitComplex *)(a1 + 32), 1, v5, 2, (uint64_t)v6 >> 1);
  }
  else
  {
    vDSP_ctoz(*(const DSPComplex **)a1, 2, (const DSPSplitComplex *)(a1 + 32), 1, (uint64_t)(*(_DWORD *)(a1 + 16) + (*(int *)(a1 + 16) < 0)) >> 1);
    double v3 = *(OpaqueFFTSetup **)(a1 + 24);
    vDSP_Length v4 = *(int *)(a1 + 20);
    vDSP_fft_zrip(v3, (const DSPSplitComplex *)(a1 + 32), 1, v4, 1);
  }
}

void MicIssueDetectorCorev1::process(MicIssueDetectorCorev1 *this, void *a2, void *a3, uint64_t a4, const void ***a5, void *a6, uint64_t a7, double a8, double a9, float a10)
{
  float v14 = *(float *)(*((void *)this + 1) + 12);
  if (v14 >= 0.0) {
    *(_DWORD *)(*((void *)this + 14) + 152) = (int)v14;
  }
  float v15 = *((float *)this + 65);
  LODWORD(v16) = *((_DWORD *)this + 19);
  BOOL v17 = v15 <= 0.0 || v15 == 1.0;
  unint64_t v289 = (float *)((char *)this + 260);
  if (v17) {
    goto LABEL_10;
  }
  if (v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      vDSP_vsmul(*(const float **)(*a2 + v18), 1, (const float *)this + 65, *(float **)(*a2 + v18), 1, (uint64_t)(*(void *)(*a2 + v18 + 8) - *(void *)(*a2 + v18)) >> 2);
      ++v19;
      unint64_t v16 = *((unsigned int *)this + 19);
      v18 += 24;
    }
    while (v19 < v16);
LABEL_10:
    if (v16)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      do
      {
        float32x2_t v22 = *(float **)(*((void *)this + 37) + v20);
        float v23 = *(float **)(*((void *)this + 34) + v20);
        uint64_t v24 = *((unsigned int *)this + 16);
        __A.unsigned int realp = *(float **)(*a2 + v20);
        __A.imagp = &__A.realp[v24];
        float v25 = *__A.realp;
        float v26 = *__A.imagp;
        unsigned int v27 = *((_DWORD *)this + 18) - 1;
        vDSP_zvmags(&__A, 1, v23, 1, v27);
        *float v23 = v25 * v25;
        v23[v27] = v26 * v26;
        LODWORD(__B.realp) = *((_DWORD *)this + 52);
        *(float *)&__D.unsigned int realp = 1.0 - *(float *)&__B.realp;
        vDSP_vsmsma(v22, 1, (const float *)&__B, v23, 1, (const float *)&__D, v22, 1, *((unsigned int *)this + 18));
        ++v21;
        unint64_t v16 = *((unsigned int *)this + 19);
        v20 += 24;
      }
      while (v21 < v16);
    }
  }
  if (*((_DWORD *)this + 20))
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    do
    {
      unsigned int v30 = *(float **)(*a2 + 24 * *(unsigned int *)(*((void *)this + 46) + 4 * v29));
      BOOL v31 = *(float **)(*((void *)this + 40) + v28);
      vDSP_Length v32 = *((unsigned int *)this + 16);
      size_t v33 = (float *)(*(void *)(*a2 + 24 * *(unsigned int *)(*((void *)this + 43) + 4 * v29)) + 4 * v32);
      __A.unsigned int realp = *(float **)(*a2 + 24 * *(unsigned int *)(*((void *)this + 43) + 4 * v29));
      __A.imagp = v33;
      __B.unsigned int realp = v30;
      __B.imagp = &v30[v32];
      __D.unsigned int realp = (float *)*((void *)this + 149);
      __D.imagp = &__D.realp[v32];
      vDSP_zvcmul(&__B, 1, &__A, 1, &__D, 1, v32);
      *__D.unsigned int realp = *__A.realp * *__B.realp;
      *__D.imagp = *__A.imagp * *__B.imagp;
      float v301 = *((float *)this + 52);
      float v300 = 1.0 - v301;
      vDSP_vsmsma(v31, 1, &v301, *((const float **)this + 149), 1, &v300, v31, 1, *((unsigned int *)this + 16));
      vDSP_vsmsma(&v31[*((unsigned int *)this + 16)], 1, &v301, (const float *)(*((void *)this + 149) + 4 * *((unsigned int *)this + 16)), 1, &v300, &v31[*((unsigned int *)this + 16)], 1, *((unsigned int *)this + 16));
      ++v29;
      v28 += 24;
    }
    while (v29 < *((unsigned int *)this + 20));
    LODWORD(v16) = *((_DWORD *)this + 19);
  }
  v299 = a2;
  if (v16)
  {
    unint64_t v34 = 0;
    do
    {
      *(float *)(*((void *)this + 61) + 4 * v34) = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *((_DWORD *)this + 35), *((_DWORD *)this + 36), *((float *)this + 53), *(float *)(*((void *)this + 61) + 4 * v34), a10, *(const float **)(*((void *)this + 37) + 24 * v34));
      *(float *)(*((void *)this + 64) + 4 * v34) = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *((_DWORD *)this + 36), *((_DWORD *)this + 37), *((float *)this + 53), *(float *)(*((void *)this + 64) + 4 * v34), v35, *(const float **)(*((void *)this + 37) + 24 * v34));
      *(float *)(*((void *)this + 67) + 4 * v34) = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *((_DWORD *)this + 38), *((_DWORD *)this + 39), *((float *)this + 54), *(float *)(*((void *)this + 67) + 4 * v34), v36, *(const float **)(*((void *)this + 34) + 24 * v34));
      if (*(_DWORD *)(*((void *)this + 14) + 120))
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        uint64_t v39 = *((void *)this + 100);
        do
        {
          float v40 = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *(_DWORD *)(*((void *)this + 112) + 4 * v38), *(_DWORD *)(*((void *)this + 118) + 4 * v38), *((float *)this + 53), *(float *)(*(void *)(v39 + v37) + 4 * v34), a10, *(const float **)(*((void *)this + 37) + 24 * v34));
          uint64_t v39 = *((void *)this + 100);
          *(float *)(*(void *)(v39 + v37) + 4 * v34) = v40;
          ++v38;
          v37 += 24;
        }
        while (v38 < *(unsigned int *)(*((void *)this + 14) + 120));
      }
      ++v34;
      unint64_t v16 = *((unsigned int *)this + 19);
    }
    while (v34 < v16);
  }
  LODWORD(__A.realp) = 0;
  LODWORD(__B.realp) = 0;
  vDSP_maxv(*((const float **)this + 61), 1, (float *)&__A, v16);
  vDSP_maxv(*((const float **)this + 64), 1, (float *)&__B, *((unsigned int *)this + 19));
  float v41 = *(float *)(*((void *)this + 14) + 20);
  BOOL v42 = *(float *)&__A.realp < v41;
  if (*(float *)&__B.realp >= v41) {
    BOOL v42 = 0;
  }
  *((unsigned char *)this + 12std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v42;
  float v43 = (float *)*((void *)this + 146);
  vDSP_vfill(&MicIssueDetectorCorev1::kOnef, v43, 1, *((unsigned int *)this + 18));
  uint64_t v290 = a4;
  v298 = a3;
  if (*((_DWORD *)this + 19))
  {
    uint64_t v44 = 0;
    vDSP_Length v45 = 0;
    do
    {
      vDSP_vfill(&MicIssueDetectorCorev1::kEpsf, *(float **)(*((void *)this + 49) + v44), 1, *((unsigned int *)this + 18));
      ++v45;
      vDSP_Length v46 = *((unsigned int *)this + 19);
      v44 += 24;
    }
    while (v45 < v46);
  }
  else
  {
    vDSP_Length v46 = 0;
  }
  vDSP_vfill(&MicIssueDetectorCorev1::kEpsdB, *((float **)this + 70), 1, v46);
  if (*((_DWORD *)this + 20))
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    do
    {
      uint64_t v49 = *(unsigned int *)(*((void *)this + 43) + 4 * v48);
      uint64_t v50 = *(unsigned int *)(*((void *)this + 46) + 4 * v48);
      uint64_t v51 = (float *)*((void *)this + 143);
      vDSP_Length v52 = *((unsigned int *)this + 16);
      __A.unsigned int realp = *(float **)(*((void *)this + 40) + v47);
      __A.imagp = &__A.realp[v52];
      vDSP_zvmags(&__A, 1, *((float **)this + 140), 1, v52);
      float v53 = (float *)*((void *)this + 140);
      *float v53 = *__A.realp * *__A.realp;
      v53[*((unsigned int *)this + 16)] = *__A.imagp * *__A.imagp;
      vDSP_vmsa(*(const float **)(*((void *)this + 37) + 24 * v49), 1, *(const float **)(*((void *)this + 37) + 24 * v50), 1, &MicIssueDetectorCorev1::kEpsf, v51, 1, *((unsigned int *)this + 18));
      vDSP_vdiv(v51, 1, *((const float **)this + 140), 1, v51, 1, *((unsigned int *)this + 18));
      vDSP_vclip(v51, 1, &AUSpeechLevelEstimator::kVAD_Min, &AUSpeechLevelEstimator::kVAD_Max, v51, 1, *((unsigned int *)this + 18));
      float v54 = *(float **)(*((void *)this + 49) + 24 * v49);
      vDSP_vmax(v54, 1, *((const float **)this + 143), 1, v54, 1, *((unsigned int *)this + 18));
      unsigned int v55 = *(float **)(*((void *)this + 49) + 24 * v50);
      vDSP_vmax(v55, 1, *((const float **)this + 143), 1, v55, 1, *((unsigned int *)this + 18));
      vDSP_vmin(v43, 1, *((const float **)this + 143), 1, v43, 1, *((unsigned int *)this + 18));
      uint64_t v56 = *((void *)this + 70);
      uint64_t v57 = *((void *)this + 67);
      float v58 = *(float *)(v56 + 4 * v49);
      if (v58 < *(float *)(v57 + 4 * v50)) {
        float v58 = *(float *)(v57 + 4 * v50);
      }
      *(float *)(v56 + 4 * v49) = v58;
      float v59 = *(float *)(v56 + 4 * v50);
      if (v59 < *(float *)(v57 + 4 * v49)) {
        float v59 = *(float *)(v57 + 4 * v49);
      }
      *(float *)(v56 + 4 * v5DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v59;
      ++v48;
      v47 += 24;
    }
    while (v48 < *((unsigned int *)this + 20));
  }
  vDSP_meanv(&v43[*((unsigned int *)this + 38)], 1, (float *)this + 62, (*((_DWORD *)this + 39) - *((_DWORD *)this + 38) + 1));
  unint64_t v60 = *((unsigned int *)this + 19);
  if (v60)
  {
    unint64_t v61 = 0;
    uint64_t v62 = *((void *)this + 14);
    do
    {
      if (*(_DWORD *)(v62 + 120))
      {
        uint64_t v63 = 0;
        unint64_t v64 = 0;
        do
        {
          uint64_t v65 = *(unsigned int *)(*((void *)this + 112) + 4 * v64);
          vDSP_meanv((const float *)(*(void *)(*((void *)this + 49) + 24 * v61) + 4 * v65), 1, (float *)(*(void *)(*((void *)this + 103) + v63) + 4 * v61), (*(_DWORD *)(*((void *)this + 118) + 4 * v64++) - v65 + 1));
          uint64_t v62 = *((void *)this + 14);
          v63 += 24;
        }
        while (v64 < *(unsigned int *)(v62 + 120));
        unint64_t v60 = *((unsigned int *)this + 19);
      }
      ++v61;
    }
    while (v61 < v60);
  }
  vDSP_vmax(**((const float ***)this + 49), 1, *(const float **)(*((void *)this + 49) + 24), 1, *((float **)this + 52), 1, *((unsigned int *)this + 18));
  vDSP_Length v66 = *((unsigned int *)this + 19);
  if (v66)
  {
    uint64_t v67 = 0;
    vDSP_Length v68 = 0;
    uint64_t v69 = *((void *)this + 55);
    do
    {
      uint64_t v70 = *(void *)(*((void *)this + 49) + v67);
      uint64_t v71 = *((unsigned int *)this + 33);
      int v72 = *((_DWORD *)this + 34);
      float v73 = *((float *)this + 52);
      float v74 = *(float *)(v69 + 4 * v68);
      int v75 = *((unsigned __int8 *)this + 128);
      LODWORD(__A.realp) = 0;
      float v76 = 0.0;
      if (!v75)
      {
        vDSP_meanv((const float *)(v70 + 4 * v71), 1, (float *)&__A, (v72 - v71 + 1));
        float v76 = 1.0 - *(float *)&__A.realp;
        uint64_t v69 = *((void *)this + 55);
        vDSP_Length v66 = *((unsigned int *)this + 19);
      }
      *(float *)(v69 + 4 * v68++) = (float)((float)(1.0 - v73) * v76) + (float)(v73 * v74);
      v67 += 24;
    }
    while (v68 < v66);
  }
  else
  {
    vDSP_Length v66 = 0;
  }
  vDSP_vclr(*((float **)this + 106), 1, v66);
  uint64_t v77 = *((unsigned int *)this + 20);
  if (v77)
  {
    uint64_t v78 = 0;
    uint64_t v79 = *((void *)this + 43);
    uint64_t v80 = *((void *)this + 46);
    uint64_t v81 = *(unsigned int *)(*((void *)this + 14) + 120);
    unsigned int v82 = (float *)*((void *)this + 140);
    do
    {
      uint64_t v83 = *(unsigned int *)(v79 + 4 * v78);
      uint64_t v84 = *(unsigned int *)(v80 + 4 * v78);
      if (v81)
      {
        float v85 = (uint64_t *)*((void *)this + 100);
        float v86 = v82;
        uint64_t v87 = v81;
        do
        {
          uint64_t v88 = *v85;
          v85 += 3;
          *v86++ = *(float *)(v88 + 4 * v83) - *(float *)(v88 + 4 * v84);
          --v87;
        }
        while (v87);
      }
      if (MicIssueDetectorCorev1::isMicBlocked(this, v83, v82, 0)) {
        *(_DWORD *)(*((void *)this + 106) + 4 * v83) = 1065353216;
      }
      if (MicIssueDetectorCorev1::isMicBlocked(this, v84, v82, 1)) {
        *(_DWORD *)(*((void *)this + 106) + 4 * v84) = 1065353216;
      }
      ++v78;
    }
    while (v78 != v77);
  }
  *((_DWORD *)this + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  if (!*((_DWORD *)this + 19))
  {
    LODWORD(v106) = 0;
    float v97 = 1.0;
    uint64_t v98 = v290;
    long long v99 = v299;
    goto LABEL_86;
  }
  unint64_t v89 = 0;
  uint64_t v90 = *((void *)this + 4);
  unsigned int v91 = *(float **)(v90 + 48);
  uint64_t v92 = *((void *)this + 106);
  uint64_t v93 = *((void *)this + 1);
  uint64_t v94 = *((void *)this + 88);
  uint64_t v95 = *((void *)this + 91);
  uint64_t v96 = *(void *)(v90 + 72);
  float v97 = 1.0;
  uint64_t v98 = v290;
  long long v99 = v299;
  do
  {
    float v100 = (float)((float)(1.0 - *((float *)this + 55)) * *(float *)(v92 + 4 * v89))
         + (float)(*((float *)this + 55) * v91[v89]);
    v91[v89] = v100;
    float v101 = *(float *)(v93 + 52);
    int v102 = v100 > v101;
    if (*(_DWORD *)(v94 + 4 * v89) == v102)
    {
      int v103 = *(_DWORD *)(v95 + 4 * v89);
      if (!v103) {
        goto LABEL_71;
      }
      int v104 = v103 - 1;
    }
    else if (v100 <= v101)
    {
      int v104 = *((_DWORD *)this + 42);
    }
    else
    {
      int v104 = *((_DWORD *)this + 41);
    }
    *(_DWORD *)(v95 + 4 * v89) = v104;
    if (v104)
    {
      float v105 = *(float *)(v96 + 4 * v89);
      goto LABEL_75;
    }
LABEL_71:
    if (v100 <= v101) {
      float v105 = 0.0;
    }
    else {
      float v105 = 1.0;
    }
    *(float *)(v96 + 4 * v89) = v105;
    *(_DWORD *)(v95 + 4 * v89) = *((_DWORD *)this + 41);
LABEL_75:
    *(_DWORD *)(v94 + 4 * v89) = v102;
    if (v105 != 0.0) {
      ++*((_DWORD *)this + 40);
    }
    float v97 = v97 * v100;
    ++v89;
    unint64_t v106 = *((unsigned int *)this + 19);
  }
  while (v89 < v106);
  if (v106)
  {
    uint64_t v107 = *((unsigned int *)this + 19);
    float v108 = v97;
    do
    {
      float v109 = *v91++;
      float v110 = v109;
      if (v109 >= 1.0e-22) {
        float v111 = v110;
      }
      else {
        float v111 = 1.0e-22;
      }
      float v108 = v108 + (float)((float)(v97 / v111) * (float)(1.0 - v110));
      --v107;
    }
    while (v107);
    float v97 = v108;
  }
LABEL_86:
  *((float *)this + 63) = 1.0 - v97;
  if (*((unsigned char *)this + 128)) {
    BOOL v112 = 1;
  }
  else {
    BOOL v112 = *((_DWORD *)this + 40) >= (v106 - 1);
  }
  *((unsigned char *)this + 129) = v112;
  if (v106)
  {
    unint64_t v113 = 0;
    unint64_t v114 = (void *)*((void *)this + 4);
    while (1)
    {
      float v115 = 0.0;
      if (*(float *)(v114[9] + 4 * v113) == 0.0 && !*((unsigned char *)this + 129))
      {
        float v115 = *(float *)(*((void *)this + 55) + 4 * v113);
        float v116 = *(float *)(*((void *)this + 14) + 20);
        if (*(float *)(*((void *)this + 61) + 4 * v113) < v116
          && *(float *)(*((void *)this + 64) + 4 * v113) < v116)
        {
          float v115 = 0.0;
        }
      }
      uint64_t v117 = *(void *)(*((void *)this + 49) + 24 * v113);
      int v118 = (float *)*((void *)this + 140);
      vDSP_vclr(v118, 1, *((unsigned int *)this + 18));
      unsigned int v119 = *((_DWORD *)this + 35);
      unsigned int v120 = *((_DWORD *)this + 37);
      if (v119 <= v120)
      {
        float v121 = 1.0 - *(float *)(*((void *)this + 1) + 48);
        do
        {
          if (*(float *)(v117 + 4 * v119) >= v121) {
            float v122 = 0.0;
          }
          else {
            float v122 = 1.0;
          }
          v118[v119++] = v122;
        }
        while (v119 <= v120);
      }
      vDSP_vmul(*(const float **)(*((void *)this + 37) + 24 * v113), 1, *((const float **)this + 140), 1, *((float **)this + 140), 1, *((unsigned int *)this + 18));
      float v124 = 0.0;
      if (v115 > *(float *)(*((void *)this + 1) + 48)) {
        float v124 = (float)*((unsigned int *)this + 37);
      }
      float v125 = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *((_DWORD *)this + 35), v124, *((float *)this + 53), *(float *)(*(void *)(*((void *)this + 4) + 96) + 4 * v113), v123, *((const float **)this + 140));
      unint64_t v114 = (void *)*((void *)this + 4);
      *(float *)(v114[12] + 4 * v113) = v125;
      if (v125 <= *(float *)(*((void *)this + 14) + 20)) {
        float v126 = 0.0;
      }
      else {
        float v126 = v115;
      }
      *(float *)(*v114 + 4 * v113) = v126;
      int v127 = (float *)*((void *)this + 1);
      float v128 = v127[12];
      int v129 = v126 > v128;
      uint64_t v130 = *((void *)this + 94);
      uint64_t v131 = *((void *)this + 97);
      uint64_t v132 = v114[3];
      if (*(_DWORD *)(v130 + 4 * v113) == v129)
      {
        int v133 = *(_DWORD *)(v131 + 4 * v113);
        if (!v133) {
          goto LABEL_114;
        }
        int v134 = v133 - 1;
      }
      else if (v126 <= v128)
      {
        int v134 = *((_DWORD *)this + 42);
      }
      else
      {
        int v134 = *((_DWORD *)this + 41);
      }
      *(_DWORD *)(v131 + 4 * v113) = v134;
      if (!v134)
      {
LABEL_114:
        if (v126 <= v128) {
          float v135 = 0.0;
        }
        else {
          float v135 = 1.0;
        }
        *(float *)(v132 + 4 * v113) = v135;
        *(_DWORD *)(v131 + 4 * v113) = *((_DWORD *)this + 41);
      }
      *(_DWORD *)(v130 + 4 * v113++) = v129;
      if (v113 >= *((unsigned int *)this + 19))
      {
        LODWORD(v136) = *((_DWORD *)this + 19);
        goto LABEL_121;
      }
    }
  }
  LODWORD(v136) = 0;
  int v127 = (float *)*((void *)this + 1);
LABEL_121:
  if (v127[15] == 0.0)
  {
    uint64_t v167 = 196;
    if (v127[17] == 1.0) {
      uint64_t v167 = 192;
    }
    *((_DWORD *)this + 51) = *(_DWORD *)((char *)this + v167);
    v127[17] = 0.0;
  }
  else
  {
    unsigned int v137 = v136 - 1;
    unsigned int v138 = *(_DWORD *)(*((void *)this + 14) + 152);
    if (v138 >= (int)v136 - 1) {
      uint64_t v139 = v137;
    }
    else {
      uint64_t v139 = v138;
    }
    unsigned int v140 = v127[16];
    if (v137 >= v140) {
      unsigned int v141 = v140;
    }
    else {
      unsigned int v141 = v136 - 1;
    }
    if (v136)
    {
      unsigned int v294 = v141;
      int v142 = (float *)*((void *)this + 130);
      int v143 = *(float **)(*((void *)this + 4) + 144);
      uint64_t v144 = v136;
      long long v145 = v142;
      do
      {
        float v146 = *((float *)this + 67);
        float v147 = *v145;
        float v148 = *v143++;
        float v149 = exp(v148 * 0.230258509);
        *v145++ = (float)((float)(1.0 - v146) * v149) + (float)(v146 * v147);
        --v144;
      }
      while (v144);
      unint64_t v150 = 0;
      unsigned __int8 v151 = 0;
      unsigned int v152 = 0;
      float v154 = log10f(v142[v139] + 2.2204e-16) * 10.0;
      char v155 = 1;
      do
      {
        *(float *)(*((void *)this + 134) + 4 * v15DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange((float **)this, *((_DWORD *)this + 266), *((_DWORD *)this + 267), *((float *)this + 53), *(float *)(*((void *)this + 134) + 4 * v150), v153, *(const float **)(*((void *)this + 37) + 24 * v150));
        vDSP_meanv((const float *)(*(void *)(*((void *)this + 49) + 24 * v150) + 4 * *((unsigned int *)this + 266)), 1, (float *)(*((void *)this + 137) + 4 * v150), (*((_DWORD *)this + 267) - *((_DWORD *)this + 266) + 1));
        float v156 = log10f(*(float *)(*((void *)this + 130) + 4 * v150) + 2.2204e-16) * 10.0;
        uint64_t v157 = *((void *)this + 4);
        BOOL v158 = v156 > *(float *)(*(void *)(v157 + 240) + 4 * v150);
        if (v150 != v139)
        {
          BOOL v159 = (float)(v154 - v156) > *(float *)(*(void *)(v157 + 24 * v150 + 264) + 4 * v139);
          long long v160 = (float *)*((void *)this + 1);
          if (v154 <= -60.0) {
            long long v161 = v160 + 25;
          }
          else {
            long long v161 = (float *)(*(void *)(v157 + 24 * v150 + 456) + 4 * v139);
          }
          if (*(float *)(*((void *)this + 137) + 4 * v139) >= v160[23])
          {
            int v165 = 0;
          }
          else
          {
            float v162 = *v161;
            uint64_t v163 = *((void *)this + 134);
            float v153 = *(float *)(v163 + 4 * v139);
            float v164 = v160[24];
            int v165 = (float)(*(float *)(v163 + 4 * v150) - v153) > v162;
            if (v153 >= v164) {
              int v165 = 0;
            }
          }
          v151 |= v159;
          v152 += v165;
        }
        v155 &= v158;
        ++v150;
        unint64_t v136 = *((unsigned int *)this + 19);
      }
      while (v150 < v136);
      uint64_t v98 = v290;
      long long v99 = v299;
      if (v155)
      {
        unsigned int v141 = v294;
        BOOL v166 = v154 > -60.0;
        goto LABEL_149;
      }
      unsigned int v169 = 0;
      BOOL v166 = v154 > -60.0;
    }
    else
    {
      float v168 = log10f(*(float *)(*((void *)this + 130) + 4 * v139) + 2.2204e-16);
      LODWORD(v136) = 0;
      unsigned __int8 v151 = 0;
      unsigned int v152 = 0;
      BOOL v166 = (float)(v168 * 10.0) > -60.0;
      uint64_t v157 = *((void *)this + 4);
LABEL_149:
      unsigned int v169 = v151 & (*(float *)(*(void *)(v157 + 24) + 4 * v141) == 0.0);
    }
    unsigned int v170 = v136 - 1;
    int v171 = v136 - 2;
    if ((v136 - 2) <= 1) {
      int v171 = 1;
    }
    if (!v166) {
      unsigned int v170 = v171;
    }
    if (v152 >= v170) {
      unsigned int v169 = 1;
    }
    uint64_t v172 = *((void *)this + 1);
    int v173 = *((_DWORD *)this + 48);
    if (*((void *)this + 24))
    {
      if (*((_DWORD *)this + 50) == v169)
      {
        int v174 = *((_DWORD *)this + 51);
        if (v174)
        {
          int v173 = v174 - 1;
          goto LABEL_164;
        }
        goto LABEL_165;
      }
      if (!v169) {
        int v173 = *((_DWORD *)this + 49);
      }
LABEL_164:
      *((_DWORD *)this + 51) = v173;
      if (!v173) {
LABEL_165:
      }
        *(float *)(v172 + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (float)v169;
      *((_DWORD *)this + 5DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v169;
    }
    else
    {
      *(float *)(v172 + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (float)v169;
    }
  }
  vDSP_vclr(*((float **)this + 73), 1, v136);
  uint64_t v175 = *((void *)this + 14);
  float v176 = expf((float)(*((float *)this + 62) - *(float *)(v175 + 56)) * 50.0);
  LODWORD(v177) = *((_DWORD *)this + 19);
  if (!v177) {
    goto LABEL_191;
  }
  unint64_t v178 = 0;
  uint64_t v179 = *((void *)this + 67);
  uint64_t v180 = *((void *)this + 73);
  uint64_t v181 = *((void *)this + 76);
  uint64_t v295 = *((void *)this + 85);
  uint64_t v296 = *((void *)this + 70);
  __n128 v182 = (void *)*((void *)this + 4);
  uint64_t v183 = v182[12];
  uint64_t v184 = *((void *)this + 79);
  uint64_t v293 = *((void *)this + 82);
  uint64_t v185 = v182[9];
  uint64_t v186 = v182[15];
  float v187 = 1.0 / (float)(v176 + 1.0);
  while (2)
  {
    float v188 = *(float *)(v179 + 4 * v178) - *(float *)(v296 + 4 * v178);
    if (v188 < 0.0) {
      float v188 = 0.0;
    }
    float v189 = (float)(v187 * *((float *)this + 63)) * v188;
    *(float *)(v180 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v189;
    float v190 = *(float *)(v179 + 4 * v178);
    float v191 = 0.0;
    if (v190 > *(float *)(v175 + 84))
    {
      float v192 = *(float *)(v175 + 60);
      float v191 = v192 / (float)(expf(-(float)(*(float *)(v175 + 64) * (float)(v189 - *(float *)(v175 + 68)))) + 1.0);
    }
    float v193 = fminf(*(float *)(v175 + 88) - v190, 0.0);
    if (v191 >= v193) {
      float v193 = v191;
    }
    float v194 = *(float *)(v181 + 4 * v178);
    if (v193 < v194)
    {
      float v195 = *((float *)this + 56);
      goto LABEL_177;
    }
    float v195 = *((float *)this + 57);
    if (v193 > v194)
    {
      unsigned int v196 = *(_DWORD *)(v295 + 4 * v178);
      if (*((float *)this + 58) > (float)v196)
      {
        *(_DWORD *)(v295 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v196 + 1;
        float v195 = 1.0;
        if ((float)(v194 * -0.9) <= (float)-v193) {
LABEL_177:
        }
          *(_DWORD *)(v295 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
      }
    }
    *(float *)(v181 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (float)(v193 * (float)(1.0 - v195)) + (float)(v195 * v194);
    float v197 = *(float *)(v175 + 24);
    float v198 = v197
         / (float)(expf(-(float)(*(float *)(v175 + 28) * (float)(*(float *)(v183 + 4 * v178) - *(float *)(v175 + 32))))
                 + 1.0);
    float v199 = *(float *)(v184 + 4 * v178);
    if (v198 < v199)
    {
      float v200 = *((float *)this + 59);
      goto LABEL_183;
    }
    float v200 = *((float *)this + 60);
    if (v198 > v199)
    {
      unsigned int v201 = *(_DWORD *)(v293 + 4 * v178);
      if (*((float *)this + 61) > (float)v201)
      {
        *(_DWORD *)(v293 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v201 + 1;
        float v200 = 1.0;
        if ((float)(v199 * -0.9) <= (float)-v198) {
LABEL_183:
        }
          *(_DWORD *)(v293 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
      }
    }
    float v202 = (float)(v198 * (float)(1.0 - v200)) + (float)(v200 * v199);
    *(float *)(v184 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v202;
    if (*(float *)(v181 + 4 * v178) < v202) {
      float v202 = *(float *)(v181 + 4 * v178);
    }
    *(float *)(v186 + 4 * v17std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (float)(1.0 - *(float *)(v185 + 4 * v178)) * expf(v202 * 0.11513);
    ++v178;
    unint64_t v177 = *((unsigned int *)this + 19);
    if (v178 < v177) {
      continue;
    }
    break;
  }
  uint64_t v98 = v290;
  long long v99 = v299;
LABEL_191:
  unsigned int v203 = *(_DWORD *)(v175 + 152);
  if ((int)v177 - 1 < (int)v203) {
    unsigned int v203 = v177 - 1;
  }
  v204 = (float *)*((void *)this + 1);
  if (v204[15] != 0.0 && v204[17] != 0.0)
  {
    *(_DWORD *)(*(void *)(*((void *)this + 4) + 120) + 4 * v203) = 452053249;
    unsigned int v203 = v204[16];
    if ((int)v177 - 1 < v203) {
      unsigned int v203 = v177 - 1;
    }
  }
  uint64_t v205 = *((void *)this + 4);
  if ((v203 & 0x80000000) != 0)
  {
    uint64_t v206 = *(float **)(v205 + 120);
  }
  else
  {
    uint64_t v206 = *(float **)(v205 + 120);
    if (v206[v203] > *(float *)(v175 + 156))
    {
      uint64_t v207 = v203;
      vDSP_vfill(&MicIssueDetectorCorev1::kEpsf, v206, 1, v177);
      uint64_t v206 = *(float **)(*((void *)this + 4) + 120);
      v206[v207] = 1.0;
      LODWORD(v177) = *((_DWORD *)this + 19);
    }
  }
  LODWORD(__B.realp) = -1018691584;
  __A.unsigned int realp = 0;
  vDSP_maxvi(v206, 1, (float *)&__B, (vDSP_Length *)&__A, v177);
  unsigned int realp = __A.realp;
  float v209 = (float)(unint64_t)__A.realp;
  if (*((float *)this + 64) == (float)(unint64_t)__A.realp)
  {
    int v210 = *((_DWORD *)this + 43);
    if (v210)
    {
      int v211 = v210 - 1;
      goto LABEL_205;
    }
    int v211 = 0;
  }
  else
  {
    int v211 = *((_DWORD *)this + 41);
LABEL_205:
    *((_DWORD *)this + 43) = v211;
  }
  v212 = (void *)*((void *)this + 4);
  uint64_t v213 = v212[15];
  uint64_t v214 = (float *)*((void *)this + 1);
  float v215 = *(float *)(v213 + 4 * v214[2]);
  if (v215 < 1.0e-22) {
    float v215 = 1.0e-22;
  }
  if (!v211 || (float)(*(float *)(v213 + 4 * realp) / v215) > 1.4125)
  {
    v214[2] = v209;
    *((_DWORD *)this + 43) = *((_DWORD *)this + 41);
  }
  *((float *)this + 64) = v209;
  *(_DWORD *)(v213 + 4 * v214[2]) = 1065353216;
  uint64_t v216 = *((unsigned int *)this + 19);
  if (v216)
  {
    char v217 = 0;
    v218 = (float *)v212[3];
    uint64_t v219 = *((unsigned int *)this + 19);
    do
    {
      float v220 = *v218++;
      v217 |= v220 != 0.0;
      --v219;
    }
    while (v219);
    char v221 = 0;
    *uint64_t v214 = (float)(v217 & 1);
    v222 = (float *)v212[9];
    do
    {
      float v223 = *v222++;
      v221 |= v223 != 0.0;
      --v216;
    }
    while (v216);
    float v224 = (float)(v221 & 1);
  }
  else
  {
    *uint64_t v214 = 0.0;
    float v224 = 0.0;
  }
  v214[1] = v224;
  vDSP_vfill(&MicIssueDetectorCorev1::kOnef, *((float **)this + 11), 1, *((unsigned int *)this + 18));
  if (**((float **)this + 1) != 0.0)
  {
    unint64_t v225 = *((unsigned int *)this + 45);
    unsigned int v226 = *((_DWORD *)this + 47);
    if (v225 <= v226)
    {
      uint64_t v227 = *((void *)this + 14);
      uint64_t v228 = *((void *)this + 52);
      unsigned int v229 = *((_DWORD *)this + 45);
      uint64_t v230 = *((void *)this + 11);
      do
      {
        *(float *)(v230 + 4 * v229) = *((float *)this + 66)
                                      + (float)((float)(1.0 - *((float *)this + 66))
                                              * (float)((float)(tanhf(*(float *)(v227 + 104)* (float)(*(float *)(v228 + 4 * v229)- *(float *)(v227 + 108)))+ 1.0)* 0.5));
        ++v229;
      }
      while (v229 <= v226);
    }
    uint64_t v232 = *((void *)this + 58);
    uint64_t v231 = *((void *)this + 59);
    unint64_t v233 = (v231 - v232) >> 2;
    unint64_t v234 = v233 >> 1;
    if (v233 >> 1 > v225) {
      unint64_t v225 = v233 >> 1;
    }
    vDSP_vclr(*((float **)this + 140), 1, (uint64_t)(*((void *)this + 141) - *((void *)this + 140)) >> 2);
    uint64_t v235 = *((unsigned int *)this + 47);
    unint64_t v236 = v235 - (v233 >> 1);
    if (v225 <= v236)
    {
      if (v233 <= 1) {
        uint64_t v237 = 1;
      }
      else {
        uint64_t v237 = (v231 - v232) >> 2;
      }
      uint64_t v238 = 4 * v225 - 4 * v234;
      do
      {
        if (v231 != v232)
        {
          uint64_t v239 = *((void *)this + 140);
          float v240 = *(float *)(v239 + 4 * v225);
          uint64_t v241 = (float *)(*((void *)this + 58) + 4 * v233 - 4 * v234);
          unint64_t v242 = (float *)(*((void *)this + 11) + v238);
          uint64_t v243 = v237;
          do
          {
            float v244 = *v242++;
            float v245 = v244;
            float v246 = *v241--;
            float v240 = v240 + (float)(v245 * v246);
            *(float *)(v239 + 4 * v225) = v240;
            --v243;
          }
          while (v243);
        }
        ++v225;
        v238 += 4;
      }
      while (v225 <= v236);
    }
    uint64_t v98 = v290;
    if (v234 <= v236)
    {
      uint64_t v247 = *((void *)this + 140);
      uint64_t v248 = *((void *)this + 11);
      do
      {
        *(_DWORD *)(v248 + 4 * v234) = *(_DWORD *)(v247 + 4 * v234);
        ++v234;
      }
      while (v234 <= v236);
    }
    unsigned int v249 = *((_DWORD *)this + 46);
    if (v249 <= v235)
    {
      uint64_t v250 = *((void *)this + 11);
      while (*(float *)(v250 + 4 * v249) <= *(float *)(*((void *)this + 14) + 112))
      {
        if (++v249 > v235) {
          goto LABEL_244;
        }
      }
      for (; v249 <= v235; ++v249)
        *(_DWORD *)(v250 + 4 * v249) = 1065353216;
    }
  }
LABEL_244:
  v251 = a5[1];
  if (v251 != *a5
    && ((uint64_t v252 = a6[1] - *a6) != 0 ? (v253 = (char *)v251 - (char *)*a5 == v252) : (v253 = 0),
        v253
     && (unint64_t v254 = (2 * *((_DWORD *)this + 16)), v254 <= ((unsigned char *)(*a5)[1] - (unsigned char *)**a5) >> 2)
     && v254 <= (uint64_t)(*(void *)(*a6 + 8) - *(void *)*a6) >> 2))
  {
    BOOL v256 = *(float *)(*((void *)this + 1) + 56) == 1.0;
    int v255 = 1;
  }
  else
  {
    int v255 = 0;
    BOOL v256 = 0;
  }
  vDSP_vclr(*(float **)v98, 1, (uint64_t)(*(void *)(v98 + 8) - *(void *)v98) >> 2);
  vDSP_vclr(*(float **)a7, 1, (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
  LODWORD(__A.realp) = 0;
  vDSP_sve(*(const float **)(*((void *)this + 4) + 120), 1, (float *)&__A, *((unsigned int *)this + 19));
  LODWORD(v257) = *((_DWORD *)this + 19);
  if (v257)
  {
    unint64_t v258 = 0;
    unint64_t v259 = 0;
    while (2)
    {
      v260 = *(const float **)(*v99 + v258);
      uint64_t v261 = *((unsigned int *)this + 16);
      long long v262 = *(float **)(*v298 + v258);
      unint64_t v263 = &v260[v261];
      v264 = &v262[v261];
      uint64_t v265 = (const float *)*((void *)this + 11);
      float v266 = *v263;
      vDSP_Length v267 = *((unsigned int *)this + 18) - 1;
      vDSP_vmul(v260, 1, v265, 1, v262, 1, v267);
      vDSP_vmul(v263, 1, v265, 1, v264, 1, v267);
      float *v264 = v266 * v265[v267];
      if (v256)
      {
        unint64_t v268 = (const float *)(*a5)[v258 / 8];
        uint64_t v269 = *((unsigned int *)this + 16);
        v270 = *(float **)(*a6 + v258);
        uint64_t v271 = &v268[v269];
        v272 = &v270[v269];
        v273 = (const float *)*((void *)this + 11);
        float v274 = *v271;
        vDSP_Length v275 = *((unsigned int *)this + 18) - 1;
        vDSP_vmul(v268, 1, v273, 1, v270, 1, v275);
        vDSP_vmul(v271, 1, v273, 1, v272, 1, v275);
        float *v272 = v274 * v273[v275];
        long long v99 = v299;
      }
      else
      {
        long long v99 = v299;
        if (v255 && 2 * *((_DWORD *)this + 16)) {
          memmove(*(void **)(*a6 + v258), (*a5)[v258 / 8], 4 * (2 * *((_DWORD *)this + 16)));
        }
      }
      uint64_t v276 = *(void *)(v98 + 8) - *(void *)v98;
      if (!v276) {
        goto LABEL_275;
      }
      LODWORD(__B.realp) = 0;
      float v277 = *(float *)(*(void *)(*((void *)this + 4) + 120) + 4 * v259);
      *(float *)&__B.unsigned int realp = v277;
      uint64_t v278 = *((void *)this + 1);
      unsigned int v279 = *(float *)(v278 + 16);
      if (v279 != 1)
      {
        if (!v279)
        {
          if (*(float *)(v278 + 8) == (float)(int)v259) {
            float v280 = 1.0;
          }
          else {
            float v280 = 0.0;
          }
LABEL_267:
          *(float *)&__B.unsigned int realp = v280;
        }
        vDSP_vsmul(*(const float **)(*v99 + v258), 1, (const float *)&__B, *((float **)this + 149), 1, v276 >> 2);
        vDSP_vadd(*((const float **)this + 149), 1, *(const float **)v98, 1, *(float **)v98, 1, (uint64_t)(*(void *)(v98 + 8) - *(void *)v98) >> 2);
        uint64_t v281 = *(void *)(a7 + 8);
        int64_t v282 = v281 - *(void *)a7;
        if (v281 != *(void *)a7)
        {
          if (v256)
          {
            vDSP_vsmul((const float *)(*a5)[v258 / 8], 1, (const float *)&__B, *((float **)this + 149), 1, v282 >> 2);
            vDSP_vadd(*((const float **)this + 149), 1, *(const float **)a7, 1, *(float **)a7, 1, (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
          }
          else
          {
            char v283 = v255 ^ 1;
            if (v259) {
              char v283 = 1;
            }
            if ((v283 & 1) == 0) {
              memmove(*(void **)a7, **a5, v282);
            }
          }
        }
LABEL_275:
        ++v259;
        unint64_t v257 = *((unsigned int *)this + 19);
        v258 += 24;
        if (v259 >= v257) {
          goto LABEL_276;
        }
        continue;
      }
      break;
    }
    float v280 = v277 / *(float *)&__A.realp;
    goto LABEL_267;
  }
LABEL_276:
  float v284 = *v289;
  if (*v289 > 0.0 && v284 != 1.0)
  {
    *(float *)&__B.unsigned int realp = 1.0 / v284;
    if (v257)
    {
      uint64_t v286 = 0;
      unint64_t v287 = 0;
      do
      {
        vDSP_vsmul(*(const float **)(*v298 + v286), 1, (const float *)&__B, *(float **)(*v298 + v286), 1, (uint64_t)(*(void *)(*v298 + v286 + 8) - *(void *)(*v298 + v286)) >> 2);
        ++v287;
        v286 += 24;
      }
      while (v287 < *((unsigned int *)this + 19));
    }
    uint64_t v288 = *(void *)(v98 + 8) - *(void *)v98;
    if (v288) {
      vDSP_vsmul(*(const float **)v98, 1, (const float *)&__B, *(float **)v98, 1, v288 >> 2);
    }
  }
}

float MicIssueDetectorCorev1::calculateMeanEnergyInFreqRange(float **this, unsigned int a2, unsigned int a3, float a4, float a5, float a6, const float *a7)
{
  float __B = 1.0e-22;
  float __N_4 = -220.0;
  unsigned int v9 = a3 - a2;
  if (a3 <= a2)
  {
    float v11 = -220.0;
  }
  else
  {
    unsigned int __N = v9 + 1;
    vDSP_vsadd(&a7[a2], 1, &__B, this[143], 1, (int)(v9 + 1));
    vvlog10f(this[143], this[143], (const int *)&__N);
    vDSP_meanv(this[143], 1, &__N_4, (int)__N);
    float v11 = __N_4 * 10.0;
  }
  return (float)((float)(1.0 - a4) * v11) + (float)(a4 * a5);
}

uint64_t MicIssueDetectorCorev1::isMicBlocked(MicIssueDetectorCorev1 *this, unsigned int a2, float *a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(*((void *)this + 14) + 120);
  if (!v4) {
    return 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 24 * v4;
  LODWORD(v4) = 1;
  do
  {
    float v8 = a3[v5 / 4];
    if (!a4) {
      float v8 = -v8;
    }
    BOOL v9 = *(float *)(*(void *)(*((void *)this + 103) + v6) + 4 * a2) < *(float *)(*((void *)this + 121) + v5)
      && *(float *)(*(void *)(*((void *)this + 100) + v6) + 4 * a2) < *(float *)(*((void *)this + 124) + v5)
      && v8 > *(float *)(*((void *)this + 127) + v5);
    uint64_t v4 = v4 & v9;
    v6 += 24;
    v5 += 4;
  }
  while (v7 != v6);
  return v4;
}

float MicIssueDetectorCorev1::propagateStaticParameterChanges(MicIssueDetectorCorev1 *this, int32x2_t a2)
{
  *(float *)a2.i32 = *((float *)this + 14) / (float)*((unsigned int *)this + 17);
  int32x2_t v50 = a2;
  float v53 = *((float *)this + 15);
  uint64_t v3 = *((void *)this + 1);
  *((float *)this + 52) = expf(-1.0 / (float)((float)(*(float *)(v3 + 28) * 0.001) * v53));
  *((float *)this + 53) = expf(-1.0 / (float)(v53 * (float)(*(float *)(v3 + 32) * 0.001)));
  *((float *)this + 54) = expf(-1.0 / (float)(v53 * (float)(*(float *)(v3 + 36) * 0.001)));
  float32x2_t v4 = (float32x2_t)vdup_n_s32(0x3A83126Fu);
  *(uint32x2_t *)((char *)this + 164) = vcvt_u32_f32(vrndm_f32(vmul_n_f32(vmul_f32(*(float32x2_t *)(v3 + 40), v4), v53)));
  float v5 = exp(*(float *)(v3 + 20) * 0.115129255);
  *((float *)this + 65) = v5;
  float v6 = exp(*(float *)(v3 + 24) * 0.115129255);
  *((float *)this + 66) = v6;
  *((float *)this + 67) = expf(-1.0 / (float)(v53 * (float)(*(float *)(v3 + 72) * 0.001)));
  int32x2_t v9 = (int32x2_t)vcvt_u32_f32(vrndm_f32(vmul_n_f32(vmul_f32(*(float32x2_t *)(v3 + 76), v4), v53)));
  *((int32x2_t *)this + 24) = v9;
  float v7 = *(float *)(v3 + 84);
  float v8 = roundf(fabsf(*(float *)(v3 + 88) / *(float *)v50.i32));
  *(float *)v9.i32 = (float)*((unsigned int *)this + 16);
  if (v8 > *(float *)v9.i32) {
    float v8 = (float)*((unsigned int *)this + 16);
  }
  *((_DWORD *)this + 267) = (unint64_t)v8;
  unint64_t v10 = (unint64_t)v8;
  float v11 = roundf(fabsf(v7 / *(float *)v50.i32));
  if (v11 > (float)v10) {
    float v11 = (float)v10;
  }
  *((_DWORD *)this + 266) = (unint64_t)v11;
  uint64_t v12 = *((void *)this + 14);
  if (*(_DWORD *)(v12 + 120))
  {
    unint64_t v13 = 0;
    uint64_t v14 = *((void *)this + 115);
    uint64_t v15 = *((void *)this + 118);
    uint64_t v16 = *((void *)this + 109);
    uint64_t v17 = *((void *)this + 112);
    do
    {
      float v18 = roundf(fabsf(*(float *)(v14 + 4 * v13) / *(float *)v50.i32));
      if (v18 > (float)*((unsigned int *)this + 16)) {
        float v18 = (float)*((unsigned int *)this + 16);
      }
      *(_DWORD *)(v15 + 4 * v13) = (unint64_t)v18;
      unint64_t v19 = (unint64_t)v18;
      float v20 = roundf(fabsf(*(float *)(v16 + 4 * v13) / *(float *)v50.i32));
      if (v20 > (float)v19) {
        float v20 = (float)v19;
      }
      *(_DWORD *)(v17 + 4 * v13++) = (unint64_t)v20;
    }
    while (v13 < *(unsigned int *)(v12 + 120));
    *(float *)v9.i32 = (float)*((unsigned int *)this + 16);
  }
  float v21 = roundf(fabsf(*(float *)v12 / *(float *)v50.i32));
  float v22 = roundf(fabsf(*(float *)(v12 + 16) / *(float *)v50.i32));
  if (v22 > *(float *)v9.i32) {
    float v22 = *(float *)v9.i32;
  }
  unint64_t v23 = (unint64_t)v22;
  unint64_t v24 = (unint64_t)v22;
  float v25 = roundf(fabsf(*(float *)(v12 + 12) / *(float *)v50.i32));
  if (v25 > (float)v24) {
    float v25 = (float)v24;
  }
  *((_DWORD *)this + 36) = (unint64_t)v25;
  *((_DWORD *)this + 37) = v23;
  float32x2_t v26 = (float32x2_t)vdup_lane_s32(v50, 0);
  float32x2_t v27 = vrnda_f32(vabs_f32(vdiv_f32(*(float32x2_t *)(v12 + 4), v26)));
  int64x2_t v28 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v27, (float32x2_t)__PAIR64__((float)v24, v9.u32[0])), (int8x8_t)__PAIR64__((float)v24, v9.u32[0]), (int8x8_t)v27)));
  int32x2_t v29 = vmovn_s64(v28);
  float v30 = (float)v28.u32[0];
  if (v21 > v30) {
    float v21 = v30;
  }
  *((_DWORD *)this + 33) = (unint64_t)v21;
  float v31 = roundf(fabsf(*(float *)(v12 + 52) / *(float *)v50.i32));
  if (v31 > *(float *)v9.i32) {
    float v31 = *(float *)v9.i32;
  }
  unint64_t v32 = (unint64_t)v31;
  unint64_t v33 = (unint64_t)v31;
  float v34 = roundf(fabsf(*(float *)(v12 + 48) / *(float *)v50.i32));
  if (v34 > (float)v33) {
    float v34 = (float)v33;
  }
  *((int32x2_t *)this + 17) = v29;
  *((_DWORD *)this + 3std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = (unint64_t)v34;
  *((_DWORD *)this + 39) = v32;
  float32x2_t v35 = vrnda_f32(vabs_f32(vdiv_f32(*(float32x2_t *)(v12 + 92), v26)));
  float32x2_t v36 = (float32x2_t)vdup_lane_s32(v9, 0);
  *(int32x2_t *)((char *)this + 18DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v35, v36), (int8x8_t)v36, (int8x8_t)v35))));
  float v37 = roundf(fabsf(*(float *)(v12 + 100) / *(float *)v50.i32));
  if (v37 <= *(float *)v9.i32) {
    *(float *)v9.i32 = v37;
  }
  *((_DWORD *)this + 47) = (unint64_t)*(float *)v9.i32;
  __asm { FMOV            V11.2S, #-1.0 }
  float32x2_t v43 = vdiv_f32(_D11, vmul_n_f32(vmul_f32(*(float32x2_t *)(v12 + 72), v4), v53));
  float v48 = v43.f32[0];
  float v51 = expf(v43.f32[1]);
  *(float *)&uint64_t v44 = expf(v48);
  *((float *)&v44 + 1) = v51;
  *((void *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v44;
  float32x2_t v45 = vdiv_f32(_D11, vmul_n_f32(vmul_f32(*(float32x2_t *)(v12 + 36), v4), v53));
  float v49 = v45.f32[0];
  float v52 = expf(v45.f32[1]);
  *(float *)&uint64_t v46 = expf(v49);
  *((float *)&v46 + 1) = v52;
  *(void *)((char *)this + 236) = v46;
  *((float *)this + 55) = expf(-1.0 / (float)(v53 * (float)((float)*(unsigned int *)(v12 + 116) * 0.001)));
  *((float *)this + 5std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = floorf(v53 * (float)(*(float *)(v12 + 80) * 0.001));
  float result = floorf(v53 * (float)(*(float *)(v12 + 44) * 0.001));
  *((float *)this + 61) = result;
  return result;
}

void MicIssueDetectorCorev1::reset(MicIssueDetectorCorev1 *this)
{
  *(void *)((char *)this + 172) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 25) = 0;
  LODWORD(v2) = *((_DWORD *)this + 19);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *((unsigned int *)this + 18);
      float v6 = (char **)(*((void *)this + 37) + v3);
      float v7 = (char **)(*((void *)this + 34) + v3);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v6, v5, &__u);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v7, v5, &__u);
      ++v4;
      unint64_t v2 = *((unsigned int *)this + 19);
      v3 += 24;
    }
    while (v4 < v2);
  }
  if (*((_DWORD *)this + 20))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = *((unsigned int *)this + 17);
      float v11 = (char **)(*((void *)this + 40) + v8);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v11, v10, &__u);
      ++v9;
      v8 += 24;
    }
    while (v9 < *((unsigned int *)this + 20));
    LODWORD(v2) = *((_DWORD *)this + 19);
  }
  unint64_t v12 = v2;
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)this + 61, v2, &__u);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)this + 64, v12, &__u);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)this + 67, v12, &__u);
  unint64_t v13 = *((unsigned int *)this + 19);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 55, v13, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 76, v13, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 79, v13, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 130, v13, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 134, v13, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 137, v13, &__u);
  std::vector<unsigned int>::size_type v14 = *((unsigned int *)this + 19);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 680), v14, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 656), v14, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 704), v14, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 728), v14, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 752), v14, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 776), v14, &__u);
  if (*(_DWORD *)(*((void *)this + 14) + 120))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      unint64_t v17 = *((unsigned int *)this + 19);
      float v18 = (char **)(*((void *)this + 100) + v15);
      std::vector<unsigned int>::value_type __u = -1017380864;
      std::vector<float>::assign(v18, v17, &__u);
      ++v16;
      v15 += 24;
    }
    while (v16 < *(unsigned int *)(*((void *)this + 14) + 120));
  }
}

void std::vector<unsigned int>::assign(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  begiuint64_t n = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    std::vector<unsigned int>::pointer end = this->__end_;
    std::vector<unsigned int>::size_type v14 = end - begin;
    if (v14 >= __n) {
      std::vector<unsigned int>::size_type v15 = __n;
    }
    else {
      std::vector<unsigned int>::size_type v15 = end - begin;
    }
    if (v15)
    {
      unint64_t v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      unint64_t v17 = &end[__n - v14];
      std::vector<unsigned int>::size_type v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    std::vector<unsigned int>::size_type v8 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<unsigned int>::size_type v8 = __n;
    }
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, v9);
    std::vector<unsigned int>::pointer v10 = this->__end_;
    float v11 = &v10[__n];
    std::vector<unsigned int>::size_type v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

char *MicIssueDetectorCorev1::initialize(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4, float a5)
{
  float v7 = (std::__shared_weak_count *)a4[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 76) = a2;
  *(_DWORD *)(a1 + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = (float)((float)((a2 - 1) * a2) * 0.5);
  *(_DWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 2 * a3;
  *(_DWORD *)(a1 + 72) = a3 + 1;
  *(float *)(a1 + 56) = a5;
  *(float *)(a1 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = a5 / (float)a3;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    a2 = *(_DWORD *)(a1 + 76);
  }
  unint64_t v8 = a2;
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 296), a2);
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 272), v8);
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 392), v8);
  if (*(_DWORD *)(a1 + 76))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = *(unsigned int *)(a1 + 72);
      std::vector<unsigned int>::size_type v12 = (char **)(*(void *)(a1 + 296) + v9);
      unint64_t v13 = (char **)(*(void *)(a1 + 272) + v9);
      std::vector<unsigned int>::size_type v14 = (char **)(*(void *)(a1 + 392) + v9);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v12, v11, &__u);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v13, v11, &__u);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v14, v11, &__u);
      ++v10;
      v9 += 24;
    }
    while (v10 < *(unsigned int *)(a1 + 76));
  }
  unint64_t v15 = *(unsigned int *)(a1 + 80);
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 320), v15);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 344), v15);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 368), v15);
  if (*(_DWORD *)(a1 + 80))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      unint64_t v18 = *(unsigned int *)(a1 + 68);
      unint64_t v19 = (char **)(*(void *)(a1 + 320) + v16);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v19, v18, &__u);
      ++v17;
      v16 += 24;
    }
    while (v17 < *(unsigned int *)(a1 + 80));
  }
  std::vector<float>::resize(a1 + 1192, *(unsigned int *)(a1 + 68));
  unsigned int v20 = *(_DWORD *)(a1 + 76);
  if (v20)
  {
    int v21 = 0;
    int v22 = 0;
    do
    {
      unsigned int v23 = v22 + 1;
      if (v22 + 1 < v20)
      {
        int v24 = 0;
        uint64_t v25 = *(void *)(a1 + 344);
        uint64_t v26 = *(void *)(a1 + 368);
        do
        {
          *(_DWORD *)(v25 + 4 * (v21 + v24)) = v22;
          *(_DWORD *)(v26 + 4 * (v21 + v24)) = v22 + v24 + 1;
          unsigned int v20 = *(_DWORD *)(a1 + 76);
          ++v24;
        }
        while (v22 + v24 + 1 < v20);
        v21 += v24;
      }
      ++v22;
    }
    while (v23 < v20);
  }
  unint64_t v27 = *(unsigned int *)(a1 + 72);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 416), v27, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 88), v27, &__u);
  unint64_t v28 = *(unsigned int *)(a1 + 76);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)(a1 + 560), v28, &__u);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)(a1 + 488), v28, &__u);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)(a1 + 512), v28, &__u);
  std::vector<unsigned int>::value_type __u = -1017380864;
  std::vector<float>::assign((char **)(a1 + 536), v28, &__u);
  unint64_t v29 = *(unsigned int *)(a1 + 76);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 440), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 608), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 632), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 848), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 584), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 1040), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 1072), v29, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 1096), v29, &__u);
  std::vector<unsigned int>::size_type v30 = *(unsigned int *)(a1 + 76);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 680), v30, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 656), v30, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 704), v30, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 728), v30, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 752), v30, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 776), v30, &__u);
  uint64_t v31 = *a4;
  if (*a4)
  {
    uint64_t v32 = a4[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v33 = *(std::__shared_weak_count **)(a1 + 120);
    *(void *)(a1 + 112) = v31;
    *(void *)(a1 + 12DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v32;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  unint64_t v34 = *(unsigned int *)(*(void *)(a1 + 112) + 120);
  std::vector<float>::resize(a1 + 872, v34);
  std::vector<float>::resize(a1 + 920, v34);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 896), v34);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 944), v34);
  std::vector<float>::resize(a1 + 968, v34);
  std::vector<float>::resize(a1 + 992, v34);
  std::vector<float>::resize(a1 + 1016, v34);
  uint64_t v35 = *(void *)(a1 + 112);
  uint64_t v36 = *(unsigned int *)(v35 + 120);
  if (!v36) {
    goto LABEL_29;
  }
  memmove(*(void **)(a1 + 872), *(const void **)(v35 + 128), 4 * v36);
  uint64_t v37 = *(void *)(a1 + 112);
  uint64_t v38 = *(unsigned int *)(v37 + 120);
  if (!v38) {
    goto LABEL_29;
  }
  memmove(*(void **)(a1 + 920), (const void *)(*(void *)(v37 + 128) + 4 * v38), 4 * v38);
  uint64_t v39 = *(void *)(a1 + 112);
  uint64_t v40 = *(unsigned int *)(v39 + 120);
  if (!v40) {
    goto LABEL_29;
  }
  memmove(*(void **)(a1 + 968), (const void *)(*(void *)(v39 + 128) + 4 * (2 * v40)), 4 * v40);
  uint64_t v41 = *(void *)(a1 + 112);
  uint64_t v42 = *(unsigned int *)(v41 + 120);
  if (v42
    && (memmove(*(void **)(a1 + 992), (const void *)(*(void *)(v41 + 128) + 4 * (3 * v42)), 4 * v42),
        uint64_t v43 = *(void *)(a1 + 112),
        uint64_t v44 = *(unsigned int *)(v43 + 120),
        v44))
  {
    memmove(*(void **)(a1 + 1016), (const void *)(*(void *)(v43 + 128) + 4 * (4 * v44)), 4 * v44);
    unint64_t v45 = *(unsigned int *)(*(void *)(a1 + 112) + 120);
  }
  else
  {
LABEL_29:
    unint64_t v45 = 0;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 800), v45);
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 824), v45);
  LODWORD(v46) = *(_DWORD *)(*(void *)(a1 + 112) + 120);
  if (v46)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    do
    {
      unint64_t v49 = *(unsigned int *)(a1 + 76);
      int32x2_t v50 = (char **)(*(void *)(a1 + 800) + v47);
      std::vector<unsigned int>::value_type __u = -1017380864;
      std::vector<float>::assign(v50, v49, &__u);
      unint64_t v51 = *(unsigned int *)(a1 + 76);
      float v52 = (char **)(*(void *)(a1 + 824) + v47);
      std::vector<unsigned int>::value_type __u = 1065353216;
      std::vector<float>::assign(v52, v51, &__u);
      ++v48;
      unint64_t v46 = *(unsigned int *)(*(void *)(a1 + 112) + 120);
      v47 += 24;
    }
    while (v48 < v46);
  }
  unsigned int v53 = *(_DWORD *)(a1 + 72);
  if (v53 <= v46) {
    unint64_t v54 = v46;
  }
  else {
    unint64_t v54 = v53;
  }
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 1120), v54, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)(a1 + 1144), v54, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  return std::vector<float>::assign((char **)(a1 + 1168), v54, &__u);
}

void MicIssueDetectorCorev1::~MicIssueDetectorCorev1(MicIssueDetectorCorev1 *this)
{
  MicIssueDetectorCorev1::~MicIssueDetectorCorev1(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  void **v36;

  *(void *)this = &unk_1F14AA010;
  unint64_t v2 = (void *)*((void *)this + 149);
  if (v2)
  {
    *((void *)this + 15DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 146);
  if (v3)
  {
    *((void *)this + 147) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 143);
  if (v4)
  {
    *((void *)this + 144) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 140);
  if (v5)
  {
    *((void *)this + 141) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 137);
  if (v6)
  {
    *((void *)this + 13std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 134);
  if (v7)
  {
    *((void *)this + 135) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 130);
  if (v8)
  {
    *((void *)this + 131) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 127);
  if (v9)
  {
    *((void *)this + 12std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 124);
  if (v10)
  {
    *((void *)this + 125) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 121);
  if (v11)
  {
    *((void *)this + 122) = v11;
    operator delete(v11);
  }
  std::vector<unsigned int>::size_type v12 = (void *)*((void *)this + 118);
  if (v12)
  {
    *((void *)this + 119) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 115);
  if (v13)
  {
    *((void *)this + 116) = v13;
    operator delete(v13);
  }
  std::vector<unsigned int>::size_type v14 = (void *)*((void *)this + 112);
  if (v14)
  {
    *((void *)this + 113) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 109);
  if (v15)
  {
    *((void *)this + 11DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 106);
  if (v16)
  {
    *((void *)this + 107) = v16;
    operator delete(v16);
  }
  uint64_t v36 = (void **)((char *)this + 824);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  uint64_t v36 = (void **)((char *)this + 800);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  unint64_t v17 = (void *)*((void *)this + 97);
  if (v17)
  {
    *((void *)this + 9std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 94);
  if (v18)
  {
    *((void *)this + 95) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 91);
  if (v19)
  {
    *((void *)this + 92) = v19;
    operator delete(v19);
  }
  unsigned int v20 = (void *)*((void *)this + 88);
  if (v20)
  {
    *((void *)this + 89) = v20;
    operator delete(v20);
  }
  int v21 = (void *)*((void *)this + 85);
  if (v21)
  {
    *((void *)this + 86) = v21;
    operator delete(v21);
  }
  int v22 = (void *)*((void *)this + 82);
  if (v22)
  {
    *((void *)this + 83) = v22;
    operator delete(v22);
  }
  unsigned int v23 = (void *)*((void *)this + 79);
  if (v23)
  {
    *((void *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v23;
    operator delete(v23);
  }
  int v24 = (void *)*((void *)this + 76);
  if (v24)
  {
    *((void *)this + 77) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 73);
  if (v25)
  {
    *((void *)this + 74) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 70);
  if (v26)
  {
    *((void *)this + 71) = v26;
    operator delete(v26);
  }
  unint64_t v27 = (void *)*((void *)this + 67);
  if (v27)
  {
    *((void *)this + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v27;
    operator delete(v27);
  }
  unint64_t v28 = (void *)*((void *)this + 64);
  if (v28)
  {
    *((void *)this + 65) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)this + 61);
  if (v29)
  {
    *((void *)this + 62) = v29;
    operator delete(v29);
  }
  std::vector<unsigned int>::size_type v30 = (void *)*((void *)this + 58);
  if (v30)
  {
    *((void *)this + 59) = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)*((void *)this + 55);
  if (v31)
  {
    *((void *)this + 56) = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)*((void *)this + 52);
  if (v32)
  {
    *((void *)this + 53) = v32;
    operator delete(v32);
  }
  uint64_t v36 = (void **)((char *)this + 392);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  unint64_t v33 = (void *)*((void *)this + 46);
  if (v33)
  {
    *((void *)this + 47) = v33;
    operator delete(v33);
  }
  unint64_t v34 = (void *)*((void *)this + 43);
  if (v34)
  {
    *((void *)this + 44) = v34;
    operator delete(v34);
  }
  uint64_t v36 = (void **)((char *)this + 320);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  uint64_t v36 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  uint64_t v36 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  uint64_t v35 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  MicIssueDetectorCore::~MicIssueDetectorCore(this);
}

void vp::NotificationHandler::create()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB33BF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(std::optional<unsigned long long>)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZN2vp19NotificationHandler10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1174405120;
  uint64_t v3 = ___ZN2vp19NotificationHandler10initializeEv_block_invoke_2;
  unint64_t v4 = &__block_descriptor_tmp_258;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  float v6 = v1;
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v3((uint64_t)v2);
  }
  else
  {
    ___ZN2vp19NotificationHandler10initializeEv_block_invoke_2((uint64_t)v2);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BB33C160(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::exception a16, long long buf, long long a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 2)
  {
    __cxa_get_exception_ptr(a1);
    a16.__vftable = (std::exception_vtbl *)(MEMORY[0x1E4FBA510] + 16);
    __cxa_begin_catch(a1);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope)
    {
      unint64_t v19 = *(NSObject **)VPLogScope(void)::scope;
      if (!*(void *)VPLogScope(void)::scope)
      {
LABEL_16:
        std::exception::~exception(&a16);
        __cxa_end_catch();
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = std::exception::what(&a16);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "vpNotificationHandler.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 23;
      WORD1(a1std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 2080;
      *(void *)((char *)&a18 + 4) = v21;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard library exception caught: %s", (uint8_t *)&buf, 0x1Cu);
    }
    goto LABEL_16;
  }
  __cxa_begin_catch(a1);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  if (VPLogScope(void)::scope)
  {
    unsigned int v20 = *(NSObject **)VPLogScope(void)::scope;
    if (!*(void *)VPLogScope(void)::scope)
    {
LABEL_20:
      __cxa_end_catch();
LABEL_22:
      JUMPOUT(0x1BB33C128);
    }
  }
  else
  {
    unsigned int v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "vpNotificationHandler.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 25;
    _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exceptiton caught", (uint8_t *)&buf, 0x12u);
  }
  goto LABEL_20;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN2vp19NotificationHandlerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN2vp19NotificationHandlerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN2vp19NotificationHandler10initializeEv_block_invoke_2(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2) {
    return;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return;
  }
  unint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    std::mutex::lock((std::mutex *)(v5 + 88));
    if (!*(unsigned char *)(v5 + 80))
    {
LABEL_19:
      std::mutex::unlock((std::mutex *)(v5 + 88));
      goto LABEL_20;
    }
    uint64_t state64 = 0;
    if (!notify_get_state(*(_DWORD *)(v5 + 16), &state64))
    {
      uint64_t v7 = state64 & 0xFFFFFFFFFFFFFF00;
      uint64_t v8 = state64;
      uint64_t v9 = 1;
LABEL_17:
      *(void *)std::string buf = v8 | v7;
      *(void *)&buf[8] = v9;
      uint64_t v10 = *(void *)(v5 + 72);
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 48))(v10, buf);
      goto LABEL_19;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope)
    {
      float v6 = *(NSObject **)VPLogScope(void)::scope;
      if (!*(void *)VPLogScope(void)::scope)
      {
LABEL_16:
        uint64_t v7 = 0;
        uint64_t v9 = 0;
        uint64_t v8 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      float v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&buf[4] = "vpNotificationHandler.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 81;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d notify_get_state() failed", buf, 0x12u);
    }
    goto LABEL_16;
  }
LABEL_20:

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1BB33C54C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

vp::NotificationHandler *std::unique_ptr<vp::NotificationHandler>::reset[abi:ne180100](vp::NotificationHandler **a1)
{
  float result = *a1;
  *a1 = 0;
  if (result)
  {
    vp::NotificationHandler::~NotificationHandler(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void vp::NotificationHandler::~NotificationHandler(vp::NotificationHandler *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)((char *)this + 88);
  std::mutex::lock((std::mutex *)((char *)this + 88));
  *((unsigned char *)this + 8DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  std::mutex::unlock(v2);
  if (notify_cancel(*((_DWORD *)this + 4)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope)
    {
      uint64_t v3 = *(NSObject **)VPLogScope(void)::scope;
      if (!*(void *)VPLogScope(void)::scope) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      float v6 = "vpNotificationHandler.cpp";
      __int16 v7 = 1024;
      int v8 = 48;
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d notify_cancel() failed", (uint8_t *)&v5, 0x12u);
    }
  }
LABEL_10:
  std::mutex::~mutex(v2);
  std::__function::__value_func<void ()(std::optional<unsigned long long>)>::~__value_func[abi:ne180100]((void *)this + 6);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BB33C714(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

vp::NotificationHandler *std::__shared_ptr_pointer<vp::NotificationHandler *,std::shared_ptr<vp::NotificationHandler>::__shared_ptr_default_delete<vp::NotificationHandler,vp::NotificationHandler>,std::allocator<vp::NotificationHandler>>::__on_zero_shared(uint64_t a1)
{
  float result = *(vp::NotificationHandler **)(a1 + 24);
  if (result)
  {
    vp::NotificationHandler::~NotificationHandler(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_pointer<vp::NotificationHandler *,std::shared_ptr<vp::NotificationHandler>::__shared_ptr_default_delete<vp::NotificationHandler,vp::NotificationHandler>,std::allocator<vp::NotificationHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<unsigned int>::pointer end = this->__end_;
  uint64_t value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<unsigned int>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      std::vector<unsigned int>::size_type v12 = (char *)operator new(v11);
    }
    else {
      std::vector<unsigned int>::size_type v12 = 0;
    }
    std::vector<unsigned int>::size_type v14 = &v12[v8];
    unint64_t v15 = &v12[v8 + v4];
    uint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begiuint64_t n = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--std::vector<unsigned int>::size_type v14 = v18;
      }
      while (end != begin);
      std::vector<unsigned int>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void AUSM::SnapCoordinates::getSnappedCoordinates(uint64_t a1, AUSM::ExclusionZone *a2, AUSM::ExclusionZone *a3, float32x4_t a4, float a5)
{
  float32x4_t v37 = a4;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  float v8 = 1.0;
  if (a5 <= 1.0) {
    float v8 = a5;
  }
  if (a5 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  unint64_t v10 = *(_DWORD **)(a1 + 8);
  if (*v10 == 0x10000)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10[1]);
    v12.i16[0] = vaddlv_u8(v12);
    unsigned __int32 v11 = v12.i32[0];
  }
  else if (*v10)
  {
    unsigned __int32 v11 = (unsigned __int16)*v10;
  }
  else
  {
    unsigned __int32 v11 = v10[2];
  }
  vDSP_Length v13 = v11;
  MEMORY[0x1F4188790](a1);
  unint64_t v15 = (float *)((char *)v37.f32 - v14);
  if (v16)
  {
    uint64_t v17 = 0;
    do
    {
      unsigned int v18 = v10[5 * v17 + 3];
      float v19 = 0.0;
      if (v18 > 0x3E || ((0x4000002000000010uLL >> v18) & 1) == 0)
      {
        if (a2 == a3)
        {
LABEL_22:
          float32x4_t v25 = vsubq_f32(v37, *(float32x4_t *)(*(void *)(a1 + 32) + 16 * v17));
          float32x4_t v26 = vmulq_f32(v25, v25);
          float v27 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
          float v28 = 1.0 / v27;
          if (v27 > 1000.0) {
            float v28 = 0.001;
          }
          if (v27 >= 0.0001) {
            float v19 = v28;
          }
          else {
            float v19 = 10000.0;
          }
        }
        else
        {
          int v21 = (float *)&v10[5 * v17];
          float v22 = v21[5];
          float v23 = v21[6];
          int v24 = a2;
          while (!AUSM::ExclusionZone::isInExclusionZone(v24, v22, v23, (BOOL)v21))
          {
            int v24 = (AUSM::ExclusionZone *)((char *)v24 + 28);
            if (v24 == a3) {
              goto LABEL_22;
            }
          }
        }
      }
      v15[v17] = v19;
      if (v9 != 1.0 && *(float *)&v10[5 * v17 + 6] != 0.0) {
        v15[v17] = v9 * v19;
      }
      ++v17;
    }
    while (v17 != v13);
  }
  float v29 = cblas_snrm2(v13, v15, 1);
  cblas_sscal(v13, 1.0 / v29, v15, 1);
  int v30 = 3;
  do
  {
    vDSP_vsq(v15, 1, v15, 1, v13);
    --v30;
  }
  while (v30);
  float v31 = cblas_snrm2(v13, v15, 1);
  cblas_sscal(v13, 1.0 / v31, v15, 1);
  if (v13)
  {
    uint64_t v32 = *(float32x4_t **)(a1 + 32);
    float32x4_t v33 = 0uLL;
    do
    {
      float v34 = *v15++;
      float v35 = v34;
      float32x4_t v36 = *v32++;
      float32x4_t v33 = vmlaq_n_f32(v33, v36, v35);
      --v13;
    }
    while (v13);
  }
}

BOOL AUSM::ExclusionZone::isInExclusionZone@<W0>(AUSM::ExclusionZone *this@<X0>, float a2@<S0>, float a3@<S1>, BOOL a4@<W8>)
{
  if (*(_DWORD *)this == 1)
  {
    __float2 v16 = __sincosf_stret(a2 * 0.017453);
    __float2 v17 = __sincosf_stret(a3 * 0.017453);
    float v18 = v16.__sinval * v17.__cosval;
    float v19 = v16.__cosval * v17.__cosval;
    float v20 = *((float *)this + 1);
    float v21 = *((float *)this + 2);
    BOOL v22 = (float)(v16.__sinval * v17.__cosval) >= (float)(v20 + -0.000001);
    if ((float)(v16.__sinval * v17.__cosval) <= (float)(v21 + 0.000001)) {
      BOOL v22 = 1;
    }
    BOOL v23 = v18 >= (float)(v20 + -0.000001);
    if (v18 > (float)(v21 + 0.000001)) {
      BOOL v23 = 0;
    }
    if (v20 <= v21) {
      BOOL v24 = v23;
    }
    else {
      BOOL v24 = v22;
    }
    float v25 = *((float *)this + 3);
    float v26 = *((float *)this + 4);
    BOOL v10 = v19 >= (float)(v25 + -0.000001);
    if (v19 <= (float)(v26 + 0.000001)) {
      BOOL v10 = 1;
    }
    BOOL v27 = v19 >= (float)(v25 + -0.000001);
    if (v19 > (float)(v26 + 0.000001)) {
      BOOL v27 = 0;
    }
    if (v25 <= v26) {
      BOOL v10 = v27;
    }
    float v28 = *((float *)this + 5);
    float v29 = *((float *)this + 6);
    BOOL v14 = v17.__sinval >= (float)(v28 + -0.000001);
    if (v17.__sinval <= (float)(v29 + 0.000001)) {
      BOOL v14 = 1;
    }
    BOOL v30 = v17.__sinval >= (float)(v28 + -0.000001);
    if (v17.__sinval > (float)(v29 + 0.000001)) {
      BOOL v30 = 0;
    }
    if (v28 <= v29) {
      BOOL v14 = v30;
    }
    if (!v24) {
      return 0;
    }
    return v10 && v14;
  }
  if (!*(_DWORD *)this)
  {
    float v8 = *((float *)this + 3);
    float v9 = *((float *)this + 4);
    BOOL v10 = (float)(v8 + -0.000001) <= a2;
    if ((float)(v9 + 0.000001) >= a2) {
      BOOL v10 = 1;
    }
    BOOL v11 = (float)(v8 + -0.000001) <= a2;
    if ((float)(v9 + 0.000001) < a2) {
      BOOL v11 = 0;
    }
    if (v8 <= v9) {
      BOOL v10 = v11;
    }
    float v12 = *((float *)this + 1);
    float v13 = *((float *)this + 2);
    BOOL v14 = (float)(v12 + -0.000001) <= a3;
    if ((float)(v13 + 0.000001) >= a3) {
      BOOL v14 = 1;
    }
    BOOL v15 = (float)(v12 + -0.000001) <= a3;
    if ((float)(v13 + 0.000001) < a3) {
      BOOL v15 = 0;
    }
    if (v12 <= v13) {
      BOOL v14 = v15;
    }
    return v10 && v14;
  }
  return a4;
}

float AUSM::SnapCoordinates::getSnappedCoordinates(uint64_t a1, AUSM::ExclusionZone *a2, AUSM::ExclusionZone *a3, float a4, float a5)
{
  float v8 = a5 * 0.017453;
  __float2 v10 = __sincosf_stret(a4 * 0.017453);
  *(float *)&uint64_t v9 = v10.__cosval;
  v18.i64[0] = v9;
  __float2 v11 = __sincosf_stret(v8);
  float32x4_t v12 = v18;
  v12.i32[1] = LODWORD(v10.__sinval);
  *(float32x2_t *)v12.f32 = vmul_n_f32(*(float32x2_t *)v12.f32, v11.__cosval);
  v12.f32[2] = -v11.__sinval;
  AUSM::SnapCoordinates::getSnappedCoordinates(a1, a2, a3, v12, 1.0);
  long long v19 = v13;
  float v14 = *((float *)&v13 + 1);
  float v15 = atan2f(*((float *)&v13 + 1), *(float *)&v13) * 57.296;
  float v16 = hypotf(*(float *)&v19, v14);
  atan2f(-*((float *)&v19 + 2), v16);
  return v15;
}

float AUSM::SnapCoordinates::getExcludedCoordinates@<S0>(uint64_t a1@<X0>, AUSM::ExclusionZone **a2@<X1>, BOOL a3@<W8>, float a4@<S0>, float a5@<S1>)
{
  __int16 v7 = *a2;
  float v8 = a2[1];
  if (*a2 != v8)
  {
    __float2 v11 = *a2;
    while (!AUSM::ExclusionZone::isInExclusionZone(v11, a4, a5, a3))
    {
      __float2 v11 = (AUSM::ExclusionZone *)((char *)v11 + 28);
      if (v11 == v8) {
        return a4;
      }
    }
    __float2 v13 = __sincosf_stret(a4 * 0.017453);
    *(float *)&uint64_t v12 = v13.__cosval;
    v37.i64[0] = v12;
    __float2 v14 = __sincosf_stret(a5 * 0.017453);
    float32x4_t v15 = v37;
    v15.i32[1] = LODWORD(v13.__sinval);
    *(float32x2_t *)v15.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, v14.__cosval);
    v15.f32[2] = -v14.__sinval;
    float32x4_t v39 = v15;
    AUSM::SnapCoordinates::getSnappedCoordinates(a1, v7, v8, v15, 0.5);
    float32x4_t v38 = v16;
    float32x4_t v18 = a2;
    __float2 v17 = (float *)*a2;
    float v19 = 0.0;
    uint64_t v20 = v18[1] - (AUSM::ExclusionZone *)v17;
    if (v20)
    {
      uint64_t v21 = v20 >> 2;
      unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * v21;
      unsigned int v23 = 1;
      do
      {
        if (AUSM::ExclusionZone::isInExclusionZone((AUSM::ExclusionZone *)v17, a4, a5, v21))
        {
          *(float *)&uint64_t v21 = *v17;
          if (!*(_DWORD *)v17)
          {
            float v25 = v17[3];
            float v24 = v17[4];
            float v26 = v17[2];
            float v27 = a4 + 360.0;
            if (a4 >= 0.0) {
              float v27 = a4;
            }
            if (v25 <= v24)
            {
              float v28 = v17[4];
            }
            else
            {
              a4 = v27;
              float v28 = v24 + 360.0;
            }
            float v29 = (float)(v25 + v28) * 0.5;
            float v30 = (float)(v26 + v17[1]) * 0.5;
            float v31 = sqrtf((float)((float)(v26 - v30) * (float)(v26 - v30)) + (float)((float)(v28 - v29)
                                                                                 * (float)(v28 - v29)));
            float v19 = 0.0;
            if (v31 != 0.0) {
              float v19 = 1.0
            }
                  - (float)(sqrtf((float)((float)(a5 - v30) * (float)(a5 - v30))+ (float)((float)(a4 - v29) * (float)(a4 - v29)))/ v31);
          }
        }
        v17 += 7;
      }
      while (v22 > v23++);
    }
    if (v19 <= 1.0) {
      float v33 = v19;
    }
    else {
      float v33 = 1.0;
    }
    if (v19 >= 0.0) {
      float v34 = v33;
    }
    else {
      float v34 = 0.0;
    }
    float32x4_t v40 = vmlaq_n_f32(vmulq_n_f32(v39, 1.0 - v34), v38, v34);
    a4 = atan2f(v40.f32[1], v40.f32[0]) * 57.296;
    float v35 = hypotf(v40.f32[0], v40.f32[1]);
    atan2f(-v40.f32[2], v35);
  }
  return a4;
}

void BeamformerBase::SetParamDefaults(BeamformerBase *this)
{
  *((_OWORD *)this + 4) = xmmword_1BB872720;
  *((void *)this + 1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0;
  *(_OWORD *)((char *)this + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = xmmword_1BB879B90;
  *((_WORD *)this + 52) = 0;
  *(void *)((char *)this + 10std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
  *(void *)((char *)this + 116) = 1065353216;
  *((_DWORD *)this + 31) = 0;
  *((_WORD *)this + 64) = 257;
  *((_DWORD *)this + 33) = 0;
  *((void *)this + 17) = 0xC2700000C0400000;
  *((_DWORD *)this + 36) = -1032847360;
  *((_WORD *)this + 74) = 0;
  *((_DWORD *)this + 3std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
  *(void *)((char *)this + 156) = 0x40C0000043FA0000;
  *((_DWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 172) = xmmword_1BB879BA0;
  *(_OWORD *)((char *)this + 18std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = xmmword_1BB879BB0;
  *(_OWORD *)((char *)this + 204) = xmmword_1BB879BC0;
  *(void *)((char *)this + 22DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0x3F4000003E800000;
  *(_OWORD *)((char *)this + 22std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  uint64_t v2 = (char *)this + 228;
  *((_WORD *)this + 84) = 256;
  *(_OWORD *)((char *)this + std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100]((void *)this + 516) = 0u;
  *(_OWORD *)((char *)this + 532) = 0u;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 50DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 452) = 0u;
  *(_OWORD *)((char *)this + 46std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 42DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 436) = 0u;
  *(_OWORD *)((char *)this + 38std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 404) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 34DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 30std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 26DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  memset_pattern16((char *)this + 552, &unk_1BB875EE0, 0x480uLL);
  memset_pattern16(v2 + 1476, &unk_1BB873A60, 0x480uLL);
  for (uint64_t i = 0; i != 1152; i += 16)
  {
    *(_OWORD *)((char *)this + i + 2856) = 0uLL;
    *(_OWORD *)((char *)this + i + 400std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0uLL;
  }
  int v4 = 0;
  std::vector<float>::resize((uint64_t)this + 19152, 0x120uLL, &v4);

  BeamformerBase::UpdateLimitWindBoostParameters(this);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void BeamformerBase::UpdateLimitWindBoostParameters(BeamformerBase *this)
{
  uint64_t v2 = (BeamformerBase *)((char *)this + 19200);
  uint64_t v3 = *((void *)this + 2400);
  unint64_t v4 = *((void *)this + 2401) - v3;
  if (!v4) {
    goto LABEL_25;
  }
  *(float *)uint64_t v3 = (float)*((unsigned int *)this + 38);
  if (v4 <= 4) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 4) = *((_DWORD *)this + 39);
  if (v4 <= 8) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *((_DWORD *)this + 40);
  if (v4 <= 0xC) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 12) = *((_DWORD *)this + 41);
  if (v4 <= 0x10) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 16) = *((_DWORD *)this + 43);
  if (v4 <= 0x14) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 2DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 44);
  if (v4 <= 0x18) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 24) = *((_DWORD *)this + 45);
  if (v4 <= 0x1C) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *((_DWORD *)this + 46);
  if (v4 <= 0x20) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 32) = *((_DWORD *)this + 47);
  if (v4 <= 0x24) {
    goto LABEL_25;
  }
  *(_DWORD *)(v3 + 36) = *((_DWORD *)this + 48);
  if (v4 <= 0x28 {
    || (*(_DWORD *)(v3 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 49), v4 <= 0x2C)
  }
    || (*(_DWORD *)(v3 + 44) = *((_DWORD *)this + 50), v4 <= 0x30)
    || (*(_DWORD *)(v3 + 4std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *((_DWORD *)this + 51), v4 <= 0x34)
    || (*(_DWORD *)(v3 + 52) = *((_DWORD *)this + 52), v4 <= 0x38)
    || (*(_DWORD *)(v3 + 56) = *((_DWORD *)this + 53), v4 <= 0x3C)
    || (*(_DWORD *)(v3 + 6DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 54), v4 <= 0x40)
    || (*(_DWORD *)(v3 + 64) = *((_DWORD *)this + 55), v4 <= 0x44))
  {
LABEL_25:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  *(_DWORD *)(v3 + 6std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = *((_DWORD *)this + 56);
  if (*((unsigned char *)this + 16) && *((unsigned char *)this + 19304))
  {
    LimitWindBoost::propagateParameterChanges(v2);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  float v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  __int16 v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      __float2 v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float32x4_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v6, v14);
    }
    else {
      float32x4_t v15 = 0;
    }
    float32x4_t v18 = &v15[4 * v12];
    float v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = &v15[4 * v14];
    unsigned int v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

const UInt8 *BeamformerBase::ReadVectorFromDictionary(BeamformerBase *this, CFDictionaryRef theDict, const __CFString *key)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, key);
  unsigned int Length = CFDataGetLength(Value);
  unsigned int v6 = Length >> 2;
  int v11 = 0;
  std::vector<float>::vector(this, Length >> 2, &v11);
  float result = CFDataGetBytePtr(Value);
  if (Length >= 4)
  {
    float v8 = *(_DWORD **)this;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6;
    }
    do
    {
      unsigned int v10 = *(_DWORD *)result;
      result += 4;
      *v8++ = bswap32(v10);
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_1BB33D52C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void BeamformerBase::ProcessBufferLists(BeamformerBase *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7)
{
  if (!*((unsigned char *)this + 16) || !*((unsigned char *)this + 17)) {
    return;
  }
  unsigned int v11 = *((_DWORD *)this + 8);
  double v12 = (float)v11;
  double v13 = *((double *)this + 3);
  int32x2_t v14 = (int32x2_t)vcvt_u32_f32(vrnda_f32(vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 88)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13 * 0.5), 0)), v12))));
  *(int32x2_t *)((char *)this + 36) = v14;
  *(float *)&double v12 = *((float *)this + 39) / (v13 * 0.5) * v12;
  *((float *)this + 13) = roundf(*(float *)&v12);
  *((_DWORD *)this + 11) = vsub_s32(vdup_lane_s32(v14, 1), v14).u32[0] + 1;
  *(float *)&double v12 = v13 / (double)v11;
  *((float *)this + 12) = expf(-1.0 / (float)(*((float *)this + 24) * *(float *)&v12));
  *((float *)this + 14) = __exp10f(*((float *)this + 40) / 20.0);
  *((float *)this + 15) = __exp10f(*((float *)this + 41) / 20.0);
  BeamformerBase::UpdateLimitWindBoostParameters(this);
  switch(*((_DWORD *)this + 17))
  {
    case 0:
      *((_DWORD *)this + 27) = 0;
      if (*((_DWORD *)this + 3))
      {
        unint64_t v19 = 0;
        uint64_t v20 = this;
        do
        {
          (*(void (**)(BeamformerBase *, const AudioBufferList *, uint64_t, unint64_t, void))(*(void *)this + 80))(this, a2, (uint64_t)v20 + 12072, v19, 0);
          bzero(*((void **)v20 + 645), *((void *)v20 + 646) - *((void *)v20 + 645));
          ++v19;
          uint64_t v20 = (BeamformerBase *)((char *)v20 + 24);
        }
        while (v19 < *((unsigned int *)this + 3));
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 18984, *((char **)this + 1509), *((void *)this + 1510), (uint64_t)(*((void *)this + 1510) - *((void *)this + 1509)) >> 2);
      bzero(*((void **)this + 2376), *((void *)this + 2377) - *((void *)this + 2376));
      goto LABEL_77;
    case 1:
    case 5:
      int v15 = *((_DWORD *)this + 19);
      if (v15)
      {
        if (v15 == 1)
        {
          if (*((_DWORD *)this + 3))
          {
            unint64_t v30 = 0;
            float v31 = (char *)this + 5160;
            uint64_t v32 = (char *)this + 12072;
            do
            {
              (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, char *, unint64_t, void))(*(void *)this + 112))(this, a2, v32, v31, v30++, *((unsigned int *)this + 18));
              v31 += 24;
              v32 += 24;
            }
            while (v30 < *((unsigned int *)this + 3));
          }
        }
        else if (v15 == 2 && *((_DWORD *)this + 3))
        {
          unint64_t v16 = 0;
          __float2 v17 = (char *)this + 5160;
          float32x4_t v18 = (char *)this + 12072;
          do
          {
            (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, char *, unint64_t, void))(*(void *)this + 120))(this, a2, v18, v17, v16++, *((unsigned int *)this + 18));
            v17 += 24;
            v18 += 24;
          }
          while (v16 < *((unsigned int *)this + 3));
        }
      }
      else if (*((_DWORD *)this + 3))
      {
        unint64_t v27 = 0;
        float v28 = (char *)this + 5160;
        float v29 = (char *)this + 12072;
        do
        {
          (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, unint64_t, void))(*(void *)this + 80))(this, a2, v29, v27, 0);
          (*(void (**)(BeamformerBase *, char *, char *, unint64_t, void))(*(void *)this + 104))(this, v29, v28, v27++, *((unsigned int *)this + 18));
          v28 += 24;
          v29 += 24;
        }
        while (v27 < *((unsigned int *)this + 3));
      }
      if (*((unsigned char *)this + 169))
      {
        (*(void (**)(BeamformerBase *))(*(void *)this + 136))(this);
        unsigned int v33 = *((_DWORD *)this + 27);
      }
      else
      {
        unsigned int v33 = *((_DWORD *)this + 28);
        *((_DWORD *)this + 27) = v33;
      }
      float v34 = (char **)((char *)this + 24 * v33 + 12072);
      if ((char **)((char *)this + 18984) != v34)
      {
        uint64_t v35 = *((void *)this + 3 * v33 + 1510);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 18984, *v34, v35, (v35 - (uint64_t)*v34) >> 2);
      }
      if (*((unsigned char *)this + 168)) {
        (*(void (**)(BeamformerBase *, char *, char *))(*(void *)this + 88))(this, (char *)this + 24 * *((unsigned int *)this + 28) + 12072, (char *)this + 18984);
      }
      if (a3)
      {
        uint64_t v36 = *((unsigned int *)this + 27);
        if (*((unsigned char *)this + 168)) {
          (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, uint64_t, void, uint64_t))(*(void *)this + 96))(this, a3, (char *)this + 19008, v36, *((unsigned int *)this + 28), 1);
        }
        else {
          (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, uint64_t, uint64_t))(*(void *)this + 80))(this, a3, (char *)this + 19008, v36, 1);
        }
        float v37 = (*(float (**)(BeamformerBase *, char *))(*(void *)this + 152))(this, (char *)this + 18984);
        float v38 = (*(float (**)(BeamformerBase *, char *))(*(void *)this + 152))(this, (char *)this + 19008);
        if (v38 <= *((float *)this + 35) || v37 <= *((float *)this + 36))
        {
          *((unsigned char *)this + 14std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 0;
        }
        else if ((float)(v38 - v37) > *((float *)this + 34))
        {
          *((unsigned char *)this + 14std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = 1;
          if (*((unsigned char *)this + 129))
          {
            unsigned int v39 = *((_DWORD *)this + 33);
            *((_DWORD *)this + 27) = v39;
            float32x4_t v40 = (char **)((char *)this + 24 * v39 + 12072);
            if ((char **)((char *)this + 18984) != v40)
            {
              uint64_t v41 = *((void *)this + 3 * v39 + 1510);
              std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 18984, *v40, v41, (v41 - (uint64_t)*v40) >> 2);
            }
            if (*((unsigned char *)this + 168))
            {
              (*(void (**)(BeamformerBase *, char *, char *))(*(void *)this + 88))(this, (char *)this + 24 * *((unsigned int *)this + 28) + 12072, (char *)this + 18984);
              (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, void, void, uint64_t))(*(void *)this + 96))(this, a3, (char *)this + 19008, *((unsigned int *)this + 27), *((unsigned int *)this + 28), 1);
            }
            else
            {
              (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, void, uint64_t))(*(void *)this + 80))(this, a3, (char *)this + 19008, *((unsigned int *)this + 27), 1);
            }
          }
        }
      }
      int v42 = *((_DWORD *)this + 27);
      if (v42 != *((_DWORD *)this + 28)) {
        *((_DWORD *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v42;
      }
      if (*((unsigned char *)this + 128)) {
        (*(void (**)(BeamformerBase *))(*(void *)this + 128))(this);
      }
      if (*((_DWORD *)this + 17) == 5) {
        goto LABEL_61;
      }
      goto LABEL_77;
    case 2:
      *((_DWORD *)this + 27) = *((_DWORD *)this + 20);
      uint64_t v21 = (char *)this + 18984;
      if (*((unsigned char *)this + 168))
      {
        (*(void (**)(BeamformerBase *, const AudioBufferList *, char *))(*(void *)this + 96))(this, a2, v21);
        if (!a3) {
          goto LABEL_66;
        }
      }
      else
      {
        (*(void (**)(BeamformerBase *, const AudioBufferList *, char *))(*(void *)this + 80))(this, a2, v21);
        if (!a3) {
          goto LABEL_66;
        }
      }
      uint64_t v43 = (char *)this + 19008;
      uint64_t v44 = *((unsigned int *)this + 27);
      if (*((unsigned char *)this + 168)) {
        (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, uint64_t, void, uint64_t))(*(void *)this + 96))(this, a3, v43, v44, *((unsigned int *)this + 28), 1);
      }
      else {
        (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, uint64_t, uint64_t))(*(void *)this + 80))(this, a3, v43, v44, 1);
      }
LABEL_66:
      if (*((_DWORD *)this + 3))
      {
        unint64_t v45 = 0;
        uint64_t v46 = 6912;
        uint64_t v47 = this;
        do
        {
          if (v45 == *((_DWORD *)this + 27))
          {
            if (v46) {
              std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v47 + 12072, *((char **)this + 2373), *((void *)this + 2374), (uint64_t)(*((void *)this + 2374) - *((void *)this + 2373)) >> 2);
            }
          }
          else
          {
            bzero(*((void **)v47 + 1509), *((void *)v47 + 1510) - *((void *)v47 + 1509));
          }
          bzero(*((void **)v47 + 645), *((void *)v47 + 646) - *((void *)v47 + 645));
          ++v45;
          v46 -= 24;
          uint64_t v47 = (BeamformerBase *)((char *)v47 + 24);
        }
        while (v45 < *((unsigned int *)this + 3));
      }
      int v48 = *((_DWORD *)this + 27);
      if (v48 != *((_DWORD *)this + 28)) {
        *((_DWORD *)this + 2std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v48;
      }
      if (*((unsigned char *)this + 128)) {
        (*(void (**)(BeamformerBase *))(*(void *)this + 128))(this);
      }
LABEL_77:
      if (*((unsigned char *)this + 548))
      {
        if (!*((unsigned char *)this + 105) || *((_DWORD *)this + 17) == 2) {
          goto LABEL_92;
        }
        float __N_4 = 2.2204e-16;
        int __N = *((_DWORD *)this + 8) + 1;
        signed int mNumberBuffers = a2->mNumberBuffers;
        vDSP_vclr(*((float **)this + 2391), 1, __N);
        if (a2->mNumberBuffers)
        {
          unint64_t v50 = 0;
          uint64_t v51 = 16;
          do
          {
            float v52 = *(float **)((char *)&a2->mNumberBuffers + v51);
            uint64_t v53 = *((unsigned int *)this + 8);
            __A.unsigned int realp = v52 + 1;
            __A.imagp = &v52[v53 + 1];
            unint64_t v54 = (float *)*((void *)this + 2388);
            *unint64_t v54 = *v52 * *v52;
            v54[v53] = v52[v53] * v52[v53];
            vDSP_zvmags(&__A, 1, v54 + 1, 1, (v53 - 1));
            vDSP_vadd(*((const float **)this + 2388), 1, *((const float **)this + 2391), 1, *((float **)this + 2391), 1, __N);
            LODWORD(__C.realp) = 0;
            vDSP_sve(*((const float **)this + 2388), 1, (float *)&__C, __N);
            mNumberBuffers -= *(float *)&__C.realp == 0.0;
            ++v50;
            v51 += 16;
          }
          while (v50 < a2->mNumberBuffers);
        }
        if (mNumberBuffers) {
          float v55 = 1.0 / (float)mNumberBuffers;
        }
        else {
          float v55 = 0.0;
        }
        float __B = v55;
        vDSP_vsmul(*((const float **)this + 2391), 1, &__B, *((float **)this + 2391), 1, __N);
        float v93 = 0.0;
        vDSP_vthr(*((const float **)this + 2391), 1, &v93, *((float **)this + 2391), 1, __N);
        vvsqrtf(*((float **)this + 2391), *((const float **)this + 2391), &__N);
        uint64_t v56 = (float *)*((void *)this + 2373);
        uint64_t v57 = *((unsigned int *)this + 8);
        __A.unsigned int realp = v56 + 1;
        __A.imagp = &v56[v57 + 1];
        float v58 = (float *)*((void *)this + 2388);
        *float v58 = fabsf(*v56);
        v58[v57] = fabsf(v56[v57]);
        vDSP_zvabs(&__A, 1, v58 + 1, 1, (v57 - 1));
        vDSP_vthr(*((const float **)this + 2388), 1, &__N_4, *((float **)this + 2388), 1, __N);
        vDSP_vdiv(*((const float **)this + 2388), 1, *((const float **)this + 2391), 1, *((float **)this + 2391), 1, __N);
        uint64_t v59 = *((void *)this + 2391);
        *uint64_t v56 = *(float *)v59 * *v56;
        uint64_t v60 = *((unsigned int *)this + 8);
        v56[v57] = *(float *)(v59 + 4 * v60) * v56[v57];
        vDSP_zrvmul(&__A, 1, (const float *)(v59 + 4), 1, &__A, 1, (v60 - 1));
        if (a3)
        {
          vDSP_vclr(*((float **)this + 2391), 1, __N);
          if (a3->mNumberBuffers)
          {
            unint64_t v61 = 0;
            uint64_t v62 = 16;
            do
            {
              uint64_t v63 = *(float **)((char *)&a3->mNumberBuffers + v62);
              uint64_t v64 = *((unsigned int *)this + 8);
              __C.unsigned int realp = v63 + 1;
              __C.imagp = &v63[v64 + 1];
              uint64_t v65 = (float *)*((void *)this + 2388);
              *uint64_t v65 = *v63 * *v63;
              v65[v64] = v63[v64] * v63[v64];
              vDSP_zvmags(&__C, 1, v65 + 1, 1, (v64 - 1));
              vDSP_vadd(*((const float **)this + 2388), 1, *((const float **)this + 2391), 1, *((float **)this + 2391), 1, __N);
              ++v61;
              v62 += 16;
            }
            while (v61 < a3->mNumberBuffers);
          }
          vDSP_vsmul(*((const float **)this + 2391), 1, &__B, *((float **)this + 2391), 1, __N);
          vDSP_vthr(*((const float **)this + 2391), 1, &v93, *((float **)this + 2391), 1, __N);
          vvsqrtf(*((float **)this + 2391), *((const float **)this + 2391), &__N);
          vDSP_Length v66 = (float *)*((void *)this + 2376);
          uint64_t v67 = *((unsigned int *)this + 8);
          __C.unsigned int realp = v66 + 1;
          __C.imagp = &v66[v67 + 1];
          vDSP_Length v68 = (float *)*((void *)this + 2388);
          *vDSP_Length v68 = fabsf(*v66);
          v68[v67] = fabsf(v66[v67]);
          vDSP_zvabs(&__C, 1, v68 + 1, 1, (v67 - 1));
          vDSP_vthr(*((const float **)this + 2388), 1, &__N_4, *((float **)this + 2388), 1, __N);
          vDSP_vdiv(*((const float **)this + 2388), 1, *((const float **)this + 2391), 1, *((float **)this + 2391), 1, __N);
          uint64_t v69 = *((void *)this + 2391);
          *vDSP_Length v66 = *(float *)v69 * *v66;
          uint64_t v70 = *((unsigned int *)this + 8);
          v66[v67] = *(float *)(v69 + 4 * v70) * v66[v67];
          vDSP_zrvmul(&__C, 1, (const float *)(v69 + 4), 1, &__C, 1, (v70 - 1));
        }
        if (*((unsigned char *)this + 548))
        {
LABEL_92:
          uint64_t v71 = (float *)((char *)a2->mBuffers[*((unsigned int *)this + 38)].mData + 4 * *((unsigned int *)this + 8));
          __A.unsigned int realp = (float *)a2->mBuffers[*((unsigned int *)this + 38)].mData;
          __A.imagp = v71;
          vDSP_zvmags(&__A, 1, *((float **)this + 2379), 1, (unint64_t)*((float *)this + 13));
          uint64_t v72 = *((void *)this + 2400);
          if ((unint64_t)(*((void *)this + 2401) - v72) <= 0x10) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          *(_DWORD *)(v72 + 16) = 0;
          if (*((_DWORD *)this + 17) == 4)
          {
            unsigned int v74 = *((_DWORD *)this + 20);
            for (unsigned int i = *((_DWORD *)this + 21); v74 <= i; ++v74)
            {
              if (*((unsigned char *)this + 149) && *((unsigned char *)this + 19304)) {
                LimitWindBoost::process((uint64_t)this + 19200, (uint64_t *)this + 2379, (uint64_t)this + 24 * v74 + 12072, &a2->mNumberBuffers, (const float **)&__A.realp, v74);
              }
            }
          }
          else
          {
            unsigned int v75 = *((_DWORD *)this + 3);
            if (v75)
            {
              unint64_t v76 = 0;
              uint64_t v77 = (char *)this + 12072;
              do
              {
                if (*((unsigned char *)this + 149) && *((unsigned char *)this + 19304))
                {
                  LimitWindBoost::process((uint64_t)this + 19200, (uint64_t *)this + 2379, (uint64_t)v77, &a2->mNumberBuffers, (const float **)&__A.realp, v76);
                  unsigned int v75 = *((_DWORD *)this + 3);
                }
                ++v76;
                v77 += 24;
              }
              while (v76 < v75);
            }
            if (*((unsigned char *)this + 149) && *((unsigned char *)this + 19304)) {
              LimitWindBoost::process((uint64_t)this + 19200, (uint64_t *)this + 2379, (uint64_t)this + 18984, &a2->mNumberBuffers, (const float **)&__A.realp, v75);
            }
          }
        }
      }
      uint64_t v78 = *((void *)this + 2400);
      if ((unint64_t)(*((void *)this + 2401) - v78) <= 0xF) {
        __assert_rtn("getParameter", "LimitWindBoost.cpp", 159, "index <= mParameter.size()");
      }
      *((_DWORD *)this + 43) = *(_DWORD *)(v78 + 16);
      uint64_t v79 = (_DWORD *)((char *)this + 4 * *((unsigned int *)this + 27));
      int v80 = v79[714];
      *((_DWORD *)this + 29) = v79[426];
      *((_DWORD *)this + 3DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v80;
      *((_DWORD *)this + 31) = v79[1002];
      if (a4) {
        memcpy(a4->mBuffers[0].mData, *((const void **)this + 2373), a4->mBuffers[0].mDataByteSize);
      }
      if (a5) {
        memcpy(a5->mBuffers[0].mData, *((const void **)this + 2376), a5->mBuffers[0].mDataByteSize);
      }
      if (a6 && a6->mNumberBuffers)
      {
        unint64_t v81 = 0;
        p_mData = &a6->mBuffers[0].mData;
        uint64_t v83 = (const void **)((char *)this + 12072);
        do
        {
          uint64_t v84 = *v83;
          v83 += 3;
          memcpy(*p_mData, v84, *((unsigned int *)p_mData - 1));
          ++v81;
          p_mData += 2;
        }
        while (v81 < a6->mNumberBuffers);
      }
      if (a7 && a7->mNumberBuffers)
      {
        unint64_t v85 = 0;
        float v86 = &a7->mBuffers[0].mData;
        uint64_t v87 = (const void **)((char *)this + 5160);
        do
        {
          uint64_t v88 = *v87;
          v87 += 3;
          memcpy(*v86, v88, *((unsigned int *)v86 - 1));
          ++v85;
          v86 += 2;
        }
        while (v85 < a7->mNumberBuffers);
      }
      return;
    case 3:
      uint64_t v22 = *((unsigned int *)this + 20);
      unsigned int v23 = *((_DWORD *)this + 21);
      unsigned int v24 = *((_DWORD *)this + 19);
      if (v24 >= 2)
      {
        if (v24 == 2 && v22 <= v23)
        {
          do
          {
            (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, char *, uint64_t, void))(*(void *)this + 120))(this, a2, (char *)this + 24 * v22 + 12072, (char *)this + 24 * v22 + 5160, v22, *((unsigned int *)this + 18));
            uint64_t v22 = (v22 + 1);
          }
          while (v22 <= v23);
        }
      }
      else
      {
        for (; v22 <= v23; uint64_t v22 = (v22 + 1))
          (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, char *, uint64_t, void))(*(void *)this + 112))(this, a2, (char *)this + 24 * v22 + 12072, (char *)this + 24 * v22 + 5160, v22, *((unsigned int *)this + 18));
      }
      bzero(*((void **)this + 2373), *((void *)this + 2374) - *((void *)this + 2373));
      bzero(*((void **)this + 2376), *((void *)this + 2377) - *((void *)this + 2376));
LABEL_61:
      (*(void (**)(BeamformerBase *))(*(void *)this + 48))(this);
      goto LABEL_77;
    case 4:
      *((_DWORD *)this + 27) = 0;
      uint64_t v26 = *((unsigned int *)this + 20);
      for (j = *((_DWORD *)this + 21); v26 <= j; uint64_t v26 = (v26 + 1))
        (*(void (**)(BeamformerBase *, const AudioBufferList *, char *, uint64_t, void))(*(void *)this + 80))(this, a2, (char *)this + 24 * v26 + 12072, v26, 0);
      goto LABEL_77;
    default:
      goto LABEL_77;
  }
}

uint64_t SCTwoInputMixer::initialize(SCTwoInputMixer *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v16, "in");
    unsigned int v10 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v10 = (void *)*v10;
    }
    DSPGraph::strprintf(v15, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    uint64_t result = DSPGraph::ThrowException();
    goto LABEL_29;
  }
  int v3 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 8);
  uint64_t v4 = *((void *)this + 8);
  unint64_t v5 = *((void *)this + 9) - v4;
  if (v3 != 1819304813)
  {
    if (v5 > 0x20)
    {
      if (*(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v4 + 32) + 40))() + 120) + 8) != 1718773105) {
        goto LABEL_7;
      }
      uint64_t v8 = *((void *)this + 11);
      if (*((void *)this + 12) != v8)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
        if (*(_DWORD *)(*(void *)(result + 120) + 8) != 1718773105) {
          goto LABEL_7;
        }
        return result;
      }
      std::string::basic_string[abi:ne180100]<0>(v17, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v16, "out");
      int32x2_t v14 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int32x2_t v14 = (void *)*v14;
      }
LABEL_28:
      DSPGraph::strprintf(v15, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v13, v14, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_29;
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v16, "in");
    double v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v12 = (void *)*v12;
    }
LABEL_19:
    DSPGraph::strprintf(v15, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 1);
    uint64_t result = DSPGraph::ThrowException();
    goto LABEL_29;
  }
  if (v5 <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v16, "in");
    double v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v12 = (void *)*v12;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v4 + 32) + 40))() + 120) + 8) != 1819304813)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v17, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SCTwoInputMixer.hpp");
    std::string::basic_string[abi:ne180100]<0>(v16, "initialize");
    std::string::basic_string[abi:ne180100]<0>(v15, "all formats must be either freq or time domains.");
    uint64_t result = DSPGraph::ThrowException();
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v6 = *((void *)this + 11);
  if (*((void *)this + 12) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v16, "out");
    int32x2_t v14 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int32x2_t v14 = (void *)*v14;
    }
    goto LABEL_28;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  if (*(_DWORD *)(*(void *)(result + 120) + 8) != 1819304813) {
    goto LABEL_7;
  }
  return result;
}

void sub_1BB33EA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void SCTwoInputMixer::process(SCTwoInputMixer *this, int a2)
{
  uint64_t v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v36, "in");
    float v28 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      float v28 = (void *)*v28;
    }
    DSPGraph::strprintf(v35, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v27, v28, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException();
    goto LABEL_35;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 8);
  if ((unint64_t)(*((void *)this + 9) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v36, "in");
    unint64_t v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v30 = (void *)*v30;
    }
    DSPGraph::strprintf(v35, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 1);
    DSPGraph::ThrowException();
    goto LABEL_35;
  }
  uint64_t v8 = *(_DWORD **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *((void *)this + 11);
  if (*((void *)this + 12) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v36, "out");
    uint64_t v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v32 = (void *)*v32;
    }
    goto LABEL_34;
  }
  unsigned int v11 = *(int **)(*(void *)(v9 + 56) + 80);
  double v12 = *(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 56) + 80);
  uint64_t v13 = *v12;
  if (*v8 != v13) {
    __assert_rtn("process", "SCTwoInputMixer.cpp", 49, "inOneABL->mNumberBuffers == channelCount");
  }
  uint64_t v14 = *((void *)this + 11);
  if (*((void *)this + 12) == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v36, "out");
    uint64_t v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v32 = (void *)*v32;
    }
    goto LABEL_34;
  }
  int v15 = *v11;
  int v16 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14) + 120) + 8);
  float v17 = *((float *)this + 193);
  float v18 = (1.0 - v17) * *((float *)this + 194);
  float __D = v17 * *((float *)this + 195);
  float __B = v18;
  uint64_t v19 = *((void *)this + 11);
  if (*((void *)this + 12) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v36, "out");
    uint64_t v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v32 = (void *)*v32;
    }
LABEL_34:
    DSPGraph::strprintf(v35, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException();
LABEL_35:
    __break(1u);
    return;
  }
  vDSP_Length __N = (a2 << (v16 == 1718773105));
  if (4 * __N > *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19) + 56)
                                 + 100))
    __assert_rtn("process", "SCTwoInputMixer.cpp", 59, "out(0).wire()->buffer()->byteCapacity() >= n * sizeof(Float32)");
  if (v13)
  {
    uint64_t v21 = 0;
    unsigned int v22 = v15 - 1;
    uint64_t v23 = (float **)(v12 + 4);
    do
    {
      if ((int)v13 - 1 >= v21) {
        int v24 = v21;
      }
      else {
        int v24 = v13 - 1;
      }
      int v25 = *(const float **)&v8[4 * v24 + 4];
      if (v22 >= v21) {
        unsigned int v26 = v21;
      }
      else {
        unsigned int v26 = v22;
      }
      vDSP_vsmsma(v25, 1, &__B, *(const float **)&v11[4 * v26 + 4], 1, &__D, *v23, 1, __N);
      *((_DWORD *)v23 - 1) = 4 * __N;
      ++v21;
      v23 += 2;
    }
    while (v13 != v21);
  }
}

void sub_1BB33EF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::isFrequencySafe(DSPGraph::Box *this)
{
  return 1;
}

uint64_t DSPGraph::Box::isLatencyDelay(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::Box::getComponentName(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t DSPGraph::Box::hasPresetData(DSPGraph::Box *this)
{
  return 1;
}

uint64_t DSPGraph::Box::asOperativeFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asOperativeSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asOperativeFCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asFCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asGraphOutput(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asGraphInput(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asBoxProxy(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asAUBox(DSPGraph::Box *this)
{
  return 0;
}

double SCTwoInputMixer::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 3.81584623e185;
  *(_OWORD *)a1 = xmmword_1BB879BD0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::Box::usesFixedBlockSize(DSPGraph::Box *this)
{
  return 0;
}

float SCTwoInputMixer::getParameter(SCTwoInputMixer *this)
{
  return *((float *)this + 193);
}

void SCTwoInputMixer::setParameter(SCTwoInputMixer *this, int a2, float a3)
{
  switch(a2)
  {
    case 2:
      *((float *)this + 195) = __exp10f(a3 * 0.05);
      break;
    case 1:
      *((float *)this + 194) = __exp10f(a3 * 0.05);
      break;
    case 0:
      if (a3 < 0.0) {
        a3 = 0.0;
      }
      if (a3 > 1.0) {
        a3 = 1.0;
      }
      *((float *)this + 193) = a3;
      break;
  }
}

uint64_t DSPGraph::Box::selfLatencyInTicks(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::canProcessInPlace(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::isBypassed(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::canBypass(DSPGraph::Box *this)
{
  return 0;
}

const char *SCTwoInputMixer::ClassName(SCTwoInputMixer *this)
{
  return "SCTwoInputMixer";
}

void SCTwoInputMixer::~SCTwoInputMixer(SCTwoInputMixer *this)
{
  DSPGraph::Box::~Box(this);

  JUMPOUT(0x1C185D370);
}

float BypassableIRProcessor::getCurrentDelay(BypassableIRProcessor *this, unsigned int a2, unsigned int a3)
{
  float result = 0.0;
  if (*((unsigned char *)this + 208))
  {
    uint64_t v4 = *((void *)this + 20);
    if (a2 < (unint64_t)((*((void *)this + 21) - v4) >> 3))
    {
      uint64_t v5 = *(void *)(v4 + 8 * a2);
      if (v5)
      {
        uint64_t v7 = v5 + 112;
        uint64_t v6 = *(void *)(v5 + 112);
        if (a3 < (unint64_t)((*(void *)(v7 + 8) - v6) >> 2)) {
          return *(float *)(v6 + 4 * a3);
        }
      }
    }
  }
  return result;
}

uint64_t BypassableIRProcessor::getMaxDelay(BypassableIRProcessor *this, unsigned int a2)
{
  if (*((unsigned char *)this + 208)
    && (uint64_t v2 = *((void *)this + 20), a2 < (unint64_t)((*((void *)this + 21) - v2) >> 3))
    && (uint64_t v3 = *(void *)(v2 + 8 * a2)) != 0)
  {
    return *(unsigned int *)(*(void *)(v3 + 24) + 164);
  }
  else
  {
    return 0;
  }
}

uint64_t BypassableIRProcessor::setCoordinate(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(result + 208))
  {
    uint64_t v3 = *(void *)(result + 160);
    if (a3 < (unint64_t)((*(void *)(result + 168) - v3) >> 3))
    {
      uint64_t v4 = *(void *)(v3 + 8 * a3);
      if (v4) {
        return (*(uint64_t (**)(void))(**(void **)(v4 + 24) + 48))();
      }
    }
  }
  return result;
}

uint64_t BypassableIRProcessor::getIRDataAttributes@<X0>(BypassableIRProcessor *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 208) && (uint64_t v2 = **((void **)this + 20)) != 0) {
    return IR::IRDataAttributes::IRDataAttributes(a2, *(void *)(v2 + 24) + 8);
  }
  else {
    return IR::getPresetDataAttributes();
  }
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 4DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v5;
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8) {
    CFRetain(*(CFTypeRef *)(a2 + 64));
  }
  *(void *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 88);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a2 + 88));
  }
  *(void *)(a1 + 8std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v9;
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  if (v11) {
    CFRetain(*(CFTypeRef *)(a2 + 128));
  }
  *(void *)(a1 + 12std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 8) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v12;
  return a1;
}

uint64_t BypassableIRProcessor::setIsProcessing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 209) = a2;
  return this;
}

void BypassableIRProcessor::updateFadingParameters(BypassableIRProcessor *this, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 208))
  {
    unsigned int v2 = *((_DWORD *)this + 54);
    if (v2 >= a2)
    {
      *((_DWORD *)this + 54) = v2 - a2;
    }
    else
    {
      unsigned int v3 = *((_DWORD *)this + 53);
      if (v3)
      {
        unsigned int v4 = a2 - v2;
        BOOL v5 = v3 >= v4;
        unsigned int v6 = v3 - v4;
        if (!v5) {
          unsigned int v6 = 0;
        }
        *((_DWORD *)this + 53) = v6;
      }
      *((_DWORD *)this + 54) = 0;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v7 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "BypassableIRProcessor");
      uint64_t v8 = std::string::append(&v13, "::", 2uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      long long v10 = std::string::append(&v14, "updateFadingParameters", 0x16uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      int64_t v16 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = __p;
      if (v16 < 0) {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      float v18 = v12;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB33F510(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void BypassableIRProcessor::initializeFadingParameters(BypassableIRProcessor *this, int a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 208))
  {
    if (a2)
    {
      *((_DWORD *)this + 53) = 0;
      *((_DWORD *)this + 54) = 0;
    }
    else if (!*((unsigned char *)this + 209) || (a3 & 1) != 0)
    {
      if (!*((unsigned char *)this + 209) && a3)
      {
        *((_DWORD *)this + 53) = *((_DWORD *)this + 55);
        LODWORD(__A) = 1065353216;
        if (*((void *)this + 21) == *((void *)this + 20))
        {
          *((_DWORD *)this + 54) = 0;
        }
        else
        {
          unint64_t v10 = 0;
          unsigned int v11 = 1;
          do
          {
            vDSP_vfill((const float *)&__A, *(float **)(*((void *)this + 23) + 24 * v10), 1, (uint64_t)(*(void *)(*((void *)this + 23) + 24 * v10 + 8)- *(void *)(*((void *)this + 23) + 24 * v10)) >> 2);
            unint64_t v10 = v11;
            std::string v13 = (IR::FFTFilter ***)*((void *)this + 20);
            uint64_t v12 = (IR::FFTFilter ***)*((void *)this + 21);
            ++v11;
          }
          while (v10 < v12 - v13);
          int v14 = *((unsigned __int8 *)this + 208);
          *((_DWORD *)this + 54) = 0;
          if (v14 && !*((_DWORD *)this + 53))
          {
            while (v13 != v12)
            {
              if (*v13) {
                IR::IRProcessor::reset(*v13);
              }
              ++v13;
            }
          }
        }
      }
    }
    else
    {
      *((_DWORD *)this + 53) = *((_DWORD *)this + 55);
      BOOL v5 = (IR::FFTFilter ***)*((void *)this + 21);
      if (v5 == *((IR::FFTFilter ****)this + 20)) {
        goto LABEL_14;
      }
      unint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        vDSP_vclr(*(float **)(*((void *)this + 23) + 24 * v6), 1, (uint64_t)(*(void *)(*((void *)this + 23) + 24 * v6 + 8) - *(void *)(*((void *)this + 23) + 24 * v6)) >> 2);
        unint64_t v6 = v7;
        BOOL v5 = (IR::FFTFilter ***)*((void *)this + 20);
        uint64_t v8 = (IR::FFTFilter ***)*((void *)this + 21);
        ++v7;
      }
      while (v6 < v8 - v5);
      if (*((unsigned char *)this + 208))
      {
LABEL_14:
        int v9 = (*(uint64_t (**)(IR::FFTFilter *))(*(void *)(*v5)[3] + 72))((*v5)[3]);
        BOOL v5 = (IR::FFTFilter ***)*((void *)this + 20);
        uint64_t v8 = (IR::FFTFilter ***)*((void *)this + 21);
      }
      else
      {
        int v9 = 0;
      }
      *((_DWORD *)this + 54) = v9;
      while (v5 != v8)
      {
        if (*v5) {
          IR::IRProcessor::reset(*v5);
        }
        ++v5;
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned int v4 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "BypassableIRProcessor");
      int v15 = std::string::append(&v20, "::", 2uLL);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      float v17 = std::string::append(&v21, "initializeFadingParameters", 0x1AuLL);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t v23 = v17->__r_.__value_.__r.__words[2];
      long long __A = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      p_A = &__A;
      if (v23 < 0) {
        p_A = (long long *)__A;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v25 = p_A;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v23) < 0) {
        operator delete((void *)__A);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB33F818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BypassableIRProcessor::reset(uint64_t this, char a2)
{
  if (*(unsigned char *)(this + 208))
  {
    unsigned int v2 = *(IR::FFTFilter ****)(this + 160);
    for (unsigned int i = *(IR::FFTFilter ****)(this + 168); v2 != i; *((unsigned char *)v5 + 168) = a2)
    {
      this = IR::IRProcessor::reset(*v2);
      BOOL v5 = *v2++;
    }
  }
  return this;
}

void BypassableIRProcessor::crossFade(BypassableIRProcessor *this, const float *__src, float *__dst, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 208))
  {
    uint64_t v10 = *((unsigned int *)this + 54);
    if (v10 >= a6)
    {
      if (*((unsigned char *)this + 209))
      {
        memcpy(__dst, __src, 4 * a6);
      }
    }
    else
    {
      if (v10 && *((unsigned char *)this + 209))
      {
        memcpy(__dst, __src, 4 * v10);
        LODWORD(v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 54);
      }
      unsigned int v13 = *((_DWORD *)this + 53);
      if (a6 - v10 >= v13) {
        vDSP_Length v14 = v13;
      }
      else {
        vDSP_Length v14 = a6 - v10;
      }
      if (v14)
      {
        int v15 = (float *)(*(void *)(*((void *)this + 23) + 24 * a4) + 4 * a5);
        *(float *)&long long __Start = 1.0 - *v15;
        float v16 = -1.0;
        if (*((unsigned char *)this + 209)) {
          float v16 = 1.0;
        }
        *(float *)&__Step.__r_.__value_.__l.__data_ = v16 / (float)*((unsigned int *)this + 55);
        vDSP_vrampmul(&__dst[v10], 1, v15, (const float *)&__Step, &__dst[v10], 1, v14);
        *(float *)&__Step.__r_.__value_.__l.__data_ = -*(float *)&__Step.__r_.__value_.__l.__data_;
        vDSP_vrampmuladd(&__src[*((unsigned int *)this + 54)], 1, (float *)&__Start, (const float *)&__Step, &__dst[*((unsigned int *)this + 54)], 1, v14);
        LODWORD(v1DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0) = *((_DWORD *)this + 54);
      }
      unsigned int v17 = v10 + v14;
      if (a6 > v17 && !*((unsigned char *)this + 209)) {
        memcpy(&__dst[v17], &__src[v17], 4 * (a6 - v17));
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v18 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "BypassableIRProcessor");
      uint64_t v19 = std::string::append(&v24, "::", 2uLL);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      __Step.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Step.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::string v21 = std::string::append(&__Step, "crossFade", 9uLL);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      int64_t v27 = v21->__r_.__value_.__r.__words[2];
      long long __Start = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      p_Start = &__Start;
      if (v27 < 0) {
        p_Start = (long long *)__Start;
      }
      *(_DWORD *)std::string buf = 136315138;
      float v29 = p_Start;
      _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)__Start);
      }
      if (SHIBYTE(__Step.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__Step.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB33FBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void BypassableIRProcessor::processMultipleInputs(uint64_t a1, const float **a2, float *const *a3, unsigned int a4, unsigned int a5, unsigned int a6, vDSP_Length a7, int a8, float a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = *(void *)(a1 + 160);
    if (a4 < (unint64_t)((*(void *)(a1 + 168) - v9) >> 3))
    {
      uint64_t v10 = *(float **)(v9 + 8 * a4);
      float v11 = 3000.0;
      if (a8) {
        float v11 = -1.0;
      }
      v10[40] = v11;
      IR::IRProcessor::processMultipleInputs((IR::IRProcessor *)v10, a2, a3, a5, a6, a7, a9, 0);
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v12 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "BypassableIRProcessor");
      unsigned int v13 = std::string::append(&v18, "::", 2uLL);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = std::string::append(&v19, "processMultipleInputs", 0x15uLL);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      int64_t v21 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      unsigned int v17 = __p;
      if (v21 < 0) {
        unsigned int v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      int64_t v23 = v17;
      _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }
  }
}