void sub_1BB6181F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  VPAUBusFormats::~VPAUBusFormats((VPAUBusFormats *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(void *a1, const __CFDictionary *a2, void *a3)
{
  v5 = applesauce::CF::details::at_key<char const(&)[9]>(a2, "cfobject");
  if (!v5) {
    goto LABEL_5;
  }
  v6 = v5;
  CFRetain(v5);
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 != CFStringGetTypeID())
  {
    CFRelease(v6);
LABEL_5:
    LOBYTE(v9) = 0;
    char v10 = 0;
    *a1 = *a3;
    *a3 = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  }
  v9 = v6;
  char v10 = 1;
  CFRetain(v6);
  *a1 = v6;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
}

CFNumberRef *applesauce::CF::NumberRef::NumberRef<AUBSS2Algorithm,void>(CFNumberRef *a1)
{
  int valuePtr = 1;
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v2;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB618A0C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void VPAUBusFormats::~VPAUBusFormats(VPAUBusFormats *this)
{
  CFNumberRef v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    free(v2);
    *((void *)this + 1) = 0;
  }
  v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    free(v3);
    *((void *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = 0;
  *(_DWORD *)this = 0;
}

void VoiceProcessorV2::InstantiateAndConfigureEffectAU(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  int v3 = a3;
  uint64_t v6 = 0;
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  v225 = (char *)this + 15961;
  v223 = (char *)this + 4538;
  if (a2 == 56) {
    char v7 = a3;
  }
  else {
    char v7 = 1;
  }
  char v224 = v7;
  if (a3) {
    v8 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
  }
  else {
    v8 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
  }
  v226 = v8;
  if (a3) {
    uint64_t v9 = 72;
  }
  else {
    uint64_t v9 = 62;
  }
  char v10 = v8;
  while (1)
  {
    int v11 = *v10;
    v10 += 18;
    if (v11 == a2) {
      break;
    }
    if (v9 == ++v6)
    {
      OSType v12 = 0;
      goto LABEL_15;
    }
  }
  OSType v12 = v8[18 * v6 + 1];
LABEL_15:
  uint64_t v13 = 3504;
  if (a3) {
    uint64_t v13 = 2776;
  }
  v14 = (OpaqueAudioComponentInstance **)((char *)this + 8 * a2 + v13);
  if (VoiceProcessorV2::InstantiateAU(this, 0x61756678u, v12, v14, v12 != 1685287015) || !*v14) {
    return;
  }
  int InternalBuffers = VoiceProcessorV2::PopulateAUPropsAndParamsLists(this, a2, v3);
  if (InternalBuffers)
  {
LABEL_20:
    if (a2 == 6 && InternalBuffers == 1718772077 && (v3 & 1) == 0)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      v16 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v241 = 1024;
          int v242 = 5547;
          __int16 v243 = 2080;
          *(void *)v244 = "(DL-)OCNS";
          *(_WORD *)&v244[8] = 1024;
          *(_DWORD *)&v244[10] = 1718772077;
          _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> instantiateandconfigureeffectau (%s): warning %d due to non-FFT friendly blocksize", buf, 0x22u);
        }
      }
      v18 = (int *)*((void *)this + 1578);
      if (v18 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v18, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5547, "InstantiateAndConfigureEffectAU", "instantiateandconfigureeffectau (%s): warning %d due to non-FFT friendly blocksize", "(DL-)OCNS", 1718772077);
      }
LABEL_387:
      VoiceProcessorV2::DisposeAU(this, 1635083896, v12, v14, 1);
      return;
    }
    uint64_t v19 = 0;
    while (1)
    {
      int v20 = *v8;
      v8 += 18;
      if (v20 == a2) {
        break;
      }
      if (v9 == ++v19)
      {
        v21 = 0;
        goto LABEL_47;
      }
    }
    v21 = (const char *)&v226[18 * v19 + 2];
LABEL_47:
    snprintf(buf, 0x80uLL, "instantiateandconfigureeffectau (%s): error %d", v21, InternalBuffers);
    std::string::basic_string[abi:ne180100]<0>(&v237, "VoiceProcessor_v2.cpp");
    std::to_string(&v230, 5551);
    v28 = std::string::insert(&v230, 0, ":", 1uLL);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v231.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v231, ":", 1uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v232.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v239, "InstantiateAndConfigureEffectAU");
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v32 = &v239;
    }
    else {
      v32 = (std::string *)v239.__r_.__value_.__r.__words[0];
    }
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v239.__r_.__value_.__l.__size_;
    }
    v34 = std::string::append(&v232, (const std::string::value_type *)v32, size);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v233.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v233, " ", 1uLL);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v234.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    size_t v38 = strlen(buf);
    v39 = std::string::append(&v234, buf, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    int64_t v236 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (v236 >= 0) {
      v41 = __p;
    }
    else {
      v41 = (void **)__p[0];
    }
    if (v236 >= 0) {
      std::string::size_type v42 = HIBYTE(v236);
    }
    else {
      std::string::size_type v42 = (std::string::size_type)__p[1];
    }
    std::string::append(&v237, (const std::string::value_type *)v41, v42);
    if (SHIBYTE(v236) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v233.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v239.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v231.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v230.__r_.__value_.__l.__data_);
      if (v3) {
        goto LABEL_73;
      }
    }
    else if (v3)
    {
LABEL_73:
      unint64_t v43 = *((void *)this + 2006);
      if (v43 >= *((void *)this + 2007))
      {
        uint64_t v184 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2005, (long long *)&v237);
      }
      else
      {
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)this + 2006), v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v44 = *(_OWORD *)&v237.__r_.__value_.__l.__data_;
          *(void *)(v43 + 16) = *((void *)&v237.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v43 = v44;
        }
        uint64_t v184 = v43 + 24;
        *((void *)this + 2006) = v43 + 24;
      }
      *((void *)this + 2006) = v184;
      goto LABEL_385;
    }
    unint64_t v182 = *((void *)this + 2009);
    if (v182 >= *((void *)this + 2010))
    {
      uint64_t v185 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2008, (long long *)&v237);
    }
    else
    {
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)this + 2009), v237.__r_.__value_.__l.__data_, v237.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v183 = *(_OWORD *)&v237.__r_.__value_.__l.__data_;
        *(void *)(v182 + 16) = *((void *)&v237.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v182 = v183;
      }
      uint64_t v185 = v182 + 24;
      *((void *)this + 2009) = v182 + 24;
    }
    *((void *)this + 2009) = v185;
LABEL_385:
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v237.__r_.__value_.__l.__data_);
    }
    goto LABEL_387;
  }
  memset(&v237, 0, sizeof(v237));
  __p[0] = 0;
  __p[1] = 0;
  int64_t v236 = 0;
  v22 = (char *)this + 24 * a2;
  if (v3)
  {
    v23 = (std::string *)(v22 + 7072);
    if (&v237 != v23)
    {
      uint64_t v24 = *((void *)this + 3 * a2 + 885);
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v237, v23->__r_.__value_.__r.__words[0], v24, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v24 - v23->__r_.__value_.__r.__words[0]) >> 3));
    }
    v25 = (char *)this + 24 * a2;
    v26 = (uint64_t **)(v25 + 4696);
    uint64_t v27 = 4704;
  }
  else
  {
    v45 = (std::string *)(v22 + 10968);
    if (&v237 != v45)
    {
      uint64_t v46 = *((void *)this + 3 * a2 + 1372);
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v237, v45->__r_.__value_.__r.__words[0], v46, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v46 - v45->__r_.__value_.__r.__words[0]) >> 3));
    }
    v25 = (char *)this + 24 * a2;
    v26 = (uint64_t **)(v25 + 8912);
    uint64_t v27 = 8920;
  }
  std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(__p, *v26, *(uint64_t **)&v25[v27], (uint64_t)(*(void *)&v25[v27] - (void)*v26) >> 3);
  OSType v220 = v12;
  if (a2 == 28)
  {
    *(_DWORD *)buf = 2;
    int InternalBuffers = AudioUnitSetProperty(*v14, 0xBu, 1u, 0, buf, 4u);
  }
  else
  {
    int InternalBuffers = 0;
  }
  std::string::size_type v47 = v237.__r_.__value_.__r.__words[0];
  int v221 = v3;
  if (v237.__r_.__value_.__l.__size_ != v237.__r_.__value_.__r.__words[0])
  {
    unint64_t v48 = 0;
    int v49 = 0;
    while (1)
    {
      std::string::size_type v50 = v47 + 24 * v48;
      unsigned int v52 = *(_DWORD *)(v50 + 8);
      size_t v51 = *(unsigned int *)(v50 + 12);
      v53 = *(const void **)(v50 + 16);
      v234.__r_.__value_.__r.__words[0] = *(void *)v50;
      *(_OWORD *)&v234.__r_.__value_.__r.__words[1] = v52;
      AUPropertyItem::SetData((AUPropertyItem *)&v234, v51, v53);
      v54 = v14;
      v55 = *v14;
      int data = (int)v234.__r_.__value_.__l.__data_;
      v57 = (double *)v234.__r_.__value_.__r.__words[2];
      int InternalBuffers = AudioUnitSetProperty(v55, (AudioUnitPropertyID)v234.__r_.__value_.__l.__data_, HIDWORD(v234.__r_.__value_.__r.__words[0]), v234.__r_.__value_.__r.__words[1], (const void *)v234.__r_.__value_.__r.__words[2], HIDWORD(v234.__r_.__value_.__r.__words[1]));
      if (a2 == 43)
      {
        if (data == 3902)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v62 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v63 = (*v62 ? *v62 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              int v64 = *(_DWORD *)v57;
              *(_DWORD *)buf = 136315906;
              *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v241 = 1024;
              int v242 = 5453;
              __int16 v243 = 1024;
              *(_DWORD *)v244 = 3902;
              *(_WORD *)&v244[4] = 1024;
              *(_DWORD *)&v244[6] = v64;
              _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting downlink TweakaLeakIR property ID: %d, value: %d", buf, 0x1Eu);
            }
          }
          v65 = (int *)*((void *)this + 1578);
          if (v65 && (*v225 || v225[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v65, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5453, "InstantiateAndConfigureEffectAU", "Setting downlink TweakaLeakIR property ID: %d, value: %d", 3902, *(_DWORD *)v57);
          }
        }
        else if (data == 3901)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v58 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v59 = (*v58 ? *v58 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v60 = *(void *)v57;
              *(_DWORD *)buf = 136315906;
              *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v241 = 1024;
              int v242 = 5449;
              __int16 v243 = 1024;
              *(_DWORD *)v244 = 3901;
              *(_WORD *)&v244[4] = 2048;
              *(void *)&v244[6] = v60;
              _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting downlink TweakaLeakIR property ID: %d, value: %f", buf, 0x22u);
            }
          }
          v61 = (int *)*((void *)this + 1578);
          if (v61 && (*v225 || v225[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v61, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5449, "InstantiateAndConfigureEffectAU", "Setting downlink TweakaLeakIR property ID: %d, value: %f", 3901, *v57);
          }
        }
      }
      if (!InternalBuffers) {
        break;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      v66 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v67 = (*v66 ? *v66 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          uint64_t v68 = 0;
          v69 = v8;
          while (1)
          {
            int v70 = *v69;
            v69 += 18;
            if (v70 == a2) {
              break;
            }
            if (v9 == ++v68)
            {
              uint64_t v71 = 0;
              goto LABEL_132;
            }
          }
          uint64_t v71 = (uint64_t)&v8[18 * v68 + 2];
LABEL_132:
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v241 = 1024;
          int v242 = 5458;
          __int16 v243 = 1024;
          *(_DWORD *)v244 = data;
          *(_WORD *)&v244[4] = 2080;
          *(void *)&v244[6] = v71;
          *(_WORD *)&v244[14] = 1024;
          *(_DWORD *)&v244[16] = InternalBuffers;
          _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in setting proerty ID %u to AU %s error %d", buf, 0x28u);
        }
      }
      v75 = (int *)*((void *)this + 1578);
      if (v75 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v76 = 0;
        v77 = v8;
        while (1)
        {
          int v78 = *v77;
          v77 += 18;
          if (v78 == a2) {
            break;
          }
          if (v9 == ++v76)
          {
            v79 = 0;
            goto LABEL_143;
          }
        }
        v79 = (const char *)&v8[18 * v76 + 2];
LABEL_143:
        CALegacyLog::log(v75, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5458, "InstantiateAndConfigureEffectAU", "Error in setting proerty ID %u to AU %s error %d", data, v79, InternalBuffers);
      }
      if (v224)
      {
        int v72 = v49;
        char v74 = 0;
        int v73 = 21;
        goto LABEL_146;
      }
      uint64_t v80 = 0;
      v81 = v8;
      v14 = v54;
      while (1)
      {
        int v82 = *v81;
        v81 += 18;
        if (v82 == 56) {
          break;
        }
        if (v9 == ++v80)
        {
          v83 = 0;
          goto LABEL_152;
        }
      }
      v83 = (const char *)&v8[18 * v80 + 2];
LABEL_152:
      snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error setting property %d on %s, attenuating the dl final gain by 20dB", InternalBuffers, LODWORD(v234.__r_.__value_.__l.__data_), v83);
      std::string::basic_string[abi:ne180100]<0>(&v233, "VoiceProcessor_v2.cpp");
      std::to_string(&v229, 5461);
      v84 = std::string::insert(&v229, 0, ":", 1uLL);
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append(&v238, ":", 1uLL);
      long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v239.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(inData, "InstantiateAndConfigureEffectAU");
      if ((v228 & 0x80u) == 0) {
        v88 = inData;
      }
      else {
        v88 = (void **)inData[0];
      }
      if ((v228 & 0x80u) == 0) {
        std::string::size_type v89 = v228;
      }
      else {
        std::string::size_type v89 = (std::string::size_type)inData[1];
      }
      v90 = std::string::append(&v239, (const std::string::value_type *)v88, v89);
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v230.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v230, " ", 1uLL);
      long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v231.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      size_t v94 = strlen(buf);
      v95 = std::string::append(&v231, buf, v94);
      long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v232.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v97 = &v232;
      }
      else {
        v97 = (std::string *)v232.__r_.__value_.__r.__words[0];
      }
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v98 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v98 = v232.__r_.__value_.__l.__size_;
      }
      std::string::append(&v233, (const std::string::value_type *)v97, v98);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v231.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v230.__r_.__value_.__l.__data_);
      }
      if ((char)v228 < 0) {
        operator delete(inData[0]);
      }
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v239.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v229.__r_.__value_.__l.__data_);
      }
      unint64_t v99 = *((void *)this + 2009);
      if (v99 >= *((void *)this + 2010))
      {
        uint64_t v101 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2008, (long long *)&v233);
      }
      else
      {
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)this + 2009), v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v100 = *(_OWORD *)&v233.__r_.__value_.__l.__data_;
          *(void *)(v99 + 16) = *((void *)&v233.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v99 = v100;
        }
        uint64_t v101 = v99 + 24;
        *((void *)this + 2009) = v99 + 24;
      }
      *((void *)this + 2009) = v101;
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v233.__r_.__value_.__l.__data_);
      }
      std::to_string(&v230, InternalBuffers);
      v102 = std::string::append(&v230, " error setting property ", 0x18uLL);
      long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      v231.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v239, (int)v234.__r_.__value_.__l.__data_);
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v104 = &v239;
      }
      else {
        v104 = (std::string *)v239.__r_.__value_.__r.__words[0];
      }
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v105 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v105 = v239.__r_.__value_.__l.__size_;
      }
      v106 = std::string::append(&v231, (const std::string::value_type *)v104, v105);
      long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v232.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      v108 = std::string::append(&v232, " on ", 4uLL);
      uint64_t v109 = 0;
      long long v110 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v233.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v110;
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      v111 = v8;
      while (1)
      {
        int v112 = *v111;
        v111 += 18;
        if (v112 == 56) {
          break;
        }
        if (v9 == ++v109)
        {
          v113 = 0;
          goto LABEL_197;
        }
      }
      v113 = (const char *)&v8[18 * v109 + 2];
LABEL_197:
      int v72 = v49;
      size_t v114 = strlen(v113);
      v115 = std::string::append(&v233, v113, v114);
      std::string::size_type v116 = v115->__r_.__value_.__r.__words[0];
      v238.__r_.__value_.__r.__words[0] = v115->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v238.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v115->__r_.__value_.__r.__words[1] + 7);
      char v117 = HIBYTE(v115->__r_.__value_.__r.__words[2]);
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
      *(void *)&v244[4] = v116;
      *(void *)&v244[12] = v238.__r_.__value_.__r.__words[0];
      *(void *)&v244[19] = *(std::string::size_type *)((char *)v238.__r_.__value_.__r.__words + 7);
      v244[27] = v117;
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v233.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v239.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v231.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v230.__r_.__value_.__l.__data_);
      }
      v118 = (std::pair<std::string, std::string> *)*((void *)this + 2015);
      if ((unint64_t)v118 >= *((void *)this + 2016))
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v119 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)this + 2014, (long long *)buf);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100](*((std::string **)this + 2015), (long long *)buf);
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v119 = v118 + 1;
        *((void *)this + 2015) = v118 + 1;
      }
      *((void *)this + 2015) = v119;
      if ((v244[27] & 0x80000000) != 0) {
        operator delete(*(void **)&v244[4]);
      }
      if ((v244[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v73 = 0;
      char v74 = 1;
      unsigned char *v223 = 1;
LABEL_215:
      if (v234.__r_.__value_.__r.__words[2]) {
        free((void *)v234.__r_.__value_.__r.__words[2]);
      }
      if ((v74 & 1) == 0) {
        goto LABEL_405;
      }
      unint64_t v48 = (v72 + 1);
      std::string::size_type v47 = v237.__r_.__value_.__r.__words[0];
      int v49 = v72 + 1;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237.__r_.__value_.__l.__size_ - v237.__r_.__value_.__r.__words[0]) >> 3) <= v48) {
        goto LABEL_219;
      }
    }
    int v72 = v49;
    int v73 = 0;
    char v74 = 1;
LABEL_146:
    v14 = v54;
    goto LABEL_215;
  }
LABEL_219:
  v222 = v14;
  v120 = __p[0];
  v121 = __p[1];
  if (__p[1] != __p[0])
  {
    uint64_t v122 = 0;
    unsigned int v123 = 0;
    do
    {
      v124 = &v120[8 * v122];
      int InternalBuffers = AudioUnitSetParameter(*v222, *v124, 0, 0, *((AudioUnitParameterValue *)v124 + 1), 0);
      if (InternalBuffers)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        v125 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v126 = (*v125 ? *v125 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
          {
            uint64_t v127 = 0;
            AudioUnitParameterID v128 = *v124;
            v129 = v8;
            while (1)
            {
              int v130 = *v129;
              v129 += 18;
              if (v130 == a2) {
                break;
              }
              if (v9 == ++v127)
              {
                uint64_t v131 = 0;
                goto LABEL_235;
              }
            }
            uint64_t v131 = (uint64_t)&v8[18 * v127 + 2];
LABEL_235:
            *(_DWORD *)buf = 136316162;
            *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
            __int16 v241 = 1024;
            int v242 = 5475;
            __int16 v243 = 1024;
            *(_DWORD *)v244 = v128;
            *(_WORD *)&v244[4] = 2080;
            *(void *)&v244[6] = v131;
            *(_WORD *)&v244[14] = 1024;
            *(_DWORD *)&v244[16] = InternalBuffers;
            _os_log_impl(&dword_1BB0CE000, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in setting parameter ID %u to AU %s error %d", buf, 0x28u);
          }
        }
        v132 = (int *)*((void *)this + 1578);
        if (v132 && (*v225 || v225[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v133 = 0;
          v134 = v8;
          while (1)
          {
            int v135 = *v134;
            v134 += 18;
            if (v135 == a2) {
              break;
            }
            if (v9 == ++v133)
            {
              v136 = 0;
              goto LABEL_246;
            }
          }
          v136 = (const char *)&v8[18 * v133 + 2];
LABEL_246:
          CALegacyLog::log(v132, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5475, "InstantiateAndConfigureEffectAU", "Error in setting parameter ID %u to AU %s error %d", *v124, v136, InternalBuffers);
        }
        if (v224)
        {
          int v73 = 21;
          OSType v12 = v220;
          v14 = v222;
          goto LABEL_406;
        }
        uint64_t v137 = 0;
        uint64_t v138 = 8 * v122;
        v139 = v8;
        while (1)
        {
          int v140 = *v139;
          v139 += 18;
          if (v140 == 56) {
            break;
          }
          if (v9 == ++v137)
          {
            v141 = 0;
            goto LABEL_253;
          }
        }
        v141 = (const char *)&v8[18 * v137 + 2];
LABEL_253:
        snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error setting parameter %d on %s, attenuating the dl final gain by 20dB", InternalBuffers, *(_DWORD *)((char *)__p[0] + v138), v141);
        std::string::basic_string[abi:ne180100]<0>(&v234, "VoiceProcessor_v2.cpp");
        std::to_string(&v238, 5478);
        v142 = std::string::insert(&v238, 0, ":", 1uLL);
        long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
        v239.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v143;
        v142->__r_.__value_.__l.__size_ = 0;
        v142->__r_.__value_.__r.__words[2] = 0;
        v142->__r_.__value_.__r.__words[0] = 0;
        v144 = std::string::append(&v239, ":", 1uLL);
        long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        v230.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v229, "InstantiateAndConfigureEffectAU");
        if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v146 = &v229;
        }
        else {
          v146 = (std::string *)v229.__r_.__value_.__r.__words[0];
        }
        if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v147 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v147 = v229.__r_.__value_.__l.__size_;
        }
        v148 = std::string::append(&v230, (const std::string::value_type *)v146, v147);
        long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        v231.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        v150 = std::string::append(&v231, " ", 1uLL);
        long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v232.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        size_t v152 = strlen(buf);
        v153 = std::string::append(&v232, buf, v152);
        long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
        v233.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v154;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v155 = &v233;
        }
        else {
          v155 = (std::string *)v233.__r_.__value_.__r.__words[0];
        }
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v156 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v156 = v233.__r_.__value_.__l.__size_;
        }
        std::string::append(&v234, (const std::string::value_type *)v155, v156);
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v233.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v232.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v229.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v230.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v239.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        unint64_t v157 = *((void *)this + 2009);
        if (v157 >= *((void *)this + 2010))
        {
          uint64_t v159 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2008, (long long *)&v234);
        }
        else
        {
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)this + 2009), v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v158 = *(_OWORD *)&v234.__r_.__value_.__l.__data_;
            *(void *)(v157 + 16) = *((void *)&v234.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v157 = v158;
          }
          uint64_t v159 = v157 + 24;
          *((void *)this + 2009) = v157 + 24;
        }
        *((void *)this + 2009) = v159;
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v234.__r_.__value_.__l.__data_);
        }
        std::to_string(&v231, InternalBuffers);
        v160 = std::string::append(&v231, " error setting parameter ", 0x19uLL);
        long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
        v232.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v161;
        v160->__r_.__value_.__l.__size_ = 0;
        v160->__r_.__value_.__r.__words[2] = 0;
        v160->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v230, *(_DWORD *)((char *)__p[0] + v138));
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v162 = &v230;
        }
        else {
          v162 = (std::string *)v230.__r_.__value_.__r.__words[0];
        }
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v163 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v163 = v230.__r_.__value_.__l.__size_;
        }
        v164 = std::string::append(&v232, (const std::string::value_type *)v162, v163);
        long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
        v233.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v165;
        v164->__r_.__value_.__l.__size_ = 0;
        v164->__r_.__value_.__r.__words[2] = 0;
        v164->__r_.__value_.__r.__words[0] = 0;
        v166 = std::string::append(&v233, " on ", 4uLL);
        uint64_t v167 = 0;
        long long v168 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
        v234.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v168;
        v166->__r_.__value_.__l.__size_ = 0;
        v166->__r_.__value_.__r.__words[2] = 0;
        v166->__r_.__value_.__r.__words[0] = 0;
        v169 = v8;
        while (1)
        {
          int v170 = *v169;
          v169 += 18;
          if (v170 == 56) {
            break;
          }
          if (v9 == ++v167)
          {
            v171 = 0;
            goto LABEL_298;
          }
        }
        v171 = (const char *)&v8[18 * v167 + 2];
LABEL_298:
        size_t v172 = strlen(v171);
        v173 = std::string::append(&v234, v171, v172);
        std::string::size_type v174 = v173->__r_.__value_.__r.__words[0];
        v239.__r_.__value_.__r.__words[0] = v173->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v239.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v173->__r_.__value_.__r.__words[1] + 7);
        char v175 = HIBYTE(v173->__r_.__value_.__r.__words[2]);
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
        *(void *)&v244[4] = v174;
        *(void *)&v244[12] = v239.__r_.__value_.__r.__words[0];
        *(void *)&v244[19] = *(std::string::size_type *)((char *)v239.__r_.__value_.__r.__words + 7);
        v244[27] = v175;
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v234.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v233.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v230.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v232.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        v176 = (std::pair<std::string, std::string> *)*((void *)this + 2015);
        if ((unint64_t)v176 >= *((void *)this + 2016))
        {
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v177 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)this + 2014, (long long *)buf);
        }
        else
        {
          std::pair<std::string,std::string>::pair[abi:ne180100](*((std::string **)this + 2015), (long long *)buf);
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v177 = v176 + 1;
          *((void *)this + 2015) = v176 + 1;
        }
        *((void *)this + 2015) = v177;
        if ((v244[27] & 0x80000000) != 0) {
          operator delete(*(void **)&v244[4]);
        }
        if ((v244[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        unsigned char *v223 = 1;
        v120 = __p[0];
        v121 = __p[1];
      }
      uint64_t v122 = ++v123;
    }
    while (v123 < (unint64_t)((v121 - v120) >> 3));
  }
  uint64_t v178 = 0;
  v179 = v8;
  v14 = v222;
  while (1)
  {
    int v180 = *v179;
    v179 += 18;
    if (v180 == a2) {
      break;
    }
    if (v9 == ++v178)
    {
      v181 = 0;
      goto LABEL_329;
    }
  }
  v181 = (const char *)&v8[18 * v178 + 2];
LABEL_329:
  inData[0] = 0;
  if (!v181) {
    v181 = "?";
  }
  inData[0] = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s", v181);
  if (inData[0])
  {
    AudioUnitSetProperty(*v222, 0x36u, 0, 0, inData, 8u);
    CFRelease(inData[0]);
    inData[0] = 0;
  }
  if (v221)
  {
    uint64_t v186 = 0;
    while (dword_1BB87C290[v186] != a2)
    {
      if (++v186 == 4) {
        goto LABEL_342;
      }
    }
    *(void *)buf = 0;
    v187 = (char *)this + 24 * v186;
    *(void *)buf = CFNumberCreate(0, kCFNumberSInt32Type, v187 + 8816);
    if (*(void *)buf)
    {
      int InternalBuffers = AudioUnitSetProperty(*v222, 0x1199u, 0, 0, buf, 8u);
      CFRelease(*(CFTypeRef *)buf);
    }
    InternalBuffers |= AudioUnitSetProperty(*v222, 0x1198u, 0, 0, v187 + 8800, 8u);
LABEL_342:
    if (InternalBuffers)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      v188 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v188)
      {
        v189 = v188;
        if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v241 = 1024;
          int v242 = 5517;
          __int16 v243 = 1024;
          *(_DWORD *)v244 = InternalBuffers;
          _os_log_impl(&dword_1BB0CE000, v189, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> instantiateandconfigureeffectau: error (%d) loading FIR coefficients!!! Setting FIR to passthrough", buf, 0x18u);
        }
      }
      v190 = (int *)*((void *)this + 1578);
      if (v190 && (*v225 || v225[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v190, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5517, "InstantiateAndConfigureEffectAU", "instantiateandconfigureeffectau: error (%d) loading FIR coefficients!!! Setting FIR to passthrough", InternalBuffers);
      }
    }
  }
  int InternalBuffers = SetDoNotAllocateInternalBuffers(*v222);
  if (InternalBuffers)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    v191 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v192 = (*v191 ? *v191 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
        __int16 v241 = 1024;
        int v242 = 5523;
        __int16 v243 = 1024;
        *(_DWORD *)v244 = InternalBuffers;
        _os_log_impl(&dword_1BB0CE000, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Unable to set not to allocate internal AU buffers with error (%d)", buf, 0x18u);
      }
    }
    v193 = (int *)*((void *)this + 1578);
    if (v193 && (*v225 || v225[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v193, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5523, "InstantiateAndConfigureEffectAU", "Unable to set not to allocate internal AU buffers with error (%d)", InternalBuffers);
    }
    goto LABEL_404;
  }
  int InternalBuffers = AudioUnitInitialize(*v222);
  if (!InternalBuffers)
  {
    int v73 = 0;
LABEL_405:
    OSType v12 = v220;
    goto LABEL_406;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  v194 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
  if (v194)
  {
    v195 = v194;
    if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
    {
      uint64_t v196 = 0;
      v197 = v8;
      while (1)
      {
        int v198 = *v197;
        v197 += 18;
        if (v198 == a2) {
          break;
        }
        if (v9 == ++v196)
        {
          uint64_t v199 = 0;
          goto LABEL_391;
        }
      }
      uint64_t v199 = (uint64_t)&v8[18 * v196 + 2];
LABEL_391:
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "VoiceProcessor_v2.cpp";
      __int16 v241 = 1024;
      int v242 = 5530;
      __int16 v243 = 2080;
      *(void *)v244 = v199;
      *(_WORD *)&v244[8] = 1024;
      *(_DWORD *)&v244[10] = InternalBuffers;
      _os_log_impl(&dword_1BB0CE000, v195, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error in initializing AU %s error %d", buf, 0x22u);
    }
  }
  v200 = (int *)*((void *)this + 1578);
  if (v200 && (*v225 || v225[1]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v201 = 0;
    v202 = v8;
    while (1)
    {
      int v203 = *v202;
      v202 += 18;
      if (v203 == a2) {
        break;
      }
      if (v9 == ++v201)
      {
        v204 = 0;
        goto LABEL_402;
      }
    }
    v204 = (const char *)&v8[18 * v201 + 2];
LABEL_402:
    CALegacyLog::log(v200, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5530, "InstantiateAndConfigureEffectAU", "Error in initializing AU %s error %d", v204, InternalBuffers);
  }
  if (v224)
  {
LABEL_404:
    int v73 = 21;
    goto LABEL_405;
  }
  uint64_t v206 = 0;
  v207 = v8;
  OSType v12 = v220;
  while (1)
  {
    int v208 = *v207;
    v207 += 18;
    if (v208 == 56) {
      break;
    }
    if (v9 == ++v206)
    {
      v209 = 0;
      goto LABEL_418;
    }
  }
  v209 = (const char *)&v8[18 * v206 + 2];
LABEL_418:
  snprintf(buf, 0x80uLL, "_vp<SERIOUS ERROR>: (%d) error initializing %s, attenuating the dl final gain by 20dB", InternalBuffers, v209);
  std::string::basic_string[abi:ne180100]<0>(&v234, "VoiceProcessor_v2.cpp");
  std::to_string(&v238, 5533);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(":", &v238, &v239);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(":", &v239, &v230);
  std::string::basic_string[abi:ne180100]<0>(&v229, "InstantiateAndConfigureEffectAU");
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v210 = &v229;
  }
  else {
    v210 = (std::string *)v229.__r_.__value_.__r.__words[0];
  }
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v211 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v211 = v229.__r_.__value_.__l.__size_;
  }
  v212 = std::string::append(&v230, (const std::string::value_type *)v210, v211);
  long long v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v213;
  v212->__r_.__value_.__l.__size_ = 0;
  v212->__r_.__value_.__r.__words[2] = 0;
  v212->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" ", &v231, &v232);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, &v232, &v233);
  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v214 = &v233;
  }
  else {
    v214 = (std::string *)v233.__r_.__value_.__r.__words[0];
  }
  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v215 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v215 = v233.__r_.__value_.__l.__size_;
  }
  std::string::append(&v234, (const std::string::value_type *)v214, v215);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  std::vector<std::string>::push_back[abi:ne180100]((uint64_t *)this + 2008, (long long *)&v234);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::to_string(&v232, InternalBuffers);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" error initializing ", &v232, &v233);
  uint64_t v216 = 0;
  v217 = v8;
  while (1)
  {
    int v218 = *v217;
    v217 += 18;
    if (v218 == 56) {
      break;
    }
    if (v9 == ++v216)
    {
      v219 = 0;
      goto LABEL_451;
    }
  }
  v219 = (char *)&v8[18 * v216 + 2];
LABEL_451:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v219, &v233, &v234);
  std::string::basic_string[abi:ne180100]<0>(buf, "vp_spp_error");
  *(std::string *)&v244[4] = v234;
  memset(&v234, 0, sizeof(v234));
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((uint64_t)this + 16112, (long long *)buf);
  std::pair<std::string,std::string>::~pair((uint64_t)buf);
  int v73 = 0;
  unsigned char *v223 = 1;
LABEL_406:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(void *)buf = &v237;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v73)
  {
    BOOL v205 = v73 == 21;
    int v3 = v221;
    if (v205) {
      goto LABEL_20;
    }
  }
  else
  {
    int v3 = v221;
    if (InternalBuffers) {
      goto LABEL_20;
    }
  }
}

void sub_1BB61AB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  std::pair<std::string,std::string>::~pair(v56 - 240);
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v56 - 240) = &a56;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 240));
  _Unwind_Resume(a1);
}

void std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  char v10 = *(AUPropertyItem **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](a1, *(void *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_18:
    }
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v14 = (AUPropertyItem *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v13);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = (char *)v14 + 24 * v15;
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(v9, a2, a3, v14);
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3) < a4)
  {
    uint64_t v17 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(a2, v17, v10);
    v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(v9, v17, a3, *(AUPropertyItem **)(a1 + 8));
LABEL_14:
    *(void *)(a1 + 8) = v16;
    return;
  }
  v18 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(a2, a3, v10);

  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](a1, (uint64_t)v18);
}

void sub_1BB61B130(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BB61B138(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BB61B1BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(std::__split_buffer<std::pair<std::string, std::string>>::pointer *a1, long long *a2)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v21.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9) {
    char v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  v21.__first_ = v10;
  v21.__begin_ = v10 + v4;
  v21.__end_ = v21.__begin_;
  v21.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&v21.__begin_->first, a2);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v12 = *a1;
  unint64_t v11 = (unint64_t)a1[1];
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v21.__begin_;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = v21.__begin_;
  if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 == *a1)
  {
    int64x2_t v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v11 - 48);
      begin[-1].first.__r_.__value_.__r.__words[2] = *(void *)(v11 - 32);
      *(_OWORD *)&begin[-1].first.__r_.__value_.__l.__data_ = v15;
      *(void *)(v11 - 40) = 0;
      *(void *)(v11 - 32) = 0;
      *(void *)(v11 - 48) = 0;
      long long v16 = *(_OWORD *)(v11 - 24);
      begin[-1].second.__r_.__value_.__r.__words[2] = *(void *)(v11 - 8);
      *(_OWORD *)&begin[-1].second.__r_.__value_.__l.__data_ = v16;
      --begin;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      *(void *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 != v12);
    int64x2_t v17 = *(int64x2_t *)a1;
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v18 = v13 + 1;
  *a1 = begin;
  a1[1] = v13 + 1;
  *(int64x2_t *)&v21.__begin_ = v17;
  uint64_t v19 = a1[2];
  a1[2] = v21.__end_cap_.__value_;
  v21.__end_cap_.__value_ = v19;
  v21.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v17.i64[0];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v21);
  return v18;
}

void sub_1BB61B330(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<std::string>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v3 = *(std::pair<std::string, std::string> **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer result = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)a1, a2);
  }
  else
  {
    std::pair<std::string,std::string>::pair[abi:ne180100](*(std::string **)(a1 + 8), a2);
    std::__split_buffer<std::pair<std::string, std::string>>::pointer result = v3 + 1;
    *(void *)(a1 + 8) = v3 + 1;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1BB61B3D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

AUPropertyItem *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,AUPropertyItem *,AUPropertyItem *,AUPropertyItem *,0>(uint64_t a1, uint64_t a2, AUPropertyItem *this)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((AUPropertyItem *)v5 != this)
      {
        int v7 = *(_DWORD *)(v5 + 8);
        size_t v6 = *(unsigned int *)(v5 + 12);
        unint64_t v8 = *(const void **)(v5 + 16);
        *(void *)this = *(void *)v5;
        *((_DWORD *)this + 2) = v7;
        AUPropertyItem::SetData(this, v6, v8);
      }
      v5 += 24;
      this = (AUPropertyItem *)((char *)this + 24);
    }
    while (v5 != a2);
  }
  return this;
}

AUPropertyItem *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AUPropertyItem>,AUPropertyItem*,AUPropertyItem*,AUPropertyItem*>(uint64_t a1, uint64_t a2, uint64_t a3, AUPropertyItem *this)
{
  unint64_t v4 = this;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = this;
  v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *((_DWORD *)v4 + 3) = 0;
      *((void *)v4 + 2) = 0;
      if ((AUPropertyItem *)v6 != v4)
      {
        int v8 = *(_DWORD *)(v6 + 8);
        size_t v7 = *(unsigned int *)(v6 + 12);
        unint64_t v9 = *(const void **)(v6 + 16);
        *(void *)unint64_t v4 = *(void *)v6;
        *((_DWORD *)v4 + 2) = v8;
        AUPropertyItem::SetData(v4, v7, v9);
        unint64_t v4 = v14;
      }
      v6 += 24;
      unint64_t v4 = (AUPropertyItem *)((char *)v4 + 24);
      v14 = v4;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,AUPropertyItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1BB61B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUPropertyItem>,AUPropertyItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 8);
      if (v5)
      {
        free(v5);
        *(void *)(v3 - 8) = 0;
      }
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      v3 -= 24;
    }
  }
  return a1;
}

void VoiceProcessorV2::InstantiateAndConfigureAuxAU(VoiceProcessorV2 *this, int a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  __p = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  if (a2)
  {
    uint64_t v4 = (AudioUnit *)((char *)this + 12464);
    int v5 = VoiceProcessorV2::InstantiateAU(this, 0x61756178u, 0x61787675u, (OpaqueAudioComponentInstance **)this + 1558, 1);
    if (&v48 != (uint64_t *)((char *)this + 7000)) {
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v48, *((void *)this + 875), *((void *)this + 876), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 876) - *((void *)this + 875)) >> 3));
    }
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(&__p, *((uint64_t **)this + 878), *((uint64_t **)this + 879), (uint64_t)(*((void *)this + 879) - *((void *)this + 878)) >> 3);
    if (v5) {
      goto LABEL_57;
    }
    uint64_t v6 = (void *)((char *)this + 12480);
    ioDataSize[0] = 16;
    if (AudioUnitGetProperty(*v4, 0xF9Eu, 0, 0, (char *)this + 12480, ioDataSize))
    {
      void *v6 = 0;
      *((void *)this + 1561) = 0;
    }
    size_t v7 = 0;
    do
    {
      inData[0] = 104;
      if (!AudioUnitGetProperty(*v4, 4u, 0, (AudioUnitElement)v7, outData, inData))
      {
        v8.n128_f32[0] = v56;
        VoiceProcessorV2::VPAuxSetParameterAction(this, *((void **)this + 1558), v7, v8);
      }
      size_t v7 = (OpaqueAudioComponentInstance *)(v7 + 1);
    }
    while (v7 != 19);
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1561))(*((void *)this + 1560), 13, 0, 0, 0, (float)*((unsigned int *)this + 123));
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1561))(*((void *)this + 1560), 14, 0, 0, 0, (float)*((unsigned int *)this + 124));
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1561))(*((void *)this + 1560), 15, 0, 0, 0, (float)*((unsigned int *)this + 127));
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1561))(*((void *)this + 1560), 16, 0, 0, 0, (float)*((unsigned int *)this + 131));
    AudioUnitSetProperty(*((AudioUnit *)this + 1558), 0x36u, 0, 0, (char *)this + 7056, 8u);
  }
  else
  {
    uint64_t v4 = (AudioUnit *)((char *)this + 12472);
    int v9 = VoiceProcessorV2::InstantiateAU(this, 0x61756178u, 0x61787664u, (OpaqueAudioComponentInstance **)this + 1559, 1);
    if (&v48 != (uint64_t *)((char *)this + 10896)) {
      std::vector<AUPropertyItem>::__assign_with_size[abi:ne180100]<AUPropertyItem*,AUPropertyItem*>((uint64_t)&v48, *((void *)this + 1362), *((void *)this + 1363), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1363) - *((void *)this + 1362)) >> 3));
    }
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(&__p, *((uint64_t **)this + 1365), *((uint64_t **)this + 1366), (uint64_t)(*((void *)this + 1366) - *((void *)this + 1365)) >> 3);
    if (v9) {
      goto LABEL_57;
    }
    uint64_t v6 = (void *)((char *)this + 12496);
    ioDataSize[0] = 16;
    if (AudioUnitGetProperty(*v4, 0xF9Eu, 0, 0, (char *)this + 12496, ioDataSize))
    {
      void *v6 = 0;
      *((void *)this + 1563) = 0;
    }
    char v10 = 0;
    do
    {
      inData[0] = 104;
      if (!AudioUnitGetProperty(*v4, 4u, 0, (AudioUnitElement)v10, outData, inData))
      {
        v11.n128_f32[0] = v56;
        VoiceProcessorV2::VPAuxSetParameterAction(this, *((void **)this + 1559), v10, v11);
      }
      char v10 = (OpaqueAudioComponentInstance *)(v10 + 1);
    }
    while (v10 != 16);
    (*((void (**)(void, uint64_t, void, void, void, float))this + 1563))(*((void *)this + 1562), 1, 0, 0, 0, (float)*((unsigned int *)this + 121));
    AudioUnitSetProperty(*((AudioUnit *)this + 1559), 0x36u, 0, 0, (char *)this + 10952, 8u);
  }
  char v12 = *v4;
  if (!*v4) {
    goto LABEL_52;
  }
  *(void *)inData = this;
  long long v44 = VoiceProcessorV2::VPAuxSetParameterAction;
  AudioUnitSetProperty(v12, 0xF9Fu, 0, 0, inData, 0x10u);
  uint64_t v13 = v48;
  if (v49 == v48)
  {
LABEL_47:
    uint64_t v27 = (char *)__p;
    if (v46 != __p)
    {
      uint64_t v28 = 0;
      unint64_t v29 = (v46 - (unsigned char *)__p) >> 3;
      unsigned int v30 = 1;
      do
      {
        long long v31 = (__n128 (*)(void, void, void, void, void, float))v6[1];
        if (v31)
        {
          v32 = (float *)&v27[8 * v28];
          __n128 v33 = v31(*v6, *(unsigned int *)v32, 0, 0, 0, v32[1]);
          v33.n128_f32[0] = v32[1];
          VoiceProcessorV2::VPAuxSetParameterAction(this, *v4, (OpaqueAudioComponentInstance *)*(unsigned int *)v32, v33);
        }
        uint64_t v28 = v30;
        BOOL v26 = v29 > v30++;
      }
      while (v26);
    }
LABEL_52:
    uint64_t v34 = 0;
    unsigned int v35 = vcvtad_u64_f64(*((double *)this + 78));
    v36 = (int *)((char *)this + 4380);
    while (1)
    {
      int v37 = *v36;
      v36 += 2;
      if (v37 == v35) {
        break;
      }
      if (++v34 == 9) {
        goto LABEL_57;
      }
    }
    *((_DWORD *)this + 1113) = *((_DWORD *)this + 2 * v34 + 1096);
    goto LABEL_57;
  }
  uint64_t v14 = 0;
  long long v15 = "downlink";
  if (a2) {
    long long v15 = "uplink";
  }
  size_t v38 = v15;
  unsigned int v16 = 1;
  while (1)
  {
    UInt32 v41 = 0;
    std::string::size_type v42 = 0;
    uint64_t v17 = v13 + 24 * v14;
    AudioUnitElement v19 = *(_DWORD *)(v17 + 8);
    size_t v18 = *(unsigned int *)(v17 + 12);
    int v20 = *(const void **)(v17 + 16);
    *(void *)ioDataSize = *(void *)v17;
    AudioUnitElement v40 = v19;
    AUPropertyItem::SetData((AUPropertyItem *)ioDataSize, v18, v20);
    std::__split_buffer<std::pair<std::string, std::string>> v21 = v42;
    OSStatus v22 = AudioUnitSetProperty(*v4, ioDataSize[0], ioDataSize[1], v40, v42, v41);
    if (v22)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      v23 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v24 = (*v23 ? *v23 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)outData = 136315650;
          *(void *)&outData[4] = "VoiceProcessor_v2.cpp";
          __int16 v52 = 1024;
          int v53 = 5651;
          __int16 v54 = 2080;
          v55 = v38;
          _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InstantiateAndConfigureAuxAU: %s aux au failed to set property", outData, 0x1Cu);
        }
      }
      v25 = (int *)*((void *)this + 1578);
      if (v25 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5651, "InstantiateAndConfigureAuxAU", "InstantiateAndConfigureAuxAU: %s aux au failed to set property", v38);
      }
    }
    if (v21) {
      free(v21);
    }
    if (v22) {
      break;
    }
    uint64_t v14 = v16;
    uint64_t v13 = v48;
    BOOL v26 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3) > v16++;
    if (!v26) {
      goto LABEL_47;
    }
  }
LABEL_57:
  if (__p) {
    operator delete(__p);
  }
  *(void *)outData = &v48;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)outData);
}

void sub_1BB61BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  if (__p) {
    operator delete(__p);
  }
  a25 = &a22;
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::VPAuxSetParameterAction(VoiceProcessorV2 *this, void *a2, OpaqueAudioComponentInstance *a3, __n128 a4)
{
  if (*((void **)this + 1558) == a2)
  {
    switch((int)a3)
    {
      case 0:
        *((_DWORD *)this + 1092) = a4.n128_u32[0];
        break;
      case 1:
        *((_DWORD *)this + 1093) = a4.n128_u32[0];
        if ((*((unsigned char *)this + 4672) & 4) != 0 && (*((unsigned char *)this + 4688) & 4) != 0)
        {
          uint64_t v6 = (OpaqueAudioComponentInstance *)*((void *)this + 413);
          if (!v6
            || (AudioUnitSetParameter(v6, 0x1Bu, 0, 0, a4.n128_f32[0], 0), (*((unsigned char *)this + 4672) & 4) != 0)
            && (*((unsigned char *)this + 4688) & 4) != 0)
          {
            size_t v7 = (OpaqueAudioComponentInstance *)*((void *)this + 413);
            if (v7)
            {
              AudioUnitParameterValue outValue = 0.0;
              AudioUnitGetParameter(v7, 0x1Bu, 0, 0, &outValue);
              uint64_t v8 = *((void *)this + 583);
              if ((v8 & 0x8000000000) != 0 && (*((unsigned char *)this + 4684) & 0x80) != 0)
              {
                int v9 = (OpaqueAudioComponentInstance *)*((void *)this + 386);
                if (v9)
                {
                  AudioUnitSetParameter(v9, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if (v8 & 0x10000000000) != 0 && (*((unsigned char *)this + 4685))
              {
                char v10 = (OpaqueAudioComponentInstance *)*((void *)this + 387);
                if (v10)
                {
                  AudioUnitSetParameter(v10, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x20000000000) != 0 && (*((unsigned char *)this + 4685) & 2) != 0)
              {
                __n128 v11 = (OpaqueAudioComponentInstance *)*((void *)this + 388);
                if (v11)
                {
                  AudioUnitSetParameter(v11, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x40000000000) != 0 && (*((unsigned char *)this + 4685) & 4) != 0)
              {
                char v12 = (OpaqueAudioComponentInstance *)*((void *)this + 389);
                if (v12)
                {
                  AudioUnitSetParameter(v12, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x80000000000) != 0 && (*((unsigned char *)this + 4685) & 8) != 0)
              {
                uint64_t v13 = (OpaqueAudioComponentInstance *)*((void *)this + 390);
                if (v13)
                {
                  AudioUnitSetParameter(v13, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x100000000000) != 0 && (*((unsigned char *)this + 4685) & 0x10) != 0)
              {
                uint64_t v14 = (OpaqueAudioComponentInstance *)*((void *)this + 391);
                if (v14)
                {
                  AudioUnitSetParameter(v14, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x200000000000) != 0 && (*((unsigned char *)this + 4685) & 0x20) != 0)
              {
                long long v15 = (OpaqueAudioComponentInstance *)*((void *)this + 392);
                if (v15)
                {
                  AudioUnitSetParameter(v15, 5u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x20000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x20) != 0)
              {
                unsigned int v16 = (OpaqueAudioComponentInstance *)*((void *)this + 400);
                if (v16)
                {
                  AudioUnitSetParameter(v16, 4u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x40000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x40) != 0)
              {
                uint64_t v17 = (OpaqueAudioComponentInstance *)*((void *)this + 401);
                if (v17)
                {
                  AudioUnitSetParameter(v17, 4u, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x80000000000000) != 0 && (*((unsigned char *)this + 4686) & 0x80) != 0)
              {
                size_t v18 = (OpaqueAudioComponentInstance *)*((void *)this + 402);
                if (v18)
                {
                  AudioUnitSetParameter(v18, 0xFu, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if (v8 & 0x100000000000000) != 0 && (*((unsigned char *)this + 4687))
              {
                AudioUnitElement v19 = (OpaqueAudioComponentInstance *)*((void *)this + 403);
                if (v19)
                {
                  AudioUnitSetParameter(v19, 0xFu, 0, 0, outValue, 0);
                  uint64_t v8 = *((void *)this + 583);
                }
              }
              if ((v8 & 0x2000000000000000) != 0 && (*((unsigned char *)this + 4687) & 0x20) != 0)
              {
                int v20 = (OpaqueAudioComponentInstance *)*((void *)this + 408);
                if (v20) {
                  AudioUnitSetParameter(v20, 0x12u, 0, 0, outValue, 0);
                }
              }
            }
          }
        }
        break;
      case 2:
        *((_DWORD *)this + 1094) = a4.n128_u32[0];
        break;
      case 3:
        *((_DWORD *)this + 1096) = a4.n128_u32[0];
        break;
      case 4:
        *((_DWORD *)this + 1098) = a4.n128_u32[0];
        break;
      case 5:
        *((_DWORD *)this + 1100) = a4.n128_u32[0];
        break;
      case 6:
        *((_DWORD *)this + 1102) = a4.n128_u32[0];
        break;
      case 7:
        *((_DWORD *)this + 1104) = a4.n128_u32[0];
        break;
      case 8:
        *((_DWORD *)this + 1106) = a4.n128_u32[0];
        break;
      case 9:
        *((_DWORD *)this + 1108) = a4.n128_u32[0];
        break;
      case 10:
        *((_DWORD *)this + 1110) = a4.n128_u32[0];
        break;
      case 11:
        *((_DWORD *)this + 1112) = a4.n128_u32[0];
        break;
      case 17:
        *((_DWORD *)this + 350) = a4.n128_u32[0];
        break;
      default:
        return 0;
    }
  }
  else if (*((void *)this + 1559) <= (unint64_t)a2)
  {
    switch((int)a3)
    {
      case 0:
        if (*((unsigned char *)this + 4538)) {
          a4.n128_f32[0] = a4.n128_f32[0] + -20.0;
        }
        *((_DWORD *)this + 1131) = a4.n128_u32[0];
        AudioIssueDetectorClientSetRouteSpecificDownlinkGainAdjustment(a4);
        break;
      case 1:
        return 0;
      case 2:
        *((_DWORD *)this + 1116) = a4.n128_u32[0];
        break;
      case 3:
        *((_DWORD *)this + 1117) = a4.n128_u32[0];
        break;
      case 4:
        *((_DWORD *)this + 1125) = a4.n128_u32[0];
        break;
      case 5:
        *((_DWORD *)this + 1126) = a4.n128_u32[0];
        break;
      case 6:
        *((_DWORD *)this + 1127) = a4.n128_u32[0];
        break;
      case 7:
        *((_DWORD *)this + 1128) = a4.n128_u32[0];
        break;
      case 8:
        if (*((unsigned char *)this + 4538)) {
          a4.n128_f32[0] = a4.n128_f32[0] + -20.0;
        }
        *((_DWORD *)this + 1132) = a4.n128_u32[0];
        break;
      case 9:
        *((_DWORD *)this + 1118) = a4.n128_u32[0];
        break;
      case 10:
        *((_DWORD *)this + 1119) = a4.n128_u32[0];
        break;
      case 11:
        *((_DWORD *)this + 1120) = a4.n128_u32[0];
        break;
      case 12:
        *((_DWORD *)this + 1121) = a4.n128_u32[0];
        break;
      case 13:
        *((_DWORD *)this + 1122) = a4.n128_u32[0];
        break;
      case 14:
        *((_DWORD *)this + 1123) = a4.n128_u32[0];
        break;
      case 15:
        *((_DWORD *)this + 1124) = a4.n128_u32[0];
        *((_DWORD *)this + 563) = 0;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return 0;
}

void AudioIssueDetectorClientSetRouteSpecificDownlinkGainAdjustment(__n128 a1)
{
  unsigned __int32 v1 = a1.n128_u32[0];
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20144);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    uint64_t v2 = (void (*)(__n128))AudioIssueDetectorLibraryLoader(void)::libSym;
    a1.n128_u32[0] = v1;
    v2(a1);
  }
}

float VoiceProcessorV2::DetermineNoiseBasedVolume(VoiceProcessorV2 *this)
{
  AudioUnitParameterValue outValue = 0.0;
  uint64_t v2 = *((void *)this + 583);
  if ((v2 & 0x20000000000000) != 0
    && (*((unsigned char *)this + 4686) & 0x20) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 400)) != 0
    || (v2 & 0x40000000000000) != 0
    && (*((unsigned char *)this + 4686) & 0x40) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 401)) != 0)
  {
    AudioUnitParameterID v4 = 2;
LABEL_25:
    AudioUnitGetParameter(v3, v4, 0, 0, &outValue);
    goto LABEL_26;
  }
  if ((v2 & 0x80000000000000) != 0
    && (*((unsigned char *)this + 4686) & 0x80) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 402)) != 0
    || (v2 & 0x100000000000000) != 0
    && (*((unsigned char *)this + 4687) & 1) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 403)) != 0)
  {
    AudioUnitParameterID v4 = 9;
    goto LABEL_25;
  }
  if ((v2 & 0x8000000000) != 0
    && (*((unsigned char *)this + 4684) & 0x80) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 386)) != 0
    || (v2 & 0x20000000000) != 0
    && (*((unsigned char *)this + 4685) & 2) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 388)) != 0
    || (v2 & 0x80000000000) != 0
    && (*((unsigned char *)this + 4685) & 8) != 0
    && (uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 390)) != 0)
  {
    AudioUnitParameterID v4 = 35;
    goto LABEL_25;
  }
LABEL_26:
  float v5 = (float)(int)(float)(outValue * 4.0) * 0.25;
  uint64_t v6 = (_DWORD *)*((void *)this + 292);
  if (v6 == *((_DWORD **)this + 293))
  {
    float v7 = 70.0;
  }
  else
  {
    float v7 = 64.0;
    if (*v6 != 1885892727) {
      float v7 = 70.0;
    }
  }
  float result = *((float *)this + 3132);
  if (v5 >= v7) {
    float v5 = v7;
  }
  float v9 = *((float *)this + 1125);
  if (v5 <= v9)
  {
    float result = result * *((float *)this + 1128);
  }
  else
  {
    float v10 = (float)(v5 - v9) / (float)(v7 - v9);
    if (v10 > 1.0) {
      float v10 = 1.0;
    }
    if (v10 < 0.0) {
      float v10 = 0.0;
    }
    float v11 = *((float *)this + 1126);
    if (result >= v11)
    {
      float result = (float)(v10 * *((float *)this + 1127)) + (float)(result * *((float *)this + 1128));
    }
    else if (v11 > 0.0)
    {
      float result = (float)((float)(1.0 - (float)((float)(v11 - result) / v11)) * (float)(v10 * *((float *)this + 1127)))
             + (float)(result * *((float *)this + 1128));
    }
  }
  if (result > 1.0) {
    return 1.0;
  }
  return result;
}

uint64_t VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant(VoiceProcessorV2 *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int8 *)this + 60);
  if (*((unsigned char *)this + 60)) {
    int v2 = *((_DWORD *)this + 14);
  }
  BOOL v3 = v2 <= 0;
  unsigned int v4 = v2 - 6001;
  uint64_t v6 = !v3 && v4 < 0xFFFFF830;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  float v7 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    uint64_t v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      float v9 = "false";
      uint64_t v14 = "VoiceProcessor_v2.cpp";
      *(_DWORD *)buf = 136315650;
      if (v6) {
        float v9 = "true";
      }
      __int16 v15 = 1024;
      int v16 = 5998;
      __int16 v17 = 2080;
      size_t v18 = v9;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> use optimized block size for face plant =  %s", buf, 0x1Cu);
    }
  }
  float v10 = (int *)*((void *)this + 1578);
  if (v10 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v11 = "false";
    if (v6) {
      float v11 = "true";
    }
    CALegacyLog::log(v10, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 5998, "ShouldUseOptimizedBlockSizeForFacePlant", "use optimized block size for face plant =  %s", v11);
  }
  return v6;
}

void VoiceProcessorV2::ReportMetrics(VoiceProcessorV2 *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  v42[0] = 0;
  v42[1] = 0;
  UInt32 v41 = (uint64_t *)v42;
  std::to_string(&v40, *((_DWORD *)this + 19));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_config_operation_mode");
  unint64_t v43 = (std::string *)__p;
  int v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  BOOL v3 = (void **)v2 + 7;
  if (*((char *)v2 + 79) < 0) {
    operator delete(*v3);
  }
  *(std::string *)BOOL v3 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v4 = (unsigned int *)*((void *)this + 295);
  if (v4 != *((unsigned int **)this + 296))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *v4);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_input_port");
    unint64_t v43 = &v40;
    float v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v5 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 292);
  if (v6 != *((unsigned int **)this + 293))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *v6);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_output_port");
    unint64_t v43 = &v40;
    float v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v7 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v8 = *((_DWORD *)this + 596);
  if (v8)
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, v8);
    std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_ref_subport");
    unint64_t v43 = &v40;
    float v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
    std::string::__assign_external((std::string *)((char *)v9 + 56), (const std::string::value_type *)__p);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *((_DWORD *)this + 549));
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_config_primary_vocoder");
  unint64_t v43 = &v40;
  float v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)&v43);
  std::string::__assign_external((std::string *)((char *)v10 + 56), (const std::string::value_type *)__p);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((float *)this + 550));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_config_primary_vocoderFs");
  unint64_t v43 = (std::string *)__p;
  float v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  char v12 = (void **)v11 + 7;
  if (*((char *)v11 + 79) < 0) {
    operator delete(*v12);
  }
  *(std::string *)char v12 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 2245));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_chat_enabled");
  unint64_t v43 = (std::string *)__p;
  uint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  uint64_t v14 = (void **)v13 + 7;
  if (*((char *)v13 + 79) < 0) {
    operator delete(*v14);
  }
  *(std::string *)uint64_t v14 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 2244));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_media_chat_enabled");
  unint64_t v43 = (std::string *)__p;
  __int16 v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  int v16 = (void **)v15 + 7;
  if (*((char *)v15 + 79) < 0) {
    operator delete(*v16);
  }
  *(std::string *)int v16 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  unsigned int ChatFlavor = VoiceProcessorV2::GetChatFlavor(this);
  if (ChatFlavor > 2) {
    size_t v18 = "unknown chat flavor";
  }
  else {
    size_t v18 = off_1E623FE10[ChatFlavor];
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_chat_flavor");
  __p[0] = &v40;
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)__p);
  std::string::__assign_external((std::string *)((char *)v19 + 56), v18);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 2268));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_automatic_mic_mode_enabled");
  unint64_t v43 = (std::string *)__p;
  int v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  std::__split_buffer<std::pair<std::string, std::string>> v21 = (void **)v20 + 7;
  if (*((char *)v20 + 79) < 0) {
    operator delete(*v21);
  }
  *(std::string *)std::__split_buffer<std::pair<std::string, std::string>> v21 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 472));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_bypass");
  unint64_t v43 = (std::string *)__p;
  OSStatus v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v23 = (void **)v22 + 7;
  if (*((char *)v22 + 79) < 0) {
    operator delete(*v23);
  }
  *(std::string *)v23 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16460));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_head_tracking_enabled");
  unint64_t v43 = (std::string *)__p;
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v25 = (void **)v24 + 7;
  if (*((char *)v24 + 79) < 0) {
    operator delete(*v25);
  }
  *(std::string *)v25 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((_DWORD *)this + 4114));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_spatial_head_tracking_mode");
  unint64_t v43 = (std::string *)__p;
  BOOL v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  uint64_t v27 = (void **)v26 + 7;
  if (*((char *)v26 + 79) < 0) {
    operator delete(*v27);
  }
  *(std::string *)uint64_t v27 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16360));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_mix_stereo_to_mono");
  unint64_t v43 = (std::string *)__p;
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  unint64_t v29 = (void **)v28 + 7;
  if (*((char *)v28 + 79) < 0) {
    operator delete(*v29);
  }
  *(std::string *)unint64_t v29 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v30 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
  std::to_string(&v40, v30);
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_version");
  unint64_t v43 = (std::string *)__p;
  long long v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v32 = (void **)v31 + 7;
  if (*((char *)v31 + 79) < 0) {
    operator delete(*v32);
  }
  *(std::string *)v32 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16624));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_other_audio_ducking_configuration_enable_advanced_ducking");
  unint64_t v43 = (std::string *)__p;
  __n128 v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  uint64_t v34 = (void **)v33 + 7;
  if (*((char *)v33 + 79) < 0) {
    operator delete(*v34);
  }
  *(std::string *)uint64_t v34 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  int v35 = *((_DWORD *)this + 4157);
  if (v35 > 19)
  {
    if (v35 == 20)
    {
      v36 = "Mid";
      goto LABEL_82;
    }
    if (v35 == 30)
    {
      v36 = "Max";
      goto LABEL_82;
    }
  }
  else
  {
    if (!v35)
    {
      v36 = "Default";
      goto LABEL_82;
    }
    if (v35 == 10)
    {
      v36 = "Min";
      goto LABEL_82;
    }
  }
  v36 = "unknown ducking level";
LABEL_82:
  std::string::basic_string[abi:ne180100]<0>(&v40, "vp_other_audio_ducking_configuration_ducking_level");
  __p[0] = &v40;
  int v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, (void **)&v40.__r_.__value_.__l.__data_, (_OWORD **)__p);
  std::string::__assign_external((std::string *)((char *)v37 + 56), v36);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::to_string(&v40, *((unsigned __int8 *)this + 16688));
  std::string::basic_string[abi:ne180100]<0>(__p, "vp_offload_airpods_noise_suppression_enabled");
  unint64_t v43 = (std::string *)__p;
  size_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v41, __p, (_OWORD **)&v43);
  v39 = (void **)v38 + 7;
  if (*((char *)v38 + 79) < 0) {
    operator delete(*v39);
  }
  *(std::string *)v39 = v40;
  *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
  v40.__r_.__value_.__s.__data_[0] = 0;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)&v41, 5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v42[0]);
}

void sub_1BB61CEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void VoiceProcessorV2::CreateMessenger(VoiceProcessorV2 *this)
{
  int v2 = (std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger;
  if (VoiceProcessorV2::CreateMessenger(void)::sMessenger)
  {
    int v2 = std::__shared_weak_count::lock((std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger);
    BOOL v3 = v2;
    if (v2)
    {
      uint64_t v4 = VoiceProcessorV2::CreateMessenger(void)::sMessenger;
      if (VoiceProcessorV2::CreateMessenger(void)::sMessenger)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        *((void *)this + 2035) = v4;
        float v5 = (std::__shared_weak_count *)*((void *)this + 2036);
        *((void *)this + 2036) = v3;
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return;
      }
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  uint64_t v6 = (long long *)caulk::concurrent::messenger::shared_high_priority((caulk::concurrent::messenger *)v2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v6);
  long long v7 = v6[2];
  *(_OWORD *)&v15[13] = *(long long *)((char *)v6 + 45);
  *(_OWORD *)__int16 v15 = v7;
  std::optional<std::string>::operator=[abi:ne180100]<char const(&)[47],void>(&__p, "com.apple.coreaudio.VoiceProcessor");
  std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy &,caulk::thread::attributes &,void>(v12, 1, (uint64_t)&__p);
  uint64_t v9 = v12[0];
  uint64_t v8 = v12[1];
  *((void *)this + 2035) = v12[0];
  float v10 = (std::__shared_weak_count *)*((void *)this + 2036);
  *((void *)this + 2036) = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    uint64_t v8 = *((void *)this + 2036);
    uint64_t v9 = *((void *)this + 2035);
  }
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  VoiceProcessorV2::CreateMessenger(void)::sMessenger = v9;
  float v11 = (std::__shared_weak_count *)VoiceProcessorV2::CreateMessenger(void)::sMessenger;
  VoiceProcessorV2::CreateMessenger(void)::sMessenger = v8;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    goto LABEL_17;
  }
}

void sub_1BB61D120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

OpaqueAudioComponentInstance *VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(VoiceProcessorV2 *this)
{
  if (!*((unsigned char *)this + 2244) && !*((unsigned char *)this + 16624)
    || (*((unsigned char *)this + 8897) & 0x80) == 0
    || (*((unsigned char *)this + 8905) & 0x80) == 0)
  {
    return 0;
  }
  float result = (OpaqueAudioComponentInstance *)*((void *)this + 453);
  if (result)
  {
    AudioUnitParameterValue outValue = 0.0;
    AudioUnitGetParameter(result, 0x11u, 0, 0, &outValue);
    return (OpaqueAudioComponentInstance *)(outValue == 1.0);
  }
  return result;
}

float VoiceProcessorV2::CalculateDownlinkMixGainDB(VoiceProcessorV2 *this)
{
  float v1 = *((float *)this + 1117);
  float v2 = *((float *)this + 1116);
  float v3 = 1.0;
  if (!*((unsigned char *)this + 2244)) {
    float v3 = *((float *)this + 3135);
  }
  float result = v2 + (float)((float)(v1 - v2) * v3);
  int v5 = *((_DWORD *)this + 4157);
  if (v5)
  {
    if (v5 == 30)
    {
      float v6 = 1.3333;
    }
    else if (v5 == 20)
    {
      float v6 = 0.66667;
    }
    else
    {
      float v6 = 0.33333;
    }
    float v7 = 1.0;
    if (v2 >= 0.0) {
      float v8 = 1.0;
    }
    else {
      float v8 = v6;
    }
    float v9 = v2 * v8;
    if (v1 >= 0.0) {
      float v6 = 1.0;
    }
    float v10 = (float)(v1 * v6) - v9;
    if (!*((unsigned char *)this + 2244)) {
      float v7 = *((float *)this + 3135);
    }
    float v11 = v9 + (float)(v10 * v7);
    if (result <= -7.0)
    {
      if (v11 <= -7.0) {
        return v11;
      }
      else {
        return -7.0;
      }
    }
    else
    {
      return v11;
    }
  }
  return result;
}

void VoiceProcessorV2::GetFarEndVoiceMixType(VoiceProcessorV2 *this, VoiceProcessorV2 *a2)
{
  unsigned int FarEndVoiceMixChannelCount = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(a2);
  if (FarEndVoiceMixChannelCount == 1)
  {
    uint64_t v4 = "mono";
    goto LABEL_5;
  }
  if (FarEndVoiceMixChannelCount == 2)
  {
    uint64_t v4 = "stereo";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(this, v4);
    return;
  }
  std::to_string(&v7, FarEndVoiceMixChannelCount);
  int v5 = std::string::append(&v7, "ch", 2uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *((void *)this + 2) = *((void *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)this = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix(VoiceProcessorV2 *this, uint64_t a2, char a3)
{
  if (!*(unsigned char *)(a2 + 60) || (a3 & 1) != 0)
  {
    VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&v6, a2, a3);
    uint64_t v4 = std::string::append(&v6, "_far_end_voice_mix_", 0x13uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *((void *)this + 2) = *((void *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)this = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(this, "far_end_voice_mix_");
  }
}

std::string *VoiceProcessorV2::GetDNNVADAUStripFilePath(std::string *this, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::append[abi:ne180100]<char [8]>(this, "Generic");
  VoiceProcessorV2::GetVersionNameForTuning(&__p, a2);
  std::__fs::filesystem::path::append[abi:ne180100]<std::string>(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
    std::string::push_back(this, 47);
  }
  return std::string::append[abi:ne180100]<char const*,0>(this, "nnvad.austrip", "");
}

double VoiceProcessorV2::GetGMCoexMitigationAUStripFilePath(VoiceProcessorV2 *this, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  v9.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v8, &v9.__pn_.__r_.__value_.__l.__data_);
  VoiceProcessorV2::GetHardwareModelNameForTuning(&v6, a2, 0);
  __p.__pn_ = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v8, &v9);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  VoiceProcessorV2::GetVersionNameForTuning(&v8, a2);
  std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v9.__pn_, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (std::__fs::filesystem::path::__filename(&v9).__size_) {
    std::string::push_back(&v9.__pn_, 47);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v9.__pn_, "vp-gm-coexkill.austrip", "");
  double result = *(double *)&v9.__pn_.__r_.__value_.__l.__data_;
  *(std::__fs::filesystem::path *)this = v9;
  *((unsigned char *)this + 24) = 1;
  return result;
}

std::string *VoiceProcessorV2::GetAirPodsOffloadAUStripFilePath(std::string *this, char *a2)
{
  uint64_t v4 = a2 + 8;
  if (a2[31] < 0) {
    uint64_t v4 = (void *)*v4;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::append[abi:ne180100]<char [8]>(this, "Generic");
  VoiceProcessorV2::GetVersionNameForTuning(&__p, (uint64_t)a2);
  std::__fs::filesystem::path::append[abi:ne180100]<std::string>(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)a2) == 2 && (a2[16608] & 4) != 0)
  {
    long long v5 = "uplink_echo_airpods_offload_voice_isolation.austrip";
    std::string v6 = "";
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
LABEL_10:
    }
      std::string::push_back(this, 47);
  }
  else
  {
    long long v5 = "uplink_echo_airpods_offload.austrip";
    std::string v6 = "";
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
      goto LABEL_10;
    }
  }
  return std::string::append[abi:ne180100]<char const*,0>(this, v5, v6);
}

unint64_t VoiceProcessorV8::ProcessDownlinkAudio(VoiceProcessorV8 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  std::string v7 = (uint64_t *)a5;
  uint64_t v549 = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path v9 = (uint64_t *)((char *)this + 12552);
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (!*((_DWORD *)this + 620))
  {
    v531 = a2;
    v529 = a3;
    v523 = a4;
    if (!*((unsigned char *)this + 477))
    {
      VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "processdl: not ok to process?!", a3, a4, a5, a6, a7);
      float v10 = (VoiceProcessorV8 *)((char *)this + 2576);
      CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
      goto LABEL_3;
    }
    uint64_t v15 = a6;
    double v13 = 0.0;
    if (*((unsigned char *)this + 15961))
    {
      if (*((void *)this + 1579))
      {
        double v13 = (double)mach_absolute_time() * 0.0000000416666667;
        if (*((double *)this + 1994) == 0.0) {
          *((double *)this + 1994) = v13;
        }
      }
    }
    (*(void (**)(AudioTimeStamp *__return_ptr, VoiceProcessorV8 *, const AudioTimeStamp *))(*(void *)this + 688))(&buf, this, a7);
    AudioTimeStamp v541 = buf;
    if (*((unsigned char *)v9 + 3409))
    {
      if (*(unsigned char *)v9)
      {
        double v16 = *((double *)this + 1568);
        HIDWORD(v17) = HIDWORD(v541.mSampleTime);
        if (v16 != v541.mSampleTime)
        {
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v16, v541.mSampleTime, 2);
          double v17 = *((double *)this + 1568);
          if (v541.mSampleTime < v17)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            size_t v18 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                uint64_t v20 = *((void *)this + 1568);
                LODWORD(buf.mSampleTime) = 136316674;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 76;
                WORD1(buf.mRateScalar) = 2048;
                *(void *)((char *)&buf.mRateScalar + 4) = v20;
                WORD2(buf.mWordClockTime) = 2048;
                *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(void *)&v541.mSampleTime;
                HIWORD(buf.mSMPTETime.mCounter) = 2048;
                *(void *)&buf.mSMPTETime.mType = v541.mHostTime;
                buf.mSMPTETime.mHours = 2048;
                *(Float64 *)&buf.mSMPTETime.mMinutes = v541.mRateScalar;
                HIWORD(buf.mFlags) = 1024;
                buf.mReserved = v541.mFlags;
                _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
              }
            }
            std::__split_buffer<std::pair<std::string, std::string>> v21 = (int *)*((void *)this + 1578);
            if (v21 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v21, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 76, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1568), v541.mSampleTime, v541.mHostTime, v541.mRateScalar, v541.mFlags);
            }
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "sprk sample time jumped backwards");
          }
        }
      }
      else
      {
        *(unsigned char *)std::__fs::filesystem::path v9 = 1;
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v541.mSampleTime, 2);
        double v17 = *((double *)this + 215);
        double v22 = v541.mSampleTime - v17;
        double v23 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)*((unsigned int *)this + 124))
                                    + (float)*((unsigned int *)this + 124))
                            + (float)*((unsigned int *)this + 293))
                    + (float)*((unsigned int *)this + 294));
        if (v541.mSampleTime - v17 != v23)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v24 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 66;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v23;
              WORD2(buf.mWordClockTime) = 2048;
              *(double *)((char *)&buf.mWordClockTime + 6) = v22;
              _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
            }
          }
          BOOL v26 = (int *)*((void *)this + 1578);
          if (v26 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v26, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 66, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v23, v22);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "bad relative mic-ref TS");
        }
      }
      LODWORD(v17) = *((_DWORD *)this + 121);
      *((double *)this + 1568) = v541.mSampleTime + (double)*(unint64_t *)&v17;
    }
    v539 = (char *)this + 2488;
    char v540 = 0;
    char v540 = (*(uint64_t (**)(void))(*((void *)this + 311) + 16))();
    CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3130);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV8 *)((char *)this + 2576));
    UInt32 v27 = *((_DWORD *)this + 121);
    UInt32 NumberOfSourceFrames = v27;
    UInt32 v538 = v27;
    int v28 = *((unsigned __int8 *)v9 + 3409);
    if (*((unsigned char *)v9 + 3409))
    {
      *((unsigned char *)v9 + 385) = 1;
      if (*(_DWORD *)v7 == *((_DWORD *)this + 89))
      {
        unint64_t v29 = (VoiceProcessorV8 *)((char *)this + 328);
LABEL_53:
        if (!v531)
        {
          unsigned int v30 = (AudioBufferList *)*((void *)this + 199);
          UInt32 mNumberBuffers = v30->mNumberBuffers;
          v531 = v30;
          if (mNumberBuffers)
          {
            unint64_t v32 = 0;
            p_mData = &v30->mBuffers[0].mData;
            do
            {
              bzero(*p_mData, *((unsigned int *)p_mData - 1));
              ++v32;
              p_mData += 2;
            }
            while (v32 < v531->mNumberBuffers);
            int v28 = *((unsigned __int8 *)v9 + 3409);
          }
        }
        if (v28 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 1, v15, v531), *((unsigned char *)v9 + 3409))
          || *((unsigned char *)v9 + 3410))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v15, v531, &v541);
        }
        uint64_t v34 = v529;
        if (!v529)
        {
          uint64_t v34 = (AudioBufferList *)*((void *)this + 200);
          if (v34->mNumberBuffers)
          {
            unint64_t v35 = 0;
            v36 = &v34->mBuffers[0].mData;
            do
            {
              int v37 = v34;
              bzero(*v36, *((unsigned int *)v36 - 1));
              uint64_t v34 = v37;
              ++v35;
              v36 += 2;
            }
            while (v35 < v37->mNumberBuffers);
          }
        }
        v529 = v34;
        if (*((unsigned char *)v9 + 3409)
          && (VoiceProcessorV2::InjectionFilesReadSignal(this, 10, v15, v529), *((unsigned char *)v9 + 3409))
          || *((unsigned char *)v9 + 3410))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v15, v529, &v541);
        }
        if (!v523)
        {
          size_t v38 = (AudioBufferList *)*((void *)this + 201);
          UInt32 v39 = v38->mNumberBuffers;
          v523 = v38;
          if (v39)
          {
            unint64_t v40 = 0;
            UInt32 v41 = &v38->mBuffers[0].mData;
            do
            {
              bzero(*v41, *((unsigned int *)v41 - 1));
              ++v40;
              v41 += 2;
            }
            while (v40 < v38->mNumberBuffers);
          }
        }
        if (*((unsigned char *)v9 + 3409)
          && (VoiceProcessorV2::InjectionFilesReadSignal(this, 11, v15, v523), *((unsigned char *)v9 + 3409))
          || *((unsigned char *)v9 + 3410))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v15, v523, &v541);
        }
        UInt32 v27 = *((_DWORD *)this + 121);
LABEL_79:
        v526 = v9;
        if (v27 == v15)
        {
          if (*((_DWORD *)v7 + 3) == *((_DWORD *)this + 88) * v15)
          {
            if (!*((unsigned char *)v9 + 3331)) {
              goto LABEL_227;
            }
            *((unsigned char *)v9 + 3331) = 0;
            double v42 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdownlinkaudio: <block size no longer mismatched>");
            if (v42 <= 1.0)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              std::string::size_type v89 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
              if (v89)
              {
                v90 = v89;
                if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.mSampleTime) = 136315650;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
                  WORD1(buf.mRateScalar) = 2048;
                  *(double *)((char *)&buf.mRateScalar + 4) = v42;
                  _os_log_impl(&dword_1BB0CE000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
                }
              }
              long long v91 = (int *)*((void *)this + 1578);
              if (v91 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v91, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 206, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v42);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              v92 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
              if (v92)
              {
                long long v93 = v92;
                if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                {
                  int v94 = *((_DWORD *)this + 121);
                  LODWORD(buf.mSampleTime) = 136315906;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 207;
                  WORD1(buf.mRateScalar) = 1024;
                  HIDWORD(buf.mRateScalar) = v15;
                  LOWORD(buf.mWordClockTime) = 1024;
                  *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v94;
                  _os_log_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
                }
              }
              uint64_t v49 = (int *)*((void *)this + 1578);
              if (v49 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v50 = 207;
                int v51 = 2;
                goto LABEL_226;
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unint64_t v43 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
              if (v43)
              {
                long long v44 = v43;
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315650;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
                  WORD1(buf.mRateScalar) = 2048;
                  *(double *)((char *)&buf.mRateScalar + 4) = v42;
                  _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
                }
              }
              char v45 = (int *)*((void *)this + 1578);
              if (v45 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v45, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 201, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v42);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v46 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
              if (v46)
              {
                uint64_t v47 = v46;
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  int v48 = *((_DWORD *)this + 121);
                  LODWORD(buf.mSampleTime) = 136315906;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 202;
                  WORD1(buf.mRateScalar) = 1024;
                  HIDWORD(buf.mRateScalar) = v15;
                  LOWORD(buf.mWordClockTime) = 1024;
                  *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v48;
                  _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
                }
              }
              uint64_t v49 = (int *)*((void *)this + 1578);
              if (v49 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v50 = 202;
                int v51 = 1;
LABEL_226:
                CALegacyLog::log(v49, v51, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", v50, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", v15, *((_DWORD *)this + 121));
              }
            }
LABEL_227:
            v95 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 48);
            unsigned int v96 = *((_DWORD *)this + 121);
            if (*((void *)this + 47))
            {
              if (v95)
              {
                UInt32 NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v95);
                v95 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
LABEL_234:
                unsigned int v96 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v95);
                goto LABEL_235;
              }
              v95 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
            }
            else if (!v95)
            {
LABEL_235:
              v97 = (unsigned int *)*((void *)this + 13);
              uint64_t v98 = *v97;
              if ((int)v98 >= 1)
              {
                int v99 = v96 * *((_DWORD *)this + 58);
                long long v100 = (int *)(v97 + 3);
                do
                {
                  *long long v100 = v99;
                  v100 += 4;
                  --v98;
                }
                while (v98);
              }
              UInt32 v536 = v96;
              uint64_t v101 = (*(uint64_t (**)(void))(*((void *)this + 12) + 16))();
              unint64_t v102 = v536;
              UInt32 v538 = v536;
              long long v103 = (const AudioBufferList *)*((void *)this + 13);
              if (*((unsigned char *)v9 + 3409)
                && (VoiceProcessorV2::InjectionFilesReadSignal(this, 0, v536, *((AudioBufferList **)this + 13)),
                    long long v103 = (const AudioBufferList *)*((void *)this + 13),
                    *((unsigned char *)v9 + 3409))
                || *((unsigned char *)v9 + 3410))
              {
                uint64_t v101 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v536, v103, &v541);
                long long v103 = (const AudioBufferList *)*((void *)this + 13);
              }
              uint64_t v104 = *((void *)this + 2003);
              if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20638);
              }
              if (AudioIssueDetectorLibraryLoader(void)::libSym) {
                uint64_t v101 = AudioIssueDetectorLibraryLoader(void)::libSym(v104, 51, 0, v103, v536, &v541);
              }
              if (*((unsigned char *)this + 2082) || *((_DWORD *)this + 19) == 7 && *((float *)this + 3132) == 0.0)
              {
                vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
                v544.Float64 mSampleTime = buf.mSampleTime;
                *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v544);
                buf.mHostTime = v105;
                *(void *)&v547.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v544);
                v547.mHostTime = v106;
                while (1)
                {
                  uint64_t v101 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v547);
                  if ((v101 & 1) == 0) {
                    break;
                  }
                  Float64 mSampleTime = buf.mSampleTime;
                  unsigned int frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
                  vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
                }
              }
              v512 = a7;
              int v109 = *((_DWORD *)this + 55);
              if ((v109 & 0x20) != 0)
              {
                int v112 = *((_DWORD *)this + 59);
                if ((v112 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf.mSampleTime) = 136315394;
                    *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(buf.mHostTime) = 1024;
                    *(_DWORD *)((char *)&buf.mHostTime + 6) = 277;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                  }
                  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
                  *(void *)exceptiounint64_t n = &unk_1F14C8B68;
                  exception[2] = -50;
                }
                MEMORY[0x1F4188790](v101);
                v111 = (int *)((char *)&v510 - v113);
                bzero((char *)&v510 - v113, v114);
              }
              else
              {
                MEMORY[0x1F4188790](v101);
                v111 = (int *)&v508;
                uint64_t v508 = 0;
                long long v509 = 0uLL;
                int v112 = 1;
              }
              unint64_t v115 = 0;
              int *v111 = v112;
              uint64_t v116 = 2;
              if ((v109 & 0x20) != 0) {
                goto LABEL_258;
              }
LABEL_257:
              for (unint64_t i = 1; v115 < i; unint64_t i = *((unsigned int *)this + 59))
              {
                *(_OWORD *)&v111[v116] = *(_OWORD *)(*((void *)this + 13) + v116 * 4);
                ++v115;
                v116 += 4;
                if ((v109 & 0x20) == 0) {
                  goto LABEL_257;
                }
LABEL_258:
                ;
              }
              int v118 = *((_DWORD *)this + 65);
              v511 = (char *)this + 17168;
              if ((v118 & 0x20) != 0)
              {
                int v120 = *((_DWORD *)this + 69);
                if ((v120 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf.mSampleTime) = 136315394;
                    *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(buf.mHostTime) = 1024;
                    *(_DWORD *)((char *)&buf.mHostTime + 6) = 283;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                  }
                  v499 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v499 = &unk_1F14C8B68;
                  v499[2] = -50;
                }
                MEMORY[0x1F4188790](v110);
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v119 = (AudioBufferList *)((char *)&v510 - v121);
                bzero((char *)&v510 - v121, v122);
              }
              else
              {
                MEMORY[0x1F4188790](v110);
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v119 = (AudioBufferList *)&v508;
                uint64_t v508 = 0;
                long long v509 = 0uLL;
                int v120 = 1;
              }
              uint64_t v123 = 0;
              unint64_t v124 = 0;
              v119->UInt32 mNumberBuffers = v120;
              if ((v118 & 0x20) != 0) {
                goto LABEL_268;
              }
LABEL_267:
              for (unint64_t j = 1; v124 < j; unint64_t j = *((unsigned int *)this + 69))
              {
                v126 = (char *)v119 + v123;
                *((void *)v126 + 2) = *(void *)(*((void *)this + 22) + v123 + 16);
                *((_DWORD *)v126 + 2) = 1;
                *((_DWORD *)v126 + 3) = 4 * v102;
                ++v124;
                v123 += 16;
                if ((v118 & 0x20) == 0) {
                  goto LABEL_267;
                }
LABEL_268:
                ;
              }
              if ((*((unsigned char *)this + 8896) & 1) != 0 && (*((unsigned char *)this + 8904) & 1) != 0 && *((void *)this + 438))
              {
                unint64_t v127 = atomic_load((unint64_t *)this + 2056);
                if (v127)
                {
                  *(void *)&v544.Float64 mSampleTime = this;
                  *(void *)&buf.Float64 mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV8::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
                  buf.mHostTime = (UInt64)&v544;
                  *(void *)&v547.Float64 mSampleTime = &buf;
                  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV8 *)((char *)this + 16368), &v547);
                  atomic_fetch_add((atomic_ullong *volatile)this + 2056, -(uint64_t)v127);
                }
                int v128 = *((_DWORD *)this + 576);
                if (v128 != *((_DWORD *)this + 578)) {
                  AudioUnitSetParameter(*((AudioUnit *)this + 438), 0x75696F72u, 0, 0, (float)v128, 0);
                }
                AudioTimeStamp buf = v541;
                LODWORD(v543.mSampleTime) = 512;
                *(void *)&v547.Float64 mSampleTime = v111;
                *(void *)&v544.Float64 mSampleTime = v119;
                LODWORD(v102) = v538;
                AudioUnitProcessMultiple(*((AudioUnit *)this + 438), (AudioUnitRenderActionFlags *)&v543, &buf, v538, 1u, (const AudioBufferList **)&v547, 1u, (AudioBufferList **)&v544);
              }
              else
              {
                *(void *)&v546.UInt32 mNumberBuffers = v119;
                *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v546);
                buf.mHostTime = v159;
                *(void *)&v547.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v546);
                v547.mHostTime = v160;
                while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v547))
                {
                  vp::fill(*(float ***)&buf.mSampleTime, v102, 0.0);
                  *(void *)&v545.UInt32 mNumberBuffers = v111;
                  *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v545);
                  v544.mHostTime = v161;
                  *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v545);
                  v543.mHostTime = v162;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                  {
                    int data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                    v164 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                    long long v165 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                    vDSP_vadd(data, 1, v164, 1, v165, 1, v102);
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                  }
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
                }
              }
              if ((*((unsigned char *)this + 8896) & 2) != 0 && (*((unsigned char *)this + 8904) & 2) != 0)
              {
                uint64_t v129 = *((void *)this + 439);
                if (v129)
                {
                  AudioTimeStamp buf = v541;
                  LODWORD(v544.mSampleTime) = 512;
                  MEMORY[0x1F4188790](v129);
                  long long v509 = 0uLL;
                  uint64_t v508 = 0;
                  long long v509 = *(_OWORD *)(*((void *)this + 22) + 8);
                  LODWORD(v508) = 1;
                  *(void *)&v547.Float64 mSampleTime = &v508;
                  AudioUnitProcessMultiple(v130, (AudioUnitRenderActionFlags *)&v544, &buf, v102, 1u, (const AudioBufferList **)&v547, 0, (AudioBufferList **)&v543);
                }
              }
              uint64_t v131 = (CA::AudioSampleRateConverter **)*((void *)this + 47);
              if (v131)
              {
                VoiceProcessor::SampleRateConverter::Convert(v131, &v538, &NumberOfSourceFrames, v119, *((const AudioBufferList **)this + 23));
                LODWORD(v102) = NumberOfSourceFrames;
                UInt32 v538 = NumberOfSourceFrames;
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v119 = (AudioBufferList *)*((void *)this + 23);
              }
              v528 = v7;
              v532 = v119;
              uint64_t v513 = v15;
              float v133 = VoiceProcessorV2::DetermineNoiseBasedVolume(this);
              unsigned int v134 = *((_DWORD *)this + 130);
              AudioTimeStamp buf = v541;
              if (v134)
              {
                unsigned int v135 = 0;
                unsigned int v136 = 0;
                unsigned int v137 = 4 * (v102 / v134);
                v530 = &v532->mBuffers[0].mData;
                uint64_t v138 = v102 / v134;
                double v139 = (double)(v102 / v134);
                do
                {
                  int v140 = v532;
                  if (v532->mNumberBuffers - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v547.mSampleTime) = 136315394;
                      *(void *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v547.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v547.mHostTime + 6) = 387;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                    }
                    v486 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v486 = &unk_1F14C8B68;
                    v486[2] = -50;
                  }
                  MEMORY[0x1F4188790](v132);
                  v142 = (AudioBufferList *)((char *)&v510 - v141);
                  bzero((char *)&v510 - v141, v143);
                  uint64_t v144 = v140->mNumberBuffers;
                  v142->UInt32 mNumberBuffers = v144;
                  if (v144)
                  {
                    long long v145 = &v142->mBuffers[0].mData;
                    v146 = v530;
                    do
                    {
                      *((_DWORD *)v145 - 2) = 1;
                      *((_DWORD *)v145 - 1) = v137;
                      std::string::size_type v147 = (char *)*v146;
                      v146 += 2;
                      *long long v145 = &v147[4 * v136];
                      v145 += 2;
                      --v144;
                    }
                    while (v144);
                  }
                  uint64_t v148 = *((void *)this + 1112);
                  if ((v148 & 8) != 0 && (*((unsigned char *)this + 8904) & 8) != 0)
                  {
                    long long v149 = (OpaqueAudioComponentInstance *)*((void *)this + 441);
                    if (v149)
                    {
                      AudioTimeStamp v547 = buf;
                      LODWORD(v544.mSampleTime) = 512;
                      AudioUnitProcess(v149, (AudioUnitRenderActionFlags *)&v544, &v547, v138, v142);
                      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v138, v142, &v547);
                      }
                      uint64_t v148 = *((void *)this + 1112);
                    }
                  }
                  if ((v148 & 0x20) != 0 && (*((unsigned char *)this + 8904) & 0x20) != 0)
                  {
                    v150 = (OpaqueAudioComponentInstance *)*((void *)this + 443);
                    if (v150)
                    {
                      AudioTimeStamp v547 = buf;
                      LODWORD(v544.mSampleTime) = 512;
                      AudioUnitProcess(v150, (AudioUnitRenderActionFlags *)&v544, &v547, v138, v142);
                      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x56u, v138, v142, &v547);
                      }
                      uint64_t v148 = *((void *)this + 1112);
                    }
                  }
                  long long v151 = *(_OWORD *)&buf.mRateScalar;
                  *(_OWORD *)((char *)this + 17688) = *(_OWORD *)&buf.mSampleTime;
                  *(_OWORD *)((char *)this + 17704) = v151;
                  long long v152 = *(_OWORD *)&buf.mSMPTETime.mHours;
                  *(_OWORD *)((char *)this + 17720) = *(_OWORD *)&buf.mSMPTETime.mSubframes;
                  *(_OWORD *)((char *)this + 17736) = v152;
                  if ((~(_BYTE)v148 & 0xC0) != 0
                    || ((*((unsigned char *)this + 8904) & 0x40) == 0 || !*((void *)this + 444)
                      ? ((*((unsigned char *)this + 8904) & 0x80) != 0
                       ? (BOOL v153 = *((void *)this + 445) != 0)
                       : (BOOL v153 = 0))
                      : (BOOL v153 = 1),
                        !*((unsigned char *)this + 480)
                      ? (v132 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, AudioBufferList *, BOOL, uint64_t))(*(void *)this + 776))(this, v142, v142, v153, v138)): (*(void *)&v547.Float64 mSampleTime = v142, *(void *)&v544.Float64 mSampleTime = v142, v132 = BlockProcessor::Process(*((BlockProcessor **)this + 2210), v138, (const AudioBufferList **)&v547, (AudioBufferList **)&v544)), !v153))
                  {
                    uint64_t v132 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, AudioBufferList *, void, uint64_t))(*(void *)this + 776))(this, v142, v142, 0, v138);
                  }
                  uint64_t v154 = *((void *)this + 1112);
                  if (v154 & 0x100) != 0 && (*((unsigned char *)this + 8905))
                  {
                    uint64_t v132 = *((void *)this + 446);
                    if (v132)
                    {
                      AudioTimeStamp v547 = buf;
                      AudioUnitSetParameter((AudioUnit)v132, 5u, 0, 0, v133, 0);
                      LODWORD(v544.mSampleTime) = 512;
                      uint64_t v132 = AudioUnitProcess(*((AudioUnit *)this + 446), (AudioUnitRenderActionFlags *)&v544, &v547, v138, v142);
                      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
                        uint64_t v132 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v138, v142, &v547);
                      }
                      uint64_t v154 = *((void *)this + 1112);
                    }
                  }
                  if ((v154 & 0x200) != 0 && (*((unsigned char *)this + 8905) & 2) != 0)
                  {
                    uint64_t v132 = *((void *)this + 447);
                    if (v132)
                    {
                      AudioTimeStamp v547 = buf;
                      LODWORD(v544.mSampleTime) = 512;
                      uint64_t v132 = AudioUnitProcess((AudioUnit)v132, (AudioUnitRenderActionFlags *)&v544, &v547, v138, v142);
                      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
                        uint64_t v132 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x57u, v138, v142, &v547);
                      }
                      uint64_t v154 = *((void *)this + 1112);
                    }
                  }
                  if ((v154 & 0x4000) != 0 && (*((unsigned char *)this + 8905) & 0x40) != 0)
                  {
                    if (*((void *)this + 452))
                    {
                      uint64_t v132 = (*(uint64_t (**)(VoiceProcessorV8 *, AudioBufferList *, uint64_t, AudioTimeStamp *))(*(void *)this + 672))(this, v142, v138, &buf);
                      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
                        uint64_t v132 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v138, v142, &buf);
                      }
                    }
                  }
                  v136 += v138;
                  buf.Float64 mSampleTime = buf.mSampleTime + v139;
                  ++v135;
                }
                while (v135 < *((_DWORD *)this + 130));
              }
              int v155 = *((_DWORD *)this + 75);
              if ((v155 & 0x20) != 0)
              {
                int v157 = *((_DWORD *)this + 79);
                std::__fs::filesystem::path v9 = v526;
                long long v158 = v532;
                std::string v7 = v528;
                if ((v157 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v547.mSampleTime) = 136315394;
                    *(void *)((char *)&v547.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                    WORD2(v547.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v547.mHostTime + 6) = 463;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v547, 0x12u);
                  }
                  v500 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v500 = &unk_1F14C8B68;
                  v500[2] = -50;
                }
                MEMORY[0x1F4188790](v132);
                std::string::size_type v156 = (int *)((char *)&v510 - v166);
                bzero((char *)&v510 - v166, v167);
              }
              else
              {
                MEMORY[0x1F4188790](v132);
                std::string::size_type v156 = (int *)&v508;
                uint64_t v508 = 0;
                long long v509 = 0uLL;
                int v157 = 1;
                std::__fs::filesystem::path v9 = v526;
                long long v158 = v532;
                std::string v7 = v528;
              }
              *std::string::size_type v156 = v157;
              unint64_t v169 = *((void *)this + 47);
              uint64_t v168 = *((void *)this + 48);
              if (v168)
              {
                if (v169)
                {
                  UInt32 NumberOfSourceFrames = *((_DWORD *)this + 121);
                  uint64_t v168 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v168, &v538, &NumberOfSourceFrames, v158, *((const AudioBufferList **)this + 24));
                  unint64_t v170 = 0;
                  int v171 = *((_DWORD *)this + 75);
                  uint64_t v172 = 2;
                  v173 = v529;
                  std::string::size_type v174 = v531;
                  if ((v171 & 0x20) != 0) {
                    goto LABEL_353;
                  }
LABEL_352:
                  for (unint64_t k = 1; v170 < k; unint64_t k = *((unsigned int *)this + 79))
                  {
                    *(_OWORD *)&v156[v172] = *(_OWORD *)(*((void *)this + 24) + v172 * 4);
                    ++v170;
                    v172 += 4;
                    if ((v171 & 0x20) == 0) {
                      goto LABEL_352;
                    }
LABEL_353:
                    ;
                  }
                }
                else
                {
                  uint64_t v168 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v168, &v538, &NumberOfSourceFrames, v158, *((const AudioBufferList **)this + 24));
                  unint64_t v181 = 0;
                  int v182 = *((_DWORD *)this + 75);
                  uint64_t v183 = 2;
                  v173 = v529;
                  std::string::size_type v174 = v531;
                  if ((v182 & 0x20) != 0) {
                    goto LABEL_366;
                  }
LABEL_365:
                  for (unint64_t m = 1; v181 < m; unint64_t m = *((unsigned int *)this + 79))
                  {
                    *(_OWORD *)&v156[v183] = *(_OWORD *)(*((void *)this + 24) + v183 * 4);
                    ++v181;
                    v183 += 4;
                    if ((v182 & 0x20) == 0) {
                      goto LABEL_365;
                    }
LABEL_366:
                    ;
                  }
                }
                UInt32 v538 = NumberOfSourceFrames;
              }
              else if (v169)
              {
                unint64_t v176 = 0;
                mBuffers = v158->mBuffers;
                uint64_t v178 = v156 + 2;
                v173 = v529;
                std::string::size_type v174 = v531;
                if ((v155 & 0x20) != 0) {
                  goto LABEL_360;
                }
LABEL_359:
                for (unint64_t n = 1; v176 < n; unint64_t n = *((unsigned int *)this + 79))
                {
                  long long v180 = (__int128)*mBuffers++;
                  *v178++ = v180;
                  ++v176;
                  if ((v155 & 0x20) == 0) {
                    goto LABEL_359;
                  }
LABEL_360:
                  ;
                }
              }
              else
              {
                v385 = v158->mBuffers;
                v386 = v156 + 2;
                v173 = v529;
                std::string::size_type v174 = v531;
                if ((v155 & 0x20) != 0) {
                  goto LABEL_677;
                }
LABEL_676:
                for (iunint64_t i = 1; v169 < ii; iunint64_t i = *((unsigned int *)this + 79))
                {
                  long long v388 = (__int128)*v385++;
                  *v386++ = v388;
                  ++v169;
                  if ((v155 & 0x20) == 0) {
                    goto LABEL_676;
                  }
LABEL_677:
                  ;
                }
              }
              AudioTimeStamp v547 = v541;
              if (*((_DWORD *)this + 130))
              {
                unsigned int v185 = 0;
                LODWORD(v530) = 0;
                v518 = &v173->mBuffers[0].mData;
                v519 = (uint64_t *)(v156 + 4);
                v516 = &v174->mBuffers[0].mData;
                v517 = &v523->mBuffers[0].mData;
                v514 = (VoiceProcessorV8 *)((char *)this + 2744);
                v515 = v7 + 2;
                uint64_t v186 = 1;
                double v187 = -8589940800.0;
                while (1)
                {
                  if ((*((unsigned char *)this + 300) & 0x20) != 0)
                  {
                    int v191 = *((_DWORD *)this + 79);
                    if ((v191 - 65) <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v544.mSampleTime) = 136315394;
                        *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                        WORD2(v544.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v544.mHostTime + 6) = 512;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                      }
                      v497 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v497 = &unk_1F14C8B68;
                      v497[2] = -50;
                    }
                    MEMORY[0x1F4188790](v168);
                    v190 = (AudioBufferList *)((char *)&v510 - v192);
                    bzero((char *)&v510 - v192, v193);
                    v189 = v529;
                  }
                  else
                  {
                    MEMORY[0x1F4188790](v168);
                    v190 = (AudioBufferList *)&v508;
                    uint64_t v508 = 0;
                    long long v509 = 0uLL;
                    int v191 = 1;
                  }
                  v190->UInt32 mNumberBuffers = v191;
                  v194 = v523;
                  if (v189)
                  {
                    int v195 = v189->mNumberBuffers;
                    if (v189->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v544.mSampleTime) = 136315394;
                        *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                        WORD2(v544.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v544.mHostTime + 6) = 514;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                      }
                      v494 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v494 = &unk_1F14C8B68;
                      v494[2] = -50;
                    }
                  }
                  else
                  {
                    int v195 = 1;
                  }
                  MEMORY[0x1F4188790](v188);
                  v197 = (int *)((char *)&v510 - v196);
                  bzero((char *)&v510 - v196, v198);
                  v528 = (uint64_t *)v197;
                  int *v197 = v195;
                  if (v194)
                  {
                    int v200 = v194->mNumberBuffers;
                    if (v194->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v544.mSampleTime) = 136315394;
                        *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                        WORD2(v544.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v544.mHostTime + 6) = 516;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                      }
                      v490 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v490 = &unk_1F14C8B68;
                      v490[2] = -50;
                    }
                  }
                  else
                  {
                    int v200 = 1;
                  }
                  MEMORY[0x1F4188790](v199);
                  v202 = (int *)((char *)&v510 - v201);
                  bzero((char *)&v510 - v201, v203);
                  v527 = v202;
                  int *v202 = v200;
                  if (v531)
                  {
                    UInt32 v205 = v531->mNumberBuffers;
                    if (v531->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v544.mSampleTime) = 136315394;
                        *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                        WORD2(v544.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v544.mHostTime + 6) = 518;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                      }
                      v492 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v492 = &unk_1F14C8B68;
                      v492[2] = -50;
                    }
                  }
                  else
                  {
                    UInt32 v205 = 1;
                  }
                  MEMORY[0x1F4188790](v204);
                  v207 = (UInt32 *)((char *)&v510 - v206);
                  bzero((char *)&v510 - v206, v208);
                  UInt32 *v207 = v205;
                  int v210 = *((unsigned __int8 *)this + 2244);
                  std::string::size_type v211 = (_DWORD *)*((void *)this + 203);
                  v532 = v190;
                  if (!v210) {
                    goto LABEL_395;
                  }
                  if (!v211) {
                    goto LABEL_398;
                  }
                  if (*v211) {
                    break;
                  }
LABEL_396:
                  unsigned int v214 = *v211;
                  if ((*v211 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 524;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                    }
                    v496 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v496 = &unk_1F14C8B68;
                    v496[2] = -50;
                  }
LABEL_399:
                  unsigned int v520 = v185;
                  MEMORY[0x1F4188790](v209);
                  uint64_t v216 = (UInt32 *)((char *)&v510 - v215);
                  bzero((char *)&v510 - v215, v217);
                  v525 = v216;
                  *uint64_t v216 = v214;
                  uint64_t v219 = *(unsigned int *)v7;
                  if ((v219 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 526;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                    }
                    v487 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v487 = &unk_1F14C8B68;
                    v487[2] = -50;
                  }
                  MEMORY[0x1F4188790](v218);
                  int v221 = (_DWORD *)((char *)&v510 - v220);
                  bzero((char *)&v510 - v220, v222);
                  *int v221 = v219;
                  uint64_t v223 = v532->mNumberBuffers;
                  if (v223)
                  {
                    int v224 = 4 * *((_DWORD *)this + 129);
                    uint64_t v225 = v530;
                    v226 = &v532->mBuffers[0].mData;
                    v227 = v519;
                    do
                    {
                      *((_DWORD *)v226 - 2) = 1;
                      *((_DWORD *)v226 - 1) = v224;
                      uint64_t v228 = *v227;
                      v227 += 2;
                      int *v226 = (void *)(v228 + 4 * v225);
                      v226 += 2;
                      --v223;
                    }
                    while (v223);
                  }
                  std::string v229 = v529;
                  uint64_t v230 = *(unsigned int *)v528;
                  std::string v231 = v531;
                  if (v230)
                  {
                    int v232 = 4 * *((_DWORD *)this + 129);
                    uint64_t v233 = v530;
                    std::string v234 = v528 + 2;
                    v235 = v518;
                    do
                    {
                      *((_DWORD *)v234 - 2) = 1;
                      *((_DWORD *)v234 - 1) = v232;
                      if (v229) {
                        uint64_t v236 = (uint64_t)*v235 + 4 * v233;
                      }
                      else {
                        uint64_t v236 = 0;
                      }
                      *std::string v234 = v236;
                      v234 += 2;
                      v235 += 2;
                      --v230;
                    }
                    while (v230);
                  }
                  uint64_t v237 = *v527;
                  if (v237)
                  {
                    int v238 = 4 * *((_DWORD *)this + 129);
                    uint64_t v239 = v530;
                    v240 = (uint64_t *)(v527 + 4);
                    __int16 v241 = v517;
                    do
                    {
                      *((_DWORD *)v240 - 2) = 1;
                      *((_DWORD *)v240 - 1) = v238;
                      if (v194) {
                        uint64_t v242 = (uint64_t)*v241 + 4 * v239;
                      }
                      else {
                        uint64_t v242 = 0;
                      }
                      uint64_t *v240 = v242;
                      v240 += 2;
                      v241 += 2;
                      --v237;
                    }
                    while (v237);
                  }
                  uint64_t v243 = *v207;
                  if (v243)
                  {
                    int v244 = 4 * *((_DWORD *)this + 129);
                    uint64_t v245 = v530;
                    v246 = (uint64_t *)(v207 + 4);
                    v247 = v516;
                    do
                    {
                      *((_DWORD *)v246 - 2) = 1;
                      *((_DWORD *)v246 - 1) = v244;
                      if (v231) {
                        uint64_t v248 = (uint64_t)*v247 + 4 * v245;
                      }
                      else {
                        uint64_t v248 = 0;
                      }
                      uint64_t *v246 = v248;
                      v246 += 2;
                      v247 += 2;
                      --v243;
                    }
                    while (v243);
                  }
                  if (v219)
                  {
                    int v249 = 4 * *((_DWORD *)this + 129);
                    uint64_t v250 = v530;
                    v251 = (uint64_t *)(v221 + 4);
                    v252 = v515;
                    do
                    {
                      *((_DWORD *)v251 - 2) = 1;
                      *((_DWORD *)v251 - 1) = v249;
                      if (v7) {
                        uint64_t v253 = *v252 + 4 * v250;
                      }
                      else {
                        uint64_t v253 = 0;
                      }
                      uint64_t *v251 = v253;
                      v251 += 2;
                      v252 += 2;
                      --v219;
                    }
                    while (v219);
                  }
                  if (v214)
                  {
                    int v254 = 4 * *((_DWORD *)this + 129);
                    uint64_t v255 = v530;
                    uint64_t v256 = v214;
                    v257 = v525 + 4;
                    v258 = v211 + 4;
                    do
                    {
                      *(v257 - 2) = 1;
                      *(v257 - 1) = v254;
                      if (v211) {
                        uint64_t v259 = *v258 + 4 * v255;
                      }
                      else {
                        uint64_t v259 = 0;
                      }
                      *(void *)v257 = v259;
                      v257 += 4;
                      v258 += 2;
                      --v256;
                    }
                    while (v256);
                  }
                  if (v231 && *((unsigned char *)this + 2244))
                  {
                    CopyAllBuffersABL(v525, v531);
                    std::string v229 = v529;
                  }
                  if (v229) {
                    v260 = (AudioBufferList *)v528;
                  }
                  else {
                    v260 = 0;
                  }
                  MonoABL = GetMonoABL(v260, &v546, *((unsigned int *)this + 129));
                  if (v194) {
                    v262 = (AudioBufferList *)v527;
                  }
                  else {
                    v262 = 0;
                  }
                  v263 = GetMonoABL(v262, &v545, *((unsigned int *)this + 129));
                  v264 = v7;
                  if (v531) {
                    v265 = (AudioBufferList *)v207;
                  }
                  else {
                    v265 = 0;
                  }
                  v266 = GetMonoABL(v265, &v535, *((unsigned int *)this + 129));
                  uint64_t v267 = 0;
                  *(void *)&v544.Float64 mSampleTime = 10;
                  v544.mHostTime = (UInt64)v532;
                  *(void *)&v544.mRateScalar = 11;
                  v524 = v266;
                  v544.mWordClockTime = (UInt64)v266;
                  *(void *)&v544.mSMPTETime.mSubframes = 12;
                  Float64 v521 = *(double *)&v263;
                  Float64 v522 = *(double *)&MonoABL;
                  *(void *)&v544.mSMPTETime.mType = MonoABL;
                  *(void *)&v544.mSMPTETime.mHours = 13;
                  *(void *)&v544.mFlags = v263;
                  do
                  {
                    v268 = (unsigned int *)&v544 + 4 * v267;
                    uint64_t v269 = *v268;
                    v270 = (AudioBufferList *)*((void *)v268 + 1);
                    if (!v270)
                    {
                      v270 = (AudioBufferList *)*((void *)this + 202);
                      if (v270->mNumberBuffers)
                      {
                        unint64_t v271 = 0;
                        v272 = &v270->mBuffers[0].mData;
                        do
                        {
                          bzero(*v272, *((unsigned int *)v272 - 1));
                          ++v271;
                          v272 += 2;
                        }
                        while (v271 < v270->mNumberBuffers);
                        v270 = (AudioBufferList *)*((void *)this + 202);
                      }
                    }
                    BOOL v273 = VoiceProcessorV2::VPUseAUInProcess(this, v269, 0);
                    if (v270) {
                      BOOL v274 = v273;
                    }
                    else {
                      BOOL v274 = 0;
                    }
                    if (v274)
                    {
                      AudioTimeStamp v543 = v547;
                      LODWORD(v542[0]) = 512;
                      AudioUnitProcess(*((AudioUnit *)this + v269 + 438), (AudioUnitRenderActionFlags *)v542, &v543, *((_DWORD *)this + 129), v270);
                    }
                    ++v267;
                  }
                  while (v267 != 4);
                  uint64_t v275 = *((void *)this + 1112);
                  if ((v275 & 0x40000000) != 0)
                  {
                    uint64_t v278 = *((void *)this + 1113);
                    std::string v7 = v264;
                    uint64_t v11 = (uint64_t)v532;
                    unint64_t v277 = (unint64_t)v524;
                    if ((v278 & 0x40000000) == 0) {
                      goto LABEL_460;
                    }
                    v276 = 0;
                    v302 = v526;
                    if (!*((void *)this + 468) || (v275 & v278 & 0x80000000) == 0) {
                      goto LABEL_461;
                    }
                    if (*((void *)this + 469)
                      && (v303 = (uint64_t *)v514, vp::Audio_Buffer::get_audio_buffer_list(v514)))
                    {
                      vp::Audio_Buffer::prepare(v303, *((_DWORD *)this + 129));
                      audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v303);
                      if (*audio_buffer_list)
                      {
                        v305 = audio_buffer_list;
                        unint64_t v306 = 0;
                        v307 = (void **)(audio_buffer_list + 4);
                        do
                        {
                          bzero(*v307, *((unsigned int *)v307 - 1));
                          ++v306;
                          v307 += 2;
                        }
                        while (v306 < *v305);
                      }
                      v276 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v514);
                      LODWORD(v543.mSampleTime) = 512;
                      AudioTimeStamp v544 = v547;
                      AudioUnitSetParameter(*((AudioUnit *)this + 468), 1u, 0, 0, (float)(*((float *)this + 3132) + -1.0) * 24.0, 0);
                      AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v276);
                      UInt32 v308 = *((_DWORD *)this + 129);
                      unint64_t v277 = (unint64_t)v524;
                      if (*((unsigned char *)v302 + 3409) || *((unsigned char *)v302 + 3410))
                      {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, *((unsigned int *)this + 129), v276, &v547);
                        UInt32 v308 = *((_DWORD *)this + 129);
                      }
                      AudioTimeStamp v544 = v547;
                      LODWORD(v543.mSampleTime) = 512;
                      AudioUnitProcess(*((AudioUnit *)this + 469), (AudioUnitRenderActionFlags *)&v543, &v544, v308, v276);
                      if (*((unsigned char *)v302 + 3409) || *((unsigned char *)v302 + 3410))
                      {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, *((unsigned int *)this + 129), v276, &v544);
                        if (*((unsigned char *)v302 + 3409) || *((unsigned char *)v302 + 3410)) {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, *((unsigned int *)this + 129), v276, &v544);
                        }
                      }
                    }
                    else
                    {
LABEL_460:
                      v276 = 0;
                    }
                  }
                  else
                  {
                    v276 = 0;
                    std::string v7 = v264;
                    uint64_t v11 = (uint64_t)v532;
                    unint64_t v277 = (unint64_t)v524;
                  }
LABEL_461:
                  if (*((unsigned char *)this + 2244)) {
                    v279 = (AudioBufferList *)v221;
                  }
                  else {
                    v279 = (AudioBufferList *)v11;
                  }
                  if (*((unsigned char *)this + 2244)) {
                    unint64_t v277 = (unint64_t)v525;
                  }
                  v280 = v276;
                  if (v277) {
                    v281 = (const AudioBufferList *)v277;
                  }
                  else {
                    v281 = v276;
                  }
                  v532 = v281;
                  uint64_t v282 = *((void *)this + 1112);
                  if ((v282 & 0x8000000) != 0 && ((*((unsigned char *)this + 8907) & 8) != 0 || *((unsigned char *)this + 472)) && v277)
                  {
                    float v283 = VoiceProcessorV2::CalculateDownlinkMixGainDB(this);
                    *((float *)this + 1115) = v283;
                    LODWORD(v533) = 0;
                    LODWORD(v533) = __exp10f(v283 / 20.0);
                    v542[0] = (AudioBufferList *)v277;
                    *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v542);
                    v544.mHostTime = v284;
                    *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v542);
                    v543.mHostTime = v285;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                    {
                      unint64_t v277 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                      v286 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                      vDSP_vsmul((const float *)v277, 1, (const float *)&v533, v286, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                    }
                    uint64_t v282 = *((void *)this + 1112);
                  }
                  if ((v282 & 0x10000000) != 0)
                  {
                    unint64_t v12 = (unint64_t)v524;
                    if ((*((unsigned char *)this + 8907) & 0x10) != 0)
                    {
                      (*(void (**)(VoiceProcessorV8 *, uint64_t, UInt32 *))(*(void *)this + 680))(this, v11, v525);
                      uint64_t v282 = *((void *)this + 1112);
                    }
                  }
                  else
                  {
                    unint64_t v12 = (unint64_t)v524;
                  }
                  if ((v282 & 0x8000) != 0
                    && (uint64_t v287 = *((void *)this + 1113), (v287 & 0x8000) != 0)
                    && (v288 = (OpaqueAudioComponentInstance *)*((void *)this + 453)) != 0)
                  {
                    int v289 = *((unsigned __int8 *)this + 2244);
                    AudioTimeStamp v544 = v547;
                    LODWORD(v533) = 512;
                    UInt64 v290 = (UInt64)v528;
                    if (v529 == 0 || v289 == 0) {
                      UInt64 v290 = *(void *)&v522;
                    }
                    *(void *)&v543.Float64 mSampleTime = v11;
                    v543.mHostTime = v290;
                    Float64 v291 = *(double *)&v527;
                    if (v523 == 0 || v289 == 0) {
                      Float64 v291 = v521;
                    }
                    v292 = v525;
                    if (v531 == 0 || v289 == 0) {
                      v292 = (UInt32 *)v12;
                    }
                    v543.mRateScalar = v291;
                    v543.mWordClockTime = (UInt64)v292;
                    *(void *)&v543.mSMPTETime.mSubframes = v280;
                    if ((v282 & v287 & 2) != 0)
                    {
                      v309 = (OpaqueAudioComponentInstance *)*((void *)this + 439);
                      unint64_t v12 = (unint64_t)v526;
                      if (v309 && (v289 || *((unsigned char *)v526 + 4072)))
                      {
                        LODWORD(v542[0]) = 0;
                        OSStatus Parameter = AudioUnitGetParameter(v309, 0x73707062u, 0, 0, (AudioUnitParameterValue *)v542);
                        BOOL v312 = *(float *)v542 == 1.0 && Parameter == 0;
                        LODWORD(v534) = v312;
                        AudioUnitSetProperty(*((AudioUnit *)this + 453), 0x6164756Bu, 0, 0, &v534, 4u);
                        v288 = (OpaqueAudioComponentInstance *)*((void *)this + 453);
                      }
                    }
                    else
                    {
                      unint64_t v12 = (unint64_t)v526;
                    }
                    v542[0] = v279;
                    v542[1] = (AudioBufferList *)v532;
                    AudioUnitProcessMultiple(v288, (AudioUnitRenderActionFlags *)&v533, &v544, *((_DWORD *)this + 129), 5u, (const AudioBufferList **)&v543, 2u, v542);
                    if (*(unsigned char *)(v12 + 3409) || *(unsigned char *)(v12 + 3410))
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, *((unsigned int *)this + 129), v279, &v544);
                      if (*(unsigned char *)(v12 + 3409) || *(unsigned char *)(v12 + 3410)) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, *((unsigned int *)this + 129), v532, &v544);
                      }
                    }
                  }
                  else
                  {
                    if (v522 != 0.0)
                    {
                      float v534 = 0.44668;
                      v544.Float64 mSampleTime = v522;
                      v542[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v544, 0);
                      Float64 v533 = *(double *)&v279;
                      *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v533);
                      v544.mHostTime = v293;
                      *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v533);
                      v543.mHostTime = v294;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                      {
                        unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v542);
                        unint64_t v277 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        v295 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        vDSP_vsma((const float *)v12, 1, &v534, (const float *)v277, 1, v295, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                      }
                    }
                    if (v521 != 0.0)
                    {
                      v544.Float64 mSampleTime = v521;
                      v542[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v544, 0);
                      Float64 v533 = *(double *)&v279;
                      *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v533);
                      v544.mHostTime = v296;
                      *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v533);
                      v543.mHostTime = v297;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                      {
                        unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v542);
                        unint64_t v277 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        v298 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        vDSP_vadd((const float *)v12, 1, (const float *)v277, 1, v298, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                      }
                    }
                    if (v280 && v280 != v532)
                    {
                      *(void *)&v544.Float64 mSampleTime = v280;
                      v542[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v544, 0);
                      vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v544, v532);
                      Float64 v533 = v544.mSampleTime;
                      *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v533);
                      v544.mHostTime = v299;
                      *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v533);
                      v543.mHostTime = v300;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                      {
                        unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v542);
                        unint64_t v277 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        v301 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                        vDSP_vadd((const float *)v12, 1, (const float *)v277, 1, v301, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                      }
                    }
                  }
                  uint64_t v313 = *((void *)this + 1112);
                  if ((v313 & 0x8000) == 0 || (*((unsigned char *)this + 8905) & 0x80) == 0 || !*((void *)this + 453)) {
                    goto LABEL_540;
                  }
                  std::__fs::filesystem::path v9 = v526;
                  if (*((unsigned char *)this + 2244))
                  {
                    (*(void (**)(VoiceProcessorV8 *, AudioBufferList *, AudioTimeStamp *))(*(void *)this + 656))(this, v279, &v547);
                    uint64_t v313 = *((void *)this + 1112);
LABEL_540:
                    std::__fs::filesystem::path v9 = v526;
                  }
                  if ((v313 & 0x800000) != 0 && (*((unsigned char *)this + 8906) & 0x80) != 0)
                  {
                    v314 = (OpaqueAudioComponentInstance *)*((void *)this + 461);
                    if (v314)
                    {
                      AudioTimeStamp v544 = v547;
                      LODWORD(v543.mSampleTime) = 512;
                      AudioUnitProcess(v314, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v279);
                      if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v279, &v544);
                      }
                      uint64_t v313 = *((void *)this + 1112);
                    }
                  }
                  if (v313 & 0x1000000) != 0 && (*((unsigned char *)this + 8907))
                  {
                    v315 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
                    if (v315)
                    {
                      int v316 = *((_DWORD *)this + 576);
                      if (v316 != *((_DWORD *)this + 578))
                      {
                        AudioUnitSetParameter(v315, 1u, 0, 0, (float)v316, 0);
                        v315 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
                      }
                      AudioTimeStamp v544 = v547;
                      LODWORD(v543.mSampleTime) = 512;
                      AudioUnitProcess(v315, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v279);
                      uint64_t v313 = *((void *)this + 1112);
                    }
                  }
                  if ((v313 & 0x2000000) != 0
                    && (*((unsigned char *)this + 8907) & 2) != 0
                    && (v317 = (OpaqueAudioComponentInstance *)*((void *)this + 463)) != 0)
                  {
                    AudioTimeStamp v544 = v547;
                    LODWORD(v543.mSampleTime) = 512;
                    AudioUnitProcess(v317, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v279);
                  }
                  else if ((v313 & 0x4000000) != 0 {
                         && (*((unsigned char *)this + 8907) & 4) != 0
                  }
                         && (v318 = (OpaqueAudioComponentInstance *)*((void *)this + 464)) != 0)
                  {
                    v319 = (AudioBufferList *)*((void *)this + 198);
                    if (v319->mNumberBuffers)
                    {
                      unint64_t v12 = 0;
                      unint64_t v277 = (*((_DWORD *)this + 79) - 1);
                      uint64_t v11 = 16;
                      do
                      {
                        if (v277 >= v12) {
                          int v320 = v12;
                        }
                        else {
                          int v320 = v277;
                        }
                        memcpy(*(void **)((char *)&v319->mNumberBuffers + v11), v279->mBuffers[v320].mData, 4 * *((unsigned int *)this + 129));
                        ++v12;
                        v319 = (AudioBufferList *)*((void *)this + 198);
                        v11 += 16;
                      }
                      while (v12 < v319->mNumberBuffers);
                      v318 = (OpaqueAudioComponentInstance *)*((void *)this + 464);
                    }
                    AudioTimeStamp v544 = v547;
                    LODWORD(v543.mSampleTime) = 512;
                    AudioUnitProcess(v318, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v319);
                    v279 = (AudioBufferList *)*((void *)this + 198);
                    if (!v279)
                    {
                      _os_assert_log();
                      _os_crash();
                      __break(1u);
                      goto LABEL_920;
                    }
                  }
                  else
                  {
                    LODWORD(v533) = 0;
                    float v321 = 1.0;
                    if (!*((unsigned char *)this + 2244)) {
                      float v321 = *((float *)this + 3135);
                    }
                    LODWORD(v533) = __exp10f((float)((float)(v321 * 32.0) + -32.0) / 20.0);
                    v542[0] = v279;
                    *(void *)&v544.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v542);
                    v544.mHostTime = v322;
                    *(void *)&v543.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v542);
                    v543.mHostTime = v323;
                    std::__fs::filesystem::path v9 = v526;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v544, &v543))
                    {
                      v324 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                      v325 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v544);
                      vDSP_vsmul(v324, 1, (const float *)&v533, v325, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v544);
                    }
                    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v279, &v541);
                    }
                  }
                  if (!v532
                    || (*((unsigned char *)this + 8899) & 0x20) == 0
                    || (*((unsigned char *)this + 8907) & 0x20) == 0 && !*((unsigned char *)this + 472))
                  {
                    if (v279->mNumberBuffers)
                    {
                      unint64_t v326 = 0;
                      uint64_t v327 = 4;
                      do
                      {
                        memcpy(*(void **)&v221[v327], *(const void **)((char *)&v279->mNumberBuffers + v327 * 4), 4 * *((unsigned int *)this + 129));
                        ++v326;
                        v327 += 4;
                      }
                      while (v326 < v279->mNumberBuffers);
                    }
                    goto LABEL_594;
                  }
                  if (*((unsigned char *)this + 2244))
                  {
                    int v328 = *((_DWORD *)this + 89);
                    UInt32 v329 = v279->mNumberBuffers;
LABEL_588:
                    if (v329)
                    {
                      unint64_t v330 = 0;
                      unsigned int v331 = v328 - 1;
                      uint64_t v332 = 4;
                      do
                      {
                        if (v331 >= v330) {
                          int v333 = v330;
                        }
                        else {
                          int v333 = v331;
                        }
                        vDSP_vadd(*(const float **)((char *)&v279->mNumberBuffers + v332 * 4), 1, (const float *)v532->mBuffers[v333].mData, 1, *(float **)&v221[v332], 1, *((unsigned int *)this + 129));
                        ++v330;
                        v332 += 4;
                      }
                      while (v330 < v279->mNumberBuffers);
                    }
                    goto LABEL_594;
                  }
                  UInt32 v329 = v279->mNumberBuffers;
                  int v328 = 1;
                  int v341 = v279->mNumberBuffers - 1;
                  if (v279->mNumberBuffers == 1) {
                    goto LABEL_588;
                  }
                  while ((v341 & 0x80000000) == 0)
                  {
                    mData = (const float *)v279->mBuffers[v341].mData;
                    v343 = (const float *)v532->mBuffers[v341 & (v341 >> 31)].mData;
                    v344 = *(float **)&v221[4 * v341-- + 4];
                    vDSP_vadd(mData, 1, v343, 1, v344, 1, *((unsigned int *)this + 129));
                  }
LABEL_594:
                  uint64_t DynamicsDSPChannelCount = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
                  if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 808;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                    }
                    v488 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v488 = &unk_1F14C8B68;
                    v488[2] = -50;
                  }
                  UInt32 v335 = DynamicsDSPChannelCount;
                  MEMORY[0x1F4188790](DynamicsDSPChannelCount);
                  v337 = (AudioBufferList *)((char *)&v510 - v336);
                  bzero((char *)&v510 - v336, v338);
                  v337->UInt32 mNumberBuffers = v335;
                  uint64_t v168 = (uint64_t)memcpy(v337->mBuffers, v221 + 2, 16 * v335);
                  if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                    uint64_t v168 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, *((unsigned int *)this + 129), v337, &v541);
                  }
                  unsigned int v339 = v520;
                  if (*((unsigned char *)this + 8900) & 1) != 0 && (*((unsigned char *)this + 8908))
                  {
                    uint64_t v168 = *((void *)this + 470);
                    if (v168)
                    {
                      AudioTimeStamp v544 = v547;
                      LODWORD(v543.mSampleTime) = 512;
                      uint64_t v168 = AudioUnitProcess((AudioUnit)v168, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 129), v337);
                    }
                  }
                  unsigned int v340 = *((_DWORD *)this + 129);
                  v547.Float64 mSampleTime = v547.mSampleTime + (double)v340;
                  LODWORD(v530) = v340 + v530;
                  unsigned int v185 = v339 + 1;
                  if (v185 >= *((_DWORD *)this + 130)) {
                    goto LABEL_607;
                  }
                }
                unint64_t v212 = 0;
                long long v213 = (void **)(v211 + 4);
                do
                {
                  bzero(*v213, *((unsigned int *)v213 - 1));
                  ++v212;
                  v213 += 2;
                }
                while (v212 < *v211);
                std::string::size_type v211 = (_DWORD *)*((void *)this + 203);
LABEL_395:
                if (!v211)
                {
LABEL_398:
                  unsigned int v214 = 1;
                  goto LABEL_399;
                }
                goto LABEL_396;
              }
LABEL_607:
              uint64_t v345 = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
              UInt32 v346 = v345;
              uint64_t v347 = *((void *)this + 1112);
              if ((v347 & 0x400000000) != 0)
              {
                uint64_t v348 = v513;
                if ((*((unsigned char *)this + 8908) & 4) != 0)
                {
                  v349 = (OpaqueAudioComponentInstance *)*((void *)this + 472);
                  if (v349)
                  {
                    if ((v345 - 65) <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v544.mSampleTime) = 136315394;
                        *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                        WORD2(v544.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v544.mHostTime + 6) = 833;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                      }
                      v501 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v501 = &unk_1F14C8B68;
                      v501[2] = -50;
                    }
                    MEMORY[0x1F4188790](v345);
                    v351 = (AudioBufferList *)((char *)&v510 - v350);
                    bzero((char *)&v510 - v350, v352);
                    v351->UInt32 mNumberBuffers = v346;
                    memcpy(v351->mBuffers, v7 + 1, 16 * v346);
                    LODWORD(v544.mSampleTime) = 512;
                    uint64_t v345 = AudioUnitProcess(v349, (AudioUnitRenderActionFlags *)&v544, &v541, *((_DWORD *)this + 121), v351);
                    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                      uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v348, v351, &v541);
                    }
                    uint64_t v347 = *((void *)this + 1112);
                  }
                }
              }
              else
              {
                uint64_t v348 = v513;
              }
              if ((v347 & 0x2000000000) != 0 && (*((unsigned char *)this + 8908) & 0x20) != 0 && *((void *)this + 475)
                || (v347 & 0x800000000) != 0 && (*((unsigned char *)this + 8908) & 8) != 0 && *((void *)this + 473))
              {
                if ((v347 & 0x2000000000) != 0) {
                  unsigned int v353 = 37;
                }
                else {
                  unsigned int v353 = 35;
                }
                v354 = (AudioUnit *)((char *)this + 8 * v353);
                if (v346 == *(_DWORD *)v7)
                {
                  AudioTimeStamp v544 = v541;
                  LODWORD(v543.mSampleTime) = 512;
                  uint64_t v345 = AudioUnitProcess(v354[438], (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                }
                else
                {
                  v381 = (AudioBufferList *)*((void *)this + 25);
                  if (v381->mNumberBuffers)
                  {
                    unint64_t v382 = 0;
                    uint64_t v383 = 16;
                    do
                    {
                      memcpy(*(void **)((char *)&v381->mNumberBuffers + v383), (const void *)v7[2], *((unsigned int *)v7 + 3));
                      ++v382;
                      v381 = (AudioBufferList *)*((void *)this + 25);
                      v383 += 16;
                    }
                    while (v382 < v381->mNumberBuffers);
                  }
                  AudioTimeStamp v544 = v541;
                  v535.UInt32 mNumberBuffers = 512;
                  uint64_t v345 = AudioUnitProcess(v354[438], &v535.mNumberBuffers, &v544, *((_DWORD *)this + 121), v381);
                  if ((*((unsigned char *)this + 8900) & 0x40) != 0
                    && (*((unsigned char *)this + 8908) & 0x40) != 0
                    && (uint64_t v345 = *((void *)this + 476)) != 0)
                  {
                    int v384 = *((_DWORD *)this + 576);
                    if (v384 != *((_DWORD *)this + 578))
                    {
                      AudioUnitSetParameter((AudioUnit)v345, 0, 0, 0, (float)v384, 0);
                      uint64_t v345 = *((void *)this + 476);
                    }
                    *(void *)&v546.UInt32 mNumberBuffers = *((void *)this + 25);
                    *(void *)&v545.UInt32 mNumberBuffers = v7;
                    AudioTimeStamp v543 = v541;
                    LODWORD(v542[0]) = 512;
                    uint64_t v345 = AudioUnitProcessMultiple((AudioUnit)v345, (AudioUnitRenderActionFlags *)v542, &v543, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v546, 1u, (AudioBufferList **)&v545);
                    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                      uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v348, (const AudioBufferList *)v7, &v543);
                    }
                  }
                  else if (*(_DWORD *)v7)
                  {
                    unint64_t v389 = 0;
                    v390 = (void **)(v7 + 2);
                    do
                    {
                      v391 = (unsigned int *)*((void *)this + 25);
                      if (v389 >= *v391) {
                        unint64_t v392 = 0;
                      }
                      else {
                        unint64_t v392 = v389;
                      }
                      uint64_t v345 = (uint64_t)memcpy(*v390, *(const void **)&v391[4 * v392 + 4], *((unsigned int *)v390 - 1));
                      ++v389;
                      v390 += 2;
                    }
                    while (v389 < *(unsigned int *)v7);
                  }
                }
              }
              else if ((v347 & 0x20000000000) != 0 {
                     && (uint64_t v355 = *((void *)this + 1113), (v355 & 0x20000000000) != 0)
              }
                     && *((void *)this + 479))
              {
                if ((v347 & v355 & 0x40000000000) != 0 && *((void *)this + 480))
                {
                  if (v346 - 65 <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 891;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                    }
                    v506 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v506 = &unk_1F14C8B68;
                    v506[2] = -50;
                  }
                  MEMORY[0x1F4188790](v345);
                  v357 = (UInt32 *)((char *)&v510 - v356);
                  bzero((char *)&v510 - v356, v358);
                  unint64_t v359 = 0;
                  UInt32 *v357 = v346;
                  uint64_t v360 = *((void *)this + 25);
                  uint64_t v361 = 16 * v346;
                  do
                  {
                    v362 = memcpy(*(void **)(v360 + v359 + 16), (const void *)v7[v359 / 8 + 2], *(unsigned int *)(v360 + v359 + 12));
                    uint64_t v360 = *((void *)this + 25);
                    *(_OWORD *)&v357[v359 / 4 + 2] = *(_OWORD *)(v360 + v359 + 8);
                    v359 += 16;
                  }
                  while (v361 != v359);
                  *(void *)&v543.Float64 mSampleTime = v357;
                  uint64_t v363 = *((unsigned int *)this + 1075);
                  if ((v363 - 65) < 0xFFFFFFC0)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 906;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                    }
                    v507 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v507 = &unk_1F14C8B68;
                    v507[2] = -50;
                  }
                  MEMORY[0x1F4188790](v362);
                  v365 = (AudioBufferList *)((char *)&v510 - v364);
                  bzero((char *)&v510 - v364, v366);
                  uint64_t v367 = 0;
                  v365->UInt32 mNumberBuffers = v363;
                  v368 = (AudioBuffer *)(v7 + 3);
                  do
                  {
                    AudioBuffer v369 = *v368;
                    v368 += 2;
                    v365->mBuffers[v367++] = v369;
                  }
                  while (v363 != v367);
                  *(void *)&v546.UInt32 mNumberBuffers = v365;
                  if (*((unsigned char *)this + 2245))
                  {
                    int v370 = *((_DWORD *)this + 576);
                    if (v370 != *((_DWORD *)this + 578)) {
                      AudioUnitSetParameter(*((AudioUnit *)this + 480), 0, 0, 0, (float)v370, 0);
                    }
                  }
                  AudioTimeStamp v544 = v541;
                  v545.UInt32 mNumberBuffers = 512;
                  AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v545.mNumberBuffers, &v544, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                  if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v348, v365, &v544);
                  }
                  v371 = v7 + 2;
                  do
                  {
                    memcpy((void *)*v371, (const void *)v371[2], *((unsigned int *)v371 - 1));
                    v371 += 4;
                    --v363;
                  }
                  while (v363);
                }
                else if (!*((unsigned char *)this + 2244) && *(_DWORD *)v7 >= 2u)
                {
                  v393 = (void **)(v7 + 4);
                  unint64_t v394 = 1;
                  do
                  {
                    memcpy(*v393, (const void *)v7[2], *((unsigned int *)v393 - 1));
                    ++v394;
                    v393 += 2;
                  }
                  while (v394 < *(unsigned int *)v7);
                }
                AudioTimeStamp v544 = v541;
                LODWORD(v543.mSampleTime) = 512;
                uint64_t v345 = AudioUnitProcess(*((AudioUnit *)this + 479), (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
              }
              else if ((v347 & 0x2000000000000000) != 0 && (*((unsigned char *)this + 8911) & 0x20) != 0)
              {
                unsigned int v378 = *(_DWORD *)v7;
                if (*(_DWORD *)v7 >= 2u)
                {
                  if (*((_DWORD *)this + 79) == 1)
                  {
                    uint64_t v345 = (uint64_t)memcpy((void *)v7[4], (const void *)v7[2], *((unsigned int *)v7 + 3));
                    unsigned int v378 = *(_DWORD *)v7;
                  }
                  if (v378 >= 3)
                  {
                    v379 = (void **)(v7 + 6);
                    unint64_t v380 = 2;
                    do
                    {
                      bzero(*v379, *((unsigned int *)v379 - 1));
                      ++v380;
                      v379 += 2;
                    }
                    while (v380 < *(unsigned int *)v7);
                  }
                }
              }
              else if (!*((unsigned char *)this + 2244))
              {
                unsigned int v372 = *((_DWORD *)this + 79);
                unint64_t v373 = v372 <= 1 ? 1 : v372;
                if (v373 < *(_DWORD *)v7)
                {
                  v374 = &v7[2 * (v373 - 1)];
                  v375 = (const void **)(v374 + 2);
                  v376 = (unsigned int *)v374 + 3;
                  uint64_t v377 = 16 * v373 + 16;
                  do
                  {
                    uint64_t v345 = (uint64_t)memcpy(*(void **)((char *)v7 + v377), *v375, *v376);
                    ++v373;
                    v377 += 16;
                  }
                  while (v373 < *(unsigned int *)v7);
                }
              }
              uint64_t v395 = *((void *)this + 1112);
              if ((v395 & 0x80000000000) == 0)
              {
                p_Float64 mSampleTime = (_OWORD *)&v512->mSampleTime;
                goto LABEL_729;
              }
              p_Float64 mSampleTime = (_OWORD *)&v512->mSampleTime;
              if ((*((unsigned char *)this + 8909) & 8) == 0 || !*((void *)this + 481))
              {
LABEL_729:
                if ((v395 & 0x100000000000) != 0 && (*((unsigned char *)this + 8909) & 0x10) != 0)
                {
                  uint64_t v345 = *((void *)this + 482);
                  if (v345)
                  {
                    long long v413 = p_mSampleTime[1];
                    *(_OWORD *)&v544.Float64 mSampleTime = *p_mSampleTime;
                    *(_OWORD *)&v544.mRateScalar = v413;
                    long long v414 = p_mSampleTime[3];
                    *(_OWORD *)&v544.mSMPTETime.mSubframes = p_mSampleTime[2];
                    *(_OWORD *)&v544.mSMPTETime.mHours = v414;
                    LODWORD(v543.mSampleTime) = 512;
                    uint64_t v345 = AudioUnitProcess((AudioUnit)v345, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                    uint64_t v395 = *((void *)this + 1112);
                  }
                }
                if ((v395 & 0x200000000000) != 0 && (*((unsigned char *)this + 8909) & 0x20) != 0)
                {
                  uint64_t v345 = *((void *)this + 483);
                  if (v345)
                  {
                    *(void *)&v543.Float64 mSampleTime = v7;
                    *(void *)&v546.UInt32 mNumberBuffers = v7;
                    long long v415 = p_mSampleTime[1];
                    *(_OWORD *)&v544.Float64 mSampleTime = *p_mSampleTime;
                    *(_OWORD *)&v544.mRateScalar = v415;
                    long long v416 = p_mSampleTime[3];
                    *(_OWORD *)&v544.mSMPTETime.mSubframes = p_mSampleTime[2];
                    *(_OWORD *)&v544.mSMPTETime.mHours = v416;
                    v545.UInt32 mNumberBuffers = 512;
                    uint64_t v345 = AudioUnitProcessMultiple((AudioUnit)v345, &v545.mNumberBuffers, &v544, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                    uint64_t v395 = *((void *)this + 1112);
                  }
                }
                if ((v395 & 0x100000000000000) == 0
                  || (uint64_t v417 = *((void *)this + 1113), (v417 & 0x100000000000000) == 0)
                  || !*((void *)this + 494))
                {
                  if ((v395 & 0x200000000000000) == 0
                    || (uint64_t v417 = *((void *)this + 1113), (v417 & 0x200000000000000) == 0)
                    || !*((void *)this + 495))
                  {
                    if ((v395 & 0x400000000000000) == 0
                      || (uint64_t v417 = *((void *)this + 1113), (v417 & 0x400000000000000) == 0)
                      || !*((void *)this + 496))
                    {
                      char v434 = 0;
LABEL_774:
                      if ((v395 & 0x40000000000000) != 0 && (*((unsigned char *)this + 8910) & 0x40) != 0)
                      {
                        uint64_t v345 = *((void *)this + 492);
                        if (v345)
                        {
                          AudioTimeStamp v544 = v541;
                          LODWORD(v543.mSampleTime) = 512;
                          uint64_t v345 = AudioUnitProcess((AudioUnit)v345, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                          uint64_t v395 = *((void *)this + 1112);
                        }
                      }
                      if ((v395 & 0x800000000000000) != 0
                        && ((*((unsigned char *)this + 8911) & 8) != 0 || *((unsigned char *)this + 472)))
                      {
                        LODWORD(v544.mSampleTime) = 1065353216;
                        LODWORD(v543.mSampleTime) = 1065353216;
                        if ((*((unsigned char *)this + 2083) || *((unsigned char *)this + 472))
                          && (float v435 = *((float *)this + 1133), v435 != 0.0))
                        {
                          float v436 = __exp10f(v435 / 20.0);
                          *(float *)&v543.Float64 mSampleTime = v436;
                          *(float *)&v544.Float64 mSampleTime = v436;
                        }
                        else
                        {
                          float v437 = *((float *)this + 1131);
                          if (v437 >= -300.0)
                          {
                            if (v437 == 0.0)
                            {
                              float v436 = 1.0;
                            }
                            else
                            {
                              float v438 = v437 / 20.0;
                              BOOL v439 = v437 <= 60.0;
                              float v440 = 3.0;
                              if (v439) {
                                float v440 = v438;
                              }
                              float v436 = __exp10f(v440);
                              *(float *)&v544.Float64 mSampleTime = v436;
                            }
                          }
                          else
                          {
                            LODWORD(v544.mSampleTime) = 0;
                            float v436 = 0.0;
                          }
                          float v441 = *((float *)this + 1132);
                          if (v441 >= -300.0)
                          {
                            if (v441 != 0.0)
                            {
                              float v442 = v441 / 20.0;
                              if (v441 > 60.0) {
                                float v442 = 3.0;
                              }
                              LODWORD(v543.mSampleTime) = __exp10f(v442);
                              float v436 = *(float *)&v544.mSampleTime;
                            }
                          }
                          else
                          {
                            LODWORD(v543.mSampleTime) = 0;
                          }
                        }
                        if (v436 == 0.0)
                        {
                          bzero((void *)v7[2], 4 * *((unsigned int *)this + 121));
                          uint64_t v348 = v513;
                        }
                        else
                        {
                          uint64_t v348 = v513;
                          if (v436 != 1.0) {
                            vDSP_vsmul((const float *)v7[2], 1, (const float *)&v544, (float *)v7[2], 1, *((unsigned int *)this + 121));
                          }
                        }
                        if (*(_DWORD *)v7 >= 2u)
                        {
                          unint64_t v443 = 1;
                          uint64_t v444 = 4;
                          do
                          {
                            if (*(float *)&v543.mSampleTime == 0.0)
                            {
                              bzero((void *)v7[v444], 4 * *((unsigned int *)this + 121));
                            }
                            else if (*(float *)&v543.mSampleTime != 1.0)
                            {
                              vDSP_vsmul((const float *)v7[v444], 1, (const float *)&v543, (float *)v7[v444], 1, *((unsigned int *)this + 121));
                            }
                            ++v443;
                            v444 += 2;
                          }
                          while (v443 < *(unsigned int *)v7);
                        }
                        uint64_t v395 = *((void *)this + 1112);
                      }
                      if (v395 & 0x100000000000000) != 0 && (*((unsigned char *)this + 8911))
                      {
                        uint64_t v345 = *((void *)this + 494);
                        if (v345)
                        {
                          if (*((_DWORD *)this + 1130) == 1 && (v445 = (_DWORD *)*((void *)this + 197)) != 0)
                          {
                            ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v445);
                            uint64_t v345 = *((void *)this + 494);
                            UInt32 v446 = 2;
                          }
                          else
                          {
                            UInt32 v446 = 1;
                          }
                          UInt64 v447 = *((void *)this + 197);
                          *(void *)&v543.Float64 mSampleTime = v7;
                          v543.mHostTime = v447;
                          *(void *)&v546.UInt32 mNumberBuffers = v7;
                          AudioTimeStamp v544 = v541;
                          v545.UInt32 mNumberBuffers = 512;
                          uint64_t v345 = AudioUnitProcessMultiple((AudioUnit)v345, &v545.mNumberBuffers, &v544, *((_DWORD *)this + 121), v446, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                            uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v348, (const AudioBufferList *)v7, &v544);
                          }
                          uint64_t v395 = *((void *)this + 1112);
                        }
                      }
                      if ((v395 & 0x200000000000000) != 0 && (*((unsigned char *)this + 8911) & 2) != 0)
                      {
                        v448 = (OpaqueAudioComponentInstance *)*((void *)this + 495);
                        if (v448)
                        {
                          uint64_t v449 = *((unsigned int *)this + 1075);
                          if ((v449 - 65) <= 0xFFFFFFBF)
                          {
                            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                            {
                              LODWORD(v544.mSampleTime) = 136315394;
                              *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                              WORD2(v544.mHostTime) = 1024;
                              *(_DWORD *)((char *)&v544.mHostTime + 6) = 1188;
                              _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                            }
                            v502 = __cxa_allocate_exception(0x10uLL);
                            *(void *)v502 = &unk_1F14C8B68;
                            v502[2] = -50;
                          }
                          MEMORY[0x1F4188790](v345);
                          v451 = (AudioBufferList *)((char *)&v510 - v450);
                          bzero((char *)&v510 - v450, v452);
                          uint64_t v453 = 0;
                          v451->UInt32 mNumberBuffers = v449;
                          v454 = (AudioBuffer *)(v7 + 1);
                          do
                          {
                            AudioBuffer v455 = *v454;
                            v454 += 2;
                            v451->mBuffers[v453++] = v455;
                          }
                          while (v449 != v453);
                          UInt64 v456 = *((void *)this + 197);
                          *(void *)&v543.Float64 mSampleTime = v451;
                          v543.mHostTime = v456;
                          *(void *)&v546.UInt32 mNumberBuffers = v451;
                          AudioTimeStamp v544 = v541;
                          v545.UInt32 mNumberBuffers = 512;
                          uint64_t v345 = AudioUnitProcessMultiple(v448, &v545.mNumberBuffers, &v544, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                            uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v348, v451, &v544);
                          }
                          uint64_t v395 = *((void *)this + 1112);
                        }
                      }
                      if ((v395 & 0x400000000000000) != 0
                        && (*((unsigned char *)this + 8911) & 4) != 0
                        && *((void *)this + 496))
                      {
                        if (*((_DWORD *)this + 1130) == 1 && (v457 = (_DWORD *)*((void *)this + 197)) != 0)
                        {
                          uint64_t v345 = (uint64_t)ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v457);
                          UInt32 v458 = 2;
                        }
                        else
                        {
                          UInt32 v458 = 1;
                        }
                        uint64_t v459 = *((unsigned int *)this + 1075);
                        if ((v459 - 65) <= 0xFFFFFFBF)
                        {
                          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                          {
                            LODWORD(v544.mSampleTime) = 136315394;
                            *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                            WORD2(v544.mHostTime) = 1024;
                            *(_DWORD *)((char *)&v544.mHostTime + 6) = 1213;
                            _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                          }
                          v503 = __cxa_allocate_exception(0x10uLL);
                          *(void *)v503 = &unk_1F14C8B68;
                          v503[2] = -50;
                        }
                        MEMORY[0x1F4188790](v345);
                        v461 = (AudioBufferList *)((char *)&v510 - v460);
                        bzero((char *)&v510 - v460, v462);
                        uint64_t v463 = 0;
                        v461->UInt32 mNumberBuffers = v459;
                        v464 = (AudioBuffer *)(v7 + 3);
                        do
                        {
                          AudioBuffer v465 = *v464;
                          v464 += 2;
                          v461->mBuffers[v463++] = v465;
                        }
                        while (v459 != v463);
                        UInt64 v466 = *((void *)this + 197);
                        *(void *)&v543.Float64 mSampleTime = v461;
                        v543.mHostTime = v466;
                        *(void *)&v546.UInt32 mNumberBuffers = v461;
                        AudioTimeStamp v544 = v541;
                        v545.UInt32 mNumberBuffers = 512;
                        AudioUnitProcessMultiple(*((AudioUnit *)this + 496), &v545.mNumberBuffers, &v544, *((_DWORD *)this + 121), v458, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                        if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v348, v461, &v544);
                        }
                        uint64_t v395 = *((void *)this + 1112);
                      }
                      if ((v395 & 0x400000000000) != 0 && (*((unsigned char *)this + 8909) & 0x40) != 0)
                      {
                        v467 = (OpaqueAudioComponentInstance *)*((void *)this + 484);
                        if (v467)
                        {
                          AudioTimeStamp v544 = v541;
                          LODWORD(v543.mSampleTime) = 512;
                          AudioUnitProcess(v467, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                          uint64_t v395 = *((void *)this + 1112);
                        }
                      }
                      if ((v395 & 0x800000000000) != 0) {
                        char v468 = v434;
                      }
                      else {
                        char v468 = 1;
                      }
                      if (v468)
                      {
                        v469 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
                      }
                      else
                      {
                        v469 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
                        if ((*((unsigned char *)this + 8909) & 0x80) != 0)
                        {
                          v470 = (OpaqueAudioComponentInstance *)*((void *)this + 485);
                          if (v470)
                          {
                            AudioTimeStamp v544 = v541;
                            LODWORD(v543.mSampleTime) = 512;
                            AudioUnitProcess(v470, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), (const AudioBufferList *)v7, &v544);
                            }
                            uint64_t v395 = *((void *)this + 1112);
                          }
                        }
                      }
                      if ((v395 & 0x4000000000000) != 0 && (*((unsigned char *)this + 8910) & 4) != 0)
                      {
                        v471 = (OpaqueAudioComponentInstance *)*((void *)this + 488);
                        if (v471)
                        {
                          AudioTimeStamp v544 = v541;
                          LODWORD(v543.mSampleTime) = 512;
                          AudioUnitProcess(v471, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, *((unsigned int *)this + 121), (const AudioBufferList *)v7, &v544);
                          }
                          uint64_t v395 = *((void *)this + 1112);
                        }
                      }
                      if ((v395 & 0x8000000000000) != 0 && (*((unsigned char *)this + 8910) & 8) != 0)
                      {
                        v472 = (OpaqueAudioComponentInstance *)*((void *)this + 489);
                        if (v472)
                        {
                          unsigned int v473 = *((_DWORD *)this + 18);
                          if (v473 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v473) & 1) != 0)
                          {
                            AudioTimeStamp v544 = v541;
                            LODWORD(v543.mSampleTime) = 512;
                            AudioUnitProcess(v472, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, *((unsigned int *)this + 121), (const AudioBufferList *)v7, &v544);
                            }
                          }
                        }
                      }
                      if (*((unsigned char *)v9 + 3409)
                        && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v348, (AudioBufferList *)v7),
                            *((unsigned char *)v9 + 3409))
                        || *((unsigned char *)v9 + 3410))
                      {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v348, (const AudioBufferList *)v7, &v541);
                      }
                      uint64_t v474 = *((void *)this + 2003);
                      if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20638);
                      }
                      if (v469[26]) {
                        ((void (*)(uint64_t, uint64_t, void, uint64_t *, uint64_t, AudioTimeStamp *))v469[26])(v474, 68, 0, v7, v348, &v541);
                      }
                      if (*((_DWORD *)this + 1129) == 1 && !*((unsigned char *)v9 + 3688)) {
                        VoiceProcessorV2::AppendReferenceSignal(this, (AudioBufferList *)v7, &v541, 0);
                      }
                      if (*((unsigned char *)v9 + 3409)) {
                        VoiceProcessorV2::LoopBackRead(this, v348, (AudioBufferList *)v7);
                      }
                      goto LABEL_889;
                    }
                  }
                }
                if ((v395 & v417 & 0x800000000000) != 0)
                {
                  uint64_t v345 = *((void *)this + 485);
                  if (v345)
                  {
                    AudioTimeStamp v544 = v541;
                    LODWORD(v543.mSampleTime) = 512;
                    uint64_t v345 = AudioUnitProcess((AudioUnit)v345, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), (AudioBufferList *)v7);
                    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                      uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), (const AudioBufferList *)v7, &v544);
                    }
                    uint64_t v395 = *((void *)this + 1112);
                  }
                }
                if (v395 & 0x1000000000000) != 0 && (*((unsigned char *)this + 8910))
                {
                  v418 = (OpaqueAudioComponentInstance *)*((void *)this + 486);
                  if (v418)
                  {
                    uint64_t v419 = *((unsigned int *)this + 1075);
                    if ((v419 - 65) <= 0xFFFFFFBF)
                    {
                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                        goto LABEL_968;
                      }
                      LODWORD(v544.mSampleTime) = 136315394;
                      *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                      WORD2(v544.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v544.mHostTime + 6) = 1085;
                      v504 = MEMORY[0x1E4F14500];
                      goto LABEL_967;
                    }
                    MEMORY[0x1F4188790](v345);
                    v421 = (AudioBufferList *)((char *)&v510 - v420);
                    bzero((char *)&v510 - v420, v422);
                    uint64_t v423 = 0;
                    v421->UInt32 mNumberBuffers = v419;
                    v424 = (AudioBuffer *)(v7 + 1);
                    do
                    {
                      AudioBuffer v425 = *v424;
                      v424 += 2;
                      v421->mBuffers[v423++] = v425;
                    }
                    while (v419 != v423);
                    AudioTimeStamp v544 = v541;
                    LODWORD(v543.mSampleTime) = 512;
                    uint64_t v345 = AudioUnitProcess(v418, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), v421);
                    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                      uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, *((unsigned int *)this + 121), v421, &v544);
                    }
                    uint64_t v395 = *((void *)this + 1112);
                  }
                }
                if ((v395 & 0x2000000000000) == 0
                  || (*((unsigned char *)this + 8910) & 2) == 0
                  || (v426 = (OpaqueAudioComponentInstance *)*((void *)this + 487)) == 0)
                {
LABEL_772:
                  char v434 = 1;
                  goto LABEL_774;
                }
                uint64_t v427 = *((unsigned int *)this + 1075);
                if ((v427 - 65) > 0xFFFFFFBF)
                {
                  MEMORY[0x1F4188790](v345);
                  v429 = (AudioBufferList *)((char *)&v510 - v428);
                  bzero((char *)&v510 - v428, v430);
                  uint64_t v431 = 0;
                  v429->UInt32 mNumberBuffers = v427;
                  v432 = (AudioBuffer *)(v7 + 3);
                  do
                  {
                    AudioBuffer v433 = *v432;
                    v432 += 2;
                    v429->mBuffers[v431++] = v433;
                  }
                  while (v427 != v431);
                  AudioTimeStamp v544 = v541;
                  LODWORD(v543.mSampleTime) = 512;
                  uint64_t v345 = AudioUnitProcess(v426, (AudioUnitRenderActionFlags *)&v543, &v544, *((_DWORD *)this + 121), v429);
                  if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                    uint64_t v345 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, *((unsigned int *)this + 121), v429, &v544);
                  }
                  uint64_t v395 = *((void *)this + 1112);
                  goto LABEL_772;
                }
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
LABEL_968:
                  v505 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v505 = &unk_1F14C8B68;
                  v505[2] = -50;
                }
                LODWORD(v544.mSampleTime) = 136315394;
                *(void *)((char *)&v544.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(v544.mHostTime) = 1024;
                *(_DWORD *)((char *)&v544.mHostTime + 6) = 1099;
                v504 = MEMORY[0x1E4F14500];
LABEL_967:
                _os_log_impl(&dword_1BB0CE000, v504, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v544, 0x12u);
                goto LABEL_968;
              }
              uint64_t v397 = *((void *)this + 2145);
              v398 = *(float **)(v397 + 16);
              v545.UInt32 mNumberBuffers = *((_DWORD *)this + 127);
              v399 = (CA::AudioSampleRateConverter **)*((void *)this + 49);
              if (v399)
              {
                v545.UInt32 mNumberBuffers = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v399);
                uint64_t v397 = *((void *)this + 1996);
                if (v545.mNumberBuffers <= *(_DWORD *)(v397 + 12) >> 2)
                {
                  VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 49), (unsigned int *)this + 127, &v545.mNumberBuffers, *((const AudioBufferList **)this + 2145), (const AudioBufferList *)v397);
                  uint64_t v397 = *((void *)this + 1996);
                  v400 = v511;
                }
                else
                {
                  v400 = v511;
                  unsigned char *v511 = 0;
                }
                v398 = *(float **)(v397 + 16);
              }
              else
              {
                v400 = v511;
              }
              vDSP_Length v401 = (unint64_t)*(unsigned int *)(v397 + 12) >> 2;
              if (*v400)
              {
                AudioUnitParameterValue v402 = 0.0;
                if (v401 > v545.mNumberBuffers) {
                  vDSP_vclr(&v398[v545.mNumberBuffers], 1, (v401 - v545.mNumberBuffers));
                }
              }
              else
              {
                AudioUnitParameterValue v402 = 1.0;
                vDSP_vclr(v398, 1, v401);
              }
              AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, v402, 0);
              if (*((unsigned char *)this + 4671) & 1) != 0 && (*((unsigned char *)this + 4687))
              {
                v403 = (OpaqueAudioComponentInstance *)*((void *)this + 403);
                if (v403)
                {
                  LODWORD(v544.mSampleTime) = 0;
                  AudioUnitGetParameter(v403, 9u, 0, 0, (AudioUnitParameterValue *)&v544);
                  AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v544.mSampleTime, 0);
                }
              }
              v404 = (OpaqueAudioComponentInstance *)*((void *)this + 481);
              unsigned int v405 = atomic_load(VoiceProcessorV4::mIsOnEar);
              AudioUnitSetParameter(v404, 0x16u, 0, 0, (float)v405, 0);
              uint64_t v406 = *((void *)this + 49);
              uint64_t v407 = 17160;
              if (v406) {
                uint64_t v407 = 15968;
              }
              UInt64 v408 = *(void *)((char *)this + v407);
              *(void *)&v543.Float64 mSampleTime = v7;
              v543.mHostTime = v408;
              AudioTimeStamp v544 = v541;
              v535.UInt32 mNumberBuffers = 512;
              *(void *)&v546.UInt32 mNumberBuffers = v7;
              uint64_t v409 = *((unsigned int *)this + 129);
              if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v409, (const AudioBufferList *)v7, &v544);
                uint64_t v409 = *((unsigned int *)this + 129);
                uint64_t v410 = 15968;
                if (!*((void *)this + 49)) {
                  uint64_t v410 = 17160;
                }
                v411 = *(const AudioBufferList **)((char *)this + v410);
                if (*((unsigned char *)v9 + 3409))
                {
LABEL_724:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v409, v411, &v544);
LABEL_725:
                  AudioUnitProcessMultiple(*((AudioUnit *)this + 481), &v535.mNumberBuffers, &v544, *((_DWORD *)this + 121), 2u, (const AudioBufferList **)&v543, 1u, (AudioBufferList **)&v546);
                  if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, *((unsigned int *)this + 129), (const AudioBufferList *)v7, &v544);
                  }
                  uint64_t v345 = AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, 0.0, 0);
                  uint64_t v395 = *((void *)this + 1112);
                  goto LABEL_729;
                }
              }
              else
              {
                if (v406) {
                  v412 = (const AudioBufferList **)((char *)this + 15968);
                }
                else {
                  v412 = (const AudioBufferList **)((char *)this + 17160);
                }
                v411 = *v412;
              }
              if (!*((unsigned char *)v9 + 3410)) {
                goto LABEL_725;
              }
              goto LABEL_724;
            }
            UInt32 NumberOfSourceFrames = *((_DWORD *)this + 121);
            goto LABEL_234;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v68 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v69 = (*v68 ? *v68 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
            {
              int v70 = *((_DWORD *)v7 + 3);
              int v71 = *((_DWORD *)this + 88) * v15;
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 183;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = v70;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v71;
              _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
            }
          }
          int v72 = (int *)*((void *)this + 1578);
          int v73 = *((unsigned __int8 *)v9 + 3409);
          if (v72)
          {
            if (!*((unsigned char *)v9 + 3409) && !*((unsigned char *)v9 + 3410)) {
              goto LABEL_156;
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v72, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 183, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].mDataByteSize = %u, expected = %u", *((_DWORD *)v7 + 3), *((_DWORD *)this + 88) * v15);
            int v73 = *((unsigned __int8 *)v9 + 3409);
          }
          if (v73)
          {
            VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v15, (AudioBufferList *)v7);
            if (*((unsigned char *)v9 + 3409))
            {
LABEL_157:
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, (const AudioBufferList *)v7, &v541);
LABEL_158:
              uint64_t v74 = *((void *)this + 2003);
              if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20638);
              }
              if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
                goto LABEL_889;
              }
              goto LABEL_203;
            }
          }
LABEL_156:
          if (!*((unsigned char *)v9 + 3410)) {
            goto LABEL_158;
          }
          goto LABEL_157;
        }
        if (*((unsigned char *)v9 + 3331))
        {
          double v52 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
          double v53 = *((double *)this + 1991);
          if (v52 > v53)
          {
            *((double *)this + 1991) = v53 + 10.0;
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdownlinkaudio: <block size mismatch>");
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            __int16 v54 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v55 = (*v54 ? *v54 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 167;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v52;
                _os_log_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            float v56 = (int *)*((void *)this + 1578);
            if (v56 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v56, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 167, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v52);
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v57 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v58 = (*v57 ? *v57 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                uint64_t v59 = v15;
                uint64_t v60 = v7;
                int v61 = *((_DWORD *)v7 + 3);
                int v62 = *((_DWORD *)this + 121);
                CAFormatter::CAFormatter((CAFormatter *)&v547, v29);
                int v63 = *((_DWORD *)this + 3130);
                LODWORD(buf.mSampleTime) = 136316674;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 171;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v59;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v61;
                HIWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)&buf.mSMPTETime.mSubframes = v62;
                LOWORD(buf.mSMPTETime.mCounter) = 2080;
                *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v547.mSampleTime;
                HIWORD(buf.mSMPTETime.mFlags) = 1024;
                *(_DWORD *)&buf.mSMPTETime.mHours = v63;
                _os_log_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
                if (*(void *)&v547.mSampleTime) {
                  free(*(void **)&v547.mSampleTime);
                }
                std::string v7 = v60;
                std::__fs::filesystem::path v9 = v526;
                uint64_t v15 = v59;
              }
            }
            int v64 = (int *)*((void *)this + 1578);
            if (v64)
            {
              if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v65 = VPLogScope(void)::scope;
                int v66 = *((_DWORD *)v7 + 3);
                int v67 = *((_DWORD *)this + 121);
                CAFormatter::CAFormatter((CAFormatter *)&buf, v29);
                CALegacyLog::log(v64, 1, v65, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 171, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v15, v66, v67, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3130));
LABEL_194:
                std::__fs::filesystem::path v9 = v526;
                if (*(void *)&buf.mSampleTime) {
                  free(*(void **)&buf.mSampleTime);
                }
              }
            }
          }
        }
        else
        {
          *((unsigned char *)v9 + 3331) = 1;
          *((void *)this + 1988) = mach_absolute_time();
          *((void *)this + 1991) = 0x3FF0000000000000;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdl: <block size mismatch>");
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v75 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            uint64_t v76 = (*v75 ? *v75 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.mSampleTime) = 136315394;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 147;
              _os_log_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
            }
          }
          v77 = (int *)*((void *)this + 1578);
          if (v77 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v77, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 147, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v78 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v79 = (*v78 ? *v78 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v80 = v15;
              v81 = v7;
              int v82 = *((_DWORD *)v7 + 3);
              int v83 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&v547, v29);
              int v84 = *((_DWORD *)this + 3130);
              LODWORD(buf.mSampleTime) = 136316674;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v8.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 151;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = v80;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v82;
              HIWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mSubframes = v83;
              LOWORD(buf.mSMPTETime.mCounter) = 2080;
              *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v547.mSampleTime;
              HIWORD(buf.mSMPTETime.mFlags) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mHours = v84;
              _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
              if (*(void *)&v547.mSampleTime) {
                free(*(void **)&v547.mSampleTime);
              }
              std::string v7 = v81;
              std::__fs::filesystem::path v9 = v526;
              uint64_t v15 = v80;
            }
          }
          long long v85 = (int *)*((void *)this + 1578);
          if (v85 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v86 = VPLogScope(void)::scope;
            int v87 = *((_DWORD *)v7 + 3);
            int v88 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&buf, v29);
            CALegacyLog::log(v85, 2, v86, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 151, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v15, v87, v88, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3130));
            goto LABEL_194;
          }
        }
        if (*((unsigned char *)v9 + 3409)
          && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v15, (AudioBufferList *)v7), *((unsigned char *)v9 + 3409))
          || *((unsigned char *)v9 + 3410))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, (const AudioBufferList *)v7, &v541);
        }
        uint64_t v74 = *((void *)this + 2003);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20638);
        }
        if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
          goto LABEL_889;
        }
LABEL_203:
        AudioIssueDetectorLibraryLoader(void)::libSym(v74, 68, 0, v7, v15, &v541);
      }
    }
    else if (*(_DWORD *)v7 == *((_DWORD *)this + 89))
    {
      unint64_t v29 = (VoiceProcessorV8 *)((char *)this + 328);
      if (!*((unsigned char *)v9 + 3410)) {
        goto LABEL_79;
      }
      goto LABEL_53;
    }
LABEL_889:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v539);
    unint64_t v12 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_890;
  }
  VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "processdl: tryer failed to acquire lock", a3, a4, a5, a6, a7);
  float v10 = (VoiceProcessorV8 *)((char *)this + 2576);
  CADeprecated::CAMutex::Lock((VoiceProcessorV8 *)((char *)this + 2576));
LABEL_3:
  ++*((_DWORD *)this + 3130);
  CADeprecated::CAMutex::Unlock(v10);
  LOBYTE(v11) = 0;
  unint64_t v12 = 1937006964;
  double v13 = 0.0;
LABEL_890:
  if (*((unsigned char *)v9 + 3409) && *((void *)this + 1579))
  {
    uint64_t v186 = (uint64_t)v7;
    uint64_t v475 = mach_absolute_time();
    v476 = (int *)*((void *)this + 1579);
    std::__fs::filesystem::path v9 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    if (VPTimestampLogScope(void)::once != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    std::string v7 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    double v187 = (double)v475 * 0.0000000416666667 - v13;
    CALegacyLog::log(v476, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1284, "ProcessDownlinkAudio", "DL %f %f %f", v541.mSampleTime, v13, v187);
    unsigned int v477 = *((_DWORD *)this + 121);
    double v478 = *((double *)this + 41);
    if (v187 >= (double)v477 / v478)
    {
      unint64_t v277 = *((void *)this + 1579);
      if (VPTimestampLogScope(void)::once != -1) {
LABEL_920:
      }
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      CALegacyLog::log((int *)v277, 5, v7[84], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1286, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v187);
      unsigned int v477 = *((_DWORD *)this + 121);
      double v478 = *((double *)this + 41);
    }
    if (v13 - *((double *)this + 1994) > (double)(*((_DWORD *)this + 294) + v477) / v478)
    {
      v479 = (int *)*((void *)this + 1579);
      if (v9[83] != -1) {
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      }
      CALegacyLog::log(v479, 5, v7[84], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessDownlink_v8.cpp", 1288, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v13 - *((double *)this + 1994));
    }
    *((double *)this + 1994) = v13;
    std::string v7 = (uint64_t *)v186;
  }
  if (v11)
  {
    if (*((_DWORD *)this + 19) != 1)
    {
      if (*((unsigned char *)this + 1648)
        || (uint64_t v480 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), (AudioBufferList *)v7, *((unsigned int *)this + 410), *((_DWORD *)this + 411)), *((unsigned char *)this + 1648) = v480, *((_DWORD *)this + 410) = HIDWORD(v480), (_BYTE)v480))
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), (const AudioBufferList *)v7);
      }
    }
  }
  else
  {
    if (*((_DWORD *)this + 20) == 1)
    {
      if (!*(_DWORD *)v7) {
        goto LABEL_919;
      }
      unint64_t v481 = 0;
      v482 = (void **)(v7 + 2);
      do
      {
        bzero(*v482, *((unsigned int *)v482 - 1));
        ++v481;
        v482 += 2;
      }
      while (v481 < *(unsigned int *)v7);
    }
    else
    {
      *((_DWORD *)this + 410) = 0;
      *((unsigned char *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), (AudioBufferList *)v7);
    }
    int v483 = *((_DWORD *)this + 20);
    if (v483 == 2 || v483 == 4) {
      unint64_t v12 = 0;
    }
  }
LABEL_919:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return v12;
}

void sub_1BB622D20(_Unwind_Exception *a1)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v1 + 240));
  atomic_fetch_add((atomic_uint *volatile)(v2 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV8::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(void **)a1 + 3504), 0x73706D64u, 0, 0, inData, inDataSize);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_20702()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  double result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    double result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t VoiceProcessorV8::OCNSAndSpeechEnhanceDLProcess(uint64_t this, AudioBufferList *a2, AudioBufferList *a3, int a4, uint64_t inNumberFrames)
{
  std::string v8 = a2;
  uint64_t v9 = this;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    this = *(void *)(this + 17560);
    mData = (const float *)a2->mBuffers[0].mData;
    UInt64 v11 = *(void *)(*(void *)(v9 + 17552) + 16) + 4 * inNumberFrames;
    inTimeStamp.Float64 mSampleTime = *(Float64 *)(*(void *)(v9 + 17552) + 16);
    inTimeStamp.mHostTime = v11;
    if (this) {
      this = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)this, mData, (DSPSplitComplex *)&inTimeStamp);
    }
  }
  uint64_t v12 = *(void *)(v9 + 8896);
  if ((v12 & 0x40) != 0 && (*(unsigned char *)(v9 + 8904) & 0x40) != 0)
  {
    this = *(void *)(v9 + 3552);
    if (this)
    {
      inInputBufferLists.imagp = 0;
      ioOutputBufferLists[1] = 0;
      p_UInt32 mNumberBuffers = (float *)&v8->mNumberBuffers;
      char v14 = a3;
      if (a4)
      {
        p_UInt32 mNumberBuffers = *(float **)(v9 + 17552);
        char v14 = (AudioBufferList *)p_mNumberBuffers;
      }
      inInputBufferLists.realp = p_mNumberBuffers;
      ioOutputBufferLists[0] = v14;
      long long v15 = *(_OWORD *)(v9 + 17704);
      *(_OWORD *)&inTimeStamp.Float64 mSampleTime = *(_OWORD *)(v9 + 17688);
      *(_OWORD *)&inTimeStamp.mRateScalar = v15;
      long long v16 = *(_OWORD *)(v9 + 17736);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)(v9 + 17720);
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v16;
      ioActionFlags[0] = 512;
      AudioUnitProcessMultiple((AudioUnit)this, ioActionFlags, &inTimeStamp, inNumberFrames, 2u, (const AudioBufferList **)&inInputBufferLists, 2u, ioOutputBufferLists);
      this = AudioUnitGetParameter(*(AudioUnit *)(v9 + 3552), 1u, 0, 0, (AudioUnitParameterValue *)(v9 + 16824));
      uint64_t v12 = *(void *)(v9 + 8896);
    }
  }
  if ((v12 & 0x80) != 0 && (*(unsigned char *)(v9 + 8904) & 0x80) != 0 && (this = *(void *)(v9 + 3560)) != 0)
  {
    double v17 = a3;
    if (a4)
    {
      std::string v8 = *(AudioBufferList **)(v9 + 17552);
      double v17 = v8;
    }
    *(void *)ioActionFlags = v17;
    ioOutputBufferLists[0] = v8;
    long long v18 = *(_OWORD *)(v9 + 17704);
    *(_OWORD *)&inTimeStamp.Float64 mSampleTime = *(_OWORD *)(v9 + 17688);
    *(_OWORD *)&inTimeStamp.mRateScalar = v18;
    long long v19 = *(_OWORD *)(v9 + 17736);
    *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)(v9 + 17720);
    *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v19;
    AudioUnitRenderActionFlags v24 = 512;
    AudioUnitSetProperty((AudioUnit)this, 0x3E9u, 0, 0, *(const void **)(*(void *)(v9 + 17504) + 16), *(_DWORD *)(*(void *)(v9 + 17504) + 12));
    AudioUnitSetProperty(*(AudioUnit *)(v9 + 3560), 0x3EAu, 0, 0, (const void *)(v9 + 17544), 4u);
    uint64_t v20 = *(_DWORD **)(v9 + 2336);
    if (v20 != *(_DWORD **)(v9 + 2344) && *v20 == 1886613611) {
      AudioUnitSetParameter(*(AudioUnit *)(v9 + 3560), 0x34u, 0, 0, *(AudioUnitParameterValue *)(v9 + 17548), 0);
    }
    this = AudioUnitProcessMultiple(*(AudioUnit *)(v9 + 3560), &v24, &inTimeStamp, inNumberFrames, 1u, (const AudioBufferList **)ioOutputBufferLists, 1u, (AudioBufferList **)ioActionFlags);
    if (a4)
    {
      this = *(void *)(v9 + 17560);
      std::__split_buffer<std::pair<std::string, std::string>> v21 = (float *)a3->mBuffers[0].mData;
      inInputBufferLists.realp = *(float **)(*(void *)(v9 + 17552) + 16);
      inInputBufferLists.imagp = &inInputBufferLists.realp[inNumberFrames];
      if (this) {
        this = VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, &inInputBufferLists, v21);
      }
    }
    if (*(unsigned char *)(v9 + 15961) || *(unsigned char *)(v9 + 15962)) {
      return VoiceProcessorV2::SaveFilesWriteSignal(v9, 0x58u, inNumberFrames, a3, &inTimeStamp);
    }
  }
  else if (a4)
  {
    this = *(void *)(v9 + 17560);
    double v22 = (float *)a3->mBuffers[0].mData;
    UInt64 v23 = *(void *)(*(void *)(v9 + 17552) + 16) + 4 * inNumberFrames;
    inTimeStamp.Float64 mSampleTime = *(Float64 *)(*(void *)(v9 + 17552) + 16);
    inTimeStamp.mHostTime = v23;
    if (this) {
      return VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, (const DSPSplitComplex *)&inTimeStamp, v22);
    }
  }
  return this;
}

float AUsubMAEC::dft::dftAnalysis(AUsubMAEC::dft *this, const float *__A, float *a3, float *a4, float *a5)
{
  uint64_t __C = 0;
  vDSP_vmul(__A, 1, *((const float **)this + 9), 1, *((float **)this + 10), 1, *((int *)this + 2));
  vDSP_vclr(a3, 1, *((int *)this + 3));
  vDSP_vclr(a4, 1, *((int *)this + 3));
  __Z.realp = a3;
  __Z.imagp = a4;
  vDSP_ctoz(*((const DSPComplex **)this + 10), 2, &__Z, 1, *((int *)this + 3));
  __Z.realp = a3;
  __Z.imagp = a4;
  if (*(void *)this) {
    MultiRadixRealFFT::RealInPlaceTransform(*(MultiRadixRealFFT **)this, &__Z, 1, v9);
  }
  vDSP_vsmul(a3, 1, (const float *)this + 11, a3, 1, *((int *)this + 3));
  vDSP_vsmul(a4, 1, (const float *)this + 11, a4, 1, *((int *)this + 3));
  uint64_t v10 = *((int *)this + 3);
  a3[v10] = *a4;
  *a4 = 0.0;
  a4[v10] = 0.0;
  vDSP_svesq(a3, 1, (float *)&__C + 1, *((int *)this + 6));
  vDSP_svesq(a4, 1, (float *)&__C, *((int *)this + 6));
  float result = (float)(*((float *)&__C + 1) + *(float *)&__C) * (float)*((int *)this + 2);
  *a5 = result;
  return result;
}

double AUsubMAEC::Kalman::initKalman(uint64_t a1, _DWORD *a2, char a3)
{
  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[2];
  *(_DWORD *)(a1 + 56) = a2[3];
  int v5 = a2[6];
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 64) = a2[13];
  *(_DWORD *)(a1 + 68) = a2[14];
  int v6 = a2[15];
  *(_DWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 76) = a2[16];
  *(_DWORD *)(a1 + 80) = a2[7];
  *(_DWORD *)(a1 + 272) = a2[9];
  if (a3)
  {
    std::string v7 = 0;
    *(void *)a1 = 0;
  }
  else
  {
    *(void *)a1 = allocMatrix(v5, v6);
    std::string v7 = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72));
    int v5 = *(_DWORD *)(a1 + 60);
    int v6 = *(_DWORD *)(a1 + 72);
  }
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = allocMatrix(v5, v6);
  *(void *)(a1 + 24) = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72));
  int v8 = 4 * *(_DWORD *)(a1 + 60);
  float v9 = malloc_type_malloc(v8, 0x2C8E6D5CuLL);
  uint64_t v10 = v9;
  if (v8 && !v9) {
    goto LABEL_52;
  }
  bzero(v9, v8);
  *(void *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 96) = xmmword_1BB87B900;
  int v11 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 112) = v11;
  int v12 = 4 * v11;
  int v13 = 4 * v11;
  char v14 = malloc_type_malloc(4 * v11, 0x2C8E6D5CuLL);
  long long v15 = v14;
  if (v12)
  {
    if (!v14) {
      goto LABEL_52;
    }
  }
  bzero(v14, v12);
  *(void *)(a1 + 120) = v15;
  *long long v15 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 64);
  if (*(int *)(a1 + 112) >= 2)
  {
    v15[1] = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 68);
    if (*(int *)(a1 + 112) >= 3) {
      v15[2] = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 68);
    }
  }
  long long v16 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
  double v17 = v16;
  if (v13)
  {
    if (!v16) {
      goto LABEL_52;
    }
  }
  bzero(v16, v12);
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 136) = 0;
  if (*(int *)(a1 + 112) < 1)
  {
    int v22 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a1 + 120);
    do
    {
      v17[v18] = *(_DWORD *)(a1 + 272) * *(_DWORD *)(v19 + 4 * v18);
      int v20 = *(_DWORD *)(a1 + 140);
      int v21 = *(_DWORD *)(v19 + 4 * v18) + *(_DWORD *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v21;
      *(_DWORD *)(a1 + 140) = v17[v18++] + v20;
    }
    while (v18 < *(int *)(a1 + 112));
    int v22 = 4 * v21;
  }
  UInt64 v23 = (char *)malloc_type_malloc(v22, 0x2C8E6D5CuLL);
  if (v22 && v23 == 0) {
    goto LABEL_52;
  }
  v25 = v23;
  bzero(v23, v22);
  *(void *)(a1 + 144) = v25;
  int v26 = *(_DWORD *)(a1 + 112);
  int v27 = *(_DWORD *)(a1 + 272);
  if (v26 >= 1)
  {
    uint64_t v28 = 0;
    int v29 = 0;
    int v30 = 0;
    uint64_t v31 = *(void *)(a1 + 120);
    uint64_t v32 = *(void *)(a1 + 128);
    do
    {
      int v33 = *(_DWORD *)(v31 + 4 * v28);
      if (v33 / v27 >= 1)
      {
        int v34 = 0;
        do
        {
          if (v27 >= 1)
          {
            uint64_t v35 = 0;
            int v36 = v30;
            int v37 = &v25[4 * v30];
            do
            {
              *(_DWORD *)&v37[4 * v35] = v29 + v35 + *(_DWORD *)(v31 + 4 * v28) * v35 + v34 * v27;
              ++v35;
              int v27 = *(_DWORD *)(a1 + 272);
            }
            while ((int)v35 < v27);
            int v30 = v36 + v35;
            int v33 = *(_DWORD *)(v31 + 4 * v28);
          }
          ++v34;
        }
        while (v34 < v33 / v27);
        int v26 = *(_DWORD *)(a1 + 112);
      }
      v29 += *(_DWORD *)(v32 + 4 * v28++);
    }
    while (v28 < v26);
  }
  *(void *)(a1 + 32) = allocMatrix(*(_DWORD *)(a1 + 60), v27 * *(_DWORD *)(a1 + 136));
  *(void *)(a1 + 40) = allocMatrix(*(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 136));
  uint64_t v38 = *(unsigned int *)(a1 + 60);
  if ((int)v38 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = *(unsigned int *)(a1 + 136);
    do
    {
      if ((int)v40 >= 1)
      {
        uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 8 * v39);
        double v42 = *(int **)(a1 + 144);
        uint64_t v43 = v40;
        do
        {
          uint64_t v44 = *v42++;
          *(_DWORD *)(v41 + 4 * v44) = 1008981770;
          --v43;
        }
        while (v43);
      }
      ++v39;
    }
    while (v39 != v38);
  }
  int v45 = 8 * *(_DWORD *)(a1 + 72);
  uint64_t v46 = (char *)malloc_type_malloc(v45, 0x2C8E6D5CuLL);
  if (v45 && v46 == 0) {
    goto LABEL_52;
  }
  int v48 = v46;
  bzero(v46, v45);
  uint64_t v49 = &v48[4 * *(int *)(a1 + 72)];
  *(void *)(a1 + 152) = v48;
  *(void *)(a1 + 160) = v49;
  uint64_t v50 = (char *)malloc_type_malloc(v45, 0x2C8E6D5CuLL);
  int v51 = v50;
  if (v45)
  {
    if (!v50) {
      goto LABEL_52;
    }
  }
  bzero(v50, v45);
  double v52 = &v51[4 * *(int *)(a1 + 72)];
  *(void *)(a1 + 168) = v51;
  *(void *)(a1 + 176) = v52;
  int v53 = 8 * *(_DWORD *)(a1 + 136);
  __int16 v54 = (char *)malloc_type_malloc(v53, 0x2C8E6D5CuLL);
  v55 = v54;
  if (v53)
  {
    if (!v54) {
      goto LABEL_52;
    }
  }
  bzero(v54, v53);
  float v56 = &v55[4 * *(int *)(a1 + 136)];
  *(void *)(a1 + 184) = v55;
  *(void *)(a1 + 192) = v56;
  uint64_t v57 = (char *)malloc_type_malloc(v53, 0x2C8E6D5CuLL);
  v58 = v57;
  if (v53)
  {
    if (!v57) {
      goto LABEL_52;
    }
  }
  bzero(v57, v53);
  int v59 = *(_DWORD *)(a1 + 140);
  uint64_t v60 = &v58[4 * *(int *)(a1 + 136)];
  *(void *)(a1 + 200) = v58;
  *(void *)(a1 + 208) = v60;
  int v61 = 8 * v59;
  int v62 = (char *)malloc_type_malloc(8 * v59, 0x2C8E6D5CuLL);
  int v63 = v62;
  if (v61)
  {
    if (!v62)
    {
LABEL_52:
      exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v67 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v62, v61);
  int v64 = &v63[4 * *(int *)(a1 + 140)];
  *(void *)(a1 + 216) = v63;
  *(void *)(a1 + 224) = v64;
  *(_OWORD *)(a1 + 232) = xmmword_1BB87B910;
  *(_DWORD *)(a1 + 248) = 1148846080;
  *(float *)(a1 + 252) = *(float *)(a1 + 96) * 1000.0;
  double result = 2.0615843e11;
  *(_OWORD *)(a1 + 256) = xmmword_1BB87B920;
  return result;
}

void AUsubMAEC::Kalman::removeKalman(AUsubMAEC::Kalman *this, char a2)
{
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 2);
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 3);
  if ((a2 & 1) == 0)
  {
    freeMatrix(*((_DWORD *)this + 15), (float ***)this);
    freeMatrix(*((_DWORD *)this + 15), (float ***)this + 1);
  }
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 4);
  freeMatrix(*((_DWORD *)this + 15), (float ***)this + 5);
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    free(v4);
    *((void *)this + 11) = 0;
  }
  int v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    free(v5);
    *((void *)this + 15) = 0;
  }
  int v6 = (void *)*((void *)this + 16);
  if (v6)
  {
    free(v6);
    *((void *)this + 16) = 0;
  }
  std::string v7 = (void *)*((void *)this + 18);
  if (v7)
  {
    free(v7);
    *((void *)this + 18) = 0;
  }
  int v8 = (void *)*((void *)this + 19);
  if (v8)
  {
    free(v8);
    *((void *)this + 19) = 0;
  }
  float v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    free(v9);
    *((void *)this + 21) = 0;
  }
  uint64_t v10 = (void *)*((void *)this + 23);
  if (v10)
  {
    free(v10);
    *((void *)this + 23) = 0;
  }
  int v11 = (void *)*((void *)this + 25);
  if (v11)
  {
    free(v11);
    *((void *)this + 25) = 0;
  }
  int v12 = (void *)*((void *)this + 27);
  if (v12)
  {
    free(v12);
    *((void *)this + 27) = 0;
  }
}

void AUsubMAEC::Kalman::rearrangeX(AUsubMAEC::Kalman *this, AUsubMAEC::dftBuffer *a2, int a3, float *a4, float *a5)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  uint64_t v10 = (void *)((char *)v49 - ((v9 + 15) & 0xFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  long long v16 = (void *)((char *)v49 - ((v15 + 15) & 0xFFFFFFFF0));
  if ((int)v14 >= 1)
  {
    double v17 = (int *)*((void *)a2 + 4);
    int v18 = *((_DWORD *)this + 15);
    uint64_t v19 = (vDSP_Length *)v10;
    do
    {
      int v20 = *v17++;
      *v19++ = a3 + 1 + v18 * v20;
      --v14;
    }
    while (v14);
  }
  LODWORD(v21) = *((_DWORD *)this + 12);
  v49[0] = v12;
  if ((int)v21 >= 1)
  {
    uint64_t v22 = 0;
    UInt64 v23 = a4;
    AudioUnitRenderActionFlags v24 = v12;
    do
    {
      v25 = *(const float **)(*((void *)a2 + 1) + 8 * v22);
      vDSP_vgathr(*(const float **)(*(void *)a2 + 8 * v22), v10, 1, v23, (int)v21, *((int *)this + 16));
      vDSP_vgathr(v25, v10, 1, v24, *((int *)this + 12), *((int *)this + 16));
      ++v22;
      uint64_t v21 = *((int *)this + 12);
      ++v24;
      ++v23;
    }
    while (v22 < v21);
    int v13 = *((_DWORD *)this + 17);
  }
  if (v13)
  {
    int v26 = *((_DWORD *)this + 16);
    if (v13 >= 1)
    {
      int v27 = *((_DWORD *)this + 15);
      int v28 = a3 - 1;
      if (v27 - 1 > a3) {
        int v28 = a3 + 1;
      }
      int v29 = (int *)*((void *)a2 + 5);
      int v30 = v28 + 1;
      uint64_t v31 = v13;
      uint64_t v32 = (vDSP_Length *)v16;
      do
      {
        int v33 = *v29++;
        *v32++ = v30 + v33 * v27;
        --v31;
      }
      while (v31);
    }
    int v34 = v26 * v21;
    if ((int)v21 >= 1)
    {
      uint64_t v35 = 0;
      int v36 = &a4[v34];
      int v37 = (float *)(v49[0] + 4 * v34);
      do
      {
        uint64_t v38 = *(const float **)(*((void *)a2 + 1) + 8 * v35);
        vDSP_vgathr(*(const float **)(*(void *)a2 + 8 * v35), v16, 1, v36, (int)v21, *((int *)this + 17));
        vDSP_vgathr(v38, v16, 1, v37, *((int *)this + 12), *((int *)this + 17));
        ++v35;
        uint64_t v21 = *((int *)this + 12);
        ++v37;
        ++v36;
      }
      while (v35 < v21);
      int v13 = *((_DWORD *)this + 17);
    }
    if (a3 < 1 || *((_DWORD *)this + 15) - 1 <= a3)
    {
      if (a3) {
        --a3;
      }
      else {
        a3 = 3;
      }
    }
    if (v13 >= 1)
    {
      uint64_t v39 = (int *)*((void *)a2 + 5);
      int v40 = *((_DWORD *)this + 15);
      uint64_t v41 = v13;
      double v42 = (vDSP_Length *)v16;
      do
      {
        int v43 = *v39++;
        *v42++ = a3 + v40 * v43;
        --v41;
      }
      while (v41);
    }
    if ((int)v21 >= 1)
    {
      uint64_t v44 = 0;
      int v45 = v34 + v13 * v21;
      uint64_t v46 = &a4[v45];
      uint64_t v47 = (float *)(v49[0] + 4 * v45);
      do
      {
        int v48 = *(const float **)(*((void *)a2 + 1) + 8 * v44);
        vDSP_vgathr(*(const float **)(*(void *)a2 + 8 * v44), v16, 1, v46, (int)v21, *((int *)this + 17));
        vDSP_vgathr(v48, v16, 1, v47, *((int *)this + 12), *((int *)this + 17));
        ++v44;
        ++v47;
        ++v46;
        uint64_t v21 = *((int *)this + 12);
      }
      while (v44 < v21);
    }
  }
}

void AUsubMAEC::Kalman::runKFFilter(AUsubMAEC::Kalman *this, AUsubMAEC::dftBuffer *a2, DSPSplitComplex a3, DSPSplitComplex a4, int a5, int a6)
{
  imagp = a4.imagp;
  realp = a4.realp;
  uint64_t v9 = a3.imagp;
  uint64_t v10 = a3.realp;
  LODWORD(v12) = *((_DWORD *)this + 15);
  if (a5)
  {
    if ((int)v12 < 1) {
      goto LABEL_10;
    }
    uint64_t v14 = 0;
    do
    {
      AUsubMAEC::Kalman::rearrangeX(this, a2, v14, *(float **)(*(void *)this + 8 * v14), *(float **)(*((void *)this + 1) + 8 * v14));
      ++v14;
      uint64_t v12 = *((int *)this + 15);
    }
    while (v14 < v12);
  }
  if ((int)v12 >= 1)
  {
    uint64_t v15 = 0;
    long long v16 = v9;
    double v17 = imagp;
    do
    {
      int v18 = *(float **)(*((void *)this + 1) + 8 * v15);
      __A.realp = *(float **)(*(void *)this + 8 * v15);
      __A.imagp = v18;
      uint64_t v19 = *(float **)(*((void *)this + 3) + 8 * v15);
      __B.realp = *(float **)(*((void *)this + 2) + 8 * v15);
      __B.imagp = v19;
      __C.realp = v10;
      __C.imagp = v16;
      vDSP_zdotpr(&__A, 1, &__B, 1, &__C, *((int *)this + 18));
      if (a6)
      {
        v21.realp = realp;
        v21.imagp = v17;
        vDSP_zdotpr(&__A, 2, &__B, 2, &v21, *((_DWORD *)this + 18) / *((_DWORD *)this + 12));
      }
      ++v15;
      ++v17;
      uint64_t v12 = *((int *)this + 15);
      ++realp;
      ++v16;
      ++v10;
    }
    while (v15 < v12);
  }
LABEL_10:
  float *v9 = 0.0;
  int v20 = v12 - 1;
  v9[v20] = 0.0;
  if (a6)
  {
    float *imagp = 0.0;
    imagp[v20] = 0.0;
  }
}

void AUsubMAEC::Kalman::adaptKalmanFilter(AUsubMAEC::Kalman *this, DSPSplitComplex a2, float *a3)
{
  imagp = a2.imagp;
  realp = a2.realp;
  int v6 = *((_DWORD *)this + 68);
  if (v6 == 1)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) < 1) {
      return;
    }
    uint64_t v7 = 0;
    uint64_t v220 = (const float *)((char *)this + 104);
    uint64_t v223 = (const float *)((char *)this + 108);
    LODWORD(v8) = *((_DWORD *)this + 34);
    do
    {
      uint64_t v9 = *(float **)(*(void *)this + 8 * v7);
      uint64_t v10 = *(float **)(*((void *)this + 1) + 8 * v7);
      uint64_t v11 = *(float **)(*((void *)this + 2) + 8 * v7);
      uint64_t v12 = *(float **)(*((void *)this + 3) + 8 * v7);
      int v13 = *(float **)(*((void *)this + 4) + 8 * v7);
      uint64_t v14 = *(float **)(*((void *)this + 5) + 8 * v7);
      vDSP_vsmul(v13, 1, v223, v13, 1, (int)v8);
      vDSP_vsmul(v14, 1, v223, v14, 1, *((int *)this + 34));
      vDSP_vsmul(v11, 1, v220, v11, 1, *((int *)this + 34));
      vDSP_vsmul(v12, 1, v220, v12, 1, *((int *)this + 34));
      uint64_t v8 = *((unsigned int *)this + 34);
      if ((int)v8 < 1)
      {
        float v17 = 0.0;
      }
      else
      {
        uint64_t v15 = v13;
        uint64_t v16 = *((unsigned int *)this + 34);
        do
        {
          *uint64_t v15 = *v15 + *((float *)this + 25);
          ++v15;
          --v16;
        }
        while (v16);
        float v17 = 0.0;
        int v18 = v9;
        uint64_t v19 = v10;
        int v20 = v13;
        uint64_t v21 = v8;
        do
        {
          float v22 = *v18++;
          float v23 = v22;
          float v24 = *v19++;
          float v25 = (float)(v24 * v24) + (float)(v23 * v23);
          float v26 = *v20++;
          float v17 = v17 + (float)(v25 * v26);
          --v21;
        }
        while (v21);
      }
      if ((int)v8 >= 1)
      {
        float v27 = (float)(v17 + *(float *)(*((void *)this + 11) + 4 * v7)) + 1.0e-20;
        float v28 = a3[v7] * (float)(1.0 / v27);
        int v29 = v13;
        int v30 = v9;
        uint64_t v31 = (float *)*((void *)this + 19);
        uint64_t v32 = (float *)*((void *)this + 20);
        int v33 = v31;
        int v34 = v10;
        uint64_t v35 = v32;
        uint64_t v36 = v8;
        do
        {
          float v37 = *v30++;
          *v33++ = v28 * (float)(*v29 * v37);
          float v38 = *v29++;
          float v39 = v38;
          float v40 = *v34++;
          *v35++ = v28 * (float)-(float)(v39 * v40);
          --v36;
        }
        while (v36);
        uint64_t v41 = v31;
        double v42 = (float *)*((void *)this + 25);
        int v43 = (float *)*((void *)this + 26);
        uint64_t v44 = v32;
        int v45 = v42;
        uint64_t v46 = v43;
        uint64_t v47 = v8;
        do
        {
          *v45++ = (float)(*v41 * realp[v7]) - (float)(*v44 * imagp[v7]);
          float v48 = *v41++;
          float v49 = v48;
          float v50 = *v44++;
          *v46++ = (float)(v50 * realp[v7]) + (float)(v49 * imagp[v7]);
          --v47;
        }
        while (v47);
        int v51 = v42;
        uint64_t v52 = v8;
        do
        {
          float v53 = *v51++;
          *uint64_t v11 = *v11 + v53;
          ++v11;
          float v54 = *v43++;
          *uint64_t v12 = *v12 + v54;
          ++v12;
          --v52;
        }
        while (v52);
        v55 = v42;
        uint64_t v56 = v8;
        do
        {
          float v57 = *v31++;
          float v58 = v57;
          float v59 = *v9++;
          float v60 = v59;
          float v61 = *v32++;
          float v62 = v61;
          float v63 = *v10++;
          *v55++ = (float)(v58 * v60) - (float)(v62 * v63);
          --v56;
        }
        while (v56);
        uint64_t v64 = v8;
        do
        {
          float v65 = *v42++;
          *int v13 = *v13 - (float)(v65 * *v13);
          ++v13;
          *v14++ = 0.0;
          --v64;
        }
        while (v64);
      }
      ++v7;
    }
    while (v7 < *((int *)this + 15));
    int v6 = *((_DWORD *)this + 68);
  }
  if (v6 == 2)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) < 1) {
      return;
    }
    uint64_t v66 = 0;
    uint64_t v192 = *((void *)this + 25);
    DSPSplitComplex __B = (float *)((char *)this + 108);
    uint64_t v198 = *((void *)this + 26);
    do
    {
      uint64_t v67 = *(void *)(*(void *)this + 8 * v66);
      uint64_t v68 = *(void *)(*((void *)this + 1) + 8 * v66);
      uint64_t v69 = *(void *)(*((void *)this + 2) + 8 * v66);
      uint64_t v203 = *(void *)(*((void *)this + 3) + 8 * v66);
      int v70 = *(float **)(*((void *)this + 4) + 8 * v66);
      int v71 = *(float **)(*((void *)this + 5) + 8 * v66);
      vDSP_vsmul(v70, 1, __B, v70, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
      long long v213 = v71;
      vDSP_vsmul(v71, 1, __B, v71, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
      uint64_t v72 = *((unsigned int *)this + 34);
      if ((int)v72 >= 1)
      {
        int v73 = (int *)*((void *)this + 18);
        do
        {
          uint64_t v74 = *v73++;
          v70[v74] = *((float *)this + 25) + v70[v74];
          --v72;
        }
        while (v72);
      }
      uint64_t v221 = *((unsigned int *)this + 28);
      if ((int)v221 >= 1)
      {
        uint64_t v200 = v69;
        uint64_t v75 = 0;
        int v76 = 0;
        int v77 = 0;
        float v78 = *(float *)(*((void *)this + 11) + 4 * v66) + 1.0e-20;
        uint64_t v215 = *((void *)this + 16);
        uint64_t v217 = *((void *)this + 15);
        uint64_t v79 = v67 + 4;
        do
        {
          uint64_t v80 = *(unsigned int *)(v217 + 4 * v75);
          if ((int)v80 >= 1)
          {
            unint64_t v81 = 0;
            uint64_t v82 = 0;
            uint64_t v83 = v79 + 4 * v77;
            uint64_t v84 = *((int *)this + 68);
            uint64_t v85 = v80 + v76;
            uint64_t v86 = &v71[v85];
            int v87 = &v70[v85];
            int v88 = &v71[v76];
            uint64_t v89 = v192 + 4 * v77;
            v90 = &v70[v76];
            uint64_t v91 = v198 + 4 * v77;
            uint64_t v92 = v68 + 4 * v77;
            do
            {
              long long v93 = (float *)(v89 + v81);
              *long long v93 = (float)((float)(*(float *)(v83 + v81) * v90[v81 / 4 + 1])
                           + (float)(*(float *)(v83 + v81 - 4) * v90[v81 / 4]))
                   - (float)(*(float *)(v92 + v81 + 4) * v88[v81 / 4 + 1]);
              int v94 = (float *)(v91 + v81);
              *int v94 = (float)((float)(*(float *)(v83 + v81) * v88[v81 / 4 + 1])
                           + (float)(*(float *)(v92 + v81) * v90[v81 / 4]))
                   + (float)(*(float *)(v92 + v81 + 4) * v90[v81 / 4 + 1]);
              v93[1] = (float)((float)(*(float *)(v83 + v81 - 4) * v87[v81 / 4])
                             - (float)(*(float *)(v92 + v81) * v86[v81 / 4]))
                     + (float)(*(float *)(v83 + v81) * v87[v81 / 4 + 1]);
              float v95 = (float)((float)(*(float *)(v92 + v81) * v87[v81 / 4])
                          + (float)(*(float *)(v83 + v81 - 4) * v86[v81 / 4]))
                  + (float)(*(float *)(v92 + v81 + 4) * v87[v81 / 4 + 1]);
              v94[1] = v95;
              float v78 = (float)((float)((float)(v78 + (float)(*(float *)(v89 + v81) * *(float *)(v83 + v81 - 4)))
                                  + (float)(*(float *)(v91 + v81) * *(float *)(v92 + v81)))
                          + (float)(*(float *)(v89 + v81 + 4) * *(float *)(v83 + v81)))
                  + (float)(v95 * *(float *)(v92 + v81 + 4));
              v82 += v84;
              v81 += 4 * v84;
            }
            while (v82 < v80);
          }
          v77 += v80;
          v76 += *(_DWORD *)(v215 + 4 * v75++);
        }
        while (v75 != v221);
        uint64_t v96 = 0;
        int v224 = 0;
        int v97 = 0;
        float v98 = (float)(1.0 / v78) * a3[v66];
        v207 = v71 + 1;
        int v210 = v70 + 1;
        uint64_t v201 = v200 + 4;
        uint64_t v204 = v203 + 4;
        do
        {
          uint64_t v99 = *(unsigned int *)(v217 + 4 * v96);
          if ((int)v99 >= 1)
          {
            unint64_t v100 = 0;
            uint64_t v101 = 0;
            unint64_t v102 = &v213[(int)v99 + v224];
            uint64_t v103 = *((int *)this + 68);
            uint64_t v104 = v192 + 4 + 4 * v97;
            UInt64 v105 = &v210[(int)v99 + v224];
            uint64_t v106 = *((void *)this + 20) + 4;
            uint64_t v107 = *((void *)this + 19) + 4;
            v108 = &v210[v224];
            uint64_t v109 = v204 + 4 * v97;
            uint64_t v110 = v201 + 4 * v97;
            uint64_t v111 = v198 + 4 + 4 * v97;
            do
            {
              int v112 = (float *)(v107 + v100);
              *(v112 - 1) = v98 * *(float *)(v192 + 4 * v97 + v100);
              float v113 = -(float)(*(float *)(v198 + 4 * v97 + v100) * v98);
              size_t v114 = (float *)(v106 + v100);
              *(v114 - 1) = v113;
              unint64_t v115 = (float *)(v110 + v100);
              *(v115 - 1) = (float)((float)(*(float *)(v107 + v100 - 4) * realp[v66])
                                  + (float)(*((float *)this + 26) * *(float *)(v110 + v100 - 4)))
                          - (float)(v113 * imagp[v66]);
              uint64_t v116 = (float *)(v109 + v100);
              *(v116 - 1) = (float)((float)(*(float *)(v106 + v100 - 4) * realp[v66])
                                  + (float)(*((float *)this + 26) * *(float *)(v109 + v100 - 4)))
                          + (float)(*(float *)(v107 + v100 - 4) * imagp[v66]);
              char v117 = &v108[v100 / 4];
              *(v117 - 1) = (float)(v108[v100 / 4 - 1]
                                  - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v192 + 4 * v97 + v100)))
                          + (float)(*(float *)(v106 + v100 - 4) * *(float *)(v198 + 4 * v97 + v100));
              int v118 = &v105[v100 / 4];
              *(v118 - 1) = (float)(v105[v100 / 4 - 1] - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v104 + v100)))
                          + (float)(*(float *)(v106 + v100 - 4) * *(float *)(v111 + v100));
              v102[v100 / 4] = (float)(v102[v100 / 4] - (float)(*(float *)(v107 + v100 - 4) * *(float *)(v111 + v100)))
                             - (float)(*(float *)(v106 + v100 - 4) * *(float *)(v104 + v100));
              *char v117 = v105[v100 / 4 - 1];
              v207[v224 + v100 / 4] = -v102[v100 / 4];
              *int v112 = v98 * *(float *)(v104 + v100);
              float v119 = -(float)(*(float *)(v111 + v100) * v98);
              *size_t v114 = v119;
              float *v115 = (float)((float)(*(float *)(v107 + v100) * realp[v66])
                            + (float)(*((float *)this + 26) * *(float *)(v110 + v100)))
                    - (float)(v119 * imagp[v66]);
              *uint64_t v116 = (float)((float)(*(float *)(v106 + v100) * realp[v66])
                            + (float)(*((float *)this + 26) * *(float *)(v109 + v100)))
                    + (float)(*(float *)(v107 + v100) * imagp[v66]);
              float *v118 = (float)(v105[v100 / 4] - (float)(*(float *)(v107 + v100) * *(float *)(v104 + v100)))
                    + (float)(*(float *)(v106 + v100) * *(float *)(v111 + v100));
              v101 += v103;
              v100 += 4 * v103;
            }
            while (v101 < v99);
          }
          v97 += v99;
          v224 += *(_DWORD *)(v215 + 4 * v96++);
        }
        while (v96 != v221);
      }
      ++v66;
    }
    while (v66 < *((int *)this + 15));
    int v6 = *((_DWORD *)this + 68);
  }
  if (v6 == 4)
  {
    *((float *)this + 25) = *((float *)this + 24) + *((float *)this + 24);
    if (*((int *)this + 15) >= 1)
    {
      uint64_t v120 = 0;
      uint64_t v183 = (float *)((char *)this + 108);
      uint64_t v193 = *((void *)this + 26) + 12;
      __Ba = (float *)(*((void *)this + 25) + 12);
      do
      {
        uint64_t v121 = *(void *)(*(void *)this + 8 * v120);
        uint64_t v122 = *(void *)(*((void *)this + 1) + 8 * v120);
        uint64_t v205 = *(void *)(*((void *)this + 3) + 8 * v120);
        uint64_t v208 = *(void *)(*((void *)this + 2) + 8 * v120);
        uint64_t v123 = *(float **)(*((void *)this + 4) + 8 * v120);
        unint64_t v124 = *(float **)(*((void *)this + 5) + 8 * v120);
        vDSP_vsmul(v123, 1, v183, v123, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
        std::string::size_type v211 = v124;
        vDSP_vsmul(v124, 1, v183, v124, 1, *((int *)this + 68) * (uint64_t)*((int *)this + 34));
        uint64_t v125 = *((unsigned int *)this + 34);
        if ((int)v125 >= 1)
        {
          v126 = (int *)*((void *)this + 18);
          do
          {
            uint64_t v127 = *v126++;
            v123[v127] = *((float *)this + 25) + v123[v127];
            --v125;
          }
          while (v125);
        }
        uint64_t v197 = *((unsigned int *)this + 28);
        if ((int)v197 >= 1)
        {
          uint64_t v128 = 0;
          int v129 = 0;
          int v130 = 0;
          float v131 = *(float *)(*((void *)this + 11) + 4 * v120) + 1.0e-20;
          uint64_t v225 = *((void *)this + 15);
          uint64_t v222 = *((void *)this + 16);
          uint64_t v218 = v124 + 1;
          do
          {
            uint64_t v132 = *(unsigned int *)(v225 + 4 * v128);
            if ((int)v132 >= 1)
            {
              unint64_t v133 = 0;
              uint64_t v134 = 0;
              unsigned int v135 = &v218[v129];
              uint64_t v136 = *((int *)this + 68);
              unsigned int v137 = &v123[v129];
              uint64_t v138 = v121 + 12 + 4 * v130;
              uint64_t v139 = v122 + 12 + 4 * v130;
              int v140 = &__Ba[v130];
              uint64_t v141 = v132;
              uint64_t v142 = v193 + 4 * v130;
              do
              {
                size_t v143 = &v140[v133 / 4];
                *(v143 - 3) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 8)
                                                                            * v137[v133 / 4 + 1])
                                                                    + (float)(*(float *)(v138 + v133 - 12)
                                                                            * v137[v133 / 4]))
                                                            - (float)(*(float *)(v139 + v133 - 8) * v135[v133 / 4]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v137[v133 / 4 + 2]))
                                            - (float)(*(float *)(v139 + v133 - 4) * v135[v133 / 4 + 1]))
                                    + (float)(*(float *)(v138 + v133) * v137[v133 / 4 + 3]))
                            - (float)(*(float *)(v139 + v133) * v135[v133 / 4 + 2]);
                uint64_t v144 = (float *)(v142 + v133);
                *(v144 - 3) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 8)
                                                                            * v135[v133 / 4])
                                                                    + (float)(*(float *)(v139 + v133 - 12)
                                                                            * v137[v133 / 4]))
                                                            + (float)(*(float *)(v139 + v133 - 8) * v137[v133 / 4 + 1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v135[v133 / 4 + 1]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v137[v133 / 4 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v135[v133 / 4 + 2]))
                            + (float)(*(float *)(v139 + v133) * v137[v133 / 4 + 3]);
                long long v145 = &v135[v133 / 4 - 1 + v132];
                v146 = &v137[v133 / 4 + v141];
                *(v143 - 2) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 12)
                                                                            * v137[v133 / 4 + v132])
                                                                    - (float)(*(float *)(v139 + v133 - 12) * *v145))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v146[1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v146[2]))
                                            - (float)(*(float *)(v139 + v133 - 4) * v145[2]))
                                    + (float)(*(float *)(v138 + v133) * v146[3]))
                            - (float)(*(float *)(v139 + v133) * v145[3]);
                *(v144 - 2) = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12)
                                                                            * v137[v133 / 4 + v132])
                                                                    + (float)(*(float *)(v138 + v133 - 12) * *v145))
                                                            + (float)(*(float *)(v139 + v133 - 8) * v146[1]))
                                                    + (float)(*(float *)(v138 + v133 - 4) * v145[2]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v146[2]))
                                    + (float)(*(float *)(v138 + v133) * v145[3]))
                            + (float)(*(float *)(v139 + v133) * v146[3]);
                std::string::size_type v147 = &v146[v141];
                uint64_t v148 = &v145[v141];
                *(v143 - 1) = (float)((float)((float)((float)((float)((float)(*(float *)(v138 + v133 - 12) * v146[v132])
                                                                    - (float)(*(float *)(v139 + v133 - 12) * v145[v132]))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v146[v141 + 1]))
                                                    - (float)(*(float *)(v139 + v133 - 8) * v145[v141 + 1]))
                                            + (float)(*(float *)(v138 + v133 - 4) * v146[v141 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v146[v141 + 3]))
                            - (float)(*(float *)(v139 + v133) * v145[v141 + 3]);
                *(v144 - 1) = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12) * v146[v132])
                                                                    + (float)(*(float *)(v138 + v133 - 12) * v145[v132]))
                                                            + (float)(*(float *)(v138 + v133 - 8) * v145[v141 + 1]))
                                                    + (float)(*(float *)(v139 + v133 - 8) * v146[v141 + 1]))
                                            + (float)(*(float *)(v139 + v133 - 4) * v146[v141 + 2]))
                                    + (float)(*(float *)(v138 + v133) * v145[v141 + 3]))
                            + (float)(*(float *)(v139 + v133) * v146[v141 + 3]);
                float v149 = v146[v132 + v132];
                v150 = &v146[v141 + v141];
                float v151 = -(float)(*(float *)(v122 + 4 * v130 + v133) * v145[v132 + v132]);
                long long v152 = &v145[v141 + v141];
                *size_t v143 = (float)((float)((float)((float)((float)(v151 + (float)(*(float *)(v138 + v133 - 12) * v149))
                                                      + (float)(*(float *)(v138 + v133 - 8) * v150[1]))
                                              - (float)(*(float *)(v139 + v133 - 8) * v152[1]))
                                      + (float)(*(float *)(v138 + v133 - 4) * v150[2]))
                              - (float)(*(float *)(v139 + v133 - 4) * v152[2]))
                      + (float)(*(float *)(v138 + v133) * v150[3]);
                float v153 = (float)((float)((float)((float)((float)((float)(*(float *)(v139 + v133 - 12) * v147[v132])
                                                             + (float)(*(float *)(v138 + v133 - 12) * v148[v132]))
                                                     + (float)(*(float *)(v138 + v133 - 8) * v152[1]))
                                             + (float)(*(float *)(v139 + v133 - 8) * v150[1]))
                                     + (float)(*(float *)(v138 + v133 - 4) * v152[2]))
                             + (float)(*(float *)(v139 + v133 - 4) * v150[2]))
                     + (float)(*(float *)(v139 + v133) * v150[3]);
                float *v144 = v153;
                float v131 = (float)((float)((float)((float)((float)((float)((float)(v131
                                                                             + (float)(v140[v133 / 4 - 3]
                                                                                     * *(float *)(v138 + v133 - 12)))
                                                                     + (float)(*(float *)(v142 + v133 - 12)
                                                                             * *(float *)(v139 + v133 - 12)))
                                                             + (float)(v140[v133 / 4 - 2] * *(float *)(v138 + v133 - 8)))
                                                     + (float)(*(float *)(v142 + v133 - 8) * *(float *)(v139 + v133 - 8)))
                                             + (float)(v140[v133 / 4 - 1] * *(float *)(v138 + v133 - 4)))
                                     + (float)(*(float *)(v142 + v133 - 4) * *(float *)(v139 + v133 - 4)))
                             + (float)(v140[v133 / 4] * *(float *)(v138 + v133)))
                     + (float)(v153 * *(float *)(v139 + v133));
                v134 += v136;
                v133 += 4 * v136;
              }
              while (v134 < v132);
            }
            v130 += v132;
            v129 += *(_DWORD *)(v222 + 4 * v128++);
          }
          while (v128 != v197);
          uint64_t v154 = 0;
          int v202 = 0;
          int v199 = 0;
          float v155 = (float)(1.0 / v131) * a3[v120];
          uint64_t v191 = *((void *)this + 15);
          v189 = v211 + 2;
          uint64_t v190 = *((void *)this + 16);
          double v187 = v211 + 3;
          uint64_t v188 = v123 + 3;
          uint64_t v185 = v208 + 12;
          uint64_t v186 = v205 + 12;
          do
          {
            uint64_t v196 = v154;
            uint64_t v156 = *(unsigned int *)(v191 + 4 * v154);
            if ((int)v156 >= 1)
            {
              unint64_t v157 = 0;
              uint64_t v158 = 0;
              int v159 = v202 + 2 * v156;
              uint64_t v160 = *((int *)this + 68);
              v226 = &v189[v159 + (int)v156];
              uint64_t v219 = &__Ba[v199];
              uint64_t v216 = &v188[v159 + (int)v156];
              uint64_t v212 = *((void *)this + 19) + 12;
              uint64_t v214 = *((void *)this + 20) + 12;
              uint64_t v206 = &v188[v159];
              uint64_t v209 = &v187[v159];
              UInt64 v161 = &v187[(int)v156 + v202];
              UInt64 v162 = &v188[(int)v156 + v202];
              std::string::size_type v163 = &v188[v202];
              uint64_t v164 = v186 + 4 * v199;
              uint64_t v165 = v185 + 4 * v199;
              uint64_t v166 = v193 + 4 * v199;
              do
              {
                size_t v167 = (float *)(v212 + v157);
                *(v167 - 3) = v155 * v219[v157 / 4 - 3];
                float v168 = -(float)(*(float *)(v166 + v157 - 12) * v155);
                unint64_t v169 = (float *)(v214 + v157);
                *(v169 - 3) = v168;
                unint64_t v170 = (float *)(v165 + v157);
                *(v170 - 3) = (float)((float)(*(float *)(v212 + v157 - 12) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 12)))
                            - (float)(v168 * imagp[v120]);
                int v171 = (float *)(v164 + v157);
                *(v171 - 3) = (float)((float)(*(float *)(v214 + v157 - 12) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 12)))
                            + (float)(*(float *)(v212 + v157 - 12) * imagp[v120]);
                uint64_t v172 = &v163[v157 / 4];
                v173 = &v162[v157 / 4];
                *(v172 - 3) = (float)(v163[v157 / 4 - 3] - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 3]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 12));
                *(v173 - 3) = (float)(v162[v157 / 4 - 3] - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 2]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 8));
                std::string::size_type v174 = &v161[v157 / 4];
                *(v174 - 3) = (float)(v161[v157 / 4 - 3]
                                    - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157 - 8)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4 - 2]);
                *(v172 - 2) = v162[v157 / 4 - 3];
                char v175 = &v187[v202 + v157 / 4];
                unint64_t v176 = &v206[v157 / 4];
                *(v175 - 2) = -v161[v157 / 4 - 3];
                *(v176 - 3) = (float)(*(v176 - 3) - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157 - 4));
                std::__split_buffer<std::pair<std::string, std::string>>::pointer v177 = &v209[v157 / 4];
                *(v177 - 3) = (float)(v209[v157 / 4 - 3]
                                    - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157 - 4)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4 - 1]);
                *(v172 - 1) = v206[v157 / 4 - 3];
                *(v175 - 1) = -v209[v157 / 4 - 3];
                uint64_t v178 = &v216[v157 / 4];
                *(v178 - 3) = (float)(*(v178 - 3) - (float)(*(float *)(v212 + v157 - 12) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 12) * *(float *)(v166 + v157));
                v179 = &v226[v157 / 4];
                *(v179 - 2) = (float)(*(v179 - 2) - (float)(*(float *)(v212 + v157 - 12) * *(float *)(v166 + v157)))
                            - (float)(*(float *)(v214 + v157 - 12) * v219[v157 / 4]);
                *uint64_t v172 = v216[v157 / 4 - 3];
                *char v175 = -v226[v157 / 4 - 2];
                *(v167 - 2) = v155 * v219[v157 / 4 - 2];
                float v180 = -(float)(*(float *)(v166 + v157 - 8) * v155);
                *(v169 - 2) = v180;
                *(v170 - 2) = (float)((float)(*(float *)(v212 + v157 - 8) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 8)))
                            - (float)(v180 * imagp[v120]);
                *(v171 - 2) = (float)((float)(*(float *)(v214 + v157 - 8) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 8)))
                            + (float)(*(float *)(v212 + v157 - 8) * imagp[v120]);
                *(v173 - 2) = (float)(v162[v157 / 4 - 2] - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4 - 2]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157 - 8));
                *(v176 - 2) = (float)(*(v176 - 2) - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157 - 4));
                *(v177 - 2) = (float)(*(v177 - 2) - (float)(*(float *)(v212 + v157 - 8) * *(float *)(v166 + v157 - 4)))
                            - (float)(*(float *)(v214 + v157 - 8) * v219[v157 / 4 - 1]);
                *(v173 - 1) = v206[v157 / 4 - 2];
                *(v174 - 1) = -v209[v157 / 4 - 2];
                *(v178 - 2) = (float)(*(v178 - 2) - (float)(*(float *)(v212 + v157 - 8) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 8) * *(float *)(v166 + v157));
                *(v179 - 1) = (float)(*(v179 - 1) - (float)(*(float *)(v212 + v157 - 8) * *(float *)(v166 + v157)))
                            - (float)(*(float *)(v214 + v157 - 8) * v219[v157 / 4]);
                float *v173 = v216[v157 / 4 - 2];
                *std::string::size_type v174 = -v226[v157 / 4 - 1];
                *(v167 - 1) = v155 * v219[v157 / 4 - 1];
                float v181 = -(float)(*(float *)(v166 + v157 - 4) * v155);
                *(v169 - 1) = v181;
                *(v170 - 1) = (float)((float)(*(float *)(v212 + v157 - 4) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v165 + v157 - 4)))
                            - (float)(v181 * imagp[v120]);
                *(v171 - 1) = (float)((float)(*(float *)(v214 + v157 - 4) * realp[v120])
                                    + (float)(*((float *)this + 26) * *(float *)(v164 + v157 - 4)))
                            + (float)(*(float *)(v212 + v157 - 4) * imagp[v120]);
                *(v176 - 1) = (float)(*(v176 - 1) - (float)(*(float *)(v212 + v157 - 4) * v219[v157 / 4 - 1]))
                            + (float)(*(float *)(v214 + v157 - 4) * *(float *)(v166 + v157 - 4));
                *(v178 - 1) = (float)(*(v178 - 1) - (float)(*(float *)(v212 + v157 - 4) * v219[v157 / 4]))
                            + (float)(*(float *)(v214 + v157 - 4) * *(float *)(v166 + v157));
                float *v179 = (float)(*v179 - (float)(*(float *)(v212 + v157 - 4) * *(float *)(v166 + v157)))
                      - (float)(*(float *)(v214 + v157 - 4) * v219[v157 / 4]);
                float *v176 = v216[v157 / 4 - 1];
                *std::__split_buffer<std::pair<std::string, std::string>>::pointer v177 = -v226[v157 / 4];
                *size_t v167 = v155 * v219[v157 / 4];
                float v182 = -(float)(*(float *)(v166 + v157) * v155);
                float *v169 = v182;
                *unint64_t v170 = (float)((float)(*(float *)(v212 + v157) * realp[v120])
                              + (float)(*((float *)this + 26) * *(float *)(v165 + v157)))
                      - (float)(v182 * imagp[v120]);
                float *v171 = (float)((float)(*(float *)(v214 + v157) * realp[v120])
                              + (float)(*((float *)this + 26) * *(float *)(v164 + v157)))
                      + (float)(*(float *)(v212 + v157) * imagp[v120]);
                *uint64_t v178 = (float)(v216[v157 / 4] - (float)(*(float *)(v212 + v157) * v219[v157 / 4]))
                      + (float)(*(float *)(v214 + v157) * *(float *)(v166 + v157));
                v158 += v160;
                v157 += 4 * v160;
              }
              while (v158 < v156);
            }
            v199 += v156;
            v202 += *(_DWORD *)(v190 + 4 * v196);
            uint64_t v154 = v196 + 1;
          }
          while (v196 + 1 != v197);
        }
        ++v120;
      }
      while (v120 < *((int *)this + 15));
    }
  }
}

uint64_t *ecRMGS::ec_state_reset(ecRMGS *this)
{
  unint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v19 = *((void *)this + 12);
    int v20 = 0;
    std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v19, v2);
  }
  unint64_t v3 = *((void *)this + 16);
  if (v3)
  {
    uint64_t v19 = *((void *)this + 15);
    int v20 = 0;
    std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v19, v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  uint64_t v5 = *((void *)this + 19) - (void)v4;
  if (v5 >= 1) {
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  int v6 = (void *)*((void *)this + 21);
  uint64_t v7 = *((void *)this + 22) - (void)v6;
  if (v7 >= 1) {
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  ecutils::fcn_vector_fill<float>(*((void *)this + 24), *((void *)this + 25), 0.0);
  uint64_t v8 = (void *)*((void *)this + 27);
  uint64_t v9 = *((void *)this + 28) - (void)v8;
  if (v9 >= 1) {
    bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  }
  uint64_t v10 = (void *)*((void *)this + 30);
  uint64_t v11 = *((void *)this + 31) - (void)v10;
  if (v11 >= 1) {
    bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
  uint64_t v12 = (void *)*((void *)this + 33);
  uint64_t v13 = *((void *)this + 34) - (void)v12;
  if (v13 >= 1) {
    memset_pattern16(v12, &unk_1BB873A60, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  uint64_t v14 = (void *)*((void *)this + 39);
  uint64_t v15 = *((void *)this + 40) - (void)v14;
  if (v15 >= 1) {
    bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  ecutils::fcn_vector_fill<float>(*((void *)this + 45), *((void *)this + 46), 1.0);
  uint64_t v16 = (void *)*((void *)this + 42);
  uint64_t v17 = *((void *)this + 43) - (void)v16;
  if (v17 >= 1) {
    memset_pattern16(v16, &unk_1BB873A60, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  }
  ecutils::fcn_vector_fill<float>(*((void *)this + 48), *((void *)this + 49), 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 51, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 54, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 57, 0.0);
  ecutils::fcn_vector_fill<float>(*((void *)this + 63), *((void *)this + 64), 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 60, 0.0);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 66);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 69);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 72);
  ecutils::fcn_vector_fill<float>((uint64_t *)this + 75);
  return ecutils::fcn_vector_fill<float>((uint64_t *)this + 78, *((float *)this + 4));
}

uint64_t ecutils::fcn_vector_fill<float>(uint64_t result, uint64_t a2, float a3)
{
  if (a2 != result)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (a2 - result) / 24;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      uint64_t v5 = result + 24 * v3;
      int v6 = *(float **)v5;
      uint64_t v7 = *(void *)(v5 + 8) - *(void *)v5;
      if (v7 >= 1)
      {
        unint64_t v8 = ((unint64_t)v7 >> 2) + 1;
        do
        {
          *v6++ = a3;
          --v8;
        }
        while (v8 > 1);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *ecutils::fcn_vector_fill<float>(uint64_t *result, float a2)
{
  uint64_t v2 = *result;
  if (result[1] != *result)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      double result = (uint64_t *)ecutils::fcn_vector_fill<float>(*(void *)(v2 + v5), *(void *)(v2 + v5 + 8), a2);
      ++v6;
      uint64_t v2 = *v4;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3) > v6);
  }
  return result;
}

uint64_t *ecutils::fcn_vector_fill<float>(uint64_t *result)
{
  uint64_t v1 = *result;
  if (result[1] != *result)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      double result = ecutils::fcn_vector_fill<float>((uint64_t *)(v1 + v3), 0.0);
      ++v4;
      uint64_t v1 = *v2;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 3) > v4);
  }
  return result;
}

void std::vector<std::shared_ptr<IR::SharedIRBuses::IRBus>>::resize(char **a1, unint64_t a2, void *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = (v6 - *a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      float v24 = &v5[16 * a2];
      while (v6 != v24)
      {
        float v25 = (std::__shared_weak_count *)*((void *)v6 - 1);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        v6 -= 16;
      }
      a1[1] = v24;
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 > (v9 - v6) >> 4)
    {
      if (a2 >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = v9 - v5;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= a2) {
        uint64_t v11 = a2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(16 * v12);
      uint64_t v14 = &v13[16 * v7];
      uint64_t v15 = &v13[16 * a2];
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a3[1];
        *(void *)uint64_t v16 = *a3;
        *((void *)v16 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        v16 += 16;
      }
      while (v16 != v15);
      int v18 = &v13[16 * v12];
      uint64_t v19 = *a1;
      int v20 = a1[1];
      if (v20 == *a1)
      {
        *a1 = v14;
        a1[1] = v15;
        a1[2] = v18;
        if (!v20) {
          return;
        }
      }
      else
      {
        do
        {
          long long v21 = *((_OWORD *)v20 - 1);
          v20 -= 16;
          *((_OWORD *)v14 - 1) = v21;
          v14 -= 16;
          *(void *)int v20 = 0;
          *((void *)v20 + 1) = 0;
        }
        while (v20 != v19);
        float v22 = *a1;
        int v20 = a1[1];
        *a1 = v14;
        a1[1] = v15;
        a1[2] = v18;
        if (v20 != v22)
        {
          do
          {
            float v23 = (std::__shared_weak_count *)*((void *)v20 - 1);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            v20 -= 16;
          }
          while (v20 != v22);
          int v20 = v22;
        }
        if (!v20) {
          return;
        }
      }
      operator delete(v20);
      return;
    }
    float v26 = &v6[16 * (a2 - v7)];
    do
    {
      uint64_t v27 = a3[1];
      *(void *)unint64_t v6 = *a3;
      *((void *)v6 + 1) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 16;
    }
    while (v6 != v26);
    a1[1] = v26;
  }
}

void IR::SharedIRBuses::checkForAppliedChanges(IR::SharedIRBuses *this)
{
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *((void *)this + 13);
  uint64_t v2 = (char **)((char *)this + 96);
  unint64_t v5 = (v4 - v3) >> 4;
  unint64_t v6 = *((unsigned int *)v2 + 36);
  if (v5 != v6)
  {
    v19[0] = 0;
    v19[1] = 0;
    std::vector<std::shared_ptr<IR::SharedIRBuses::IRBus>>::resize(v2, v6, v19);
    unint64_t v5 = *((unsigned int *)this + 60);
  }
  if (v5 != (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 2)
  {
    LODWORD(v19[0]) = 0;
    std::vector<float>::resize((uint64_t)this + 120, v5, v19);
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 144);
  if (v7)
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)this + 146);
    if (v8) {
      uint64_t v9 = 48;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v8) {
      uint64_t v10 = (IR::SharedIRBuses *)((char *)this + 48);
    }
    else {
      uint64_t v10 = this;
    }
    uint64_t v11 = *((void *)v10 + 1) - *(void *)((char *)this + v9);
    if ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 4 >= (unint64_t)(v11 >> 4)) {
      uint64_t v12 = v11 >> 4;
    }
    else {
      uint64_t v12 = (uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 4;
    }
    if (v12)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *((void *)this + 12);
        long long v15 = *(_OWORD *)(*(void *)((char *)this + v9) + v13);
        uint64_t v16 = *(void *)(*(void *)((char *)this + v9) + v13 + 8);
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = v14 + v13;
        int v18 = *(std::__shared_weak_count **)(v17 + 8);
        *(_OWORD *)uint64_t v17 = v15;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    atomic_store(0, (unsigned __int8 *)this + 144);
  }
}

uint64_t IR::SharedIRBuses::setNumInputChannels(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 240) != a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = this + 148;
    char v5 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 148));
    *(_DWORD *)(v3 + 240) = a2;
    IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)v3);
    atomic_store(1u, (unsigned __int8 *)(v3 + 145));
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
  }
  return this;
}

void sub_1BB62583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IR::SharedIRBuses::reset(IR::SharedIRBuses *this)
{
  uint64_t v12 = (char *)this + 148;
  char v13 = 1;
  caulk::pooled_semaphore_mutex::_lock((IR::SharedIRBuses *)((char *)this + 148));
  IR::SharedIRBuses::checkForAppliedChanges(this);
  IR::SharedIRBuses::markAllBusesAsNotProcessed((uint64_t *)this);
  uint64_t v2 = (uint64_t *)*((void *)this + 12);
  for (unint64_t i = (uint64_t *)*((void *)this + 13); v2 != i; v2 += 2)
  {
    uint64_t v4 = *v2;
    if (*v2 && !*(unsigned char *)(v4 + 8))
    {
      IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v4 + 16));
      IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v2 + 416));
      ParametricFilters::reset((ParametricFilters *)(*v2 + 216));
      *(unsigned char *)(*v2 + 8) = 1;
    }
  }
  char v5 = *(uint64_t **)this;
  unint64_t v6 = (uint64_t *)*((void *)this + 1);
  if (*(uint64_t **)this != v6)
  {
    do
    {
      uint64_t v7 = *v5;
      if (*v5 && !*(unsigned char *)(v7 + 8))
      {
        IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v7 + 16));
        IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v5 + 416));
        ParametricFilters::reset((ParametricFilters *)(*v5 + 216));
        *(unsigned char *)(*v5 + 8) = 1;
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  unsigned __int8 v8 = (uint64_t *)*((void *)this + 6);
  for (unint64_t j = (uint64_t *)*((void *)this + 7); v8 != j; v8 += 2)
  {
    uint64_t v10 = *v8;
    if (*v8 && !*(unsigned char *)(v10 + 8))
    {
      IR::DynamicIRProcessor::reset((IR::DynamicIRProcessor *)(v10 + 16));
      IR::FixedIntegerDelay::reset((IR::FixedIntegerDelay *)(*v8 + 416));
      ParametricFilters::reset((ParametricFilters *)(*v8 + 216));
      *(unsigned char *)(*v8 + 8) = 1;
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 145);
  *((unsigned char *)this + 245) = 1;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_1BB6259B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *IR::SharedIRBuses::markAllBusesAsNotProcessed(uint64_t *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1];
  while (v1 != v2)
  {
    if (*(void *)v1) {
      *(unsigned char *)(*(void *)v1 + 8) = 0;
    }
    v1 += 16;
  }
  uint64_t v3 = this[27];
  uint64_t v4 = this[28];
  while (v3 != v4)
  {
    if (*(void *)v3) {
      *(unsigned char *)(*(void *)v3 + 8) = 0;
    }
    v3 += 16;
  }
  uint64_t v5 = this[6];
  uint64_t v6 = this[7];
  while (v5 != v6)
  {
    if (*(void *)v5) {
      *(unsigned char *)(*(void *)v5 + 8) = 0;
    }
    v5 += 16;
  }
  return this;
}

void IR::DynamicIRProcessor::~DynamicIRProcessor(IR::DynamicIRProcessor *this)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 12));
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 6, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 5, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 4, 0);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 448);
  if (v3)
  {
    *(void *)(a1 + 456) = v3;
    operator delete(v3);
  }
  ParametricFilters::~ParametricFilters((void **)(a1 + 240));
  uint64_t v4 = *(void **)(a1 + 216);
  if (v4)
  {
    *(void *)(a1 + 224) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 88), 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 80), 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 72), 0);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<IR::SharedIRBuses::IRBus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t IR::SharedIRBuses::reconfigure(uint64_t a1, unsigned int a2, uint64_t *a3, CFTypeRef *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 256)) {
    return -10867;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 244));
  if ((v5 & 1) == 0) {
    return -10867;
  }
  uint64_t v46 = a1 + 148;
  char v47 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 148));
  unsigned int v10 = *(_DWORD *)(a1 + 240);
  if (v10 <= a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v51) = 67109376;
      HIDWORD(v51) = a2;
      __int16 v52 = 1024;
      *(_DWORD *)float v53 = v10;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Reconfiguring non-existent SharedIRBus channel %u. Total number of channels = %u", (uint8_t *)&v51, 0xEu);
    }
    __int16 v6 = -10877;
    goto LABEL_80;
  }
  IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)a1);
  if (*a3)
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v51, *a3);
  }
  else
  {
    uint64_t v45 = 0;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v51, 0, 128, 1, *(float *)(a1 + 252));
  }
  if (v54)
  {
    unsigned int v11 = *(_DWORD *)&v53[2];
    if (*(_DWORD *)&v53[2])
    {
      if (v55 > *(_DWORD *)&v53[2])
      {
        char v54 = 0;
        unsigned int v12 = v55 >> 1;
        if (v55 >> 1 > 0x2000) {
          unsigned int v12 = 8193;
        }
        if (*(_DWORD *)&v53[2] < v12)
        {
          int v13 = v59;
          do
          {
            v11 *= 2;
            v13 *= 2;
          }
          while (v11 < v12);
          *(_DWORD *)&v53[2] = v11;
          int v59 = v13;
        }
      }
    }
  }
  uint64_t v14 = *(void **)(a1 + 96);
  long long v15 = *(void **)(a1 + 104);
  if (v14 == v15)
  {
LABEL_42:
    float v39 = 0;
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v16 = *v14;
    if (!*v14 || *(_DWORD *)(v16 + 408) != *(_DWORD *)(a1 + 248)) {
      goto LABEL_41;
    }
    v40[0] = (CFTypeRef)(v16 + 180);
    v40[1] = (CFTypeRef)(v16 + 184);
    std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)(v16 + 180), (caulk::pooled_semaphore_mutex *)(v16 + 184));
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)(v16 + 160));
    if ((v17 & 1) == 0 || (uint64_t v18 = *(void *)(v16 + 56)) == 0)
    {
      uint64_t v18 = *(void *)(v16 + 48);
      if (!v18) {
        break;
      }
    }
    int v19 = (*(uint64_t (**)(void))(**(void **)(v18 + 24) + 16))(*(void *)(v18 + 24));
    std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100]((caulk::pooled_semaphore_mutex **)v40);
    if (v19 != 1) {
      goto LABEL_29;
    }
LABEL_41:
    v14 += 2;
    if (v14 == v15) {
      goto LABEL_42;
    }
  }
  std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100]((caulk::pooled_semaphore_mutex **)v40);
LABEL_29:
  uint64_t v20 = *v14;
  float v49 = (caulk::pooled_semaphore_mutex *)(*v14 + 184);
  LOBYTE(v50) = 1;
  caulk::pooled_semaphore_mutex::_lock(v49);
  uint64_t v21 = *(void *)(v20 + 32);
  if (v21)
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)v40, v21 + 8);
  }
  else
  {
    uint64_t v48 = 0;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)v40, 0, 0, 1, 0.0);
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v49);
  int v22 = IR::IRDataAttributes::operator==((uint64_t)v40, (uint64_t)&v51);
  if (cf) {
    CFRelease(cf);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v40[0]) {
    CFRelease(v40[0]);
  }
  if (!v22) {
    goto LABEL_41;
  }
  float v25 = (void *)*v14;
  float v24 = (std::__shared_weak_count *)v14[1];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v39 = v24;
  if (!v25)
  {
LABEL_43:
    float v38 = a4;
    float v23 = (std::__shared_weak_count *)operator new(0x1F0uLL);
    float v24 = v23;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAAA0;
    float v25 = &v23[1].__vftable;
    int v26 = *(_DWORD *)(a1 + 248);
    float v27 = *(float *)(a1 + 252);
    unint64_t v28 = *(unsigned int *)(a1 + 256);
    int v29 = *(caulk::pooled_semaphore_mutex **)(a1 + 152);
    int v30 = *(std::__shared_weak_count **)(a1 + 160);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v23[1].__shared_owners_) = 0;
    void *v25 = 0;
    LOBYTE(v40[0]) = 1;
    HIDWORD(v40[0]) = 0;
    LOWORD(v40[1]) = 0;
    float v49 = v29;
    float v50 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)&v23[1].__shared_weak_owners_, (const IR::IRDataAttributes *)&v51, (char *)v40, (uint64_t *)&v49);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    v24[9].__vftable = 0;
    v24[9].__shared_owners_ = 0;
    v24[9].__shared_weak_owners_ = 0;
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    ParametricFilters::ParametricFilters((uint64_t)&v24[10], v26, 1, 5, (long long *)v40, v27);
    if (v41 < 0) {
      operator delete((void *)v40[0]);
    }
    LODWORD(v24[18].__vftable) = v26;
    unsigned int v31 = v55 - *(_DWORD *)&v53[2];
    if (v55 < *(_DWORD *)&v53[2]) {
      unsigned int v31 = 0;
    }
    if (v54) {
      unsigned int v32 = v55;
    }
    else {
      unsigned int v32 = v31;
    }
    IR::FixedIntegerDelay::FixedIntegerDelay((IR::FixedIntegerDelay *)&v24[18].__shared_owners_, v32, 1);
    std::vector<float>::resize((uint64_t)&v24[9], v28);
    IR::DynamicIRProcessor::initialize((IR::DynamicIRProcessor *)&v24[1].__shared_weak_owners_, v27, v28);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    a4 = v38;
  }
  CFTypeRef v33 = *a4;
  if (*a4) {
    CFRetain(*a4);
  }
  IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs((uint64_t)v25, v33);
  if (v33) {
    CFRelease(v33);
  }
  uint64_t v34 = *(void *)(a1 + 96);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v34 + 16 * a2) = v25;
  uint64_t v35 = v34 + 16 * a2;
  uint64_t v36 = *(std::__shared_weak_count **)(v35 + 8);
  *(void *)(v35 + 8) = v24;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 145));
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v51) {
    CFRelease(v51);
  }
  __int16 v6 = 0;
LABEL_80:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v46);
  return v6;
}

void sub_1BB62613C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
}

void IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFRetain(a2);
    CFDictionaryRef v6 = (CFDictionaryRef)a2;
    memset(v5, 0, sizeof(v5));
    ParametricFilters::setParametricFilters(a1 + 216, &v6, (uint64_t)v5);
    CFRelease(a2);
  }
  else
  {
    uint64_t v4 = (ParametricFilters *)(a1 + 216);
    ParametricFilters::clear(v4);
  }
}

void sub_1BB626300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void IR::SharedIRBuses::setParametricFiltersCoeffs(uint64_t a1, unsigned int a2, const void **a3)
{
  if (*(_DWORD *)(a1 + 240))
  {
    if (*(_DWORD *)(a1 + 256))
    {
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 244));
      if (v4)
      {
        if (*(_DWORD *)(a1 + 240) <= a2)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioTimeStamp buf = 0;
            _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Setting parametric filter coeffs on non-existent SharedIRBus channel", buf, 2u);
          }
        }
        else
        {
          *(void *)AudioTimeStamp buf = a1 + 148;
          char v10 = 1;
          caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 148));
          IR::SharedIRBuses::checkForAppliedChanges((IR::SharedIRBuses *)a1);
          uint64_t v7 = *(void *)(*(void *)(a1 + 96) + 16 * a2);
          if (v7)
          {
            unsigned __int8 v8 = *a3;
            if (v8) {
              CFRetain(v8);
            }
            IR::SharedIRBuses::IRBus::setParametricFiltersCoeffs(v7, v8);
            if (v8) {
              CFRelease(v8);
            }
            atomic_store(1u, (unsigned __int8 *)(a1 + 145));
          }
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
        }
      }
    }
  }
}

void sub_1BB626434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void IR::SharedIRBuses::sumToBus(IR::SharedIRBuses *this, const float *__A, unsigned int a3, vDSP_Length __N, float a5)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 244);
  if (v5)
  {
    unsigned int v6 = __N;
    unint64_t v9 = a3;
    if (a3 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4))
    {
      uint64_t v12 = 0;
      unsigned int v11 = 0;
    }
    else
    {
      char v10 = (uint64_t *)(*(void *)this + 16 * a3);
      uint64_t v12 = *v10;
      unsigned int v11 = (std::__shared_weak_count *)v10[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v13 = *((void *)this + 6);
    if (a3 >= (unint64_t)((*((void *)this + 7) - v13) >> 4))
    {
      long long v15 = 0;
      uint64_t v16 = 0;
      atomic_load((unsigned __int8 *)this + 146);
    }
    else
    {
      uint64_t v14 = (uint64_t *)(v13 + 16 * a3);
      uint64_t v16 = *v14;
      long long v15 = (std::__shared_weak_count *)v14[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v17 = atomic_load((unsigned __int8 *)this + 146);
      if ((v17 & 1) != 0 && v16)
      {
        if (v16 == v12)
        {
          uint64_t v16 = v12;
        }
        else
        {
          uint64_t v18 = *(void *)(*((void *)this + 6) + 16 * a3);
          if (*((unsigned char *)this + 245))
          {
            float __B = 1.0;
            vDSP_vsma(__A, 1, &__B, *(const float **)(v18 + 192), 1, *(float **)(v18 + 192), 1, __N);
            if (v11)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              uint64_t v12 = 0;
              unsigned int v11 = 0;
            }
            else
            {
              uint64_t v12 = 0;
            }
          }
          else
          {
            float __B = 0.0;
            float __Step = 1.0 / (float)__N;
            vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v18 + 192), 1, __N);
          }
          *(_DWORD *)(*((void *)this + 9) + 4 * v9) = 1065353216;
        }
      }
    }
    if (v12)
    {
      unsigned __int8 v19 = atomic_load((unsigned __int8 *)this + 146);
      uint64_t v20 = *((void *)this + 3);
      float v21 = *(float *)(v20 + 4 * v9);
      if ((v19 & 1) != 0 && v16 && v16 != v12)
      {
        float __B = *(float *)(v20 + 4 * v9);
        float __Step = (float)(0.0 - v21) / (float)v6;
        vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v12 + 192), 1, v6);
      }
      else if (v21 == 1.0)
      {
        float __B = 1.0;
        vDSP_vsma(__A, 1, &__B, *(const float **)(v12 + 192), 1, *(float **)(v12 + 192), 1, v6);
      }
      else
      {
        float __B = *(float *)(v20 + 4 * v9);
        float __Step = (float)(1.0 - v21) / (float)v6;
        vDSP_vrampmuladd(__A, 1, &__B, &__Step, *(float **)(v12 + 192), 1, v6);
      }
    }
    uint64_t v22 = *((void *)this + 3);
    if (v9 < (*((void *)this + 4) - v22) >> 2) {
      *(_DWORD *)(v22 + 4 * v9) = 1065353216;
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1BB6266E0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IR::SharedIRBuses::processIndividualBus(uint64_t *result, float **a2, float **a3, float **a4, int a5, vDSP_Length a6, unsigned int *a7)
{
  uint64_t v7 = *result;
  if (*result && !*(unsigned char *)(v7 + 8))
  {
    LODWORD(v10) = a5;
    uint64_t v14 = result;
    IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)(v7 + 416), *(float **)(v7 + 192), *(float **)(v7 + 192), a6);
    IR::DynamicIRProcessor::processInternal(v7 + 16, *(IR::IRProcessor **)(v7 + 192), a3, v10, a6, 1.0, a2, 0, 0);
    ParametricFilters::process(v7 + 216, a3, 0, a6, a2);
    bzero(*(void **)(v7 + 192), 4 * a6);
    if (v10)
    {
      uint64_t v10 = v10;
      do
      {
        uint64_t v16 = *a3++;
        long long v15 = v16;
        unsigned __int8 v17 = *a4++;
        vDSP_vadd(v15, 1, v17, 1, v17, 1, a6);
        --v10;
      }
      while (v10);
    }
    uint64_t v18 = *v14;
    *(unsigned char *)(v18 + 8) = 1;
    unsigned int v19 = atomic_load((unsigned int *)(v18 + 172));
    int v20 = *(_DWORD *)(v18 + 416);
    double result = (uint64_t *)ParametricFilters::getTailLength((ParametricFilters *)(v18 + 216));
    unsigned int v21 = v20 + result + v19;
    if (*a7 > v21) {
      unsigned int v21 = *a7;
    }
    *a7 = v21;
  }
  return result;
}

void IR::SharedIRBuses::process(IR::SharedIRBuses *this, float **a2, uint64_t a3, vDSP_Length a4, float a5, unsigned int *a6)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  float __B = a5;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 244);
  if ((v7 & 1) == 0)
  {
    if (a6) {
      *a6 = 0;
    }
    return;
  }
  vDSP_Length v64 = a4;
  unsigned int v69 = 0;
  unint64_t v11 = 8 * a3;
  MEMORY[0x1F4188790](this);
  uint64_t v12 = (v11 + 15) & 0xFFFFFFFF0;
  if (v11 >= 0x200) {
    size_t v13 = 512;
  }
  else {
    size_t v13 = v11;
  }
  float v63 = (char *)&v60 - v12;
  bzero((char *)&v60 - v12, v13);
  MEMORY[0x1F4188790](v14);
  long long v15 = (float **)((char *)&v60 - v12);
  bzero((char *)&v60 - v12, v13);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 3) < a3) {
    __assert_rtn("process", "SharedIRBuses.cpp", 415, "mScratchBuffers.size() >= inNumOutputChannels");
  }
  uint64_t v16 = a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 3) < a3) {
    __assert_rtn("process", "SharedIRBuses.cpp", 416, "mAccumulationBuffers.size() >= inNumOutputChannels");
  }
  uint64_t v60 = (uint64_t)&v60;
  float v61 = a6;
  uint64_t v62 = a3;
  if (a3)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v63;
    size_t v19 = 4 * v64;
    int v20 = (uint64_t *)((char *)&v60 - v12);
    unsigned int v21 = (void **)a2;
    do
    {
      *v18++ = *(void *)(*((void *)this + 21) + v17);
      *v20++ = *(void *)(*((void *)this + 24) + v17);
      uint64_t v22 = *v21++;
      bzero(v22, v19);
      v17 += 24;
    }
    while (24 * v16 != v17);
  }
  IR::SharedIRBuses::markAllBusesAsNotProcessed((uint64_t *)this);
  float v24 = *(uint64_t **)this;
  float v23 = (uint64_t *)*((void *)this + 1);
  float v25 = (float **)v63;
  vDSP_Length v26 = v64;
  int v27 = v62;
  if (*(uint64_t **)this != v23)
  {
    do
    {
      IR::SharedIRBuses::processIndividualBus(v24, v25, v15, a2, v27, v26, &v69);
      v24 += 2;
    }
    while (v24 != v23);
  }
  unint64_t v28 = (uint64_t *)*((void *)this + 27);
  int v29 = (uint64_t *)*((void *)this + 28);
  while (v28 != v29)
  {
    uint64_t v30 = *v28;
    if (*v28 && *(int *)(v30 + 4) >= 1 && !*(unsigned char *)(v30 + 8))
    {
      IR::SharedIRBuses::processIndividualBus(v28, v25, v15, a2, v27, v26, &v69);
      *(_DWORD *)(*v28 + 4) -= v26;
    }
    v28 += 2;
  }
  uint64_t v67 = (IR::SharedIRBuses *)((char *)this + 148);
  char v68 = 0;
  unsigned __int8 v31 = atomic_load((unsigned __int8 *)this + 146);
  if (v31)
  {
    if (!v67)
    {
      std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
      __break(1u);
      return;
    }
    int v32 = caulk::pooled_semaphore_mutex::try_lock(v67);
    char v68 = v32;
    if (v32)
    {
      uint64_t v34 = (uint64_t *)*((void *)this + 6);
      CFTypeRef v33 = (uint64_t *)*((void *)this + 7);
      if (v34 == v33)
      {
        uint64_t v35 = (uint64_t *)*((void *)this + 6);
      }
      else
      {
        do
        {
          IR::SharedIRBuses::processIndividualBus(v34, v25, v15, a2, v27, v26, &v69);
          v34 += 2;
        }
        while (v34 != v33);
        uint64_t v35 = (uint64_t *)*((void *)this + 6);
        uint64_t v34 = (uint64_t *)*((void *)this + 7);
      }
      uint64_t v36 = *(uint64_t **)this;
      *((void *)this + 6) = *(void *)this;
      uint64_t v37 = *((void *)this + 8);
      long long v38 = *(_OWORD *)((char *)this + 8);
      *(void *)this = v35;
      *((void *)this + 1) = v34;
      *((void *)this + 2) = v37;
      *(_OWORD *)((char *)this + 56) = v38;
      while (v35 != v34)
      {
        if (*v35) {
          ++*(_DWORD *)*v35;
        }
        v35 += 2;
      }
      while (v36 != (uint64_t *)v38)
      {
        float v39 = (_DWORD *)*v36;
        if (*v36)
        {
          if ((*v39)-- == 1)
          {
            for (unint64_t i = (void *)*((void *)this + 27); i != *((void **)this + 28); i += 2)
            {
              if ((_DWORD *)*i == v39) {
                goto LABEL_36;
              }
            }
            unsigned int v42 = atomic_load(v39 + 43);
            *(_DWORD *)(*v36 + 4) = v42;
            CFTypeRef v43 = (uint64_t *)*((void *)this + 27);
            uint64_t v44 = (uint64_t *)*((void *)this + 28);
            while (v43 != v44)
            {
              uint64_t v45 = *v43;
              *CFTypeRef v43 = *v36;
              uint64_t *v36 = v45;
              uint64_t v46 = v43[1];
              v43[1] = v36[1];
              v36[1] = v46;
              v43 += 2;
            }
          }
        }
LABEL_36:
        v36 += 2;
      }
      char v47 = (int *)*((void *)this + 3);
      uint64_t v48 = (_DWORD *)*((void *)this + 9);
      *((void *)this + 3) = v48;
      *((void *)this + 9) = v47;
      long long v49 = *((_OWORD *)this + 5);
      long long v50 = *((_OWORD *)this + 2);
      *((_OWORD *)this + 2) = v49;
      *((_OWORD *)this + 5) = v50;
      unint64_t v51 = (uint64_t)(v50 - (void)v47) >> 2;
      if (v51 >= (uint64_t)(v49 - (void)v48) >> 2) {
        unint64_t v51 = (uint64_t)(v49 - (void)v48) >> 2;
      }
      for (; v51; --v51)
      {
        int v52 = *v47++;
        *v48++ = v52;
      }
      atomic_store(0, (unsigned __int8 *)this + 146);
    }
  }
  if (*((unsigned char *)this + 245))
  {
    vDSP_Length v53 = 0;
    *((float *)this + 66) = __B;
    if (!v26) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  float v54 = *((float *)this + 66);
  float v55 = __B;
  if (v54 != __B)
  {
    unsigned int v56 = *((_DWORD *)this + 67);
    if (v56 >= v26) {
      vDSP_Length v53 = v26;
    }
    else {
      vDSP_Length v53 = v56;
    }
    float __Step = (float)(__B - v54) / (float)v53;
    if (v27)
    {
      CFTypeRef v57 = (const float **)a2;
      uint64_t v58 = v16;
      do
      {
        float __Start = *((float *)this + 66);
        vDSP_vrampmul(*v57, 1, &__Start, &__Step, (float *)*v57, 1, v53);
        ++v57;
        --v58;
      }
      while (v58);
    }
    *((float *)this + 66) = v55;
    LODWORD(v26) = v26 - v53;
    int v27 = v62;
    if (!v26) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  vDSP_Length v53 = 0;
  if (v26)
  {
LABEL_62:
    if (v27)
    {
      do
      {
        vDSP_vsmul(&(*a2)[v53], 1, &__B, &(*a2)[v53], 1, v26);
        ++a2;
        --v16;
      }
      while (v16);
    }
  }
LABEL_64:
  unsigned int v59 = v69;
  *((_DWORD *)this + 65) = v69;
  *((unsigned char *)this + 245) = 0;
  if (v61) {
    unsigned int *v61 = v59;
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v67);
}

void sub_1BB626D94(_Unwind_Exception *a1)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<DSPComplex>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    unsigned int v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)(a1 + 2), a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[3 * v7];
    uint64_t v8 = 3 * a2;
    unint64_t v9 = &v6[3 * a2];
    uint64_t v10 = 8 * v8;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v10 -= 24;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_1BB626E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void MCLP_FRLS_vDSP::ProcessBufferList(MCLP_FRLS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7, int a8)
{
  LODWORD(v13) = *((_DWORD *)this + 7);
  if (v13)
  {
    unint64_t v14 = 0;
    p_mData = &a2->mBuffers[0].mData;
    float v16 = 0.0;
    do
    {
      uint64_t v17 = (const float *)*p_mData;
      p_mData += 2;
      float v16 = cblas_sdsdot(2 * *((_DWORD *)this + 8) - 2, v16, v17, 1, v17, 1);
      ++v14;
      unint64_t v13 = *((unsigned int *)this + 7);
    }
    while (v14 < v13);
  }
  else
  {
    float v16 = 0.0;
  }
  if (v16 > *((float *)this + 4) && (LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    uint64_t v122 = (float *)((char *)this + 64);
    vDSP_vfill((const float *)this + 16, *((float **)this + 78), 1, *((unsigned int *)this + 8));
    memcpy((void *)(*((void *)this + 15) + 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 23))), *(const void **)(*((void *)this + 12) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    uint64_t v33 = *((unsigned int *)this + 22);
    uint64_t v34 = *((void *)this + 12);
    if (*((_DWORD *)this + 7))
    {
      unint64_t v35 = 0;
      unsigned int v36 = *((_DWORD *)this + 8);
      int v37 = *((_DWORD *)this + 10);
      long long v38 = &a2->mBuffers[0].mData;
      do
      {
        float v39 = (float *)((char *)*v38 + 4 * v36);
        __A.realp = (float *)((char *)*v38 + 4);
        __A.imagp = v39;
        __C.realp = 0;
        __C.imagp = 0;
        uint64_t v40 = *(void *)(v34 + 24 * v33);
        __C.realp = (float *)(v40 + 8 * v36 * v35 + 4);
        __C.imagp = (float *)(v40 + 8 * (v36 * v35 + v37 + 1));
        vDSP_zvmov(&__A, 1, &__C, 1, v36 - 2);
        char v41 = *v38;
        v38 += 2;
        uint64_t v33 = *((unsigned int *)this + 22);
        uint64_t v34 = *((void *)this + 12);
        unsigned int v36 = *((_DWORD *)this + 8);
        uint64_t v42 = *(void *)(v34 + 24 * v33);
        *(_DWORD *)(v42 + 8 * v36 * v35) = *v41;
        int v37 = *((_DWORD *)this + 10);
        *(_DWORD *)(v42 + 8 * (v37 + v36 * v35++)) = v41[v36 - 1];
      }
      while (v35 < *((unsigned int *)this + 7));
    }
    vDSP_vsmul(*(const float **)(v34 + 24 * v33), 1, (const float *)this + 19, *(float **)(v34 + 24 * v33), 1, (2 * *((_DWORD *)this + 13)));
    memcpy(*((void **)this + 45), *(const void **)(*((void *)this + 12) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    if (a6)
    {
      memcpy((void *)(*((void *)this + 36) + 8 * (*((_DWORD *)this + 13) * *((_DWORD *)this + 23))), *(const void **)(*((void *)this + 33) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
      unint64_t v43 = *((unsigned int *)this + 7);
      if (v43)
      {
        unint64_t v44 = 0;
        unsigned int v45 = *((_DWORD *)this + 8);
        do
        {
          if (v45)
          {
            unsigned int v46 = 0;
            char v47 = (char *)a3 + 16 * v44;
            long long v50 = (_DWORD *)*((void *)v47 + 2);
            long long v49 = (_DWORD **)(v47 + 16);
            uint64_t v48 = v50;
            uint64_t v51 = *((unsigned int *)this + 22);
            uint64_t v52 = *((void *)this + 33);
            int v53 = *((_DWORD *)this + 10);
            do
            {
              __A.realp = (float *)(v48 + 1);
              __A.imagp = (float *)&v48[v45];
              __C.realp = 0;
              __C.imagp = 0;
              uint64_t v54 = *(void *)(v52 + 24 * v51);
              __C.realp = (float *)(v54 + 8 * v45 * v44 + 4);
              __C.imagp = (float *)(v54 + 8 * (v45 * v44 + v53 + 1));
              vDSP_zvmov(&__A, 1, &__C, 1, v45 - 2);
              uint64_t v48 = *v49;
              uint64_t v51 = *((unsigned int *)this + 22);
              uint64_t v52 = *((void *)this + 33);
              unsigned int v45 = *((_DWORD *)this + 8);
              uint64_t v55 = *(void *)(v52 + 24 * v51);
              *(_DWORD *)(v55 + 8 * v45 * v44) = **v49;
              int v53 = *((_DWORD *)this + 10);
              *(_DWORD *)(v55 + 8 * (v53 + v45 * v44)) = v48[v45 - 1];
              ++v46;
            }
            while (v46 < v45);
            unint64_t v43 = *((unsigned int *)this + 7);
          }
          ++v44;
        }
        while (v44 < v43);
      }
      vDSP_vsmul(*(const float **)(*((void *)this + 33) + 24 * *((unsigned int *)this + 22)), 1, (const float *)this + 19, *(float **)(*((void *)this + 33) + 24 * *((unsigned int *)this + 22)), 1, (2 * *((_DWORD *)this + 13)));
      memcpy(*((void **)this + 87), *(const void **)(*((void *)this + 33) + 24 * *((unsigned int *)this + 22)), 8 * *((unsigned int *)this + 13));
    }
    uint64_t v56 = *((unsigned int *)this + 10);
    __A.realp = (float *)*((void *)this + 60);
    __A.imagp = &__A.realp[2 * v56 + 1];
    __C.realp = (float *)*((void *)this + 63);
    __C.imagp = &__C.realp[2 * v56 + 1];
    unsigned int v57 = *((_DWORD *)this + 21);
    unsigned int v58 = *((_DWORD *)this + 12);
    if (v57 >= v58) {
      int v59 = *((_DWORD *)this + 12);
    }
    else {
      int v59 = *((_DWORD *)this + 21);
    }
    if (v59)
    {
      unsigned int v60 = 0;
      uint64_t v120 = (float *)((char *)this + 72);
      float __B = (float *)((char *)this + 68);
      do
      {
        int v61 = *((_DWORD *)this + 23);
        int v62 = v61 - v60;
        if ((int)(v61 - v60) < 0) {
          int v62 = v61 + v58 + (int)v60 / (int)v58 * v58 - v60;
        }
        int v118 = v62;
        int v119 = v58;
        if (*((_DWORD *)this + 7))
        {
          unsigned int v63 = 0;
          do
          {
            vDSP_Length v64 = *((unsigned int *)this + 8);
            uint64_t v65 = *((void *)this + 45);
            uint64_t v66 = (float *)(v65 + 8 * (*((_DWORD *)this + 10) + v64 * v63) + 4);
            v127.realp = (float *)(v65 + 8 * v64 * v63);
            v127.imagp = v66;
            uint64_t v67 = (float *)*((void *)this + 72);
            if (v63) {
              vDSP_zvmgsa(&v127, 1, v67, 1, *((float **)this + 72), 1, v64);
            }
            else {
              vDSP_zvmags(&v127, 1, v67, 1, v64);
            }
            ++v63;
          }
          while (v63 < *((_DWORD *)this + 7));
        }
        vDSP_vsmul(*((const float **)this + 72), 1, __B, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vthr(*((const float **)this + 72), 1, (const float *)this + 4, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_svdiv(v120, *((const float **)this + 72), 1, *((float **)this + 66), 1, *((unsigned int *)this + 8));
        vDSP_vfill(v122, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        memcpy(*((void **)this + 48), *((const void **)this + 45), 8 * *((unsigned int *)this + 13));
        if (*((_DWORD *)this + 7))
        {
          int v68 = 0;
          do
          {
            vDSP_Length v69 = *((unsigned int *)this + 8);
            uint64_t v70 = *((void *)this + 48);
            uint64_t v71 = (float *)(v70 + 8 * (*((_DWORD *)this + 10) + v69 * v68) + 4);
            v127.realp = (float *)(v70 + 8 * (v69 * v68));
            v127.imagp = v71;
            vDSP_zvmags(&v127, 1, *((float **)this + 51), 1, v69);
            vDSP_vmul(*((const float **)this + 81), 1, *((const float **)this + 66), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            vDSP_Length v72 = *((unsigned int *)this + 8);
            if (a7)
            {
              uint64_t v73 = *((_DWORD *)this + 13) * v60 + v72 * v68;
              uint64_t v74 = *((void *)this + 27);
              uint64_t v75 = (float *)(v74 + 4 * v73);
            }
            else
            {
              uint64_t v75 = (float *)*((void *)this + 39);
              uint64_t v74 = *((void *)this + 27);
              uint64_t v73 = *((_DWORD *)this + 13) * v60 + v72 * v68;
            }
            vDSP_vsmul((const float *)(v74 + 4 * v73), 1, (const float *)this + 5, v75, 1, v72);
            vDSP_vma(*((const float **)this + 51), 1, *((const float **)this + 84), 1, v75, 1, v75, 1, *((unsigned int *)this + 8));
            vDSP_vthr(v75, 1, (const float *)this + 4, v75, 1, *((unsigned int *)this + 8));
            vDSP_vdiv(v75, 1, *((const float **)this + 84), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            vDSP_vneg(*((const float **)this + 84), 1, *((float **)this + 84), 1, *((unsigned int *)this + 8));
            vDSP_zrvmul(&v127, 1, *((const float **)this + 84), 1, &__A, 1, *((unsigned int *)this + 8));
            vDSP_zvconj(&__A, 1, &__A, 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 84), 1, *((const float **)this + 51), 1, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vsadd(*((const float **)this + 75), 1, v122, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vthr(*((const float **)this + 75), 1, (const float *)this + 15, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 81), 1, *((const float **)this + 75), 1, *((float **)this + 81), 1, *((unsigned int *)this + 8));
            unsigned int v76 = v68 + 1;
            unsigned int v77 = *((_DWORD *)this + 7);
            for (unsigned int i = v68 + 1; i < v77; v77 = *((_DWORD *)this + 7))
            {
              vDSP_Length __N = *((unsigned int *)this + 8);
              uint64_t v80 = *((void *)this + 48);
              int v81 = *((_DWORD *)this + 10);
              __D.realp = (float *)(v80 + 8 * __N * i);
              __D.imagp = (float *)(v80 + 8 * (v81 + __N * i) + 4);
              unsigned int v82 = __N * i + *((_DWORD *)this + 14) * v60 + *((_DWORD *)this + 13) * v68;
              uint64_t v83 = *((void *)this + 18);
              v125.realp = (float *)(v83 + 8 * v82);
              v125.imagp = (float *)(v83 + 8 * (v82 + v81) + 4);
              vDSP_zvma(&v125, 1, &v127, 1, &__D, 1, &__D, 1, __N);
              if (a7) {
                vDSP_zvma(&__D, 1, &__A, 1, &v125, 1, &v125, 1, *((unsigned int *)this + 8));
              }
              ++i;
            }
            ++v68;
          }
          while (v76 < v77);
        }
        vDSP_vneg(*((const float **)this + 81), 1, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        vDSP_vsadd(*((const float **)this + 81), 1, v122, *((float **)this + 81), 1, *((unsigned int *)this + 8));
        vDSP_vmul(*((const float **)this + 72), 1, *((const float **)this + 81), 1, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vsmul(*((const float **)this + 72), 1, __B, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vsdiv(*((const float **)this + 72), 1, v120, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_vthr(*((const float **)this + 72), 1, (const float *)this + 4, *((float **)this + 72), 1, *((unsigned int *)this + 8));
        vDSP_svdiv(v120, *((const float **)this + 72), 1, *((float **)this + 66), 1, *((unsigned int *)this + 8));
        memcpy(*((void **)this + 54), (const void *)(*((void *)this + 15) + 8 * (*((_DWORD *)this + 13) * (v118 % v119))), 8 * *((unsigned int *)this + 13));
        memcpy((void *)(*((void *)this + 54) + 8 * *((unsigned int *)this + 13)), *((const void **)this + 45), 8 * *((unsigned int *)this + 13));
        if (a6)
        {
          memcpy(*((void **)this + 90), (const void *)(*((void *)this + 36) + 8 * (*((_DWORD *)this + 13) * (v118 % v119))), 8 * *((unsigned int *)this + 13));
          memcpy((void *)(*((void *)this + 90) + 8 * *((unsigned int *)this + 13)), *((const void **)this + 87), 8 * *((unsigned int *)this + 13));
        }
        if (*((_DWORD *)this + 7))
        {
          int v84 = 0;
          do
          {
            vDSP_Length v85 = *((unsigned int *)this + 8);
            uint64_t v86 = *((void *)this + 54);
            int v87 = (float *)(v86 + 8 * (*((_DWORD *)this + 10) + v85 * v84) + 4);
            v127.realp = (float *)(v86 + 8 * (v85 * v84));
            v127.imagp = v87;
            vDSP_zvmags(&v127, 1, *((float **)this + 57), 1, v85);
            vDSP_Length v88 = *((unsigned int *)this + 8);
            if (a7)
            {
              uint64_t v89 = *((_DWORD *)this + 13) * v60 + v88 * v84;
              uint64_t v90 = *((void *)this + 30);
              uint64_t v91 = (float *)(v90 + 4 * v89);
            }
            else
            {
              uint64_t v91 = (float *)*((void *)this + 42);
              uint64_t v90 = *((void *)this + 30);
              uint64_t v89 = *((_DWORD *)this + 13) * v60 + v88 * v84;
            }
            vDSP_vsmul((const float *)(v90 + 4 * v89), 1, (const float *)this + 5, v91, 1, v88);
            vDSP_vma(*((const float **)this + 57), 1, *((const float **)this + 66), 1, v91, 1, v91, 1, *((unsigned int *)this + 8));
            vDSP_vthr(v91, 1, (const float *)this + 4, v91, 1, *((unsigned int *)this + 8));
            vDSP_vdiv(v91, 1, *((const float **)this + 66), 1, *((float **)this + 69), 1, *((unsigned int *)this + 8));
            vDSP_vneg(*((const float **)this + 69), 1, *((float **)this + 69), 1, *((unsigned int *)this + 8));
            vDSP_zrvmul(&v127, 1, *((const float **)this + 69), 1, &__C, 1, *((unsigned int *)this + 8));
            vDSP_zvconj(&__C, 1, &__C, 1, *((unsigned int *)this + 8));
            vDSP_vmul(*((const float **)this + 69), 1, *((const float **)this + 57), 1, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vsadd(*((const float **)this + 75), 1, v122, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vDSP_vthr(*((const float **)this + 75), 1, (const float *)this + 15, *((float **)this + 75), 1, *((unsigned int *)this + 8));
            vvsqrtf(*((float **)this + 75), *((const float **)this + 75), (const int *)this + 9);
            vDSP_vmul(*((const float **)this + 78), 1, *((const float **)this + 75), 1, *((float **)this + 78), 1, *((unsigned int *)this + 8));
            unsigned int v92 = v84 + 1;
            unsigned int v93 = *((_DWORD *)this + 7);
            for (j = v84 + 1; j < 2 * v93; unsigned int v93 = *((_DWORD *)this + 7))
            {
              vDSP_Length v95 = *((unsigned int *)this + 8);
              uint64_t v96 = v95 * j;
              uint64_t v97 = *((void *)this + 54);
              int v98 = *((_DWORD *)this + 10);
              uint64_t v99 = (v98 + v96);
              __D.realp = (float *)(v97 + 8 * v96);
              __D.imagp = (float *)(v97 + 8 * v99 + 4);
              LODWORD(v97) = v96 + 2 * (*((_DWORD *)this + 14) * v60 + *((_DWORD *)this + 13) * v84);
              uint64_t v100 = *((void *)this + 21);
              v125.realp = (float *)(v100 + 8 * v97);
              v125.imagp = (float *)(v100 + 8 * (v97 + v98) + 4);
              if (a6)
              {
                uint64_t v101 = *((void *)this + 90);
                v124.realp = (float *)(v101 + 8 * (v95 * v84));
                v124.imagp = (float *)(v101 + 8 * (v98 + v95 * v84) + 4);
                v123.realp = (float *)(v101 + 8 * v96);
                v123.imagp = (float *)(v101 + 8 * v99 + 4);
                vDSP_zvma(&v125, 1, &v124, 1, &v123, 1, &v123, 1, v95);
                vDSP_zrvmul(&v123, 1, *((const float **)this + 75), 1, &v123, 1, *((unsigned int *)this + 8));
                LODWORD(v95) = *((_DWORD *)this + 8);
              }
              vDSP_zvma(&v125, 1, &v127, 1, &__D, 1, &__D, 1, v95);
              if (a7) {
                vDSP_zvma(&__D, 1, &__C, 1, &v125, 1, &v125, 1, *((unsigned int *)this + 8));
              }
              vDSP_zrvmul(&__D, 1, *((const float **)this + 75), 1, &__D, 1, *((unsigned int *)this + 8));
              ++j;
            }
            ++v84;
          }
          while (v92 < v93);
        }
        memcpy(*((void **)this + 45), (const void *)(*((void *)this + 54) + 8 * *((unsigned int *)this + 13)), 8 * *((unsigned int *)this + 13));
        if (a6) {
          memcpy(*((void **)this + 87), (const void *)(*((void *)this + 90) + 8 * *((unsigned int *)this + 13)), 8 * *((unsigned int *)this + 13));
        }
        ++v60;
        unsigned int v57 = *((_DWORD *)this + 21);
        unsigned int v58 = *((_DWORD *)this + 12);
        if (v57 >= v58) {
          unsigned int v102 = *((_DWORD *)this + 12);
        }
        else {
          unsigned int v102 = *((_DWORD *)this + 21);
        }
      }
      while (v60 < v102);
    }
    if (a8 && *((_DWORD *)this + 7))
    {
      unsigned int v103 = 0;
      do
      {
        vDSP_Length v104 = *((unsigned int *)this + 8);
        uint64_t v105 = *((void *)this + 45);
        unsigned int v106 = *((_DWORD *)this + 10) + v104 * v103;
        v127.realp = (float *)(v105 + 8 * v104 * v103);
        v127.imagp = (float *)(v105 + 8 * v106 + 4);
        uint64_t v107 = *((void *)this + 87);
        __D.realp = (float *)(v107 + 8 * v104 * v103);
        __D.imagp = (float *)(v107 + 8 * v106 + 4);
        vDSP_zrvmul(&v127, 1, *((const float **)this + 78), 1, &v127, 1, v104);
        vDSP_zrvmul(&__D, 1, *((const float **)this + 78), 1, &__D, 1, *((unsigned int *)this + 8));
        ++v103;
      }
      while (v103 < *((_DWORD *)this + 7));
      unsigned int v58 = *((_DWORD *)this + 12);
      unsigned int v57 = *((_DWORD *)this + 21);
    }
    unsigned int v108 = *((_DWORD *)this + 23) + 1;
    *((_DWORD *)this + 22) = (*((_DWORD *)this + 22) + 1) % *((_DWORD *)this + 11);
    *((_DWORD *)this + 23) = v108 % v58;
    if (v57 < v58) {
      *((_DWORD *)this + 21) = v57 + 1;
    }
    vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 20, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 13)));
    if (*((_DWORD *)this + 7))
    {
      unint64_t v109 = 0;
      uint64_t v110 = &a4->mBuffers[0].mData;
      do
      {
        memcpy(*v110, (const void *)(*((void *)this + 45) + 8 * (*((_DWORD *)this + 8) * v109)), 4 * *((unsigned int *)this + 8));
        uint64_t v111 = (char *)*v110;
        v110 += 2;
        memcpy(&v111[4 * *((unsigned int *)this + 8)], (const void *)(*((void *)this + 45)+ 8 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 8) * v109++ + 1)), 4 * (*((_DWORD *)this + 8) - 2));
      }
      while (v109 < *((unsigned int *)this + 7));
    }
    if (a6)
    {
      vDSP_vsmul(*((const float **)this + 87), 1, (const float *)this + 20, *((float **)this + 87), 1, (2 * *((_DWORD *)this + 13)));
      if (*((_DWORD *)this + 7))
      {
        unint64_t v112 = 0;
        float v113 = &a5->mBuffers[0].mData;
        do
        {
          memcpy(*v113, (const void *)(*((void *)this + 87) + 8 * (*((_DWORD *)this + 8) * v112)), 4 * *((unsigned int *)this + 8));
          size_t v114 = (char *)*v113;
          v113 += 2;
          memcpy(&v114[4 * *((unsigned int *)this + 8)], (const void *)(*((void *)this + 87)+ 8 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 8) * v112++ + 1)), 4 * (*((_DWORD *)this + 8) - 2));
        }
        while (v112 < *((unsigned int *)this + 7));
      }
    }
  }
  else if (v13)
  {
    unint64_t v19 = 0;
    int v20 = &a2->mBuffers[0].mData;
    unsigned int v21 = &a4->mBuffers[0].mData;
    do
    {
      float v23 = *v21;
      v21 += 2;
      uint64_t v22 = v23;
      float v24 = *v20;
      v20 += 2;
      memcpy(v22, v24, 4 * (2 * *((_DWORD *)this + 8) - 2));
      ++v19;
      unint64_t v25 = *((unsigned int *)this + 7);
    }
    while (v19 < v25);
    if (v25 && a6 != 0)
    {
      unint64_t v27 = 0;
      unint64_t v28 = &a3->mBuffers[0].mData;
      int v29 = &a5->mBuffers[0].mData;
      do
      {
        unsigned __int8 v31 = *v29;
        v29 += 2;
        uint64_t v30 = v31;
        int v32 = *v28;
        v28 += 2;
        memcpy(v30, v32, 4 * (2 * *((_DWORD *)this + 8) - 2));
        ++v27;
      }
      while (v27 < *((unsigned int *)this + 7));
    }
  }
}

void std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](uint64_t a1)
{
  std::unique_ptr<CACFDictionary>::reset[abi:ne180100]((CACFDictionary **)(a1 + 56), 0);
  std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100]((uint64_t *)(a1 + 48), 0);

  JUMPOUT(0x1C185D370);
}

CACFDictionary *std::unique_ptr<CACFDictionary>::reset[abi:ne180100](CACFDictionary **a1, CACFDictionary *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    CACFDictionary::~CACFDictionary(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<clsp::ConvoyParameters>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    std::unique_ptr<CACFArray>::reset[abi:ne180100]((CACFArray **)(v2 + 96), 0);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

CACFArray *std::unique_ptr<CACFArray>::reset[abi:ne180100](CACFArray **a1, CACFArray *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    CACFArray::~CACFArray(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t clsp::DelayLine<float,double>::DelayLine(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  *(double *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  std::vector<float>::vector((void *)(a1 + 16), vcvtad_u64_f64(a5 * 0.001 * a4));
  std::vector<float>::vector((void *)(a1 + 40), a2);
  clsp::DelayLine<float,double>::calcCoeffs((double *)a1, a4);
  return a1;
}

void sub_1BB627FA4(_Unwind_Exception *exception_object)
{
  unsigned __int8 v4 = v3;
  unsigned int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<clsp::ParameterUpdater,std::allocator<clsp::ParameterUpdater>,CACFDictionary &,void>(CFTypeRef **a1, uint64_t a2)
{
  unsigned __int8 v4 = (char *)operator new(0x438uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unsigned __int8 v4 = &unk_1F14BAB10;
  unsigned __int8 v5 = (CFTypeRef *)(v4 + 24);
  *((void *)v4 + 3) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((_WORD *)v4 + 16) = 257;
  std::vector<double>::vector((void *)v4 + 125, 0xBF80uLL);
  std::vector<double>::vector((void *)v4 + 128, 0xBF80uLL);
  std::vector<double>::vector((void *)v4 + 131, 0xBF80uLL);
  if (v4[32] && *v5) {
    CFRelease(*v5);
  }
  CFTypeRef v6 = *(CFTypeRef *)a2;
  *((void *)v4 + 3) = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  v4[32] = v7;
  v4[33] = *(unsigned char *)(a2 + 9);
  if (v7 && v6)
  {
    CFRetain(v6);
    CFTypeRef v6 = *v5;
  }
  double v27 = 0.0;
  if (!CACFDictionary::GetFloat64((uint64_t)v6, @"Le_order", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 56) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Bl_order", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 57) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Km_order", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 58) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Rm_order", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm_order not found in inConfig");
    goto LABEL_62;
  }
  *((_DWORD *)v4 + 59) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Mms", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Mms not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 5) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Reb", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 30) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Le_x", (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 248), v8);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Bl_x", (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 288), v9);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Km_x", (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 328), v10);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Rm_u", (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 368), v11);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, @"Re0", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Re0 not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 72) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Lex", (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 584), v12);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Blx", (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 624), v13);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Kmx", (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 664), v14);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"Rmu", (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 704), v15);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, @"mu_Re", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mu_Re not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 93) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"mu_epsilon", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "epsilon_mu not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 114) = v27;
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"mu_Le", (const __CFString *)*((unsigned int *)v4 + 56), (uint64_t)(v4 + 752), v16);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"mu_Bl", (const __CFString *)*((unsigned int *)v4 + 57), (uint64_t)(v4 + 792), v17);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"mu_Km", (const __CFString *)*((unsigned int *)v4 + 58), (uint64_t)(v4 + 832), v18);
  clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v4 + 3, (const CACFDictionary *)@"mu_Rm", (const __CFString *)*((unsigned int *)v4 + 59), (uint64_t)(v4 + 872), v19);
  if (!CACFDictionary::GetFloat64((uint64_t)*v5, @"Reb_min", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 115) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Le0_min", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 116) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Bl0_min", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 117) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Km0_min", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 119) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Rm0_min", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm0_min not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 118) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Reb_max", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reb_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 120) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Le0_max", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Le0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 121) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Bl0_max", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bl0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 122) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Km0_max", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Km0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 124) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Rm0_max", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Rm0_max not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 123) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"alpha", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "alpha not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 19) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"En_frame_Th", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Threshold for frame energy not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 20) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"En_Th", &v27))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Threshold for energy not found in inConfig");
    goto LABEL_62;
  }
  *((double *)v4 + 21) = v27;
  if (!CACFDictionary::GetFloat64(*((void *)v4 + 3), @"Timer", &v27)
    || (*((double *)v4 + 25) = v27,
        !CACFDictionary::GetFloat64(*((void *)v4 + 3), @"snrv_Th", &v27))
    || (*((double *)v4 + 26) = v27,
        !CACFDictionary::GetFloat64(*((void *)v4 + 3), @"snrx_Th", &v27)))
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Timer not found in inConfig");
LABEL_62:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  }
  *((double *)v4 + 27) = v27;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 23) = 0;
  *((void *)v4 + 24) = 0;
  *((void *)v4 + 22) = 0;
  int v20 = (void *)*((void *)v4 + 125);
  uint64_t v21 = *((void *)v4 + 126) - (void)v20;
  if (v21 >= 1) {
    bzero(v20, 8 * (((unint64_t)v21 >> 3) - ((unint64_t)v21 > 7)) + 8);
  }
  uint64_t v22 = (void *)*((void *)v4 + 128);
  uint64_t v23 = *((void *)v4 + 129) - (void)v22;
  if (v23 >= 1) {
    bzero(v22, 8 * (((unint64_t)v23 >> 3) - ((unint64_t)v23 > 7)) + 8);
  }
  float v24 = (void *)*((void *)v4 + 131);
  uint64_t v25 = *((void *)v4 + 132) - (void)v24;
  if (v25 >= 1) {
    bzero(v24, 8 * (((unint64_t)v25 >> 3) - ((unint64_t)v25 > 7)) + 8);
  }
  *((_DWORD *)v4 + 268) = 0;
  *a1 = v5;
  a1[1] = (CFTypeRef *)v4;
}

void sub_1BB6288E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v6);
  uint64_t v8 = (std::__shared_weak_count_vtbl *)*v5;
  if (*v5)
  {
    v1[44].__vftable = v8;
    operator delete(v8);
  }
  unint64_t v9 = (std::__shared_weak_count_vtbl *)*v4;
  if (*v4)
  {
    v1[43].__vftable = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count_vtbl *)*v3;
  if (*v3)
  {
    v1[42].__vftable = v10;
    operator delete(v10);
  }
  CACFDictionary::~CACFDictionary(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  unsigned __int8 v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C185D370);
}

double clsp::DisplacementController::DisplacementController(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F14BE680;
  *(double *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = a4;
  *(double *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(double *)(a1 + 56) = a8;
  *(unsigned char *)(a1 + 64) = 1;
  float v8 = a4;
  float v9 = 1.0 / a4;
  *(float *)(a1 + 68) = v8;
  *(float *)(a1 + 72) = v9;
  *(float *)(a1 + 76) = v8;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a2;
  *(double *)(a1 + 128) = a6;
  *(double *)(a1 + 136) = a7;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(double *)(a1 + 168) = a6;
  *(double *)(a1 + 176) = a7;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 324) = 0;
  return result;
}

float clsp::ThermalController::resetThermalState(clsp::ThermalController *this)
{
  *((_DWORD *)this + 58) = 1065353216;
  *((_DWORD *)this + 65) = 1065353216;
  *((_DWORD *)this + 69) = 1065353216;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 73) = 1065353216;
  *((_DWORD *)this + 77) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)((char *)this + 124) = _D0;
  *(void *)((char *)this + 188) = 0;
  *(void *)((char *)this + 148) = 0;
  *((void *)this + 21) = 0;
  float v7 = *(float *)this - *((float *)this + 2);
  shouldTraceRender();
  float v8 = *((double *)this + 7);
  float v9 = *((double *)this + 9);
  float v10 = v8 + v9;
  float result = (float)(v7 * v8) / (float)(v8 + v9);
  *((float *)this + 38) = result;
  *((float *)this + 43) = (float)(v7 * v9) / v10;
  *((float *)this + 48) = result;
  return result;
}

float clsp::ClosedLoopThermalModule::reset(clsp::ClosedLoopThermalModule *this)
{
  *((_DWORD *)this + 21) = 0;
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    *((float *)this + 20) = (*(float (**)(void))(**((void **)this + 12) + 56))(*((void *)this + 12));
  }
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 47) = 0;
  float result = *((float *)this + 20);
  *((float *)this + 51) = result;
  return result;
}

void clsp::CLSPKernel_v5::ProcessAdaptSimple(const float **this, const float *a2, float *a3, unsigned int a4)
{
  shouldTraceRender();
  if (*((unsigned char *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)this);
    *((unsigned char *)this + 1072) = 0;
  }
  float v8 = this[53];
  if (!v8 || ((v9 = *((_DWORD *)v8 + 2), v9 != 1) ? (BOOL v10 = v9 == 4) : (BOOL v10 = 1), !v10))
  {
    float __B = 0.1;
    vDSP_vsmul(a2, 1, &__B, a3, 1, a4);
    return;
  }
  unint64_t v11 = (float *)this[100];
  vDSP_Length v12 = a4;
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v11, 1, a4);
  unint64_t v13 = this[97];
  shouldTraceRender();
  unint64_t v14 = *((void *)v13 + 1);
  if (v14 <= a4)
  {
    if (v14)
    {
      memmove(*((void **)v13 + 5), *((const void **)v13 + 2), 4 * v14);
      unint64_t v14 = *((void *)v13 + 1);
    }
    long long v15 = &v11[a4];
    float v16 = &v15[-v14];
    if (v16 != v11)
    {
      memmove((void *)(*((void *)v13 + 5) + 4 * v14), v11, (char *)v16 - (char *)v11);
      unint64_t v14 = *((void *)v13 + 1);
    }
    if (v14) {
      memmove(*((void **)v13 + 2), &v15[-v14], 4 * v14);
    }
    if (!a4) {
      goto LABEL_32;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*((void **)v13 + 5), *((const void **)v13 + 2), 4 * a4);
      unint64_t v14 = *((void *)v13 + 1);
    }
    if (v14 != a4) {
      memmove(*((void **)v13 + 2), (const void *)(*((void *)v13 + 2) + 4 * a4), 4 * v14 - 4 * a4);
    }
    if (!a4) {
      goto LABEL_32;
    }
    memmove((void *)(*((void *)v13 + 2) + 4 * *((void *)v13 + 1) - 4 * a4), v11, 4 * a4);
  }
  unint64_t v17 = 0;
  do
  {
    uint64_t v18 = this[97];
    uint64_t v19 = *((void *)v18 + 5);
    if (v17 >= (*((void *)v18 + 6) - v19) >> 2) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    float v20 = v11[v17];
    float v21 = (*(float (**)(const float *, float, float))(*(void *)this[53] + 184))(this[53], v20, *(float *)(v19 + 4 * v17));
    this[103][v17] = v21;
    float v22 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v22;
    float v23 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v22 - *((float *)this + 177)));
    *((float *)this + 177) = v23;
    float v24 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v24;
    float v25 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v24 - *((float *)this + 185)));
    *((float *)this + 185) = v25;
    if (*((unsigned char *)this + 744))
    {
      if (v25 >= v23) {
        float v26 = v23;
      }
      else {
        float v26 = v25;
      }
      float v21 = v21 * v26;
      float v20 = v20 * (float)(v23 * v25);
    }
    --*((_DWORD *)this + 137);
    (*(void (**)(const float *, float, float))(*(void *)this[53] + 192))(this[53], v20, v21);
    a3[v17++] = v21;
  }
  while (v12 != v17);
LABEL_32:
  *((float *)this + 266) = (*(float (**)(const float *))(*(void *)this[53] + 248))(this[53]);
  *((float *)this + 267) = (*(float (**)(const float *))(*(void *)this[53] + 240))(this[53]);
  float v27 = clsp::ThermalController::postProcess((clsp::ThermalController *)(this + 54), a3, this[103], v12);
  (*(void (**)(const float *, float))(*(void *)this[53] + 232))(this[53], v27);
  clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)this);
  unint64_t v28 = (float *)(*(uint64_t (**)(const float *))(*(void *)this[53] + 128))(this[53]);
  log10f(v28[21]* (float)((float)((float)((float)(1.0 - v28[12]) + v28[13]) * (float)((float)(v28[14] + v28[15]) + v28[16]))/ (float)((float)(v28[12] + 1.0) + v28[13])));
}

float clsp::CLSPKernel_v5::LogCoeffs(clsp::CLSPKernel_v5 *this)
{
  uint64_t v2 = *((void *)this + 135);
  uint64_t v3 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v3) {
    goto LABEL_9;
  }
  *(float *)&__src = (float)*((unsigned int *)this + 4);
  clsp::CLSP_Log::LogCLSPData(v3, (const float *)&__src, 1);
  uint64_t v2 = *((void *)this + 135);
  unsigned __int8 v4 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v4) {
    goto LABEL_9;
  }
  float v5 = *((double *)this + 3);
  *(float *)&__src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, (const float *)&__src, 1);
  uint64_t v2 = *((void *)this + 135);
  CFTypeRef v6 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v6) {
    goto LABEL_9;
  }
  float v7 = 0.0;
  if (*((unsigned char *)this + 1073)) {
    float v7 = 1.0;
  }
  *(float *)&__src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, (const float *)&__src, 1);
  uint64_t v2 = *((void *)this + 135);
  float v8 = *(clsp::CLSP_Log **)(v2 + 80);
  if (!v8) {
    goto LABEL_9;
  }
  *(float *)&__src = (float)(unint64_t)((uint64_t)(*((void *)this + 101) - *((void *)this + 100)) >> 2);
  clsp::CLSP_Log::LogCLSPData(v8, (const float *)&__src, 1);
  uint64_t v2 = *((void *)this + 135);
  int v9 = *(clsp::CLSP_Log **)(v2 + 80);
  if (v9)
  {
    *(float *)&__src = (float)(unint64_t)((uint64_t)(*((void *)this + 104) - *((void *)this + 103)) >> 2);
    clsp::CLSP_Log::LogCLSPData(v9, (const float *)&__src, 1);
    uint64_t v2 = *((void *)this + 135);
    BOOL v10 = *(clsp::CLSP_Log **)(v2 + 80);
  }
  else
  {
LABEL_9:
    BOOL v10 = 0;
  }
  unint64_t v11 = *(std::__shared_weak_count **)(v2 + 88);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10)
  {
    float v12 = *((double *)this + 7);
    *(float *)&__src = v12;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    float v13 = *((double *)this + 8);
    *(float *)&__src = v13;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    float v14 = *((double *)this + 9);
    *(float *)&__src = v14;
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 20);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 21);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 22);
    clsp::CLSP_Log::LogCLSPData(v10, (const float *)&__src, 1);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v15 = *((void *)this + 135);
  unint64_t v17 = *(clsp::CLSP_Log **)(v15 + 80);
  float v16 = *(std::__shared_weak_count **)(v15 + 88);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17)
  {
    float v18 = *((double *)this + 14);
    *(float *)&__src = v18;
    clsp::CLSP_Log::LogCLSPData(v17, (const float *)&__src, 1);
    float v19 = *((double *)this + 15);
    *(float *)&__src = v19;
    clsp::CLSP_Log::LogCLSPData(v17, (const float *)&__src, 1);
    float v20 = *((double *)this + 16);
    *(float *)&__src = v20;
    clsp::CLSP_Log::LogCLSPData(v17, (const float *)&__src, 1);
    float v21 = *((double *)this + 17);
    *(float *)&__src = v21;
    clsp::CLSP_Log::LogCLSPData(v17, (const float *)&__src, 1);
    float v22 = *((double *)this + 18);
    *(float *)&__src = v22;
    clsp::CLSP_Log::LogCLSPData(v17, (const float *)&__src, 1);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v23 = *((void *)this + 135);
  float v25 = *(clsp::CLSP_Log **)(v23 + 80);
  float v24 = *(std::__shared_weak_count **)(v23 + 88);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v25)
  {
    float v26 = *((double *)this + 19);
    *(float *)&__src = v26;
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    float v27 = *((double *)this + 20);
    *(float *)&__src = v27;
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 42);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 43);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 44);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 45);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 46);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    float v28 = *((double *)this + 24);
    *(float *)&__src = v28;
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 55);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 56);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 57);
    clsp::CLSP_Log::LogCLSPData(v25, (const float *)&__src, 1);
  }
  uint64_t v29 = *((void *)this + 31);
  if (v29)
  {
    __src = v25;
    int v84 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, clsp::CLSP_Log **))(*(void *)v29 + 24))(v29, &__src);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
  }
  uint64_t v30 = *((void *)this + 32);
  if (v30)
  {
    int v81 = v25;
    unsigned int v82 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, clsp::CLSP_Log **))(*(void *)v30 + 24))(v30, &v81);
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
  }
  unsigned __int8 v31 = (char *)this + 280;
  uint64_t v79 = v25;
  uint64_t v80 = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v31, &v79);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    unsigned int v77 = v25;
    float v78 = v24;
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v31, &v79);
    unsigned int v77 = v25;
    float v78 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 296, &v77);
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  int v32 = (char *)this + 312;
  uint64_t v75 = v25;
  unsigned int v76 = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v32, &v75);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    uint64_t v73 = v25;
    uint64_t v74 = v24;
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v32, &v75);
    uint64_t v73 = v25;
    uint64_t v74 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 328, &v73);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v33 = *((void *)this + 135);
  unint64_t v35 = *(clsp::CLSP_Log **)(v33 + 80);
  uint64_t v34 = *(std::__shared_weak_count **)(v33 + 88);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v35)
  {
    LODWORD(__src) = *((_DWORD *)this + 108);
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 109);
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 110);
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    float v36 = *((double *)this + 56);
    *(float *)&__src = v36;
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 114);
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    float v37 = *((double *)this + 58);
    *(float *)&__src = v37;
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    LODWORD(__src) = *((_DWORD *)this + 118);
    clsp::CLSP_Log::LogCLSPData(v35, (const float *)&__src, 1);
    long long v38 = v35;
  }
  else
  {
    long long v38 = 0;
  }
  float v39 = (double *)((char *)this + 488);
  __src = v38;
  int v84 = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ThermalModelOrder1::logCoeffs(v39, &__src);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    int v81 = v35;
    unsigned int v82 = v34;
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::ThermalModelOrder1::logCoeffs(v39, &__src);
    int v81 = v35;
    unsigned int v82 = 0;
  }
  clsp::ThermalModelOrder1::logCoeffs((double *)this + 63, &v81);
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  uint64_t v40 = (double *)((char *)this + 520);
  uint64_t v79 = v35;
  uint64_t v80 = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ThermalModelOrder1::logCoeffs(v40, &v79);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    if (v35)
    {
LABEL_60:
      *(float *)&unsigned int v77 = (float)*((unsigned int *)this + 134);
      clsp::CLSP_Log::LogCLSPData(v35, (const float *)&v77, 1);
      *(float *)&unsigned int v77 = (float)*((unsigned int *)this + 135);
      clsp::CLSP_Log::LogCLSPData(v35, (const float *)&v77, 1);
      *(float *)&unsigned int v77 = (float)*((unsigned int *)this + 136);
      clsp::CLSP_Log::LogCLSPData(v35, (const float *)&v77, 1);
      char v41 = v35;
      goto LABEL_63;
    }
  }
  else
  {
    clsp::ThermalModelOrder1::logCoeffs(v40, &v79);
    if (v35) {
      goto LABEL_60;
    }
  }
  char v41 = 0;
LABEL_63:
  uint64_t v42 = (float *)((char *)this + 568);
  unsigned int v77 = v41;
  float v78 = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v42, &v77);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    uint64_t v75 = v35;
    unsigned int v76 = v34;
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v42, &v77);
    uint64_t v75 = v35;
    unsigned int v76 = 0;
  }
  clsp::IIRTwoPole<float>::logCoeffs((float *)this + 147, &v75);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  unint64_t v43 = (float *)((char *)this + 608);
  uint64_t v73 = v35;
  uint64_t v74 = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v43, &v73);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    uint64_t v71 = v35;
    vDSP_Length v72 = v34;
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v43, &v73);
    uint64_t v71 = v35;
    vDSP_Length v72 = 0;
  }
  clsp::AttackRelease<float,double>::logCoeffs((uint64_t)this + 632, &v71);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  unint64_t v44 = (char *)this + 680;
  v70[0] = v35;
  v70[1] = (clsp::CLSP_Log *)v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v44, v70);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    int v68 = v35;
    vDSP_Length v69 = v34;
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v44, v70);
    int v68 = v35;
    vDSP_Length v69 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 696, &v68);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  unsigned int v45 = (char *)this + 712;
  v67[0] = v35;
  v67[1] = (clsp::CLSP_Log *)v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v45, v67);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    uint64_t v65 = v35;
    uint64_t v66 = v34;
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)v45, v67);
    uint64_t v65 = v35;
    uint64_t v66 = 0;
  }
  clsp::ExponentialSmoother<float,double>::logCoeffs((uint64_t)this + 728, &v65);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v46 = *((void *)this + 53);
  uint64_t v47 = *((void *)this + 135);
  uint64_t v49 = *(void *)(v47 + 80);
  uint64_t v48 = *(std::__shared_weak_count **)(v47 + 88);
  uint64_t v63 = v49;
  vDSP_Length v64 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v46 + 24))(v46, &v63);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  uint64_t v50 = *((void *)this + 97);
  uint64_t v51 = *((void *)this + 135);
  uint64_t v52 = *(atomic_ullong **)(v51 + 88);
  v62[0] = *(clsp::CLSP_Log **)(v51 + 80);
  v62[1] = (clsp::CLSP_Log *)v52;
  if (v52)
  {
    atomic_fetch_add_explicit(v52 + 1, 1uLL, memory_order_relaxed);
    clsp::DelayLine<float,double>::logCoeffs(v50, v62);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
  }
  else
  {
    float result = clsp::DelayLine<float,double>::logCoeffs(v50, v62);
  }
  uint64_t v54 = *((void *)this + 125);
  if (v54)
  {
    uint64_t v55 = *((void *)this + 135);
    uint64_t v56 = *(atomic_ullong **)(v55 + 88);
    v61[0] = *(clsp::CLSP_Log **)(v55 + 80);
    v61[1] = (clsp::CLSP_Log *)v56;
    if (v56)
    {
      atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
      clsp::DelayLine<float,double>::logCoeffs(v54, v61);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56);
    }
    else
    {
      float result = clsp::DelayLine<float,double>::logCoeffs(v54, v61);
    }
  }
  uint64_t v57 = *((void *)this + 126);
  if (v57)
  {
    uint64_t v58 = *((void *)this + 135);
    int v59 = *(atomic_ullong **)(v58 + 88);
    v60[0] = *(clsp::CLSP_Log **)(v58 + 80);
    v60[1] = (clsp::CLSP_Log *)v59;
    if (v59)
    {
      atomic_fetch_add_explicit(v59 + 1, 1uLL, memory_order_relaxed);
      clsp::DelayLine<float,double>::logCoeffs(v57, v60);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }
    else
    {
      return clsp::DelayLine<float,double>::logCoeffs(v57, v60);
    }
  }
  return result;
}

void sub_1BB6299D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  float v19 = *(std::__shared_weak_count **)(v17 - 72);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

float clsp::ThermalController::postProcess(clsp::ThermalController *this, float *a2, const float *__A, vDSP_Length __N)
{
  uint64_t v4 = *((void *)this + 6);
  if (!v4) {
    __assert_rtn("postProcess", "CLSPBlocks.h", 1336, "mr_elecModel");
  }
  uint64_t v6 = *((void *)this + 40);
  if (!v6) {
    __assert_rtn("postProcess", "CLSPBlocks.h", 1337, "mr_CLTModule");
  }
  if (!*((unsigned char *)this + 313)) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v6 + 96);
  if (!v10)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  if (*(unsigned char *)(v10 + 89))
  {
    uint64_t v10 = *(unsigned int *)(v6 + 80);
    uint64_t v11 = 0x100000000;
  }
  else
  {
LABEL_7:
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
LABEL_9:
  uint64_t v12 = v10 | v11;
  *(float *)(v4 + 44) = clsp::ElectricalModel::computePower(*((float **)this + 6), __A, __N, v10 | v11)
                      + *(float *)(v4 + 44);
  uint64_t v13 = *((void *)this + 40);
  if (*(unsigned char *)(v13 + 112) && *(void *)(v13 + 104))
  {
    if (__N)
    {
      float v14 = (float *)__A;
      vDSP_Length v15 = __N;
      do
      {
        float v16 = *(float *)(v13 + 172)
            + (float)(*(float *)(v13 + 168) * (float)(*(float *)(v13 + 156) - *(float *)(v13 + 172)));
        float v17 = *(float *)(v13 + 184);
        float v18 = *(float *)(v13 + 188);
        *(float *)(v13 + 172) = v16;
        float v19 = v18 + (float)(v17 * (float)(v16 - v18));
        *(float *)(v13 + 188) = v19;
        *v14++ = v19;
        *(float *)(v13 + 204) = *(float *)(v13 + 204)
                              + (float)(*(float *)(v13 + 200) * (float)(*(float *)(v13 + 80) - *(float *)(v13 + 204)));
        --v15;
      }
      while (v15);
    }
    vDSP_vsmul(a2, 1, (const float *)(v13 + 76), a2, 1, __N);
    (*(void (**)(void, float *, const float *, vDSP_Length))(**(void **)(v13 + 104) + 56))(*(void *)(v13 + 104), a2, __A, __N);
  }
  float v20 = (float *)*((void *)this + 6);
  float result = clsp::ElectricalModel::computePower(v20, a2, __N, v12) + v20[9];
  v20[9] = result;
  return result;
}

uint64_t clsp::CLSPKernel_v5::ZapBadValues(clsp::CLSPKernel_v5 *this)
{
  float v2 = *((float *)this + 23);
  double v3 = fabsf(v2);
  if (v3 >= 1.0e15 || v3 <= 1.0e-15) {
    float v2 = 0.0;
  }
  *((float *)this + 23) = v2;
  float v5 = *((float *)this + 25);
  double v6 = fabsf(v5);
  if (v6 >= 1.0e15 || v6 <= 1.0e-15) {
    float v5 = 0.0;
  }
  *((float *)this + 25) = v5;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 53) + 224))(*((void *)this + 53));
  float v9 = *((float *)this + 166);
  if (v9 < 0.01 || v9 > 1.0) {
    *((_DWORD *)this + 166) = 1008981770;
  }
  float v11 = *((float *)this + 173);
  if (v11 < 0.01 || v11 > 1.0) {
    *((_DWORD *)this + 173) = 1008981770;
  }
  float v13 = *((float *)this + 177);
  if (v13 < 0.01 || v13 > 1.0) {
    *((_DWORD *)this + 177) = 1008981770;
  }
  float v14 = *((float *)this + 181);
  if (v14 < 0.01 || v14 > 1.0) {
    *((_DWORD *)this + 181) = 1008981770;
  }
  float v15 = *((float *)this + 185);
  if (v15 < 0.01 || v15 > 1.0) {
    *((_DWORD *)this + 185) = 1008981770;
  }
  float v16 = *((float *)this + 140);
  if (v16 < 0.01 || v16 > 1.0) {
    *((_DWORD *)this + 140) = 1008981770;
  }
  float v17 = *((float *)this + 139);
  if (v17 < 0.01 || v17 > 1.0) {
    *((_DWORD *)this + 139) = 1008981770;
  }
  float v18 = *((float *)this + 156);
  if (v18 < 0.0 || v18 > 1000.0)
  {
    float v19 = *((float *)this + 108) - *((float *)this + 110);
    uint64_t result = shouldTraceRender();
    float v20 = *((double *)this + 61);
    float v21 = *((double *)this + 63);
    float v22 = v20 + v21;
    float v23 = (float)(v19 * v20) / (float)(v20 + v21);
    *((float *)this + 146) = v23;
    *((float *)this + 151) = (float)(v19 * v21) / v22;
    *((float *)this + 156) = v23;
  }
  if (*((_DWORD *)this + 138) > *((_DWORD *)this + 135)) {
    *((_DWORD *)this + 138) = 0;
  }
  return result;
}

float clsp::ElectricalModel::computePower(float *a1, const float *__A, vDSP_Length __N, uint64_t a4)
{
  float __C = 0.0;
  vDSP_svesq(__A, 1, &__C, __N);
  if ((a4 & 0xFF00000000) != 0) {
    float v6 = 1.0 / *(float *)&a4;
  }
  else {
    float v6 = a1[7];
  }
  return a1[6] * a1[6] * v6 * a1[8] * __C;
}

float clsp::DelayLine<float,double>::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  double v3 = *a2;
  if (*a2)
  {
    float v5 = *(double *)a1;
    float __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    float v7 = *a2;
    if (*a2)
    {
      float __src = (float)*(unint64_t *)(a1 + 8);
      clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
      float v8 = *a2;
      if (*a2)
      {
        float __src = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
        clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
        float v9 = *a2;
        if (*a2)
        {
          float __src = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
          clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
        }
      }
    }
  }
  return result;
}

float clsp::ThermalModelOrder1::logCoeffs(double *a1, clsp::CLSP_Log **a2)
{
  double v3 = *a2;
  if (*a2)
  {
    float v5 = *a1;
    float __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    float v7 = *a2;
    if (*a2)
    {
      float v8 = a1[1];
      float v10 = v8;
      clsp::CLSP_Log::LogCLSPData(v7, &v10, 1);
    }
  }
  return result;
}

void clsp::CLSPKernel_v5::ProcessAdapt(clsp::CLSPKernel_v5 *this, const float *a2, float *a3, unsigned int a4, unsigned int a5)
{
  v299[4] = *MEMORY[0x1E4F143B8];
  shouldTraceRender();
  if (*((unsigned char *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs(this);
    *((unsigned char *)this + 1072) = 0;
  }
  uint64_t v9 = *((void *)this + 53);
  if (!v9 || !*((void *)this + 46) || *(_DWORD *)(v9 + 8) != 3)
  {
    LODWORD(__B) = 1036831949;
    vDSP_vsmul(a2, 1, (const float *)&__B, a3, 1, a4);
    return;
  }
  float v10 = (float *)*((void *)this + 100);
  vDSP_Length v11 = a4;
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v10, 1, a4);
  uint64_t v12 = *((void *)this + 97);
  shouldTraceRender();
  unint64_t v13 = *(void *)(v12 + 8);
  if (v13 <= a4)
  {
    if (v13)
    {
      memmove(*(void **)(v12 + 40), *(const void **)(v12 + 16), 4 * v13);
      unint64_t v13 = *(void *)(v12 + 8);
    }
    float v17 = &v10[a4];
    float v18 = &v17[-v13];
    if (v18 != v10)
    {
      memmove((void *)(*(void *)(v12 + 40) + 4 * v13), v10, (char *)v18 - (char *)v10);
      unint64_t v13 = *(void *)(v12 + 8);
    }
    if (v13)
    {
      size_t v14 = 4 * v13;
      float v15 = *(void **)(v12 + 16);
      float v16 = &v17[-v13];
      goto LABEL_20;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v12 + 40), *(const void **)(v12 + 16), 4 * a4);
      unint64_t v13 = *(void *)(v12 + 8);
    }
    if (v13 != a4) {
      memmove(*(void **)(v12 + 16), (const void *)(*(void *)(v12 + 16) + 4 * a4), 4 * v13 - 4 * a4);
    }
    if (a4)
    {
      size_t v14 = 4 * a4;
      float v15 = (void *)(*(void *)(v12 + 16) + 4 * *(void *)(v12 + 8) - v14);
      float v16 = v10;
LABEL_20:
      memmove(v15, v16, v14);
    }
  }
  uint64_t v19 = *((void *)this + 125);
  uint64_t v20 = a5;
  float v21 = (char *)(*((void *)this + 106) + 4 * a5);
  shouldTraceRender();
  unint64_t v22 = *(void *)(v19 + 8);
  if (v22 <= a4)
  {
    if (v22)
    {
      memmove(*(void **)(v19 + 40), *(const void **)(v19 + 16), 4 * v22);
      unint64_t v22 = *(void *)(v19 + 8);
    }
    float v26 = &v21[4 * a4];
    float v27 = &v26[-4 * v22];
    if (v27 != v21)
    {
      memmove((void *)(*(void *)(v19 + 40) + 4 * v22), v21, v27 - v21);
      unint64_t v22 = *(void *)(v19 + 8);
    }
    if (v22)
    {
      size_t v23 = 4 * v22;
      float v24 = *(void **)(v19 + 16);
      float v25 = &v26[-4 * v22];
      goto LABEL_34;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v19 + 40), *(const void **)(v19 + 16), 4 * a4);
      unint64_t v22 = *(void *)(v19 + 8);
    }
    if (v22 != a4) {
      memmove(*(void **)(v19 + 16), (const void *)(*(void *)(v19 + 16) + 4 * a4), 4 * v22 - 4 * a4);
    }
    if (a4)
    {
      size_t v23 = 4 * a4;
      float v24 = (void *)(*(void *)(v19 + 16) + 4 * *(void *)(v19 + 8) - v23);
      float v25 = v21;
LABEL_34:
      memmove(v24, v25, v23);
    }
  }
  uint64_t v28 = *((void *)this + 126);
  uint64_t v29 = (char *)(*((void *)this + 109) + 4 * v20);
  shouldTraceRender();
  unint64_t v30 = *(void *)(v28 + 8);
  if (v30 <= a4)
  {
    if (v30)
    {
      memmove(*(void **)(v28 + 40), *(const void **)(v28 + 16), 4 * v30);
      unint64_t v30 = *(void *)(v28 + 8);
    }
    uint64_t v34 = &v29[4 * a4];
    unint64_t v35 = &v34[-4 * v30];
    if (v35 != v29)
    {
      memmove((void *)(*(void *)(v28 + 40) + 4 * v30), v29, v35 - v29);
      unint64_t v30 = *(void *)(v28 + 8);
    }
    if (!v30) {
      goto LABEL_49;
    }
    size_t v33 = 4 * v30;
    unsigned __int8 v31 = *(void **)(v28 + 16);
    int v32 = &v34[-4 * v30];
  }
  else
  {
    if (a4)
    {
      memmove(*(void **)(v28 + 40), *(const void **)(v28 + 16), 4 * a4);
      unint64_t v30 = *(void *)(v28 + 8);
    }
    if (v30 != a4) {
      memmove(*(void **)(v28 + 16), (const void *)(*(void *)(v28 + 16) + 4 * a4), 4 * v30 - 4 * a4);
    }
    if (!a4) {
      goto LABEL_49;
    }
    unsigned __int8 v31 = (void *)(*(void *)(v28 + 16) + 4 * *(void *)(v28 + 8) - 4 * a4);
    int v32 = v29;
    size_t v33 = 4 * a4;
  }
  memmove(v31, v32, v33);
LABEL_49:
  clsp::FirFilter::firlsfilter(*((clsp::FirFilter **)this + 127), (float *)(*((void *)this + 112) + 4 * v20), (float *)(*((void *)this + 112) + 4 * v20), a4);
  if (!a4)
  {
    float v179 = 0.0;
    float v289 = 0.0;
    goto LABEL_144;
  }
  unint64_t v36 = 0;
  float v37 = (float *)(*((void *)this + 112) + 4 * v20);
  long long v38 = *(float **)(*((void *)this + 126) + 40);
  float v39 = *(float **)(*((void *)this + 125) + 40);
  double v40 = 0.0;
  double v41 = 0.0;
  vDSP_Length v209 = a4;
  uint64_t v210 = v9;
  std::string::size_type v211 = this;
  uint64_t v208 = v10;
  do
  {
    uint64_t v42 = *((void *)this + 97);
    uint64_t v43 = *(void *)(v42 + 40);
    if (v36 >= (*(void *)(v42 + 48) - v43) >> 2) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    float v44 = v10[v36];
    float v45 = (*(float (**)(uint64_t, float, float))(*(void *)v9 + 184))(v9, v44, *(float *)(v43 + 4 * v36));
    *(float *)(*((void *)this + 103) + 4 * v36) = v45;
    float v46 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v46;
    float v47 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v46 - *((float *)this + 177)));
    *((float *)this + 177) = v47;
    float v48 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v48;
    float v49 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v48 - *((float *)this + 185)));
    *((float *)this + 185) = v49;
    unint64_t v261 = v36;
    double v257 = v41;
    double v258 = v40;
    if (*((unsigned char *)this + 744))
    {
      if (v49 >= v47) {
        float v50 = v47;
      }
      else {
        float v50 = v49;
      }
      float v255 = v45 * v50;
      float v44 = v44 * (float)(v47 * v49);
    }
    else
    {
      float v255 = v45;
    }
    float v256 = v44;
    --*((_DWORD *)this + 137);
    uint64_t v51 = *((void *)this + 46);
    float v278 = *v39;
    uint64_t v259 = v38;
    v260 = v37;
    float v271 = *v38;
    float v275 = *v37;
    double v288 = *((double *)this + 3);
    uint64_t v254 = *((void *)this + 48);
    double v52 = *(double *)(v51 + 16);
    int v53 = *(_DWORD *)(v51 + 204);
    int v286 = *(_DWORD *)(v51 + 200);
    int v285 = *(_DWORD *)(v51 + 208);
    int v274 = *(_DWORD *)(v51 + 212);
    double v284 = *(double *)(v51 + 552);
    double v277 = *(double *)(v51 + 216);
    uint64_t v54 = (double *)(v51 + 264);
    v262 = (double *)(v51 + 304);
    v263 = (double *)(v51 + 344);
    double v220 = *(double *)(v51 + 720);
    double v221 = *(double *)(v51 + 888);
    double v222 = *(double *)(v51 + 896);
    double v223 = *(double *)(v51 + 904);
    double v213 = *(double *)(v51 + 928);
    double v214 = *(double *)(v51 + 920);
    double v215 = *(double *)(v51 + 936);
    double v216 = *(double *)(v51 + 944);
    double v212 = *(double *)(v51 + 952);
    double v219 = *(double *)(v51 + 960);
    double v217 = *(double *)(v51 + 912);
    double v218 = *(double *)(v51 + 968);
    double v280 = *(double *)(v51 + 56);
    double v267 = *(double *)(v51 + 64);
    double v269 = *(double *)(v51 + 48);
    double v55 = *(double *)(v51 + 80);
    long double v225 = *(double *)(v51 + 72);
    memset(v299, 0, 32);
    uint64_t v297 = 0;
    double v56 = *(double *)(v51 + 344);
    double v57 = *(double *)(v51 + 680);
    double v58 = -(v56 * v57);
    double v59 = (v288 + v288) * v52;
    memset(v296, 0, sizeof(v296));
    memset(v295, 0, sizeof(v295));
    memset(v293, 0, sizeof(v293));
    double v273 = *(double *)(v51 + 128);
    double v241 = *(double *)(v51 + 144);
    double v239 = *(double *)(v51 + 112);
    double v240 = *(double *)(v51 + 152);
    v226 = (void *)(v51 + 112);
    double v251 = *(double *)(v51 + 120);
    double v252 = *(double *)(v51 + 160);
    double v229 = *(double *)(v51 + 176);
    double v227 = *(double *)(v51 + 136);
    double v228 = *(double *)(v51 + 184);
    double v265 = *(double *)(v51 + 168);
    uint64_t v266 = *(void *)(v51 + 192);
    double v250 = *(double *)(v51 + 88);
    double v234 = exp(v58 / v59);
    double v60 = *(double *)(v51 + 640);
    double v61 = *(double *)(v51 + 304);
    double v236 = v56;
    double v237 = v57;
    double v232 = sqrt(v52 * 4.0 * v60 * v61 - v56 * v57 * (v56 * v57));
    double __x = v232 / v59;
    double v62 = cos(v232 / v59);
    double v63 = v52 * v288;
    long double v64 = exp(v58 / v63);
    uint64_t v65 = 0;
    double v235 = v61;
    double v233 = v60;
    double v231 = v60 * v61;
    double v253 = v234 * -2.0 * v62;
    double v282 = (v64 + v253 + 1.0) / (v60 * v61);
    double v283 = v64;
    double v66 = v282 * v269 - v253 * v280 - v64 * v267;
    double v247 = v66 - v280;
    double v67 = 0.0;
    double v281 = v66;
    double v68 = v66 + 0.0;
    uint64_t v69 = (v53 + 1);
    do
    {
      double v70 = *(double *)(v51 + 8 * v65 + 600) * *(double *)(v51 + 8 * v65 + 264);
      double v67 = v67 + v70 * pow(v68, (double)(int)v65++);
    }
    while (v69 != v65);
    uint64_t v71 = 0;
    double v72 = v271;
    uint64_t v73 = (double *)(v51 + 224);
    uint64_t v74 = (v286 + 1);
    double v75 = 0.0;
    do
    {
      double v76 = *(double *)(v51 + 8 * v71 + 560) * *(double *)(v51 + 8 * v71 + 224);
      double v75 = v75 + v76 * pow(v68, (double)(int)v71++);
    }
    while (v74 != v71);
    double v272 = v75;
    if (v286)
    {
      uint64_t v77 = 0;
      double v78 = 0.0;
      do
      {
        uint64_t v79 = v77 + 1;
        double v80 = *(double *)(v51 + 8 * v77 + 568) * (double)((int)v77 + 1) * *(double *)(v51 + 8 * v77 + 232);
        double v78 = v78 + v80 * pow(v68, (double)(int)v77);
        uint64_t v77 = v79;
      }
      while (v74 - 1 != v79);
    }
    else
    {
      double v78 = 0.0;
    }
    long double v264 = v68;
    double v270 = v278;
    double v81 = v247 * v288;
    double v248 = v275;
    double v276 = v275 - v281;
    double v279 = v81;
    double v82 = v81 * v78;
    double v246 = -v67;
    double v243 = v82 * v72 + v284 * v277 * v72 + (v72 - v55) * v272 * v288;
    double v245 = v82 + v277 * v284;
    long double v83 = sin(__x);
    uint64_t v84 = 0;
    long double v85 = v236 * -(v237 * v237) / v63 * v234 * v83 / v232 + v237 / v63 * v234 * v62;
    long double v86 = (v233 + v233) / v288 * v234 / v232 * v83;
    double v294 = v280 * v85 - v269 * ((-(v237 * v283) / v63 + v85) / v231) + v267 * (-(v237 * v283) / v63);
    double v292 = v280 * v86 - v269 * (v86 / v231 - v282 / v235) + v267 * 0.0;
    double v87 = v294 * v294 + v292 * v292;
    double v88 = v280 + 0.0;
    do
    {
      double v89 = v55 * -(*(double *)(v51 + 8 * v84 + 600) * v282);
      long double v90 = pow(v88, (double)(int)v84) * v89;
      *((long double *)v296 + v84) = v90;
      double v87 = v87 + v90 * v90;
      ++v84;
    }
    while (v69 != v84);
    if (v285)
    {
      uint64_t v91 = 0;
      double v92 = v72 - v55;
      do
      {
        double v93 = v282 * *(double *)(v51 + 648 + 8 * v91);
        long double v94 = pow(v88, (double)((int)v91 + 2)) * v93;
        *(long double *)&v293[v91] = v94;
        double v87 = v87 + v94 * v94;
        ++v91;
      }
      while ((v285 + 1) - 1 != v91);
    }
    else
    {
      double v92 = v72 - v55;
    }
    if (v274)
    {
      uint64_t v95 = 0;
      do
      {
        double v96 = v282 * *(double *)(v51 + 688 + 8 * v95);
        long double v97 = pow(v225, (double)((int)v95 + 2)) * v96;
        *(long double *)&v295[v95] = v97;
        double v87 = v87 + v97 * v97;
        ++v95;
      }
      while ((v274 + 1) - 1 != v95);
    }
    double v238 = -(v284 * v72);
    double v98 = v288;
    double __B = -(*(double *)(v51 + 560) * v92) * v288;
    double v99 = v238 * v238 + __B * __B;
    double v249 = v72;
    if (v286)
    {
      uint64_t v100 = 0;
      do
      {
        double v101 = *(double *)(v51 + 568 + 8 * v100);
        long double v102 = v92 * pow(v264, (double)((int)v100 + 1));
        long double v103 = v279 * v72 * (double)((int)v100 + 1) * pow(v264, (double)(int)v100) + v102 * v288;
        double v98 = v288;
        long double v104 = -(v101 * v103);
        *(long double *)&v299[v100] = v104;
        double v99 = v99 + v104 * v104;
        ++v100;
      }
      while (v74 - 1 != v100);
    }
    double v244 = v243 + v67 * v279;
    double v105 = v270 - v244;
    double v106 = 1.0 - v273;
    double v107 = v270 * v270 * v273 + (1.0 - v273) * v239;
    double v287 = v273 * (v105 * v105) + v240 * (1.0 - v273);
    double v268 = v107;
    if (v241 > v107 && v227 > 0.0)
    {
      double v291 = 0.0;
      int v108 = v274;
      if (!CACFDictionary::GetFloat64(*(void *)v51, @"Reb", &v291))
      {
        exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Reb not found in inConfig");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      }
      *(double *)(v51 + 384) = v291;
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Le_x", (const __CFString *)*(unsigned int *)(v51 + 200), v51 + 392, v109);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Bl_x", (const __CFString *)*(unsigned int *)(v51 + 204), v51 + 432, v110);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Km_x", (const __CFString *)*(unsigned int *)(v51 + 208), v51 + 472, v111);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Rm_u", (const __CFString *)*(unsigned int *)(v51 + 212), v51 + 512, v112);
      *(_OWORD *)(v51 + 72) = 0u;
      *(_OWORD *)(v51 + 56) = 0u;
      *(_OWORD *)(v51 + 40) = 0u;
      *(_OWORD *)(v51 + 24) = 0u;
      void *v226 = 0;
      *(void *)(v51 + 120) = 0;
      float v113 = (void *)(v51 + 152);
      *(void *)(v51 + 168) = 0;
      double v242 = 0.0;
      uint64_t v266 = 0;
LABEL_90:
      void *v113 = 0;
      v113[1] = 0;
      goto LABEL_91;
    }
    double v114 = v265;
    double v116 = v228;
    double v115 = v229;
    double v117 = v228;
    int v108 = v274;
    if (v229 <= v265)
    {
      long double v118 = log10(v287 / v107);
      double v116 = v228;
      double v115 = v229;
      double v117 = v118 * -10.0;
      double v114 = v265;
    }
    double v242 = v117;
    if (v116 > v117 && v114 > v115)
    {
      double v290 = 0.0;
      if (!CACFDictionary::GetFloat64(*(void *)v51, @"Reb", &v290))
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v177, "Reb not found in inConfig");
        v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      }
      *(double *)(v51 + 216) = v290;
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Le_x", (const __CFString *)*(unsigned int *)(v51 + 200), v51 + 224, v119);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Bl_x", (const __CFString *)*(unsigned int *)(v51 + 204), v51 + 264, v120);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Km_x", (const __CFString *)*(unsigned int *)(v51 + 208), (uint64_t)v262, v121);
      clsp::ParameterUpdater::GetArraysData((CFDictionaryRef *)v51, (const CACFDictionary *)@"Rm_u", (const __CFString *)*(unsigned int *)(v51 + 212), (uint64_t)v263, v122);
      *(void *)(v51 + 80) = 0;
      *(_OWORD *)(v51 + 48) = 0u;
      *(_OWORD *)(v51 + 64) = 0u;
      void *v226 = 0;
      *(void *)(v51 + 120) = 0;
      float v113 = (void *)(v51 + 152);
      *(void *)(v51 + 168) = 0;
      goto LABEL_90;
    }
    if (v114 <= v115) {
      double v265 = 1.0 / v98 + v114;
    }
    double v144 = v221 + v87;
    long long v145 = (double *)v296;
    uint64_t v146 = v51;
    uint64_t v147 = v69;
    do
    {
      double v148 = *v145++;
      *(double *)(v146 + 264) = *(double *)(v146 + 264) - v276 * *(double *)(v146 + 768) * v148 / v144;
      v146 += 8;
      --v147;
    }
    while (v147);
    double v149 = *(double *)(v51 + 264);
    double v150 = *(double *)(v51 + 600);
    double v151 = v217 / v150;
    if (v149 < v217 / v150 || (double v151 = v212 / v150, v149 > v212 / v150)) {
      *uint64_t v54 = v151;
    }
    uint64_t v152 = (v285 + 1);
    float v153 = &v292;
    uint64_t v154 = v51;
    do
    {
      double v155 = *v153++;
      *(double *)(v154 + 304) = *(double *)(v154 + 304) - v276 * *(double *)(v154 + 808) * v155 / v144;
      v154 += 8;
      --v152;
    }
    while (v152);
    uint64_t v156 = (v274 + 1);
    unint64_t v157 = &v294;
    uint64_t v158 = v51;
    do
    {
      double v159 = *v157++;
      *(double *)(v158 + 344) = *(double *)(v158 + 344) - v276 * *(double *)(v158 + 848) * v159 / v144;
      v158 += 8;
      --v156;
    }
    while (v156);
    double v160 = *(double *)(v51 + 304);
    double v161 = *(double *)(v51 + 640);
    double v162 = v218 / v161;
    if (v160 > v218 / v161 || (double v162 = v213 / v161, v160 < v213 / v161)) {
      double *v262 = v162;
    }
    double v163 = *(double *)(v51 + 344);
    double v164 = *(double *)(v51 + 680);
    double v165 = v219 / v164;
    if (v163 > v219 / v164 || (double v165 = v214 / v164, v163 < v214 / v164)) {
      double *v263 = v165;
    }
    double v166 = v221 + v99 + v270 * v270 * 0.0;
    double v167 = v277 - v238 * (v220 * v105) / v166;
    double v168 = v222 / v284;
    if (v167 >= v222 / v284)
    {
      double v168 = v277 - v238 * (v220 * v105) / v166;
      if (v167 > v215 / v284) {
        double v168 = v215 / v284;
      }
    }
    p_B = &__B;
    uint64_t v170 = v51;
    uint64_t v171 = v74;
    do
    {
      double v172 = *p_B++;
      *(double *)(v170 + 224) = *(double *)(v170 + 224) - v105 * *(double *)(v170 + 728) * v172 / v166;
      v170 += 8;
      --v171;
    }
    while (v171);
    double v173 = *(double *)(v51 + 224);
    double v174 = *(double *)(v51 + 560);
    double v277 = v168;
    if (v173 >= v223 / v174)
    {
      double v175 = v216 / v174;
      if (v173 > v175) {
        *uint64_t v73 = v175;
      }
    }
    else
    {
      *uint64_t v73 = v223 / v174;
    }
LABEL_91:
    double v123 = 0.0;
    double v124 = 0.0;
    if (v108)
    {
      uint64_t v125 = 0;
      do
      {
        double v126 = *(double *)(v51 + 8 * v125 + 688) * *(double *)(v51 + 8 * v125 + 352);
        double v124 = v124 + v126 * pow(v279, (double)(int)++v125);
      }
      while ((v108 + 1) - 1 != v125);
    }
    if (v285)
    {
      uint64_t v127 = 0;
      double v123 = 0.0;
      do
      {
        double v128 = *(double *)(v51 + 8 * v127 + 648) * *(double *)(v51 + 8 * v127 + 312);
        double v123 = v123 + v128 * pow(v264, (double)(int)++v127);
      }
      while ((v285 + 1) - 1 != v127);
    }
    uint64_t v129 = 0;
    double v130 = (v270 + v246 * v279 + v272 * v98 * v250) / (v245 + v272 * v98);
    double v131 = v248 * v248 * v273 + v106 * v251;
    double v132 = v273 * (v276 * v276) + v252 * v106;
    double v133 = 0.0;
    do
    {
      double v134 = *(double *)(v51 + 8 * v129 + 600) * *(double *)(v51 + 8 * v129 + 264);
      double v133 = v133 + v134 * pow(v264, (double)(int)v129++);
    }
    while (v69 != v129);
    *(double *)(v51 + 24) = v253;
    *(double *)(v51 + 32) = v283;
    *(double *)(v51 + 56) = v281;
    *(double *)(v51 + 64) = v280;
    *(double *)(v51 + 72) = v279;
    *(double *)(v51 + 80) = v249;
    *(double *)(v51 + 88) = v130;
    *(double *)(v51 + 40) = v282;
    *(double *)(v51 + 48) = v133 * v249 - v123 * v281 - v124 * v279;
    *(double *)(v51 + 216) = v277;
    *(double *)(v51 + 112) = v268;
    *(double *)(v51 + 120) = v131;
    *(double *)(v51 + 152) = v287;
    *(double *)(v51 + 160) = v132;
    *(double *)(v51 + 168) = v265;
    this = v211;
    do
    {
      ++v73;
      --v74;
    }
    while (v74);
    double v41 = v257;
    double v40 = v258;
    uint64_t v136 = v51 + 304;
    uint64_t v135 = v51 + 344;
    do
    {
      ++v54;
      --v69;
    }
    while (v69);
    uint64_t v137 = (v285 + 1);
    float v10 = v208;
    do
    {
      v136 += 8;
      --v137;
    }
    while (v137);
    uint64_t v138 = (v108 + 1);
    vDSP_Length v11 = v209;
    uint64_t v9 = v210;
    do
    {
      v135 += 8;
      --v138;
    }
    while (v138);
    *(double *)uint64_t v254 = v281;
    *(double *)(v254 + 8) = v244;
    *(double *)(v254 + 16) = v270 - v244;
    *(double *)(v254 + 24) = v282;
    *(double *)(v254 + 32) = v253;
    *(double *)(v254 + 40) = v283;
    *(double *)(v254 + 48) = v284 * v277;
    *(double *)(v254 + 56) = *(double *)(v51 + 560) * *(double *)(v51 + 224);
    *(double *)(v254 + 64) = *(double *)(v51 + 568) * *(double *)(v51 + 232);
    *(double *)(v254 + 72) = *(double *)(v51 + 576) * *(double *)(v51 + 240);
    *(double *)(v254 + 80) = *(double *)(v51 + 584) * *(double *)(v51 + 248);
    *(double *)(v254 + 88) = *(double *)(v51 + 592) * *(double *)(v51 + 256);
    *(double *)(v254 + 96) = *(double *)(v51 + 600) * *(double *)(v51 + 264);
    *(double *)(v254 + 104) = *(double *)(v51 + 608) * *(double *)(v51 + 272);
    *(double *)(v254 + 112) = *(double *)(v51 + 616) * *(double *)(v51 + 280);
    *(double *)(v254 + 120) = *(double *)(v51 + 624) * *(double *)(v51 + 288);
    *(double *)(v254 + 128) = *(double *)(v51 + 632) * *(double *)(v51 + 296);
    *(double *)(v254 + 136) = *(double *)(v51 + 640) * *(double *)(v51 + 304);
    *(double *)(v254 + 144) = *(double *)(v51 + 648) * *(double *)(v51 + 312);
    *(double *)(v254 + 152) = *(double *)(v51 + 656) * *(double *)(v51 + 320);
    *(double *)(v254 + 160) = *(double *)(v51 + 664) * *(double *)(v51 + 328);
    *(double *)(v254 + 168) = *(double *)(v51 + 672) * *(double *)(v51 + 336);
    *(double *)(v254 + 176) = *(double *)(v51 + 680) * *(double *)(v51 + 344);
    *(double *)(v254 + 184) = *(double *)(v51 + 688) * *(double *)(v51 + 352);
    *(double *)(v254 + 192) = *(double *)(v51 + 696) * *(double *)(v51 + 360);
    *(double *)(v254 + 200) = *(double *)(v51 + 704) * *(double *)(v51 + 368);
    *(double *)(v254 + 208) = *(double *)(v51 + 712) * *(double *)(v51 + 376);
    *(double *)(v254 + 216) = v276;
    *(double *)(v254 + 224) = v292;
    *(double *)(v254 + 232) = v268;
    *(double *)(v254 + 240) = v242;
    *(void *)(v254 + 248) = v266;
    *(double *)(v254 + 256) = v130;
    uint64_t v139 = *(clsp::CLSP_Log **)(*((void *)v211 + 135) + 16);
    if (v139)
    {
      float v140 = **((double **)v211 + 48);
      *(float *)&double __B = v140;
      clsp::CLSP_Log::LogCLSPData(v139, (const float *)&__B, 1);
    }
    uint64_t v141 = *((void *)v211 + 48);
    double v142 = fabs(*(double *)(v141 + 16));
    if (v258 < v142) {
      double v40 = v142;
    }
    double v143 = fabs(*(double *)(v141 + 216));
    if (v257 < v143) {
      double v41 = v143;
    }
    (*(void (**)(uint64_t, float, float))(*(void *)v210 + 192))(v210, v256, v255);
    a3[v261] = v255;
    unint64_t v36 = v261 + 1;
    ++v39;
    long long v38 = v259 + 1;
    float v37 = v260 + 1;
  }
  while (v261 + 1 != v209);
  float v178 = v40;
  float v289 = v178;
  float v179 = v41;
LABEL_144:
  clsp::ThermalController::postProcess((clsp::CLSPKernel_v5 *)((char *)this + 432), a3, *((const float **)this + 103), v11);
  uint64_t v180 = *((void *)this + 51);
  uint64_t v181 = *((void *)this + 46);
  *(_OWORD *)uint64_t v180 = *(_OWORD *)(v181 + 24);
  *(void *)(v180 + 16) = *(void *)(v181 + 40);
  *(double *)(v180 + 32) = *(double *)(v181 + 552) * *(double *)(v181 + 216);
  *(void *)(v180 + 40) = *(void *)(v181 + 16);
  float v182 = *(double **)(v180 + 48);
  uint64_t v183 = (*(_DWORD *)(v181 + 200) + 1);
  uint64_t v184 = v181;
  do
  {
    *v182++ = *(double *)(v184 + 560) * *(double *)(v184 + 224);
    v184 += 8;
    --v183;
  }
  while (v183);
  uint64_t v185 = *(double **)(v180 + 120);
  uint64_t v186 = (*(_DWORD *)(v181 + 204) + 1);
  do
  {
    v185[v183] = *(double *)(v181 + 8 * v183 + 600) * *(double *)(v181 + 8 * v183 + 264);
    ++v183;
  }
  while (v186 != v183);
  uint64_t v187 = 0;
  uint64_t v188 = *(double **)(v180 + 72);
  uint64_t v189 = (*(_DWORD *)(v181 + 208) + 1);
  do
  {
    v188[v187] = *(double *)(v181 + 8 * v187 + 640) * *(double *)(v181 + 8 * v187 + 304);
    ++v187;
  }
  while (v189 != v187);
  uint64_t v190 = 0;
  uint64_t v191 = *(double **)(v180 + 96);
  uint64_t v192 = (*(_DWORD *)(v181 + 212) + 1);
  do
  {
    v191[v190] = *(double *)(v181 + 8 * v190 + 680) * *(double *)(v181 + 8 * v190 + 344);
    ++v190;
  }
  while (v192 != v190);
  double v193 = *(double *)(v180 + 40);
  float v194 = sqrt(*v188 / v193);
  float v195 = sqrt(*v188 * v193) / (*v191 + *v185 * *v185 / *(double *)(v180 + 32));
  double v196 = v195;
  double v197 = 1.0 / *(double *)(v180 + 24);
  double v198 = -(v197 * v194);
  long double v199 = exp(v198 / (v196 + v196)) * -2.0;
  long double v200 = v199 * cos(v197 * v194 * sqrt(1.0 / (v196 * -4.0 * v196) + 1.0));
  long double v201 = exp(v198 / v196);
  float v202 = v200;
  *(float *)&long double v201 = v201;
  *(_DWORD *)(v9 + 312) = 1065353216;
  *(float *)(v9 + 316) = v202;
  *(_DWORD *)(v9 + 320) = LODWORD(v201);
  *(float *)(v9 + 340) = 1.0 / (float)((float)(1.0 - v202) + *(float *)&v201);
  *(float *)(v9 + 344) = (float)(v194 / *(float *)(v9 + 348)) * (float)(v194 / *(float *)(v9 + 348));
  clsp::CLSPKernel_v5::ZapBadValues(this);
  uint64_t v203 = *(clsp::CLSP_Log **)(*((void *)this + 135) + 48);
  if (v203)
  {
    *(float *)&double __B = v289;
    clsp::CLSP_Log::LogCLSPData(v203, (const float *)&__B, 1);
    uint64_t v204 = *(clsp::CLSP_Log **)(*((void *)this + 135) + 48);
    if (v204)
    {
      *(float *)&double __B = v179;
      clsp::CLSP_Log::LogCLSPData(v204, (const float *)&__B, 1);
    }
  }
  float v205 = *((float *)this + 257);
  if (v205 < v289) {
    float v205 = v289;
  }
  *((float *)this + 257) = v205;
  float v206 = *((float *)this + 258);
  if (v206 < v179) {
    float v206 = v179;
  }
  *((float *)this + 258) = v206;
  v207 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 128))(v9);
  log10f(v207[21]* (float)((float)((float)((float)(1.0 - v207[12]) + v207[13]) * (float)((float)(v207[14] + v207[15]) + v207[16]))/ (float)((float)(v207[12] + 1.0) + v207[13])));
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::__on_zero_shared(void *a1)
{
  float v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  float v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAB48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::SpeakerModelNonlinearParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::__on_zero_shared(void *a1)
{
  float v2 = (void *)a1[131];
  if (v2)
  {
    a1[132] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[128];
  if (v3)
  {
    a1[129] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[125];
  if (v4)
  {
    a1[126] = v4;
    operator delete(v4);
  }

  CACFDictionary::~CACFDictionary((CACFDictionary *)(a1 + 3));
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAB10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::ParameterUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void clsp::DelayLine<float,double>::calcCoeffs(double *a1, double a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  double v4 = *a1;
  unint64_t v5 = vcvtad_u64_f64(*a1 * 0.001 * a2);
  unint64_t v6 = (uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 2;
  if (v6 >= v5)
  {
    *((void *)a1 + 1) = v5;
  }
  else
  {
    *((void *)a1 + 1) = v6;
    float v7 = (NSObject **)spp3Subsystem();
    if (v7)
    {
      float v8 = *v7;
      if (!*v7) {
        goto LABEL_9;
      }
    }
    else
    {
      float v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (*((void *)a1 + 3) - *((void *)a1 + 2)) >> 2;
      int v13 = 136316162;
      size_t v14 = "DSPBlocks.h";
      __int16 v15 = 1024;
      int v16 = 945;
      __int16 v17 = 2048;
      double v18 = v4;
      __int16 v19 = 2048;
      double v20 = a2;
      __int16 v21 = 1024;
      int v22 = v9;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Delay %f ms at fs=%f is bigger than delay buffer of %u samples", (uint8_t *)&v13, 0x2Cu);
    }
  }
LABEL_9:
  uint64_t v10 = spp3Subsystem();
  if (v10)
  {
    if (*(unsigned char *)(v10 + 8))
    {
      vDSP_Length v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = (*((void *)a1 + 3) - *((void *)a1 + 2)) >> 2;
          int v13 = 136315650;
          size_t v14 = "DSPBlocks.h";
          __int16 v15 = 1024;
          int v16 = 949;
          __int16 v17 = 1024;
          LODWORD(v18) = v12;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Size of delay line %d", (uint8_t *)&v13, 0x18u);
        }
      }
    }
  }
}

void clsp::ClosedLoopThermalModule::setPilotGenType(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a2 == 1) {
      operator new();
    }
    if (a2 == 2) {
      operator new();
    }
    uint64_t v6 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    float v8 = (NSObject **)spp3SubsystemAsync();
    if (v8)
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      vDSP_Length v11 = "CLSPBlocks.h";
      __int16 v12 = 1024;
      int v13 = 708;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Acting on invalid ThermalMeasurementType", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    shouldTraceRender();
  }
LABEL_21:
  *(_DWORD *)(a1 + 64) = a2;
}

void sub_1BB62C0F8(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 184) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v1;
  uint64_t *v1 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  MEMORY[0x1C185D370](v2, 0x10A1C4074ECAE13);
  _Unwind_Resume(a1);
}

double clsp::PilotGen::getPrePeak(clsp::PilotGen *this)
{
  return 0.0;
}

void clsp::PilotToneGen::envelopeAndAddToBuffer(clsp::PilotToneGen *this, float *__C, const float *__A, unint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = *((void *)this + 3);
    unint64_t v11 = *((void *)this + 1);
    do
    {
      vDSP_Length v12 = ((v10 - v9) >> 2) - v11;
      if (a4 - v8 >= v12) {
        vDSP_Length __N = v12;
      }
      else {
        vDSP_Length __N = a4 - v8;
      }
      vDSP_vma(__A, 1, (const float *)(v9 + 4 * v11), 1, __C, 1, __C, 1, __N);
      uint64_t v9 = *((void *)this + 2);
      unint64_t v11 = __N + *((void *)this + 1);
      uint64_t v10 = *((void *)this + 3);
      if (v11 >= (v10 - v9) >> 2) {
        unint64_t v11 = 0;
      }
      *((void *)this + 1) = v11;
      v8 += __N;
    }
    while (v8 < a4);
  }
}

void clsp::PilotToneGen::calcCoeffs(uint64_t a1, double *a2, double a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned int *)a2;
  *(_DWORD *)AudioTimeStamp buf = 0;
  std::vector<float>::resize(a1 + 16, v6, buf);
  double v7 = a2[1];
  LODWORD(v8) = *(_DWORD *)a2;
  double v9 = v7 * (double)v8 / a3;
  if (modf(v9, &__y) > 0.000000999999997)
  {
    uint64_t v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      unint64_t v11 = *v10;
      if (!*v10) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v22 = "DSPBlocks.h";
      __int16 v23 = 1024;
      int v24 = 1336;
      __int16 v25 = 2048;
      double v26 = v9;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Analysis period %f is not integer multiple of sine period", buf, 0x1Cu);
    }
  }
LABEL_8:
  uint64_t v13 = a1 + 16;
  vDSP_Length v12 = *(float **)(a1 + 16);
  uint64_t v14 = *(void *)(v13 + 8) - (void)v12;
  if (v14)
  {
    double v15 = v7 * 6.28318531 / a3;
    unint64_t v16 = v14 >> 2;
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    double v18 = 0.0;
    do
    {
      float v19 = sin(v15 * v18);
      *v12++ = v19;
      double v18 = v18 + 1.0;
      --v17;
    }
    while (v17);
  }
}

uint64_t clsp::PilotToneGen::reset(uint64_t this)
{
  *(void *)(this + 8) = 0;
  return this;
}

float clsp::PilotToneGen::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  double v3 = *a2;
  if (*a2)
  {
    float __src = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
  }
  return result;
}

void *clsp::PilotToneGen::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ptg buffer std::string::size_type size = ", 18);
  double v3 = (void *)std::ostream::operator<<();
  char v5 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  return a2;
}

void clsp::PilotToneGen::~PilotToneGen(clsp::PilotToneGen *this)
{
  *(void *)this = &unk_1F14BE5B8;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

{
  void *v2;

  *(void *)this = &unk_1F14BE5B8;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

float *clsp::LPMLSGen::generateMLS(float *this, float *a2, int **a3, void *a4)
{
  if (this && a3 && a2)
  {
    uint64_t v4 = *a3;
    char v5 = (float *)a3[1];
    unsigned int v7 = (*a3)[1];
    int v6 = (*a3)[2];
    int v8 = **a3;
    uint64_t v9 = a2;
    do
    {
      int v10 = v7 & v8;
      unsigned int v7 = ((((v8 & (v7 >> 1)) + (v7 & v8)) & v8) << v6) + (v7 >> 1);
      if (v10 == 1) {
        float v11 = 1.0;
      }
      else {
        float v11 = -1.0;
      }
      float v12 = (float)((float)(v5[2] * v5[3]) + (float)(v11 * v5[1])) - (float)(v5[4] * *v5);
      void v5[3] = v11;
      v5[4] = v12;
      *this++ = v12;
      --v9;
    }
    while (v9);
    v4[1] = v7;
  }
  return this;
}

float clsp::LPMLSGen::getPrePeak(clsp::LPMLSGen *this)
{
  return *((float *)this + 20);
}

__n128 clsp::LPMLSGen::setParams(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void clsp::LPMLSGen::envelopeAndAddToBuffer(clsp::LPMLSGen *this, float *a2, const float *a3, vDSP_Length a4)
{
  (*(void (**)(void, void, vDSP_Length, uint64_t))(**((void **)this + 22) + 40))(*((void *)this + 22), *((void *)this + 14), a4, 1);
  vDSP_vsmul(*((const float **)this + 14), 1, (const float *)this + 16, *((float **)this + 14), 1, a4);
  uint64_t __C = 0;
  vDSP_maxv(*((const float **)this + 14), 1, (float *)&__C + 1, a4);
  vDSP_minv(*((const float **)this + 14), 1, (float *)&__C, a4);
  float v8 = -*(float *)&__C;
  if (*((float *)&__C + 1) >= (float)-*(float *)&__C) {
    float v8 = *((float *)&__C + 1);
  }
  *((float *)this + 20) = v8;
  uint64_t v9 = (float *)*((void *)this + 14);
  if (a4)
  {
    int v10 = (float *)*((void *)this + 14);
    vDSP_Length v11 = a4;
    do
    {
      *int v10 = tanhf(*v10);
      ++v10;
      --v11;
    }
    while (v11);
  }
  vDSP_vsmul(v9, 1, (const float *)this + 17, v9, 1, a4);
  vDSP_vma(a3, 1, *((const float **)this + 14), 1, a2, 1, a2, 1, a4);
}

uint64_t clsp::LPMLSGen::calcCoeffs(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[2];
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

double clsp::LPMLSGen::calcCoeffs(clsp::LPMLSGen *this, double a2)
{
  *((float32x2_t *)this + 8) = vcvt_f32_f64(*(float64x2_t *)((char *)this + 40));
  float v3 = exp(*((double *)this + 7) * -6.28318531 / *((double *)this + 3));
  *((float *)this + 38) = -v3;
  double result = -0.00781250185;
  *(void *)((char *)this + 156) = 0xBF8000003F800000;
  return result;
}

char *clsp::LPMLSGen::reset(clsp::LPMLSGen *this)
{
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  uint64_t v2 = *((void *)this + 12);
  uint64_t v3 = *((void *)this + 11);
  int v7 = 0;
  std::vector<float>::assign((char **)this + 11, (v2 - v3) >> 2, &v7);
  unint64_t v4 = (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 2;
  int v6 = 0;
  return std::vector<float>::assign((char **)this + 14, v4, &v6);
}

void clsp::LPMLSGen::logCoeffs(uint64_t a1, uint64_t a2)
{
  char v5 = *(clsp::CLSP_Log **)a2;
  unint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    float __src = (float)*(unsigned int *)(a1 + 8);
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float v6 = *(double *)(a1 + 16);
    float __src = v6;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float v7 = *(double *)(a1 + 24);
    float __src = v7;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float __src = (float)*(unint64_t *)(a1 + 32);
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float v8 = *(double *)(a1 + 40);
    float __src = v8;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float v9 = *(double *)(a1 + 48);
    float __src = v9;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
    float v10 = *(double *)(a1 + 56);
    float __src = v10;
    clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  vDSP_Length v11 = *(clsp::CLSP_Log **)a2;
  if (*(void *)a2)
  {
    float __src = *(float *)(a1 + 64);
    clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
    vDSP_Length v11 = *(clsp::CLSP_Log **)a2;
    if (*(void *)a2)
    {
      float __src = *(float *)(a1 + 68);
      clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
      vDSP_Length v11 = *(clsp::CLSP_Log **)a2;
      if (*(void *)a2)
      {
        float __src = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2);
        clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
        vDSP_Length v11 = *(clsp::CLSP_Log **)a2;
        if (*(void *)a2)
        {
          float __src = (float)(unint64_t)((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2);
          clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
          vDSP_Length v11 = *(clsp::CLSP_Log **)a2;
        }
      }
    }
  }
  float v12 = *(std::__shared_weak_count **)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    float __src = (float)*(unint64_t *)(a1 + 144);
    clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
  }
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void *clsp::LPMLSGen::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"preGaiunint64_t n = ", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\npostGaiunint64_t n = ", 12);
  unint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nlr buffer std::string::size_type size = ", 18);
  char v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nng buffer std::string::size_type size = ", 18);
  float v6 = (void *)std::ostream::operator<<();
  char v8 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  return a2;
}

void clsp::LPMLSGen::~LPMLSGen(clsp::LPMLSGen *this)
{
  *(void *)this = &unk_1F14BE4F8;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1F14BE4F8;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[139];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = a1[130];
  a1[130] = 0;
  if (v3) {
    std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v3);
  }
  unint64_t v4 = (void *)a1[129];
  a1[129] = 0;
  if (v4) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v4);
  }
  char v5 = (void *)a1[128];
  a1[128] = 0;
  if (v5) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v5);
  }
  float v6 = (void *)a1[124];
  if (v6)
  {
    a1[125] = v6;
    operator delete(v6);
  }
  float v7 = (void *)a1[121];
  if (v7)
  {
    a1[122] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[118];
  if (v8)
  {
    a1[119] = v8;
    operator delete(v8);
  }
  float v9 = (void *)a1[115];
  if (v9)
  {
    a1[116] = v9;
    operator delete(v9);
  }
  float v10 = (void *)a1[112];
  if (v10)
  {
    a1[113] = v10;
    operator delete(v10);
  }
  vDSP_Length v11 = (void *)a1[109];
  if (v11)
  {
    a1[110] = v11;
    operator delete(v11);
  }
  float v12 = (void *)a1[106];
  if (v12)
  {
    a1[107] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[103];
  if (v13)
  {
    a1[104] = v13;
    operator delete(v13);
  }
  uint64_t v14 = a1[102];
  a1[102] = 0;
  if (v14) {
    MEMORY[0x1C185D370](v14, 0x1000C40A86A77D5);
  }
  uint64_t v15 = a1[101];
  a1[101] = 0;
  if (v15) {
    MEMORY[0x1C185D370](v15, 0x1000C40504FFAC1);
  }
  unint64_t v16 = (void *)a1[100];
  a1[100] = 0;
  if (v16) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[99];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = a1[56];
  a1[56] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  float v19 = (std::__shared_weak_count *)a1[55];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  double v20 = (void *)a1[51];
  if (v20)
  {
    a1[52] = v20;
    operator delete(v20);
  }
  __int16 v21 = (std::__shared_weak_count *)a1[50];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = a1[35];
  a1[35] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t result = a1[34];
  a1[34] = 0;
  if (result)
  {
    int v24 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v24();
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v5>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BAAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void clsp::CLSPKernel_v5PtrFactory(double a1, float a2, float a3, float a4, float a5, double a6, float a7, double a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,float a21,uint64_t a22,uint64_t a23,uint64_t a24,long long a25,double a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,double a33,uint64_t a34,uint64_t a35,double a36,int a37,int a38,double a39,uint64_t a40,uint64_t a41,double a42,double a43,double a44,double a45,double a46,long long a47,uint64_t a48)
{
  uint64_t v54 = (char *)operator new(0x460uLL);
  *(_OWORD *)(v54 + 8) = 0u;
  *(void *)uint64_t v54 = &unk_1F14BAAD8;
  *((_DWORD *)v54 + 10) = a10;
  *((double *)v54 + 6) = a1;
  uint64_t v55 = *a15;
  *((void *)v54 + 7) = a11;
  *((void *)v54 + 8) = v55;
  *((void *)v54 + 9) = a16;
  *((double *)v54 + 10) = a26;
  *((void *)v54 + 11) = a22;
  *((void *)v54 + 12) = a23;
  float v56 = a26;
  *((float *)v54 + 26) = v56;
  __asm { FMOV            V11.2S, #1.0 }
  *(void *)(v54 + 108) = _D11;
  *(_OWORD *)(v54 + 116) = 0u;
  *((double *)v54 + 17) = a21;
  *((void *)v54 + 18) = a29;
  *((void *)v54 + 19) = a24;
  *((_OWORD *)v54 + 10) = a25;
  *((void *)v54 + 22) = a40;
  *((void *)v54 + 23) = a41;
  float v62 = a42;
  float v63 = a43;
  *((float *)v54 + 48) = v62;
  *((float *)v54 + 49) = v63;
  float v64 = a44;
  float v65 = a45;
  *((float *)v54 + 50) = v64;
  *((float *)v54 + 51) = v65;
  float v66 = a46;
  *((float *)v54 + 52) = v66;
  *(_OWORD *)(v54 + 216) = a47;
  *((void *)v54 + 29) = a48;
  *((_DWORD *)v54 + 60) = a12;
  float v67 = a39;
  *((_DWORD *)v54 + 61) = a38;
  *((float *)v54 + 62) = v67;
  *((_DWORD *)v54 + 63) = 1065353216;
  *((_DWORD *)v54 + 64) = a38;
  *((_DWORD *)v54 + 66) = 0;
  *((_DWORD *)v54 + 65) = 0;
  *((_OWORD *)v54 + 17) = 0u;
  *((_WORD *)v54 + 144) = 1;
  *((void *)v54 + 37) = v54 + 80;
  *((_DWORD *)v54 + 96) = 0;
  *((_OWORD *)v54 + 22) = 0u;
  *((_OWORD *)v54 + 23) = 0u;
  *((_OWORD *)v54 + 20) = 0u;
  *((_OWORD *)v54 + 21) = 0u;
  *((_OWORD *)v54 + 19) = 0u;
  clsp::ClosedLoopThermalModule::setPilotGenType((uint64_t)(v54 + 176), a12);
  *(_OWORD *)(v54 + 392) = 0u;
  *(_OWORD *)(v54 + 424) = 0u;
  *(_OWORD *)(v54 + 440) = 0u;
  *(_OWORD *)(v54 + 408) = 0u;
  *((float *)v54 + 114) = a2;
  *((float *)v54 + 115) = a3;
  *((float *)v54 + 116) = a4;
  *((double *)v54 + 59) = a36;
  *((float *)v54 + 120) = a5;
  *((double *)v54 + 61) = a6;
  *((float *)v54 + 124) = a7;
  *((void *)v54 + 63) = v54 + 80;
  *((void *)v54 + 64) = a31;
  *((double *)v54 + 65) = a33;
  *((void *)v54 + 66) = a32;
  *((void *)v54 + 67) = a34;
  *((void *)v54 + 68) = a31;
  *((double *)v54 + 69) = a33 * a36;
  *((_DWORD *)v54 + 140) = 1;
  *(_OWORD *)(v54 + 564) = 0u;
  *(void *)(v54 + 580) = _D11;
  *(_OWORD *)(v54 + 620) = 0u;
  *(_OWORD *)(v54 + 636) = 0u;
  *(_OWORD *)(v54 + 588) = 0u;
  *(_OWORD *)(v54 + 604) = 0u;
  *((void *)v54 + 82) = a17;
  *((double *)v54 + 83) = a8;
  *((void *)v54 + 84) = 0;
  *((_DWORD *)v54 + 172) = 0;
  *((_OWORD *)v54 + 44) = 0u;
  *((_OWORD *)v54 + 45) = 0u;
  *((_OWORD *)v54 + 46) = 0u;
  *((_OWORD *)v54 + 47) = 0u;
  *((_WORD *)v54 + 384) = 1;
  *((void *)v54 + 97) = v54 + 176;
  *((_OWORD *)v54 + 49) = 0u;
  operator new();
}

void sub_1BB62E0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, void **a15, uint64_t a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,uint64_t *a24,void **a25,uint64_t a26,void **a27)
{
  MEMORY[0x1C185D370](v28, 0x10E1C40F98757C4);
  shared_owners = (std::__shared_weak_count *)v27[46].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  uint64_t v30 = v27[43].__shared_owners_;
  v27[43].__shared_owners_ = 0;
  if (v30) {
    std::default_delete<clsp::FirFilter>::operator()[abi:ne180100](v30);
  }
  unsigned __int8 v31 = v27[43].__vftable;
  v27[43].__vftable = 0;
  if (v31) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v31);
  }
  int v32 = *a27;
  *a27 = 0;
  if (v32) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v32);
  }
  size_t v33 = *a15;
  if (*a15)
  {
    v27[41].__shared_weak_owners_ = (uint64_t)v33;
    operator delete(v33);
  }
  uint64_t v34 = *a17;
  if (*a17)
  {
    v27[40].__shared_weak_owners_ = (uint64_t)v34;
    operator delete(v34);
  }
  unint64_t v35 = *a18;
  if (*a18)
  {
    v27[39].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }
  unint64_t v36 = *a19;
  if (*a19)
  {
    v27[38].__shared_weak_owners_ = (uint64_t)v36;
    operator delete(v36);
  }
  float v37 = *a20;
  if (*a20)
  {
    v27[37].__shared_weak_owners_ = (uint64_t)v37;
    operator delete(v37);
  }
  long long v38 = *a21;
  if (*a21)
  {
    v27[36].__shared_weak_owners_ = (uint64_t)v38;
    operator delete(v38);
  }
  float v39 = *a22;
  if (*a22)
  {
    v27[35].__shared_weak_owners_ = (uint64_t)v39;
    operator delete(v39);
  }
  double v40 = *a23;
  if (*a23)
  {
    v27[34].__shared_weak_owners_ = (uint64_t)v40;
    operator delete(v40);
  }
  double v41 = v27[34].__vftable;
  v27[34].__vftable = 0;
  if (v41) {
    MEMORY[0x1C185D370](v41, 0x1000C40A86A77D5);
  }
  uint64_t shared_weak_owners = v27[33].__shared_weak_owners_;
  v27[33].__shared_weak_owners_ = 0;
  if (shared_weak_owners) {
    MEMORY[0x1C185D370](shared_weak_owners, 0x1000C40504FFAC1);
  }
  uint64_t v43 = (void *)v27[33].__shared_owners_;
  v27[33].__shared_owners_ = 0;
  if (v43) {
    std::default_delete<clsp::DelayLine<float,double>>::operator()[abi:ne180100](v43);
  }
  float v44 = (std::__shared_weak_count *)v27[33].__vftable;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  uint64_t v45 = v27[18].__shared_weak_owners_;
  v27[18].__shared_weak_owners_ = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  float v46 = (std::__shared_weak_count *)v27[18].__shared_owners_;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  float v47 = *a25;
  if (*a25)
  {
    v27[17].__shared_owners_ = (uint64_t)v47;
    operator delete(v47);
  }
  float v48 = (std::__shared_weak_count *)v27[16].__shared_weak_owners_;
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  uint64_t v49 = v27[11].__shared_weak_owners_;
  v27[11].__shared_weak_owners_ = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = *a24;
  *a24 = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v51);
  _Unwind_Resume(a1);
}

void clsp::CLSPKernel_v5::ProcessOpenLoop(const float **this, const float *a2, float *a3, unsigned int a4)
{
  shouldTraceRender();
  if (*((unsigned char *)this + 1072))
  {
    clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)this);
    *((unsigned char *)this + 1072) = 0;
  }
  vDSP_Length v8 = a4;
  if (!this[53])
  {
    float __B = 0.1;
    vDSP_vsmul(a2, 1, &__B, a3, 1, a4);
    return;
  }
  float v9 = (float *)this[100];
  vDSP_vclip(a2, 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v9, 1, a4);
  float v10 = this[97];
  shouldTraceRender();
  unint64_t v11 = *((void *)v10 + 1);
  if (v11 <= a4)
  {
    if (v11)
    {
      memmove(*((void **)v10 + 5), *((const void **)v10 + 2), 4 * v11);
      unint64_t v11 = *((void *)v10 + 1);
    }
    float v12 = &v9[a4];
    uint64_t v13 = &v12[-v11];
    if (v13 != v9)
    {
      memmove((void *)(*((void *)v10 + 5) + 4 * v11), v9, (char *)v13 - (char *)v9);
      unint64_t v11 = *((void *)v10 + 1);
    }
    if (v11) {
      memmove(*((void **)v10 + 2), &v12[-v11], 4 * v11);
    }
    if (!a4) {
      goto LABEL_29;
    }
  }
  else
  {
    if (a4)
    {
      memmove(*((void **)v10 + 5), *((const void **)v10 + 2), 4 * a4);
      unint64_t v11 = *((void *)v10 + 1);
    }
    if (v11 != a4) {
      memmove(*((void **)v10 + 2), (const void *)(*((void *)v10 + 2) + 4 * a4), 4 * v11 - 4 * a4);
    }
    if (!a4) {
      goto LABEL_29;
    }
    memmove((void *)(*((void *)v10 + 2) + 4 * *((void *)v10 + 1) - 4 * a4), v9, 4 * a4);
  }
  unint64_t v14 = 0;
  do
  {
    uint64_t v15 = this[97];
    uint64_t v16 = *((void *)v15 + 5);
    if (v14 >= (*((void *)v15 + 6) - v16) >> 2) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    float v17 = v9[v14];
    float v18 = (*(float (**)(const float *, float, float))(*(void *)this[53] + 184))(this[53], v17, *(float *)(v16 + 4 * v14));
    float v19 = (clsp::CLSP_Log *)*((void *)this[135] + 2);
    if (v19)
    {
      float __src = v17;
      clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
    }
    this[103][v14] = v18;
    float v20 = *((float *)this + 173)
        + (float)(*((float *)this + 172) * (float)(*((float *)this + 166) - *((float *)this + 173)));
    *((float *)this + 173) = v20;
    float v21 = *((float *)this + 177) + (float)(*((float *)this + 176) * (float)(v20 - *((float *)this + 177)));
    *((float *)this + 177) = v21;
    float v22 = *((float *)this + 181)
        + (float)(*((float *)this + 180) * (float)(*((float *)this + 168) - *((float *)this + 181)));
    *((float *)this + 181) = v22;
    float v23 = *((float *)this + 185) + (float)(*((float *)this + 184) * (float)(v22 - *((float *)this + 185)));
    *((float *)this + 185) = v23;
    if (*((unsigned char *)this + 744))
    {
      if (v23 >= v21) {
        float v24 = v21;
      }
      else {
        float v24 = v23;
      }
      float v18 = v18 * v24;
      float v17 = v17 * (float)(v21 * v23);
    }
    --*((_DWORD *)this + 137);
    (*(void (**)(const float *, float, float))(*(void *)this[53] + 192))(this[53], v17, v18);
    a3[v14++] = v18;
  }
  while (v8 != v14);
LABEL_29:
  clsp::ThermalController::postProcess((clsp::ThermalController *)(this + 54), a3, this[103], v8);
  clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)this);
  __int16 v25 = (float *)(*(uint64_t (**)(const float *))(*(void *)this[53] + 128))(this[53]);
  log10f(v25[21]* (float)((float)((float)((float)(1.0 - v25[12]) + v25[13]) * (float)((float)(v25[14] + v25[15]) + v25[16]))/ (float)((float)(v25[12] + 1.0) + v25[13])));
}

void clsp::CLSPKernel_v5::CalcCoeffs(uint64_t **a1, char a2, double a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  float v6 = *a1;
  char v5 = a1[1];
  if (*a1 != v5)
  {
    float v7 = *a1;
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      *(unsigned char *)(v8 + 1073) = a2;
    }
    while (v7 != v5);
    unsigned int v9 = vcvtmd_u64_f64(a3 / 200.0 + 0.5);
    double v10 = a3 * 10.0;
    double v11 = exp(-4.60517019 / (a3 * 10.0));
    double v12 = exp(-4.60517019 / (a3 * 0.00499999989));
    double v13 = 0.5;
    double v14 = exp(-4.60517019 / (a3 * 0.5));
    float v15 = a3;
    float v131 = v15;
    double v16 = 1.0 - v11;
    if (v10 < 0.00001) {
      double v16 = 1.0;
    }
    float v17 = v16;
    double v18 = 1.0 - v12;
    if (a3 * 0.00499999989 < 0.00001) {
      double v18 = 1.0;
    }
    float v19 = v18;
    float v132 = v19;
    float v133 = v17;
    double v20 = 1.0 - v14;
    if (a3 * 0.5 < 0.00001) {
      double v20 = 1.0;
    }
    float v21 = v20;
    __asm { FMOV            V0.2D, #1.0 }
    float64_t v134 = *((double *)&_Q0 + 1);
    do
    {
      uint64_t v26 = *v6;
      uint64_t v27 = spp3Subsystem();
      if (v27)
      {
        if (*(unsigned char *)(v27 + 8))
        {
          uint64_t v28 = *(NSObject **)v27;
          if (*(void *)v27)
          {
            if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)uint64_t v137 = "CLSPKernel_v5.cpp";
              *(_WORD *)&v137[8] = 1024;
              *(_DWORD *)&v137[10] = 863;
              _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::CalcCoeffs", buf, 0x12u);
            }
          }
        }
      }
      *(double *)(v26 + 24) = a3;
      double v29 = *(double *)(v26 + 112);
      int v30 = 1;
      do
        unsigned int v31 = 1 << v30++;
      while (v31 < v9);
      v32.f64[0] = v29 + *(double *)(v26 + 72) + *(double *)(v26 + 64);
      v33.f64[1] = v134;
      v33.f64[0] = v29 * *(double *)(v26 + 56);
      double v135 = *(double *)(v26 + 112);
      v32.f64[1] = v135;
      *(float32x2_t *)(v26 + 80) = vcvt_f32_f64(vdivq_f64(v33, v32));
      *(float *)v32.f64 = 1.0 / (double)v31;
      *(_DWORD *)(v26 + 88) = LODWORD(v32.f64[0]);
      int v34 = *(_DWORD *)(v26 + 432);
      if (fabsf(*(float *)(v26 + 176)) > 0.3)
      {
        *(_DWORD *)(v26 + 176) = 1050253722;
        unint64_t v35 = (NSObject **)spp3SubsystemAsync();
        if (v35)
        {
          unint64_t v36 = *v35;
          if (!*v35) {
            goto LABEL_25;
          }
        }
        else
        {
          unint64_t v36 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)uint64_t v137 = "CLSPBlocks.cpp";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 201;
          *(_WORD *)&v137[14] = 2048;
          *(void *)&v137[16] = 0x3FD3333333333333;
          _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PilotAmplLo limited to %f", buf, 0x1Cu);
        }
      }
LABEL_25:
      if (fabsf(*(float *)(v26 + 172)) <= 0.3) {
        goto LABEL_32;
      }
      *(_DWORD *)(v26 + 172) = 1050253722;
      float v37 = (NSObject **)spp3SubsystemAsync();
      if (v37)
      {
        long long v38 = *v37;
        if (!*v37) {
          goto LABEL_32;
        }
      }
      else
      {
        long long v38 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)uint64_t v137 = "CLSPBlocks.cpp";
        *(_WORD *)&v137[8] = 1024;
        *(_DWORD *)&v137[10] = 206;
        *(_WORD *)&v137[14] = 2048;
        *(void *)&v137[16] = 0x3FD3333333333333;
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PilotAmplHi limited to %f", buf, 0x1Cu);
      }
LABEL_32:
      float v39 = *(float *)(v26 + 180);
      if (*(float *)(v26 + 184) > v39)
      {
        *(float *)(v26 + 184) = v39;
        double v40 = (NSObject **)spp3SubsystemAsync();
        if (v40)
        {
          double v41 = *v40;
          if (!*v40) {
            goto LABEL_39;
          }
        }
        else
        {
          double v41 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          double v42 = *(float *)(v26 + 184);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)uint64_t v137 = "CLSPBlocks.cpp";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 211;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v42;
          _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parameter PilotLowerThres greater than PilotUpperThres. Set PilotLowerThres = %f", buf, 0x1Cu);
        }
      }
LABEL_39:
      uint64_t v43 = *(void *)(v26 + 248);
      if (v43 && *(void *)(v26 + 256))
      {
        (*(void (**)(uint64_t, double))(*(void *)v43 + 40))(v43, a3);
        int v45 = *(_DWORD *)(v26 + 216);
        if (v45 == 2)
        {
          (*(void (**)(void, double))(**(void **)(v26 + 256) + 40))(*(void *)(v26 + 256), a3);
        }
        else if (v45 == 1)
        {
          uint64_t v46 = v44;
          *(_DWORD *)AudioTimeStamp buf = (*(double (**)(void))(**(void **)(v26 + 248) + 72))(*(void *)(v26 + 248));
          *(void *)&v137[4] = v46;
          memset(&v137[12], 0, 32);
          *(void *)uint64_t v138 = 0;
          (*(void (**)(void, uint8_t *, double))(**(void **)(v26 + 256) + 48))(*(void *)(v26 + 256), buf, a3);
        }
        else
        {
          float v47 = (NSObject **)spp3SubsystemAsync();
          if (v47)
          {
            float v48 = *v47;
            if (!*v47) {
              goto LABEL_51;
            }
          }
          else
          {
            float v48 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)uint64_t v137 = "CLSPBlocks.cpp";
            *(_WORD *)&v137[8] = 1024;
            *(_DWORD *)&v137[10] = 234;
            _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Acting on invalid ThermalMeasurementType", buf, 0x12u);
          }
        }
      }
LABEL_51:
      *(float *)(v26 + 228) = 1.0 - *(float *)(v26 + 172);
      int v49 = 1;
      do
        unsigned int v50 = 1 << v49++;
      while (v50 < v9);
      double v51 = *(double *)(v26 + 160);
      *(double *)(v26 + 280) = v51;
      double v52 = v51 * (a3 / (double)v50);
      double v53 = 0.0;
      if (v52 >= 0.00001) {
        double v53 = exp(-4.60517019 / v52);
      }
      float v54 = 1.0 - v53;
      *(float *)(v26 + 288) = v54;
      *(_DWORD *)(v26 + 292) = v34;
      int v55 = 1;
      do
        unsigned int v56 = 1 << v55++;
      while (v56 < v9);
      double v57 = *(double *)(v26 + 192);
      *(double *)(v26 + 296) = v57;
      double v58 = v57 * (a3 / (double)v56);
      double v59 = 0.0;
      double v60 = 0.0;
      if (v58 >= 0.00001) {
        double v60 = exp(-4.60517019 / v58);
      }
      float v61 = 1.0 - v60;
      *(float *)(v26 + 304) = v61;
      double v62 = *(double *)(v26 + 200) * v13;
      *(double *)(v26 + 312) = v62;
      float v63 = 1.0;
      if (v62 * a3 >= 0.00001)
      {
        double v59 = exp(-4.60517019 / (v62 * a3));
        float v63 = 1.0 - v59;
      }
      *(float *)(v26 + 320) = v63;
      *(double *)(v26 + 328) = v62;
      float v64 = 1.0 - v59;
      *(float *)(v26 + 336) = v64;
      *(void *)(v26 + 344) = 0x4024000000000000;
      *(float *)(v26 + 352) = v133;
      (*(void (**)(void, double, double))(**(void **)(v26 + 424) + 168))(*(void *)(v26 + 424), a3, v135 * *(double *)(v26 + 56) / (v135 + *(double *)(v26 + 72) + *(double *)(v26 + 64)));
      int v65 = 1;
      do
        unsigned int v66 = 1 << v65++;
      while (v66 < v9);
      *(_DWORD *)(v26 + 536) = v66;
      int v67 = 1;
      do
        unsigned int v68 = 1 << v67++;
      while (v68 < v9);
      double v69 = a3 / (double)v68;
      double v70 = *(double *)(v26 + 496);
      double v71 = 1.0 / v69 / v70;
      float v72 = *(double *)(v26 + 488) * 0.5 * v71;
      *(float *)(v26 + 572) = v72;
      *(float *)(v26 + 576) = v72;
      float v73 = 1.0 - v71;
      *(float *)(v26 + 568) = -v73;
      double v74 = 1.0 / v69 / *(double *)(v26 + 512);
      double v13 = 0.5;
      *(float *)&double v71 = v74 * (*(double *)(v26 + 504) * 0.5);
      *(_DWORD *)(v26 + 592) = LODWORD(v71);
      *(_DWORD *)(v26 + 596) = LODWORD(v71);
      *(float *)&double v74 = 1.0 - v74;
      *(float *)(v26 + 588) = -*(float *)&v74;
      *(double *)(v26 + 528) = v70 * *(double *)(v26 + 448);
      shouldTraceRender();
      double v75 = 1.0 / v69 / *(double *)(v26 + 528);
      float v76 = v75 * (*(double *)(v26 + 520) * 0.5);
      *(float *)(v26 + 612) = v76;
      *(float *)(v26 + 616) = v76;
      *(float *)&double v75 = 1.0 - v75;
      *(float *)(v26 + 608) = -*(float *)&v75;
      clsp::AttackRelease<float,double>::calcCoeffs(v26 + 632, v69);
      *(void *)(v26 + 680) = 0x3F747AE140000000;
      *(float *)(v26 + 688) = v132;
      *(void *)(v26 + 696) = 0x3F747AE140000000;
      *(float *)(v26 + 704) = v132;
      *(void *)(v26 + 712) = 0x3FE0000000000000;
      *(float *)(v26 + 720) = v21;
      *(void *)(v26 + 728) = 0x3FE0000000000000;
      *(float *)(v26 + 736) = v21;
      LODWORD(v77) = *(_DWORD *)(v26 + 536);
      *(float *)&unint64_t v77 = a3 / (double)v77;
      *(_DWORD *)(v26 + 540) = vcvtps_u32_f32(*(float *)&v77);
      if (*(float *)(v26 + 472) > 0.0)
      {
        double v78 = (NSObject **)spp3SubsystemAsync();
        if (v78)
        {
          uint64_t v79 = *v78;
          if (!*v78)
          {
LABEL_72:
            *(_DWORD *)(v26 + 472) = 0;
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v79 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          double v80 = *(float *)(v26 + 472);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)uint64_t v137 = "CLSPBlocks.h";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 1278;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v80;
          _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Safe limit offset = %f, should be negative. Setting to 0.", buf, 0x1Cu);
        }
        goto LABEL_72;
      }
LABEL_73:
      if (*(float *)(v26 + 456) <= *(float *)(v26 + 432)) {
        goto LABEL_81;
      }
      double v81 = (NSObject **)spp3SubsystemAsync();
      if (!v81)
      {
        double v82 = MEMORY[0x1E4F14500];
LABEL_78:
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          double v83 = *(float *)(v26 + 456);
          double v84 = *(float *)(v26 + 432);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)uint64_t v137 = "CLSPBlocks.h";
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = 1283;
          *(_WORD *)&v137[14] = 2048;
          *(double *)&v137[16] = v83;
          *(_WORD *)&v137[24] = 2048;
          *(double *)&v137[26] = v84;
          _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Safe limit %f > thermal limit %f. Setting Safe limit = thermal limit.", buf, 0x26u);
        }
        goto LABEL_80;
      }
      double v82 = *v81;
      if (*v81) {
        goto LABEL_78;
      }
LABEL_80:
      *(_DWORD *)(v26 + 456) = *(_DWORD *)(v26 + 432);
LABEL_81:
      HIDWORD(v85) = 1078853632;
      LODWORD(v85) = *(_DWORD *)(v26 + 536);
      float v86 = *(double *)(v26 + 464) * 60.0 * a3 / (double)v85;
      *(_DWORD *)(v26 + 544) = vcvtps_u32_f32(v86);
      clsp::DelayLine<float,double>::calcCoeffs(*(double **)(v26 + 776), a3);
      uint64_t v87 = *(void *)(v26 + 784);
      int v88 = 1;
      do
        unsigned int v89 = 1 << v88++;
      while (v89 < v9);
      float v90 = (float)(*(float *)v87 * v131) / (float)v89;
      *(_DWORD *)(v87 + 4) = vcvtas_u32_f32(v90);
      *(float *)(v87 + 8) = 1.0 / (float)roundf(v90);
      *(_DWORD *)(*(void *)(v26 + 792) + 4) = vcvtas_u32_f32(**(float **)(v26 + 792) * v131);
      uint64_t v91 = *(double **)(v26 + 1000);
      if (v91) {
        clsp::DelayLine<float,double>::calcCoeffs(v91, a3);
      }
      double v92 = *(double **)(v26 + 1008);
      if (v92) {
        clsp::DelayLine<float,double>::calcCoeffs(v92, a3);
      }
      v6 += 2;
    }
    while (v6 != v5);
  }
  if (a2)
  {
    double v93 = *a1;
    long double v94 = a1[1];
    uint64_t v96 = (uint64_t)(*a1 + 2);
    uint64_t v95 = **a1;
    if (*a1 == v94 || v96 == (void)v94)
    {
      double v98 = sqrt(*(double *)(v95 + 144) / *(double *)(v95 + 128));
    }
    else
    {
      uint64_t v99 = (uint64_t)(*a1 + 2);
      uint64_t v100 = *a1;
      double v101 = (uint64_t *)v99;
      do
      {
        uint64_t v103 = *v101;
        v101 += 2;
        uint64_t v102 = v103;
        if (sqrt(*(double *)(v95 + 144) / *(double *)(v95 + 128)) < sqrt(*(double *)(v103 + 144) / *(double *)(v103 + 128)))
        {
          uint64_t v95 = v102;
          uint64_t v100 = (uint64_t *)v99;
        }
        uint64_t v99 = (uint64_t)v101;
      }
      while (v101 != v94);
      double v104 = *(double *)(*v100 + 144) / *(double *)(*v100 + 128);
      double v105 = *a1 + 2;
      do
      {
        double v106 = clsp::CLSPKernel_v5::calc_x_ul_norm(*v93);
        uint64_t v107 = *v105;
        v105 += 2;
        if (v106 < clsp::CLSPKernel_v5::calc_x_ul_norm(v107)) {
          double v93 = (uint64_t *)v96;
        }
        uint64_t v96 = (uint64_t)v105;
      }
      while (v105 != v94);
      uint64_t v95 = *v93;
      double v98 = sqrt(v104);
    }
    double v108 = clsp::CLSPKernel_v5::calc_x_ul_norm(v95);
    unint64_t v109 = *a1;
    uint64_t v110 = a1[1];
    if (*a1 != v110)
    {
      uint64_t v111 = v109 + 2;
      if (v109 + 2 != v110)
      {
        unint64_t v112 = v109 + 2;
        do
        {
          uint64_t v113 = *v112;
          v112 += 2;
          double v114 = (*(double (**)(void))(**(void **)(v113 + 424) + 72))(*(void *)(v113 + 424));
          if (v114 < (*(double (**)(void))(**(void **)(*v109 + 424) + 72))(*(void *)(*v109 + 424))) {
            unint64_t v109 = v111;
          }
          uint64_t v111 = v112;
        }
        while (v112 != v110);
      }
    }
    double v115 = (*(double (**)(void))(**(void **)(*v109 + 424) + 72))(*(void *)(*v109 + 424));
    double v116 = *a1;
    double v117 = a1[1];
    if (*a1 != v117)
    {
      long double v118 = v116 + 2;
      if (v116 + 2 != v117)
      {
        int v119 = v116 + 2;
        do
        {
          uint64_t v120 = *v119;
          v119 += 2;
          double v121 = (*(double (**)(void))(**(void **)(v120 + 424) + 40))(*(void *)(v120 + 424));
          if (v121 < (*(double (**)(void))(**(void **)(*v116 + 424) + 40))(*(void *)(*v116 + 424))) {
            double v116 = v118;
          }
          long double v118 = v119;
        }
        while (v119 != v117);
      }
    }
    double v122 = (*(double (**)(void))(**(void **)(*v116 + 424) + 40))(*(void *)(*v116 + 424));
    uint64_t v123 = spp3Subsystem();
    if (v123)
    {
      if (*(unsigned char *)(v123 + 8))
      {
        double v124 = *(NSObject **)v123;
        if (*(void *)v123)
        {
          if (os_log_type_enabled(*(os_log_t *)v123, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136316418;
            *(void *)uint64_t v137 = "CLSPKernel_v5.cpp";
            *(_WORD *)&v137[8] = 1024;
            *(_DWORD *)&v137[10] = 1701;
            *(_WORD *)&v137[14] = 2048;
            *(double *)&v137[16] = v98;
            *(_WORD *)&v137[24] = 2048;
            *(double *)&v137[26] = v108;
            *(_WORD *)&v137[34] = 2048;
            *(double *)&v137[36] = v115;
            *(_WORD *)uint64_t v138 = 2048;
            *(double *)&v138[2] = v122;
            _os_log_impl(&dword_1BB0CE000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using synchronized worst case displacement controller values w_0=%f, x_ul_norm=%f, Q_d=%f, G_bw=%f", buf, 0x3Au);
          }
        }
      }
    }
    uint64_t v125 = *a1;
    double v126 = a1[1];
    if (*a1 != v126)
    {
      do
      {
        uint64_t v127 = *v125;
        uint64_t v128 = spp3Subsystem();
        if (v128)
        {
          if (*(unsigned char *)(v128 + 8))
          {
            uint64_t v129 = *(NSObject **)v128;
            if (*(void *)v128)
            {
              if (os_log_type_enabled(*(os_log_t *)v128, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)uint64_t v137 = "CLSPKernel_v5.cpp";
                *(_WORD *)&v137[8] = 1024;
                *(_DWORD *)&v137[10] = 910;
                _os_log_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::CalcCoeffsSyncDisp", buf, 0x12u);
              }
            }
          }
        }
        (*(void (**)(void, double, double, double, double, double, double))(**(void **)(v127 + 424)
                                                                                       + 176))(*(void *)(v127 + 424), a3, v98, v115, v122, v108, *(double *)(v127 + 112)* *(double *)(v127 + 56)/ (*(double *)(v127 + 112) + *(double *)(v127 + 72) + *(double *)(v127 + 64)));
        v125 += 2;
      }
      while (v125 != v126);
    }
  }
}

double clsp::CLSPKernel_v5::calc_x_ul_norm(uint64_t a1)
{
  double v1 = *(double *)(a1 + 112);
  double v2 = *(double *)(a1 + 120);
  double v3 = v1 * *(double *)(a1 + 56) / (v1 + *(double *)(a1 + 72) + *(double *)(a1 + 64));
  double v4 = *(double *)(a1 + 144);
  double v5 = sqrt(v4 * *(double *)(a1 + 128)) / (v2 * v2 / v1 + *(double *)(a1 + 136));
  (*(void (**)(void))(**(void **)(a1 + 424) + 56))(*(void *)(a1 + 424));
  double v7 = 1.0;
  if (v5 >= 1.0) {
    double v7 = v5;
  }
  return v2 * (v3 * 1000.0) * v7 / (v1 * v4) / v6;
}

void clsp::CLSPKernel_v5::PrintCoeffs(clsp::CLSPKernel_v5 *this)
{
  v283[19] = *MEMORY[0x1E4F143B8];
  std::to_string(&v267, *((_DWORD *)this + 4));
  double v2 = std::string::insert(&v267, 0, "\n[Channel ", 0xAuLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v268.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  double v4 = std::string::append(&v268, "]\n", 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v269.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v279, *((double *)this + 3));
  while ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v278.__r_.__value_.__r.__words[2] + HIBYTE(v279.__r_.__value_.__r.__words[2]) + 7) != 48) {
      goto LABEL_8;
    }
    uint64_t v6 = HIBYTE(v279.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v279.__r_.__value_.__s + 23) = (*((unsigned char *)&v279.__r_.__value_.__s + 23) - 1) & 0x7F;
    double v7 = &v279;
LABEL_7:
    v7->__r_.__value_.__s.__data_[v6] = 0;
  }
  double v7 = (std::string *)v279.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v279.__r_.__value_.__r.__words[0] + v279.__r_.__value_.__l.__size_ - 1) == 48)
  {
    uint64_t v6 = --v279.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  *(std::string *)double v280 = v279;
  memset(&v279, 0, sizeof(v279));
  while ((v280[23] & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v279.__r_.__value_.__r.__words[2] + v280[23] + 7) != 46) {
      goto LABEL_15;
    }
    uint64_t v8 = v280[23] - 1;
    v280[23] = (v280[23] - 1) & 0x7F;
    unsigned int v9 = v280;
LABEL_14:
    v9[v8] = 0;
  }
  unsigned int v9 = *(unsigned char **)v280;
  if (*(unsigned char *)(*(void *)v280 + *(void *)&v280[8] - 1) == 46)
  {
    uint64_t v8 = --*(void *)&v280[8];
    goto LABEL_14;
  }
LABEL_15:
  std::string v247 = *(std::string *)v280;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  double v10 = std::string::insert(&v247, 0, "\nSample rate: ", 0xEuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*((unsigned char *)this + 1073)) {
    double v12 = "\nVP mode: on\n";
  }
  else {
    double v12 = "\nVP mode: off\n";
  }
  if (*((unsigned char *)this + 1073)) {
    std::string::size_type v13 = 13;
  }
  else {
    std::string::size_type v13 = 14;
  }
  double v14 = std::string::append(&v248, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v243, "ElecModel");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"ag = ", 5);
  double v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", Rshunt = ", 11);
  float v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", Rampout = ", 12);
  double v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"mc_ageff = ", 11);
  float v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", invRt = ", 10);
  double v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", invThermalPeriod = ", 21);
  std::ostream::operator<<();
  std::operator+<char>();
  float v21 = std::string::append(&v276, "]\n", 2uLL);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  float v23 = std::string::insert(&v279, 0, "  ", 2uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  int64_t v275 = v23->__r_.__value_.__r.__words[2];
  long long __p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  if (v275 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v275 >= 0) {
    std::string::size_type v26 = HIBYTE(v275);
  }
  else {
    std::string::size_type v26 = *((void *)&__p + 1);
  }
  uint64_t v27 = std::string::append(&v277, p_p, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  double v29 = std::string::append(&v278, "\n", 1uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  int64_t v246 = v29->__r_.__value_.__r.__words[2];
  long long v245 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v275) < 0) {
    operator delete((void *)__p);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v276.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = *MEMORY[0x1E4FBA418];
  *(void *)double v280 = *MEMORY[0x1E4FBA418];
  uint64_t v32 = *(void *)v280;
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&v280[*(void *)(*(void *)v280 - 24)] = v33;
  *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
  if (v282 < 0) {
    operator delete(v281);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v283);
  if (v246 >= 0) {
    int v34 = (const std::string::value_type *)&v245;
  }
  else {
    int v34 = (const std::string::value_type *)v245;
  }
  if (v246 >= 0) {
    std::string::size_type v35 = HIBYTE(v246);
  }
  else {
    std::string::size_type v35 = *((void *)&v245 + 1);
  }
  unint64_t v36 = std::string::append(&v249, v34, v35);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "DispModel");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"Reb = ", 6);
  long long v38 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", phunsigned int i = ", 8);
  float v39 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", mt = ", 7);
  double v40 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ct = ", 7);
  double v41 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", kt = ", 7);
  std::ostream::operator<<();
  std::operator+<char>();
  double v42 = std::string::append(&v276, "]\n", 2uLL);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  uint64_t v44 = std::string::insert(&v279, 0, "  ", 2uLL);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  int64_t v275 = v44->__r_.__value_.__r.__words[2];
  long long __p = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  if (v275 >= 0) {
    uint64_t v46 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v46 = (const std::string::value_type *)__p;
  }
  if (v275 >= 0) {
    std::string::size_type v47 = HIBYTE(v275);
  }
  else {
    std::string::size_type v47 = *((void *)&__p + 1);
  }
  float v48 = std::string::append(&v277, v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  unsigned int v50 = std::string::append(&v278, "\n", 1uLL);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  int64_t v242 = v50->__r_.__value_.__r.__words[2];
  long long v241 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v275) < 0) {
    operator delete((void *)__p);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v276.__r_.__value_.__l.__data_);
  }
  *(void *)double v280 = v32;
  *(void *)&v280[*(void *)(v32 - 24)] = v33;
  *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
  if (v282 < 0) {
    operator delete(v281);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v283);
  if (v242 >= 0) {
    double v52 = (const std::string::value_type *)&v241;
  }
  else {
    double v52 = (const std::string::value_type *)v241;
  }
  if (v242 >= 0) {
    std::string::size_type v53 = HIBYTE(v242);
  }
  else {
    std::string::size_type v53 = *((void *)&v241 + 1);
  }
  float v54 = std::string::append(&v250, v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v235, "CLTModule");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"a_t_inv = ", 10);
  unsigned int v56 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", TlimErrDecayTime = ", 21);
  double v57 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", TlimAdjCap = ", 15);
  double v58 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)", pilotAmplHunsigned int i = ", 16);
  double v59 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", pilotAmplLo = ", 16);
  double v60 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\npilotAmplUpperThres = ", 23);
  float v61 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", pilotAmplLowerThres = ", 24);
  double v62 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", pilotDecayTime = ", 19);
  float v63 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", pilotDecayTimeStage2 = ", 25);
  float v64 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", pilotEnableThres = ", 21);
  int v65 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", RebRef = ", 11);
  unsigned int v66 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\nRebRefTemp = ", 14);
  int v67 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", mc_gaiunint64_t n = ", 12);
  unsigned int v68 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\n", 1);
  if (*((void *)this + 31))
  {
    double v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nPilotTempSensor:\n", 18);
    double v70 = (void *)(*(uint64_t (**)(void, void *))(**((void **)this + 31) + 16))(*((void *)this + 31), v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
  }
  if (*((void *)this + 32))
  {
    double v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nPilotGen:\n", 11);
    (*(void (**)(void, void *))(**((void **)this + 32) + 16))(*((void *)this + 32), v71);
  }
  float v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"\nTLimErrSmoother:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 280, v72);
  float v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"\npilotToneGain:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 296, v73);
  double v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\nptInterp1:\n", 12);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 312, v74);
  double v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\nptInterp2:\n", 12);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 328, v75);
  std::operator+<char>();
  float v76 = std::string::append(&v276, "]\n", 2uLL);
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  double v78 = std::string::insert(&v279, 0, "  ", 2uLL);
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  int64_t v275 = v78->__r_.__value_.__r.__words[2];
  long long __p = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  if (v275 >= 0) {
    double v80 = (const std::string::value_type *)&__p;
  }
  else {
    double v80 = (const std::string::value_type *)__p;
  }
  if (v275 >= 0) {
    std::string::size_type v81 = HIBYTE(v275);
  }
  else {
    std::string::size_type v81 = *((void *)&__p + 1);
  }
  double v82 = std::string::append(&v277, v80, v81);
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  double v84 = std::string::append(&v278, "\n", 1uLL);
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  int64_t v238 = v84->__r_.__value_.__r.__words[2];
  long long v237 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v275) < 0) {
    operator delete((void *)__p);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v276.__r_.__value_.__l.__data_);
  }
  *(void *)double v280 = v32;
  *(void *)&v280[*(void *)(v32 - 24)] = v33;
  *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
  if (v282 < 0) {
    operator delete(v281);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v283);
  if (v238 >= 0) {
    float v86 = (const std::string::value_type *)&v237;
  }
  else {
    float v86 = (const std::string::value_type *)v237;
  }
  if (v238 >= 0) {
    std::string::size_type v87 = HIBYTE(v238);
  }
  else {
    std::string::size_type v87 = *((void *)&v237 + 1);
  }
  int v88 = std::string::append(&v251, v86, v87);
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v231, "DispCtlr");
  uint64_t v90 = *((void *)this + 53);
  if (v90)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v90 + 16))(v90, v280);
    std::operator+<char>();
    uint64_t v91 = std::string::append(&v276, "]\n", 2uLL);
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    double v93 = std::string::insert(&v279, 0, "  ", 2uLL);
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    int64_t v275 = v93->__r_.__value_.__r.__words[2];
    long long __p = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v279.__r_.__value_.__l.__data_);
    }
    if (v275 >= 0) {
      uint64_t v95 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v95 = (const std::string::value_type *)__p;
    }
    if (v275 >= 0) {
      std::string::size_type v96 = HIBYTE(v275);
    }
    else {
      std::string::size_type v96 = *((void *)&__p + 1);
    }
    long double v97 = std::string::append(&v277, v95, v96);
    long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v98;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    uint64_t v99 = std::string::append(&v278, "\n", 1uLL);
    long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    int64_t v234 = v99->__r_.__value_.__r.__words[2];
    long long v233 = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v278.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v275) < 0) {
      operator delete((void *)__p);
    }
    if (v273 < 0) {
      operator delete(v272[0]);
    }
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v277.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
    *(void *)double v280 = v32;
    *(void *)&v280[*(void *)(v32 - 24)] = v33;
    *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
    if (v282 < 0) {
      operator delete(v281);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C185D210](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v233, "");
  }
  if (v234 >= 0) {
    double v101 = (const std::string::value_type *)&v233;
  }
  else {
    double v101 = (const std::string::value_type *)v233;
  }
  if (v234 >= 0) {
    std::string::size_type v102 = HIBYTE(v234);
  }
  else {
    std::string::size_type v102 = *((void *)&v233 + 1);
  }
  uint64_t v103 = std::string::append(&v252, v101, v102);
  long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v227, "ThermCtlr");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"thermalLimit = ", 15);
  double v105 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"\nHardLimitHeadroounint64_t m = ", 21);
  double v106 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"\nAmbientTemp = ", 15);
  uint64_t v107 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"\nFFSpeedupFactor = ", 19);
  double v108 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\nsafeLimit = ", 13);
  unint64_t v109 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\nsafeLimitTimeMiunint64_t n = ", 20);
  uint64_t v110 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"\nsafeLimitOffset = ", 19);
  uint64_t v111 = (void *)std::ostream::operator<<();
  unint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"\n\nm_vc:\n", 8);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 488, v112);
  uint64_t v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"\nm_vg:\n", 7);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 504, v113);
  double v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"\nm_vcff:\n", 9);
  clsp::ThermalModelOrder1::dump((uint64_t)this + 520, v114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"\nthermalPeriod = ", 17);
  double v115 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"\nthermalGainTimerInitVal = ", 27);
  double v116 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"\nsafeLimitTimerInitVal = ", 25);
  double v117 = (void *)std::ostream::operator<<();
  long double v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n\nvcFilt:\n", 10);
  clsp::IIROrder1<float>::dump((uint64_t)this + 568, v118);
  int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"\nmgFilt:\n", 9);
  clsp::IIROrder1<float>::dump((uint64_t)this + 588, v119);
  uint64_t v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\nvcffFilt:\n", 11);
  clsp::IIROrder1<float>::dump((uint64_t)this + 608, v120);
  double v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"\nthermalGain:\n", 14);
  clsp::AttackRelease<float,double>::dump((uint64_t)this + 632, v121);
  double v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"\nsThermalGain1:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 680, v122);
  uint64_t v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"\nsThermalGain2:\n", 16);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 696, v123);
  double v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"\nsPowerCtrlGain1:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 712, v124);
  uint64_t v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"\nsPowerCtrlGain2:\n", 18);
  clsp::ExponentialSmoother<float,double>::dump((uint64_t)this + 728, v125);
  std::operator+<char>();
  double v126 = std::string::append(&v276, "]\n", 2uLL);
  long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v277.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
  AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
  uint64_t v128 = std::string::insert(&v279, 0, "  ", 2uLL);
  long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  int64_t v275 = v128->__r_.__value_.__r.__words[2];
  long long __p = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  if (v275 >= 0) {
    double v130 = (const std::string::value_type *)&__p;
  }
  else {
    double v130 = (const std::string::value_type *)__p;
  }
  if (v275 >= 0) {
    std::string::size_type v131 = HIBYTE(v275);
  }
  else {
    std::string::size_type v131 = *((void *)&__p + 1);
  }
  float v132 = std::string::append(&v277, v130, v131);
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  float64_t v134 = std::string::append(&v278, "\n", 1uLL);
  long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  int64_t v230 = v134->__r_.__value_.__r.__words[2];
  long long v229 = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v275) < 0) {
    operator delete((void *)__p);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v276.__r_.__value_.__l.__data_);
  }
  *(void *)double v280 = v32;
  *(void *)&v280[*(void *)(v32 - 24)] = v33;
  *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
  if (v282 < 0) {
    operator delete(v281);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v283);
  if (v230 >= 0) {
    uint64_t v136 = (const std::string::value_type *)&v229;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)v229;
  }
  if (v230 >= 0) {
    std::string::size_type v137 = HIBYTE(v230);
  }
  else {
    std::string::size_type v137 = *((void *)&v229 + 1);
  }
  uint64_t v138 = std::string::append(&v253, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v254.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "DelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v225, (uint64_t)v223, *((void *)this + 97));
  if ((v226 & 0x80u) == 0) {
    float v140 = v225;
  }
  else {
    float v140 = (void **)v225[0];
  }
  if ((v226 & 0x80u) == 0) {
    std::string::size_type v141 = v226;
  }
  else {
    std::string::size_type v141 = (std::string::size_type)v225[1];
  }
  double v142 = std::string::append(&v254, (const std::string::value_type *)v140, v141);
  long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v255.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  v144 = std::string::append(&v255, "\nClipBuffer.std::string::size_type size = ", 0x13uLL);
  long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v222, (uint64_t)(*((void *)this + 101) - *((void *)this + 100)) >> 2);
  if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v146 = &v222;
  }
  else {
    uint64_t v146 = (std::string *)v222.__r_.__value_.__r.__words[0];
  }
  if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v222.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v222.__r_.__value_.__l.__size_;
  }
  double v148 = std::string::append(&v256, (const std::string::value_type *)v146, size);
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  v150 = std::string::append(&v257, "\nscratch buffer.std::string::size_type size = ", 0x17uLL);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v221, (uint64_t)(*((void *)this + 104) - *((void *)this + 103)) >> 2);
  if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v152 = &v221;
  }
  else {
    uint64_t v152 = (std::string *)v221.__r_.__value_.__r.__words[0];
  }
  if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v153 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v153 = v221.__r_.__value_.__l.__size_;
  }
  uint64_t v154 = std::string::append(&v258, (const std::string::value_type *)v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  uint64_t v156 = std::string::append(&v259, "\n", 1uLL);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "vDelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v219, (uint64_t)v217, *((void *)this + 125));
  if ((v220 & 0x80u) == 0) {
    uint64_t v158 = v219;
  }
  else {
    uint64_t v158 = (void **)v219[0];
  }
  if ((v220 & 0x80u) == 0) {
    std::string::size_type v159 = v220;
  }
  else {
    std::string::size_type v159 = (std::string::size_type)v219[1];
  }
  double v160 = std::string::append(&v260, (const std::string::value_type *)v158, v159);
  long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v261.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "iDelayLine");
  DumpViaStream<clsp::DelayLine<float,double>>(v215, (uint64_t)v213, *((void *)this + 126));
  if ((v216 & 0x80u) == 0) {
    double v162 = v215;
  }
  else {
    double v162 = (void **)v215[0];
  }
  if ((v216 & 0x80u) == 0) {
    std::string::size_type v163 = v216;
  }
  else {
    std::string::size_type v163 = (std::string::size_type)v215[1];
  }
  double v164 = std::string::append(&v261, (const std::string::value_type *)v162, v163);
  long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  v262.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v209, "SpeakerPowerModel");
  if (*((void *)this + 98))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"pwrAvgWinSec = ", 15);
    double v166 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"\nrelativeSpkPwrPeriod = ", 24);
    double v167 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"\ninvRelSpkPwrPeriod = ", 22);
    std::ostream::operator<<();
    std::operator+<char>();
    double v168 = std::string::append(&v276, "]\n", 2uLL);
    long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v169;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    v168->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    uint64_t v170 = std::string::insert(&v279, 0, "  ", 2uLL);
    long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    int64_t v275 = v170->__r_.__value_.__r.__words[2];
    long long __p = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v279.__r_.__value_.__l.__data_);
    }
    if (v275 >= 0) {
      double v172 = (const std::string::value_type *)&__p;
    }
    else {
      double v172 = (const std::string::value_type *)__p;
    }
    if (v275 >= 0) {
      std::string::size_type v173 = HIBYTE(v275);
    }
    else {
      std::string::size_type v173 = *((void *)&__p + 1);
    }
    double v174 = std::string::append(&v277, v172, v173);
    long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    unint64_t v176 = std::string::append(&v278, "\n", 1uLL);
    long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
    int64_t v212 = v176->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string::size_type v211 = v177;
    v176->__r_.__value_.__l.__size_ = 0;
    v176->__r_.__value_.__r.__words[2] = 0;
    v176->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v278.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v275) < 0) {
      operator delete((void *)__p);
    }
    if (v273 < 0) {
      operator delete(v272[0]);
    }
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v277.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
    *(void *)double v280 = v31;
    *(void *)&v280[*(void *)(v31 - 24)] = v33;
    *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
    if (v282 < 0) {
      operator delete(v281);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C185D210](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v211, "");
  }
  if (v212 >= 0) {
    float v178 = v211;
  }
  else {
    float v178 = (void **)v211[0];
  }
  if (v212 >= 0) {
    std::string::size_type v179 = HIBYTE(v212);
  }
  else {
    std::string::size_type v179 = (std::string::size_type)v211[1];
  }
  uint64_t v180 = std::string::append(&v262, (const std::string::value_type *)v178, v179);
  long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v205, "SpeakerPowerMeas");
  if (*((void *)this + 99))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v280);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"pwrAvgWinSec = ", 15);
    float v182 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"\nspkPwrPeriod = ", 16);
    std::ostream::operator<<();
    std::operator+<char>();
    uint64_t v183 = std::string::append(&v276, "]\n", 2uLL);
    long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    v277.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v280[8], v272);
    AUT::ReplaceAll(&v279, (uint64_t)v272, "\n", 1, "\n  ", 3uLL);
    uint64_t v185 = std::string::insert(&v279, 0, "  ", 2uLL);
    long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
    int64_t v275 = v185->__r_.__value_.__r.__words[2];
    long long __p = v186;
    v185->__r_.__value_.__l.__size_ = 0;
    v185->__r_.__value_.__r.__words[2] = 0;
    v185->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v279.__r_.__value_.__l.__data_);
    }
    if (v275 >= 0) {
      uint64_t v187 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v187 = (const std::string::value_type *)__p;
    }
    if (v275 >= 0) {
      std::string::size_type v188 = HIBYTE(v275);
    }
    else {
      std::string::size_type v188 = *((void *)&__p + 1);
    }
    uint64_t v189 = std::string::append(&v277, v187, v188);
    long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v278.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    uint64_t v191 = std::string::append(&v278, "\n", 1uLL);
    long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    int64_t v208 = v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)v207 = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v278.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v275) < 0) {
      operator delete((void *)__p);
    }
    if (v273 < 0) {
      operator delete(v272[0]);
    }
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v277.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
    *(void *)double v280 = v31;
    *(void *)&v280[*(void *)(v31 - 24)] = v33;
    *(void *)&v280[8] = MEMORY[0x1E4FBA470] + 16;
    if (v282 < 0) {
      operator delete(v281);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C185D210](v283);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v207, "");
  }
  if (v208 >= 0) {
    double v193 = v207;
  }
  else {
    double v193 = (void **)v207[0];
  }
  if (v208 >= 0) {
    std::string::size_type v194 = HIBYTE(v208);
  }
  else {
    std::string::size_type v194 = (std::string::size_type)v207[1];
  }
  float v195 = std::string::append(&v263, (const std::string::value_type *)v193, v194);
  std::string v264 = *v195;
  v195->__r_.__value_.__l.__size_ = 0;
  v195->__r_.__value_.__r.__words[2] = 0;
  v195->__r_.__value_.__r.__words[0] = 0;
  AUT::ReplaceAll((std::string *)v280, (uint64_t)&v264, "\n", 1, "\n  ", 3uLL);
  double v196 = std::string::insert((std::string *)v280, 0, "  ", 2uLL);
  long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  int64_t v266 = v196->__r_.__value_.__r.__words[2];
  long long v265 = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  if ((v280[23] & 0x80000000) != 0) {
    operator delete(*(void **)v280);
  }
  if (v266 >= 0) {
    double v198 = (const std::string::value_type *)&v265;
  }
  else {
    double v198 = (const std::string::value_type *)v265;
  }
  if (v266 >= 0) {
    std::string::size_type v199 = HIBYTE(v266);
  }
  else {
    std::string::size_type v199 = *((void *)&v265 + 1);
  }
  long double v200 = std::string::append(&v269, v198, v199);
  long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
  int64_t v271 = v200->__r_.__value_.__r.__words[2];
  long long v270 = v201;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v266) < 0) {
    operator delete((void *)v265);
  }
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v264.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v208) < 0) {
    operator delete(v207[0]);
  }
  if (v206 < 0) {
    operator delete(v205);
  }
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v263.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v212) < 0) {
    operator delete(v211[0]);
  }
  if (v210 < 0) {
    operator delete(v209);
  }
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if ((char)v216 < 0) {
    operator delete(v215[0]);
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  if ((char)v220 < 0) {
    operator delete(v219[0]);
  }
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v255.__r_.__value_.__l.__data_);
  }
  if ((char)v226 < 0) {
    operator delete(v225[0]);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v254.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v230) < 0) {
    operator delete((void *)v229);
  }
  if (v228 < 0) {
    operator delete(v227);
  }
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234) < 0) {
    operator delete((void *)v233);
  }
  if (v232 < 0) {
    operator delete(v231);
  }
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238) < 0) {
    operator delete((void *)v237);
  }
  if (v236 < 0) {
    operator delete(v235);
  }
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v242) < 0) {
    operator delete((void *)v241);
  }
  if (v240 < 0) {
    operator delete(v239);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v246) < 0) {
    operator delete((void *)v245);
  }
  if (v244 < 0) {
    operator delete(v243);
  }
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v268.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v267.__r_.__value_.__l.__data_);
  }
  float v202 = (NSObject **)spp3Subsystem();
  if (v202)
  {
    uint64_t v203 = *v202;
    if (!*v202) {
      goto LABEL_352;
    }
  }
  else
  {
    uint64_t v203 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v204 = &v270;
    if (v271 < 0) {
      uint64_t v204 = (long long *)v270;
    }
    *(_DWORD *)double v280 = 136315650;
    *(void *)&v280[4] = "CLSPKernel_v5.cpp";
    *(_WORD *)&v280[12] = 1024;
    *(_DWORD *)&v280[14] = 1620;
    *(_WORD *)&v280[18] = 2080;
    *(void *)&v280[20] = v204;
    _os_log_impl(&dword_1BB0CE000, v203, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v280, 0x1Cu);
  }
LABEL_352:
  if (SHIBYTE(v271) < 0) {
    operator delete((void *)v270);
  }
}

void sub_1BB631978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (SLOBYTE(STACK[0x4FF]) < 0) {
    operator delete((void *)STACK[0x4E8]);
  }
  if (SLOBYTE(STACK[0x547]) < 0) {
    operator delete((void *)STACK[0x530]);
  }
  if (SLOBYTE(STACK[0x52F]) < 0) {
    operator delete((void *)STACK[0x518]);
  }
  STACK[0x580] = v93;
  *(unint64_t *)((char *)&STACK[0x580] + *(void *)(v93 - 24)) = v92;
  STACK[0x588] = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x5DF]) < 0) {
    operator delete((void *)STACK[0x5C8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](&STACK[0x5F0]);
  if (a15 < 0) {
    operator delete(a10);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a92 < 0) {
    operator delete(a91);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  if (SLOBYTE(STACK[0x4A7]) < 0) {
    operator delete((void *)STACK[0x490]);
  }
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  _Unwind_Resume(a1);
}

void *DumpViaStream<clsp::DelayLine<float,double>>(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"DelayTime = ", 12);
    double v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nDelaySamples = ", 16);
    long long v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\ndelayBuffer.std::string::size_type size = ", 20);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\ndelayedInput.std::string::size_type size = ", 21);
    std::ostream::operator<<();
    std::operator+<char>();
    double v7 = std::string::append(&v22, "]\n", 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26, v18);
    AUT::ReplaceAll(&v29, (uint64_t)v18, "\n", 1, "\n  ", 3uLL);
    unsigned int v9 = std::string::insert(&v29, 0, "  ", 2uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v21 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v21 >= 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if (v21 >= 0) {
      std::string::size_type v12 = HIBYTE(v21);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    std::string::size_type v13 = std::string::append(&v23, (const std::string::value_type *)v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v24, "\n", 1uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    a1[2] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    uint64_t v25 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v26[-1] + *(void *)(v25 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v26[0] = MEMORY[0x1E4FBA470] + 16;
    if (v27 < 0) {
      operator delete((void *)v26[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1C185D210](&v28);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BB632790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  a42 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a42 + *(void *)(a42 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a43 = MEMORY[0x1E4FBA470] + 16;
  if (a56 < 0) {
    operator delete(a51);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](&a59);
  _Unwind_Resume(a1);
}

double AUT::ReplaceAll(std::string *a1, uint64_t a2, char *a3, int64_t __n1, std::string::value_type *__s, std::string::size_type __n2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  std::string::size_type v11 = 0;
  std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type v13 = &v22;
  }
  else
  {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
    std::string::size_type v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  while (!__n1)
  {
LABEL_17:
    if (v11 != -1)
    {
      std::string::replace(&v22, v11, __n1, __s, __n2);
      v11 += __n2;
      std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = (v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v22
          : (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      if (size >= v11) {
        continue;
      }
    }
    goto LABEL_24;
  }
  long long v14 = (char *)v13 + v11;
  long long v15 = (char *)v13 + size;
  int64_t v16 = size - v11;
  if (v16 >= __n1)
  {
    int v17 = *a3;
    do
    {
      int64_t v18 = v16 - __n1;
      if (v18 == -1) {
        break;
      }
      char v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19) {
        break;
      }
      double v20 = v19;
      if (!memcmp(v19, a3, __n1))
      {
        if (v20 == v15) {
          break;
        }
        std::string::size_type v11 = v20 - (char *)v13;
        goto LABEL_17;
      }
      long long v14 = v20 + 1;
      int64_t v16 = v15 - (v20 + 1);
    }
    while (v16 >= __n1);
  }
LABEL_24:
  double result = *(double *)&v22.__r_.__value_.__l.__data_;
  *a1 = v22;
  return result;
}

void sub_1BB632A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *clsp::ThermalModelOrder1::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"T_sett = ", 9);
  long long v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\ntau = ", 7);
  double v4 = (void *)std::ostream::operator<<();
  char v6 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
  return a2;
}

void *clsp::IIROrder1<float>::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"a1 = ", 5);
  long long v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\nb0 = ", 6);
  double v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nb1 = ", 6);
  long long v5 = (void *)std::ostream::operator<<();
  char v7 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  return a2;
}

void ConvoyToExcursion(float *a1, float *__A, vDSP_Length __N, char a4, int a5, float a6, float a7)
{
  float v10 = a1[2];
  float v9 = a1[3];
  float v12 = *a1;
  float v11 = a1[1];
  float v13 = v10 - v11;
  float v14 = v9 - v11;
  float v15 = (float)(a6 * (float)(v10 - v11)) - (float)(a7 * (float)(v9 - v11));
  float v16 = v10 - v9;
  float v17 = v15 / v16;
  float v18 = (float)(v13 * (float)(v14 * (float)(a7 - a6))) / v16;
  float __Aa = v18;
  float v19 = 0.0;
  if (a5) {
    float v19 = v17 + (float)(v18 / (float)(v12 - v11));
  }
  float __B = -v11;
  float v22 = v17 - v19;
  if (a4)
  {
    int v20 = 0;
    vDSP_vfill((const float *)&v20, __A, 1, __N);
  }
  else
  {
    vDSP_vsadd(__A, 1, &__B, __A, 1, __N);
    vDSP_svdiv(&__Aa, __A, 1, __A, 1, __N);
    vDSP_vsadd(__A, 1, &v22, __A, 1, __N);
  }
}

void clsp::CLSPKernel_v5::ProcessByThermalBlock(const float ****a1, uint64_t ***a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, unint64_t a7)
{
  int v193 = a6;
  float v195 = a4;
  double v196 = a5;
  uint64_t v189 = a2;
  long long v190 = a3;
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  long long v8 = *a1;
  char v7 = a1[1];
  if (v7 != *a1)
  {
    float v9 = a1;
    do
    {
      float v10 = *v8;
      v8 += 2;
      *(const float **)((char *)v10 + 1028) = 0;
    }
    while (v8 != v7);
    if (a7)
    {
      unint64_t v11 = 0;
      float v12 = 1.0;
      unint64_t v192 = a7;
      do
      {
        float v13 = *v9;
        float v14 = v9[1];
        if (a7 - v11 >= *((unsigned int *)**v9 + 137)) {
          vDSP_Length v15 = *((unsigned int *)**v9 + 137);
        }
        else {
          vDSP_Length v15 = a7 - v11;
        }
        uint64_t v197 = v15;
        if ((v193 & 1) == 0)
        {
          for (; v13 != v14; vDSP_Length v15 = v197)
          {
            long long v49 = *v13;
            uint64_t v50 = *((unsigned int *)*v13 + 4);
            uint64_t v51 = *(void *)(*v195 + 16 * v50 + 16);
            uint64_t v52 = *(void *)(*v196 + 16 * v50 + 16);
            switch(*((_DWORD *)*v13 + 256))
            {
              case 0:
                clsp::CLSPKernel_v5::ProcessOpenLoop(v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15);
                break;
              case 1:
              case 4:
                clsp::CLSPKernel_v5::ProcessAdaptSimple(v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15);
                break;
              case 3:
                clsp::CLSPKernel_v5::ProcessAdapt((clsp::CLSPKernel_v5 *)v49, (const float *)(v51 + 4 * v11), (float *)(v52 + 4 * v11), v15, v11);
                break;
              default:
                float __B = 0.1;
                vDSP_vsmul((const float *)(v51 + 4 * v11), 1, &__B, (float *)(v52 + 4 * v11), 1, v15);
                break;
            }
            v13 += 2;
          }
          goto LABEL_79;
        }
        uint64_t v191 = (uint64_t *)&v189;
        unint64_t v16 = ((char *)v14 - (char *)v13) >> 4;
        MEMORY[0x1F4188790](a1);
        unint64_t v17 = (8 * v16 + 15) & 0xFFFFFFFFFFFFFFF0;
        float v18 = (char *)&v189 - v17;
        unint64_t v20 = v19 >> 1;
        if (v20 >= 0x200) {
          size_t v21 = 512;
        }
        else {
          size_t v21 = v20;
        }
        bzero((char *)&v189 - v17, v21);
        MEMORY[0x1F4188790](v22);
        std::string v23 = (char *)&v189 - v17;
        bzero((char *)&v189 - v17, v21);
        if (v14 != v13)
        {
          uint64_t v24 = *v195;
          uint64_t v25 = *v9;
          uint64_t v26 = *v196;
          if (v16 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = ((char *)v14 - (char *)v13) >> 4;
          }
          uint64_t v28 = (uint64_t ****)((char *)&v189 - v17);
          std::string v29 = (uint64_t ****)((char *)&v189 - v17);
          do
          {
            long long v30 = *v25;
            v25 += 2;
            uint64_t v31 = *((unsigned int *)v30 + 4);
            *v28++ = *(void *)(v24 + 16 * v31 + 16) + 4 * v11;
            *v29++ = *(void *)(v26 + 16 * v31 + 16) + 4 * v11;
            --v27;
          }
          while (v27);
        }
        a1 = (const float ****)shouldTraceRender();
        uint64_t v33 = *v9;
        uint64_t v32 = v9[1];
        int v34 = *v9;
        if (*v9 != v32)
        {
          do
          {
            a1 = (const float ****)*v33;
            if (*((unsigned char *)*v33 + 1072))
            {
              clsp::CLSPKernel_v5::LogCoeffs((clsp::CLSPKernel_v5 *)a1);
              *((unsigned char *)*v33 + 1072) = 0;
            }
            v33 += 2;
          }
          while (v33 != v32);
          uint64_t v33 = *v9;
          std::string::size_type v35 = v9[1];
          unint64_t v36 = *v9;
          if (*v9 != v35)
          {
            while ((*v36)[53])
            {
              v36 += 2;
              if (v36 == v35)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                size_t v39 = 4 * v197;
                uint64_t v194 = -v197;
                while (1)
                {
                  double v40 = (float *)v33[v37][100];
                  vDSP_vclip(*(const float **)&v18[8 * v38], 1, &clsp::CLSPKernel_v5::kClipLoThres, &clsp::CLSPKernel_v5::kClipHiThres, v40, 1, v197);
                  double v41 = (*v9)[v37][97];
                  a1 = (const float ****)shouldTraceRender();
                  vDSP_Length v42 = *((void *)v41 + 1);
                  if (v42 <= v197)
                  {
                    if (v42)
                    {
                      a1 = (const float ****)memmove(*((void **)v41 + 5), *((const void **)v41 + 2), 4 * v42);
                      vDSP_Length v42 = *((void *)v41 + 1);
                    }
                    std::string::size_type v47 = &v40[v197];
                    float v48 = &v47[-v42];
                    if (v48 != v40)
                    {
                      a1 = (const float ****)memmove((void *)(*((void *)v41 + 5) + 4 * v42), v40, (char *)v48 - (char *)v40);
                      vDSP_Length v42 = *((void *)v41 + 1);
                    }
                    if (!v42) {
                      goto LABEL_41;
                    }
                    size_t v46 = 4 * v42;
                    uint64_t v44 = (void *)*((void *)v41 + 2);
                    long long v45 = &v47[-v42];
                  }
                  else
                  {
                    if (v197)
                    {
                      a1 = (const float ****)memmove(*((void **)v41 + 5), *((const void **)v41 + 2), v39);
                      vDSP_Length v42 = *((void *)v41 + 1);
                    }
                    vDSP_Length v43 = v197;
                    if (v42 != v197) {
                      a1 = (const float ****)memmove(*((void **)v41 + 2), (const void *)(*((void *)v41 + 2) + 4 * v197), 4 * v42 - 4 * v197);
                    }
                    if (!v43) {
                      goto LABEL_41;
                    }
                    uint64_t v44 = (void *)(*((void *)v41 + 2) + 4 * *((void *)v41 + 1) + 4 * v194);
                    long long v45 = v40;
                    size_t v46 = v39;
                  }
                  a1 = (const float ****)memmove(v44, v45, v46);
LABEL_41:
                  ++v38;
                  uint64_t v33 = *v9;
                  int v34 = v9[1];
                  v37 += 2;
                  if (v38 >= ((char *)v34 - (char *)*v9) >> 4) {
                    goto LABEL_52;
                  }
                }
              }
            }
            unint64_t v75 = 0;
            do
            {
              float v76 = *(const float **)&v18[8 * v75];
              long long v77 = *(float **)&v23[8 * v75];
              float __B = 0.1;
              vDSP_vsmul(v76, 1, &__B, v77, 1, v197);
              ++v75;
            }
            while (v75 < ((char *)v9[1] - (char *)*v9) >> 4);
            goto LABEL_78;
          }
          int v34 = *v9;
        }
LABEL_52:
        if (v197)
        {
          for (unint64_t i = 0; i != v197; ++i)
          {
            float v54 = *v9;
            long long v55 = v9[1];
            if (*v9 != v55)
            {
              float v56 = 1.0;
              double v57 = (uint64_t *)v23;
              do
              {
                double v58 = *v54;
                double v59 = (*v54)[97];
                uint64_t v60 = *((void *)v59 + 5);
                if (i >= (*((void *)v59 + 6) - v60) >> 2) {
                  std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
                }
                float v61 = v58[100][i];
                uint64_t v62 = *v57;
                float v63 = (*(float (**)(const float *, float, float))(*(void *)v58[53] + 184))(v58[53], v61, *(float *)(v60 + 4 * i));
                float v64 = *v54;
                (*v54)[103][i] = v63;
                int v65 = (clsp::CLSP_Log *)*((void *)v64[135] + 2);
                if (v65)
                {
                  float __B = v61;
                  clsp::CLSP_Log::LogCLSPData(v65, &__B, 1);
                  float v64 = *v54;
                }
                float v66 = *((float *)v64 + 173)
                    + (float)(*((float *)v64 + 172) * (float)(*((float *)v64 + 166) - *((float *)v64 + 173)));
                *((float *)v64 + 173) = v66;
                float v67 = *((float *)v64 + 177) + (float)(*((float *)v64 + 176) * (float)(v66 - *((float *)v64 + 177)));
                *((float *)v64 + 177) = v67;
                float v68 = *((float *)v64 + 181)
                    + (float)(*((float *)v64 + 180) * (float)(*((float *)v64 + 168) - *((float *)v64 + 181)));
                *((float *)v64 + 181) = v68;
                float v69 = *((float *)v64 + 185) + (float)(*((float *)v64 + 184) * (float)(v68 - *((float *)v64 + 185)));
                *((float *)v64 + 185) = v69;
                if (*((unsigned char *)v64 + 744))
                {
                  if (v69 < v67) {
                    float v67 = v69;
                  }
                  float v63 = v63 * v67;
                  --*((_DWORD *)v64 + 137);
                  *(float *)(v62 + 4 * i) = v63;
                  float v61 = v61 * (float)(*((float *)v64 + 177) * *((float *)v64 + 185));
                }
                else
                {
                  --*((_DWORD *)v64 + 137);
                  *(float *)(v62 + 4 * i) = v63;
                }
                (*(void (**)(const float *, float, float))(*(void *)v64[53] + 192))(v64[53], v61, v63);
                float v70 = (*(float (**)(const float *))(*(void *)(*v54)[53] + 200))((*v54)[53]);
                if (v56 < v70) {
                  float v56 = v70;
                }
                v54 += 2;
                ++v57;
              }
              while (v54 != v55);
              double v71 = *v9;
              float v72 = v9[1];
              while (v71 != v72)
              {
                a1 = (const float ****)(*(uint64_t (**)(const float *, float))(*(void *)(*v71)[53] + 152))((*v71)[53], v56);
                v71 += 2;
              }
            }
          }
          uint64_t v33 = *v9;
          int v34 = v9[1];
        }
        if (v34 != v33)
        {
          uint64_t v73 = 0;
          unint64_t v74 = 0;
          do
          {
            clsp::ThermalController::postProcess((clsp::ThermalController *)(v33[v73] + 54), *(float **)&v23[8 * v74], v33[v73][103], v197);
            a1 = (const float ****)clsp::CLSPKernel_v5::ZapBadValues((clsp::CLSPKernel_v5 *)v33[v73]);
            ++v74;
            uint64_t v33 = *v9;
            v73 += 2;
          }
          while (v74 < ((char *)v9[1] - (char *)*v9) >> 4);
        }
LABEL_78:
        vDSP_Length v15 = v197;
LABEL_79:
        if (*((_DWORD *)**v9 + 137)) {
          goto LABEL_80;
        }
        long long v79 = *v189;
        double v78 = v189[1];
LABEL_83:
        if (v79 != v78)
        {
          std::string::size_type v81 = *v79;
          double v80 = v79[1];
          if (*v79 == v80) {
            goto LABEL_170;
          }
          float v82 = 1.0;
          while (1)
          {
            uint64_t v83 = *v81;
            uint64_t v84 = *(void *)(*v81 + 480);
            if (!v84) {
              __assert_rtn("analyzeTargetGain", "CLSPBlocks.h", 1364, "mr_elecModel");
            }
            uint64_t v85 = *(void *)(v83 + 752);
            if (!v85) {
              __assert_rtn("analyzeTargetGain", "CLSPBlocks.h", 1365, "mr_CLTModule");
            }
            float v86 = *(float *)(v84 + 36);
            float v87 = (float)((float)(*(float *)(v83 + 576) * *(float *)(v83 + 580)) + (float)(v86 * *(float *)(v83 + 572)))
                - (float)(*(float *)(v83 + 584) * *(float *)(v83 + 568));
            *(float *)(v83 + 580) = v86;
            *(float *)(v83 + 584) = v87;
            float v88 = (float)((float)(*(float *)(v83 + 596) * *(float *)(v83 + 600)) + (float)(v86 * *(float *)(v83 + 592)))
                - (float)(*(float *)(v83 + 604) * *(float *)(v83 + 588));
            *(float *)(v83 + 600) = v86;
            *(float *)(v83 + 604) = v88;
            float v89 = *(float *)(v84 + 44);
            float v90 = (float)((float)(*(float *)(v83 + 616) * *(float *)(v83 + 620)) + (float)(v89 * *(float *)(v83 + 612)))
                - (float)(*(float *)(v83 + 624) * *(float *)(v83 + 608));
            *(float *)(v83 + 620) = v89;
            *(float *)(v83 + 624) = v90;
            float v91 = *(float *)(v83 + 440);
            float v92 = *(float *)(v83 + 432);
            *(float *)(v85 + 208) = v92;
            if (*(unsigned char *)(v85 + 113))
            {
              float Temperature = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)v85);
              uint64_t v94 = *(void *)(v85 + 96);
              if (v94 && *(unsigned char *)(v94 + 88))
              {
                float v95 = v92 - Temperature;
                *(float *)(v85 + 84) = v95 + *(float *)(v85 + 84);
                float v96 = v95 + (float)(v91 + (float)(v87 + v88));
                if (!*(unsigned char *)(v94 + 89)) {
                  float v96 = v92;
                }
                if (v96 <= v92) {
                  float v96 = v92;
                }
                if (v96 >= (float)(*(float *)(v85 + 16) + v92)) {
                  float v97 = *(float *)(v85 + 16) + v92;
                }
                else {
                  float v97 = v96;
                }
                float v92 = *(float *)(v85 + 140) + (float)(*(float *)(v85 + 136) * (float)(v97 - *(float *)(v85 + 140)));
                *(float *)(v85 + 140) = v92;
                shouldTraceRender();
                *(float *)(v85 + 208) = v97;
              }
              else
              {
                shouldTraceRender();
              }
            }
            float v98 = *(float *)(v83 + 440);
            float v99 = (float)((float)(v92 - v98) - v88) / (float)(v90 + 1.0);
            float v12 = 1.0;
            if (v99 > 1.0) {
              float v99 = 1.0;
            }
            if (v99 < 0.0001) {
              float v99 = 0.0001;
            }
            float v100 = sqrtf(v99);
            float v101 = *(float *)(v83 + 664);
            if (v100 < v101) {
              break;
            }
            int v103 = *(_DWORD *)(v83 + 552);
            if (v103)
            {
              int v102 = v103 - 1;
              goto LABEL_108;
            }
            *(float *)(v83 + 556) = v100;
LABEL_109:
            float v104 = v88 + (float)(v87 + v98);
            float v105 = 1.0;
            if (v104 < v92) {
              goto LABEL_117;
            }
            if (v104 > (float)(v92 + *(float *)(v83 + 436)) || (float v105 = 1.0, *(float *)(v83 + 560) != 1.0))
            {
              float v106 = (float)((float)((float)(v92 + -5.0) - v98) - v88) / (float)(v90 + 1.0);
              if (v106 > 1.0) {
                float v106 = 1.0;
              }
              if (v106 < 0.0001) {
                float v106 = 0.0001;
              }
              float v105 = sqrtf(v106);
LABEL_117:
              *(float *)(v83 + 560) = v105;
            }
            float v107 = *(float *)(v83 + 556);
            uint64_t v108 = 652;
            if (v101 < v107) {
              uint64_t v108 = 648;
            }
            float v109 = v101 + (float)(*(float *)(v83 + v108) * (float)(v107 - v101));
            if (v109 >= v105) {
              float v109 = v105;
            }
            *(float *)(v83 + 664) = v109;
            if (v104 <= (float)(v92 + *(float *)(v83 + 472))) {
              int v110 = *(_DWORD *)(v83 + 544);
            }
            else {
              int v110 = *(_DWORD *)(v83 + 564) - 1;
            }
            *(_DWORD *)(v83 + 564) = v110;
            if (!v110)
            {
              shouldTraceRender();
              *(_DWORD *)(v83 + 432) = *(_DWORD *)(v83 + 456);
              float v98 = *(float *)(v83 + 440);
            }
            uint64_t v111 = *(void *)(v83 + 752);
            if (*(double *)(v111 + 56) <= v89)
            {
              float v113 = v98 + (float)(*(float *)(v83 + 584) + *(float *)(v83 + 604));
              if (*(float *)(v111 + 28) < v113)
              {
                float v112 = *(float *)(v111 + 20);
LABEL_134:
                *(float *)(v111 + 88) = v112;
                goto LABEL_135;
              }
              if (*(float *)(v111 + 32) > v113 || (float v112 = *(float *)(v111 + 88), v112 == 0.0))
              {
                float v112 = *(float *)(v111 + 24);
                goto LABEL_134;
              }
            }
            else
            {
              *(_DWORD *)(v111 + 88) = 0;
              float v112 = 0.0;
            }
LABEL_135:
            *(float *)(v111 + 156) = *(float *)(v111 + 156)
                                   + (float)(*(float *)(v111 + 152) * (float)(v112 - *(float *)(v111 + 156)));
            shouldTraceRender();
            uint64_t v114 = *(void *)(v83 + 760);
            a1 = *(const float *****)(v114 + 32);
            if (a1)
            {
              float __B = *(float *)(v83 + 556);
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              uint64_t v114 = *(void *)(v83 + 760);
              a1 = *(const float *****)(v114 + 32);
              if (a1)
              {
                float __B = *(float *)(v83 + 560);
                clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                uint64_t v114 = *(void *)(v83 + 760);
                a1 = *(const float *****)(v114 + 32);
                if (a1)
                {
                  float __B = *(float *)(v83 + 664);
                  clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                  uint64_t v114 = *(void *)(v83 + 760);
                  a1 = *(const float *****)(v114 + 32);
                  if (a1)
                  {
                    float __B = v92;
                    clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                    uint64_t v114 = *(void *)(v83 + 760);
                    a1 = *(const float *****)(v114 + 32);
                    if (a1)
                    {
                      float __B = v90;
                      clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                      uint64_t v114 = *(void *)(v83 + 760);
                      a1 = *(const float *****)(v114 + 32);
                      if (a1)
                      {
                        float __B = v87;
                        clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                        uint64_t v114 = *(void *)(v83 + 760);
                        a1 = *(const float *****)(v114 + 32);
                        if (a1)
                        {
                          float __B = v88;
                          clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                          uint64_t v114 = *(void *)(v83 + 760);
                          a1 = *(const float *****)(v114 + 32);
                          if (a1)
                          {
                            float __B = v86;
                            clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                            uint64_t v114 = *(void *)(v83 + 760);
                            a1 = *(const float *****)(v114 + 32);
                            if (a1)
                            {
                              float __B = v89;
                              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                              uint64_t v114 = *(void *)(v83 + 760);
                              double v115 = *(clsp::CLSP_Log **)(v114 + 32);
                              if (v115)
                              {
                                float __B = clsp::ClosedLoopThermalModule::getTemperature(*(clsp::ClosedLoopThermalModule **)(v83 + 752));
                                clsp::CLSP_Log::LogCLSPData(v115, &__B, 1);
                                uint64_t v114 = *(void *)(v83 + 760);
                                a1 = *(const float *****)(v114 + 32);
                                if (a1)
                                {
                                  float __B = *(float *)(*(void *)(v83 + 752) + 208);
                                  clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
                                  uint64_t v114 = *(void *)(v83 + 760);
                                  a1 = *(const float *****)(v114 + 32);
                                }
                              }
                              else
                              {
                                a1 = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v116 = *(void *)(v83 + 752);
            uint64_t v117 = *(void *)(v116 + 96);
            if (v117)
            {
              if (!a1) {
                goto LABEL_159;
              }
              float v118 = 0.0;
              if (*(unsigned char *)(v117 + 88)) {
                float v118 = 1.0;
              }
              float __B = v118;
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              a1 = *(const float *****)(v114 + 32);
              if (!a1) {
                goto LABEL_159;
              }
              float v119 = 0.0;
              if (*(unsigned char *)(*(void *)(v116 + 96) + 89)) {
                float v119 = 1.0;
              }
              float __B = v119;
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
              a1 = *(const float *****)(v114 + 32);
            }
            if (a1)
            {
              float __B = *(float *)(v116 + 88);
              clsp::CLSP_Log::LogCLSPData((clsp::CLSP_Log *)a1, &__B, 1);
            }
LABEL_159:
            *(_DWORD *)(v83 + 548) = *(_DWORD *)(v83 + 536);
            uint64_t v120 = *(_DWORD **)(v83 + 480);
            v120[10] = v120[9];
            v120[12] = v120[11];
            v120[9] = 0;
            v120[11] = 0;
            uint64_t v121 = *(void *)(v83 + 784);
            float v122 = *(float *)(v83 + 96) + *(float *)(v121 + 12);
            *(float *)(v121 + 12) = v122;
            unsigned int v123 = *(_DWORD *)(v121 + 20);
            if (v123 >= *(_DWORD *)(v121 + 4))
            {
              unsigned int v124 = 0;
              *(float *)(v121 + 16) = v122 * *(float *)(v121 + 8);
              *(_DWORD *)(v121 + 12) = 0;
            }
            else
            {
              unsigned int v124 = v123 + 1;
            }
            *(_DWORD *)(v121 + 20) = v124;
            uint64_t v125 = *v81;
            v81 += 2;
            float v126 = *(float *)(v125 + 664);
            if (v126 < v82) {
              float v82 = v126;
            }
            if (v81 == v80)
            {
              long long v127 = *v79;
              uint64_t v128 = v79[1];
              while (v127 != v128)
              {
                uint64_t v129 = *v127;
                *(float *)(v129 + 664) = v82;
                a1 = *(const float *****)(v129 + 256);
                if (a1) {
                  a1 = (const float ****)((uint64_t (*)(const float ****))(*a1)[9])(a1);
                }
                v127 += 2;
              }
LABEL_170:
              v79 += 3;
              goto LABEL_83;
            }
          }
          *(float *)(v83 + 556) = v100;
          int v102 = *(_DWORD *)(v83 + 540);
LABEL_108:
          *(_DWORD *)(v83 + 552) = v102;
          goto LABEL_109;
        }
        vDSP_Length v15 = v197;
        if (*v190)
        {
          uint64_t v191 = (uint64_t *)&v189;
          __n128 v131 = MEMORY[0x1F4188790](a1);
          uint64_t v194 = (uint64_t)&v189 - v132;
          if (v133 != v134)
          {
            long long v135 = *v9;
            if (v130 <= 1) {
              uint64_t v136 = 1;
            }
            else {
              uint64_t v136 = v130;
            }
            std::string::size_type v137 = (_DWORD *)v194;
            do
            {
              uint64_t v138 = *v135;
              v135 += 2;
              v131.n128_u32[0] = *((_DWORD *)v138 + 26);
              *v137++ = v131.n128_u32[0];
              --v136;
            }
            while (v136);
          }
          uint64_t v139 = *v190;
          if (*(void *)(*v190 + 552)) {
            float v140 = *(uint64_t (****)())(v139 + 552);
          }
          else {
            float v140 = &cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GetAmpModel(void)const::sAmpModelDummy;
          }
          double v142 = *(void **)(v139 + 216);
          uint64_t v141 = *(void *)(v139 + 224);
          if (v142) {
            BOOL v143 = 1;
          }
          else {
            BOOL v143 = v141 == 0;
          }
          if (!v143) {
            __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
          }
          if (v141)
          {
            uint64_t v144 = 48 * v141;
            do
            {
              if (!v142) {
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              }
              a1 = (const float ****)(*(uint64_t (**)(void, uint64_t (***)(), uint64_t, __n128))(*(void *)*v142 + 16))(*v142, v140, v194, v131);
              v142 += 6;
              v144 -= 48;
            }
            while (v144);
          }
          unint64_t v145 = *(void *)(v139 + 32);
          if (v145)
          {
            unint64_t v146 = 0;
            unsigned int v147 = 0;
            float v148 = 1.0;
            do
            {
              if (*(void *)(v139 + 184) <= v146) {
                __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
              }
              double v150 = *(void **)(v139 + 216);
              uint64_t v149 = *(void *)(v139 + 224);
              if (v150) {
                BOOL v151 = 1;
              }
              else {
                BOOL v151 = v149 == 0;
              }
              if (!v151) {
                __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
              }
              if (v149)
              {
                float v152 = *(float *)(*(void *)(v139 + 176) + 4 * v146);
                std::string::size_type v153 = &v150[6 * v149];
                float v154 = 1.0;
                do
                {
                  if (!v150) {
                    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
                  }
                  unint64_t v155 = v150[2];
                  if (v155)
                  {
                    uint8x8_t v156 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
                    v156.i16[0] = vaddlv_u8(v156);
                    if (v156.u32[0] > 1uLL)
                    {
                      unint64_t v157 = v147;
                      if (v155 <= v147) {
                        unint64_t v157 = v147 % v155;
                      }
                    }
                    else
                    {
                      unint64_t v157 = (v155 - 1) & v147;
                    }
                    uint64_t v158 = *(uint64_t ***)(v150[1] + 8 * v157);
                    if (v158)
                    {
                      for (unsigned int j = *v158; j; unsigned int j = (uint64_t *)*j)
                      {
                        unint64_t v160 = j[1];
                        if (v160 == v147)
                        {
                          if (*((_DWORD *)j + 4) == v147)
                          {
                            (*(void (**)(void, uint64_t (***)(), void, uint64_t))(*(void *)*v150 + 24))(*v150, v140, *((unsigned int *)j + 5), v194);
                            break;
                          }
                        }
                        else
                        {
                          if (v156.u32[0] > 1uLL)
                          {
                            if (v160 >= v155) {
                              v160 %= v155;
                            }
                          }
                          else
                          {
                            v160 &= v155 - 1;
                          }
                          if (v160 != v157) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  a1 = (const float ****)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v150 + 1, v147);
                  if (a1)
                  {
                    float v161 = (*(float (**)(void, uint64_t (***)(), void, float))(*(void *)*v150 + 32))(*v150, v140, *((unsigned int *)a1 + 5), v152);
                    if (v161 > 1.0) {
                      float v161 = 1.0;
                    }
                    if (v154 > v161) {
                      float v154 = v161;
                    }
                  }
                  v150 += 6;
                }
                while (v150 != v153);
              }
              else
              {
                float v154 = 1.0;
              }
              if (*(void *)(v139 + 440) <= v146) {
                __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
              }
              uint64_t v162 = *(void *)(v139 + 432) + 24 * v146;
              float v163 = *(float *)(v162 + 20);
              double v164 = (float *)(v162 + 8);
              if (v163 >= v154) {
                double v164 = (float *)(v162 + 12);
              }
              float v165 = v163 + (float)(*v164 * (float)(v154 - v163));
              *(float *)(v162 + 20) = v165;
              float v166 = 1.0;
              float v12 = 1.0;
              if (v165 <= 1.0) {
                float v166 = v165;
              }
              BOOL v167 = v165 < 0.0;
              float v168 = 0.0;
              if (!v167) {
                float v168 = v166;
              }
              if (v168 < v148) {
                float v148 = v168;
              }
              unint64_t v145 = *(void *)(v139 + 32);
              unint64_t v146 = ++v147;
            }
            while (v145 > v147);
          }
          else
          {
            float v148 = 1.0;
          }
          float v169 = *(float *)(v139 + 12);
          float v198 = v148;
          uint64_t v170 = (float *)(v139 + 16);
          if (*(float *)(v139 + 16) >= v148) {
            uint64_t v170 = &v198;
          }
          if (v148 < v169) {
            uint64_t v170 = (float *)(v139 + 12);
          }
          float v171 = sqrtf(*v170);
          if (*(void *)(v139 + 568))
          {
            std::string::size_type v173 = *(void **)(v139 + 216);
            uint64_t v172 = *(void *)(v139 + 224);
            if (!v173 && v172) {
              __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
            }
            if (v172)
            {
              double v174 = &v173[6 * v172];
              unint64_t v175 = v145;
              do
              {
                if (!v173) {
                  __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
                }
                if (v175)
                {
                  LODWORD(v176) = 0;
                  do
                  {
                    long long v177 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(v173 + 1, v176);
                    if (v177)
                    {
                      float v178 = (*(float (**)(void, uint64_t (***)(), void))(*(void *)*v173
                                                                                                 + 40))(*v173, v140, *((unsigned int *)v177 + 5));
                      if (v178 < 0.0) {
                        float v178 = 0.0;
                      }
                      std::string::size_type v179 = *(clsp::CLSP_Log **)(v139 + 568);
                      float __B = v178;
                      clsp::CLSP_Log::LogCLSPData(v179, &__B, 1);
                    }
                    unint64_t v176 = (v176 + 1);
                    unint64_t v145 = *(void *)(v139 + 32);
                  }
                  while (v145 > v176);
                  unint64_t v175 = *(void *)(v139 + 32);
                }
                v173 += 6;
              }
              while (v173 != v174);
            }
            if (v145)
            {
              unint64_t v180 = 0;
              unsigned int v181 = 1;
              do
              {
                if (*(void *)(v139 + 184) <= v180) {
                  __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
                }
                float v182 = *(clsp::CLSP_Log **)(v139 + 568);
                float __B = *(float *)(*(void *)(v139 + 176) + 4 * v180);
                clsp::CLSP_Log::LogCLSPData(v182, &__B, 1);
                unint64_t v180 = v181;
              }
              while (*(void *)(v139 + 32) > (unint64_t)v181++);
            }
            long long v184 = *(clsp::CLSP_Log **)(v139 + 568);
            float __B = log10f(v171) * 20.0;
            clsp::CLSP_Log::LogCLSPData(v184, &__B, 1);
          }
          if (*(unsigned char *)(v139 + 8)) {
            float v185 = v171;
          }
          else {
            float v185 = v12;
          }
          long long v186 = *v9;
          uint64_t v187 = v9[1];
          while (v186 != v187)
          {
            std::string::size_type v188 = *v186;
            v186 += 2;
            *((float *)v188 + 168) = v185;
          }
          vDSP_Length v15 = v197;
        }
LABEL_80:
        v11 += v15;
        a7 = v192;
      }
      while (v11 < v192);
    }
  }
}

void sub_1BB633F54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

float clsp::ClosedLoopThermalModule::getTemperature(clsp::ClosedLoopThermalModule *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (!v1) {
    __assert_rtn("getTemperature", "CLSPBlocks.h", 650, "mr_elecModel");
  }
  float v2 = *(double *)(v1 + 8);
  return *((float *)this + 18)
       + *(double *)this
       * (float)((float)((float)(*((float *)this + 20) - v2) / (float)(*((float *)this + 17) - v2)) + -1.0);
}

char *clsp::CLSPKernel_v5::Reset(clsp::CLSPKernel_v5 *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = spp3Subsystem();
  if (v2)
  {
    if (*(unsigned char *)(v2 + 8))
    {
      long long v3 = *(NSObject **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          int v17 = 136315394;
          float v18 = "CLSPKernel_v5.cpp";
          __int16 v19 = 1024;
          int v20 = 1440;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CLSPKernel_v5::Reset", (uint8_t *)&v17, 0x12u);
        }
      }
    }
  }
  *((_DWORD *)this + 24) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 26) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 25) = 0;
  float v4 = clsp::ClosedLoopThermalModule::reset((clsp::CLSPKernel_v5 *)((char *)this + 152));
  uint64_t v5 = *((void *)this + 53);
  if (v5) {
    (*(void (**)(uint64_t, float))(*(void *)v5 + 216))(v5, v4);
  }
  *((_DWORD *)this + 137) = *((_DWORD *)this + 134);
  *((_DWORD *)this + 138) = 0;
  *((_DWORD *)this + 141) = *((_DWORD *)this + 136);
  *(void *)((char *)this + 556) = 0x3F8000003F800000;
  *((_DWORD *)this + 173) = 1065353216;
  *((_DWORD *)this + 177) = 1065353216;
  *((_DWORD *)this + 181) = 1065353216;
  *((_DWORD *)this + 185) = 1065353216;
  uint64_t v6 = *((void *)this + 97);
  if (v6) {
    clsp::DelayLine<float,double>::reset(v6);
  }
  uint64_t v7 = *((void *)this + 98);
  if (v7)
  {
    *(void *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 12) = 0;
  }
  uint64_t v8 = *((void *)this + 99);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
  }
  uint64_t v9 = *((void *)this + 125);
  if (v9) {
    clsp::DelayLine<float,double>::reset(v9);
  }
  uint64_t v10 = *((void *)this + 126);
  if (v10) {
    clsp::DelayLine<float,double>::reset(v10);
  }
  uint64_t v11 = *((void *)this + 127);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = *(void *)(v11 + 56);
    int v17 = 0;
    std::vector<float>::assign((char **)(v11 + 48), (v13 - v12) >> 2, &v17);
  }
  unint64_t v14 = (uint64_t)(*((void *)this + 101) - *((void *)this + 100)) >> 2;
  int v17 = 0;
  std::vector<float>::assign((char **)this + 100, v14, &v17);
  unint64_t v15 = (uint64_t)(*((void *)this + 104) - *((void *)this + 103)) >> 2;
  int v17 = 0;
  double result = std::vector<float>::assign((char **)this + 103, v15, &v17);
  *((unsigned char *)this + 1072) = 1;
  return result;
}

char *clsp::DelayLine<float,double>::reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  int v7 = 0;
  std::vector<float>::assign((char **)(a1 + 16), (v2 - v3) >> 2, &v7);
  unint64_t v4 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
  int v6 = 0;
  return std::vector<float>::assign((char **)(a1 + 40), v4, &v6);
}

uint64_t DNNVAD_CreateInstance(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (a1) {
    operator new();
  }
  return 4294967246;
}

void sub_1BB63447C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB6343CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t DNNVAD_EnableLegacyVAD(uint64_t a1)
{
  if (!a1) {
    return 4294967246;
  }
  uint64_t v2 = (_OWORD *)(a1 + 280);
  uint64_t v3 = (_OWORD *)(a1 + 272);
  if (*(unsigned char *)(a1 + 464))
  {
    uint64_t v4 = *(void *)(a1 + 408);
    *(void *)(a1 + 400) = &unk_1F14C8070;
    *(void *)(a1 + 408) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  uint64_t result = 0;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  *uint64_t v2 = xmmword_1BB879C60;
  v2[1] = xmmword_1BB879C70;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 312) = 0x3F90624DD2F1A9FCLL;
  *(void *)(a1 + 320) = 0xFFFFFFFFLL;
  *(void *)(a1 + 400) = &unk_1F14C8070;
  *(void *)(a1 + 421) = 0;
  *(_DWORD *)(a1 + 436) = 1;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 440) = -1;
  *(unsigned char *)(a1 + 464) = 1;
  return result;
}

uint64_t DNNVAD_IsInitialized(uint64_t a1, BOOL *a2)
{
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(void *)(a1 + 176) != 0;
    }
  }
  return result;
}

uint64_t DNNVAD_Initialize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (DNNVAD_Initialize::onceToken != -1)
  {
    dispatch_once(&DNNVAD_Initialize::onceToken, &__block_literal_global_20961);
    if (a1) {
      goto LABEL_3;
    }
    return 4294967246;
  }
  if (!a1) {
    return 4294967246;
  }
LABEL_3:
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  memset(buf, 0, sizeof(buf));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)buf);
  std::to_string(&v23, a3);
  std::string::basic_string[abi:ne180100]<0>(v27, "inputSampleRate");
  std::string __p = v23;
  memset(&v23, 0, sizeof(v23));
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v24, (unsigned __int8 *)v27, 1);
  memset(v22, 0, sizeof(v22));
  DSPGraph::Interpreter::compileFile();
  int v6 = (DSPGraph::Graph **)(a1 + 176);
  std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>((void *)(a1 + 176), &v25);
  uint64_t v7 = v25;
  uint64_t v25 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v26 = (void **)v22;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1C185C400](buf);
  if (*v6)
  {
    uint64_t v8 = [NSString stringWithUTF8String:"/Library/Audio/Tunings/Generic/VAD/nnvad.propstrip"];
    CFDictionaryRef PropertyList = (const __CFDictionary *)MetadataDNNVAD_LoadPropertyList(v8);

    DSPGraph::Graph::setPropertyStrip(*v6, PropertyList);
    DSPGraph::Graph::setSliceDuration();
    DSPGraph::Graph::configure(*v6);
    uint64_t v10 = [NSString stringWithUTF8String:"/Library/Audio/Tunings/Generic/VAD/nnvad.austrip"];
    CFDictionaryRef v11 = (const __CFDictionary *)MetadataDNNVAD_LoadPropertyList(v10);

    DSPGraph::Graph::setAUStrip(*v6, v11);
    DSPGraph::Graph::initialize(*v6);
    *(_DWORD *)(a1 + 264) = a3;

    if (*(unsigned char *)(a1 + 464))
    {
      double v12 = (double)a3;
      *(double *)(a1 + 280) = (double)a3;
      if ((double)a3 * 2.5 >= 2.22507386e-308) {
        double v13 = -2.76310211 / (double)a3;
      }
      else {
        double v13 = -INFINITY;
      }
      double v14 = exp(v13);
      if (v13 < -708.4) {
        double v14 = 0.0;
      }
      *(double *)(a1 + 288) = v14;
      if (v12 * 1.24 >= 2.22507386e-308) {
        double v15 = -5.57077039 / v12;
      }
      else {
        double v15 = -INFINITY;
      }
      double v16 = exp(v15);
      if (v15 < -708.4) {
        double v16 = 0.0;
      }
      *(double *)(a1 + 304) = v16;
      *(void *)(a1 + 336) = 0;
      *(_WORD *)(a1 + 328) = 0;
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 360) = 0;
      *(void *)(a1 + 368) = 0;
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      *(void *)(a1 + 320) = 0xFFFFFFFFLL;
      uint64_t v17 = 0xFFFFFFFFLL;
      if (a3 <= 0xBB80)
      {
        int v18 = 1;
        if (a2 >= 0x401)
        {
          unsigned int v19 = a2;
          do
          {
            ++v18;
            BOOL v20 = v19 > 0x801;
            v19 >>= 1;
          }
          while (v20);
        }
        *(_DWORD *)(a1 + 436) = v18;
        operator new();
      }
      *(_DWORD *)(a1 + 440) = -1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "Initialize";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 67;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't initialize due to null dspgraph", buf, 0x12u);
    }
    return 4294956421;
  }
  return v17;
}

void sub_1BB635634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::string **a28,void *__p,uint64_t a30,int __pa,__int16 __p_4,char __p_6,char __p_7,uint8_t buf,int a36,int a37,__int16 a38,__int16 a39,int bufa,int a41,int a42,__int16 a43,__int16 a44,__int16 a45,__int16 a46,int a47,int a48,__int16 a49)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }

  if (a2 == 3)
  {
    long long v55 = __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int v64 = v55[2];
      int v65 = bswap32(v64);
      *(_DWORD *)(v52 + 49) = v65;
      if (((char)v65 - 32) > 0x5E
        || (((__int16)v65 >> 8) - 32) > 0x5E
        || ((v65 << 8 >> 24) - 32) > 0x5E
        || ((v65 >> 24) - 32) > 0x5E)
      {
        std::to_string((std::string *)&a28, v64);
      }
      else
      {
        *(_WORD *)(v52 + 53) = 39;
        LOBYTE(bufa) = 39;
        std::string::basic_string[abi:ne180100]<0>(&a28, (char *)&bufa);
      }
      float v66 = a30 >= 0 ? (std::string **)&a28 : a28;
      uint64_t v67 = (*(uint64_t (**)(_DWORD *))(*(void *)v55 + 16))(v55);
      bufa = 136315906;
      *(void *)(v52 + 52) = "Initialize";
      a43 = 1024;
      *(_DWORD *)(v52 + 62) = 71;
      a46 = 2080;
      *(void *)(v52 + 68) = v66;
      a49 = 2080;
      *(void *)(v52 + 78) = v67;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't initialize due to DSPG exception %s: %s", (uint8_t *)&bufa, 0x26u);
      if (SHIBYTE(a30) < 0) {
        operator delete(a28);
      }
    }
    float v56 = *(std::__shared_weak_count **)(v49 + 184);
    *(void *)(v49 + 176) = 0;
    *(void *)(v49 + 184) = 0;
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    int v57 = v55[2];
    __cxa_end_catch();
    if (!v57) {
      JUMPOUT(0x1BB634820);
    }
LABEL_29:
    JUMPOUT(0x1BB63553CLL);
  }
  double v58 = __cxa_begin_catch(exception_object);
  BOOL v59 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v59)
    {
      uint64_t v60 = (*(uint64_t (**)(void *))(*(void *)v58 + 16))(v58);
      bufa = 136315650;
      *(void *)(v52 + 52) = "Initialize";
      a43 = 1024;
      *(_DWORD *)(v52 + 62) = 75;
      a46 = 2080;
      *(void *)(v52 + 68) = v60;
      float v61 = MEMORY[0x1E4F14500];
      uint64_t v62 = "MetadataDNNVAD:%s:%d: couldn't initialize due to exception: %s";
      uint32_t v63 = 28;
LABEL_25:
      _os_log_error_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, v62, (uint8_t *)&bufa, v63);
    }
  }
  else if (v59)
  {
    bufa = 136315394;
    *(void *)(v52 + 52) = "Initialize";
    a43 = 1024;
    *(_DWORD *)(v52 + 62) = 78;
    float v61 = MEMORY[0x1E4F14500];
    uint64_t v62 = "MetadataDNNVAD:%s:%d: unknown exception";
    uint32_t v63 = 18;
    goto LABEL_25;
  }
  __cxa_end_catch();
  goto LABEL_29;
}

void sub_1BB635A14(uint64_t a1, int a2)
{
  if (a2)
  {
    MEMORY[0x1C185D370](v2, 0x10A1C40BDDD2F36);
    JUMPOUT(0x1BB635A34);
  }
  JUMPOUT(0x1BB635A0CLL);
}

uint64_t DNNVAD_Uninitialize(uint64_t a1)
{
  if (a1) {
    return MetadataDNNVAD::Uninitialize((DSPGraph::Graph **)(a1 + 176));
  }
  else {
    return 4294967246;
  }
}

void sub_1BB635AF0(void *a1)
{
}

uint64_t DNNVAD_Process(uint64_t a1, const float *a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294967246;
  }
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t result = 1;
  if (v4)
  {
    BOOL v20 = a2;
    void v19[2] = 1;
    v19[3] = 4 * a3;
    v19[0] = 1;
    uint64_t v21 = a3;
    long long v8 = *(_OWORD *)(a1 + 216);
    long long v22 = *(_OWORD *)(a1 + 200);
    long long v23 = v8;
    long long v9 = *(_OWORD *)(a1 + 248);
    long long v24 = *(_OWORD *)(a1 + 232);
    long long v25 = v9;
    uint64_t v26 = v19;
    DSPGraph::Graph::preflight();
    DSPGraph::Graph::processMultiple();
    if (*(unsigned char *)(a1 + 464))
    {
      PowerMeter::Process((unsigned __int8 *)(a1 + 272), a2, a3);
      uint64_t v10 = *(VoiceActivityDetector **)(a1 + 408);
      if (v10) {
        BOOL v11 = VoiceActivityDetector::VADProcess<float>(v10, a2, a3, *(_DWORD *)(a1 + 436)) != 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (*(_DWORD *)(a1 + 440)) {
        BOOL v12 = v11;
      }
      else {
        BOOL v12 = 0;
      }
      *(_DWORD *)(a1 + 440) = v12;
      HIDWORD(v22) = 0;
      *(void *)((char *)&v22 + 4) = 0;
      double v13 = *(double *)(a1 + 384);
      if (v13 <= 0.000001) {
        float v14 = -120.0;
      }
      else {
        float v14 = log10(fmax(v13, 2.22507386e-308)) * 20.0;
      }
      uint64_t v15 = 0;
      uint64_t v21 = 0x4706F6462;
      *(float *)&long long v22 = v14;
      *(void *)((char *)&v22 + 4) = 0x473616432;
      char v16 = 1;
      HIDWORD(v22) = v12;
      *(_DWORD *)(a1 + 440) = -1;
      do
      {
        char v17 = v16;
        int v18 = *((_DWORD *)&v21 + 3 * v15);
        if (v18 == 1935762482)
        {
          *(float *)(a1 + 448) = (float)*((unsigned int *)&v21 + 3 * v15 + 2);
        }
        else if (v18 == 1886348386)
        {
          *(_DWORD *)(a1 + 444) = *((_DWORD *)&v21 + 3 * v15 + 2);
        }
        char v16 = 0;
        uint64_t v15 = 1;
      }
      while ((v17 & 1) != 0);
    }
    return 0;
  }
  return result;
}

void sub_1BB635D08(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v4 = v3[2];
      __cxa_end_catch();
      if (!v4) {
        JUMPOUT(0x1BB635BA8);
      }
    }
    else
    {
      __cxa_end_catch();
    }
    JUMPOUT(0x1BB635CD8);
  }
  _Unwind_Resume(a1);
}

uint64_t DNNVAD_GetPowerMeterValue(uint64_t a1, float *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2)
  {
    uint64_t result = 0;
    float v4 = *(float *)(a1 + 444);
    if (!*(unsigned char *)(a1 + 464)) {
      float v4 = 0.0;
    }
    *a2 = v4;
  }
  return result;
}

uint64_t DNNVAD_GetSoundActivityValue(uint64_t a1, float *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2)
  {
    uint64_t result = 0;
    float v4 = *(float *)(a1 + 448);
    if (!*(unsigned char *)(a1 + 464)) {
      float v4 = 0.0;
    }
    *a2 = v4;
  }
  return result;
}

uint64_t DNNVAD_GetSpeechProbabilitySoftValue(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 1936748646);
    }
    else {
      int v6 = 0;
    }
    uint64_t result = 0;
    *a2 = v6;
  }
  return result;
}

void sub_1BB635E30(void *a1)
{
}

uint64_t DNNVAD_GetSpeechProbabilityHardValue(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 1936748642);
    }
    else {
      int v6 = 0;
    }
    uint64_t result = 0;
    *a2 = v6;
  }
  return result;
}

void sub_1BB635EB8(void *a1)
{
}

uint64_t DNNVAD_DestroyInstance(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 464))
    {
      uint64_t v2 = *(void *)(a1 + 408);
      *(void *)(a1 + 400) = &unk_1F14C8070;
      *(void *)(a1 + 408) = 0;
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
    }
    if (*(void *)(a1 + 176)) {
      MetadataDNNVAD::Uninitialize((DSPGraph::Graph **)(a1 + 176));
    }
    uint64_t v3 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    float v4 = *(std::__shared_weak_count **)(a1 + 184);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *(void *)(a1 + 136);
    *(void *)(a1 + 128) = &unk_1F14C8070;
    *(void *)(a1 + 136) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    MEMORY[0x1C185D370](a1, 0x10A0C404F70B4CBLL);
  }
  return 0;
}

uint64_t AUFTSpatialAC::Version(AUFTSpatialAC *this)
{
  return 67072;
}

char *AUFTSpatialAC::GetScopeExtended(AUFTSpatialAC *this, int a2)
{
  uint64_t v2 = (char *)this + 656;
  if (a2 != 1) {
    uint64_t v2 = 0;
  }
  if (a2 == 2) {
    return (char *)this + 704;
  }
  else {
    return v2;
  }
}

uint64_t AUFTSpatialAC::ValidFormat(AUFTSpatialAC *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  BOOL v4 = a4->mBitsPerChannel == 32 && a4->mFormatID == 1819304813;
  unsigned int v5 = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  if (!v4) {
    unsigned int v5 = 0;
  }
  if (a4->mChannelsPerFrame == 1) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t AUFTSpatialAC::SupportedNumChannels(AUFTSpatialAC *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUFTSpatialAC::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUFTSpatialAC::StreamFormatWritable(AUFTSpatialAC *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUFTSpatialAC::SupportsTail(AUFTSpatialAC *this)
{
  return 1;
}

double AUFTSpatialAC::GetTailTime(AUFTSpatialAC *this)
{
  return 0.02;
}

double AUFTSpatialAC::GetLatency(AUFTSpatialAC *this)
{
  return 0.0;
}

uint64_t AUFTSpatialAC::GetParameterValueStrings(AUFTSpatialAC *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result = 0;
  values[33] = *(void **)MEMORY[0x1E4F143B8];
  if (!a2 && a4)
  {
    uint64_t result = 4294956417;
    if (a3 <= 20)
    {
      switch(a3)
      {
        case 0:
          *(_OWORD *)values = xmmword_1E623FE88;
          values[2] = @"LinearMapByGeometry";
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 3, 0);
          goto LABEL_17;
        case 2:
          memcpy(values, &off_1E623FEA0, 0x108uLL);
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 33, 0);
          goto LABEL_17;
        case 5:
          *(_OWORD *)&values[24] = xmmword_1E6240118;
          *(_OWORD *)&values[26] = *(_OWORD *)&off_1E6240128;
          *(_OWORD *)&values[28] = xmmword_1E6240138;
          *(_OWORD *)&values[30] = *(_OWORD *)&off_1E6240148;
          *(_OWORD *)&values[16] = xmmword_1E62400D8;
          *(_OWORD *)&values[18] = *(_OWORD *)&off_1E62400E8;
          *(_OWORD *)&values[20] = xmmword_1E62400F8;
          *(_OWORD *)&values[22] = *(_OWORD *)&off_1E6240108;
          *(_OWORD *)&values[8] = xmmword_1E6240098;
          *(_OWORD *)&values[10] = *(_OWORD *)&off_1E62400A8;
          *(_OWORD *)&values[12] = xmmword_1E62400B8;
          *(_OWORD *)&values[14] = *(_OWORD *)&off_1E62400C8;
          *(_OWORD *)values = xmmword_1E6240058;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E6240068;
          *(_OWORD *)&values[4] = xmmword_1E6240078;
          *(_OWORD *)&values[6] = *(_OWORD *)&off_1E6240088;
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 32, 0);
          goto LABEL_17;
        case 6:
          *(_OWORD *)values = xmmword_1E6240158;
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 2, 0);
          goto LABEL_17;
        default:
          return result;
      }
    }
    else
    {
      switch(a3)
      {
        case 21:
        case 22:
        case 23:
        case 24:
          *(_OWORD *)values = xmmword_1E623FFA8;
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 2, 0);
          break;
        case 25:
        case 29:
          *(_OWORD *)&values[4] = xmmword_1E6240010;
          *(_OWORD *)&values[6] = *(_OWORD *)&off_1E6240020;
          values[8] = "Fixed to FaceDown";
          *(_OWORD *)values = xmmword_1E623FFF0;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E6240000;
          long long v8 = values;
          uint64_t v9 = 9;
          CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
        case 26:
        case 27:
        case 28:
        case 31:
          return result;
        case 30:
          *(_OWORD *)values = xmmword_1E6240038;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E6240048;
          long long v8 = values;
          uint64_t v9 = 4;
          CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
        case 32:
          *(_OWORD *)values = xmmword_1E6240168;
          *(_OWORD *)&values[2] = *(_OWORD *)off_1E6240178;
          CFArrayRef CFArray = CFArrayCreate(0, (const void **)values, 4, 0);
          break;
        default:
          if (a3 != 200 && a3 != 213) {
            return result;
          }
          *(_OWORD *)values = xmmword_1E623FFB8;
          *(_OWORD *)&values[2] = *(_OWORD *)&off_1E623FFC8;
          *(_OWORD *)&values[4] = xmmword_1E623FFD8;
          values[6] = "FaceDown";
          long long v8 = values;
          uint64_t v9 = 7;
          CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<char const*>((uint64_t)&v8);
          break;
      }
LABEL_17:
      CFArrayRef v7 = CFArray;
      uint64_t result = 0;
      *a4 = v7;
    }
  }
  return result;
}

__n128 AUFTSpatialAC::RestoreState(AUFTSpatialAC *this, const void *a2)
{
  if (!ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2))
  {
    ++*((void *)this + 69);
    ++*((void *)this + 71);
    ++*((void *)this + 73);
    result.n128_u64[0] = 0x101010101010101;
    result.n128_u64[1] = 0x101010101010101;
    *(__n128 *)((char *)this + 600) = result;
    *(__n128 *)((char *)this + 616) = result;
  }
  return result;
}

UInt8 *AUFTSpatialAC::SaveExtendedScopes(AUFTSpatialAC *this, __CFData *a2)
{
  ausdk::AUScope::SaveState((AUFTSpatialAC *)((char *)this + 80), a2);

  return ausdk::AUScope::SaveState((AUFTSpatialAC *)((char *)this + 128), a2);
}

uint64_t AUFTSpatialAC::GetParameterInfo(AUFTSpatialAC *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2) {
        return 4294956430;
      }
      AudioUnitParameterValue v5 = 0.0;
      int v6 = -1072693248;
      AudioUnitParameterValue v7 = 2.0;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Indexed;
      CFStringRef v9 = @"(GW) Mode AU is using the drive spatialization";
      AudioUnitParameterValue v10 = 2.0;
      switch(a3)
      {
        case 0:
          goto LABEL_86;
        case 1:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) (TEST ONLY, false for ship) Inject fake meta data";
          goto LABEL_82;
        case 2:
          AudioUnitParameterValue v7 = 1.0;
          CFStringRef v9 = @"(GW) (TEST ONLY) num of users to inject fake meta data";
          goto LABEL_20;
        case 3:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Go to neutral az and el if only one active input stream";
          goto LABEL_85;
        case 4:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Go to neutral az and el if only one active output stream";
          goto LABEL_85;
        case 5:
          AudioUnitParameterValue v7 = 6.0;
          AudioUnitParameterValue v5 = 1.0;
          CFStringRef v9 = @"(GW) Max number of streams assigned to main canvas";
LABEL_20:
          AudioUnitParameterValue v10 = 32.0;
          goto LABEL_86;
        case 6:
          AudioUnitParameterValue v10 = 1.0;
          CFStringRef v9 = @"(GW) Max number of streams assigned to list/roster";
          goto LABEL_85;
        case 7:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Enable pan to adapt to FT window aspect ratio";
          goto LABEL_85;
        case 8:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Enable Azimuth panning when in portrait";
          goto LABEL_85;
        case 9:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Enable Elevation panning when in landscape";
          goto LABEL_85;
        case 10:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          CFStringRef v9 = @"(GW) Minimum azimuth for pan when in portrait";
          goto LABEL_29;
        case 11:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          CFStringRef v9 = @"(GW) Maximum azimuth for pan when in portrait";
          goto LABEL_29;
        case 12:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = -15.0;
          CFStringRef v9 = @"(GW) Minimum azimuth for pan when in landscape";
          goto LABEL_29;
        case 13:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 15.0;
          CFStringRef v9 = @"(GW) Maximum azimuth for pan when in landscape";
LABEL_29:
          AudioUnitParameterValue v10 = 180.0;
          int v14 = -1020002304;
          goto LABEL_67;
        case 14:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = -15.0;
          CFStringRef v9 = @"(GW) Minimum elevation for pan when in portrait";
          goto LABEL_66;
        case 15:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 15.0;
          CFStringRef v9 = @"(GW) Maximum elevation for pan when in portrait";
          goto LABEL_66;
        case 16:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          CFStringRef v9 = @"(GW) Minimum elevation for pan when in landscape";
          goto LABEL_66;
        case 17:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          CFStringRef v9 = @"(GW) Maximum elevation for pan when in landscape";
LABEL_66:
          AudioUnitParameterValue v10 = 90.0;
          int v14 = -1028390912;
LABEL_67:
          AudioUnitParameterValue v5 = *(float *)&v14;
          goto LABEL_86;
        case 18:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 1.0;
          AudioUnitParameterValue v10 = 10.0;
          CFStringRef v9 = @"(GW) Desired render distance (m)";
          goto LABEL_86;
        case 19:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 20.0;
          CFStringRef v9 = @"(GW) Desired reverb-blend (shared with all users)";
          goto LABEL_55;
        case 20:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v10 = 4.0;
          CFStringRef v9 = @"(GW) Exponent for energy values for (X,Y) weighting";
          goto LABEL_86;
        case 21:
          AudioUnitParameterValue v10 = 1.0;
          CFStringRef v9 = @"(GW) Enable(true)/disable(false) single-user decorrelation, left channel";
          goto LABEL_82;
        case 22:
          AudioUnitParameterValue v10 = 1.0;
          CFStringRef v9 = @"(GW) Enable(true)/disable(false) single-user decorrelation, right channel";
          goto LABEL_82;
        case 23:
          AudioUnitParameterValue v10 = 1.0;
          CFStringRef v9 = @"(GW) Enable(true)/disable(false) multi-user decorrelation, left channel";
          goto LABEL_82;
        case 24:
          AudioUnitParameterValue v10 = 1.0;
          CFStringRef v9 = @"(GW) Enable(true)/disable(false) multi-user decorrelation, right channel";
          goto LABEL_82;
        case 25:
          AudioUnitParameterValue v7 = -1.0;
          AudioUnitParameterValue v10 = 6.0;
          AudioUnitParameterValue v5 = -2.0;
          CFStringRef v9 = @"(GW) Playback output orientation control (-1==use param 200, -2==use param 213)";
          goto LABEL_86;
        case 26:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) (true) Enable switching off 2nd EC ref in 1:1 FaceTime";
          goto LABEL_82;
        case 27:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) (true) Enable switching off 3rd EC ref in 1:1 FaceTime";
          goto LABEL_82;
        case 28:
          int v6 = 1074790400;
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Fake portrait panning with landscape (some iPhones)";
          goto LABEL_82;
        case 29:
          AudioUnitParameterValue v7 = -1.0;
          AudioUnitParameterValue v10 = 6.0;
          AudioUnitParameterValue v5 = -2.0;
          CFStringRef v9 = @"(GW) Screen orientation value used for panning control (-1==use param 200, -2==use param 213)";
          goto LABEL_86;
        case 30:
          AudioUnitParameterValue v7 = 1.0;
          AudioUnitParameterValue v10 = 3.0;
          CFStringRef v9 = CFSTR("(GW) Use prominence in canvas/grid assignments (0=no, 1=AND InCanvas, 2=OR InCanvas, 3=OnlyProm ");
          goto LABEL_86;
        case 31:
          AudioUnitParameterValue v7 = 8.0;
          CFStringRef v9 = @"(GW) Max prominence value for a stream to be assigned to canvas/grid";
          int v15 = 1148846080;
          goto LABEL_56;
        case 32:
          AudioUnitParameterValue v10 = 3.0;
          CFStringRef v9 = @"(GW) Center client on missing meta:0:ignore, 1:Cx=Cy=0, 2=XorY=0, 3:Cx=Cy=0||(X==0)||(Y==0).";
          AudioUnitParameterValue v7 = 3.0;
          goto LABEL_86;
        case 33:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Use U+1 specific tuning values for gain, reverb and distance";
          goto LABEL_82;
        case 34:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) Use U+1 specific tuning only if Cx=Cy=0";
LABEL_82:
          AudioUnitParameterValue v7 = 0.0;
          break;
        case 35:
          AudioUnitParameterValue v10 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"(GW) If using U+1 tuning, interpolate U++/U+1 in transitions";
LABEL_85:
          AudioUnitParameterValue v7 = 1.0;
          break;
        case 36:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.5;
          AudioUnitParameterValue v10 = 5.0;
          CFStringRef v9 = @"(GW) Interpolation time in transitons (sec)";
          break;
        case 37:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 1.0;
          AudioUnitParameterValue v10 = 10.0;
          CFStringRef v9 = @"(GW) U+1 specific render distance (m)";
          break;
        case 38:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 20.0;
          CFStringRef v9 = @"(GW) U+1 reverb-blend";
LABEL_55:
          int v15 = 1120403456;
LABEL_56:
          AudioUnitParameterValue v10 = *(float *)&v15;
          break;
        case 39:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          AudioUnitParameterValue v10 = 20.0;
          AudioUnitParameterValue v5 = -20.0;
          CFStringRef v9 = @"(GW) U+1 specific gain (dB)";
          break;
        case 40:
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
          AudioUnitParameterValue v7 = 0.0;
          AudioUnitParameterValue v10 = 20.0;
          AudioUnitParameterValue v5 = -20.0;
          CFStringRef v9 = @"(GW) U++ specific gain (dB)";
          break;
        default:
          switch(a3)
          {
            case 200:
              AudioUnitParameterValue v7 = 1.0;
              AudioUnitParameterValue v10 = 6.0;
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Indexed;
              CFStringRef v9 = @"(GW) Assumed orientation of device ";
              goto LABEL_86;
            case 201:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) Geo model screen width in cm landscape (cm)";
              int v16 = 1107951616;
              goto LABEL_61;
            case 202:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) Geo model screen height in cm in landscape (cm)";
              int v16 = 1101791232;
LABEL_61:
              AudioUnitParameterValue v7 = *(float *)&v16;
              int v17 = 1140457472;
              goto LABEL_63;
            case 203:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) Geo model user viewing distance from screen (cm)";
              AudioUnitParameterValue v7 = 60.0;
              int v17 = 1148846080;
LABEL_63:
              AudioUnitParameterValue v10 = *(float *)&v17;
              AudioUnitParameterValue v5 = 0.01;
              goto LABEL_86;
            case 204:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              AudioUnitParameterValue v7 = 0.0;
              CFStringRef v9 = @"(GW) Rel az of eye->screen plane to speaker 0 deg az(deg)";
              goto LABEL_66;
            case 205:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              AudioUnitParameterValue v7 = 0.0;
              CFStringRef v9 = @"(GW) Rel el of eye->screen plane to speaker 0 deg el(deg)";
              goto LABEL_66;
            case 206:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              AudioUnitParameterValue v5 = 1.0;
              CFStringRef v9 = @"(GW) Device screen width in points ";
              AudioUnitParameterValue v7 = 3450.0;
              goto LABEL_70;
            case 207:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              AudioUnitParameterValue v5 = 1.0;
              CFStringRef v9 = @"(GW) Device screen height in points ";
              AudioUnitParameterValue v7 = 2150.0;
LABEL_70:
              AudioUnitParameterValue v10 = 10000.0;
              goto LABEL_86;
            case 208:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) FT window x-position in points (from top left corner)";
              goto LABEL_73;
            case 209:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) FT window y-position in points  (from top left corner)";
LABEL_73:
              AudioUnitParameterValue v10 = 10000.0;
              goto LABEL_82;
            case 210:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) FT window width in points ";
              AudioUnitParameterValue v7 = 345.0;
              goto LABEL_76;
            case 211:
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
              CFStringRef v9 = @"(GW) FT window height in points ";
              AudioUnitParameterValue v7 = 215.0;
LABEL_76:
              AudioUnitParameterValue v10 = 10000.0;
              AudioUnitParameterValue v5 = 0.001;
              goto LABEL_86;
            case 212:
              AudioUnitParameterValue v10 = 1.0;
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
              CFStringRef v9 = @"(G) Voice activity";
              goto LABEL_82;
            case 213:
              AudioUnitParameterValue v7 = 1.0;
              AudioUnitParameterValue v10 = 6.0;
              AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Indexed;
              CFStringRef v9 = @"(GW) Assumed orientation of user interface ";
              goto LABEL_86;
            default:
              switch(a3)
              {
                case 400:
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
                  int v6 = 1074790400;
                  AudioUnitParameterValue v10 = 1.0;
                  CFStringRef v9 = @"(GR) Control output for decorrelator, left channel";
                  goto LABEL_82;
                case 401:
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
                  int v6 = 1074790400;
                  AudioUnitParameterValue v10 = 1.0;
                  CFStringRef v9 = @"(GR) Control output for decorrelator, right channel";
                  goto LABEL_82;
                case 402:
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
                  int v6 = 1074790400;
                  AudioUnitParameterValue v7 = 1.0;
                  AudioUnitParameterValue v10 = 6.0;
                  CFStringRef v9 = @"(GR) Monitor of internal screen orientation within controller";
                  goto LABEL_86;
                case 403:
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
                  int v6 = 1074790400;
                  CFStringRef v9 = @"(GR) Numer of active streams detected";
                  AudioUnitParameterValue v10 = 33.0;
                  goto LABEL_82;
                case 404:
                  int v6 = 1074790400;
                  AudioUnitParameterValue v10 = 1.0;
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
                  CFStringRef v9 = @"(GR) Enable(true)/disable(false) the 2nd EC ref";
                  goto LABEL_85;
                case 405:
                  int v6 = 1074790400;
                  AudioUnitParameterValue v10 = 1.0;
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
                  CFStringRef v9 = @"(GR) Enable(true)/disable(false) the 3rd EC ref";
                  goto LABEL_85;
                case 406:
                  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
                  int v6 = 1074790400;
                  AudioUnitParameterValue v7 = 1.0;
                  AudioUnitParameterValue v10 = 6.0;
                  CFStringRef v9 = @"(GR) Monitor of internal audio render orientation within controller";
                  goto LABEL_86;
                default:
                  return 4294956418;
              }
          }
      }
      goto LABEL_86;
    }
    int v12 = a3 - 600;
    if ((a3 - 600) < 9)
    {
      CFStringRef v9 = off_1E62401E8[v12];
      AudioUnitParameterUnit v8 = dword_1BB8AD464[v12];
      AudioUnitParameterValue v5 = flt_1BB8AD488[v12];
      AudioUnitParameterValue v10 = flt_1BB8AD4AC[v12];
      AudioUnitParameterValue v7 = flt_1BB8AD4D0[v12];
      int v6 = dword_1BB8AD4F4[v12];
      goto LABEL_86;
    }
    return 4294956418;
  }
  int v11 = a3 - 800;
  if ((a3 - 800) >= 0xC) {
    return 4294956418;
  }
  CFStringRef v9 = off_1E6240230[v11];
  AudioUnitParameterUnit v8 = dword_1BB8AD518[v11];
  AudioUnitParameterValue v5 = flt_1BB8AD548[v11];
  AudioUnitParameterValue v10 = flt_1BB8AD578[v11];
  AudioUnitParameterValue v7 = flt_1BB8AD5A8[v11];
  int v6 = 1074790400;
LABEL_86:
  buffer->cfNameString = v9;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->clumpID = 0;
  AudioUnitParameterOptions flags = buffer->flags;
  buffer->unit = v8;
  buffer->minValue = v5;
  buffer->maxValue = v10;
  buffer->defaultValue = v7;
  buffer->AudioUnitParameterOptions flags = flags | v6;
  return result;
}

uint64_t AUFTSpatialAC::GetParameterList(AUFTSpatialAC *this, int a2, unsigned int *a3, unsigned int *a4)
{
  switch(a2)
  {
    case 0:
      if (!a3)
      {
        unsigned int v4 = 62;
        goto LABEL_11;
      }
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
      *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
      *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
      *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
      *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
      *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
      *((_OWORD *)a3 + 7) = xmmword_1BB87A9E0;
      *((_OWORD *)a3 + 8) = xmmword_1BB87A9F0;
      *((_OWORD *)a3 + 9) = xmmword_1BB87B630;
      unsigned int v4 = 62;
      unsigned int v5 = 406;
      unsigned int v6 = 405;
      unsigned int v7 = 404;
      unsigned int v8 = 403;
      unsigned int v9 = 402;
      unsigned int v10 = 401;
      unsigned int v11 = 400;
      *((_OWORD *)a3 + 10) = xmmword_1BB87B950;
      *((_OWORD *)a3 + 11) = xmmword_1BB87B960;
      unsigned int v12 = 213;
      uint64_t v13 = 61;
      uint64_t v14 = 60;
      uint64_t v15 = 59;
      *((_OWORD *)a3 + 12) = xmmword_1BB87B970;
      uint64_t v16 = 58;
      uint64_t v17 = 57;
      uint64_t v18 = 56;
      uint64_t v19 = 55;
      uint64_t v20 = 54;
      *((void *)a3 + 26) = 0xD4000000D3;
      goto LABEL_10;
    case 2:
      if (!a3)
      {
        unsigned int v4 = 12;
        goto LABEL_11;
      }
      unsigned int v4 = 12;
      unsigned int v5 = 811;
      unsigned int v6 = 810;
      *(_OWORD *)a3 = xmmword_1BB87B940;
      unsigned int v7 = 809;
      unsigned int v8 = 808;
      unsigned int v9 = 807;
      unsigned int v10 = 806;
      unsigned int v11 = 805;
      unsigned int v12 = 804;
      uint64_t v13 = 11;
      uint64_t v14 = 10;
      uint64_t v15 = 9;
      uint64_t v16 = 8;
      uint64_t v17 = 7;
      uint64_t v18 = 6;
      uint64_t v19 = 5;
      uint64_t v20 = 4;
      goto LABEL_10;
    case 1:
      if (!a3)
      {
        unsigned int v4 = 9;
        goto LABEL_11;
      }
      unsigned int v4 = 9;
      *a3 = 600;
      unsigned int v5 = 608;
      unsigned int v6 = 607;
      unsigned int v7 = 606;
      unsigned int v8 = 605;
      unsigned int v9 = 604;
      unsigned int v10 = 603;
      unsigned int v11 = 602;
      unsigned int v12 = 601;
      uint64_t v13 = 8;
      uint64_t v14 = 7;
      uint64_t v15 = 6;
      uint64_t v16 = 5;
      uint64_t v17 = 4;
      uint64_t v18 = 3;
      uint64_t v19 = 2;
      uint64_t v20 = 1;
LABEL_10:
      a3[v20] = v12;
      a3[v19] = v11;
      a3[v18] = v10;
      a3[v17] = v9;
      a3[v16] = v8;
      a3[v15] = v7;
      a3[v14] = v6;
      a3[v13] = v5;
LABEL_11:
      uint64_t result = 0;
      *a4 = v4;
      return result;
  }
  return 4294956430;
}

uint64_t AUFTSpatialAC::SetBusCount(AUFTSpatialAC *this, int a2, unsigned int a3)
{
  unsigned int v3 = a3 - 1;
  if (a2 == 1 && v3 <= 0x1F)
  {
    unsigned int v4 = (AUFTSpatialAC *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  uint64_t v5 = 4294956445;
  if (a2 == 2 && v3 <= 0x1F)
  {
    unsigned int v4 = (AUFTSpatialAC *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

BOOL AUFTSpatialAC::BusCountWritable(AUFTSpatialAC *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUFTSpatialAC::Render(AUFTSpatialAC *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = (AUFTSpatialAC *)((char *)this + 80);
  while (1)
  {
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v9 >= v12) {
      break;
    }
    uint64_t Element = ausdk::AUScope::GetElement(v10, v9);
    if (Element && *(_DWORD *)(Element + 172))
    {
      uint64_t v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v9, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v8 = 1;
    }
    uint64_t v9 = (v9 + 1);
  }
  unint64_t v16 = 0;
  memset(v31, 0, sizeof(v31));
  do
  {
    uint64_t v17 = *((void *)this + 21);
    if (v17) {
      LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v16 >= v18)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v19 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 128), v16);
      uint64_t v20 = ausdk::AUIOElement::PrepareBuffer(v19, a4);
    }
    *((void *)v31 + v16++) = v20;
  }
  while (v16 != 32);
  if (v8) {
    return 0;
  }
  unint64_t v21 = 0;
  memset(v30, 0, sizeof(v30));
  do
  {
    uint64_t v22 = *((void *)this + 15);
    if (v22) {
      LODWORD(v23) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
    }
    else {
      uint64_t v23 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v21 >= v23)
    {
      uint64_t BufferList = 0;
    }
    else
    {
      uint64_t v24 = ausdk::AUScope::SafeGetElement(v10, v21);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v24 + 144));
    }
    *((void *)v30 + v21++) = BufferList;
  }
  while (v21 != 32);
  uint64_t v26 = *((void *)this + 15);
  if (v26) {
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  else {
    uint64_t v27 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v28 = *((void *)this + 21);
  if (v28) {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  else {
    uint64_t v29 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  return (*(uint64_t (**)(AUFTSpatialAC *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(void *)this + 184))(this, a2, a4, v27, v30, v29, v31);
}

uint64_t AUFTSpatialAC::ProcessMultipleBufferLists(AUFTSpatialAC *this, unsigned int *a2, vDSP_Length __N, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unsigned int v9 = __N;
  float __C = 0.0;
  uint64_t v11 = *((void *)this + 69);
  if (*((void *)this + 70) != v11)
  {
    AUFTSpatialAC::UpdateGlobalVariableState((float32x2_t *)this);
    *((void *)this + 70) = v11;
    *((void *)this + 72) = *((void *)this + 71);
    *((unsigned char *)this + 752) = 1;
    uint64_t v13 = *((void *)this + 73);
    if (*((void *)this + 74) == v13)
    {
LABEL_69:
      AUFTSpatialAC::MakeDependentPositionData((float32x2_t *)this);
      goto LABEL_70;
    }
    goto LABEL_8;
  }
  uint64_t v12 = *((void *)this + 71);
  if (*((void *)this + 72) != v12)
  {
    AUFTSpatialAC::UpdateGlobalMetaVariableState(this);
    *((void *)this + 72) = v12;
    *((unsigned char *)this + 752) = 1;
    uint64_t v13 = *((void *)this + 73);
    if (*((void *)this + 74) == v13) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v13 = *((void *)this + 73);
  if (*((void *)this + 74) != v13)
  {
LABEL_8:
    AUFTSpatialAC::UpdateInputVariableState(this);
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *((void *)this + 74) = v13;
    *((unsigned char *)this + 752) = 1;
LABEL_9:
    buf[0] = 0;
    unsigned __int8 v354 = 0;
    LOBYTE(v353) = 0;
    unsigned __int8 v352 = 0;
    float v14 = 0.0;
    uint64_t v15 = *((unsigned int *)this + 159);
    v342 = a7;
    unsigned int v344 = v9;
    UInt32 v346 = a5;
    if (!v15)
    {
LABEL_13:
      int v18 = 0;
      int v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      BOOL v23 = 0;
      BOOL v24 = 0;
      float v25 = 0.0;
LABEL_51:
      long long v38 = (uint64_t *)*((void *)this + 668);
      v39.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      int v40 = v24 | 2;
      BOOL v341 = v23;
      if (!v23) {
        int v40 = v24;
      }
      if (v19) {
        v40 |= 4u;
      }
      if (v18) {
        v40 |= 8u;
      }
      if (v20) {
        v40 |= 0x10u;
      }
      if (v21) {
        v40 |= 0x20u;
      }
      if (v22) {
        int v41 = v40 | 0x40;
      }
      else {
        int v41 = v40;
      }
      if (v41)
      {
        BOOL v42 = v24;
        uint64_t v43 = v20;
        uint64_t v44 = v21;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v39.__d_.__rep_;
        AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)v39.__d_.__rep_);
        size_t v46 = (std::__shared_weak_count *)v38[1];
        if (!v46 || (__Na = *v38, (std::string::size_type v47 = std::__shared_weak_count::lock(v46)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        *(void *)&long long v48 = __Na;
        *((void *)&v48 + 1) = v47;
        *(_OWORD *)__Nc = v48;
        uint64_t v49 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 112, 8);
        *(void *)(v49 + 8) = 0;
        *(_DWORD *)(v49 + 16) = 0;
        *(_OWORD *)(v49 + 24) = *(_OWORD *)__Nc;
        *(float *)(v49 + 40) = v14;
        *(unsigned char *)(v49 + 44) = v42;
        *(float *)(v49 + 48) = v25;
        *(unsigned char *)(v49 + 52) = v341;
        *(_DWORD *)(v49 + 56) = *(_DWORD *)buf;
        *(unsigned char *)(v49 + 60) = v19;
        *(_DWORD *)(v49 + 64) = v353;
        *(unsigned char *)(v49 + 68) = v18;
        *(void *)(v49 + 72) = v43;
        *(void *)(v49 + 80) = v44;
        *(void *)(v49 + 88) = v22;
        *(_DWORD *)(v49 + 96) = v41;
        *(void *)(v49 + 104) = rep;
        *(void *)uint64_t v49 = &unk_1F14AD7A8;
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v49);
      }
      a7 = v342;
      unsigned int v9 = v344;
      a5 = v346;
      goto LABEL_69;
    }
    unint64_t v16 = (unsigned __int8 *)this + 1040;
    while (1)
    {
      int v17 = *v16;
      v16 += 44;
      if (v17) {
        break;
      }
      if (!--v15) {
        goto LABEL_13;
      }
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 0xD2u);
    uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
    float v29 = ausdk::AUElement::GetParameter(v28, 0xD3u);
    BOOL v24 = Parameter <= 0.0;
    if (Parameter > 0.0) {
      float v14 = 0.0;
    }
    else {
      float v14 = Parameter;
    }
    BOOL v23 = v29 <= 0.0;
    if (v29 > 0.0) {
      float v25 = 0.0;
    }
    else {
      float v25 = v29;
    }
    if ((*((_DWORD *)this + 230) & 0x80000000) != 0 && v29 > 0.0 && Parameter > 0.0)
    {
      int v30 = *((_DWORD *)this + 200);
      if ((v30 - 1) > 1)
      {
        if ((v30 - 3) > 1 || v29 <= Parameter) {
          goto LABEL_30;
        }
        long long v31 = &v352;
        uint64_t v32 = (uint8_t *)&v353;
        goto LABEL_29;
      }
      if (Parameter > v29)
      {
        long long v31 = &v354;
        uint64_t v32 = buf;
LABEL_29:
        *(float *)uint64_t v32 = v29 / Parameter;
        *long long v31 = 1;
      }
    }
LABEL_30:
    uint64_t v33 = *((unsigned int *)this + 159);
    if (v33)
    {
      unint64_t v34 = 0;
      uint64_t v20 = 0;
      uint64_t v22 = 0;
      uint64_t v21 = 0;
      BOOL v35 = Parameter <= 0.0;
      if (v29 <= 0.0) {
        BOOL v35 = 1;
      }
      long long v36 = (float *)((char *)this + 1052);
      do
      {
        if (*((unsigned char *)v36 - 12))
        {
          if (Parameter <= 0.0 || *(v36 - 1) <= Parameter)
          {
            int v37 = 0;
          }
          else
          {
            if (v34 >= 0x20) {
              goto LABEL_481;
            }
            int v37 = 1;
            v20 |= 1 << v34;
          }
          if (v29 > 0.0)
          {
            if (*v36 <= v29)
            {
              if (((v37 | v35) & 1) == 0)
              {
                if (v34 >= 0x20) {
LABEL_481:
                }
                  std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
                v22 |= 1 << v34;
              }
            }
            else
            {
              if (v34 >= 0x20) {
                goto LABEL_481;
              }
              v21 |= 1 << v34;
            }
          }
        }
        ++v34;
        v36 += 11;
      }
      while (v33 != v34);
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v20 = 0;
    }
    int v19 = v354;
    int v18 = v352;
    goto LABEL_51;
  }
LABEL_70:
  if (*((_DWORD *)this + 84) < v9) {
    return 4294956422;
  }
  if (*a5)
  {
    if ((*a5)->mNumberBuffers != 1)
    {
      if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
        dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
      }
      uint64_t v51 = AUFTSpatialAC::getAUSLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956428;
      }
      *(_WORD *)AudioTimeStamp buf = 0;
      uint64_t v52 = "Input bus must be mono\n";
      goto LABEL_278;
    }
    uint64_t v347 = a5;
    if (*a7)
    {
      if ((*a7)->mNumberBuffers != 1)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
        }
        uint64_t v51 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return 4294956428;
        }
        *(_WORD *)AudioTimeStamp buf = 0;
        uint64_t v52 = "Output bus must be mono\n";
LABEL_278:
        _os_log_error_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, v52, buf, 2u);
        return 4294956428;
      }
    }
    else
    {
      if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
        dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
      }
      float v54 = AUFTSpatialAC::getAUSLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)AudioTimeStamp buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_ERROR, "At least one output bus, bus1, is need. It is a required output\n", buf, 2u);
      }
    }
    if (*((unsigned char *)this + 752))
    {
      unint64_t v55 = *((unsigned int *)this + 194);
      for (unint64_t i = *((unsigned int *)this + 158); v55 < i; ++v55)
      {
        int v57 = a7[v55];
        if (v57)
        {
          vDSP_vfill((const float *)this + 161, (float *)v57->mBuffers[0].mData, 1, v9);
          unint64_t i = *((unsigned int *)this + 158);
        }
      }
    }
    double v58 = (char *)this + 2472;
    float v59 = *((float *)this + 135);
    if (v59 == 0.0)
    {
      float v61 = 50.0;
    }
    else
    {
      float v60 = (float)v9;
      if ((float)v9 < 1.0) {
        float v60 = 1.0;
      }
      float v61 = v59 / v60;
    }
    *((float *)this + 1331) = v61;
    unsigned int v345 = v9;
    if (*((unsigned char *)this + 544))
    {
      LODWORD(v62) = *((_DWORD *)this + 158);
      if (v62)
      {
        uint32_t v63 = (char *)this + 2488;
        uint64_t v64 = *((unsigned int *)this + 158);
        do
        {
          unsigned char *v63 = 0;
          v63 += 24;
          --v64;
        }
        while (v64);
      }
      uint64_t v65 = *((unsigned int *)this + 159);
      if (v65)
      {
        uint64_t v66 = 0;
        unsigned int v67 = 0;
        unsigned int v68 = *((_DWORD *)this + 194);
        float v69 = (char *)this + 1040;
        do
        {
          if (v67 >= v68) {
            unsigned int v67 = 0;
          }
          *((_DWORD *)this + v66 + 1029) = v67;
          *((_DWORD *)v69 - 1) = v66;
          unsigned char *v69 = 1;
          v69 += 44;
          *((unsigned char *)this + 24 * v67++ + 2488) = 1;
          ++v66;
        }
        while (v65 != v66);
      }
      if (v65 >= v62) {
        uint64_t v70 = v62;
      }
      else {
        uint64_t v70 = v65;
      }
      if (v70)
      {
        do
        {
          v58[16] = 1;
          *(_OWORD *)double v58 = xmmword_1BB875850;
          v58 += 24;
          --v70;
        }
        while (v70);
      }
      if (v62 > v65)
      {
        double v71 = (char *)this + 24 * v65 + 2472;
        int v72 = v62;
        do
        {
          v71[16] = 0;
          *(_OWORD *)double v71 = xmmword_1BB87B980;
          v71 += 24;
          --v72;
        }
        while (v65 != v72);
      }
      goto LABEL_319;
    }
    if (*((float *)this + 223) == 0.0)
    {
      vDSP_vfill((const float *)this + 162, (float *)this + 1197, 1, 0x20uLL);
    }
    else if (*((_DWORD *)this + 159))
    {
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      unint64_t v75 = (char *)this + 4788;
      do
      {
        float v76 = 0.0;
        float v77 = 0.0;
        if (v75[v73 - 3748])
        {
          double v78 = v347[v74];
          if (v78)
          {
            vDSP_svesq((const float *)v78->mBuffers[0].mData, 1, &__C, v9);
            float v77 = powf(__C, *((float *)this + 223));
          }
        }
        float __C = v77;
        if ((LODWORD(v77) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
          float v76 = (float)(v77 * 0.4) + (float)(*(float *)&v75[4 * v74] * 0.6);
        }
        *(float *)&v75[4 * v74++] = v76;
        v73 += 44;
      }
      while (v74 < *((unsigned int *)this + 159));
    }
    if (*((unsigned char *)this + 760))
    {
      if (*((unsigned char *)this + 752))
      {
        uint64_t v79 = *((unsigned int *)this + 211);
        if (v79)
        {
          float v80 = *((float *)this + 250) / (float)v79;
          std::string::size_type v81 = (_DWORD *)((char *)this + 4116);
          float v82 = (float *)((char *)this + 1040);
          float v83 = v80 * 0.5;
          uint64_t v84 = *((unsigned int *)this + 211);
          do
          {
            *(_WORD *)float v82 = 257;
            *((unsigned char *)v82 + 32) = 1;
            *((unsigned char *)v82 + 2) = 1;
            v82[2] = v83;
            float v83 = v80 + v83;
            v82[3] = 0.0;
            v82[4] = 0.0;
            v82 += 11;
            *v81++ = 32;
            --v84;
          }
          while (v84);
        }
        uint64_t v85 = *((unsigned int *)this + 159);
        if (v79 < v85)
        {
          uint64_t v86 = v85 - v79;
          float v87 = (_DWORD *)((char *)this + 4 * v79 + 4116);
          float v88 = (char *)this + 44 * v79 + 1040;
          do
          {
            *(_WORD *)float v88 = 0;
            v88[32] = 0;
            v88[2] = 0;
            *((void *)v88 + 1) = 0;
            *((_DWORD *)v88 + 4) = 0;
            v88 += 44;
            *v87++ = 32;
            --v86;
          }
          while (v86);
        }
      }
      *((unsigned char *)this + 752) = 0;
    }
    uint64_t v89 = *((unsigned int *)this + 158);
    if (v89)
    {
      float v90 = (char *)this + 2488;
      float v91 = (_DWORD *)((char *)this + 3464);
      do
      {
        *(v91 - 32) = 0;
        *v91++ = 0;
        unsigned char *v90 = 0;
        v90 += 24;
        --v89;
      }
      while (v89);
    }
    uint64_t v65 = *((unsigned int *)this + 159);
    if (v65)
    {
      float v92 = (char *)this + 4372;
      unint64_t v93 = (_DWORD *)((char *)this + 4660);
      uint64_t v94 = *((unsigned int *)this + 159);
      do
      {
        *(v93 - 64) = 32;
        *(v93 - 32) = 32;
        *v93++ = 32;
        *v92++ = 0;
        --v94;
      }
      while (v94);
      int v95 = 0;
      *((_DWORD *)this + 1026) = 0;
      float v96 = (_DWORD *)((char *)this + 4116);
      float v97 = (unsigned __int8 *)this + 1040;
      uint64_t v98 = v65;
      do
      {
        int v99 = *v97;
        v97 += 44;
        if (v99) {
          *((_DWORD *)this + 1026) = ++v95;
        }
        else {
          *float v96 = 32;
        }
        ++v96;
        --v98;
      }
      while (v98);
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      unsigned int v102 = 0;
      unsigned int v103 = 0;
      float v104 = (char *)this + 4372;
      do
      {
        if (*((unsigned char *)this + v100 + 1040) && *((unsigned char *)this + v100 + 1072))
        {
          *((_DWORD *)this + v98 + 1101) = v101;
          LODWORD(v98) = v98 + 1;
          uint64_t v105 = *(unsigned int *)&v104[4 * v101 - 256];
          if (v105 >= *((_DWORD *)this + 191))
          {
            *((_DWORD *)this + v102++ + 1133) = v101;
          }
          else
          {
            v104[v101] = 1;
            ++*((_DWORD *)this + v105 + 834);
            *((_DWORD *)this + v103++ + 1165) = v101;
          }
        }
        ++v101;
        v100 += 44;
      }
      while (v65 != v101);
    }
    else
    {
      unsigned int v103 = 0;
      unsigned int v102 = 0;
      *((_DWORD *)this + 1026) = 0;
    }
    uint64_t v106 = *((unsigned int *)this + 191);
    unsigned int v107 = 0;
    uint64_t v108 = (v106 - 1);
    if ((int)v106 - 1 >= 0)
    {
      do
      {
        if (!*((_DWORD *)this + v108 + 834)) {
          *((_DWORD *)this + v107++ + 866) = v108;
        }
        BOOL v147 = v108-- <= 0;
      }
      while (!v147);
      if (!v102 && v107)
      {
        if (v106)
        {
          uint64_t v109 = 0;
          unsigned int v110 = 0;
          unsigned __int8 v111 = 0;
          unsigned int v112 = 0;
          do
          {
            unsigned int v113 = *((_DWORD *)this + v109 + 834);
            BOOL v114 = v113 >= v112;
            BOOL v115 = v113 >= v112;
            if (v113 > v112) {
              unsigned int v112 = *((_DWORD *)this + v109 + 834);
            }
            v111 |= v115;
            if (v114) {
              unsigned int v110 = v109;
            }
            ++v109;
          }
          while (v106 != v109);
          if (((v112 > 1) & v111) != 0)
          {
            if (!v65) {
              goto LABEL_238;
            }
            unsigned int v116 = 0;
            uint64_t v117 = (float *)((char *)this + 1052);
            float v118 = (int *)((char *)this + 4116);
            float v119 = 0.0;
            uint64_t v120 = v65;
            float v121 = 0.0;
            do
            {
              int v122 = *v118++;
              if (v122 == v110)
              {
                float v121 = v121 + *(v117 - 1);
                float v119 = v119 + *v117;
                ++v116;
              }
              v117 += 11;
              --v120;
            }
            while (v120);
            int v123 = 0;
            unsigned int v124 = 0;
            float v125 = 1.0 / (float)v116;
            float v126 = v121 * v125;
            float v127 = v119 * v125;
            uint64_t v128 = (float *)((char *)this + 1052);
            do
            {
              if (*((unsigned char *)v128 - 12) && *((_DWORD *)this + v120 + 1029) == v110)
              {
                if (((float)((float)((float)(v127 - *v128) * (float)(v127 - *v128))
                            + (float)((float)(v126 - *(v128 - 1)) * (float)(v126 - *(v128 - 1)))) >= -1.0) | (v123 ^ 1) & 1)
                  unsigned int v124 = v120;
                v123 |= ((float)((float)((float)(v127 - *v128) * (float)(v127 - *v128))
                               + (float)((float)(v126 - *(v128 - 1)) * (float)(v126 - *(v128 - 1)))) >= -1.0) | v123 ^ 1;
              }
              ++v120;
              v128 += 11;
            }
            while (v65 != v120);
            if (v123)
            {
              uint64_t v129 = *((unsigned int *)this + v107 + 865);
              *((_DWORD *)this + v124 + 1029) = v129;
              ++*((_DWORD *)this + v129 + 834);
              --*((_DWORD *)this + v110 + 834);
            }
          }
        }
LABEL_232:
        if (v65)
        {
          uint64_t v170 = *((unsigned int *)this + 193);
          uint64_t v171 = v65;
          uint64_t v172 = (_DWORD *)((char *)this + 4116);
          std::string::size_type v173 = (char *)this + 1072;
          do
          {
            if (*(v173 - 32) && !*v173)
            {
              *uint64_t v172 = v170;
              ++*((_DWORD *)this + v170 + 834);
            }
            ++v172;
            v173 += 44;
            --v171;
          }
          while (v171);
        }
LABEL_238:
        uint64_t v62 = *((unsigned int *)this + 158);
        if (v62)
        {
          double v174 = (char *)this + 2488;
          unint64_t v175 = (_DWORD *)((char *)this + 3336);
          uint64_t v176 = *((unsigned int *)this + 158);
          do
          {
            if (*v175++) {
              *double v174 = 1;
            }
            v174 += 24;
            --v176;
          }
          while (v176);
          int v178 = 0;
          *((_DWORD *)this + 1027) = 0;
          std::string::size_type v179 = (unsigned __int8 *)this + 2488;
          uint64_t v180 = v62;
          do
          {
            int v181 = *v179;
            v179 += 24;
            if (v181) {
              *((_DWORD *)this + 1027) = ++v178;
            }
            --v180;
          }
          while (v180);
        }
        else
        {
          int v178 = 0;
          *((_DWORD *)this + 1027) = 0;
        }
        int v182 = *((_DWORD *)this + 1026);
        if (v182 == 1 || v178 == 1)
        {
          *((_DWORD *)this + 256) = *((_DWORD *)this + 224);
          long long v184 = (char *)this + 900;
        }
        else
        {
          *((_DWORD *)this + 256) = *((_DWORD *)this + 226);
          long long v184 = (char *)this + 908;
        }
        *((_DWORD *)this + 257) = *(_DWORD *)v184;
        if (v65)
        {
          uint64_t v185 = 0;
          BOOL v186 = 0;
          uint64_t v187 = (unsigned __int8 *)this + 1040;
          do
          {
            int v188 = *v187;
            v187 += 44;
            if (v188 && ((*((void *)this + 123) >> v185) & 1) != 0) {
              break;
            }
            BOOL v186 = ++v185 >= (unint64_t)v65;
          }
          while (v65 != v185);
        }
        else
        {
          BOOL v186 = 1;
        }
        *((unsigned char *)this + 4112) = 0;
        if (*((unsigned char *)this + 783)
          && (*((unsigned char *)this + 784) == 0 || !v186)
          && (*((unsigned char *)this + 4112) = 1, v182 == 1))
        {
          float v189 = *((float *)this + 235);
          *((float *)this + 1325) = v189;
          float v190 = *((float *)this + 236);
          *((float *)this + 1326) = v190;
          uint64_t v191 = (float *)((char *)this + 948);
        }
        else
        {
          float v189 = *((float *)this + 221);
          *((float *)this + 1325) = v189;
          float v190 = *((float *)this + 222);
          *((float *)this + 1326) = v190;
          uint64_t v191 = (float *)((char *)this + 952);
        }
        float v192 = *v191;
        *((float *)this + 1327) = *v191;
        if (!*((unsigned char *)this + 785))
        {
          *((float *)this + 1328) = v189;
          *((float *)this + 1329) = v190;
          *((float *)this + 1330) = v192;
          goto LABEL_297;
        }
        float v193 = *((float *)this + 1330);
        if (v193 >= v192)
        {
          if (v193 <= v192)
          {
            float v192 = *((float *)this + 1330);
LABEL_280:
            float v196 = *((float *)this + 1328);
            if (v196 >= v189)
            {
              if (v196 <= v189)
              {
                float v189 = *((float *)this + 1328);
LABEL_289:
                float v199 = *((float *)this + 1329);
                if (v199 >= v190)
                {
                  if (v199 <= v190) {
                    goto LABEL_297;
                  }
                  float v201 = v199 - *((float *)this + 1333);
                  if (v201 > v190) {
                    float v190 = v201;
                  }
                }
                else
                {
                  float v200 = v199 + *((float *)this + 1333);
                  if (v200 < v190) {
                    float v190 = v200;
                  }
                }
                *((float *)this + 1329) = v190;
LABEL_297:
                if (!*((_DWORD *)this + 189)
                  || *((unsigned char *)this + 781) && v182 == 1
                  || *((unsigned char *)this + 782) && v178 == 1)
                {
                  if (v62)
                  {
                    float v202 = (_DWORD *)((char *)this + 2492);
                    uint64_t v203 = (int *)((char *)this + 3336);
                    uint64_t v204 = v62;
                    do
                    {
                      int v206 = *v203++;
                      char v205 = v206;
                      if (v206)
                      {
                        uint64_t v207 = *(void *)((char *)this + 828);
                        char v205 = 1;
                        float v208 = v189;
                        int v209 = LODWORD(v192);
                        char v210 = (char *)this + 5316;
                      }
                      else
                      {
                        float v208 = 1.0;
                        uint64_t v207 = 0;
                        int v209 = -1024458752;
                        char v210 = (char *)this + 888;
                      }
                      *((unsigned char *)v202 - 4) = v205;
                      *(void *)(v202 - 5) = v207;
                      *((float *)v202 - 3) = v208;
                      *(v202 - 2) = v209;
                      _DWORD *v202 = *(_DWORD *)v210;
                      v202 += 6;
                      --v204;
                    }
                    while (v204);
                  }
                  goto LABEL_308;
                }
                AUFTSpatialAC::SetRenderTuningValsToUse((uint64_t)this);
                int v233 = *((_DWORD *)this + 189);
                uint64_t v234 = *((unsigned int *)this + 159);
                if (v234)
                {
                  double v235 = (float *)((char *)this + 1064);
                  do
                  {
                    float v236 = *(v235 - 1);
                    float v237 = 1.0;
                    if (v236 > 1.0 || (float v237 = 0.0, v236 < 0.0)) {
                      *(v235 - 1) = v237;
                    }
                    float v238 = 1.0;
                    if (*v235 > 1.0 || (float v238 = 0.0, *v235 < 0.0)) {
                      *double v235 = v238;
                    }
                    v235 += 11;
                    --v234;
                  }
                  while (v234);
                }
                uint64_t v239 = *((unsigned int *)this + 158);
                if (v239)
                {
                  char v240 = (_DWORD *)((char *)this + 3336);
                  do
                  {
                    _DWORD *v240 = 0;
                    v240[64] = 0;
                    v240[96] = 0;
                    ++v240;
                    --v239;
                  }
                  while (v239);
                }
                vDSP_vfill((const float *)this + 161, (float *)this + 994, 1, *((unsigned int *)this + 194));
                float v241 = *((float *)this + 819);
                float v242 = *((float *)this + 818);
                float v243 = *((float *)this + 821);
                float v244 = *((float *)this + 820);
                int v245 = *((_DWORD *)this + 233);
                int v246 = *((unsigned __int8 *)this + 936);
                unsigned int v247 = (v245 - 1) & 0xFFFFFFFD;
                if (v233 == 1)
                {
                  uint64_t v65 = *((unsigned int *)this + 159);
                  if (v65)
                  {
                    uint64_t v293 = 0;
                    double v294 = (float *)((char *)this + 5044);
                    v295 = (float *)((char *)this + 1064);
                    do
                    {
                      if (v245 && (v246 || !v247 && (*((void *)this + 122) & (1 << v293)) != 0))
                      {
                        *double v294 = 0.0;
                        float v296 = 0.0;
                      }
                      else
                      {
                        float v297 = *(v295 - 1);
                        if (v297 < 0.0) {
                          float v297 = 0.0;
                        }
                        if (v297 > 1.0) {
                          float v297 = 1.0;
                        }
                        *double v294 = v242 + (float)(v297 * (float)(v241 - v242));
                        float v298 = 1.0 - *v295;
                        if (v298 < 0.0) {
                          float v298 = 0.0;
                        }
                        if (v298 > 1.0) {
                          float v298 = 1.0;
                        }
                        float v296 = v244 + (float)(v298 * (float)(v243 - v244));
                      }
                      v294[32] = v296;
                      ++v293;
                      ++v294;
                      v295 += 11;
                    }
                    while (v65 != v293);
                    goto LABEL_439;
                  }
                }
                else
                {
                  if (v233 != 2)
                  {
                    LODWORD(v65) = *((_DWORD *)this + 159);
LABEL_439:
                    if (v65)
                    {
                      uint64_t v299 = v65;
                      UInt64 v300 = (float *)((char *)this + 5172);
                      uint64_t v301 = v65;
                      do
                      {
                        float v302 = *(v300 - 32);
                        float v303 = v241;
                        if (v302 > v241 || (float v303 = v242, v302 < v242)) {
                          *(v300 - 32) = v303;
                        }
                        float v304 = v243;
                        if (*v300 > v243 || (float v304 = v244, *v300 < v244)) {
                          *UInt64 v300 = v304;
                        }
                        ++v300;
                        --v301;
                      }
                      while (v301);
                      v305 = (float *)((char *)this + 4116);
                      unint64_t v306 = (unsigned __int8 *)this + 1040;
                      do
                      {
                        int v307 = *v306;
                        v306 += 44;
                        if (v307)
                        {
                          uint64_t v308 = *(unsigned int *)v305;
                          if (v308 < *((_DWORD *)this + 194))
                          {
                            v309 = (char *)this + 4 * v308;
                            ++*((_DWORD *)v309 + 834);
                            float v310 = v305[168] + 1.0e-20;
                            *((float *)v309 + 994) = *((float *)v309 + 994) + v310;
                            *((float *)v309 + 898) = *((float *)v309 + 898) + (float)(v310 * v305[232]);
                            *((float *)v309 + 930) = *((float *)v309 + 930) + (float)(v310 * v305[264]);
                          }
                        }
                        ++v305;
                        --v299;
                      }
                      while (v299);
                    }
                    goto LABEL_453;
                  }
                  float __Nb = *((float *)this + 822);
                  float v248 = *((float *)this + 206);
                  float v340 = atanf((float)(__Nb * 0.5) / v248);
                  float v339 = *((float *)this + 823);
                  float v338 = atanf((float)(v339 * 0.5) / v248);
                  uint64_t v65 = *((unsigned int *)this + 159);
                  if (v65)
                  {
                    uint64_t v249 = 0;
                    std::string v250 = (float *)((char *)this + 5044);
                    std::string v251 = (float *)((char *)this + 1064);
                    do
                    {
                      if (v245 && (v246 || !v247 && (*((void *)this + 122) & (1 << v249)) != 0))
                      {
                        *std::string v250 = 0.0;
                        float v252 = 0.0;
                      }
                      else
                      {
                        float v253 = *(v251 - 1);
                        if (v253 < 0.0) {
                          float v253 = 0.0;
                        }
                        if (v253 <= 1.0) {
                          float v254 = v253 + -0.5;
                        }
                        else {
                          float v254 = 0.5;
                        }
                        float v255 = (float)((float)(v340 + atanf((float)(__Nb * v254) / v248)) * 0.5) / v340;
                        if (v255 < 0.0) {
                          float v255 = 0.0;
                        }
                        if (v255 > 1.0) {
                          float v255 = 1.0;
                        }
                        *std::string v250 = v242 + (float)(v255 * (float)(v241 - v242));
                        float v256 = 1.0 - *v251;
                        if (v256 < 0.0) {
                          float v256 = 0.0;
                        }
                        if (v256 <= 1.0) {
                          float v257 = v256 + -0.5;
                        }
                        else {
                          float v257 = 0.5;
                        }
                        float v258 = (float)((float)(v338 + atanf((float)(v339 * v257) / v248)) * 0.5) / v338;
                        if (v258 < 0.0) {
                          float v258 = 0.0;
                        }
                        if (v258 > 1.0) {
                          float v258 = 1.0;
                        }
                        float v252 = v244 + (float)(v258 * (float)(v243 - v244));
                      }
                      v250[32] = v252;
                      ++v249;
                      ++v250;
                      v251 += 11;
                    }
                    while (v65 != v249);
                    goto LABEL_439;
                  }
                }
LABEL_453:
                uint64_t v62 = *((unsigned int *)this + 158);
                if (v62)
                {
                  uint64_t v311 = 0;
                  uint64_t v312 = 0;
                  do
                  {
                    uint64_t v313 = (float *)((char *)this + v311);
                    if (*(_DWORD *)((char *)this + v311 + 3336))
                    {
                      float v314 = 1.0 / v313[994];
                      v315 = (float *)((char *)this + v312);
                      v315[618] = *((float *)this + 207) + (float)((float)(v313[898] * v314) * *((float *)this + 824));
                      v315[619] = *((float *)this + 208) + (float)((float)(v314 * v313[930]) * *((float *)this + 825));
                      float v316 = *((float *)this + 1328);
                      int v317 = *((_DWORD *)this + 1330);
                      char v318 = 1;
                      v319 = (float *)((char *)this + 5316);
                    }
                    else
                    {
                      char v318 = 0;
                      *(void *)((char *)this + v312 + 2472) = 0;
                      float v316 = 1.0;
                      int v317 = -1024458752;
                      v319 = (float *)((char *)this + 888);
                    }
                    int v320 = (float *)((char *)this + v312);
                    v320[620] = v316;
                    *((_DWORD *)v320 + 621) = v317;
                    *((unsigned char *)v320 + 2488) = v318;
                    v320[623] = *v319;
                    v312 += 24;
                    v311 += 4;
                  }
                  while (24 * v62 != v312);
                  float v321 = (int *)((char *)this + 2476);
                  UInt64 v322 = (_DWORD *)((char *)this + 3336);
                  uint64_t v323 = v62;
                  do
                  {
                    if (*v322++)
                    {
                      float v325 = *((float *)v321 - 1);
                      int v326 = 1127481344;
                      if (v325 > 180.0 || (int v326 = -1020002304, v325 < -180.0)) {
                        *(v321 - 1) = v326;
                      }
                      int v327 = 1119092736;
                      if (*(float *)v321 > 90.0 || (int v327 = -1028390912, *(float *)v321 < -90.0)) {
                        *float v321 = v327;
                      }
                    }
                    v321 += 6;
                    --v323;
                  }
                  while (v323);
                }
LABEL_308:
                int v211 = *((_DWORD *)this + 201);
                if (v211 <= 6)
                {
                  uint64_t v212 = 1 << v211;
                  if ((*((void *)this + 120) & v212) != 0 && v62 != 0)
                  {
                    char v214 = (float *)((char *)this + 2472);
                    uint64_t v215 = v62;
                    do
                    {
                      float *v214 = -*v214;
                      v214 += 6;
                      --v215;
                    }
                    while (v215);
                  }
                  if ((*((void *)this + 121) & v212) != 0)
                  {
                    if (!v62)
                    {
                      char v218 = (_DWORD *)((char *)this + 632);
                      if (v65)
                      {
LABEL_322:
                        uint64_t v219 = 0;
                        unint64_t v220 = 0;
                        char v221 = 0;
                        std::string v222 = (char *)this + 4116;
                        double v223 = v347;
                        do
                        {
                          if (v222[v219 - 3076])
                          {
                            char v224 = v223[v220];
                            if (v224)
                            {
                              uint64_t v225 = *(unsigned int *)&v222[4 * v220];
                              if (v225 < *((_DWORD *)this + 194))
                              {
                                if (*((unsigned char *)this + 24 * v225 + 2488))
                                {
                                  unsigned __int8 v226 = a7[v225];
                                  if (v226)
                                  {
                                    double v227 = (char *)this + v225;
                                    mData = (float *)v226->mBuffers[0].mData;
                                    long long v229 = (const float *)v224->mBuffers[0].mData;
                                    if (v227[3304])
                                    {
                                      char v221 = 1;
                                      vDSP_vadd(mData, 1, v229, 1, (float *)v226->mBuffers[0].mData, 1, v345);
                                    }
                                    else
                                    {
                                      int64_t v230 = v223;
                                      double v231 = a7;
                                      char v232 = v227 + 3304;
                                      memcpy(mData, v229, v224->mBuffers[0].mDataByteSize);
                                      char v221 = 1;
                                      *char v232 = 1;
                                      a7 = v231;
                                      double v223 = v230;
                                    }
                                  }
                                }
                              }
                            }
                          }
                          ++v220;
                          v219 += 44;
                        }
                        while (v220 < *((unsigned int *)this + 159));
LABEL_377:
                        unint64_t v259 = *((unsigned int *)this + 194);
                        if (v259)
                        {
                          for (unint64_t j = 0; j < v259; ++j)
                          {
                            if (!*((unsigned char *)this + j + 3304))
                            {
                              std::string v261 = a7[j];
                              if (v261)
                              {
                                vDSP_vfill((const float *)this + 161, (float *)v261->mBuffers[0].mData, 1, v345);
                                unint64_t v259 = *((unsigned int *)this + 194);
                              }
                            }
                          }
                        }
                        if ((v221 & 1) == 0) {
                          *((unsigned char *)this + 2488) = 1;
                        }
                        std::string v262 = (uint64_t *)*((void *)this + 101);
                        if (v262) {
                          AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Write(*v262, (long long *)((char *)this + 792));
                        }
                        std::string v263 = (uint64_t *)*((void *)this + 127);
                        if (v263) {
                          AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Write(*v263, (long long *)this + 62);
                        }
                        std::string v264 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v264, 0x190u, (float)*((unsigned int *)this + 256), 0);
                        long long v265 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v265, 0x191u, (float)*((unsigned int *)this + 257), 0);
                        int64_t v266 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v266, 0x192u, (float)*((unsigned int *)this + 200), 0);
                        std::string v267 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v267, 0x193u, (float)*((unsigned int *)this + 1026), 0);
                        std::string v268 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v268, 0x196u, (float)*((unsigned int *)this + 201), 0);
                        if (*((unsigned char *)this + 916))
                        {
                          if (*((_DWORD *)this + 1026) >= 2u) {
                            float v269 = 1.0;
                          }
                          else {
                            float v269 = 0.0;
                          }
                          long long v270 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                          ausdk::AUElement::SetParameter(v270, 0x194u, v269, 0);
                          if (!*((unsigned char *)this + 917)) {
                            goto LABEL_400;
                          }
                        }
                        else
                        {
                          if (!*((unsigned char *)this + 917))
                          {
LABEL_400:
                            if (*v218)
                            {
                              unint64_t v272 = 0;
                              char v273 = (float *)((char *)this + 2472);
                              do
                              {
                                int v274 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                if (*((unsigned char *)v273 + 16)) {
                                  float v275 = 1.0;
                                }
                                else {
                                  float v275 = 0.0;
                                }
                                ausdk::AUElement::SetParameter(v274, 0x325u, v275, 0);
                                if (*((unsigned char *)this + 918) && (*((_DWORD *)this + 200) - 1) <= 1)
                                {
                                  std::string v276 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                  ausdk::AUElement::SetParameter(v276, 0x320u, v273[1], 0);
                                  std::string v277 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                  std::string v278 = v273;
                                }
                                else
                                {
                                  std::string v279 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                  ausdk::AUElement::SetParameter(v279, 0x320u, *v273, 0);
                                  std::string v277 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                  std::string v278 = (float *)((char *)this + 24 * v272 + 2476);
                                }
                                ausdk::AUElement::SetParameter(v277, 0x321u, *v278, 0);
                                double v280 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                ausdk::AUElement::SetParameter(v280, 0x322u, v273[2], 0);
                                double v281 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                ausdk::AUElement::SetParameter(v281, 0x323u, v273[3], 0);
                                char v282 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), v272);
                                ausdk::AUElement::SetParameter(v282, 0x328u, v273[5], 0);
                                ++v272;
                                v273 += 6;
                              }
                              while (v272 < *v218);
                            }
                            if (*((unsigned char *)this + 3264))
                            {
                              uint64_t v328 = *((void *)this + 406);
                              uint64_t v329 = *((void *)this + 405);
                              if (v328 != v329)
                              {
                                unint64_t v330 = 0;
                                unsigned int v331 = (long long *)((char *)this + 2472);
                                do
                                {
                                  uint64_t v332 = *(uint64_t **)(v329 + 8 * v330);
                                  if (v332)
                                  {
                                    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Write(*v332, v331);
                                    uint64_t v328 = *((void *)this + 406);
                                    uint64_t v329 = *((void *)this + 405);
                                  }
                                  ++v330;
                                  unsigned int v331 = (long long *)((char *)v331 + 24);
                                }
                                while (v330 < (v328 - v329) >> 3);
                              }
                            }
                            uint64_t v283 = *((unsigned int *)this + 159);
                            if (v283)
                            {
                              double v284 = (unsigned int *)((char *)this + 1032);
                              int v285 = (int *)((char *)this + 4116);
                              int v286 = (_DWORD *)((char *)this + 1032);
                              do
                              {
                                int v287 = *v285++;
                                _DWORD *v286 = v287;
                                v286 += 11;
                                --v283;
                              }
                              while (v283);
                              unint64_t v288 = 0;
                              do
                              {
                                unsigned int v289 = *v284;
                                unsigned int v290 = *((_DWORD *)this + 194);
                                double v291 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 656), v288);
                                float v292 = -1.0;
                                if (v289 < v290) {
                                  float v292 = (float)*v284;
                                }
                                ausdk::AUElement::SetParameter(v291, 0x258u, v292, 0);
                                ++v288;
                                v284 += 11;
                              }
                              while (v288 < *((unsigned int *)this + 159));
                            }
                            if (!*((unsigned char *)this + 2464)) {
                              return 0;
                            }
                            uint64_t v333 = *((void *)this + 306);
                            uint64_t v334 = *((void *)this + 305);
                            if (v333 == v334) {
                              return 0;
                            }
                            unint64_t v335 = 0;
                            uint64_t v336 = (long long *)((char *)this + 1032);
                            do
                            {
                              v337 = *(uint64_t **)(v334 + 8 * v335);
                              if (v337)
                              {
                                AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Write(*v337, v336);
                                uint64_t v333 = *((void *)this + 306);
                                uint64_t v334 = *((void *)this + 305);
                              }
                              uint64_t result = 0;
                              ++v335;
                              uint64_t v336 = (long long *)((char *)v336 + 44);
                            }
                            while (v335 < (v333 - v334) >> 3);
                            return result;
                          }
                          if (*((_DWORD *)this + 1026) >= 2u) {
                            float v269 = 1.0;
                          }
                          else {
                            float v269 = 0.0;
                          }
                        }
                        int64_t v271 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
                        ausdk::AUElement::SetParameter(v271, 0x195u, v269, 0);
                        goto LABEL_400;
                      }
LABEL_376:
                      char v221 = 0;
                      goto LABEL_377;
                    }
                    uint64_t v216 = v62;
                    double v217 = (float *)((char *)this + 2476);
                    do
                    {
                      float *v217 = -*v217;
                      v217 += 6;
                      --v216;
                    }
                    while (v216);
                  }
                }
LABEL_319:
                char v218 = (_DWORD *)((char *)this + 632);
                if (v62) {
                  bzero((char *)this + 3304, v62);
                }
                if (v65) {
                  goto LABEL_322;
                }
                goto LABEL_376;
              }
              float v198 = v196 - *((float *)this + 1332);
              if (v198 > v189) {
                float v189 = v198;
              }
            }
            else
            {
              float v197 = v196 + *((float *)this + 1332);
              if (v197 < v189) {
                float v189 = v197;
              }
            }
            *((float *)this + 1328) = v189;
            goto LABEL_289;
          }
          float v195 = v193 - *((float *)this + 1334);
          if (v195 > v192) {
            float v192 = v195;
          }
        }
        else
        {
          float v194 = v193 + *((float *)this + 1334);
          if (v194 < v192) {
            float v192 = v194;
          }
        }
        *((float *)this + 1330) = v192;
        goto LABEL_280;
      }
    }
    if (v107 >= v102) {
      unsigned int v130 = v102;
    }
    else {
      unsigned int v130 = v107;
    }
    if (v130)
    {
      __n128 v131 = (char *)this + 1032;
      unsigned int v132 = v103 + v130;
      uint64_t v133 = (char *)this + 4532;
      do
      {
        if (v102 >= 2 && v102 > v107 && v103)
        {
          uint64_t v134 = 0;
          uint64_t v135 = v103;
          do
          {
            uint64_t v136 = 0;
            std::string::size_type v137 = &v131[44 * *((unsigned int *)this + v134 + 1133)];
            float v138 = *((float *)v137 + 4);
            float v139 = *((float *)v137 + 5);
            float v140 = 0.0;
            do
            {
              uint64_t v141 = &v131[44 * *(unsigned int *)((char *)this + v136 + 4660)];
              float v142 = (float)(v139 - *((float *)v141 + 5)) * (float)(v139 - *((float *)v141 + 5));
              if (!v136
                || (float)(v142 + (float)((float)(v138 - *((float *)v141 + 4)) * (float)(v138 - *((float *)v141 + 4)))) < v140)
              {
                float v140 = v142 + (float)((float)(v138 - *((float *)v141 + 4)) * (float)(v138 - *((float *)v141 + 4)));
              }
              v136 += 4;
            }
            while (4 * v103 != v136);
            *((float *)this + v134++ + 1229) = v140;
          }
          while (v134 != v102);
          uint64_t v143 = 0;
          int v144 = 0;
          float v145 = *((float *)this + 1229);
          do
          {
            float v146 = *((float *)this + v143 + 1230);
            BOOL v147 = v146 <= v145;
            if (v146 > v145) {
              float v145 = *((float *)this + v143 + 1230);
            }
            ++v143;
            if (!v147) {
              int v144 = v143;
            }
          }
          while (v102 - 1 != v143);
          uint64_t v148 = *(unsigned int *)&v133[4 * v144];
          *(_DWORD *)&v133[4 * v144] = *(_DWORD *)&v133[4 * --v102];
          *(_DWORD *)&v133[4 * v102] = v148;
        }
        else
        {
          --v102;
          uint64_t v135 = v103;
          uint64_t v148 = *((unsigned int *)this + v102 + 1133);
        }
        uint64_t v149 = *((unsigned int *)this + --v107 + 866);
        *((_DWORD *)this + v148 + 1029) = v149;
        ++*((_DWORD *)this + v149 + 834);
        *((_DWORD *)this + v135 + 1165) = v148;
        ++v103;
      }
      while (v103 != v132);
      unsigned int v103 = v132;
    }
    if (!v102) {
      goto LABEL_232;
    }
    v343 = a7;
    uint64_t v150 = 0;
    BOOL v151 = (char *)this + 1032;
    uint64_t v152 = v102;
    while (1)
    {
      uint64_t v153 = v103;
      uint64_t v154 = *((unsigned int *)this + v150 + 1133);
      if (*((_DWORD *)this + 191) != 1)
      {
        unint64_t v155 = &v151[44 * v154];
        float v156 = *((float *)v155 + 4);
        float v157 = *((float *)v155 + 5);
        vDSP_vfill((const float *)this + 161, (float *)this + 962, 1, *((unsigned int *)this + 194));
        vDSP_vfill((const float *)this + 161, (float *)this + 994, 1, *((unsigned int *)this + 194));
        uint64_t v158 = (unsigned int *)((char *)this + 4660);
        uint64_t v159 = v153;
        if (v153)
        {
          do
          {
            unsigned int v160 = *v158++;
            float v161 = (float *)((char *)this + 4 * *((unsigned int *)this + v160 + 1029));
            v161[962] = v161[962]
                      + (float)((float)((float)(v156 - *(float *)&v151[44 * v160 + 16])
                                      * (float)(v156 - *(float *)&v151[44 * v160 + 16]))
                              + (float)((float)(v157 - *(float *)&v151[44 * v160 + 20])
                                      * (float)(v157 - *(float *)&v151[44 * v160 + 20])));
            v161[994] = v161[994] + 1.0;
            --v159;
          }
          while (v159);
        }
        uint64_t v162 = *((unsigned int *)this + 194);
        if (v162) {
          break;
        }
      }
      uint64_t v164 = 0;
LABEL_230:
      *((_DWORD *)this + v154 + 1029) = v164;
      ++*((_DWORD *)this + v164 + 834);
      *((_DWORD *)this + v153 + 1165) = v154;
      unsigned int v103 = v153 + 1;
      if (++v150 == v152)
      {
        LODWORD(v65) = *((_DWORD *)this + 159);
        a7 = v343;
        goto LABEL_232;
      }
    }
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    char v165 = 0;
    float v166 = 1.0e20;
    while (1)
    {
      BOOL v167 = (float *)((char *)this + 4 * v163);
      float v168 = v167[994];
      if (v168 <= 0.0) {
        goto LABEL_226;
      }
      float v169 = v167[962] / v168;
      if ((v165 & 1) != 0 && v169 >= v166) {
        break;
      }
      uint64_t v164 = v163;
      char v165 = 1;
LABEL_227:
      ++v163;
      float v166 = v169;
      if (v162 == v163) {
        goto LABEL_230;
      }
    }
    char v165 = 1;
LABEL_226:
    float v169 = v166;
    goto LABEL_227;
  }
  if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
    dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
  }
  std::string::size_type v53 = AUFTSpatialAC::getAUSLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)AudioTimeStamp buf = 0;
    _os_log_error_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_ERROR, "At least one input bus, bus1, is need. It is a required input\n", buf, 2u);
  }
  return 4294956420;
}

void sub_1BB638E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17)
{
  if (*((void *)&a17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a17 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUFTSpatialAC::UpdateGlobalMetaVariableState(AUFTSpatialAC *this)
{
  uint64_t v2 = (AUFTSpatialAC *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(Element, 0xC8u);
  if (Parameter - 1 <= 3) {
    *((_DWORD *)this + 198) = Parameter;
  }
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  unsigned int v6 = ausdk::AUElement::GetParameter(v5, 0xD5u);
  if (v6 - 1 <= 3) {
    *((_DWORD *)this + 199) = v6;
  }
  int v7 = *((_DWORD *)this + 230);
  if (v7 == -2)
  {
    int v7 = *((_DWORD *)this + 199);
  }
  else if (v7 == -1)
  {
    int v7 = *((_DWORD *)this + 198);
  }
  else if ((v7 - 1) > 3)
  {
    goto LABEL_11;
  }
  *((_DWORD *)this + 200) = v7;
LABEL_11:
  int v8 = *((_DWORD *)this + 228);
  if (v8 == -2)
  {
    int v8 = *((_DWORD *)this + 199);
  }
  else if (v8 == -1)
  {
    int v8 = *((_DWORD *)this + 198);
  }
  else if ((v8 - 1) > 3)
  {
    goto LABEL_17;
  }
  *((_DWORD *)this + 201) = v8;
LABEL_17:
  if (!*((unsigned char *)this + 918)) {
    goto LABEL_23;
  }
  int v9 = *((_DWORD *)this + 201);
  if (v9 == 1)
  {
    int v10 = 4;
  }
  else
  {
    if (v9 != 2) {
      goto LABEL_23;
    }
    int v10 = 3;
  }
  *((_DWORD *)this + 201) = v10;
LABEL_23:
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v12 = ausdk::AUElement::GetParameter(v11, 0xCEu);
  uint64_t v13 = (float *)((char *)this + 836);
  *((float *)this + 209) = v12;
  if (v12 > 10000.0) {
    uint64_t v13 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v12 < 1.0) {
    uint64_t v13 = &AUSpeechLevelEstimator::kVAD_Max;
  }
  *((float *)this + 209) = *v13;
  float v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v15 = ausdk::AUElement::GetParameter(v14, 0xCFu);
  unint64_t v16 = (float *)((char *)this + 840);
  *((float *)this + 210) = v15;
  if (v15 > 10000.0) {
    unint64_t v16 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v15 < 1.0) {
    unint64_t v16 = &AUSpeechLevelEstimator::kVAD_Max;
  }
  *((float *)this + 210) = *v16;
  int v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v18 = ausdk::AUElement::GetParameter(v17, 0xD0u);
  int v19 = (float *)((char *)this + 992);
  *((float *)this + 248) = v18;
  if (v18 > 10000.0) {
    int v19 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v18 < 0.0) {
    int v19 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  *((float *)this + 248) = *v19;
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v21 = ausdk::AUElement::GetParameter(v20, 0xD1u);
  uint64_t v22 = (float *)((char *)this + 996);
  *((float *)this + 249) = v21;
  if (v21 > 10000.0) {
    uint64_t v22 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v21 < 0.0) {
    uint64_t v22 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  *((float *)this + 249) = *v22;
  BOOL v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v24 = ausdk::AUElement::GetParameter(v23, 0xD2u);
  float v25 = (_DWORD *)((char *)this + 1000);
  *((float *)this + 250) = v24;
  BOOL v26 = v24 == 0.0;
  if (v24 > 10000.0) {
    float v25 = &AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v24 < 0.001) {
    float v25 = &AUFTSpatialAC::kFTSpatialMinWindow_XY_size;
  }
  *((_DWORD *)this + 250) = *v25;
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v28 = ausdk::AUElement::GetParameter(v27, 0xD3u);
  float v29 = (float *)((char *)this + 1004);
  *((float *)this + 251) = v28;
  char v30 = v28 == 0.0 || v26;
  if (v28 > 10000.0) {
    float v29 = (float *)&AUFTSpatialAC::kFTSpatialMax_XY_points;
  }
  if (v28 < 0.001) {
    float v29 = (float *)&AUFTSpatialAC::kFTSpatialMinWindow_XY_size;
  }
  float v31 = *v29;
  *((float *)this + 251) = *v29;
  *((unsigned char *)this + 936) = v30;
  float v32 = *((float *)this + 250) / (v31 + 1.0e-20);
  *((float *)this + 252) = v32;

  return AUFTSpatialAC::SetRenderTuningValsToUse((uint64_t)this);
}

uint64_t AUFTSpatialAC::UpdateGlobalVariableState(float32x2_t *this)
{
  uint64_t v2 = (float32x2_t *)((char *)this + 764);
  unsigned int v3 = 1;
  this[94].i8[0] = 1;
  unsigned int v4 = (ausdk::AUScope *)&this[4];
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
  this[94].i32[1] = ausdk::AUElement::GetParameter(Element, 0);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[95].i8[0] = ausdk::AUElement::GetParameter(v6, 1u) != 0.0;
  int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(v7, 2u);
  if (this[80].i32[0] < Parameter) {
    unsigned int Parameter = this[80].u32[0];
  }
  if (Parameter <= 1) {
    unsigned int Parameter = 1;
  }
  this[105].i32[1] = Parameter;
  int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[97].i8[5] = ausdk::AUElement::GetParameter(v9, 3u) != 0.0;
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[97].i8[6] = ausdk::AUElement::GetParameter(v10, 4u) != 0.0;
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[95].i32[1] = ausdk::AUElement::GetParameter(v11, 5u);
  float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  unsigned int v13 = ausdk::AUElement::GetParameter(v12, 6u);
  this[96].i32[0] = v13;
  if (!this[94].i32[1])
  {
    *uint64_t v2 = (float32x2_t)1;
    this[97].i32[0] = 1;
    this[97].i8[4] = 0;
LABEL_16:
    --v3;
    goto LABEL_17;
  }
  unsigned int v3 = this[95].u32[1];
  unsigned int v14 = this[80].u32[0];
  if (v3 + v13 <= v14)
  {
    unsigned int v14 = v3 + v13;
  }
  else
  {
    if (v3 >= v14)
    {
      if (v14 - 1 <= 1) {
        unsigned int v3 = 1;
      }
      else {
        unsigned int v3 = v14 - 1;
      }
      v2->i32[0] = v3;
    }
    unsigned int v13 = v14 - v3;
    this[96].i32[0] = v14 - v3;
  }
  this[97].i32[0] = v14;
  this[97].i8[4] = v13 != 0;
  if (!v13) {
    goto LABEL_16;
  }
LABEL_17:
  this[96].i32[1] = v3;
  float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v16 = ausdk::AUElement::GetParameter(v15, 0xC9u);
  int v17 = this + 102;
  this[102].f32[0] = v16;
  if (v16 > 500.0) {
    int v17 = (float32x2_t *)&AUFTSpatialAC::kFTSpatialMax_dim_cm;
  }
  if (v16 < 0.01) {
    int v17 = (float32x2_t *)&AUFTSpatialAC::kFTSpatialMin_dim_cm;
  }
  this[102].i32[0] = v17->i32[0];
  float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v19 = ausdk::AUElement::GetParameter(v18, 0xCAu);
  uint64_t v20 = (__int32 *)&this[102] + 1;
  this[102].f32[1] = v19;
  if (v19 > 500.0) {
    uint64_t v20 = (__int32 *)&AUFTSpatialAC::kFTSpatialMax_dim_cm;
  }
  if (v19 < 0.01) {
    uint64_t v20 = (__int32 *)&AUFTSpatialAC::kFTSpatialMin_dim_cm;
  }
  this[102].i32[1] = *v20;
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v22 = ausdk::AUElement::GetParameter(v21, 0xCBu);
  BOOL v23 = this + 103;
  this[103].f32[0] = v22;
  if (v22 > 1000.0) {
    BOOL v23 = (float32x2_t *)&AUFTSpatialAC::kFTSpatialMax_dist_cm;
  }
  if (v22 < 0.01) {
    BOOL v23 = (float32x2_t *)&AUFTSpatialAC::kFTSpatialMin_dim_cm;
  }
  this[103].i32[0] = v23->i32[0];
  float v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[103].f32[1] = ausdk::AUElement::GetParameter(v24, 0xCCu);
  float v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[104].f32[0] = ausdk::AUElement::GetParameter(v25, 0xCDu);
  BOOL v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[106].i8[0] = ausdk::AUElement::GetParameter(v26, 7u) != 0.0;
  uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[106].i8[1] = ausdk::AUElement::GetParameter(v27, 8u) != 0.0;
  float v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[106].i8[2] = ausdk::AUElement::GetParameter(v28, 9u) != 0.0;
  float v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v30 = ausdk::AUElement::GetParameter(v29, 0xCu);
  this[108].f32[1] = v30;
  if (v30 <= 180.0) {
    float v31 = (__int32 *)&this[108] + 1;
  }
  else {
    float v31 = (__int32 *)&kParamValue_Mode1Azimuth_Max;
  }
  if (v30 < -180.0) {
    float v31 = (__int32 *)&kParamValue_Mode1Azimuth_Min;
  }
  this[108].i32[1] = *v31;
  float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v33 = ausdk::AUElement::GetParameter(v32, 0xDu);
  this[109].f32[0] = v33;
  if (v33 <= 180.0) {
    unint64_t v34 = this + 109;
  }
  else {
    unint64_t v34 = (float32x2_t *)&kParamValue_Mode1Azimuth_Max;
  }
  if (v33 < -180.0) {
    unint64_t v34 = (float32x2_t *)&kParamValue_Mode1Azimuth_Min;
  }
  this[109].i32[0] = v34->i32[0];
  BOOL v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v36 = ausdk::AUElement::GetParameter(v35, 0xAu);
  int v37 = (float *)&this[106] + 1;
  this[106].f32[1] = v36;
  if (v36 <= 180.0) {
    long long v38 = (__int32 *)&this[106] + 1;
  }
  else {
    long long v38 = (__int32 *)&kParamValue_Mode1Azimuth_Max;
  }
  if (v36 < -180.0) {
    long long v38 = (__int32 *)&kParamValue_Mode1Azimuth_Min;
  }
  this[106].i32[1] = *v38;
  std::chrono::system_clock::time_point v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v40 = ausdk::AUElement::GetParameter(v39, 0xBu);
  int v41 = (float *)&this[107];
  this[107].f32[0] = v40;
  if (v40 > 180.0) {
    int v41 = (float *)&kParamValue_Mode1Azimuth_Max;
  }
  if (v40 < -180.0) {
    int v41 = (float *)&kParamValue_Mode1Azimuth_Min;
  }
  float v42 = *v41;
  this[107].f32[0] = *v41;
  float v43 = this[109].f32[0];
  if (this[108].f32[1] >= v43)
  {
    if (v43 == -180.0) {
      this[109].i32[0] = -1020002959;
    }
    else {
      this[108].f32[1] = fmaxf(v43 + -0.01, -180.0);
    }
  }
  if (*v37 >= v42) {
    *int v37 = v42;
  }
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v45 = ausdk::AUElement::GetParameter(v44, 0x10u);
  size_t v46 = (float *)&this[109] + 1;
  this[109].f32[1] = v45;
  if (v45 <= 90.0) {
    std::string::size_type v47 = (__int32 *)&this[109] + 1;
  }
  else {
    std::string::size_type v47 = (__int32 *)&kParamValue_Mode1Elevation_Max;
  }
  if (v45 < -90.0) {
    std::string::size_type v47 = (__int32 *)&kParamValue_Mode1Elevation_Min;
  }
  this[109].i32[1] = *v47;
  long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v49 = ausdk::AUElement::GetParameter(v48, 0x11u);
  uint64_t v50 = this + 110;
  this[110].f32[0] = v49;
  if (v49 <= 90.0) {
    uint64_t v51 = this + 110;
  }
  else {
    uint64_t v51 = (float32x2_t *)&kParamValue_Mode1Elevation_Max;
  }
  if (v49 < -90.0) {
    uint64_t v51 = (float32x2_t *)&kParamValue_Mode1Elevation_Min;
  }
  this[110].i32[0] = v51->i32[0];
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v53 = ausdk::AUElement::GetParameter(v52, 0xEu);
  this[107].f32[1] = v53;
  if (v53 <= 90.0) {
    float v54 = (__int32 *)&this[107] + 1;
  }
  else {
    float v54 = (__int32 *)&kParamValue_Mode1Elevation_Max;
  }
  if (v53 < -90.0) {
    float v54 = (__int32 *)&kParamValue_Mode1Elevation_Min;
  }
  this[107].i32[1] = *v54;
  unint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v56 = ausdk::AUElement::GetParameter(v55, 0xFu);
  this[108].f32[0] = v56;
  if (v56 <= 90.0) {
    int v57 = (float *)&this[108];
  }
  else {
    int v57 = (float *)&kParamValue_Mode1Elevation_Max;
  }
  if (v56 < -90.0) {
    int v57 = (float *)&kParamValue_Mode1Elevation_Min;
  }
  float v58 = *v57;
  this[108].f32[0] = *v57;
  if (this[107].f32[1] >= v58)
  {
    if (v58 == -90.0) {
      this[108].i32[0] = -1028392223;
    }
    else {
      this[107].f32[1] = fmaxf(v58 + -0.01, -90.0);
    }
  }
  if (*v46 >= v50->f32[0]) {
    *size_t v46 = v50->f32[0];
  }
  float v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v60 = ausdk::AUElement::GetParameter(v59, 0x12u);
  float v61 = v2 + 15;
  this[110].f32[1] = v60;
  if (v60 <= 10.0) {
    uint64_t v62 = (float *)&v2[15];
  }
  else {
    uint64_t v62 = (float *)&kParamValue_Mode1Distance_Max;
  }
  if (v60 < 0.0) {
    uint64_t v62 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  this[110].f32[1] = *v62;
  uint32_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v64 = ausdk::AUElement::GetParameter(v63, 0x13u);
  uint64_t v65 = (float *)&this[111];
  this[111].f32[0] = v64;
  if (v64 > 100.0) {
    uint64_t v65 = &kParamValue_Mode1ReverbBlend_Max;
  }
  if (v64 < 0.0) {
    uint64_t v65 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  this[111].f32[0] = *v65;
  uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[111].f32[1] = ausdk::AUElement::GetParameter(v66, 0x14u) * 0.5;
  unsigned int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[112].i32[0] = ausdk::AUElement::GetParameter(v67, 0x15u);
  unsigned int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[112].i32[1] = ausdk::AUElement::GetParameter(v68, 0x16u);
  float v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[113].i32[0] = ausdk::AUElement::GetParameter(v69, 0x17u);
  uint64_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[113].i32[1] = ausdk::AUElement::GetParameter(v70, 0x18u);
  double v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  int v72 = (int)ausdk::AUElement::GetParameter(v71, 0x19u);
  uint64_t v73 = this + 114;
  this[114].i32[0] = v72;
  if (v72 > 6) {
    uint64_t v73 = (float32x2_t *)&kParamValue_ScreenOrientationControl_Max;
  }
  if (v72 >= -2) {
    unint64_t v74 = (__int32 *)v73;
  }
  else {
    unint64_t v74 = (__int32 *)&kParamValue_ScreenOrientationControl_Min;
  }
  this[114].i32[0] = *v74;
  unint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[114].i8[4] = ausdk::AUElement::GetParameter(v75, 0x1Au) != 0.0;
  float v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[114].i8[5] = ausdk::AUElement::GetParameter(v76, 0x1Bu) != 0.0;
  float v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[114].i8[6] = ausdk::AUElement::GetParameter(v77, 0x1Cu) != 0.0;
  double v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  int v79 = (int)ausdk::AUElement::GetParameter(v78, 0x1Du);
  float v80 = this + 115;
  this[115].i32[0] = v79;
  if (v79 > 6) {
    float v80 = (float32x2_t *)&kParamValue_ScreenOrientationControl_Max;
  }
  if (v79 >= -2) {
    std::string::size_type v81 = (__int32 *)v80;
  }
  else {
    std::string::size_type v81 = (__int32 *)&kParamValue_ScreenOrientationControl_Min;
  }
  this[115].i32[0] = *v81;
  float v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  unsigned int v83 = ausdk::AUElement::GetParameter(v82, 0x1Eu);
  if (v83 >= 3) {
    unsigned int v83 = 3;
  }
  this[115].i32[1] = v83;
  uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  unsigned int v85 = ausdk::AUElement::GetParameter(v84, 0x1Fu);
  if (v85 >= 0x3E8) {
    unsigned int v85 = 1000;
  }
  this[116].i32[0] = v85;
  uint64_t v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  unsigned int v87 = ausdk::AUElement::GetParameter(v86, 0x20u);
  if (v87 >= 3) {
    unsigned int v87 = 3;
  }
  this[116].i32[1] = v87;
  float v88 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[97].i8[7] = ausdk::AUElement::GetParameter(v88, 0x21u) != 0.0;
  uint64_t v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[98].i8[0] = ausdk::AUElement::GetParameter(v89, 0x22u) != 0.0;
  float v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  this[98].i8[1] = ausdk::AUElement::GetParameter(v90, 0x23u) != 0.0;
  float v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v92 = ausdk::AUElement::GetParameter(v91, 0x24u);
  unint64_t v93 = (float *)&this[98] + 1;
  this[98].f32[1] = v92;
  uint64_t v94 = (float *)&kParamValue_InterpTime_Max;
  if (v92 <= 5.0) {
    uint64_t v94 = (float *)&this[98] + 1;
  }
  if (v92 < 0.0) {
    uint64_t v94 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  this[98].f32[1] = *v94;
  int v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v96 = ausdk::AUElement::GetParameter(v95, 0x25u);
  float v97 = v2 + 22;
  this[117].f32[1] = v96;
  if (v96 <= 10.0) {
    uint64_t v98 = (float *)v97;
  }
  else {
    uint64_t v98 = (float *)&kParamValue_Mode1Distance_Max;
  }
  if (v96 < 0.0) {
    uint64_t v98 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  this[117].f32[1] = *v98;
  int v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v100 = ausdk::AUElement::GetParameter(v99, 0x26u);
  uint64_t v101 = (float *)&this[118];
  this[118].f32[0] = v100;
  if (v100 > 100.0) {
    uint64_t v101 = &kParamValue_Mode1ReverbBlend_Max;
  }
  if (v100 < 0.0) {
    uint64_t v101 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  this[118].f32[0] = *v101;
  unsigned int v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v103 = ausdk::AUElement::GetParameter(v102, 0x27u);
  float v104 = (__int32 *)&this[118] + 1;
  this[118].f32[1] = v103;
  if (v103 > 20.0) {
    float v104 = (__int32 *)&kParamValue_UppGain_Max;
  }
  if (v103 < -20.0) {
    float v104 = (__int32 *)&kParamValue_UppGain_Min;
  }
  this[118].i32[1] = *v104;
  uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v106 = ausdk::AUElement::GetParameter(v105, 0x28u);
  uint64_t v108 = this + 119;
  this[119].f32[0] = v106;
  if (v106 > 20.0) {
    uint64_t v108 = (float32x2_t *)&kParamValue_UppGain_Max;
  }
  if (v106 < -20.0) {
    uint64_t v108 = (float32x2_t *)&kParamValue_UppGain_Min;
  }
  float v109 = v108->f32[0];
  this[119].i32[0] = v108->i32[0];
  v107.i32[0] = 1.0;
  if (this[98].i8[1] && *v93 > 0.0)
  {
    *(float *)v107.i32 = *v93 * this[665].f32[1];
    float v110 = 1.0;
    BOOL v111 = *(float *)v107.i32 <= 1.0;
    BOOL v112 = *(float *)v107.i32 < 200.0 || *(float *)v107.i32 <= 1.0;
    if (*(float *)v107.i32 >= 200.0) {
      BOOL v111 = 1;
    }
    if (!v112) {
      float v110 = 200.0;
    }
    if (v111) {
      *(float *)v107.i32 = v110;
    }
  }
  this[666] = vdiv_f32(vabd_f32(*v61, *v97), (float32x2_t)vdup_lane_s32(v107, 0));
  this[667].f32[0] = vabds_f32(v109, this[118].f32[1]) / *(float *)v107.i32;
  if (!this[114].i8[4])
  {
    unsigned int v113 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v113, 0x194u, 1.0, 0);
  }
  if (!this[114].i8[5])
  {
    BOOL v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
    ausdk::AUElement::SetParameter(v114, 0x195u, 1.0, 0);
  }

  return AUFTSpatialAC::UpdateGlobalMetaVariableState((AUFTSpatialAC *)this);
}

uint64_t AUFTSpatialAC::UpdateInputVariableState(AUFTSpatialAC *this)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = (AUFTSpatialAC *)((char *)this + 656);
  while (1)
  {
    uint64_t v5 = *((void *)this + 87);
    uint64_t result = v5
           ? (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5)
           : (*((void *)this + 85) - *((void *)this + 84)) >> 3;
    if (v3 >= result) {
      break;
    }
    if (*((unsigned char *)this + v3 + 600))
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      int v8 = (char *)this + v2;
      *(_DWORD *)((char *)this + v2 + 1036) = ausdk::AUElement::GetParameter(Element, 0x259u);
      int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      v8[1040] = ausdk::AUElement::GetParameter(v9, 0x25Au) != 0.0;
      int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      v8[1041] = ausdk::AUElement::GetParameter(v10, 0x25Bu) != 0.0;
      uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      v8[1042] = ausdk::AUElement::GetParameter(v11, 0x25Cu) != 0.0;
      float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      *((_DWORD *)v8 + 261) = ausdk::AUElement::GetParameter(v12, 0x25Du);
      unsigned int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      *((float *)v8 + 262) = ausdk::AUElement::GetParameter(v13, 0x25Eu);
      unsigned int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      *((float *)v8 + 263) = ausdk::AUElement::GetParameter(v14, 0x25Fu);
      float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, v3);
      *((float *)v8 + 264) = ausdk::AUElement::GetParameter(v15, 0x260u);
    }
    ++v3;
    v2 += 44;
  }
  return result;
}

float32x2_t *AUFTSpatialAC::MakeDependentPositionData(float32x2_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[79].u32[1];
  if (v2)
  {
    uint64_t v3 = 0;
    __asm { FMOV            V2.2S, #1.0 }
    float32x2_t v9 = (float32x2_t)vand_s8((int8x8_t)vdiv_f32(_D2, this[125]), (int8x8_t)vcgtz_f32(this[125]));
    uint64_t v10 = (uint64_t)this[122];
    uint64_t v11 = (uint64_t)this[123];
    float v12 = this + 134;
    do
    {
      uint64_t v13 = 1 << v3;
      uint64_t v14 = v10 & ~(1 << v3);
      uint64_t v15 = v11 & ~(1 << v3);
      if (v12[-4].i8[0])
      {
        float32x2_t v16 = v12[-3];
        if (v16.f32[0] == 0.0 && v16.f32[1] == 0.0)
        {
          uint64_t v15 = v11 | v13;
          uint64_t v17 = v10 | v13;
          if (this[116].i32[1]) {
            uint64_t v14 = v17;
          }
        }
        *(float32x2_t *)((char *)v12 - 12) = vmul_f32(v9, v16);
        v12[-1].i32[1] = v12[-2].i32[0];
        v12->i8[0] = v12[-4].i8[1];
      }
      else
      {
        *(float32x2_t *)((char *)&v12[-1] + 1) = 0;
        *(float32x2_t *)((char *)&v12[-2] + 4) = 0;
      }
      uint64_t v11 = v15;
      uint64_t v10 = v14;
      ++v3;
      float v12 = (float32x2_t *)((char *)v12 + 44);
    }
    while (v2 != v3);
    this[122] = (float32x2_t)v14;
    this[123] = (float32x2_t)v15;
  }
  __int32 v18 = this[115].i32[1];
  switch(v18)
  {
    case 1:
      unint64_t v23 = 0;
      for (unint64_t i = this + 134; ; unint64_t i = (float32x2_t *)((char *)i + 44))
      {
        float32x2_t v25 = v1[87];
        this = (float32x2_t *)(*(void *)&v25
                             ? (*(uint64_t (**)(float32x2_t))(**(void **)&v25 + 24))(v25)
                             : (*(void *)&v1[85] - *(void *)&v1[84]) >> 3);
        if (v23 >= this) {
          break;
        }
        __int8 v26 = i->i8[0];
        if (i->i8[0]) {
          __int8 v26 = i[-4].i32[1] <= (unsigned __int32)v1[116].i32[0];
        }
        i->i8[0] = v26;
        ++v23;
      }
      break;
    case 3:
      unint64_t v27 = 0;
      for (unint64_t j = (char *)&this[130] + 4; ; j += 44)
      {
        float32x2_t v29 = v1[87];
        this = (float32x2_t *)(*(void *)&v29
                             ? (*(uint64_t (**)(float32x2_t))(**(void **)&v29 + 24))(v29)
                             : (*(void *)&v1[85] - *(void *)&v1[84]) >> 3);
        if (v27 >= this) {
          break;
        }
        j[28] = *(_DWORD *)j <= v1[116].i32[0];
        ++v27;
      }
      break;
    case 2:
      unint64_t v19 = 0;
      for (unint64_t k = this + 134; ; unint64_t k = (float32x2_t *)((char *)k + 44))
      {
        float32x2_t v21 = v1[87];
        this = (float32x2_t *)(*(void *)&v21
                             ? (*(uint64_t (**)(float32x2_t))(**(void **)&v21 + 24))(v21)
                             : (*(void *)&v1[85] - *(void *)&v1[84]) >> 3);
        if (v19 >= this) {
          break;
        }
        if (k->i8[0]) {
          BOOL v22 = 1;
        }
        else {
          BOOL v22 = k[-4].i32[1] <= (unsigned __int32)v1[116].i32[0];
        }
        k->i8[0] = v22;
        ++v19;
      }
      break;
  }
  return this;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Write(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 680);
  uint64_t v5 = (atomic_ullong *)(a1 + 744);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
  unint64_t v7 = explicit + ~v4;
  BOOL v8 = v4 >= explicit;
  uint64_t v9 = -257;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (v7 == v9) {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(a1);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v21 = *a2;
  uint64_t v11 = *(void *)(a1 + 680);
  uint64_t v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100) {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  if (v13 == atomic_load_explicit(v5, memory_order_acquire))
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a1 + 680 + 24 * v11;
    *(std::chrono::steady_clock::time_point *)(v14 + 72) = result;
    *(_OWORD *)(v14 + 80) = v21;
    atomic_store(v13, (unint64_t *)(a1 + 680));
    unint64_t v15 = *(void *)(a1 + 680);
    unint64_t v16 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
    unint64_t v17 = v16 + ~v15;
    BOOL v8 = v15 >= v16;
    uint64_t v18 = 257;
    if (!v8) {
      uint64_t v18 = 0;
    }
    if (v17 + v18 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      long long v20 = *(_OWORD *)a1;
      if (*(void *)(a1 + 8)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 8) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v19 + 16) = 0;
      *(_OWORD *)(v19 + 24) = v20;
      *(void *)uint64_t v19 = &unk_1F14BAE58;
      *(void *)(v19 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v19);
    }
  }
  return result;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Write(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 680);
  uint64_t v5 = (atomic_ullong *)(a1 + 744);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
  unint64_t v7 = explicit + ~v4;
  BOOL v8 = v4 >= explicit;
  uint64_t v9 = -257;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (v7 == v9) {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(a1);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v21 = *a2;
  int v22 = *((_DWORD *)a2 + 4);
  uint64_t v11 = *(void *)(a1 + 680);
  uint64_t v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100) {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  if (v13 == atomic_load_explicit(v5, memory_order_acquire))
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a1 + 680 + 32 * v11;
    *(std::chrono::steady_clock::time_point *)(v14 + 72) = result;
    *(_OWORD *)(v14 + 80) = v21;
    *(_DWORD *)(v14 + 96) = v22;
    atomic_store(v13, (unint64_t *)(a1 + 680));
    unint64_t v15 = *(void *)(a1 + 680);
    unint64_t v16 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
    unint64_t v17 = v16 + ~v15;
    BOOL v8 = v15 >= v16;
    uint64_t v18 = 257;
    if (!v8) {
      uint64_t v18 = 0;
    }
    if (v17 + v18 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      long long v20 = *(_OWORD *)a1;
      if (*(void *)(a1 + 8)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 8) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v19 + 16) = 0;
      *(_OWORD *)(v19 + 24) = v20;
      *(void *)uint64_t v19 = &unk_1F14BAEA8;
      *(void *)(v19 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v19);
    }
  }
  return result;
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Write(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 680);
  uint64_t v5 = (atomic_ullong *)(a1 + 744);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
  unint64_t v7 = explicit + ~v4;
  BOOL v8 = v4 >= explicit;
  uint64_t v9 = -257;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (v7 == v9) {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(a1);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v21 = *a2;
  *(_OWORD *)int v22 = a2[1];
  *(_OWORD *)&v22[12] = *(long long *)((char *)a2 + 28);
  uint64_t v11 = *(void *)(a1 + 680);
  uint64_t v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100) {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  if (v13 == atomic_load_explicit(v5, memory_order_acquire))
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a1 + 680 + 56 * v11;
    *(std::chrono::steady_clock::time_point *)(v14 + 72) = result;
    *(_OWORD *)(v14 + 80) = v21;
    *(_OWORD *)(v14 + 96) = *(_OWORD *)v22;
    *(_OWORD *)(v14 + 108) = *(_OWORD *)&v22[12];
    atomic_store(v13, (unint64_t *)(a1 + 680));
    unint64_t v15 = *(void *)(a1 + 680);
    unint64_t v16 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
    unint64_t v17 = v16 + ~v15;
    BOOL v8 = v15 >= v16;
    uint64_t v18 = 257;
    if (!v8) {
      uint64_t v18 = 0;
    }
    if (v17 + v18 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      long long v20 = *(_OWORD *)a1;
      if (*(void *)(a1 + 8)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 8) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v19 + 16) = 0;
      *(_OWORD *)(v19 + 24) = v20;
      *(void *)uint64_t v19 = &unk_1F14BAEF8;
      *(void *)(v19 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v19);
    }
  }
  return result;
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(uint64_t a1)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
  unint64_t v4 = *(void *)(a1 + 744);
  BOOL v5 = explicit >= v4;
  unint64_t v6 = explicit - v4;
  uint64_t v7 = -257;
  if (v5) {
    uint64_t v7 = 0;
  }
  if (v6 != v7)
  {
    if (!*(unsigned char *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((uint64_t *)(a1 + 80));
      *(unsigned char *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    unint64_t v8 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
    unint64_t v9 = *(void *)(a1 + 744);
    uint64_t v10 = 257;
    if (v8 >= v9) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v10 + v8 - v9;
    if (v11)
    {
      uint64_t v12 = a1 + 752;
      unint64_t v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(v12 + 56 * v9, v12 + 56 * v9 + 56 * v11, v16);
        if (v13 == 257) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = v13;
        }
      }
      else
      {
        unint64_t v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(v12 + 56 * v9, a1 + 15144, v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(a1 + 752, v12 + 56 * v14 - 14392, v16);
        unint64_t v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1BB63A72C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB63A734);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  *(void *)a1 = &unk_1F14BAF20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2) {
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(v2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_24AUFTSpatAUInStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 568))
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x1E4FBA400];
    uint64_t v3 = *MEMORY[0x1E4FBA400];
    *(void *)std::chrono::steady_clock::time_point result = *MEMORY[0x1E4FBA400];
    *(void *)(result + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
    MEMORY[0x1C185CC40](result + 8);
    std::ostream::~ostream();
    std::chrono::steady_clock::time_point result = MEMORY[0x1C185D210](v1 + 416);
    *(unsigned char *)(v1 + 568) = 0;
  }
  return result;
}

os_log_t ___Z16AUFTSpatialACLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUFTSpatialAC");
  AUFTSpatialACLog(void)::gLog = (uint64_t)result;
  return result;
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC24AUFTSpatAUInStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      unint64_t v6 = (void *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, (uint64_t *)v5);
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 8));
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 12));
      AUFTSpatialACLogCSV<BOOL>(v6, *(unsigned char *)(v5 + 16), ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(unsigned char *)(v5 + 17), ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(unsigned char *)(v5 + 18), ", ");
      AUFTSpatialACLogCSV<unsigned int>(v6, *(_DWORD *)(v5 + 20));
      uint64_t v7 = v5 + 24;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *(unsigned char *)(v7 + 4), "\n");
      uint64_t v5 = v7 + 12;
    }
    while (v5 != a2);
  }
}

void *AUFTSpatialAC::Log(void *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__s = 0u;
  long long v12 = 0u;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  __t.__d_.__rep_ = std::chrono::system_clock::to_time_t(&__t);
  uint64_t v4 = *a2;
  uint64_t v5 = localtime(&__t.__d_.__rep_);
  size_t v6 = strftime(__s, 0x40uLL, "%T", v5);
  sprintf(&__s[v6], ":%03lld", v4 / 1000000 % 1000);
  size_t v7 = strlen(__s);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
}

void sub_1BB63AD6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AUFTSpatialACLogCSV<unsigned int>(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  long long v13 = v11;
  long long v14 = v12;
  int v7 = a2;
  unint64_t v8 = v12;
  char v9 = 48;
  int v10 = 48;
  long long v13 = (std::string::value_type *)boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned int,char>::convert((uint64_t)&v7);
  long long v14 = v12;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&__p, v13, v12, v12 - v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB63AE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUFTSpatialACLogCSV<BOOL>(void *a1, char a2, const char *a3)
{
  memset(&__p, 0, sizeof(__p));
  if (a2) {
    std::string::value_type v5 = 49;
  }
  else {
    std::string::value_type v5 = 48;
  }
  std::string::value_type v11 = v5;
  long long v13 = &v11;
  long long v14 = v12;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&__p, &v11, v12, 1uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  size_t v9 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a3, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB63AF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUFTSpatialACLogCSV<float>(void *a1, float *a2, const char *a3)
{
  memset(&__p, 0, sizeof(__p));
  if (!boost::conversion::detail::try_lexical_convert<std::string,float>(a2, &__p))
  {
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&unk_1F149D4E8;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  size_t v8 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BB63B02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Write(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 680);
  std::string::value_type v5 = (atomic_ullong *)(a1 + 744);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
  unint64_t v7 = explicit + ~v4;
  BOOL v8 = v4 >= explicit;
  uint64_t v9 = -257;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (v7 == v9) {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(a1);
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v21 = *a2;
  uint64_t v22 = *((void *)a2 + 2);
  uint64_t v11 = *(void *)(a1 + 680);
  uint64_t v12 = 256;
  if ((unint64_t)(v11 + 1) < 0x100) {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = (v11 - v12 + 257) % 0x101uLL - (257 - v12) + 1;
  if (v13 == atomic_load_explicit(v5, memory_order_acquire))
  {
    _os_assert_log();
    result.__d_.__rep_ = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a1 + 680 + 32 * v11;
    *(std::chrono::steady_clock::time_point *)(v14 + 72) = result;
    *(_OWORD *)(v14 + 80) = v21;
    *(void *)(v14 + 96) = v22;
    atomic_store(v13, (unint64_t *)(a1 + 680));
    unint64_t v15 = *(void *)(a1 + 680);
    unint64_t v16 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 744), memory_order_acquire);
    unint64_t v17 = v16 + ~v15;
    BOOL v8 = v15 >= v16;
    uint64_t v18 = 257;
    if (!v8) {
      uint64_t v18 = 0;
    }
    if (v17 + v18 <= 0x7F)
    {
      AU::FTSpatialAC::GetMessenger((AU::FTSpatialAC *)result.__d_.__rep_);
      long long v20 = *(_OWORD *)a1;
      if (*(void *)(a1 + 8)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(a1 + 8) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v19 + 16) = 0;
      *(_OWORD *)(v19 + 24) = v20;
      *(void *)uint64_t v19 = &unk_1F14BAF48;
      *(void *)(v19 + 8) = 0;
      return (std::chrono::steady_clock::time_point)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&AU::FTSpatialAC::GetMessenger(void)::sMessenger, (caulk::concurrent::message *)v19);
    }
  }
  return result;
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(uint64_t a1)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
  unint64_t v4 = *(void *)(a1 + 744);
  BOOL v5 = explicit >= v4;
  unint64_t v6 = explicit - v4;
  uint64_t v7 = -257;
  if (v5) {
    uint64_t v7 = 0;
  }
  if (v6 != v7)
  {
    if (!*(unsigned char *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((uint64_t *)(a1 + 80));
      *(unsigned char *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    unint64_t v8 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
    unint64_t v9 = *(void *)(a1 + 744);
    uint64_t v10 = 257;
    if (v8 >= v9) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v10 + v8 - v9;
    if (v11)
    {
      uint64_t v12 = a1 + 752;
      unint64_t v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(v12 + 32 * v9 + 32 * v11), v16);
        if (v13 == 257) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = v13;
        }
      }
      else
      {
        unint64_t v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(a1 + 8976), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 32 * v14 - 8224), v16);
        unint64_t v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1BB63B460(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB63B468);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  *(void *)a1 = &unk_1F14BAF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2) {
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(v2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_25AUFTSpatAUOutStreamParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC25AUFTSpatAUOutStreamParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    do
    {
      unint64_t v6 = (void *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      uint64_t v7 = v5 + 1;
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      uint64_t v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      uint64_t v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      uint64_t v7 = (uint64_t *)((char *)v7 + 4);
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, ", ");
      AUFTSpatialACLogCSV<BOOL>(v6, *((unsigned char *)v7++ + 4), ", ");
      AUFTSpatialACLogCSV<float>(v6, (float *)v7, "\n");
      BOOL v5 = (uint64_t *)((char *)v7 + 4);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(uint64_t a1)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
  unint64_t v4 = *(void *)(a1 + 744);
  BOOL v5 = explicit >= v4;
  unint64_t v6 = explicit - v4;
  uint64_t v7 = -257;
  if (v5) {
    uint64_t v7 = 0;
  }
  if (v6 != v7)
  {
    if (!*(unsigned char *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((uint64_t *)(a1 + 80));
      *(unsigned char *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    unint64_t v8 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
    unint64_t v9 = *(void *)(a1 + 744);
    uint64_t v10 = 257;
    if (v8 >= v9) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v10 + v8 - v9;
    if (v11)
    {
      uint64_t v12 = a1 + 752;
      unint64_t v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(v12 + 32 * v9 + 32 * v11), v16);
        if (v13 == 257) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = v13;
        }
      }
      else
      {
        unint64_t v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 32 * v9), (uint64_t *)(a1 + 8976), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 32 * v14 - 8224), v16);
        unint64_t v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1BB63BA5C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB63BA64);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  *(void *)a1 = &unk_1F14BAED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2) {
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(v2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_16AUFTWindowParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC16AUFTWindowParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    do
    {
      unint64_t v6 = (void *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      uint64_t v7 = (float *)(v5 + 1);
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7++, ", ");
      AUFTSpatialACLogCSV<float>(v6, v7, "\n");
      BOOL v5 = (uint64_t *)(v7 + 2);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(uint64_t a1)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
  unint64_t v4 = *(void *)(a1 + 744);
  BOOL v5 = explicit >= v4;
  unint64_t v6 = explicit - v4;
  uint64_t v7 = -257;
  if (v5) {
    uint64_t v7 = 0;
  }
  if (v6 != v7)
  {
    if (!*(unsigned char *)(a1 + 648))
    {
      std::__optional_destruct_base<std::ofstream,false>::reset[abi:ne180100](a1 + 80);
      std::ofstream::basic_ofstream((uint64_t *)(a1 + 80));
      *(unsigned char *)(a1 + 648) = 1;
    }
    v16[0] = a1;
    unint64_t v8 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 680), memory_order_acquire);
    unint64_t v9 = *(void *)(a1 + 744);
    uint64_t v10 = 257;
    if (v8 >= v9) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v10 + v8 - v9;
    if (v11)
    {
      uint64_t v12 = a1 + 752;
      unint64_t v13 = v10 + v8;
      if (v10 + v8 < 0x102)
      {
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 24 * v9), (uint64_t *)(v12 + 24 * v9 + 24 * v11), v16);
        if (v13 == 257) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = v13;
        }
      }
      else
      {
        unint64_t v14 = v10 + v8;
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(v12 + 24 * v9), (uint64_t *)(a1 + 6920), v16);
        _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_((uint64_t *)(a1 + 752), (uint64_t *)(v12 + 24 * v14 - 6168), v16);
        unint64_t v15 = v13 - 257;
      }
      atomic_store(v15, (unint64_t *)(a1 + 744));
    }
  }
  std::mutex::unlock(v2);
}

void sub_1BB63C050(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB63C058);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  *(void *)a1 = &unk_1F14BAE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2) {
        AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(v2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details12message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN13AUFTSpatialAC18AURealTimeDebugLogINS3_21AUFTOrientationParamsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14BAE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void _ZN5boost8lockfree6detail15ringbuffer_baseINSt3__15tupleIJNS3_6chrono10time_pointINS5_12steady_clockENS5_8durationIxNS3_5ratioILl1ELl1000000000EEEEEEEN13AUFTSpatialAC21AUFTOrientationParamsEEEEE22run_functor_and_deleteIZNSD_18AURealTimeDebugLogISE_Lm256EE6Buffer5FlushEvEUlRKT_E_EEvPSF_SP_SN_(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    do
    {
      unint64_t v6 = (void *)(*a3 + 80);
      AUFTSpatialAC::Log(v6, v5);
      uint64_t v7 = (uint64_t)(v5 + 1);
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, ", ");
      v7 += 4;
      AUFTSpatialACLogCSV<CAOrientation>(v6, v7, "\n");
      BOOL v5 = (uint64_t *)(v7 + 4);
    }
    while (v5 != a2);
  }
}

void AUFTSpatialACLogCSV<CAOrientation>(void *a1, uint64_t a2, const char *a3)
{
  memset(&v14, 0, sizeof(v14));
  long long v16 = 0u;
  long long v17 = 0u;
  memset(__sb, 0, sizeof(__sb));
  std::streambuf::basic_streambuf();
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  uint64_t v20 = 24;
  *(void *)&long long v16 = 0;
  *(void *)&__sb[0] = &unk_1F149D340;
  uint64_t v21 = MEMORY[0x1E4FBA458] + 24;
  v22.__vftable = (std::ios_base_vtbl *)(MEMORY[0x1E4FBA458] + 64);
  std::ios_base::init(&v22, __sb);
  uint64_t v23 = 0;
  int v24 = -1;
  *(void *)&long long v26 = &v25;
  *((void *)&v26 + 1) = (char *)&v25 + 2;
  BOOL v5 = (std::ios_base *)((char *)&v21 + *(void *)(v21 - 24));
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  unint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 32);
  long long v8 = *(_OWORD *)(*(void *)((char *)&v22.__rdstate_ + *(void *)(v21 - 24)) + 40);
  long long v26 = v8;
  if ((v7 & 5) != 0)
  {
    char v9 = 0;
  }
  else
  {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&v14, (std::string::value_type *)v8, *((std::string::value_type **)&v8 + 1), *((void *)&v8 + 1) - v8);
    char v9 = 1;
  }
  std::ostream::~ostream();
  *(void *)&__sb[0] = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  if ((v9 & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)__sb);
    *(void *)&__sb[0] = &unk_1F149D4E8;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v14;
  }
  else {
    uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, size);
  size_t v13 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1BB63C648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t AUFTSpatialAC::SetRenderTuningValsToUse(uint64_t this)
{
  float v1 = *(float *)(this + 816);
  float v2 = *(float *)(this + 820);
  int v3 = *(_DWORD *)(this + 800);
  unsigned int v4 = v3 - 1;
  float v5 = v2 / v1;
  unsigned int v6 = v3 - 3;
  if (v4 >= 2) {
    float v5 = v1 / v2;
  }
  float v7 = *(float *)(this + 1008);
  if (v7 == v5 || v7 == 0.0 || !*(unsigned char *)(this + 848))
  {
    __asm { FMOV            V2.2S, #1.0 }
    *(void *)(this + 3296) = _D2;
  }
  else if (v7 <= v5)
  {
    *(_DWORD *)(this + 3300) = 1065353216;
    *(float *)(this + 3296) = v7 / v5;
  }
  else
  {
    *(float *)(this + 3300) = v5 / v7;
    *(_DWORD *)(this + 3296) = 1065353216;
  }
  if (v4 < 2)
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 852);
    *(float *)(this + 3288) = v2;
    *(float *)(this + 3292) = v1;
    if (!*(unsigned char *)(this + 849)) {
      *(_DWORD *)(this + 3296) = 0;
    }
  }
  else if (v6 > 1)
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 868);
    *(float *)(this + 3288) = v1;
    *(float *)(this + 3292) = v2;
  }
  else
  {
    *(_OWORD *)(this + 3272) = *(_OWORD *)(this + 868);
    *(float *)(this + 3288) = v1;
    *(float *)(this + 3292) = v2;
    if (!*(unsigned char *)(this + 850)) {
      *(_DWORD *)(this + 3300) = 0;
    }
  }
  return this;
}

os_log_t ___ZN13AUFTSpatialAC9getAUSLogEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUFTSpatialAC");
  AUFTSpatialAC::getAUSLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUFTSpatialAC::CanScheduleParameters(AUFTSpatialAC *this)
{
  return 0;
}

uint64_t AUFTSpatialAC::SetParameter(AUFTSpatialAC *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t result = 4294956418;
  switch(a3)
  {
    case 2:
      if (a2 - 812 >= 0xFFFFFFF4) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = -10878;
      }
      if (a4 <= 0x1F) {
        uint64_t result = v11;
      }
      else {
        uint64_t result = 4294956419;
      }
      if (!result)
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), a4);
        ausdk::AUElement::SetParameter(Element, a2, a5, 0);
        return 0;
      }
      break;
    case 1:
      if (a2 - 609 >= 0xFFFFFFF7) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = -10878;
      }
      if (a4 <= 0x1F) {
        uint64_t result = v13;
      }
      else {
        uint64_t result = 4294956419;
      }
      if (!result)
      {
        std::string v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 656), a4);
        ausdk::AUElement::SetParameter(v14, a2, a5, 0);
        uint64_t result = 0;
        if (a2 != 600)
        {
          uint64_t result = 0;
          ++*((void *)this + 73);
          *((unsigned char *)this + a4 + 600) = 1;
        }
      }
      break;
    case 0:
      uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 32), a4);
      ausdk::AUElement::SetParameter(v10, a2, a5, 0);
      if (a2 == 213 || a2 == 200 || a2 - 206 <= 5)
      {
        uint64_t result = 0;
        ++*((void *)this + 71);
      }
      else
      {
        uint64_t result = 0;
        ++*((void *)this + 69);
      }
      break;
  }
  return result;
}

uint64_t AUFTSpatialAC::GetParameter(AUFTSpatialAC *this, unsigned int a2, int a3, unsigned int a4, float *a5)
{
  uint64_t v7 = 4294956418;
  switch(a3)
  {
    case 2:
      if (a2 - 812 >= 0xFFFFFFF4) {
        LODWORD(v7) = 0;
      }
      else {
        LODWORD(v7) = -10878;
      }
      if (a4 <= 0x1F) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 4294956419;
      }
      if (v7) {
        return v7;
      }
      char v9 = (AUFTSpatialAC *)((char *)this + 704);
LABEL_21:
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v9, a4);
      goto LABEL_22;
    case 1:
      if (a2 - 609 >= 0xFFFFFFF7) {
        LODWORD(v7) = 0;
      }
      else {
        LODWORD(v7) = -10878;
      }
      if (a4 <= 0x1F) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 4294956419;
      }
      if (v7) {
        return v7;
      }
      char v9 = (AUFTSpatialAC *)((char *)this + 656);
      goto LABEL_21;
    case 0:
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 32), a4);
LABEL_22:
      float Parameter = ausdk::AUElement::GetParameter(Element, a2);
      uint64_t v7 = 0;
      *a5 = Parameter;
      break;
  }
  return v7;
}

uint64_t AUFTSpatialAC::SetProperty(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, CFDataRef *a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
    }
    uint64_t v7 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float v32 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "The inData passed to SetProperty is null.", v32, 2u);
    }
    return 4294956445;
  }
  if (a3) {
    return 4294956417;
  }
  uint64_t v6 = 4294956417;
  if (a2 > 4999)
  {
    if (a2 > 6999)
    {
      if (a2 == 7000)
      {
        float v20 = *(float *)a5;
        uint64_t v21 = *((void *)this + 668);
        std::mutex::lock((std::mutex *)(v21 + 48));
        *(void *)(v21 + 136) = (uint64_t)v20;
        std::mutex::unlock((std::mutex *)(v21 + 48));
        if (AUFTSpatialACLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_177);
        }
        std::ios_base v22 = AUFTSpatialACLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)float v32 = 134217984;
          *(double *)&v32[4] = v20;
          _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_INFO, "set CoreAudio reporter time period - %f", v32, 0xCu);
        }
        return 0;
      }
      if (a2 != 105000) {
        return v6;
      }
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      {
        uint64_t v23 = a5;
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
        a5 = v23;
      }
      if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI) {
        return 4294956417;
      }
      CFDataRef v17 = *a5;
      BytePtr = CFDataGetBytePtr(*a5);
      CFDataGetLength(v17);
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
      }
      uint64_t v6 = (*(uint64_t (**)(void, const UInt8 *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 56))(*((void *)this + 66), BytePtr);
      if (v6)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
        }
        long long v19 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return v6;
        }
        *(_DWORD *)float v32 = 67109120;
        *(_DWORD *)&v32[4] = v6;
LABEL_57:
        _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %d", v32, 8u);
        return v6;
      }
    }
    else
    {
      if (a2 != 5000)
      {
        if (a2 != 6000) {
          return v6;
        }
        memset(v32, 0, sizeof(v32));
        uint64_t v33 = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(v32, a5, (uint64_t)&a5[a6 >> 3], a6 >> 3);
        v29[0] = 2;
        __p[0] = *(void **)v32;
        *(void *)AudioTimeStamp buf = *(void *)&v32[8];
        float v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((uint64_t **)__p, (uint64_t **)buf);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        uint64_t v10 = *((void *)this + 668);
        long long v26 = *(_OWORD *)v32;
        uint64_t v11 = v33;
        uint64_t v33 = 0;
        memset(v32, 0, sizeof(v32));
        std::mutex::lock((std::mutex *)(v10 + 48));
        uint64_t v12 = *(void **)(v10 + 112);
        if (v12)
        {
          *(void *)(v10 + 120) = v12;
          operator delete(v12);
          *(void *)(v10 + 112) = 0;
          *(void *)(v10 + 120) = 0;
          *(void *)(v10 + 128) = 0;
        }
        *(_OWORD *)(v10 + 112) = v26;
        *(void *)(v10 + 128) = v11;
        std::mutex::unlock((std::mutex *)(v10 + 48));
        if (AUFTSpatialACLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_177);
        }
        unsigned int v13 = AUFTSpatialACLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v29, -1, 0x20u, 0, 0, __p);
          std::string v14 = v28 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315138;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_INFO, "set CoreAudio reporter IDs - %s", buf, 0xCu);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
        if (*(void *)v32)
        {
          *(void *)&v32[8] = *(void *)v32;
          operator delete(*(void **)v32);
        }
        return 0;
      }
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1)
      {
        int v24 = a5;
        uint64_t v25 = a6;
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
        a6 = v25;
        a5 = v24;
      }
      if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI) {
        return 4294956417;
      }
      uint64_t v6 = (*(uint64_t (**)(void, CFDataRef *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                   + 56))(*((void *)this + 66), a5, a6);
      if (v6)
      {
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
        }
        long long v19 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return v6;
        }
        *(_DWORD *)float v32 = 67109120;
        *(_DWORD *)&v32[4] = v6;
        goto LABEL_57;
      }
    }
    AUFTSpatialAC::LoadSpatialMetadataProperties(this);
    return v6;
  }
  if (a2 > 3999)
  {
    if (a2 == 4000)
    {
      if (a6 == 4)
      {
        unsigned int v15 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 0x7Fu)
        {
          long long v16 = (uint64_t *)((char *)this + 960);
          goto LABEL_61;
        }
      }
    }
    else
    {
      if (a2 != 4001) {
        return v6;
      }
      if (a6 == 4)
      {
        unsigned int v15 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 0x7Fu)
        {
          long long v16 = (uint64_t *)((char *)this + 968);
LABEL_61:
          AUFTSpatialAC::SetOrientationFlagsFromBitMask(v16, v15);
          return 0;
        }
      }
    }
    return 4294956445;
  }
  if (a2 == 21)
  {
    uint64_t v6 = 0;
    *((unsigned char *)this + 544) = *(_DWORD *)a5 != 0;
    return v6;
  }
  if (a2 == 3700)
  {
    if (a6 == 4)
    {
      uint64_t v6 = 0;
      *((unsigned char *)this + 376) = *(_DWORD *)a5 == 1;
      return v6;
    }
    return 4294956445;
  }
  return v6;
}

void sub_1BB63D024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *AUFTSpatialAC::SetOrientationFlagsFromBitMask(uint64_t *result, unsigned int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *result;
  do
  {
    uint64_t v4 = v3 | (1 << v2);
    v3 &= ~(1 << v2);
    if (a2) {
      uint64_t v3 = v4;
    }
    a2 >>= 1;
    ++v2;
  }
  while (v2 != 7);
  *uint64_t result = v3;
  return result;
}

void AUFTSpatialAC::LoadSpatialMetadataProperties(AUFTSpatialAC *this)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    int v3 = 4;
    unsigned int v4 = 0;
    if (!(*(unsigned int (**)(void, uint64_t, void, unsigned int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                         + 24))(*((void *)this + 66), 3, 0, &v4, &v3))(*(void (**)(AUFTSpatialAC *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 200, 0, 0, 0, (float)v4);
  }
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 4, 0, 206, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 5, 0, 207, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 6, 0, 210, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 7, 0, 211, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 8, 0, 208, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 9, 0, 209, 0, 0);
  AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 17, 0, 212, 0, 0);
  uint64_t v2 = 0;
  do
  {
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 10, v2, 602, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 11, v2, 603, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 12, v2, 604, 1, v2);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
    }
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    {
      int v3 = 4;
      unsigned int v4 = 0;
      if (!(*(unsigned int (**)(void, uint64_t, uint64_t, unsigned int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                            + 24))(*((void *)this + 66), 16, v2, &v4, &v3))(*(void (**)(AUFTSpatialAC *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 605, 1, v2, 0, (float)v4);
    }
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 13, v2, 606, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 14, v2, 607, 1, v2);
    AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(this, 15, v2, 608, 1, v2);
    uint64_t v2 = (v2 + 1);
  }
  while (v2 != 32);
}

void AUFTSpatialAC::LoadSpatialMetadataPropertyAs<float,float>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    int v12 = 4;
    float v13 = 0.0;
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, float *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                   + 24))(a1[66], a2, a3, &v13, &v12))(*(void (**)(void *, uint64_t, uint64_t, uint64_t, void, float))(*a1 + 152))(a1, a4, a5, a6, 0, v13);
  }
}

void AUFTSpatialAC::LoadSpatialMetadataPropertyAs<unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    int v13 = 4;
    int v14 = 0;
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, int *, int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                 + 24))(a1[66], a2, a3, &v14, &v13))
    {
      v12.n128_u64[0] = 0;
      if (v14) {
        v12.n128_f32[0] = 1.0;
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, void, __n128))(*a1 + 152))(a1, a4, a5, a6, 0, v12);
    }
  }
}

void *___ZL21GetSpatialMetadataSPIv_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "gSpatialMetadataSPI");
    GetSpatialMetadataSPI(void)::sSpatialMetadataSPI = (uint64_t)result;
  }
  return result;
}

uint64_t AUFTSpatialAC::GetProperty(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, float *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t v5 = 4294956417;
  if (a2 <= 4000)
  {
    if (a2 > 3699)
    {
      if (a2 != 3700)
      {
        if (a2 != 4000) {
          return v5;
        }
        uint64_t v5 = 0;
        uint64_t v14 = *((void *)this + 120);
LABEL_45:
        *(_DWORD *)a5 = v14;
        return v5;
      }
      uint64_t v5 = 0;
      int v12 = *((unsigned __int8 *)this + 376);
    }
    else if (a2 == 21)
    {
      uint64_t v5 = 0;
      int v12 = *((unsigned __int8 *)this + 544);
    }
    else
    {
      if (a2 != 3000) {
        return v5;
      }
      uint64_t v5 = 0;
      int v12 = *((_DWORD *)this + 201);
    }
    *(_DWORD *)a5 = v12;
    return v5;
  }
  if (a2 > 5999)
  {
    switch(a2)
    {
      case 6000:
        AU::FTSpatialAC::MetricsReporter::getCAReporterIDs((AU::FTSpatialAC::MetricsReporter *)&length[1], *((void *)this + 668));
        unsigned int v15 = *(void **)&length[1];
        memcpy(a5, *(const void **)&length[1], (size_t)v19 - *(void *)&length[1]);
        if (v15)
        {
          long long v19 = v15;
          operator delete(v15);
        }
        return 0;
      case 7000:
        uint64_t v16 = *((void *)this + 668);
        std::mutex::lock((std::mutex *)(v16 + 48));
        float v17 = (float)*(uint64_t *)(v16 + 136);
        std::mutex::unlock((std::mutex *)(v16 + 48));
        uint64_t v5 = 0;
        *a5 = v17;
        break;
      case 105000:
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
          dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
        }
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
        {
          AUFTSpatialAC::StoreSpatialMetadataProperties(this);
          length[0] = *((_DWORD *)this + 134);
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], length[0]);
          MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
          }
          uint64_t v5 = (*(uint64_t (**)(void, UInt8 *, _DWORD *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                    + 48))(*((void *)this + 66), MutableBytePtr, length);
          if (v5)
          {
            if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
              dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
            }
            uint64_t v11 = AUFTSpatialAC::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              length[1] = 67109120;
              length[2] = v5;
              _os_log_error_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %u", (uint8_t *)&length[1], 8u);
            }
            *(void *)a5 = 0;
            CFRelease(Mutable);
          }
          else
          {
            CFDataSetLength(Mutable, length[0]);
            *(void *)a5 = Mutable;
          }
        }
        break;
    }
    return v5;
  }
  if (a2 == 4001)
  {
    uint64_t v5 = 0;
    uint64_t v14 = *((void *)this + 121);
    goto LABEL_45;
  }
  if (a2 != 5000) {
    return v5;
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (!GetSpatialMetadataSPI(void)::sSpatialMetadataSPI) {
    return 4294956417;
  }
  AUFTSpatialAC::StoreSpatialMetadataProperties(this);
  length[0] = *((_DWORD *)this + 134);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  uint64_t v5 = (*(uint64_t (**)(void, float *, _DWORD *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 48))(*((void *)this + 66), a5, length);
  if (v5)
  {
    if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
      dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
    }
    int v13 = AUFTSpatialAC::getAUSLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      length[1] = 67109120;
      length[2] = v5;
      _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "failed to set spatial metadata with status %u", (uint8_t *)&length[1], 8u);
    }
  }
  return v5;
}

void AUFTSpatialAC::StoreSpatialMetadataProperties(AUFTSpatialAC *this)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    float v4 = 0.0;
    if (!(*(unsigned int (**)(AUFTSpatialAC *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 200, 0, 0, &v4))
    {
      unsigned int v3 = v4;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
      }
      (*(void (**)(void, uint64_t, void, unsigned int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                               + 32))(*((void *)this + 66), 3, 0, &v3, 4);
    }
  }
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 4, 0, 206, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 5, 0, 207, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 6, 0, 210, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 7, 0, 211, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 8, 0, 208, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 9, 0, 209, 0, 0);
  AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 17, 0, 212, 0, 0);
  uint64_t v2 = 0;
  do
  {
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 10, v2, 602, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 11, v2, 603, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(this, 12, v2, 604, 1, v2);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
    }
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
    {
      float v4 = 0.0;
      if (!(*(unsigned int (**)(AUFTSpatialAC *, uint64_t, uint64_t, uint64_t, float *))(*(void *)this + 144))(this, 605, 1, v2, &v4))
      {
        unsigned int v3 = v4;
        if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
          dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
        }
        (*(void (**)(void, uint64_t, uint64_t, unsigned int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                                  + 32))(*((void *)this + 66), 16, v2, &v3, 4);
      }
    }
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 13, v2, 606, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 14, v2, 607, 1, v2);
    AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(this, 15, v2, 608, 1, v2);
    uint64_t v2 = (v2 + 1);
  }
  while (v2 != 32);
}

void AUFTSpatialAC::StoreSpatialMetadataPropertyAs<float,float>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    int v13 = 0;
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, uint64_t, int *))(*a1 + 144))(a1, a4, a5, a6, &v13))
    {
      int v12 = v13;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
      }
      (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                       + 32))(a1[66], a2, a3, &v12, 4);
    }
  }
}

void AUFTSpatialAC::StoreSpatialMetadataPropertyAs<unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    float v13 = 0.0;
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 144))(a1, a4, a5, a6, &v13))
    {
      BOOL v12 = v13 != 0.0;
      if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
        dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
      }
      (*(void (**)(void, uint64_t, uint64_t, BOOL *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI
                                                                          + 32))(a1[66], a2, a3, &v12, 4);
    }
  }
}

uint64_t AUFTSpatialAC::GetPropertyInfo(AUFTSpatialAC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t result = 4294956417;
  if (a2 <= 4000)
  {
    if (a2 > 3699)
    {
      if (a2 != 3700 && a2 != 4000) {
        return result;
      }
    }
    else if (a2 != 21)
    {
      if (a2 != 3000) {
        return result;
      }
      uint64_t result = 0;
      *a6 = 0;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t result = 0;
    *a6 = 1;
LABEL_19:
    unsigned int v11 = 4;
LABEL_20:
    *a5 = v11;
    return result;
  }
  if (a2 <= 5999)
  {
    if (a2 != 4001)
    {
      if (a2 != 5000) {
        return result;
      }
      uint64_t result = 0;
      *a6 = 1;
      unsigned int v11 = *((_DWORD *)this + 134);
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (a2 != 6000)
  {
    if (a2 != 7000)
    {
      if (a2 != 105000) {
        return result;
      }
      uint64_t result = 0;
      *a6 = 1;
      unsigned int v11 = 8;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *a6 = 1;
  AU::FTSpatialAC::MetricsReporter::getCAReporterIDs((AU::FTSpatialAC::MetricsReporter *)&__p, *((void *)this + 668));
  BOOL v12 = __p;
  *a5 = (v14 - __p) & 0xFFFFFFF8;
  if (v12)
  {
    uint64_t v14 = v12;
    operator delete(v12);
  }
  return 0;
}

uint64_t AUFTSpatialAC::Reset(AUFTSpatialAC *this)
{
  *((unsigned char *)this + 752) = 1;
  *((void *)this + 69) = 1;
  *((_OWORD *)this + 35) = xmmword_1BB872720;
  *((_OWORD *)this + 36) = xmmword_1BB872720;
  *((void *)this + 74) = 0;
  *(void *)&long long v2 = 0x101010101010101;
  *((void *)&v2 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 600) = v2;
  *(_OWORD *)((char *)this + 616) = v2;
  AUFTSpatialAC::SetOutputParamsToDefaults(this);
  uint64_t v3 = 940;
  if (!*((unsigned char *)this + 783)) {
    uint64_t v3 = 884;
  }
  uint64_t v4 = 944;
  if (!*((unsigned char *)this + 783)) {
    uint64_t v4 = 888;
  }
  uint64_t v5 = 948;
  if (!*((unsigned char *)this + 783)) {
    uint64_t v5 = 952;
  }
  int v6 = *(_DWORD *)((char *)this + v5);
  int v7 = *(_DWORD *)((char *)this + v4);
  int v8 = *(_DWORD *)((char *)this + v3);
  *((_DWORD *)this + 1328) = v8;
  *((_DWORD *)this + 1329) = v7;
  *((_DWORD *)this + 1330) = v6;
  *((_DWORD *)this + 1325) = v8;
  *((_DWORD *)this + 1326) = v7;
  *((_DWORD *)this + 1327) = v6;
  memset_pattern16((char *)this + 4116, &unk_1BB87C220, 0x80uLL);
  memset_pattern16((char *)this + 4244, &unk_1BB87C220, 0x80uLL);
  vDSP_vfill((const float *)this + 161, (float *)this + 1197, 1, 0x20uLL);
  return 0;
}

uint64_t AUFTSpatialAC::SetOutputParamsToDefaults(AUFTSpatialAC *this)
{
  long long v2 = (AUFTSpatialAC *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x190u, 0.0, 0);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v4, 0x191u, 0.0, 0);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v5, 0x192u, 1.0, 0);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v6, 0x193u, 0.0, 0);
  int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v7, 0x194u, 1.0, 0);
  int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v8, 0x195u, 1.0, 0);
  char v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v9, 0x196u, 1.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v11 = *((void *)this + 93);
    uint64_t result = v11
           ? (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11)
           : (*((void *)this + 91) - *((void *)this + 90)) >> 3;
    if (i >= result) {
      break;
    }
    float v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v13, 0x320u, 0.0, 0);
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v14, 0x321u, 0.0, 0);
    uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v15, 0x322u, 2.0, 0);
    uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v16, 0x323u, 0.0, 0);
    float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v17, 0x324u, 1.0, 0);
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v18, 0x325u, 0.0, 0);
    long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v19, 0x326u, 0.0, 0);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v20, 0x327u, 10.0, 0);
    uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v21, 0x328u, 9.0, 0);
    std::ios_base v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v22, 0x329u, 0.0, 0);
    uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v23, 0x32Au, 0.0, 0);
    int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 704), i);
    ausdk::AUElement::SetParameter(v24, 0x32Bu, 0.0, 0);
  }
  return result;
}

uint64_t AUFTSpatialAC::Initialize(AUFTSpatialAC *this)
{
  *((unsigned char *)this + 752) = 1;
  uint64_t v2 = *((void *)this + 21);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  *((_DWORD *)this + 158) = v3;
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(void))(*(void *)v4 + 24))(*((void *)this + 15));
    LODWORD(v3) = *((_DWORD *)this + 158);
  }
  else
  {
    uint64_t v5 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  *((_DWORD *)this + 159) = v5;
  if (v5 >= v3) {
    LODWORD(v5) = v3;
  }
  *((_DWORD *)this + 160) = v5;
  float v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 80), 0) + 80);
  *((float *)this + 135) = v6;
  *((_DWORD *)this + 1331) = 1112014848;
  (*(void (**)(AUFTSpatialAC *, void, void))(*(void *)this + 72))(this, 0, 0);
  AUFTSpatialAC::UpdateState((float32x2_t *)this);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 70) = *((void *)this + 69);
  *((void *)this + 72) = *((void *)this + 71);
  *((void *)this + 74) = *((void *)this + 73);
  uint64_t v7 = 940;
  if (!*((unsigned char *)this + 783)) {
    uint64_t v7 = 884;
  }
  uint64_t v8 = 944;
  uint64_t v9 = 948;
  if (!*((unsigned char *)this + 783)) {
    uint64_t v9 = 952;
  }
  int v10 = *(_DWORD *)((char *)this + v9);
  if (!*((unsigned char *)this + 783)) {
    uint64_t v8 = 888;
  }
  int v11 = *(_DWORD *)((char *)this + v8);
  int v12 = *(_DWORD *)((char *)this + v7);
  *((_DWORD *)this + 1328) = v12;
  *((_DWORD *)this + 1329) = v11;
  *((_DWORD *)this + 1330) = v10;
  *((_DWORD *)this + 1325) = v12;
  *((_DWORD *)this + 1326) = v11;
  *((_DWORD *)this + 1327) = v10;
  return 0;
}

float32x2_t *AUFTSpatialAC::UpdateState(float32x2_t *this)
{
  AUFTSpatialAC::UpdateGlobalVariableState(this);
  AUFTSpatialAC::UpdateInputVariableState((AUFTSpatialAC *)this);
  unint64_t v2 = 0;
  for (unsigned int i = (float *)&this[311] + 1; ; i += 6)
  {
    float32x2_t v4 = this[93];
    if (v4) {
      LODWORD(v5) = (*(uint64_t (**)(float32x2_t))(**(void **)&v4 + 24))(v4);
    }
    else {
      uint64_t v5 = (*(void *)&this[91] - *(void *)&this[90]) >> 3;
    }
    if (v2 >= v5) {
      break;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *(i - 5) = ausdk::AUElement::GetParameter(Element, 0x320u);
    uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *(i - 4) = ausdk::AUElement::GetParameter(v7, 0x321u);
    uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *(i - 3) = ausdk::AUElement::GetParameter(v8, 0x322u);
    uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *(i - 2) = ausdk::AUElement::GetParameter(v9, 0x323u);
    int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *((unsigned char *)i - 4) = ausdk::AUElement::GetParameter(v10, 0x325u) == 1.0;
    int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[88], v2);
    *unsigned int i = ausdk::AUElement::GetParameter(v11, 0x328u);
    ++v2;
  }

  return AUFTSpatialAC::MakeDependentPositionData(this);
}

void AUFTSpatialAC::CreateExtendedElements(AUFTSpatialAC *this)
{
  unint64_t v2 = (AUFTSpatialAC *)((char *)this + 656);
  ausdk::AUScope::Initialize((AUFTSpatialAC *)((char *)this + 656), this, 1, 32);
  for (unsigned int i = 0; i != 32; ++i)
  {
    std::to_string(&v16, i);
    float32x2_t v4 = std::string::insert(&v16, 0, "In", 2uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    int64_t v18 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18 >= 0) {
      float v6 = __p;
    }
    else {
      float v6 = (void **)__p[0];
    }
    CFStringRef v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v2, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v7);
    CFRelease(v7);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = (AUFTSpatialAC *)((char *)this + 704);
  ausdk::AUScope::Initialize((AUFTSpatialAC *)((char *)this + 704), this, 2, 32);
  for (unsigned int j = 0; j != 32; ++j)
  {
    std::to_string(&v16, j);
    int v11 = std::string::insert(&v16, 0, "Out", 3uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v18 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18 >= 0) {
      float v13 = __p;
    }
    else {
      float v13 = (void **)__p[0];
    }
    CFStringRef v14 = CFStringCreateWithCString(0, (const char *)v13, 0x8000100u);
    uint64_t v15 = ausdk::AUScope::GetElement(v9, j);
    ausdk::Owned<__CFString const*>::operator=((const void **)(v15 + 72), v14);
    CFRelease(v14);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB63E884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUFTSpatialAC::~AUFTSpatialAC(AUFTSpatialAC *this)
{
  AUFTSpatialAC::~AUFTSpatialAC(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  uint64_t *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  uint64_t *v8;
  void **v9[2];

  *(void *)this = &unk_1F14BABC0;
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI) {
    (*(void (**)(void))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 16))(*((void *)this + 66));
  }
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 669);
  *((_OWORD *)this + 334) = 0u;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v3) {
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](v3);
  }
  float32x2_t v4 = (uint64_t *)*((void *)this + 127);
  *((void *)this + 127) = 0;
  if (v4) {
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](v4);
  }
  if (*((unsigned char *)this + 2464))
  {
    v9[0] = (void **)((char *)this + 2440);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v9);
    *((unsigned char *)this + 2464) = 0;
  }
  if (*((unsigned char *)this + 3264))
  {
    v9[0] = (void **)((char *)this + 3240);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v9);
    *((unsigned char *)this + 3264) = 0;
  }
  if (AUFTSpatialACLog(void)::onceToken != -1) {
    dispatch_once(&AUFTSpatialACLog(void)::onceToken, &__block_literal_global_177);
  }
  long long v5 = AUFTSpatialACLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUFTSpatialACLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "destroyed", (uint8_t *)v9, 2u);
  }
  float v6 = (std::__shared_weak_count *)*((void *)this + 669);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((unsigned char *)this + 3264))
  {
    v9[0] = (void **)((char *)this + 3240);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v9);
  }
  if (*((unsigned char *)this + 2464))
  {
    v9[0] = (void **)((char *)this + 2440);
    std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](v9);
  }
  CFStringRef v7 = (uint64_t *)*((void *)this + 127);
  *((void *)this + 127) = 0;
  if (v7) {
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v8) {
    std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](v8);
  }
  v9[0] = (void **)((char *)this + 720);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](v9);
  v9[0] = (void **)((char *)this + 672);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](v9);
  ausdk::AUBase::~AUBase(this);
}

void std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  float v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    float32x2_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFStringRef v7 = (uint64_t *)*--v4;
        float v6 = v7;
        *float32x2_t v4 = 0;
        if (v7) {
          std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  float v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    float32x2_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFStringRef v7 = (uint64_t *)*--v4;
        float v6 = v7;
        *float32x2_t v4 = 0;
        if (v7) {
          std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(*a1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTWindowParams,256ul>::Buffer::Flush(v2);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v2 + 680), memory_order_acquire);
    unint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = v4 - explicit;
    BOOL v8 = v4 > explicit;
    uint64_t v6 = 257;
    if (!v8) {
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      unint64_t v7 = v6 + explicit;
      unint64_t v9 = v7 - 257;
      BOOL v8 = v7 > 0x101;
      if (v7 == 257) {
        unint64_t v7 = 0;
      }
      if (v8) {
        unint64_t v7 = v9;
      }
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0) {
      operator delete(*(void **)(v2 + 656));
    }
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    int v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    MEMORY[0x1C185D370](v2, 0x10F2C40CC79D655);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(*a1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTOrientationParams,256ul>::Buffer::Flush(v2);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v2 + 680), memory_order_acquire);
    unint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = v4 - explicit;
    BOOL v8 = v4 > explicit;
    uint64_t v6 = 257;
    if (!v8) {
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      unint64_t v7 = v6 + explicit;
      unint64_t v9 = v7 - 257;
      BOOL v8 = v7 > 0x101;
      if (v7 == 257) {
        unint64_t v7 = 0;
      }
      if (v8) {
        unint64_t v7 = v9;
      }
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0) {
      operator delete(*(void **)(v2 + 656));
    }
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    int v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    MEMORY[0x1C185D370](v2, 0x10F2C40C449EA7FLL);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 568))
  {
    uint64_t v2 = MEMORY[0x1E4FBA400];
    uint64_t v3 = *MEMORY[0x1E4FBA400];
    *(void *)a1 = *MEMORY[0x1E4FBA400];
    *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
    MEMORY[0x1C185CC40](a1 + 8);
    std::ostream::~ostream();
    MEMORY[0x1C185D210](a1 + 416);
  }
  return a1;
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(*a1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUInStreamParams,256ul>::Buffer::Flush(v2);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v2 + 680), memory_order_acquire);
    unint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = v4 - explicit;
    BOOL v8 = v4 > explicit;
    uint64_t v6 = 257;
    if (!v8) {
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      unint64_t v7 = v6 + explicit;
      unint64_t v9 = v7 - 257;
      BOOL v8 = v7 > 0x101;
      if (v7 == 257) {
        unint64_t v7 = 0;
      }
      if (v8) {
        unint64_t v7 = v9;
      }
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0) {
      operator delete(*(void **)(v2 + 656));
    }
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    int v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    MEMORY[0x1C185D370](v2, 0x10F2C407FE28AF6);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(*a1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUFTSpatialAC::AURealTimeDebugLog<AUFTSpatialAC::AUFTSpatAUOutStreamParams,256ul>::Buffer::Flush(v2);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v2 + 680), memory_order_acquire);
    unint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = v4 - explicit;
    BOOL v8 = v4 > explicit;
    uint64_t v6 = 257;
    if (!v8) {
      uint64_t v6 = 0;
    }
    if (v6 != v5)
    {
      unint64_t v7 = v6 + explicit;
      unint64_t v9 = v7 - 257;
      BOOL v8 = v7 > 0x101;
      if (v7 == 257) {
        unint64_t v7 = 0;
      }
      if (v8) {
        unint64_t v7 = v9;
      }
      atomic_store(v7, (unint64_t *)(v2 + 744));
    }
    if (*(char *)(v2 + 679) < 0) {
      operator delete(*(void **)(v2 + 656));
    }
    std::__optional_destruct_base<std::ofstream,false>::~__optional_destruct_base[abi:ne180100](v2 + 80);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    int v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    MEMORY[0x1C185D370](v2, 0x10F2C40CC79D655);
  }

  JUMPOUT(0x1C185D370);
}

void AUFTSpatialAC::AUFTSpatialAC(AUFTSpatialAC *this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_OWORD *)((char *)this + 792);
  unint64_t v4 = ausdk::AUBase::AUBase(this, a2, 32, 32);
  uint64_t v5 = 0;
  *(void *)unint64_t v4 = &unk_1F14BABC0;
  *((void *)v4 + 66) = 0;
  uint64_t v6 = (char *)v4 + 528;
  *((_DWORD *)v4 + 135) = 1186693120;
  *((unsigned char *)v4 + 544) = 0;
  *((void *)v4 + 69) = 1;
  *((_OWORD *)v4 + 35) = xmmword_1BB872720;
  *((_OWORD *)v4 + 36) = xmmword_1BB872720;
  *((void *)v4 + 74) = 0;
  *((void *)v4 + 79) = 0x2000000020;
  unint64_t v7 = (const float *)((char *)v4 + 644);
  *(void *)((char *)v4 + 644) = 0x3F80000000000000;
  BOOL v8 = (ausdk::AUBase *)((char *)v4 + 656);
  *((void *)v4 + 82) = 0;
  *((_DWORD *)v4 + 166) = 0;
  *((_OWORD *)v4 + 45) = 0u;
  *((_OWORD *)v4 + 46) = 0u;
  *((_OWORD *)v4 + 42) = 0u;
  *((_OWORD *)v4 + 43) = 0u;
  *(_OWORD *)((char *)v4 + 700) = 0u;
  *((unsigned char *)v4 + 752) = 1;
  *((_DWORD *)v4 + 189) = 0;
  *((unsigned char *)v4 + 760) = 0;
  *((_DWORD *)v4 + 191) = 6;
  *((void *)v4 + 96) = 0x100000001;
  *((_DWORD *)v4 + 195) = 65793;
  *((_WORD *)v4 + 392) = 256;
  *((_DWORD *)v4 + 197) = 1056964608;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  _OWORD *v3 = v9;
  *((void *)v4 + 101) = 0;
  *((_OWORD *)v4 + 51) = xmmword_1BB87B990;
  *((void *)v4 + 104) = 0x4557A00000000000;
  *((void *)v4 + 105) = 0x645066000;
  *((_WORD *)v4 + 424) = 257;
  *((unsigned char *)v4 + 850) = 1;
  *(_OWORD *)((char *)v3 + 60) = xmmword_1BB87B9A0;
  *(_OWORD *)((char *)v3 + 76) = xmmword_1BB87B9B0;
  *((_DWORD *)v4 + 221) = 1061158912;
  *((void *)v4 + 111) = 0x3F80000041200000;
  *((_OWORD *)v4 + 56) = xmmword_1BB87B9C0;
  *((_DWORD *)v4 + 228) = -1;
  *((_WORD *)v4 + 458) = 0;
  *((unsigned char *)v4 + 918) = 0;
  v3[8] = xmmword_1BB87B9D0;
  *((unsigned char *)v4 + 936) = 0;
  *(_OWORD *)((char *)v3 + 148) = xmmword_1BB87B9E0;
  *((void *)v4 + 124) = 0;
  *((_OWORD *)v4 + 60) = 0u;
  *((_OWORD *)v4 + 61) = 0u;
  *((void *)v4 + 125) = 0x4357000043AC8000;
  *((_DWORD *)v4 + 252) = 1070386381;
  *((unsigned char *)v4 + 2440) = 0;
  *((unsigned char *)v4 + 2464) = 0;
  *(_OWORD *)((char *)v4 + 1016) = 0u;
  do
  {
    int v10 = (char *)this + v5;
    *(_OWORD *)((char *)this + v5 + 2472) = xmmword_1BB87B9F0;
    v10[2488] = 0;
    *((_DWORD *)v10 + 623) = 0;
    v5 += 24;
  }
  while (v5 != 768);
  *((unsigned char *)this + 3240) = 0;
  *((unsigned char *)this + 3264) = 0;
  v3[155] = xmmword_1BB87B9B0;
  v3[156] = xmmword_1BB87BA00;
  *(_OWORD *)((char *)v3 + 4508) = xmmword_1BB87BA10;
  *(_OWORD *)((char *)v3 + 4524) = xmmword_1BB87BA20;
  *((void *)this + 513) = 0;
  *((unsigned char *)this + 4112) = 0;
  *(void *)((char *)this + 5332) = 0;
  *((_OWORD *)this + 334) = 0u;
  AU::FTSpatialAC::GetMessenger(v4);
  ausdk::AUBase::CreateElements((uint64_t)this);
  *((unsigned char *)this + 752) = 1;
  *((void *)this + 79) = 0x2000000020;
  *((_DWORD *)this + 160) = 32;
  vDSP_vfill(v7, (float *)this + 1197, 1, 0x20uLL);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, 2.0, 0);
  long long v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v12, 1u, 0.0, 0);
  float v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v13, 2u, 1.0, 0);
  CFStringRef v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v14, 3u, 1.0, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v15, 4u, 1.0, 0);
  std::string v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v16, 5u, 6.0, 0);
  float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v17, 6u, 1.0, 0);
  int64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v18, 7u, 1.0, 0);
  long long v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v19, 8u, 1.0, 0);
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v20, 9u, 1.0, 0);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0xCu, -15.0, 0);
  std::ios_base v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v22, 0xDu, 15.0, 0);
  uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v23, 0xAu, 0.0, 0);
  int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v24, 0xBu, 0.0, 0);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v25, 0x10u, 0.0, 0);
  long long v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v26, 0x11u, 0.0, 0);
  unint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v27, 0xEu, -15.0, 0);
  char v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v28, 0xFu, 15.0, 0);
  float32x2_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v29, 0x12u, 1.0, 0);
  float v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v30, 0x13u, 20.0, 0);
  float v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v31, 0x14u, 2.0, 0);
  float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0x15u, 0.0, 0);
  uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v33, 0x16u, 0.0, 0);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0x17u, 0.0, 0);
  BOOL v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v35, 0x18u, 0.0, 0);
  float v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v36, 0x19u, -1.0, 0);
  int v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v37, 0x1Au, 0.0, 0);
  long long v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0x1Bu, 0.0, 0);
  std::chrono::system_clock::time_point v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0x1Cu, 0.0, 0);
  float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v40, 0x1Du, -1.0, 0);
  int v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v41, 0x1Eu, 1.0, 0);
  float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v42, 0x1Fu, 8.0, 0);
  float v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v43, 0x20u, 3.0, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v44, 0x21u, 0.0, 0);
  float v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v45, 0x22u, 0.0, 0);
  size_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v46, 0x23u, 1.0, 0);
  std::string::size_type v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v47, 0x24u, 0.5, 0);
  long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v48, 0x25u, 1.0, 0);
  float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v49, 0x26u, 20.0, 0);
  uint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v50, 0x27u, 0.0, 0);
  uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v51, 0x28u, 0.0, 0);
  uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0xC8u, 1.0, 0);
  float v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0xC9u, 34.5, 0);
  float v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v54, 0xCAu, 21.5, 0);
  unint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v55, 0xCBu, 60.0, 0);
  float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v56, 0xCCu, 0.0, 0);
  int v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v57, 0xCDu, 0.0, 0);
  float v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v58, 0xCEu, 3450.0, 0);
  float v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v59, 0xCFu, 2150.0, 0);
  float v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v60, 0xD0u, 0.0, 0);
  float v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v61, 0xD1u, 0.0, 0);
  uint64_t v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v62, 0xD2u, 345.0, 0);
  uint32_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v63, 0xD3u, 215.0, 0);
  float v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v64, 0xD4u, 0.0, 0);
  uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFTSpatialAC *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v65, 0xD5u, 1.0, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v67 = *((void *)this + 87);
    if (v67) {
      LODWORD(v68) = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 24))(v67);
    }
    else {
      uint64_t v68 = (*((void *)this + 85) - *((void *)this + 84)) >> 3;
    }
    if (i >= v68) {
      break;
    }
    float v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v69, 0x258u, -1.0, 0);
    uint64_t v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v70, 0x259u, (float)i, 0);
    double v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v71, 0x25Au, 0.0, 0);
    int v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v72, 0x25Bu, 1.0, 0);
    uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v73, 0x25Cu, 1.0, 0);
    unint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v74, 0x25Du, 0.0, 0);
    unint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v75, 0x25Eu, 0.0, 0);
    float v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v76, 0x25Fu, 0.0, 0);
    float v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, i);
    ausdk::AUElement::SetParameter(v77, 0x260u, 0.0, 0);
  }
  AUFTSpatialAC::SetOutputParamsToDefaults(this);
  unsigned int v78 = 0;
  v105[0].__pn_.__r_.__value_.__r.__words[0] = 0x40D7700000000000;
  *(_OWORD *)&v105[0].__pn_.__r_.__value_.__r.__words[1] = xmmword_1BB8727B0;
  *(_OWORD *)&v105[1].__pn_.__r_.__value_.__l.__data_ = xmmword_1BB8727C0;
  while (1)
  {
    uint64_t v79 = *((void *)this + 15);
    if (v79) {
      LODWORD(v80) = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 24))(v79);
    }
    else {
      uint64_t v80 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v78 >= v80) {
      break;
    }
    uint64_t v81 = ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 80), v78);
    (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(void *)v81 + 56))(v81, v105);
    ++v78;
  }
  for (unsigned int j = 0; ; ++j)
  {
    uint64_t v83 = *((void *)this + 21);
    if (v83) {
      LODWORD(v84) = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 24))(v83);
    }
    else {
      uint64_t v84 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (j >= v84) {
      break;
    }
    uint64_t v85 = ausdk::AUScope::SafeGetElement((AUFTSpatialAC *)((char *)this + 128), j);
    (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(void *)v85 + 56))(v85, v105);
  }
  memset_pattern16((char *)this + 4116, &unk_1BB87C220, 0x80uLL);
  memset_pattern16((char *)this + 4244, &unk_1BB87C220, 0x80uLL);
  *(void *)&long long v86 = 0x101010101010101;
  *((void *)&v86 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 600) = v86;
  *(_OWORD *)((char *)this + 616) = v86;
  AUFTSpatialAC::UpdateState((float32x2_t *)this);
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
    dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
  }
  if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPI)
  {
    (*(void (**)(char *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 8))(v6, 32);
    if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
      dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_172);
    }
    (*(void (**)(void, char *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 40))(*((void *)this + 66), (char *)this + 536);
  }
  CFPropertyListRef v87 = CFPreferencesCopyAppValue(@"AUFTSpatialACEnableRealTimeLogs", @"com.apple.coreaudio");
  float v88 = v87;
  if (!v87)
  {
LABEL_57:
    v107.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14BAF98;
    uint64_t v108 = &v107;
    operator new();
  }
  CFTypeID v89 = CFGetTypeID(v87);
  if (v89 != CFBooleanGetTypeID())
  {
    CFRelease(v88);
    goto LABEL_57;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(v88))
  {
    if (!CFBooleanGetValue((CFBooleanRef)v88)) {
      goto LABEL_37;
    }
  }
  else
  {
    CFTypeID v91 = CFNumberGetTypeID();
    if (v91 != CFGetTypeID(v88))
    {
LABEL_37:
      int v93 = 0;
      goto LABEL_38;
    }
    unsigned __int16 v92 = applesauce::CF::details::number_convert_as<BOOL>((const __CFNumber *)v88);
    int v93 = 0;
    if (v92 < 0x100u || !(_BYTE)v92)
    {
LABEL_38:
      CFRelease(v88);
      if (v93)
      {
        std::__fs::filesystem::__temp_directory_path(v105, 0);
        memset(&__p, 0, sizeof(__p));
        std::string::append[abi:ne180100]<char const*,0>(&__p, "AUFTSpatialAC", "");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)v105, &v107);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105[0].__pn_.__r_.__value_.__l.__data_);
        }
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
        }
        uint64_t v94 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v95 = &v107;
          if ((v107.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v95 = (std::__fs::filesystem::path *)v107.__pn_.__r_.__value_.__r.__words[0];
          }
          LODWORD(v105[0].__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v105[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
          _os_log_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_DEFAULT, "set up logs in \"%s\"", (uint8_t *)v105, 0xCu);
        }
        std::__fs::filesystem::__status(&v107, 0);
        if (__p.__r_.__value_.__s.__data_[0] == 255 || !__p.__r_.__value_.__s.__data_[0]) {
          std::__fs::filesystem::__create_directory(&v107, 0);
        }
        long long v106 = 0u;
        memset(v105, 0, sizeof(v105));
        __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        time_t v101 = std::chrono::system_clock::to_time_t(&__t);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
        float v97 = localtime(&v101);
        size_t v98 = strftime((char *)v105, 0x40uLL, "%T", v97);
        sprintf((char *)v105 + v98, ":%03lld", rep / 1000 % 1000);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v105);
        if (AUFTSpatialAC::getAUSLog(void)::onceToken != -1) {
          dispatch_once(&AUFTSpatialAC::getAUSLog(void)::onceToken, &__block_literal_global_21409);
        }
        int v99 = AUFTSpatialAC::getAUSLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUFTSpatialAC::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
          _os_log_impl(&dword_1BB0CE000, v99, OS_LOG_TYPE_DEFAULT, "set up logs with time stamp \"%s\"", (uint8_t *)&buf, 0xCu);
        }
        std::string::basic_string[abi:ne180100]<0>(v100, "OrientationParams");
        AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(&buf, (uint64_t)&v107, (uint64_t)&__p, (uint64_t)v100);
        operator new();
      }
      goto LABEL_57;
    }
  }
  int v93 = 1;
  goto LABEL_38;
}

void sub_1BB6408B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t buf,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::operator()(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  *a3 = 0;
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_558);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    AudioStatisticsLibraryLoader(void)::libSym(v3, v4, 268435467, 0);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BB640C14(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_21453()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    float v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyunint64_t m = (uint64_t)result;
  }
  return result;
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BAF98;
}

void *std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F14BAF98;
  return result;
}

void std::__function::__func<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0,std::allocator<AUFTSpatialAC::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::~__func()
{
}

void AUFTSpatialAC::SetUpLogs(void)::$_0::operator()(std::__fs::filesystem::path *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  std::operator+<char>();
  unint64_t v7 = std::string::append(&v17, ".", 1uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a4 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a4;
  }
  else {
    int v10 = *(const std::string::value_type **)a4;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a4 + 8);
  }
  long long v12 = std::string::append(&v18, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v14 = std::string::append(&v19, ".csv", 4uLL);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v21[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v20.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v21 + 7);
  v20.__pn_.__r_.__value_.__r.__words[0] = v15;
  v20.__pn_.__r_.__value_.__l.__size_ = v21[0];
  *((unsigned char *)&v20.__pn_.__r_.__value_.__s + 23) = v16;
  std::__fs::filesystem::operator/[abi:ne180100](&v20, a2, a1);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1BB640F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpeakerProtectionV3::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 530) = a2;
  return this;
}

uint64_t AUSpeakerProtectionV3::ShouldBypassEffect(AUSpeakerProtectionV3 *this)
{
  return *((unsigned __int8 *)this + 530);
}

uint64_t AUSpeakerProtectionV3::GetScopeExtended(AUSpeakerProtectionV3 *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 792;
  }
  else {
    return 0;
  }
}

uint64_t AUSpeakerProtectionV3::ChangeStreamFormat(AUSpeakerProtectionV3 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  if (a2 != 1)
  {
    ausdk::AUBase::ChangeStreamFormat(this, a2, a3, __s2, __s1);
    return 0;
  }
  if (a3 == 1)
  {
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v12 >= 2)
    {
      ausdk::AUBase::ChangeStreamFormat(this, 1, 1, __s2, __s1);
      uint64_t result = 0;
      *((unsigned char *)this + 1330) = 1;
      return result;
    }
    return 4294956419;
  }
  if (a3) {
    return 4294956419;
  }
  ausdk::AUBase::ChangeStreamFormat(this, 1, a3, __s2, __s1);
  uint64_t result = 0;
  if (*((unsigned char *)this + 1330)) {
    return result;
  }
  uint64_t v9 = *((void *)this + 15);
  if (v9) {
    LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  else {
    uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v10 < 2) {
    return 0;
  }
  long long v13 = (AUSpeakerProtectionV3 *)((char *)this + 80);
  uint64_t result = ausdk::AUScope::GetElement(v13, 1u);
  if (result)
  {
    p_mChannelsPerFrame = &__s1->mChannelsPerFrame;
    uint32x2_t v15 = (uint32x2_t)vld1_dup_f32((const float *)p_mChannelsPerFrame);
    v18[0] = *(void *)&__s1->mSampleRate;
    v18[1] = 0x96C70636DLL;
    int v20 = 1;
    uint32x2_t v16 = vshl_u32(v15, (uint32x2_t)0x100000003);
    __int32 v19 = v16.i32[0];
    uint32x2_t v21 = v16;
    uint64_t v22 = 32;
    uint64_t Element = ausdk::AUScope::SafeGetElement(v13, 1u);
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)Element + 56))(Element, v18);
  }
  return result;
}

BOOL AUSpeakerProtectionV3::ValidFormat(AUSpeakerProtectionV3 *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if (a2 == 2 || (BOOL result = 1, a2 == 1) && !a3)
  {
    long long v6 = *(_OWORD *)&a4->mBytesPerPacket;
    v8[0] = *(_OWORD *)&a4->mSampleRate;
    v8[1] = v6;
    uint64_t v9 = *(void *)&a4->mBitsPerChannel;
    int v10 = 0;
    int v7 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v10, 0);
    BOOL result = 0;
    if (v7)
    {
      if (v10 == 1) {
        return a4->mChannelsPerFrame - 1 < 8;
      }
    }
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::SupportedNumChannels(AUSpeakerProtectionV3 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpeakerProtectionV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 8;
}

BOOL AUSpeakerProtectionV3::StreamFormatWritable(AUSpeakerProtectionV3 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpeakerProtectionV3::SupportsTail(AUSpeakerProtectionV3 *this)
{
  return 1;
}

double AUSpeakerProtectionV3::GetTailTime(AUSpeakerProtectionV3 *this)
{
  return 0.0;
}

double AUSpeakerProtectionV3::GetLatency(AUSpeakerProtectionV3 *this)
{
  return 0.0;
}

uint64_t AUSpeakerProtectionV3::GetParameterValueStrings(AUSpeakerProtectionV3 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 != 4) {
    return 4294956418;
  }
  if (a3 == 42)
  {
    if (a4)
    {
      int v7 = @"Open Loop";
      long long v8 = @"Convoy Limit";
      uint64_t v9 = @"Convoy Adaptive";
      int v10 = @"Adaptive";
      uint64_t v11 = @"Convoy Limit v2";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 5, 0);
      uint64_t result = 0;
      *a4 = v6;
      return result;
    }
    return 4294956445;
  }
  if (a3 == 20)
  {
    if (a4)
    {
      int v7 = @"None   ";
      long long v8 = @"Pilot Tone";
      uint64_t v9 = @"LP MLS";
      *a4 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      return 4294956418;
    }
    return 4294956445;
  }
  return 4294956418;
}

uint64_t AUSpeakerProtectionV3::RestoreState(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 1185)) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  int valuePtr = 0;
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, @"auversion");
  if (!result) {
    return result;
  }
  if (CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr) && valuePtr == 65537)
  {
    uint64_t result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
    ++*((_DWORD *)this + 159);
    return result;
  }
  CFArrayRef v6 = (NSObject **)spp3Subsystem();
  if (v6)
  {
    int v7 = *v6;
    if (!*v6) {
      return 0;
    }
  }
  else
  {
    int v7 = MEMORY[0x1E4F14500];
  }
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (!v8) {
    return result;
  }
  *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
  uint64_t v11 = "AUSpeakerProtectionV3.cpp";
  __int16 v12 = 1024;
  int v13 = 2746;
  _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preset does not match AU version. Skipping RestoreState", buf, 0x12u);
  return 0;
}

UInt8 *AUSpeakerProtectionV3::SaveExtendedScopes(AUSpeakerProtectionV3 *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSpeakerProtectionV3::SaveState(AUSpeakerProtectionV3 *this, ausdk **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  if (a2)
  {
    uint64_t v3 = *a2;
    if (v3)
    {
      int valuePtr = 65537;
      CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v3, @"auversion", v4);
      CFRelease(v4);
    }
  }
  return 0;
}

uint64_t AUSpeakerProtectionV3::GetParameterInfo(AUSpeakerProtectionV3 *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = spp3Subsystem();
  if (v7)
  {
    if (*(unsigned char *)(v7 + 8))
    {
      BOOL v8 = *(NSObject **)v7;
      if (*(void *)v7)
      {
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
        {
          int v43 = 136315394;
          uint64_t v44 = "AUSpeakerProtectionV3.cpp";
          __int16 v45 = 1024;
          int v46 = 1306;
          _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::GetParameterInfo", (uint8_t *)&v43, 0x12u);
        }
      }
    }
  }
  a4->AudioUnitParameterOptions flags = 0;
  a4->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 0:
        CFStringRef v10 = @"temperature limit";
LABEL_21:
        a4->cfNameString = v10;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v10, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v17 = 0x4316000000000000;
        goto LABEL_72;
      case 1:
        a4->cfNameString = @"hard temp limit headroom";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"hard temp limit headroom", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x41A0000000000000;
        AudioUnitParameterValue v18 = 10.0;
        goto LABEL_124;
      case 2:
        CFStringRef v26 = @"T_sett_vc";
        goto LABEL_71;
      case 3:
        a4->cfNameString = @"T_sett_mg";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"T_sett_mg", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v27 = 0x4348000000000000;
        goto LABEL_123;
      case 4:
        a4->cfNameString = @"tau_Tvc";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"tau_Tvc", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x42C800003DCCCCCDLL;
        AudioUnitParameterValue v28 = 3.0;
        goto LABEL_86;
      case 5:
        a4->cfNameString = @"tau_Tmg";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"tau_Tmg", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x43FA00003DCCCCCDLL;
        AudioUnitParameterValue v28 = 180.0;
        goto LABEL_86;
      case 6:
        a4->cfNameString = @"ThermalFFSpeedupFactor";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"ThermalFFSpeedupFactor", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F80000000000000;
        AudioUnitParameterValue v18 = 0.25;
        goto LABEL_124;
      case 7:
        CFStringRef v29 = @"temperature";
        goto LABEL_43;
      case 8:
        CFStringRef v29 = @"OL temperature";
LABEL_43:
        a4->cfNameString = v29;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v29, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x4302000041200000;
        AudioUnitParameterValue v13 = 50.0;
        goto LABEL_98;
      case 9:
        a4->cfNameString = @"Reb_ref";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Reb_ref", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v30 = 0x4120000000000000;
        goto LABEL_51;
      case 10:
        a4->cfNameString = @"Rshunt";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Rshunt", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x4000000000000000;
        AudioUnitParameterValue v28 = 0.1;
        goto LABEL_86;
      case 11:
        a4->cfNameString = @"Rampout";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Rampout", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3FC0000000000000;
        AudioUnitParameterValue v28 = 0.4;
        goto LABEL_86;
      case 12:
        a4->cfNameString = @"mt";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"mt", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3A83126F00000000;
        AudioUnitParameterValue v28 = 0.000059;
        goto LABEL_86;
      case 13:
        a4->cfNameString = @"ct";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"ct", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x412000003A83126FLL;
        AudioUnitParameterValue v28 = 0.31552;
        goto LABEL_86;
      case 14:
        a4->cfNameString = @"kt";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"kt", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x45DAC00042C80000;
        AudioUnitParameterValue v28 = 1876.2;
        goto LABEL_86;
      case 15:
        a4->cfNameString = @"ag";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"ag", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v30 = 0x4170000040A00000;
LABEL_51:
        *(void *)&a4->minValue = v30;
        AudioUnitParameterValue v18 = 8.0;
        goto LABEL_124;
      case 16:
        a4->cfNameString = @"g_bw";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"g_bw", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v20 = 0x400000003E800000;
        goto LABEL_60;
      case 17:
        a4->cfNameString = @"Q_d";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Q_d", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v31 = 0x404000003F000000;
        goto LABEL_85;
      case 18:
        a4->cfNameString = @"phi";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"phi", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x412000003DCCCCCDLL;
        AudioUnitParameterValue v28 = 1.09;
        goto LABEL_86;
      case 19:
        a4->cfNameString = @"x_lim";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"x_lim", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F800000358637BDLL;
        AudioUnitParameterValue v28 = 0.3;
        goto LABEL_86;
      case 20:
        a4->cfNameString = @"ThermalMeasurementMethod";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"ThermalMeasurementMethod", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Indexed;
        *(void *)&a4->minValue = 0x4000000000000000;
        AudioUnitParameterValue v32 = 1.0;
        goto LABEL_101;
      case 21:
        CFStringRef v9 = @"pilot tone enabled";
        goto LABEL_59;
      case 22:
        CFStringRef v9 = @"CL thermal feedback enabled";
LABEL_59:
        a4->cfNameString = v9;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v9, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Boolean;
        uint64_t v20 = 0x3F80000000000000;
        goto LABEL_60;
      case 23:
        CFStringRef v15 = @"TlimErrDecayTime";
LABEL_62:
        a4->cfNameString = v15;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v15, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(void *)&a4->minValue = 0x4496000038D1B717;
        AudioUnitParameterValue v33 = 1.0;
        goto LABEL_130;
      case 24:
        a4->cfNameString = @"TempSenseWindowTime";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"TempSenseWindowTime", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(void *)&a4->minValue = 0x40A0000000000000;
        a4->defaultValue = 0.18;
        AudioUnitParameterOptions v25 = a4->flags - 1069547520;
        goto LABEL_133;
      case 25:
        a4->cfNameString = @"TempSenseSmoothingTau";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"TempSenseSmoothingTau", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(void *)&a4->minValue = 0x4120000000000000;
        a4->defaultValue = 0.0;
        goto LABEL_131;
      case 26:
        a4->cfNameString = @"a_t_inv";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"a_t_inv", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x43E1000000000000;
        AudioUnitParameterValue v28 = 300.0;
        goto LABEL_86;
      case 27:
        CFStringRef v34 = @"PilotAmplHi_dB";
        goto LABEL_68;
      case 28:
        CFStringRef v34 = @"PilotAmplLo_dB";
LABEL_68:
        a4->cfNameString = v34;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v34, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        *(void *)&a4->minValue = 0xC1200000C2A00000;
        AudioUnitParameterValue v18 = -40.0;
        goto LABEL_124;
      case 29:
        CFStringRef v26 = @"PilotUpperThres";
        goto LABEL_71;
      case 30:
        CFStringRef v26 = @"PilotLowerThres";
LABEL_71:
        a4->cfNameString = v26;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v26, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v17 = 0x4348000000000000;
LABEL_72:
        *(void *)&a4->minValue = v17;
        AudioUnitParameterValue v18 = 100.0;
        goto LABEL_124;
      case 31:
        a4->cfNameString = @"PilotDecayTime";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"PilotDecayTime", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        uint64_t v22 = 0x427000003A83126FLL;
LABEL_74:
        *(void *)&a4->minValue = v22;
        AudioUnitParameterValue v33 = 0.5;
        goto LABEL_130;
      case 32:
        a4->cfNameString = @"PilotFreq";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"PilotFreq", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Hertz;
        *(void *)&a4->minValue = 0x461C40003F800000;
        AudioUnitParameterValue v33 = 43.066;
        goto LABEL_130;
      case 33:
        CFStringRef v35 = @"LPMLSPreGain";
        goto LABEL_78;
      case 34:
        CFStringRef v35 = @"LPMLSPostGain";
LABEL_78:
        a4->cfNameString = v35;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v35, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_LinearGain;
        uint64_t v20 = 0x4120000000000000;
        goto LABEL_60;
      case 35:
        a4->cfNameString = @"LPMLSLowerCorner";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"LPMLSLowerCorner", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Hertz;
        uint64_t v14 = 0x42C8000038D1B717;
        goto LABEL_127;
      case 36:
        a4->cfNameString = @"LPMLS pre clip level";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"LPMLS pre clip level", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        goto LABEL_97;
      case 37:
        CFStringRef v36 = @"mu_Re";
        goto LABEL_84;
      case 38:
        CFStringRef v36 = @"mu_Le";
        goto LABEL_84;
      case 39:
        CFStringRef v36 = @"mu mechanical (PU)";
LABEL_84:
        a4->cfNameString = v36;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v36, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v31 = 0x4120000000000000;
LABEL_85:
        *(void *)&a4->minValue = v31;
        AudioUnitParameterValue v28 = 1.0;
LABEL_86:
        a4->defaultValue = v28;
        AudioUnitParameterOptions v25 = a4->flags - 1065353216;
        goto LABEL_133;
      case 40:
        CFStringRef v37 = @"Max relative displacement";
        goto LABEL_89;
      case 41:
        CFStringRef v37 = @"abs(Min relative displacement)";
LABEL_89:
        a4->cfNameString = v37;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v37, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v12 = 0x3FAA9FBE00000000;
        goto LABEL_94;
      case 42:
        a4->cfNameString = @"DisplacementProtectionType";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"DisplacementProtectionType", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Indexed;
        *(void *)&a4->minValue = 0x4080000000000000;
        a4->defaultValue = 0.0;
        goto LABEL_102;
      case 43:
        CFStringRef v38 = @"Convoy Dirty Buffer Sticky Flag";
        goto LABEL_93;
      case 44:
        CFStringRef v38 = @"Convoy Block Flag";
LABEL_93:
        a4->cfNameString = v38;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v38, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v12 = 0x3F80000000000000;
        goto LABEL_94;
      case 45:
        a4->cfNameString = @"Convoy X Limit Relative (%)";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy X Limit Relative (%)", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Percent;
        *(void *)&a4->minValue = 0x42C8000042700000;
        AudioUnitParameterValue v13 = 70.0;
        goto LABEL_98;
      case 46:
        a4->cfNameString = @"Convoy Norm Factor";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Norm Factor", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
LABEL_97:
        *(void *)&a4->minValue = 0x4000000000000000;
        AudioUnitParameterValue v13 = 1.0;
        goto LABEL_98;
      case 47:
        a4->cfNameString = @"Convoy PeakFinder Threshold Upper";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy PeakFinder Threshold Upper", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F80000000000000;
        AudioUnitParameterValue v32 = 0.6;
LABEL_101:
        a4->defaultValue = v32;
LABEL_102:
        AudioUnitParameterOptions v25 = a4->flags | 0xC0000000;
        goto LABEL_133;
      case 48:
        a4->cfNameString = @"Convoy PeakFinder Threshold Lower";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy PeakFinder Threshold Lower", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F80000000000000;
        AudioUnitParameterValue v18 = 0.6;
        goto LABEL_124;
      case 49:
        a4->cfNameString = @"Convoy Peak Detector Attack Time";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Peak Detector Attack Time", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        uint64_t v21 = 0x42C8000000000000;
        goto LABEL_111;
      case 50:
        a4->cfNameString = @"Convoy Peak Detector Release Time";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Peak Detector Release Time", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        *(void *)&a4->minValue = 0x42C8000000000000;
        AudioUnitParameterValue v33 = 4.0;
        goto LABEL_130;
      case 51:
        a4->cfNameString = @"Convoy Norm Factor Cap Upper";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Norm Factor Cap Upper", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
        *(void *)&a4->minValue = 0x40A000003F800000;
        AudioUnitParameterValue v18 = 2.0;
        goto LABEL_124;
      case 52:
        a4->cfNameString = @"Convoy Norm Factor Cap Lower";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Norm Factor Cap Lower", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Ratio;
        *(void *)&a4->minValue = 0x3F80000000000000;
        AudioUnitParameterValue v18 = 0.2;
        goto LABEL_124;
      case 53:
        CFStringRef v41 = @"Convoy Norm Factor Attack";
        goto LABEL_110;
      case 54:
        CFStringRef v41 = @"Convoy Norm Factor Release";
LABEL_110:
        a4->cfNameString = v41;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v41, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        uint64_t v21 = 0x3F80000000000000;
LABEL_111:
        *(void *)&a4->minValue = v21;
        AudioUnitParameterValue v33 = 0.0001;
        goto LABEL_130;
      case 55:
        CFStringRef v42 = @"Convoy Peak Ratio Positive Block Threshold";
        goto LABEL_116;
      case 56:
        CFStringRef v42 = @"Convoy Peak Ratio Negative Block Threshold";
        goto LABEL_116;
      case 57:
        a4->cfNameString = @"Convoy Min Excursion";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Min Excursion", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 3212836864;
        AudioUnitParameterValue v18 = -0.5;
        goto LABEL_124;
      case 58:
        CFStringRef v42 = @"Convoy Max Excursion";
LABEL_116:
        a4->cfNameString = v42;
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v42, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F80000000000000;
        AudioUnitParameterValue v18 = 0.5;
        goto LABEL_124;
      case 59:
        a4->cfNameString = @"Convoy Relative X Limit Upper";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Relative X Limit Upper", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F8000003F333333;
        AudioUnitParameterValue v18 = 0.9;
        goto LABEL_124;
      case 60:
        a4->cfNameString = @"Convoy Relative X Limit Lower";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Relative X Limit Lower", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&a4->minValue = 0x3F33333300000000;
        AudioUnitParameterValue v18 = 0.7;
        goto LABEL_124;
      case 61:
        a4->cfNameString = @"Convoy Peak Ratios InWindow Count Threshold";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Peak Ratios InWindow Count Threshold", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v16 = 0x4348000000000000;
LABEL_120:
        *(void *)&a4->minValue = v16;
        AudioUnitParameterValue v18 = 50.0;
        goto LABEL_124;
      case 62:
        a4->cfNameString = @"Convoy Norm Factor Threshold in %";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Norm Factor Threshold in %", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Percent;
        uint64_t v20 = 0x40A0000000000000;
LABEL_60:
        *(void *)&a4->minValue = v20;
        AudioUnitParameterValue v18 = 1.0;
        goto LABEL_124;
      case 63:
        a4->cfNameString = @"Convoy Buffer Dirty Count Threshold";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Convoy Buffer Dirty Count Threshold", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v27 = 0x42C8000000000000;
LABEL_123:
        *(void *)&a4->minValue = v27;
        AudioUnitParameterValue v18 = 20.0;
LABEL_124:
        a4->defaultValue = v18;
LABEL_125:
        AudioUnitParameterOptions flags = a4->flags;
        int v40 = -1073741824;
        goto LABEL_132;
      case 64:
LABEL_13:
        a4->cfNameString = @"thermal gain";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"thermal gain", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        uint64_t v12 = 0x40600000C1A00000;
        goto LABEL_94;
      case 65:
LABEL_14:
        a4->cfNameString = @"displacement gain";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"displacement gain", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        *(void *)&a4->minValue = 0x40800000C1400000;
        AudioUnitParameterValue v13 = -12.0;
LABEL_98:
        a4->defaultValue = v13;
        goto LABEL_99;
      case 66:
LABEL_15:
        a4->cfNameString = @"power control gain";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"power control gain", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Decibels;
        uint64_t v12 = 3248488448;
LABEL_94:
        *(void *)&a4->minValue = v12;
        a4->defaultValue = 0.0;
LABEL_99:
        AudioUnitParameterOptions flags = a4->flags;
        int v40 = 1073782784;
        goto LABEL_132;
      case 67:
        a4->cfNameString = @"PilotDecayTimeStage2";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"PilotDecayTimeStage2", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Seconds;
        uint64_t v14 = 0x3F8000003A83126FLL;
LABEL_127:
        *(void *)&a4->minValue = v14;
        AudioUnitParameterValue v33 = 0.01;
        goto LABEL_130;
      case 68:
        a4->cfNameString = @"PilotEnableThres";
        a4->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"PilotEnableThres", a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v23 = 0x3F80000033D6BF95;
LABEL_129:
        *(void *)&a4->minValue = v23;
        AudioUnitParameterValue v33 = 0.00001;
LABEL_130:
        a4->defaultValue = v33;
LABEL_131:
        AudioUnitParameterOptions flags = a4->flags;
        int v40 = -1061158912;
LABEL_132:
        AudioUnitParameterOptions v25 = flags + v40;
LABEL_133:
        uint64_t result = 0;
        a4->AudioUnitParameterOptions flags = v25;
        break;
      default:
        return 4294956418;
    }
  }
  else
  {
    if (!a2)
    {
      switch(a3)
      {
        case 0:
          CFStringRef v9 = @"thermal protection enabled";
          goto LABEL_59;
        case 1:
          CFStringRef v9 = @"displacement protection enabled";
          goto LABEL_59;
        case 2:
          a4->cfNameString = @"thermal/power control gain attack time";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"thermal/power control gain attack time", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v14 = 0x4496000038D1B717;
          goto LABEL_127;
        case 3:
          CFStringRef v15 = @"thermal/power control gain release time";
          goto LABEL_62;
        case 4:
          a4->cfNameString = @"ambient temperature";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"ambient temperature", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v16 = 0x42C8000000000000;
          goto LABEL_120;
        case 5:
          CFStringRef v10 = @"SafeTlim";
          goto LABEL_21;
        case 6:
          a4->cfNameString = @"SafeTlimTimeMin";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"SafeTlimTimeMin", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&a4->minValue = 0x4416000000000000;
          AudioUnitParameterValue v18 = 600.0;
          goto LABEL_124;
        case 7:
          a4->cfNameString = @"SafeTlimOffset";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"SafeTlimOffset", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v19 = 3267887104;
          goto LABEL_34;
        case 8:
          a4->cfNameString = @"LookaheadDelay_ms";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"LookaheadDelay_ms", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v20 = 0x4000000000000000;
          goto LABEL_60;
        case 9:
          a4->cfNameString = @"peak attack time";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"peak attack time", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v21 = 0x3F000000358637BDLL;
          goto LABEL_111;
        case 10:
          a4->cfNameString = @"peak decay time";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"peak decay time", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v22 = 0x43B4000038D1B717;
          goto LABEL_74;
        case 11:
          a4->cfNameString = @"feedback integration time";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"feedback integration time", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v23 = 0x43B40000358637BDLL;
          goto LABEL_129;
        case 12:
          goto LABEL_13;
        case 13:
          goto LABEL_14;
        case 14:
          a4->cfNameString = @"spk pwr averaging window time";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"spk pwr averaging window time", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Seconds;
          *(void *)&a4->minValue = 0x41F000003DCCCCCDLL;
          AudioUnitParameterValue v18 = 5.0;
          goto LABEL_124;
        case 15:
          CFStringRef v24 = @"modeled speaker power";
          goto LABEL_31;
        case 16:
          CFStringRef v24 = @"measured speaker power";
LABEL_31:
          a4->cfNameString = v24;
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v24, a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&a4->minValue = 0x41A0000000000000;
          a4->defaultValue = 0.0;
          AudioUnitParameterOptions v25 = a4->flags + 1077977088;
          goto LABEL_133;
        case 17:
          goto LABEL_15;
        case 18:
          CFStringRef v9 = @"CPMS power control enabled";
          goto LABEL_59;
        case 19:
          a4->cfNameString = @"CPMS power control closed loop";
          a4->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"CPMS power control closed loop", a4->name, 52, 0x8000100u);
          a4->unit = kAudioUnitParameterUnit_Boolean;
          uint64_t v19 = 0x3F80000000000000;
LABEL_34:
          *(void *)&a4->minValue = v19;
          a4->defaultValue = 0.0;
          goto LABEL_125;
        default:
          return 4294956418;
      }
    }
    return 4294956418;
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::GetParameterList(AUSpeakerProtectionV3 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    if (!a3)
    {
      unsigned int v30 = 48;
      goto LABEL_10;
    }
    *(_OWORD *)a3 = xmmword_1BB87BA30;
    *((_OWORD *)a3 + 1) = xmmword_1BB87BA40;
    unsigned int v30 = 48;
    unsigned int v43 = 65;
    unsigned int v42 = 66;
    unsigned int v29 = 64;
    unsigned int v39 = 40;
    unsigned int v40 = 41;
    unsigned int v41 = 38;
    *((_OWORD *)a3 + 2) = xmmword_1BB87BA50;
    *((_OWORD *)a3 + 3) = xmmword_1BB87BA60;
    unsigned int v37 = 37;
    unsigned int v38 = 39;
    unsigned int v28 = 42;
    unsigned int v36 = 36;
    unsigned int v27 = 35;
    unsigned int v34 = 33;
    unsigned int v35 = 34;
    unsigned int v32 = 20;
    unsigned int v33 = 32;
    *((_OWORD *)a3 + 4) = xmmword_1BB87B870;
    *((_OWORD *)a3 + 5) = xmmword_1BB87BA70;
    unsigned int v9 = 68;
    unsigned int v10 = 67;
    unsigned int v11 = 31;
    unsigned int v12 = 30;
    *((_OWORD *)a3 + 6) = xmmword_1BB87BA80;
    uint64_t v13 = 47;
    uint64_t v14 = 46;
    a3[28] = 29;
    uint64_t v15 = 45;
    uint64_t v16 = 44;
    uint64_t v17 = 43;
    uint64_t v18 = 42;
    uint64_t v19 = 41;
    uint64_t v20 = 40;
    uint64_t v21 = 39;
    uint64_t v22 = 38;
    uint64_t v23 = 37;
    uint64_t v24 = 36;
    uint64_t v25 = 35;
    uint64_t v26 = 34;
    uint64_t v5 = 33;
    uint64_t v7 = 32;
    uint64_t v6 = 31;
    uint64_t v8 = 30;
    uint64_t v4 = 29;
    goto LABEL_7;
  }
  if (!a2)
  {
    if (!a3)
    {
      unsigned int v30 = 20;
      goto LABEL_10;
    }
    uint64_t v4 = 1;
    *a3 = 4;
    uint64_t v5 = 5;
    unsigned int v43 = 13;
    unsigned int v41 = 0;
    unsigned int v42 = 17;
    uint64_t v6 = 3;
    unsigned int v39 = 19;
    unsigned int v40 = 1;
    unsigned int v37 = 15;
    unsigned int v38 = 18;
    uint64_t v7 = 4;
    uint64_t v8 = 2;
    unsigned int v35 = 11;
    unsigned int v36 = 14;
    unsigned int v33 = 9;
    unsigned int v34 = 10;
    unsigned int v32 = 3;
    unsigned int v9 = 2;
    unsigned int v10 = 7;
    unsigned int v11 = 6;
    unsigned int v12 = 5;
    uint64_t v13 = 19;
    uint64_t v14 = 18;
    uint64_t v15 = 17;
    uint64_t v16 = 16;
    uint64_t v17 = 15;
    uint64_t v18 = 14;
    uint64_t v19 = 13;
    uint64_t v20 = 12;
    uint64_t v21 = 11;
    uint64_t v22 = 10;
    uint64_t v23 = 9;
    uint64_t v24 = 8;
    uint64_t v25 = 7;
    uint64_t v26 = 6;
    unsigned int v27 = 8;
    unsigned int v28 = 16;
    unsigned int v29 = 12;
    unsigned int v30 = 20;
LABEL_7:
    a3[v4] = v12;
    a3[v8] = v11;
    a3[v6] = v10;
    a3[v7] = v9;
    a3[v5] = v32;
    a3[v26] = v33;
    a3[v25] = v34;
    a3[v24] = v35;
    a3[v23] = v27;
    a3[v22] = v36;
    a3[v21] = v28;
    a3[v20] = v37;
    a3[v19] = v41;
    a3[v18] = v38;
    a3[v17] = v39;
    a3[v16] = v40;
    a3[v15] = v29;
    a3[v14] = v42;
    a3[v13] = v43;
LABEL_10:
    *a4 = v30;
  }
  return 0;
}

uint64_t AUSpeakerProtectionV3::SetBusCount(AUSpeakerProtectionV3 *this, int a2, unsigned int a3)
{
  if (a2 == 2)
  {
    if (a3 == 1)
    {
      uint64_t v3 = (AUSpeakerProtectionV3 *)((char *)this + 128);
      unsigned int v4 = 1;
      goto LABEL_7;
    }
    return 4294956445;
  }
  if (a2 == 1)
  {
    if (a3 - 1 <= 1)
    {
      uint64_t v3 = (AUSpeakerProtectionV3 *)((char *)this + 80);
      unsigned int v4 = a3;
LABEL_7:
      ausdk::AUScope::SetNumberOfElements(v3, v4);
      return 0;
    }
    return 4294956445;
  }
  return 4294956430;
}

BOOL AUSpeakerProtectionV3::BusCountWritable(AUSpeakerProtectionV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUSpeakerProtectionV3::Render(AUSpeakerProtectionV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (AUSpeakerProtectionV3 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  unsigned int v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v15 = ausdk::AUScope::GetElement(v8, 1u);
    if (!v15 || !*(_DWORD *)(v15 + 172))
    {
      uint64_t v18 = 0;
      goto LABEL_11;
    }
    uint64_t v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    uint64_t result = ausdk::AUInputElement::PullInput(v16, a2, a3, 1, a4);
    if (!result)
    {
      uint64_t v17 = ausdk::AUScope::SafeGetElement(v8, 1u);
      uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
LABEL_11:
      v20[0] = BufferList;
      v20[1] = v18;
      uint64_t v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUSpeakerProtectionV3 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 2, v20, 1, &v19);
    }
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::ProcessMultipleBufferLists(AUSpeakerProtectionV3 *this, unsigned int *a2, UInt32 a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v687 = *MEMORY[0x1E4F143B8];
  shouldTraceRender();
  unsigned int v12 = (OpaqueExtAudioFile *)*((void *)this + 137);
  if (v12)
  {
    uint64_t v13 = ExtAudioFileWriteAsync(v12, a3, *a5);
    (*(void (**)(char *, uint64_t, const char *))(*((void *)this + 136) + 16))((char *)this + 1088, v13, "ExtAudioFileWriteAsync");
  }
  if (a4 >= 2)
  {
    uint64_t v14 = (OpaqueExtAudioFile *)*((void *)this + 139);
    if (v14)
    {
      uint64_t v15 = a5[1];
      if (v15)
      {
        uint64_t v16 = ExtAudioFileWriteAsync(v14, a3, v15);
        (*(void (**)(char *, uint64_t, const char *))(*((void *)this + 138) + 16))((char *)this + 1104, v16, "ExtAudioFileWriteAsync");
      }
    }
  }
  uint64_t v17 = (AUSpeakerProtectionV3 *)((char *)this + 1192);
  uint64_t v18 = SimpleMeters::ProcessInputBufferList((AUSpeakerProtectionV3 *)((char *)this + 1192), a3, *a5);
  if (v18)
  {
    uint64_t v20 = v18;
    if (!*((_DWORD *)this + 295))
    {
      uint64_t v21 = 2;
      if (!*((unsigned char *)this + 17)) {
        uint64_t v21 = 6;
      }
      uint64_t v22 = 5;
      if (!*((unsigned char *)this + 528)) {
        uint64_t v22 = 9;
      }
      uint64_t v23 = v21 + v22;
      uint64_t v24 = _os_log_pack_size() + 88;
      uint64_t message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v23 + v24, 16);
      if (message)
      {
        uint64_t v26 = (caulk::concurrent::message *)message;
        unsigned int v27 = (char *)(message + v24);
        uint64_t v28 = _os_log_pack_fill();
        if (*((unsigned char *)this + 528)) {
          unsigned int v29 = "was";
        }
        else {
          unsigned int v29 = "was not";
        }
        unsigned int v30 = stpcpy(v27, v29);
        UInt32 v31 = a3;
        unsigned int v32 = v30 + 1;
        if (*((unsigned char *)this + 17)) {
          unsigned int v33 = "is";
        }
        else {
          unsigned int v33 = "is not";
        }
        stpcpy(v30 + 1, v33);
        *(_DWORD *)uint64_t v28 = 136315394;
        *(void *)(v28 + 4) = v27;
        *(_WORD *)(v28 + 12) = 2080;
        *(void *)(v28 + 14) = v32;
        a3 = v31;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 170) + 16), v26);
      }
    }
    AUSpeakerProtectionV3::AttenuateInputToOutput(this, a3, a5, a7, v19);
    return v20;
  }
  if ((*(unsigned int (**)(AUSpeakerProtectionV3 *))(*(void *)this + 576))(this))
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
    unsigned int v36 = *a7;
    unint64_t mNumberBuffers = (*a7)->mNumberBuffers;
    if (mNumberBuffers)
    {
      unint64_t v38 = 0;
      size_t v39 = *(_DWORD *)(Element + 104) * a3;
      uint64_t v40 = 16;
      do
      {
        unsigned int v41 = *(const void **)((char *)&(*a5)->mNumberBuffers + v40);
        unsigned int v42 = *(void **)((char *)&v36->mNumberBuffers + v40);
        if (v41 != v42)
        {
          memcpy(v42, v41, v39);
          unsigned int v36 = *a7;
          unint64_t mNumberBuffers = (*a7)->mNumberBuffers;
        }
        ++v38;
        v40 += 16;
      }
      while (v38 < mNumberBuffers);
    }
    *((unsigned char *)this + 531) = 1;
    if (shouldTraceRender())
    {
      uint64_t v43 = spp3SubsystemAsync();
      if (v43)
      {
        if (*(unsigned char *)(v43 + 8))
        {
          uint64_t v44 = *(NSObject **)v43;
          if (*(void *)v43)
          {
            if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4277;
              _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3 bypassed!", buf, 0x12u);
            }
          }
        }
      }
    }
LABEL_665:
    v631 = (OpaqueExtAudioFile *)*((void *)this + 141);
    if (v631)
    {
      OSStatus v632 = ExtAudioFileWrite(v631, a3, *a7);
      if ((v632 + 66560) >= 2)
      {
        if (v632) {
          (*(void (**)(void))(*((void *)this + 140) + 16))();
        }
      }
    }
    uint64_t v20 = SimpleMeters::ProcessOutputBufferList((AUSpeakerProtectionV3 *)((char *)this + 1192), a3, *a7);
    if (!v20) {
      *((_DWORD *)this + 295) = (*((_DWORD *)this + 295) + 1);
    }
    return v20;
  }
  unsigned int __N = a3;
  if (*((unsigned char *)this + 531))
  {
    (*(void (**)(AUSpeakerProtectionV3 *, void, void))(*(void *)this + 72))(this, 0, 0);
    *((unsigned char *)this + 531) = 0;
  }
  if (!*((unsigned char *)this + 528))
  {
    if (*((unsigned char *)this + 1184))
    {
      if (*((unsigned char *)this + 17)) {
        uint64_t v72 = 3;
      }
      else {
        uint64_t v72 = 7;
      }
      uint64_t v73 = _os_log_pack_size() + 88;
      uint64_t v74 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v73 + v72, 16);
      if (v74)
      {
        unint64_t v75 = (caulk::concurrent::message *)v74;
        float v76 = (char *)(v74 + v73);
        uint64_t v77 = _os_log_pack_fill();
        if (*((unsigned char *)this + 17)) {
          unsigned int v78 = "is";
        }
        else {
          unsigned int v78 = "is not";
        }
        stpcpy(v76, v78);
        *(_DWORD *)uint64_t v77 = 136315138;
        *(void *)(v77 + 4) = v76;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 170) + 16), v75);
      }
      *((unsigned char *)this + 1184) = 0;
      uint64_t v17 = (AUSpeakerProtectionV3 *)((char *)this + 1192);
    }
    AUSpeakerProtectionV3::AttenuateInputToOutput(this, a3, a5, a7, v34);
    float v69 = *a7;
    uint64_t v70 = v17;
    int v71 = a3;
    goto LABEL_68;
  }
  uint64_t v45 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 0) + 108);
  if (v45 != (uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 4
    || v45 != *((_DWORD *)this + 158))
  {
    if (!*((_DWORD *)this + 295))
    {
      uint64_t v63 = _os_log_pack_size();
      uint64_t v64 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v63 + 88, 16);
      if (v64)
      {
        uint64_t v65 = (caulk::concurrent::message *)v64;
        uint64_t v66 = _os_log_pack_fill();
        uint64_t v67 = (uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 4;
        int v68 = *((_DWORD *)this + 158);
        *(_DWORD *)uint64_t v66 = 134218496;
        *(void *)(v66 + 4) = v67;
        *(_WORD *)(v66 + 12) = 1024;
        *(_DWORD *)(v66 + 14) = v68;
        *(_WORD *)(v66 + 18) = 1024;
        *(_DWORD *)(v66 + 20) = v45;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 170) + 16), v65);
      }
    }
    AUSpeakerProtectionV3::AttenuateInputToOutput(this, __N, a5, a7, v46);
    float v69 = *a7;
    uint64_t v70 = (AUSpeakerProtectionV3 *)((char *)this + 1192);
    int v71 = __N;
LABEL_68:
    SimpleMeters::ProcessOutputBufferList(v70, v71, v69);
    return 0;
  }
  uint64_t v47 = (void *)((char *)this + 840);
  AUSpeakerProtectionV3::ApplyParameters(this);
  if (!*((unsigned char *)this + 533)
    || !*((unsigned char *)this + 529)
    || !AUSpeakerProtectionV3::ClosedLoopInputsOK(this, __N, a4, a5))
  {
    uint64_t v79 = *((void *)this + 106);
    uint64_t v80 = *((void *)this + 105);
    if (v79 == v80) {
      goto LABEL_555;
    }
    unint64_t v81 = 0;
    BOOL v82 = 0;
    do
    {
      unint64_t v83 = (v79 - v80) >> 4;
      while (v82)
      {
        ++v81;
        BOOL v82 = 1;
        if (v83 <= v81) {
          goto LABEL_77;
        }
      }
      uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v81);
      float Parameter = ausdk::AUElement::GetParameter(v84, 0x16u);
      BOOL v82 = Parameter != 0.0;
      uint64_t v79 = *((void *)this + 106);
      uint64_t v80 = *((void *)this + 105);
      ++v81;
    }
    while (v81 < (v79 - v80) >> 4);
    if (Parameter == 0.0) {
      goto LABEL_552;
    }
LABEL_77:
    if (!*((_DWORD *)this + 295))
    {
      uint64_t v86 = _os_log_pack_size();
      uint64_t v87 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v86 + 88, 16);
      if (v87)
      {
        float v88 = (caulk::concurrent::message *)v87;
        *(_WORD *)_os_log_pack_fill() = 0;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 170) + 16), v88);
      }
    }
    if (*((void *)this + 106) != *((void *)this + 105))
    {
      uint64_t v89 = 0;
      unint64_t v90 = 0;
      do
      {
        CFTypeID v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v90);
        ausdk::AUElement::SetParameter(v91, 0x16u, 0.0, 0);
        unsigned __int16 v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v90);
        ausdk::AUElement::SetParameter(v92, 0x15u, 0.0, 0);
        uint64_t v80 = *((void *)this + 105);
        uint64_t v93 = *(void *)(v80 + v89);
        *(_WORD *)(v93 + 992) = 257;
        *(unsigned char *)(v93 + 994) = 1;
        ++v90;
        uint64_t v79 = *((void *)this + 106);
        v89 += 16;
      }
      while (v90 < (v79 - v80) >> 4);
      goto LABEL_552;
    }
    goto LABEL_555;
  }
  uint64_t v48 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
  long long v49 = *(_OWORD *)(v48 + 96);
  *(_OWORD *)std::__fs::filesystem::path buf = *(_OWORD *)(v48 + 80);
  *(_OWORD *)&uint8_t buf[16] = v49;
  *(void *)&uint8_t buf[32] = *(void *)(v48 + 112);
  float __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0) && LODWORD(__B) == 2)
  {
    uint64_t v50 = *((void *)this + 105);
    if (*((void *)this + 106) != v50)
    {
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      vDSP_Stride __IA = (2 * v45);
      uint64_t v53 = 2;
      do
      {
        uint64_t v54 = *((void *)this + 84);
        if (v52 >= (*((void *)this + 85) - v54) >> 3) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v55 = *(float **)(v54 + 8 * v52);
        float v56 = *v55 * 0.000030518;
        float v672 = v55[1] * 0.000030518;
        float __B = v56;
        int v57 = (const __int16 *)((char *)a5[1]->mBuffers[0].mData + v53);
        vDSP_vflt16(v57 - 1, __IA, *(float **)(*(void *)(v50 + v51) + 848), 1, __N);
        vDSP_vflt16(v57, __IA, *(float **)(*(void *)(*((void *)this + 105) + v51) + 872), 1, __N);
        float v58 = *(float **)(*(void *)(*((void *)this + 105) + v51) + 848);
        vDSP_vsmul(v58, 1, &__B, v58, 1, __N);
        float v59 = *(float **)(*(void *)(*((void *)this + 105) + v51) + 872);
        vDSP_vsmul(v59, 1, &v672, v59, 1, __N);
        uint64_t v60 = *(void *)(*((void *)this + 142) + v51);
        float v61 = *(clsp::CLSP_Log **)(v60 + 112);
        if (v61)
        {
          clsp::CLSP_Log::LogCLSPData(v61, *(const float **)(*(void *)(*((void *)this + 105) + v51) + 872), __N);
          uint64_t v60 = *(void *)(*((void *)this + 142) + v51);
        }
        uint64_t v62 = *(clsp::CLSP_Log **)(v60 + 128);
        if (v62) {
          clsp::CLSP_Log::LogCLSPData(v62, *(const float **)(*(void *)(*v47 + v51) + 848), __N);
        }
        ++v52;
        uint64_t v50 = *((void *)this + 105);
        v53 += 4;
        v51 += 16;
      }
      while (v52 < (*((void *)this + 106) - v50) >> 4);
    }
    goto LABEL_101;
  }
  float __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0)
    && LODWORD(__B) == 1
    && (buf[12] & 0x20) == 0)
  {
    uint64_t v94 = *((void *)this + 92);
    uint64_t v95 = *((void *)this + 91);
    if (v94 != v95)
    {
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      do
      {
        AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(this, (const telemetry::Item *)*(unsigned int *)(v95 + v96), *(_DWORD *)(v95 + v96 + 4), v97++, (v94 - v95) >> 3, (uint64_t)a5[1]->mBuffers[0].mData, __N);
        uint64_t v94 = *((void *)this + 92);
        uint64_t v95 = *((void *)this + 91);
        v96 += 8;
      }
      while (v97 < (v94 - v95) >> 3);
    }
    goto LABEL_101;
  }
  float __B = 0.0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)&__B, 0)
    && LODWORD(__B) == 1
    && (buf[12] & 0x20) != 0)
  {
    uint64_t v101 = *((void *)this + 91);
    if (*((void *)this + 92) != v101)
    {
      uint64_t v102 = 0;
      unint64_t v103 = 0;
      uint64_t v104 = 16;
      do
      {
        AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(this, (const telemetry::Item *)*(unsigned int *)(v101 + v102), *(_DWORD *)(v101 + v102 + 4), 0, 1, *(void *)((char *)&a5[1]->mNumberBuffers + v104), __N);
        ++v103;
        uint64_t v101 = *((void *)this + 91);
        v102 += 8;
        v104 += 16;
      }
      while (v103 < (*((void *)this + 92) - v101) >> 3);
    }
LABEL_101:
    unsigned int v105 = __N;
    double v106 = (double)__N;
    std::__fs::filesystem::path v107 = (char *)*((void *)this + 106);
    uint64_t v108 = (char *)*((void *)this + 105);
    uint64_t v109 = v107;
    if ((double)__N / *((double *)this + 78) <= 0.093)
    {
      if (v107 == v108) {
        goto LABEL_110;
      }
      unint64_t v113 = 0;
      do
      {
        BOOL v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v113);
        ausdk::AUElement::SetParameter(v114, 0x16u, 1.0, 0);
        BOOL v115 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v113);
        ausdk::AUElement::SetParameter(v115, 0x15u, 1.0, 0);
        ++v113;
        uint64_t v109 = (char *)*((void *)this + 106);
        std::__fs::filesystem::path v107 = (char *)*((void *)this + 105);
      }
      while (v113 < (v109 - v107) >> 4);
    }
    else
    {
      if (v107 == v108) {
        goto LABEL_110;
      }
      unint64_t v110 = 0;
      do
      {
        BOOL v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v110);
        ausdk::AUElement::SetParameter(v111, 0x16u, 0.0, 0);
        BOOL v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v110);
        ausdk::AUElement::SetParameter(v112, 0x15u, 0.0, 0);
        ++v110;
        uint64_t v109 = (char *)*((void *)this + 106);
        std::__fs::filesystem::path v107 = (char *)*((void *)this + 105);
      }
      while (v110 < (v109 - v107) >> 4);
    }
    unsigned int v105 = __N;
LABEL_110:
    double v116 = *((double *)this + 78);
    if ((v106 / v116 < 0.005 || v106 / v116 > 0.093) && (v105 != 192 || v116 != 16000.0))
    {
      uint64_t v117 = v107;
      uint64_t v118 = v109 - v107;
      if (v109 == v107)
      {
LABEL_120:
        if (*((_DWORD *)this + 162) == v105)
        {
          BOOL v122 = *((_DWORD *)this + 161) > 0;
        }
        else
        {
          *((_DWORD *)this + 161) = 2;
          BOOL v122 = 1;
        }
        if (v117 == v107)
        {
          float v125 = v107;
        }
        else
        {
          uint64_t v123 = 0;
          unint64_t v124 = 0;
          do
          {
            (*(void (**)(void, BOOL))(**(void **)(*(void *)&v107[v123] + 424) + 208))(*(void *)(*(void *)&v107[v123] + 424), v122);
            ++v124;
            float v125 = (char *)*((void *)this + 106);
            std::__fs::filesystem::path v107 = (char *)*((void *)this + 105);
            v123 += 16;
          }
          while (v124 < (v125 - v107) >> 4);
          unsigned int v105 = __N;
        }
        *((_DWORD *)this + 162) = v105;
        if (v122) {
          --*((_DWORD *)this + 161);
        }
        if (v125 == v107) {
          goto LABEL_550;
        }
        unint64_t v126 = 0;
        float v127 = (float)v105;
        __leunint64_t n = 4 * v105;
        unint64_t __IAa = v105;
        uint64_t v662 = v105 - 1;
        uint64_t v664 = -(uint64_t)v105;
        while (1)
        {
          if (((*(void *)(*((void *)this + 67) + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v126) & 1) == 0)
          {
            uint64_t v140 = *(void *)&v107[16 * v126];
            uint64_t v141 = *(void *)(v140 + 848);
            uint64_t v142 = *(void *)(v140 + 872);
            shouldTraceRender();
            uint64_t v143 = *(void *)(v140 + 248);
            if (v143) {
              *(float *)(v140 + 232) = (*(float (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v143 + 32))(v143, v141, v142, __IAa);
            }
            uint64_t v144 = 16 * v126;
            float v145 = *(void **)(*v47 + 16 * v126);
            uint64_t v146 = v145[53];
            vDSP_Length v147 = __IAa;
            if (!v146) {
              goto LABEL_317;
            }
            int v148 = *(_DWORD *)(v146 + 8);
            uint64_t v668 = *(void *)(*v47 + 16 * v126);
            if (v148 != 4)
            {
              if (v148 == 1)
              {
                uint64_t v149 = v145[125];
                uint64_t v150 = (char *)v145[106];
                shouldTraceRender();
                unint64_t v151 = *(void *)(v149 + 8);
                unint64_t v152 = __IAa;
                if (v151 <= __IAa)
                {
                  if (v151)
                  {
                    memmove(*(void **)(v149 + 40), *(const void **)(v149 + 16), 4 * v151);
                    unint64_t v152 = __IAa;
                    unint64_t v151 = *(void *)(v149 + 8);
                  }
                  uint64_t v153 = v668;
                  char v165 = &v150[4 * v152];
                  float v166 = &v165[-4 * v151];
                  if (v166 != v150)
                  {
                    memmove((void *)(*(void *)(v149 + 40) + 4 * v151), v150, v166 - v150);
                    unint64_t v151 = *(void *)(v149 + 8);
                  }
                  if (v151)
                  {
                    size_t v156 = 4 * v151;
                    uint64_t v154 = *(void **)(v149 + 16);
                    unint64_t v155 = &v165[-4 * v151];
LABEL_168:
                    memmove(v154, v155, v156);
                  }
                }
                else
                {
                  if (__N)
                  {
                    memmove(*(void **)(v149 + 40), *(const void **)(v149 + 16), __len);
                    unint64_t v152 = __IAa;
                    unint64_t v151 = *(void *)(v149 + 8);
                  }
                  uint64_t v153 = v668;
                  if (v151 != v152) {
                    memmove(*(void **)(v149 + 16), (const void *)(*(void *)(v149 + 16) + 4 * __IAa), 4 * v151 - 4 * __IAa);
                  }
                  if (__N)
                  {
                    uint64_t v154 = (void *)(*(void *)(v149 + 16) + 4 * *(void *)(v149 + 8) + 4 * v664);
                    unint64_t v155 = v150;
                    size_t v156 = __len;
                    goto LABEL_168;
                  }
                }
                uint64_t v167 = *(void *)(v153 + 1008);
                float v168 = *(char **)(v153 + 872);
                shouldTraceRender();
                unint64_t v169 = *(void *)(v167 + 8);
                vDSP_Length v170 = __IAa;
                if (v169 <= __IAa)
                {
                  if (v169)
                  {
                    memmove(*(void **)(v167 + 40), *(const void **)(v167 + 16), 4 * v169);
                    vDSP_Length v170 = __IAa;
                    unint64_t v169 = *(void *)(v167 + 8);
                  }
                  uint64_t v171 = v668;
                  uint64_t v185 = &v168[4 * v170];
                  BOOL v186 = &v185[-4 * v169];
                  if (v186 != v168)
                  {
                    memmove((void *)(*(void *)(v167 + 40) + 4 * v169), v168, v186 - v168);
                    vDSP_Length v170 = __IAa;
                    unint64_t v169 = *(void *)(v167 + 8);
                  }
                  if (v169)
                  {
                    size_t v174 = 4 * v169;
                    uint64_t v172 = *(void **)(v167 + 16);
                    std::string::size_type v173 = &v185[-4 * v169];
LABEL_196:
                    memmove(v172, v173, v174);
                    vDSP_Length v170 = __IAa;
                  }
                }
                else
                {
                  if (__N)
                  {
                    memmove(*(void **)(v167 + 40), *(const void **)(v167 + 16), __len);
                    vDSP_Length v170 = __IAa;
                    unint64_t v169 = *(void *)(v167 + 8);
                  }
                  uint64_t v171 = v668;
                  if (v169 != v170)
                  {
                    memmove(*(void **)(v167 + 16), (const void *)(*(void *)(v167 + 16) + 4 * v170), 4 * v169 - 4 * v170);
                    vDSP_Length v170 = __IAa;
                  }
                  if (__N)
                  {
                    uint64_t v172 = (void *)(*(void *)(v167 + 16) + 4 * *(void *)(v167 + 8) + 4 * v664);
                    std::string::size_type v173 = v168;
                    size_t v174 = __len;
                    goto LABEL_196;
                  }
                }
                ConvoyToExcursion(*(float **)(*(void *)(v171 + 48) + 40), *(float **)(v171 + 896), v170, *(unsigned char *)(v171 + 995) == 0, 1, *(float *)(*(void *)(*(void *)(v171 + 40) + 48) + 4), *(float *)(*(void *)(*(void *)(v171 + 40) + 48) + 8));
                uint64_t v187 = *(clsp::CLSP_Log **)(*(void *)(v668 + 1080) + 144);
                if (v187) {
                  clsp::CLSP_Log::LogCLSPData(v187, *(const float **)(v668 + 896), __IAa);
                }
                clsp::FirFilter::firlsfilter(*(clsp::FirFilter **)(v668 + 1016), *(float **)(v668 + 896), *(float **)(v668 + 896), __N);
                uint64_t v188 = v668;
                float v189 = *(clsp::CLSP_Log **)(*(void *)(v668 + 1080) + 176);
                if (v189) {
                  clsp::CLSP_Log::LogCLSPData(v189, *(const float **)(v668 + 896), __IAa);
                }
                uint64_t v190 = *(void *)(v668 + 424);
                uint64_t v191 = *(float **)(*(void *)(v668 + 1000) + 40);
                int v192 = *(unsigned __int8 *)(v668 + 992);
                float v193 = *(float **)(v668 + 896);
                int v194 = *(unsigned __int8 *)(v668 + 994);
                *(void *)(v190 + 512) = __IAa;
                if (*(unsigned char *)(v190 + 508))
                {
                  shouldTraceRender();
                  uint64_t v144 = 16 * v126;
                  uint64_t v188 = v668;
                  goto LABEL_281;
                }
                if (*(float *)(v190 + 504) == 1.0)
                {
                  *(void *)(v190 + 416) = 0;
                  *(void *)(v190 + 424) = 0;
                  *(_DWORD *)(v190 + 456) = 1065353216;
                  *(_DWORD *)(v190 + 736) = 1065353216;
                  float v210 = *(float *)(v190 + 396);
                  float v211 = fabsf(*(float *)(v190 + 380));
                  float v212 = fabsf(*(float *)(v190 + 384));
                  if (v212 < v211) {
                    float v211 = v212;
                  }
                  float v213 = v210 * v211;
                  *(float *)(v190 + 76) = v213;
                  *(float *)(v190 + 80) = 1.0 / v213;
                  *(float *)(v190 + 412) = v213;
                  *(float *)(v190 + 776) = v213;
                  *(float *)(v190 + 408) = v210;
                  uint64_t v144 = 16 * v126;
                  goto LABEL_281;
                }
                if (v192 | v194)
                {
                  shouldTraceRender();
                  float v255 = *(float *)(v190 + 500) + v127;
                  *(float *)(v190 + 500) = v255;
                  goto LABEL_276;
                }
                if (*(float *)(v190 + 500) == 0.0)
                {
                  *(_DWORD *)(v190 + 500) = 0;
                  if (__N)
                  {
                    float v304 = *(double **)(v190 + 144);
                    float v303 = *(double **)(v190 + 152);
                    v305 = *(_DWORD **)(v190 + 232);
                    unint64_t v306 = *(float **)(v190 + 184);
                    int v307 = *(double **)(v190 + 136);
                    uint64_t v308 = *(_DWORD **)(v190 + 208);
                    v309 = v193;
                    unint64_t v310 = __IAa;
                    uint64_t v311 = *(_DWORD **)(v190 + 256);
                    do
                    {
                      double v312 = *v309;
                      double v313 = v303[5];
                      double v314 = v303[7];
                      double v315 = v303[3] * v313 + v312 * v303[2] + v303[6] * v303[4] - v314 * *v303 - v303[8] * v303[1];
                      v303[5] = v312;
                      v303[6] = v313;
                      v303[7] = v315;
                      v303[8] = v314;
                      *(float *)&double v312 = v315;
                      *v305++ = LODWORD(v312);
                      float v316 = *v191++;
                      double v317 = v307[5];
                      double v318 = v307[7];
                      double v319 = v307[3] * v317 + v316 * v307[2] + v307[6] * v307[4] - v318 * *v307 - v307[8] * v307[1];
                      v307[5] = v316;
                      v307[6] = v317;
                      v307[7] = v319;
                      v307[8] = v318;
                      *(float *)&double v312 = v319;
                      *unint64_t v306 = *(float *)&v312;
                      float v320 = *v309++;
                      double v321 = v304[5];
                      double v322 = v304[7];
                      double v323 = v304[3] * v321 + v320 * v304[2] + v304[6] * v304[4] - v322 * *v304 - v304[8] * v304[1];
                      v304[5] = v320;
                      v304[6] = v321;
                      v304[7] = v323;
                      v304[8] = v322;
                      *(float *)&double v312 = v323;
                      *v308++ = LODWORD(v312);
                      float v324 = *v306++;
                      float v325 = *(float *)(v190 + 172);
                      *(float *)&double v312 = (float)((float)(v324 * *(float *)(v190 + 168))
                                              - (float)(v325 * *(float *)(v190 + 160)))
                                      - (float)(*(float *)(v190 + 176) * *(float *)(v190 + 164));
                      *(_DWORD *)(v190 + 172) = LODWORD(v312);
                      *(float *)(v190 + 176) = v325;
                      *v311++ = LODWORD(v312);
                      --v310;
                    }
                    while (v310);
                  }
                  float __Aa = v193;
                  unint64_t v326 = *(void *)(v190 + 360);
                  uint64_t v327 = v326 - __IAa;
                  if (v326 <= __IAa)
                  {
                    vDSP_maxv(*(const float **)(v190 + 256), 1, (float *)(v190 + 432), __IAa);
                    vDSP_minv(*(const float **)(v190 + 256), 1, (float *)(v190 + 436), __IAa);
                    vDSP_maxv(*(const float **)(v190 + 208), 1, (float *)(v190 + 440), __IAa);
                    vDSP_minv(*(const float **)(v190 + 208), 1, (float *)(v190 + 444), __IAa);
                    uint64_t v335 = *(void *)(v190 + 360);
                    if (v335)
                    {
                      uint64_t v336 = __IAa - v335;
                      memmove(*(void **)(v190 + 280), (const void *)(*(void *)(v190 + 256) + 4 * v336), 4 * __IAa - 4 * v336);
                      memmove(*(void **)(v190 + 304), (const void *)(*(void *)(v190 + 208) + 4 * v336), 4 * __IAa - 4 * v336);
                    }
                  }
                  else
                  {
                    uint64_t v328 = *(char **)(v190 + 280);
                    uint64_t v329 = *(unsigned char **)(v190 + 288);
                    unint64_t v330 = &v328[4 * __IAa];
                    if (v329 != v330) {
                      memmove(v328, v330, v329 - v330);
                    }
                    unsigned int v331 = *(char **)(v190 + 304);
                    uint64_t v332 = *(unsigned char **)(v190 + 312);
                    uint64_t v333 = &v331[4 * __IAa];
                    if (v332 != v333) {
                      memmove(v331, v333, v332 - v333);
                    }
                    uint64_t v334 = *(const float **)(v190 + 280);
                    if (__N)
                    {
                      memmove((void *)&v334[v327], *(const void **)(v190 + 256), __len);
                      memmove((void *)(*(void *)(v190 + 304) + 4 * v327), *(const void **)(v190 + 208), __len);
                      uint64_t v334 = *(const float **)(v190 + 280);
                    }
                    vDSP_maxv(v334, 1, (float *)(v190 + 432), __IAa);
                    vDSP_minv(*(const float **)(v190 + 280), 1, (float *)(v190 + 436), __IAa);
                    vDSP_maxv(*(const float **)(v190 + 304), 1, (float *)(v190 + 440), __IAa);
                    vDSP_minv(*(const float **)(v190 + 304), 1, (float *)(v190 + 444), __IAa);
                  }
                  float v337 = *(float *)(v190 + 440);
                  float v338 = *(float *)(v190 + 368);
                  if (v337 < v338 && *(float *)(v190 + 432) < v338)
                  {
                    *(float *)(v190 + 440) = v338;
                    *(float *)(v190 + 432) = v338;
                    float v337 = v338;
                  }
                  float v339 = *(float *)(v190 + 444);
                  float v340 = *(float *)(v190 + 372);
                  if (v339 > v340 && *(float *)(v190 + 436) > v340)
                  {
                    *(float *)(v190 + 444) = v340;
                    *(float *)(v190 + 436) = v340;
                    float v339 = v340;
                  }
                  float v341 = *(float *)(v190 + 660);
                  float v342 = *(float *)(v190 + 700);
                  if (__N)
                  {
                    float v343 = v337 / *(float *)(v190 + 432);
                    uint64_t v344 = 648;
                    if (*(float *)(v190 + 656) == v343) {
                      uint64_t v344 = 652;
                    }
                    float v345 = v339 / *(float *)(v190 + 436);
                    uint64_t v346 = 688;
                    if (*(float *)(v190 + 696) == v345) {
                      uint64_t v346 = 692;
                    }
                    float v347 = *(float *)(v190 + v344);
                    unint64_t v348 = __IAa;
                    do
                    {
                      float v341 = v341 + (float)(v347 * (float)(v343 - v341));
                      float v342 = v342 + (float)(*(float *)(v190 + v346) * (float)(v345 - v342));
                      --v348;
                    }
                    while (v348);
                    *(float *)(v190 + 660) = v341;
                    *(float *)(v190 + 700) = v342;
                  }
                  double v349 = v341;
                  double v350 = *(float *)(v190 + 488) / 100.0;
                  double v351 = 1.0 - v350;
                  double v352 = v350 + 1.0;
                  double v353 = v342;
                  BOOL v354 = v351 <= v342;
                  if (v352 < v342) {
                    BOOL v354 = 0;
                  }
                  BOOL v355 = v352 >= v349 && v351 <= v349;
                  if (!v355 && !v354) {
                    goto LABEL_374;
                  }
                  BOOL v356 = v352 < v349;
                  if (v351 > v349) {
                    BOOL v356 = 1;
                  }
                  if (v356 || (v352 >= v353 ? (BOOL v357 = v351 > v353) : (BOOL v357 = 1), v357))
                  {
                    if (v356 || v354) {
                      float v358 = v341;
                    }
                    else {
                      float v358 = v342;
                    }
                  }
                  else
                  {
LABEL_374:
                    if (v341 >= v342) {
                      float v358 = v341;
                    }
                    else {
                      float v358 = v342;
                    }
                  }
                  if (*(float *)(v190 + 460) < v358) {
                    float v358 = *(float *)(v190 + 460);
                  }
                  if (v358 < *(float *)(v190 + 464)) {
                    float v358 = *(float *)(v190 + 464);
                  }
                  *(float *)(v190 + 456) = v358;
                  if (v341 <= *(float *)(v190 + 468) || v342 <= *(float *)(v190 + 472))
                  {
                    *(_DWORD *)(v190 + 476) = 1065353216;
                    *(_DWORD *)(v190 + 456) = 1065353216;
                    double v359 = 1.0;
                    float v360 = 1.0;
                    *(_DWORD *)(v190 + 484) = 0;
                  }
                  else
                  {
                    *(_DWORD *)(v190 + 476) = 0;
                    double v359 = v358;
                    float v360 = 0.0;
                  }
                  BOOL v361 = v352 < v359 || v351 > v359;
                  if (v361
                    || (v365 = *(float *)(v190 + 484), float v366 = *(float *)(v190 + 480), v365 > v366)
                    || v360 != 0.0)
                  {
                    *(_DWORD *)(v190 + 484) = 0;
                  }
                  else
                  {
                    *(float *)(v190 + 484) = v365 + 1.0;
                    if ((float)(v365 + 1.0) >= v366) {
                      *(float *)(v190 + 484) = v366;
                    }
                  }
                  vDSP_maxv(__Aa, 1, (float *)(v190 + 448), __IAa);
                  vDSP_minv(__Aa, 1, (float *)(v190 + 452), __IAa);
                  float v362 = *(float *)(v190 + 388);
                  float v363 = *(float *)(v190 + 384);
                  BOOL v364 = *(float *)(v190 + 448) > (float)(v362 * v363)
                      || *(float *)(v190 + 452) < (float)(v362 * *(float *)(v190 + 380));
                  *(unsigned char *)(v190 + 888) = v364;
                  double v367 = *(float *)(v190 + 456);
                  double v368 = *(float *)(v190 + 488) / 100.0;
                  double v369 = v368 + 1.0;
                  double v370 = 1.0 - v368;
                  BOOL v371 = v369 > v367 && v370 < v367;
                  if (!v371 && *(float *)(v190 + 476) == 0.0
                    || (v369 > v367 ? (BOOL v372 = v370 < v367) : (BOOL v372 = 0),
                        v372 && *(float *)(v190 + 484) < *(float *)(v190 + 480) && *(float *)(v190 + 476) == 0.0))
                  {
                    float v373 = *(float *)(v190 + 392);
                    float v374 = 1.0;
                    if (v364)
                    {
                      float v373 = v373 * *(float *)(v190 + 376);
                      if (v373 < *(float *)(v190 + 396)) {
                        float v373 = *(float *)(v190 + 396);
                      }
                      *(float *)(v190 + 392) = v373;
                    }
                  }
                  else
                  {
                    float v373 = *(float *)(v190 + 396);
                    float v374 = 0.0;
                  }
                  uint64_t v144 = 16 * v126;
                  uint64_t v188 = v668;
                  *(float *)(v190 + 408) = v373;
                  *(float *)(v190 + 880) = v374;
                  *(float *)(v190 + 884) = v374;
                  float v375 = *(float *)(v190 + 380);
                  float v376 = *(float *)(*(void *)(v190 + 232) + 4 * v662);
                  float v377 = -(float)(v376 - (float)(v373 * v375));
                  float v378 = -(float)(v376 - (float)(v373 * v363));
                  if (v377 <= 0.0) {
                    float v379 = v377;
                  }
                  else {
                    float v379 = 0.0;
                  }
                  if (v379 >= v375) {
                    float v375 = v379;
                  }
                  if (v378 < 0.0) {
                    float v378 = 0.0;
                  }
                  if (v363 >= v378) {
                    float v363 = v378;
                  }
                  if (v363 > (float)-v375) {
                    float v363 = -v375;
                  }
                  *(float *)(v190 + 412) = v363;
                }
                else
                {
                  shouldTraceRender();
                  *(_DWORD *)(v190 + 500) = 0;
                  float v255 = 0.0;
LABEL_276:
                  float v257 = *(float *)(v190 + 496);
                  float v258 = 0.0;
                  uint64_t v144 = 16 * v126;
                  uint64_t v188 = v668;
                  if (v255 >= v257)
                  {
                    *(float *)(v190 + 500) = v257;
                    float v258 = 1.0;
                  }
                  *(float *)(v190 + 504) = v258;
                  *(void *)(v190 + 416) = 0;
                  *(void *)(v190 + 424) = 0;
                  *(_DWORD *)(v190 + 456) = 1065353216;
                  *(_DWORD *)(v190 + 736) = 1065353216;
                  float v259 = *(float *)(v190 + 396);
                  float v260 = fabsf(*(float *)(v190 + 380));
                  float v261 = fabsf(*(float *)(v190 + 384));
                  if (v261 < v260) {
                    float v260 = v261;
                  }
                  float v262 = v259 * v260;
                  *(float *)(v190 + 76) = v262;
                  *(float *)(v190 + 80) = 1.0 / v262;
                  *(float *)(v190 + 412) = v262;
                  *(float *)(v190 + 776) = v262;
                  *(float *)(v190 + 408) = v259;
                }
LABEL_281:
                uint64_t v263 = *(void *)(v190 + 448);
                *(void *)(v188 + 1056) = v263;
                std::string v264 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                if (v264)
                {
                  float __B = *(float *)&v263;
                  clsp::CLSP_Log::LogCLSPData(v264, &__B, 1);
                  long long v265 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                  if (v265)
                  {
                    float __B = *(float *)(v188 + 1060);
                    clsp::CLSP_Log::LogCLSPData(v265, &__B, 1);
                    int64_t v266 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                    if (v266)
                    {
                      float __B = *(float *)(v190 + 736);
                      clsp::CLSP_Log::LogCLSPData(v266, &__B, 1);
                      std::string v267 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                      if (v267)
                      {
                        float __B = *(float *)(v190 + 76);
                        clsp::CLSP_Log::LogCLSPData(v267, &__B, 1);
                        std::string v268 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                        if (v268)
                        {
                          float __B = *(float *)(v190 + 660);
                          clsp::CLSP_Log::LogCLSPData(v268, &__B, 1);
                          float v269 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                          if (v269)
                          {
                            float __B = *(float *)(v190 + 700);
                            clsp::CLSP_Log::LogCLSPData(v269, &__B, 1);
                            long long v270 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                            if (v270)
                            {
                              float __B = *(float *)(v190 + 440);
                              clsp::CLSP_Log::LogCLSPData(v270, &__B, 1);
                              int64_t v271 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                              if (v271)
                              {
                                float __B = *(float *)(v190 + 444);
                                clsp::CLSP_Log::LogCLSPData(v271, &__B, 1);
                                unint64_t v272 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                if (v272)
                                {
                                  float __B = *(float *)(v190 + 432);
                                  clsp::CLSP_Log::LogCLSPData(v272, &__B, 1);
                                  char v273 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                  if (v273)
                                  {
                                    float __B = *(float *)(v190 + 436);
                                    clsp::CLSP_Log::LogCLSPData(v273, &__B, 1);
                                    int v274 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                    if (v274)
                                    {
                                      float __B = *(float *)(v190 + 412);
                                      clsp::CLSP_Log::LogCLSPData(v274, &__B, 1);
                                      float v275 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                      if (v275)
                                      {
                                        float v276 = *(unsigned char *)(v188 + 994) ? 1.0 : 0.0;
                                        float __B = v276;
                                        clsp::CLSP_Log::LogCLSPData(v275, &__B, 1);
                                        std::string v277 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                        if (v277)
                                        {
                                          float v278 = *(unsigned char *)(v188 + 992) ? 1.0 : 0.0;
                                          float __B = v278;
                                          clsp::CLSP_Log::LogCLSPData(v277, &__B, 1);
                                          std::string v279 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                          if (v279)
                                          {
                                            float __B = *(float *)(v190 + 476);
                                            clsp::CLSP_Log::LogCLSPData(v279, &__B, 1);
                                            double v280 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                            if (v280)
                                            {
                                              float __B = *(float *)(v190 + 484);
                                              clsp::CLSP_Log::LogCLSPData(v280, &__B, 1);
                                              double v281 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                              if (v281)
                                              {
                                                float __B = *(float *)(v190 + 408);
                                                clsp::CLSP_Log::LogCLSPData(v281, &__B, 1);
                                                char v282 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                if (v282)
                                                {
                                                  float __B = *(float *)(v190 + 500);
                                                  clsp::CLSP_Log::LogCLSPData(v282, &__B, 1);
                                                  uint64_t v283 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                  if (v283)
                                                  {
                                                    float __B = *(float *)(v190 + 504);
                                                    clsp::CLSP_Log::LogCLSPData(v283, &__B, 1);
                                                    double v284 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                    if (v284)
                                                    {
                                                      float __B = v127;
                                                      clsp::CLSP_Log::LogCLSPData(v284, &__B, 1);
                                                      int v285 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                      if (v285)
                                                      {
                                                        float __B = *(float *)(v188 + 1064);
                                                        clsp::CLSP_Log::LogCLSPData(v285, &__B, 1);
                                                        int v286 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                        if (v286)
                                                        {
                                                          float __B = *(float *)(v188 + 1068);
                                                          clsp::CLSP_Log::LogCLSPData(v286, &__B, 1);
                                                          int v287 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                          if (v287)
                                                          {
                                                            float v288 = *(unsigned char *)(v190 + 888) ? 1.0 : 0.0;
                                                            float __B = v288;
                                                            clsp::CLSP_Log::LogCLSPData(v287, &__B, 1);
                                                            unsigned int v289 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                            if (v289)
                                                            {
                                                              float __B = *(float *)(v190 + 448);
                                                              clsp::CLSP_Log::LogCLSPData(v289, &__B, 1);
                                                              unsigned int v290 = *(clsp::CLSP_Log **)(*(void *)(v188 + 1080) + 48);
                                                              if (v290)
                                                              {
                                                                float __B = *(float *)(v190 + 452);
                                                                clsp::CLSP_Log::LogCLSPData(v290, &__B, 1);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                float v252 = (float32x2_t *)(v188 + 1028);
                uint64_t v253 = *(void *)(*(void *)(v188 + 40) + 48);
                float32x2_t v254 = *(float32x2_t *)(v188 + 1056);
LABEL_316:
                float32x2_t v291 = vdiv_f32(v254, (float32x2_t)vrev64_s32(*(int32x2_t *)(v253 + 4)));
                float32x2_t *v252 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v291, *v252), (int8x8_t)v291, (int8x8_t)*v252);
                vDSP_Length v147 = __IAa;
              }
LABEL_317:
              uint64_t v292 = *(void *)(*v47 + v144);
              uint64_t v293 = *(void *)(v292 + 792);
              float __B = 0.0;
              vDSP_dotpr(*(const float **)(v292 + 848), 1, *(const float **)(v292 + 872), 1, &__B, v147);
              unsigned int v294 = *(_DWORD *)(v293 + 16) + __N;
              *(_DWORD *)(v293 + 16) = v294;
              float v295 = __B + *(float *)(v293 + 8);
              *(float *)(v293 + 8) = v295;
              if (v294 > *(_DWORD *)(v293 + 4))
              {
                *(float *)(v293 + 12) = v295 / (float)v294;
                *(_DWORD *)(v293 + 16) = 0;
                *(_DWORD *)(v293 + 8) = 0;
              }
              goto LABEL_319;
            }
            DSPSplitComplex __A = (float *)v145[53];
            uint64_t v157 = v145[125];
            uint64_t v158 = (char *)v145[106];
            shouldTraceRender();
            unint64_t v159 = *(void *)(v157 + 8);
            unint64_t v160 = __IAa;
            if (v159 <= __IAa)
            {
              if (v159)
              {
                memmove(*(void **)(v157 + 40), *(const void **)(v157 + 16), 4 * v159);
                unint64_t v160 = __IAa;
                unint64_t v159 = *(void *)(v157 + 8);
              }
              uint64_t v161 = v668;
              unint64_t v175 = &v158[4 * v160];
              uint64_t v176 = &v175[-4 * v159];
              if (v176 != v158)
              {
                memmove((void *)(*(void *)(v157 + 40) + 4 * v159), v158, v176 - v158);
                unint64_t v159 = *(void *)(v157 + 8);
              }
              if (v159)
              {
                size_t v164 = 4 * v159;
                uint64_t v162 = *(void **)(v157 + 16);
                uint64_t v163 = &v175[-4 * v159];
LABEL_182:
                memmove(v162, v163, v164);
              }
            }
            else
            {
              if (__N)
              {
                memmove(*(void **)(v157 + 40), *(const void **)(v157 + 16), __len);
                unint64_t v160 = __IAa;
                unint64_t v159 = *(void *)(v157 + 8);
              }
              uint64_t v161 = v668;
              if (v159 != v160) {
                memmove(*(void **)(v157 + 16), (const void *)(*(void *)(v157 + 16) + 4 * __IAa), 4 * v159 - 4 * __IAa);
              }
              if (__N)
              {
                uint64_t v162 = (void *)(*(void *)(v157 + 16) + 4 * *(void *)(v157 + 8) + 4 * v664);
                uint64_t v163 = v158;
                size_t v164 = __len;
                goto LABEL_182;
              }
            }
            uint64_t v177 = *(void *)(v161 + 1008);
            int v178 = *(char **)(v161 + 872);
            shouldTraceRender();
            unint64_t v179 = *(void *)(v177 + 8);
            vDSP_Length v180 = __IAa;
            if (v179 <= __IAa)
            {
              if (v179)
              {
                memmove(*(void **)(v177 + 40), *(const void **)(v177 + 16), 4 * v179);
                vDSP_Length v180 = __IAa;
                unint64_t v179 = *(void *)(v177 + 8);
              }
              int v181 = __A;
              float v195 = &v178[4 * v180];
              float v196 = &v195[-4 * v179];
              if (v196 != v178)
              {
                memmove((void *)(*(void *)(v177 + 40) + 4 * v179), v178, v196 - v178);
                vDSP_Length v180 = __IAa;
                unint64_t v179 = *(void *)(v177 + 8);
              }
              if (v179)
              {
                size_t v184 = 4 * v179;
                int v182 = *(void **)(v177 + 16);
                uint64_t v183 = &v195[-4 * v179];
LABEL_209:
                memmove(v182, v183, v184);
                vDSP_Length v180 = __IAa;
              }
            }
            else
            {
              if (__N)
              {
                memmove(*(void **)(v177 + 40), *(const void **)(v177 + 16), __len);
                vDSP_Length v180 = __IAa;
                unint64_t v179 = *(void *)(v177 + 8);
              }
              int v181 = __A;
              if (v179 != v180)
              {
                memmove(*(void **)(v177 + 16), (const void *)(*(void *)(v177 + 16) + 4 * v180), 4 * v179 - 4 * v180);
                vDSP_Length v180 = __IAa;
              }
              if (__N)
              {
                int v182 = (void *)(*(void *)(v177 + 16) + 4 * *(void *)(v177 + 8) + 4 * v664);
                uint64_t v183 = v178;
                size_t v184 = __len;
                goto LABEL_209;
              }
            }
            float v197 = *(const float **)(v668 + 896);
            float v198 = **((float **)v181 + 11);
            float __B = 0.0;
            vDSP_sve(v197, 1, &__B, v180);
            float v199 = __B + __A[148];
            __A[148] = v199;
            unint64_t v200 = *((void *)__A + 75) + __IAa;
            *((void *)__A + 75) = v200;
            if (v200 > *((void *)__A + 73))
            {
              float v201 = v199 / (float)v200;
              BOOL v202 = v201 > (float)(v198 * 1.15);
              if (v201 < (float)(v198 * 0.9)) {
                BOOL v202 = 1;
              }
              *((unsigned char *)__A + 608) = v202;
              __A[148] = 0.0;
              *((void *)__A + 75) = 0;
            }
            ConvoyToExcursion(*(float **)(*(void *)(v668 + 48) + 40), *(float **)(v668 + 896), __IAa, *(unsigned char *)(v668 + 995) == 0, 0, *(float *)(*(void *)(*(void *)(v668 + 40) + 48) + 4), *(float *)(*(void *)(*(void *)(v668 + 40) + 48) + 8));
            uint64_t v203 = *(clsp::CLSP_Log **)(*(void *)(v668 + 1080) + 144);
            if (v203) {
              clsp::CLSP_Log::LogCLSPData(v203, *(const float **)(v668 + 896), __IAa);
            }
            clsp::FirFilter::firlsfilter(*(clsp::FirFilter **)(v668 + 1016), *(float **)(v668 + 896), *(float **)(v668 + 896), __N);
            uint64_t v204 = *(clsp::CLSP_Log **)(*(void *)(v668 + 1080) + 176);
            if (v204) {
              clsp::CLSP_Log::LogCLSPData(v204, *(const float **)(v668 + 896), __IAa);
            }
            uint64_t v205 = *(void *)(*(void *)(v668 + 1000) + 40);
            int v206 = *(unsigned __int8 *)(v668 + 992);
            uint64_t v207 = *(const float **)(v668 + 896);
            int v208 = *(unsigned __int8 *)(v668 + 994);
            *((void *)__A + 71) = __IAa;
            vDSP_maxv(v207, 1, __A + 118, __IAa);
            v663 = (int *)(__A + 119);
            vDSP_minv(v207, 1, __A + 119, __IAa);
            if (*((unsigned char *)__A + 560))
            {
              shouldTraceRender();
              uint64_t v144 = 16 * v126;
              int v209 = __A;
              goto LABEL_228;
            }
            if (__A[138] == 1.0)
            {
              *((void *)__A + 55) = 0;
              *((void *)__A + 56) = 0;
              __A[120] = 1.0;
              __A[206] = 1.0;
              float v214 = __A[105];
              float v215 = fabsf(__A[94]);
              float v216 = fabsf(__A[95]);
              if (v216 < v215) {
                float v215 = v216;
              }
              float v217 = v214 * v215;
              __A[24] = v217;
              __A[25] = 1.0 / v217;
              __A[109] = v217;
              __A[216] = v217;
              __A[108] = v214;
              __A[187] = __A[186];
              __A[197] = __A[196];
              uint64_t v144 = 16 * v126;
              int v209 = __A;
LABEL_228:
              char v218 = (uint64_t *)(__A + 118);
              uint64_t v219 = v668;
LABEL_229:
              uint64_t v220 = *v218;
              *(void *)(v219 + 1056) = *v218;
              char v221 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
              if (v221)
              {
                float __B = *(float *)&v220;
                clsp::CLSP_Log::LogCLSPData(v221, &__B, 1);
                std::string v222 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                if (v222)
                {
                  float __B = *(float *)(v219 + 1060);
                  clsp::CLSP_Log::LogCLSPData(v222, &__B, 1);
                  double v223 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                  if (v223)
                  {
                    float __B = v209[206];
                    clsp::CLSP_Log::LogCLSPData(v223, &__B, 1);
                    char v224 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                    if (v224)
                    {
                      float __B = v209[24];
                      clsp::CLSP_Log::LogCLSPData(v224, &__B, 1);
                      uint64_t v225 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                      if (v225)
                      {
                        float __B = v209[187];
                        clsp::CLSP_Log::LogCLSPData(v225, &__B, 1);
                        unsigned __int8 v226 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                        if (v226)
                        {
                          float __B = v209[197];
                          clsp::CLSP_Log::LogCLSPData(v226, &__B, 1);
                          double v227 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                          if (v227)
                          {
                            float __B = v209[116];
                            clsp::CLSP_Log::LogCLSPData(v227, &__B, 1);
                            char v228 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                            if (v228)
                            {
                              float __B = v209[117];
                              clsp::CLSP_Log::LogCLSPData(v228, &__B, 1);
                              long long v229 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                              if (v229)
                              {
                                float __B = v209[114];
                                clsp::CLSP_Log::LogCLSPData(v229, &__B, 1);
                                int64_t v230 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                if (v230)
                                {
                                  float __B = v209[115];
                                  clsp::CLSP_Log::LogCLSPData(v230, &__B, 1);
                                  double v231 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                  if (v231)
                                  {
                                    float __B = v209[109];
                                    clsp::CLSP_Log::LogCLSPData(v231, &__B, 1);
                                    char v232 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                    if (v232)
                                    {
                                      float v233 = *(unsigned char *)(v219 + 994) ? 1.0 : 0.0;
                                      float __B = v233;
                                      clsp::CLSP_Log::LogCLSPData(v232, &__B, 1);
                                      uint64_t v234 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                      if (v234)
                                      {
                                        float v235 = *(unsigned char *)(v219 + 992) ? 1.0 : 0.0;
                                        float __B = v235;
                                        clsp::CLSP_Log::LogCLSPData(v234, &__B, 1);
                                        float v236 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                        if (v236)
                                        {
                                          float __B = v209[128];
                                          clsp::CLSP_Log::LogCLSPData(v236, &__B, 1);
                                          float v237 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                          if (v237)
                                          {
                                            float __B = v209[133];
                                            clsp::CLSP_Log::LogCLSPData(v237, &__B, 1);
                                            float v238 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                            if (v238)
                                            {
                                              float __B = v209[108];
                                              clsp::CLSP_Log::LogCLSPData(v238, &__B, 1);
                                              uint64_t v239 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                              if (v239)
                                              {
                                                float __B = v209[137];
                                                clsp::CLSP_Log::LogCLSPData(v239, &__B, 1);
                                                char v240 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                if (v240)
                                                {
                                                  float __B = v209[138];
                                                  clsp::CLSP_Log::LogCLSPData(v240, &__B, 1);
                                                  float v241 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                  if (v241)
                                                  {
                                                    float __B = v127;
                                                    clsp::CLSP_Log::LogCLSPData(v241, &__B, 1);
                                                    float v242 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                    if (v242)
                                                    {
                                                      float __B = *(float *)(v219 + 1064);
                                                      clsp::CLSP_Log::LogCLSPData(v242, &__B, 1);
                                                      float v243 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                      if (v243)
                                                      {
                                                        float __B = *(float *)(v219 + 1068);
                                                        clsp::CLSP_Log::LogCLSPData(v243, &__B, 1);
                                                        float v244 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                        if (v244)
                                                        {
                                                          float v245 = *((unsigned char *)v209 + 976) ? 1.0 : 0.0;
                                                          float __B = v245;
                                                          clsp::CLSP_Log::LogCLSPData(v244, &__B, 1);
                                                          int v246 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                          if (v246)
                                                          {
                                                            float __B = *(float *)v218;
                                                            clsp::CLSP_Log::LogCLSPData(v246, &__B, 1);
                                                            unsigned int v247 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                            if (v247)
                                                            {
                                                              float __B = *(float *)v663;
                                                              clsp::CLSP_Log::LogCLSPData(v247, &__B, 1);
                                                              float v248 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080) + 48);
                                                              if (v248)
                                                              {
                                                                float __B = v209[139];
                                                                clsp::CLSP_Log::LogCLSPData(v248, &__B, 1);
                                                                uint64_t v249 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080)
                                                                                          + 48);
                                                                if (v249)
                                                                {
                                                                  float __B = (float)*((unsigned int *)v209 + 130);
                                                                  clsp::CLSP_Log::LogCLSPData(v249, &__B, 1);
                                                                  std::string v250 = *(clsp::CLSP_Log **)(*(void *)(v219 + 1080)
                                                                                            + 48);
                                                                  if (v250)
                                                                  {
                                                                    if (*((unsigned char *)v209 + 608)) {
                                                                      float v251 = 1.0;
                                                                    }
                                                                    else {
                                                                      float v251 = 0.0;
                                                                    }
                                                                    float __B = v251;
                                                                    clsp::CLSP_Log::LogCLSPData(v250, &__B, 1);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              float v252 = (float32x2_t *)(v219 + 1028);
              uint64_t v253 = *(void *)(*(void *)(v219 + 40) + 48);
              float32x2_t v254 = *(float32x2_t *)(v219 + 1056);
              goto LABEL_316;
            }
            if (v206 | v208)
            {
              shouldTraceRender();
              int v209 = __A;
              float v256 = __A[137] + v127;
              __A[137] = v256;
LABEL_323:
              float v297 = v209[136];
              float v298 = 0.0;
              uint64_t v144 = 16 * v126;
              uint64_t v219 = v668;
              char v218 = (uint64_t *)(__A + 118);
              if (v256 >= v297)
              {
                v209[137] = v297;
                float v298 = 1.0;
              }
              v209[138] = v298;
              *((void *)v209 + 55) = 0;
              *((void *)v209 + 56) = 0;
              v209[120] = 1.0;
              v209[206] = 1.0;
              float v299 = v209[105];
              float v300 = fabsf(v209[94]);
              float v301 = fabsf(v209[95]);
              if (v301 < v300) {
                float v300 = v301;
              }
              float v302 = v299 * v300;
              v209[24] = v302;
              v209[25] = 1.0 / v302;
              v209[109] = v302;
              v209[216] = v302;
              v209[108] = v299;
              v209[187] = v209[186];
              v209[197] = v209[196];
              goto LABEL_229;
            }
            int v209 = __A;
            if (__A[137] != 0.0)
            {
              shouldTraceRender();
              int v209 = __A;
              __A[137] = 0.0;
              float v256 = 0.0;
              goto LABEL_323;
            }
            if (!*((unsigned char *)__A + 608))
            {
              if (__A[104] == __A[105])
              {
                int v209 = __A;
                goto LABEL_342;
              }
              __A[137] = 0.0;
              if (__N)
              {
                unint64_t v380 = 0;
                unint64_t v382 = (double *)*((void *)__A + 21);
                v381 = (double *)*((void *)__A + 22);
                uint64_t v383 = *((void *)__A + 32);
                uint64_t v384 = *((void *)__A + 26);
                v385 = (double *)*((void *)__A + 20);
                uint64_t v386 = *((void *)__A + 29);
                uint64_t v387 = *((void *)__A + 35);
                do
                {
                  double v388 = v207[v380 / 4];
                  double v389 = v381[5];
                  double v390 = v381[7];
                  double v391 = v381[3] * v389 + v388 * v381[2] + v381[6] * v381[4] - v390 * *v381 - v381[8] * v381[1];
                  v381[5] = v388;
                  v381[6] = v389;
                  v381[7] = v391;
                  v381[8] = v390;
                  *(float *)&double v388 = v391;
                  *(_DWORD *)(v383 + v380) = LODWORD(v388);
                  double v392 = *(float *)(v205 + v380);
                  double v393 = v385[5];
                  double v394 = v385[7];
                  double v395 = v385[3] * v393 + v392 * v385[2] + v385[6] * v385[4] - v394 * *v385 - v385[8] * v385[1];
                  v385[5] = v392;
                  v385[6] = v393;
                  v385[7] = v395;
                  v385[8] = v394;
                  *(float *)&double v392 = v395;
                  *(_DWORD *)(v384 + v380) = LODWORD(v392);
                  double v396 = v207[v380 / 4];
                  double v397 = v382[5];
                  double v398 = v382[7];
                  double v399 = v382[3] * v397 + v396 * v382[2] + v382[6] * v382[4] - v398 * *v382 - v382[8] * v382[1];
                  v382[5] = v396;
                  v382[6] = v397;
                  v382[7] = v399;
                  v382[8] = v398;
                  *(float *)&double v396 = v399;
                  *(_DWORD *)(v386 + v380) = LODWORD(v396);
                  float v400 = __A[49];
                  *(float *)&double v396 = (float)((float)(*(float *)(v384 + v380) * __A[48]) - (float)(v400 * __A[46]))
                                  - (float)(__A[50] * __A[47]);
                  __A[49] = *(float *)&v396;
                  __A[50] = v400;
                  *(_DWORD *)(v387 + v380) = LODWORD(v396);
                  v380 += 4;
                }
                while (__len != v380);
              }
              else
              {
                uint64_t v383 = *((void *)__A + 32);
              }
              float v401 = *(float *)(v383 + 4 * v662);
              unint64_t v402 = *((void *)__A + 49);
              uint64_t v403 = v402 - __IAa;
              if (v402 <= __IAa)
              {
                vDSP_maxv(*((const float **)__A + 35), 1, __A + 114, __IAa);
                vDSP_minv(*((const float **)__A + 35), 1, __A + 115, __IAa);
                vDSP_maxv(*((const float **)__A + 29), 1, __A + 116, __IAa);
                vDSP_minv(*((const float **)__A + 29), 1, __A + 117, __IAa);
                uint64_t v411 = *((void *)__A + 49);
                if (v411)
                {
                  uint64_t v412 = __IAa - v411;
                  memmove(*((void **)__A + 38), (const void *)(*((void *)__A + 35) + 4 * v412), 4 * __IAa - 4 * v412);
                  memmove(*((void **)__A + 41), (const void *)(*((void *)__A + 29) + 4 * v412), 4 * __IAa - 4 * v412);
                }
              }
              else
              {
                v404 = (char *)*((void *)__A + 38);
                unsigned int v405 = (unsigned char *)*((void *)__A + 39);
                uint64_t v406 = &v404[4 * __IAa];
                if (v405 != v406) {
                  memmove(v404, v406, v405 - v406);
                }
                uint64_t v407 = (char *)*((void *)__A + 41);
                UInt64 v408 = (unsigned char *)*((void *)__A + 42);
                uint64_t v409 = &v407[4 * __IAa];
                if (v408 != v409) {
                  memmove(v407, v409, v408 - v409);
                }
                uint64_t v410 = (const float *)*((void *)__A + 38);
                if (__N)
                {
                  memmove((void *)&v410[v403], *((const void **)__A + 35), __len);
                  memmove((void *)(*((void *)__A + 41) + 4 * v403), *((const void **)__A + 29), __len);
                  uint64_t v410 = (const float *)*((void *)__A + 38);
                }
                vDSP_maxv(v410, 1, __A + 114, __IAa);
                vDSP_minv(*((const float **)__A + 38), 1, __A + 115, __IAa);
                vDSP_maxv(*((const float **)__A + 41), 1, __A + 116, __IAa);
                vDSP_minv(*((const float **)__A + 41), 1, __A + 117, __IAa);
              }
              float v413 = __A[114];
              float v414 = __A[115];
              float v415 = __A[116];
              float v416 = __A[117];
              float v417 = __A[100];
              float v418 = v413;
              float v419 = v415;
              if (v415 < v417)
              {
                float v418 = __A[114];
                float v419 = __A[116];
                if (v413 < v417)
                {
                  __A[116] = v417;
                  __A[114] = v417;
                  float v418 = v417;
                  float v419 = v417;
                }
              }
              float v420 = __A[101];
              float v421 = v414;
              float v422 = v416;
              if (v416 > v420)
              {
                float v421 = v414;
                float v422 = v416;
                if (v414 > v420)
                {
                  __A[117] = v420;
                  __A[115] = v420;
                  float v421 = v420;
                  float v422 = v420;
                }
              }
              float v423 = __A[187];
              float v424 = __A[197];
              if (__N)
              {
                float v425 = v419 / v418;
                uint64_t v426 = 184;
                if (__A[186] == v425) {
                  uint64_t v426 = 185;
                }
                float v427 = v422 / v421;
                uint64_t v428 = 194;
                if (__A[196] == (float)(v422 / v421)) {
                  uint64_t v428 = 195;
                }
                float v429 = __A[v426];
                unint64_t v430 = __IAa;
                do
                {
                  float v423 = v423 + (float)(v429 * (float)(v425 - v423));
                  float v424 = v424 + (float)(__A[v428] * (float)(v427 - v424));
                  --v430;
                }
                while (v430);
                __A[187] = v423;
                __A[197] = v424;
              }
              double v431 = v423;
              double v432 = __A[134] / 100.0;
              double v433 = 1.0 - v432;
              double v434 = v432 + 1.0;
              double v435 = v424;
              BOOL v436 = v433 <= v424;
              if (v434 < v424) {
                BOOL v436 = 0;
              }
              BOOL v437 = v434 >= v431 && v433 <= v431;
              if (!v437 && !v436) {
                goto LABEL_474;
              }
              BOOL v438 = v434 < v431;
              if (v433 > v431) {
                BOOL v438 = 1;
              }
              if (v438 || (v434 >= v435 ? (BOOL v439 = v433 > v435) : (BOOL v439 = 1), v439))
              {
                if (!v438 && !v436) {
                  float v423 = v424;
                }
              }
              else
              {
LABEL_474:
                if (v423 < v424) {
                  float v423 = v424;
                }
              }
              float v440 = v415 / v413;
              float v441 = v416 / v414;
              float v442 = __A[121];
              if (v442 >= v423) {
                float v442 = v423;
              }
              if (v442 < __A[122]) {
                float v442 = __A[122];
              }
              double v443 = v413;
              float32x2_t v444 = *(float32x2_t *)(__A + 94);
              double v445 = v444.f32[1] * 0.1;
              double v446 = v444.f32[0] * 0.1;
              float v447 = __A[123];
              BOOL v448 = v440 <= v447;
              float v449 = __A[124];
              BOOL v450 = v441 <= v449;
              if (v446 <= v414) {
                BOOL v450 = 0;
              }
              if (v445 >= v443) {
                BOOL v448 = 0;
              }
              __A[120] = v442;
              if (v440 <= v447 || v445 >= v443)
              {
                BOOL v451 = v441 > v449;
                if (v446 <= v414) {
                  BOOL v451 = 0;
                }
              }
              else
              {
                BOOL v451 = 1;
              }
              BOOL v452 = v401 >= v444.f32[1];
              if (v401 <= v444.f32[0]) {
                BOOL v452 = 1;
              }
              if (*((unsigned char *)__A + 524))
              {
                __A[130] = __A[127];
                __A[128] = 1.0;
                goto LABEL_496;
              }
              float v453 = __A[128];
              if (v453 == 1.0)
              {
                v461 = __A + 129;
                if (!v451 || v452) {
                  unsigned int v462 = 0;
                }
                else {
                  unsigned int v462 = *v461 + __N;
                }
                *((_DWORD *)__A + 129) = v462;
                unsigned int v472 = *((_DWORD *)__A + 130) + __N;
                *((_DWORD *)__A + 130) = v472;
                unsigned int v473 = *((_DWORD *)__A + 127);
                if (v472 < v473)
                {
                  float v453 = 1.0;
                  if (v462 > *((_DWORD *)__A + 126))
                  {
                    __A[128] = 0.0;
                    float v453 = 0.0;
                    *(void *)v461 = 0;
                  }
LABEL_497:
                  double v454 = v442;
                  BOOL v455 = v434 < v454 || v433 > v454;
                  if (v455 || (float v459 = __A[133], v460 = __A[132], v459 > v460) || v453 != 0.0)
                  {
                    __A[133] = 0.0;
                    float v456 = 0.0;
                  }
                  else
                  {
                    float v456 = v459 + 1.0;
                    __A[133] = v456;
                    if (v456 >= v460)
                    {
                      __A[133] = v460;
                      float v456 = v460;
                    }
                  }
                  float v457 = __A[103];
                  BOOL v458 = __A[118] > (float)(v444.f32[1] * v457) || *(float *)v663 < (float)(v444.f32[0] * v457);
                  *((unsigned char *)__A + 976) = v458;
                  BOOL v463 = v433 < v454 && v434 > v454;
                  if (!v463 && v453 == 0.0
                    || (v434 > v454 ? (BOOL v465 = v433 < v454) : (BOOL v465 = 0), v465 && v456 < __A[132] && v453 == 0.0))
                  {
                    float v464 = __A[104];
                    LODWORD(v434) = 1.0;
                    if (v458)
                    {
                      float v464 = v464 * __A[102];
                      if (v464 < __A[105]) {
                        float v464 = __A[105];
                      }
                      __A[104] = v464;
                    }
                  }
                  else
                  {
                    float v464 = __A[105];
                    double v434 = 0.0;
                  }
                  __A[108] = v464;
                  __A[242] = *(float *)&v434;
                  __A[243] = *(float *)&v434;
                  if (v453 == 0.0)
                  {
                    *(float *)&double v434 = -v401;
                    int8x8_t v466 = (int8x8_t)vmul_f32(v444, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
                    int8x8_t v467 = (int8x8_t)vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v434, 0), v444, v464);
                    int8x8_t v468 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v466.u32[1], v467.u32[0]), (float32x2_t)__PAIR64__(v467.u32[1], v466.u32[0])), v466, v467);
                    float32x2_t v469 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v468.u32[1], v444.u32[0]), (float32x2_t)__PAIR64__(v444.u32[1], v468.u32[0])), (int8x8_t)v444, v468);
                  }
                  else
                  {
                    __A[120] = 1.0;
                    __A[206] = 1.0;
                    __A[187] = __A[186];
                    __A[197] = __A[196];
                    float32x2_t v469 = vmul_n_f32(v444, __A[105]);
                  }
                  float v470 = -v469.f32[0];
                  v469.i32[0] = v469.i32[1];
                  if (v469.f32[1] > v470) {
                    v469.f32[0] = v470;
                  }
                  int v209 = __A;
                  __A[109] = v469.f32[0];
                  __A[139] = v401;
LABEL_343:
                  uint64_t v144 = 16 * v126;
                  goto LABEL_228;
                }
                *((_DWORD *)__A + 130) = v473;
                *((unsigned char *)__A + 524) = 1;
              }
              else
              {
                if (!v448 && !v450 && !v452)
                {
                  __A[129] = 0.0;
                  goto LABEL_497;
                }
                unsigned int v471 = *((_DWORD *)__A + 129) + __N;
                *((_DWORD *)__A + 129) = v471;
                if (v471 <= *((_DWORD *)__A + 125)) {
                  goto LABEL_497;
                }
                *((void *)__A + 64) = 1065353216;
              }
LABEL_496:
              float v453 = 1.0;
              goto LABEL_497;
            }
LABEL_342:
            clsp::ConvoyDisplacementControllerV2::resetToOpenLoop((clsp::ConvoyDisplacementControllerV2 *)v209);
            goto LABEL_343;
          }
          uint64_t v128 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v126);
          ausdk::AUElement::SetParameter(v128, 0x16u, 0.0, 0);
          uint64_t v129 = *(void *)(*v47 + 16 * v126);
          *(_WORD *)(v129 + 992) = 257;
          *(unsigned char *)(v129 + 994) = 1;
          uint64_t v130 = *(void *)(v129 + 424);
          if (v130)
          {
            int v131 = *(_DWORD *)(v130 + 8);
            if (v131 == 1)
            {
              *(void *)(v130 + 416) = 0;
              *(void *)(v130 + 424) = 0;
              *(_DWORD *)(v130 + 456) = 1065353216;
              *(_DWORD *)(v130 + 736) = 1065353216;
              float v132 = *(float *)(v130 + 396);
              float v133 = fabsf(*(float *)(v130 + 380));
              float v134 = fabsf(*(float *)(v130 + 384));
              if (v134 < v133) {
                float v133 = v134;
              }
              float v135 = v132 * v133;
              *(float *)(v130 + 76) = v135;
              *(float *)(v130 + 80) = 1.0 / v135;
              *(float *)(v130 + 412) = v135;
              *(float *)(v130 + 776) = v135;
              *(float *)(v130 + 408) = v132;
              uint64_t v130 = *(void *)(v129 + 424);
              if (!v130) {
                goto LABEL_319;
              }
              int v131 = *(_DWORD *)(v130 + 8);
            }
            if (v131 == 4)
            {
              *(void *)(v130 + 440) = 0;
              *(void *)(v130 + 448) = 0;
              *(_DWORD *)(v130 + 480) = 1065353216;
              *(_DWORD *)(v130 + 824) = 1065353216;
              float v136 = *(float *)(v130 + 420);
              float v137 = fabsf(*(float *)(v130 + 376));
              float v138 = fabsf(*(float *)(v130 + 380));
              if (v138 < v137) {
                float v137 = v138;
              }
              float v139 = v136 * v137;
              *(float *)(v130 + 96) = v139;
              *(float *)(v130 + 100) = 1.0 / v139;
              *(float *)(v130 + 436) = v139;
              *(float *)(v130 + 864) = v139;
              *(float *)(v130 + 432) = v136;
              *(_DWORD *)(v130 + 748) = *(_DWORD *)(v130 + 744);
              *(_DWORD *)(v130 + 788) = *(_DWORD *)(v130 + 784);
            }
          }
LABEL_319:
          ++v126;
          float v296 = (char *)*((void *)this + 106);
          std::__fs::filesystem::path v107 = (char *)*((void *)this + 105);
          if (v126 >= (v296 - v107) >> 4)
          {
            if (v107 != v296)
            {
              float v474 = 0.0;
              do
              {
                uint64_t v475 = *(void *)v107;
                v107 += 16;
                float v474 = v474 + *(float *)(*(void *)(v475 + 792) + 12);
              }
              while (v107 != v296);
LABEL_551:
              v476 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(v476, 0x10u, v474, 0);
              uint64_t v79 = *((void *)this + 106);
              uint64_t v80 = *((void *)this + 105);
LABEL_552:
              if (v79 != v80)
              {
                uint64_t v477 = 0;
                unint64_t v478 = 0;
                do
                {
                  uint64_t v479 = *(void *)(v80 + v477);
                  uint64_t v480 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                  *(unsigned char *)(v479 + 744) = ausdk::AUElement::GetParameter(v480, 0) != 0.0;
                  uint64_t v481 = *(void *)(*((void *)this + 105) + v477);
                  v482 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                  *(unsigned char *)(v481 + 745) = ausdk::AUElement::GetParameter(v482, 0x13u) != 0.0;
                  uint64_t v483 = *(void *)(*((void *)this + 105) + v477);
                  v484 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                  BOOL v485 = ausdk::AUElement::GetParameter(v484, 1u) != 0.0;
                  (*(void (**)(void, BOOL))(**(void **)(v483 + 424) + 136))(*(void *)(v483 + 424), v485);
                  uint64_t v486 = *(void *)(*((void *)this + 105) + v477);
                  v487 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v478);
                  *(unsigned char *)(v486 + 264) = ausdk::AUElement::GetParameter(v487, 0x15u) != 0.0;
                  uint64_t v488 = *(void *)(*((void *)this + 105) + v477);
                  v489 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v478);
                  *(unsigned char *)(v488 + 265) = ausdk::AUElement::GetParameter(v489, 0x16u) != 0.0;
                  ++v478;
                  uint64_t v80 = *((void *)this + 105);
                  v477 += 16;
                }
                while (v478 < (*((void *)this + 106) - v80) >> 4);
              }
LABEL_555:
              uint64_t v490 = *((void *)this + 111);
              if (v490)
              {
                v491 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                *(unsigned char *)(v490 + 8) = ausdk::AUElement::GetParameter(v491, 0x12u) != 0.0;
              }
              double v492 = *((double *)this + 34);
              unint64_t v493 = *((void *)this + 35);
              if (*((unsigned char *)this + 1329))
              {
                clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                v494 = &qword_1E9F7FD18;
              }
              else
              {
                clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                v494 = &qword_1E9F7FD48;
              }
              double v495 = (double)v493 * 0.0000000416666667;
              double v496 = v495 - *(double *)v494;
              if (shouldTraceRender())
              {
                uint64_t v497 = spp3SubsystemAsync();
                if (v497)
                {
                  if (*(unsigned char *)(v497 + 8))
                  {
                    v498 = *(NSObject **)v497;
                    if (*(void *)v497)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v497, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)std::__fs::filesystem::path buf = 136316162;
                        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                        *(_WORD *)&unsigned char buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 4578;
                        *(_WORD *)&buf[18] = 1024;
                        *(_DWORD *)&buf[20] = (int)v492;
                        *(_WORD *)&buf[24] = 2048;
                        *(double *)&buf[26] = v496;
                        *(_WORD *)&buf[34] = 2048;
                        *(double *)&buf[36] = (double)v493 * 0.0000000416666667;
                        _os_log_impl(&dword_1BB0CE000, v498, OS_LOG_TYPE_DEBUG, "%25s:%-5d RenderTime %d, RenderTimeDelta %f, HostTime %f", buf, 0x2Cu);
                      }
                    }
                  }
                }
              }
              double v499 = *((double *)this + 78);
              if (*((unsigned char *)this + 1329))
              {
                clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                v500 = &qword_1E9F7FD18;
              }
              else
              {
                clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                v500 = &qword_1E9F7FD48;
              }
              *(double *)v500 = v495 + (double)__N / v499;
              if (*((unsigned char *)this + 1329))
              {
                if (*((unsigned char *)this + 532)
                  && (uint64_t v501 = *((void *)this + 106),
                      uint64_t v502 = *((void *)this + 105),
                      clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(),
                      (v501 - v502) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                          * ((qword_1E9F7FD00
                                            - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3)))
                {
                  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                  uint64_t v519 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                  if (v519 != qword_1E9F7FD00)
                  {
                    for (uint64_t i = v519 + 24; i != qword_1E9F7FD00; i += 24)
                    {
                      if ((float)(*(float *)(v519 + 12) + *(float *)(v519 + 8)) < (float)(*(float *)(i + 12)
                                                                                         + *(float *)(i + 8)))
                        uint64_t v519 = i;
                    }
                  }
                  Float64 v521 = (uint64_t *)*((void *)this + 105);
                  Float64 v522 = (uint64_t *)*((void *)this + 106);
                  if (v521 != v522)
                  {
                    float v523 = v496;
                    do
                    {
                      clsp::ThermalController::restoreThermalState(*v521 + 432, v519);
                      uint64_t v524 = *v521;
                      shouldTraceRender();
                      clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v524 + 432), v523);
                      v521 += 2;
                    }
                    while (v521 != v522);
                  }
                }
                else
                {
                  uint64_t v503 = *((void *)this + 105);
                  if (*((void *)this + 106) != v503)
                  {
                    uint64_t v504 = 0;
                    unint64_t v505 = 0;
                    float v506 = v496;
                    do
                    {
                      uint64_t v507 = *(void *)(v503 + v504);
                      uint64_t v508 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(v505);
                      clsp::ThermalController::restoreThermalState(v507 + 432, (uint64_t)v508);
                      uint64_t v509 = *(void *)(*((void *)this + 105) + v504);
                      shouldTraceRender();
                      clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v509 + 432), v506);
                      ++v505;
                      uint64_t v503 = *((void *)this + 105);
                      v504 += 16;
                    }
                    while (v505 < (*((void *)this + 106) - v503) >> 4);
                  }
                }
              }
              else if (*((unsigned char *)this + 532) {
                     && (uint64_t v510 = *((void *)this + 106),
              }
                         uint64_t v511 = *((void *)this + 105),
                         clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(),
                         (v510 - v511) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                             * ((qword_1E9F7FD30
                                               - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3)))
              {
                clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                uint64_t v525 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
                clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                if (v525 != qword_1E9F7FD30)
                {
                  for (uint64_t j = v525 + 24; j != qword_1E9F7FD30; j += 24)
                  {
                    if ((float)(*(float *)(v525 + 12) + *(float *)(v525 + 8)) < (float)(*(float *)(j + 12)
                                                                                       + *(float *)(j + 8)))
                      uint64_t v525 = j;
                  }
                }
                v527 = (uint64_t *)*((void *)this + 105);
                v528 = (uint64_t *)*((void *)this + 106);
                if (v527 != v528)
                {
                  float v529 = v496;
                  do
                  {
                    clsp::ThermalController::restoreThermalState(*v527 + 432, v525);
                    uint64_t v530 = *v527;
                    shouldTraceRender();
                    clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v530 + 432), v529);
                    v527 += 2;
                  }
                  while (v527 != v528);
                }
              }
              else
              {
                uint64_t v512 = *((void *)this + 105);
                if (*((void *)this + 106) != v512)
                {
                  uint64_t v513 = 0;
                  unint64_t v514 = 0;
                  float v515 = v496;
                  do
                  {
                    uint64_t v516 = *(void *)(v512 + v513);
                    v517 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(v514);
                    clsp::ThermalController::restoreThermalState(v516 + 432, (uint64_t)v517);
                    uint64_t v518 = *(void *)(*((void *)this + 105) + v513);
                    shouldTraceRender();
                    clsp::ThermalController::updateThermalState((clsp::ThermalController *)(v518 + 432), v515);
                    ++v514;
                    uint64_t v512 = *((void *)this + 105);
                    v513 += 16;
                  }
                  while (v514 < (*((void *)this + 106) - v512) >> 4);
                }
              }
              clsp::CLSPKernel_v5::ProcessByThermalBlock((const float ****)this + 105, (uint64_t ***)this + 108, (uint64_t *)this + 111, (uint64_t *)a5, (uint64_t *)a7, *((unsigned __int8 *)this + 532), __N);
              if (*((unsigned char *)this + 1329))
              {
                if (*((unsigned char *)this + 532)
                  && (uint64_t v531 = *((void *)this + 106),
                      uint64_t v532 = *((void *)this + 105),
                      clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(),
                      (v531 - v532) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                          * ((qword_1E9F7FD00
                                            - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3)))
                {
                  v634 = (float **)*((void *)this + 105);
                  v635 = (float **)*((void *)this + 106);
                  if (v634 != v635)
                  {
                    v636 = v634 + 2;
                    if (v634 + 2 != v635)
                    {
                      v637 = *v634;
                      v638 = v634 + 2;
                      do
                      {
                        v640 = *v638;
                        v638 += 2;
                        v639 = v640;
                        if ((float)(v637[110] + (float)(v637[146] + v637[151])) < (float)(v640[110]
                                                                                         + (float)(v640[146] + v640[151])))
                        {
                          v637 = v639;
                          v634 = v636;
                        }
                        v636 = v638;
                      }
                      while (v638 != v635);
                    }
                  }
                  for (unint64_t k = 0; ; ++k)
                  {
                    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                    if (k >= 0xAAAAAAAAAAAAAAABLL
                            * ((qword_1E9F7FD00 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3))
                      break;
                    v642 = *v634;
                    v643 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(k);
                    shouldTraceRender();
                    int v644 = *((_DWORD *)v642 + 146);
                    int v645 = *((_DWORD *)v642 + 151);
                    int v646 = *((_DWORD *)v642 + 166);
                    int v647 = *((_DWORD *)v642 + 139);
                    *((float *)v643 + 1) = v642[156];
                    *((_DWORD *)v643 + 2) = v644;
                    *((_DWORD *)v643 + 3) = v645;
                    *((_DWORD *)v643 + 4) = v646;
                    *((_DWORD *)v643 + 5) = v647;
                    char *v643 = 1;
                  }
                }
                else
                {
                  uint64_t v533 = *((void *)this + 105);
                  if (*((void *)this + 106) != v533)
                  {
                    uint64_t v534 = 0;
                    unint64_t v535 = 0;
                    do
                    {
                      UInt32 v536 = *(_DWORD **)(v533 + v534);
                      v537 = clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(v535);
                      shouldTraceRender();
                      int v538 = v536[146];
                      int v539 = v536[151];
                      int v540 = v536[166];
                      int v541 = v536[139];
                      *((_DWORD *)v537 + 1) = v536[156];
                      *((_DWORD *)v537 + 2) = v538;
                      *((_DWORD *)v537 + 3) = v539;
                      *((_DWORD *)v537 + 4) = v540;
                      *((_DWORD *)v537 + 5) = v541;
                      char *v537 = 1;
                      ++v535;
                      uint64_t v533 = *((void *)this + 105);
                      v534 += 16;
                    }
                    while (v535 < (*((void *)this + 106) - v533) >> 4);
                  }
                }
              }
              else if (*((unsigned char *)this + 532) {
                     && (uint64_t v542 = *((void *)this + 106),
              }
                         uint64_t v543 = *((void *)this + 105),
                         clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(),
                         (v542 - v543) >> 4 != 0xAAAAAAAAAAAAAAABLL
                                             * ((qword_1E9F7FD30
                                               - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3)))
              {
                v648 = (float **)*((void *)this + 105);
                v649 = (float **)*((void *)this + 106);
                if (v648 != v649)
                {
                  v650 = v648 + 2;
                  if (v648 + 2 != v649)
                  {
                    v651 = *v648;
                    v652 = v648 + 2;
                    do
                    {
                      v654 = *v652;
                      v652 += 2;
                      v653 = v654;
                      if ((float)(v651[110] + (float)(v651[146] + v651[151])) < (float)(v654[110]
                                                                                       + (float)(v654[146] + v654[151])))
                      {
                        v651 = v653;
                        v648 = v650;
                      }
                      v650 = v652;
                    }
                    while (v652 != v649);
                  }
                }
                for (unint64_t m = 0; ; ++m)
                {
                  clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                  if (m >= 0xAAAAAAAAAAAAAAABLL
                          * ((qword_1E9F7FD30 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3))
                    break;
                  v656 = *v648;
                  v657 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(m);
                  shouldTraceRender();
                  int v658 = *((_DWORD *)v656 + 146);
                  int v659 = *((_DWORD *)v656 + 151);
                  int v660 = *((_DWORD *)v656 + 166);
                  int v661 = *((_DWORD *)v656 + 139);
                  *((float *)v657 + 1) = v656[156];
                  *((_DWORD *)v657 + 2) = v658;
                  *((_DWORD *)v657 + 3) = v659;
                  *((_DWORD *)v657 + 4) = v660;
                  *((_DWORD *)v657 + 5) = v661;
                  char *v657 = 1;
                }
              }
              else
              {
                uint64_t v544 = *((void *)this + 105);
                if (*((void *)this + 106) != v544)
                {
                  uint64_t v545 = 0;
                  unint64_t v546 = 0;
                  do
                  {
                    AudioTimeStamp v547 = *(_DWORD **)(v544 + v545);
                    v548 = clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(v546);
                    shouldTraceRender();
                    int v549 = v547[146];
                    int v550 = v547[151];
                    int v551 = v547[166];
                    int v552 = v547[139];
                    *((_DWORD *)v548 + 1) = v547[156];
                    *((_DWORD *)v548 + 2) = v549;
                    *((_DWORD *)v548 + 3) = v550;
                    *((_DWORD *)v548 + 4) = v551;
                    *((_DWORD *)v548 + 5) = v552;
                    char *v548 = 1;
                    ++v546;
                    uint64_t v544 = *((void *)this + 105);
                    v545 += 16;
                  }
                  while (v546 < (*((void *)this + 106) - v544) >> 4);
                }
              }
              if (*((void *)this + 106) == *((void *)this + 105))
              {
                float v623 = 1.0;
                float v557 = 0.0;
                float v556 = 1.3333;
                float v555 = 0.0;
LABEL_664:
                v625 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                ausdk::AUElement::SetParameter(v625, 0xFu, v555, 0);
                v626 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                float v627 = log10f(v556);
                ausdk::AUElement::SetParameter(v626, 0xCu, v627 * 20.0, 0);
                v628 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                float v629 = log10f(v623);
                ausdk::AUElement::SetParameter(v628, 0x11u, v629 * 20.0, 0);
                v630 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                ausdk::AUElement::SetParameter(v630, 0xDu, v557, 0);
                a3 = __N;
                goto LABEL_665;
              }
              uint64_t v553 = 0;
              unint64_t v554 = 0;
              float v555 = 0.0;
              float v556 = 1.3333;
              float v557 = 0.0;
              while (2)
              {
                if (shouldTraceRender())
                {
                  v558 = (NSObject **)spp3SubsystemAsync();
                  if (v558)
                  {
                    v559 = *v558;
                    if (!*v558) {
                      goto LABEL_622;
                    }
                  }
                  else
                  {
                    v559 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled(v559, OS_LOG_TYPE_DEBUG))
                  {
                    float Temperature = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)(*(void *)(*v47 + v553) + 152));
                    uint64_t v561 = *(void *)(*v47 + v553);
                    float v562 = *(float *)(v561 + 584);
                    float v563 = *(float *)(v561 + 604);
                    float v564 = *(float *)(v561 + 440);
                    float v565 = *(float *)(v561 + 292);
                    DisplacementFilterGaiunint64_t n = clsp::CLSPKernel_v5::GetDisplacementFilterGain(*(clsp::CLSPKernel_v5 **)(v561 + 424));
                    v567 = *(float **)(*v47 + v553);
                    double v568 = v567[177];
                    double v569 = v567[166];
                    double v570 = v567[140];
                    double v571 = v567[89];
                    *(_DWORD *)std::__fs::filesystem::path buf = 136317698;
                    *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4461;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v554;
                    *(_WORD *)&buf[24] = 2048;
                    *(double *)&buf[26] = Temperature;
                    *(_WORD *)&buf[34] = 2048;
                    *(double *)&buf[36] = (float)(v564 + (float)(v562 + v563));
                    __int16 v675 = 2048;
                    double v676 = v565;
                    __int16 v677 = 2048;
                    double v678 = DisplacementFilterGain;
                    __int16 v679 = 2048;
                    double v680 = v568;
                    __int16 v681 = 2048;
                    double v682 = v569;
                    __int16 v683 = 2048;
                    double v684 = v570;
                    __int16 v685 = 2048;
                    double v686 = v571;
                    _os_log_impl(&dword_1BB0CE000, v559, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d; T_CL=%6.2f; T_OL=%6.2f; TlimAdj=%6.2f; DGain=%5.2f; TGain=%6.4f; tgtgain=%4.2f, h"
                      "limgain=%f, sReb=%f",
                      buf,
                      0x68u);
                  }
                }
LABEL_622:
                v572 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                float v573 = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)(*(void *)(*v47 + v553) + 152));
                ausdk::AUElement::SetParameter(v572, 7u, v573, 0);
                v574 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                ausdk::AUElement::SetParameter(v574, 8u, *(float *)(*(void *)(*v47 + v553) + 440)+ (float)(*(float *)(*(void *)(*v47 + v553) + 584) + *(float *)(*(void *)(*v47 + v553) + 604)), 0);
                v575 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                uint64_t v576 = *(void *)(*(void *)(*v47 + v553) + 256);
                if (v576) {
                  (*(void (**)(uint64_t))(*(void *)v576 + 72))(v576);
                }
                else {
                  float v577 = 0.0;
                }
                ausdk::AUElement::SetParameter(v575, 0x24u, v577, 0);
                v578 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                ausdk::AUElement::SetParameter(v578, 0x28u, *(float *)(*(void *)(*v47 + v553) + 1028), 0);
                v579 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                ausdk::AUElement::SetParameter(v579, 0x29u, *(float *)(*(void *)(*v47 + v553) + 1032), 0);
                v580 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                v581 = *(_DWORD **)(*(void *)(*v47 + v553) + 424);
                float v582 = -1.0;
                if (v581)
                {
                  int v583 = v581[2];
                  if (v583 == 4)
                  {
                    v584 = (float *)(v581 + 138);
LABEL_630:
                    float v582 = *v584;
                  }
                  else if (v583 == 1)
                  {
                    v584 = (float *)(v581 + 126);
                    goto LABEL_630;
                  }
                }
                ausdk::AUElement::SetParameter(v580, 0x2Bu, v582, 0);
                v585 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                v586 = *(float **)(*(void *)(*v47 + v553) + 424);
                float v587 = -1.0;
                if (v586)
                {
                  int v588 = *((_DWORD *)v586 + 2);
                  if (v588 == 4)
                  {
                    float v587 = v586[128];
                  }
                  else if (v588 == 1)
                  {
                    float v587 = v586[119];
                  }
                }
                ausdk::AUElement::SetParameter(v585, 0x2Cu, v587, 0);
                v589 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                uint64_t v590 = *(void *)(*(void *)(*v47 + v553) + 424);
                float v591 = -1.0;
                if (v590)
                {
                  int v592 = *(_DWORD *)(v590 + 8);
                  if (v592 == 4)
                  {
                    float v593 = *(float *)(v590 + 436);
                    float v594 = -*(float *)(v590 + 376);
                    float v595 = *(float *)(v590 + 380);
LABEL_641:
                    if (v595 <= v594) {
                      float v594 = v595;
                    }
                    float v591 = (float)(v593 / v594) * 100.0;
                  }
                  else if (v592 == 1)
                  {
                    float v593 = *(float *)(v590 + 412);
                    float v594 = -*(float *)(v590 + 380);
                    float v595 = *(float *)(v590 + 384);
                    goto LABEL_641;
                  }
                }
                ausdk::AUElement::SetParameter(v589, 0x2Du, v591, 0);
                v596 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                v597 = *(_DWORD **)(*(void *)(*v47 + v553) + 424);
                float v598 = -1.0;
                if (v597)
                {
                  int v599 = v597[2];
                  if (v599 == 4)
                  {
                    v600 = (float *)(v597 + 206);
LABEL_649:
                    float v598 = *v600;
                  }
                  else if (v599 == 1)
                  {
                    v600 = (float *)(v597 + 184);
                    goto LABEL_649;
                  }
                }
                ausdk::AUElement::SetParameter(v596, 0x2Eu, v598, 0);
                v601 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                float v602 = log10f(*(float *)(*(void *)(*((void *)this + 105) + v553) + 708));
                ausdk::AUElement::SetParameter(v601, 0x40u, v602 * 20.0, 0);
                v603 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                float v604 = log10f(*(float *)(*(void *)(*((void *)this + 105) + v553) + 740));
                ausdk::AUElement::SetParameter(v603, 0x42u, v604 * 20.0, 0);
                v605 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v554);
                float v606 = clsp::CLSPKernel_v5::GetDisplacementFilterGain(*(clsp::CLSPKernel_v5 **)(*(void *)(*((void *)this + 105) + v553)
                                                                                              + 424));
                ausdk::AUElement::SetParameter(v605, 0x41u, v606, 0);
                uint64_t v607 = *(void *)(*((void *)this + 105) + v553);
                float v608 = *(float *)(*(void *)(v607 + 784) + 16);
                v609 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                if (v609)
                {
                  *(float *)std::__fs::filesystem::path buf = (float)__N;
                  clsp::CLSP_Log::LogCLSPData(v609, (const float *)buf, 1);
                  v610 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  if (*((unsigned char *)this + 1329))
                  {
                    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                    v611 = &qword_1E9F7FD18;
                  }
                  else
                  {
                    clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                    v611 = &qword_1E9F7FD48;
                  }
                  float v612 = *(double *)v611;
                  *(float *)std::__fs::filesystem::path buf = v612;
                  clsp::CLSP_Log::LogCLSPData(v610, (const float *)buf, 1);
                  v613 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(float *)std::__fs::filesystem::path buf = *(float *)(*(void *)(*((void *)this + 105) + v553) + 440)
                                + (float)(*(float *)(*(void *)(*((void *)this + 105) + v553) + 584)
                                        + *(float *)(*(void *)(*((void *)this + 105) + v553) + 604));
                  clsp::CLSP_Log::LogCLSPData(v613, (const float *)buf, 1);
                  v614 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(_DWORD *)std::__fs::filesystem::path buf = *(_DWORD *)(*(void *)(*((void *)this + 105) + v553) + 96);
                  clsp::CLSP_Log::LogCLSPData(v614, (const float *)buf, 1);
                  v615 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(float *)std::__fs::filesystem::path buf = log10f(*(float *)(*(void *)(*((void *)this + 105) + v553) + 708)) * 20.0;
                  clsp::CLSP_Log::LogCLSPData(v615, (const float *)buf, 1);
                  v616 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(_DWORD *)std::__fs::filesystem::path buf = clsp::ClosedLoopThermalModule::getTemperature((clsp::ClosedLoopThermalModule *)(*(void *)(*((void *)this + 105) + v553) + 152));
                  clsp::CLSP_Log::LogCLSPData(v616, (const float *)buf, 1);
                  v617 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(_DWORD *)std::__fs::filesystem::path buf = *(_DWORD *)(*(void *)(*((void *)this + 105) + v553) + 232);
                  clsp::CLSP_Log::LogCLSPData(v617, (const float *)buf, 1);
                  v618 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(_DWORD *)std::__fs::filesystem::path buf = *(_DWORD *)(*(void *)(*((void *)this + 105) + v553) + 356);
                  clsp::CLSP_Log::LogCLSPData(v618, (const float *)buf, 1);
                  v619 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  *(_DWORD *)std::__fs::filesystem::path buf = *(_DWORD *)(*(void *)(*((void *)this + 105) + v553) + 292);
                  clsp::CLSP_Log::LogCLSPData(v619, (const float *)buf, 1);
                  v620 = *(clsp::CLSP_Log **)(*(void *)(*((void *)this + 142) + v553) + 96);
                  uint64_t v621 = *(void *)(*((void *)this + 105) + v553);
                  float v622 = *(float *)(v621 + 708);
                  if (*(float *)(v621 + 740) < v622) {
                    float v622 = *(float *)(v621 + 740);
                  }
                  *(float *)std::__fs::filesystem::path buf = log10f(v622) * 20.0;
                  clsp::CLSP_Log::LogCLSPData(v620, (const float *)buf, 1);
                  uint64_t v607 = *(void *)(*((void *)this + 105) + v553);
                }
                if (*(float *)(v607 + 708) < v556) {
                  float v556 = *(float *)(v607 + 708);
                }
                float v623 = *(float *)(v607 + 740);
                float v624 = clsp::CLSPKernel_v5::GetDisplacementFilterGain(*(clsp::CLSPKernel_v5 **)(v607 + 424));
                float v555 = v555 + v608;
                if (v624 < v557) {
                  float v557 = v624;
                }
                ++v554;
                v553 += 16;
                if (v554 >= (uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 4) {
                  goto LABEL_664;
                }
                continue;
              }
            }
LABEL_550:
            float v474 = 0.0;
            goto LABEL_551;
          }
        }
      }
      uint64_t v119 = v118 >> 4;
      if ((unint64_t)(v118 >> 4) <= 1) {
        uint64_t v119 = 1;
      }
      uint64_t v120 = v107;
      do
      {
        uint64_t v121 = *(void *)v120;
        v120 += 16;
        *(_WORD *)(v121 + 992) = 257;
        *(unsigned char *)(v121 + 994) = 1;
        --v119;
      }
      while (v119);
    }
    uint64_t v117 = v109;
    goto LABEL_120;
  }
  if (!*((_DWORD *)this + 295))
  {
    uint64_t v98 = _os_log_pack_size();
    uint64_t v99 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v98 + 88, 16);
    if (v99)
    {
      float v100 = (caulk::concurrent::message *)v99;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 170) + 16), v100);
    }
  }
  return 4294956428;
}

void AUSpeakerProtectionV3::AttenuateInputToOutput(AUSpeakerProtectionV3 *this, uint64_t a2, const AudioBufferList **a3, AudioBufferList **a4, float a5)
{
  float __B = 0.1;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  uint64_t v9 = (uint64_t)*a4;
  if ((*a4)->mNumberBuffers)
  {
    uint64_t v10 = Element;
    unint64_t v11 = 0;
    uint64_t v12 = 16;
    do
    {
      uint64_t v13 = *(float **)(v9 + v12);
      if ((*(_DWORD *)(v10 + 92) & 0x20) != 0) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = *(unsigned int *)(v10 + 108);
      }
      vDSP_vsmul(*(const float **)((char *)&(*a3)->mNumberBuffers + v12), 1, &__B, v13, 1, v14 * a2);
      ++v11;
      uint64_t v9 = (uint64_t)*a4;
      v12 += 16;
    }
    while (v11 < (*a4)->mNumberBuffers);
  }
}

void AUSpeakerProtectionV3::ApplyParameters(AUSpeakerProtectionV3 *this)
{
  uint64_t v342 = *MEMORY[0x1E4F143B8];
  shouldTraceRender();
  int v337 = *((_DWORD *)this + 159);
  if (shouldTraceRender())
  {
    uint64_t v2 = spp3SubsystemAsync();
    if (v2)
    {
      if (*(unsigned char *)(v2 + 8))
      {
        uint64_t v3 = *(NSObject **)v2;
        if (*(void *)v2)
        {
          if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
          {
            int v4 = *((_DWORD *)this + 160);
            *(_DWORD *)std::__fs::filesystem::path buf = 136315906;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2530;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v337;
            *(_WORD *)float v339 = 1024;
            *(_DWORD *)&v339[2] = v4;
            _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::ApplyParameters(): Params up to date. paramSeed=%d; mParamsUpdated=%d",
              buf,
              0x1Eu);
          }
        }
      }
    }
  }
  if (v337 != *((_DWORD *)this + 160))
  {
    uint64_t v5 = (uint64_t *)((char *)this + 840);
    uint64_t v6 = *((void *)this + 106);
    if (v6 != *((void *)this + 105))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
        int Parameter = ausdk::AUElement::GetParameter(Element, 0x14u);
        if (*((_DWORD *)this + 163) != Parameter)
        {
          unint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          ausdk::AUElement::GetParameter(v11, 0x21u);
          uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          ausdk::AUElement::GetParameter(v12, 0x22u);
          uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          ausdk::AUElement::GetParameter(v13, 0x23u);
          uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          ausdk::AUElement::GetParameter(v14, 0x20u);
          uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          float v16 = ausdk::AUElement::GetParameter(v15, 0x20u);
          uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          float v18 = ausdk::AUElement::GetParameter(v17, 0x19u);
          float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
          float v20 = ausdk::AUElement::GetParameter(v19, 9u);
          uint64_t v21 = *((unsigned int *)this + 84);
          *(void *)std::__fs::filesystem::path buf = 0x3FC70A3D80000000;
          *(double *)&uint8_t buf[8] = v16;
          *(double *)&uint8_t buf[16] = v18;
          *(double *)float v339 = v20;
          *(_OWORD *)&v339[8] = xmmword_1BB87BA90;
          *(_DWORD *)&v339[24] = 925353388;
          uint64_t v340 = v21;
          long long v341 = xmmword_1BB87BAA0;
          uint64_t v22 = (uint64_t)(*((void *)this + 88) - *((void *)this + 87)) >> 3;
          uint64_t v23 = *((void *)this + 105);
          if (v22 == (*((void *)this + 106) - v23) >> 4
            && v22 == (uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 3)
          {
            uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
            float v25 = ausdk::AUElement::GetParameter(v24, 0x18u);
            uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
            float v27 = ausdk::AUElement::GetParameter(v26, 0x20u);
            uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
            float v29 = ausdk::AUElement::GetParameter(v28, 0x19u);
            float v30 = **(float **)(*((void *)this + 87) + 8 * v8);
            uint64_t v31 = *(void *)(*((void *)this + 84) + 8 * v8);
            int v32 = *(_DWORD *)(v31 + 8);
            uint64_t v33 = *((unsigned int *)this + 84);
            uint64_t v34 = *(void *)(v31 + 20);
            uint64_t v35 = *(void *)(v31 + 40);
            unsigned int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v8);
            float v37 = ausdk::AUElement::GetParameter(v36, 0x23u);
            *(double *)std::__fs::filesystem::path buf = v25;
            *(double *)&uint8_t buf[8] = v27;
            *(double *)&uint8_t buf[16] = v29;
            *(double *)float v339 = v30;
            *(void *)&v339[8] = v34;
            *(_DWORD *)&v339[16] = v32;
            *(void *)&v339[20] = v35;
            uint64_t v340 = v33;
            *((double *)&v341 + 1) = v37;
            uint64_t v23 = *((void *)this + 105);
          }
          clsp::ClosedLoopThermalModule::setPilotGenType(*(void *)(v23 + v7) + 152, Parameter);
        }
        ++v8;
        uint64_t v38 = *((void *)this + 106);
        uint64_t v6 = *((void *)this + 105);
        v7 += 16;
      }
      while (v8 < (v38 - v6) >> 4);
      if (v38 != v6)
      {
        unint64_t v39 = 0;
        while (1)
        {
          uint64_t v40 = *(void *)(v6 + 16 * v39);
          unsigned int v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(float *)(v40 + 440) = ausdk::AUElement::GetParameter(v41, 4u);
          uint64_t v42 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(float *)(v42 + 456) = ausdk::AUElement::GetParameter(v43, 5u);
          uint64_t v44 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(double *)(v44 + 464) = ausdk::AUElement::GetParameter(v45, 6u);
          uint64_t v46 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(float *)(v46 + 472) = ausdk::AUElement::GetParameter(v47, 7u);
          uint64_t v48 = *(void *)(*((void *)this + 105) + 16 * v39);
          long long v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(double *)(v48 + 640) = ausdk::AUElement::GetParameter(v49, 2u);
          uint64_t v50 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          *(double *)(v50 + 632) = ausdk::AUElement::GetParameter(v51, 3u);
          uint64_t v52 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          float v54 = ausdk::AUElement::GetParameter(v53, 9u);
          (*(void (**)(void, double))(**(void **)(v52 + 424) + 80))(*(void *)(v52 + 424), v54);
          uint64_t v55 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          float v57 = ausdk::AUElement::GetParameter(v56, 0xAu);
          (*(void (**)(void, double))(**(void **)(v55 + 424) + 96))(*(void *)(v55 + 424), v57);
          uint64_t v58 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          float v60 = ausdk::AUElement::GetParameter(v59, 0xBu);
          (*(void (**)(void, double))(**(void **)(v58 + 424) + 112))(*(void *)(v58 + 424), v60);
          uint64_t v61 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          **(double **)(v61 + 776) = ausdk::AUElement::GetParameter(v62, 8u);
          uint64_t v63 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
          float v65 = ausdk::AUElement::GetParameter(v64, 0xEu);
          **(float **)(v63 + 784) = v65;
          **(float **)(v63 + 792) = v65;
          uint64_t v66 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(float *)(v66 + 432) = ausdk::AUElement::GetParameter(v67, 0);
          uint64_t v68 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(float *)(v68 + 436) = ausdk::AUElement::GetParameter(v69, 1u);
          uint64_t v70 = *(void *)(*((void *)this + 105) + 16 * v39);
          int v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v70 + 64) = ausdk::AUElement::GetParameter(v71, 0xAu);
          uint64_t v72 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v72 + 72) = ausdk::AUElement::GetParameter(v73, 0xBu);
          uint64_t v74 = *(void *)(*((void *)this + 105) + 16 * v39);
          unint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v74 + 128) = ausdk::AUElement::GetParameter(v75, 0xCu);
          uint64_t v76 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v76 + 136) = ausdk::AUElement::GetParameter(v77, 0xDu);
          uint64_t v78 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v78 + 144) = ausdk::AUElement::GetParameter(v79, 0xEu);
          uint64_t v80 = *(void *)(*((void *)this + 105) + 16 * v39);
          unint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v80 + 56) = ausdk::AUElement::GetParameter(v81, 0xFu);
          uint64_t v82 = *(void *)(*((void *)this + 105) + 16 * v39);
          unint64_t v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v84 = ausdk::AUElement::GetParameter(v83, 0x10u);
          (*(void (**)(void, double))(**(void **)(v82 + 424) + 32))(*(void *)(v82 + 424), v84);
          uint64_t v85 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v87 = ausdk::AUElement::GetParameter(v86, 0x11u);
          (*(void (**)(void, double))(**(void **)(v85 + 424) + 64))(*(void *)(v85 + 424), v87);
          uint64_t v88 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v88 + 120) = ausdk::AUElement::GetParameter(v89, 0x12u);
          uint64_t v90 = *(void *)(*((void *)this + 105) + 16 * v39);
          CFTypeID v91 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v92 = ausdk::AUElement::GetParameter(v91, 0x13u);
          (*(void (**)(void, double))(**(void **)(v90 + 424) + 48))(*(void *)(v90 + 424), v92);
          uint64_t v93 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          double v95 = ausdk::AUElement::GetParameter(v94, 2u);
          *(double *)(v93 + 488) = v95;
          *(double *)(v93 + 520) = v95;
          uint64_t v96 = *(void *)(*((void *)this + 105) + 16 * v39);
          unint64_t v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v96 + 504) = ausdk::AUElement::GetParameter(v97, 3u);
          uint64_t v98 = *(double **)(*((void *)this + 105) + 16 * v39);
          uint64_t v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          double v100 = ausdk::AUElement::GetParameter(v99, 4u);
          v98[62] = v100;
          v98[66] = v98[56] * v100;
          uint64_t v101 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v101 + 512) = ausdk::AUElement::GetParameter(v102, 5u);
          uint64_t v103 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v103 + 112) = ausdk::AUElement::GetParameter(v104, 9u);
          unsigned int v105 = *(double **)(*((void *)this + 105) + 16 * v39);
          double v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          double v107 = ausdk::AUElement::GetParameter(v106, 6u);
          v105[56] = v107;
          v105[66] = v105[62] * v107;
          uint64_t v108 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v109 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v108 + 160) = ausdk::AUElement::GetParameter(v109, 0x17u);
          uint64_t v110 = *(void *)(*((void *)this + 105) + 16 * v39);
          BOOL v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v110 + 152) = ausdk::AUElement::GetParameter(v111, 0x1Au);
          BOOL v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v113 = ausdk::AUElement::GetParameter(v112, 0x1Bu);
          BOOL v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v115 = ausdk::AUElement::GetParameter(v114, 0x1Cu);
          uint64_t v116 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v117 = __exp10(v113 / 20.0);
          *(float *)(v116 + 172) = v117;
          uint64_t v118 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v119 = __exp10(v115 / 20.0);
          *(float *)(v118 + 176) = v119;
          uint64_t v120 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v121 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(float *)(v120 + 180) = ausdk::AUElement::GetParameter(v121, 0x1Du);
          uint64_t v122 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v123 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(float *)(v122 + 184) = ausdk::AUElement::GetParameter(v123, 0x1Eu);
          uint64_t v124 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v125 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v124 + 192) = ausdk::AUElement::GetParameter(v125, 0x1Fu);
          uint64_t v126 = *(void *)(*((void *)this + 105) + 16 * v39);
          float v127 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v126 + 200) = ausdk::AUElement::GetParameter(v127, 0x43u);
          uint64_t v128 = *(void *)(*((void *)this + 105) + 16 * v39);
          uint64_t v129 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          *(double *)(v128 + 208) = ausdk::AUElement::GetParameter(v129, 0x44u);
          uint64_t v130 = *((unsigned int *)this + 84);
          int v131 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v132 = ausdk::AUElement::GetParameter(v131, 0x21u);
          float v133 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v134 = ausdk::AUElement::GetParameter(v133, 0x22u);
          float v135 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v136 = ausdk::AUElement::GetParameter(v135, 0x23u);
          float v137 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v138 = ausdk::AUElement::GetParameter(v137, 0x20u);
          *(_DWORD *)std::__fs::filesystem::path buf = 1;
          *(double *)&uint8_t buf[8] = v138;
          *(void *)&uint8_t buf[16] = 0x4059000000000000;
          *(void *)float v339 = v130;
          *(double *)&v339[8] = v132;
          *(double *)&v339[16] = v134;
          *(double *)&v339[24] = v136;
          uint64_t v139 = *((void *)this + 105);
          uint64_t v140 = *(void *)(*(void *)(v139 + 16 * v39) + 256);
          if (v140)
          {
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v140 + 64))(v140, buf);
            uint64_t v139 = *v5;
          }
          uint64_t v141 = (uint64_t)(*((void *)this + 88) - *((void *)this + 87)) >> 3;
          if (v141 == (*((void *)this + 106) - v139) >> 4
            && v141 == (uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 3)
          {
            uint64_t v142 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
            float v143 = ausdk::AUElement::GetParameter(v142, 0x18u);
            uint64_t v144 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
            float v145 = ausdk::AUElement::GetParameter(v144, 0x20u);
            uint64_t v146 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
            float v147 = ausdk::AUElement::GetParameter(v146, 0x19u);
            float v148 = **(float **)(*((void *)this + 87) + 8 * v39);
            uint64_t v149 = *(void *)(*((void *)this + 84) + 8 * v39);
            uint64_t v150 = *(void *)(v149 + 20);
            int v151 = *(_DWORD *)(v149 + 8);
            uint64_t v152 = *(void *)(v149 + 40);
            uint64_t v153 = *((unsigned int *)this + 84);
            uint64_t v154 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
            float v155 = ausdk::AUElement::GetParameter(v154, 0x23u);
            uint64_t v139 = *((void *)this + 105);
            uint64_t v156 = *(void *)(*(void *)(v139 + 16 * v39) + 248);
            if (v156)
            {
              *(double *)(v156 + 8) = v143;
              *(double *)(v156 + 16) = v145;
              *(double *)(v156 + 24) = v147;
              *(double *)(v156 + 32) = v148;
              *(void *)(v156 + 40) = v150;
              *(_DWORD *)(v156 + 48) = v151;
              *(void *)(v156 + 52) = v152;
              *(void *)(v156 + 64) = v153;
              *(void *)(v156 + 72) = 0x4059000000000000;
              *(double *)(v156 + 80) = v155;
              uint64_t v139 = *v5;
            }
          }
          uint64_t v157 = *(void *)(v139 + 16 * v39);
          uint64_t v158 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v159 = ausdk::AUElement::GetParameter(v158, 0x25u);
          uint64_t v160 = *(void *)(v157 + 368);
          if (v160) {
            *(double *)(v160 + 720) = v159;
          }
          uint64_t v161 = *(void *)(*v5 + 16 * v39);
          uint64_t v162 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v163 = ausdk::AUElement::GetParameter(v162, 0x26u);
          uint64_t v164 = *(void *)(v161 + 368);
          if (v164)
          {
            uint64_t v165 = *(unsigned int *)(v164 + 200);
            if (8 * v165 + 8 >= 1)
            {
              double v166 = v163;
              uint64_t v167 = (double *)(v164 + 728);
              unint64_t v168 = v165 + 2;
              do
              {
                *v167++ = v166;
                --v168;
              }
              while (v168 > 1);
            }
          }
          uint64_t v169 = *(void *)(*v5 + 16 * v39);
          vDSP_Length v170 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v171 = ausdk::AUElement::GetParameter(v170, 0x27u);
          uint64_t v172 = *(unsigned int **)(v169 + 368);
          if (v172)
          {
            double v173 = v171;
            uint64_t v174 = v172[51];
            if (8 * v174 + 8 >= 1)
            {
              unint64_t v175 = (double *)(v172 + 192);
              unint64_t v176 = v174 + 2;
              do
              {
                *v175++ = v173;
                --v176;
              }
              while (v176 > 1);
            }
            uint64_t v177 = v172[52];
            if (8 * v177 + 8 >= 1)
            {
              int v178 = (double *)(v172 + 202);
              unint64_t v179 = v177 + 2;
              do
              {
                *v178++ = v173;
                --v179;
              }
              while (v179 > 1);
            }
            uint64_t v180 = v172[53];
            if (8 * v180 + 8 >= 1)
            {
              int v181 = (double *)(v172 + 212);
              unint64_t v182 = v180 + 2;
              do
              {
                *v181++ = v173;
                --v182;
              }
              while (v182 > 1);
            }
          }
          uint64_t v183 = *(void *)(*v5 + 16 * v39);
          size_t v184 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v185 = ausdk::AUElement::GetParameter(v184, 0x2Fu);
          uint64_t v186 = *(void *)(v183 + 424);
          if (v186)
          {
            int v187 = *(_DWORD *)(v186 + 8);
            if (v187 == 4)
            {
              uint64_t v188 = (float *)(v186 + 384);
            }
            else
            {
              if (v187 != 1) {
                goto LABEL_46;
              }
              uint64_t v188 = (float *)(v186 + 352);
            }
            float *v188 = v185;
          }
LABEL_46:
          uint64_t v189 = *(void *)(*v5 + 16 * v39);
          uint64_t v190 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v191 = ausdk::AUElement::GetParameter(v190, 0x30u);
          uint64_t v192 = *(void *)(v189 + 424);
          if (!v192) {
            goto LABEL_52;
          }
          int v193 = *(_DWORD *)(v192 + 8);
          if (v193 == 4)
          {
            int v194 = (float *)(v192 + 388);
          }
          else
          {
            if (v193 != 1) {
              goto LABEL_52;
            }
            int v194 = (float *)(v192 + 356);
          }
          float *v194 = v191;
LABEL_52:
          uint64_t v195 = *(void *)(*v5 + 16 * v39);
          float v196 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v197 = ausdk::AUElement::GetParameter(v196, 0x31u);
          uint64_t v198 = *(void *)(v195 + 424);
          if (v198)
          {
            int v199 = *(_DWORD *)(v198 + 8);
            if (v199 == 4)
            {
              double v201 = v197;
              *(double *)(v198 + 712) = v201;
              *(double *)(v198 + 752) = v201;
            }
            else if (v199 == 1)
            {
              double v200 = v197;
              *(double *)(v198 + 624) = v200;
              *(double *)(v198 + 664) = v200;
            }
          }
          uint64_t v202 = *(void *)(*v5 + 16 * v39);
          uint64_t v203 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v204 = ausdk::AUElement::GetParameter(v203, 0x32u);
          uint64_t v205 = *(void *)(v202 + 424);
          if (v205)
          {
            int v206 = *(_DWORD *)(v205 + 8);
            if (v206 == 4)
            {
              double v208 = v204;
              *(double *)(v205 + 720) = v208;
              *(double *)(v205 + 760) = v208;
            }
            else if (v206 == 1)
            {
              double v207 = v204;
              *(double *)(v205 + 632) = v207;
              *(double *)(v205 + 672) = v207;
            }
          }
          uint64_t v209 = *(void *)(*v5 + 16 * v39);
          float v210 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v211 = ausdk::AUElement::GetParameter(v210, 0x33u);
          uint64_t v212 = *(void *)(v209 + 424);
          if (v212)
          {
            int v213 = *(_DWORD *)(v212 + 8);
            if (v213 == 4)
            {
              float v214 = (float *)(v212 + 484);
            }
            else
            {
              if (v213 != 1) {
                goto LABEL_68;
              }
              float v214 = (float *)(v212 + 460);
            }
            float *v214 = v211;
          }
LABEL_68:
          uint64_t v215 = *(void *)(*v5 + 16 * v39);
          float v216 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v217 = ausdk::AUElement::GetParameter(v216, 0x34u);
          uint64_t v218 = *(void *)(v215 + 424);
          if (!v218) {
            goto LABEL_74;
          }
          int v219 = *(_DWORD *)(v218 + 8);
          if (v219 == 4)
          {
            uint64_t v220 = (float *)(v218 + 488);
          }
          else
          {
            if (v219 != 1) {
              goto LABEL_74;
            }
            uint64_t v220 = (float *)(v218 + 464);
          }
          *uint64_t v220 = v217;
LABEL_74:
          uint64_t v221 = *(void *)(*v5 + 16 * v39);
          std::string v222 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v223 = ausdk::AUElement::GetParameter(v222, 0x35u);
          uint64_t v224 = *(void *)(v221 + 424);
          if (v224)
          {
            int v225 = *(_DWORD *)(v224 + 8);
            if (v225 == 4)
            {
              *(double *)(v224 + 792) = v223;
            }
            else if (v225 == 1)
            {
              *(double *)(v224 + 704) = v223;
            }
          }
          uint64_t v226 = *(void *)(*v5 + 16 * v39);
          double v227 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v228 = ausdk::AUElement::GetParameter(v227, 0x36u);
          uint64_t v229 = *(void *)(v226 + 424);
          if (v229)
          {
            int v230 = *(_DWORD *)(v229 + 8);
            if (v230 == 4)
            {
              *(double *)(v229 + 800) = v228;
            }
            else if (v230 == 1)
            {
              *(double *)(v229 + 712) = v228;
            }
          }
          uint64_t v231 = *(void *)(*v5 + 16 * v39);
          char v232 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v233 = ausdk::AUElement::GetParameter(v232, 0x37u);
          uint64_t v234 = *(void *)(v231 + 424);
          if (v234)
          {
            int v235 = *(_DWORD *)(v234 + 8);
            if (v235 == 4)
            {
              float v236 = (float *)(v234 + 492);
            }
            else
            {
              if (v235 != 1) {
                goto LABEL_90;
              }
              float v236 = (float *)(v234 + 468);
            }
            *float v236 = v233;
          }
LABEL_90:
          uint64_t v237 = *(void *)(*v5 + 16 * v39);
          float v238 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v239 = ausdk::AUElement::GetParameter(v238, 0x38u);
          uint64_t v240 = *(void *)(v237 + 424);
          if (!v240) {
            goto LABEL_96;
          }
          int v241 = *(_DWORD *)(v240 + 8);
          if (v241 == 4)
          {
            float v242 = (float *)(v240 + 496);
          }
          else
          {
            if (v241 != 1) {
              goto LABEL_96;
            }
            float v242 = (float *)(v240 + 472);
          }
          *float v242 = v239;
LABEL_96:
          uint64_t v243 = *(void *)(*v5 + 16 * v39);
          float v244 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v245 = ausdk::AUElement::GetParameter(v244, 0x39u);
          uint64_t v246 = *(void *)(v243 + 424);
          if (v246)
          {
            int v247 = *(_DWORD *)(v246 + 8);
            if (v247 == 4)
            {
              *(float *)(v246 + 376) = v245;
            }
            else if (v247 == 1)
            {
              *(float *)(v246 + 380) = v245;
            }
          }
          uint64_t v248 = *(void *)(*v5 + 16 * v39);
          uint64_t v249 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v250 = ausdk::AUElement::GetParameter(v249, 0x3Au);
          uint64_t v251 = *(void *)(v248 + 424);
          if (v251)
          {
            int v252 = *(_DWORD *)(v251 + 8);
            if (v252 == 4)
            {
              *(float *)(v251 + 380) = v250;
            }
            else if (v252 == 1)
            {
              *(float *)(v251 + 384) = v250;
            }
          }
          uint64_t v253 = *(void *)(*v5 + 16 * v39);
          float32x2_t v254 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v255 = ausdk::AUElement::GetParameter(v254, 0x3Bu);
          uint64_t v256 = *(void *)(v253 + 424);
          if (v256)
          {
            int v257 = *(_DWORD *)(v256 + 8);
            if (v257 == 4)
            {
              float v258 = (float *)(v256 + 412);
            }
            else
            {
              if (v257 != 1) {
                goto LABEL_112;
              }
              float v258 = (float *)(v256 + 388);
            }
            float *v258 = v255;
          }
LABEL_112:
          uint64_t v259 = *(void *)(*v5 + 16 * v39);
          float v260 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v261 = ausdk::AUElement::GetParameter(v260, 0x3Cu);
          uint64_t v262 = *(void *)(v259 + 424);
          if (!v262) {
            goto LABEL_118;
          }
          int v263 = *(_DWORD *)(v262 + 8);
          if (v263 == 4)
          {
            std::string v264 = (float *)(v262 + 420);
          }
          else
          {
            if (v263 != 1) {
              goto LABEL_118;
            }
            std::string v264 = (float *)(v262 + 396);
          }
          float *v264 = v261;
LABEL_118:
          uint64_t v265 = *(void *)(*v5 + 16 * v39);
          int64_t v266 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v267 = ausdk::AUElement::GetParameter(v266, 0x3Du);
          uint64_t v268 = *(void *)(v265 + 424);
          if (!v268) {
            goto LABEL_124;
          }
          int v269 = *(_DWORD *)(v268 + 8);
          if (v269 == 4)
          {
            long long v270 = (float *)(v268 + 528);
          }
          else
          {
            if (v269 != 1) {
              goto LABEL_124;
            }
            long long v270 = (float *)(v268 + 480);
          }
          float *v270 = v267;
LABEL_124:
          uint64_t v271 = *(void *)(*v5 + 16 * v39);
          unint64_t v272 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v273 = ausdk::AUElement::GetParameter(v272, 0x3Eu);
          uint64_t v274 = *(void *)(v271 + 424);
          if (!v274) {
            goto LABEL_130;
          }
          int v275 = *(_DWORD *)(v274 + 8);
          if (v275 == 4)
          {
            float v276 = (float *)(v274 + 536);
          }
          else
          {
            if (v275 != 1) {
              goto LABEL_130;
            }
            float v276 = (float *)(v274 + 488);
          }
          float *v276 = v273;
LABEL_130:
          uint64_t v277 = *(void *)(*v5 + 16 * v39);
          float v278 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v39);
          float v279 = ausdk::AUElement::GetParameter(v278, 0x3Fu);
          uint64_t v280 = *(void *)(v277 + 424);
          if (v280)
          {
            int v281 = *(_DWORD *)(v280 + 8);
            if (v281 == 4)
            {
              char v282 = (float *)(v280 + 540);
              goto LABEL_135;
            }
            if (v281 == 1)
            {
              char v282 = (float *)(v280 + 492);
LABEL_135:
              *char v282 = v279;
            }
          }
          ++v39;
          uint64_t v283 = *((void *)this + 106);
          uint64_t v6 = *((void *)this + 105);
          if (v39 >= (v283 - v6) >> 4) {
            goto LABEL_139;
          }
        }
      }
    }
    uint64_t v283 = v6;
LABEL_139:
    if (*((unsigned char *)this + 533) && *((unsigned char *)this + 529) && v283 != v6)
    {
      uint64_t v284 = 0;
      unint64_t v285 = 0;
      int v286 = 981668463;
      while (2)
      {
        float v287 = *(float *)&v286;
        float v288 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v285);
        unsigned int v289 = ausdk::AUElement::GetParameter(v288, 0x2Au);
        uint64_t v290 = *(void *)(*((void *)this + 105) + v284);
        uint64_t v291 = *((void *)this + 84);
        float v292 = v287;
        switch(v289)
        {
          case 1u:
          case 4u:
            goto LABEL_144;
          case 2u:
            uint64_t v307 = *(void *)(v291 + 8 * v285);
            if (v307 && *(void *)(v307 + 48))
            {
              std::allocate_shared[abi:ne180100]<clsp::ParameterUpdater,std::allocator<clsp::ParameterUpdater>,CACFDictionary &,void>((CFTypeRef **)buf, *(void *)(v307 + 56));
              uint64_t v308 = *(std::__shared_weak_count **)(v290 + 376);
              *(_OWORD *)(v290 + 368) = *(_OWORD *)buf;
              if (v308) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v308);
              }
            }
            else
            {
              double v314 = (NSObject **)spp3Subsystem();
              if (v314)
              {
                double v315 = *v314;
                float v292 = v287;
                if (!*v314) {
                  goto LABEL_144;
                }
              }
              else
              {
                double v315 = MEMORY[0x1E4F14500];
                float v292 = v287;
              }
              if (os_log_type_enabled(v315, OS_LOG_TYPE_ERROR))
              {
                int v331 = *(_DWORD *)(v290 + 16);
                *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
                *(void *)&uint8_t buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 461;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v331;
                _os_log_impl(&dword_1BB0CE000, v315, OS_LOG_TYPE_ERROR, "%25s:%-5d Ch %d, ConvoyAdaptiveDisplacement requested but configuration missing, defaulting to Open Loop", buf, 0x18u);
              }
            }
LABEL_144:
            uint64_t v293 = *(void *)(v290 + 48);
            if (!v293 || (unsigned int v294 = *(float **)(v293 + 40)) == 0)
            {
              v305 = (NSObject **)spp3Subsystem();
              if (v305)
              {
                unint64_t v306 = *v305;
                if (!*v305) {
                  goto LABEL_191;
                }
              }
              else
              {
                unint64_t v306 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v306, OS_LOG_TYPE_ERROR))
              {
                int v311 = *(_DWORD *)(v290 + 16);
                *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
                *(void *)&uint8_t buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 489;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v311;
                double v312 = v306;
                double v313 = "%25s:%-5d Ch %d, Convoy calibration parameters not present";
                goto LABEL_189;
              }
              goto LABEL_191;
            }
            float v295 = v294[3];
            BOOL v296 = v295 < v292 || v295 > 1000.0;
            if (v296
              || ((float v297 = v294[2], v297 >= v292) ? (v298 = v297 > 1000.0) : (v298 = 1),
                  v298
               || ((float v299 = v294[1], v299 >= v292) ? (v300 = v299 > 1000.0) : (v300 = 1),
                   !v300 ? (BOOL v301 = v299 < v297) : (BOOL v301 = 0),
                   v301 ? (BOOL v302 = v297 < v295) : (BOOL v302 = 0),
                   !v302)))
            {
              float v303 = (NSObject **)spp3Subsystem();
              if (v303)
              {
                float v304 = *v303;
                if (!*v303) {
                  goto LABEL_191;
                }
              }
              else
              {
                float v304 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
              {
                int v316 = *(_DWORD *)(v290 + 16);
                double v317 = *(float **)(*(void *)(v290 + 48) + 40);
                double v318 = v317[3];
                double v319 = v317[2];
                double v320 = v317[1];
                *(_DWORD *)std::__fs::filesystem::path buf = 136316418;
                *(void *)&uint8_t buf[4] = "CLSPKernel_v5.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 485;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v316;
                *(_WORD *)float v339 = 2048;
                *(double *)&v339[2] = v318;
                *(_WORD *)&v339[10] = 2048;
                *(double *)&v339[12] = v319;
                *(_WORD *)&v339[20] = 2048;
                *(double *)&v339[22] = v320;
                double v312 = v304;
                double v313 = "%25s:%-5d Ch %d, Convoy calibration parameters out of range or not Coff < CMin < CMax. Defaulting"
                       " to Open loop displacement. CMax=%f, CMin=%f, Coff=%f";
                uint32_t v321 = 54;
                goto LABEL_190;
              }
              goto LABEL_191;
            }
            uint64_t v332 = (NSObject **)spp3Subsystem();
            if (v332)
            {
              uint64_t v333 = *v332;
              if (!*v332) {
                goto LABEL_192;
              }
            }
            else
            {
              uint64_t v333 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v333, OS_LOG_TYPE_DEBUG))
            {
              int v334 = *(_DWORD *)(v290 + 16);
              *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
              *(void *)&uint8_t buf[4] = "CLSPKernel_v5.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 482;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v334;
              _os_log_impl(&dword_1BB0CE000, v333, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Convoy calibration parameters within range", buf, 0x18u);
            }
            goto LABEL_192;
          case 3u:
            v309 = (NSObject **)spp3Subsystem();
            if (v309)
            {
              unint64_t v310 = *v309;
              if (!*v309) {
                goto LABEL_191;
              }
            }
            else
            {
              unint64_t v310 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v310, OS_LOG_TYPE_ERROR))
            {
              int v322 = *(_DWORD *)(v290 + 16);
              *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
              *(void *)&uint8_t buf[4] = "CLSPKernel_v5.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 467;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v322;
              double v312 = v310;
              double v313 = "%25s:%-5d Ch %d, IV only AdaptiveDisplacement not supported, defaulting to Open Loop";
LABEL_189:
              uint32_t v321 = 24;
LABEL_190:
              _os_log_impl(&dword_1BB0CE000, v312, OS_LOG_TYPE_ERROR, v313, buf, v321);
            }
LABEL_191:
            unsigned int v289 = 0;
LABEL_192:
            int v286 = LODWORD(v287);
            if (v289 != *(_DWORD *)(v290 + 1024))
            {
              (*(void (**)(void, float))(**(void **)(v290 + 424) + 40))(*(void *)(v290 + 424), v287);
              double v323 = (void *)(v290 + 424);
              (*(void (**)(void))(**(void **)(v290 + 424) + 56))(*(void *)(v290 + 424));
              (*(void (**)(void, uint64_t))(*(void *)*v323 + 72))(*v323, v324);
              (*(void (**)(void, uint64_t))(*(void *)*v323 + 88))(*v323, v325);
              (*(void (**)(void, uint64_t))(*(void *)*v323 + 104))(*v323, v326);
              (*(void (**)(void, uint64_t))(*(void *)*v323 + 120))(*v323, v327);
              if (v289 == 4)
              {
                uint64_t v329 = *(void *)(v291 + 8 * v285);
                if (v329)
                {
                  if (*(void *)(v329 + 48))
                  {
                    uint64_t v330 = *(void *)(v290 + 48);
                    if (v330)
                    {
                      if (*(void *)(v330 + 40)) {
                        operator new();
                      }
                    }
                  }
                }
              }
              else if (v289 == 1)
              {
                uint64_t v328 = *(void *)(v291 + 8 * v285);
                if (v328)
                {
                  if (*(void *)(v328 + 48)) {
                    operator new();
                  }
                }
              }
              operator new();
            }
            ++v285;
            v284 += 16;
            if (v285 >= (uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 4) {
              break;
            }
            continue;
          default:
            goto LABEL_192;
        }
        break;
      }
    }
    clsp::CLSPKernel_v5::CalcCoeffs((uint64_t **)this + 105, *((unsigned char *)this + 532), *((double *)this + 78));
    uint64_t v335 = (clsp::CLSPKernel_v5 **)*((void *)this + 105);
    uint64_t v336 = (clsp::CLSPKernel_v5 **)*((void *)this + 106);
    while (v335 != v336)
    {
      clsp::CLSPKernel_v5::Reset(*v335);
      v335 += 2;
    }
    *((_DWORD *)this + 160) = v337;
    shouldTraceRender();
  }
}

void sub_1BB6488E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::exception a26)
{
}

void sub_1BB6488F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BB648908(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40F98757C4);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::ClosedLoopInputsOK(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, const AudioBufferList **a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a3 >= 2)
  {
    uint64_t v6 = a4[1];
    if (v6)
    {
      uint64_t v9 = *((void *)this + 15);
      if (v9) {
        LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      }
      else {
        uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
      }
      if (v10 <= 1)
      {
        if (!*((_DWORD *)this + 295))
        {
          uint64_t v14 = _os_log_pack_size();
          uint64_t result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v14 + 88, 16);
          if (!result) {
            return result;
          }
          uint64_t v15 = result;
          *(_WORD *)_os_log_pack_fill() = 0;
          float v16 = *(caulk::concurrent::messenger **)(*((void *)this + 170) + 16);
          uint64_t v17 = (caulk::concurrent::message *)v15;
          goto LABEL_55;
        }
        return 0;
      }
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
      long long v19 = *(_OWORD *)(Element + 96);
      *(_OWORD *)std::__fs::filesystem::path buf = *(_OWORD *)(Element + 80);
      *(_OWORD *)&uint8_t buf[16] = v19;
      *(void *)&uint8_t buf[32] = *(void *)(Element + 112);
      LODWORD(v47[0]) = 0;
      if (CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)v47, 0) && LODWORD(v47[0]) == 2
        || (LODWORD(v47[0]) = 0, CAStreamBasicDescription::IdentifyCommonPCMFormat(buf, (int *)v47, 0))
        && LODWORD(v47[0]) == 1)
      {
        uint64_t v20 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 80), 1u);
        long long v21 = *(_OWORD *)(v20 + 96);
        v47[0] = *(_OWORD *)(v20 + 80);
        v47[1] = v21;
        uint64_t v48 = *(void *)(v20 + 112);
        uint64_t v22 = (*((void *)this + 92) - *((void *)this + 91)) >> 3;
        uint64_t v23 = a4[1];
        char v24 = BYTE12(v47[0]);
        if ((BYTE12(v47[0]) & 0x20) != 0) {
          uint64_t v25 = v22;
        }
        else {
          uint64_t v25 = 1;
        }
        int v49 = 0;
        if (!CAStreamBasicDescription::IdentifyCommonPCMFormat(v47, &v49, 0) || (int v26 = v49, v49 != 2))
        {
          int v49 = 0;
          unsigned __int8 v27 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v47, &v49, 0);
          if ((v27 & (v49 == 1)) != 0) {
            int v26 = 4;
          }
          else {
            int v26 = 0;
          }
        }
        if (v23->mNumberBuffers >= v25)
        {
          int v28 = (v24 & 0x20) != 0 ? 1 : v22;
          if (!v25) {
            return 1;
          }
          unsigned int v29 = v28 * v26 * a2;
          uint64_t v30 = 16 * v25 - 16;
          p_UInt32 mDataByteSize = &v23->mBuffers[0].mDataByteSize;
          do
          {
            unsigned int v33 = *p_mDataByteSize;
            p_mDataByteSize += 4;
            unsigned int v32 = v33;
            BOOL v34 = v33 < v29 || v30 == 0;
            v30 -= 16;
          }
          while (!v34);
          if (v32 >= v29) {
            return 1;
          }
        }
        for (unsigned int i = 0; ; ++i)
        {
          uint64_t v36 = *((void *)this + 104);
          if (v36) {
            LODWORD(v37) = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 24))(v36);
          }
          else {
            uint64_t v37 = (*((void *)this + 102) - *((void *)this + 101)) >> 3;
          }
          if (i >= v37) {
            break;
          }
          uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), i);
          ausdk::AUElement::SetParameter(v38, 0x16u, 0.0, 0);
        }
        if (*((_DWORD *)this + 295)) {
          return 0;
        }
        uint64_t v39 = _os_log_pack_size();
        uint64_t result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v39 + 88, 16);
        if (!result) {
          return result;
        }
        uint64_t v40 = result;
        unsigned int v41 = (char *)this + 1360;
        uint64_t v42 = _os_log_pack_fill();
        UInt32 mNumberBuffers = v6->mNumberBuffers;
        UInt32 mNumberChannels = v6->mBuffers[0].mNumberChannels;
        UInt32 mDataByteSize = v6->mBuffers[0].mDataByteSize;
        *(_DWORD *)uint64_t v42 = 67109888;
        *(_DWORD *)(v42 + 4) = mNumberBuffers;
        *(_WORD *)(v42 + 8) = 1024;
        *(_DWORD *)(v42 + 10) = mNumberChannels;
        *(_WORD *)(v42 + 14) = 1024;
        *(_DWORD *)(v42 + 16) = mDataByteSize;
        *(_WORD *)(v42 + 20) = 1024;
        *(_DWORD *)(v42 + 22) = a2;
      }
      else
      {
        if (*((_DWORD *)this + 295)) {
          return 0;
        }
        uint64_t v46 = _os_log_pack_size();
        uint64_t result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 170), v46 + 88, 16);
        if (!result) {
          return result;
        }
        uint64_t v40 = result;
        unsigned int v41 = (char *)this + 1360;
        *(_WORD *)_os_log_pack_fill() = 0;
      }
      float v16 = *(caulk::concurrent::messenger **)(*(void *)v41 + 16);
      uint64_t v17 = (caulk::concurrent::message *)v40;
LABEL_55:
      caulk::concurrent::messenger::enqueue(v16, v17);
      return 0;
    }
  }
  uint64_t result = shouldTraceRender();
  if (result)
  {
    uint64_t result = spp3SubsystemAsync();
    if (result)
    {
      if (*(unsigned char *)(result + 8))
      {
        uint64_t v12 = *(NSObject **)result;
        if (*(void *)result)
        {
          uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          if (a3 < 2) {
            uint64_t v13 = 0;
          }
          else {
            uint64_t v13 = a4[1];
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315906;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4205;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          *(_WORD *)&unsigned char buf[24] = 2048;
          *(void *)&buf[26] = v13;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d No Closed Loop inputs: numberInputBufferLists=%u, inputBufferList[1]=%p", buf, 0x22u);
        }
      }
      return 0;
    }
  }
  return result;
}

void AUSpeakerProtectionV3::ParseSpeakerTelemetryBuffer(AUSpeakerProtectionV3 *this, const telemetry::Item *a2, unsigned int a3, uint64_t a4, vDSP_Stride __IA, uint64_t a6, vDSP_Length a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 2:
      uint64_t v12 = *(void *)(*((void *)this + 105) + 16 * a3);
      *(unsigned char *)(v12 + 994) = 1;
      uint64_t v13 = *(void *)(v12 + 40);
      if (v13 && (v14 = *(float **)(v13 + 48)) != 0 && (uint64_t v15 = *(void *)(v12 + 48)) != 0 && *(void *)(v15 + 40))
      {
        float __B = *v14;
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v12 + 896), 1, a7);
        float __C = 0.0;
        vDSP_minv(*(const float **)(v12 + 896), 1, &__C, a7);
        float v29 = 0.0;
        vDSP_maxv(*(const float **)(v12 + 896), 1, &v29, a7);
        float v16 = *(clsp::CLSP_Log **)(*(void *)(v12 + 1080) + 160);
        if (v16) {
          clsp::CLSP_Log::LogCLSPData(v16, *(const float **)(v12 + 896), a7);
        }
        uint64_t v17 = *(void *)(*(void *)(v12 + 48) + 40);
        float v18 = *(float *)(v17 + 4);
        BOOL v19 = __C > v18;
        BOOL v20 = __C <= v18 || *(float *)(v17 + 12) * 1.2 <= v29;
        *(unsigned char *)(v12 + 994) = v20;
        *(unsigned char *)(v12 + 995) = v19;
      }
      else if (shouldTraceRender())
      {
        uint64_t v23 = spp3SubsystemAsync();
        if (v23)
        {
          if (*(unsigned char *)(v23 + 8))
          {
            char v24 = *(NSObject **)v23;
            if (*(void *)v23)
            {
              if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v25 = *(void *)(v12 + 40);
                if (v25) {
                  uint64_t v26 = *(void *)(v25 + 48);
                }
                else {
                  uint64_t v26 = 0;
                }
                uint64_t v27 = *(void *)(v12 + 48);
                if (v27) {
                  uint64_t v28 = *(void *)(v27 + 40);
                }
                else {
                  uint64_t v28 = 0;
                }
                float __B = 4.8155e-34;
                unsigned int v32 = "CLSPKernel_v5.cpp";
                __int16 v33 = 1024;
                int v34 = 1577;
                __int16 v35 = 2048;
                uint64_t v36 = v25;
                __int16 v37 = 2048;
                uint64_t v38 = v26;
                __int16 v39 = 2048;
                uint64_t v40 = v27;
                __int16 v41 = 2048;
                uint64_t v42 = v28;
                _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d System not configured properly for Convoy input stream, clParams=%p, convoyParams=%p, cal=%p, ConvoyCal=%p", (uint8_t *)&__B, 0x3Au);
              }
            }
          }
        }
      }
      break;
    case 1:
      uint64_t v21 = *(void *)(*((void *)this + 105) + 16 * a3);
      *(unsigned char *)(v21 + 993) = 1;
      uint64_t v22 = *(void *)(v21 + 40);
      if (v22)
      {
        float __B = *(float *)(v22 + 4);
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v21 + 872), 1, a7);
        *(unsigned char *)(v21 + 993) = 0;
        uint64_t v10 = *(clsp::CLSP_Log **)(*(void *)(v21 + 1080) + 112);
        if (v10)
        {
          unint64_t v11 = *(const float **)(v21 + 872);
          goto LABEL_19;
        }
      }
      break;
    case 0:
      uint64_t v8 = *(void *)(*((void *)this + 105) + 16 * a3);
      *(unsigned char *)(v8 + 992) = 1;
      uint64_t v9 = *(float **)(v8 + 40);
      if (v9)
      {
        float __B = *v9;
        vDSP_vsmul((const float *)(a6 + 4 * a4), __IA, &__B, *(float **)(v8 + 848), 1, a7);
        *(unsigned char *)(v8 + 992) = 0;
        uint64_t v10 = *(clsp::CLSP_Log **)(*(void *)(v8 + 1080) + 128);
        if (v10)
        {
          unint64_t v11 = *(const float **)(v8 + 848);
LABEL_19:
          clsp::CLSP_Log::LogCLSPData(v10, v11, a7);
        }
      }
      break;
  }
}

float clsp::CLSPKernel_v5::GetDisplacementFilterGain(clsp::CLSPKernel_v5 *this)
{
  uint64_t v1 = (float *)(*(uint64_t (**)(clsp::CLSPKernel_v5 *))(*(void *)this + 128))(this);
  return log10f(v1[21]* (float)((float)((float)((float)(1.0 - v1[12]) + v1[13]) * (float)((float)(v1[14] + v1[15]) + v1[16]))/ (float)((float)(v1[12] + 1.0) + v1[13])))* 20.0;
}

void clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance()
{
  {
    clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalStateVector_v3_separate();
    __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::CL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, &dword_1BB0CE000);
  }
}

void sub_1BB649204(_Unwind_Exception *a1)
{
}

void clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance()
{
  {
    clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalStateVector_v3_separate();
    __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::OL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, &dword_1BB0CE000);
  }
}

void sub_1BB6492A4(_Unwind_Exception *a1)
{
}

void *clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalStateVector_v3_separate()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst);
  byte_1E9F7FD40 = 1;
  qword_1E9F7FD48 = 0x7FF0000000000000;
  *(double *)&qword_1E9F7FD48 = (double)mach_absolute_time() * 0.0000000416666667;
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2OLEEC2Ev_block_invoke;
  v1[3] = &__block_descriptor_tmp_784;
  v1[4] = &clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
  uint64_t v3 = 0;
  v2[0] = &unk_1F14BFD18;
  v2[1] = _Block_copy(v1);
  uint64_t v3 = v2;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)@"clsp_resetThermalState", @"com.apple.coreaudio", (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v2);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
}

void sub_1BB6493F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst)
  {
    qword_1E9F7FD30 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(a1);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::OL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::vector<clsp::ThermalState_v3>::vector(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 48;
  do
  {
    uint64_t v4 = &v2[v3];
    *uint64_t v4 = 0;
    *(void *)(v4 + 12) = 0;
    *(void *)(v4 + 4) = 0;
    *((_DWORD *)v4 + 5) = 0;
    v3 += 24;
  }
  while (v3 != 48);
  a1[1] = v2 + 48;
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2OLEEC2Ev_block_invoke(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t **)(result + 32);
    uint64_t v3 = *v2;
    for (uint64_t i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1BB875840;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(unsigned char *)uint64_t v3 = 1;
    }
  }
  return result;
}

uint64_t std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

void *std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BFD18;
  uint64_t result = *(void **)(a1 + 8);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::__clone()
{
  return 0;
}

void std::__function::__func<void({block_pointer})(BOOL),std::allocator<void({block_pointer})(BOOL)>,void ()(BOOL)>::~__func()
{
}

void *clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalStateVector_v3_separate()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst);
  byte_1E9F7FD10 = 1;
  qword_1E9F7FD18 = 0x7FF0000000000000;
  *(double *)&qword_1E9F7FD18 = (double)mach_absolute_time() * 0.0000000416666667;
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2CLEEC2Ev_block_invoke;
  v1[3] = &__block_descriptor_tmp_771;
  v1[4] = &clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
  uint64_t v3 = 0;
  v2[0] = &unk_1F14BFD18;
  v2[1] = _Block_copy(v1);
  uint64_t v3 = v2;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)@"clsp_resetThermalState", @"com.apple.coreaudio", (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v2);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
}

void sub_1BB6496E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst)
  {
    qword_1E9F7FD00 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(a1);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::CL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2CLEEC2Ev_block_invoke(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t **)(result + 32);
    uint64_t v3 = *v2;
    for (uint64_t i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1BB875840;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(unsigned char *)uint64_t v3 = 1;
    }
  }
  return result;
}

char *clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState(unsigned int a1)
{
  clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1E9F7FD00 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
    {
      uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
      if (v3)
      {
        clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState = 0;
        unk_1E9F7FD64 = 0;
        unk_1E9F7FD5C = 0;
        dword_1E9F7FD6C = 0;
        uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::CL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1E9F7FD00 - clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

char *clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState(unsigned int a1)
{
  clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1E9F7FD30 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
    {
      uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
      if (v3)
      {
        clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState = 0;
        unk_1E9F7FD84 = 0;
        unk_1E9F7FD7C = 0;
        dword_1E9F7FD8C = 0;
        uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::OL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1E9F7FD30 - clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

float clsp::ThermalController::restoreThermalState(uint64_t a1, uint64_t a2)
{
  shouldTraceRender();
  if (*(unsigned char *)a2)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 192) = v4;
    *(_DWORD *)(a1 + 232) = v5;
    *(_DWORD *)(a1 + 260) = v5;
    *(_DWORD *)(a1 + 276) = v5;
    float result = *(float *)(a2 + 20);
    *(float *)(a1 + 124) = result;
  }
  else
  {
    return clsp::ThermalController::resetThermalState((clsp::ThermalController *)a1);
  }
  return result;
}

void clsp::ThermalController::updateThermalState(clsp::ThermalController *this, float a2)
{
  uint64_t v2 = *((void *)this + 40);
  if (!v2) {
    __assert_rtn("updateThermalState", "CLSPBlocks.h", 1589, "mr_CLTModule");
  }
  if (a2 >= 0.5)
  {
    double v4 = a2;
    float v5 = *((double *)this + 8);
    float v6 = *((float *)this + 38);
    float v7 = -a2;
    *((float *)this + 38) = v6 * expf((float)-a2 / v5);
    float v8 = *((double *)this + 10);
    float v9 = *((float *)this + 43);
    *((float *)this + 43) = v9 * expf(v7 / v8);
    float v10 = *((double *)this + 12);
    float v11 = *((float *)this + 48);
    *((float *)this + 48) = v11 * expf(v7 / v10);
    float v12 = *((float *)this + 58);
    uint64_t v13 = 208;
    if (v12 < 1.0) {
      uint64_t v13 = 200;
    }
    double v14 = -v4;
    float v15 = (float)(v12 + -1.0) * exp(v14 / (*(double *)((char *)this + v13) / 4.60517019)) + 1.0;
    *((float *)this + 58) = v15;
    double v16 = *(float *)this;
    double v17 = (float)(*(float *)(v2 + 140) - *(float *)this);
    float v18 = v16 + v17 * exp(v14 / (*(double *)(v2 + 128) / 4.60517019));
    *(float *)(v2 + 140) = v18;
  }
}

uint64_t AUSpeakerProtectionV3::CanScheduleParameters(AUSpeakerProtectionV3 *this)
{
  return 0;
}

uint64_t AUSpeakerProtectionV3::SetParameter(AUSpeakerProtectionV3 *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a3 != 4)
  {
    if (a3) {
      return 4294956430;
    }
    float v8 = (NSObject **)spp3Subsystem();
    if (v8)
    {
      float v9 = *v8;
      if (!*v8)
      {
LABEL_13:
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
        goto LABEL_18;
      }
    }
    else
    {
      float v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      double v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      int v19 = 136316162;
      BOOL v20 = "AUSpeakerProtectionV3.cpp";
      __int16 v21 = 1024;
      int v22 = 2382;
      __int16 v23 = 1024;
      unsigned int v24 = a2;
      __int16 v25 = 2048;
      double Parameter = ausdk::AUElement::GetParameter(v14, a2);
      __int16 v27 = 2048;
      double v28 = a5;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetParameter(%d): %f -> %f\n", (uint8_t *)&v19, 0x2Cu);
    }
    goto LABEL_13;
  }
  float v11 = (NSObject **)spp3Subsystem();
  if (v11)
  {
    float v12 = *v11;
    if (!*v11) {
      goto LABEL_17;
    }
  }
  else
  {
    float v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    double v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), a4);
    int v19 = 136316162;
    BOOL v20 = "AUSpeakerProtectionV3.cpp";
    __int16 v21 = 1024;
    int v22 = 2387;
    __int16 v23 = 1024;
    unsigned int v24 = a2;
    __int16 v25 = 2048;
    double Parameter = ausdk::AUElement::GetParameter(v16, a2);
    __int16 v27 = 2048;
    double v28 = a5;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Part AUSpeakerProtectionV3::SetParameter(%d): %f -> %f\n", (uint8_t *)&v19, 0x2Cu);
  }
LABEL_17:
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), a4);
  if (!Element)
  {
    double v17 = (NSObject **)spp3Subsystem();
    if (v17)
    {
      float v18 = *v17;
      if (!*v17) {
        goto LABEL_19;
      }
    }
    else
    {
      float v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315650;
      BOOL v20 = "AUSpeakerProtectionV3.cpp";
      __int16 v21 = 1024;
      int v22 = 2392;
      __int16 v23 = 1024;
      unsigned int v24 = a2;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Part AUSpeakerProtectionV3::SetParameter(%d): partElement is null\n", (uint8_t *)&v19, 0x18u);
    }
    goto LABEL_19;
  }
LABEL_18:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
LABEL_19:
  uint64_t result = 0;
  ++*((_DWORD *)this + 159);
  return result;
}

uint64_t AUSpeakerProtectionV3::SetProperty(AUSpeakerProtectionV3 *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7 = a6;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v58 = 0;
  if (SimpleMeters::HandleSetProperty((AUSpeakerProtectionV3 *)((char *)this + 1192), a2, a3, a5, a6, (int *)&v58, a7)) {
    return v58;
  }
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
      if (!*((unsigned char *)this + 1328)) {
        goto LABEL_76;
      }
      double v14 = (NSObject **)spp3Subsystem();
      if (v14)
      {
        float v15 = *v14;
        if (!*v14) {
          goto LABEL_76;
        }
      }
      else
      {
        float v15 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2967;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set SpeakerCalibration property: Applying calibration data on top of SpTS. Not as intended.", __p, 0x12u);
      }
LABEL_76:
      uint64_t v12 = AUSpeakerProtectionV3::InterpretSpeakerCalibration(this, (unsigned __int16 *)a5, v7);
      int v34 = (NSObject **)spp3Subsystem();
      if (v34)
      {
        __int16 v35 = *v34;
        if (!*v34) {
          return v12;
        }
      }
      else
      {
        __int16 v35 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2970;
        uint64_t v36 = "%25s:%-5d Set TransducerCalibration property";
        goto LABEL_110;
      }
      return v12;
    case 64002:
      if (v7 < 4) {
        return 4294956445;
      }
      int v22 = *a5;
      if ((v22 != 0) == (*((unsigned char *)this + 532) != 0)) {
        return 0;
      }
      __int16 v23 = (NSObject **)spp3Subsystem();
      if (v23)
      {
        unsigned int v24 = *v23;
        if (!*v23) {
          goto LABEL_129;
        }
      }
      else
      {
        unsigned int v24 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = "on";
        int v46 = *((unsigned __int8 *)this + 532);
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2993;
        if (v46) {
          uint64_t v47 = "on";
        }
        else {
          uint64_t v47 = "off";
        }
        *(_DWORD *)std::string __p = 136315906;
        if (!v22) {
          uint64_t v45 = "off";
        }
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v47;
        *(_WORD *)&__p[28] = 2080;
        uint64_t v62 = v45;
        _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - VP Mode %s->%s\n", __p, 0x26u);
      }
LABEL_129:
      uint64_t v12 = 0;
      *((unsigned char *)this + 532) = v22 != 0;
      return v12;
    case 64003:
      CACFDictionary::operator=((uint64_t)this + 656, *(const void **)a5);
      return AUSpeakerProtectionV3::InitParamsFromPlist(this, (AUSpeakerProtectionV3 *)((char *)this + 656));
    case 64004:
      v57.__r_.__value_.__s.__data_[0] = 0;
      CACFPreferencesGetAppBooleanValue(@"clsp_enable_closed_loop", @"com.apple.coreaudio", (BOOL *)&v57);
      if (!v57.__r_.__value_.__s.__data_[0])
      {
        if (v7 < 4) {
          return 4294956445;
        }
        int v33 = *a5;
        *((unsigned char *)this + 1329) = v33 != 0;
        if (*((unsigned char *)this + 533))
        {
          if ((v33 != 0) == (*((unsigned char *)this + 529) != 0)) {
            return 0;
          }
        }
        else if (!v33)
        {
          return 0;
        }
        int v49 = (NSObject **)spp3Subsystem();
        if (v49)
        {
          uint64_t v50 = *v49;
          if (!*v49)
          {
LABEL_148:
            for (unsigned int i = 0; ; ++i)
            {
              uint64_t v54 = *((void *)this + 104);
              if (v54) {
                LODWORD(v55) = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 24))(v54);
              }
              else {
                uint64_t v55 = (*((void *)this + 102) - *((void *)this + 101)) >> 3;
              }
              if (i >= v55) {
                break;
              }
              AUSpeakerProtectionV3::SetClosedLoopEnabled(this, i, v33 != 0);
            }
            return 0;
          }
        }
        else
        {
          uint64_t v50 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v51 = "off";
          if (*((unsigned char *)this + 533))
          {
            if (*((unsigned char *)this + 529)) {
              uint64_t v52 = "on";
            }
            else {
              uint64_t v52 = "off";
            }
          }
          else
          {
            uint64_t v52 = "off";
          }
          if (v33) {
            uint64_t v51 = "on";
          }
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3026;
          *(_WORD *)&__p[18] = 2080;
          *(void *)&__p[20] = v52;
          *(_WORD *)&__p[28] = 2080;
          uint64_t v62 = v51;
          _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - EnableClosedLoop %s->%s\n", __p, 0x26u);
        }
        goto LABEL_148;
      }
      BOOL v20 = (NSObject **)spp3Subsystem();
      if (v20)
      {
        __int16 v21 = *v20;
        if (!*v20) {
          return 0;
        }
      }
      else
      {
        __int16 v21 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3011;
        _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d clsp_enable_closed_loop default exists. Ignoring set property for EnableClosedLoop", __p, 0x12u);
      }
      return 0;
    case 64005:
      if (!a5 || v7 < 4)
      {
        if (!*((unsigned char *)this + 776)) {
          return 0;
        }
        uint64_t v31 = (void *)*((void *)this + 94);
        if (v31)
        {
          *((void *)this + 95) = v31;
          operator delete(v31);
        }
        uint64_t v12 = 0;
        *((unsigned char *)this + 776) = 0;
        return v12;
      }
      memset(&v57, 0, sizeof(v57));
      std::vector<clsp::telemetry::Item>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v57, a5, &a5[v7 >> 2], v7 >> 2);
      *(std::string *)std::string __p = v57;
      __p[24] = 1;
      std::__optional_storage_base<std::vector<clsp::telemetry::Item>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<clsp::telemetry::Item>,false>>((uint64_t)this + 752, (__n128 *)__p);
      if (__p[24] && *(void *)__p) {
        operator delete(*(void **)__p);
      }
      int v19 = (uint64_t *)spp3Subsystem();
      if (v19)
      {
        uint64_t v12 = *v19;
        if (!*v19) {
          return v12;
        }
      }
      else
      {
        uint64_t v12 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = *((void *)this + 94);
        uint64_t v59 = *((void *)this + 95);
        uint64_t v60 = v38;
        clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>(&v57, (uint64_t)&v60, &v59);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v39 = &v57;
        }
        else {
          __int16 v39 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3042;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v39;
        uint64_t v40 = "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Telemetry data order. Set as: [ %s ]\n";
        goto LABEL_105;
      }
      return 0;
    case 64006:
      if (a5 && v7 >= 4)
      {
        memset(&v57, 0, sizeof(v57));
        std::vector<BOOL>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v57, a5, &a5[v7 >> 2], v7 >> 2);
        *(std::string *)std::string __p = v57;
        memset(&v57, 0, sizeof(v57));
        __p[24] = 1;
        std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>((uint64_t)this + 560, (uint64_t)__p);
        if (__p[24] && *(void *)__p) {
          operator delete(*(void **)__p);
        }
        if (v57.__r_.__value_.__r.__words[0]) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        __int16 v25 = (uint64_t *)spp3Subsystem();
        if (v25)
        {
          uint64_t v12 = *v25;
          if (!*v25) {
            return v12;
          }
        }
        else
        {
          uint64_t v12 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEBUG))
        {
          clsp::telemetry::utils::PrintBoolVector(&v57, *((void *)this + 70), *((void *)this + 71));
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v41 = &v57;
          }
          else {
            __int16 v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3062;
          *(_WORD *)&__p[18] = 2080;
          *(void *)&__p[20] = v41;
          uint64_t v40 = "%25s:%-5d AUSpeakerProtectionV3::SetProperty - IgnoreTelemetry. Set as: [ %s ].\n";
LABEL_105:
          _os_log_impl(&dword_1BB0CE000, (os_log_t)v12, OS_LOG_TYPE_DEBUG, v40, __p, 0x1Cu);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
        }
        return 0;
      }
      if (!*((unsigned char *)this + 584)) {
        return 0;
      }
      unsigned int v32 = (void *)*((void *)this + 70);
      if (v32) {
        operator delete(v32);
      }
      uint64_t v12 = 0;
      *((unsigned char *)this + 584) = 0;
      return v12;
    case 64007:
      if (v7 < 4) {
        return 4294956445;
      }
      int v26 = *a5;
      if (v26 == *((_DWORD *)this + 196)) {
        return 0;
      }
      __int16 v27 = (NSObject **)spp3Subsystem();
      if (v27)
      {
        double v28 = *v27;
        if (!*v27) {
          goto LABEL_133;
        }
      }
      else
      {
        double v28 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        int v48 = *((_DWORD *)this + 196);
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 3084;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v48;
        *(_WORD *)&__p[24] = 1024;
        *(_DWORD *)&__p[26] = v26;
        _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Thermal State Override %u->%u\n", __p, 0x1Eu);
      }
LABEL_133:
      uint64_t v12 = 0;
      *((_DWORD *)this + 196) = v26;
      return v12;
    case 64008:
      uint64_t v12 = 4294956445;
      if (!a5 || v7 != 8) {
        return v12;
      }
      applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v56, *(CFTypeRef *)a5);
      AUSpeakerProtectionV3::SetPowerBudgetProperty((uint64_t)this, (const __CFDictionary **)&v56);
      applesauce::CF::DictionaryRef::~DictionaryRef(&v56);
      return 0;
    case 64009:
      if (!*((unsigned char *)this + 1328)) {
        goto LABEL_85;
      }
      uint64_t v29 = (NSObject **)spp3Subsystem();
      if (v29)
      {
        uint64_t v30 = *v29;
        if (!*v29) {
          goto LABEL_85;
        }
      }
      else
      {
        uint64_t v30 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2976;
        _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set SpeakerCalibration property: Applying calibration data on top of SpTS. Not as intended.", __p, 0x12u);
      }
LABEL_85:
      if (v7 < 8) {
        return 4294956445;
      }
      uint64_t v12 = AUSpeakerProtectionV3::InterpretSpeakerCalibration(this, *(CFTypeRef *)a5);
      __int16 v37 = (NSObject **)spp3Subsystem();
      if (v37)
      {
        __int16 v35 = *v37;
        if (!*v37) {
          return v12;
        }
      }
      else
      {
        __int16 v35 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2982;
        uint64_t v36 = "%25s:%-5d Set TransducerCalibrationCF property";
LABEL_110:
        _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, v36, __p, 0x12u);
      }
      return v12;
    case 64010:
      if (!a5) {
        return 4294956445;
      }
      std::vector<long long>::__assign_with_size[abi:ne180100]<long long const*,long long const*>((char *)this + 1336, (char *)a5, (uint64_t)&a5[2 * (v7 >> 3)], v7 >> 3);
      return 0;
    default:
      if (a2 != 21) {
        return 4294956417;
      }
      if (v7 < 4) {
        return 4294956445;
      }
      int v16 = *a5;
      if ((v16 != 0) == (*(unsigned int (**)(AUSpeakerProtectionV3 *))(*(void *)this + 576))(this)) {
        return 0;
      }
      double v17 = (NSObject **)spp3Subsystem();
      if (v17)
      {
        float v18 = *v17;
        if (!*v17) {
          goto LABEL_119;
        }
      }
      else
      {
        float v18 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v42 = (*(uint64_t (**)(AUSpeakerProtectionV3 *))(*(void *)this + 576))(this);
        uint64_t v43 = "off";
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 2959;
        if (v42) {
          uint64_t v44 = "on";
        }
        else {
          uint64_t v44 = "off";
        }
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[20] = v44;
        *(_WORD *)&__p[18] = 2080;
        if (v16) {
          uint64_t v43 = "on";
        }
        *(_WORD *)&__p[28] = 2080;
        uint64_t v62 = v43;
        _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - Bypass %s->%s\n", __p, 0x26u);
      }
LABEL_119:
      (*(void (**)(AUSpeakerProtectionV3 *, BOOL))(*(void *)this + 584))(this, v16 != 0);
      return 0;
  }
}

void sub_1BB64A8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  double v17 = (NSObject **)spp3Subsystem();
  if (v17)
  {
    float v18 = *v17;
    if (!*v17) {
      goto LABEL_8;
    }
  }
  else
  {
    float v18 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "AUSpeakerProtectionV3.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 3064;
    _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUSpeakerProtectionV3::SetProperty - IgnoreTelemetry. Could not be fully parsed (invalid data?).\n", (uint8_t *)&buf, 0x12u);
  }
LABEL_8:
  __cxa_end_catch();
  JUMPOUT(0x1BB64A340);
}

uint64_t AUSpeakerProtectionV3::InterpretSpeakerCalibration(AUSpeakerProtectionV3 *this, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a3 <= 3)
  {
    double v4 = (NSObject **)spp3Subsystem();
    if (v4)
    {
      float v5 = *v4;
      if (!*v4) {
        return 4294956445;
      }
    }
    else
    {
      float v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3115;
      __int16 v47 = 1024;
      unsigned int v48 = a3;
      __int16 v49 = 1024;
      int v50 = 4;
      float v11 = "%25s:%-5d SpCl property size %d less than expected SpCl header size %d";
LABEL_16:
      uint64_t v12 = v5;
      uint32_t v13 = 30;
LABEL_55:
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, v11, (uint8_t *)buf, v13);
      return 4294956445;
    }
    return 4294956445;
  }
  if (!a2)
  {
    double v14 = (NSObject **)spp3Subsystem();
    if (v14)
    {
      float v15 = *v14;
      if (!*v14) {
        return 4294956445;
      }
    }
    else
    {
      float v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3120;
      float v11 = "%25s:%-5d SpCl property data is null";
      uint64_t v12 = v15;
      uint32_t v13 = 18;
      goto LABEL_55;
    }
    return 4294956445;
  }
  int v8 = a2[1];
  if (v8 == 3)
  {
    uint64_t v42 = *(unsigned __int8 *)a2;
    unint64_t v16 = (8 * v42) | 4;
    if (v16 > a3)
    {
      double v17 = (NSObject **)spp3Subsystem();
      if (v17)
      {
        float v5 = *v17;
        if (!*v17) {
          return 4294956445;
        }
      }
      else
      {
        float v5 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315906;
        *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
        __int16 v45 = 1024;
        int v46 = 3156;
        __int16 v47 = 1024;
        unsigned int v48 = a3;
        __int16 v49 = 1024;
        int v50 = (8 * v42) | 4;
        float v11 = "%25s:%-5d inDataSize %d < expected size %d";
        goto LABEL_16;
      }
      return 4294956445;
    }
    if (v16 == a3) {
      goto LABEL_64;
    }
    __int16 v21 = (NSObject **)spp3Subsystem();
    if (v21)
    {
      int v22 = *v21;
      if (!*v21)
      {
LABEL_64:
        uint64_t v29 = (void *)*((void *)this + 87);
        uint64_t v30 = (void *)*((void *)this + 88);
        while (v30 != v29)
        {
          uint64_t v32 = *--v30;
          uint64_t v31 = v32;
          void *v30 = 0;
          if (v32) {
            std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v31);
          }
        }
        *((void *)this + 88) = v29;
        if (v42) {
          operator new();
        }
        return 0;
      }
    }
    else
    {
      int v22 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3160;
      __int16 v47 = 1024;
      unsigned int v48 = a3;
      __int16 v49 = 1024;
      int v50 = (8 * v42) | 4;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", (uint8_t *)buf, 0x1Eu);
    }
    goto LABEL_64;
  }
  if (v8 == 2)
  {
    if (a3 <= 0xB)
    {
      BOOL v20 = (NSObject **)spp3Subsystem();
      if (v20)
      {
        float v5 = *v20;
        if (!*v20) {
          return 4294956445;
        }
      }
      else
      {
        float v5 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315906;
        *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
        __int16 v45 = 1024;
        int v46 = 3132;
        __int16 v47 = 1024;
        unsigned int v48 = a3;
        __int16 v49 = 1024;
        int v50 = 12;
        float v11 = "%25s:%-5d inDataSize %d < expected size %d";
        goto LABEL_16;
      }
      return 4294956445;
    }
    if (a3 != 12)
    {
      float v9 = (NSObject **)spp3Subsystem();
      if (v9)
      {
        float v10 = *v9;
        if (!*v9) {
          goto LABEL_60;
        }
      }
      else
      {
        float v10 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315906;
        *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
        __int16 v45 = 1024;
        int v46 = 3136;
        __int16 v47 = 1024;
        unsigned int v48 = a3;
        __int16 v49 = 1024;
        int v50 = 12;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", (uint8_t *)buf, 0x1Eu);
      }
    }
LABEL_60:
    operator new();
  }
  if ((v8 & 0xFFFE) != 6)
  {
    __int16 v23 = (NSObject **)spp3Subsystem();
    if (v23)
    {
      unsigned int v24 = *v23;
      if (!*v23) {
        return 4294956445;
      }
    }
    else
    {
      unsigned int v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      unsigned int v27 = *(_DWORD *)a2;
      buf[0] = 136315650;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3213;
      __int16 v47 = 1024;
      unsigned int v48 = v27;
      float v11 = "%25s:%-5d SpCl version not recognized in SpCl header: 0x%x";
      uint64_t v12 = v24;
      uint32_t v13 = 24;
      goto LABEL_55;
    }
    return 4294956445;
  }
  int v43 = *(unsigned __int8 *)a2;
  unint64_t v18 = 28 * *(unsigned __int8 *)a2 + 4;
  if (v18 > a3)
  {
    int v19 = (NSObject **)spp3Subsystem();
    if (v19)
    {
      float v5 = *v19;
      if (!*v19) {
        return 4294956445;
      }
    }
    else
    {
      float v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3186;
      __int16 v47 = 1024;
      unsigned int v48 = a3;
      __int16 v49 = 1024;
      int v50 = v18;
      float v11 = "%25s:%-5d inDataSize %d < expected size %d";
      goto LABEL_16;
    }
    return 4294956445;
  }
  if (v18 == a3) {
    goto LABEL_77;
  }
  __int16 v25 = (NSObject **)spp3Subsystem();
  if (!v25)
  {
    int v26 = MEMORY[0x1E4F14500];
LABEL_75:
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
      __int16 v45 = 1024;
      int v46 = 3190;
      __int16 v47 = 1024;
      unsigned int v48 = a3;
      __int16 v49 = 1024;
      int v50 = v18;
      _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inDataSize %d does not match expected size %d", (uint8_t *)buf, 0x1Eu);
    }
    goto LABEL_77;
  }
  int v26 = *v25;
  if (*v25) {
    goto LABEL_75;
  }
LABEL_77:
  int v33 = (void *)*((void *)this + 87);
  int v34 = (void *)*((void *)this + 88);
  while (v34 != v33)
  {
    uint64_t v36 = *--v34;
    uint64_t v35 = v36;
    void *v34 = 0;
    if (v36) {
      std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v35);
    }
  }
  *((void *)this + 88) = v33;
  if (v43)
  {
    __int16 v37 = (char *)operator new(0x30uLL);
    *((void *)v37 + 1) = 0;
    *((void *)v37 + 2) = 0;
    *(void *)__int16 v37 = &unk_1F14BB260;
    LOWORD(v38) = a2[6];
    *((float *)v37 + 6) = (float)v38;
    v39.i32[0] = *(_DWORD *)(a2 + 7);
    v39.i16[2] = a2[9];
    v39.i16[3] = a2[11];
    *(float32x4_t *)(v37 + 28) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v39)), (float32x4_t)xmmword_1BB87BAD0);
    uint64_t v40 = (char *)operator new(0x28uLL);
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *(void *)uint64_t v40 = &unk_1F14BB298;
    v41.i16[0] = a2[10];
    v41.i16[1] = a2[13];
    v41.i16[2] = a2[12];
    v41.i16[3] = a2[15];
    *(float32x4_t *)(v40 + 24) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v41)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
    operator new();
  }
  return 0;
}

void sub_1BB64BC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::ostringstream::~ostringstream((uint64_t)&a31);
  std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::InterpretSpeakerCalibration(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v27, cf);
  CFArrayRef v3 = v27;
  if (v27)
  {
    CFIndex Count = CFArrayGetCount(v27);
    CFArrayRef v4 = v27;
    if (v27) {
      CFIndex v22 = CFArrayGetCount(v27);
    }
    else {
      CFIndex v22 = 0;
    }
    if (Count && (v3 != v4 || v22))
    {
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v3, 0, (applesauce::CF::DictionaryRef *)&v26);
      CFDictionaryRef v5 = v26;
      if (v26)
      {
        CFRetain(v26);
        CFDictionaryRef v25 = v5;
        if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v5, (const UInt8 *)"thiele_small_data_source_id") & 0xFF00000000) != 0)
        {
          if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_fs"))
          {
            if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_qts"))
            {
              if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_re"))
              {
                if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_t"))
                {
                  if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_le"))
                  {
                    if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_kms"))
                    {
                      if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_mms"))
                      {
                        if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_bi"))
                        {
                          if (SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_rms"))
                          {
                            float v6 = (float *)operator new(0x30uLL);
                            *((void *)v6 + 1) = 0;
                            *((void *)v6 + 2) = 0;
                            *(void *)float v6 = &unk_1F14BB260;
                            v6[6] = SpTS::v2::Speaker::get<float>(&v25, (const UInt8 *)"thiele_small_kms");
                            v6[7] = SpTS::v2::Speaker::get<float>(&v25, (const UInt8 *)"thiele_small_le");
                            v6[8] = SpTS::v2::Speaker::get<float>(&v25, (const UInt8 *)"thiele_small_bi");
                            v6[9] = SpTS::v2::Speaker::get<float>(&v25, (const UInt8 *)"thiele_small_mms");
                            v6[10] = SpTS::v2::Speaker::get<float>(&v25, (const UInt8 *)"thiele_small_rms");
                            BOOL v7 = SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_crest");
                            BOOL v8 = SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_coffset");
                            BOOL v9 = SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_cmin");
                            if (((v7 && v8) & v9 & SpTS::v2::Speaker::has<float>(&v25, (const UInt8 *)"thiele_small_cmax")) == 1)operator new(); {
                            operator new();
                            }
                          }
                          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_rms");
                          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                          std::runtime_error::runtime_error(exception, &v24);
                        }
                        __int16 v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_bi");
                        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                        std::runtime_error::runtime_error(v21, &v24);
                      }
                      int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_mms");
                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                      std::runtime_error::runtime_error(v19, &v24);
                    }
                    float v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_kms");
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                    std::runtime_error::runtime_error(v15, &v24);
                  }
                  float v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_le");
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                  std::runtime_error::runtime_error(v11, &v24);
                }
                unint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_t");
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
                std::runtime_error::runtime_error(v16, &v24);
              }
              uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_re");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
              std::runtime_error::runtime_error(v12, &v24);
            }
            unint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_qts");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
            std::runtime_error::runtime_error(v18, &v24);
          }
          double v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_fs");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
          std::runtime_error::runtime_error(v14, &v24);
        }
        uint32_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v28, "thiele_small_data_source_id");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v28, &buf);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &buf, &v24);
        std::runtime_error::runtime_error(v13, &v24);
      }
      CFDictionaryRef v25 = 0;
      double v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
    }
    if (v27) {
      CFRelease(v27);
    }
  }
  return 0;
}

void sub_1BB64C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BB64CB6C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB64CB5CLL);
  }
  JUMPOUT(0x1BB64CC2CLL);
}

void sub_1BB64CB9C(uint64_t a1, int a2)
{
  if (a2)
  {
    MEMORY[0x1C185D370](v2, 0x1020C4058DE0928);
    JUMPOUT(0x1BB64CBBCLL);
  }
  JUMPOUT(0x1BB64CB5CLL);
}

void sub_1BB64CBCC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB64CBD4);
  }
  JUMPOUT(0x1BB64CB5CLL);
}

void sub_1BB64CBF4(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v2);
    operator delete(v3);
    JUMPOUT(0x1BB64CC08);
  }
  JUMPOUT(0x1BB64CB5CLL);
}

void sub_1BB64CCC4()
{
}

void sub_1BB64CCCC()
{
}

uint64_t AUSpeakerProtectionV3::InitParamsFromPlist(AUSpeakerProtectionV3 *this, CACFDictionary *a2)
{
  v217[19] = *MEMORY[0x1E4F143B8];
  int v196 = 0;
  if (!CACFDictionary::GetSInt32(*(void *)a2, @"Version", &v196))
  {
    float v6 = (NSObject **)spp3Subsystem();
    if (v6)
    {
      BOOL v7 = *v6;
      if (!*v6) {
        return 4294967093;
      }
    }
    else
    {
      BOOL v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3550;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get Version key.", buf, 0x12u);
    }
    return 4294967093;
  }
  if (v196 == 9) {
    AUSpeakerProtectionV3::InitParamsFromPlistV9(this, *(CFTypeRef *)a2);
  }
  if (v196 == 8) {
    return AUSpeakerProtectionV3::InitParamsFromPlistV8(this, a2);
  }
  if (v196 != 7)
  {
    BOOL v9 = (NSObject **)spp3Subsystem();
    if (v9)
    {
      float v10 = *v9;
      if (!*v9) {
        return 4294967091;
      }
    }
    else
    {
      float v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3546;
      __int16 v213 = 1024;
      int v214 = v196;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d SPP plist version %d is not supported.", buf, 0x18u);
    }
    return 4294967091;
  }
  int v199 = -1;
  if (CACFDictionary::GetSInt32(*(void *)a2, @"NumChannels", &v199))
  {
    int v4 = 0;
    int v5 = 0;
    *((_DWORD *)this + 158) = v199;
    goto LABEL_30;
  }
  float v11 = (NSObject **)spp3Subsystem();
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
LABEL_27:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3568;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get NumChannels Key", buf, 0x12u);
    }
    goto LABEL_29;
  }
  uint64_t v12 = *v11;
  if (*v11) {
    goto LABEL_27;
  }
LABEL_29:
  int v5 = 1;
  int v4 = -203;
LABEL_30:
  int v198 = 0;
  int SInt32 = CACFDictionary::GetSInt32(*(void *)a2, @"ConvoyDataSourceOverride", &v198);
  int v14 = v198;
  if (!SInt32) {
    int v14 = 0;
  }
  *((_DWORD *)this + 180) = v14;
  float v15 = operator new(0x10uLL);
  unsigned int v189 = v4;
  *float v15 = @"AmbientTemp";
  v15[1] = 4;
  unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v18 = v17;
  int v19 = &v16[16 * v17];
  *((void *)v16 + 2) = @"ThermalGainAttackTime";
  *((void *)v16 + 3) = 2;
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v15;
  operator delete(v15);
  if (v18 < 3)
  {
    uint64_t v21 = 3;
    if ((unint64_t)((v19 - v16) >> 3) > 3) {
      uint64_t v21 = (v19 - v16) >> 3;
    }
    if ((unint64_t)(v19 - v16) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = 0;
    int v19 = (char *)(v22 + 16 * v23);
    *(void *)(v22 + 32) = @"ThermalGainReleaseTime";
    *(void *)(v22 + 40) = 3;
    BOOL v20 = (char *)(v22 + 48);
    do
    {
      *(_OWORD *)(v22 + 32 + v24 - 16) = *(_OWORD *)&v16[v24 + 16];
      v24 -= 16;
    }
    while (v24 != -32);
    std::string __p = (char *)v22;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *((void *)v16 + 4) = @"ThermalGainReleaseTime";
    *((void *)v16 + 5) = 3;
    BOOL v20 = v16 + 48;
    std::string __p = v16;
  }
  if (v20 < v19)
  {
    *(void *)BOOL v20 = @"PeakDispAttackTime";
    *((void *)v20 + 1) = 9;
    CFDictionaryRef v25 = v20 + 16;
    goto LABEL_65;
  }
  uint64_t v26 = (v20 - __p) >> 4;
  unint64_t v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v27) {
    unint64_t v27 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28) {
    unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v28);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = (void *)(v28 + 16 * v26);
  int v19 = (char *)(v28 + 16 * v29);
  void *v30 = @"PeakDispAttackTime";
  v30[1] = 9;
  CFDictionaryRef v25 = (char *)(v30 + 2);
  if (v20 == __p)
  {
    uint64_t v31 = __p;
  }
  else
  {
    uint64_t v31 = __p;
    do
    {
      *((_OWORD *)v30 - 1) = *((_OWORD *)v20 - 1);
      v30 -= 2;
      v20 -= 16;
    }
    while (v20 != __p);
    if (!__p) {
      goto LABEL_64;
    }
  }
  operator delete(v31);
LABEL_64:
  std::string __p = (char *)v30;
LABEL_65:
  if (v25 < v19)
  {
    *(void *)CFDictionaryRef v25 = @"PeakDispDecayTime";
    *((void *)v25 + 1) = 10;
    uint64_t v32 = v25 + 16;
    goto LABEL_84;
  }
  uint64_t v33 = (v25 - __p) >> 4;
  unint64_t v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v34) {
    unint64_t v34 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35) {
    unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v35);
  }
  else {
    uint64_t v36 = 0;
  }
  __int16 v37 = (void *)(v35 + 16 * v33);
  int v19 = (char *)(v35 + 16 * v36);
  *__int16 v37 = @"PeakDispDecayTime";
  v37[1] = 10;
  uint64_t v32 = (char *)(v37 + 2);
  if (v25 == __p)
  {
    unsigned int v38 = __p;
  }
  else
  {
    unsigned int v38 = __p;
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v25 - 1);
      v37 -= 2;
      v25 -= 16;
    }
    while (v25 != __p);
    if (!__p) {
      goto LABEL_83;
    }
  }
  operator delete(v38);
LABEL_83:
  std::string __p = (char *)v37;
LABEL_84:
  if (v32 < v19)
  {
    *(void *)uint64_t v32 = @"DispFBIntegrationTime";
    *((void *)v32 + 1) = 11;
    uint16x4_t v39 = v32 + 16;
    goto LABEL_103;
  }
  uint64_t v40 = (v32 - __p) >> 4;
  unint64_t v41 = v40 + 1;
  if ((unint64_t)(v40 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v41) {
    unint64_t v41 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v41;
  }
  if (v42) {
    unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v42);
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = (void *)(v42 + 16 * v40);
  int v19 = (char *)(v42 + 16 * v43);
  *uint64_t v44 = @"DispFBIntegrationTime";
  v44[1] = 11;
  uint16x4_t v39 = (char *)(v44 + 2);
  if (v32 == __p)
  {
    __int16 v45 = __p;
  }
  else
  {
    __int16 v45 = __p;
    do
    {
      *((_OWORD *)v44 - 1) = *((_OWORD *)v32 - 1);
      v44 -= 2;
      v32 -= 16;
    }
    while (v32 != __p);
    if (!__p) {
      goto LABEL_102;
    }
  }
  operator delete(v45);
LABEL_102:
  std::string __p = (char *)v44;
LABEL_103:
  if (v39 < v19)
  {
    *(void *)uint16x4_t v39 = @"LookaheadDelay_ms";
    *((void *)v39 + 1) = 8;
    int v46 = v39 + 16;
    goto LABEL_122;
  }
  uint64_t v47 = (v39 - __p) >> 4;
  unint64_t v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v48) {
    unint64_t v48 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v49 = v48;
  }
  if (v49) {
    unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v49);
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = (void *)(v49 + 16 * v47);
  int v19 = (char *)(v49 + 16 * v50);
  *uint64_t v51 = @"LookaheadDelay_ms";
  v51[1] = 8;
  int v46 = (char *)(v51 + 2);
  if (v39 == __p)
  {
    uint64_t v52 = __p;
  }
  else
  {
    uint64_t v52 = __p;
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v39 - 1);
      v51 -= 2;
      v39 -= 16;
    }
    while (v39 != __p);
    if (!__p) {
      goto LABEL_121;
    }
  }
  operator delete(v52);
LABEL_121:
  std::string __p = (char *)v51;
LABEL_122:
  if (v46 < v19)
  {
    *(void *)int v46 = @"SafeTlim";
    *((void *)v46 + 1) = 5;
    uint64_t v53 = v46 + 16;
    goto LABEL_141;
  }
  uint64_t v54 = (v46 - __p) >> 4;
  unint64_t v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v55) {
    unint64_t v55 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56) {
    unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v56);
  }
  else {
    uint64_t v57 = 0;
  }
  unsigned int v58 = (void *)(v56 + 16 * v54);
  int v19 = (char *)(v56 + 16 * v57);
  void *v58 = @"SafeTlim";
  v58[1] = 5;
  uint64_t v53 = (char *)(v58 + 2);
  if (v46 == __p)
  {
    uint64_t v59 = __p;
  }
  else
  {
    uint64_t v59 = __p;
    do
    {
      *((_OWORD *)v58 - 1) = *((_OWORD *)v46 - 1);
      v58 -= 2;
      v46 -= 16;
    }
    while (v46 != __p);
    if (!__p) {
      goto LABEL_140;
    }
  }
  operator delete(v59);
LABEL_140:
  std::string __p = (char *)v58;
LABEL_141:
  if (v53 < v19)
  {
    *(void *)uint64_t v53 = @"SafeTlimTimeMin";
    *((void *)v53 + 1) = 6;
    uint64_t v60 = v53 + 16;
    goto LABEL_160;
  }
  uint64_t v61 = (v53 - __p) >> 4;
  unint64_t v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v19 - __p) >> 3 > v62) {
    unint64_t v62 = (v19 - __p) >> 3;
  }
  if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v62;
  }
  if (v63) {
    unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v63);
  }
  else {
    uint64_t v64 = 0;
  }
  float v65 = (void *)(v63 + 16 * v61);
  int v19 = (char *)(v63 + 16 * v64);
  void *v65 = @"SafeTlimTimeMin";
  v65[1] = 6;
  uint64_t v60 = (char *)(v65 + 2);
  if (v53 == __p)
  {
    uint64_t v66 = __p;
  }
  else
  {
    uint64_t v66 = __p;
    do
    {
      *((_OWORD *)v65 - 1) = *((_OWORD *)v53 - 1);
      v65 -= 2;
      v53 -= 16;
    }
    while (v53 != __p);
    if (!__p) {
      goto LABEL_159;
    }
  }
  operator delete(v66);
LABEL_159:
  std::string __p = (char *)v65;
LABEL_160:
  if (v60 >= v19)
  {
    uint64_t v68 = (v60 - __p) >> 4;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v19 - __p) >> 3 > v69) {
      unint64_t v69 = (v19 - __p) >> 3;
    }
    if ((unint64_t)(v19 - __p) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v69;
    }
    if (v70) {
      unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v70);
    }
    int v71 = (void *)(v70 + 16 * v68);
    *int v71 = @"SafeTlimOffset";
    v71[1] = 7;
    uint64_t v67 = (char *)(v71 + 2);
    if (v60 == __p) {
      goto LABEL_173;
    }
    do
    {
      *((_OWORD *)v71 - 1) = *((_OWORD *)v60 - 1);
      v71 -= 2;
      v60 -= 16;
    }
    while (v60 != __p);
    if (__p) {
LABEL_173:
    }
      operator delete(__p);
    std::string __p = (char *)v71;
  }
  else
  {
    *(void *)uint64_t v60 = @"SafeTlimOffset";
    *((void *)v60 + 1) = 7;
    uint64_t v67 = v60 + 16;
  }
  uint64_t v72 = operator new(0x10uLL);
  *uint64_t v72 = @"TemperatureLimit";
  v72[1] = 0;
  uint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v75 = v74;
  *((void *)v73 + 2) = @"HardTempLimitHeadroom";
  *((void *)v73 + 3) = 1;
  *(_OWORD *)uint64_t v73 = *(_OWORD *)v72;
  operator delete(v72);
  if (v75 < 3)
  {
    uint64_t v76 = 3;
    if ((unint64_t)((16 * v75) >> 3) > 3) {
      uint64_t v76 = (16 * v75) >> 3;
    }
    if ((unint64_t)(16 * v75) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v77 = v76;
    }
    if (v77) {
      unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v77);
    }
    uint64_t v78 = 0;
    *(void *)(v77 + 32) = @"ThermalFFSpeedupFactor";
    *(void *)(v77 + 40) = 6;
    uint64_t v192 = (char *)(v77 + 48);
    do
    {
      *(_OWORD *)(v77 + 32 + v78 - 16) = *(_OWORD *)&v73[v78 + 16];
      v78 -= 16;
    }
    while (v78 != -32);
    uint64_t v195 = (unsigned int *)v77;
    if (v73) {
      operator delete(v73);
    }
  }
  else
  {
    *((void *)v73 + 4) = @"ThermalFFSpeedupFactor";
    *((void *)v73 + 5) = 6;
    uint64_t v192 = v73 + 48;
    uint64_t v195 = (unsigned int *)v73;
  }
  uint64_t v79 = operator new(0x10uLL);
  void *v79 = @"Rshunt";
  v79[1] = 10;
  uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v82 = v81;
  unint64_t v83 = &v80[16 * v81];
  *((void *)v80 + 2) = @"Rampout";
  *((void *)v80 + 3) = 11;
  *(_OWORD *)uint64_t v80 = *(_OWORD *)v79;
  operator delete(v79);
  if (v82 < 3)
  {
    uint64_t v86 = 3;
    if ((unint64_t)((v83 - v80) >> 3) > 3) {
      uint64_t v86 = (v83 - v80) >> 3;
    }
    if ((unint64_t)(v83 - v80) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v87 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v87 = v86;
    }
    if (v87) {
      unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v87);
    }
    else {
      uint64_t v88 = 0;
    }
    uint64_t v89 = 0;
    unint64_t v83 = (char *)(v87 + 16 * v88);
    *(void *)(v87 + 32) = @"mt";
    *(void *)(v87 + 40) = 12;
    float v84 = (char *)(v87 + 48);
    do
    {
      *(_OWORD *)(v87 + 32 + v89 - 16) = *(_OWORD *)&v80[v89 + 16];
      v89 -= 16;
    }
    while (v89 != -32);
    uint64_t v85 = (char *)v87;
    if (v80) {
      operator delete(v80);
    }
  }
  else
  {
    *((void *)v80 + 4) = @"mt";
    *((void *)v80 + 5) = 12;
    float v84 = v80 + 48;
    uint64_t v85 = v80;
  }
  if (v84 >= v83)
  {
    uint64_t v91 = (v84 - v85) >> 4;
    unint64_t v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v92) {
      unint64_t v92 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v92;
    }
    if (v93) {
      unint64_t v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v93);
    }
    else {
      uint64_t v94 = 0;
    }
    double v95 = (void *)(v93 + 16 * v91);
    unint64_t v83 = (char *)(v93 + 16 * v94);
    void *v95 = @"ct";
    v95[1] = 13;
    uint64_t v90 = (char *)(v95 + 2);
    if (v84 == v85) {
      goto LABEL_216;
    }
    do
    {
      *((_OWORD *)v95 - 1) = *((_OWORD *)v84 - 1);
      v95 -= 2;
      v84 -= 16;
    }
    while (v84 != v85);
    if (v85) {
LABEL_216:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v95;
  }
  else
  {
    *(void *)float v84 = @"ct";
    *((void *)v84 + 1) = 13;
    uint64_t v90 = v84 + 16;
  }
  if (v90 >= v83)
  {
    uint64_t v97 = (v90 - v85) >> 4;
    unint64_t v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v98) {
      unint64_t v98 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v99 = v98;
    }
    if (v99) {
      unint64_t v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v99);
    }
    else {
      uint64_t v100 = 0;
    }
    uint64_t v101 = (void *)(v99 + 16 * v97);
    unint64_t v83 = (char *)(v99 + 16 * v100);
    *uint64_t v101 = @"kt";
    v101[1] = 14;
    uint64_t v96 = (char *)(v101 + 2);
    if (v90 == v85) {
      goto LABEL_232;
    }
    do
    {
      *((_OWORD *)v101 - 1) = *((_OWORD *)v90 - 1);
      v101 -= 2;
      v90 -= 16;
    }
    while (v90 != v85);
    if (v85) {
LABEL_232:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v101;
  }
  else
  {
    *(void *)uint64_t v90 = @"kt";
    *((void *)v90 + 1) = 14;
    uint64_t v96 = v90 + 16;
  }
  if (v96 >= v83)
  {
    uint64_t v103 = (v96 - v85) >> 4;
    unint64_t v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v104) {
      unint64_t v104 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v105 = v104;
    }
    if (v105) {
      unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v105);
    }
    else {
      uint64_t v106 = 0;
    }
    double v107 = (void *)(v105 + 16 * v103);
    unint64_t v83 = (char *)(v105 + 16 * v106);
    *double v107 = @"ag";
    v107[1] = 15;
    uint64_t v102 = (char *)(v107 + 2);
    if (v96 == v85) {
      goto LABEL_248;
    }
    do
    {
      *((_OWORD *)v107 - 1) = *((_OWORD *)v96 - 1);
      v107 -= 2;
      v96 -= 16;
    }
    while (v96 != v85);
    if (v85) {
LABEL_248:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v107;
  }
  else
  {
    *(void *)uint64_t v96 = @"ag";
    *((void *)v96 + 1) = 15;
    uint64_t v102 = v96 + 16;
  }
  if (v102 >= v83)
  {
    uint64_t v109 = (v102 - v85) >> 4;
    unint64_t v110 = v109 + 1;
    if ((unint64_t)(v109 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v110) {
      unint64_t v110 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v111 = v110;
    }
    if (v111) {
      unint64_t v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v111);
    }
    else {
      uint64_t v112 = 0;
    }
    float v113 = (void *)(v111 + 16 * v109);
    unint64_t v83 = (char *)(v111 + 16 * v112);
    void *v113 = @"g_bw";
    v113[1] = 16;
    uint64_t v108 = (char *)(v113 + 2);
    if (v102 == v85) {
      goto LABEL_264;
    }
    do
    {
      *((_OWORD *)v113 - 1) = *((_OWORD *)v102 - 1);
      v113 -= 2;
      v102 -= 16;
    }
    while (v102 != v85);
    if (v85) {
LABEL_264:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v113;
  }
  else
  {
    *(void *)uint64_t v102 = @"g_bw";
    *((void *)v102 + 1) = 16;
    uint64_t v108 = v102 + 16;
  }
  if (v108 >= v83)
  {
    uint64_t v115 = (v108 - v85) >> 4;
    unint64_t v116 = v115 + 1;
    if ((unint64_t)(v115 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v116) {
      unint64_t v116 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v117 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v117 = v116;
    }
    if (v117) {
      unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v117);
    }
    else {
      uint64_t v118 = 0;
    }
    float v119 = (void *)(v117 + 16 * v115);
    unint64_t v83 = (char *)(v117 + 16 * v118);
    *float v119 = @"Q_d";
    v119[1] = 17;
    BOOL v114 = (char *)(v119 + 2);
    if (v108 == v85) {
      goto LABEL_280;
    }
    do
    {
      *((_OWORD *)v119 - 1) = *((_OWORD *)v108 - 1);
      v119 -= 2;
      v108 -= 16;
    }
    while (v108 != v85);
    if (v85) {
LABEL_280:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v119;
  }
  else
  {
    *(void *)uint64_t v108 = @"Q_d";
    *((void *)v108 + 1) = 17;
    BOOL v114 = v108 + 16;
  }
  if (v114 >= v83)
  {
    uint64_t v121 = (v114 - v85) >> 4;
    unint64_t v122 = v121 + 1;
    if ((unint64_t)(v121 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v122) {
      unint64_t v122 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v123 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v123 = v122;
    }
    if (v123) {
      unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v123);
    }
    else {
      uint64_t v124 = 0;
    }
    float v125 = (void *)(v123 + 16 * v121);
    unint64_t v83 = (char *)(v123 + 16 * v124);
    void *v125 = @"phi";
    v125[1] = 18;
    uint64_t v120 = (char *)(v125 + 2);
    if (v114 == v85) {
      goto LABEL_296;
    }
    do
    {
      *((_OWORD *)v125 - 1) = *((_OWORD *)v114 - 1);
      v125 -= 2;
      v114 -= 16;
    }
    while (v114 != v85);
    if (v85) {
LABEL_296:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v125;
  }
  else
  {
    *(void *)BOOL v114 = @"phi";
    *((void *)v114 + 1) = 18;
    uint64_t v120 = v114 + 16;
  }
  if (v120 >= v83)
  {
    uint64_t v127 = (v120 - v85) >> 4;
    unint64_t v128 = v127 + 1;
    if ((unint64_t)(v127 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v128) {
      unint64_t v128 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v129 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v129 = v128;
    }
    if (v129) {
      unint64_t v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v129);
    }
    else {
      uint64_t v130 = 0;
    }
    int v131 = (void *)(v129 + 16 * v127);
    unint64_t v83 = (char *)(v129 + 16 * v130);
    *int v131 = @"x_lim";
    v131[1] = 19;
    uint64_t v126 = (char *)(v131 + 2);
    if (v120 == v85) {
      goto LABEL_312;
    }
    do
    {
      *((_OWORD *)v131 - 1) = *((_OWORD *)v120 - 1);
      v131 -= 2;
      v120 -= 16;
    }
    while (v120 != v85);
    if (v85) {
LABEL_312:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v131;
  }
  else
  {
    *(void *)uint64_t v120 = @"x_lim";
    *((void *)v120 + 1) = 19;
    uint64_t v126 = v120 + 16;
  }
  if (v126 >= v83)
  {
    uint64_t v133 = (v126 - v85) >> 4;
    unint64_t v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v134) {
      unint64_t v134 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v135 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v135 = v134;
    }
    if (v135) {
      unint64_t v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v135);
    }
    else {
      uint64_t v136 = 0;
    }
    float v137 = (void *)(v135 + 16 * v133);
    unint64_t v83 = (char *)(v135 + 16 * v136);
    *float v137 = @"Reb_ref";
    v137[1] = 9;
    float v132 = (char *)(v137 + 2);
    if (v126 == v85) {
      goto LABEL_328;
    }
    do
    {
      *((_OWORD *)v137 - 1) = *((_OWORD *)v126 - 1);
      v137 -= 2;
      v126 -= 16;
    }
    while (v126 != v85);
    if (v85) {
LABEL_328:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v137;
  }
  else
  {
    *(void *)uint64_t v126 = @"Reb_ref";
    *((void *)v126 + 1) = 9;
    float v132 = v126 + 16;
  }
  if (v132 >= v83)
  {
    uint64_t v139 = (v132 - v85) >> 4;
    unint64_t v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v140) {
      unint64_t v140 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v141 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v141 = v140;
    }
    if (v141) {
      unint64_t v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v141);
    }
    else {
      uint64_t v142 = 0;
    }
    float v143 = (void *)(v141 + 16 * v139);
    unint64_t v83 = (char *)(v141 + 16 * v142);
    *float v143 = @"T_sett_vc";
    v143[1] = 2;
    float v138 = (char *)(v143 + 2);
    if (v132 == v85) {
      goto LABEL_344;
    }
    do
    {
      *((_OWORD *)v143 - 1) = *((_OWORD *)v132 - 1);
      v143 -= 2;
      v132 -= 16;
    }
    while (v132 != v85);
    if (v85) {
LABEL_344:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v143;
  }
  else
  {
    *(void *)float v132 = @"T_sett_vc";
    *((void *)v132 + 1) = 2;
    float v138 = v132 + 16;
  }
  if (v138 >= v83)
  {
    uint64_t v145 = (v138 - v85) >> 4;
    unint64_t v146 = v145 + 1;
    if ((unint64_t)(v145 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v146) {
      unint64_t v146 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v147 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v147 = v146;
    }
    if (v147) {
      unint64_t v147 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v147);
    }
    else {
      uint64_t v148 = 0;
    }
    uint64_t v149 = (void *)(v147 + 16 * v145);
    unint64_t v83 = (char *)(v147 + 16 * v148);
    *uint64_t v149 = @"T_sett_mg";
    v149[1] = 3;
    uint64_t v144 = (char *)(v149 + 2);
    if (v138 == v85) {
      goto LABEL_360;
    }
    do
    {
      *((_OWORD *)v149 - 1) = *((_OWORD *)v138 - 1);
      v149 -= 2;
      v138 -= 16;
    }
    while (v138 != v85);
    if (v85) {
LABEL_360:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v149;
  }
  else
  {
    *(void *)float v138 = @"T_sett_mg";
    *((void *)v138 + 1) = 3;
    uint64_t v144 = v138 + 16;
  }
  if (v144 >= v83)
  {
    uint64_t v151 = (v144 - v85) >> 4;
    unint64_t v152 = v151 + 1;
    if ((unint64_t)(v151 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v152) {
      unint64_t v152 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v153 = v152;
    }
    if (v153) {
      unint64_t v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v153);
    }
    else {
      uint64_t v154 = 0;
    }
    float v155 = (void *)(v153 + 16 * v151);
    unint64_t v83 = (char *)(v153 + 16 * v154);
    void *v155 = @"tau_Tvc";
    v155[1] = 4;
    uint64_t v150 = (char *)(v155 + 2);
    if (v144 == v85) {
      goto LABEL_376;
    }
    do
    {
      *((_OWORD *)v155 - 1) = *((_OWORD *)v144 - 1);
      v155 -= 2;
      v144 -= 16;
    }
    while (v144 != v85);
    if (v85) {
LABEL_376:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v155;
  }
  else
  {
    *(void *)uint64_t v144 = @"tau_Tvc";
    *((void *)v144 + 1) = 4;
    uint64_t v150 = v144 + 16;
  }
  if (v150 >= v83)
  {
    uint64_t v157 = (v150 - v85) >> 4;
    unint64_t v158 = v157 + 1;
    if ((unint64_t)(v157 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v83 - v85) >> 3 > v158) {
      unint64_t v158 = (v83 - v85) >> 3;
    }
    if ((unint64_t)(v83 - v85) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v159 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v159 = v158;
    }
    if (v159) {
      unint64_t v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v159);
    }
    uint64_t v160 = (void *)(v159 + 16 * v157);
    void *v160 = @"tau_Tmg";
    v160[1] = 5;
    uint64_t v156 = (long long *)(v160 + 2);
    if (v150 == v85) {
      goto LABEL_391;
    }
    do
    {
      *((_OWORD *)v160 - 1) = *((_OWORD *)v150 - 1);
      v160 -= 2;
      v150 -= 16;
    }
    while (v150 != v85);
    if (v85) {
LABEL_391:
    }
      operator delete(v85);
    uint64_t v85 = (char *)v160;
  }
  else
  {
    *(void *)uint64_t v150 = @"tau_Tmg";
    *((void *)v150 + 1) = 5;
    uint64_t v156 = (long long *)(v150 + 16);
  }
  if (v67 != __p)
  {
    if ((unint64_t)((v67 - __p) >> 4) <= 1) {
      uint64_t v161 = 1;
    }
    else {
      uint64_t v161 = (v67 - __p) >> 4;
    }
    uint64_t v162 = (unsigned int *)(__p + 8);
    do
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      v5 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, Element, *((__CFString **)v162 - 1), *v162, *(CACFDictionary **)a2);
      v162 += 4;
      --v161;
    }
    while (v161);
  }
  uint64_t v190 = v156;
  unsigned int v164 = *((_DWORD *)this + 158);
  if (v164)
  {
    unsigned int v165 = 0;
    if ((unint64_t)((v192 - (char *)v195) >> 4) <= 1) {
      uint64_t v166 = 1;
    }
    else {
      uint64_t v166 = (v192 - (char *)v195) >> 4;
    }
    uint64_t v167 = (unsigned int *)v192;
    do
    {
      unint64_t v168 = v195 + 2;
      uint64_t v169 = v166;
      BOOL v170 = v167 == v195;
      uint64_t v167 = v195;
      if (!v170)
      {
        do
        {
          float v171 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v165);
          v5 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v171, *((__CFString **)v168 - 1), *v168, *(CACFDictionary **)a2);
          v168 += 4;
          --v169;
        }
        while (v169);
        unsigned int v164 = *((_DWORD *)this + 158);
        uint64_t v167 = (unsigned int *)v192;
      }
      ++v165;
    }
    while (v165 < v164);
  }
  memset(v197, 0, sizeof(v197));
  std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(v197, (long long *)v85, v190, ((char *)v190 - v85) >> 4);
  int v188 = AUSpeakerProtectionV3::SetChannelParamsFromPlist((uint64_t)this, v197, (const __CFDictionary **)a2);
  if (v197[0])
  {
    v197[1] = v197[0];
    operator delete(v197[0]);
  }
  uint64_t v172 = spp3Subsystem();
  if (v172)
  {
    if (*(unsigned char *)(v172 + 8))
    {
      double v173 = *(NSObject **)v172;
      if (*(void *)v172)
      {
        if (os_log_type_enabled(*(os_log_t *)v172, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3409;
          _os_log_impl(&dword_1BB0CE000, v173, OS_LOG_TYPE_DEBUG, "%25s:%-5d InitCLParamsFromPlistV7", buf, 0x12u);
        }
      }
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v203 = 257;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)a2, @"CLParams", (CACFDictionary *)&Mutable);
  if (!Mutable)
  {
    uint64_t v177 = (NSObject **)spp3Subsystem();
    if (v177)
    {
      int v178 = *v177;
      if (!*v177) {
        goto LABEL_443;
      }
    }
    else
    {
      int v178 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3416;
      _os_log_impl(&dword_1BB0CE000, v178, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get CLParams Key", buf, 0x12u);
    }
    goto LABEL_443;
  }
  if (*((_DWORD *)this + 158))
  {
    unint64_t v174 = 0;
    int v175 = 0;
    do
    {
      unint64_t v176 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v174);
      v175 += AUSpeakerProtectionV3::InitCLParamsFromPlist(this, v176, &Mutable);
      ++v174;
    }
    while (v174 < *((unsigned int *)this + 158));
  }
  else
  {
    int v175 = 0;
  }
  if (AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(this, &Mutable) + v175)
  {
LABEL_443:
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    int v185 = *((_DWORD *)this + 158);
    if (v185)
    {
      unsigned int v186 = 0;
      do
        AUSpeakerProtectionV3::SetClosedLoopEnabled(this, v186++, 0);
      while (v186 < *((_DWORD *)this + 158));
      LOBYTE(v185) = 0;
    }
    goto LABEL_447;
  }
  unint64_t v179 = (uint64_t *)*((void *)this + 84);
  int v193 = (uint64_t *)*((void *)this + 85);
  if (v179 != v193)
  {
    int v180 = 0;
    uint64_t v191 = *MEMORY[0x1E4FBA418];
    uint64_t v181 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      clsp::ClosedLoopParameters::dump(*v179, buf);
      unint64_t v182 = (NSObject **)spp3Subsystem();
      if (!v182) {
        break;
      }
      uint64_t v183 = *v182;
      if (*v182) {
        goto LABEL_431;
      }
LABEL_436:
      *(void *)std::string buf = v191;
      *(void *)&buf[*(void *)(v191 - 24)] = v181;
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (v216 < 0) {
        operator delete(v215);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C185D210](v217);
      ++v179;
      ++v180;
      if (v179 == v193) {
        goto LABEL_439;
      }
    }
    uint64_t v183 = MEMORY[0x1E4F14500];
LABEL_431:
    if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v200);
      size_t v184 = v200;
      if (v201 < 0) {
        size_t v184 = (void **)v200[0];
      }
      *(_DWORD *)float v204 = 136315906;
      uint64_t v205 = "AUSpeakerProtectionV3.cpp";
      __int16 v206 = 1024;
      int v207 = 3432;
      __int16 v208 = 1024;
      int v209 = v180;
      __int16 v210 = 2080;
      float v211 = v184;
      _os_log_impl(&dword_1BB0CE000, v183, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v204, 0x22u);
      if (v201 < 0) {
        operator delete(v200[0]);
      }
    }
    goto LABEL_436;
  }
LABEL_439:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  LOBYTE(v185) = 1;
LABEL_447:
  *((unsigned char *)this + 529) = v185;
  if (v5 + v188)
  {
    unsigned int v189 = -50;
    if (!v85) {
      goto LABEL_450;
    }
    goto LABEL_449;
  }
  *((unsigned char *)this + 528) = 1;
  ausdk::AUScope::SetNumberOfElements((AUSpeakerProtectionV3 *)((char *)this + 792), *((_DWORD *)this + 158));
  if (v85) {
LABEL_449:
  }
    operator delete(v85);
LABEL_450:
  if (v195) {
    operator delete(v195);
  }
  uint64_t v8 = v189;
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_1BB64E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a26);
  if (v35) {
    operator delete(v35);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void AUSpeakerProtectionV3::SetClosedLoopEnabled(AUSpeakerProtectionV3 *this, unsigned int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 533) = a3;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), a2);
  if (!Element) {
    __assert_rtn("SetClosedLoopEnabled", "AUSpeakerProtectionV3.cpp", 1150, "part");
  }
  int v5 = Element;
  if (a3) {
    float v6 = 1.0;
  }
  else {
    float v6 = 0.0;
  }
  ausdk::AUElement::SetParameter(Element, 0x16u, v6, 0);
  ausdk::AUElement::SetParameter(v5, 0x15u, v6, 0);
  BOOL v7 = (NSObject **)spp3Subsystem();
  if (v7)
  {
    uint64_t v8 = *v7;
    if (!*v7) {
      return;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    BOOL v9 = "false";
    float v11 = "AUSpeakerProtectionV3.cpp";
    int v10 = 136315650;
    if (a3) {
      BOOL v9 = "true";
    }
    __int16 v12 = 1024;
    int v13 = 1153;
    __int16 v14 = 2080;
    float v15 = v9;
    _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Enable CL -> CLThermalEnabled, PilotToneEnabled: %s", (uint8_t *)&v10, 0x1Cu);
  }
}

char *std::vector<clsp::telemetry::Item>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, a4);
  BOOL v8 = a2 > a3;
  if (a2 == a3)
  {
    BOOL v9 = (uint64_t *)a1[1];
  }
  else
  {
    BOOL v9 = (uint64_t *)a1[1];
    do
    {
      if (v8)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        switch(*a2)
        {
          case 0x73705630:
            break;
          case 0x73705631:
            uint64_t v10 = 0;
            uint64_t v11 = 0x100000000;
            break;
          case 0x73705632:
            uint64_t v10 = 0;
            uint64_t v11 = 0x200000000;
            break;
          case 0x73705633:
            uint64_t v10 = 0;
            uint64_t v11 = 0x300000000;
            break;
          case 0x73705634:
            uint64_t v10 = 0;
            uint64_t v11 = 0x400000000;
            break;
          case 0x73705635:
            uint64_t v10 = 0;
            uint64_t v11 = 0x500000000;
            break;
          case 0x73705636:
            uint64_t v10 = 0;
            uint64_t v11 = 0x600000000;
            break;
          case 0x73705637:
            uint64_t v10 = 0;
            uint64_t v11 = 0x700000000;
            break;
          default:
            __cxa_rethrow();
        }
      }
      else
      {
        switch(*a2)
        {
          case 0x73504430:
            uint64_t v11 = 0;
            break;
          case 0x73504431:
            uint64_t v11 = 0x100000000;
            break;
          case 0x73504432:
            uint64_t v11 = 0x200000000;
            break;
          case 0x73504433:
            uint64_t v11 = 0x300000000;
            break;
          case 0x73504434:
            uint64_t v11 = 0x400000000;
            break;
          case 0x73504435:
            uint64_t v11 = 0x500000000;
            break;
          case 0x73504436:
            uint64_t v11 = 0x600000000;
            break;
          case 0x73504437:
            uint64_t v11 = 0x700000000;
            break;
          default:
            JUMPOUT(0);
        }
        uint64_t v10 = 2;
      }
      *v9++ = v11 | v10;
      BOOL v8 = ++a2 > a3;
    }
    while (a2 != a3);
  }
  a1[1] = v9;
  return result;
}

void sub_1BB64EB10(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  int v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<std::vector<clsp::telemetry::Item>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<clsp::telemetry::Item>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    float v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>(std::string *a1, uint64_t a2, void *a3)
{
  int v5 = *(_DWORD **)a2;
  if (v5 == (_DWORD *)(*a3 - 8))
  {
    __int16 v12 = (_DWORD *)(*a3 - 8);
    clsp::telemetry::Item::operator std::string((uint64_t)a1, v12);
  }
  else
  {
    clsp::telemetry::Item::operator std::string((uint64_t)&v15, v5);
    BOOL v7 = std::string::append(&v15, ", ", 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v13 = (_DWORD *)(*(void *)a2 + 8);
    clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(&__p, &v13, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    *a1 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB64ED7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  __n128 result = std::vector<BOOL>::__vallocate[abi:ne180100](a1, a4);
  unint64_t v9 = a1[1];
  unint64_t v10 = v9 + a4;
  a1[1] = v9 + a4;
  if (v9)
  {
    unint64_t v11 = v10 - 1;
    if (((v10 - 1) ^ (v9 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v11 = v10 - 1;
  }
  unint64_t v12 = v11 >> 6;
  if (v10 >= 0x41) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = 0;
  }
  *(void *)(*a1 + 8 * v13) = 0;
LABEL_9:
  if (a2 != a3)
  {
    int v14 = v9 & 0x3F;
    std::string v15 = (uint64_t *)(*a1 + 8 * (v9 >> 6));
    do
    {
      uint64_t v16 = 1 << v14;
      if (*a2) {
        uint64_t v17 = *v15 | v16;
      }
      else {
        uint64_t v17 = *v15 & ~v16;
      }
      *std::string v15 = v17;
      ++a2;
      v15 += v14 == 63;
      if (v14 == 63) {
        int v14 = 0;
      }
      else {
        ++v14;
      }
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1BB64EEA0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v4 = *(void **)a1;
      if (*(void *)a1)
      {
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    float v6 = *(void **)a1;
    if (*(void *)a1) {
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void clsp::telemetry::utils::PrintBoolVector(void *a1, uint64_t a2, unint64_t a3)
{
  v4[0] = a2;
  v4[1] = 0;
  v3[0] = a2 + 8 * (a3 >> 6);
  v3[1] = a3 & 0x3F;
  clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, (uint64_t)v4, v3);
}

void AUSpeakerProtectionV3::SetPowerBudgetProperty(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 992);
  if (*(void *)(a1 + 1000) != v2)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    unsigned int v7 = 0;
    do
    {
      while (1)
      {
        if (!*a2)
        {
          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
        }
        cpms::TimeScale<float>::getKey(cf, *(CFTypeRef *)(v2 + 32 * v5));
        CFDictionaryRef v8 = applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>(*a2, (const void **)cf);
        if (*(void *)cf) {
          CFRelease(*(CFTypeRef *)cf);
        }
        if (((unint64_t)v8 & 0xFF00000000) == 0) {
          break;
        }
        float v9 = *(float *)&v8 / *(float *)(a1 + 960);
        uint64_t v10 = *(void *)(a1 + 968);
        if (*(float *)(v10 + 4 * v5) == v9) {
          break;
        }
        *(float *)(v10 + 4 * v5) = v9;
        uint64_t v11 = *(void *)(a1 + 1000);
        uint64_t v2 = *(void *)(a1 + 992);
        char v6 = 1;
        uint64_t v5 = ++v7;
        if (v7 >= (unint64_t)((v11 - v2) >> 5)) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = *(void *)(a1 + 1000);
      uint64_t v2 = *(void *)(a1 + 992);
      uint64_t v5 = ++v7;
    }
    while (v7 < (unint64_t)((v11 - v2) >> 5));
    if (v6)
    {
LABEL_13:
      if (v11 != v2)
      {
        unint64_t v12 = 0;
        unsigned int v13 = 1;
        while (1)
        {
          int v14 = (NSObject **)spp3Subsystem();
          if (!v14) {
            break;
          }
          std::string v15 = *v14;
          if (*v14) {
            goto LABEL_19;
          }
LABEL_26:
          unint64_t v12 = v13++;
          if (v12 >= (uint64_t)(*(void *)(a1 + 1000) - *(void *)(a1 + 992)) >> 5) {
            goto LABEL_27;
          }
        }
        std::string v15 = MEMORY[0x1E4F14500];
LABEL_19:
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          cpms::TimeScale<float>::getKey(&v22, *(CFTypeRef *)(*(void *)(a1 + 992) + 32 * v12));
          CFStringRef v16 = v22;
          if (!v22)
          {
            uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v21, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(v22, (uint64_t)__p);
          uint64_t v17 = __p;
          if (v24 < 0) {
            uint64_t v17 = (void **)__p[0];
          }
          double v18 = *(float *)(*(void *)(a1 + 968) + 4 * v12);
          *(_DWORD *)CFTypeRef cf = 136315906;
          *(void *)&cf[4] = "AUSpeakerProtectionV3.cpp";
          __int16 v26 = 1024;
          int v27 = 2845;
          __int16 v28 = 2080;
          uint64_t v29 = v17;
          __int16 v30 = 2048;
          double v31 = v18;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS power budget '%s' is %f", cf, 0x26u);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
          CFRelease(v16);
        }
        goto LABEL_26;
      }
LABEL_27:
      int v19 = *(void **)(a1 + 888);
      if (v19) {
        cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SetPowerBudgets(v19, *(void *)(a1 + 968), (*(void *)(a1 + 976) - *(void *)(a1 + 968)) >> 2);
      }
    }
  }
}

void sub_1BB64F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long const*,long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](v7, v11);
    unsigned int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    float v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      int v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  CFStringRef v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    int v19 = v16;
LABEL_17:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *cpms::TimeScale<float>::getKey(void *result, CFTypeRef cf)
{
  CFArrayRef v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>(const __CFDictionary *a1, const void **a2)
{
  CFDictionaryRef result = applesauce::CF::details::at_key<applesauce::CF::StringRef>(a1, a2);
  if (result)
  {
    return (const __CFDictionary *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

void *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SetPowerBudgets(void *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = result[4];
  if (v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      if (v5 - 1 < a3)
      {
        if (result[23] <= v4) {
          __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
        }
        *(_DWORD *)(result[22] + 4 * v4) = *(_DWORD *)(a2 + 4 * v4);
      }
      unint64_t v4 = v5;
    }
    while (v3 > v5++);
  }
  return result;
}

void clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3[1];
  uint64_t v5 = v4 - 1;
  if (v4 >= 0x40uLL) {
    uint64_t v5 = v4 - 64;
  }
  char v6 = (void *)(*a3 + 8 * (v5 >> 6));
  unsigned int v7 = *(uint64_t **)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = ((_BYTE)v4 - 1) & 0x3F;
  uint64_t v10 = 1 << v8;
  if (*(void **)a2 == v6 && v8 == v9)
  {
    if ((*v6 & v10) != 0) {
      double v18 = "Yes";
    }
    else {
      double v18 = "No";
    }
    std::string::basic_string[abi:ne180100]<0>(a1, v18);
  }
  else
  {
    uint64_t v12 = *v7;
    unint64_t v13 = *(void *)(a2 + 8) & 0xFFFFFFFF00000000 | (*(void *)(a2 + 8) + 1) & 0x3FLL;
    v19[0] = (char *)v7 + ((((unint64_t)*(void *)(a2 + 8) + 1) >> 3) & 0x3FFFFFF8);
    v19[1] = v13;
    clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(&v20, (uint64_t)v19, a3);
    if ((v12 & v10) != 0) {
      int v14 = "Yes, ";
    }
    else {
      int v14 = "No, ";
    }
    if ((v12 & v10) != 0) {
      std::string::size_type v15 = 5;
    }
    else {
      std::string::size_type v15 = 4;
    }
    CFStringRef v16 = std::string::insert(&v20, 0, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a1[2] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB64F610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3[1];
  uint64_t v5 = v4 - 1;
  if (v4 >= 0x40uLL) {
    uint64_t v5 = v4 - 64;
  }
  char v6 = (void *)(*a3 + 8 * (v5 >> 6));
  unsigned int v7 = *(uint64_t **)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = ((_BYTE)v4 - 1) & 0x3F;
  uint64_t v10 = 1 << v8;
  if (*(void **)a2 == v6 && v8 == v9)
  {
    if ((*v6 & v10) != 0) {
      double v18 = "Yes";
    }
    else {
      double v18 = "No";
    }
    std::string::basic_string[abi:ne180100]<0>(a1, v18);
  }
  else
  {
    uint64_t v12 = *v7;
    unint64_t v13 = *(void *)(a2 + 8) & 0xFFFFFFFF00000000 | (*(void *)(a2 + 8) + 1) & 0x3FLL;
    v19[0] = (char *)v7 + ((((unint64_t)*(void *)(a2 + 8) + 1) >> 3) & 0x3FFFFFF8);
    v19[1] = v13;
    clsp::telemetry::utils::PrintBoolVector_impl<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>&>(&v20, v19);
    if ((v12 & v10) != 0) {
      int v14 = "Yes, ";
    }
    else {
      int v14 = "No, ";
    }
    if ((v12 & v10) != 0) {
      std::string::size_type v15 = 5;
    }
    else {
      std::string::size_type v15 = 4;
    }
    CFStringRef v16 = std::string::insert(&v20, 0, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a1[2] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB64F778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::Item::operator std::string(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 2)
  {
    std::to_string(&v10, a2[1]);
    char v6 = std::string::insert(&v10, 0, "Ch", 2uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v11, " PDM", 4uLL);
  }
  else if (*a2 == 1)
  {
    std::to_string(&v10, a2[1]);
    unint64_t v3 = std::string::insert(&v10, 0, "Ch", 2uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v11, " current", 8uLL);
  }
  else
  {
    std::to_string(&v10, a2[1]);
    int v8 = std::string::insert(&v10, 0, "Ch", 2uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v11, " voltage", 8uLL);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(void *)(a1 + 16) = *((void *)&v5->__r_.__value_.__l + 2);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1BB64F900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(std::string *a1, _DWORD **a2, void *a3)
{
  uint64_t v5 = *a2;
  if (v5 == (_DWORD *)(*a3 - 8))
  {
    uint64_t v12 = (_DWORD *)(*a3 - 8);
    clsp::telemetry::Item::operator std::string((uint64_t)a1, v12);
  }
  else
  {
    clsp::telemetry::Item::operator std::string((uint64_t)&v16, v5);
    long long v7 = std::string::append(&v16, ", ", 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = (uint64_t)(*a2 + 2);
    clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>&>(__p, &v13, a3);
    if ((v15 & 0x80u) == 0) {
      long long v9 = __p;
    }
    else {
      long long v9 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      std::string::size_type v10 = v15;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string v11 = std::string::append(&v17, (const std::string::value_type *)v9, v10);
    *a1 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB64FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpeakerProtectionV3::InitParamsFromPlistV8(AUSpeakerProtectionV3 *this, CACFDictionary *a2)
{
  v341[19] = *MEMORY[0x1E4F143B8];
  int v323 = -1;
  if (CACFDictionary::GetSInt32(*(void *)a2, @"NumChannels", &v323))
  {
    unsigned int v317 = 0;
    int v320 = 0;
    *((_DWORD *)this + 158) = v323;
    goto LABEL_10;
  }
  long long v4 = (NSObject **)spp3Subsystem();
  if (!v4)
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
LABEL_7:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3675;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get NumChannels Key", buf, 0x12u);
    }
    goto LABEL_9;
  }
  uint64_t v5 = *v4;
  if (*v4) {
    goto LABEL_7;
  }
LABEL_9:
  int v320 = 1;
  unsigned int v317 = -203;
LABEL_10:
  int v322 = 0;
  int SInt32 = CACFDictionary::GetSInt32(*(void *)a2, @"ConvoyDataSourceOverride", &v322);
  int v7 = v322;
  if (!SInt32) {
    int v7 = 0;
  }
  *((_DWORD *)this + 180) = v7;
  long long v8 = operator new(0x10uLL);
  void *v8 = @"AmbientTemp";
  v8[1] = 4;
  long long v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v11 = v10;
  uint64_t v12 = &v9[16 * v10];
  *((void *)v9 + 2) = @"ThermalGainAttackTime";
  *((void *)v9 + 3) = 2;
  *(_OWORD *)long long v9 = *(_OWORD *)v8;
  operator delete(v8);
  if (v11 < 3)
  {
    uint64_t v14 = 3;
    if ((unint64_t)((v12 - v9) >> 3) > 3) {
      uint64_t v14 = (v12 - v9) >> 3;
    }
    if ((unint64_t)(v12 - v9) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = 0;
    uint64_t v12 = (char *)(v15 + 16 * v16);
    *(void *)(v15 + 32) = @"ThermalGainReleaseTime";
    *(void *)(v15 + 40) = 3;
    uint64_t v13 = (char *)(v15 + 48);
    do
    {
      *(_OWORD *)(v15 + 32 + v17 - 16) = *(_OWORD *)&v9[v17 + 16];
      v17 -= 16;
    }
    while (v17 != -32);
    std::string __p = (char *)v15;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *((void *)v9 + 4) = @"ThermalGainReleaseTime";
    *((void *)v9 + 5) = 3;
    uint64_t v13 = v9 + 48;
    std::string __p = v9;
  }
  if (v13 < v12)
  {
    *(void *)uint64_t v13 = @"PeakDispAttackTime";
    *((void *)v13 + 1) = 9;
    double v18 = v13 + 16;
    goto LABEL_45;
  }
  uint64_t v19 = (v13 - __p) >> 4;
  unint64_t v20 = v19 + 1;
  if ((unint64_t)(v19 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v20) {
    unint64_t v20 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v20;
  }
  if (v21) {
    unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v21);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (void *)(v21 + 16 * v19);
  uint64_t v12 = (char *)(v21 + 16 * v22);
  void *v23 = @"PeakDispAttackTime";
  v23[1] = 9;
  double v18 = (char *)(v23 + 2);
  if (v13 == __p)
  {
    char v24 = __p;
  }
  else
  {
    char v24 = __p;
    do
    {
      *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
      v23 -= 2;
      v13 -= 16;
    }
    while (v13 != __p);
    if (!__p) {
      goto LABEL_44;
    }
  }
  operator delete(v24);
LABEL_44:
  std::string __p = (char *)v23;
LABEL_45:
  if (v18 < v12)
  {
    *(void *)double v18 = @"PeakDispDecayTime";
    *((void *)v18 + 1) = 10;
    CFDictionaryRef v25 = v18 + 16;
    goto LABEL_64;
  }
  uint64_t v26 = (v18 - __p) >> 4;
  unint64_t v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v27) {
    unint64_t v27 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28) {
    unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v28);
  }
  else {
    uint64_t v29 = 0;
  }
  __int16 v30 = (void *)(v28 + 16 * v26);
  uint64_t v12 = (char *)(v28 + 16 * v29);
  void *v30 = @"PeakDispDecayTime";
  v30[1] = 10;
  CFDictionaryRef v25 = (char *)(v30 + 2);
  if (v18 == __p)
  {
    double v31 = __p;
  }
  else
  {
    double v31 = __p;
    do
    {
      *((_OWORD *)v30 - 1) = *((_OWORD *)v18 - 1);
      v30 -= 2;
      v18 -= 16;
    }
    while (v18 != __p);
    if (!__p) {
      goto LABEL_63;
    }
  }
  operator delete(v31);
LABEL_63:
  std::string __p = (char *)v30;
LABEL_64:
  if (v25 < v12)
  {
    *(void *)CFDictionaryRef v25 = @"DispFBIntegrationTime";
    *((void *)v25 + 1) = 11;
    uint64_t v32 = v25 + 16;
    goto LABEL_83;
  }
  uint64_t v33 = (v25 - __p) >> 4;
  unint64_t v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v34) {
    unint64_t v34 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35) {
    unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v35);
  }
  else {
    uint64_t v36 = 0;
  }
  __int16 v37 = (void *)(v35 + 16 * v33);
  uint64_t v12 = (char *)(v35 + 16 * v36);
  *__int16 v37 = @"DispFBIntegrationTime";
  v37[1] = 11;
  uint64_t v32 = (char *)(v37 + 2);
  if (v25 == __p)
  {
    unsigned int v38 = __p;
  }
  else
  {
    unsigned int v38 = __p;
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v25 - 1);
      v37 -= 2;
      v25 -= 16;
    }
    while (v25 != __p);
    if (!__p) {
      goto LABEL_82;
    }
  }
  operator delete(v38);
LABEL_82:
  std::string __p = (char *)v37;
LABEL_83:
  if (v32 < v12)
  {
    *(void *)uint64_t v32 = @"LookaheadDelay_ms";
    *((void *)v32 + 1) = 8;
    uint16x4_t v39 = v32 + 16;
    goto LABEL_102;
  }
  uint64_t v40 = (v32 - __p) >> 4;
  unint64_t v41 = v40 + 1;
  if ((unint64_t)(v40 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v41) {
    unint64_t v41 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v42 = v41;
  }
  if (v42) {
    unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v42);
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = (void *)(v42 + 16 * v40);
  uint64_t v12 = (char *)(v42 + 16 * v43);
  *uint64_t v44 = @"LookaheadDelay_ms";
  v44[1] = 8;
  uint16x4_t v39 = (char *)(v44 + 2);
  if (v32 == __p)
  {
    __int16 v45 = __p;
  }
  else
  {
    __int16 v45 = __p;
    do
    {
      *((_OWORD *)v44 - 1) = *((_OWORD *)v32 - 1);
      v44 -= 2;
      v32 -= 16;
    }
    while (v32 != __p);
    if (!__p) {
      goto LABEL_101;
    }
  }
  operator delete(v45);
LABEL_101:
  std::string __p = (char *)v44;
LABEL_102:
  if (v39 < v12)
  {
    *(void *)uint16x4_t v39 = @"SafeTlim";
    *((void *)v39 + 1) = 5;
    int v46 = v39 + 16;
    goto LABEL_121;
  }
  uint64_t v47 = (v39 - __p) >> 4;
  unint64_t v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v48) {
    unint64_t v48 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v49 = v48;
  }
  if (v49) {
    unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v49);
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = (void *)(v49 + 16 * v47);
  uint64_t v12 = (char *)(v49 + 16 * v50);
  *uint64_t v51 = @"SafeTlim";
  v51[1] = 5;
  int v46 = (char *)(v51 + 2);
  if (v39 == __p)
  {
    uint64_t v52 = __p;
  }
  else
  {
    uint64_t v52 = __p;
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v39 - 1);
      v51 -= 2;
      v39 -= 16;
    }
    while (v39 != __p);
    if (!__p) {
      goto LABEL_120;
    }
  }
  operator delete(v52);
LABEL_120:
  std::string __p = (char *)v51;
LABEL_121:
  if (v46 < v12)
  {
    *(void *)int v46 = @"SafeTlimTimeMin";
    *((void *)v46 + 1) = 6;
    uint64_t v53 = v46 + 16;
    goto LABEL_140;
  }
  uint64_t v54 = (v46 - __p) >> 4;
  unint64_t v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v55) {
    unint64_t v55 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56) {
    unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v56);
  }
  else {
    uint64_t v57 = 0;
  }
  unsigned int v58 = (void *)(v56 + 16 * v54);
  uint64_t v12 = (char *)(v56 + 16 * v57);
  void *v58 = @"SafeTlimTimeMin";
  v58[1] = 6;
  uint64_t v53 = (char *)(v58 + 2);
  if (v46 == __p)
  {
    uint64_t v59 = __p;
  }
  else
  {
    uint64_t v59 = __p;
    do
    {
      *((_OWORD *)v58 - 1) = *((_OWORD *)v46 - 1);
      v58 -= 2;
      v46 -= 16;
    }
    while (v46 != __p);
    if (!__p) {
      goto LABEL_139;
    }
  }
  operator delete(v59);
LABEL_139:
  std::string __p = (char *)v58;
LABEL_140:
  if (v53 < v12)
  {
    *(void *)uint64_t v53 = @"SafeTlimOffset";
    *((void *)v53 + 1) = 7;
    uint64_t v60 = v53 + 16;
    goto LABEL_158;
  }
  uint64_t v61 = (v53 - __p) >> 4;
  unint64_t v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  if ((v12 - __p) >> 3 > v62) {
    unint64_t v62 = (v12 - __p) >> 3;
  }
  if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v62;
  }
  if (v63) {
    unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v63);
  }
  uint64_t v64 = (void *)(v63 + 16 * v61);
  *uint64_t v64 = @"SafeTlimOffset";
  v64[1] = 7;
  uint64_t v60 = (char *)(v64 + 2);
  if (v53 == __p)
  {
    float v65 = __p;
  }
  else
  {
    float v65 = __p;
    do
    {
      *((_OWORD *)v64 - 1) = *((_OWORD *)v53 - 1);
      v64 -= 2;
      v53 -= 16;
    }
    while (v53 != __p);
    if (!__p) {
      goto LABEL_157;
    }
  }
  operator delete(v65);
LABEL_157:
  std::string __p = (char *)v64;
LABEL_158:
  uint64_t v66 = operator new(0x10uLL);
  void *v66 = @"TemperatureLimit";
  v66[1] = 0;
  uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v69 = v68;
  unint64_t v70 = &v67[16 * v68];
  *((void *)v67 + 2) = @"HardTempLimitHeadroom";
  *((void *)v67 + 3) = 1;
  *(_OWORD *)uint64_t v67 = *(_OWORD *)v66;
  operator delete(v66);
  if (v69 < 3)
  {
    uint64_t v73 = 3;
    if ((unint64_t)((v70 - v67) >> 3) > 3) {
      uint64_t v73 = (v70 - v67) >> 3;
    }
    if ((unint64_t)(v70 - v67) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v73;
    }
    if (v74) {
      unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v74);
    }
    else {
      uint64_t v75 = 0;
    }
    uint64_t v76 = 0;
    unint64_t v70 = (char *)(v74 + 16 * v75);
    *(void *)(v74 + 32) = @"ThermalFFSpeedupFactor";
    *(void *)(v74 + 40) = 6;
    int v71 = (char *)(v74 + 48);
    do
    {
      *(_OWORD *)(v74 + 32 + v76 - 16) = *(_OWORD *)&v67[v76 + 16];
      v76 -= 16;
    }
    while (v76 != -32);
    uint64_t v72 = (char *)v74;
    if (v67) {
      operator delete(v67);
    }
  }
  else
  {
    *((void *)v67 + 4) = @"ThermalFFSpeedupFactor";
    *((void *)v67 + 5) = 6;
    int v71 = v67 + 48;
    uint64_t v72 = v67;
  }
  if (v71 >= v70)
  {
    uint64_t v78 = (v71 - v72) >> 4;
    unint64_t v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v79) {
      unint64_t v79 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v80 = v79;
    }
    if (v80) {
      unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v80);
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v82 = (void *)(v80 + 16 * v78);
    unint64_t v70 = (char *)(v80 + 16 * v81);
    *uint64_t v82 = @"Rshunt";
    v82[1] = 10;
    unint64_t v77 = (char *)(v82 + 2);
    if (v71 == v72) {
      goto LABEL_186;
    }
    do
    {
      *((_OWORD *)v82 - 1) = *((_OWORD *)v71 - 1);
      v82 -= 2;
      v71 -= 16;
    }
    while (v71 != v72);
    if (v72) {
LABEL_186:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v82;
  }
  else
  {
    *(void *)int v71 = @"Rshunt";
    *((void *)v71 + 1) = 10;
    unint64_t v77 = v71 + 16;
  }
  if (v77 >= v70)
  {
    uint64_t v84 = (v77 - v72) >> 4;
    unint64_t v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v85) {
      unint64_t v85 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v85;
    }
    if (v86) {
      unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v86);
    }
    else {
      uint64_t v87 = 0;
    }
    uint64_t v88 = (void *)(v86 + 16 * v84);
    unint64_t v70 = (char *)(v86 + 16 * v87);
    *uint64_t v88 = @"Rampout";
    v88[1] = 11;
    unint64_t v83 = (char *)(v88 + 2);
    if (v77 == v72) {
      goto LABEL_202;
    }
    do
    {
      *((_OWORD *)v88 - 1) = *((_OWORD *)v77 - 1);
      v88 -= 2;
      v77 -= 16;
    }
    while (v77 != v72);
    if (v72) {
LABEL_202:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v88;
  }
  else
  {
    *(void *)unint64_t v77 = @"Rampout";
    *((void *)v77 + 1) = 11;
    unint64_t v83 = v77 + 16;
  }
  if (v83 >= v70)
  {
    uint64_t v90 = (v83 - v72) >> 4;
    unint64_t v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v91) {
      unint64_t v91 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v91;
    }
    if (v92) {
      unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v92);
    }
    else {
      uint64_t v93 = 0;
    }
    uint64_t v94 = (void *)(v92 + 16 * v90);
    unint64_t v70 = (char *)(v92 + 16 * v93);
    *uint64_t v94 = @"mt";
    v94[1] = 12;
    uint64_t v89 = (char *)(v94 + 2);
    if (v83 == v72) {
      goto LABEL_218;
    }
    do
    {
      *((_OWORD *)v94 - 1) = *((_OWORD *)v83 - 1);
      v94 -= 2;
      v83 -= 16;
    }
    while (v83 != v72);
    if (v72) {
LABEL_218:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v94;
  }
  else
  {
    *(void *)unint64_t v83 = @"mt";
    *((void *)v83 + 1) = 12;
    uint64_t v89 = v83 + 16;
  }
  if (v89 >= v70)
  {
    uint64_t v96 = (v89 - v72) >> 4;
    unint64_t v97 = v96 + 1;
    if ((unint64_t)(v96 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v97) {
      unint64_t v97 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v97;
    }
    if (v98) {
      unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v98);
    }
    else {
      uint64_t v99 = 0;
    }
    uint64_t v100 = (void *)(v98 + 16 * v96);
    unint64_t v70 = (char *)(v98 + 16 * v99);
    *uint64_t v100 = @"ct";
    v100[1] = 13;
    double v95 = (char *)(v100 + 2);
    if (v89 == v72) {
      goto LABEL_234;
    }
    do
    {
      *((_OWORD *)v100 - 1) = *((_OWORD *)v89 - 1);
      v100 -= 2;
      v89 -= 16;
    }
    while (v89 != v72);
    if (v72) {
LABEL_234:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v100;
  }
  else
  {
    *(void *)uint64_t v89 = @"ct";
    *((void *)v89 + 1) = 13;
    double v95 = v89 + 16;
  }
  if (v95 >= v70)
  {
    uint64_t v102 = (v95 - v72) >> 4;
    unint64_t v103 = v102 + 1;
    if ((unint64_t)(v102 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v103) {
      unint64_t v103 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v104 = v103;
    }
    if (v104) {
      unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v104);
    }
    else {
      uint64_t v105 = 0;
    }
    uint64_t v106 = (void *)(v104 + 16 * v102);
    unint64_t v70 = (char *)(v104 + 16 * v105);
    void *v106 = @"kt";
    v106[1] = 14;
    uint64_t v101 = (char *)(v106 + 2);
    if (v95 == v72) {
      goto LABEL_250;
    }
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v95 - 1);
      v106 -= 2;
      v95 -= 16;
    }
    while (v95 != v72);
    if (v72) {
LABEL_250:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v106;
  }
  else
  {
    *(void *)double v95 = @"kt";
    *((void *)v95 + 1) = 14;
    uint64_t v101 = v95 + 16;
  }
  if (v101 >= v70)
  {
    uint64_t v108 = (v101 - v72) >> 4;
    unint64_t v109 = v108 + 1;
    if ((unint64_t)(v108 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v109) {
      unint64_t v109 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v110 = v109;
    }
    if (v110) {
      unint64_t v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
    }
    else {
      uint64_t v111 = 0;
    }
    uint64_t v112 = (void *)(v110 + 16 * v108);
    unint64_t v70 = (char *)(v110 + 16 * v111);
    *uint64_t v112 = @"ag";
    v112[1] = 15;
    double v107 = (char *)(v112 + 2);
    if (v101 == v72) {
      goto LABEL_266;
    }
    do
    {
      *((_OWORD *)v112 - 1) = *((_OWORD *)v101 - 1);
      v112 -= 2;
      v101 -= 16;
    }
    while (v101 != v72);
    if (v72) {
LABEL_266:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v112;
  }
  else
  {
    *(void *)uint64_t v101 = @"ag";
    *((void *)v101 + 1) = 15;
    double v107 = v101 + 16;
  }
  if (v107 >= v70)
  {
    uint64_t v114 = (v107 - v72) >> 4;
    unint64_t v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v115) {
      unint64_t v115 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v116 = v115;
    }
    if (v116) {
      unint64_t v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v116);
    }
    else {
      uint64_t v117 = 0;
    }
    uint64_t v118 = (void *)(v116 + 16 * v114);
    unint64_t v70 = (char *)(v116 + 16 * v117);
    void *v118 = @"g_bw";
    v118[1] = 16;
    float v113 = (char *)(v118 + 2);
    if (v107 == v72) {
      goto LABEL_282;
    }
    do
    {
      *((_OWORD *)v118 - 1) = *((_OWORD *)v107 - 1);
      v118 -= 2;
      v107 -= 16;
    }
    while (v107 != v72);
    if (v72) {
LABEL_282:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v118;
  }
  else
  {
    *(void *)double v107 = @"g_bw";
    *((void *)v107 + 1) = 16;
    float v113 = v107 + 16;
  }
  if (v113 >= v70)
  {
    uint64_t v120 = (v113 - v72) >> 4;
    unint64_t v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v121) {
      unint64_t v121 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v122 = v121;
    }
    if (v122) {
      unint64_t v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v122);
    }
    else {
      uint64_t v123 = 0;
    }
    uint64_t v124 = (void *)(v122 + 16 * v120);
    unint64_t v70 = (char *)(v122 + 16 * v123);
    void *v124 = @"Q_d";
    v124[1] = 17;
    float v119 = (char *)(v124 + 2);
    if (v113 == v72) {
      goto LABEL_298;
    }
    do
    {
      *((_OWORD *)v124 - 1) = *((_OWORD *)v113 - 1);
      v124 -= 2;
      v113 -= 16;
    }
    while (v113 != v72);
    if (v72) {
LABEL_298:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v124;
  }
  else
  {
    *(void *)float v113 = @"Q_d";
    *((void *)v113 + 1) = 17;
    float v119 = v113 + 16;
  }
  if (v119 >= v70)
  {
    uint64_t v126 = (v119 - v72) >> 4;
    unint64_t v127 = v126 + 1;
    if ((unint64_t)(v126 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v127) {
      unint64_t v127 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v128 = v127;
    }
    if (v128) {
      unint64_t v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v128);
    }
    else {
      uint64_t v129 = 0;
    }
    uint64_t v130 = (void *)(v128 + 16 * v126);
    unint64_t v70 = (char *)(v128 + 16 * v129);
    *uint64_t v130 = @"phi";
    v130[1] = 18;
    float v125 = (char *)(v130 + 2);
    if (v119 == v72) {
      goto LABEL_314;
    }
    do
    {
      *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
      v130 -= 2;
      v119 -= 16;
    }
    while (v119 != v72);
    if (v72) {
LABEL_314:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v130;
  }
  else
  {
    *(void *)float v119 = @"phi";
    *((void *)v119 + 1) = 18;
    float v125 = v119 + 16;
  }
  if (v125 >= v70)
  {
    uint64_t v132 = (v125 - v72) >> 4;
    unint64_t v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v133) {
      unint64_t v133 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v134 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v134 = v133;
    }
    if (v134) {
      unint64_t v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v134);
    }
    else {
      uint64_t v135 = 0;
    }
    uint64_t v136 = (void *)(v134 + 16 * v132);
    unint64_t v70 = (char *)(v134 + 16 * v135);
    void *v136 = @"x_lim";
    v136[1] = 19;
    int v131 = (char *)(v136 + 2);
    if (v125 == v72) {
      goto LABEL_330;
    }
    do
    {
      *((_OWORD *)v136 - 1) = *((_OWORD *)v125 - 1);
      v136 -= 2;
      v125 -= 16;
    }
    while (v125 != v72);
    if (v72) {
LABEL_330:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v136;
  }
  else
  {
    *(void *)float v125 = @"x_lim";
    *((void *)v125 + 1) = 19;
    int v131 = v125 + 16;
  }
  if (v131 >= v70)
  {
    uint64_t v138 = (v131 - v72) >> 4;
    unint64_t v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v139) {
      unint64_t v139 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v140 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v140 = v139;
    }
    if (v140) {
      unint64_t v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v140);
    }
    else {
      uint64_t v141 = 0;
    }
    uint64_t v142 = (void *)(v140 + 16 * v138);
    unint64_t v70 = (char *)(v140 + 16 * v141);
    void *v142 = @"Reb_ref";
    v142[1] = 9;
    float v137 = (char *)(v142 + 2);
    if (v131 == v72) {
      goto LABEL_346;
    }
    do
    {
      *((_OWORD *)v142 - 1) = *((_OWORD *)v131 - 1);
      v142 -= 2;
      v131 -= 16;
    }
    while (v131 != v72);
    if (v72) {
LABEL_346:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v142;
  }
  else
  {
    *(void *)int v131 = @"Reb_ref";
    *((void *)v131 + 1) = 9;
    float v137 = v131 + 16;
  }
  if (v137 >= v70)
  {
    uint64_t v144 = (v137 - v72) >> 4;
    unint64_t v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v145) {
      unint64_t v145 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v146 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v146 = v145;
    }
    if (v146) {
      unint64_t v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v146);
    }
    else {
      uint64_t v147 = 0;
    }
    uint64_t v148 = (void *)(v146 + 16 * v144);
    unint64_t v70 = (char *)(v146 + 16 * v147);
    void *v148 = @"T_sett_vc";
    v148[1] = 2;
    float v143 = (char *)(v148 + 2);
    if (v137 == v72) {
      goto LABEL_362;
    }
    do
    {
      *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
      v148 -= 2;
      v137 -= 16;
    }
    while (v137 != v72);
    if (v72) {
LABEL_362:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v148;
  }
  else
  {
    *(void *)float v137 = @"T_sett_vc";
    *((void *)v137 + 1) = 2;
    float v143 = v137 + 16;
  }
  if (v143 >= v70)
  {
    uint64_t v150 = (v143 - v72) >> 4;
    unint64_t v151 = v150 + 1;
    if ((unint64_t)(v150 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v151) {
      unint64_t v151 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v152 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v152 = v151;
    }
    if (v152) {
      unint64_t v152 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v152);
    }
    else {
      uint64_t v153 = 0;
    }
    uint64_t v154 = (void *)(v152 + 16 * v150);
    unint64_t v70 = (char *)(v152 + 16 * v153);
    *uint64_t v154 = @"T_sett_mg";
    v154[1] = 3;
    uint64_t v149 = (char *)(v154 + 2);
    if (v143 == v72) {
      goto LABEL_378;
    }
    do
    {
      *((_OWORD *)v154 - 1) = *((_OWORD *)v143 - 1);
      v154 -= 2;
      v143 -= 16;
    }
    while (v143 != v72);
    if (v72) {
LABEL_378:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v154;
  }
  else
  {
    *(void *)float v143 = @"T_sett_mg";
    *((void *)v143 + 1) = 3;
    uint64_t v149 = v143 + 16;
  }
  if (v149 >= v70)
  {
    uint64_t v156 = (v149 - v72) >> 4;
    unint64_t v157 = v156 + 1;
    if ((unint64_t)(v156 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v157) {
      unint64_t v157 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v158 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v158 = v157;
    }
    if (v158) {
      unint64_t v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v158);
    }
    else {
      uint64_t v159 = 0;
    }
    uint64_t v160 = (void *)(v158 + 16 * v156);
    unint64_t v70 = (char *)(v158 + 16 * v159);
    void *v160 = @"tau_Tvc";
    v160[1] = 4;
    float v155 = (char *)(v160 + 2);
    if (v149 == v72) {
      goto LABEL_394;
    }
    do
    {
      *((_OWORD *)v160 - 1) = *((_OWORD *)v149 - 1);
      v160 -= 2;
      v149 -= 16;
    }
    while (v149 != v72);
    if (v72) {
LABEL_394:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v160;
  }
  else
  {
    *(void *)uint64_t v149 = @"tau_Tvc";
    *((void *)v149 + 1) = 4;
    float v155 = v149 + 16;
  }
  if (v155 >= v70)
  {
    uint64_t v162 = (v155 - v72) >> 4;
    unint64_t v163 = v162 + 1;
    if ((unint64_t)(v162 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v70 - v72) >> 3 > v163) {
      unint64_t v163 = (v70 - v72) >> 3;
    }
    if ((unint64_t)(v70 - v72) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v164 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v164 = v163;
    }
    if (v164) {
      unint64_t v164 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v164);
    }
    unsigned int v165 = (void *)(v164 + 16 * v162);
    *unsigned int v165 = @"tau_Tmg";
    v165[1] = 5;
    uint64_t v161 = (long long *)(v165 + 2);
    if (v155 == v72) {
      goto LABEL_409;
    }
    do
    {
      *((_OWORD *)v165 - 1) = *((_OWORD *)v155 - 1);
      v165 -= 2;
      v155 -= 16;
    }
    while (v155 != v72);
    if (v72) {
LABEL_409:
    }
      operator delete(v72);
    uint64_t v72 = (char *)v165;
  }
  else
  {
    *(void *)float v155 = @"tau_Tmg";
    *((void *)v155 + 1) = 5;
    uint64_t v161 = (long long *)(v155 + 16);
  }
  if (v60 != __p)
  {
    if ((unint64_t)((v60 - __p) >> 4) <= 1) {
      uint64_t v166 = 1;
    }
    else {
      uint64_t v166 = (v60 - __p) >> 4;
    }
    uint64_t v167 = (unsigned int *)(__p + 8);
    do
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      v320 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, Element, *((__CFString **)v167 - 1), *v167, *(CACFDictionary **)a2);
      v167 += 4;
      --v166;
    }
    while (v166);
  }
  memset(v321, 0, sizeof(v321));
  std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(v321, (long long *)v72, v161, ((char *)v161 - v72) >> 4);
  int v316 = AUSpeakerProtectionV3::SetChannelParamsFromPlist((uint64_t)this, v321, (const __CFDictionary **)a2);
  if (v321[0])
  {
    v321[1] = v321[0];
    operator delete(v321[0]);
  }
  uint64_t v169 = spp3Subsystem();
  if (v169)
  {
    if (*(unsigned char *)(v169 + 8))
    {
      BOOL v170 = *(NSObject **)v169;
      if (*(void *)v169)
      {
        if (os_log_type_enabled(*(os_log_t *)v169, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3443;
          _os_log_impl(&dword_1BB0CE000, v170, OS_LOG_TYPE_DEBUG, "%25s:%-5d InitCLParamsFromPlistV8", buf, 0x12u);
        }
      }
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v329 = 257;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)a2, @"CLParams", (CACFDictionary *)&Mutable);
  if (Mutable)
  {
    int v171 = AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(this, &Mutable);
    uint64_t v172 = *((void *)this + 85);
    uint64_t v173 = *((void *)this + 84);
    if (v172 != v173)
    {
      uint64_t v174 = 0;
      while (1)
      {
        uint64_t v175 = *(void *)(v173 + 8 * v174);
        if (*(void *)(v175 + 56)) {
          break;
        }
LABEL_447:
        if (++v174 >= (unint64_t)((v172 - v173) >> 3)) {
          goto LABEL_448;
        }
      }
      unint64_t v176 = operator new(0x10uLL);
      void *v176 = @"mu_Re";
      v176[1] = 37;
      uint64_t v177 = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
      uint64_t v179 = v178;
      v177[2] = @"mu_LeUni";
      v177[3] = 38;
      *(_OWORD *)uint64_t v177 = *(_OWORD *)v176;
      operator delete(v176);
      if (v179 < 3)
      {
        uint64_t v181 = 3;
        if ((unint64_t)((16 * v179) >> 3) > 3) {
          uint64_t v181 = (16 * v179) >> 3;
        }
        if ((unint64_t)(16 * v179) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v182 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v182 = v181;
        }
        if (v182) {
          unint64_t v182 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v182);
        }
        uint64_t v183 = 0;
        unint64_t v184 = v182 + 32;
        *(void *)(v182 + 32) = @"mu_Mechanical";
        *(void *)(v182 + 40) = 39;
        int v180 = (void *)(v182 + 48);
        do
        {
          *(_OWORD *)(v184 + v183 * 8 - 16) = *(_OWORD *)&v177[v183 + 2];
          v183 -= 2;
        }
        while (v183 != -4);
        if (v177) {
          operator delete(v177);
        }
        uint64_t v177 = (void *)(v184 - 32);
        if ((void *)(v184 - 32) == v180)
        {
LABEL_445:
          operator delete(v177);
LABEL_446:
          uint64_t v172 = *((void *)this + 85);
          uint64_t v173 = *((void *)this + 84);
          goto LABEL_447;
        }
      }
      else
      {
        v177[4] = @"mu_Mechanical";
        v177[5] = 39;
        int v180 = v177 + 6;
      }
      int v185 = v177;
      do
      {
        unsigned int v186 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v174);
        v171 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v186, (__CFString *)*v185, *((_DWORD *)v185 + 2), **(CACFDictionary ***)(v175 + 56));
        v185 += 2;
      }
      while (v185 != v180);
      if (!v177) {
        goto LABEL_446;
      }
      goto LABEL_445;
    }
LABEL_448:
    CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    __int16 v327 = 257;
    CACFDictionary::GetCACFArray(&Mutable, @"ChannelSpecificParams", (CACFArray *)&theArray);
    int Count = (int)theArray;
    if (theArray) {
      int Count = CFArrayGetCount(theArray);
    }
    if (Count == *((_DWORD *)this + 158))
    {
      *(void *)std::string buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(_WORD *)&uint8_t buf[8] = 257;
      if (*((_DWORD *)this + 158))
      {
        unint64_t v188 = 0;
        do
        {
          CACFArray::GetCACFDictionary(&theArray, v188, (CACFDictionary *)buf);
          *(_DWORD *)uint64_t v330 = -1;
          CACFDictionary::GetSInt32(*(uint64_t *)buf, @"ChannelID", (int *)v330);
          if (v188 == *(int *)v330)
          {
            unsigned int v189 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v188);
            int inited = AUSpeakerProtectionV3::InitCLParamsFromPlist(this, v189, (CACFDictionary **)buf);
            LODWORD(v324[0]) = 0;
            v171 += inited;
            if (CACFDictionary::GetSInt32(*(uint64_t *)buf, @"DisplacementProtectionType", (int *)v324))
            {
              uint64_t v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(1uLL);
              int v193 = v191;
              *(void *)uint64_t v191 = @"DisplacementProtectionType";
              *((void *)v191 + 1) = 42;
              int v194 = v191 + 16;
              if (LODWORD(v324[0]) == 4 || LODWORD(v324[0]) == 1)
              {
                uint64_t v195 = &v191[16 * v192];
                if (v192 < 2)
                {
                  uint64_t v197 = 2;
                  if ((unint64_t)((16 * v192) >> 3) > 2) {
                    uint64_t v197 = (16 * v192) >> 3;
                  }
                  int v198 = (char *)((unint64_t)(16 * v192) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v197);
                  if (v198) {
                    int v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v198);
                  }
                  else {
                    uint64_t v199 = 0;
                  }
                  uint64_t v200 = 0;
                  uint64_t v195 = &v198[16 * v199];
                  *((void *)v198 + 2) = @"ConvoyPeakFinderThresholdUpper";
                  *((void *)v198 + 3) = 47;
                  int v196 = v198 + 32;
                  do
                  {
                    *(_OWORD *)&v198[v200] = *(_OWORD *)&v193[v200];
                    v200 -= 16;
                  }
                  while (v200 != -16);
                  char v201 = v198;
                  operator delete(v193);
                  int v193 = v201;
                }
                else
                {
                  *((void *)v191 + 2) = @"ConvoyPeakFinderThresholdUpper";
                  *((void *)v191 + 3) = 47;
                  int v196 = v191 + 32;
                }
                if (v196 >= v195)
                {
                  uint64_t v203 = (v196 - v193) >> 4;
                  unint64_t v204 = v203 + 1;
                  if ((unint64_t)(v203 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v204) {
                    unint64_t v204 = (v195 - v193) >> 3;
                  }
                  uint64_t v205 = (char *)((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v204);
                  if (v205) {
                    uint64_t v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v205);
                  }
                  else {
                    uint64_t v206 = 0;
                  }
                  int v207 = &v205[16 * v203];
                  *(void *)int v207 = @"ConvoyPeakFinderThresholdLower";
                  *((void *)v207 + 1) = 48;
                  if (v196 == v193)
                  {
                    int v209 = &v205[16 * v203];
                  }
                  else
                  {
                    __int16 v208 = &v205[16 * v203];
                    do
                    {
                      int v209 = v208 - 16;
                      *((_OWORD *)v208 - 1) = *((_OWORD *)v196 - 1);
                      v196 -= 16;
                      v208 -= 16;
                    }
                    while (v196 != v193);
                  }
                  uint64_t v195 = &v205[16 * v206];
                  uint64_t v202 = v207 + 16;
                  operator delete(v193);
                  int v193 = v209;
                }
                else
                {
                  *(void *)int v196 = @"ConvoyPeakFinderThresholdLower";
                  *((void *)v196 + 1) = 48;
                  uint64_t v202 = v196 + 16;
                }
                if (v202 >= v195)
                {
                  uint64_t v211 = (v202 - v193) >> 4;
                  unint64_t v212 = v211 + 1;
                  if ((unint64_t)(v211 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v212) {
                    unint64_t v212 = (v195 - v193) >> 3;
                  }
                  __int16 v213 = (char *)((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v212);
                  if (v213) {
                    __int16 v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v213);
                  }
                  else {
                    uint64_t v214 = 0;
                  }
                  uint64_t v215 = &v213[16 * v211];
                  *(void *)uint64_t v215 = @"ConvoyPeakDetectorAtkTime";
                  *((void *)v215 + 1) = 49;
                  if (v202 == v193)
                  {
                    float v217 = &v213[16 * v211];
                  }
                  else
                  {
                    char v216 = &v213[16 * v211];
                    do
                    {
                      float v217 = v216 - 16;
                      *((_OWORD *)v216 - 1) = *((_OWORD *)v202 - 1);
                      v202 -= 16;
                      v216 -= 16;
                    }
                    while (v202 != v193);
                  }
                  uint64_t v195 = &v213[16 * v214];
                  __int16 v210 = v215 + 16;
                  operator delete(v193);
                  int v193 = v217;
                }
                else
                {
                  *(void *)uint64_t v202 = @"ConvoyPeakDetectorAtkTime";
                  *((void *)v202 + 1) = 49;
                  __int16 v210 = v202 + 16;
                }
                if (v210 >= v195)
                {
                  uint64_t v219 = (v210 - v193) >> 4;
                  unint64_t v220 = v219 + 1;
                  if ((unint64_t)(v219 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v220) {
                    unint64_t v220 = (v195 - v193) >> 3;
                  }
                  uint64_t v221 = (char *)((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v220);
                  if (v221) {
                    uint64_t v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>((unint64_t)v221);
                  }
                  else {
                    uint64_t v222 = 0;
                  }
                  float v223 = &v221[16 * v219];
                  *(void *)float v223 = @"ConvoyPeakDetectorRelTime";
                  *((void *)v223 + 1) = 50;
                  if (v210 == v193)
                  {
                    int v225 = &v221[16 * v219];
                  }
                  else
                  {
                    uint64_t v224 = &v221[16 * v219];
                    do
                    {
                      int v225 = v224 - 16;
                      *((_OWORD *)v224 - 1) = *((_OWORD *)v210 - 1);
                      v210 -= 16;
                      v224 -= 16;
                    }
                    while (v210 != v193);
                  }
                  uint64_t v195 = &v221[16 * v222];
                  uint64_t v218 = v223 + 16;
                  operator delete(v193);
                  int v193 = v225;
                }
                else
                {
                  *(void *)__int16 v210 = @"ConvoyPeakDetectorRelTime";
                  *((void *)v210 + 1) = 50;
                  uint64_t v218 = v210 + 16;
                }
                if (v218 >= v195)
                {
                  uint64_t v227 = (v218 - v193) >> 4;
                  unint64_t v228 = v227 + 1;
                  if ((unint64_t)(v227 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v228) {
                    unint64_t v228 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v229 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v229 = v228;
                  }
                  if (v229) {
                    unint64_t v229 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v229);
                  }
                  else {
                    uint64_t v230 = 0;
                  }
                  uint64_t v231 = (void *)(v229 + 16 * v227);
                  uint64_t v195 = (char *)(v229 + 16 * v230);
                  *uint64_t v231 = @"ConvoyNormFactorCapUpper";
                  v231[1] = 51;
                  uint64_t v226 = (char *)(v231 + 2);
                  if (v218 == v193) {
                    goto LABEL_536;
                  }
                  do
                  {
                    *((_OWORD *)v231 - 1) = *((_OWORD *)v218 - 1);
                    v231 -= 2;
                    v218 -= 16;
                  }
                  while (v218 != v193);
                  if (v193) {
LABEL_536:
                  }
                    operator delete(v193);
                  int v193 = (char *)v231;
                }
                else
                {
                  *(void *)uint64_t v218 = @"ConvoyNormFactorCapUpper";
                  *((void *)v218 + 1) = 51;
                  uint64_t v226 = v218 + 16;
                }
                if (v226 >= v195)
                {
                  uint64_t v233 = (v226 - v193) >> 4;
                  unint64_t v234 = v233 + 1;
                  if ((unint64_t)(v233 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v234) {
                    unint64_t v234 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v235 = v234;
                  }
                  if (v235) {
                    unint64_t v235 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v235);
                  }
                  else {
                    uint64_t v236 = 0;
                  }
                  uint64_t v237 = (void *)(v235 + 16 * v233);
                  uint64_t v195 = (char *)(v235 + 16 * v236);
                  *uint64_t v237 = @"ConvoyNormFactorCapLower";
                  v237[1] = 52;
                  char v232 = (char *)(v237 + 2);
                  if (v226 == v193) {
                    goto LABEL_552;
                  }
                  do
                  {
                    *((_OWORD *)v237 - 1) = *((_OWORD *)v226 - 1);
                    v237 -= 2;
                    v226 -= 16;
                  }
                  while (v226 != v193);
                  if (v193) {
LABEL_552:
                  }
                    operator delete(v193);
                  int v193 = (char *)v237;
                }
                else
                {
                  *(void *)uint64_t v226 = @"ConvoyNormFactorCapLower";
                  *((void *)v226 + 1) = 52;
                  char v232 = v226 + 16;
                }
                if (v232 >= v195)
                {
                  uint64_t v239 = (v232 - v193) >> 4;
                  unint64_t v240 = v239 + 1;
                  if ((unint64_t)(v239 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v240) {
                    unint64_t v240 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v241 = v240;
                  }
                  if (v241) {
                    unint64_t v241 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v241);
                  }
                  else {
                    uint64_t v242 = 0;
                  }
                  uint64_t v243 = (void *)(v241 + 16 * v239);
                  uint64_t v195 = (char *)(v241 + 16 * v242);
                  *uint64_t v243 = @"ConvoyNormFactorAttack";
                  v243[1] = 53;
                  float v238 = (char *)(v243 + 2);
                  if (v232 == v193) {
                    goto LABEL_568;
                  }
                  do
                  {
                    *((_OWORD *)v243 - 1) = *((_OWORD *)v232 - 1);
                    v243 -= 2;
                    v232 -= 16;
                  }
                  while (v232 != v193);
                  if (v193) {
LABEL_568:
                  }
                    operator delete(v193);
                  int v193 = (char *)v243;
                }
                else
                {
                  *(void *)char v232 = @"ConvoyNormFactorAttack";
                  *((void *)v232 + 1) = 53;
                  float v238 = v232 + 16;
                }
                if (v238 >= v195)
                {
                  uint64_t v245 = (v238 - v193) >> 4;
                  unint64_t v246 = v245 + 1;
                  if ((unint64_t)(v245 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v246) {
                    unint64_t v246 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v247 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v247 = v246;
                  }
                  if (v247) {
                    unint64_t v247 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v247);
                  }
                  else {
                    uint64_t v248 = 0;
                  }
                  uint64_t v249 = (void *)(v247 + 16 * v245);
                  uint64_t v195 = (char *)(v247 + 16 * v248);
                  *uint64_t v249 = @"ConvoyNormFactorRelease";
                  v249[1] = 54;
                  float v244 = (char *)(v249 + 2);
                  if (v238 == v193) {
                    goto LABEL_584;
                  }
                  do
                  {
                    *((_OWORD *)v249 - 1) = *((_OWORD *)v238 - 1);
                    v249 -= 2;
                    v238 -= 16;
                  }
                  while (v238 != v193);
                  if (v193) {
LABEL_584:
                  }
                    operator delete(v193);
                  int v193 = (char *)v249;
                }
                else
                {
                  *(void *)float v238 = @"ConvoyNormFactorRelease";
                  *((void *)v238 + 1) = 54;
                  float v244 = v238 + 16;
                }
                if (v244 >= v195)
                {
                  uint64_t v251 = (v244 - v193) >> 4;
                  unint64_t v252 = v251 + 1;
                  if ((unint64_t)(v251 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v252) {
                    unint64_t v252 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v253 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v253 = v252;
                  }
                  if (v253) {
                    unint64_t v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v253);
                  }
                  else {
                    uint64_t v254 = 0;
                  }
                  float v255 = (void *)(v253 + 16 * v251);
                  uint64_t v195 = (char *)(v253 + 16 * v254);
                  *float v255 = @"ConvoyPeakRatioPosBlockThreshold";
                  v255[1] = 55;
                  float v250 = (char *)(v255 + 2);
                  if (v244 == v193) {
                    goto LABEL_600;
                  }
                  do
                  {
                    *((_OWORD *)v255 - 1) = *((_OWORD *)v244 - 1);
                    v255 -= 2;
                    v244 -= 16;
                  }
                  while (v244 != v193);
                  if (v193) {
LABEL_600:
                  }
                    operator delete(v193);
                  int v193 = (char *)v255;
                }
                else
                {
                  *(void *)float v244 = @"ConvoyPeakRatioPosBlockThreshold";
                  *((void *)v244 + 1) = 55;
                  float v250 = v244 + 16;
                }
                if (v250 >= v195)
                {
                  uint64_t v257 = (v250 - v193) >> 4;
                  unint64_t v258 = v257 + 1;
                  if ((unint64_t)(v257 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v258) {
                    unint64_t v258 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v259 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v259 = v258;
                  }
                  if (v259) {
                    unint64_t v259 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v259);
                  }
                  else {
                    uint64_t v260 = 0;
                  }
                  float v261 = (void *)(v259 + 16 * v257);
                  uint64_t v195 = (char *)(v259 + 16 * v260);
                  *float v261 = @"ConvoyPeakRatioNegBlockThreshold";
                  v261[1] = 56;
                  uint64_t v256 = (char *)(v261 + 2);
                  if (v250 == v193) {
                    goto LABEL_616;
                  }
                  do
                  {
                    *((_OWORD *)v261 - 1) = *((_OWORD *)v250 - 1);
                    v261 -= 2;
                    v250 -= 16;
                  }
                  while (v250 != v193);
                  if (v193) {
LABEL_616:
                  }
                    operator delete(v193);
                  int v193 = (char *)v261;
                }
                else
                {
                  *(void *)float v250 = @"ConvoyPeakRatioNegBlockThreshold";
                  *((void *)v250 + 1) = 56;
                  uint64_t v256 = v250 + 16;
                }
                if (v256 >= v195)
                {
                  uint64_t v263 = (v256 - v193) >> 4;
                  unint64_t v264 = v263 + 1;
                  if ((unint64_t)(v263 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v264) {
                    unint64_t v264 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v265 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v265 = v264;
                  }
                  if (v265) {
                    unint64_t v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v265);
                  }
                  else {
                    uint64_t v266 = 0;
                  }
                  float v267 = (void *)(v265 + 16 * v263);
                  uint64_t v195 = (char *)(v265 + 16 * v266);
                  *float v267 = @"ConvoyMinExcursion";
                  v267[1] = 57;
                  uint64_t v262 = (char *)(v267 + 2);
                  if (v256 == v193) {
                    goto LABEL_632;
                  }
                  do
                  {
                    *((_OWORD *)v267 - 1) = *((_OWORD *)v256 - 1);
                    v267 -= 2;
                    v256 -= 16;
                  }
                  while (v256 != v193);
                  if (v193) {
LABEL_632:
                  }
                    operator delete(v193);
                  int v193 = (char *)v267;
                }
                else
                {
                  *(void *)uint64_t v256 = @"ConvoyMinExcursion";
                  *((void *)v256 + 1) = 57;
                  uint64_t v262 = v256 + 16;
                }
                if (v262 >= v195)
                {
                  uint64_t v269 = (v262 - v193) >> 4;
                  unint64_t v270 = v269 + 1;
                  if ((unint64_t)(v269 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v270) {
                    unint64_t v270 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v271 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v271 = v270;
                  }
                  if (v271) {
                    unint64_t v271 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v271);
                  }
                  else {
                    uint64_t v272 = 0;
                  }
                  float v273 = (void *)(v271 + 16 * v269);
                  uint64_t v195 = (char *)(v271 + 16 * v272);
                  *float v273 = @"ConvoyMaxExcursion";
                  v273[1] = 58;
                  uint64_t v268 = (char *)(v273 + 2);
                  if (v262 == v193) {
                    goto LABEL_648;
                  }
                  do
                  {
                    *((_OWORD *)v273 - 1) = *((_OWORD *)v262 - 1);
                    v273 -= 2;
                    v262 -= 16;
                  }
                  while (v262 != v193);
                  if (v193) {
LABEL_648:
                  }
                    operator delete(v193);
                  int v193 = (char *)v273;
                }
                else
                {
                  *(void *)uint64_t v262 = @"ConvoyMaxExcursion";
                  *((void *)v262 + 1) = 58;
                  uint64_t v268 = v262 + 16;
                }
                if (v268 >= v195)
                {
                  uint64_t v275 = (v268 - v193) >> 4;
                  unint64_t v276 = v275 + 1;
                  if ((unint64_t)(v275 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v276) {
                    unint64_t v276 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v277 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v277 = v276;
                  }
                  if (v277) {
                    unint64_t v277 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v277);
                  }
                  else {
                    uint64_t v278 = 0;
                  }
                  float v279 = (void *)(v277 + 16 * v275);
                  uint64_t v195 = (char *)(v277 + 16 * v278);
                  void *v279 = @"ConvoyRelXLimUpper";
                  v279[1] = 59;
                  uint64_t v274 = (char *)(v279 + 2);
                  if (v268 == v193) {
                    goto LABEL_664;
                  }
                  do
                  {
                    *((_OWORD *)v279 - 1) = *((_OWORD *)v268 - 1);
                    v279 -= 2;
                    v268 -= 16;
                  }
                  while (v268 != v193);
                  if (v193) {
LABEL_664:
                  }
                    operator delete(v193);
                  int v193 = (char *)v279;
                }
                else
                {
                  *(void *)uint64_t v268 = @"ConvoyRelXLimUpper";
                  *((void *)v268 + 1) = 59;
                  uint64_t v274 = v268 + 16;
                }
                if (v274 >= v195)
                {
                  uint64_t v281 = (v274 - v193) >> 4;
                  unint64_t v282 = v281 + 1;
                  if ((unint64_t)(v281 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v282) {
                    unint64_t v282 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v283 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v283 = v282;
                  }
                  if (v283) {
                    unint64_t v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v283);
                  }
                  else {
                    uint64_t v284 = 0;
                  }
                  unint64_t v285 = (void *)(v283 + 16 * v281);
                  uint64_t v195 = (char *)(v283 + 16 * v284);
                  *unint64_t v285 = @"ConvoyRelXLimLower";
                  v285[1] = 60;
                  uint64_t v280 = (char *)(v285 + 2);
                  if (v274 == v193) {
                    goto LABEL_680;
                  }
                  do
                  {
                    *((_OWORD *)v285 - 1) = *((_OWORD *)v274 - 1);
                    v285 -= 2;
                    v274 -= 16;
                  }
                  while (v274 != v193);
                  if (v193) {
LABEL_680:
                  }
                    operator delete(v193);
                  int v193 = (char *)v285;
                }
                else
                {
                  *(void *)uint64_t v274 = @"ConvoyRelXLimLower";
                  *((void *)v274 + 1) = 60;
                  uint64_t v280 = v274 + 16;
                }
                if (v280 >= v195)
                {
                  uint64_t v287 = (v280 - v193) >> 4;
                  unint64_t v288 = v287 + 1;
                  if ((unint64_t)(v287 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v288) {
                    unint64_t v288 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v289 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v289 = v288;
                  }
                  if (v289) {
                    unint64_t v289 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v289);
                  }
                  else {
                    uint64_t v290 = 0;
                  }
                  uint64_t v291 = (void *)(v289 + 16 * v287);
                  uint64_t v195 = (char *)(v289 + 16 * v290);
                  *uint64_t v291 = @"ConvoyPeakRatiosInWindowCountThreshold";
                  v291[1] = 61;
                  int v286 = (char *)(v291 + 2);
                  if (v280 == v193) {
                    goto LABEL_696;
                  }
                  do
                  {
                    *((_OWORD *)v291 - 1) = *((_OWORD *)v280 - 1);
                    v291 -= 2;
                    v280 -= 16;
                  }
                  while (v280 != v193);
                  if (v193) {
LABEL_696:
                  }
                    operator delete(v193);
                  int v193 = (char *)v291;
                }
                else
                {
                  *(void *)uint64_t v280 = @"ConvoyPeakRatiosInWindowCountThreshold";
                  *((void *)v280 + 1) = 61;
                  int v286 = v280 + 16;
                }
                if (v286 >= v195)
                {
                  uint64_t v293 = (v286 - v193) >> 4;
                  unint64_t v294 = v293 + 1;
                  if ((unint64_t)(v293 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v294) {
                    unint64_t v294 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v295 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v295 = v294;
                  }
                  if (v295) {
                    unint64_t v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v295);
                  }
                  else {
                    uint64_t v296 = 0;
                  }
                  float v297 = (void *)(v295 + 16 * v293);
                  uint64_t v195 = (char *)(v295 + 16 * v296);
                  *float v297 = @"ConvoyNormFactorThreshold";
                  v297[1] = 62;
                  float v292 = (char *)(v297 + 2);
                  if (v286 == v193) {
                    goto LABEL_712;
                  }
                  do
                  {
                    *((_OWORD *)v297 - 1) = *((_OWORD *)v286 - 1);
                    v297 -= 2;
                    v286 -= 16;
                  }
                  while (v286 != v193);
                  if (v193) {
LABEL_712:
                  }
                    operator delete(v193);
                  int v193 = (char *)v297;
                }
                else
                {
                  *(void *)int v286 = @"ConvoyNormFactorThreshold";
                  *((void *)v286 + 1) = 62;
                  float v292 = v286 + 16;
                }
                if (v292 >= v195)
                {
                  uint64_t v298 = (v292 - v193) >> 4;
                  unint64_t v299 = v298 + 1;
                  if ((unint64_t)(v298 + 1) >> 60) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v195 - v193) >> 3 > v299) {
                    unint64_t v299 = (v195 - v193) >> 3;
                  }
                  if ((unint64_t)(v195 - v193) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v300 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v300 = v299;
                  }
                  if (v300) {
                    unint64_t v300 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v300);
                  }
                  BOOL v301 = (void *)(v300 + 16 * v298);
                  void *v301 = @"ConvoyBufferDirtyCountThreshold_ms";
                  v301[1] = 63;
                  int v194 = (char *)(v301 + 2);
                  if (v292 == v193) {
                    goto LABEL_727;
                  }
                  do
                  {
                    *((_OWORD *)v301 - 1) = *((_OWORD *)v292 - 1);
                    v301 -= 2;
                    v292 -= 16;
                  }
                  while (v292 != v193);
                  if (v193) {
LABEL_727:
                  }
                    operator delete(v193);
                  int v193 = (char *)v301;
                }
                else
                {
                  *(void *)float v292 = @"ConvoyBufferDirtyCountThreshold_ms";
                  *((void *)v292 + 1) = 63;
                  int v194 = v292 + 16;
                }
                if (v193 == v194) {
                  goto LABEL_733;
                }
              }
              BOOL v302 = v193;
              do
              {
                float v303 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v188);
                v171 += AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, v303, *(__CFString **)v302, *((_DWORD *)v302 + 2), *(CACFDictionary **)buf);
                v302 += 16;
              }
              while (v302 != v194);
              if (v193) {
LABEL_733:
              }
                operator delete(v193);
            }
          }
          else
          {
            ++v171;
          }
          ++v188;
        }
        while (v188 < *((unsigned int *)this + 158));
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    }
    if (v171)
    {
      CACFArray::~CACFArray((CACFArray *)&theArray);
      goto LABEL_759;
    }
    unint64_t v306 = (uint64_t *)*((void *)this + 84);
    uint64_t v307 = (uint64_t *)*((void *)this + 85);
    if (v306 == v307)
    {
LABEL_755:
      CACFArray::~CACFArray((CACFArray *)&theArray);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      LOBYTE(v313) = 1;
      goto LABEL_763;
    }
    int v308 = 0;
    uint64_t v318 = *MEMORY[0x1E4FBA418];
    uint64_t v309 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      clsp::ClosedLoopParameters::dump(*v306, buf);
      unint64_t v310 = (NSObject **)spp3Subsystem();
      if (!v310) {
        break;
      }
      int v311 = *v310;
      if (*v310) {
        goto LABEL_747;
      }
LABEL_752:
      *(void *)std::string buf = v318;
      *(void *)&buf[*(void *)(v318 - 24)] = v309;
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (v340 < 0) {
        operator delete(v339);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C185D210](v341);
      ++v306;
      ++v308;
      if (v306 == v307) {
        goto LABEL_755;
      }
    }
    int v311 = MEMORY[0x1E4F14500];
LABEL_747:
    if (os_log_type_enabled(v311, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], v324);
      double v312 = v324;
      if (v325 < 0) {
        double v312 = (void **)v324[0];
      }
      *(_DWORD *)uint64_t v330 = 136315906;
      int v331 = "AUSpeakerProtectionV3.cpp";
      __int16 v332 = 1024;
      int v333 = 3525;
      __int16 v334 = 1024;
      int v335 = v308;
      __int16 v336 = 2080;
      int v337 = v312;
      _os_log_impl(&dword_1BB0CE000, v311, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v330, 0x22u);
      if (v325 < 0) {
        operator delete(v324[0]);
      }
    }
    goto LABEL_752;
  }
  float v304 = (NSObject **)spp3Subsystem();
  if (!v304)
  {
    v305 = MEMORY[0x1E4F14500];
LABEL_757:
    if (os_log_type_enabled(v305, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3450;
      _os_log_impl(&dword_1BB0CE000, v305, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get CLParams Key", buf, 0x12u);
    }
    goto LABEL_759;
  }
  v305 = *v304;
  if (*v304) {
    goto LABEL_757;
  }
LABEL_759:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  int v313 = *((_DWORD *)this + 158);
  if (v313)
  {
    unsigned int v314 = 0;
    do
      AUSpeakerProtectionV3::SetClosedLoopEnabled(this, v314++, 0);
    while (v314 < *((_DWORD *)this + 158));
    LOBYTE(v313) = 0;
  }
LABEL_763:
  *((unsigned char *)this + 529) = v313;
  if (!(v320 + v316))
  {
    *((unsigned char *)this + 528) = 1;
    ausdk::AUScope::SetNumberOfElements((AUSpeakerProtectionV3 *)((char *)this + 792), *((_DWORD *)this + 158));
    if (!v72) {
      goto LABEL_766;
    }
    goto LABEL_765;
  }
  unsigned int v317 = -50;
  if (v72) {
LABEL_765:
  }
    operator delete(v72);
LABEL_766:
  if (__p) {
    operator delete(__p);
  }
  return v317;
}

void sub_1BB652318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a24);
  if (v33) {
    operator delete(v33);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void AUSpeakerProtectionV3::InitParamsFromPlistV9(AUSpeakerProtectionV3 *this, CFTypeRef cf)
{
  uint64_t v1047 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v1001, cf);
    if (v1001)
    {
      *((_DWORD *)this + 158) = applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>((const __CFDictionary *)v1001, @"NumChannels");
      if (!v1001)
      {
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      CFNumberRef v3 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>((CFDictionaryRef)v1001, @"ConvoyDataSourceOverride");
      if (v3)
      {
        uint64_t v4 = applesauce::CF::convert_as<unsigned int,0>(v3);
        if ((v4 & 0xFF00000000) != 0) {
          int v5 = v4;
        }
        else {
          int v5 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
      *((_DWORD *)this + 180) = v5;
      clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(*((_DWORD *)this + 158), *((_DWORD *)this + 196));
      if (!v1001) {
        goto LABEL_2052;
      }
      float __val = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_LookaheadDelay_ms::key);
      if (!v1001) {
        goto LABEL_2052;
      }
      float v979 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_SafeTlim::key);
      if (!v1001
        || (v976 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_SafeTlimTimeMin::key), !v1001)|| (v974 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_SafeTlimOffset::key), !v1001)|| (v971 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_AmbientTemp::key), !v1001)|| (v969 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_GainAttackTime_s::key), !v1001)|| (float v966 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Thermal_GainReleaseTime_s::key), !v1001)
        || (v964 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Disp_PeakAttackTime_s::key), !v1001)|| (float v961 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Disp_PeakDecayTime_s::key), !v1001))
      {
LABEL_2052:
        v924 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v924, "Could not construct");
      }
      float v959 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1001, (const char **)clsp::plistV9::Disp_FBIntegrationTime_s::key);
      char v6 = (NSObject **)spp3Subsystem();
      if (v6)
      {
        int v7 = *v6;
        if (!*v6) {
          goto LABEL_25;
        }
      }
      else
      {
        int v7 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3835;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed the system plist params.", buf, 0x12u);
      }
LABEL_25:
      if (!v1001)
      {
        v925 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v925, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1039, (const __CFDictionary *)v1001);
      int v8 = *((_DWORD *)this + 158);
      if (v8)
      {
        long long v9 = 0;
        uint64_t v10 = 0;
        std::string __p = 0;
        unsigned int v11 = 0;
        while (1)
        {
          if (!v1039.__r_.__value_.__r.__words[0])
          {
            v903 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v903, "Could not construct");
          }
          std::to_string((std::string *)&v1046, v11);
          uint64_t v12 = std::string::insert((std::string *)&v1046, 0, "Channel", 7uLL);
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v12->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, (const __CFDictionary *)v1039.__r_.__value_.__l.__data_, (uint64_t)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v1046.__end_) < 0) {
            operator delete(v1046.__first_);
          }
          if (!cfa.__r_.__value_.__r.__words[0])
          {
            v904 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v904, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1046, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::OLThermalParamStruct::key);
          uint64_t v14 = (NSObject **)spp3Subsystem();
          if (v14)
          {
            unint64_t v15 = *v14;
            if (!*v14) {
              goto LABEL_40;
            }
          }
          else
          {
            unint64_t v15 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3784;
            *(_WORD *)&uint8_t buf[18] = 2080;
            *(void *)&buf[20] = "OL_thermal";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v11;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
          }
LABEL_40:
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v992 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::Rshunt::key);
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v987 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::Reb_ref::key);
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v16 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::Rampout::key);
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v17 = v16;
          float v18 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::T_sett_vc::key);
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v19 = v18;
          float v20 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::tau_Tvc::key);
          if (!v1046.__first_) {
            goto LABEL_2017;
          }
          float v21 = v20;
          float v22 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::T_sett_mg::key);
          if (!v1046.__first_
            || (float v23 = v22,
                float v24 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::tau_Tmg::key), !v1046.__first_)|| (v25 = v24, v26 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ThermalFFSpeedupFactor::key), !v1046.__first_)|| (v27 = v26, v28 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::HardTempLimitHeadroom::key), !v1046.__first_))
          {
LABEL_2017:
            v905 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v905, "Could not construct");
          }
          float v29 = v28;
          float v30 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::TemperatureLimit::key);
          if (v10 >= v9)
          {
            unint64_t v31 = 0x2E8BA2E8BA2E8BA3 * (v10 - __p) + 1;
            if (v31 > 0x5D1745D1745D174) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if (0x5D1745D1745D1746 * (v9 - __p) > v31) {
              unint64_t v31 = 0x5D1745D1745D1746 * (v9 - __p);
            }
            if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v9 - __p)) >= 0x2E8BA2E8BA2E8BALL) {
              unint64_t v32 = 0x5D1745D1745D174;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32 > 0x5D1745D1745D174) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v33 = (char *)operator new(44 * v32);
            unint64_t v34 = (unsigned int *)&v33[4 * (v10 - __p)];
            unsigned int *v34 = v11;
            *((float *)v34 + 1) = v992;
            *((float *)v34 + 2) = v987;
            *((float *)v34 + 3) = v17;
            *((float *)v34 + 4) = v19;
            *((float *)v34 + 5) = v21;
            *((float *)v34 + 6) = v23;
            *((float *)v34 + 7) = v25;
            *((float *)v34 + 8) = v27;
            *((float *)v34 + 9) = v29;
            *((float *)v34 + 10) = v30;
            if (v10 == __p)
            {
              uint16x4_t v39 = &v33[4 * (v10 - __p)];
              uint64_t v36 = __p;
            }
            else
            {
              unint64_t v35 = &v33[4 * (v10 - __p)];
              uint64_t v36 = __p;
              do
              {
                long long v37 = *(_OWORD *)(v10 - 11);
                long long v38 = *(_OWORD *)(v10 - 7);
                uint16x4_t v39 = v35 - 44;
                *((_OWORD *)v35 - 1) = *((_OWORD *)v10 - 1);
                *(_OWORD *)(v35 - 28) = v38;
                *(_OWORD *)(v35 - 44) = v37;
                v10 -= 11;
                v35 -= 44;
              }
              while (v10 != __p);
            }
            long long v9 = (unsigned int *)&v33[44 * v32];
            uint64_t v10 = v34 + 11;
            if (v36) {
              operator delete(v36);
            }
            std::string __p = (unsigned int *)v39;
          }
          else
          {
            *uint64_t v10 = v11;
            *((float *)v10 + 1) = v992;
            *((float *)v10 + 2) = v987;
            *((float *)v10 + 3) = v17;
            *((float *)v10 + 4) = v19;
            *((float *)v10 + 5) = v21;
            *((float *)v10 + 6) = v23;
            *((float *)v10 + 7) = v25;
            *((float *)v10 + 8) = v27;
            *((float *)v10 + 9) = v29;
            *((float *)v10 + 10) = v30;
            v10 += 11;
          }
          uint64_t v40 = (NSObject **)spp3Subsystem();
          if (!v40)
          {
            unint64_t v41 = MEMORY[0x1E4F14500];
LABEL_71:
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3789;
              *(_WORD *)&uint8_t buf[18] = 2080;
              *(void *)&buf[20] = "OL_thermal";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v11;
              _os_log_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
            }
            goto LABEL_73;
          }
          unint64_t v41 = *v40;
          if (*v40) {
            goto LABEL_71;
          }
LABEL_73:
          if (v1046.__first_) {
            CFRelease(v1046.__first_);
          }
          if (cfa.__r_.__value_.__r.__words[0]) {
            CFRelease(cfa.__r_.__value_.__l.__data_);
          }
          if (++v11 == v8) {
            goto LABEL_80;
          }
        }
      }
      uint64_t v10 = 0;
      std::string __p = 0;
LABEL_80:
      if (v1039.__r_.__value_.__r.__words[0]) {
        CFRelease(v1039.__r_.__value_.__l.__data_);
      }
      unint64_t v42 = (NSObject **)spp3Subsystem();
      if (v42)
      {
        uint64_t v43 = *v42;
        if (!*v42) {
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v43 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3840;
        _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all the per-speaker OL thermal params.", buf, 0x12u);
      }
LABEL_88:
      if (!v1001)
      {
        v926 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v926, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1039, (const __CFDictionary *)v1001);
      int v44 = *((_DWORD *)this + 158);
      if (v44)
      {
        __int16 v45 = 0;
        int v46 = 0;
        v993 = 0;
        unsigned int v47 = 0;
        while (1)
        {
          if (!v1039.__r_.__value_.__r.__words[0])
          {
            v906 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v906, "Could not construct");
          }
          std::to_string((std::string *)&v1046, v47);
          unint64_t v48 = std::string::insert((std::string *)&v1046, 0, "Channel", 7uLL);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v48->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, (const __CFDictionary *)v1039.__r_.__value_.__l.__data_, (uint64_t)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v1046.__end_) < 0) {
            operator delete(v1046.__first_);
          }
          if (!cfa.__r_.__value_.__r.__words[0])
          {
            v907 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v907, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1046, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::OLDisplacementParamStruct::key);
          uint64_t v50 = (NSObject **)spp3Subsystem();
          if (v50)
          {
            uint64_t v51 = *v50;
            if (!*v50) {
              goto LABEL_103;
            }
          }
          else
          {
            uint64_t v51 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3784;
            *(_WORD *)&uint8_t buf[18] = 2080;
            *(void *)&buf[20] = "OL_disp";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v47;
            _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
          }
LABEL_103:
          if (!v1046.__first_) {
            goto LABEL_2020;
          }
          float v52 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::Q_d::key);
          if (!v1046.__first_) {
            goto LABEL_2020;
          }
          float v53 = v52;
          float v54 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::kt::key);
          if (!v1046.__first_) {
            goto LABEL_2020;
          }
          float v55 = v54;
          float v56 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ct::key);
          if (!v1046.__first_) {
            goto LABEL_2020;
          }
          float v57 = v56;
          float v58 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::phi::key);
          if (!v1046.__first_
            || (float v59 = v58,
                float v60 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::x_lim::key), !v1046.__first_)|| (v61 = v60, v62 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ag::key), !v1046.__first_)|| (v63 = v62, v64 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::mt::key), !v1046.__first_))
          {
LABEL_2020:
            v908 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v908, "Could not construct");
          }
          float v65 = v64;
          float v66 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::g_bw::key);
          float v67 = v66;
          if (v46 >= (unsigned int *)v45)
          {
            unint64_t v68 = 0x8E38E38E38E38E39 * (v46 - v993) + 1;
            if (v68 > 0x71C71C71C71C71CLL) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((v45 - (char *)v993) >> 2) > v68) {
              unint64_t v68 = 0x1C71C71C71C71C72 * ((v45 - (char *)v993) >> 2);
            }
            if (0x8E38E38E38E38E39 * ((v45 - (char *)v993) >> 2) >= 0x38E38E38E38E38ELL) {
              unint64_t v69 = 0x71C71C71C71C71CLL;
            }
            else {
              unint64_t v69 = v68;
            }
            if (v69 > 0x71C71C71C71C71CLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v70 = (char *)operator new(36 * v69);
            int v71 = (unsigned int *)&v70[4 * (v46 - v993)];
            *int v71 = v47;
            *((float *)v71 + 1) = v53;
            *((float *)v71 + 2) = v55;
            *((float *)v71 + 3) = v57;
            *((float *)v71 + 4) = v59;
            *((float *)v71 + 5) = v61;
            *((float *)v71 + 6) = v63;
            *((float *)v71 + 7) = v65;
            *((float *)v71 + 8) = v67;
            if (v46 == v993)
            {
              uint64_t v76 = &v70[4 * (v46 - v993)];
              uint64_t v73 = v993;
            }
            else
            {
              uint64_t v72 = &v70[4 * (v46 - v993)];
              uint64_t v73 = v993;
              do
              {
                long long v74 = *(_OWORD *)(v46 - 9);
                long long v75 = *(_OWORD *)(v46 - 5);
                uint64_t v76 = v72 - 36;
                *((_DWORD *)v72 - 1) = *(v46 - 1);
                *(_OWORD *)(v72 - 20) = v75;
                *(_OWORD *)(v72 - 36) = v74;
                v46 -= 9;
                v72 -= 36;
              }
              while (v46 != v993);
            }
            __int16 v45 = &v70[36 * v69];
            int v46 = v71 + 9;
            if (v73) {
              operator delete(v73);
            }
            v993 = (unsigned int *)v76;
          }
          else
          {
            *int v46 = v47;
            *((float *)v46 + 1) = v53;
            *((float *)v46 + 2) = v55;
            *((float *)v46 + 3) = v57;
            *((float *)v46 + 4) = v59;
            *((float *)v46 + 5) = v61;
            *((float *)v46 + 6) = v63;
            *((float *)v46 + 7) = v65;
            *((float *)v46 + 8) = v66;
            v46 += 9;
          }
          unint64_t v77 = (NSObject **)spp3Subsystem();
          if (!v77)
          {
            uint64_t v78 = MEMORY[0x1E4F14500];
LABEL_132:
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3789;
              *(_WORD *)&uint8_t buf[18] = 2080;
              *(void *)&buf[20] = "OL_disp";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v47;
              _os_log_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
            }
            goto LABEL_134;
          }
          uint64_t v78 = *v77;
          if (*v77) {
            goto LABEL_132;
          }
LABEL_134:
          if (v1046.__first_) {
            CFRelease(v1046.__first_);
          }
          if (cfa.__r_.__value_.__r.__words[0]) {
            CFRelease(cfa.__r_.__value_.__l.__data_);
          }
          if (++v47 == v44) {
            goto LABEL_141;
          }
        }
      }
      int v46 = 0;
      v993 = 0;
LABEL_141:
      if (v1039.__r_.__value_.__r.__words[0]) {
        CFRelease(v1039.__r_.__value_.__l.__data_);
      }
      unint64_t v79 = (NSObject **)spp3Subsystem();
      if (v79)
      {
        unint64_t v80 = *v79;
        if (!*v79) {
          goto LABEL_149;
        }
      }
      else
      {
        unint64_t v80 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3845;
        _os_log_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all the per-speaker OL displacement params.", buf, 0x12u);
      }
LABEL_149:
      uint64_t v81 = (NSObject **)spp3Subsystem();
      if (v81)
      {
        uint64_t v82 = *v81;
        if (!*v81) {
          goto LABEL_550;
        }
      }
      else
      {
        uint64_t v82 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_550;
      }
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_LookaheadDelay_ms");
      unint64_t v83 = std::string::append(&v1038, ": ", 2uLL);
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, __val);
      while ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
          goto LABEL_161;
        }
        uint64_t v85 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
        p_std::string cfa = &cfa;
LABEL_160:
        p_cfa->__r_.__value_.__s.__data_[v85] = 0;
      }
      p_std::string cfa = (std::string *)cfa.__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
      {
        uint64_t v85 = --cfa.__r_.__value_.__l.__size_;
        goto LABEL_160;
      }
LABEL_161:
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
      {
        if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
          goto LABEL_168;
        }
        std::__split_buffer<std::string>::pointer v87 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
        HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
        first = &v1046;
LABEL_167:
        v87->__r_.__value_.__s.__data_[(void)first] = 0;
      }
      first = v1046.__first_;
      if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
      {
        std::__split_buffer<std::string>::pointer v87 = --v1046.__begin_;
        goto LABEL_167;
      }
LABEL_168:
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v89 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v89 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v90 = HIBYTE(end);
      }
      else {
        std::string::size_type v90 = *((void *)&v1036 + 1);
      }
      unint64_t v91 = std::string::append(&v1039, v89, v90);
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v1007.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1007.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v93 = std::string::append(&v1007, ",\n", 2uLL);
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v1008.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1008.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_SafeTlim");
      double v95 = std::string::append(&v1038, ": ", 2uLL);
      long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v979);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v97 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v98 = &cfa;
          goto LABEL_188;
        }
        unint64_t v98 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v97 = --cfa.__r_.__value_.__l.__size_;
LABEL_188:
          v98->__r_.__value_.__s.__data_[v97] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v99 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v100 = &v1046;
          goto LABEL_195;
        }
        uint64_t v100 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v99 = --v1046.__begin_;
LABEL_195:
          v99->__r_.__value_.__s.__data_[(void)v100] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v101 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v101 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v102 = HIBYTE(end);
      }
      else {
        std::string::size_type v102 = *((void *)&v1036 + 1);
      }
      unint64_t v103 = std::string::append(&v1039, v101, v102);
      long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      v1011.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1011.__r_.__value_.__l.__data_ = v104;
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v105 = std::string::append(&v1011, ",\n", 2uLL);
      long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      v1012.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1012.__r_.__value_.__l.__data_ = v106;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v105->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_SafeTlimTimeMin");
      double v107 = std::string::append(&v1038, ": ", 2uLL);
      long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v976);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v109 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v110 = &cfa;
          goto LABEL_216;
        }
        unint64_t v110 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v109 = --cfa.__r_.__value_.__l.__size_;
LABEL_216:
          v110->__r_.__value_.__s.__data_[v109] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v111 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v112 = &v1046;
          goto LABEL_223;
        }
        uint64_t v112 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v111 = --v1046.__begin_;
LABEL_223:
          v111->__r_.__value_.__s.__data_[(void)v112] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        float v113 = (const std::string::value_type *)&v1036;
      }
      else {
        float v113 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v114 = HIBYTE(end);
      }
      else {
        std::string::size_type v114 = *((void *)&v1036 + 1);
      }
      unint64_t v115 = std::string::append(&v1039, v113, v114);
      long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
      v1014.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1014.__r_.__value_.__l.__data_ = v116;
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v117 = std::string::append(&v1014, ",\n", 2uLL);
      long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      v1015.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1015.__r_.__value_.__l.__data_ = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_SafeTlimOffset");
      float v119 = std::string::append(&v1038, ": ", 2uLL);
      long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v120;
      v119->__r_.__value_.__l.__size_ = 0;
      v119->__r_.__value_.__r.__words[2] = 0;
      v119->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v974);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v121 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v122 = &cfa;
          goto LABEL_244;
        }
        unint64_t v122 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v121 = --cfa.__r_.__value_.__l.__size_;
LABEL_244:
          v122->__r_.__value_.__s.__data_[v121] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v123 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v124 = &v1046;
          goto LABEL_251;
        }
        uint64_t v124 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v123 = --v1046.__begin_;
LABEL_251:
          v123->__r_.__value_.__s.__data_[(void)v124] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        float v125 = (const std::string::value_type *)&v1036;
      }
      else {
        float v125 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v126 = HIBYTE(end);
      }
      else {
        std::string::size_type v126 = *((void *)&v1036 + 1);
      }
      unint64_t v127 = std::string::append(&v1039, v125, v126);
      long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v1017.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1017.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v129 = std::string::append(&v1017, ",\n", 2uLL);
      long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v1018.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1018.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_AmbientTemp");
      int v131 = std::string::append(&v1038, ": ", 2uLL);
      long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v971);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v133 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v134 = &cfa;
          goto LABEL_272;
        }
        unint64_t v134 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v133 = --cfa.__r_.__value_.__l.__size_;
LABEL_272:
          v134->__r_.__value_.__s.__data_[v133] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v135 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v136 = &v1046;
          goto LABEL_279;
        }
        uint64_t v136 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v135 = --v1046.__begin_;
LABEL_279:
          v135->__r_.__value_.__s.__data_[(void)v136] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        float v137 = (const std::string::value_type *)&v1036;
      }
      else {
        float v137 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v138 = HIBYTE(end);
      }
      else {
        std::string::size_type v138 = *((void *)&v1036 + 1);
      }
      unint64_t v139 = std::string::append(&v1039, v137, v138);
      long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v1020.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1020.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v141 = std::string::append(&v1020, ",\n", 2uLL);
      long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      v1021.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1021.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_GainAttackTime_s");
      float v143 = std::string::append(&v1038, ": ", 2uLL);
      long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v144;
      v143->__r_.__value_.__l.__size_ = 0;
      v143->__r_.__value_.__r.__words[2] = 0;
      v143->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v969);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v145 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v146 = &cfa;
          goto LABEL_300;
        }
        unint64_t v146 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v145 = --cfa.__r_.__value_.__l.__size_;
LABEL_300:
          v146->__r_.__value_.__s.__data_[v145] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v147 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v148 = &v1046;
          goto LABEL_307;
        }
        uint64_t v148 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v147 = --v1046.__begin_;
LABEL_307:
          v147->__r_.__value_.__s.__data_[(void)v148] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v149 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v149 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v150 = HIBYTE(end);
      }
      else {
        std::string::size_type v150 = *((void *)&v1036 + 1);
      }
      unint64_t v151 = std::string::append(&v1039, v149, v150);
      long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
      v1023.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v152;
      v151->__r_.__value_.__l.__size_ = 0;
      v151->__r_.__value_.__r.__words[2] = 0;
      v151->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v153 = std::string::append(&v1023, ",\n", 2uLL);
      long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
      v1024.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v154;
      v153->__r_.__value_.__l.__size_ = 0;
      v153->__r_.__value_.__r.__words[2] = 0;
      v153->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Thermal_GainReleaseTime_s");
      float v155 = std::string::append(&v1038, ": ", 2uLL);
      long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v156;
      v155->__r_.__value_.__l.__size_ = 0;
      v155->__r_.__value_.__r.__words[2] = 0;
      v155->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v966);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v157 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v158 = &cfa;
          goto LABEL_328;
        }
        unint64_t v158 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v157 = --cfa.__r_.__value_.__l.__size_;
LABEL_328:
          v158->__r_.__value_.__s.__data_[v157] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v159 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v160 = &v1046;
          goto LABEL_335;
        }
        uint64_t v160 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v159 = --v1046.__begin_;
LABEL_335:
          v159->__r_.__value_.__s.__data_[(void)v160] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v161 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v161 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v162 = HIBYTE(end);
      }
      else {
        std::string::size_type v162 = *((void *)&v1036 + 1);
      }
      unint64_t v163 = std::string::append(&v1039, v161, v162);
      long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      v1026.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      unsigned int v165 = std::string::append(&v1026, ",\n", 2uLL);
      long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v1028.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1028.__r_.__value_.__l.__data_ = v166;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Disp_PeakAttackTime_s");
      uint64_t v167 = std::string::append(&v1038, ": ", 2uLL);
      long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v168;
      v167->__r_.__value_.__l.__size_ = 0;
      v167->__r_.__value_.__r.__words[2] = 0;
      v167->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v964);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v169 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          BOOL v170 = &cfa;
          goto LABEL_356;
        }
        BOOL v170 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v169 = --cfa.__r_.__value_.__l.__size_;
LABEL_356:
          v170->__r_.__value_.__s.__data_[v169] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v171 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          uint64_t v172 = &v1046;
          goto LABEL_363;
        }
        uint64_t v172 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v171 = --v1046.__begin_;
LABEL_363:
          v171->__r_.__value_.__s.__data_[(void)v172] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v173 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v173 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v174 = HIBYTE(end);
      }
      else {
        std::string::size_type v174 = *((void *)&v1036 + 1);
      }
      uint64_t v175 = std::string::append(&v1039, v173, v174);
      long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
      v1030.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1030.__r_.__value_.__l.__data_ = v176;
      v175->__r_.__value_.__l.__size_ = 0;
      v175->__r_.__value_.__r.__words[2] = 0;
      v175->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      uint64_t v177 = std::string::append(&v1030, ",\n", 2uLL);
      long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      v1031.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1031.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Disp_PeakDecayTime_s");
      uint64_t v179 = std::string::append(&v1038, ": ", 2uLL);
      long long v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v180;
      v179->__r_.__value_.__l.__size_ = 0;
      v179->__r_.__value_.__r.__words[2] = 0;
      v179->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v961);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v181 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          unint64_t v182 = &cfa;
          goto LABEL_384;
        }
        unint64_t v182 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v181 = --cfa.__r_.__value_.__l.__size_;
LABEL_384:
          v182->__r_.__value_.__s.__data_[v181] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v183 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          unint64_t v184 = &v1046;
          goto LABEL_391;
        }
        unint64_t v184 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v183 = --v1046.__begin_;
LABEL_391:
          v183->__r_.__value_.__s.__data_[(void)v184] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        int v185 = (const std::string::value_type *)&v1036;
      }
      else {
        int v185 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v186 = HIBYTE(end);
      }
      else {
        std::string::size_type v186 = *((void *)&v1036 + 1);
      }
      int v187 = std::string::append(&v1039, v185, v186);
      long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      v1034.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1034.__r_.__value_.__l.__data_ = v188;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      unsigned int v189 = std::string::append(&v1034, ",\n", 2uLL);
      long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v1035.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1035.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v1038, "Disp_FBIntegrationTime_s");
      uint64_t v191 = std::string::append(&v1038, ": ", 2uLL);
      long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      v1039.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&cfa, v959);
      while (2)
      {
        if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
            break;
          }
          uint64_t v193 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
          int v194 = &cfa;
          goto LABEL_412;
        }
        int v194 = (std::string *)cfa.__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
        {
          uint64_t v193 = --cfa.__r_.__value_.__l.__size_;
LABEL_412:
          v194->__r_.__value_.__s.__data_[v193] = 0;
          continue;
        }
        break;
      }
      *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
      v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
      memset(&cfa, 0, sizeof(cfa));
      while (2)
      {
        if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
        {
          if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
            break;
          }
          std::__split_buffer<std::string>::pointer v195 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
          HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
          int v196 = &v1046;
          goto LABEL_419;
        }
        int v196 = v1046.__first_;
        if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
        {
          std::__split_buffer<std::string>::pointer v195 = --v1046.__begin_;
LABEL_419:
          v195->__r_.__value_.__s.__data_[(void)v196] = 0;
          continue;
        }
        break;
      }
      long long v1036 = *(_OWORD *)&v1046.__first_;
      std::__split_buffer<std::string>::pointer end = v1046.__end_;
      if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cfa.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(end) >= 0) {
        uint64_t v197 = (const std::string::value_type *)&v1036;
      }
      else {
        uint64_t v197 = (const std::string::value_type *)v1036;
      }
      if (SHIBYTE(end) >= 0) {
        std::string::size_type v198 = HIBYTE(end);
      }
      else {
        std::string::size_type v198 = *((void *)&v1036 + 1);
      }
      uint64_t v199 = std::string::append(&v1039, v197, v198);
      long long v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
      int64_t v1033 = v199->__r_.__value_.__r.__words[2];
      long long v1032 = v200;
      v199->__r_.__value_.__l.__size_ = 0;
      v199->__r_.__value_.__r.__words[2] = 0;
      v199->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(end) < 0) {
        operator delete((void *)v1036);
      }
      if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1039.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1038.__r_.__value_.__l.__data_);
      }
      if (v1033 >= 0) {
        char v201 = (const std::string::value_type *)&v1032;
      }
      else {
        char v201 = (const std::string::value_type *)v1032;
      }
      if (v1033 >= 0) {
        std::string::size_type v202 = HIBYTE(v1033);
      }
      else {
        std::string::size_type v202 = *((void *)&v1032 + 1);
      }
      uint64_t v203 = std::string::append(&v1035, v201, v202);
      long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
      v1029.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1029.__r_.__value_.__l.__data_ = v204;
      v203->__r_.__value_.__l.__size_ = 0;
      v203->__r_.__value_.__r.__words[2] = 0;
      v203->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1033) < 0) {
        operator delete((void *)v1032);
      }
      if (SHIBYTE(v1035.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1035.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1034.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1034.__r_.__value_.__l.__data_);
      }
      if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v205 = &v1029;
      }
      else {
        uint64_t v205 = (std::string *)v1029.__r_.__value_.__r.__words[0];
      }
      if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v1029.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v1029.__r_.__value_.__l.__size_;
      }
      int v207 = std::string::append(&v1031, (const std::string::value_type *)v205, size);
      long long v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
      v1025.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1025.__r_.__value_.__l.__data_ = v208;
      v207->__r_.__value_.__l.__size_ = 0;
      v207->__r_.__value_.__r.__words[2] = 0;
      v207->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1029.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1031.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1031.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1030.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1030.__r_.__value_.__l.__data_);
      }
      if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v209 = &v1025;
      }
      else {
        int v209 = (std::string *)v1025.__r_.__value_.__r.__words[0];
      }
      if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v210 = HIBYTE(v1025.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v210 = v1025.__r_.__value_.__l.__size_;
      }
      uint64_t v211 = std::string::append(&v1028, (const std::string::value_type *)v209, v210);
      long long v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
      v1022.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1022.__r_.__value_.__l.__data_ = v212;
      v211->__r_.__value_.__l.__size_ = 0;
      v211->__r_.__value_.__r.__words[2] = 0;
      v211->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1025.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1028.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1026.__r_.__value_.__l.__data_);
      }
      if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v213 = &v1022;
      }
      else {
        __int16 v213 = (std::string *)v1022.__r_.__value_.__r.__words[0];
      }
      if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v214 = HIBYTE(v1022.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v214 = v1022.__r_.__value_.__l.__size_;
      }
      uint64_t v215 = std::string::append(&v1024, (const std::string::value_type *)v213, v214);
      long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      v1019.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1019.__r_.__value_.__l.__data_ = v216;
      v215->__r_.__value_.__l.__size_ = 0;
      v215->__r_.__value_.__r.__words[2] = 0;
      v215->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1022.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1022.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1024.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1023.__r_.__value_.__l.__data_);
      }
      if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v217 = &v1019;
      }
      else {
        float v217 = (std::string *)v1019.__r_.__value_.__r.__words[0];
      }
      if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v218 = HIBYTE(v1019.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v218 = v1019.__r_.__value_.__l.__size_;
      }
      uint64_t v219 = std::string::append(&v1021, (const std::string::value_type *)v217, v218);
      long long v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
      v1016.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1016.__r_.__value_.__l.__data_ = v220;
      v219->__r_.__value_.__l.__size_ = 0;
      v219->__r_.__value_.__r.__words[2] = 0;
      v219->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1019.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1019.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1021.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1021.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1020.__r_.__value_.__l.__data_);
      }
      if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v221 = &v1016;
      }
      else {
        uint64_t v221 = (std::string *)v1016.__r_.__value_.__r.__words[0];
      }
      if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v222 = HIBYTE(v1016.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v222 = v1016.__r_.__value_.__l.__size_;
      }
      float v223 = std::string::append(&v1018, (const std::string::value_type *)v221, v222);
      long long v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
      v1013.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1013.__r_.__value_.__l.__data_ = v224;
      v223->__r_.__value_.__l.__size_ = 0;
      v223->__r_.__value_.__r.__words[2] = 0;
      v223->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1016.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1016.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1018.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1018.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1017.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1017.__r_.__value_.__l.__data_);
      }
      if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v225 = &v1013;
      }
      else {
        int v225 = (std::string *)v1013.__r_.__value_.__r.__words[0];
      }
      if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v226 = HIBYTE(v1013.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v226 = v1013.__r_.__value_.__l.__size_;
      }
      uint64_t v227 = std::string::append(&v1015, (const std::string::value_type *)v225, v226);
      long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
      int64_t v1010 = v227->__r_.__value_.__r.__words[2];
      long long v1009 = v228;
      v227->__r_.__value_.__l.__size_ = 0;
      v227->__r_.__value_.__r.__words[2] = 0;
      v227->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1013.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1013.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1015.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1015.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1014.__r_.__value_.__l.__data_);
      }
      if (v1010 >= 0) {
        unint64_t v229 = (const std::string::value_type *)&v1009;
      }
      else {
        unint64_t v229 = (const std::string::value_type *)v1009;
      }
      if (v1010 >= 0) {
        std::string::size_type v230 = HIBYTE(v1010);
      }
      else {
        std::string::size_type v230 = *((void *)&v1009 + 1);
      }
      uint64_t v231 = std::string::append(&v1012, v229, v230);
      long long v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
      int64_t v1006 = v231->__r_.__value_.__r.__words[2];
      *(_OWORD *)v1005 = v232;
      v231->__r_.__value_.__l.__size_ = 0;
      v231->__r_.__value_.__r.__words[2] = 0;
      v231->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1010) < 0) {
        operator delete((void *)v1009);
      }
      if (SHIBYTE(v1012.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1012.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1011.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1011.__r_.__value_.__l.__data_);
      }
      if (v1006 >= 0) {
        uint64_t v233 = v1005;
      }
      else {
        uint64_t v233 = (void **)v1005[0];
      }
      if (v1006 >= 0) {
        std::string::size_type v234 = HIBYTE(v1006);
      }
      else {
        std::string::size_type v234 = (std::string::size_type)v1005[1];
      }
      unint64_t v235 = std::string::append(&v1008, (const std::string::value_type *)v233, v234);
      std::string v998 = *v235;
      v235->__r_.__value_.__l.__size_ = 0;
      v235->__r_.__value_.__r.__words[2] = 0;
      v235->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1006) < 0) {
        operator delete(v1005[0]);
      }
      if (SHIBYTE(v1008.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1008.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1007.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1007.__r_.__value_.__l.__data_);
      }
      AUT::ReplaceAll((std::string *)&v1046, (uint64_t)&v998, "\n", 1, "\n  ┣ ", 7uLL);
      uint64_t v236 = std::string::insert((std::string *)&v1046, 0, "\n  ┏ ", 7uLL);
      long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
      int64_t v1000 = v236->__r_.__value_.__r.__words[2];
      *(_OWORD *)v999 = v237;
      v236->__r_.__value_.__l.__size_ = 0;
      v236->__r_.__value_.__r.__words[2] = 0;
      v236->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1046.__end_) < 0) {
        operator delete(v1046.__first_);
      }
      float v238 = v999;
      if (v1000 < 0) {
        float v238 = (void **)v999[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3852;
      *(_WORD *)&uint8_t buf[18] = 2080;
      *(void *)&buf[20] = v238;
      _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying system params:%s", buf, 0x1Cu);
      if (SHIBYTE(v1000) < 0) {
        operator delete(v999[0]);
      }
      if (SHIBYTE(v998.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v998.__r_.__value_.__l.__data_);
      }
LABEL_550:
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(Element, 8u, __val, 0);
      ausdk::AUElement::SetParameter(Element, 5u, v979, 0);
      ausdk::AUElement::SetParameter(Element, 6u, v976, 0);
      ausdk::AUElement::SetParameter(Element, 7u, v974, 0);
      ausdk::AUElement::SetParameter(Element, 4u, v971, 0);
      ausdk::AUElement::SetParameter(Element, 2u, v969, 0);
      ausdk::AUElement::SetParameter(Element, 3u, v966, 0);
      ausdk::AUElement::SetParameter(Element, 9u, v964, 0);
      ausdk::AUElement::SetParameter(Element, 0xAu, v961, 0);
      ausdk::AUElement::SetParameter(Element, 0xBu, v959, 0);
      if (__p == v10) {
        goto LABEL_954;
      }
      unint64_t v240 = __p;
      while (2)
      {
        unint64_t v241 = (NSObject **)spp3Subsystem();
        if (v241)
        {
          uint64_t v242 = *v241;
          if (!*v241) {
            goto LABEL_953;
          }
        }
        else
        {
          uint64_t v242 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_953;
        }
        unsigned int v243 = *v240;
        float v245 = *((float *)v240 + 1);
        float v244 = *((float *)v240 + 2);
        float v247 = *((float *)v240 + 3);
        float v246 = *((float *)v240 + 4);
        float v249 = *((float *)v240 + 5);
        float v248 = *((float *)v240 + 6);
        float v251 = *((float *)v240 + 7);
        float v250 = *((float *)v240 + 8);
        float v988 = *((float *)v240 + 9);
        float v984 = *((float *)v240 + 10);
        std::string::basic_string[abi:ne180100]<0>(&v1038, "Rshunt");
        unint64_t v252 = std::string::append(&v1038, ": ", 2uLL);
        long long v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v253;
        v252->__r_.__value_.__l.__size_ = 0;
        v252->__r_.__value_.__r.__words[2] = 0;
        v252->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v245);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v254 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v255 = &cfa;
            goto LABEL_563;
          }
          float v255 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v254 = --cfa.__r_.__value_.__l.__size_;
LABEL_563:
            v255->__r_.__value_.__s.__data_[v254] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v256 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            uint64_t v257 = &v1046;
            goto LABEL_570;
          }
          uint64_t v257 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v256 = --v1046.__begin_;
LABEL_570:
            v256->__r_.__value_.__s.__data_[(void)v257] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unint64_t v258 = (const std::string::value_type *)&v1036;
        }
        else {
          unint64_t v258 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v259 = HIBYTE(end);
        }
        else {
          std::string::size_type v259 = *((void *)&v1036 + 1);
        }
        uint64_t v260 = std::string::append(&v1039, v258, v259);
        long long v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
        v1007.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1007.__r_.__value_.__l.__data_ = v261;
        v260->__r_.__value_.__l.__size_ = 0;
        v260->__r_.__value_.__r.__words[2] = 0;
        v260->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v262 = std::string::append(&v1007, ",\n", 2uLL);
        long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
        v1008.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1008.__r_.__value_.__l.__data_ = v263;
        v262->__r_.__value_.__l.__size_ = 0;
        v262->__r_.__value_.__r.__words[2] = 0;
        v262->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "Reb_ref");
        unint64_t v264 = std::string::append(&v1038, ": ", 2uLL);
        long long v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v265;
        v264->__r_.__value_.__l.__size_ = 0;
        v264->__r_.__value_.__r.__words[2] = 0;
        v264->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v244);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v266 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v267 = &cfa;
            goto LABEL_591;
          }
          float v267 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v266 = --cfa.__r_.__value_.__l.__size_;
LABEL_591:
            v267->__r_.__value_.__s.__data_[v266] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v268 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            uint64_t v269 = &v1046;
            goto LABEL_598;
          }
          uint64_t v269 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v268 = --v1046.__begin_;
LABEL_598:
            v268->__r_.__value_.__s.__data_[(void)v269] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unint64_t v270 = (const std::string::value_type *)&v1036;
        }
        else {
          unint64_t v270 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v271 = HIBYTE(end);
        }
        else {
          std::string::size_type v271 = *((void *)&v1036 + 1);
        }
        uint64_t v272 = std::string::append(&v1039, v270, v271);
        long long v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
        v1011.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1011.__r_.__value_.__l.__data_ = v273;
        v272->__r_.__value_.__l.__size_ = 0;
        v272->__r_.__value_.__r.__words[2] = 0;
        v272->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v274 = std::string::append(&v1011, ",\n", 2uLL);
        long long v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
        v1012.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1012.__r_.__value_.__l.__data_ = v275;
        v274->__r_.__value_.__l.__size_ = 0;
        v274->__r_.__value_.__r.__words[2] = 0;
        v274->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "Rampout");
        unint64_t v276 = std::string::append(&v1038, ": ", 2uLL);
        long long v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v277;
        v276->__r_.__value_.__l.__size_ = 0;
        v276->__r_.__value_.__r.__words[2] = 0;
        v276->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v247);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v278 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v279 = &cfa;
            goto LABEL_619;
          }
          float v279 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v278 = --cfa.__r_.__value_.__l.__size_;
LABEL_619:
            v279->__r_.__value_.__s.__data_[v278] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v280 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            uint64_t v281 = &v1046;
            goto LABEL_626;
          }
          uint64_t v281 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v280 = --v1046.__begin_;
LABEL_626:
            v280->__r_.__value_.__s.__data_[(void)v281] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unint64_t v282 = (const std::string::value_type *)&v1036;
        }
        else {
          unint64_t v282 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v283 = HIBYTE(end);
        }
        else {
          std::string::size_type v283 = *((void *)&v1036 + 1);
        }
        uint64_t v284 = std::string::append(&v1039, v282, v283);
        long long v285 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
        v1014.__r_.__value_.__r.__words[2] = v284->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1014.__r_.__value_.__l.__data_ = v285;
        v284->__r_.__value_.__l.__size_ = 0;
        v284->__r_.__value_.__r.__words[2] = 0;
        v284->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        int v286 = std::string::append(&v1014, ",\n", 2uLL);
        long long v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
        v1015.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1015.__r_.__value_.__l.__data_ = v287;
        v286->__r_.__value_.__l.__size_ = 0;
        v286->__r_.__value_.__r.__words[2] = 0;
        v286->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "T_sett_vc");
        unint64_t v288 = std::string::append(&v1038, ": ", 2uLL);
        long long v289 = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v288->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v289;
        v288->__r_.__value_.__l.__size_ = 0;
        v288->__r_.__value_.__r.__words[2] = 0;
        v288->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v246);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v290 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            uint64_t v291 = &cfa;
            goto LABEL_647;
          }
          uint64_t v291 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v290 = --cfa.__r_.__value_.__l.__size_;
LABEL_647:
            v291->__r_.__value_.__s.__data_[v290] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v292 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            uint64_t v293 = &v1046;
            goto LABEL_654;
          }
          uint64_t v293 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v292 = --v1046.__begin_;
LABEL_654:
            v292->__r_.__value_.__s.__data_[(void)v293] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unint64_t v294 = (const std::string::value_type *)&v1036;
        }
        else {
          unint64_t v294 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v295 = HIBYTE(end);
        }
        else {
          std::string::size_type v295 = *((void *)&v1036 + 1);
        }
        uint64_t v296 = std::string::append(&v1039, v294, v295);
        long long v297 = *(_OWORD *)&v296->__r_.__value_.__l.__data_;
        v1017.__r_.__value_.__r.__words[2] = v296->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1017.__r_.__value_.__l.__data_ = v297;
        v296->__r_.__value_.__l.__size_ = 0;
        v296->__r_.__value_.__r.__words[2] = 0;
        v296->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v298 = std::string::append(&v1017, ",\n", 2uLL);
        long long v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
        v1018.__r_.__value_.__r.__words[2] = v298->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1018.__r_.__value_.__l.__data_ = v299;
        v298->__r_.__value_.__l.__size_ = 0;
        v298->__r_.__value_.__r.__words[2] = 0;
        v298->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "tau_Tvc");
        unint64_t v300 = std::string::append(&v1038, ": ", 2uLL);
        long long v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v301;
        v300->__r_.__value_.__l.__size_ = 0;
        v300->__r_.__value_.__r.__words[2] = 0;
        v300->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v249);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v302 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v303 = &cfa;
            goto LABEL_675;
          }
          float v303 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v302 = --cfa.__r_.__value_.__l.__size_;
LABEL_675:
            v303->__r_.__value_.__s.__data_[v302] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v304 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            v305 = &v1046;
            goto LABEL_682;
          }
          v305 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v304 = --v1046.__begin_;
LABEL_682:
            v304->__r_.__value_.__s.__data_[(void)v305] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unint64_t v306 = (const std::string::value_type *)&v1036;
        }
        else {
          unint64_t v306 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v307 = HIBYTE(end);
        }
        else {
          std::string::size_type v307 = *((void *)&v1036 + 1);
        }
        int v308 = std::string::append(&v1039, v306, v307);
        long long v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
        v1020.__r_.__value_.__r.__words[2] = v308->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1020.__r_.__value_.__l.__data_ = v309;
        v308->__r_.__value_.__l.__size_ = 0;
        v308->__r_.__value_.__r.__words[2] = 0;
        v308->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        unint64_t v310 = std::string::append(&v1020, ",\n", 2uLL);
        long long v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
        v1021.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1021.__r_.__value_.__l.__data_ = v311;
        v310->__r_.__value_.__l.__size_ = 0;
        v310->__r_.__value_.__r.__words[2] = 0;
        v310->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "T_sett_mg");
        double v312 = std::string::append(&v1038, ": ", 2uLL);
        long long v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v313;
        v312->__r_.__value_.__l.__size_ = 0;
        v312->__r_.__value_.__r.__words[2] = 0;
        v312->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v248);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v314 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            double v315 = &cfa;
            goto LABEL_703;
          }
          double v315 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v314 = --cfa.__r_.__value_.__l.__size_;
LABEL_703:
            v315->__r_.__value_.__s.__data_[v314] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v316 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            unsigned int v317 = &v1046;
            goto LABEL_710;
          }
          unsigned int v317 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v316 = --v1046.__begin_;
LABEL_710:
            v316->__r_.__value_.__s.__data_[(void)v317] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v318 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v318 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v319 = HIBYTE(end);
        }
        else {
          std::string::size_type v319 = *((void *)&v1036 + 1);
        }
        int v320 = std::string::append(&v1039, v318, v319);
        long long v321 = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
        v1023.__r_.__value_.__r.__words[2] = v320->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v321;
        v320->__r_.__value_.__l.__size_ = 0;
        v320->__r_.__value_.__r.__words[2] = 0;
        v320->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        int v322 = std::string::append(&v1023, ",\n", 2uLL);
        long long v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
        v1024.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v323;
        v322->__r_.__value_.__l.__size_ = 0;
        v322->__r_.__value_.__r.__words[2] = 0;
        v322->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "tau_Tmg");
        uint64_t v324 = std::string::append(&v1038, ": ", 2uLL);
        long long v325 = *(_OWORD *)&v324->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v324->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v325;
        v324->__r_.__value_.__l.__size_ = 0;
        v324->__r_.__value_.__r.__words[2] = 0;
        v324->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v251);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v326 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            __int16 v327 = &cfa;
            goto LABEL_731;
          }
          __int16 v327 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v326 = --cfa.__r_.__value_.__l.__size_;
LABEL_731:
            v327->__r_.__value_.__s.__data_[v326] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v328 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            __int16 v329 = &v1046;
            goto LABEL_738;
          }
          __int16 v329 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v328 = --v1046.__begin_;
LABEL_738:
            v328->__r_.__value_.__s.__data_[(void)v329] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v330 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v330 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v331 = HIBYTE(end);
        }
        else {
          std::string::size_type v331 = *((void *)&v1036 + 1);
        }
        __int16 v332 = std::string::append(&v1039, v330, v331);
        long long v333 = *(_OWORD *)&v332->__r_.__value_.__l.__data_;
        v1026.__r_.__value_.__r.__words[2] = v332->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v333;
        v332->__r_.__value_.__l.__size_ = 0;
        v332->__r_.__value_.__r.__words[2] = 0;
        v332->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        __int16 v334 = std::string::append(&v1026, ",\n", 2uLL);
        long long v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
        v1028.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1028.__r_.__value_.__l.__data_ = v335;
        v334->__r_.__value_.__l.__size_ = 0;
        v334->__r_.__value_.__r.__words[2] = 0;
        v334->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "ThermalFFSpeedupFactor");
        __int16 v336 = std::string::append(&v1038, ": ", 2uLL);
        long long v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v337;
        v336->__r_.__value_.__l.__size_ = 0;
        v336->__r_.__value_.__r.__words[2] = 0;
        v336->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v250);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v338 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v339 = &cfa;
            goto LABEL_759;
          }
          float v339 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v338 = --cfa.__r_.__value_.__l.__size_;
LABEL_759:
            v339->__r_.__value_.__s.__data_[v338] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v340 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            long long v341 = &v1046;
            goto LABEL_766;
          }
          long long v341 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v340 = --v1046.__begin_;
LABEL_766:
            v340->__r_.__value_.__s.__data_[(void)v341] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v342 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v342 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v343 = HIBYTE(end);
        }
        else {
          std::string::size_type v343 = *((void *)&v1036 + 1);
        }
        uint64_t v344 = std::string::append(&v1039, v342, v343);
        long long v345 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
        v1030.__r_.__value_.__r.__words[2] = v344->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1030.__r_.__value_.__l.__data_ = v345;
        v344->__r_.__value_.__l.__size_ = 0;
        v344->__r_.__value_.__r.__words[2] = 0;
        v344->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v346 = std::string::append(&v1030, ",\n", 2uLL);
        long long v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
        v1031.__r_.__value_.__r.__words[2] = v346->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1031.__r_.__value_.__l.__data_ = v347;
        v346->__r_.__value_.__l.__size_ = 0;
        v346->__r_.__value_.__r.__words[2] = 0;
        v346->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "HardTempLimitHeadroom");
        unint64_t v348 = std::string::append(&v1038, ": ", 2uLL);
        long long v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v349;
        v348->__r_.__value_.__l.__size_ = 0;
        v348->__r_.__value_.__r.__words[2] = 0;
        v348->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v988);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v350 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            double v351 = &cfa;
            goto LABEL_787;
          }
          double v351 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v350 = --cfa.__r_.__value_.__l.__size_;
LABEL_787:
            v351->__r_.__value_.__s.__data_[v350] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v352 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            double v353 = &v1046;
            goto LABEL_794;
          }
          double v353 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v352 = --v1046.__begin_;
LABEL_794:
            v352->__r_.__value_.__s.__data_[(void)v353] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          BOOL v354 = (const std::string::value_type *)&v1036;
        }
        else {
          BOOL v354 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v355 = HIBYTE(end);
        }
        else {
          std::string::size_type v355 = *((void *)&v1036 + 1);
        }
        BOOL v356 = std::string::append(&v1039, v354, v355);
        long long v357 = *(_OWORD *)&v356->__r_.__value_.__l.__data_;
        v1034.__r_.__value_.__r.__words[2] = v356->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1034.__r_.__value_.__l.__data_ = v357;
        v356->__r_.__value_.__l.__size_ = 0;
        v356->__r_.__value_.__r.__words[2] = 0;
        v356->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        float v358 = std::string::append(&v1034, ",\n", 2uLL);
        long long v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
        v1035.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1035.__r_.__value_.__l.__data_ = v359;
        v358->__r_.__value_.__l.__size_ = 0;
        v358->__r_.__value_.__r.__words[2] = 0;
        v358->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "TemperatureLimit");
        float v360 = std::string::append(&v1038, ": ", 2uLL);
        long long v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v360->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v361;
        v360->__r_.__value_.__l.__size_ = 0;
        v360->__r_.__value_.__r.__words[2] = 0;
        v360->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v984);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v362 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v363 = &cfa;
            goto LABEL_815;
          }
          float v363 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v362 = --cfa.__r_.__value_.__l.__size_;
LABEL_815:
            v363->__r_.__value_.__s.__data_[v362] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v364 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            float v365 = &v1046;
            goto LABEL_822;
          }
          float v365 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v364 = --v1046.__begin_;
LABEL_822:
            v364->__r_.__value_.__s.__data_[(void)v365] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          float v366 = (const std::string::value_type *)&v1036;
        }
        else {
          float v366 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v367 = HIBYTE(end);
        }
        else {
          std::string::size_type v367 = *((void *)&v1036 + 1);
        }
        double v368 = std::string::append(&v1039, v366, v367);
        long long v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
        int64_t v1033 = v368->__r_.__value_.__r.__words[2];
        long long v1032 = v369;
        v368->__r_.__value_.__l.__size_ = 0;
        v368->__r_.__value_.__r.__words[2] = 0;
        v368->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        if (v1033 >= 0) {
          double v370 = (const std::string::value_type *)&v1032;
        }
        else {
          double v370 = (const std::string::value_type *)v1032;
        }
        if (v1033 >= 0) {
          std::string::size_type v371 = HIBYTE(v1033);
        }
        else {
          std::string::size_type v371 = *((void *)&v1032 + 1);
        }
        BOOL v372 = std::string::append(&v1035, v370, v371);
        long long v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
        v1029.__r_.__value_.__r.__words[2] = v372->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1029.__r_.__value_.__l.__data_ = v373;
        v372->__r_.__value_.__l.__size_ = 0;
        v372->__r_.__value_.__r.__words[2] = 0;
        v372->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1033) < 0) {
          operator delete((void *)v1032);
        }
        if (SHIBYTE(v1035.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1035.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1034.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1034.__r_.__value_.__l.__data_);
        }
        if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v374 = &v1029;
        }
        else {
          float v374 = (std::string *)v1029.__r_.__value_.__r.__words[0];
        }
        if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v375 = HIBYTE(v1029.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v375 = v1029.__r_.__value_.__l.__size_;
        }
        float v376 = std::string::append(&v1031, (const std::string::value_type *)v374, v375);
        long long v377 = *(_OWORD *)&v376->__r_.__value_.__l.__data_;
        v1025.__r_.__value_.__r.__words[2] = v376->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1025.__r_.__value_.__l.__data_ = v377;
        v376->__r_.__value_.__l.__size_ = 0;
        v376->__r_.__value_.__r.__words[2] = 0;
        v376->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1029.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1031.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1031.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1030.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1030.__r_.__value_.__l.__data_);
        }
        if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v378 = &v1025;
        }
        else {
          float v378 = (std::string *)v1025.__r_.__value_.__r.__words[0];
        }
        if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v379 = HIBYTE(v1025.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v379 = v1025.__r_.__value_.__l.__size_;
        }
        unint64_t v380 = std::string::append(&v1028, (const std::string::value_type *)v378, v379);
        long long v381 = *(_OWORD *)&v380->__r_.__value_.__l.__data_;
        v1022.__r_.__value_.__r.__words[2] = v380->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1022.__r_.__value_.__l.__data_ = v381;
        v380->__r_.__value_.__l.__size_ = 0;
        v380->__r_.__value_.__r.__words[2] = 0;
        v380->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1025.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1028.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1026.__r_.__value_.__l.__data_);
        }
        if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v382 = &v1022;
        }
        else {
          unint64_t v382 = (std::string *)v1022.__r_.__value_.__r.__words[0];
        }
        if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v383 = HIBYTE(v1022.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v383 = v1022.__r_.__value_.__l.__size_;
        }
        uint64_t v384 = std::string::append(&v1024, (const std::string::value_type *)v382, v383);
        long long v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
        v1019.__r_.__value_.__r.__words[2] = v384->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1019.__r_.__value_.__l.__data_ = v385;
        v384->__r_.__value_.__l.__size_ = 0;
        v384->__r_.__value_.__r.__words[2] = 0;
        v384->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1022.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1022.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1024.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1023.__r_.__value_.__l.__data_);
        }
        if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v386 = &v1019;
        }
        else {
          uint64_t v386 = (std::string *)v1019.__r_.__value_.__r.__words[0];
        }
        if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v387 = HIBYTE(v1019.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v387 = v1019.__r_.__value_.__l.__size_;
        }
        double v388 = std::string::append(&v1021, (const std::string::value_type *)v386, v387);
        long long v389 = *(_OWORD *)&v388->__r_.__value_.__l.__data_;
        v1016.__r_.__value_.__r.__words[2] = v388->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1016.__r_.__value_.__l.__data_ = v389;
        v388->__r_.__value_.__l.__size_ = 0;
        v388->__r_.__value_.__r.__words[2] = 0;
        v388->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1019.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1019.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1021.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1021.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1020.__r_.__value_.__l.__data_);
        }
        if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v390 = &v1016;
        }
        else {
          double v390 = (std::string *)v1016.__r_.__value_.__r.__words[0];
        }
        if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v391 = HIBYTE(v1016.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v391 = v1016.__r_.__value_.__l.__size_;
        }
        double v392 = std::string::append(&v1018, (const std::string::value_type *)v390, v391);
        long long v393 = *(_OWORD *)&v392->__r_.__value_.__l.__data_;
        v1013.__r_.__value_.__r.__words[2] = v392->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1013.__r_.__value_.__l.__data_ = v393;
        v392->__r_.__value_.__l.__size_ = 0;
        v392->__r_.__value_.__r.__words[2] = 0;
        v392->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1016.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1016.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1018.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1018.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1017.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1017.__r_.__value_.__l.__data_);
        }
        if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v394 = &v1013;
        }
        else {
          double v394 = (std::string *)v1013.__r_.__value_.__r.__words[0];
        }
        if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v395 = HIBYTE(v1013.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v395 = v1013.__r_.__value_.__l.__size_;
        }
        double v396 = std::string::append(&v1015, (const std::string::value_type *)v394, v395);
        long long v397 = *(_OWORD *)&v396->__r_.__value_.__l.__data_;
        int64_t v1010 = v396->__r_.__value_.__r.__words[2];
        long long v1009 = v397;
        v396->__r_.__value_.__l.__size_ = 0;
        v396->__r_.__value_.__r.__words[2] = 0;
        v396->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1013.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1013.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1015.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1015.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1014.__r_.__value_.__l.__data_);
        }
        if (v1010 >= 0) {
          double v398 = (const std::string::value_type *)&v1009;
        }
        else {
          double v398 = (const std::string::value_type *)v1009;
        }
        if (v1010 >= 0) {
          std::string::size_type v399 = HIBYTE(v1010);
        }
        else {
          std::string::size_type v399 = *((void *)&v1009 + 1);
        }
        float v400 = std::string::append(&v1012, v398, v399);
        long long v401 = *(_OWORD *)&v400->__r_.__value_.__l.__data_;
        int64_t v1006 = v400->__r_.__value_.__r.__words[2];
        *(_OWORD *)v1005 = v401;
        v400->__r_.__value_.__l.__size_ = 0;
        v400->__r_.__value_.__r.__words[2] = 0;
        v400->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1010) < 0) {
          operator delete((void *)v1009);
        }
        if (SHIBYTE(v1012.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1012.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1011.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1011.__r_.__value_.__l.__data_);
        }
        if (v1006 >= 0) {
          unint64_t v402 = v1005;
        }
        else {
          unint64_t v402 = (void **)v1005[0];
        }
        if (v1006 >= 0) {
          std::string::size_type v403 = HIBYTE(v1006);
        }
        else {
          std::string::size_type v403 = (std::string::size_type)v1005[1];
        }
        v404 = std::string::append(&v1008, (const std::string::value_type *)v402, v403);
        std::string v998 = *v404;
        v404->__r_.__value_.__l.__size_ = 0;
        v404->__r_.__value_.__r.__words[2] = 0;
        v404->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1006) < 0) {
          operator delete(v1005[0]);
        }
        if (SHIBYTE(v1008.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1008.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1007.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1007.__r_.__value_.__l.__data_);
        }
        AUT::ReplaceAll((std::string *)&v1046, (uint64_t)&v998, "\n", 1, "\n  ┣ ", 7uLL);
        unsigned int v405 = std::string::insert((std::string *)&v1046, 0, "\n  ┏ ", 7uLL);
        long long v406 = *(_OWORD *)&v405->__r_.__value_.__l.__data_;
        int64_t v1000 = v405->__r_.__value_.__r.__words[2];
        *(_OWORD *)v999 = v406;
        v405->__r_.__value_.__l.__size_ = 0;
        v405->__r_.__value_.__r.__words[2] = 0;
        v405->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1046.__end_) < 0) {
          operator delete(v1046.__first_);
        }
        uint64_t v407 = v999;
        if (v1000 < 0) {
          uint64_t v407 = (void **)v999[0];
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3857;
        *(_WORD *)&uint8_t buf[18] = 1024;
        *(_DWORD *)&buf[20] = v243;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v407;
        _os_log_impl(&dword_1BB0CE000, v242, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying OL thermal params to channel %i:%s", buf, 0x22u);
        if (SHIBYTE(v1000) < 0) {
          operator delete(v999[0]);
        }
        if (SHIBYTE(v998.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v998.__r_.__value_.__l.__data_);
        }
LABEL_953:
        float v409 = *((float *)v240 + 1);
        float v408 = *((float *)v240 + 2);
        float v411 = *((float *)v240 + 3);
        float v410 = *((float *)v240 + 4);
        float v413 = *((float *)v240 + 5);
        float v412 = *((float *)v240 + 6);
        float v415 = *((float *)v240 + 7);
        float v414 = *((float *)v240 + 8);
        float v989 = *((float *)v240 + 9);
        float v985 = *((float *)v240 + 10);
        float v416 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), *v240);
        ausdk::AUElement::SetParameter(v416, 0xAu, v409, 0);
        ausdk::AUElement::SetParameter(v416, 9u, v408, 0);
        ausdk::AUElement::SetParameter(v416, 0xBu, v411, 0);
        ausdk::AUElement::SetParameter(v416, 2u, v410, 0);
        ausdk::AUElement::SetParameter(v416, 4u, v413, 0);
        ausdk::AUElement::SetParameter(v416, 3u, v412, 0);
        ausdk::AUElement::SetParameter(v416, 5u, v415, 0);
        ausdk::AUElement::SetParameter(v416, 6u, v414, 0);
        ausdk::AUElement::SetParameter(v416, 1u, v989, 0);
        ausdk::AUElement::SetParameter(v416, 0, v985, 0);
        v240 += 11;
        if (v240 != v10) {
          continue;
        }
        break;
      }
LABEL_954:
      if (v993 == v46) {
        goto LABEL_1278;
      }
      float v417 = v993;
      while (2)
      {
        float v418 = (NSObject **)spp3Subsystem();
        if (v418)
        {
          float v419 = *v418;
          if (!*v418) {
            goto LABEL_1277;
          }
        }
        else
        {
          float v419 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v419, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_1277;
        }
        unsigned int v420 = *v417;
        float v422 = *((float *)v417 + 1);
        float v421 = *((float *)v417 + 2);
        float v424 = *((float *)v417 + 3);
        float v423 = *((float *)v417 + 4);
        float v426 = *((float *)v417 + 5);
        float v425 = *((float *)v417 + 6);
        float v428 = *((float *)v417 + 7);
        float v427 = *((float *)v417 + 8);
        std::string::basic_string[abi:ne180100]<0>(&v1038, "Q_d");
        float v429 = std::string::append(&v1038, ": ", 2uLL);
        long long v430 = *(_OWORD *)&v429->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v429->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v430;
        v429->__r_.__value_.__l.__size_ = 0;
        v429->__r_.__value_.__r.__words[2] = 0;
        v429->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v422);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v431 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            double v432 = &cfa;
            goto LABEL_967;
          }
          double v432 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v431 = --cfa.__r_.__value_.__l.__size_;
LABEL_967:
            v432->__r_.__value_.__s.__data_[v431] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v433 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            double v434 = &v1046;
            goto LABEL_974;
          }
          double v434 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v433 = --v1046.__begin_;
LABEL_974:
            v433->__r_.__value_.__s.__data_[(void)v434] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          double v435 = (const std::string::value_type *)&v1036;
        }
        else {
          double v435 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v436 = HIBYTE(end);
        }
        else {
          std::string::size_type v436 = *((void *)&v1036 + 1);
        }
        BOOL v437 = std::string::append(&v1039, v435, v436);
        long long v438 = *(_OWORD *)&v437->__r_.__value_.__l.__data_;
        v1014.__r_.__value_.__r.__words[2] = v437->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1014.__r_.__value_.__l.__data_ = v438;
        v437->__r_.__value_.__l.__size_ = 0;
        v437->__r_.__value_.__r.__words[2] = 0;
        v437->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        BOOL v439 = std::string::append(&v1014, ",\n", 2uLL);
        long long v440 = *(_OWORD *)&v439->__r_.__value_.__l.__data_;
        v1015.__r_.__value_.__r.__words[2] = v439->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1015.__r_.__value_.__l.__data_ = v440;
        v439->__r_.__value_.__l.__size_ = 0;
        v439->__r_.__value_.__r.__words[2] = 0;
        v439->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "kt");
        float v441 = std::string::append(&v1038, ": ", 2uLL);
        long long v442 = *(_OWORD *)&v441->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v441->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v442;
        v441->__r_.__value_.__l.__size_ = 0;
        v441->__r_.__value_.__r.__words[2] = 0;
        v441->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v421);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v443 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float32x2_t v444 = &cfa;
            goto LABEL_995;
          }
          float32x2_t v444 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v443 = --cfa.__r_.__value_.__l.__size_;
LABEL_995:
            v444->__r_.__value_.__s.__data_[v443] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v445 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            double v446 = &v1046;
            goto LABEL_1002;
          }
          double v446 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v445 = --v1046.__begin_;
LABEL_1002:
            v445->__r_.__value_.__s.__data_[(void)v446] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          float v447 = (const std::string::value_type *)&v1036;
        }
        else {
          float v447 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v448 = HIBYTE(end);
        }
        else {
          std::string::size_type v448 = *((void *)&v1036 + 1);
        }
        float v449 = std::string::append(&v1039, v447, v448);
        long long v450 = *(_OWORD *)&v449->__r_.__value_.__l.__data_;
        v1017.__r_.__value_.__r.__words[2] = v449->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1017.__r_.__value_.__l.__data_ = v450;
        v449->__r_.__value_.__l.__size_ = 0;
        v449->__r_.__value_.__r.__words[2] = 0;
        v449->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        BOOL v451 = std::string::append(&v1017, ",\n", 2uLL);
        long long v452 = *(_OWORD *)&v451->__r_.__value_.__l.__data_;
        v1018.__r_.__value_.__r.__words[2] = v451->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1018.__r_.__value_.__l.__data_ = v452;
        v451->__r_.__value_.__l.__size_ = 0;
        v451->__r_.__value_.__r.__words[2] = 0;
        v451->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "ct");
        float v453 = std::string::append(&v1038, ": ", 2uLL);
        long long v454 = *(_OWORD *)&v453->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v453->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v454;
        v453->__r_.__value_.__l.__size_ = 0;
        v453->__r_.__value_.__r.__words[2] = 0;
        v453->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v424);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v455 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            float v456 = &cfa;
            goto LABEL_1023;
          }
          float v456 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v455 = --cfa.__r_.__value_.__l.__size_;
LABEL_1023:
            v456->__r_.__value_.__s.__data_[v455] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v457 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            BOOL v458 = &v1046;
            goto LABEL_1030;
          }
          BOOL v458 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v457 = --v1046.__begin_;
LABEL_1030:
            v457->__r_.__value_.__s.__data_[(void)v458] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          float v459 = (const std::string::value_type *)&v1036;
        }
        else {
          float v459 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v460 = HIBYTE(end);
        }
        else {
          std::string::size_type v460 = *((void *)&v1036 + 1);
        }
        v461 = std::string::append(&v1039, v459, v460);
        long long v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
        v1020.__r_.__value_.__r.__words[2] = v461->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1020.__r_.__value_.__l.__data_ = v462;
        v461->__r_.__value_.__l.__size_ = 0;
        v461->__r_.__value_.__r.__words[2] = 0;
        v461->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        BOOL v463 = std::string::append(&v1020, ",\n", 2uLL);
        long long v464 = *(_OWORD *)&v463->__r_.__value_.__l.__data_;
        v1021.__r_.__value_.__r.__words[2] = v463->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1021.__r_.__value_.__l.__data_ = v464;
        v463->__r_.__value_.__l.__size_ = 0;
        v463->__r_.__value_.__r.__words[2] = 0;
        v463->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "phi");
        BOOL v465 = std::string::append(&v1038, ": ", 2uLL);
        long long v466 = *(_OWORD *)&v465->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v465->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v466;
        v465->__r_.__value_.__l.__size_ = 0;
        v465->__r_.__value_.__r.__words[2] = 0;
        v465->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v423);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v467 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            int8x8_t v468 = &cfa;
            goto LABEL_1051;
          }
          int8x8_t v468 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v467 = --cfa.__r_.__value_.__l.__size_;
LABEL_1051:
            v468->__r_.__value_.__s.__data_[v467] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v469 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            float v470 = &v1046;
            goto LABEL_1058;
          }
          float v470 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v469 = --v1046.__begin_;
LABEL_1058:
            v469->__r_.__value_.__s.__data_[(void)v470] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          unsigned int v471 = (const std::string::value_type *)&v1036;
        }
        else {
          unsigned int v471 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v472 = HIBYTE(end);
        }
        else {
          std::string::size_type v472 = *((void *)&v1036 + 1);
        }
        unsigned int v473 = std::string::append(&v1039, v471, v472);
        long long v474 = *(_OWORD *)&v473->__r_.__value_.__l.__data_;
        v1023.__r_.__value_.__r.__words[2] = v473->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v474;
        v473->__r_.__value_.__l.__size_ = 0;
        v473->__r_.__value_.__r.__words[2] = 0;
        v473->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v475 = std::string::append(&v1023, ",\n", 2uLL);
        long long v476 = *(_OWORD *)&v475->__r_.__value_.__l.__data_;
        v1024.__r_.__value_.__r.__words[2] = v475->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v476;
        v475->__r_.__value_.__l.__size_ = 0;
        v475->__r_.__value_.__r.__words[2] = 0;
        v475->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "x_lim");
        uint64_t v477 = std::string::append(&v1038, ": ", 2uLL);
        long long v478 = *(_OWORD *)&v477->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v477->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v478;
        v477->__r_.__value_.__l.__size_ = 0;
        v477->__r_.__value_.__r.__words[2] = 0;
        v477->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v426);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v479 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            uint64_t v480 = &cfa;
            goto LABEL_1079;
          }
          uint64_t v480 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v479 = --cfa.__r_.__value_.__l.__size_;
LABEL_1079:
            v480->__r_.__value_.__s.__data_[v479] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v481 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            v482 = &v1046;
            goto LABEL_1086;
          }
          v482 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v481 = --v1046.__begin_;
LABEL_1086:
            v481->__r_.__value_.__s.__data_[(void)v482] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v483 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v483 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v484 = HIBYTE(end);
        }
        else {
          std::string::size_type v484 = *((void *)&v1036 + 1);
        }
        BOOL v485 = std::string::append(&v1039, v483, v484);
        long long v486 = *(_OWORD *)&v485->__r_.__value_.__l.__data_;
        v1026.__r_.__value_.__r.__words[2] = v485->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v486;
        v485->__r_.__value_.__l.__size_ = 0;
        v485->__r_.__value_.__r.__words[2] = 0;
        v485->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        v487 = std::string::append(&v1026, ",\n", 2uLL);
        long long v488 = *(_OWORD *)&v487->__r_.__value_.__l.__data_;
        v1028.__r_.__value_.__r.__words[2] = v487->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1028.__r_.__value_.__l.__data_ = v488;
        v487->__r_.__value_.__l.__size_ = 0;
        v487->__r_.__value_.__r.__words[2] = 0;
        v487->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "ag");
        v489 = std::string::append(&v1038, ": ", 2uLL);
        long long v490 = *(_OWORD *)&v489->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v489->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v490;
        v489->__r_.__value_.__l.__size_ = 0;
        v489->__r_.__value_.__r.__words[2] = 0;
        v489->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v425);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v491 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            double v492 = &cfa;
            goto LABEL_1107;
          }
          double v492 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v491 = --cfa.__r_.__value_.__l.__size_;
LABEL_1107:
            v492->__r_.__value_.__s.__data_[v491] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v493 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            v494 = &v1046;
            goto LABEL_1114;
          }
          v494 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v493 = --v1046.__begin_;
LABEL_1114:
            v493->__r_.__value_.__s.__data_[(void)v494] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          double v495 = (const std::string::value_type *)&v1036;
        }
        else {
          double v495 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v496 = HIBYTE(end);
        }
        else {
          std::string::size_type v496 = *((void *)&v1036 + 1);
        }
        uint64_t v497 = std::string::append(&v1039, v495, v496);
        long long v498 = *(_OWORD *)&v497->__r_.__value_.__l.__data_;
        v1030.__r_.__value_.__r.__words[2] = v497->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1030.__r_.__value_.__l.__data_ = v498;
        v497->__r_.__value_.__l.__size_ = 0;
        v497->__r_.__value_.__r.__words[2] = 0;
        v497->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        double v499 = std::string::append(&v1030, ",\n", 2uLL);
        long long v500 = *(_OWORD *)&v499->__r_.__value_.__l.__data_;
        v1031.__r_.__value_.__r.__words[2] = v499->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1031.__r_.__value_.__l.__data_ = v500;
        v499->__r_.__value_.__l.__size_ = 0;
        v499->__r_.__value_.__r.__words[2] = 0;
        v499->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "mt");
        uint64_t v501 = std::string::append(&v1038, ": ", 2uLL);
        long long v502 = *(_OWORD *)&v501->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v501->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v502;
        v501->__r_.__value_.__l.__size_ = 0;
        v501->__r_.__value_.__r.__words[2] = 0;
        v501->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v428);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v503 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            uint64_t v504 = &cfa;
            goto LABEL_1135;
          }
          uint64_t v504 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v503 = --cfa.__r_.__value_.__l.__size_;
LABEL_1135:
            v504->__r_.__value_.__s.__data_[v503] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v505 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            float v506 = &v1046;
            goto LABEL_1142;
          }
          float v506 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v505 = --v1046.__begin_;
LABEL_1142:
            v505->__r_.__value_.__s.__data_[(void)v506] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v507 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v507 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v508 = HIBYTE(end);
        }
        else {
          std::string::size_type v508 = *((void *)&v1036 + 1);
        }
        uint64_t v509 = std::string::append(&v1039, v507, v508);
        long long v510 = *(_OWORD *)&v509->__r_.__value_.__l.__data_;
        v1034.__r_.__value_.__r.__words[2] = v509->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1034.__r_.__value_.__l.__data_ = v510;
        v509->__r_.__value_.__l.__size_ = 0;
        v509->__r_.__value_.__r.__words[2] = 0;
        v509->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        uint64_t v511 = std::string::append(&v1034, ",\n", 2uLL);
        long long v512 = *(_OWORD *)&v511->__r_.__value_.__l.__data_;
        v1035.__r_.__value_.__r.__words[2] = v511->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1035.__r_.__value_.__l.__data_ = v512;
        v511->__r_.__value_.__l.__size_ = 0;
        v511->__r_.__value_.__r.__words[2] = 0;
        v511->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v1038, "g_bw");
        uint64_t v513 = std::string::append(&v1038, ": ", 2uLL);
        long long v514 = *(_OWORD *)&v513->__r_.__value_.__l.__data_;
        v1039.__r_.__value_.__r.__words[2] = v513->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1039.__r_.__value_.__l.__data_ = v514;
        v513->__r_.__value_.__l.__size_ = 0;
        v513->__r_.__value_.__r.__words[2] = 0;
        v513->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&cfa, v427);
        while (2)
        {
          if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 48) {
              break;
            }
            uint64_t v515 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
            uint64_t v516 = &cfa;
            goto LABEL_1163;
          }
          uint64_t v516 = (std::string *)cfa.__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 48)
          {
            uint64_t v515 = --cfa.__r_.__value_.__l.__size_;
LABEL_1163:
            v516->__r_.__value_.__s.__data_[v515] = 0;
            continue;
          }
          break;
        }
        *(_OWORD *)&v1046.__first_ = *(_OWORD *)&cfa.__r_.__value_.__l.__data_;
        v1046.__end_ = (std::__split_buffer<std::string>::pointer)cfa.__r_.__value_.__r.__words[2];
        memset(&cfa, 0, sizeof(cfa));
        while (2)
        {
          if ((SHIBYTE(v1046.__end_) & 0x80000000) == 0)
          {
            if (*(&v1045 + HIBYTE(v1046.__end_)) != 46) {
              break;
            }
            std::__split_buffer<std::string>::pointer v517 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v1046.__end_) - 1);
            HIBYTE(v1046.__end_) = (HIBYTE(v1046.__end_) - 1) & 0x7F;
            uint64_t v518 = &v1046;
            goto LABEL_1170;
          }
          uint64_t v518 = v1046.__first_;
          if (v1046.__first_->__r_.__value_.__s.__data_[(unint64_t)v1046.__begin_ - 1] == 46)
          {
            std::__split_buffer<std::string>::pointer v517 = --v1046.__begin_;
LABEL_1170:
            v517->__r_.__value_.__s.__data_[(void)v518] = 0;
            continue;
          }
          break;
        }
        long long v1036 = *(_OWORD *)&v1046.__first_;
        std::__split_buffer<std::string>::pointer end = v1046.__end_;
        if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cfa.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(end) >= 0) {
          uint64_t v519 = (const std::string::value_type *)&v1036;
        }
        else {
          uint64_t v519 = (const std::string::value_type *)v1036;
        }
        if (SHIBYTE(end) >= 0) {
          std::string::size_type v520 = HIBYTE(end);
        }
        else {
          std::string::size_type v520 = *((void *)&v1036 + 1);
        }
        Float64 v521 = std::string::append(&v1039, v519, v520);
        long long v522 = *(_OWORD *)&v521->__r_.__value_.__l.__data_;
        int64_t v1033 = v521->__r_.__value_.__r.__words[2];
        long long v1032 = v522;
        v521->__r_.__value_.__l.__size_ = 0;
        v521->__r_.__value_.__r.__words[2] = 0;
        v521->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(end) < 0) {
          operator delete((void *)v1036);
        }
        if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1039.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1038.__r_.__value_.__l.__data_);
        }
        if (v1033 >= 0) {
          float v523 = (const std::string::value_type *)&v1032;
        }
        else {
          float v523 = (const std::string::value_type *)v1032;
        }
        if (v1033 >= 0) {
          std::string::size_type v524 = HIBYTE(v1033);
        }
        else {
          std::string::size_type v524 = *((void *)&v1032 + 1);
        }
        uint64_t v525 = std::string::append(&v1035, v523, v524);
        long long v526 = *(_OWORD *)&v525->__r_.__value_.__l.__data_;
        v1029.__r_.__value_.__r.__words[2] = v525->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1029.__r_.__value_.__l.__data_ = v526;
        v525->__r_.__value_.__l.__size_ = 0;
        v525->__r_.__value_.__r.__words[2] = 0;
        v525->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1033) < 0) {
          operator delete((void *)v1032);
        }
        if (SHIBYTE(v1035.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1035.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1034.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1034.__r_.__value_.__l.__data_);
        }
        if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v527 = &v1029;
        }
        else {
          v527 = (std::string *)v1029.__r_.__value_.__r.__words[0];
        }
        if ((v1029.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v528 = HIBYTE(v1029.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v528 = v1029.__r_.__value_.__l.__size_;
        }
        float v529 = std::string::append(&v1031, (const std::string::value_type *)v527, v528);
        long long v530 = *(_OWORD *)&v529->__r_.__value_.__l.__data_;
        v1025.__r_.__value_.__r.__words[2] = v529->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1025.__r_.__value_.__l.__data_ = v530;
        v529->__r_.__value_.__l.__size_ = 0;
        v529->__r_.__value_.__r.__words[2] = 0;
        v529->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1029.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1031.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1031.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1030.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1030.__r_.__value_.__l.__data_);
        }
        if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v531 = &v1025;
        }
        else {
          uint64_t v531 = (std::string *)v1025.__r_.__value_.__r.__words[0];
        }
        if ((v1025.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v532 = HIBYTE(v1025.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v532 = v1025.__r_.__value_.__l.__size_;
        }
        uint64_t v533 = std::string::append(&v1028, (const std::string::value_type *)v531, v532);
        long long v534 = *(_OWORD *)&v533->__r_.__value_.__l.__data_;
        v1022.__r_.__value_.__r.__words[2] = v533->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1022.__r_.__value_.__l.__data_ = v534;
        v533->__r_.__value_.__l.__size_ = 0;
        v533->__r_.__value_.__r.__words[2] = 0;
        v533->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1025.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1028.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1026.__r_.__value_.__l.__data_);
        }
        if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v535 = &v1022;
        }
        else {
          unint64_t v535 = (std::string *)v1022.__r_.__value_.__r.__words[0];
        }
        if ((v1022.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v536 = HIBYTE(v1022.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v536 = v1022.__r_.__value_.__l.__size_;
        }
        v537 = std::string::append(&v1024, (const std::string::value_type *)v535, v536);
        long long v538 = *(_OWORD *)&v537->__r_.__value_.__l.__data_;
        v1019.__r_.__value_.__r.__words[2] = v537->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1019.__r_.__value_.__l.__data_ = v538;
        v537->__r_.__value_.__l.__size_ = 0;
        v537->__r_.__value_.__r.__words[2] = 0;
        v537->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1022.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1022.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1024.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1023.__r_.__value_.__l.__data_);
        }
        if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v539 = &v1019;
        }
        else {
          int v539 = (std::string *)v1019.__r_.__value_.__r.__words[0];
        }
        if ((v1019.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v540 = HIBYTE(v1019.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v540 = v1019.__r_.__value_.__l.__size_;
        }
        int v541 = std::string::append(&v1021, (const std::string::value_type *)v539, v540);
        long long v542 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
        v1016.__r_.__value_.__r.__words[2] = v541->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1016.__r_.__value_.__l.__data_ = v542;
        v541->__r_.__value_.__l.__size_ = 0;
        v541->__r_.__value_.__r.__words[2] = 0;
        v541->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1019.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1019.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1021.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1021.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1020.__r_.__value_.__l.__data_);
        }
        if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v543 = &v1016;
        }
        else {
          uint64_t v543 = (std::string *)v1016.__r_.__value_.__r.__words[0];
        }
        if ((v1016.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v544 = HIBYTE(v1016.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v544 = v1016.__r_.__value_.__l.__size_;
        }
        uint64_t v545 = std::string::append(&v1018, (const std::string::value_type *)v543, v544);
        long long v546 = *(_OWORD *)&v545->__r_.__value_.__l.__data_;
        v1013.__r_.__value_.__r.__words[2] = v545->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1013.__r_.__value_.__l.__data_ = v546;
        v545->__r_.__value_.__l.__size_ = 0;
        v545->__r_.__value_.__r.__words[2] = 0;
        v545->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1016.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1016.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1018.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1018.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1017.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1017.__r_.__value_.__l.__data_);
        }
        if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          AudioTimeStamp v547 = &v1013;
        }
        else {
          AudioTimeStamp v547 = (std::string *)v1013.__r_.__value_.__r.__words[0];
        }
        if ((v1013.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v548 = HIBYTE(v1013.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v548 = v1013.__r_.__value_.__l.__size_;
        }
        int v549 = std::string::append(&v1015, (const std::string::value_type *)v547, v548);
        std::string v1011 = *v549;
        v549->__r_.__value_.__l.__size_ = 0;
        v549->__r_.__value_.__r.__words[2] = 0;
        v549->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1013.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1013.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1015.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1015.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1014.__r_.__value_.__l.__data_);
        }
        AUT::ReplaceAll((std::string *)&v1046, (uint64_t)&v1011, "\n", 1, "\n  ┣ ", 7uLL);
        int v550 = std::string::insert((std::string *)&v1046, 0, "\n  ┏ ", 7uLL);
        long long v551 = *(_OWORD *)&v550->__r_.__value_.__l.__data_;
        v1012.__r_.__value_.__r.__words[2] = v550->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1012.__r_.__value_.__l.__data_ = v551;
        v550->__r_.__value_.__l.__size_ = 0;
        v550->__r_.__value_.__r.__words[2] = 0;
        v550->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1046.__end_) < 0) {
          operator delete(v1046.__first_);
        }
        int v552 = &v1012;
        if ((v1012.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v552 = (std::string *)v1012.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3863;
        *(_WORD *)&uint8_t buf[18] = 1024;
        *(_DWORD *)&buf[20] = v420;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v552;
        _os_log_impl(&dword_1BB0CE000, v419, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying OL displacement params to channel %i:%s", buf, 0x22u);
        if (SHIBYTE(v1012.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1012.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1011.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1011.__r_.__value_.__l.__data_);
        }
LABEL_1277:
        float v554 = *((float *)v417 + 1);
        float v553 = *((float *)v417 + 2);
        float v556 = *((float *)v417 + 3);
        float v555 = *((float *)v417 + 4);
        float v558 = *((float *)v417 + 5);
        float v557 = *((float *)v417 + 6);
        float v560 = *((float *)v417 + 7);
        float v559 = *((float *)v417 + 8);
        uint64_t v561 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), *v417);
        ausdk::AUElement::SetParameter(v561, 0x11u, v554, 0);
        ausdk::AUElement::SetParameter(v561, 0xEu, v553, 0);
        ausdk::AUElement::SetParameter(v561, 0xDu, v556, 0);
        ausdk::AUElement::SetParameter(v561, 0x12u, v555, 0);
        ausdk::AUElement::SetParameter(v561, 0x13u, v558, 0);
        ausdk::AUElement::SetParameter(v561, 0xFu, v557, 0);
        ausdk::AUElement::SetParameter(v561, 0xCu, v560, 0);
        ausdk::AUElement::SetParameter(v561, 0x10u, v559, 0);
        v417 += 9;
        if (v417 != v46) {
          continue;
        }
        break;
      }
LABEL_1278:
      *((unsigned char *)this + 528) = 1;
      ausdk::AUScope::SetNumberOfElements((AUSpeakerProtectionV3 *)((char *)this + 792), *((_DWORD *)this + 158));
      if (v993) {
        operator delete(v993);
      }
      if (__p) {
        operator delete(__p);
      }
      if (!v1001)
      {
        v927 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v927, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1039, (const __CFDictionary *)v1001);
      int v933 = *((_DWORD *)this + 158);
      float v562 = 0;
      if (v933)
      {
        float v563 = 0;
        float v564 = 0;
        unsigned int v565 = 0;
        while (1)
        {
          if (!v1039.__r_.__value_.__r.__words[0])
          {
            v919 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v919, "Could not construct");
          }
          std::to_string((std::string *)&v1046, v565);
          v566 = std::string::insert((std::string *)&v1046, 0, "Channel", 7uLL);
          long long v567 = *(_OWORD *)&v566->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v566->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v567;
          v566->__r_.__value_.__l.__size_ = 0;
          v566->__r_.__value_.__r.__words[2] = 0;
          v566->__r_.__value_.__r.__words[0] = 0;
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, (const __CFDictionary *)v1039.__r_.__value_.__l.__data_, (uint64_t)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v1046.__end_) < 0) {
            operator delete(v1046.__first_);
          }
          if (!cfa.__r_.__value_.__r.__words[0])
          {
            v920 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v920, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1046, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::CLParamStruct::key);
          double v568 = (NSObject **)spp3Subsystem();
          if (v568)
          {
            double v569 = *v568;
            if (!*v568) {
              goto LABEL_1297;
            }
          }
          else
          {
            double v569 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v569, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3784;
            *(_WORD *)&uint8_t buf[18] = 2080;
            *(void *)&buf[20] = "CL";
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v565;
            _os_log_impl(&dword_1BB0CE000, v569, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
          }
LABEL_1297:
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v570 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::TempSenseWindowTime::key);
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v571 = v570;
          float v572 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::TempSenseSmoothingTau::key);
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v573 = v572;
          float v574 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::TlimErrDecayTime::key);
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v575 = v574;
          float v944 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotAmplHi_dB::key);
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v943 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotAmplLo_dB::key);
          if (!v1046.__first_) {
            goto LABEL_2033;
          }
          float v942 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotUpperThres::key);
          if (!v1046.__first_
            || (v941 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotLowerThres::key), !v1046.__first_)|| (v940 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotDecayTime::key), !v1046.__first_)|| (v939 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotFreq::key), !v1046.__first_)|| (v938 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::LPMLSPreGain::key), !v1046.__first_)|| (float v937 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::LPMLSPostGain::key), !v1046.__first_)
            || (v936 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::LPMLSLowerCorner::key), !v1046.__first_)|| (unsigned int v576 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ThermalMeasurementMethod::key), !v1046.__first_))
          {
LABEL_2033:
            v921 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v921, "Could not construct");
          }
          unsigned int v577 = applesauce::CF::details::find_at_key<int,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::DisplacementProtectionType::key);
          if (!v1046.__first_
            || (float v578 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotDecayTimeStage2::key), !v1046.__first_))
          {
            v601 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v601, "Could not construct");
          }
          unsigned int v579 = v935 & 0xFFFFFF00 | 1;
          unint64_t v580 = LODWORD(v578) | ((unint64_t)COERCE_UNSIGNED_INT(applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::PilotEnableThres::key)) << 32);
          unsigned int v935 = v579;
          if (!v1046.__first_)
          {
            v600 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v600, "Could not construct");
          }
          float __pa = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyMinExcursion::key);
          if (!v1046.__first_)
          {
            float v602 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v602, "Could not construct");
          }
          float v581 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyMaxExcursion::key);
          if (!v1046.__first_)
          {
            v603 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v603, "Could not construct");
          }
          float v582 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakFinderThresholdUpper::key);
          if (!v1046.__first_)
          {
            float v604 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v604, "Could not construct");
          }
          float v990 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakFinderThresholdLower::key);
          if (!v1046.__first_)
          {
            v605 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v605, "Could not construct");
          }
          float __vala = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyNormFactorCapUpper::key);
          if (!v1046.__first_)
          {
            float v606 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v606, "Could not construct");
          }
          float v977 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyNormFactorCapLower::key);
          if (!v1046.__first_)
          {
            uint64_t v607 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v607, "Could not construct");
          }
          float v972 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakRatioPosBlockThreshold::key);
          if (!v1046.__first_)
          {
            float v608 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v608, "Could not construct");
          }
          float v967 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakRatioNegBlockThreshold::key);
          if (!v1046.__first_)
          {
            v609 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v609, "Could not construct");
          }
          float v962 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyRelXLimUpper::key);
          if (!v1046.__first_)
          {
            v610 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v610, "Could not construct");
          }
          float v957 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyRelXLimLower::key);
          if (!v1046.__first_)
          {
            v611 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v611, "Could not construct");
          }
          float v954 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyNormFactorAttack::key);
          if (!v1046.__first_)
          {
            float v612 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v612, "Could not construct");
          }
          float v951 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyNormFactorRelease::key);
          if (!v1046.__first_)
          {
            v613 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v613, "Could not construct");
          }
          float v948 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakDetectorAtkTime::key);
          if (!v1046.__first_)
          {
            v614 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v614, "Could not construct");
          }
          float v583 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakDetectorRelTime::key);
          if (!v1046.__first_)
          {
            v615 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v615, "Could not construct");
          }
          float v584 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold::key);
          if (!v1046.__first_)
          {
            v616 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v616, "Could not construct");
          }
          float v585 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyNormFactorThreshold::key);
          if (!v1046.__first_)
          {
            v617 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v617, "Could not construct");
          }
          float v934 = applesauce::CF::details::find_at_key<float,char const* const&>((const __CFDictionary *)v1046.__first_, (const char **)clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms::key);
          if (v562 >= (unsigned int *)v563)
          {
            unint64_t v586 = 0x8E38E38E38E38E39 * (((char *)v562 - (char *)v564) >> 4) + 1;
            if (v586 > 0x1C71C71C71C71C7) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((v563 - (char *)v564) >> 4) > v586) {
              unint64_t v586 = 0x1C71C71C71C71C72 * ((v563 - (char *)v564) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((v563 - (char *)v564) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v587 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v587 = v586;
            }
            if (v587)
            {
              if (v587 > 0x1C71C71C71C71C7) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v588 = (char *)operator new(144 * v587);
            }
            else
            {
              int v588 = 0;
            }
            v589 = &v588[16 * (((char *)v562 - (char *)v564) >> 4)];
            *(_DWORD *)v589 = v565;
            *((float *)v589 + 1) = v571;
            *((float *)v589 + 2) = v573;
            *((float *)v589 + 3) = v575;
            *((float *)v589 + 4) = v944;
            *((float *)v589 + 5) = v943;
            *((float *)v589 + 6) = v942;
            *((float *)v589 + 7) = v941;
            *((float *)v589 + 8) = v940;
            *((float *)v589 + 9) = v939;
            *((float *)v589 + 10) = v938;
            *((float *)v589 + 11) = v937;
            *((float *)v589 + 12) = v936;
            *((_DWORD *)v589 + 13) = v576;
            *((_DWORD *)v589 + 14) = v577;
            *(void *)(v589 + 60) = v580;
            *((_DWORD *)v589 + 17) = v579;
            *((float *)v589 + 18) = __pa;
            *((float *)v589 + 19) = v581;
            *((float *)v589 + 20) = v582;
            *((float *)v589 + 21) = v990;
            *((float *)v589 + 22) = __vala;
            *((float *)v589 + 23) = v977;
            *((float *)v589 + 24) = v972;
            *((float *)v589 + 25) = v967;
            *((float *)v589 + 26) = v962;
            *((float *)v589 + 27) = v957;
            *((float *)v589 + 28) = v954;
            *((float *)v589 + 29) = v951;
            *((float *)v589 + 30) = v948;
            *((float *)v589 + 31) = v583;
            *((float *)v589 + 32) = v584;
            *((float *)v589 + 33) = v585;
            *((float *)v589 + 34) = v934;
            v589[140] = 1;
            v589[143] = buf[2];
            *(_WORD *)(v589 + 141) = *(_WORD *)buf;
            if (v562 == v564)
            {
              v597 = &v588[16 * (((char *)v562 - (char *)v564) >> 4)];
            }
            else
            {
              uint64_t v590 = &v588[16 * (((char *)v562 - (char *)v564) >> 4)];
              do
              {
                *((_OWORD *)v590 - 9) = *((_OWORD *)v562 - 9);
                long long v591 = *((_OWORD *)v562 - 8);
                long long v592 = *((_OWORD *)v562 - 7);
                long long v593 = *((_OWORD *)v562 - 5);
                *((_OWORD *)v590 - 6) = *((_OWORD *)v562 - 6);
                *((_OWORD *)v590 - 5) = v593;
                *((_OWORD *)v590 - 8) = v591;
                *((_OWORD *)v590 - 7) = v592;
                long long v594 = *((_OWORD *)v562 - 4);
                long long v595 = *((_OWORD *)v562 - 3);
                long long v596 = *((_OWORD *)v562 - 1);
                v597 = v590 - 144;
                *((_OWORD *)v590 - 2) = *((_OWORD *)v562 - 2);
                *((_OWORD *)v590 - 1) = v596;
                *((_OWORD *)v590 - 4) = v594;
                *((_OWORD *)v590 - 3) = v595;
                v562 -= 36;
                v590 -= 144;
              }
              while (v562 != v564);
            }
            float v563 = &v588[144 * v587];
            float v562 = (unsigned int *)(v589 + 144);
            if (v564) {
              operator delete(v564);
            }
            float v564 = (unsigned int *)v597;
          }
          else
          {
            *float v562 = v565;
            *((float *)v562 + 1) = v571;
            *((float *)v562 + 2) = v573;
            *((float *)v562 + 3) = v575;
            *((float *)v562 + 4) = v944;
            *((float *)v562 + 5) = v943;
            *((float *)v562 + 6) = v942;
            *((float *)v562 + 7) = v941;
            *((float *)v562 + 8) = v940;
            *((float *)v562 + 9) = v939;
            *((float *)v562 + 10) = v938;
            *((float *)v562 + 11) = v937;
            *((float *)v562 + 12) = v936;
            v562[13] = v576;
            v562[14] = v577;
            *(void *)(v562 + 15) = v580;
            v562[17] = v579;
            *((float *)v562 + 18) = __pa;
            *((float *)v562 + 19) = v581;
            *((float *)v562 + 20) = v582;
            *((float *)v562 + 21) = v990;
            *((float *)v562 + 22) = __vala;
            *((float *)v562 + 23) = v977;
            *((float *)v562 + 24) = v972;
            *((float *)v562 + 25) = v967;
            *((float *)v562 + 26) = v962;
            *((float *)v562 + 27) = v957;
            *((float *)v562 + 28) = v954;
            *((float *)v562 + 29) = v951;
            *((float *)v562 + 30) = v948;
            *((float *)v562 + 31) = v583;
            *((float *)v562 + 32) = v584;
            *((float *)v562 + 33) = v585;
            *((float *)v562 + 34) = v934;
            *((unsigned char *)v562 + 140) = 1;
            *((unsigned char *)v562 + 143) = buf[2];
            *(_WORD *)((char *)v562 + 141) = *(_WORD *)buf;
            v562 += 36;
          }
          float v598 = (NSObject **)spp3Subsystem();
          if (!v598)
          {
            int v599 = MEMORY[0x1E4F14500];
LABEL_1354:
            if (os_log_type_enabled(v599, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3789;
              *(_WORD *)&uint8_t buf[18] = 2080;
              *(void *)&buf[20] = "CL";
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v565;
              _os_log_impl(&dword_1BB0CE000, v599, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
            }
            goto LABEL_1356;
          }
          int v599 = *v598;
          if (*v598) {
            goto LABEL_1354;
          }
LABEL_1356:
          if (v1046.__first_) {
            CFRelease(v1046.__first_);
          }
          if (cfa.__r_.__value_.__r.__words[0]) {
            CFRelease(cfa.__r_.__value_.__l.__data_);
          }
          if (++v565 == v933) {
            goto LABEL_1382;
          }
        }
      }
      float v564 = 0;
LABEL_1382:
      if (v1039.__r_.__value_.__r.__words[0]) {
        CFRelease(v1039.__r_.__value_.__l.__data_);
      }
      v618 = (NSObject **)spp3Subsystem();
      if (v618)
      {
        v619 = *v618;
        if (!*v618) {
          goto LABEL_1390;
        }
      }
      else
      {
        v619 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v619, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3888;
        *(_WORD *)&uint8_t buf[18] = 2048;
        *(void *)&buf[20] = 0x8E38E38E38E38E39 * (((char *)v562 - (char *)v564) >> 4);
        _os_log_impl(&dword_1BB0CE000, v619, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu the per-speaker CL params.", buf, 0x1Cu);
      }
LABEL_1390:
      if (!v1001)
      {
        v930 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v930, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1038, (const __CFDictionary *)v1001);
      int v620 = *((_DWORD *)this + 158);
      memset(&v1031, 0, sizeof(v1031));
      if (v620)
      {
        if (!v1038.__r_.__value_.__r.__words[0])
        {
          v917 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v917, "Could not construct");
        }
        std::to_string((std::string *)&v1046, 0);
        uint64_t v621 = std::string::insert((std::string *)&v1046, 0, "Channel", 7uLL);
        long long v622 = *(_OWORD *)&v621->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v621->__r_.__value_.__l + 2);
        *(_OWORD *)std::string buf = v622;
        v621->__r_.__value_.__l.__size_ = 0;
        v621->__r_.__value_.__r.__words[2] = 0;
        v621->__r_.__value_.__r.__words[0] = 0;
        applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&cfa, (const __CFDictionary *)v1038.__r_.__value_.__l.__data_, (uint64_t)buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v1046.__end_) < 0) {
          operator delete(v1046.__first_);
        }
        if (!cfa.__r_.__value_.__r.__words[0])
        {
          v918 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v918, "Could not construct");
        }
        applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>((applesauce::CF::DictionaryRef *)&v1046, (const __CFDictionary *)cfa.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::ClosedLoopParametersStruct::key);
        float v623 = (NSObject **)spp3Subsystem();
        if (v623)
        {
          float v624 = *v623;
          if (!*v623) {
            goto LABEL_1404;
          }
        }
        else
        {
          float v624 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v624, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3784;
          *(_WORD *)&uint8_t buf[18] = 2080;
          *(void *)&buf[20] = "CL";
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = 0;
          _os_log_impl(&dword_1BB0CE000, v624, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
        }
LABEL_1404:
        *(void *)std::string buf = v1046.__first_;
        *(_WORD *)&uint8_t buf[8] = 0;
        clsp::ClosedLoopParameters::Create((clsp::ClosedLoopParameters *)&v1039, (const CACFDictionary *)buf);
      }
      if (v1038.__r_.__value_.__r.__words[0]) {
        CFRelease(v1038.__r_.__value_.__l.__data_);
      }
      v625 = (NSObject **)spp3Subsystem();
      if (v625)
      {
        v626 = *v625;
        if (!*v625)
        {
LABEL_1413:
          if (v564 == v562) {
            goto LABEL_1767;
          }
          float v627 = v564;
          do
          {
            v628 = (NSObject **)spp3Subsystem();
            if (v628)
            {
              float v629 = *v628;
              if (!*v628) {
                goto LABEL_1685;
              }
            }
            else
            {
              float v629 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v629, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_1685;
            }
            unsigned int v630 = *v627;
            *(_OWORD *)std::string buf = *(_OWORD *)(v627 + 1);
            long long v631 = *(_OWORD *)(v627 + 5);
            long long v632 = *(_OWORD *)(v627 + 9);
            long long v633 = *(_OWORD *)(v627 + 17);
            long long v1041 = *(_OWORD *)(v627 + 13);
            long long v1042 = v633;
            *(_OWORD *)&uint8_t buf[16] = v631;
            *(_OWORD *)&uint8_t buf[32] = v632;
            long long v634 = *(_OWORD *)(v627 + 21);
            long long v635 = *(_OWORD *)(v627 + 25);
            long long v636 = *(_OWORD *)(v627 + 29);
            *(_OWORD *)&v1044[12] = *((_OWORD *)v627 + 8);
            v1043[1] = v635;
            *(_OWORD *)v1044 = v636;
            v1043[0] = v634;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "TempSenseWindowTime");
            v637 = std::string::append(&v1025, ": ", 2uLL);
            long long v638 = *(_OWORD *)&v637->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v637->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v638;
            v637->__r_.__value_.__l.__size_ = 0;
            v637->__r_.__value_.__r.__words[2] = 0;
            v637->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *(float *)buf);
            while ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                goto LABEL_1427;
              }
              uint64_t v639 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
              *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
              v640 = &v1028;
LABEL_1426:
              v640->__r_.__value_.__s.__data_[v639] = 0;
            }
            v640 = (std::string *)v1028.__r_.__value_.__r.__words[0];
            if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
            {
              uint64_t v639 = --v1028.__r_.__value_.__l.__size_;
              goto LABEL_1426;
            }
LABEL_1427:
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                goto LABEL_1434;
              }
              uint64_t v641 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
              *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
              v642 = &cfa;
LABEL_1433:
              v642->__r_.__value_.__s.__data_[v641] = 0;
            }
            v642 = (std::string *)cfa.__r_.__value_.__r.__words[0];
            if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
            {
              uint64_t v641 = --cfa.__r_.__value_.__l.__size_;
              goto LABEL_1433;
            }
LABEL_1434:
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v643 = &v1039;
            }
            else {
              v643 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v644 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v644 = v1039.__r_.__value_.__l.__size_;
            }
            int v645 = std::string::append(&v1026, (const std::string::value_type *)v643, v644);
            long long v646 = *(_OWORD *)&v645->__r_.__value_.__l.__data_;
            v1023.__r_.__value_.__r.__words[2] = v645->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v646;
            v645->__r_.__value_.__l.__size_ = 0;
            v645->__r_.__value_.__r.__words[2] = 0;
            v645->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            int v647 = std::string::append(&v1023, ",\n", 2uLL);
            long long v648 = *(_OWORD *)&v647->__r_.__value_.__l.__data_;
            v1024.__r_.__value_.__r.__words[2] = v647->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v648;
            v647->__r_.__value_.__l.__size_ = 0;
            v647->__r_.__value_.__r.__words[2] = 0;
            v647->__r_.__value_.__r.__words[0] = 0;
            clsp::ScopedParamStruct<clsp::plistV9::TempSenseSmoothingTau,clsp::plistV9::TlimErrDecayTime,clsp::plistV9::PilotAmplHi_dB,clsp::plistV9::PilotAmplLo_dB,clsp::plistV9::PilotUpperThres,clsp::plistV9::PilotLowerThres,clsp::plistV9::PilotDecayTime,clsp::plistV9::PilotFreq,clsp::plistV9::LPMLSPreGain,clsp::plistV9::LPMLSPostGain,clsp::plistV9::LPMLSLowerCorner,clsp::plistV9::ThermalMeasurementMethod,clsp::plistV9::DisplacementProtectionType>::toString(&cfa, (uint64_t)&buf[4]);
            if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v649 = &cfa;
            }
            else {
              v649 = (std::string *)cfa.__r_.__value_.__r.__words[0];
            }
            if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v650 = HIBYTE(cfa.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v650 = cfa.__r_.__value_.__l.__size_;
            }
            v651 = std::string::append(&v1024, (const std::string::value_type *)v649, v650);
            long long v652 = *(_OWORD *)&v651->__r_.__value_.__l.__data_;
            v1014.__r_.__value_.__r.__words[2] = v651->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1014.__r_.__value_.__l.__data_ = v652;
            v651->__r_.__value_.__l.__size_ = 0;
            v651->__r_.__value_.__r.__words[2] = 0;
            v651->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(cfa.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1024.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1023.__r_.__value_.__l.__data_);
            }
            int v653 = v1044[24];
            if (!v1044[24])
            {
              std::string::basic_string[abi:ne180100]<0>(&v1032, "");
              goto LABEL_1663;
            }
            std::string::basic_string[abi:ne180100]<0>(&v1025, "ConvoyMinExcursion");
            v654 = std::string::append(&v1025, ": ", 2uLL);
            long long v655 = *(_OWORD *)&v654->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v654->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v655;
            v654->__r_.__value_.__l.__size_ = 0;
            v654->__r_.__value_.__r.__words[2] = 0;
            v654->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *((float *)&v1042 + 1));
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v656 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v657 = &v1028;
                goto LABEL_1467;
              }
              v657 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v656 = --v1028.__r_.__value_.__l.__size_;
LABEL_1467:
                v657->__r_.__value_.__s.__data_[v656] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v658 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                int v659 = &cfa;
                goto LABEL_1474;
              }
              int v659 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v658 = --cfa.__r_.__value_.__l.__size_;
LABEL_1474:
                v659->__r_.__value_.__s.__data_[v658] = 0;
                continue;
              }
              break;
            }
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v660 = &v1039;
            }
            else {
              int v660 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v661 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v661 = v1039.__r_.__value_.__l.__size_;
            }
            uint64_t v662 = std::string::append(&v1026, (const std::string::value_type *)v660, v661);
            long long v663 = *(_OWORD *)&v662->__r_.__value_.__l.__data_;
            v1015.__r_.__value_.__r.__words[2] = v662->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1015.__r_.__value_.__l.__data_ = v663;
            v662->__r_.__value_.__l.__size_ = 0;
            v662->__r_.__value_.__r.__words[2] = 0;
            v662->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            uint64_t v664 = std::string::append(&v1015, ",\n", 2uLL);
            long long v665 = *(_OWORD *)&v664->__r_.__value_.__l.__data_;
            v1016.__r_.__value_.__r.__words[2] = v664->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1016.__r_.__value_.__l.__data_ = v665;
            v664->__r_.__value_.__l.__size_ = 0;
            v664->__r_.__value_.__r.__words[2] = 0;
            v664->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "ConvoyMaxExcursion");
            v666 = std::string::append(&v1025, ": ", 2uLL);
            long long v667 = *(_OWORD *)&v666->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v666->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v667;
            v666->__r_.__value_.__l.__size_ = 0;
            v666->__r_.__value_.__r.__words[2] = 0;
            v666->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *((float *)&v1042 + 2));
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v668 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v669 = &v1028;
                goto LABEL_1495;
              }
              v669 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v668 = --v1028.__r_.__value_.__l.__size_;
LABEL_1495:
                v669->__r_.__value_.__s.__data_[v668] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v670 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                v671 = &cfa;
                goto LABEL_1502;
              }
              v671 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v670 = --cfa.__r_.__value_.__l.__size_;
LABEL_1502:
                v671->__r_.__value_.__s.__data_[v670] = 0;
                continue;
              }
              break;
            }
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v672 = &v1039;
            }
            else {
              float v672 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v673 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v673 = v1039.__r_.__value_.__l.__size_;
            }
            v674 = std::string::append(&v1026, (const std::string::value_type *)v672, v673);
            long long v675 = *(_OWORD *)&v674->__r_.__value_.__l.__data_;
            v1017.__r_.__value_.__r.__words[2] = v674->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1017.__r_.__value_.__l.__data_ = v675;
            v674->__r_.__value_.__l.__size_ = 0;
            v674->__r_.__value_.__r.__words[2] = 0;
            v674->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            double v676 = std::string::append(&v1017, ",\n", 2uLL);
            long long v677 = *(_OWORD *)&v676->__r_.__value_.__l.__data_;
            v1018.__r_.__value_.__r.__words[2] = v676->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1018.__r_.__value_.__l.__data_ = v677;
            v676->__r_.__value_.__l.__size_ = 0;
            v676->__r_.__value_.__r.__words[2] = 0;
            v676->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "ConvoyPeakFinderThresholdUpper");
            double v678 = std::string::append(&v1025, ": ", 2uLL);
            long long v679 = *(_OWORD *)&v678->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v678->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v679;
            v678->__r_.__value_.__l.__size_ = 0;
            v678->__r_.__value_.__r.__words[2] = 0;
            v678->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *((float *)&v1042 + 3));
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v680 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                __int16 v681 = &v1028;
                goto LABEL_1523;
              }
              __int16 v681 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v680 = --v1028.__r_.__value_.__l.__size_;
LABEL_1523:
                v681->__r_.__value_.__s.__data_[v680] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v682 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                __int16 v683 = &cfa;
                goto LABEL_1530;
              }
              __int16 v683 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v682 = --cfa.__r_.__value_.__l.__size_;
LABEL_1530:
                v683->__r_.__value_.__s.__data_[v682] = 0;
                continue;
              }
              break;
            }
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v684 = &v1039;
            }
            else {
              double v684 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v685 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v685 = v1039.__r_.__value_.__l.__size_;
            }
            double v686 = std::string::append(&v1026, (const std::string::value_type *)v684, v685);
            long long v687 = *(_OWORD *)&v686->__r_.__value_.__l.__data_;
            v1019.__r_.__value_.__r.__words[2] = v686->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1019.__r_.__value_.__l.__data_ = v687;
            v686->__r_.__value_.__l.__size_ = 0;
            v686->__r_.__value_.__r.__words[2] = 0;
            v686->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            v688 = std::string::append(&v1019, ",\n", 2uLL);
            long long v689 = *(_OWORD *)&v688->__r_.__value_.__l.__data_;
            v1020.__r_.__value_.__r.__words[2] = v688->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1020.__r_.__value_.__l.__data_ = v689;
            v688->__r_.__value_.__l.__size_ = 0;
            v688->__r_.__value_.__r.__words[2] = 0;
            v688->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "ConvoyPeakFinderThresholdLower");
            v690 = std::string::append(&v1025, ": ", 2uLL);
            long long v691 = *(_OWORD *)&v690->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v690->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v691;
            v690->__r_.__value_.__l.__size_ = 0;
            v690->__r_.__value_.__r.__words[2] = 0;
            v690->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *(float *)v1043);
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v692 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v693 = &v1028;
                goto LABEL_1551;
              }
              v693 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v692 = --v1028.__r_.__value_.__l.__size_;
LABEL_1551:
                v693->__r_.__value_.__s.__data_[v692] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v694 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                v695 = &cfa;
                goto LABEL_1558;
              }
              v695 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v694 = --cfa.__r_.__value_.__l.__size_;
LABEL_1558:
                v695->__r_.__value_.__s.__data_[v694] = 0;
                continue;
              }
              break;
            }
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v696 = &v1039;
            }
            else {
              v696 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v697 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v697 = v1039.__r_.__value_.__l.__size_;
            }
            v698 = std::string::append(&v1026, (const std::string::value_type *)v696, v697);
            long long v699 = *(_OWORD *)&v698->__r_.__value_.__l.__data_;
            v1021.__r_.__value_.__r.__words[2] = v698->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1021.__r_.__value_.__l.__data_ = v699;
            v698->__r_.__value_.__l.__size_ = 0;
            v698->__r_.__value_.__r.__words[2] = 0;
            v698->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            v700 = std::string::append(&v1021, ",\n", 2uLL);
            long long v701 = *(_OWORD *)&v700->__r_.__value_.__l.__data_;
            v1022.__r_.__value_.__r.__words[2] = v700->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1022.__r_.__value_.__l.__data_ = v701;
            v700->__r_.__value_.__l.__size_ = 0;
            v700->__r_.__value_.__r.__words[2] = 0;
            v700->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "ConvoyNormFactorCapUpper");
            v702 = std::string::append(&v1025, ": ", 2uLL);
            long long v703 = *(_OWORD *)&v702->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v702->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v703;
            v702->__r_.__value_.__l.__size_ = 0;
            v702->__r_.__value_.__r.__words[2] = 0;
            v702->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, *((float *)v1043 + 1));
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v704 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v705 = &v1028;
                goto LABEL_1579;
              }
              v705 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v704 = --v1028.__r_.__value_.__l.__size_;
LABEL_1579:
                v705->__r_.__value_.__s.__data_[v704] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v706 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                v707 = &cfa;
                goto LABEL_1586;
              }
              v707 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v706 = --cfa.__r_.__value_.__l.__size_;
LABEL_1586:
                v707->__r_.__value_.__s.__data_[v706] = 0;
                continue;
              }
              break;
            }
            std::string v1039 = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v708 = &v1039;
            }
            else {
              v708 = (std::string *)v1039.__r_.__value_.__r.__words[0];
            }
            if ((v1039.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v709 = HIBYTE(v1039.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v709 = v1039.__r_.__value_.__l.__size_;
            }
            v710 = std::string::append(&v1026, (const std::string::value_type *)v708, v709);
            long long v711 = *(_OWORD *)&v710->__r_.__value_.__l.__data_;
            v1023.__r_.__value_.__r.__words[2] = v710->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v711;
            v710->__r_.__value_.__l.__size_ = 0;
            v710->__r_.__value_.__r.__words[2] = 0;
            v710->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1039.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            v712 = std::string::append(&v1023, ",\n", 2uLL);
            long long v713 = *(_OWORD *)&v712->__r_.__value_.__l.__data_;
            v1024.__r_.__value_.__r.__words[2] = v712->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v713;
            v712->__r_.__value_.__l.__size_ = 0;
            v712->__r_.__value_.__r.__words[2] = 0;
            v712->__r_.__value_.__r.__words[0] = 0;
            clsp::ScopedParamStruct<clsp::plistV9::ConvoyNormFactorCapLower,clsp::plistV9::ConvoyPeakRatioPosBlockThreshold,clsp::plistV9::ConvoyPeakRatioNegBlockThreshold,clsp::plistV9::ConvoyRelXLimUpper,clsp::plistV9::ConvoyRelXLimLower,clsp::plistV9::ConvoyNormFactorAttack,clsp::plistV9::ConvoyNormFactorRelease,clsp::plistV9::ConvoyPeakDetectorAtkTime,clsp::plistV9::ConvoyPeakDetectorRelTime,clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold,clsp::plistV9::ConvoyNormFactorThreshold,clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms>::toString(&cfa, (float *)v1043 + 2);
            if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v714 = &cfa;
            }
            else {
              v714 = (std::string *)cfa.__r_.__value_.__r.__words[0];
            }
            if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v715 = HIBYTE(cfa.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v715 = cfa.__r_.__value_.__l.__size_;
            }
            v716 = std::string::append(&v1024, (const std::string::value_type *)v714, v715);
            long long v717 = *(_OWORD *)&v716->__r_.__value_.__l.__data_;
            v1038.__r_.__value_.__r.__words[2] = v716->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1038.__r_.__value_.__l.__data_ = v717;
            v716->__r_.__value_.__l.__size_ = 0;
            v716->__r_.__value_.__r.__words[2] = 0;
            v716->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(cfa.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1024.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1023.__r_.__value_.__l.__data_);
            }
            if ((v1038.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v718 = &v1038;
            }
            else {
              v718 = (std::string *)v1038.__r_.__value_.__r.__words[0];
            }
            if ((v1038.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v719 = HIBYTE(v1038.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v719 = v1038.__r_.__value_.__l.__size_;
            }
            v720 = std::string::append(&v1022, (const std::string::value_type *)v718, v719);
            long long v721 = *(_OWORD *)&v720->__r_.__value_.__l.__data_;
            std::__split_buffer<std::string>::pointer end = (std::__split_buffer<std::string>::pointer)v720->__r_.__value_.__r.__words[2];
            long long v1036 = v721;
            v720->__r_.__value_.__l.__size_ = 0;
            v720->__r_.__value_.__r.__words[2] = 0;
            v720->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1038.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1022.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1022.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1021.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1021.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(end) >= 0) {
              v722 = (const std::string::value_type *)&v1036;
            }
            else {
              v722 = (const std::string::value_type *)v1036;
            }
            if (SHIBYTE(end) >= 0) {
              std::string::size_type v723 = HIBYTE(end);
            }
            else {
              std::string::size_type v723 = *((void *)&v1036 + 1);
            }
            v724 = std::string::append(&v1020, v722, v723);
            long long v725 = *(_OWORD *)&v724->__r_.__value_.__l.__data_;
            v1035.__r_.__value_.__r.__words[2] = v724->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1035.__r_.__value_.__l.__data_ = v725;
            v724->__r_.__value_.__l.__size_ = 0;
            v724->__r_.__value_.__r.__words[2] = 0;
            v724->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(end) < 0) {
              operator delete((void *)v1036);
            }
            if (SHIBYTE(v1020.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1020.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1019.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1019.__r_.__value_.__l.__data_);
            }
            if ((v1035.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v726 = &v1035;
            }
            else {
              v726 = (std::string *)v1035.__r_.__value_.__r.__words[0];
            }
            if ((v1035.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v727 = HIBYTE(v1035.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v727 = v1035.__r_.__value_.__l.__size_;
            }
            v728 = std::string::append(&v1018, (const std::string::value_type *)v726, v727);
            long long v729 = *(_OWORD *)&v728->__r_.__value_.__l.__data_;
            v1034.__r_.__value_.__r.__words[2] = v728->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1034.__r_.__value_.__l.__data_ = v729;
            v728->__r_.__value_.__l.__size_ = 0;
            v728->__r_.__value_.__r.__words[2] = 0;
            v728->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1035.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1035.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1018.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1018.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1017.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1017.__r_.__value_.__l.__data_);
            }
            if ((v1034.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v730 = &v1034;
            }
            else {
              v730 = (std::string *)v1034.__r_.__value_.__r.__words[0];
            }
            if ((v1034.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v731 = HIBYTE(v1034.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v731 = v1034.__r_.__value_.__l.__size_;
            }
            v732 = std::string::append(&v1016, (const std::string::value_type *)v730, v731);
            long long v733 = *(_OWORD *)&v732->__r_.__value_.__l.__data_;
            v1013.__r_.__value_.__r.__words[2] = v732->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1013.__r_.__value_.__l.__data_ = v733;
            v732->__r_.__value_.__l.__size_ = 0;
            v732->__r_.__value_.__r.__words[2] = 0;
            v732->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1034.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1034.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1016.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1016.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1015.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1015.__r_.__value_.__l.__data_);
            }
            v734 = std::string::insert(&v1013, 0, "\n", 1uLL);
            long long v735 = *(_OWORD *)&v734->__r_.__value_.__l.__data_;
            int64_t v1033 = v734->__r_.__value_.__r.__words[2];
            long long v1032 = v735;
            v734->__r_.__value_.__l.__size_ = 0;
            v734->__r_.__value_.__r.__words[2] = 0;
            v734->__r_.__value_.__r.__words[0] = 0;
LABEL_1663:
            if (v1033 >= 0) {
              v736 = (const std::string::value_type *)&v1032;
            }
            else {
              v736 = (const std::string::value_type *)v1032;
            }
            if (v1033 >= 0) {
              std::string::size_type v737 = HIBYTE(v1033);
            }
            else {
              std::string::size_type v737 = *((void *)&v1032 + 1);
            }
            v738 = std::string::append(&v1014, v736, v737);
            std::string v1029 = *v738;
            v738->__r_.__value_.__l.__size_ = 0;
            v738->__r_.__value_.__r.__words[2] = 0;
            v738->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1033) < 0)
            {
              operator delete((void *)v1032);
              if (!v653) {
                goto LABEL_1675;
              }
            }
            else if (!v653)
            {
              goto LABEL_1675;
            }
            if (SHIBYTE(v1013.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1013.__r_.__value_.__l.__data_);
            }
LABEL_1675:
            if (SHIBYTE(v1014.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1014.__r_.__value_.__l.__data_);
            }
            AUT::ReplaceAll(&cfa, (uint64_t)&v1029, "\n", 1, "\n  ┣ ", 7uLL);
            v739 = std::string::insert(&cfa, 0, "\n  ┏ ", 7uLL);
            long long v740 = *(_OWORD *)&v739->__r_.__value_.__l.__data_;
            v1030.__r_.__value_.__r.__words[2] = v739->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1030.__r_.__value_.__l.__data_ = v740;
            v739->__r_.__value_.__l.__size_ = 0;
            v739->__r_.__value_.__r.__words[2] = 0;
            v739->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(cfa.__r_.__value_.__l.__data_);
            }
            v741 = &v1030;
            if ((v1030.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v741 = (std::string *)v1030.__r_.__value_.__r.__words[0];
            }
            LODWORD(v1046.__first_) = 136315906;
            *(std::__split_buffer<std::string>::pointer *)((char *)&v1046.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"AUSpeakerProtectionV3.cpp";
            WORD2(v1046.__begin_) = 1024;
            *(_DWORD *)((char *)&v1046.__begin_ + 6) = 3906;
            WORD1(v1046.__end_) = 1024;
            HIDWORD(v1046.__end_) = v630;
            LOWORD(v1046.__end_cap_.__value_) = 2080;
            *(std::string **)((char *)&v1046.__end_cap_.__value_ + 2) = v741;
            _os_log_impl(&dword_1BB0CE000, v629, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying CL params to channel %i:%s", (uint8_t *)&v1046, 0x22u);
            if (SHIBYTE(v1030.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1030.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1029.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1029.__r_.__value_.__l.__data_);
            }
LABEL_1685:
            float v743 = *((float *)v627 + 1);
            float v742 = *((float *)v627 + 2);
            float v745 = *((float *)v627 + 3);
            float v744 = *((float *)v627 + 4);
            float v747 = *((float *)v627 + 5);
            float v746 = *((float *)v627 + 6);
            float v748 = *((float *)v627 + 7);
            float v749 = *((float *)v627 + 8);
            float __pb = *((float *)v627 + 9);
            float v994 = *((float *)v627 + 10);
            float v991 = *((float *)v627 + 11);
            float v986 = *((float *)v627 + 12);
            int v750 = v627[13];
            int v751 = v627[14];
            float __valb = *((float *)v627 + 15);
            int v752 = *((unsigned __int8 *)v627 + 68);
            float v978 = *((float *)v627 + 18);
            float v980 = *((float *)v627 + 16);
            float v973 = *((float *)v627 + 20);
            float v975 = *((float *)v627 + 19);
            float v968 = *((float *)v627 + 22);
            float v970 = *((float *)v627 + 21);
            float v963 = *((float *)v627 + 24);
            float v965 = *((float *)v627 + 23);
            float v958 = *((float *)v627 + 26);
            float v960 = *((float *)v627 + 25);
            float v955 = *((float *)v627 + 28);
            float v956 = *((float *)v627 + 27);
            float v950 = *((float *)v627 + 30);
            float v952 = *((float *)v627 + 29);
            float v947 = *((float *)v627 + 32);
            float v949 = *((float *)v627 + 31);
            float v945 = *((float *)v627 + 34);
            float v946 = *((float *)v627 + 33);
            int v753 = *((unsigned __int8 *)v627 + 140);
            v754 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), *v627);
            ausdk::AUElement::SetParameter(v754, 0x18u, v743, 0);
            ausdk::AUElement::SetParameter(v754, 0x19u, v742, 0);
            ausdk::AUElement::SetParameter(v754, 0x17u, v745, 0);
            ausdk::AUElement::SetParameter(v754, 0x1Bu, v744, 0);
            ausdk::AUElement::SetParameter(v754, 0x1Cu, v747, 0);
            ausdk::AUElement::SetParameter(v754, 0x1Du, v746, 0);
            ausdk::AUElement::SetParameter(v754, 0x1Eu, v748, 0);
            ausdk::AUElement::SetParameter(v754, 0x1Fu, v749, 0);
            ausdk::AUElement::SetParameter(v754, 0x20u, __pb, 0);
            ausdk::AUElement::SetParameter(v754, 0x21u, v994, 0);
            ausdk::AUElement::SetParameter(v754, 0x22u, v991, 0);
            ausdk::AUElement::SetParameter(v754, 0x23u, v986, 0);
            ausdk::AUElement::SetParameter(v754, 0x14u, (float)v750, 0);
            ausdk::AUElement::SetParameter(v754, 0x2Au, (float)v751, 0);
            if (v753)
            {
              ausdk::AUElement::SetParameter(v754, 0x39u, v978, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Au, v975, 0);
              ausdk::AUElement::SetParameter(v754, 0x2Fu, v973, 0);
              ausdk::AUElement::SetParameter(v754, 0x30u, v970, 0);
              ausdk::AUElement::SetParameter(v754, 0x33u, v968, 0);
              ausdk::AUElement::SetParameter(v754, 0x34u, v965, 0);
              ausdk::AUElement::SetParameter(v754, 0x37u, v963, 0);
              ausdk::AUElement::SetParameter(v754, 0x38u, v960, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Bu, v958, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Cu, v956, 0);
              ausdk::AUElement::SetParameter(v754, 0x35u, v955, 0);
              ausdk::AUElement::SetParameter(v754, 0x36u, v952, 0);
              ausdk::AUElement::SetParameter(v754, 0x31u, v950, 0);
              ausdk::AUElement::SetParameter(v754, 0x32u, v949, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Du, v947, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Eu, v946, 0);
              ausdk::AUElement::SetParameter(v754, 0x3Fu, v945, 0);
            }
            if (!v752) {
              goto LABEL_1766;
            }
            v755 = (NSObject **)spp3Subsystem();
            if (v755)
            {
              v756 = *v755;
              if (!*v755) {
                goto LABEL_1765;
              }
            }
            else
            {
              v756 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v756, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_1765;
            }
            std::string::basic_string[abi:ne180100]<0>(&v1025, "PilotDecayTimeStage2");
            v757 = std::string::append(&v1025, ": ", 2uLL);
            long long v758 = *(_OWORD *)&v757->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v757->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v758;
            v757->__r_.__value_.__l.__size_ = 0;
            v757->__r_.__value_.__r.__words[2] = 0;
            v757->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, __valb);
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v759 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v760 = &v1028;
                goto LABEL_1699;
              }
              v760 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v759 = --v1028.__r_.__value_.__l.__size_;
LABEL_1699:
                v760->__r_.__value_.__s.__data_[v759] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v761 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                v762 = &cfa;
                goto LABEL_1706;
              }
              v762 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v761 = --cfa.__r_.__value_.__l.__size_;
LABEL_1706:
                v762->__r_.__value_.__s.__data_[v761] = 0;
                continue;
              }
              break;
            }
            *(std::string *)std::string buf = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if (buf[23] >= 0) {
              v763 = buf;
            }
            else {
              v763 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v764 = buf[23];
            }
            else {
              std::string::size_type v764 = *(void *)&buf[8];
            }
            v765 = std::string::append(&v1026, v763, v764);
            long long v766 = *(_OWORD *)&v765->__r_.__value_.__l.__data_;
            v1023.__r_.__value_.__r.__words[2] = v765->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1023.__r_.__value_.__l.__data_ = v766;
            v765->__r_.__value_.__l.__size_ = 0;
            v765->__r_.__value_.__r.__words[2] = 0;
            v765->__r_.__value_.__r.__words[0] = 0;
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            v767 = std::string::append(&v1023, ",\n", 2uLL);
            long long v768 = *(_OWORD *)&v767->__r_.__value_.__l.__data_;
            v1024.__r_.__value_.__r.__words[2] = v767->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1024.__r_.__value_.__l.__data_ = v768;
            v767->__r_.__value_.__l.__size_ = 0;
            v767->__r_.__value_.__r.__words[2] = 0;
            v767->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v1025, "PilotEnableThres");
            v769 = std::string::append(&v1025, ": ", 2uLL);
            long long v770 = *(_OWORD *)&v769->__r_.__value_.__l.__data_;
            v1026.__r_.__value_.__r.__words[2] = v769->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1026.__r_.__value_.__l.__data_ = v770;
            v769->__r_.__value_.__l.__size_ = 0;
            v769->__r_.__value_.__r.__words[2] = 0;
            v769->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v1028, v980);
            while (2)
            {
              if ((SHIBYTE(v1028.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*(&v1027 + HIBYTE(v1028.__r_.__value_.__r.__words[2])) != 48) {
                  break;
                }
                uint64_t v771 = HIBYTE(v1028.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&v1028.__r_.__value_.__s + 23) = (*((unsigned char *)&v1028.__r_.__value_.__s + 23) - 1) & 0x7F;
                v772 = &v1028;
                goto LABEL_1727;
              }
              v772 = (std::string *)v1028.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(v1028.__r_.__value_.__r.__words[0] + v1028.__r_.__value_.__l.__size_ - 1) == 48)
              {
                uint64_t v771 = --v1028.__r_.__value_.__l.__size_;
LABEL_1727:
                v772->__r_.__value_.__s.__data_[v771] = 0;
                continue;
              }
              break;
            }
            std::string cfa = v1028;
            memset(&v1028, 0, sizeof(v1028));
            while (2)
            {
              if ((SHIBYTE(cfa.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (*((unsigned char *)&v1001 + HIBYTE(cfa.__r_.__value_.__r.__words[2]) + 7) != 46) {
                  break;
                }
                uint64_t v773 = HIBYTE(cfa.__r_.__value_.__r.__words[2]) - 1;
                *((unsigned char *)&cfa.__r_.__value_.__s + 23) = (*((unsigned char *)&cfa.__r_.__value_.__s + 23) - 1) & 0x7F;
                v774 = &cfa;
                goto LABEL_1734;
              }
              v774 = (std::string *)cfa.__r_.__value_.__r.__words[0];
              if (*(unsigned char *)(cfa.__r_.__value_.__r.__words[0] + cfa.__r_.__value_.__l.__size_ - 1) == 46)
              {
                uint64_t v773 = --cfa.__r_.__value_.__l.__size_;
LABEL_1734:
                v774->__r_.__value_.__s.__data_[v773] = 0;
                continue;
              }
              break;
            }
            *(std::string *)std::string buf = cfa;
            if (SHIBYTE(v1028.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1028.__r_.__value_.__l.__data_);
            }
            if (buf[23] >= 0) {
              v775 = buf;
            }
            else {
              v775 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v776 = buf[23];
            }
            else {
              std::string::size_type v776 = *(void *)&buf[8];
            }
            v777 = std::string::append(&v1026, v775, v776);
            long long v778 = *(_OWORD *)&v777->__r_.__value_.__l.__data_;
            v1046.__end_ = (std::__split_buffer<std::string>::pointer)v777->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1046.__first_ = v778;
            v777->__r_.__value_.__l.__size_ = 0;
            v777->__r_.__value_.__r.__words[2] = 0;
            v777->__r_.__value_.__r.__words[0] = 0;
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (SHIBYTE(v1026.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1026.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1025.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1025.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1046.__end_) >= 0) {
              v779 = (const std::string::value_type *)&v1046;
            }
            else {
              v779 = (const std::string::value_type *)v1046.__first_;
            }
            if (SHIBYTE(v1046.__end_) >= 0) {
              std::string::size_type end_high = HIBYTE(v1046.__end_);
            }
            else {
              std::string::size_type end_high = (std::string::size_type)v1046.__begin_;
            }
            v781 = std::string::append(&v1024, v779, end_high);
            long long v782 = *(_OWORD *)&v781->__r_.__value_.__l.__data_;
            cfa.__r_.__value_.__r.__words[2] = v781->__r_.__value_.__r.__words[2];
            *(_OWORD *)&cfa.__r_.__value_.__l.__data_ = v782;
            v781->__r_.__value_.__l.__size_ = 0;
            v781->__r_.__value_.__r.__words[2] = 0;
            v781->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1046.__end_) < 0) {
              operator delete(v1046.__first_);
            }
            if (SHIBYTE(v1024.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1024.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v1023.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1023.__r_.__value_.__l.__data_);
            }
            v783 = &cfa;
            if ((cfa.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v783 = (std::string *)cfa.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "ParamStructWrappers.h";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 372;
            *(_WORD *)&uint8_t buf[18] = 2080;
            *(void *)&buf[20] = v783;
            _os_log_impl(&dword_1BB0CE000, v756, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUSpeakerProtectionV3:: Found additional pilot tone params %s, applying to scope", buf, 0x1Cu);
            if (SHIBYTE(cfa.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(cfa.__r_.__value_.__l.__data_);
            }
LABEL_1765:
            ausdk::AUElement::SetParameter(v754, 0x43u, __valb, 0);
            ausdk::AUElement::SetParameter(v754, 0x44u, v980, 0);
LABEL_1766:
            v627 += 36;
          }
          while (v627 != v562);
LABEL_1767:
          v784 = (void *)*((void *)this + 84);
          v785 = (void *)*((void *)this + 85);
          while (v785 != v784)
          {
            uint64_t v787 = *--v785;
            uint64_t v786 = v787;
            void *v785 = 0;
            if (v787) {
              std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v786);
            }
          }
          *((void *)this + 85) = v784;
          std::string::size_type v789 = v1031.__r_.__value_.__l.__size_;
          std::string::size_type v788 = v1031.__r_.__value_.__r.__words[0];
          if (v1031.__r_.__value_.__r.__words[0] != v1031.__r_.__value_.__l.__size_)
          {
            v790 = (void *)((char *)this + 672);
            v791 = (void *)((char *)this + 688);
            do
            {
              uint64_t v792 = *(void *)(v788 + 8);
              if (v792)
              {
                *(void *)(v788 + 8) = 0;
                v784 = (void *)*((void *)this + 85);
              }
              if ((unint64_t)v784 >= *v791)
              {
                uint64_t v794 = ((uint64_t)v784 - *v790) >> 3;
                if ((unint64_t)(v794 + 1) >> 61) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v795 = *v791 - *v790;
                uint64_t v796 = v795 >> 2;
                if (v795 >> 2 <= (unint64_t)(v794 + 1)) {
                  uint64_t v796 = v794 + 1;
                }
                if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v797 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v797 = v796;
                }
                v1004 = (char *)this + 688;
                if (v797) {
                  unint64_t v797 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v797);
                }
                else {
                  uint64_t v798 = 0;
                }
                v799 = (void *)(v797 + 8 * v794);
                cfa.__r_.__value_.__r.__words[0] = v797;
                cfa.__r_.__value_.__l.__size_ = (std::string::size_type)v799;
                unint64_t v1003 = v797 + 8 * v798;
                void *v799 = v792;
                cfa.__r_.__value_.__r.__words[2] = (std::string::size_type)(v799 + 1);
                std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v790, &cfa);
                v793 = this;
                v784 = (void *)*((void *)this + 85);
                std::__split_buffer<std::unique_ptr<clsp::ClosedLoopParameters>>::~__split_buffer((uint64_t)&cfa);
              }
              else
              {
                *v784++ = v792;
                v793 = this;
                *((void *)this + 85) = v784;
              }
              *((void *)v793 + 85) = v784;
              v788 += 16;
            }
            while (v788 != v789);
          }
          *((unsigned char *)this + 529) = 1;
          *(void *)std::string buf = &v1031;
          std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (v564) {
            operator delete(v564);
          }
          if (!v1001)
          {
            v928 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v928, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1036, (const __CFDictionary *)v1001);
          int v800 = *((_DWORD *)this + 158);
          memset(&v1039, 0, sizeof(v1039));
          if (v800)
          {
            for (unsigned int i = 0; i != v800; ++i)
            {
              if (!(void)v1036)
              {
                v909 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v909, "Could not construct");
              }
              std::to_string((std::string *)&v1046, i);
              v802 = std::string::insert((std::string *)&v1046, 0, "Channel", 7uLL);
              long long v803 = *(_OWORD *)&v802->__r_.__value_.__l.__data_;
              *(void *)&uint8_t buf[16] = *((void *)&v802->__r_.__value_.__l + 2);
              *(_OWORD *)std::string buf = v803;
              v802->__r_.__value_.__l.__size_ = 0;
              v802->__r_.__value_.__r.__words[2] = 0;
              v802->__r_.__value_.__r.__words[0] = 0;
              applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1038, (const __CFDictionary *)v1036, (uint64_t)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (SHIBYTE(v1046.__end_) < 0) {
                operator delete(v1046.__first_);
              }
              if (!v1038.__r_.__value_.__r.__words[0])
              {
                v910 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v910, "Could not construct");
              }
              CFStringRef v804 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v1038.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::SpeakerNameStruct::key);
              if (!v804)
              {
                v911 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v911, "Could not find item");
              }
              applesauce::CF::convert_to<std::string,0>(v804, (uint64_t)&v1046);
              v805 = (NSObject **)spp3Subsystem();
              if (v805)
              {
                v806 = *v805;
                if (!*v805) {
                  goto LABEL_1806;
                }
              }
              else
              {
                v806 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v806, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3784;
                *(_WORD *)&uint8_t buf[18] = 2080;
                *(void *)&buf[20] = "SpeakerName";
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = i;
                _os_log_impl(&dword_1BB0CE000, v806, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
              }
LABEL_1806:
              if (SHIBYTE(v1046.__end_) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v1046.__first_, (std::string::size_type)v1046.__begin_);
              }
              else
              {
                *(_OWORD *)std::string buf = *(_OWORD *)&v1046.__first_;
                *(void *)&uint8_t buf[16] = v1046.__end_;
              }
              std::string::size_type v807 = v1039.__r_.__value_.__l.__size_;
              if (v1039.__r_.__value_.__l.__size_ < v1039.__r_.__value_.__r.__words[2])
              {
                *(_DWORD *)v1039.__r_.__value_.__l.__size_ = i;
                long long v808 = *(_OWORD *)buf;
                *(void *)(v807 + 24) = *(void *)&buf[16];
                *(_OWORD *)(v807 + 8) = v808;
                v1039.__r_.__value_.__l.__size_ = v807 + 32;
                goto LABEL_1832;
              }
              std::string::size_type v809 = v1039.__r_.__value_.__r.__words[0];
              uint64_t v810 = (uint64_t)(v1039.__r_.__value_.__l.__size_ - v1039.__r_.__value_.__r.__words[0]) >> 5;
              unint64_t v811 = v810 + 1;
              if ((unint64_t)(v810 + 1) >> 59) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              int64_t v812 = v1039.__r_.__value_.__r.__words[2] - v1039.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v1039.__r_.__value_.__r.__words[2] - v1039.__r_.__value_.__r.__words[0]) >> 4 > v811) {
                unint64_t v811 = v812 >> 4;
              }
              if ((unint64_t)v812 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v813 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v813 = v811;
              }
              if (v813)
              {
                if (v813 >> 59) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v814 = operator new(32 * v813);
              }
              else
              {
                v814 = 0;
              }
              std::string::size_type v815 = (std::string::size_type)v814 + 32 * v810;
              *(_DWORD *)std::string::size_type v815 = i;
              *(_OWORD *)(v815 + 8) = *(_OWORD *)buf;
              std::string::size_type v816 = (std::string::size_type)v814 + 32 * v813;
              *(void *)(v815 + 24) = *(void *)&buf[16];
              memset(buf, 0, 24);
              std::string::size_type v817 = v815 + 32;
              if (v807 != v809)
              {
                do
                {
                  int v818 = *(_DWORD *)(v807 - 32);
                  v807 -= 32;
                  *(_DWORD *)(v815 - 32) = v818;
                  v815 -= 32;
                  long long v819 = *(_OWORD *)(v807 + 8);
                  *(void *)(v815 + 24) = *(void *)(v807 + 24);
                  *(_OWORD *)(v815 + 8) = v819;
                  *(void *)(v807 + 16) = 0;
                  *(void *)(v807 + 24) = 0;
                  *(void *)(v807 + 8) = 0;
                }
                while (v807 != v809);
                std::string::size_type v807 = v1039.__r_.__value_.__l.__size_;
                std::string::size_type v820 = v1039.__r_.__value_.__r.__words[0];
                v1039.__r_.__value_.__r.__words[0] = v815;
                v1039.__r_.__value_.__l.__size_ = v817;
                v1039.__r_.__value_.__r.__words[2] = v816;
                if (v807 != v820)
                {
                  do
                  {
                    if (*(char *)(v807 - 1) < 0) {
                      operator delete(*(void **)(v807 - 24));
                    }
                    v807 -= 32;
                  }
                  while (v807 != v820);
                  std::string::size_type v807 = v820;
                }
                if (!v807) {
                  goto LABEL_1830;
                }
LABEL_1829:
                operator delete((void *)v807);
                goto LABEL_1830;
              }
              v1039.__r_.__value_.__r.__words[0] = v815;
              v1039.__r_.__value_.__l.__size_ = v815 + 32;
              v1039.__r_.__value_.__r.__words[2] = (std::string::size_type)v814 + 32 * v813;
              if (v807) {
                goto LABEL_1829;
              }
LABEL_1830:
              v1039.__r_.__value_.__l.__size_ = v817;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
LABEL_1832:
              v821 = (NSObject **)spp3Subsystem();
              if (!v821)
              {
                v822 = MEMORY[0x1E4F14500];
LABEL_1836:
                if (os_log_type_enabled(v822, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3789;
                  *(_WORD *)&uint8_t buf[18] = 2080;
                  *(void *)&buf[20] = "SpeakerName";
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = i;
                  _os_log_impl(&dword_1BB0CE000, v822, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
                }
                goto LABEL_1838;
              }
              v822 = *v821;
              if (*v821) {
                goto LABEL_1836;
              }
LABEL_1838:
              if (SHIBYTE(v1046.__end_) < 0) {
                operator delete(v1046.__first_);
              }
              if (v1038.__r_.__value_.__r.__words[0]) {
                CFRelease(v1038.__r_.__value_.__l.__data_);
              }
            }
          }
          if ((void)v1036) {
            CFRelease((CFTypeRef)v1036);
          }
          v823 = (NSObject **)spp3Subsystem();
          if (v823)
          {
            v824 = *v823;
            if (!*v823) {
              goto LABEL_1854;
            }
          }
          else
          {
            v824 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v824, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3931;
            *(_WORD *)&uint8_t buf[18] = 2048;
            *(void *)&buf[20] = (uint64_t)(v1039.__r_.__value_.__l.__size_ - v1039.__r_.__value_.__r.__words[0]) >> 5;
            _os_log_impl(&dword_1BB0CE000, v824, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu speaker name params.", buf, 0x1Cu);
          }
LABEL_1854:
          v825 = (std::vector<std::string> *)((char *)this + 1064);
          std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 133);
          std::string::size_type v827 = v1039.__r_.__value_.__l.__size_;
          for (std::string::size_type j = v1039.__r_.__value_.__r.__words[0]; j != v827; j += 32)
          {
            if (*(char *)(j + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v1038, *(const std::string::value_type **)(j + 8), *(void *)(j + 16));
            }
            else
            {
              long long v828 = *(_OWORD *)(j + 8);
              v1038.__r_.__value_.__r.__words[2] = *(void *)(j + 24);
              *(_OWORD *)&v1038.__r_.__value_.__l.__data_ = v828;
            }
            if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external((std::string *)buf, v1038.__r_.__value_.__l.__data_, v1038.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)std::string buf = v1038;
            }
            unint64_t v829 = *((void *)this + 134);
            unint64_t v830 = *((void *)this + 135);
            if (v829 >= v830)
            {
              unint64_t v832 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v829 - (unint64_t)v825->__begin_) >> 3);
              unint64_t v833 = v832 + 1;
              if (v832 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v834 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v830 - (unint64_t)v825->__begin_) >> 3);
              if (2 * v834 > v833) {
                unint64_t v833 = 2 * v834;
              }
              if (v834 >= 0x555555555555555) {
                unint64_t v835 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v835 = v833;
              }
              v1046.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 1080);
              if (v835) {
                v836 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)this + 1080, v835);
              }
              else {
                v836 = 0;
              }
              v837 = v836 + v832;
              v1046.__first_ = v836;
              v1046.__begin_ = v837;
              v1046.__end_cap_.__value_ = &v836[v835];
              long long v838 = *(_OWORD *)buf;
              v837->__r_.__value_.__r.__words[2] = *(void *)&buf[16];
              *(_OWORD *)&v837->__r_.__value_.__l.__data_ = v838;
              memset(buf, 0, 24);
              v1046.__end_ = v837 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(v825, &v1046);
              uint64_t v839 = *((void *)this + 134);
              std::__split_buffer<std::string>::~__split_buffer(&v1046);
              int v840 = buf[23];
              *((void *)this + 134) = v839;
              if (v840 < 0) {
                operator delete(*(void **)buf);
              }
            }
            else
            {
              long long v831 = *(_OWORD *)buf;
              *(void *)(v829 + 16) = *(void *)&buf[16];
              *(_OWORD *)unint64_t v829 = v831;
              memset(buf, 0, 24);
              *((void *)this + 134) = v829 + 24;
            }
            if (SHIBYTE(v1038.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v1038.__r_.__value_.__l.__data_);
            }
          }
          *(void *)std::string buf = &v1039;
          std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (!v1001)
          {
            v929 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v929, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1036, (const __CFDictionary *)v1001);
          int v841 = *((_DWORD *)this + 158);
          if (v841)
          {
            v842 = 0;
            v843 = 0;
            v844 = 0;
            unsigned int v845 = 0;
            while (1)
            {
              if (!(void)v1036)
              {
                v912 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v912, "Could not construct");
              }
              std::to_string(&v1039, v845);
              v846 = std::string::insert(&v1039, 0, "Channel", 7uLL);
              long long v847 = *(_OWORD *)&v846->__r_.__value_.__l.__data_;
              *(void *)&uint8_t buf[16] = *((void *)&v846->__r_.__value_.__l + 2);
              *(_OWORD *)std::string buf = v847;
              v846->__r_.__value_.__l.__size_ = 0;
              v846->__r_.__value_.__r.__words[2] = 0;
              v846->__r_.__value_.__r.__words[0] = 0;
              applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1038, (const __CFDictionary *)v1036, (uint64_t)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1039.__r_.__value_.__l.__data_);
              }
              if (!v1038.__r_.__value_.__r.__words[0])
              {
                v913 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v913, "Could not construct");
              }
              CFNumberRef v848 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v1038.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::SpeakerGroupStruct::key);
              if (!v848)
              {
                v914 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v914, "Could not find item");
              }
              unsigned int v849 = applesauce::CF::convert_to<unsigned int,0>(v848);
              v850 = (NSObject **)spp3Subsystem();
              if (v850)
              {
                v851 = *v850;
                if (!*v850) {
                  goto LABEL_1893;
                }
              }
              else
              {
                v851 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v851, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3784;
                *(_WORD *)&uint8_t buf[18] = 2080;
                *(void *)&buf[20] = "SpeakerGroup";
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v845;
                _os_log_impl(&dword_1BB0CE000, v851, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
              }
LABEL_1893:
              if (v843 >= v844)
              {
                uint64_t v852 = ((char *)v843 - (char *)v842) >> 3;
                unint64_t v853 = v852 + 1;
                if ((unint64_t)(v852 + 1) >> 61) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                if (v844 - v842 > v853) {
                  unint64_t v853 = v844 - v842;
                }
                if ((unint64_t)((char *)v844 - (char *)v842) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v854 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v854 = v853;
                }
                if (v854 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v855 = (char *)operator new(8 * v854);
                v856 = (unsigned int *)&v855[8 * v852];
                unsigned int *v856 = v845;
                v856[1] = v849;
                v857 = v856;
                while (v843 != v842)
                {
                  uint64_t v858 = *((void *)v843 - 1);
                  v843 -= 2;
                  *((void *)v857 - 1) = v858;
                  v857 -= 2;
                }
                v844 = (unsigned int *)&v855[8 * v854];
                v843 = v856 + 2;
                if (v842) {
                  operator delete(v842);
                }
                v842 = v857;
              }
              else
              {
                unsigned int *v843 = v845;
                v843[1] = v849;
                v843 += 2;
              }
              v859 = (NSObject **)spp3Subsystem();
              if (!v859)
              {
                v860 = MEMORY[0x1E4F14500];
LABEL_1912:
                if (os_log_type_enabled(v860, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3789;
                  *(_WORD *)&uint8_t buf[18] = 2080;
                  *(void *)&buf[20] = "SpeakerGroup";
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v845;
                  _os_log_impl(&dword_1BB0CE000, v860, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
                }
                goto LABEL_1914;
              }
              v860 = *v859;
              if (*v859) {
                goto LABEL_1912;
              }
LABEL_1914:
              if (v1038.__r_.__value_.__r.__words[0]) {
                CFRelease(v1038.__r_.__value_.__l.__data_);
              }
              if (++v845 == v841) {
                goto LABEL_1919;
              }
            }
          }
          v842 = 0;
          v843 = 0;
LABEL_1919:
          if ((void)v1036) {
            CFRelease((CFTypeRef)v1036);
          }
          v861 = (NSObject **)spp3Subsystem();
          if (v861)
          {
            v862 = *v861;
            if (!*v861) {
              goto LABEL_1927;
            }
          }
          else
          {
            v862 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v862, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3950;
            *(_WORD *)&uint8_t buf[18] = 2048;
            *(void *)&buf[20] = ((char *)v843 - (char *)v842) >> 3;
            _os_log_impl(&dword_1BB0CE000, v862, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu gain-link group params.", buf, 0x1Cu);
          }
LABEL_1927:
          v863 = (char *)*((void *)this + 130);
          *((void *)this + 131) = v863;
          if (v842 != v843)
          {
            v864 = (void **)((char *)this + 1040);
            v865 = (void *)((char *)this + 1056);
            v866 = v842;
            do
            {
              unsigned int v867 = v866[1];
              if ((unint64_t)v863 >= *v865)
              {
                v869 = (char *)*v864;
                uint64_t v870 = (v863 - (unsigned char *)*v864) >> 2;
                unint64_t v871 = v870 + 1;
                if ((unint64_t)(v870 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v872 = *v865 - (void)v869;
                if (v872 >> 1 > v871) {
                  unint64_t v871 = v872 >> 1;
                }
                if ((unint64_t)v872 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v873 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v873 = v871;
                }
                if (v873)
                {
                  v874 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v865, v873);
                  v863 = (char *)*((void *)this + 131);
                  v869 = (char *)*((void *)this + 130);
                }
                else
                {
                  v874 = 0;
                }
                v875 = &v874[4 * v870];
                *(_DWORD *)v875 = v867;
                v868 = v875 + 4;
                while (v863 != v869)
                {
                  int v876 = *((_DWORD *)v863 - 1);
                  v863 -= 4;
                  *((_DWORD *)v875 - 1) = v876;
                  v875 -= 4;
                }
                *((void *)this + 130) = v875;
                *((void *)this + 131) = v868;
                *((void *)this + 132) = &v874[4 * v873];
                if (v869) {
                  operator delete(v869);
                }
              }
              else
              {
                *(_DWORD *)v863 = v867;
                v868 = v863 + 4;
              }
              *((void *)this + 131) = v868;
              v866 += 2;
              v863 = v868;
            }
            while (v866 != v843);
          }
          if (v842) {
            operator delete(v842);
          }
          if (!v1001)
          {
            v931 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v931, "Could not construct");
          }
          applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>((applesauce::CF::DictionaryRef *)&v1036, (const __CFDictionary *)v1001);
          int v877 = *((_DWORD *)this + 158);
          if (v877)
          {
            v878 = 0;
            v879 = 0;
            v880 = 0;
            unsigned int v881 = 0;
            while (1)
            {
              if (!(void)v1036)
              {
                v915 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v915, "Could not construct");
              }
              std::to_string(&v1039, v881);
              v882 = std::string::insert(&v1039, 0, "Channel", 7uLL);
              long long v883 = *(_OWORD *)&v882->__r_.__value_.__l.__data_;
              *(void *)&uint8_t buf[16] = *((void *)&v882->__r_.__value_.__l + 2);
              *(_OWORD *)std::string buf = v883;
              v882->__r_.__value_.__l.__size_ = 0;
              v882->__r_.__value_.__r.__words[2] = 0;
              v882->__r_.__value_.__r.__words[0] = 0;
              applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>((applesauce::CF::DictionaryRef *)&v1038, (const __CFDictionary *)v1036, (uint64_t)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (SHIBYTE(v1039.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v1039.__r_.__value_.__l.__data_);
              }
              if (!v1038.__r_.__value_.__r.__words[0])
              {
                v916 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v916, "Could not construct");
              }
              BOOL v884 = applesauce::CF::details::find_at_key<BOOL,char const* const&>((const __CFDictionary *)v1038.__r_.__value_.__l.__data_, (const char **)clsp::plistV9::IgnoreTelemetryStruct::key);
              v885 = (NSObject **)spp3Subsystem();
              if (v885)
              {
                v886 = *v885;
                if (!*v885) {
                  goto LABEL_1963;
                }
              }
              else
              {
                v886 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v886, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3784;
                *(_WORD *)&uint8_t buf[18] = 2080;
                *(void *)&buf[20] = "IgnoreTelemetry";
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v881;
                _os_log_impl(&dword_1BB0CE000, v886, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the %s plist entry for channel %i.", buf, 0x22u);
              }
LABEL_1963:
              if (v879 >= v880)
              {
                uint64_t v887 = (v879 - v878) >> 3;
                unint64_t v888 = v887 + 1;
                if ((unint64_t)(v887 + 1) >> 61) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                if ((v880 - v878) >> 2 > v888) {
                  unint64_t v888 = (v880 - v878) >> 2;
                }
                if ((unint64_t)(v880 - v878) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v889 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v889 = v888;
                }
                if (v889 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v890 = (char *)operator new(8 * v889);
                v891 = &v890[8 * v887];
                *(_DWORD *)v891 = v881;
                v891[4] = v884;
                v892 = v891;
                while (v879 != v878)
                {
                  int v893 = *((_DWORD *)v879 - 2);
                  v879 -= 8;
                  char v894 = v879[4];
                  *((_DWORD *)v892 - 2) = v893;
                  v892 -= 8;
                  v892[4] = v894;
                }
                v880 = &v890[8 * v889];
                v879 = v891 + 8;
                if (v878) {
                  operator delete(v878);
                }
                v878 = v892;
              }
              else
              {
                *(_DWORD *)v879 = v881;
                v879[4] = v884;
                v879 += 8;
              }
              v895 = (NSObject **)spp3Subsystem();
              if (!v895)
              {
                v896 = MEMORY[0x1E4F14500];
LABEL_1982:
                if (os_log_type_enabled(v896, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)std::string buf = 136315906;
                  *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3789;
                  *(_WORD *)&uint8_t buf[18] = 2080;
                  *(void *)&buf[20] = "IgnoreTelemetry";
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v881;
                  _os_log_impl(&dword_1BB0CE000, v896, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully parsed the %s plist entry for channel %i.", buf, 0x22u);
                }
                goto LABEL_1984;
              }
              v896 = *v895;
              if (*v895) {
                goto LABEL_1982;
              }
LABEL_1984:
              if (v1038.__r_.__value_.__r.__words[0]) {
                CFRelease(v1038.__r_.__value_.__l.__data_);
              }
              if (++v881 == v877) {
                goto LABEL_1989;
              }
            }
          }
          v878 = 0;
          v879 = 0;
LABEL_1989:
          if ((void)v1036) {
            CFRelease((CFTypeRef)v1036);
          }
          v897 = (NSObject **)spp3Subsystem();
          if (v897)
          {
            v898 = *v897;
            if (!*v897) {
              goto LABEL_1997;
            }
          }
          else
          {
            v898 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v898, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3969;
            *(_WORD *)&uint8_t buf[18] = 2048;
            *(void *)&buf[20] = (v879 - v878) >> 3;
            _os_log_impl(&dword_1BB0CE000, v898, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu ignore-telemetry params.", buf, 0x1Cu);
          }
LABEL_1997:
          v899 = (void **)((char *)this + 592);
          if (*((unsigned char *)this + 616))
          {
            if (*v899) {
              operator delete(*v899);
            }
            *((unsigned char *)this + 616) = 0;
          }
          long long v900 = 0uLL;
          memset(&v1039, 0, sizeof(v1039));
          if (v878 == v879)
          {
            std::string::size_type v902 = 0;
          }
          else
          {
            v901 = v878;
            do
            {
              buf[0] = v901[4] != 0;
              std::vector<BOOL>::push_back((uint64_t)&v1039, buf);
              v901 += 8;
            }
            while (v901 != v879);
            std::string::size_type v902 = v1039.__r_.__value_.__r.__words[0];
            long long v900 = *(_OWORD *)&v1039.__r_.__value_.__r.__words[1];
          }
          *(void *)std::string buf = v902;
          *(_OWORD *)&uint8_t buf[8] = v900;
          memset(&v1039, 0, sizeof(v1039));
          unsigned char buf[24] = 1;
          std::__optional_storage_base<std::vector<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<BOOL>,false>>((uint64_t)v899, (uint64_t)buf);
          if (buf[24] && *(void *)buf) {
            operator delete(*(void **)buf);
          }
          if (v1039.__r_.__value_.__r.__words[0]) {
            operator delete(v1039.__r_.__value_.__l.__data_);
          }
          if (v878) {
            operator delete(v878);
          }
          if (v1001)
          {
            applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[19]>((applesauce::CF::DictionaryRef *)&v1039, (const __CFDictionary *)v1001, "AmpEfficiencyCoefs");
            cpms::efficiency::AmpModelFactory((cpms::efficiency *)buf, (const __CFDictionary **)&v1039);
          }
          v932 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v932, "Could not construct");
        }
      }
      else
      {
        v626 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v626, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3895;
        *(_WORD *)&uint8_t buf[18] = 2048;
        *(void *)&buf[20] = (uint64_t)(v1031.__r_.__value_.__l.__size_ - v1031.__r_.__value_.__r.__words[0]) >> 4;
        _os_log_impl(&dword_1BB0CE000, v626, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully parsed all %lu ClosedLoopParameters structures.", buf, 0x1Cu);
      }
      goto LABEL_1413;
    }
  }
  else
  {
    CFTypeRef v1001 = 0;
  }
  v922 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v922, "Could not construct");
}

void sub_1BB65E2A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BB6602B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BB6602D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    JUMPOUT(0x1BB660888);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660310(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    JUMPOUT(0x1BB660F98);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660364(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    JUMPOUT(0x1BB6603DCLL);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB6603A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,const void *a59)
{
  if (!a2) {
    JUMPOUT(0x1BB660F80);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a59);
  __cxa_begin_catch(a1);
  float v62 = (NSObject **)spp3Subsystem();
  if (v62)
  {
    float v63 = *v62;
    if (!*v62) {
      goto LABEL_7;
    }
  }
  else
  {
    float v63 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a47;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"CL";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v59;
    _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1BB66048C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x577]) < 0) {
      operator delete((void *)STACK[0x560]);
    }
    JUMPOUT(0x1BB6604DCLL);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB6604CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (!a2) {
    JUMPOUT(0x1BB660F80);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x540]);
  __cxa_begin_catch(a1);
  long long v49 = (NSObject **)spp3Subsystem();
  if (v49)
  {
    uint64_t v50 = *v49;
    if (!*v49) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v50 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a47;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"IgnoreTelemetry";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v47;
    _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1BB660580(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (!a2) {
    JUMPOUT(0x1BB660F80);
  }
  if (STACK[0x560]) {
    operator delete((void *)STACK[0x560]);
  }
  if (v30) {
    operator delete(v30);
  }
  __cxa_begin_catch(a1);
  unint64_t v32 = (NSObject **)spp3Subsystem();
  if (v32)
  {
    uint64_t v33 = *v32;
    if (!*v32) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v33 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    LODWORD(STACK[0x580]) = 136315394;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3981;
    _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_INFO, "%25s:%-5d Could not fully parse ignore-telemetry information. All speakers will honor telemetry.", (uint8_t *)&STACK[0x580], 0x12u);
  }
LABEL_13:
  if (*(unsigned char *)(a30 + 616))
  {
    unint64_t v34 = *(void **)(a30 + 592);
    if (v34) {
      operator delete(v34);
    }
    *(unsigned char *)(a30 + 616) = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BB65BB48);
}

void sub_1BB6605B0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x577]) < 0) {
      operator delete((void *)STACK[0x560]);
    }
    JUMPOUT(0x1BB660600);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB6605F0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (!a2) {
    JUMPOUT(0x1BB660F80);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x540]);
  __cxa_begin_catch(a1);
  long long v49 = (NSObject **)spp3Subsystem();
  if (v49)
  {
    uint64_t v50 = *v49;
    if (!*v49) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v50 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a47;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"SpeakerGroup";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v47;
    _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1BB6606B0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    JUMPOUT(0x1BB660720);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB6606F4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (!a2) {
    JUMPOUT(0x1BB660700);
  }
  if (*(char *)(v48 - 185) < 0) {
    operator delete(*(void **)(v48 - 208));
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x540]);
  __cxa_begin_catch(a1);
  uint64_t v50 = (NSObject **)spp3Subsystem();
  if (v50)
  {
    uint64_t v51 = *v50;
    if (!*v50) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v51 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a47;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"SpeakerName";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v47;
    _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_10:
  __cxa_rethrow();
}

void sub_1BB6607DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    JUMPOUT(0x1BB660D00);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660834(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    JUMPOUT(0x1BB660DECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660880(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&STACK[0x540]);
  __cxa_begin_catch(a1);
  CFNumberRef v3 = (NSObject **)spp3Subsystem();
  if (v3)
  {
    uint64_t v4 = *v3;
    if (!*v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LODWORD(STACK[0x580]) = 136315394;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 4020;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Could not fully parse the power smoothing time constants. Will use the default", (uint8_t *)&STACK[0x580], 0x12u);
  }
LABEL_8:
  __cxa_end_catch();
  JUMPOUT(0x1BB65C1D8);
}

void sub_1BB66091C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB66093C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    if (v2) {
      operator delete(v2);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x520]);
    JUMPOUT(0x1BB660960);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660A10(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB660A24(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    if (v2) {
      operator delete(v2);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x520]);
    JUMPOUT(0x1BB660A48);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660AE0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB660AF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    STACK[0x580] = (unint64_t)&STACK[0x560];
    std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x580]);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x520]);
    JUMPOUT(0x1BB660B1CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660BB4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB660BC8(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    STACK[0x580] = (unint64_t)&STACK[0x4A0];
    std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x580]);
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x540]);
    JUMPOUT(0x1BB660BF0);
  }
  JUMPOUT(0x1BB6610D4);
}

void sub_1BB660BF8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB660C04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  CFNumberRef v3 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v3;
    operator delete(v3);
  }
  vp::vx::io::Direction_Pair<std::vector<std::tuple<unsigned int,vp::services::Audio_Issue_Detector_Node_ID>>>::~Direction_Pair((uint64_t)&STACK[0x580]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x520]);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&STACK[0x540]);
  STACK[0x580] = (unint64_t)&STACK[0x560];
  std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x580]);
  __cxa_begin_catch(a1);
  uint64_t v4 = (NSObject **)spp3Subsystem();
  if (v4)
  {
    int v5 = *v4;
    if (!*v4) {
      goto LABEL_10;
    }
  }
  else
  {
    int v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LODWORD(STACK[0x580]) = 136315394;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 4055;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Could not fully parse the power group descriptions. Will use the default", (uint8_t *)&STACK[0x580], 0x12u);
  }
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x1BB65C9D8);
}

void sub_1BB660CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB660CE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,const void *a59)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a59);
  __cxa_begin_catch(a1);
  float v62 = (NSObject **)spp3Subsystem();
  if (v62)
  {
    float v63 = *v62;
    if (!*v62) {
      goto LABEL_7;
    }
  }
  else
  {
    float v63 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a43;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"OL_disp";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v59;
    _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1BB660DA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (a2)
  {
    __cxa_end_catch();
    if (__p) {
      operator delete(__p);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x560]);
    JUMPOUT(0x1BB660ED0);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660DD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,const void *a59)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a59);
  __cxa_begin_catch(a1);
  float v62 = (NSObject **)spp3Subsystem();
  if (v62)
  {
    float v63 = *v62;
    if (!*v62) {
      goto LABEL_7;
    }
  }
  else
  {
    float v63 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a41;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"OL_thermal";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v59;
    _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_7:
  __cxa_rethrow();
}

void sub_1BB660E90(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p)
{
  if (a2)
  {
    __cxa_end_catch();
    if (__p) {
      operator delete(__p);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x560]);
    JUMPOUT(0x1BB660EDCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BB660EBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,void *a47)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  __cxa_begin_catch(a1);
  uint64_t v48 = (NSObject **)spp3Subsystem();
  if (v48)
  {
    long long v49 = *v48;
    if (!*v48) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v49 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = 136315394;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3876;
    _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not fully parse all essential plist params.", (uint8_t *)&STACK[0x580], 0x12u);
  }
LABEL_12:
  __cxa_end_catch();
  JUMPOUT(0x1BB65D16CLL);
}

void sub_1BB660F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,const void *a58)
{
}

void sub_1BB660F78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,const void *a59)
{
  if (!a2) {
    JUMPOUT(0x1BB660F80);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 - 208));
  applesauce::CF::DictionaryRef::~DictionaryRef(&a59);
  __cxa_begin_catch(a1);
  float v62 = (NSObject **)spp3Subsystem();
  if (v62)
  {
    float v63 = *v62;
    if (!*v62) {
      goto LABEL_8;
    }
  }
  else
  {
    float v63 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    LODWORD(STACK[0x580]) = a11;
    STACK[0x584] = (unint64_t)"AUSpeakerProtectionV3.cpp";
    LOWORD(STACK[0x58C]) = 1024;
    LODWORD(STACK[0x58E]) = 3792;
    LOWORD(STACK[0x592]) = 2080;
    STACK[0x594] = (unint64_t)"CL";
    LOWORD(STACK[0x59C]) = 1024;
    LODWORD(STACK[0x59E]) = v59;
    _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to fully parse the %s plist entry for channel %i.", (uint8_t *)&STACK[0x580], 0x22u);
  }
LABEL_8:
  __cxa_rethrow();
}

void sub_1BB66103C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    if (v2) {
      operator delete(v2);
    }
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x560]);
    JUMPOUT(0x1BB661090);
  }
  JUMPOUT(0x1BB6610D4);
}

void sub_1BB661064(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void sub_1BB66106C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB661074);
  }
  JUMPOUT(0x1BB6610D4);
}

void sub_1BB6610DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_1BB6610E4()
{
}

void sub_1BB6610F8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6602A4);
  }
  JUMPOUT(0x1BB660F80);
}

void clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(unsigned int a1, int a2)
{
  clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
  if (byte_1E9F7FFB8)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    byte_1E9F7FFB8 = 0;
  }
  if (a2 == 2)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    uint64_t v6 = clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    for (uint64_t i = qword_1E9F7FFA8; v6 != i; v6 += 24)
    {
      *(_OWORD *)(v6 + 4) = xmmword_1BB875840;
      *(_DWORD *)(v6 + 20) = 1065353216;
      *(unsigned char *)uint64_t v6 = 1;
    }
  }
  else if (a2 == 1)
  {
    std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, a1);
    uint64_t v4 = (unsigned char *)clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    uint64_t v5 = qword_1E9F7FFA8;
    while (v4 != (unsigned char *)v5)
    {
      *uint64_t v4 = 0;
      v4 += 24;
    }
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const(&)[22]>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2)
{
  CFNumberRef v3 = applesauce::CF::details::at_key<char const(&)[22]>(a2, "ChannelSpecificParams");
  if (!v3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  uint64_t v4 = v3;
  CFRetain(v3);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v4);
}

void sub_1BB66125C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::ClosedLoopParametersStruct>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v4 - 1);
        *((void *)v4 - 1) = 0;
        if (v6) {
          std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<clsp::ClosedLoopParameters>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<clsp::plistV9::PerSpeakerParamMapper<clsp::plistV9::SpeakerNameStruct>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[16]>(applesauce::CF::ArrayRef *a1, const __CFDictionary *a2, char *__s)
{
  uint64_t v4 = applesauce::CF::details::at_key<char const(&)[16]>(a2, __s);
  if (!v4)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  uint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1BB66146C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<cpms::TimeScale<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (uint64_t)(v4 - *a1) >> 5;
    if ((unint64_t)(v7 + 1) >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *a1;
    uint64_t v9 = v8 >> 4;
    if (v8 >> 4 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v11 = (char *)operator new(32 * v10);
    }
    else
    {
      unsigned int v11 = 0;
    }
    uint64_t v12 = &v11[32 * v10];
    uint64_t v13 = std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>((uint64_t)&v11[32 * v7], a2);
    uint64_t v6 = v13 + 32;
    uint64_t v15 = *a1;
    unint64_t v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v18 = vdupq_n_s64(v14);
    }
    else
    {
      do
      {
        uint64_t v16 = *(void *)(v14 - 32);
        v14 -= 32;
        *(void *)(v13 - 32) = v16;
        v13 -= 32;
        *(void *)unint64_t v14 = 0;
        long long v17 = *(_OWORD *)(v14 + 8);
        *(void *)(v13 + 21) = *(void *)(v14 + 21);
        *(_OWORD *)(v13 + 8) = v17;
      }
      while (v14 != v15);
      int64x2_t v18 = *(int64x2_t *)a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (uint64_t)v12;
    float v20 = (char *)v18.i64[1];
    float v19 = (char *)v18.i64[0];
    while (v20 != v19)
    {
      float v21 = (const void *)*((void *)v20 - 4);
      v20 -= 32;
      std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(v21);
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v6 = std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>(v4, a2)+ 32;
  }
  a1[1] = v6;
}

const void **cpms::TimeScale<float>::~TimeScale(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 4);
        v4 -= 32;
        std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL applesauce::CF::details::find_at_key<BOOL,char const* const&>(const __CFDictionary *a1, const char **a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (!v2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<BOOL,0>(v2);
}

void sub_1BB661754(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,0>(uint64_t a1)
{
  CFNumberRef v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void applesauce::CF::convert_to<std::vector<unsigned int>,0>(std::vector<unsigned int> *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  a1->__begin_ = 0;
  std::vector<unsigned int>::reserve(a1, Count);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = Count;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      unsigned int v9 = applesauce::CF::convert_to<unsigned int,0>(ValueAtIndex);
      unsigned int v10 = v9;
      std::vector<unsigned int>::pointer end = a1->__end_;
      value = a1->__end_cap_.__value_;
      if (end >= value)
      {
        std::vector<unsigned int>::pointer begin = a1->__begin_;
        uint64_t v15 = end - a1->__begin_;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = (char *)value - (char *)begin;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&a1->__end_cap_, v18);
          std::vector<unsigned int>::pointer begin = a1->__begin_;
          std::vector<unsigned int>::pointer end = a1->__end_;
        }
        else
        {
          float v19 = 0;
        }
        float v20 = (unsigned int *)&v19[4 * v15];
        *float v20 = v10;
        uint64_t v13 = v20 + 1;
        while (end != begin)
        {
          unsigned int v21 = *--end;
          *--float v20 = v21;
        }
        a1->__begin_ = v20;
        a1->__end_ = v13;
        a1->__end_cap_.__value_ = (unsigned int *)&v19[4 * v18];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer end = v9;
        uint64_t v13 = end + 1;
      }
      a1->__end_ = v13;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_1BB661954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<cpms::TimeScale<float>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t std::construct_at[abi:ne180100]<cpms::TimeScale<float>,cpms::TimeScale<float> const&,cpms::TimeScale<float>*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t std::__shared_ptr_pointer<cpms::efficiency::AmpModelBase<float> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<cpms::efficiency::AmpModelBase<float> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,std::string>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const UInt8 *)a3;
  }
  else {
    uint64_t v7 = *(const UInt8 **)a3;
  }
  if (v7)
  {
    if (v6 >= 0) {
      CFIndex v8 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      CFIndex v8 = *(void *)(a3 + 8);
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (a2)
    {
LABEL_10:
      Value = CFDictionaryGetValue(a2, v9);
      if (!v9) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else
  {
    CFStringRef v9 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  if (v9) {
LABEL_14:
  }
    CFRelease(v9);
LABEL_15:
  if (!a2 || !Value)
  {
    uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(v12);
  }
  CFRetain(Value);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, Value);
}

void sub_1BB661BF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void clsp::ScopedParamStruct<clsp::plistV9::ConvoyNormFactorCapLower,clsp::plistV9::ConvoyPeakRatioPosBlockThreshold,clsp::plistV9::ConvoyPeakRatioNegBlockThreshold,clsp::plistV9::ConvoyRelXLimUpper,clsp::plistV9::ConvoyRelXLimLower,clsp::plistV9::ConvoyNormFactorAttack,clsp::plistV9::ConvoyNormFactorRelease,clsp::plistV9::ConvoyPeakDetectorAtkTime,clsp::plistV9::ConvoyPeakDetectorRelTime,clsp::plistV9::ConvoyPeakRatiosInWindowCountThreshold,clsp::plistV9::ConvoyNormFactorThreshold,clsp::plistV9::ConvoyBufferDirtyCountThreshold_ms>::toString(std::string *a1, float *a2)
{
  CFTypeRef v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorCapLower");
  long long v5 = std::string::append(v4, ": ", 2uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, *a2);
  while ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
      goto LABEL_8;
    }
    uint64_t v7 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
    CFIndex v8 = &v249;
LABEL_7:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  CFIndex v8 = (std::string *)v249.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
  {
    uint64_t v7 = --v249.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
      goto LABEL_15;
    }
    uint64_t v9 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
    unsigned int v10 = &v250;
LABEL_14:
    v10->__r_.__value_.__s.__data_[v9] = 0;
  }
  unsigned int v10 = (std::string *)v250.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
  {
    uint64_t v9 = --v250.__r_.__value_.__l.__size_;
    goto LABEL_14;
  }
LABEL_15:
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v11 = &v245;
  }
  else {
    unsigned int v11 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v245.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v248, (const std::string::value_type *)v11, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v203.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  uint64_t v15 = std::string::append(&v203, ",\n", 2uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v204.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatioPosBlockThreshold");
  unint64_t v18 = std::string::append(v17, ": ", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[1]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v20 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      unsigned int v21 = &v249;
      goto LABEL_35;
    }
    unsigned int v21 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v20 = --v249.__r_.__value_.__l.__size_;
LABEL_35:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v22 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v23 = &v250;
      goto LABEL_42;
    }
    float v23 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v22 = --v250.__r_.__value_.__l.__size_;
LABEL_42:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v24 = &v245;
  }
  else {
    float v24 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v245.__r_.__value_.__l.__size_;
  }
  float v26 = std::string::append(&v248, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v207.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  float v28 = std::string::append(&v207, ",\n", 2uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  float v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatioNegBlockThreshold");
  unint64_t v31 = std::string::append(v30, ": ", 2uLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[2]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v33 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v34 = &v249;
      goto LABEL_63;
    }
    unint64_t v34 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v33 = --v249.__r_.__value_.__l.__size_;
LABEL_63:
      v34->__r_.__value_.__s.__data_[v33] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v35 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v36 = &v250;
      goto LABEL_70;
    }
    uint64_t v36 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v35 = --v250.__r_.__value_.__l.__size_;
LABEL_70:
      v36->__r_.__value_.__s.__data_[v35] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v37 = &v245;
  }
  else {
    long long v37 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = v245.__r_.__value_.__l.__size_;
  }
  uint16x4_t v39 = std::string::append(&v248, (const std::string::value_type *)v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v211.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  unint64_t v41 = std::string::append(&v211, ",\n", 2uLL);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyRelXLimUpper");
  int v44 = std::string::append(v43, ": ", 2uLL);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[3]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v46 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      int v47 = &v249;
      goto LABEL_91;
    }
    int v47 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v46 = --v249.__r_.__value_.__l.__size_;
LABEL_91:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v48 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v49 = &v250;
      goto LABEL_98;
    }
    long long v49 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v48 = --v250.__r_.__value_.__l.__size_;
LABEL_98:
      v49->__r_.__value_.__s.__data_[v48] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v50 = &v245;
  }
  else {
    uint64_t v50 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v51 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v51 = v245.__r_.__value_.__l.__size_;
  }
  float v52 = std::string::append(&v248, (const std::string::value_type *)v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v215.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  float v54 = std::string::append(&v215, ",\n", 2uLL);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  float v56 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyRelXLimLower");
  float v57 = std::string::append(v56, ": ", 2uLL);
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[4]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v59 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v60 = &v249;
      goto LABEL_119;
    }
    uint64_t v60 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v59 = --v249.__r_.__value_.__l.__size_;
LABEL_119:
      v60->__r_.__value_.__s.__data_[v59] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v61 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v62 = &v250;
      goto LABEL_126;
    }
    float v62 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v61 = --v250.__r_.__value_.__l.__size_;
LABEL_126:
      v62->__r_.__value_.__s.__data_[v61] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v63 = &v245;
  }
  else {
    float v63 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v64 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v64 = v245.__r_.__value_.__l.__size_;
  }
  float v65 = std::string::append(&v248, (const std::string::value_type *)v63, v64);
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  float v67 = std::string::append(&v219, ",\n", 2uLL);
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  unint64_t v69 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorAttack");
  unint64_t v70 = std::string::append(v69, ": ", 2uLL);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[5]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v72 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v73 = &v249;
      goto LABEL_147;
    }
    uint64_t v73 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v72 = --v249.__r_.__value_.__l.__size_;
LABEL_147:
      v73->__r_.__value_.__s.__data_[v72] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v74 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v75 = &v250;
      goto LABEL_154;
    }
    long long v75 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v74 = --v250.__r_.__value_.__l.__size_;
LABEL_154:
      v75->__r_.__value_.__s.__data_[v74] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v76 = &v245;
  }
  else {
    uint64_t v76 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = v245.__r_.__value_.__l.__size_;
  }
  uint64_t v78 = std::string::append(&v248, (const std::string::value_type *)v76, v77);
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  unint64_t v80 = std::string::append(&v223, ",\n", 2uLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  uint64_t v82 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorRelease");
  unint64_t v83 = std::string::append(v82, ": ", 2uLL);
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[6]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v85 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v86 = &v249;
      goto LABEL_175;
    }
    unint64_t v86 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v85 = --v249.__r_.__value_.__l.__size_;
LABEL_175:
      v86->__r_.__value_.__s.__data_[v85] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v87 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v88 = &v250;
      goto LABEL_182;
    }
    uint64_t v88 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v87 = --v250.__r_.__value_.__l.__size_;
LABEL_182:
      v88->__r_.__value_.__s.__data_[v87] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v89 = &v245;
  }
  else {
    uint64_t v89 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v90 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v90 = v245.__r_.__value_.__l.__size_;
  }
  unint64_t v91 = std::string::append(&v248, (const std::string::value_type *)v89, v90);
  long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  uint64_t v93 = std::string::append(&v227, ",\n", 2uLL);
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  double v95 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakDetectorAtkTime");
  long long v96 = std::string::append(v95, ": ", 2uLL);
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[7]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v98 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::__split_buffer<std::string>::pointer v99 = &v249;
      goto LABEL_203;
    }
    std::__split_buffer<std::string>::pointer v99 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v98 = --v249.__r_.__value_.__l.__size_;
LABEL_203:
      v99->__r_.__value_.__s.__data_[v98] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v100 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v101 = &v250;
      goto LABEL_210;
    }
    uint64_t v101 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v100 = --v250.__r_.__value_.__l.__size_;
LABEL_210:
      v101->__r_.__value_.__s.__data_[v100] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = &v245;
  }
  else {
    std::string::size_type v102 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v103 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v103 = v245.__r_.__value_.__l.__size_;
  }
  long long v104 = std::string::append(&v248, (const std::string::value_type *)v102, v103);
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  long long v106 = std::string::append(&v231, ",\n", 2uLL);
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  long long v108 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakDetectorRelTime");
  uint64_t v109 = std::string::append(v108, ": ", 2uLL);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[8]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v111 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v112 = &v249;
      goto LABEL_231;
    }
    uint64_t v112 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v111 = --v249.__r_.__value_.__l.__size_;
LABEL_231:
      v112->__r_.__value_.__s.__data_[v111] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v113 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::string::size_type v114 = &v250;
      goto LABEL_238;
    }
    std::string::size_type v114 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v113 = --v250.__r_.__value_.__l.__size_;
LABEL_238:
      v114->__r_.__value_.__s.__data_[v113] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v115 = &v245;
  }
  else {
    unint64_t v115 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v116 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v116 = v245.__r_.__value_.__l.__size_;
  }
  uint64_t v117 = std::string::append(&v248, (const std::string::value_type *)v115, v116);
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  float v119 = std::string::append(&v235, ",\n", 2uLL);
  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  uint64_t v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyPeakRatiosInWindowCountThreshold");
  unint64_t v122 = std::string::append(v121, ": ", 2uLL);
  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[9]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v124 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v125 = &v249;
      goto LABEL_259;
    }
    float v125 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v124 = --v249.__r_.__value_.__l.__size_;
LABEL_259:
      v125->__r_.__value_.__s.__data_[v124] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v126 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v127 = &v250;
      goto LABEL_266;
    }
    unint64_t v127 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v126 = --v250.__r_.__value_.__l.__size_;
LABEL_266:
      v127->__r_.__value_.__s.__data_[v126] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v128 = &v245;
  }
  else {
    long long v128 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v129 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v129 = v245.__r_.__value_.__l.__size_;
  }
  long long v130 = std::string::append(&v248, (const std::string::value_type *)v128, v129);
  long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  long long v132 = std::string::append(&v239, ",\n", 2uLL);
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  unint64_t v134 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyNormFactorThreshold");
  std::__split_buffer<std::string>::pointer v135 = std::string::append(v134, ": ", 2uLL);
  long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[10]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v137 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::string::size_type v138 = &v249;
      goto LABEL_287;
    }
    std::string::size_type v138 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v137 = --v249.__r_.__value_.__l.__size_;
LABEL_287:
      v138->__r_.__value_.__s.__data_[v137] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v139 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v140 = &v250;
      goto LABEL_294;
    }
    long long v140 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v139 = --v250.__r_.__value_.__l.__size_;
LABEL_294:
      v140->__r_.__value_.__s.__data_[v139] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v141 = &v245;
  }
  else {
    uint64_t v141 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v142 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v142 = v245.__r_.__value_.__l.__size_;
  }
  float v143 = std::string::append(&v248, (const std::string::value_type *)v141, v142);
  long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v243.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  uint64_t v145 = std::string::append(&v243, ",\n", 2uLL);
  long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  std::__split_buffer<std::string>::pointer v147 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v246, "ConvoyBufferDirtyCountThreshold_ms");
  uint64_t v148 = std::string::append(v147, ": ", 2uLL);
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v249, a2[11]);
  while (2)
  {
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v248.__r_.__value_.__r.__words[2] + HIBYTE(v249.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v150 = HIBYTE(v249.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v249.__r_.__value_.__s + 23) = (*((unsigned char *)&v249.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v151 = &v249;
      goto LABEL_315;
    }
    unint64_t v151 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v249.__r_.__value_.__r.__words[0] + v249.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v150 = --v249.__r_.__value_.__l.__size_;
LABEL_315:
      v151->__r_.__value_.__s.__data_[v150] = 0;
      continue;
    }
    break;
  }
  std::string v250 = v249;
  memset(&v249, 0, sizeof(v249));
  while (2)
  {
    if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v249.__r_.__value_.__r.__words[2] + HIBYTE(v250.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v152 = HIBYTE(v250.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = (*((unsigned char *)&v250.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v153 = &v250;
      goto LABEL_322;
    }
    uint64_t v153 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v250.__r_.__value_.__r.__words[0] + v250.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v152 = --v250.__r_.__value_.__l.__size_;
LABEL_322:
      v153->__r_.__value_.__s.__data_[v152] = 0;
      continue;
    }
    break;
  }
  std::string v245 = v250;
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v154 = &v245;
  }
  else {
    long long v154 = (std::string *)v245.__r_.__value_.__r.__words[0];
  }
  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v155 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v155 = v245.__r_.__value_.__l.__size_;
  }
  long long v156 = std::string::append(&v248, (const std::string::value_type *)v154, v155);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  int64_t v242 = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  if (v242 >= 0) {
    unint64_t v158 = __p;
  }
  else {
    unint64_t v158 = (void **)__p[0];
  }
  if (v242 >= 0) {
    std::string::size_type v159 = HIBYTE(v242);
  }
  else {
    std::string::size_type v159 = (std::string::size_type)__p[1];
  }
  uint64_t v160 = std::string::append(&v244, (const std::string::value_type *)v158, v159);
  long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  int64_t v238 = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v237 = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v242) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v244.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v243.__r_.__value_.__l.__data_);
  }
  if (v238 >= 0) {
    std::string::size_type v162 = v237;
  }
  else {
    std::string::size_type v162 = (void **)v237[0];
  }
  if (v238 >= 0) {
    std::string::size_type v163 = HIBYTE(v238);
  }
  else {
    std::string::size_type v163 = (std::string::size_type)v237[1];
  }
  long long v164 = std::string::append(&v240, (const std::string::value_type *)v162, v163);
  long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  int64_t v234 = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v233 = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v238) < 0) {
    operator delete(v237[0]);
  }
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (v234 >= 0) {
    long long v166 = v233;
  }
  else {
    long long v166 = (void **)v233[0];
  }
  if (v234 >= 0) {
    std::string::size_type v167 = HIBYTE(v234);
  }
  else {
    std::string::size_type v167 = (std::string::size_type)v233[1];
  }
  long long v168 = std::string::append(&v236, (const std::string::value_type *)v166, v167);
  long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  int64_t v230 = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v229 = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v234) < 0) {
    operator delete(v233[0]);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  if (v230 >= 0) {
    BOOL v170 = v229;
  }
  else {
    BOOL v170 = (void **)v229[0];
  }
  if (v230 >= 0) {
    std::string::size_type v171 = HIBYTE(v230);
  }
  else {
    std::string::size_type v171 = (std::string::size_type)v229[1];
  }
  uint64_t v172 = std::string::append(&v232, (const std::string::value_type *)v170, v171);
  long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  int64_t v226 = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v225 = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v230) < 0) {
    operator delete(v229[0]);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (v226 >= 0) {
    std::string::size_type v174 = v225;
  }
  else {
    std::string::size_type v174 = (void **)v225[0];
  }
  if (v226 >= 0) {
    std::string::size_type v175 = HIBYTE(v226);
  }
  else {
    std::string::size_type v175 = (std::string::size_type)v225[1];
  }
  long long v176 = std::string::append(&v228, (const std::string::value_type *)v174, v175);
  long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
  int64_t v222 = v176->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v221 = v177;
  v176->__r_.__value_.__l.__size_ = 0;
  v176->__r_.__value_.__r.__words[2] = 0;
  v176->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v226) < 0) {
    operator delete(v225[0]);
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v227.__r_.__value_.__l.__data_);
  }
  if (v222 >= 0) {
    long long v178 = v221;
  }
  else {
    long long v178 = (void **)v221[0];
  }
  if (v222 >= 0) {
    std::string::size_type v179 = HIBYTE(v222);
  }
  else {
    std::string::size_type v179 = (std::string::size_type)v221[1];
  }
  long long v180 = std::string::append(&v224, (const std::string::value_type *)v178, v179);
  long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  int64_t v218 = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)float v217 = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v222) < 0) {
    operator delete(v221[0]);
  }
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (v218 >= 0) {
    unint64_t v182 = v217;
  }
  else {
    unint64_t v182 = (void **)v217[0];
  }
  if (v218 >= 0) {
    std::string::size_type v183 = HIBYTE(v218);
  }
  else {
    std::string::size_type v183 = (std::string::size_type)v217[1];
  }
  unint64_t v184 = std::string::append(&v220, (const std::string::value_type *)v182, v183);
  long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  int64_t v214 = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v213 = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v218) < 0) {
    operator delete(v217[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
  if (v214 >= 0) {
    std::string::size_type v186 = v213;
  }
  else {
    std::string::size_type v186 = (void **)v213[0];
  }
  if (v214 >= 0) {
    std::string::size_type v187 = HIBYTE(v214);
  }
  else {
    std::string::size_type v187 = (std::string::size_type)v213[1];
  }
  long long v188 = std::string::append(&v216, (const std::string::value_type *)v186, v187);
  long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
  int64_t v210 = v188->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v209 = v189;
  v188->__r_.__value_.__l.__size_ = 0;
  v188->__r_.__value_.__r.__words[2] = 0;
  v188->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v214) < 0) {
    operator delete(v213[0]);
  }
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (v210 >= 0) {
    long long v190 = v209;
  }
  else {
    long long v190 = (void **)v209[0];
  }
  if (v210 >= 0) {
    std::string::size_type v191 = HIBYTE(v210);
  }
  else {
    std::string::size_type v191 = (std::string::size_type)v209[1];
  }
  long long v192 = std::string::append(&v212, (const std::string::value_type *)v190, v191);
  long long v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
  int64_t v206 = v192->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v205 = v193;
  v192->__r_.__value_.__l.__size_ = 0;
  v192->__r_.__value_.__r.__words[2] = 0;
  v192->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v210) < 0) {
    operator delete(v209[0]);
  }
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v211.__r_.__value_.__l.__data_);
  }
  if (v206 >= 0) {
    int v194 = v205;
  }
  else {
    int v194 = (void **)v205[0];
  }
  if (v206 >= 0) {
    std::string::size_type v195 = HIBYTE(v206);
  }
  else {
    std::string::size_type v195 = (std::string::size_type)v205[1];
  }
  int v196 = std::string::append(&v208, (const std::string::value_type *)v194, v195);
  long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  int64_t v202 = v196->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v201 = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v206) < 0) {
    operator delete(v205[0]);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (v202 >= 0) {
    std::string::size_type v198 = v201;
  }
  else {
    std::string::size_type v198 = (void **)v201[0];
  }
  if (v202 >= 0) {
    std::string::size_type v199 = HIBYTE(v202);
  }
  else {
    std::string::size_type v199 = (std::string::size_type)v201[1];
  }
  long long v200 = std::string::append(&v204, (const std::string::value_type *)v198, v199);
  *a1 = *v200;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v202) < 0) {
    operator delete(v201[0]);
  }
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
}

void sub_1BB663608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1BB663938()
{
}

void sub_1BB663940()
{
}

void sub_1BB663948()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66382CLL);
  }
  JUMPOUT(0x1BB663830);
}

void sub_1BB66398C()
{
}

void sub_1BB663994()
{
}

void sub_1BB66399C()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66384CLL);
  }
  JUMPOUT(0x1BB663850);
}

void sub_1BB6639E0()
{
}

void sub_1BB6639E8()
{
}

void sub_1BB6639F0()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66386CLL);
  }
  JUMPOUT(0x1BB663870);
}

void sub_1BB663A34()
{
}

void sub_1BB663A3C()
{
}

void sub_1BB663A44()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66388CLL);
  }
  JUMPOUT(0x1BB663890);
}

void sub_1BB663A88()
{
}

void sub_1BB663A90()
{
}

void sub_1BB663A98()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB6638ACLL);
  }
  JUMPOUT(0x1BB6638B0);
}

void sub_1BB663ADC()
{
}

void sub_1BB663AE4()
{
}

void sub_1BB663AEC()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB6638CCLL);
  }
  JUMPOUT(0x1BB6638D0);
}

void sub_1BB663B30()
{
}

void sub_1BB663B38()
{
}

void sub_1BB663B40()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB6638ECLL);
  }
  JUMPOUT(0x1BB6638F0);
}

void sub_1BB663B84()
{
}

void sub_1BB663B8C()
{
}

void sub_1BB663B94()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66390CLL);
  }
  JUMPOUT(0x1BB663910);
}

void sub_1BB663BD8()
{
}

void sub_1BB663BE0()
{
}

void sub_1BB663BE8()
{
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x1BB66392CLL);
  }
  JUMPOUT(0x1BB663930);
}

void clsp::ScopedParamStruct<clsp::plistV9::TempSenseSmoothingTau,clsp::plistV9::TlimErrDecayTime,clsp::plistV9::PilotAmplHi_dB,clsp::plistV9::PilotAmplLo_dB,clsp::plistV9::PilotUpperThres,clsp::plistV9::PilotLowerThres,clsp::plistV9::PilotDecayTime,clsp::plistV9::PilotFreq,clsp::plistV9::LPMLSPreGain,clsp::plistV9::LPMLSPostGain,clsp::plistV9::LPMLSLowerCorner,clsp::plistV9::ThermalMeasurementMethod,clsp::plistV9::DisplacementProtectionType>::toString(std::string *a1, uint64_t a2)
{
  CFTypeRef v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "TempSenseSmoothingTau");
  long long v5 = std::string::append(v4, ": ", 2uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)a2);
  while ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
      goto LABEL_8;
    }
    uint64_t v7 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
    CFIndex v8 = &v259;
LABEL_7:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  CFIndex v8 = (std::string *)v259.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
  {
    uint64_t v7 = --v259.__r_.__value_.__l.__size_;
    goto LABEL_7;
  }
LABEL_8:
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
      goto LABEL_15;
    }
    uint64_t v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
    unsigned int v10 = &v260;
LABEL_14:
    v10->__r_.__value_.__s.__data_[v9] = 0;
  }
  unsigned int v10 = (std::string *)v260.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
  {
    uint64_t v9 = --v260.__r_.__value_.__l.__size_;
    goto LABEL_14;
  }
LABEL_15:
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v11 = &v256;
  }
  else {
    unsigned int v11 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v256.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v258, (const std::string::value_type *)v11, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = std::string::append(&v212, ",\n", 2uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "TlimErrDecayTime");
  unint64_t v18 = std::string::append(v17, ": ", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 4));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v20 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      unsigned int v21 = &v259;
      goto LABEL_35;
    }
    unsigned int v21 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v20 = --v259.__r_.__value_.__l.__size_;
LABEL_35:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v22 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v23 = &v260;
      goto LABEL_42;
    }
    float v23 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v22 = --v260.__r_.__value_.__l.__size_;
LABEL_42:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v24 = &v256;
  }
  else {
    float v24 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v256.__r_.__value_.__l.__size_;
  }
  float v26 = std::string::append(&v258, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  float v28 = std::string::append(&v216, ",\n", 2uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v217.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  float v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotAmplHi_dB");
  unint64_t v31 = std::string::append(v30, ": ", 2uLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 8));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v33 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v34 = &v259;
      goto LABEL_63;
    }
    unint64_t v34 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v33 = --v259.__r_.__value_.__l.__size_;
LABEL_63:
      v34->__r_.__value_.__s.__data_[v33] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v35 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v36 = &v260;
      goto LABEL_70;
    }
    uint64_t v36 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v35 = --v260.__r_.__value_.__l.__size_;
LABEL_70:
      v36->__r_.__value_.__s.__data_[v35] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v37 = &v256;
  }
  else {
    long long v37 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = v256.__r_.__value_.__l.__size_;
  }
  uint16x4_t v39 = std::string::append(&v258, (const std::string::value_type *)v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  unint64_t v41 = std::string::append(&v220, ",\n", 2uLL);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotAmplLo_dB");
  int v44 = std::string::append(v43, ": ", 2uLL);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 12));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v46 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      int v47 = &v259;
      goto LABEL_91;
    }
    int v47 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v46 = --v259.__r_.__value_.__l.__size_;
LABEL_91:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v48 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v49 = &v260;
      goto LABEL_98;
    }
    long long v49 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v48 = --v260.__r_.__value_.__l.__size_;
LABEL_98:
      v49->__r_.__value_.__s.__data_[v48] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v50 = &v256;
  }
  else {
    uint64_t v50 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v51 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v51 = v256.__r_.__value_.__l.__size_;
  }
  float v52 = std::string::append(&v258, (const std::string::value_type *)v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  float v54 = std::string::append(&v224, ",\n", 2uLL);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  float v56 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotUpperThres");
  float v57 = std::string::append(v56, ": ", 2uLL);
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 16));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v59 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v60 = &v259;
      goto LABEL_119;
    }
    uint64_t v60 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v59 = --v259.__r_.__value_.__l.__size_;
LABEL_119:
      v60->__r_.__value_.__s.__data_[v59] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v61 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v62 = &v260;
      goto LABEL_126;
    }
    float v62 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v61 = --v260.__r_.__value_.__l.__size_;
LABEL_126:
      v62->__r_.__value_.__s.__data_[v61] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v63 = &v256;
  }
  else {
    float v63 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v64 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v64 = v256.__r_.__value_.__l.__size_;
  }
  float v65 = std::string::append(&v258, (const std::string::value_type *)v63, v64);
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  float v67 = std::string::append(&v228, ",\n", 2uLL);
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  unint64_t v69 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotLowerThres");
  unint64_t v70 = std::string::append(v69, ": ", 2uLL);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 20));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v72 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v73 = &v259;
      goto LABEL_147;
    }
    uint64_t v73 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v72 = --v259.__r_.__value_.__l.__size_;
LABEL_147:
      v73->__r_.__value_.__s.__data_[v72] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v74 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v75 = &v260;
      goto LABEL_154;
    }
    long long v75 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v74 = --v260.__r_.__value_.__l.__size_;
LABEL_154:
      v75->__r_.__value_.__s.__data_[v74] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v76 = &v256;
  }
  else {
    uint64_t v76 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = v256.__r_.__value_.__l.__size_;
  }
  uint64_t v78 = std::string::append(&v258, (const std::string::value_type *)v76, v77);
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  unint64_t v80 = std::string::append(&v232, ",\n", 2uLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  uint64_t v82 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotDecayTime");
  unint64_t v83 = std::string::append(v82, ": ", 2uLL);
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 24));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v85 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v86 = &v259;
      goto LABEL_175;
    }
    unint64_t v86 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v85 = --v259.__r_.__value_.__l.__size_;
LABEL_175:
      v86->__r_.__value_.__s.__data_[v85] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v87 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v88 = &v260;
      goto LABEL_182;
    }
    uint64_t v88 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v87 = --v260.__r_.__value_.__l.__size_;
LABEL_182:
      v88->__r_.__value_.__s.__data_[v87] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v89 = &v256;
  }
  else {
    uint64_t v89 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v90 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v90 = v256.__r_.__value_.__l.__size_;
  }
  unint64_t v91 = std::string::append(&v258, (const std::string::value_type *)v89, v90);
  long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  uint64_t v93 = std::string::append(&v236, ",\n", 2uLL);
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  double v95 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "PilotFreq");
  long long v96 = std::string::append(v95, ": ", 2uLL);
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 28));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v98 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::__split_buffer<std::string>::pointer v99 = &v259;
      goto LABEL_203;
    }
    std::__split_buffer<std::string>::pointer v99 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v98 = --v259.__r_.__value_.__l.__size_;
LABEL_203:
      v99->__r_.__value_.__s.__data_[v98] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v100 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v101 = &v260;
      goto LABEL_210;
    }
    uint64_t v101 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v100 = --v260.__r_.__value_.__l.__size_;
LABEL_210:
      v101->__r_.__value_.__s.__data_[v100] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = &v256;
  }
  else {
    std::string::size_type v102 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v103 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v103 = v256.__r_.__value_.__l.__size_;
  }
  long long v104 = std::string::append(&v258, (const std::string::value_type *)v102, v103);
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  long long v106 = std::string::append(&v240, ",\n", 2uLL);
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  long long v108 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSPreGain");
  uint64_t v109 = std::string::append(v108, ": ", 2uLL);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 32));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v111 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v112 = &v259;
      goto LABEL_231;
    }
    uint64_t v112 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v111 = --v259.__r_.__value_.__l.__size_;
LABEL_231:
      v112->__r_.__value_.__s.__data_[v111] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v113 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::string::size_type v114 = &v260;
      goto LABEL_238;
    }
    std::string::size_type v114 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v113 = --v260.__r_.__value_.__l.__size_;
LABEL_238:
      v114->__r_.__value_.__s.__data_[v113] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v115 = &v256;
  }
  else {
    unint64_t v115 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v116 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v116 = v256.__r_.__value_.__l.__size_;
  }
  uint64_t v117 = std::string::append(&v258, (const std::string::value_type *)v115, v116);
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  float v119 = std::string::append(&v244, ",\n", 2uLL);
  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  uint64_t v121 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSPostGain");
  unint64_t v122 = std::string::append(v121, ": ", 2uLL);
  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 36));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v124 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      float v125 = &v259;
      goto LABEL_259;
    }
    float v125 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v124 = --v259.__r_.__value_.__l.__size_;
LABEL_259:
      v125->__r_.__value_.__s.__data_[v124] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v126 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      unint64_t v127 = &v260;
      goto LABEL_266;
    }
    unint64_t v127 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v126 = --v260.__r_.__value_.__l.__size_;
LABEL_266:
      v127->__r_.__value_.__s.__data_[v126] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v128 = &v256;
  }
  else {
    long long v128 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v129 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v129 = v256.__r_.__value_.__l.__size_;
  }
  long long v130 = std::string::append(&v258, (const std::string::value_type *)v128, v129);
  long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  long long v132 = std::string::append(&v248, ",\n", 2uLL);
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  unint64_t v134 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v257, "LPMLSLowerCorner");
  std::__split_buffer<std::string>::pointer v135 = std::string::append(v134, ": ", 2uLL);
  long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v259, *(float *)(a2 + 40));
  while (2)
  {
    if ((SHIBYTE(v259.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v258.__r_.__value_.__r.__words[2] + HIBYTE(v259.__r_.__value_.__r.__words[2]) + 7) != 48) {
        break;
      }
      uint64_t v137 = HIBYTE(v259.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v259.__r_.__value_.__s + 23) = (*((unsigned char *)&v259.__r_.__value_.__s + 23) - 1) & 0x7F;
      std::string::size_type v138 = &v259;
      goto LABEL_287;
    }
    std::string::size_type v138 = (std::string *)v259.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v259.__r_.__value_.__r.__words[0] + v259.__r_.__value_.__l.__size_ - 1) == 48)
    {
      uint64_t v137 = --v259.__r_.__value_.__l.__size_;
LABEL_287:
      v138->__r_.__value_.__s.__data_[v137] = 0;
      continue;
    }
    break;
  }
  std::string v260 = v259;
  memset(&v259, 0, sizeof(v259));
  while (2)
  {
    if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&v259.__r_.__value_.__r.__words[2] + HIBYTE(v260.__r_.__value_.__r.__words[2]) + 7) != 46) {
        break;
      }
      uint64_t v139 = HIBYTE(v260.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v260.__r_.__value_.__s + 23) = (*((unsigned char *)&v260.__r_.__value_.__s + 23) - 1) & 0x7F;
      long long v140 = &v260;
      goto LABEL_294;
    }
    long long v140 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v260.__r_.__value_.__r.__words[0] + v260.__r_.__value_.__l.__size_ - 1) == 46)
    {
      uint64_t v139 = --v260.__r_.__value_.__l.__size_;
LABEL_294:
      v140->__r_.__value_.__s.__data_[v139] = 0;
      continue;
    }
    break;
  }
  std::string v256 = v260;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v141 = &v256;
  }
  else {
    uint64_t v141 = (std::string *)v256.__r_.__value_.__r.__words[0];
  }
  if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v142 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v142 = v256.__r_.__value_.__l.__size_;
  }
  float v143 = std::string::append(&v258, (const std::string::value_type *)v141, v142);
  long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  uint64_t v145 = std::string::append(&v252, ",\n", 2uLL);
  long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  std::__split_buffer<std::string>::pointer v147 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v259, "ThermalMeasurementMethod");
  uint64_t v148 = std::string::append(v147, ": ", 2uLL);
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v258, *(_DWORD *)(a2 + 44));
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v150 = &v258;
  }
  else {
    uint64_t v150 = (std::string *)v258.__r_.__value_.__r.__words[0];
  }
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v151 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v151 = v258.__r_.__value_.__l.__size_;
  }
  uint64_t v152 = std::string::append(&v260, (const std::string::value_type *)v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  long long v154 = std::string::append(&v256, ",\n", 2uLL);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  long long v156 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v259, "DisplacementProtectionType");
  long long v157 = std::string::append(v156, ": ", 2uLL);
  long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v258, *(_DWORD *)(a2 + 48));
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v159 = &v258;
  }
  else {
    std::string::size_type v159 = (std::string *)v258.__r_.__value_.__r.__words[0];
  }
  if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v160 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v160 = v258.__r_.__value_.__l.__size_;
  }
  long long v161 = std::string::append(&v260, (const std::string::value_type *)v159, v160);
  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  int64_t v255 = v161->__r_.__value_.__r.__words[2];
  long long v254 = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if (v255 >= 0) {
    std::string::size_type v163 = (const std::string::value_type *)&v254;
  }
  else {
    std::string::size_type v163 = (const std::string::value_type *)v254;
  }
  if (v255 >= 0) {
    std::string::size_type v164 = HIBYTE(v255);
  }
  else {
    std::string::size_type v164 = *((void *)&v254 + 1);
  }
  long long v165 = std::string::append(&v257, v163, v164);
  long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  int64_t v251 = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v255) < 0) {
    operator delete((void *)v254);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (v251 >= 0) {
    std::string::size_type v167 = __p;
  }
  else {
    std::string::size_type v167 = (void **)__p[0];
  }
  if (v251 >= 0) {
    std::string::size_type v168 = HIBYTE(v251);
  }
  else {
    std::string::size_type v168 = (std::string::size_type)__p[1];
  }
  long long v169 = std::string::append(&v253, (const std::string::value_type *)v167, v168);
  long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  int64_t v247 = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)float v246 = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v251) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252.__r_.__value_.__l.__data_);
  }
  if (v247 >= 0) {
    std::string::size_type v171 = v246;
  }
  else {
    std::string::size_type v171 = (void **)v246[0];
  }
  if (v247 >= 0) {
    std::string::size_type v172 = HIBYTE(v247);
  }
  else {
    std::string::size_type v172 = (std::string::size_type)v246[1];
  }
  long long v173 = std::string::append(&v249, (const std::string::value_type *)v171, v172);
  long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
  int64_t v243 = v173->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v242 = v174;
  v173->__r_.__value_.__l.__size_ = 0;
  v173->__r_.__value_.__r.__words[2] = 0;
  v173->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v247) < 0) {
    operator delete(v246[0]);
  }
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (v243 >= 0) {
    std::string::size_type v175 = v242;
  }
  else {
    std::string::size_type v175 = (void **)v242[0];
  }
  if (v243 >= 0) {
    std::string::size_type v176 = HIBYTE(v243);
  }
  else {
    std::string::size_type v176 = (std::string::size_type)v242[1];
  }
  long long v177 = std::string::append(&v245, (const std::string::value_type *)v175, v176);
  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  int64_t v239 = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v238 = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v243) < 0) {
    operator delete(v242[0]);
  }
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v244.__r_.__value_.__l.__data_);
  }
  if (v239 >= 0) {
    std::string::size_type v179 = v238;
  }
  else {
    std::string::size_type v179 = (void **)v238[0];
  }
  if (v239 >= 0) {
    std::string::size_type v180 = HIBYTE(v239);
  }
  else {
    std::string::size_type v180 = (std::string::size_type)v238[1];
  }
  long long v181 = std::string::append(&v241, (const std::string::value_type *)v179, v180);
  long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  int64_t v235 = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v234 = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v239) < 0) {
    operator delete(v238[0]);
  }
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (v235 >= 0) {
    std::string::size_type v183 = v234;
  }
  else {
    std::string::size_type v183 = (void **)v234[0];
  }
  if (v235 >= 0) {
    std::string::size_type v184 = HIBYTE(v235);
  }
  else {
    std::string::size_type v184 = (std::string::size_type)v234[1];
  }
  long long v185 = std::string::append(&v237, (const std::string::value_type *)v183, v184);
  long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  int64_t v231 = v185->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v230 = v186;
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v235) < 0) {
    operator delete(v234[0]);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (v231 >= 0) {
    std::string::size_type v187 = v230;
  }
  else {
    std::string::size_type v187 = (void **)v230[0];
  }
  if (v231 >= 0) {
    std::string::size_type v188 = HIBYTE(v231);
  }
  else {
    std::string::size_type v188 = (std::string::size_type)v230[1];
  }
  long long v189 = std::string::append(&v233, (const std::string::value_type *)v187, v188);
  long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  int64_t v227 = v189->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v226 = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v231) < 0) {
    operator delete(v230[0]);
  }
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (v227 >= 0) {
    std::string::size_type v191 = v226;
  }
  else {
    std::string::size_type v191 = (void **)v226[0];
  }
  if (v227 >= 0) {
    std::string::size_type v192 = HIBYTE(v227);
  }
  else {
    std::string::size_type v192 = (std::string::size_type)v226[1];
  }
  long long v193 = std::string::append(&v229, (const std::string::value_type *)v191, v192);
  long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
  int64_t v223 = v193->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v222 = v194;
  v193->__r_.__value_.__l.__size_ = 0;
  v193->__r_.__value_.__r.__words[2] = 0;
  v193->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v227) < 0) {
    operator delete(v226[0]);
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  if (v223 >= 0) {
    std::string::size_type v195 = v222;
  }
  else {
    std::string::size_type v195 = (void **)v222[0];
  }
  if (v223 >= 0) {
    std::string::size_type v196 = HIBYTE(v223);
  }
  else {
    std::string::size_type v196 = (std::string::size_type)v222[1];
  }
  long long v197 = std::string::append(&v225, (const std::string::value_type *)v195, v196);
  long long v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
  int64_t v219 = v197->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v218 = v198;
  v197->__r_.__value_.__l.__size_ = 0;
  v197->__r_.__value_.__r.__words[2] = 0;
  v197->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v223) < 0) {
    operator delete(v222[0]);
  }
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  if (v219 >= 0) {
    std::string::size_type v199 = v218;
  }
  else {
    std::string::size_type v199 = (void **)v218[0];
  }
  if (v219 >= 0) {
    std::string::size_type v200 = HIBYTE(v219);
  }
  else {
    std::string::size_type v200 = (std::string::size_type)v218[1];
  }
  char v201 = std::string::append(&v221, (const std::string::value_type *)v199, v200);
  long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
  int64_t v215 = v201->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v214 = v202;
  v201->__r_.__value_.__l.__size_ = 0;
  v201->__r_.__value_.__r.__words[2] = 0;
  v201->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v219) < 0) {
    operator delete(v218[0]);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (v215 >= 0) {
    std::string v203 = v214;
  }
  else {
    std::string v203 = (void **)v214[0];
  }
  if (v215 >= 0) {
    std::string::size_type v204 = HIBYTE(v215);
  }
  else {
    std::string::size_type v204 = (std::string::size_type)v214[1];
  }
  uint64_t v205 = std::string::append(&v217, (const std::string::value_type *)v203, v204);
  long long v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
  int64_t v211 = v205->__r_.__value_.__r.__words[2];
  *(_OWORD *)int64_t v210 = v206;
  v205->__r_.__value_.__l.__size_ = 0;
  v205->__r_.__value_.__r.__words[2] = 0;
  v205->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v215) < 0) {
    operator delete(v214[0]);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  if (v211 >= 0) {
    std::string v207 = v210;
  }
  else {
    std::string v207 = (void **)v210[0];
  }
  if (v211 >= 0) {
    std::string::size_type v208 = HIBYTE(v211);
  }
  else {
    std::string::size_type v208 = (std::string::size_type)v210[1];
  }
  int v209 = std::string::append(&v213, (const std::string::value_type *)v207, v208);
  *a1 = *v209;
  v209->__r_.__value_.__l.__size_ = 0;
  v209->__r_.__value_.__r.__words[2] = 0;
  v209->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v211) < 0) {
    operator delete(v210[0]);
  }
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
}

void sub_1BB665688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1BB6659EC()
{
}

void sub_1BB6659F4()
{
}

void sub_1BB6659FC()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB6658C0);
  }
  JUMPOUT(0x1BB6658C4);
}

void sub_1BB665A40()
{
}

void sub_1BB665A48()
{
}

void sub_1BB665A50()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB6658E0);
  }
  JUMPOUT(0x1BB6658E4);
}

void sub_1BB665A94()
{
}

void sub_1BB665A9C()
{
}

void sub_1BB665AA4()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB665900);
  }
  JUMPOUT(0x1BB665904);
}

void sub_1BB665AE8()
{
}

void sub_1BB665AF0()
{
}

void sub_1BB665AF8()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB665920);
  }
  JUMPOUT(0x1BB665924);
}

void sub_1BB665B3C()
{
}

void sub_1BB665B44()
{
}

void sub_1BB665B4C()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB665940);
  }
  JUMPOUT(0x1BB665944);
}

void sub_1BB665B90()
{
}

void sub_1BB665B98()
{
}

void sub_1BB665BA0()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB665960);
  }
  JUMPOUT(0x1BB665964);
}

void sub_1BB665BE4()
{
}

void sub_1BB665BEC()
{
}

void sub_1BB665BF4()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB665980);
  }
  JUMPOUT(0x1BB665984);
}

void sub_1BB665C38()
{
}

void sub_1BB665C40()
{
}

void sub_1BB665C48()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB6659A0);
  }
  JUMPOUT(0x1BB6659A4);
}

void sub_1BB665C8C()
{
}

void sub_1BB665C94()
{
}

void sub_1BB665C9C()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB6659C0);
  }
  JUMPOUT(0x1BB6659C4);
}

void sub_1BB665CE0()
{
}

void sub_1BB665CE8()
{
}

void sub_1BB665CF0()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  if (*(char *)(v0 - 105) < 0) {
    operator delete(*(void **)(v0 - 128));
  }
  if (*(char *)(v0 - 137) < 0) {
    JUMPOUT(0x1BB6659E0);
  }
  JUMPOUT(0x1BB6659E4);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,char const* const&>(applesauce::CF::DictionaryRef *a1, const __CFDictionary *a2, const char **a3)
{
  CFTypeRef v4 = applesauce::CF::details::at_key<char const* const&>(a2, a3);
  if (!v4)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  long long v5 = v4;
  CFRetain(v4);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1BB665DB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance()
{
  {
    clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalStateVector_v3_separate();
    __cxa_atexit((void (*)(void *))clsp::ThermalStateVector_v3_separate<clsp::EL>::~ThermalStateVector_v3_separate, &clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst, &dword_1BB0CE000);
  }
}

void sub_1BB665E58(_Unwind_Exception *a1)
{
}

void std::vector<clsp::ThermalState_v3>::resize(void **a1, unint64_t a2)
{
  long long v5 = (char *)*a1;
  CFTypeRef v4 = (char *)a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[24 * a2];
    }
  }
  else
  {
    CFIndex v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3) >= v7)
    {
      uint64_t v20 = &v4[24 * v7];
      do
      {
        *CFTypeRef v4 = 0;
        *(void *)(v4 + 12) = 0;
        *(void *)(v4 + 4) = 0;
        *((_DWORD *)v4 + 5) = 0;
        v4 += 24;
      }
      while (v4 != v20);
      a1[1] = v20;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
      uint64_t v13 = &v12[24 * v6];
      long long v14 = &v12[24 * a2];
      uint64_t v15 = v13;
      do
      {
        *uint64_t v15 = 0;
        *(void *)(v15 + 12) = 0;
        *(void *)(v15 + 4) = 0;
        *((_DWORD *)v15 + 5) = 0;
        v15 += 24;
      }
      while (v15 != v14);
      long long v16 = &v12[24 * v11];
      unint64_t v18 = (char *)*a1;
      uint64_t v17 = (char *)a1[1];
      if (v17 != *a1)
      {
        do
        {
          long long v19 = *(_OWORD *)(v17 - 24);
          *((void *)v13 - 1) = *((void *)v17 - 1);
          *(_OWORD *)(v13 - 24) = v19;
          v13 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (v17)
      {
        operator delete(v17);
      }
    }
  }
}

void *clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalStateVector_v3_separate()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::vector<clsp::ThermalState_v3>::vector(&clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst);
  byte_1E9F7FFB8 = 1;
  qword_1E9F7FFC0 = 0x7FF0000000000000;
  *(double *)&qword_1E9F7FFC0 = (double)mach_absolute_time() * 0.0000000416666667;
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4clsp30ThermalStateVector_v3_separateINS_2ELEEC2Ev_block_invoke;
  v1[3] = &__block_descriptor_tmp_812;
  v1[4] = &clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
  uint64_t v3 = 0;
  v2[0] = &unk_1F14BFD18;
  v2[1] = _Block_copy(v1);
  uint64_t v3 = v2;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)@"clsp_resetThermalState", @"com.apple.coreaudio", (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v2);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
}

void sub_1BB666134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst)
  {
    qword_1E9F7FFA8 = clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst;
    operator delete((void *)clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst);
  }
  _Unwind_Resume(a1);
}

uint64_t clsp::ThermalStateVector_v3_separate<clsp::EL>::~ThermalStateVector_v3_separate(uint64_t a1)
{
  CFNumberRef v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZN4clsp30ThermalStateVector_v3_separateINS_2ELEEC2Ev_block_invoke(uint64_t result, int a2)
{
  if (a2)
  {
    CFNumberRef v2 = *(uint64_t **)(result + 32);
    uint64_t v3 = *v2;
    for (uint64_t i = v2[1]; v3 != i; v3 += 24)
    {
      *(_OWORD *)(v3 + 4) = xmmword_1BB875840;
      *(_DWORD *)(v3 + 20) = 1065353216;
      *(unsigned char *)uint64_t v3 = 1;
    }
  }
  return result;
}

_OWORD *std::vector<std::pair<__CFString const*,AUSPV3PartParams>>::__init_with_size[abi:ne180100]<std::pair<__CFString const*,AUSPV3PartParams>*,std::pair<__CFString const*,AUSPV3PartParams>*>(_OWORD *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(a4);
    *uint64_t v4 = result;
    v4[1] = result;
    void v4[2] = &result[v7];
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *result++ = v8;
    }
    v4[1] = result;
  }
  return result;
}

void sub_1BB666248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpeakerProtectionV3::SetParamFromPair(uint64_t a1, ausdk::AUElement *a2, __CFString *a3, unsigned int a4, CACFDictionary *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  float v16 = 0.0;
  uint64_t v9 = 0;
  if ((CACFDictionary::GetFloat32((uint64_t)this, a3, &v16) & 1) == 0)
  {
    uint64_t v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      unint64_t v11 = *v10;
      if (!*v10)
      {
LABEL_8:
        uint64_t v9 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CStringPtr = CFStringGetCStringPtr(a3, 0x8000100u);
      *(_DWORD *)std::string buf = 136315650;
      unint64_t v18 = "AUSpeakerProtectionV3.cpp";
      __int16 v19 = 1024;
      int v20 = 3254;
      __int16 v21 = 2080;
      uint64_t v22 = CStringPtr;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get HWParam key: %s", buf, 0x1Cu);
    }
    goto LABEL_8;
  }
LABEL_9:
  if (!a2)
  {
    uint64_t v13 = (NSObject **)spp3Subsystem();
    if (v13)
    {
      long long v14 = *v13;
      if (!*v13) {
        return (v9 + 1);
      }
    }
    else
    {
      long long v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v18 = "AUSpeakerProtectionV3.cpp";
      __int16 v19 = 1024;
      int v20 = 3262;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d scope is null", buf, 0x12u);
    }
    return (v9 + 1);
  }
  ausdk::AUElement::SetParameter(a2, a4, v16, 0);
  ++*(_DWORD *)(a1 + 636);
  return v9;
}

{
  uint64_t v9;
  NSObject **v10;
  NSObject *v11;
  const char *CStringPtr;
  NSObject **v13;
  NSObject *v14;
  float v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  uint64_t v23 = *MEMORY[0x1E4F143B8];
  float v16 = 0.0;
  uint64_t v9 = 0;
  if ((CACFDictionary::GetFloat32((uint64_t)this, a3, &v16) & 1) == 0)
  {
    uint64_t v10 = (NSObject **)spp3Subsystem();
    if (v10)
    {
      unint64_t v11 = *v10;
      if (!*v10)
      {
LABEL_8:
        uint64_t v9 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CStringPtr = CFStringGetCStringPtr(a3, 0x8000100u);
      *(_DWORD *)std::string buf = 136315650;
      unint64_t v18 = "AUSpeakerProtectionV3.cpp";
      __int16 v19 = 1024;
      int v20 = 3284;
      __int16 v21 = 2080;
      uint64_t v22 = CStringPtr;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get HWParam key: %s", buf, 0x1Cu);
    }
    goto LABEL_8;
  }
LABEL_9:
  if (!a2)
  {
    uint64_t v13 = (NSObject **)spp3Subsystem();
    if (v13)
    {
      long long v14 = *v13;
      if (!*v13) {
        return (v9 + 1);
      }
    }
    else
    {
      long long v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v18 = "AUSpeakerProtectionV3.cpp";
      __int16 v19 = 1024;
      int v20 = 3292;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d scope is null", buf, 0x12u);
    }
    return (v9 + 1);
  }
  ausdk::AUElement::SetParameter(a2, a4, v16, 0);
  ++*(_DWORD *)(a1 + 636);
  return v9;
}

uint64_t AUSpeakerProtectionV3::SetChannelParamsFromPlist(uint64_t a1, void *a2, const __CFDictionary **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v22 = 257;
  CACFDictionary::GetCACFArray(a3, @"ChannelSpecificParams", (CACFArray *)&theArray);
  int Count = (int)theArray;
  if (theArray) {
    int Count = CFArrayGetCount(theArray);
  }
  if (Count == *(_DWORD *)(a1 + 632))
  {
    uint64_t v7 = 0;
    if (!Count) {
      goto LABEL_26;
    }
    goto LABEL_13;
  }
  long long v8 = (NSObject **)spp3Subsystem();
  if (v8)
  {
    uint64_t v9 = *v8;
    if (!*v8) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    float v24 = "AUSpeakerProtectionV3.cpp";
    __int16 v25 = 1024;
    int v26 = 3309;
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of channels key does not match plist number channels", buf, 0x12u);
  }
LABEL_12:
  uint64_t v7 = 1;
  if (*(_DWORD *)(a1 + 632))
  {
LABEL_13:
    unint64_t v10 = 0;
    unint64_t v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], v11);
      __int16 v20 = 257;
      CACFArray::GetCACFDictionary(&theArray, v10, (CACFDictionary *)&Mutable);
      int v18 = -1;
      CACFDictionary::GetSInt32((uint64_t)Mutable, @"ChannelID", &v18);
      if (v10 == v18)
      {
        if (a2[1] != *a2)
        {
          uint64_t v12 = 0;
          unint64_t v13 = 0;
          do
          {
            uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 792), v10);
            uint64_t v7 = AUSpeakerProtectionV3::SetParamFromPair(a1, Element, *(__CFString **)(*a2 + v12), *(_DWORD *)(*a2 + v12 + 8), Mutable)+ v7;
            ++v13;
            v12 += 16;
          }
          while (v13 < (uint64_t)(a2[1] - *a2) >> 4);
        }
      }
      else
      {
        uint64_t v15 = (NSObject **)spp3Subsystem();
        uint64_t v7 = (v7 + 1);
        if (!v15)
        {
          float v16 = MEMORY[0x1E4F14500];
LABEL_23:
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            float v24 = "AUSpeakerProtectionV3.cpp";
            __int16 v25 = 1024;
            int v26 = 3328;
            _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelID key does not match channel order", buf, 0x12u);
          }
          goto LABEL_25;
        }
        float v16 = *v15;
        if (*v15) {
          goto LABEL_23;
        }
      }
LABEL_25:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 632));
  }
LABEL_26:
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v7;
}

void sub_1BB666700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::SetCLChannelParamsFromPlist(AUSpeakerProtectionV3 *this, const __CFDictionary **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v18 = 257;
  CACFDictionary::GetCACFArray(a2, @"ChannelSpecificParams", (CACFArray *)&theArray);
  uint64_t v4 = (void *)*((void *)this + 84);
  long long v5 = (void *)*((void *)this + 85);
  while (v5 != v4)
  {
    uint64_t v7 = *--v5;
    uint64_t v6 = v7;
    void *v5 = 0;
    if (v7) {
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
    }
  }
  *((void *)this + 85) = v4;
  int Count = (int)theArray;
  if (theArray) {
    int Count = CFArrayGetCount(theArray);
  }
  if (Count == *((_DWORD *)this + 158))
  {
    uint64_t v9 = 0;
    if (!Count) {
      goto LABEL_18;
    }
LABEL_17:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v16 = 257;
    CACFArray::GetCACFDictionary(&theArray, 0, (CACFDictionary *)&Mutable);
    int v14 = -1;
    CACFDictionary::GetSInt32((uint64_t)Mutable, @"ChannelID", &v14);
    clsp::ClosedLoopParameters::Create((clsp::ClosedLoopParameters *)&v13, (const CACFDictionary *)&Mutable);
  }
  unint64_t v10 = (NSObject **)spp3Subsystem();
  if (v10)
  {
    unint64_t v11 = *v10;
    if (!*v10) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUSpeakerProtectionV3.cpp";
    __int16 v20 = 1024;
    LODWORD(v21) = 3345;
    _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of channels key does not match plist number channels", (uint8_t *)buf, 0x12u);
  }
LABEL_16:
  uint64_t v9 = 1;
  if (*((_DWORD *)this + 158)) {
    goto LABEL_17;
  }
LABEL_18:
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v9;
}

void sub_1BB666B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::InitCLParamsFromPlist(AUSpeakerProtectionV3 *this, ausdk::AUElement *a2, CACFDictionary **a3)
{
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = @"TempSenseWindowTime";
  v6[1] = 24;
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
  uint64_t v9 = v8;
  unint64_t v10 = &v7[16 * v8];
  *((void *)v7 + 2) = @"TempSenseSmoothingTau";
  *((void *)v7 + 3) = 25;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
  operator delete(v6);
  if (v9 < 3)
  {
    uint64_t v13 = 3;
    if ((unint64_t)((v10 - v7) >> 3) > 3) {
      uint64_t v13 = (v10 - v7) >> 3;
    }
    if ((unint64_t)(v10 - v7) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = 0;
    unint64_t v10 = (char *)(v14 + 16 * v15);
    *(void *)(v14 + 32) = @"TlimErrDecayTime";
    *(void *)(v14 + 40) = 23;
    unint64_t v11 = (char *)(v14 + 48);
    do
    {
      *(_OWORD *)(v14 + 32 + v16 - 16) = *(_OWORD *)&v7[v16 + 16];
      v16 -= 16;
    }
    while (v16 != -32);
    uint64_t v12 = (char *)v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *((void *)v7 + 4) = @"TlimErrDecayTime";
    *((void *)v7 + 5) = 23;
    unint64_t v11 = v7 + 48;
    uint64_t v12 = v7;
  }
  if (v11 >= v10)
  {
    uint64_t v18 = (v11 - v12) >> 4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v19) {
      unint64_t v19 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = (void *)(v20 + 16 * v18);
    unint64_t v10 = (char *)(v20 + 16 * v21);
    void *v22 = @"PilotAmplHi_dB";
    v22[1] = 27;
    uint64_t v17 = (char *)(v22 + 2);
    if (v11 == v12) {
      goto LABEL_29;
    }
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v11 - 1);
      v22 -= 2;
      v11 -= 16;
    }
    while (v11 != v12);
    if (v12) {
LABEL_29:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v22;
  }
  else
  {
    *(void *)unint64_t v11 = @"PilotAmplHi_dB";
    *((void *)v11 + 1) = 27;
    uint64_t v17 = v11 + 16;
  }
  if (v17 >= v10)
  {
    uint64_t v24 = (v17 - v12) >> 4;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v25) {
      unint64_t v25 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v26);
    }
    else {
      uint64_t v27 = 0;
    }
    float v28 = (void *)(v26 + 16 * v24);
    unint64_t v10 = (char *)(v26 + 16 * v27);
    void *v28 = @"PilotAmplLo_dB";
    v28[1] = 28;
    uint64_t v23 = (char *)(v28 + 2);
    if (v17 == v12) {
      goto LABEL_45;
    }
    do
    {
      *((_OWORD *)v28 - 1) = *((_OWORD *)v17 - 1);
      v28 -= 2;
      v17 -= 16;
    }
    while (v17 != v12);
    if (v12) {
LABEL_45:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v28;
  }
  else
  {
    *(void *)uint64_t v17 = @"PilotAmplLo_dB";
    *((void *)v17 + 1) = 28;
    uint64_t v23 = v17 + 16;
  }
  if (v23 >= v10)
  {
    uint64_t v30 = (v23 - v12) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v31) {
      unint64_t v31 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    unint64_t v34 = (void *)(v32 + 16 * v30);
    unint64_t v10 = (char *)(v32 + 16 * v33);
    void *v34 = @"PilotUpperThres";
    v34[1] = 29;
    long long v29 = (char *)(v34 + 2);
    if (v23 == v12) {
      goto LABEL_61;
    }
    do
    {
      *((_OWORD *)v34 - 1) = *((_OWORD *)v23 - 1);
      v34 -= 2;
      v23 -= 16;
    }
    while (v23 != v12);
    if (v12) {
LABEL_61:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v34;
  }
  else
  {
    *(void *)uint64_t v23 = @"PilotUpperThres";
    *((void *)v23 + 1) = 29;
    long long v29 = v23 + 16;
  }
  if (v29 >= v10)
  {
    uint64_t v36 = (v29 - v12) >> 4;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v37) {
      unint64_t v37 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v37;
    }
    if (v38) {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    long long v40 = (void *)(v38 + 16 * v36);
    unint64_t v10 = (char *)(v38 + 16 * v39);
    *long long v40 = @"PilotLowerThres";
    v40[1] = 30;
    uint64_t v35 = (char *)(v40 + 2);
    if (v29 == v12) {
      goto LABEL_77;
    }
    do
    {
      *((_OWORD *)v40 - 1) = *((_OWORD *)v29 - 1);
      v40 -= 2;
      v29 -= 16;
    }
    while (v29 != v12);
    if (v12) {
LABEL_77:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v40;
  }
  else
  {
    *(void *)long long v29 = @"PilotLowerThres";
    *((void *)v29 + 1) = 30;
    uint64_t v35 = v29 + 16;
  }
  if (v35 >= v10)
  {
    uint64_t v42 = (v35 - v12) >> 4;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v43) {
      unint64_t v43 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v43;
    }
    if (v44) {
      unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v44);
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v46 = (void *)(v44 + 16 * v42);
    unint64_t v10 = (char *)(v44 + 16 * v45);
    *uint64_t v46 = @"PilotDecayTime";
    v46[1] = 31;
    unint64_t v41 = (char *)(v46 + 2);
    if (v35 == v12) {
      goto LABEL_93;
    }
    do
    {
      *((_OWORD *)v46 - 1) = *((_OWORD *)v35 - 1);
      v46 -= 2;
      v35 -= 16;
    }
    while (v35 != v12);
    if (v12) {
LABEL_93:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v46;
  }
  else
  {
    *(void *)uint64_t v35 = @"PilotDecayTime";
    *((void *)v35 + 1) = 31;
    unint64_t v41 = v35 + 16;
  }
  if (v41 >= v10)
  {
    uint64_t v48 = (v41 - v12) >> 4;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v49) {
      unint64_t v49 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50) {
      unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v50);
    }
    else {
      uint64_t v51 = 0;
    }
    float v52 = (void *)(v50 + 16 * v48);
    unint64_t v10 = (char *)(v50 + 16 * v51);
    *float v52 = @"PilotFreq";
    v52[1] = 32;
    int v47 = (char *)(v52 + 2);
    if (v41 == v12) {
      goto LABEL_109;
    }
    do
    {
      *((_OWORD *)v52 - 1) = *((_OWORD *)v41 - 1);
      v52 -= 2;
      v41 -= 16;
    }
    while (v41 != v12);
    if (v12) {
LABEL_109:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v52;
  }
  else
  {
    *(void *)unint64_t v41 = @"PilotFreq";
    *((void *)v41 + 1) = 32;
    int v47 = v41 + 16;
  }
  if (v47 >= v10)
  {
    uint64_t v54 = (v47 - v12) >> 4;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v55) {
      unint64_t v55 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56) {
      unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v56);
    }
    else {
      uint64_t v57 = 0;
    }
    long long v58 = (void *)(v56 + 16 * v54);
    unint64_t v10 = (char *)(v56 + 16 * v57);
    void *v58 = @"LPMLSPreGain";
    v58[1] = 33;
    long long v53 = (char *)(v58 + 2);
    if (v47 == v12) {
      goto LABEL_125;
    }
    do
    {
      *((_OWORD *)v58 - 1) = *((_OWORD *)v47 - 1);
      v58 -= 2;
      v47 -= 16;
    }
    while (v47 != v12);
    if (v12) {
LABEL_125:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v58;
  }
  else
  {
    *(void *)int v47 = @"LPMLSPreGain";
    *((void *)v47 + 1) = 33;
    long long v53 = v47 + 16;
  }
  if (v53 >= v10)
  {
    uint64_t v60 = (v53 - v12) >> 4;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v61) {
      unint64_t v61 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v61;
    }
    if (v62) {
      unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v62);
    }
    else {
      uint64_t v63 = 0;
    }
    std::string::size_type v64 = (void *)(v62 + 16 * v60);
    unint64_t v10 = (char *)(v62 + 16 * v63);
    *std::string::size_type v64 = @"ThermalMeasurementMethod";
    v64[1] = 20;
    uint64_t v59 = (char *)(v64 + 2);
    if (v53 == v12) {
      goto LABEL_141;
    }
    do
    {
      *((_OWORD *)v64 - 1) = *((_OWORD *)v53 - 1);
      v64 -= 2;
      v53 -= 16;
    }
    while (v53 != v12);
    if (v12) {
LABEL_141:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v64;
  }
  else
  {
    *(void *)long long v53 = @"ThermalMeasurementMethod";
    *((void *)v53 + 1) = 20;
    uint64_t v59 = v53 + 16;
  }
  if (v59 >= v10)
  {
    uint64_t v66 = (v59 - v12) >> 4;
    unint64_t v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v67) {
      unint64_t v67 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v68 = v67;
    }
    if (v68) {
      unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v68);
    }
    else {
      uint64_t v69 = 0;
    }
    unint64_t v70 = (void *)(v68 + 16 * v66);
    unint64_t v10 = (char *)(v68 + 16 * v69);
    *unint64_t v70 = @"LPMLSPostGain";
    v70[1] = 34;
    float v65 = (char *)(v70 + 2);
    if (v59 == v12) {
      goto LABEL_157;
    }
    do
    {
      *((_OWORD *)v70 - 1) = *((_OWORD *)v59 - 1);
      v70 -= 2;
      v59 -= 16;
    }
    while (v59 != v12);
    if (v12) {
LABEL_157:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v70;
  }
  else
  {
    *(void *)uint64_t v59 = @"LPMLSPostGain";
    *((void *)v59 + 1) = 34;
    float v65 = v59 + 16;
  }
  if (v65 >= v10)
  {
    uint64_t v72 = (v65 - v12) >> 4;
    unint64_t v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v10 - v12) >> 3 > v73) {
      unint64_t v73 = (v10 - v12) >> 3;
    }
    if ((unint64_t)(v10 - v12) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v73;
    }
    if (v74) {
      unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v74);
    }
    long long v75 = (void *)(v74 + 16 * v72);
    void *v75 = @"LPMLSLowerCorner";
    v75[1] = 35;
    long long v71 = (char *)(v75 + 2);
    if (v65 == v12) {
      goto LABEL_172;
    }
    do
    {
      *((_OWORD *)v75 - 1) = *((_OWORD *)v65 - 1);
      v75 -= 2;
      v65 -= 16;
    }
    while (v65 != v12);
    if (v12) {
LABEL_172:
    }
      operator delete(v12);
    uint64_t v12 = (char *)v75;
  }
  else
  {
    *(void *)float v65 = @"LPMLSLowerCorner";
    *((void *)v65 + 1) = 35;
    long long v71 = v65 + 16;
  }
  if (v12 == v71)
  {
    uint64_t v76 = 0;
LABEL_180:
    operator delete(v12);
    return v76;
  }
  LODWORD(v76) = 0;
  std::string::size_type v77 = v12;
  do
  {
    uint64_t v76 = AUSpeakerProtectionV3::SetParamFromPair((uint64_t)this, a2, *(__CFString **)v77, *((_DWORD *)v77 + 2), *a3)+ v76;
    v77 += 16;
  }
  while (v77 != v71);
  if (v12) {
    goto LABEL_180;
  }
  return v76;
}

void sub_1BB667658(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *clsp::SpeakerCalibrationProperties::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ DCR = ", 10);
  uint64_t v4 = (void *)std::ostream::operator<<();
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (Ω)  ━━━━━  SpeakerCalibration\n", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"┣ CalTemp = ", 14);
  uint64_t v6 = (void *)std::ostream::operator<<();
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (˚C)\n", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"┣ Q = ", 8);
  uint64_t v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"┗ f₀ = ", 11);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (Hz)\n", 6);
  if (*(void *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ Kms = ", 10);
    unint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (N/m)  ━━━━━  DisplacementCalibration\n", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"┣ Le = ", 9);
    uint64_t v13 = (void *)std::ostream::operator<<();
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (µH)\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"┣ Bl = ", 9);
    uint64_t v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (N/A)\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"┣ Mms = ", 10);
    uint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (g)\n", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"┗ Rms = ", 10);
    unint64_t v19 = (void *)std::ostream::operator<<();
    unint64_t v20 = " (kg/s)\n";
    uint64_t v21 = 8;
  }
  else
  {
    unint64_t v20 = "┗ [DisplacementCalibration not present]\n";
    unint64_t v19 = a2;
    uint64_t v21 = 42;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  if (*(void *)(a1 + 40))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"┏ C₀ = ", 11);
    uint64_t v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" (pF)  ━━━━━  ConvoyCalibration\n", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"┣ Coffset = ", 14);
    uint64_t v24 = (void *)std::ostream::operator<<();
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (pF)\n", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"┣ Cmiunint64_t n = ", 11);
    unint64_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (pF)\n", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"┗ Cmax = ", 11);
    float v28 = (void *)std::ostream::operator<<();
    long long v29 = " (pF)\n";
    uint64_t v30 = 6;
  }
  else
  {
    long long v29 = "┗ [ConvoyCalibration not present]\n";
    float v28 = a2;
    uint64_t v30 = 36;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  return a2;
}

void SpTS::v2::Speaker::~Speaker(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

float SpTS::v2::Speaker::get<float>(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v2 = *a1;
  if (!v2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFNumberRef v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2);
  if (((unint64_t)v3 & 0xFF00000000) == 0) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return *(float *)&v3;
}

void sub_1BB667A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(const __CFDictionary *a1, const UInt8 *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

const void *applesauce::CF::details::at_key<char const*&>(const __CFDictionary *a1, const UInt8 *__s)
{
  CFNumberRef v3 = __s;
  CFIndex v5 = strlen((const char *)__s);
  if (!v3)
  {
    if (a1) {
      goto LABEL_4;
    }
LABEL_7:
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFNumberRef v3 = (const UInt8 *)CFStringCreateWithBytes(0, v3, v5, 0x8000100u, 0);
  if (!v3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!a1) {
    goto LABEL_7;
  }
LABEL_4:
  Value = CFDictionaryGetValue(a1, v3);
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
LABEL_9:
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB667B48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__shared_ptr_pointer<clsp::ConvoyCalibrationProperties  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_pointer<clsp::ConvoyCalibrationProperties  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

BOOL SpTS::v2::Speaker::has<float>(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v2 = *a1;
  if (!v2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return ((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2) & 0xFF00000000) != 0;
}

void sub_1BB667C4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<clsp::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(const __CFDictionary *a1, const UInt8 *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const*&>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<unsigned int,0>(result);
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::ConvoyCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::ConvoyCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AUSpeakerProtectionV3::GetProperty(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, unsigned int a4, CFArrayRef *a5, int *a6)
{
  uint64_t v6 = a5;
  unsigned int v27 = 0;
  if (SimpleMeters::HandleGetProperty((AUSpeakerProtectionV3 *)((char *)this + 1192), a2, a3, a5, &v27, a6))return v27; {
  uint64_t result = 4294956417;
  }
  if (!a3)
  {
    switch(a2)
    {
      case 64001:
      case 64009:
        CFArrayRef SpeakerCalibrationDictionary = AUSpeakerProtectionV3::CreateSpeakerCalibrationDictionary(*((int ***)this + 87), *((int ***)this + 88));
        uint64_t result = 0;
        CFArrayRef *v6 = SpeakerCalibrationDictionary;
        return result;
      case 64002:
        uint64_t result = 0;
        int v13 = *((unsigned __int8 *)this + 532);
        goto LABEL_37;
      case 64003:
        return result;
      case 64004:
        int v13 = *((unsigned __int8 *)this + 533);
        if (*((unsigned char *)this + 533)) {
          int v13 = *((unsigned __int8 *)this + 529);
        }
        goto LABEL_12;
      case 64005:
        if (!*((unsigned char *)this + 776)) {
          return 0;
        }
        unint64_t v14 = (int *)*((void *)this + 94);
        uint64_t v15 = (int *)*((void *)this + 95);
        if (v14 == v15) {
          return 0;
        }
        break;
      case 64006:
        if (!*((unsigned char *)this + 584)) {
          return 0;
        }
        unint64_t v20 = (void *)*((void *)this + 70);
        unint64_t v21 = *((void *)this + 71);
        int v22 = v21 & 0x3F;
        if (v21 <= 0x3F && (v21 & 0x3F) == 0) {
          return 0;
        }
        int v23 = 0;
        uint64_t v24 = &v20[v21 >> 6];
        while (1)
        {
          *(_DWORD *)uint64_t v6 = (*v20 >> v23) & 1;
          uint64_t v6 = (CFArrayRef *)((char *)v6 + 4);
          v20 += v23 == 63;
          if (v23 == 63) {
            int v23 = 0;
          }
          else {
            ++v23;
          }
          if (v23 == v22)
          {
            uint64_t result = 0;
            if (v20 == v24) {
              break;
            }
          }
        }
        return result;
      case 64007:
        uint64_t result = 0;
        int v13 = *((_DWORD *)this + 196);
        goto LABEL_37;
      case 64008:
        AUSpeakerProtectionV3::GetPowerBudgetProperty(&v26, (uint64_t)this);
        CFArrayRef v25 = v26;
        CFArrayRef v26 = 0;
        CFArrayRef *v6 = v25;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v26);
        return 0;
      case 64010:
        memcpy(v6, *((const void **)this + 167), *((void *)this + 168) - *((void *)this + 167));
        return 0;
      default:
        if (a2 == 21)
        {
          int v13 = (*(uint64_t (**)(AUSpeakerProtectionV3 *))(*(void *)this + 576))(this);
LABEL_12:
          uint64_t result = 0;
LABEL_37:
          *(_DWORD *)uint64_t v6 = v13;
        }
        return result;
    }
    do
    {
      int v16 = *v14;
      if (*v14 == 2)
      {
        unsigned int v18 = v14[1];
        if (v18 >= 8) {
          goto LABEL_41;
        }
        unsigned int v10 = v18 + 1934640176;
      }
      else if (v16 == 1)
      {
        unsigned int v19 = v14[1];
        if (v19 >= 8) {
LABEL_41:
        }
          __cxa_rethrow();
        unsigned int v10 = v19 + 1936738608;
      }
      else if (!v16)
      {
        unsigned int v17 = v14[1];
        if (v17 >= 8) {
          goto LABEL_41;
        }
        unsigned int v10 = v17 + 1936741936;
      }
      uint64_t result = 0;
      *(_DWORD *)uint64_t v6 = v10;
      uint64_t v6 = (CFArrayRef *)((char *)v6 + 4);
      v14 += 2;
    }
    while (v14 != v15);
  }
  return result;
}

CFArrayRef AUSpeakerProtectionV3::CreateSpeakerCalibrationDictionary(int **a1, int **a2)
{
  int64x2_t v37 = 0uLL;
  unint64_t v38 = 0;
  if (a1 != a2)
  {
    CFDictionaryRef v2 = a1;
    CFNumberRef v3 = @"f0";
    uint64_t v4 = @"Q";
    CFIndex v5 = @"Rdc";
    uint64_t v6 = @"Tcal";
    uint64_t v7 = @"C0";
    uint64_t v8 = @"Coffset";
    uint64_t v9 = @"Cmin";
    unsigned int v10 = @"Cmax";
    do
    {
      memset(v35, 0, sizeof(v35));
      int v36 = 1065353216;
      CFRetain(v3);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v3);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 3);
      if (cf) {
        CFRelease(cf);
      }
      CFRetain(v4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 2);
      if (cf) {
        CFRelease(cf);
      }
      CFRetain(v5);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2);
      if (cf) {
        CFRelease(cf);
      }
      CFRetain(v6);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *v2 + 1);
      if (cf) {
        CFRelease(cf);
      }
      unint64_t v11 = *v2;
      if (*((void *)*v2 + 3))
      {
        CFRetain(@"Km");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"Km");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *((int **)*v2 + 3));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(@"Le");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"Le");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 3) + 4));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(@"Bl");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"Bl");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 3) + 8));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(@"Mms");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"Mms");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 3) + 12));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(@"Rm");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"Rm");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 3) + 16));
        if (cf) {
          CFRelease(cf);
        }
        unint64_t v11 = *v2;
      }
      if (*((void *)v11 + 5))
      {
        CFRetain(v7);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, *((int **)*v2 + 5));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(v8);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 5) + 4));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(v9);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 5) + 8));
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(v10);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)v35, &cf, &cf, (int *)(*((void *)*v2 + 5) + 12));
        if (cf) {
          CFRelease(cf);
        }
      }
      uint64_t v12 = v6;
      int v13 = v5;
      unint64_t v14 = v4;
      uint64_t v15 = v3;
      int v16 = v10;
      unsigned int v17 = v9;
      unsigned int v18 = v8;
      unsigned int v19 = v7;
      uint64_t v20 = v37.i64[1];
      if (v37.i64[1] >= v38)
      {
        uint64_t v22 = (v37.i64[1] - v37.i64[0]) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = (uint64_t)(v38 - v37.i64[0]) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if (v38 - v37.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        uint64_t v42 = &v38;
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        CFTypeRef cf = (CFTypeRef)v24;
        v40.i64[0] = v24 + 8 * v22;
        v40.i64[1] = v40.i64[0];
        unint64_t v41 = v24 + 8 * v25;
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v40.i64[0], (uint64_t)v35);
        uint64_t v26 = v40.i64[0];
        uint64_t v21 = v40.i64[1] + 8;
        v40.i64[1] += 8;
        unsigned int v27 = (void *)v37.i64[1];
        float v28 = (void *)v37.i64[0];
        if (v37.i64[1] == v37.i64[0])
        {
          int64x2_t v30 = vdupq_n_s64(v37.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v29 = *--v27;
            *(void *)(v26 - 8) = v29;
            v26 -= 8;
            *unsigned int v27 = 0;
          }
          while (v27 != v28);
          int64x2_t v30 = v37;
          uint64_t v21 = v40.i64[1];
        }
        v37.i64[0] = v26;
        v37.i64[1] = v21;
        int64x2_t v40 = v30;
        unint64_t v31 = v38;
        unint64_t v38 = v41;
        unint64_t v41 = v31;
        CFTypeRef cf = (CFTypeRef)v30.i64[0];
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&cf);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v37.i64[1], (uint64_t)v35);
        uint64_t v21 = v20 + 8;
      }
      v37.i64[1] = v21;
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table((uint64_t)v35);
      ++v2;
      uint64_t v7 = v19;
      uint64_t v8 = v18;
      uint64_t v9 = v17;
      unsigned int v10 = v16;
      CFNumberRef v3 = v15;
      uint64_t v4 = v14;
      CFIndex v5 = v13;
      uint64_t v6 = v12;
    }
    while (v2 != a2);
  }
  CFArrayRef v32 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v37);
  CFTypeRef cf = &v37;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
  return v32;
}

void sub_1BB668570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a11 = (void **)&a17;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV3::GetPowerBudgetProperty(CFDictionaryRef *this, uint64_t a2)
{
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  uint64_t v3 = *(void *)(a2 + 992);
  if (*(void *)(a2 + 1000) != v3)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      float v7 = *(float *)(*(void *)(a2 + 968) + 4 * v5);
      float v8 = *(float *)(a2 + 960);
      cpms::TimeScale<float>::getKey(&cf, *(CFTypeRef *)(v3 + 32 * v5));
      p_CFTypeRef cf = &cf;
      *((float *)std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>((uint64_t)v11, &cf, &p_cf)+ 6) = v7 * v8;
      if (cf) {
        CFRelease(cf);
      }
      unint64_t v5 = v6;
      uint64_t v3 = *(void *)(a2 + 992);
      ++v6;
    }
    while (v5 < (*(void *)(a2 + 1000) - v3) >> 5);
  }
  applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>(this, (uint64_t)v11);
  return std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)v11);
}

void sub_1BB668774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>(CFDictionaryRef *a1, uint64_t a2)
{
  int64x2_t v18 = 0uLL;
  v19[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v18, *(void *)(a2 + 24));
  uint64_t v4 = (int *)(a2 + 16);
  while (1)
  {
    uint64_t v4 = *(int **)v4;
    if (!v4) {
      break;
    }
    uint64_t v5 = v18.i64[1];
    if (v18.i64[1] >= v19[0])
    {
      uint64_t v7 = (v18.i64[1] - v18.i64[0]) >> 4;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (v19[0] - v18.i64[0]) >> 3;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if (v19[0] - v18.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      unint64_t v23 = v19;
      if (v9) {
        unsigned int v10 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v19, v9);
      }
      else {
        unsigned int v10 = 0;
      }
      uint64_t v20 = v10;
      v21.i64[0] = (uint64_t)&v10[2 * v7];
      v21.i64[1] = v21.i64[0];
      uint64_t v22 = &v10[2 * v9];
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>(v21.i64[0], *((CFTypeRef *)v4 + 2), v4 + 6);
      uint64_t v11 = v21.i64[0];
      uint64_t v6 = v21.i64[1] + 16;
      v21.i64[1] += 16;
      int v12 = (void *)v18.i64[1];
      int v13 = (void *)v18.i64[0];
      if (v18.i64[1] == v18.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v18.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v14 = *(v12 - 2);
          v12 -= 2;
          *(void *)(v11 - 16) = v14;
          v11 -= 16;
          *int v12 = 0;
          *(void *)(v11 + 8) = v12[1];
          v12[1] = 0;
        }
        while (v12 != v13);
        int64x2_t v15 = v18;
        uint64_t v6 = v21.i64[1];
      }
      v18.i64[0] = v11;
      v18.i64[1] = v6;
      int64x2_t v21 = v15;
      int v16 = (void **)v19[0];
      v19[0] = v22;
      uint64_t v22 = v16;
      uint64_t v20 = (void **)v15.i64[0];
      std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v20);
    }
    else
    {
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>((void *)v18.i64[1], *((CFTypeRef *)v4 + 2), v4 + 6);
      uint64_t v6 = v5 + 16;
    }
    v18.i64[1] = v6;
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v18);
  uint64_t v20 = (void **)&v18;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v20);
  *a1 = CFDictionaryRef;
}

void sub_1BB668940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

CFTypeRef *std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  CFHashCode v8 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 24, a2);
  CFHashCode v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      CFHashCode v3 = v8;
      if (v8 >= v10) {
        CFHashCode v3 = v8 % v10;
      }
    }
    else
    {
      CFHashCode v3 = (v10 - 1) & v8;
    }
    int v13 = *(CFTypeRef ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (CFTypeRef *)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)a2) == kCFCompareEqualTo)return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  int v16 = (void *)(a1 + 16);
  unsigned int v17 = operator new(0x20uLL);
  v40[0] = v17;
  v40[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v9;
  int64x2_t v18 = *a3;
  v17[2] = **a3;
  void *v18 = 0;
  *((_DWORD *)v17 + 6) = 0;
  char v41 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          float v28 = (void *)*v16;
          if (*v16)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v16;
            unint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  unint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_55:
                float v28 = v34;
                unint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v39 = *(void **)a1;
        *(void *)a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        CFHashCode v3 = v9 % v10;
      }
      else {
        CFHashCode v3 = v9;
      }
    }
    else
    {
      CFHashCode v3 = (v10 - 1) & v9;
    }
  }
  int v36 = *(CFTypeRef ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (CFTypeRef *)v40[0];
  if (v36)
  {
    *(void *)v40[0] = *v36;
LABEL_72:
    std::string *v36 = i;
    goto LABEL_73;
  }
  *(void *)v40[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v16;
  if (*i)
  {
    unint64_t v37 = *((void *)*i + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10) {
        v37 %= v10;
      }
    }
    else
    {
      v37 &= v10 - 1;
    }
    int v36 = (CFTypeRef **)(*(void *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
  return i;
}

void sub_1BB668DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      CFHashCode v3 = (const void **)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(v2[2]);
      operator delete(v2);
      CFDictionaryRef v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,float>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,float>,0>(v1[2]);
    }
    operator delete(v1);
  }
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,float const&>(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB668F3C(_Unwind_Exception *a1)
{
  CFHashCode v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>(uint64_t a1, CFTypeRef *a2, void *a3, int *a4)
{
  CFHashCode v9 = (void *)(a1 + 24);
  CFHashCode v10 = std::hash<applesauce::CF::StringRef>::operator()(a1 + 24, a2);
  CFHashCode v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      CFHashCode v4 = v10;
      if (v10 >= v12) {
        CFHashCode v4 = v10 % v12;
      }
    }
    else
    {
      CFHashCode v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(CFTypeRef ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (CFTypeRef *)*i)
      {
        unint64_t v17 = (unint64_t)i[1];
        if (v17 == v11)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)a2) == kCFCompareEqualTo)return; {
        }
          }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  int64x2_t v18 = (void *)(a1 + 16);
  float v19 = operator new(0x20uLL);
  v31[0] = v19;
  v31[1] = a1 + 16;
  char v32 = 0;
  *float v19 = 0;
  v19[1] = v11;
  void v19[2] = *a3;
  *a3 = 0;
  int valuePtr = *a4;
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  void v19[3] = v20;
  if (!v20)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  char v32 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    BOOL v23 = 1;
    if (v12 >= 3) {
      BOOL v23 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v12);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v26);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        CFHashCode v4 = v11 % v12;
      }
      else {
        CFHashCode v4 = v11;
      }
    }
    else
    {
      CFHashCode v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v27 = *(void *)a1;
  float v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *float v19 = *v28;
LABEL_39:
    void *v28 = v19;
    goto LABEL_40;
  }
  *float v19 = *v18;
  void *v18 = v19;
  *(void *)(v27 + 8 * v4) = v18;
  if (*v19)
  {
    unint64_t v29 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12) {
        v29 %= v12;
      }
    }
    else
    {
      v29 &= v12 - 1;
    }
    float v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_39;
  }
LABEL_40:
  v31[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
}

void sub_1BB66922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef *std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>(CFDictionaryRef *a1, uint64_t a2)
{
  int64x2_t v19 = 0uLL;
  v20[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v19, *(void *)(a2 + 24));
  CFHashCode v4 = (const void **)(a2 + 16);
  while (1)
  {
    CFHashCode v4 = (const void **)*v4;
    if (!v4) {
      break;
    }
    if (v19.i64[1] >= v20[0])
    {
      uint64_t v6 = (v19.i64[1] - v19.i64[0]) >> 4;
      if ((unint64_t)(v6 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v7 = (v20[0] - v19.i64[0]) >> 3;
      if (v7 <= v6 + 1) {
        unint64_t v7 = v6 + 1;
      }
      if (v20[0] - v19.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v8 = v7;
      }
      unint64_t v24 = v20;
      if (v8) {
        CFHashCode v9 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v20, v8);
      }
      else {
        CFHashCode v9 = 0;
      }
      CFHashCode v10 = &v9[2 * v6];
      float v21 = v9;
      v22.i64[0] = (uint64_t)v10;
      BOOL v23 = &v9[2 * v8];
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>(v10, v4[2], v4 + 3);
      uint64_t v5 = v10 + 2;
      v22.i64[1] = (uint64_t)(v10 + 2);
      CFHashCode v11 = (void *)v19.i64[1];
      unint64_t v12 = (void *)v19.i64[0];
      uint64_t v13 = v22.i64[0];
      if (v19.i64[1] == v19.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v14 = *(v11 - 2);
          v11 -= 2;
          *(void *)(v13 - 16) = v14;
          v13 -= 16;
          *CFHashCode v11 = 0;
          *(void *)(v13 + 8) = v11[1];
          v11[1] = 0;
        }
        while (v11 != v12);
        int64x2_t v15 = v19;
        uint64_t v5 = (void *)v22.i64[1];
      }
      v19.i64[0] = v13;
      v19.i64[1] = (uint64_t)v5;
      int64x2_t v22 = v15;
      int v16 = (void **)v20[0];
      v20[0] = v23;
      BOOL v23 = v16;
      float v21 = (void **)v15.i64[0];
      std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v21);
    }
    else
    {
      uint64_t v5 = applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>((void *)v19.i64[1], v4[2], v4 + 3)+ 2;
    }
    v19.i64[1] = (uint64_t)v5;
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v19);
  float v21 = (void **)&v19;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v21);
  *a1 = CFDictionaryRef;
  return a1;
}

void sub_1BB66941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table(uint64_t a1)
{
  CFDictionaryRef v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      CFHashCode v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CFDictionaryRef v2 = v3;
    }
    while (v3);
  }
  CFHashCode v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const&,applesauce::CF::NumberRef const&>(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  uint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,applesauce::CF::NumberRef>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t AUSpeakerProtectionV3::GetPropertyInfo(AUSpeakerProtectionV3 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 3007)
  {
    BOOL v8 = 1;
    unsigned int v9 = 4;
    goto LABEL_12;
  }
  if (a2 == 3099)
  {
    if (a3 > 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (uint64_t)(*((void *)this + 150) - *((void *)this + 149)) >> 7;
    }
    if ((a3 & 0xFFFFFFFD) == 0) {
      v7 += (uint64_t)(*((void *)this + 153) - *((void *)this + 152)) >> 7;
    }
    BOOL v8 = 0;
    unsigned int v9 = 16 * v7;
LABEL_12:
    uint64_t result = 0;
    *a5 = v9;
LABEL_13:
    *a6 = v8;
    return result;
  }
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
    case 64003:
    case 64008:
    case 64009:
      uint64_t result = 0;
      *a6 = 1;
      LODWORD(v11) = 8;
      break;
    case 64002:
    case 64004:
    case 64007:
      goto LABEL_17;
    case 64005:
      *a6 = 1;
      if (!*((unsigned char *)this + 776)) {
        goto LABEL_23;
      }
      uint64_t v11 = ((*((void *)this + 95) - *((void *)this + 94)) >> 1) & 0xFFFFFFFCLL;
      goto LABEL_24;
    case 64006:
      *a6 = 1;
      if (*((unsigned char *)this + 584)) {
        LODWORD(v11) = 4 * *((_DWORD *)this + 142);
      }
      else {
LABEL_23:
      }
        LODWORD(v11) = 0;
LABEL_24:
      uint64_t result = 0;
      break;
    case 64010:
      uint64_t result = 0;
      *a5 = (*((_DWORD *)this + 336) - *((_DWORD *)this + 334)) & 0xFFFFFFF8;
      BOOL v8 = 1;
      goto LABEL_13;
    default:
      if (a2 != 21) {
        return 4294956417;
      }
LABEL_17:
      uint64_t result = 0;
      *a6 = 1;
      LODWORD(v11) = 4;
      break;
  }
  *a5 = v11;
  return result;
}

uint64_t AUSpeakerProtectionV3::Reset(AUSpeakerProtectionV3 *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = spp3Subsystem();
  if (v2)
  {
    if (*(unsigned char *)(v2 + 8))
    {
      CFHashCode v3 = *(NSObject **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315394;
          size_t v26 = "AUSpeakerProtectionV3.cpp";
          __int16 v27 = 1024;
          int v28 = 1131;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Reset", buf, 0x12u);
        }
      }
    }
  }
  CFHashCode v4 = (clsp::CLSPKernel_v5 **)*((void *)this + 105);
  uint64_t v5 = (clsp::CLSPKernel_v5 **)*((void *)this + 106);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    v4 += 2;
    clsp::CLSPKernel_v5::Reset(v6);
  }
  SimpleMeters::Reset((uint64_t)this + 1192);
  uint64_t v7 = (clsp::CLSP_Log ***)*((void *)this + 142);
  for (uint64_t i = (clsp::CLSP_Log ***)*((void *)this + 143); v7 != i; v7 += 2)
  {
    uint64_t v9 = spp3Subsystem();
    if (v9)
    {
      if (*(unsigned char *)(v9 + 8))
      {
        CFHashCode v10 = *(NSObject **)v9;
        if (*(void *)v9)
        {
          if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136315394;
            size_t v26 = "AUSpeakerProtectionV3.cpp";
            __int16 v27 = 1024;
            int v28 = 1175;
            _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Flushing a log.", buf, 0x12u);
          }
        }
      }
    }
    uint64_t v11 = *v7;
    unint64_t v12 = **v7;
    if (v12) {
      clsp::CLSP_Log::FlushLog(v12);
    }
    uint64_t v13 = v11[2];
    if (v13) {
      clsp::CLSP_Log::FlushLog(v13);
    }
    uint64_t v14 = v11[4];
    if (v14) {
      clsp::CLSP_Log::FlushLog(v14);
    }
    int64x2_t v15 = v11[6];
    if (v15) {
      clsp::CLSP_Log::FlushLog(v15);
    }
    int v16 = v11[8];
    if (v16) {
      clsp::CLSP_Log::FlushLog(v16);
    }
    unint64_t v17 = v11[10];
    if (v17) {
      clsp::CLSP_Log::FlushLog(v17);
    }
    int64x2_t v18 = v11[12];
    if (v18) {
      clsp::CLSP_Log::FlushLog(v18);
    }
    int64x2_t v19 = v11[14];
    if (v19) {
      clsp::CLSP_Log::FlushLog(v19);
    }
    CFNumberRef v20 = v11[16];
    if (v20) {
      clsp::CLSP_Log::FlushLog(v20);
    }
    float v21 = v11[18];
    if (v21) {
      clsp::CLSP_Log::FlushLog(v21);
    }
    int64x2_t v22 = v11[20];
    if (v22) {
      clsp::CLSP_Log::FlushLog(v22);
    }
    BOOL v23 = v11[22];
    if (v23) {
      clsp::CLSP_Log::FlushLog(v23);
    }
  }
  return 0;
}

OpaqueExtAudioFile *AUSpeakerProtectionV3::Cleanup(AUSpeakerProtectionV3 *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = spp3Subsystem();
  if (v2)
  {
    if (*(unsigned char *)(v2 + 8))
    {
      CFHashCode v3 = *(NSObject **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          int v12 = 136315394;
          uint64_t v13 = "AUSpeakerProtectionV3.cpp";
          __int16 v14 = 1024;
          int v15 = 1114;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Cleanup", (uint8_t *)&v12, 0x12u);
        }
      }
    }
  }
  CFHashCode v4 = (long long *)*((void *)this + 106);
  uint64_t v5 = (long long *)*((void *)this + 105);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v5 + 1;
      if (v5 + 1 == v4)
      {
        uint64_t v7 = v5;
      }
      else
      {
        do
        {
          uint64_t v7 = v6;
          long long v8 = *v6;
          *(void *)uint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 - 1);
          *(v6 - 1) = v8;
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
          uint64_t v6 = v7 + 1;
        }
        while (v7 + 1 != v4);
        CFHashCode v4 = (long long *)*((void *)this + 106);
      }
      while (v4 != v7)
      {
        CFHashCode v10 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        --v4;
      }
      *((void *)this + 106) = v7;
      uint64_t v5 = (long long *)*((void *)this + 105);
      CFHashCode v4 = v7;
    }
    while (v7 != v5);
  }
  *((void *)this + 150) = *((void *)this + 149);
  *((void *)this + 153) = *((void *)this + 152);
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1088));
  CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1104));
  return CAExtAudioFile::Close((AUSpeakerProtectionV3 *)((char *)this + 1120));
}

OpaqueExtAudioFile *CAExtAudioFile::Close(CAExtAudioFile *this)
{
  uint64_t result = (OpaqueExtAudioFile *)*((void *)this + 1);
  if (result)
  {
    *((void *)this + 1) = 0;
    uint64_t v3 = ExtAudioFileDispose(result);
    CFHashCode v4 = *(uint64_t (**)(CAExtAudioFile *, uint64_t, const char *))(*(void *)this + 16);
    return (OpaqueExtAudioFile *)v4(this, v3, "ExtAudioFileClose");
  }
  return result;
}

uint64_t AUSpeakerProtectionV3::Initialize(AUSpeakerProtectionV3 *this)
{
  uint64_t v362 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = spp3Subsystem();
  if (v1)
  {
    if (*(unsigned char *)(v1 + 8))
    {
      uint64_t v2 = *(NSObject **)v1;
      if (*(void *)v1)
      {
        if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::Initialize\n", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v3 = this;
  *((unsigned char *)this + 1184) = 1;
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v3 = this;
  }
  else
  {
    uint64_t v5 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  std::__split_buffer<std::string>::pointer v328 = (AUSpeakerProtectionV3 *)((char *)v3 + 80);
  if (v5 >= 2)
  {
    unsigned int v6 = 1;
    while (1)
    {
      double v7 = *(double *)(ausdk::AUScope::SafeGetElement(v328, v6 - 1) + 80);
      if (v7 != *(double *)(ausdk::AUScope::SafeGetElement(v328, v6) + 80)) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_13;
      }
    }
    size_t v26 = (NSObject **)spp3Subsystem();
    if (v26)
    {
      unint64_t v25 = *v26;
      if (!*v26) {
        return 4294956428;
      }
    }
    else
    {
      unint64_t v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 385;
      __int16 v27 = "%25s:%-5d sample rate of input buses doesn't match";
      goto LABEL_48;
    }
    return 4294956428;
  }
LABEL_13:
  if (v5)
  {
    unsigned int v8 = 0;
    while (1)
    {
      uint64_t v9 = (NSObject **)spp3Subsystem();
      if (!v9) {
        break;
      }
      CFHashCode v10 = *v9;
      if (*v9) {
        goto LABEL_19;
      }
LABEL_24:
      if (v5 == ++v8) {
        goto LABEL_25;
      }
    }
    CFHashCode v10 = MEMORY[0x1E4F14500];
LABEL_19:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement(v328, v8);
      int16x8_t v12 = *(int16x8_t *)(Element + 96);
      *(_OWORD *)std::string buf = *(_OWORD *)(Element + 80);
      *(int16x8_t *)&uint8_t buf[16] = v12;
      uint64_t v348 = *(void *)(Element + 112);
      CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)__p, v12);
      uint64_t v13 = __p;
      if (__p[23] < 0) {
        uint64_t v13 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long v341 = 136315906;
      *(void *)&v341[4] = "AUSpeakerProtectionV3.cpp";
      __int16 v342 = 1024;
      *(_DWORD *)std::string::size_type v343 = 394;
      *(_WORD *)&v343[4] = 1024;
      *(_DWORD *)&v343[6] = v8;
      LOWORD(v344[0]) = 2080;
      *(void *)((char *)v344 + 2) = v13;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmt%u: %s", v341, 0x22u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v14 = ausdk::AUScope::SafeGetElement(v328, 0);
  long long v15 = *(_OWORD *)(v14 + 96);
  long long v337 = *(_OWORD *)(v14 + 80);
  long long v338 = v15;
  uint64_t v339 = *(void *)(v14 + 112);
  uint64_t v16 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV3 *)((char *)this + 128), 0);
  long long v17 = *(_OWORD *)(v16 + 96);
  *(_OWORD *)&v336.mSampleRate = *(_OWORD *)(v16 + 80);
  *(_OWORD *)&v336.mBytesPerPacket = v17;
  *(void *)&v336.mBitsPerChannel = *(void *)(v16 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v337, &v336, v18))
  {
    unint64_t v24 = (NSObject **)spp3Subsystem();
    if (v24)
    {
      unint64_t v25 = *v24;
      if (!*v24) {
        return 4294956428;
      }
    }
    else
    {
      unint64_t v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 402;
      __int16 v27 = "%25s:%-5d Input and output audio formats don't match.";
LABEL_48:
      _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
    }
    return 4294956428;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"com.apple.coreaudio");
  if (!*(void *)buf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>(*(const __CFString **)buf, (uint64_t)v334);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "clsp_logging_level");
  int v19 = GetPreference<long long>((uint64_t *)v334, (uint64_t *)buf);
  char v21 = v20;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (!v21)
  {
    *((_DWORD *)this + 294) = 0;
    goto LABEL_53;
  }
  *((_DWORD *)this + 294) = v19;
  int64x2_t v22 = (NSObject **)spp3Subsystem();
  if (v22)
  {
    BOOL v23 = *v22;
    if (!*v22) {
      goto LABEL_53;
    }
  }
  else
  {
    BOOL v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *((_DWORD *)this + 294);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 411;
    *(_WORD *)&uint8_t buf[18] = 1024;
    *(_DWORD *)&buf[20] = v29;
    _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using defaults write logging level: %d", buf, 0x18u);
  }
LABEL_53:
  uint8x8_t v30 = (NSObject **)spp3Subsystem();
  if (v30)
  {
    unint64_t v31 = *v30;
    if (!*v30) {
      goto LABEL_59;
    }
  }
  else
  {
    unint64_t v31 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *((_DWORD *)this + 294);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 415;
    *(_WORD *)&uint8_t buf[18] = 1024;
    *(_DWORD *)&buf[20] = v32;
    _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Logging level set to: %d", buf, 0x18u);
  }
LABEL_59:
  uint64_t v326 = (void *)((char *)this + 1136);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__clear[abi:ne180100]((uint64_t *)this + 142);
  uint64_t v33 = CFTimeZoneCopySystem();
  uint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v33);
  uint64_t v36 = v35;
  CFRelease(v33);
  unsigned int v37 = this;
  unint64_t v38 = (char *)this + 696;
  std::string::size_type j = (char *)this + 1160;
  *((void *)this + 145) = CurrentGregorianDate;
  *((void *)this + 146) = v36;
  uint64_t v40 = 1;
  *(_DWORD *)std::string buf = this;
  do
  {
    unsigned int v37 = v40 + 1812433253 * (v37 ^ (v37 >> 30));
    *(_DWORD *)&buf[4 * v40++] = v37;
  }
  while (v40 != 624);
  uint64_t v349 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v341);
  *(_DWORD *)&v343[*(void *)(*(void *)&v343[2] - 24) + 10] = *(_DWORD *)&v343[*(void *)(*(void *)&v343[2]
                                                                                              - 24)
                                                                                  + 10] & 0xFFFFFFB5 | 8;
  std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)__p, (uint64_t)buf, 0x40uLL);
  std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)__p);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v344, __p);
  std::string::basic_string(&v333, (const std::string *)__p, 0, 6uLL, (std::allocator<char> *)v361);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (*((unsigned char *)this + 533) && *((unsigned char *)this + 529))
  {
    std::operator+<char>();
    char v41 = std::string::append((std::string *)inPropertyData, "_(closedloop_", 0xDuLL);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    *(void *)&v361[16] = *((void *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)long long v361 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v340, *((_DWORD *)this + 158));
    if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v43 = &v340;
    }
    else {
      unint64_t v43 = (std::string *)v340.__r_.__value_.__r.__words[0];
    }
    if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v340.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v340.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v45 = std::string::append((std::string *)inPropertyData, "_(openloop_", 0xBuLL);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    *(void *)&v361[16] = *((void *)&v45->__r_.__value_.__l + 2);
    *(_OWORD *)long long v361 = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v340, *((_DWORD *)this + 158));
    if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v43 = &v340;
    }
    else {
      unint64_t v43 = (std::string *)v340.__r_.__value_.__r.__words[0];
    }
    if ((v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v340.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v340.__r_.__value_.__l.__size_;
    }
  }
  int v47 = std::string::append((std::string *)v361, (const std::string::value_type *)v43, size);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v47->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  unint64_t v49 = std::string::append((std::string *)__p, "ch)", 3uLL);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  int64_t v332 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v331 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v340.__r_.__value_.__l.__data_);
  }
  if ((v361[23] & 0x80000000) != 0) {
    operator delete(*(void **)v361);
  }
  if ((inPropertyData[23] & 0x80000000) != 0) {
    operator delete(*(void **)inPropertyData);
  }
  BOOL v330 = 0;
  if (!*((unsigned char *)this + 528))
  {
    long long v58 = (NSObject **)spp3Subsystem();
    if (v58)
    {
      uint64_t v59 = *v58;
      if (!*v58)
      {
LABEL_409:
        SimpleMeters::Initialize((AUSpeakerProtectionV3 *)((char *)this + 1192), (const CAStreamBasicDescription *)&v337, (const CAStreamBasicDescription *)&v336);
        if (*((void *)this + 106) == *((void *)this + 105))
        {
LABEL_504:
          BOOL AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"clsp_log_input_stream", @"com.apple.coreaudio", 0);
          if ((AppBooleanValue | CACFPreferencesGetAppBooleanValue(@"clsp_log_output_stream", @"com.apple.coreaudio", 0)) == 1)
          {
            CFStringRef v302 = (const __CFString *)MGGetStringAnswer();
            CFStringGetCStringPtr(v302, 0x8000100u);
            operator new[]();
          }
          applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],unsigned int &>((applesauce::CF::TypeRef *)__p, "sppv3_channel_count", (int *)this + 158);
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&__p[16], "sppv3_sample_rate");
          *(void *)inPropertyData = *((void *)this + 78);
          *(void *)&__p[24] = CFNumberCreate(0, kCFNumberDoubleType, inPropertyData);
          if (!*(void *)&__p[24])
          {
            int v322 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v322, "Could not construct");
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v351, "sppv3_closed_loop_enabled");
          uint64_t v303 = *MEMORY[0x1E4F1CFD0];
          uint64_t v304 = *MEMORY[0x1E4F1CFC8];
          if (*((unsigned char *)this + 533)) {
            uint64_t v305 = *MEMORY[0x1E4F1CFD0];
          }
          else {
            uint64_t v305 = *MEMORY[0x1E4F1CFC8];
          }
          *((void *)&v351 + 1) = v305;
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v352, "sppv3_voice_processor_mode");
          if (*((unsigned char *)this + 532)) {
            uint64_t v306 = v303;
          }
          else {
            uint64_t v306 = v304;
          }
          v352[1] = v306;
          int v307 = *((_DWORD *)this + 84);
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v353, "sppv3_max_frames_per_slice");
          *(_DWORD *)inPropertyData = v307;
          BOOL v354 = CFNumberCreate(0, kCFNumberIntType, inPropertyData);
          if (!v354)
          {
            long long v323 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v323, "Could not construct");
          }
          int v308 = *((unsigned __int8 *)this + 376);
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v355, "sppv3_uses_fixed_block_size");
          if (v308) {
            uint64_t v309 = v303;
          }
          else {
            uint64_t v309 = v304;
          }
          uint64_t v356 = v309;
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v357, "sppv3_uses_closed_loop");
          if (v330) {
            uint64_t v310 = v303;
          }
          else {
            uint64_t v310 = v304;
          }
          v358[0] = v310;
          *(void *)long long v361 = __p;
          *(void *)&v361[8] = 7;
          CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v361);
          double v312 = (uint64_t *)*((void *)this + 167);
          long long v313 = (uint64_t *)*((void *)this + 168);
          uint64_t v314 = AudioStatisticsLibraryLoader(void)::once;
          if (v312 == v313)
          {
            if (AudioStatisticsLibraryLoader(void)::once != -1) {
              dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_22001);
            }
            if (AudioStatisticsLibraryLoader(void)::libSym) {
              AudioStatisticsLibraryLoader(void)::libSym(CFDictionaryRef, 0x10000000, 5);
            }
          }
          else
          {
            do
            {
              uint64_t v315 = *v312;
              if (v314 != -1) {
                dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_22001);
              }
              if (AudioStatisticsLibraryLoader(void)::libSym)
              {
                AudioStatisticsLibraryLoader(void)::libSym(v315, CFDictionaryRef, 0x10000000, 5);
                uint64_t v314 = AudioStatisticsLibraryLoader(void)::once;
              }
              else
              {
                uint64_t v314 = -1;
              }
              ++v312;
            }
            while (v312 != v313);
          }
          if (CFDictionaryRef) {
            CFRelease(CFDictionaryRef);
          }
          for (uint64_t i = 0; i != -14; i -= 2)
          {
            unsigned int v317 = (const void *)v358[i];
            if (v317) {
              CFRelease(v317);
            }
            uint64_t v318 = *(const void **)&v357[i * 8];
            if (v318) {
              CFRelease(v318);
            }
          }
          uint64_t v28 = (*(uint64_t (**)(AUSpeakerProtectionV3 *, void, void))(*(void *)this + 72))(this, 0, 0);
          goto LABEL_541;
        }
        uint64_t v224 = 0;
        while (1)
        {
          std::string v225 = (char *)operator new(0xD8uLL);
          int64_t v226 = v225;
          *((void *)v225 + 1) = 0;
          *((void *)v225 + 2) = 0;
          *(void *)std::string v225 = &unk_1F14BB3E0;
          *(_OWORD *)(v225 + 24) = 0u;
          int64_t v227 = v225 + 24;
          *(_OWORD *)(v225 + 40) = 0u;
          *(_OWORD *)(v225 + 56) = 0u;
          *(_OWORD *)(v225 + 72) = 0u;
          *(_OWORD *)(v225 + 88) = 0u;
          *(_OWORD *)(v225 + 104) = 0u;
          *(_OWORD *)(v225 + 120) = 0u;
          *(_OWORD *)(v225 + 136) = 0u;
          *(_OWORD *)(v225 + 152) = 0u;
          *(_OWORD *)(v225 + 168) = 0u;
          *(_OWORD *)(v225 + 184) = 0u;
          *(_OWORD *)(v225 + 200) = 0u;
          std::string v228 = this;
          std::string v229 = (void *)*((void *)this + 143);
          unint64_t v230 = *((void *)this + 144);
          if ((unint64_t)v229 >= v230) {
            break;
          }
          *std::string v229 = v227;
          v229[1] = v225;
          int64_t v231 = v229 + 2;
          *((void *)this + 143) = v229 + 2;
LABEL_429:
          *((void *)v228 + 143) = v231;
          int v244 = *((_DWORD *)v228 + 294);
          if ((v244 & 4) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            std::string v245 = std::string::insert((std::string *)inPropertyData, 0, "PredDisp_Data_ch", 0x10uLL);
            long long v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v245->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v246;
            v245->__r_.__value_.__l.__size_ = 0;
            v245->__r_.__value_.__r.__words[2] = 0;
            v245->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              int64_t v247 = v331;
            }
            else {
              int64_t v247 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v248 = HIBYTE(v332);
            }
            else {
              std::string::size_type v248 = (std::string::size_type)v331[1];
            }
            std::string v249 = std::string::append((std::string *)v361, (const std::string::value_type *)v247, v248);
            long long v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v249->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v250;
            v249->__r_.__value_.__l.__size_ = 0;
            v249->__r_.__value_.__r.__words[2] = 0;
            v249->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 0x20) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            int64_t v251 = std::string::insert((std::string *)inPropertyData, 0, "PredDispMore_Data_ch", 0x14uLL);
            long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v251->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v252;
            v251->__r_.__value_.__l.__size_ = 0;
            v251->__r_.__value_.__r.__words[2] = 0;
            v251->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              std::string v253 = v331;
            }
            else {
              std::string v253 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v254 = HIBYTE(v332);
            }
            else {
              std::string::size_type v254 = (std::string::size_type)v331[1];
            }
            int64_t v255 = std::string::append((std::string *)v361, (const std::string::value_type *)v253, v254);
            long long v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v255->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v256;
            v255->__r_.__value_.__l.__size_ = 0;
            v255->__r_.__value_.__r.__words[2] = 0;
            v255->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 8) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            std::string v257 = std::string::insert((std::string *)inPropertyData, 0, "Reb_Data_ch", 0xBuLL);
            long long v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v257->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v258;
            v257->__r_.__value_.__l.__size_ = 0;
            v257->__r_.__value_.__r.__words[2] = 0;
            v257->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              std::string v259 = v331;
            }
            else {
              std::string v259 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v260 = HIBYTE(v332);
            }
            else {
              std::string::size_type v260 = (std::string::size_type)v331[1];
            }
            long long v261 = std::string::append((std::string *)v361, (const std::string::value_type *)v259, v260);
            long long v262 = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v261->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v262;
            v261->__r_.__value_.__l.__size_ = 0;
            v261->__r_.__value_.__r.__words[2] = 0;
            v261->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 0x10) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            long long v263 = std::string::insert((std::string *)inPropertyData, 0, "CoeffLog_ch", 0xBuLL);
            long long v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v263->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v264;
            v263->__r_.__value_.__l.__size_ = 0;
            v263->__r_.__value_.__r.__words[2] = 0;
            v263->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              long long v265 = v331;
            }
            else {
              long long v265 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v266 = HIBYTE(v332);
            }
            else {
              std::string::size_type v266 = (std::string::size_type)v331[1];
            }
            float v267 = std::string::append((std::string *)v361, (const std::string::value_type *)v265, v266);
            long long v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v267->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v268;
            v267->__r_.__value_.__l.__size_ = 0;
            v267->__r_.__value_.__r.__words[2] = 0;
            v267->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 2) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            uint64_t v269 = std::string::insert((std::string *)inPropertyData, 0, "T_Coil_ch", 9uLL);
            long long v270 = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v269->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v270;
            v269->__r_.__value_.__l.__size_ = 0;
            v269->__r_.__value_.__r.__words[2] = 0;
            v269->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              std::string::size_type v271 = v331;
            }
            else {
              std::string::size_type v271 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v272 = HIBYTE(v332);
            }
            else {
              std::string::size_type v272 = (std::string::size_type)v331[1];
            }
            long long v273 = std::string::append((std::string *)v361, (const std::string::value_type *)v271, v272);
            long long v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v273->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v274;
            v273->__r_.__value_.__l.__size_ = 0;
            v273->__r_.__value_.__r.__words[2] = 0;
            v273->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if (v244)
          {
            std::to_string((std::string *)inPropertyData, v224);
            long long v275 = std::string::insert((std::string *)inPropertyData, 0, "I_Data_ch", 9uLL);
            long long v276 = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v275->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v276;
            v275->__r_.__value_.__l.__size_ = 0;
            v275->__r_.__value_.__r.__words[2] = 0;
            v275->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              long long v277 = v331;
            }
            else {
              long long v277 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v278 = HIBYTE(v332);
            }
            else {
              std::string::size_type v278 = (std::string::size_type)v331[1];
            }
            float v279 = std::string::append((std::string *)v361, (const std::string::value_type *)v277, v278);
            long long v280 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v279->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v280;
            v279->__r_.__value_.__l.__size_ = 0;
            v279->__r_.__value_.__r.__words[2] = 0;
            v279->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 0x40) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            uint64_t v281 = std::string::insert((std::string *)inPropertyData, 0, "Convoy_Data_ch", 0xEuLL);
            long long v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v281->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v282;
            v281->__r_.__value_.__l.__size_ = 0;
            v281->__r_.__value_.__r.__words[2] = 0;
            v281->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              std::string::size_type v283 = v331;
            }
            else {
              std::string::size_type v283 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v284 = HIBYTE(v332);
            }
            else {
              std::string::size_type v284 = (std::string::size_type)v331[1];
            }
            long long v285 = std::string::append((std::string *)v361, (const std::string::value_type *)v283, v284);
            long long v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v285->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v286;
            v285->__r_.__value_.__l.__size_ = 0;
            v285->__r_.__value_.__r.__words[2] = 0;
            v285->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          if ((v244 & 0x80) != 0)
          {
            std::to_string((std::string *)inPropertyData, v224);
            long long v287 = std::string::insert((std::string *)inPropertyData, 0, "Convoy_CapData_ch", 0x11uLL);
            long long v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
            *(void *)&v361[16] = *((void *)&v287->__r_.__value_.__l + 2);
            *(_OWORD *)long long v361 = v288;
            v287->__r_.__value_.__l.__size_ = 0;
            v287->__r_.__value_.__r.__words[2] = 0;
            v287->__r_.__value_.__r.__words[0] = 0;
            if (v332 >= 0) {
              long long v289 = v331;
            }
            else {
              long long v289 = (void **)v331[0];
            }
            if (v332 >= 0) {
              std::string::size_type v290 = HIBYTE(v332);
            }
            else {
              std::string::size_type v290 = (std::string::size_type)v331[1];
            }
            uint64_t v291 = std::string::append((std::string *)v361, (const std::string::value_type *)v289, v290);
            long long v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v291->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v292;
            v291->__r_.__value_.__l.__size_ = 0;
            v291->__r_.__value_.__r.__words[2] = 0;
            v291->__r_.__value_.__r.__words[0] = 0;
            std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>((uint64_t)&v340, (uint64_t)__p, (uint64_t)j);
          }
          uint64_t v293 = *(void *)(*((void *)this + 105) + 16 * v224);
          uint64_t v294 = *((void *)this + 143);
          uint64_t v296 = *(void *)(v294 - 16);
          uint64_t v295 = *(void *)(v294 - 8);
          if (v295) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v295 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v293 + 1080) = v296;
          long long v297 = *(std::__shared_weak_count **)(v293 + 1088);
          *(void *)(v293 + 1088) = v295;
          if (v297) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v297);
          }
          (*(void (**)(void, uint64_t))(**(void **)(v293 + 424) + 256))(*(void *)(v293 + 424), v293 + 1080);
          uint64_t v298 = *(void *)(v293 + 1080);
          uint64_t v299 = *(void *)(v293 + 1088);
          if (v299) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v299 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v293 + 760) = v298;
          unint64_t v300 = *(std::__shared_weak_count **)(v293 + 768);
          *(void *)(v293 + 768) = v299;
          if (v300) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v300);
          }
          if (++v224 >= (unint64_t)((uint64_t)(*((void *)this + 106) - *((void *)this + 105)) >> 4)) {
            goto LABEL_504;
          }
        }
        std::string v232 = j;
        std::string v233 = (void *)*v326;
        uint64_t v234 = ((uint64_t)v229 - *v326) >> 4;
        unint64_t v235 = v234 + 1;
        if ((unint64_t)(v234 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v236 = v230 - (void)v233;
        if (v236 >> 3 > v235) {
          unint64_t v235 = v236 >> 3;
        }
        if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v237 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v237 = v235;
        }
        if (v237 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int64_t v238 = (char *)operator new(16 * v237);
        int64_t v239 = &v238[16 * v234];
        std::string v240 = &v238[16 * v237];
        *(void *)int64_t v239 = v227;
        *((void *)v239 + 1) = v226;
        int64_t v231 = v239 + 16;
        if (v229 == v233)
        {
          *((void *)this + 142) = v239;
          *((void *)this + 143) = v231;
          *((void *)this + 144) = v240;
          std::string::size_type j = v232;
          if (!v229) {
            goto LABEL_428;
          }
        }
        else
        {
          do
          {
            long long v241 = *((_OWORD *)v229 - 1);
            v229 -= 2;
            *((_OWORD *)v239 - 1) = v241;
            v239 -= 16;
            *std::string v229 = 0;
            v229[1] = 0;
          }
          while (v229 != v233);
          std::string v229 = (void *)*((void *)this + 142);
          int64_t v242 = (void *)*((void *)this + 143);
          *((void *)this + 142) = v239;
          *((void *)this + 143) = v231;
          *((void *)this + 144) = v240;
          for (std::string::size_type j = v232; v242 != v229; v242 -= 2)
          {
            int64_t v243 = (std::__shared_weak_count *)*(v242 - 1);
            if (v243) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v243);
            }
          }
          if (!v229) {
            goto LABEL_428;
          }
        }
        operator delete(v229);
LABEL_428:
        std::string v228 = this;
        goto LABEL_429;
      }
    }
    else
    {
      uint64_t v59 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 720;
      _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create kernels, because no plist has been successfully applied. (You must set a plist and re-initialize, or we will apply 20dB of attenuation during processing.)", __p, 0x12u);
    }
    goto LABEL_409;
  }
  uint64_t v51 = *((unsigned int *)this + 158);
  if (HIDWORD(v338) > v51)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Audio input bus channel-count (", 31);
    float v52 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)") is greater than the number of channels configured by the plist (", 66);
    long long v53 = (void *)std::ostream::operator<<();
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"). Cannot initialize.", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    unint64_t v55 = std::locale::use_facet((const std::locale *)v361, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale((std::locale *)v361);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v56 = (NSObject **)spp3Subsystem();
    if (v56)
    {
      uint64_t v57 = *v56;
      if (!*v56) {
        goto LABEL_188;
      }
    }
    else
    {
      uint64_t v57 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[8], inPropertyData);
      if (inPropertyData[23] >= 0) {
        unint64_t v80 = inPropertyData;
      }
      else {
        unint64_t v80 = *(unsigned char **)inPropertyData;
      }
      *(_DWORD *)long long v361 = 136315650;
      *(void *)&v361[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v361[12] = 1024;
      *(_DWORD *)&v361[14] = 457;
      *(_WORD *)&v361[18] = 2080;
      *(void *)&v361[20] = v80;
      goto LABEL_186;
    }
    goto LABEL_188;
  }
  if (!*((unsigned char *)this + 776))
  {
    unint64_t v75 = (2 * v51);
    if (v75)
    {
      uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v75);
      uint64_t v78 = (uint64_t *)&v76[8 * v77];
      int64x2_t v79 = vdupq_n_s64((unint64_t)v76);
    }
    else
    {
      uint64_t v78 = 0;
      int64x2_t v79 = 0uLL;
    }
    int64x2_t v327 = v79;
    if (v51)
    {
      uint64_t v92 = 0;
      uint64_t v93 = (uint64_t *)v79.i64[1];
      do
      {
        if (v93 >= v78)
        {
          double v95 = (void *)v327.i64[0];
          uint64_t v96 = ((uint64_t)v93 - v327.i64[0]) >> 3;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if (((uint64_t)v78 - v327.i64[0]) >> 2 > v97) {
            unint64_t v97 = ((uint64_t)v78 - v327.i64[0]) >> 2;
          }
          if ((unint64_t)v78 - v327.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v97;
          }
          if (v98) {
            unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v98);
          }
          else {
            uint64_t v99 = 0;
          }
          uint64_t v100 = (void *)(v98 + 8 * v96);
          *uint64_t v100 = v92 << 32;
          long long v94 = v100 + 1;
          for (uint64_t k = v327.i64[1]; k != v327.i64[0]; k -= 8)
          {
            uint64_t v102 = *(void *)(k - 8);
            *--uint64_t v100 = v102;
          }
          uint64_t v78 = (uint64_t *)(v98 + 8 * v99);
          v327.i64[0] = (uint64_t)v100;
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          *uint64_t v93 = v92 << 32;
          long long v94 = v93 + 1;
        }
        uint64_t v324 = v327.i64[0];
        if (v94 >= v78)
        {
          std::string::size_type v103 = (uint64_t *)v327.i64[0];
          uint64_t v104 = ((uint64_t)v94 - v327.i64[0]) >> 3;
          unint64_t v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if (((uint64_t)v78 - v327.i64[0]) >> 2 > v105) {
            unint64_t v105 = ((uint64_t)v78 - v327.i64[0]) >> 2;
          }
          if ((unint64_t)v78 - v327.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v106 = v105;
          }
          if (v106) {
            unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v106);
          }
          else {
            uint64_t v107 = 0;
          }
          long long v108 = (uint64_t *)(v106 + 8 * v104);
          uint64_t v78 = (uint64_t *)(v106 + 8 * v107);
          uint64_t *v108 = (v92 << 32) | 1;
          uint64_t v93 = v108 + 1;
          if (v94 == (uint64_t *)v327.i64[0])
          {
            v79.i64[0] = (uint64_t)v108;
            std::string::size_type v103 = v94;
          }
          else
          {
            do
            {
              uint64_t v109 = *--v94;
              *--long long v108 = v109;
            }
            while (v94 != (uint64_t *)v327.i64[0]);
            v79.i64[0] = (uint64_t)v108;
            if (!v327.i64[0]) {
              goto LABEL_166;
            }
          }
          uint64_t v324 = v79.i64[0];
          operator delete(v103);
        }
        else
        {
          *long long v94 = (v92 << 32) | 1;
          uint64_t v93 = v94 + 1;
        }
        v79.i64[0] = v324;
LABEL_166:
        v79.i64[1] = (uint64_t)v93;
        ++v92;
        int64x2_t v327 = v79;
      }
      while (v92 != v51);
    }
    unint64_t v38 = (char *)this + 696;
    uint64_t v111 = (int64x2_t *)((char *)this + 728);
    long long v110 = (void *)*((void *)this + 91);
    if (v110)
    {
      *((void *)this + 92) = v110;
      *(int64x2_t *)long long v325 = v79;
      operator delete(v110);
      int64x2_t v79 = *(int64x2_t *)v325;
      v111->i64[0] = 0;
      *((void *)this + 92) = 0;
      *((void *)this + 93) = 0;
    }
    int64x2_t *v111 = v79;
    *((void *)this + 93) = v78;
    uint64_t v112 = (NSObject **)spp3Subsystem();
    if (v112)
    {
      uint64_t v113 = *v112;
      if (!*v112) {
        goto LABEL_175;
      }
    }
    else
    {
      uint64_t v113 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 488;
      _os_log_impl(&dword_1BB0CE000, v113, OS_LOG_TYPE_INFO, "%25s:%-5d Speaker telemetry data order not provided from property; assuming the default layout.",
        __p,
        0x12u);
    }
LABEL_175:
    if (*((_DWORD *)this + 158) != 2 || *((_DWORD *)this + 180) != 2) {
      goto LABEL_201;
    }
    std::string::size_type v114 = (NSObject **)spp3Subsystem();
    if (v114)
    {
      unint64_t v115 = *v114;
      if (!*v114)
      {
LABEL_200:
        *(void *)std::string __p = 0x100000002;
        std::vector<clsp::telemetry::Item>::push_back[abi:ne180100]((void **)this + 91, __p);
        goto LABEL_201;
      }
    }
    else
    {
      unint64_t v115 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 492;
      _os_log_impl(&dword_1BB0CE000, v115, OS_LOG_TYPE_INFO, "%25s:%-5d kConvoyExpect5Streams is signalled; adding the Convoy PDM signal to the layout.",
        __p,
        0x12u);
    }
    goto LABEL_200;
  }
  uint64_t v60 = *((void *)this + 95);
  uint64_t v61 = *((void *)this + 94);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v328, 1u) + 108) == (v60 - v61) >> 3)
  {
    unint64_t v62 = (char *)*((void *)this + 94);
    uint64_t v63 = (char *)*((void *)this + 95);
    unint64_t v64 = (v63 - v62) >> 3;
    uint64_t v65 = *((void *)this + 93);
    uint64_t v66 = (char *)*((void *)this + 91);
    if (v64 <= (v65 - (uint64_t)v66) >> 3)
    {
      unint64_t v70 = (void *)((char *)this + 736);
      long long v71 = (char *)*((void *)this + 92);
      unint64_t v86 = (v71 - v66) >> 3;
      if (v86 >= v64)
      {
        uint64_t v117 = (char *)*((void *)this + 91);
        while (v62 != v63)
        {
          uint64_t v118 = *(void *)v62;
          v62 += 8;
          *(void *)uint64_t v117 = v118;
          v117 += 8;
        }
        unint64_t v74 = (char *)(v117 - v66);
        long long v71 = v66;
      }
      else
      {
        uint64_t v87 = &v62[8 * v86];
        if (v71 != v66)
        {
          uint64_t v88 = 8 * v86;
          do
          {
            uint64_t v89 = *(void *)v62;
            v62 += 8;
            *(void *)uint64_t v66 = v89;
            v66 += 8;
            v88 -= 8;
          }
          while (v88);
        }
        std::string::size_type v90 = v71;
        while (v87 != v63)
        {
          uint64_t v91 = *(void *)v87;
          v87 += 8;
          *(void *)std::string::size_type v90 = v91;
          v90 += 8;
        }
        unint64_t v74 = (char *)(v90 - v71);
      }
    }
    else
    {
      unint64_t v67 = (void *)((char *)this + 728);
      if (v66)
      {
        *((void *)this + 92) = v66;
        operator delete(v66);
        uint64_t v65 = 0;
        void *v67 = 0;
        *((void *)this + 92) = 0;
        *((void *)this + 93) = 0;
      }
      if (v63 - v62 < 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v68 = v65 >> 2;
      if (v65 >> 2 <= v64) {
        uint64_t v68 = (v63 - v62) >> 3;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v68;
      }
      std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](v67, v69);
      unint64_t v70 = (void *)((char *)this + 736);
      long long v71 = (char *)*((void *)this + 92);
      uint64_t v72 = v71;
      if (v62 != v63)
      {
        uint64_t v72 = (char *)*((void *)this + 92);
        do
        {
          uint64_t v73 = *(void *)v62;
          v62 += 8;
          *(void *)uint64_t v72 = v73;
          v72 += 8;
        }
        while (v62 != v63);
      }
      unint64_t v74 = (char *)(v72 - v71);
    }
    *unint64_t v70 = &v74[(void)v71];
LABEL_201:
    float v119 = (NSObject **)spp3Subsystem();
    if (v119)
    {
      long long v120 = *v119;
      if (!*v119)
      {
LABEL_211:
        unint64_t v122 = v38;
        unsigned int v123 = *((_DWORD *)this + 158);
        if (*((void *)this + 133) != *((void *)this + 134))
        {
          uint64_t v124 = this;
          if (v123)
          {
            uint64_t v125 = 0;
            unint64_t v126 = 0;
            do
            {
              unint64_t v127 = (const char *)(*((void *)v124 + 133) + v125);
              if (v127[23] < 0) {
                unint64_t v127 = *(const char **)v127;
              }
              CFStringRef v128 = CFStringCreateWithCString(0, v127, 0x8000100u);
              uint64_t v129 = ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v126);
              ausdk::Owned<__CFString const*>::operator=((const void **)(v129 + 72), v128);
              CFRelease(v128);
              ++v126;
              uint64_t v124 = this;
              v125 += 24;
            }
            while (v126 < *((unsigned int *)this + 158));
          }
LABEL_237:
          if (*((void *)v124 + 130) != *((void *)v124 + 131))
          {
            uint64_t v137 = (NSObject **)spp3Subsystem();
            std::string::size_type v138 = v122;
            if (v137)
            {
              uint64_t v139 = *v137;
              if (!*v137)
              {
LABEL_251:
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 1016, *((char **)this + 130), *((void *)this + 131), (uint64_t)(*((void *)this + 131) - *((void *)this + 130)) >> 2);
                goto LABEL_256;
              }
            }
            else
            {
              uint64_t v139 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
            {
              *(void *)inPropertyData = *((void *)this + 130);
              v340.__r_.__value_.__r.__words[0] = *((void *)this + 131);
              clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::string *)v361, (unsigned int **)inPropertyData, &v340);
              std::string::size_type v142 = v361[23] >= 0 ? v361 : *(unsigned char **)v361;
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 523;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v142;
              _os_log_impl(&dword_1BB0CE000, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using speaker gain-link grouping from the plist: [ %s ]", __p, 0x1Cu);
              if ((v361[23] & 0x80000000) != 0) {
                operator delete(*(void **)v361);
              }
            }
            goto LABEL_251;
          }
          long long v140 = (NSObject **)spp3Subsystem();
          std::string::size_type v138 = v122;
          if (v140)
          {
            uint64_t v141 = *v140;
            if (!*v140)
            {
LABEL_255:
              std::vector<unsigned int>::size_type v143 = *((unsigned int *)this + 158);
              *(_DWORD *)std::string __p = 0;
              std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 1016), v143, (std::vector<unsigned int>::const_reference)__p);
LABEL_256:
              long long v144 = (unsigned int *)*((void *)this + 127);
              uint64_t v145 = (unsigned int *)*((void *)this + 128);
              if (v144 == v145)
              {
                std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
              }
              else
              {
                long long v146 = v144 + 1;
                std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                if (v144 + 1 != v145)
                {
                  unsigned int v148 = *v144;
                  long long v149 = v144 + 1;
                  do
                  {
                    unsigned int v151 = *v149++;
                    unsigned int v150 = v151;
                    BOOL v152 = v148 >= v151;
                    if (v148 <= v151) {
                      unsigned int v148 = v150;
                    }
                    if (!v152) {
                      long long v144 = v146;
                    }
                    long long v146 = v149;
                  }
                  while (v149 != v145);
                }
              }
              long long v153 = (void *)*((void *)this + 109);
              long long v154 = (void *)*((void *)this + 108);
              if (v153 == v154)
              {
                long long v155 = this;
              }
              else
              {
                do
                {
                  v153 -= 3;
                  *(void *)std::string __p = v153;
                  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                }
                while (v153 != v154);
                long long v155 = this;
                uint64_t v145 = (unsigned int *)*((void *)this + 128);
              }
              *((void *)v155 + 109) = v154;
              if (v144 != v145)
              {
                unint64_t v156 = *v144 + 1;
                long long v157 = (void *)*((void *)this + 108);
                unint64_t v158 = 0xAAAAAAAAAAAAAAABLL * (v154 - v157);
                unint64_t v159 = v156 - v158;
                if (v156 <= v158)
                {
                  std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                  if (v156 < v158)
                  {
                    std::string::size_type v171 = &v157[3 * v156];
                    while (v154 != v171)
                    {
                      v154 -= 3;
                      *(void *)std::string __p = v154;
                      std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                    }
                    *((void *)this + 109) = v171;
                  }
                }
                else
                {
                  uint64_t v160 = *((void *)this + 110);
                  if (0xAAAAAAAAAAAAAAABLL * ((v160 - (uint64_t)v154) >> 3) >= v159)
                  {
                    bzero(v154, 24 * ((24 * v159 - 24) / 0x18) + 24);
                    *((void *)this + 109) = &v154[3 * ((24 * v159 - 24) / 0x18) + 3];
                    std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                  }
                  else
                  {
                    unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((v160 - (uint64_t)v157) >> 3);
                    unint64_t v162 = 0x5555555555555556 * ((v160 - (uint64_t)v157) >> 3);
                    if (v162 > v156) {
                      unint64_t v156 = v162;
                    }
                    if (v161 >= 0x555555555555555) {
                      unint64_t v163 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v163 = v156;
                    }
                    if (v163 > 0xAAAAAAAAAAAAAAALL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    std::string::size_type v164 = (char *)operator new(24 * v163);
                    long long v165 = &v164[8 * (v154 - v157)];
                    long long v166 = &v164[24 * v163];
                    size_t v167 = 24 * ((24 * v159 - 24) / 0x18) + 24;
                    bzero(v165, v167);
                    std::string::size_type v168 = &v165[v167];
                    if (v154 == v157)
                    {
                      *((void *)this + 108) = v165;
                      *((void *)this + 109) = v168;
                      *((void *)this + 110) = v166;
                      std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                    }
                    else
                    {
                      do
                      {
                        *((void *)v165 - 3) = 0;
                        *((void *)v165 - 2) = 0;
                        v165 -= 24;
                        *((void *)v165 + 2) = 0;
                        long long v169 = *(_OWORD *)(v154 - 3);
                        v154 -= 3;
                        *(_OWORD *)long long v165 = v169;
                        *((void *)v165 + 2) = v154[2];
                        *long long v154 = 0;
                        v154[1] = 0;
                        v154[2] = 0;
                      }
                      while (v154 != v157);
                      long long v170 = (void *)*((void *)this + 108);
                      long long v154 = (void *)*((void *)this + 109);
                      *((void *)this + 108) = v165;
                      *((void *)this + 109) = v168;
                      *((void *)this + 110) = v166;
                      std::__split_buffer<std::string>::pointer v147 = (AUSpeakerProtectionV3 *)((char *)this + 128);
                      if (v154 != v170)
                      {
                        do
                        {
                          v154 -= 3;
                          *(void *)std::string __p = v154;
                          std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                        }
                        while (v154 != v170);
                        long long v154 = v170;
                      }
                    }
                    if (v154) {
                      operator delete(v154);
                    }
                  }
                }
              }
              std::string::size_type v172 = (PlatformUtilities_iOS *)ausdk::AUScope::SafeGetElement(v147, 0);
              *((void *)this + 78) = *((void *)v172 + 10);
              if (!*((unsigned char *)this + 533)
                || ((int ProductType = PlatformUtilities_iOS::GetProductType(v172), (ProductType - 24) > 0x3C)
                 || ((1 << (ProductType - 24)) & 0x186300000040001BLL) == 0)
                && ((ProductType - 87) > 0x26
                 || ((1 << (ProductType - 87)) & 0x4000000603) == 0))
              {
                std::string::size_type v176 = (NSObject **)spp3Subsystem();
                if (v176)
                {
                  std::string::size_type v175 = *v176;
                  if (!*v176) {
                    goto LABEL_373;
                  }
                }
                else
                {
                  std::string::size_type v175 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_373;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 636;
                std::string::size_type v179 = "%25s:%-5d We are all-open loop, or this device does not use SpTS for speaker calibration. MG not queried.";
                goto LABEL_351;
              }
              if (*((unsigned char *)this + 1328)
                && *((_DWORD *)this + 158) == (uint64_t)(*((void *)this + 88) - *((void *)this + 87)) >> 3)
              {
                long long v174 = (NSObject **)spp3Subsystem();
                if (v174)
                {
                  std::string::size_type v175 = *v174;
                  if (!*v174) {
                    goto LABEL_373;
                  }
                }
                else
                {
                  std::string::size_type v175 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_373;
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 574;
                std::string::size_type v179 = "%25s:%-5d This device uses SpTS for speaker calibration, but it has already been applied. Omittin"
                       "g another application.\n";
LABEL_351:
                _os_log_impl(&dword_1BB0CE000, v175, OS_LOG_TYPE_DEBUG, v179, __p, 0x12u);
                goto LABEL_373;
              }
              long long v177 = (NSObject **)spp3Subsystem();
              if (v177)
              {
                long long v178 = *v177;
                if (!*v177) {
                  goto LABEL_315;
                }
              }
              else
              {
                long long v178 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 578;
                _os_log_impl(&dword_1BB0CE000, v178, OS_LOG_TYPE_DEBUG, "%25s:%-5d This device uses SpTS for speaker calibration, and it has not been applied yet. Will attempt to fetch it.\n", __p, 0x12u);
              }
LABEL_315:
              if (*((void *)this + 87) == *((void *)this + 88)) {
                goto LABEL_330;
              }
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"mSpeakerCalProps is not empty as expected. Instead, it already contains ", 72);
              std::string::size_type v180 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)" entries:\n", 10);
              if (*((void *)this + 88) != *((void *)this + 87))
              {
                unint64_t v181 = 0;
                do
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Speaker ", 8);
                  long long v182 = (void *)std::ostream::operator<<();
                  std::string::size_type v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"\n", 1);
                  clsp::SpeakerCalibrationProperties::dump(*(void *)(*v138 + 8 * v181), v183);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"\n", 1);
                  ++v181;
                }
                while (v181 < (uint64_t)(*((void *)this + 88) - *((void *)this + 87)) >> 3);
              }
              std::string::size_type v184 = (NSObject **)spp3Subsystem();
              if (v184)
              {
                long long v185 = *v184;
                if (!*v184)
                {
LABEL_329:
                  std::ostringstream::~ostringstream((uint64_t)__p);
LABEL_330:
                  FetchAndInterpretSpTS((uint64_t)v361);
                  if (v361[24])
                  {
                    if (*((_DWORD *)this + 158) == (uint64_t)(*(void *)&v361[8] - *(void *)v361) >> 3)
                    {
                      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpTS key contained ", 19);
                      std::string::size_type v187 = (void *)std::ostream::operator<<();
                      std::string::size_type v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)", as expected.", 14);
                      std::endl[abi:ne180100]<char,std::char_traits<char>>(v188);
                      uint64_t v189 = spp3Subsystem();
                      if (v189)
                      {
                        if (*(unsigned char *)(v189 + 8))
                        {
                          long long v190 = *(NSObject **)v189;
                          if (*(void *)v189)
                          {
                            if (os_log_type_enabled(*(os_log_t *)v189, OS_LOG_TYPE_DEBUG))
                            {
                              std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[8], &v340);
                              std::string::size_type v191 = (v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? &v340
                                   : (std::string *)v340.__r_.__value_.__r.__words[0];
                              *(_DWORD *)inPropertyData = 136315650;
                              *(void *)&inPropertyData[4] = "AUSpeakerProtectionV3.cpp";
                              *(_WORD *)&inPropertyData[12] = 1024;
                              *(_DWORD *)&inPropertyData[14] = 620;
                              *(_WORD *)&inPropertyData[18] = 2080;
                              *(void *)&inPropertyData[20] = v191;
                              _os_log_impl(&dword_1BB0CE000, v190, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", inPropertyData, 0x1Cu);
                              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v340.__r_.__value_.__l.__data_);
                              }
                            }
                          }
                        }
                      }
                      std::ostringstream::~ostringstream((uint64_t)__p);
                      std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__vdeallocate(v138);
                      *(_OWORD *)std::string::size_type v138 = *(_OWORD *)v361;
                      *((void *)this + 89) = *(void *)&v361[16];
                      memset(v361, 0, 24);
                      char v192 = 1;
                      *((unsigned char *)this + 1328) = 1;
                      uint64_t v28 = 4294956428;
LABEL_370:
                      if (v361[24])
                      {
                        *(void *)std::string __p = v361;
                        std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      }
                      if ((v192 & 1) == 0) {
                        goto LABEL_541;
                      }
LABEL_373:
                      if (*((unsigned char *)this + 1329))
                      {
                        std::string::size_type v204 = (NSObject **)spp3Subsystem();
                        if (v204)
                        {
                          uint64_t v205 = *v204;
                          if (!*v204)
                          {
LABEL_383:
                            unint64_t v208 = *((unsigned int *)this + 158);
                            int v209 = *((_DWORD *)this + 196);
                            clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance();
                            if (byte_1E9F7FD10)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v208);
                              byte_1E9F7FD10 = 0;
                            }
                            if (v209 == 2)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v208);
                              uint64_t v212 = clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                              for (uint64_t m = qword_1E9F7FD00; v212 != m; v212 += 24)
                              {
                                *(_OWORD *)(v212 + 4) = xmmword_1BB875840;
                                *(_DWORD *)(v212 + 20) = 1065353216;
                                *(unsigned char *)uint64_t v212 = 1;
                              }
                            }
                            else if (v209 == 1)
                            {
                              std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst, v208);
                              int64_t v210 = (unsigned char *)clsp::ThermalStateVector_v3_separate<clsp::CL>::TheInstance(void)::inst;
                              uint64_t v211 = qword_1E9F7FD00;
                              while (v210 != (unsigned char *)v211)
                              {
                                unsigned char *v210 = 0;
                                v210 += 24;
                              }
                            }
                            goto LABEL_405;
                          }
                        }
                        else
                        {
                          uint64_t v205 = MEMORY[0x1E4F14500];
                        }
                        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)std::string __p = 136315394;
                          *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = 640;
                          _os_log_impl(&dword_1BB0CE000, v205, OS_LOG_TYPE_DEBUG, "%25s:%-5d This instance is ideally closed-loop; setting up the closed-loop ThermalStateVector_v3.",
                            __p,
                            0x12u);
                        }
                        goto LABEL_383;
                      }
                      long long v206 = (NSObject **)spp3Subsystem();
                      if (v206)
                      {
                        std::string v207 = *v206;
                        if (!*v206)
                        {
LABEL_396:
                          unint64_t v214 = *((unsigned int *)this + 158);
                          int v215 = *((_DWORD *)this + 196);
                          clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance();
                          if (byte_1E9F7FD40)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v214);
                            byte_1E9F7FD40 = 0;
                          }
                          if (v215 == 2)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v214);
                            uint64_t v218 = clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
                            for (uint64_t n = qword_1E9F7FD30; v218 != n; v218 += 24)
                            {
                              *(_OWORD *)(v218 + 4) = xmmword_1BB875840;
                              *(_DWORD *)(v218 + 20) = 1065353216;
                              *(unsigned char *)uint64_t v218 = 1;
                            }
                          }
                          else if (v215 == 1)
                          {
                            std::vector<clsp::ThermalState_v3>::resize((void **)&clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst, v214);
                            std::string v216 = (unsigned char *)clsp::ThermalStateVector_v3_separate<clsp::OL>::TheInstance(void)::inst;
                            uint64_t v217 = qword_1E9F7FD30;
                            while (v216 != (unsigned char *)v217)
                            {
                              *std::string v216 = 0;
                              v216 += 24;
                            }
                          }
LABEL_405:
                          AUSpeakerProtectionV3::InitializeKernels(this, *(double *)&v337, *((unsigned int *)this + 158), &v330);
                          clsp::CLSPKernel_v5::CalcCoeffs((uint64_t **)this + 105, *((unsigned char *)this + 532), *((double *)this + 78));
                          std::string v220 = (clsp::CLSPKernel_v5 **)*((void *)this + 105);
                          std::string v221 = (clsp::CLSPKernel_v5 **)*((void *)this + 106);
                          while (v220 != v221)
                          {
                            clsp::CLSPKernel_v5::PrintCoeffs(*v220);
                            v220 += 2;
                          }
                          int64_t v222 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                          ausdk::AUElement::GetParameter(v222, 2u);
                          int64_t v223 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
                          ausdk::AUElement::GetParameter(v223, 3u);
                          operator new();
                        }
                      }
                      else
                      {
                        std::string v207 = MEMORY[0x1E4F14500];
                      }
                      if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)std::string __p = 136315394;
                        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 643;
                        _os_log_impl(&dword_1BB0CE000, v207, OS_LOG_TYPE_DEBUG, "%25s:%-5d This instance is ideally open-loop; setting up the open-loop ThermalStateVector_v3.",
                          __p,
                          0x12u);
                      }
                      goto LABEL_396;
                    }
                    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpTS key described ", 19);
                    std::string::size_type v195 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)" channels, but ", 15);
                    std::string::size_type v196 = (void *)std::ostream::operator<<();
                    long long v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)" of calibration were expected. Calibration configuration has been left unchanged.", 81);
                    std::endl[abi:ne180100]<char,std::char_traits<char>>(v197);
                    long long v198 = (NSObject **)spp3Subsystem();
                    if (v198)
                    {
                      std::string::size_type v199 = *v198;
                      if (!*v198)
                      {
LABEL_369:
                        std::ostringstream::~ostringstream((uint64_t)__p);
                        char v192 = 0;
                        uint64_t v28 = 4294956421;
                        goto LABEL_370;
                      }
                    }
                    else
                    {
                      std::string::size_type v199 = MEMORY[0x1E4F14500];
                    }
                    if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
                    {
                      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[8], &v340);
                      std::string v203 = (v340.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &v340
                           : (std::string *)v340.__r_.__value_.__r.__words[0];
                      *(_DWORD *)inPropertyData = 136315650;
                      *(void *)&inPropertyData[4] = "AUSpeakerProtectionV3.cpp";
                      *(_WORD *)&inPropertyData[12] = 1024;
                      *(_DWORD *)&inPropertyData[14] = 615;
                      *(_WORD *)&inPropertyData[18] = 2080;
                      *(void *)&inPropertyData[20] = v203;
                      _os_log_impl(&dword_1BB0CE000, v199, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", inPropertyData, 0x1Cu);
                      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v340.__r_.__value_.__l.__data_);
                      }
                    }
                    goto LABEL_369;
                  }
                  long long v193 = (NSObject **)spp3Subsystem();
                  if (v193)
                  {
                    long long v194 = *v193;
                    if (!*v193)
                    {
LABEL_355:
                      for (iuint64_t i = 0; ; ++ii)
                      {
                        uint64_t v201 = *((void *)this + 104);
                        if (v201) {
                          LODWORD(v202) = (*(uint64_t (**)(uint64_t))(*(void *)v201 + 24))(v201);
                        }
                        else {
                          uint64_t v202 = (*((void *)this + 102) - *((void *)this + 101)) >> 3;
                        }
                        if (ii >= v202) {
                          break;
                        }
                        AUSpeakerProtectionV3::SetClosedLoopEnabled(this, ii, 0);
                      }
                      uint64_t v28 = 4294956428;
                      char v192 = 1;
                      goto LABEL_370;
                    }
                  }
                  else
                  {
                    long long v194 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string __p = 136315394;
                    *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 600;
                    _os_log_impl(&dword_1BB0CE000, v194, OS_LOG_TYPE_ERROR, "%25s:%-5d *** BIG PROBLEM ***: SpTS data should be present on this device, but we failed to fetch it. Failing back to open-loop.\n", __p, 0x12u);
                  }
                  goto LABEL_355;
                }
              }
              else
              {
                long long v185 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
              {
                std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[8], inPropertyData);
                long long v186 = inPropertyData[23] >= 0 ? inPropertyData : *(unsigned char **)inPropertyData;
                *(_DWORD *)long long v361 = 136315650;
                *(void *)&v361[4] = "AUSpeakerProtectionV3.cpp";
                *(_WORD *)&v361[12] = 1024;
                *(_DWORD *)&v361[14] = 588;
                *(_WORD *)&v361[18] = 2080;
                *(void *)&v361[20] = v186;
                _os_log_impl(&dword_1BB0CE000, v185, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", v361, 0x1Cu);
                if ((inPropertyData[23] & 0x80000000) != 0) {
                  operator delete(*(void **)inPropertyData);
                }
              }
              goto LABEL_329;
            }
          }
          else
          {
            uint64_t v141 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 527;
            _os_log_impl(&dword_1BB0CE000, v141, OS_LOG_TYPE_DEBUG, "%25s:%-5d Speaker gain-link grouping not set; using default (all in group 0).",
              __p,
              0x12u);
          }
          goto LABEL_255;
        }
        uint64_t v124 = this;
        if (!v123) {
          goto LABEL_237;
        }
        unsigned int v130 = 0;
        while (1)
        {
          if ((int)v130 >= (int)v123) {
            __assert_rtn("SpeakerDefaultName", "AUSpeakerProtectionV3.cpp", 351, "index < numSpeakers");
          }
          if (v123 == 2)
          {
            if (v130)
            {
              if (v130 != 1)
              {
LABEL_227:
                std::to_string((std::string *)__p, v130 + 1);
                long long v132 = std::string::insert((std::string *)__p, 0, "Speaker ", 8uLL);
                long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
                *(void *)&v361[16] = *((void *)&v132->__r_.__value_.__l + 2);
                *(_OWORD *)long long v361 = v133;
                v132->__r_.__value_.__l.__size_ = 0;
                v132->__r_.__value_.__r.__words[2] = 0;
                v132->__r_.__value_.__r.__words[0] = 0;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                goto LABEL_231;
              }
              long long v131 = "Right Speaker Settings";
            }
            else
            {
              long long v131 = "Left Speaker Settings";
            }
          }
          else
          {
            long long v131 = "Speaker settings";
            if (v123 != 1) {
              goto LABEL_227;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v361, v131);
LABEL_231:
          if (v361[23] >= 0) {
            unint64_t v134 = v361;
          }
          else {
            unint64_t v134 = *(const char **)v361;
          }
          CFStringRef v135 = CFStringCreateWithCString(0, v134, 0x8000100u);
          if ((v361[23] & 0x80000000) != 0) {
            operator delete(*(void **)v361);
          }
          uint64_t v136 = ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), v130);
          ausdk::Owned<__CFString const*>::operator=((const void **)(v136 + 72), v135);
          CFRelease(v135);
          ++v130;
          uint64_t v124 = this;
          unsigned int v123 = *((_DWORD *)this + 158);
          if (v130 >= v123) {
            goto LABEL_237;
          }
        }
      }
    }
    else
    {
      long long v120 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
    {
      *(void *)inPropertyData = *((void *)this + 91);
      v340.__r_.__value_.__r.__words[0] = *((void *)this + 92);
      clsp::telemetry::utils::PrintTelemetryVector_impl<std::__wrap_iter<clsp::telemetry::Item const*>,std::__wrap_iter<clsp::telemetry::Item const*>>((std::string *)v361, (uint64_t)inPropertyData, &v340);
      uint64_t v121 = v361[23] >= 0 ? v361 : *(unsigned char **)v361;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 498;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v121;
      _os_log_impl(&dword_1BB0CE000, v120, OS_LOG_TYPE_INFO, "%25s:%-5d Telemetry bus layout: [ %s ]", __p, 0x1Cu);
      if ((v361[23] & 0x80000000) != 0) {
        operator delete(*(void **)v361);
      }
    }
    goto LABEL_211;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Telemetry input bus channel-count (", 35);
  ausdk::AUScope::SafeGetElement(v328, 1u);
  long long v81 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") does not match the telemetry order set via the property (", 59);
  uint64_t v82 = (void *)std::ostream::operator<<();
  unint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" elements).", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24)));
  long long v84 = std::locale::use_facet((const std::locale *)v361, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
  std::locale::~locale((std::locale *)v361);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v85 = (NSObject **)spp3Subsystem();
  if (v85)
  {
    uint64_t v57 = *v85;
    if (!*v85) {
      goto LABEL_188;
    }
  }
  else
  {
    uint64_t v57 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[8], inPropertyData);
    if (inPropertyData[23] >= 0) {
      std::string::size_type v116 = inPropertyData;
    }
    else {
      std::string::size_type v116 = *(unsigned char **)inPropertyData;
    }
    *(_DWORD *)long long v361 = 136315650;
    *(void *)&v361[4] = "AUSpeakerProtectionV3.cpp";
    *(_WORD *)&v361[12] = 1024;
    *(_DWORD *)&v361[14] = 478;
    *(_WORD *)&v361[18] = 2080;
    *(void *)&v361[20] = v116;
LABEL_186:
    _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v361, 0x1Cu);
    if ((inPropertyData[23] & 0x80000000) != 0) {
      operator delete(*(void **)inPropertyData);
    }
  }
LABEL_188:
  *(void *)std::string __p = *MEMORY[0x1E4FBA418];
  *(void *)&__p[*(void *)(*(void *)__p - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&__p[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v356) < 0) {
    operator delete(v354);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](&v359);
  uint64_t v28 = 4294956421;
LABEL_541:
  if (SHIBYTE(v332) < 0) {
    operator delete(v331[0]);
  }
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  *(void *)long long v341 = *MEMORY[0x1E4FBA408];
  uint64_t v319 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&v341[*(void *)(*(void *)v341 - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v343[2] = v319;
  v344[0] = MEMORY[0x1E4FBA470] + 16;
  if (v345 < 0) {
    operator delete((void *)v344[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C185D210](&v346);
  if (v335 < 0) {
    operator delete(v334[0]);
  }
  return v28;
}

void sub_1BB66E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, void *a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,dispatch_object_t **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100](a31, 0);
  unint64_t v67 = (std::__shared_weak_count *)v65[70];
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  if (v65[56] && a18 != *a22) {
    operator delete(*a22);
  }
  boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(a21);
  if (v65[24] && a20 != *a19) {
    operator delete(*a19);
  }
  boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(a23);
  MEMORY[0x1C185D370](v65, 0x10A0C4052718BC5);
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x240]);
  if (a65 < 0) {
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

unint64_t GetPreference<long long>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  char v4 = *((unsigned char *)a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const UInt8 *)a1;
  }
  else {
    uint64_t v5 = (const UInt8 *)*a1;
  }
  if (v5)
  {
    if (v4 >= 0) {
      CFIndex v6 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      CFIndex v6 = a1[1];
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
    *(void *)int valuePtr = v7;
    if (!v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v7 = 0;
    *(void *)int valuePtr = 0;
  }
  char v9 = *((unsigned char *)a2 + 23);
  if (v9 >= 0) {
    CFHashCode v10 = (const UInt8 *)a2;
  }
  else {
    CFHashCode v10 = (const UInt8 *)*a2;
  }
  if (v10)
  {
    if (v9 >= 0) {
      CFIndex v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      CFIndex v11 = a2[1];
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, v10, v11, 0x8000100u, 0);
    *(void *)std::string buf = v12;
    if (!v12)
    {
      uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
    }
  }
  else
  {
    CFStringRef v12 = 0;
    *(void *)std::string buf = 0;
  }
  CFNumberRef v14 = (const __CFNumber *)CFPreferencesCopyAppValue(v12, v7);
  CFNumberRef v51 = v14;
  if (v12) {
    CFRelease(v12);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v14)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v14))
    {
      switch(CFNumberGetType(v14))
      {
        case kCFNumberSInt8Type:
          valuePtr[0] = 0;
          int Value = CFNumberGetValue(v14, kCFNumberSInt8Type, valuePtr);
          goto LABEL_56;
        case kCFNumberSInt16Type:
          *(_WORD *)int valuePtr = 0;
          int v24 = CFNumberGetValue(v14, kCFNumberSInt16Type, valuePtr);
          goto LABEL_51;
        case kCFNumberSInt32Type:
          *(_DWORD *)int valuePtr = 0;
          int v24 = CFNumberGetValue(v14, kCFNumberSInt32Type, valuePtr);
          goto LABEL_121;
        case kCFNumberSInt64Type:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberSInt64Type, valuePtr);
          goto LABEL_68;
        case kCFNumberFloat32Type:
          *(_DWORD *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberFloat32Type, valuePtr);
          goto LABEL_43;
        case kCFNumberFloat64Type:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberFloat64Type, valuePtr);
          goto LABEL_53;
        case kCFNumberCharType:
          valuePtr[0] = 0;
          int Value = CFNumberGetValue(v14, kCFNumberCharType, valuePtr);
LABEL_56:
          if (Value) {
            unsigned __int8 v27 = valuePtr[0];
          }
          else {
            unsigned __int8 v27 = 0;
          }
          if (valuePtr[0] >= 0 || Value == 0) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = -256;
          }
          if (!Value) {
            goto LABEL_126;
          }
          uint64_t v19 = v29 & 0xFFFFFFFFFFFFFF00 | v27;
          goto LABEL_73;
        case kCFNumberShortType:
          *(_WORD *)int valuePtr = 0;
          int v24 = CFNumberGetValue(v14, kCFNumberShortType, valuePtr);
LABEL_51:
          unsigned __int8 v25 = valuePtr[0];
          uint64_t v26 = *(__int16 *)valuePtr;
          goto LABEL_122;
        case kCFNumberIntType:
          *(_DWORD *)int valuePtr = 0;
          int v24 = CFNumberGetValue(v14, kCFNumberIntType, valuePtr);
LABEL_121:
          unsigned __int8 v25 = valuePtr[0];
          uint64_t v26 = *(int *)valuePtr;
LABEL_122:
          unint64_t v48 = v26 & 0xFFFFFFFFFFFFFF00 | v25;
          if (v24) {
            uint64_t v19 = v48;
          }
          else {
            uint64_t v19 = 0;
          }
          if (!v24) {
            goto LABEL_126;
          }
          goto LABEL_73;
        case kCFNumberLongType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberLongType, valuePtr);
          goto LABEL_68;
        case kCFNumberLongLongType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberLongLongType, valuePtr);
          goto LABEL_68;
        case kCFNumberFloatType:
          *(_DWORD *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberFloatType, valuePtr);
LABEL_43:
          uint64_t v23 = (uint64_t)*(float *)valuePtr;
          goto LABEL_69;
        case kCFNumberDoubleType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberDoubleType, valuePtr);
          goto LABEL_53;
        case kCFNumberCFIndexType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberCFIndexType, valuePtr);
          goto LABEL_68;
        case kCFNumberNSIntegerType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberNSIntegerType, valuePtr);
LABEL_68:
          uint64_t v23 = *(void *)valuePtr;
          goto LABEL_69;
        case kCFNumberCGFloatType:
          *(void *)int valuePtr = 0;
          int v22 = CFNumberGetValue(v14, kCFNumberCGFloatType, valuePtr);
LABEL_53:
          uint64_t v23 = (uint64_t)*(double *)valuePtr;
LABEL_69:
          if (v22) {
            uint64_t v19 = v23;
          }
          else {
            uint64_t v19 = 0;
          }
          if (v22) {
            goto LABEL_73;
          }
          goto LABEL_126;
        default:
          goto LABEL_126;
      }
    }
    CFTypeID v21 = CFBooleanGetTypeID();
    if (v21 != CFGetTypeID(v14))
    {
LABEL_126:
      unint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "Could not convert");
    }
    uint64_t v19 = CFBooleanGetValue(v14);
LABEL_73:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_118;
    }
    if (*((char *)a1 + 23) >= 0) {
      uint8x8_t v30 = a1;
    }
    else {
      uint8x8_t v30 = (uint64_t *)*a1;
    }
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v31 = a2;
    }
    else {
      unint64_t v31 = (uint64_t *)*a2;
    }
    memset(&v50, 0, sizeof(v50));
    uint64_t v73 = &valuePtr[2];
    unint64_t v74 = v72;
    if (v19 >= 0) {
      unint64_t v32 = v19;
    }
    else {
      unint64_t v32 = -v19;
    }
    MEMORY[0x1C185D110](&v55);
    uint64_t v33 = std::locale::classic();
    if (std::locale::operator==(&v55, v33))
    {
      unint64_t v34 = v72;
      do
      {
        *--unint64_t v34 = (v32 % 0xA) | 0x30;
        BOOL v35 = v32 > 9;
        v32 /= 0xAuLL;
      }
      while (v35);
LABEL_111:
      std::locale::~locale(&v55);
      if (v19 < 0) {
        *--unint64_t v34 = 45;
      }
      uint64_t v73 = v34;
      unint64_t v74 = v72;
      std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(&v50, v34, v72, v72 - v34);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v46 = &v50;
      }
      else {
        long long v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = "CFPrefHelper.h";
      __int16 v57 = 1024;
      int v58 = 124;
      __int16 v59 = 2080;
      uint64_t v60 = v30;
      __int16 v61 = 2080;
      unint64_t v62 = v31;
      __int16 v63 = 2080;
      unint64_t v64 = v46;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Preference '%s %s' retrieved as %s", buf, 0x30u);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
LABEL_118:
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00;
      CFRelease(v14);
      return v20 & 0xFFFFFFFFFFFFFF00 | v19;
    }
    uint64_t v36 = std::locale::use_facet(&v55, MEMORY[0x1E4FBA2A0]);
    ((void (*)(void **__return_ptr))v36->__vftable[1].__on_zero_shared)(&__p);
    unsigned __int8 v37 = v54;
    if ((char)v54 < 0)
    {
      unint64_t v38 = v53;
      if (!v53) {
        goto LABEL_107;
      }
      p_p = (char *)__p;
    }
    else
    {
      if (!v54) {
        goto LABEL_107;
      }
      unint64_t v38 = v54;
      p_p = (char *)&__p;
    }
    if (*p_p > 0)
    {
      std::string::value_type v40 = ((uint64_t (*)(const std::locale::facet *))v36->__vftable[1].~facet_0)(v36);
      uint64_t v41 = 0;
      if ((v54 & 0x80u) == 0) {
        long long v42 = &__p;
      }
      else {
        long long v42 = __p;
      }
      LOBYTE(v43) = *v42;
      unint64_t v34 = v72;
      char v44 = *v42;
      do
      {
        if (!v44)
        {
          if (++v41 < v38)
          {
            uint64_t v45 = (v54 & 0x80u) == 0 ? &__p : (void **)__p;
            int v43 = *((char *)v45 + v41);
            if (v43 < 1) {
              LOBYTE(v43) = 127;
            }
          }
          *--unint64_t v34 = v40;
          char v44 = v43;
        }
        --v44;
        *--unint64_t v34 = (v32 % 0xA) | 0x30;
        BOOL v35 = v32 > 9;
        v32 /= 0xAuLL;
      }
      while (v35);
      unsigned __int8 v37 = v54;
      goto LABEL_109;
    }
LABEL_107:
    unint64_t v34 = v72;
    do
    {
      *--unint64_t v34 = (v32 % 0xA) | 0x30;
      BOOL v35 = v32 > 9;
      v32 /= 0xAuLL;
    }
    while (v35);
LABEL_109:
    if ((v37 & 0x80) != 0) {
      operator delete(__p);
    }
    goto LABEL_111;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v17 = a1;
    }
    else {
      long long v17 = (uint64_t *)*a1;
    }
    if (*((char *)a2 + 23) >= 0) {
      int64x2_t v18 = a2;
    }
    else {
      int64x2_t v18 = (uint64_t *)*a2;
    }
    *(_DWORD *)int valuePtr = 136315906;
    *(void *)&valuePtr[4] = "CFPrefHelper.h";
    __int16 v66 = 1024;
    int v67 = 133;
    __int16 v68 = 2080;
    unint64_t v69 = v17;
    __int16 v70 = 2080;
    long long v71 = v18;
    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%25s:%-5d Preference: '%s %s' does not exist.", valuePtr, 0x26u);
  }
  LOBYTE(v19) = 0;
  unint64_t v20 = 0;
  return v20 & 0xFFFFFFFFFFFFFF00 | v19;
}

void sub_1BB66F4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,long long buf,long long a24)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    std::locale::~locale(&a22);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v25 + 23) >= 0) {
        unsigned __int8 v27 = v25;
      }
      else {
        unsigned __int8 v27 = (uint64_t *)*v25;
      }
      if (*((char *)v24 + 23) >= 0) {
        uint64_t v28 = v24;
      }
      else {
        uint64_t v28 = (uint64_t *)*v24;
      }
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "CFPrefHelper.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 128;
      WORD1(a24) = 2080;
      *(void *)((char *)&a24 + 4) = v27;
      WORD6(a24) = 2080;
      *(void *)((char *)&a24 + 14) = v28;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get Preference: '%s %s'. It exists, but is it the right type?", (uint8_t *)&buf, 0x26u);
    }
    __cxa_end_catch();
    if (!a15) {
      JUMPOUT(0x1BB66F430);
    }
    JUMPOUT(0x1BB66F428);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<clsp::telemetry::Item>::push_back[abi:ne180100](void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    CFStringRef v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *CFStringRef v12 = *a2;
    CFIndex v6 = v12 + 1;
    long long v15 = (char *)*a1;
    CFNumberRef v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--CFStringRef v12 = v16;
      }
      while (v14 != v15);
      CFNumberRef v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v5 = *a2;
    CFIndex v6 = v5 + 1;
  }
  a1[1] = v6;
}

void clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::string *retstr, unsigned int **a2, void *a3)
{
  unint64_t v4 = (unsigned int *)(*a3 - 4);
  if (*a2 == v4)
  {
    unsigned int v13 = *v4;
    std::to_string(retstr, v13);
  }
  else
  {
    std::to_string(&v16, **a2);
    uint64_t v7 = std::string::append(&v16, ", ", 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    CFNumberRef v14 = *a2 + 1;
    clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(&__p, &v14, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    retstr->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB66F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void FetchAndInterpretSpTS(uint64_t a1)
{
  v54[19] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const void *)MGCopyAnswer();
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v1);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_as<std::vector<unsigned char>,0>((uint64_t)&v42, cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v44)
  {
    if (((v43 - (void)v42) & 3) != 0)
    {
      unint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "de-serialization data size mismatch");
    }
    std::string v50 = 0;
    CFTypeRef cf = 0;
    uint64_t v51 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&cf, v42, (uint64_t)v42 + ((v43 - (void)v42) & 0xFFFFFFFFFFFFFFFCLL), (v43 - (uint64_t)v42) >> 2);
    uint64_t v2 = (unsigned __int8 *)cf;
    uint64_t v3 = v50;
    uint64_t v51 = 0;
    CFTypeRef cf = 0;
    std::string v50 = 0;
    uint64_t v4 = v3 - v2;
    if (v3 != v2)
    {
      uint64_t v5 = v4 >> 2;
      if ((unint64_t)(v4 >> 2) <= 1) {
        uint64_t v5 = 1;
      }
      CFIndex v6 = (unsigned int *)v2;
      do
      {
        unsigned int *v6 = bswap32(*v6);
        ++v6;
        --v5;
      }
      while (v5);
      if (cf)
      {
        std::string v50 = cf;
        operator delete((void *)cf);
      }
    }
    unint64_t v7 = v2[3];
    if (v4 != v7 * v2[2] + 4 || v4 != 20 * v2[3] + 4)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"Actual size of key structure (", 30);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" bytes) is either not what it describes itself to be (", 54);
      unint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes), or what it ought to be (", 33);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" bytes).\n", 9);
      long long v12 = (NSObject **)spp3Subsystem();
      if (v12)
      {
        unsigned int v13 = *v12;
        if (!*v12)
        {
LABEL_30:
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 24) = 0;
          CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4FBA418];
          *(CFTypeRef *)((char *)&cf + *((void *)cf - 3)) = *(CFTypeRef *)(MEMORY[0x1E4FBA418] + 24);
          std::string v50 = (unsigned char *)(MEMORY[0x1E4FBA470] + 16);
          if (v53 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
LABEL_45:
          MEMORY[0x1C185D210](v54);
          operator delete(v2);
          goto LABEL_61;
        }
      }
      else
      {
        unsigned int v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &__p);
        CFTypeID v21 = v46 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)int v47 = 136315650;
        *(void *)&v47[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 301;
        *(_WORD *)&v47[18] = 2080;
        *(void *)&v47[20] = v21;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v47, 0x1Cu);
        if (v46 < 0) {
          operator delete(__p);
        }
      }
      goto LABEL_30;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"SpTSv", 5);
    CFNumberRef v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" key, describing ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    std::string v16 = (void *)std::ostream::operator<<();
    std::string v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"-byte speaker structures.", 25);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    int64x2_t v18 = std::locale::use_facet((const std::locale *)v47, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale((std::locale *)v47);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v19 = (NSObject **)spp3Subsystem();
    if (v19)
    {
      unint64_t v20 = *v19;
      if (!*v19)
      {
LABEL_40:
        long long v40 = 0uLL;
        uint64_t v41 = 0;
        if (v7)
        {
          unint64_t v48 = &v41;
          *(void *)int v47 = std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v7);
          *(void *)&v47[8] = *(void *)v47;
          *(void *)&v47[16] = *(void *)v47;
          *(void *)&v47[24] = *(void *)v47 + 8 * v23;
          std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(&v40, v47);
          std::__split_buffer<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::~__split_buffer((uint64_t)v47);
          uint64_t v39 = (char *)(v2 + 10);
          __int16 v24 = *((_WORD *)v2 + 6);
          unsigned int v25 = *((unsigned __int16 *)v2 + 7);
          __int16 v26 = *((_WORD *)v2 + 8);
          __int16 v27 = *((_WORD *)v39 + 4);
          __int16 v28 = *((_WORD *)v39 + 5);
          uint64_t v29 = (char *)operator new(0x30uLL);
          v30.i16[0] = v24;
          v30.i16[1] = v27;
          v30.i16[2] = v26;
          v30.i16[3] = v28;
          *((void *)v29 + 1) = 0;
          *((void *)v29 + 2) = 0;
          *(void *)uint64_t v29 = &unk_1F14BB260;
          *((float *)v29 + 6) = (float)__rev16(v25);
          *(float32x4_t *)(v29 + 28) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v30))), (float32x4_t)xmmword_1BB87BAD0);
          operator new();
        }
        unint64_t v31 = (const void *)*MEMORY[0x1E4FBA418];
        unint64_t v32 = *(const void **)(MEMORY[0x1E4FBA418] + 24);
        *(_OWORD *)a1 = v40;
        *(void *)(a1 + 16) = v41;
        uint64_t v41 = 0;
        long long v40 = 0uLL;
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)int v47 = &v40;
        std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
        CFTypeRef cf = v31;
        *(CFTypeRef *)((char *)&cf + *((void *)v31 - 3)) = v32;
        std::string v50 = (unsigned char *)(MEMORY[0x1E4FBA470] + 16);
        if (v53 < 0) {
          operator delete(v52);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &__p);
      int v22 = v46 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int v47 = 136315650;
      *(void *)&v47[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&v47[14] = 312;
      *(_WORD *)&v47[18] = 2080;
      *(void *)&v47[20] = v22;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v47, 0x1Cu);
      if (v46 < 0) {
        operator delete(__p);
      }
    }
    goto LABEL_40;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&cf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&cf, (uint64_t)"Failed to fetch MG data.\n", 25);
  BOOL v35 = (NSObject **)spp3Subsystem();
  if (!v35)
  {
    uint64_t v36 = MEMORY[0x1E4F14500];
    goto LABEL_52;
  }
  uint64_t v36 = *v35;
  if (*v35)
  {
LABEL_52:
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v50, &__p);
      unsigned __int8 v37 = v46 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int v47 = 136315650;
      *(void *)&v47[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&v47[14] = 266;
      *(_WORD *)&v47[18] = 2080;
      *(void *)&v47[20] = v37;
      _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v47, 0x1Cu);
      if (v46 < 0) {
        operator delete(__p);
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4FBA418];
  *(CFTypeRef *)((char *)&cf + *((void *)cf - 3)) = *(CFTypeRef *)(MEMORY[0x1E4FBA418] + 24);
  std::string v50 = (unsigned char *)(MEMORY[0x1E4FBA470] + 16);
  if (v53 < 0) {
    operator delete(v52);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C185D210](v54);
LABEL_61:
  if (v44)
  {
    if (v42) {
      operator delete(v42);
    }
  }
}

void sub_1BB670834()
{
}

void sub_1BB67086C()
{
}

void sub_1BB670878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void **a39)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  a39 = (void **)&a31;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&a39);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x220]);
  operator delete(a25);
  if (a37)
  {
    if (a34) {
      operator delete(a34);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1BB670888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39)
{
  a39 = (uint64_t)&a31;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x220]);
  operator delete(__p);
  if (a37)
  {
    if (a34) {
      operator delete(a34);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1BB670894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1BB670980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__vdeallocate(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    std::locale v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v5);
        }
      }
      while (v3 != v1);
      std::locale v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    std::locale v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *std::locale v4 = 0;
        if (v7) {
          std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUSpeakerProtectionV3::InitializeKernels(AUSpeakerProtectionV3 *this, double a2, uint64_t a3, BOOL *a4)
{
  v294[19] = *MEMORY[0x1E4F143B8];
  v286[0] = 0;
  AppFloatint Value = CACFPreferencesGetAppFloatValue(@"clsp_srdc", @"com.apple.coreaudio", (BOOL *)v286);
  if (v286[0])
  {
    float v7 = AppFloatValue;
    long long v8 = (float **)*((void *)this + 87);
    if (*((float ***)this + 88) == v8) {
      operator new();
    }
    *__CFString *v8 = v7;
    uint64_t v9 = (NSObject **)spp3Subsystem();
    if (v9)
    {
      unint64_t v10 = *v9;
      if (!*v9) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 822;
      *(_WORD *)&uint8_t buf[18] = 2048;
      *(double *)&buf[20] = v7;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_srdc %f", buf, 0x1Cu);
    }
  }
LABEL_10:
  v286[0] = 0;
  double v11 = CACFPreferencesGetAppFloatValue(@"clsp_caltemp", @"com.apple.coreaudio", (BOOL *)v286);
  if (v286[0])
  {
    uint64_t v12 = *((void *)this + 87);
    if (*((void *)this + 88) != v12)
    {
      float v13 = v11;
      *(float *)(*(void *)v12 + 4) = v13;
      CFNumberRef v14 = (NSObject **)spp3Subsystem();
      if (v14)
      {
        long long v15 = *v14;
        if (!*v14) {
          goto LABEL_18;
        }
      }
      else
      {
        long long v15 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 837;
        *(_WORD *)&uint8_t buf[18] = 2048;
        *(double *)&buf[20] = v13;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_caltemp %f", buf, 0x1Cu);
      }
    }
  }
LABEL_18:
  if (*((_DWORD *)this + 158) < 2u) {
    goto LABEL_36;
  }
  v286[0] = 0;
  double v16 = CACFPreferencesGetAppFloatValue(@"clsp_srdc_r", @"com.apple.coreaudio", (BOOL *)v286);
  if (v286[0])
  {
    float v17 = v16;
    uint64_t v18 = *((void *)this + 87);
    if ((unint64_t)(*((void *)this + 88) - v18) < 9) {
      operator new();
    }
    **(float **)(v18 + 8) = v17;
    uint64_t v19 = (NSObject **)spp3Subsystem();
    if (v19)
    {
      unint64_t v20 = *v19;
      if (!*v19) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 846;
      *(_WORD *)&uint8_t buf[18] = 2048;
      *(double *)&buf[20] = v17;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_srdc_r %f", buf, 0x1Cu);
    }
  }
LABEL_28:
  v286[0] = 0;
  double v21 = CACFPreferencesGetAppFloatValue(@"clsp_caltemp_r", @"com.apple.coreaudio", (BOOL *)v286);
  if (v286[0])
  {
    uint64_t v22 = *((void *)this + 87);
    if (*((void *)this + 88) != v22)
    {
      float v23 = v21;
      *(float *)(*(void *)(v22 + 8) + 4) = v23;
      __int16 v24 = (NSObject **)spp3Subsystem();
      if (v24)
      {
        unsigned int v25 = *v24;
        if (!*v24) {
          goto LABEL_36;
        }
      }
      else
      {
        unsigned int v25 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 861;
        *(_WORD *)&uint8_t buf[18] = 2048;
        *(double *)&buf[20] = v23;
        _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Override SpCl Property with defaults clsp_caltemp_r %f", buf, 0x1Cu);
      }
    }
  }
LABEL_36:
  if (*((unsigned char *)this + 533))
  {
    int v26 = *((unsigned __int8 *)this + 529);
    *a4 = v26;
    if (v26 && a3)
    {
      unint64_t v27 = 0;
      uint64_t v274 = *MEMORY[0x1E4FBA418];
      uint64_t v28 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      do
      {
        uint64_t v29 = *((void *)this + 84);
        if (a3 == (*((void *)this + 85) - v29) >> 3)
        {
          int8x8_t v30 = *(float **)(v29 + 8 * v27);
          if (v30)
          {
            uint64_t v31 = *((void *)this + 87);
            if (a3 == (*((void *)this + 88) - v31) >> 3)
            {
              unint64_t v32 = *(float **)(v31 + 8 * v27);
              if (*v32 >= v30[5] && *v32 <= v30[6])
              {
                float v34 = v32[1];
                if (v34 >= v30[7] && v34 <= v30[8])
                {
                  uint64_t v50 = spp3Subsystem();
                  if (v50)
                  {
                    if (*(unsigned char *)(v50 + 8))
                    {
                      uint64_t v51 = *(NSObject **)v50;
                      if (*(void *)v50)
                      {
                        if (os_log_type_enabled(*(os_log_t *)v50, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v52 = (*((void *)this + 85) - *((void *)this + 84)) >> 3;
                          uint64_t v53 = (*((void *)this + 88) - *((void *)this + 87)) >> 3;
                          *(_DWORD *)std::string buf = 136316418;
                          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 888;
                          *(_WORD *)&uint8_t buf[18] = 1024;
                          *(_DWORD *)&buf[20] = v27;
                          *(_WORD *)&unsigned char buf[24] = 1024;
                          *(_DWORD *)&buf[26] = v52;
                          *(_WORD *)&buf[30] = 1024;
                          *(_DWORD *)&unsigned char buf[32] = a3;
                          *(_WORD *)&buf[36] = 1024;
                          *(_DWORD *)&buf[38] = v53;
                          _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Closed loop checks Ch %d passed: mCLParams.size=%d, nKern=%d, SpClProps.size=%d", buf, 0x2Au);
                        }
                      }
                    }
                  }
                  goto LABEL_89;
                }
              }
            }
          }
        }
        uint64_t v36 = (NSObject **)spp3Subsystem();
        if (v36)
        {
          unsigned __int8 v37 = *v36;
          if (!*v36) {
            goto LABEL_58;
          }
        }
        else
        {
          unsigned __int8 v37 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = (*((void *)this + 85) - *((void *)this + 84)) >> 3;
          uint64_t v39 = (*((void *)this + 88) - *((void *)this + 87)) >> 3;
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 891;
          *(_WORD *)&uint8_t buf[18] = 1024;
          *(_DWORD *)&buf[20] = v38;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = a3;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&unsigned char buf[32] = v39;
          _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Closed loop checks failed: mCLParams.size=%d, nKern=%d, SpClProps.size=%d", buf, 0x24u);
        }
LABEL_58:
        uint64_t v40 = *((void *)this + 84);
        if (a3 != (*((void *)this + 85) - v40) >> 3 || !*(void *)(v40 + 8 * v27)) {
          goto LABEL_73;
        }
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
        uint64_t v41 = *((void *)this + 84);
        if (v27 >= (*((void *)this + 85) - v41) >> 3) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        clsp::ClosedLoopParameters::dump(*(void *)(v41 + 8 * v27), buf);
        long long v42 = (NSObject **)spp3Subsystem();
        if (!v42)
        {
          uint64_t v43 = MEMORY[0x1E4F14500];
LABEL_65:
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
            char v44 = __p;
            if (v283 < 0) {
              char v44 = *(unsigned char **)__p;
            }
            *(_DWORD *)long long v286 = 136315906;
            *(void *)long long v287 = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&v287[8] = 1024;
            *(_DWORD *)&v287[10] = 895;
            *(_WORD *)&v287[14] = 1024;
            *(_DWORD *)&v287[16] = v27;
            LOWORD(v288) = 2080;
            *(void *)((char *)&v288 + 2) = v44;
            _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, CLParams:\n%s", v286, 0x22u);
            if (SHIBYTE(v283) < 0) {
              operator delete(*(void **)__p);
            }
          }
          goto LABEL_70;
        }
        uint64_t v43 = *v42;
        if (*v42) {
          goto LABEL_65;
        }
LABEL_70:
        *(void *)std::string buf = v274;
        *(void *)&buf[*(void *)(v274 - 24)] = v28;
        *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
        if (v293 < 0) {
          operator delete(*((void **)&v292 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C185D210](v294);
LABEL_73:
        uint64_t v45 = *((void *)this + 87);
        if (a3 == (*((void *)this + 88) - v45) >> 3 && *(void *)(v45 + 8 * v27))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
          uint64_t v46 = *((void *)this + 87);
          if (v27 >= (*((void *)this + 88) - v46) >> 3) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          clsp::SpeakerCalibrationProperties::dump(*(void *)(v46 + 8 * v27), buf);
          int v47 = (NSObject **)spp3Subsystem();
          if (v47)
          {
            unint64_t v48 = *v47;
            if (!*v47)
            {
LABEL_85:
              *(void *)std::string buf = v274;
              *(void *)&buf[*(void *)(v274 - 24)] = v28;
              *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
              if (v293 < 0) {
                operator delete(*((void **)&v292 + 1));
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1C185D210](v294);
              goto LABEL_88;
            }
          }
          else
          {
            unint64_t v48 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __p);
            unint64_t v49 = __p;
            if (v283 < 0) {
              unint64_t v49 = *(unsigned char **)__p;
            }
            *(_DWORD *)long long v286 = 136315906;
            *(void *)long long v287 = "AUSpeakerProtectionV3.cpp";
            *(_WORD *)&v287[8] = 1024;
            *(_DWORD *)&v287[10] = 900;
            *(_WORD *)&v287[14] = 1024;
            *(_DWORD *)&v287[16] = v27;
            LOWORD(v288) = 2080;
            *(void *)((char *)&v288 + 2) = v49;
            _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, SpClProps:\n%s", v286, 0x22u);
            if (SHIBYTE(v283) < 0) {
              operator delete(*(void **)__p);
            }
          }
          goto LABEL_85;
        }
LABEL_88:
        *a4 = 0;
LABEL_89:
        ++v27;
      }
      while (a3 != v27);
    }
  }
  else
  {
    *a4 = 0;
  }
  if (a3)
  {
    if (*a4)
    {
      unsigned __int8 v54 = (float *)**((void **)this + 87);
      float v56 = *v54;
      float v55 = v54[1];
      uint64_t v57 = **((void **)this + 84);
      float v58 = *(float *)(v57 + 12);
      float v59 = *(float *)(v57 + 16);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      double v61 = v55;
      float v62 = 1.0 / ((v55 + -20.0) * (v59 - v58) / 15.0 + v58);
      ausdk::AUElement::SetParameter(Element, 0x1Au, v62, 0);
      __int16 v63 = (NSObject **)spp3Subsystem();
      if (v63)
      {
        unint64_t v64 = *v63;
        if (!*v63) {
          goto LABEL_108;
        }
      }
      else
      {
        unint64_t v64 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        int v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        float Parameter = ausdk::AUElement::GetParameter(v67, 0x1Au);
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 918;
        *(_WORD *)&uint8_t buf[18] = 1024;
        *(_DWORD *)&buf[20] = 0;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(double *)&buf[26] = v55;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = Parameter;
        *(_WORD *)&unsigned char buf[44] = 2048;
        *(double *)&buf[46] = v56;
        _os_log_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Using closed loop parameters refTemp=%f, invTempCo=%f, RebRef=%f", buf, 0x36u);
      }
LABEL_108:
      unint64_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v275 = ausdk::AUElement::GetParameter(v69, 0x14u);
      uint64_t v70 = *((unsigned int *)this + 84);
      long long v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v72 = ausdk::AUElement::GetParameter(v71, 0x21u);
      uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v74 = ausdk::AUElement::GetParameter(v73, 0x22u);
      uint64_t v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v76 = ausdk::AUElement::GetParameter(v75, 0x23u);
      uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v78 = ausdk::AUElement::GetParameter(v77, 0x20u);
      *(_DWORD *)long long v286 = 1;
      *(double *)&v287[4] = v78;
      *(void *)&v287[12] = 0x4059000000000000;
      *(void *)&long long v288 = v70;
      *((double *)&v288 + 1) = v72;
      *(double *)&long long v289 = v74;
      *((double *)&v289 + 1) = v76;
      int64x2_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v80 = ausdk::AUElement::GetParameter(v79, 0x18u);
      long long v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v82 = ausdk::AUElement::GetParameter(v81, 0x20u);
      unint64_t v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v84 = ausdk::AUElement::GetParameter(v83, 0x19u);
      uint64_t v85 = **((void **)this + 84);
      uint64_t v86 = *(void *)(v85 + 20);
      int v87 = *(_DWORD *)(v85 + 8);
      uint64_t v88 = *(void *)(v85 + 40);
      uint64_t v89 = *((unsigned int *)this + 84);
      std::string::size_type v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v91 = ausdk::AUElement::GetParameter(v90, 0x23u);
      *(double *)std::string buf = v80;
      *(double *)&uint8_t buf[8] = v82;
      *(double *)&uint8_t buf[16] = v84;
      *(double *)&unsigned char buf[24] = v56;
      *(void *)&unsigned char buf[32] = v86;
      *(_DWORD *)&unsigned char buf[40] = v87;
      *(void *)&unsigned char buf[44] = v88;
      uint64_t v291 = v89;
      *(void *)&long long v292 = 0x4059000000000000;
      *((double *)&v292 + 1) = v91;
      if (*((unsigned char *)this + 1328))
      {
        uint64_t v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        unsigned int v93 = ausdk::AUElement::GetParameter(v92, 0x2Au);
        if (v93)
        {
          long long v94 = (NSObject **)spp3Subsystem();
          if (v94)
          {
            double v95 = *v94;
            if (!*v94)
            {
LABEL_123:
              long long v140 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
              ausdk::AUElement::SetParameter(v140, 0x2Au, 0.0, 0);
              goto LABEL_124;
            }
          }
          else
          {
            double v95 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
            __int16 v280 = 1024;
            int v281 = 949;
            __int16 v282 = 1024;
            signed int v283 = v93;
            __int16 v284 = 1024;
            int v285 = 0;
            _os_log_impl(&dword_1BB0CE000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using SpTS calibration: Requested displacement controller type (%u) for Ch %u is overridden to kOpenLoopDisplacement.\n", __p, 0x1Eu);
          }
          goto LABEL_123;
        }
        uint64_t v96 = (NSObject **)spp3Subsystem();
        if (v96)
        {
          unint64_t v97 = *v96;
          if (!*v96) {
            goto LABEL_124;
          }
        }
        else
        {
          unint64_t v97 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
          __int16 v280 = 1024;
          int v281 = 952;
          __int16 v282 = 1024;
          signed int v283 = 0;
          _os_log_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using SpTS calibration: Requested displacement controller for Ch %u was already kOpenLoopDisplacement, as needed.\n", __p, 0x18u);
        }
      }
LABEL_124:
      uint64_t v141 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      unsigned int v142 = ausdk::AUElement::GetParameter(v141, 0x2Au);
      if (v142 > 4 || ((1 << v142) & 0x16) == 0) {
        goto LABEL_139;
      }
      for (uint64_t i = *((void *)this + 87); ; i += 8)
      {
        if (i == *((void *)this + 88)) {
          goto LABEL_139;
        }
        if (*(_WORD *)(*(void *)i + 16)) {
          break;
        }
      }
      long long v144 = (NSObject **)spp3Subsystem();
      if (v144)
      {
        uint64_t v145 = *v144;
        if (!*v144) {
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v145 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AUSpeakerProtectionV3.cpp";
        __int16 v280 = 1024;
        int v281 = 964;
        _os_log_impl(&dword_1BB0CE000, v145, OS_LOG_TYPE_DEBUG, "%25s:%-5d Repair flag is true. Disable closed loop.", __p, 0x12u);
      }
LABEL_139:
      uint64_t v146 = **((void **)this + 84);
      if (*(void *)(v146 + 48))
      {
        std::__split_buffer<std::string>::pointer v147 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 20) = ausdk::AUElement::GetParameter(v147, 0x2Fu);
        unsigned int v148 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 24) = ausdk::AUElement::GetParameter(v148, 0x30u);
        long long v149 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 76) = ausdk::AUElement::GetParameter(v149, 0x31u);
        unsigned int v150 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 80) = ausdk::AUElement::GetParameter(v150, 0x32u);
        unsigned int v151 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 52) = ausdk::AUElement::GetParameter(v151, 0x33u);
        BOOL v152 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 56) = ausdk::AUElement::GetParameter(v152, 0x34u);
        long long v153 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 44) = ausdk::AUElement::GetParameter(v153, 0x35u);
        long long v154 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 48) = ausdk::AUElement::GetParameter(v154, 0x36u);
        long long v155 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 60) = ausdk::AUElement::GetParameter(v155, 0x37u);
        unint64_t v156 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 64) = ausdk::AUElement::GetParameter(v156, 0x38u);
        long long v157 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 8) = ausdk::AUElement::GetParameter(v157, 0x3Au);
        unint64_t v158 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 4) = ausdk::AUElement::GetParameter(v158, 0x39u);
        unint64_t v159 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 28) = ausdk::AUElement::GetParameter(v159, 0x3Bu);
        uint64_t v160 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 36) = ausdk::AUElement::GetParameter(v160, 0x3Cu);
        unint64_t v161 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 84) = ausdk::AUElement::GetParameter(v161, 0x3Du);
        unint64_t v162 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 88) = ausdk::AUElement::GetParameter(v162, 0x3Eu);
        unint64_t v163 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
        *(float *)(*(void *)(v146 + 48) + 92) = ausdk::AUElement::GetParameter(v163, 0x3Fu);
      }
      double v271 = v61;
      int v273 = LODWORD(v56);
      uint64_t v164 = *((unsigned int *)this + 84);
      long long v165 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v269 = ausdk::AUElement::GetParameter(v165, 0);
      long long v166 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v267 = ausdk::AUElement::GetParameter(v166, 1u);
      size_t v167 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v265 = ausdk::AUElement::GetParameter(v167, 4u);
      std::string::size_type v168 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v263 = ausdk::AUElement::GetParameter(v168, 5u);
      long long v169 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v261 = ausdk::AUElement::GetParameter(v169, 6u);
      long long v170 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v258 = ausdk::AUElement::GetParameter(v170, 7u);
      std::string::size_type v171 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v256 = ausdk::AUElement::GetParameter(v171, 2u);
      std::string::size_type v172 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v254 = ausdk::AUElement::GetParameter(v172, 3u);
      long long v173 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v252 = ausdk::AUElement::GetParameter(v173, 9u);
      long long v174 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v250 = ausdk::AUElement::GetParameter(v174, 0xAu);
      std::string::size_type v175 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v248 = ausdk::AUElement::GetParameter(v175, 0xBu);
      std::string::size_type v176 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v246 = ausdk::AUElement::GetParameter(v176, 9u);
      long long v177 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v244 = ausdk::AUElement::GetParameter(v177, 0xAu);
      long long v178 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v242 = ausdk::AUElement::GetParameter(v178, 0xBu);
      std::string::size_type v179 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v240 = ausdk::AUElement::GetParameter(v179, 0xCu);
      std::string::size_type v180 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v238 = ausdk::AUElement::GetParameter(v180, 0xDu);
      unint64_t v181 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v236 = ausdk::AUElement::GetParameter(v181, 0xEu);
      long long v182 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v234 = ausdk::AUElement::GetParameter(v182, 0xFu);
      std::string::size_type v183 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v232 = ausdk::AUElement::GetParameter(v183, 0x10u);
      std::string::size_type v184 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v230 = ausdk::AUElement::GetParameter(v184, 0x11u);
      long long v185 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v229 = ausdk::AUElement::GetParameter(v185, 0x12u);
      long long v186 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v228 = ausdk::AUElement::GetParameter(v186, 0x13u);
      std::string::size_type v187 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v226 = ausdk::AUElement::GetParameter(v187, 2u);
      std::string::size_type v188 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v225 = ausdk::AUElement::GetParameter(v188, 3u);
      uint64_t v189 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v224 = ausdk::AUElement::GetParameter(v189, 4u);
      long long v190 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v223 = ausdk::AUElement::GetParameter(v190, 5u);
      std::string::size_type v191 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      float v222 = ausdk::AUElement::GetParameter(v191, 8u);
      char v192 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v221 = ausdk::AUElement::GetParameter(v192, 6u);
      long long v193 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
      int v220 = ausdk::AUElement::GetParameter(v193, 0xEu);
      long long v194 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v219 = ausdk::AUElement::GetParameter(v194, 0x1Au);
      std::string::size_type v195 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v196 = ausdk::AUElement::GetParameter(v195, 0x17u);
      float v197 = *(float *)(**((void **)this + 84) + 36);
      long long v198 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v199 = ausdk::AUElement::GetParameter(v198, 0x1Bu);
      double v200 = __exp10(v199 / 20.0);
      uint64_t v201 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v202 = ausdk::AUElement::GetParameter(v201, 0x1Cu);
      double v203 = __exp10(v202 / 20.0);
      std::string::size_type v204 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v205 = ausdk::AUElement::GetParameter(v204, 0x1Du);
      long long v206 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v207 = ausdk::AUElement::GetParameter(v206, 0x1Eu);
      unint64_t v208 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v209 = ausdk::AUElement::GetParameter(v208, 0x1Fu);
      int64_t v210 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v211 = ausdk::AUElement::GetParameter(v210, 0x43u);
      uint64_t v212 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
      float v213 = ausdk::AUElement::GetParameter(v212, 0x44u);
      *((double *)&v217 + 1) = v211;
      *(double *)&long long v217 = v209;
      *((double *)&v215 + 1) = v236;
      *(double *)&long long v215 = v238;
      clsp::CLSPKernel_v5PtrFactory(a2, v269, v267, v265, v263, v261, v258, v256, (uint64_t)__p, 0, v164, v275, (uint64_t)v286, (uint64_t)buf, *((uint64_t **)this + 84), **((void **)this + 87), COERCE__INT64(v254), COERCE__INT64(v252), COERCE__INT64(v250),
        COERCE__INT64(v248),
        v246,
        COERCE__INT64(v244),
        COERCE__INT64(v242),
        COERCE__INT64(v240),
        v215,
        v234,
        COERCE__INT64(v232),
        COERCE__INT64(v230),
        COERCE__INT64(v229),
        COERCE__INT64(v228),
        COERCE__INT64(v226),
        COERCE__INT64(v225),
        v224,
        COERCE__INT64(v223),
        COERCE__INT64(v222),
        v221,
        v220,
        v273,
        v271,
        COERCE__INT64(v219),
        COERCE__INT64(v196),
        v197,
        v200,
        v203,
        v205,
        v207,
        v217,
        COERCE__INT64(v213));
    }
    uint64_t v65 = (NSObject **)spp3Subsystem();
    if (v65)
    {
      __int16 v66 = *v65;
      if (!*v65) {
        goto LABEL_119;
      }
    }
    else
    {
      __int16 v66 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSpeakerProtectionV3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1044;
      *(_WORD *)&uint8_t buf[18] = 1024;
      *(_DWORD *)&buf[20] = 0;
      _os_log_impl(&dword_1BB0CE000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ch %d, Using open loop kernel", buf, 0x18u);
    }
LABEL_119:
    *(_DWORD *)long long v286 = 0;
    *(_OWORD *)&v287[4] = 0u;
    long long v288 = 0u;
    long long v289 = 0u;
    uint64_t v98 = *((unsigned int *)this + 84);
    memset(buf, 0, 52);
    uint64_t v291 = v98;
    long long v292 = xmmword_1BB87BAA0;
    uint64_t v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v100 = ausdk::AUElement::GetParameter(v99, 0);
    uint64_t v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v102 = ausdk::AUElement::GetParameter(v101, 1u);
    std::string::size_type v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v104 = ausdk::AUElement::GetParameter(v103, 4u);
    unint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v276 = ausdk::AUElement::GetParameter(v105, 5u);
    unint64_t v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v272 = ausdk::AUElement::GetParameter(v106, 6u);
    uint64_t v107 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v270 = ausdk::AUElement::GetParameter(v107, 7u);
    long long v108 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v268 = ausdk::AUElement::GetParameter(v108, 2u);
    uint64_t v109 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v266 = ausdk::AUElement::GetParameter(v109, 3u);
    long long v110 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v264 = ausdk::AUElement::GetParameter(v110, 9u);
    uint64_t v111 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v262 = ausdk::AUElement::GetParameter(v111, 0xAu);
    uint64_t v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v259 = ausdk::AUElement::GetParameter(v112, 0xBu);
    uint64_t v113 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v257 = ausdk::AUElement::GetParameter(v113, 9u);
    std::string::size_type v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v255 = ausdk::AUElement::GetParameter(v114, 0xAu);
    unint64_t v115 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v253 = ausdk::AUElement::GetParameter(v115, 0xBu);
    std::string::size_type v116 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v251 = ausdk::AUElement::GetParameter(v116, 0xCu);
    uint64_t v117 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v249 = ausdk::AUElement::GetParameter(v117, 0xDu);
    uint64_t v118 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v247 = ausdk::AUElement::GetParameter(v118, 0xEu);
    float v119 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v245 = ausdk::AUElement::GetParameter(v119, 0xFu);
    long long v120 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v243 = ausdk::AUElement::GetParameter(v120, 0x10u);
    uint64_t v121 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v241 = ausdk::AUElement::GetParameter(v121, 0x11u);
    unint64_t v122 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v239 = ausdk::AUElement::GetParameter(v122, 0x12u);
    unsigned int v123 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v237 = ausdk::AUElement::GetParameter(v123, 0x13u);
    uint64_t v124 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v235 = ausdk::AUElement::GetParameter(v124, 2u);
    uint64_t v125 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v233 = ausdk::AUElement::GetParameter(v125, 3u);
    unint64_t v126 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v231 = ausdk::AUElement::GetParameter(v126, 4u);
    unint64_t v127 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v128 = ausdk::AUElement::GetParameter(v127, 5u);
    uint64_t v129 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    float v130 = ausdk::AUElement::GetParameter(v129, 8u);
    long long v131 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    float v132 = ausdk::AUElement::GetParameter(v131, 6u);
    long long v133 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 32), 0);
    int v134 = ausdk::AUElement::GetParameter(v133, 0xEu);
    CFStringRef v135 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV3 *)((char *)this + 792), 0);
    int v136 = ausdk::AUElement::GetParameter(v135, 9u);
    *(double *)&uint64_t v227 = v259;
    float v260 = v100;
    *(double *)&uint64_t v137 = v130;
    double v138 = __exp10(-2.0);
    double v139 = __exp10(-2.0);
    uint64_t v278 = 0;
    *((double *)&v214 + 1) = v247;
    *(double *)&long long v214 = v249;
    *((void *)&v216 + 1) = 0x3F847AE140000000;
    *(void *)&long long v216 = 0x3FE0000000000000;
    clsp::CLSPKernel_v5PtrFactory(a2, v260, v102, v104, v276, v272, v270, v268, (uint64_t)__p, 0, v98, 1, (uint64_t)v286, (uint64_t)buf, &v278, 0, COERCE__INT64(v266), COERCE__INT64(v264), COERCE__INT64(v262),
      v227,
      v257,
      COERCE__INT64(v255),
      COERCE__INT64(v253),
      COERCE__INT64(v251),
      v214,
      v245,
      COERCE__INT64(v243),
      COERCE__INT64(v241),
      COERCE__INT64(v239),
      COERCE__INT64(v237),
      COERCE__INT64(v235),
      COERCE__INT64(v233),
      v231,
      COERCE__INT64(v128),
      v137,
      v132,
      v134,
      v136,
      20.0,
      0x4071F5C28F5C28F6,
      0x403E000000000000,
      60.0,
      v138,
      v139,
      100.0,
      100.0,
      v216,
      0x3EE4F8B580000000);
  }
}

void sub_1BB672A28(_Unwind_Exception *a1)
{
  std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::default_delete<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>>::operator()[abi:ne180100](uint64_t a1)
{
  std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100]((dispatch_object_t **)(a1 + 568), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(void *)(a1 + 448))
  {
    uint64_t v3 = *(void **)(a1 + 432);
    if ((void *)(a1 + 456) != v3) {
      operator delete(v3);
    }
  }
  boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 216);
  if (*(void *)(a1 + 192))
  {
    std::locale v4 = *(void **)(a1 + 176);
    if ((void *)(a1 + 200) != v4) {
      operator delete(v4);
    }
  }
  boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 24);

  JUMPOUT(0x1C185D370);
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::AddGainGroup(uint64_t a1, void *a2, int a3)
{
  int v18 = a3;
  uint64_t v6 = (unsigned int *)*a2;
  float v7 = (unsigned int *)a2[1];
  if ((unsigned int *)*a2 != v7)
  {
    do
    {
      uint64_t v8 = *v6;
      if (v8 >= *(_DWORD *)(a1 + 4))
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        caulk::make_string((caulk *)"channel index %u is out of [0, %u) range", (uint64_t)&v19, v8, *(unsigned int *)(a1 + 4));
        std::runtime_error::runtime_error(exception, &v19);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  memset(v17, 0, sizeof(v17));
  uint64_t v9 = (unsigned int *)a2[3];
  unint64_t v10 = (unsigned int *)a2[4];
  while (v9 != v10)
  {
    unint64_t v11 = *v9;
    if (*(void *)(a1 + 32) <= v11)
    {
      uint64_t v15 = *v9;
      double v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      caulk::make_string((caulk *)"time scale index %u is out of [0, %lu) range", (uint64_t)&v19, v15, *(void *)(a1 + 32));
      std::runtime_error::runtime_error(v16, &v19);
    }
    std::vector<cpms::TimeScale<float>>::push_back[abi:ne180100](v17, *(void *)(a1 + 24) + 32 * v11);
    ++v9;
  }
  uint64_t v12 = *(void *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 224);
  if (v13 == *(void *)(a1 + 232))
  {
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 3);
    v19.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
    unint64_t v20 = &v18;
    uint64_t v21 = a1;
    boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup*,float const&,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SmoothingStrategy &,std::vector<unsigned int> const&,std::vector<cpms::TimeScale<float>> &,std::vector<unsigned int> const&>>(&v22, (uint64_t **)(a1 + 216), (uint64_t *)(v12 + 48 * v13), (uint64_t)&v19);
    boost::container::vec_iterator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup *,false>::operator*(v22);
  }
  else
  {
    cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup(v12 + 48 * v13, a3, (uint64_t)a2, (uint64_t)v17, a2 + 3);
    ++*(void *)(a1 + 224);
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1BB672E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 - 56) = &a12;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 56));
  _Unwind_Resume(a1);
}

void sub_1BB672E58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  JUMPOUT(0x1BB672E50);
}

dispatch_object_t *std::unique_ptr<clsp::CLSP_Log>::reset[abi:ne180100](dispatch_object_t **a1, dispatch_object_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    clsp::CLSP_Log::~CLSP_Log(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_22005()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[24];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale v4 = (std::__shared_weak_count *)a1[22];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[20];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[18];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  float v7 = (std::__shared_weak_count *)a1[16];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[14];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[12];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)a1[10];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)a1[8];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[6];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[4];
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_Logs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BB3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void CAExtAudioFile::Create(ExtAudioFileRef *this, const char *__s, const AudioStreamBasicDescription *a3, const AudioStreamBasicDescription *a4, const AudioChannelLayout *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFIndex v8 = strlen(__s);
  CFURLRef v9 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v8, 0);
  if (!v9)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v13, 0xFFFFFFFF);
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v15 = "CAExtAudioFile.h";
      __int16 v16 = 1024;
      int v17 = 65;
      __int16 v18 = 2080;
      std::string v19 = v13;
      __int16 v20 = 2080;
      uint64_t v21 = "couldn't convert path to CFURLRef";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "couldn't convert path to CFURLRef", -1);
  }
  CFURLRef v10 = v9;
  CAExtAudioFile::Close((CAExtAudioFile *)this);
  uint64_t v11 = ExtAudioFileCreateWithURL(v10, 0x63616666u, a3, 0, 1u, this + 1);
  if (v11) {
    CFRelease(v10);
  }
  (*((void (**)(ExtAudioFileRef *, uint64_t, const char *))*this + 2))(this, v11, "ExtAudioFileCreateWithURL");

  CFRelease(v10);
}

void sub_1BB673358(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *CAXException::FormatError(CAXException *this, char *a2, size_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CAX4CCString::CAX4CCString((CAX4CCString *)__source, this);
  strlcpy(a2, __source, a3);
  return a2;
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  if (a2 == 1) {
    operator new();
  }
  if (!a2) {
    operator new();
  }
  uint64_t v8 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      std::string __p = (void *)(v8 + 4 * v9);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, (unsigned int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v10 - 1;
      unint64_t v9 = v10;
      uint64_t v8 = *a5;
      ++v10;
    }
    while (v9 < (a5[1] - *a5) >> 2);
  }
  return a1;
}

void sub_1BB673D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v29 = (void *)v26[11];
  if (v29)
  {
    v26[12] = v29;
    operator delete(v29);
  }
  int8x8_t v30 = *v27;
  if (*v27)
  {
    v26[9] = v30;
    operator delete(v30);
  }
  uint64_t v31 = *a14;
  if (*a14)
  {
    v26[5] = v31;
    operator delete(v31);
  }
  unint64_t v32 = *a15;
  if (*a15)
  {
    v26[2] = v32;
    operator delete(v32);
  }
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1C185D370](v26, 0x10B1C40C9592582);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(a12);
  uint64_t v33 = *v25;
  uint64_t *v25 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

void boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup*,float const&,cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::SmoothingStrategy &,std::vector<unsigned int> const&,std::vector<cpms::TimeScale<float>> &,std::vector<unsigned int> const&>>(void *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = (unint64_t)a2[2];
  if ((uint64_t *)v4 != a2[1]) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (v4 == 0x2AAAAAAAAAAAAAALL) {
    goto LABEL_31;
  }
  if (v4 >> 61 > 4) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = 8 * v4;
  }
  if (v4 >> 61) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 8 * v4 / 5;
  }
  if (v6 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  unint64_t v7 = v4 + 1 > v6 ? v4 + 1 : v6;
  if (v7 > 0x2AAAAAAAAAAAAAALL) {
LABEL_31:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  unint64_t v32 = v7;
  uint64_t v31 = *a2;
  uint64_t v11 = (uint64_t *)operator new(48 * v7);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v34 = *(void *)(a4 + 8);
  BOOL v35 = *(uint64_t **)a4;
  CFNumberRef v14 = *(int **)(a4 + 24);
  __int16 v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v36 = v11;
  uint64_t v38 = a2;
  int v17 = v11;
  if (v16 != a3)
  {
    __int16 v18 = v16;
    int v17 = v11;
    do
    {
      std::string v19 = v18 + 1;
      uint64_t v20 = *v18;
      uint64_t *v18 = 0;
      v18 += 6;
      uint64_t v21 = (uint64_t)(v17 + 1);
      uint64_t *v17 = v20;
      v17 += 6;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v21, v19);
    }
    while (v18 != a3);
  }
  unsigned __int8 v37 = v17;
  cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup::GainGroup((uint64_t)v17, *v14, v13, v34, v35);
  uint64_t v22 = &v16[6 * (void)v15];
  if (v22 != a3)
  {
    uint64_t v23 = (uint64_t)(v17 + 7);
    __int16 v24 = a3;
    do
    {
      unsigned int v25 = v24 + 1;
      uint64_t v26 = *v24;
      *__int16 v24 = 0;
      v24 += 6;
      *(void *)(v23 - 8) = v26;
      uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v23, v25)+ 48;
    }
    while (v24 != v22);
  }
  uint64_t v36 = 0;
  unsigned __int8 v37 = 0;
  boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(&v36);
  if (v16)
  {
    unint64_t v27 = a2[1];
    if (v27)
    {
      uint64_t v28 = (uint64_t)(v16 + 1);
      do
      {
        std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v28);
        uint64_t v29 = *(void *)(v28 - 8);
        *(void *)(v28 - 8) = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        v28 += 48;
        unint64_t v27 = (uint64_t *)((char *)v27 - 1);
      }
      while (v27);
    }
    if (a2 + 3 != (uint64_t **)*a2) {
      operator delete(*a2);
    }
  }
  uint64_t v30 = (uint64_t)a2[1] + 1;
  *a2 = v12;
  a2[1] = (uint64_t *)v30;
  a2[2] = (uint64_t *)v32;
  *a1 = (char *)v12 + (char *)a3 - (char *)v31;
}

void sub_1BB674108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range((uint64_t **)va);
  if ((void *)(v6 + 24) != v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup *,false>::operator*(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

uint64_t **boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)(v2 + 1));
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      unint64_t v4 = a1[1];
      uint64_t v2 = *a1 + 6;
      *a1 = v2;
    }
    while (v2 != v4);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<cpms::smoothers::Exponential<float>>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a1);
}

float cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::computePower(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (a3 >= (unint64_t)((*(void *)(a1 + 72) - v3) >> 2)) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(float *)(v3 + 4 * a3);
}

float cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::computeGain(uint64_t a1, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (a4 >= (unint64_t)((*(void *)(a1 + 72) - v4) >> 2)) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return a2 / *(float *)(v4 + 4 * a4);
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::postProcess(uint64_t result, uint64_t a2, unsigned int a3)
{
  float v3 = *(float *)(result + 56);
  uint64_t v4 = *(void *)(result + 64);
  uint64_t v5 = *(void *)(result + 88) + 20 * a3;
  if (*(unsigned char *)(v5 + 16))
  {
    if (*(unsigned char *)(v5 + 12)) {
      *(unsigned char *)(v5 + 12) = 0;
    }
    else {
      float v3 = (float)(*(float *)(v5 + 4) * *(float *)v5) + (float)((float)(1.0 - *(float *)(v5 + 4)) * v3);
    }
    *(float *)uint64_t v5 = v3;
  }
  *(float *)(v4 + 4 * a3) = v3;
  return result;
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::preProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 2;
    uint64_t v8 = *(void *)(a1 + 32);
    do
    {
      *(float *)(v8 + 4 * v6) = fmaxf(*(float *)(a3 + 4 * *(unsigned int *)(v3 + 4 * v6)), 0.0);
      ++v6;
    }
    while (v7 > v6);
  }
  *(float *)(a1 + 56) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1 + 32);
}

void cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::~PostSmoothedGainModel(void *a1)
{
  *a1 = &unk_1F14BB3A0;
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1C185D370);
}

void *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PostSmoothedGainModel::~PostSmoothedGainModel(void *a1)
{
  *a1 = &unk_1F14BB3A0;
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
        {
          uint64_t v6 = (void *)*((void *)v4 - 4);
          if (v6)
          {
            *((void *)v4 - 3) = v6;
            operator delete(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::computePower(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 40) - v3) >> 3) <= a3) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v4 = v3 + 24 * a3;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, v4);
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::computeGain(uint64_t a1, uint64_t a2, unsigned int a3, float a4)
{
  float v6 = a4;
  uint64_t v4 = *(void *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 40) - v4) >> 3) <= a3) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(void *)a2 + 24))(a2, &v6, v4 + 24 * a3);
}

void *cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::postProcess(void *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      float v8 = fmaxf(*(float *)(a4 + 4 * *(unsigned int *)(v5 + 4 * v6)), 0.0);
      uint64_t v9 = *(void *)(result[4] + 24 * a3);
      uint64_t v10 = result[7] + 32 * a3;
      if (*(unsigned char *)(v10 + 24))
      {
        if (v6 >= (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 4) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v11 = *(void *)v10 + 16 * v6;
        if (*(unsigned char *)(v11 + 12)) {
          *(unsigned char *)(v11 + 12) = 0;
        }
        else {
          float v8 = (float)(*(float *)(v11 + 4) * *(float *)v11) + (float)((float)(1.0 - *(float *)(v11 + 4)) * v8);
        }
        *(float *)uint64_t v11 = v8;
        uint64_t v5 = result[1];
        uint64_t v4 = result[2];
      }
      *(float *)(v9 + 4 * v6) = v8;
      unint64_t v6 = v7++;
    }
    while (v6 < (v4 - v5) >> 2);
  }
  return result;
}

uint64_t cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::PreSmoothedGainModel::~PreSmoothedGainModel(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return MEMORY[0x1C185D370](a1, 0xB1C402726C036);
}

{
  void *v2;
  void **v4;

  uint64_t v4 = (void **)(a1 + 56);
  std::vector<std::optional<std::vector<cpms::smoothers::Exponential<float>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t boost::container::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::small_vector_allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroup,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 8;
    do
    {
      std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table(v3);
      uint64_t v4 = *(void *)(v3 - 8);
      *(void *)(v3 - 8) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::container::vector<cpms::TimeScale<float>,boost::container::small_vector_allocator<cpms::TimeScale<float>,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(CFTypeRef **)a1;
    do
    {
      if (*v3) {
        CFRelease(*v3);
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::container::vector<clsp::AttackRelease<float,float>,boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<clsp::AttackRelease<float,float>,boost::container::new_allocator<void>,void>,clsp::AttackRelease<float,float>*>>(void *a1, char *a2, uint64_t *a3)
{
  unint64_t v3 = *((void *)a2 + 2);
  if (v3 != *((void *)a2 + 1)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (v3 == 0x555555555555555) {
    goto LABEL_26;
  }
  if (v3 >> 61 > 4) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 8 * v3;
  }
  if (v3 >> 61) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 8 * v3 / 5;
  }
  if (v5 >= 0x555555555555555) {
    unint64_t v5 = 0x555555555555555;
  }
  unint64_t v6 = v3 + 1 > v5 ? v3 + 1 : v5;
  if (v6 > 0x555555555555555) {
LABEL_26:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v10 = *(uint64_t **)a2;
  uint64_t v11 = (char *)operator new(24 * v6);
  uint64_t v12 = v11;
  uint64_t v13 = *(uint64_t **)a2;
  uint64_t v14 = *((void *)a2 + 1);
  uint64_t v15 = v11;
  if (*(void *)a2)
  {
    uint64_t v15 = v11;
    if (v13 != a3)
    {
      memmove(v11, *(const void **)a2, (char *)a3 - (char *)v13);
      uint64_t v15 = &v12[(char *)a3 - (char *)v13];
    }
  }
  *((_DWORD *)v15 + 5) = 0;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  if (a3)
  {
    __int16 v16 = (char *)&v13[3 * v14];
    if (v16 != (char *)a3) {
      memmove(v15 + 24, a3, v16 - (char *)a3);
    }
  }
  if (v13 && a2 + 24 != (char *)v13)
  {
    operator delete(v13);
    uint64_t v14 = *((void *)a2 + 1);
  }
  *(void *)a2 = v12;
  *((void *)a2 + 1) = v14 + 1;
  *((void *)a2 + 2) = v6;
  *a1 = &v12[(char *)a3 - (char *)v10];
}

uint64_t boost::container::vec_iterator<clsp::AttackRelease<float,float> *,false>::operator*(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<cpms::efficiency::Dummy<float> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<cpms::efficiency::Dummy<float> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    float v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      float v8 = *(void **)a1;
      unint64_t v5 = *(void **)(a1 + 8);
    }
    __int16 v16 = &v13[16 * v12];
    unsigned int v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      float v8 = *(void **)a1;
      __int16 v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        std::string v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    void *v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

void clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(std::string *a1, unsigned int **a2, void *a3)
{
  unint64_t v4 = (unsigned int *)(*a3 - 4);
  if (*a2 == v4)
  {
    unsigned int v13 = *v4;
    std::to_string(a1, v13);
  }
  else
  {
    std::to_string(&v17, **a2);
    unsigned int v7 = std::string::append(&v17, ", ", 2uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (uint64_t)(*a2 + 1);
    clsp::telemetry::utils::PrintNumericVector_impl<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>&>(__p, &v14, a3);
    if ((v16 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v10 = v16;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    uint64_t v11 = std::string::append(&v18, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB674D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(void *)(result + 32) = v3 - a3 + (v3 << 6);
      *(void *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(void *)(result + 48) = 0;
    unsigned int v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(void *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  unsigned int v6 = -1;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E) {
    unsigned int v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

uint64_t AUSpeakerProtectionV3::CreateExtendedElements(AUSpeakerProtectionV3 *this)
{
  uint64_t v1 = (AUSpeakerProtectionV3 *)((char *)this + 792);
  ausdk::AUScope::Initialize((AUSpeakerProtectionV3 *)((char *)this + 792), this, 4, 8);
  for (unsigned int i = 0; i != 8; ++i)
  {
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Element + 40))(Element, 69);
  }
  return result;
}

void AUSpeakerProtectionV3::~AUSpeakerProtectionV3(AUSpeakerProtectionV3 *this)
{
  AUSpeakerProtectionV3::~AUSpeakerProtectionV3(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned char v26[12];
  __int16 v27;
  int v28;
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14BB000;
  uint64_t v2 = spp3Subsystem();
  if (v2)
  {
    if (*(unsigned char *)(v2 + 8))
    {
      unint64_t v3 = *(NSObject **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v26 = 136315394;
          *(void *)&v26[4] = "AUSpeakerProtectionV3.cpp";
          unint64_t v27 = 1024;
          uint64_t v28 = 168;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUSpeakerProtectionV3::~AUSpeakerProtectionV3", v26, 0x12u);
        }
      }
    }
  }
  (*(void (**)(AUSpeakerProtectionV3 *))(*(void *)this + 64))(this);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (void *)*((void *)this + 84);
  unint64_t v5 = (void *)*((void *)this + 85);
  while (v5 != v4)
  {
    unint64_t v7 = *--v5;
    uint64_t v6 = v7;
    void *v5 = 0;
    if (v7) {
      std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
    }
  }
  *((void *)this + 85) = v4;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = (void *)*((void *)this + 87);
  unint64_t v9 = (void *)*((void *)this + 88);
  while (v9 != v8)
  {
    uint64_t v11 = *--v9;
    uint64_t v10 = v11;
    std::__shared_weak_count *v9 = 0;
    if (v11) {
      std::default_delete<clsp::SpeakerCalibrationProperties>::operator()[abi:ne180100](v10);
    }
  }
  *((void *)this + 88) = v8;
  long long v12 = (std::__shared_weak_count *)*((void *)this + 171);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unsigned int v13 = (void *)*((void *)this + 167);
  if (v13)
  {
    *((void *)this + 168) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 152);
  if (v14)
  {
    *((void *)this + 153) = v14;
    operator delete(v14);
  }
  long long v15 = (void *)*((void *)this + 149);
  if (v15)
  {
    *((void *)this + 150) = v15;
    operator delete(v15);
  }
  *(void *)uint64_t v26 = (char *)this + 1136;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  CAExtAudioFile::~CAExtAudioFile((AUSpeakerProtectionV3 *)((char *)this + 1120));
  CAExtAudioFile::~CAExtAudioFile((AUSpeakerProtectionV3 *)((char *)this + 1104));
  CAExtAudioFile::~CAExtAudioFile((AUSpeakerProtectionV3 *)((char *)this + 1088));
  *(void *)uint64_t v26 = (char *)this + 1064;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  unsigned __int8 v16 = (void *)*((void *)this + 130);
  if (v16)
  {
    *((void *)this + 131) = v16;
    operator delete(v16);
  }
  std::string v17 = (void *)*((void *)this + 127);
  if (v17)
  {
    *((void *)this + 128) = v17;
    operator delete(v17);
  }
  *(void *)uint64_t v26 = (char *)this + 992;
  std::vector<cpms::TimeScale<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  std::string v18 = (void *)*((void *)this + 121);
  if (v18)
  {
    *((void *)this + 122) = v18;
    operator delete(v18);
  }
  if (*((unsigned char *)this + 944))
  {
    *(void *)uint64_t v26 = (char *)this + 920;
    std::vector<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription,std::allocator<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>::GainGroupDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  }
  std::string v19 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v20) {
    std::default_delete<cpms::controllers::Power<float,cpms::smoothers::Exponential,clsp::AttackRelease>>::operator()[abi:ne180100](v20);
  }
  *(void *)uint64_t v26 = (char *)this + 864;
  std::vector<std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  *(void *)uint64_t v26 = (char *)this + 840;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  *(void *)uint64_t v26 = (char *)this + 808;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  if (*((unsigned char *)this + 776))
  {
    uint64_t v21 = (void *)*((void *)this + 94);
    if (v21)
    {
      *((void *)this + 95) = v21;
      operator delete(v21);
    }
  }
  uint64_t v22 = (void *)*((void *)this + 91);
  if (v22)
  {
    *((void *)this + 92) = v22;
    operator delete(v22);
  }
  *(void *)uint64_t v26 = (char *)this + 696;
  std::vector<std::unique_ptr<clsp::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  *(void *)uint64_t v26 = (char *)this + 672;
  std::vector<std::unique_ptr<clsp::ClosedLoopParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
  CACFDictionary::~CACFDictionary((AUSpeakerProtectionV3 *)((char *)this + 656));
  if (*((unsigned char *)this + 616))
  {
    uint64_t v23 = (void *)*((void *)this + 74);
    if (v23) {
      operator delete(v23);
    }
  }
  if (*((unsigned char *)this + 584))
  {
    __int16 v24 = (void *)*((void *)this + 70);
    if (v24) {
      operator delete(v24);
    }
  }
  unsigned int v25 = (void *)*((void *)this + 67);
  if (v25) {
    operator delete(v25);
  }
  ausdk::AUBase::~AUBase(this);
}

void sub_1BB675318(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void CAExtAudioFile::~CAExtAudioFile(CAExtAudioFile *this)
{
  *(void *)this = &unk_1F14BBC58;
  CAExtAudioFile::Close(this);
}

{
  uint64_t vars8;

  CAExtAudioFile::~CAExtAudioFile(this);

  JUMPOUT(0x1C185D370);
}

void std::vector<std::vector<std::shared_ptr<clsp::CLSPKernel_v5>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<clsp::ClosedLoopParameters>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = 0;
        if (v7) {
          std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CAExtAudioFile::CheckProperty(CAExtAudioFile *this, int a2, const char *a3, int a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    v6[0] = HIBYTE(a4);
    v6[1] = BYTE2(a4);
    v6[2] = BYTE1(a4);
    v6[3] = a4;
    v6[4] = 0;
    snprintf(__str, 0x80uLL, "%s ('%s') failed", a3, v6);
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1BB675558(_Unwind_Exception *exception_object)
{
}

void CAExtAudioFile::Check(CAExtAudioFile *this, int a2, const char *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    snprintf(__str, 0x80uLL, "%s failed", a3);
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1BB675620(_Unwind_Exception *exception_object)
{
}

uint64_t cpms::TimeScale<float>::TimeScale(uint64_t a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  if (__s)
  {
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
    *(void *)a1 = v5;
    if (!v5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

void sub_1BB675734(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void AUControlFreak::newDspLibAlgorithm(AUControlFreak *this)
{
}

void sub_1BB6757A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40D9D8347BLL);
  _Unwind_Resume(a1);
}

uint64_t AUControlFreak::Version(AUControlFreak *this)
{
  return 262913;
}

uint64_t AUControlFreak::SupportedNumChannels(AUControlFreak *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUControlFreak::SupportedNumChannels(AUChannelInfo const**)::kSupportedNumChannels;
  }
  return 32;
}

uint64_t AUControlFreak::GetParameterValueStrings(AUControlFreak *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  if (!a4) {
    return 4294956418;
  }
  if (*(_DWORD *)(*((void *)this + 211) + 4 * a3) != 12) {
    return 4294956418;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  for (uint64_t i = 0; i != 5; ++i)
  {
    CFStringRef v8 = CFStringCreateWithCString(v5, _ZGRN6DspLib10SaturationL22kSaturationFlavorNamesE_[i], 0x8000100u);
    CFArrayAppendValue(Mutable, v8);
  }
  uint64_t result = 0;
  *a4 = Mutable;
  return result;
}

uint64_t AUControlFreak::Reset(AUControlFreak *this)
{
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = (AUControlFreak *)((char *)this + 1824);
    caulk::pooled_semaphore_mutex::_lock((AUControlFreak *)((char *)this + 1824));
    uint64_t v3 = 0;
    CFIndex v4 = (char *)this + 528;
    do
    {
      CFAllocatorRef v5 = *(DspLib::ControlFreak::Algorithm **)&v4[v3];
      if (v5) {
        DspLib::ControlFreak::Algorithm::clearAudioBuffers(v5);
      }
      v3 += 56;
    }
    while (v3 != 1008);
    caulk::pooled_semaphore_mutex::_unlock(v2);
  }
  return 0;
}

void sub_1BB67590C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void AUControlFreak::~AUControlFreak(AUControlFreak *this)
{
  AUDspLib::~AUDspLib(this);

  JUMPOUT(0x1C185D370);
}

void sub_1BB675B70(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 3)
    {
      CFIndex v4 = __cxa_begin_catch(exception_object);
      CFAllocatorRef v5 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 16))(v4);
      size_t v6 = strlen(v5);
      uint64_t v7 = _os_log_pack_size() + 88;
      uint64_t message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(void *)(v2 + 32) + 152), v6 + v7 + 1, 16);
      if (message)
      {
        unint64_t v9 = (caulk::concurrent::message *)message;
        uint64_t v10 = (char *)(message + v7);
        uint64_t v11 = _os_log_pack_fill();
        id v12 = *(id *)(v2 + 32);
        unsigned int v13 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 16))(v4);
        stpcpy(v10, v13);
        int v14 = v4[2];
        *(_DWORD *)uint64_t v11 = 134218498;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 2080;
        *(void *)(v11 + 14) = v10;
        *(_WORD *)(v11 + 22) = 1024;
        *(_DWORD *)(v11 + 24) = v14;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(*(void *)(v2 + 32) + 152) + 16), v9);
      }
    }
    else
    {
      long long v15 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        unsigned __int8 v16 = v15;
        std::string v17 = (const char *)(*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
        size_t v18 = strlen(v17);
        uint64_t v19 = _os_log_pack_size() + 88;
        uint64_t v20 = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(void *)(v2 + 32) + 152), v18 + v19 + 1, 16);
        if (v20)
        {
          uint64_t v21 = (caulk::concurrent::message *)v20;
          uint64_t v22 = (char *)(v20 + v19);
          uint64_t v23 = _os_log_pack_fill();
          id v24 = *(id *)(v2 + 32);
          unsigned int v25 = (const char *)(*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
          stpcpy(v22, v25);
          *(_DWORD *)uint64_t v23 = 134218242;
          *(void *)(v23 + 4) = v24;
          *(_WORD *)(v23 + 12) = 2080;
          *(void *)(v23 + 14) = v22;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(*(void *)(v2 + 32) + 152) + 16), v21);
        }
      }
      else
      {
        uint64_t v26 = _os_log_pack_size();
        uint64_t v27 = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(*(void *)(v2 + 32) + 152), v26 + 88, 16);
        if (v27)
        {
          uint64_t v28 = (caulk::concurrent::message *)v27;
          uint64_t v29 = _os_log_pack_fill();
          uint64_t v30 = *(void **)(v2 + 32);
          *(_DWORD *)uint64_t v29 = 134217984;
          *(void *)(v29 + 4) = v30;
          uint64_t v31 = *(caulk::concurrent::messenger **)(*(void *)(*(void *)(v2 + 32) + 152) + 16);
          id v32 = v30;
          caulk::concurrent::messenger::enqueue(v31, v28);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB675B38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB6767A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUADAMSink::SupportedNumChannels(AUADAMSink *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUADAMSink::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannels;
  }
  return 1;
}

BOOL AUADAMSink::StreamFormatWritable(AUADAMSink *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUADAMSink::SupportsTail(AUADAMSink *this)
{
  return 1;
}

double AUADAMSink::GetTailTime(AUADAMSink *this)
{
  return 0.0;
}

uint64_t AUADAMSink::SetBusCount(AUADAMSink *this, int a2, unsigned int a3)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  if (a2 != 2) {
    return 4294956430;
  }
  if (a3 > 1) {
    return 4294956445;
  }
  ausdk::AUScope::SetNumberOfElements((AUADAMSink *)((char *)this + 128), a3);
  return 0;
}

BOOL AUADAMSink::BusCountWritable(AUADAMSink *this, int a2)
{
  return a2 == 2;
}

uint64_t AUADAMSink::ProcessMultipleBufferLists(AUADAMSink *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 84) < a3) {
    return 4294956422;
  }
  if (a6 == 1)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 16;
    while (v12 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0) + 108))
    {
      int v14 = *(const void **)((char *)&(*a5)->mNumberBuffers + v13);
      long long v15 = *(void **)((char *)&(*a7)->mNumberBuffers + v13);
      if (v14 != v15) {
        memcpy(v15, v14, 4 * a3);
      }
      ++v12;
      v13 += 16;
    }
  }
  if (*((unsigned char *)this + 552) || !*((unsigned char *)this + 540)) {
    return 0;
  }
  uint64_t v16 = *((void *)this + 66);
  uint64_t v17 = *((unsigned int *)this + 134);
  uint64_t v18 = (uint64_t)*a5;
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_22373);
  }
  if (!AudioDataAnalysisManagerLibraryLoader(void)::libSym) {
    return 560033897;
  }
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))AudioDataAnalysisManagerLibraryLoader(void)::libSym;

  return v19(v16, v17, v18, a3, (char *)this + 272);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_22378()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = dlerror();
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    uint64_t v3 = v1;
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t AUADAMSink::CanScheduleParameters(AUADAMSink *this)
{
  return 0;
}

uint64_t AUADAMSink::SetProperty(AUADAMSink *this, int a2, int a3, unsigned int a4, CFTypeRef *a5, int a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 1936158316)
  {
    if (a2 == 21)
    {
      if (a6 == 4)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 552) = *(_DWORD *)a5 != 0;
        return result;
      }
      return 4294956445;
    }
    if (a2 != 1936157028) {
      return result;
    }
    if (!*((unsigned char *)this + 17))
    {
      if (a6 == 4)
      {
        *((_DWORD *)this + 134) = *(_DWORD *)a5;
        *((unsigned char *)this + 540) = 1;
        log = AU::ADAMSink::get_log((AU::ADAMSink *)0xFFFFD581);
        uint64_t result = os_log_type_enabled(log, OS_LOG_TYPE_INFO);
        if (result)
        {
          if (!*((unsigned char *)this + 540)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          int v9 = *((_DWORD *)this + 134);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUADAMSink.cpp";
          __int16 v23 = 1024;
          int v24 = 216;
          __int16 v25 = 1024;
          LODWORD(v26) = v9;
          uint64_t v10 = "%s:%-5d Signal index set by user : %u";
          uint64_t v11 = log;
          uint32_t v12 = 24;
          goto LABEL_18;
        }
        return result;
      }
      return 4294956445;
    }
    return 4294956447;
  }
  if (a2 == 1936158317)
  {
    if (!*((unsigned char *)this + 17))
    {
      uint64_t result = 4294956445;
      if (a5)
      {
        if (a6 == 8)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          uint64_t v15 = *((void *)this + 68);
          *((void *)this + 68) = *(void *)buf;
          *(void *)std::string buf = v15;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          uint64_t v17 = AU::ADAMSink::get_log(v16);
          uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
          if (result)
          {
            uint64_t v18 = (const __CFString **)applesauce::CF::StringRef::operator->((void *)this + 68);
            applesauce::CF::convert_to<std::string,0>(*v18, (uint64_t)__p);
            if (v21 >= 0) {
              uint64_t v19 = __p;
            }
            else {
              uint64_t v19 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUADAMSink.cpp";
            __int16 v23 = 1024;
            int v24 = 225;
            __int16 v25 = 2080;
            uint64_t v26 = v19;
            _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_INFO, "%s:%-5d Signal name set by user : %s", buf, 0x1Cu);
            if (v21 < 0) {
              operator delete(__p[0]);
            }
            return 0;
          }
        }
      }
      return result;
    }
    return 4294956447;
  }
  if (a2 != 1936943460) {
    return result;
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  if (a6 != 8) {
    return 4294956445;
  }
  *((void *)this + 66) = *a5;
  uint64_t v13 = AU::ADAMSink::get_log((AU::ADAMSink *)0xFFFFD581);
  uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v14 = (void **)*((void *)this + 66);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUADAMSink.cpp";
    __int16 v23 = 1024;
    int v24 = 208;
    __int16 v25 = 2048;
    uint64_t v26 = v14;
    uint64_t v10 = "%s:%-5d Session ID set by user : %llu";
    uint64_t v11 = v13;
    uint32_t v12 = 28;
LABEL_18:
    _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    return 0;
  }
  return result;
}

uint64_t AU::ADAMSink::get_log(AU::ADAMSink *this)
{
  uint64_t v1 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    uint64_t v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v3)
    {
      AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
      uint64_t v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    }
  }
  return *((void *)v1 + 435);
}

uint64_t AUADAMSink::GetProperty(AUADAMSink *this, int a2, int a3, unsigned int a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1936158316)
  {
    if (a2 == 1936158317)
    {
      uint64_t v9 = *((void *)this + 68);
      if (v9) {
        CFRetain(*((CFTypeRef *)this + 68));
      }
      uint64_t result = 0;
      *a5 = v9;
    }
    else if (a2 == 1936943460)
    {
      uint64_t result = 0;
      *a5 = *((void *)this + 66);
    }
  }
  else
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 552);
LABEL_18:
      *(_DWORD *)a5 = v8;
      return result;
    }
    if (a2 == 1936157028)
    {
      if (*((unsigned char *)this + 540)) {
        int v8 = *((_DWORD *)this + 134);
      }
      else {
        int v8 = 0;
      }
      uint64_t result = 0;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t AUADAMSink::GetPropertyInfo(AUADAMSink *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6 = 4294956417;
  if (!a3)
  {
    if (a2 > 1936158316)
    {
      if (a2 == 1936158317 || a2 == 1936943460)
      {
        unsigned int v7 = 8;
        goto LABEL_9;
      }
    }
    else
    {
      if (a2 == 21)
      {
        *a5 = 4;
        char v8 = 1;
        goto LABEL_11;
      }
      if (a2 == 1936157028)
      {
        unsigned int v7 = 4;
LABEL_9:
        *a5 = v7;
        char v8 = *((unsigned char *)this + 17) ^ 1;
LABEL_11:
        uint64_t v6 = 0;
        *a6 = v8;
      }
    }
  }
  return v6;
}

uint64_t AUADAMSink::Initialize(AUADAMSink *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 21);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v3 != 1
    || (uint64_t v4 = (double *)ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0),
        CFAllocatorRef v5 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 128), 0),
        v4[10] == v5[2].mSampleRate)
    && *((_DWORD *)v4 + 22) == v5[2].mFormatID
    && *((_DWORD *)v4 + 24) == v5[2].mBytesPerPacket
    && *((_DWORD *)v4 + 25) == v5[2].mFramesPerPacket
    && *((_DWORD *)v4 + 27) == v5[2].mChannelsPerFrame
    && *((_DWORD *)v4 + 28) == v5[2].mBitsPerChannel
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)(v4 + 10), v5 + 2, 0, 0))
  {
    CFStringRef v6 = (const __CFString *)*((void *)this + 68);
    if (*((unsigned char *)this + 540))
    {
      if (v6)
      {
        uint64_t v7 = *((void *)this + 66);
        uint64_t v8 = *((unsigned int *)this + 134);
        applesauce::CF::convert_to<std::string,0>(v6, (uint64_t)buf);
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUADAMSink *)((char *)this + 80), 0);
        uint64_t v10 = *((unsigned int *)this + 84);
        if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
        {
          uint64_t v17 = Element;
          unsigned int v16 = *((_DWORD *)this + 84);
          dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_22373);
          uint64_t Element = v17;
          uint64_t v10 = v16;
        }
        if (AudioDataAnalysisManagerLibraryLoader(void)::libSym) {
          uint64_t v11 = AudioDataAnalysisManagerLibraryLoader(void)::libSym(v7, v8, buf, Element + 80, v10, 0);
        }
        else {
          uint64_t v11 = 560033897;
        }
        if (SBYTE3(v22) < 0) {
          operator delete(*(void **)buf);
        }
        if (v11)
        {
          {
            AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
          }
          uint64_t v13 = AU::ADAMSink::get_log(void)::auadam_os_log;
          if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_ERROR))
          {
            uint64_t v14 = *((void *)this + 66);
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUADAMSink.cpp";
            __int16 v19 = 1024;
            int v20 = 75;
            __int16 v21 = 2048;
            uint64_t v22 = v14;
            _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%s:%-5d error creating PCM node with session ID: %llu", buf, 0x1Cu);
          }
        }
        return v11;
      }
    }
    else if (!v6)
    {
      return 0;
    }
    return 4294956445;
  }
  {
    AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
  }
  uint32_t v12 = AU::ADAMSink::get_log(void)::auadam_os_log;
  if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUADAMSink.cpp";
    __int16 v19 = 1024;
    int v20 = 54;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%s:%-5d input and output formats do not match", buf, 0x12u);
  }
  return 4294956428;
}

void sub_1BB677B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void AUADAMSink::~AUADAMSink(AUADAMSink *this)
{
  AUADAMSink::~AUADAMSink(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  const void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  {
    AU::ADAMSink::get_log(void)::auadam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUADAMSink");
  }
  uint64_t v2 = AU::ADAMSink::get_log(void)::auadam_os_log;
  if (os_log_type_enabled((os_log_t)AU::ADAMSink::get_log(void)::auadam_os_log, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = 136315394;
    CFAllocatorRef v5 = "AUADAMSink.cpp";
    CFStringRef v6 = 1024;
    uint64_t v7 = 36;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%s:%-5d destroyed", (uint8_t *)&v4, 0x12u);
  }
  uint64_t v3 = (const void *)*((void *)this + 68);
  if (v3) {
    CFRelease(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

void sub_1BB677C78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void VoiceProcessorV3::ApplyCustomTelephonyDSPOverrides(VoiceProcessorV3 *this, CFDictionaryRef theDict, int a3)
{
  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, @"noise suppression"))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"noise suppression");
        if (Value)
        {
          CFNumberRef v7 = Value;
          CFRetain(Value);
          float valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
          CFRelease(v7);
          uint64_t v8 = *((void *)this + 583);
          *((void *)this + 584) |= 0x20uLL;
          *((void *)this + 583) = v8 & 0xFF5FFFFFFFFFFFFFLL | 0x20000000000000;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5968, 0, valuePtr);
        }
      }
      if (CFDictionaryContainsKey(theDict, @"agc"))
      {
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"agc");
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFRetain(v9);
          float valuePtr = 0.0;
          CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
          CFRelease(v10);
          uint64_t v11 = *((void *)this + 584);
          unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v13 = v11 | 0x24;
          if (LODWORD(valuePtr) == 1) {
            unint64_t v14 = v13;
          }
          else {
            unint64_t v14 = v12;
          }
          *((void *)this + 584) = v14;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, @"gain"))
    {
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"gain");
      if (v15)
      {
        CFNumberRef v16 = v15;
        CFRetain(v15);
        float valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v16);
        if (a3)
        {
          *(int8x16_t *)((char *)this + 4664) = vorrq_s8(*(int8x16_t *)((char *)this + 4664), (int8x16_t)xmmword_1BB879C80);
          uint64_t v17 = (char *)this + 7024;
          float v18 = valuePtr;
          int v19 = 1;
        }
        else
        {
          *((void *)this + 1112) |= 0x1800000000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10920, 0, valuePtr);
          float v18 = valuePtr;
          uint64_t v17 = (char *)this + 10920;
          int v19 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v17, v19, v18);
      }
    }
    if (CFDictionaryContainsKey(theDict, @"eq"))
    {
      CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(theDict, @"eq");
      if (v20)
      {
        CFArrayRef v21 = v20;
        CFRetain(v20);
        unsigned int Count = CFArrayGetCount(v21);
        BOOL v23 = a3 == 0;
        if (a3) {
          int v24 = (char *)this + 6232;
        }
        else {
          int v24 = (char *)this + 9704;
        }
        uint64_t v25 = 8896;
        if (!v23) {
          uint64_t v25 = 4672;
        }
        uint64_t v26 = 33;
        if (v23) {
          uint64_t v26 = 0x1000000200000000;
        }
        *(void *)((char *)this + v25) |= v26;
        if (Count >= 0xA) {
          uint64_t v27 = 10;
        }
        else {
          uint64_t v27 = Count;
        }
        if (v27)
        {
          for (CFIndex i = 0; i != v27; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
            if (ValueAtIndex)
            {
              CFDictionaryRef v30 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterType")
                && CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterFrequency"))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 1000, 0.0);
                CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterType");
                if (v31)
                {
                  CFNumberRef v32 = v31;
                  CFRetain(v31);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
                  CFRelease(v32);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 2000, (float)LODWORD(valuePtr));
                }
                CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterFrequency");
                if (v33)
                {
                  CFNumberRef v34 = v33;
                  CFRetain(v33);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v34);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterGain"))
              {
                CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterGain");
                if (v35)
                {
                  CFNumberRef v36 = v35;
                  CFRetain(v35);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v36, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v36);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterBandwidth"))
              {
                unsigned __int8 v37 = CFDictionaryGetValue(v30, @"AUNBandEQ_FilterBandwidth");
                CFRetain(v37);
                float valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v37, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v37);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 5000, valuePtr);
              }
              CFRelease(v30);
            }
          }
        }
        CFRelease(v21);
      }
    }
  }
}

uint64_t VoiceProcessorV3::SetupDownlinkLiteAUChain(VoiceProcessorV3 *this)
{
  uint64_t result = (*(uint64_t (**)(VoiceProcessorV3 *))(*(void *)this + 400))(this);
  *((void *)this + 1112) &= 0xFFFFFFFF3FFFFFBFLL;
  return result;
}

void VoiceProcessorV3::SetupDownlinkBasicAUChain(VoiceProcessorV3 *this)
{
  uint64_t v2 = *((void *)this + 1112);
  if (*((unsigned char *)this + 2084))
  {
    uint64_t v3 = 671088640;
  }
  else
  {
    *((void *)this + 1112) = v2 | 0x100;
    BOOL v7 = 0;
    CFRetain(@"com.apple.coreaudio");
    BOOL AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"vp_use_vareq", @"com.apple.coreaudio", &v7);
    if (!v7 || AppBooleanValue) {
      unint64_t v6 = *((void *)this + 1112);
    }
    else {
      unint64_t v6 = *((void *)this + 1112) & 0xFFFFFFFFFFDF7EBBLL;
    }
    *((void *)this + 1112) = v6 | 0x208044;
    AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9416, 0, *((float *)this + 3135));
    uint64_t v2 = *((void *)this + 1112);
    uint64_t v3 = 0x3E8000000;
  }
  *((void *)this + 1112) = v2 | v3 & 0xFFFFFFFFFFFFLL | 0x1800000000000000;
}

uint64_t VoiceProcessorV3::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    uint64_t v2 = *(void *)(this + 4664);
    *(void *)(this + 4664) = v2 | 0x40004100;
    if (a2)
    {
      *(void *)(this + 4664) = v2 | 0x40004106;
      if (a2 >= 3) {
        *(void *)(this + 4664) = v2 | 0x4000410E;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV3::SetupUplink_BF_MS(uint64_t this, unsigned int a2, char a3)
{
  if (a2 < 2)
  {
    if (a2 && (a3 & 1) == 0)
    {
      uint64_t v4 = *(void *)(this + 4664) | 2;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(this + 4664);
    *(void *)(this + 4664) = v3 | 0xC0004100;
    if ((a3 & 1) == 0)
    {
      *(void *)(this + 4664) = v3 | 0xC0004106;
      if (a2 != 2)
      {
        uint64_t v4 = v3 | 0xC000410ELL;
LABEL_8:
        *(void *)(this + 4664) = v4;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV3::SetupUplink_MMNS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    unint64_t v2 = *(void *)(this + 4664) & 0xFF5FFEFFFFFFBEFFLL;
    *(void *)(this + 4664) = v2 | 0x80010000004100;
    if (a2)
    {
      *(void *)(this + 4664) = v2 | 0x80010000004106;
      if (a2 >= 3) {
        *(void *)(this + 4664) = v2 | 0x8001000000410ELL;
      }
    }
  }
  return this;
}

void VoiceProcessorV3::SetupUplinkLiteAUChain(VoiceProcessorV3 *this)
{
  unint64_t v2 = (unint64_t *)((char *)this + 4664);
  BOOL v7 = (char *)this + 4664;
  int v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v7);
  uint64_t v3 = *((void *)this + 583);
  *((void *)this + 583) = v3 | 0x8000008000002080;
  uint64_t v4 = *((void *)this + 584);
  *((void *)this + 584) = v4 | 0x21;
  if (*((unsigned char *)this + 1676)) {
    *unint64_t v2 = v3 | 0xA000008000002080;
  }
  int v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1) {
    *((void *)this + 584) = v4 | 0x25;
  }
}

void VoiceProcessorV3::SetupUplinkBasicAUChain(VoiceProcessorV3 *this)
{
  unint64_t v2 = (char *)this + 4536;
  uint64_t v3 = (unint64_t *)((char *)this + 4664);
  CFNumberRef v9 = (char *)this + 4664;
  int v10 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v9);
  uint64_t v4 = *((void *)this + 583);
  unint64_t v5 = v4 | 0x8020008000002080;
  *((void *)this + 583) = v4 | 0x8020008000002080;
  uint64_t v6 = *((void *)this + 584);
  *((void *)this + 584) = v6 | 0x23;
  if (*((unsigned char *)this + 1676))
  {
    unint64_t v5 = v4 | 0xA020008000002080;
    unint64_t *v3 = v4 | 0xA020008000002080;
  }
  int v7 = *((_DWORD *)this + 571);
  if (v7 == 1 || v7 == -1) {
    *((void *)this + 584) = v6 | 0x27;
  }
  if (*v2)
  {
    v5 |= 0x10000000000000uLL;
    unint64_t *v3 = v5;
  }
  if (v2[1]) {
    unint64_t *v3 = v5 | 0x20;
  }
}

uint64_t VoiceProcessorV3::GetVersion(VoiceProcessorV3 *this)
{
  return 3;
}

void VoiceProcessorV3::~VoiceProcessorV3(VoiceProcessorV3 *this)
{
  VoiceProcessorV3::~VoiceProcessorV3(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  *(void *)this = &unk_1F14BB950;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 16696);
  unint64_t v2 = *((void *)this + 2104);
  std::mutex::lock((std::mutex *)(v2 + 88));
  *(unsigned char *)(v2 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v2 + 88));
  uint64_t v3 = *((void *)this + 2106);
  std::mutex::lock((std::mutex *)(v3 + 88));
  *(unsigned char *)(v3 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v3 + 88));
  uint64_t v4 = *((void *)this + 2108);
  std::mutex::lock((std::mutex *)(v4 + 88));
  *(unsigned char *)(v4 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v4 + 88));
  unint64_t v5 = *((void *)this + 2110);
  std::mutex::lock((std::mutex *)(v5 + 88));
  *(unsigned char *)(v5 + 80) = 0;
  std::mutex::unlock((std::mutex *)(v5 + 88));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2111);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 2109);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 2107);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  CFNumberRef v9 = (std::__shared_weak_count *)*((void *)this + 2105);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }

  VoiceProcessorV2::~VoiceProcessorV2(this);
}

void VoiceProcessorV3::VoiceProcessorV3(VoiceProcessorV3 *this, const vp::Context *a2)
{
  *(void *)this = &unk_1F14BA5C0;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 3) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 6) = *((void *)a2 + 15);
    *((_OWORD *)this + 2) = v5;
  }
  *((void *)this + 7) = *(void *)((char *)a2 + 148);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 36);
  if (*((unsigned char *)a2 + 140)) {
    int v6 = *((_DWORD *)a2 + 34);
  }
  else {
    int v6 = 0;
  }
  *((_DWORD *)this + 17) = v6;
  int VPProductFamilyType = GetVPProductFamilyType(v6);
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_DWORD *)this + 18) = VPProductFamilyType;
  *(_OWORD *)((char *)this + 76) = xmmword_1BB87BB00;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(void *)((char *)this + 364) = 0;
  *((void *)this + 49) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *((_OWORD *)this + 25) = v8;
  *((void *)this + 52) = 1;
  *((_DWORD *)this + 106) = 1;
  *((void *)this + 54) = 0;
  *((_DWORD *)this + 110) = 0;
  *((void *)this + 54) = strdup("primary mic only");
  *((_DWORD *)this + 112) = 1;
  *((void *)this + 57) = 0;
  *((_DWORD *)this + 116) = 0;
  *((void *)this + 57) = strdup("primary mic only");
  *((void *)this + 59) = 0;
  *((_WORD *)this + 240) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 500) = 0u;
  *(_OWORD *)((char *)this + 516) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_DWORD *)this + 288) = 0;
  *(void *)((char *)this + 1156) = 0x3F8000003F800000;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1180) = 0u;
  *(_OWORD *)((char *)this + 1164) = 0u;
  *((_DWORD *)this + 304) = 0;
  *((_OWORD *)this + 75) = 0u;
  *(_OWORD *)((char *)this + 1220) = xmmword_1BB87A440;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *((unsigned char *)this + 1272) = 1;
  *(void *)((char *)this + 1276) = 0xC00000000;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 326) = 0;
  *(_OWORD *)((char *)this + 1288) = xmmword_1BB87A370;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *((_DWORD *)this + 336) = 0;
  *((_OWORD *)this + 83) = xmmword_1BB87A370;
  *((unsigned char *)this + 1368) = 0;
  *((unsigned char *)this + 1392) = 0;
  *((_DWORD *)this + 350) = 0;
  *((unsigned char *)this + 1404) = 0;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 360) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 1444) = xmmword_1BB87A440;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *((_DWORD *)this + 382) = 0;
  *((_DWORD *)this + 388) = 0;
  *((_OWORD *)this + 96) = xmmword_1BB87A370;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *((void *)this + 205) = 0xC00000000;
  *((unsigned char *)this + 1648) = 1;
  *((_DWORD *)this + 413) = -1041235968;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 418) = 9;
  *((unsigned char *)this + 1676) = 0;
  *((unsigned char *)this + 1792) = 0;
  *((unsigned char *)this + 1856) = 0;
  *((unsigned char *)this + 1864) = 0;
  *((unsigned char *)this + 1904) = 0;
  *((unsigned char *)this + 1952) = 0;
  *((unsigned char *)this + 1960) = 0;
  *((unsigned char *)this + 1984) = 0;
  *((void *)this + 249) = 0;
  *((unsigned char *)this + 2000) = 0;
  *((unsigned char *)this + 2064) = 0;
  *((unsigned char *)this + 2072) = 0;
  *((unsigned char *)this + 2076) = 0;
  *((_WORD *)this + 844) = 0;
  *((void *)this + 210) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((unsigned char *)this + 1928) = 0;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *((_WORD *)this + 1042) = 0;
  *((_DWORD *)this + 520) = 0;
  *((_DWORD *)this + 542) = 0;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((_DWORD *)this + 550) = 0;
  *((void *)this + 274) = 0;
  *((_OWORD *)this + 136) = 0u;
  *(void *)((char *)this + 2239) = 0;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((unsigned char *)this + 2247) = 1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)((char *)this + 2248) = _Q0;
  *((_DWORD *)this + 566) = 0;
  *((unsigned char *)this + 2268) = 0;
  *((_DWORD *)this + 568) = 0;
  *(void *)((char *)this + 2276) = 0xC2040000C1200000;
  *(void *)((char *)this + 2284) = 0xC2C60000FFFFFFFFLL;
  unint64_t v14 = CAAudioChannelLayout::RefCountedLayout::operator new((CAAudioChannelLayout::RefCountedLayout *)0xC);
  void *v14 = &unk_1F14C8B90;
  v14[1] = 0xC00000001;
  v14[2] = 0;
  *((_DWORD *)v14 + 6) = 0;
  *((void *)this + 287) = v14;
  *((void *)this + 288) = 0;
  *((void *)this + 290) = 0;
  *((void *)this + 289) = 0;
  *((_DWORD *)this + 582) = 0;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((void *)this + 298) = 0;
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2392), "VoiceProcessor.mInitLock");
  *((void *)this + 310) = 0;
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2488), "VoiceProcessor.mVolumeLock");
  CADeprecated::CAMutex::CAMutex((VoiceProcessorV3 *)((char *)this + 2576), "VoiceProcessor.mProcessCountLock");
  *((void *)this + 333) = 850045863;
  *((_OWORD *)this + 167) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 170) = 0u;
  *((_DWORD *)this + 684) = 0;
  vp::Audio_File::Audio_File((void *)this + 343);
  vp::Audio_File::Audio_File((void *)this + 344);
  vp::Audio_File::Audio_File((void *)this + 345);
  vp::Audio_File::Audio_File((void *)this + 346);
  *((void *)this + 437) = 0;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *(_OWORD *)((char *)this + 3480) = 0u;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *(_OWORD *)((char *)this + 3416) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *((_OWORD *)this + 250) = 0u;
  *((_OWORD *)this + 251) = 0u;
  *((_OWORD *)this + 252) = 0u;
  *((_OWORD *)this + 253) = 0u;
  *((_OWORD *)this + 254) = 0u;
  *((_OWORD *)this + 255) = 0u;
  *((_OWORD *)this + 256) = 0u;
  *((_OWORD *)this + 257) = 0u;
  *((_OWORD *)this + 258) = 0u;
  *((_OWORD *)this + 259) = 0u;
  *(_OWORD *)((char *)this + 4156) = 0u;
  *(_OWORD *)((char *)this + 4172) = xmmword_1BB87BB10;
  *((_DWORD *)this + 1047) = 1;
  *((_OWORD *)this + 262) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((_OWORD *)this + 268) = 0u;
  *((_OWORD *)this + 269) = 0u;
  *((_OWORD *)this + 270) = 0u;
  *((void *)this + 542) = 0;
  *((_DWORD *)this + 1086) = 1065353216;
  *((void *)this + 544) = 0;
  *((_DWORD *)this + 1133) = 0;
  *((void *)this + 568) = 0;
  *((unsigned char *)this + 4552) = 1;
  *((void *)this + 570) = 0;
  *((unsigned char *)this + 4568) = 1;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *(_OWORD *)((char *)this + 4600) = 0u;
  *((_DWORD *)this + 1154) = 1065353216;
  *((_OWORD *)this + 289) = 0u;
  *((_DWORD *)this + 1164) = 1065353216;
  *((_OWORD *)this + 290) = 0u;
  bzero((char *)this + 4664, 0x6E0uLL);
  *(_OWORD *)((char *)this + 7048) = 0u;
  *(_OWORD *)((char *)this + 7032) = 0u;
  *(_OWORD *)((char *)this + 7016) = 0u;
  *(_OWORD *)((char *)this + 7000) = 0u;
  *((unsigned char *)this + 7064) = 1;
  bzero((char *)this + 7072, 0x6C0uLL);
  CFNumberRef v15 = (char *)this + 8896;
  uint64_t v16 = 8800;
  do
  {
    uint64_t v17 = (char *)this + v16;
    *(void *)uint64_t v17 = 0;
    v17[8] = 1;
    *((_DWORD *)v17 + 4) = 0;
    v16 += 24;
  }
  while (v17 + 24 != v15);
  bzero(v15, 0x5E0uLL);
  *((_OWORD *)this + 684) = 0u;
  *((_OWORD *)this + 683) = 0u;
  *((_OWORD *)this + 682) = 0u;
  *((_OWORD *)this + 681) = 0u;
  *((unsigned char *)this + 10960) = 1;
  bzero((char *)this + 10968, 0x5D0uLL);
  *((unsigned char *)this + 4576) = 0;
  *((void *)this + 546) = 0;
  bzero((char *)this + 6424, 0x240uLL);
  bzero((char *)this + 10400, 0x1F0uLL);
  VoiceProcessorV2::VPEchoProcessingParams::Reset((VoiceProcessorV3 *)((char *)this + 4360));
  uint64_t v18 = 0;
  *((void *)this + 1557) = 0x1500000001;
  *((_OWORD *)this + 779) = 0u;
  *((void *)this + 1564) = 0;
  *(void *)((char *)this + 12517) = 0;
  *((_OWORD *)this + 783) = xmmword_1BB873C90;
  *((void *)this + 1568) = 0;
  *((unsigned char *)this + 12552) = 0;
  *((void *)this + 1570) = 0;
  *((unsigned char *)this + 12568) = 0;
  *(_OWORD *)((char *)this + 12920) = 0u;
  *(_DWORD *)((char *)this + 12935) = 0;
  *((_OWORD *)this + 786) = 0u;
  *((_OWORD *)this + 787) = 0u;
  *((_OWORD *)this + 788) = 0u;
  *((_OWORD *)this + 789) = 0u;
  *((void *)this + 1580) = 0;
  do
  {
    vp::Audio_File::Audio_File((VoiceProcessorV3 *)((char *)this + v18 + 12944));
    v18 += 8;
  }
  while (v18 != 1072);
  *((void *)this + 1752) = 0;
  *((void *)this + 1753) = 0;
  *((void *)this + 1754) = 0;
  operator new[]();
}

void sub_1BB679FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, applesauce::CF::DictionaryRef *a10, applesauce::CF::DictionaryRef *a11, applesauce::CF::StringRef *a12, applesauce::CF::StringRef *a13, uint64_t a14, applesauce::CF::DictionaryRef *a15, applesauce::CF::DictionaryRef *a16, void **a17, void **a18, const void **a19, applesauce::CF::DictionaryRef *a20,const void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,VoiceProcessorV2::VPEchoProcessingParams *a26,vp::Audio_Buffer *a27,vp::Audio_Buffer *a28,vp::Audio_Buffer *a29,vp::Audio_Buffer *a30,std::mutex *a31,CADeprecated::CAMutex *a32,CADeprecated::CAMutex *a33,CADeprecated::CAMutex *a34,const void **a35,const void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,void **a42,uint64_t *a43,void *a44,applesauce::CF::DictionaryRef *a45,applesauce::CF::DictionaryRef *a46,applesauce::CF::DictionaryRef *a47,applesauce::CF::DictionaryRef *a48,applesauce::CF::DictionaryRef *a49,_Unwind_Exception *exception_objecta,PListLogger ***a51,void **a52,uint64_t *a53,uint64_t a54,uint64_t a55,vp::objc::ID *a56,uint64_t a57,CACFString *a58,uint64_t a59,uint64_t a60)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v62 - 184));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16816));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16808));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16800));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16792));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16784));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16776));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16768));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16760));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16752));
  applesauce::CF::StringRef::~StringRef(a19);
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base((uint64_t)a20);
  __int16 v63 = *(std::__shared_weak_count **)(v60 + 16680);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t v64 = *a53;
  *a53 = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  if (*((unsigned char *)a56 + 8)) {
    vp::objc::ID::~ID(a56);
  }
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16616));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16584));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16576));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16568));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16560));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16552));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16544));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16536));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16528));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16520));
  vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)(v60 + 16496));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16488));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16480));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16472));
  applesauce::CF::StringRef::~StringRef(a21);
  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write(a22);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16352));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16344));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16336));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16328));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16320));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v60 + 16312));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16304));
  applesauce::CF::StringRef::~StringRef((const void **)(v60 + 16296));
  uint64_t v65 = *(std::__shared_weak_count **)(v60 + 16288);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (*(char *)(a59 + 119) < 0) {
    operator delete(*a17);
  }
  VoiceProcessor::ConfigInfo::~ConfigInfo((VoiceProcessor::ConfigInfo *)(v60 + 16136));
  *(void *)(v62 - 144) = v60 + 16112;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  *(void *)(v62 - 144) = v60 + 16088;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  *(void *)(v62 - 144) = v60 + 16064;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  *(void *)(v62 - 144) = a23;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  __int16 v66 = *(std::__shared_weak_count **)(v60 + 15984);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  ABLRingBuffer<float>::~ABLRingBuffer(a24);
  uint64_t v67 = *(void *)(v60 + 15816);
  *(void *)(v60 + 15816) = 0;
  if (v67) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v68 = 0;
  uint64_t v69 = v60 + 15784;
  do
  {
    myFreeABLDynamic((AudioBufferList **)(v69 + v68));
    *(void *)(v69 + v68) = 0;
    v68 -= 24;
  }
  while (v68 != -288);
  uint64_t v70 = 0;
  uint64_t v71 = v60 + 15488;
  do
  {
    myFreeABLDynamic((AudioBufferList **)(v71 + v70));
    *(void *)(v71 + v70) = 0;
    v70 -= 24;
  }
  while (v70 != -288);
  uint64_t v72 = *(void *)(v60 + 15112);
  *(void *)(v60 + 15112) = 0;
  if (v72) {
    MEMORY[0x1C185D370](v72, 0x1000C4089CA3EB1);
  }
  *(void *)(v62 - 144) = a25;
  std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  for (uint64_t i = 0; i != -1072; i -= 8)
    vp::Audio_Capture::~Audio_Capture((vp::Audio_Capture *)(v60 + 14008 + i));
  CADeprecated::CAAutoDelete<CALegacyLog>::set((void *)(v60 + 12632), 0);
  CADeprecated::CAAutoDelete<CALegacyLog>::set(a58, 0);
  if (*(char *)(a57 + 71) < 0) {
    operator delete(*(void **)(v60 + 12600));
  }
  VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams(a26);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table(v60 + 4312);
  vp::Audio_Buffer::~Audio_Buffer(a27);
  vp::Audio_Buffer::~Audio_Buffer(a28);
  vp::Audio_Buffer::~Audio_Buffer(a29);
  vp::Audio_Buffer::~Audio_Buffer(a30);
  std::unique_ptr<TuningPListMgr>::reset[abi:ne180100](a51, 0);
  std::mutex::~mutex(a31);
  CADeprecated::CAMutex::~CAMutex(a32);
  CADeprecated::CAMutex::~CAMutex(a33);
  CADeprecated::CAMutex::~CAMutex(a34);
  float v74 = (void **)(v60 + 2336);
  uint64_t v75 = *(void **)(v60 + 2360);
  if (v75)
  {
    *(void *)(v60 + 2368) = v75;
    operator delete(v75);
  }
  float v76 = *v74;
  if (*v74)
  {
    *(void *)(v60 + 2344) = v76;
    operator delete(v76);
  }
  CAAudioChannelLayout::~CAAudioChannelLayout((atomic_uint **)(v61 + 2204));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v61 + 2140));
  uint64_t v77 = *(void **)(v60 + 2184);
  if (v77)
  {
    free(v77);
    *(void *)(v60 + 2184) = 0;
  }
  applesauce::CF::StringRef::~StringRef(a35);
  float v78 = *(void **)(v60 + 2160);
  if (v78)
  {
    free(v78);
    *(void *)(v60 + 2160) = 0;
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v61 + 2060));
  int64x2_t v79 = *(void **)(v60 + 2128);
  if (v79)
  {
    *(void *)(v60 + 2136) = v79;
    operator delete(v79);
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v61 + 2028));
  float v80 = *(void **)(v60 + 2096);
  if (v80)
  {
    *(void *)(v60 + 2104) = v80;
    operator delete(v80);
  }
  applesauce::CF::ArrayRef::~ArrayRef(a36);
  std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100](v61 + 1908);
  uint64_t v81 = *(void *)(v60 + 1992);
  *(void *)(v60 + 1992) = 0;
  if (v81) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (*(unsigned char *)(v60 + 1984))
  {
    *(void *)(v62 - 144) = v61 + 1868;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  }
  if (*(unsigned char *)(v60 + 1952))
  {
    *(void *)(v62 - 144) = v61 + 1836;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  }
  ABLRingBuffer<float>::~ABLRingBuffer(a37);
  ABLRingBuffer<float>::~ABLRingBuffer(a38);
  if (*(unsigned char *)(v60 + 1392))
  {
    *(void *)(v62 - 144) = v61 + 1276;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  }
  ABLRingBuffer<float>::~ABLRingBuffer(a39);
  ABLRingBuffer<float>::~ABLRingBuffer(a60);
  ABLRingBuffer<float>::~ABLRingBuffer(a40);
  if (*a44)
  {
    (*(void (**)(void))(*(void *)*a44 + 8))(*a44);
    *a44 = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)(v61 + 1036), 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(a41, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)(v61 + 1020), 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(a42, 0);
  float v82 = *(void **)(v60 + 456);
  if (v82) {
    free(v82);
  }
  unint64_t v83 = *(void **)(v60 + 432);
  if (v83) {
    free(v83);
  }
  uint64_t v84 = *(void *)(v60 + 392);
  *(void *)(v60 + 392) = 0;
  if (v84) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v85 = *(void *)(v60 + 384);
  *(void *)(v60 + 384) = 0;
  if (v85) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v86 = *a43;
  *a43 = 0;
  if (v86) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block((const void **)(v61 + 4));
  if (*(char *)(v60 + 55) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v60 + 31) < 0) {
    operator delete(*a52);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::operator()(uint64_t a1)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)&cf, (VoiceProcessorV2 *)v1);
  unint64_t v2 = (NSString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v25 = v2;
  unint64_t isPersonalMediaEnabled = va::PersonalAudioInterface::isPersonalMediaEnabled(&v25);
  int v4 = isPersonalMediaEnabled;
  if (v2) {
    CFRelease(v2);
  }
  if (v4)
  {
    unint64_t isPersonalMediaEnabled = VoiceProcessorV2::GetRefPortHLC2chStateForPME((VoiceProcessorV2 *)v1);
    BOOL v5 = (isPersonalMediaEnabled & 1) == 0;
  }
  else
  {
    BOOL v5 = 1;
  }
  int v6 = va::PersonalAudioInterface::isPersonalMediaEnabled((va::PersonalAudioInterface *)isPersonalMediaEnabled);
  if ((*(unsigned char *)(v1 + 8901) & 0x20) != 0 && (*(unsigned char *)(v1 + 8909) & 0x20) != 0 && *(void *)(v1 + 3864))
  {
    int v7 = v6;
    if (v4)
    {
      long long v8 = (NSString *)cf;
      if (cf) {
        CFRetain(cf);
      }
      BOOL v23 = v8;
      va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)&v24, &v23);
      if (v8) {
        CFRelease(v8);
      }
    }
    else
    {
      va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)&v24);
    }
    if (v24)
    {
      inData[0] = v24;
      AudioUnitSetProperty(*(AudioUnit *)(v1 + 3864), 0, 0, 0, inData, 8u);
    }
    int v9 = (v7 | v4) & v5;
    int v22 = v9 ^ 1;
    AudioUnitSetProperty(*(AudioUnit *)(v1 + 3864), 0x15u, 0, 0, &v22, 4u);
    if (*(unsigned char *)(v1 + 15961))
    {
      CFTypeRef v10 = v24;
      if (!v24) {
        goto LABEL_36;
      }
      CFRetain(v24);
      CFArrayRef v20 = v10;
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)inData, "hlc_paconfig", &v20);
      int valuePtr = v9;
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFNumberRef v19 = v11;
      if (!v11)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)v29, "hlc_enable", (const void **)&v19);
      v21[0] = inData;
      v21[1] = 2;
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v21);
      uint64_t v13 = *(const void **)(v1 + 2232);
      *(void *)(v1 + 2232) = CFDictionaryRef;
      if (v13) {
        CFRelease(v13);
      }
      for (uint64_t i = 0; i != -4; i -= 2)
      {
        CFNumberRef v15 = (const void *)v29[i + 1];
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v16 = (const void *)inData[i + 2];
        if (v16) {
          CFRelease(v16);
        }
      }
      CFRelease(v11);
      CFRelease(v10);
      if (*(unsigned char *)(v1 + 15961)) {
        VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v1, 1751933808);
      }
      uint64_t v17 = *(const void **)(v1 + 2232);
      *(void *)(v1 + 2232) = 0;
      if (v17) {
        CFRelease(v17);
      }
    }
    if (v24) {
      CFRelease(v24);
    }
  }
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB67AC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef a16, uint64_t a17, CFTypeRef a18, uint64_t a19, CFTypeRef a20,CFTypeRef cf)
{
  CFRelease(v21);
  if (cf) {
    CFRelease(cf);
  }
  if (a20) {
    CFRelease(a20);
  }
  if (a16) {
    CFRelease(a16);
  }
  if (a18) {
    CFRelease(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14BBC10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14BBC10;
  result[1] = v3;
  return result;
}

void std::__function::__func<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0,std::allocator<VoiceProcessorV3::VoiceProcessorV3(vp::Context const&)::$_0>,void ()(std::optional<unsigned long long>)>::~__func()
{
}

void vp::v3::create(vp::v3 *this, const vp::Context *a2)
{
}

void sub_1BB67AEB4(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C400C9E1F8BLL);
  _Unwind_Resume(a1);
}

AUSM::IRManager::ReverbBusConfig *AUSM::IRManager::ReverbBusConfig::ReverbBusConfig(AUSM::IRManager::ReverbBusConfig *this)
{
  uint64_t v2 = IR::IRDataAttributes::IRDataAttributes((uint64_t)this, 0, 0, 0, 0.0);
  *(_DWORD *)(v2 + 152) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v2 + 156) = _D0;
  *(unsigned char *)(v2 + 164) = 0;
  IR::IRDataAttributes::IRDataAttributes(v2 + 168, 0, 0, 0, 0.0);
  *((_DWORD *)this + 80) = 0;
  *(void *)((char *)this + 324) = 0x3F8000003F800000;
  *((unsigned char *)this + 332) = 0;
  return this;
}

void sub_1BB67AF4C(_Unwind_Exception *a1)
{
  IR::IRDataAttributes::~IRDataAttributes(v1);
  _Unwind_Resume(a1);
}

void AUSM::IRManager::updateHRIRAttributes(AUSM::IRManager *this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)((char *)this + 1560);
  std::mutex::lock((std::mutex *)((char *)this + 1560));
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)this + 160));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(void *)this + 248);
  int v4 = v3 & 1;
  CFTypeRef v5 = cf;
  if (cf)
  {
    CFRetain(cf);
    _OWORD v47[2] = v5;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v49, v5, 128, v4 == 0, 0.0);
    int v6 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = v49;
    *((unsigned char *)this + 120) = v53;
    int v7 = (const void *)*((void *)this + 16);
    CFTypeRef v8 = v56;
    *((void *)this + 16) = v54;
    *(_OWORD *)((char *)this + 72) = v50;
    *(_OWORD *)((char *)this + 88) = v51;
    *(_OWORD *)((char *)this + 104) = v52;
    CFTypeRef v49 = v6;
    CFTypeRef v54 = v7;
    *(_OWORD *)((char *)this + 136) = v55;
    CFTypeRef v9 = (CFTypeRef)*((void *)this + 19);
    *((void *)this + 19) = v8;
    long long v10 = v57[0];
    *(_OWORD *)((char *)this + 169) = *(_OWORD *)((char *)v57 + 9);
    *((_OWORD *)this + 10) = v10;
    CFNumberRef v11 = (const void *)*((void *)this + 24);
    *((_DWORD *)this + 52) = v60;
    unint64_t v12 = v58;
    uint64_t v13 = v59;
    CFTypeRef v56 = v9;
    float v58 = v11;
    *((void *)this + 24) = v12;
    *((void *)this + 25) = v13;
    if (v11)
    {
      CFRelease(v11);
      CFTypeRef v9 = v56;
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v54) {
      CFRelease(v54);
    }
    if (v49) {
      CFRelease(v49);
    }
    CFRelease(v5);
  }
  else
  {
    IR::getPresetDataAttributes();
    unint64_t v14 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = v49;
    *((unsigned char *)this + 120) = v53;
    CFNumberRef v15 = (const void *)*((void *)this + 16);
    CFTypeRef v16 = v56;
    *((void *)this + 16) = v54;
    *(_OWORD *)((char *)this + 72) = v50;
    *(_OWORD *)((char *)this + 88) = v51;
    *(_OWORD *)((char *)this + 104) = v52;
    CFTypeRef v49 = v14;
    CFTypeRef v54 = v15;
    *(_OWORD *)((char *)this + 136) = v55;
    CFTypeRef v17 = (CFTypeRef)*((void *)this + 19);
    *((void *)this + 19) = v16;
    long long v18 = v57[0];
    *(_OWORD *)((char *)this + 169) = *(_OWORD *)((char *)v57 + 9);
    *((_OWORD *)this + 10) = v18;
    CFNumberRef v19 = (const void *)*((void *)this + 24);
    *((_DWORD *)this + 52) = v60;
    CFArrayRef v20 = v58;
    uint64_t v21 = v59;
    CFTypeRef v56 = v17;
    float v58 = v19;
    *((void *)this + 24) = v20;
    *((void *)this + 25) = v21;
    if (v19)
    {
      CFRelease(v19);
      CFTypeRef v17 = v56;
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v54) {
      CFRelease(v54);
    }
    if (v49) {
      CFRelease(v49);
    }
    *((unsigned char *)this + 80) = v4 ^ 1;
    if (v4) {
      *((_DWORD *)this + 19) = 128;
    }
  }
  *((_DWORD *)this + 18) = *((_DWORD *)this + 8);
  uint64_t isEnabledFeature = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)this, @"SourceExtent");
  if (!isEnabledFeature) {
    goto LABEL_43;
  }
  uint64_t isEnabledFeature = _os_feature_enabled_impl();
  if (isEnabledFeature)
  {
    CFRetain(@"sizes");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v46, @"sizes");
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v45, *(void *)this + 2264);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v49, v46, &v45);
    CFRetain(@"tGridOrder");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v44, @"tGridOrder");
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v43, *(void *)this + 2336);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>((void *)&v50 + 1, v44, &v43);
    CFRetain(@"samplingFactors");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v42, @"samplingFactors");
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v41, *(void *)this + 2408);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>((void *)&v51 + 1, v42, &v41);
    v47[0] = &v49;
    v47[1] = 3;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v47);
    CFTypeRef v24 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = CFDictionaryRef;
    if (v24) {
      CFRelease(v24);
    }
    for (uint64_t i = 0; i != -48; i -= 16)
    {
      uint64_t v26 = *(const void **)((char *)&v52 + i);
      if (v26) {
        CFRelease(v26);
      }
      uint64_t v27 = *(const void **)((char *)&v51 + i + 8);
      if (v27) {
        CFRelease(v27);
      }
    }
    if (v41) {
      CFRelease(v41);
    }
    if (v42) {
      CFRelease(v42);
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v44) {
      CFRelease(v44);
    }
    if (v45) {
      CFRelease(v45);
    }
    uint64_t isEnabledFeature = (uint64_t)v46;
    if (v46) {
      CFRelease(v46);
    }
LABEL_43:
    char v28 = 0;
    goto LABEL_45;
  }
  char v28 = 1;
LABEL_45:
  *((unsigned char *)this + 184) = v28;
  unsigned int v29 = atomic_load((unsigned int *)(*(void *)this + 1580));
  uint64_t v30 = *(void *)this;
  if (v29)
  {
    unsigned int v31 = atomic_load((unsigned int *)(v30 + 1584));
    if (v31 != 1) {
      unsigned int v31 = 2;
    }
    atomic_store(v31, (unsigned int *)(*(void *)this + 2552));
  }
  else
  {
    atomic_store(0, (unsigned int *)(v30 + 2552));
  }
  unsigned int v32 = atomic_load((unsigned int *)(*(void *)this + 2552));
  *((_DWORD *)this + 28) = v32;
  LOBYTE(v32) = atomic_load((unsigned __int8 *)(*(void *)this + 1577));
  *((unsigned char *)this + 120) = (v32 & 1) == 0;
  atomic_store(0, (unsigned int *)this + 9);
  if (!atomic_load((unsigned int *)(*(void *)this + 2552)))
  {
    unsigned __int8 v34 = atomic_load((unsigned __int8 *)(*(void *)this + 160));
    if (v34)
    {
      if (*((_DWORD *)this + 19))
      {
        CFNumberRef v35 = (IR::IRDataLoader *)IR::IRDataLoader::instance((IR::IRDataLoader *)isEnabledFeature);
        unsigned int FilterLength = IR::IRDataLoader::getFilterLength(v35, (AUSM::IRManager *)((char *)this + 64));
        if (FilterLength)
        {
          unsigned int v37 = *((_DWORD *)this + 19);
          if (FilterLength < v37)
          {
            unsigned int v38 = 1 << -(char)__clz(FilterLength - 1);
            if (v38 <= 2) {
              unsigned int v38 = 2;
            }
            BOOL v39 = v37 >= v38;
            unsigned int v40 = v37 - v38;
            if (v40 != 0 && v39)
            {
              atomic_store(v40, (unsigned int *)this + 9);
              *((_DWORD *)this + 19) = v38;
            }
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  std::mutex::unlock(v2);
}

void sub_1BB67B45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AUSM::IRManager::updateXTCIRAttributes(AUSM::IRManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 1560);
  std::mutex::lock((std::mutex *)((char *)this + 1560));
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)this + 160));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v32, *(void *)this + 320);
  int v4 = v3 & 1;
  CFTypeRef v5 = v32;
  if (v32)
  {
    CFRetain(v32);
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v20, v5, 128, v4 == 0, *((float *)this + 8));
    int v6 = (const void *)*((void *)this + 27);
    *((void *)this + 27) = v20;
    *((_OWORD *)this + 14) = v21;
    *((_OWORD *)this + 15) = v22;
    *((_OWORD *)this + 16) = v23;
    *((unsigned char *)this + 272) = v24;
    int v7 = (const void *)*((void *)this + 35);
    *((void *)this + 35) = v25;
    CFTypeRef v20 = v6;
    CFTypeRef v25 = v7;
    *((_OWORD *)this + 18) = v26;
    CFTypeRef v8 = (CFTypeRef)*((void *)this + 38);
    *((void *)this + 38) = cf;
    long long v9 = v28[0];
    *(_OWORD *)((char *)this + 321) = *(_OWORD *)((char *)v28 + 9);
    *(_OWORD *)((char *)this + 312) = v9;
    long long v10 = (const void *)*((void *)this + 43);
    *((_DWORD *)this + 90) = v31;
    CFNumberRef v11 = v29;
    uint64_t v12 = v30;
    CFTypeRef cf = v8;
    unsigned int v29 = v10;
    *((void *)this + 43) = v11;
    *((void *)this + 44) = v12;
    if (v10)
    {
      CFRelease(v10);
      CFTypeRef v8 = cf;
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v25) {
      CFRelease(v25);
    }
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(v5);
  }
  else
  {
    IR::getPresetDataAttributes();
    uint64_t v13 = (const void *)*((void *)this + 27);
    *((void *)this + 27) = v20;
    *((_OWORD *)this + 14) = v21;
    *((_OWORD *)this + 15) = v22;
    *((_OWORD *)this + 16) = v23;
    *((unsigned char *)this + 272) = v24;
    unint64_t v14 = (const void *)*((void *)this + 35);
    *((void *)this + 35) = v25;
    CFTypeRef v20 = v13;
    CFTypeRef v25 = v14;
    *((_OWORD *)this + 18) = v26;
    CFTypeRef v15 = (CFTypeRef)*((void *)this + 38);
    *((void *)this + 38) = cf;
    long long v16 = v28[0];
    *(_OWORD *)((char *)this + 321) = *(_OWORD *)((char *)v28 + 9);
    *(_OWORD *)((char *)this + 312) = v16;
    CFTypeRef v17 = (const void *)*((void *)this + 43);
    *((_DWORD *)this + 90) = v31;
    long long v18 = v29;
    uint64_t v19 = v30;
    CFTypeRef cf = v15;
    unsigned int v29 = v17;
    *((void *)this + 43) = v18;
    *((void *)this + 44) = v19;
    if (v17)
    {
      CFRelease(v17);
      CFTypeRef v15 = cf;
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v25) {
      CFRelease(v25);
    }
    if (v20) {
      CFRelease(v20);
    }
    *((unsigned char *)this + 232) = v4 ^ 1;
    if (v4) {
      *((_DWORD *)this + 57) = 128;
    }
  }
  *((_DWORD *)this + 56) = *((_DWORD *)this + 8);
  *((unsigned char *)this + 336) = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)this, @"SourceExtent");
  if (v5) {
    CFRelease(v5);
  }
  std::mutex::unlock(v2);
}

void sub_1BB67B818(_Unwind_Exception *a1)
{
  applesauce::CF::URLRef::~URLRef((const void **)(v2 - 40));
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AUSM::IRManager::getHRIRAttributes(AUSM::IRManager *this, uint64_t a2)
{
  int v4 = (std::mutex *)(a2 + 1560);
  std::mutex::lock((std::mutex *)(a2 + 1560));
  IR::IRDataAttributes::IRDataAttributes((uint64_t)this, a2 + 64);

  std::mutex::unlock(v4);
}

void AUSM::IRManager::getXTCIRAttributes(AUSM::IRManager *this, uint64_t a2)
{
  int v4 = (std::mutex *)(a2 + 1560);
  std::mutex::lock((std::mutex *)(a2 + 1560));
  IR::IRDataAttributes::IRDataAttributes((uint64_t)this, a2 + 216);

  std::mutex::unlock(v4);
}

void AUSM::IRManager::getEarlyReverbAttributes(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a2 + 1560);
  std::mutex::lock((std::mutex *)(a2 + 1560));
  if (a3)
  {
    if (a3 == 2) {
      uint64_t v7 = a2 + 1200;
    }
    else {
      uint64_t v7 = a2 + 528;
    }
  }
  else
  {
    uint64_t v7 = a2 + 864;
  }
  IR::IRDataAttributes::IRDataAttributes(a1, v7);

  std::mutex::unlock(v6);
}

void AUSM::IRManager::getLateReverbAttributes(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a2 + 1560);
  std::mutex::lock((std::mutex *)(a2 + 1560));
  if (a3)
  {
    if (a3 == 2) {
      uint64_t v7 = a2 + 1368;
    }
    else {
      uint64_t v7 = a2 + 696;
    }
  }
  else
  {
    uint64_t v7 = a2 + 1032;
  }
  IR::IRDataAttributes::IRDataAttributes(a1, v7);

  std::mutex::unlock(v6);
}

uint64_t AUSM::IRManager::hasRoomCongruenceAttributes(AUSM::IRManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 1560);
  std::mutex::lock((std::mutex *)((char *)this + 1560));
  uint64_t v3 = *((unsigned __int8 *)this + 520);
  std::mutex::unlock(v2);
  return v3;
}

void AUSM::IRManager::setRoomCongruenceAttributes(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 1560);
  std::mutex::lock((std::mutex *)(a1 + 1560));
  std::__optional_storage_base<IR::IRDataAttributes,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<IR::IRDataAttributes,false> const&>((IR::IRDataAttributes *)(a1 + 368), a2);
  if (*(unsigned char *)(a1 + 520)) {
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 32);
  }

  std::mutex::unlock(v4);
}

uint64_t AUSM::IRManager::getReverbModelingDelay(uint64_t a1, int a2)
{
  int v4 = (std::mutex *)(a1 + 1560);
  std::mutex::lock((std::mutex *)(a1 + 1560));
  uint64_t v5 = a1 + 864;
  uint64_t v6 = 528;
  if (a2) {
    uint64_t v5 = a1 + 528;
  }
  else {
    uint64_t v6 = 864;
  }
  uint64_t v7 = *(void *)(v5 + 168);
  if (*(void *)(a1 + v6))
  {
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)(v5 + 320);
      unsigned int v9 = *(_DWORD *)(v5 + 152);
      if (v8 >= v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v8;
      }
    }
    else
    {
      uint64_t v10 = *(unsigned int *)(v5 + 152);
    }
  }
  else if (v7)
  {
    uint64_t v10 = *(unsigned int *)(v5 + 320);
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v4);
  return v10;
}

void AUSM::IRManager::updateCombinedReverbAttributes(void)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  IR::IRDataAttributes::IRDataAttributes(a1, 0, 0, 0, 0.0);
  if (*(void *)a3) {
    BOOL v8 = *(void *)a4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (*(unsigned char *)(a3 + 164))
    {
      IR::IRDataAttributes::operator=(a1, a3);
      unsigned int v9 = *(const void **)a4;
      if (*(unsigned char *)(a4 + 164))
      {
        uint64_t v10 = *(const void **)(a1 + 64);
        *(void *)(a1 + 64) = v9;
        if (v9) {
          CFRetain(v9);
        }
        if (v10) {
          CFRelease(v10);
        }
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a4 + 24);
      }
      else
      {
        CFTypeRef v15 = *(const void **)(a1 + 88);
        *(void *)(a1 + 88) = v9;
        if (v9) {
          CFRetain(v9);
        }
        if (v15) {
          CFRelease(v15);
        }
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a4 + 40);
        *(_DWORD *)(a1 + 104) = 0;
      }
      *(_DWORD *)(a1 + 100) = 0;
    }
    else
    {
      unsigned __int8 v11 = atomic_load((unsigned __int8 *)(*(void *)a2 + 86));
      if (v11)
      {
        unsigned int v12 = atomic_load((unsigned int *)(*(void *)a2 + 88));
        if (v12 == 1)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v13 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            unint64_t v14 = a2 + 8;
            if (a2[31] < 0) {
              unint64_t v14 = (void *)*v14;
            }
            *(_DWORD *)std::string buf = 136315394;
            CFTypeRef v17 = v14;
            __int16 v18 = 2080;
            uint64_t v19 = "operator()";
            _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] Scene reverb IR is non-HOA, post-processing reverb will run in parallel.", buf, 0x16u);
          }
        }
      }
    }
  }
}

void sub_1BB67BD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL applesauce::CF::details::has_key<char const(&)[20]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v6 = v5;
  int v7 = CFDictionaryContainsKey(a1, v5);
  CFRelease(v6);
  return v7 != 0;
}

void sub_1BB67BDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,char const(&)[20]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[20]>(a1, a2);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1BB67BE88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float applesauce::CF::at_or<float,char const(&)[19]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[19]>(a1, a2);
  if (!v4) {
    return *(float *)a3;
  }
  uint64_t v5 = applesauce::CF::convert_as<float,0>(v4);
  float result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0) {
    return *(float *)a3;
  }
  return result;
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[14]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(a1, a2);
  if (!v4) {
    return *a3;
  }
  uint64_t result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0) {
    return result;
  }
  else {
    return *a3;
  }
}

float applesauce::CF::at_or<float,__CFString const*>(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  CFDictionaryRef v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4) {
    return *(float *)a3;
  }
  uint64_t v5 = applesauce::CF::convert_as<float,0>(v4);
  float result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0) {
    return *(float *)a3;
  }
  return result;
}

void Beamformer_BeamNF::CmhBEAM::CmhBEAM(Beamformer_BeamNF::CmhBEAM *this)
{
}

uint64_t Beamformer_BeamNF::CmhBEAM::initialize(int32x2_t *this, int a2, __int32 a3, int a4)
{
  int32x2_t v8 = this[4];
  if (v8)
  {
    MEMORY[0x1C185D340](*(void *)&v8, 0x80C80B8603338);
    this[4] = 0;
  }
  int32x2_t v9 = this[5];
  if (v9)
  {
    MEMORY[0x1C185D340](*(void *)&v9, 0x80C80B8603338);
    this[5] = 0;
  }
  int32x2_t v10 = this[6];
  if (v10)
  {
    MEMORY[0x1C185D340](*(void *)&v10, 0x80C80B8603338);
    this[6] = 0;
  }
  int32x2_t v11 = this[10];
  if (v11)
  {
    MEMORY[0x1C185D340](*(void *)&v11, 0x1000C8052888210);
    this[10] = 0;
  }
  int32x2_t v12 = this[7];
  if (v12)
  {
    MEMORY[0x1C185D340](*(void *)&v12, 0x80C80B8603338);
    this[7] = 0;
  }
  int32x2_t v13 = this[8];
  if (v13)
  {
    MEMORY[0x1C185D340](*(void *)&v13, 0x80C80B8603338);
    this[8] = 0;
  }
  int32x2_t v14 = this[9];
  if (v14)
  {
    MEMORY[0x1C185D340](*(void *)&v14, 0x80C80B8603338);
    this[9] = 0;
  }
  if (this[15].i32[1])
  {
    if (this[7])
    {
      __int32 v15 = this->i32[0];
      if (this->i32[0] >= 1)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = *(void *)(*(void *)&this[7] + 8 * v16);
          if (v17)
          {
            MEMORY[0x1C185D340](v17, 0x1000C8052888210);
            __int32 v15 = this->i32[0];
          }
          ++v16;
        }
        while (v16 < v15);
      }
    }
    if (this[8])
    {
      int v18 = this[1].i32[0];
      if (v18 >= 1)
      {
        for (uint64_t i = 0; i < v18; ++i)
        {
          uint64_t v20 = *(void *)(*(void *)&this[8] + 8 * i);
          if (v20)
          {
            MEMORY[0x1C185D340](v20, 0x1000C8052888210);
            int v18 = this[1].i32[0];
          }
        }
      }
    }
    if (this[9])
    {
      int v21 = this->i32[1];
      if (v21 >= 1)
      {
        for (uint64_t j = 0; j < v21; ++j)
        {
          uint64_t v23 = *(void *)(*(void *)&this[9] + 8 * j);
          if (v23)
          {
            MEMORY[0x1C185D340](v23, 0x1000C8052888210);
            int v21 = this->i32[1];
          }
        }
      }
    }
  }
  int32x2_t v24 = this[7];
  if (v24)
  {
    MEMORY[0x1C185D340](*(void *)&v24, 0x80C80B8603338);
    this[7] = 0;
  }
  int32x2_t v25 = this[8];
  if (v25)
  {
    MEMORY[0x1C185D340](*(void *)&v25, 0x80C80B8603338);
    this[8] = 0;
  }
  if (this->i32[1] >= 1)
  {
    int32x2_t v26 = this[9];
    if (v26)
    {
      MEMORY[0x1C185D340](*(void *)&v26, 0x80C80B8603338);
      this[9] = 0;
    }
  }
  if ((a4 - 3) < 0xFFFFFFFE) {
    return 5;
  }
  if ((a3 - 46) < 0xFFFFFFDC) {
    return 6;
  }
  if (a2 > 23999)
  {
    if (a2 > 47999)
    {
      if (a2 != 48000)
      {
        if (a2 != 88200 && a2 != 96000) {
          goto LABEL_182;
        }
        unsigned int v30 = 1024;
        int v28 = 1;
        goto LABEL_64;
      }
LABEL_63:
      int v28 = 0;
      unsigned int v30 = 512;
LABEL_64:
      int v29 = 1;
      goto LABEL_66;
    }
    if (a2 != 24000 && a2 != 32000)
    {
      if (a2 != 44100) {
        goto LABEL_182;
      }
      goto LABEL_63;
    }
    goto LABEL_55;
  }
  if (a2 <= 11999)
  {
    if (a2 == 8000)
    {
      int v28 = 0;
      int v29 = 0;
      unsigned int v30 = 64;
      goto LABEL_66;
    }
    if (a2 != 11025)
    {
LABEL_182:
      this[13] = 0;
      return 1;
    }
LABEL_62:
    int v28 = 0;
    int v29 = 0;
    unsigned int v30 = 128;
    goto LABEL_66;
  }
  if (a2 == 12000 || a2 == 16000) {
    goto LABEL_62;
  }
  if (a2 != 22050) {
    goto LABEL_182;
  }
LABEL_55:
  int v28 = 0;
  int v29 = 0;
  unsigned int v30 = 256;
LABEL_66:
  this[13].i32[0] = a2;
  this[13].i32[1] = v30;
  unsigned int v31 = v30 >> 1;
  unsigned int v32 = (5 * v30) >> 3;
  this[14].i32[1] = 0;
  this[16].i32[0] = 0;
  if (!v28 || !v29)
  {
    if (((v31 - 1) & 0x100) != 0)
    {
      if (0x100 % v32) {
        return 2;
      }
      int v33 = 4;
    }
    else
    {
      int v33 = 3;
      unsigned int v32 = v30 >> 1;
    }
    this[14].i32[1] = v32;
    this[15].i32[1] = 0;
    this[16].i32[0] = v33;
    unsigned int v34 = 0x100 / v32;
    goto LABEL_79;
  }
  if ((v30 & 0x1C0) == 0)
  {
    int v33 = 3;
    unsigned int v32 = v30 >> 1;
    goto LABEL_76;
  }
  if (((5 * (_WORD)v30) & 0x7C0) != 0) {
    return 2;
  }
  int v33 = 4;
LABEL_76:
  unsigned int v34 = 0;
  this[14].i32[1] = v32;
  this[15].i32[1] = v32 >> 8;
  this[16].i32[0] = v33;
LABEL_79:
  this[15].i32[0] = v34;
  this[18].i32[1] = a3;
  this[17] = vadd_s32(vdup_n_s32(v31), (int32x2_t)0x1FFFFFFFFLL);
  int v35 = -1;
  LOWORD(v31) = v30;
  do
  {
    unsigned int v31 = (unsigned __int16)v31 >> 1;
    ++v35;
  }
  while (v31);
  this[14].i32[0] = v35;
  this[16].i32[1] = v33 * v30;
  CmhBEAMprocOpt::deallocate_memory(&this[11]);
  this[12].i32[1] = a4;
  int v36 = this[14].i32[0];
  if (v36 < 1)
  {
    int v38 = 1;
  }
  else
  {
    unsigned __int16 v37 = 1;
    do
    {
      v37 *= 2;
      --v36;
    }
    while (v36);
    int v38 = v37;
  }
  signed int v39 = this[13].i32[1];
  this[22].i32[0] = v39 != v38;
  if (this[11].i32[0])
  {
    LODWORD(v40) = this[18].i32[0];
    LODWORD(v41) = a4;
  }
  else
  {
    this[11].i32[0] = 1;
    uint64_t v40 = this[18].i32[0];
    if ((int)v40 < 0) {
      size_t v70 = -1;
    }
    else {
      size_t v70 = 8 * v40;
    }
    uint64_t v71 = operator new[](v70, MEMORY[0x1E4FBA2D0]);
    this[28] = (int32x2_t)v71;
    if (!v71) {
      return 4;
    }
    bzero(v71, 8 * (int)v40);
    if ((int)v40 >= 1)
    {
      uint64_t v72 = 0;
      uint64_t v73 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      while (1)
      {
        uint64_t v74 = this[13].i32[1];
        size_t v75 = 4 * v74;
        size_t v76 = (int)v74 < 0 ? -1 : 4 * v74;
        *(void *)(*(void *)&this[28] + 8 * v72) = operator new[](v76, v73);
        uint64_t v77 = *(void **)(*(void *)&this[28] + 8 * v72);
        if (!v77) {
          return 4;
        }
        bzero(v77, v75);
        ++v72;
        uint64_t v40 = this[18].i32[0];
        if (v72 >= v40)
        {
          signed int v39 = this[13].i32[1];
          break;
        }
      }
    }
    size_t v78 = 4 * v39;
    size_t v79 = v39 < 0 ? -1 : 4 * v39;
    float v80 = operator new[](v79, MEMORY[0x1E4FBA2D0]);
    this[31] = (int32x2_t)v80;
    if (!v80) {
      return 4;
    }
    bzero(v80, v78);
    uint64_t v81 = operator new[](v79, MEMORY[0x1E4FBA2D0]);
    this[32] = (int32x2_t)v81;
    if (!v81) {
      return 4;
    }
    bzero(v81, v78);
    uint64_t v41 = this[12].i32[1];
    size_t v82 = (int)v41 < 0 ? -1 : 8 * v41;
    unint64_t v83 = operator new[](v82, MEMORY[0x1E4FBA2D0]);
    this[27] = (int32x2_t)v83;
    if (!v83) {
      return 4;
    }
    bzero(v83, 8 * (int)v41);
    if ((int)v41 >= 1)
    {
      uint64_t v84 = 0;
      uint64_t v85 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      while (1)
      {
        uint64_t v86 = this[13].i32[1];
        size_t v87 = 4 * v86;
        size_t v88 = (int)v86 < 0 ? -1 : 4 * v86;
        *(void *)(*(void *)&this[27] + 8 * v84) = operator new[](v88, v85);
        uint64_t v89 = *(void **)(*(void *)&this[27] + 8 * v84);
        if (!v89) {
          return 4;
        }
        bzero(v89, v87);
        if (++v84 >= this[12].i32[1])
        {
          LODWORD(v40) = this[18].i32[0];
          LODWORD(v41) = this[12].i32[1];
          break;
        }
      }
    }
    int v90 = v40 + 1;
    size_t v91 = (int)v40 < -1 ? -1 : 16 * v90;
    uint64_t v92 = (char *)operator new[](v91, MEMORY[0x1E4FBA2D0]);
    this[30] = (int32x2_t)v92;
    if (!v92) {
      return 4;
    }
    uint64_t v126 = v90;
    if ((v40 & 0x80000000) == 0)
    {
      uint64_t v93 = this[13].i32[1];
      if ((int)v93 < 0) {
        size_t v94 = -1;
      }
      else {
        size_t v94 = 4 * v93;
      }
      uint64_t v95 = (uint64_t)(int)(v93 + ((int)v93 < 0)) >> 1;
      uint64_t v96 = v126;
      unint64_t v97 = v92 + 8;
      do
      {
        uint64_t v98 = (char *)operator new[](v94, MEMORY[0x1E4FBA2D0]);
        *(v97 - 1) = v98;
        if (!v98) {
          return 4;
        }
        void *v97 = &v98[4 * v95];
        v97 += 2;
      }
      while (--v96);
    }
    size_t v99 = (int)v41 < 0 ? -1 : 16 * (int)v41;
    float v100 = (char *)operator new[](v99, MEMORY[0x1E4FBA2D0]);
    this[29] = (int32x2_t)v100;
    if (!v100) {
      return 4;
    }
    int v101 = this[13].i32[1];
    if ((int)v41 > 0)
    {
      uint64_t v124 = 4 * v101;
      int v125 = this[13].i32[1];
      if (v101 < 0) {
        size_t v102 = -1;
      }
      else {
        size_t v102 = 4 * v101;
      }
      if (v101 >= 0) {
        int v103 = this[13].i32[1];
      }
      else {
        int v103 = v101 + 1;
      }
      uint64_t v104 = (uint64_t)v103 >> 1;
      uint64_t v105 = v41;
      unint64_t v106 = v100 + 8;
      while (1)
      {
        uint64_t v107 = (char *)operator new[](v102, MEMORY[0x1E4FBA2D0]);
        *(v106 - 1) = v107;
        if (!v107) {
          return 4;
        }
        void *v106 = &v107[4 * v104];
        v106 += 2;
        if (!--v105)
        {
          size_t v108 = v124;
          int v101 = v125;
          goto LABEL_184;
        }
      }
    }
    size_t v108 = 4 * v101;
LABEL_184:
    if (v101 < 0) {
      size_t v109 = -1;
    }
    else {
      size_t v109 = v108;
    }
    long long v110 = operator new[](v109, MEMORY[0x1E4FBA2D0]);
    this[33] = (int32x2_t)v110;
    if (!v110) {
      return 4;
    }
    bzero(v110, v108);
    size_t v111 = (int)v40 < -1 ? -1 : 8 * v126;
    uint64_t v112 = operator new[](v111, MEMORY[0x1E4FBA2D0]);
    this[23] = (int32x2_t)v112;
    if (!v112) {
      return 4;
    }
    size_t v113 = 8 * (int)v40 + 8;
    bzero(v112, v113);
    std::string::size_type v114 = operator new[](v111, MEMORY[0x1E4FBA2D0]);
    this[24] = (int32x2_t)v114;
    if (!v114) {
      return 4;
    }
    bzero(v114, v113);
    if ((v40 & 0x80000000) == 0)
    {
      uint64_t v115 = 0;
      do
      {
        *(void *)(*(void *)&this[23] + v115) = 0;
        *(void *)(*(void *)&this[24] + v115) = 0;
        v115 += 8;
      }
      while (8 * v126 != v115);
    }
    std::string::size_type v116 = operator new[](v111, MEMORY[0x1E4FBA2D0]);
    this[25] = (int32x2_t)v116;
    if (!v116) {
      return 4;
    }
    bzero(v116, v113);
    if ((v40 & 0x80000000) == 0)
    {
      uint64_t v117 = 0;
      uint64_t v118 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      while (1)
      {
        uint64_t v119 = this[13].i32[1];
        size_t v120 = 4 * v119;
        size_t v121 = (int)v119 < 0 ? -1 : 4 * v119;
        *(void *)(*(void *)&this[25] + 8 * v117) = operator new[](v121, v118);
        unint64_t v122 = *(void **)(*(void *)&this[25] + 8 * v117);
        if (!v122) {
          return 4;
        }
        bzero(v122, v120);
        uint64_t v40 = this[18].i32[0];
        if (v117++ >= v40)
        {
          LODWORD(v41) = this[12].i32[1];
          signed int v39 = this[13].i32[1];
          goto LABEL_88;
        }
      }
    }
    signed int v39 = v101;
  }
LABEL_88:
  if (LPFilterBank::Initialize((LPFilterBank *)&this[189], (int)v40 + 1, v41, v39, this[14].i32[1], this[16].i32[0]))return 4; {
  if (Beamformer_BeamNF::CmhBEAM2NOpt::initialize((Beamformer_BeamNF::CmhBEAM2NOpt *)&this[34], this[13].i32[0], this[13].i32[1], this[14].i32[1], this[18].i32[1], this[12].i32[1]))return 4;
  }
  __int32 v42 = this[12].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[150].i32[1] = v42;
  if (Cns::init((Cns *)&this[147])) {
    return 4;
  }
  __int32 v43 = this[14].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[149].i32[1] = v43;
  if (Cns::init((Cns *)&this[147])) {
    return 4;
  }
  float v44 = (float)this[13].i32[0];
  Cns::deallocate_memory((uint64_t)&this[147]);
  *(float *)this[149].i32 = v44;
  if (Cns::init((Cns *)&this[147])) {
    return 4;
  }
  __int32 v45 = this[13].i32[1];
  Cns::deallocate_memory((uint64_t)&this[147]);
  this[150].i32[0] = v45;
  if (Cns::init((Cns *)&this[147])) {
    return 4;
  }
  float v46 = 628.318531 / (float)this[13].i32[0];
  double v47 = (float)(1.0 - v46) + (float)(v46 * v46) * 0.5;
  BOOL v48 = v47 <= -0.9999;
  BOOL v49 = v47 < 0.9999 || v47 <= -0.9999;
  if (v47 >= 0.9999) {
    BOOL v48 = 1;
  }
  float v50 = 0.9999;
  if (v49) {
    float v50 = -0.9999;
  }
  float v51 = v47;
  if (v48) {
    float v51 = v50;
  }
  *(float *)this[21].i32 = v51;
  *(float *)&this[21].i32[1] = (float)(v51 + 1.0) * 0.5;
  this[19] = 0;
  this[20] = 0;
  *this = (int32x2_t)2;
  this[1].i32[0] = a4;
  this[1].i32[1] = a2;
  this[2].i32[0] = 256;
  this[2].i32[1] = a3;
  this[3].i32[0] = 0;
  long long v52 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
  this[4] = (int32x2_t)v52;
  if (v52)
  {
    size_t v53 = a4 < 0 ? -1 : 8 * a4;
    CFTypeRef v54 = operator new[](v53, MEMORY[0x1E4FBA2D0]);
    this[5] = (int32x2_t)v54;
    if (v54)
    {
      long long v55 = operator new[](0x800uLL, MEMORY[0x1E4FBA2D0]);
      this[10] = (int32x2_t)v55;
      if (v55)
      {
        CFTypeRef v56 = operator new[](0x10uLL, MEMORY[0x1E4FBA2D0]);
        this[7] = (int32x2_t)v56;
        if (v56)
        {
          *CFTypeRef v56 = 0;
          v56[1] = 0;
          uint64_t v57 = operator new[](v53, MEMORY[0x1E4FBA2D0]);
          this[8] = (int32x2_t)v57;
          if (v57)
          {
            bzero(v57, 8 * a4);
            if (!this[15].i32[1])
            {
LABEL_126:
              uint64_t result = 0;
              this[3].i32[1] = 0;
              return result;
            }
            uint64_t v58 = 0;
            uint64_t v59 = this[14].i32[1];
            if ((int)v59 < 0) {
              size_t v60 = -1;
            }
            else {
              size_t v60 = 4 * v59;
            }
            size_t v61 = 4 * (int)v59;
            uint64_t v62 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
            while (1)
            {
              *(void *)(*(void *)&this[7] + 8 * v58) = operator new[](v60, v62);
              __int16 v63 = *(void **)(*(void *)&this[7] + 8 * v58);
              if (!v63) {
                break;
              }
              bzero(v63, v61);
              if (++v58 >= this->i32[0])
              {
                if (this[1].i32[0] < 1)
                {
LABEL_122:
                  if (this->i32[1] < 1) {
                    goto LABEL_126;
                  }
                  uint64_t v67 = 0;
                  uint64_t v68 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                  while (1)
                  {
                    *(void *)(*(void *)&this[9] + 8 * v67) = operator new[](v60, v68);
                    uint64_t v69 = *(void **)(*(void *)&this[9] + 8 * v67);
                    if (!v69) {
                      break;
                    }
                    bzero(v69, v61);
                    if (++v67 >= this->i32[1]) {
                      goto LABEL_126;
                    }
                  }
                }
                else
                {
                  uint64_t v64 = 0;
                  uint64_t v65 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                  while (1)
                  {
                    *(void *)(*(void *)&this[8] + 8 * v64) = operator new[](v60, v65);
                    __int16 v66 = *(void **)(*(void *)&this[8] + 8 * v64);
                    if (!v66) {
                      break;
                    }
                    bzero(v66, v61);
                    if (++v64 >= this[1].i32[0]) {
                      goto LABEL_122;
                    }
                  }
                }
                return 4294967294;
              }
            }
          }
        }
      }
    }
  }
  return 4294967294;
}

float Beamformer_BeamNF::CmhBEAM::setParameter(Beamformer_BeamNF::CmhBEAM *this, int a2, CmhBEAM2NOpt *a3, double a4, double a5)
{
  switch(a2)
  {
    case 3:
      *(_DWORD *)(*((void *)this + 141) + 44) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 4:
      float v5 = *(float *)a3;
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      goto LABEL_127;
    case 5:
      *((_DWORD *)this + 162) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 6:
      if (*((_DWORD *)this + 295) + *((_DWORD *)this + 301) >= 1)
      {
        uint64_t v6 = 0;
        float v7 = *(float *)a3;
        uint64_t v8 = *((void *)this + 148);
        do
          *(float *)(v8 + 4 * v6++) = v7;
        while (v6 < *((int *)this + 295) + (uint64_t)*((int *)this + 301));
      }
      return *(float *)&a4;
    case 7:
      float v9 = *(float *)a3;
      int32x2_t v10 = (char *)this + 1176;
      Cns::setMinGain((uint64_t)v10, v9);
      return *(float *)&a4;
    case 11:
      int32x2_t v11 = (char *)this + 272;
      CmhBEAM2NOpt::setSpatialFilterReal((uint64_t)v11, (float *)a3);
      return *(float *)&a4;
    case 12:
      int32x2_t v12 = (char *)this + 272;
      CmhBEAM2NOpt::setSpatialFilterImag((uint64_t)v12, (float *)a3);
      return *(float *)&a4;
    case 15:
      int32x2_t v13 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int32x2_t v14 = a3;
      unsigned int v15 = 0;
      goto LABEL_22;
    case 16:
      uint64_t v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      uint64_t v17 = a3;
      unsigned int v18 = 0;
      goto LABEL_26;
    case 17:
      int32x2_t v13 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int32x2_t v14 = a3;
      unsigned int v15 = 1;
LABEL_22:
      CmhBEAM2NOpt::setModelSpatialFilterReal(v13, v14, v15);
      return *(float *)&a4;
    case 18:
      uint64_t v16 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      uint64_t v17 = a3;
      unsigned int v18 = 1;
LABEL_26:
      Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag(v16, v17, v18);
      return *(float *)&a4;
    case 19:
      uint64_t v19 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 88);
      *(float *)&a4 = CmhBEAMprocOpt::setModelFreqCompVector(v19, a3);
      return *(float *)&a4;
    case 20:
      uint64_t v20 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      CmhBEAM2NOpt::setModelOmniEQVector(v20, a3);
      return *(float *)&a4;
    case 21:
      int v21 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      long long v22 = a3;
      unsigned int v23 = 0;
      goto LABEL_38;
    case 22:
      int32x2_t v24 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int32x2_t v25 = a3;
      unsigned int v26 = 0;
      goto LABEL_42;
    case 23:
      int v21 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      long long v22 = a3;
      unsigned int v23 = 1;
LABEL_38:
      *(float *)&a4 = CmhBEAM2NOpt::setModelFreqCompVector(v21, v22, v23);
      return *(float *)&a4;
    case 24:
      int32x2_t v24 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int32x2_t v25 = a3;
      unsigned int v26 = 1;
LABEL_42:
      CmhBEAM2NOpt::setModelOmniEQVector(v24, v25, v26);
      return *(float *)&a4;
    case 34:
      uint64_t v27 = *((unsigned int *)this + 70);
      if ((int)v27 >= 1)
      {
        LODWORD(a4) = *(_DWORD *)a3;
        int v28 = (_DWORD *)(*((void *)this + 89) + 64);
        do
        {
          _DWORD *v28 = LODWORD(a4);
          v28 += 34;
          --v27;
        }
        while (v27);
      }
      return *(float *)&a4;
    case 35:
      int v29 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 88);
      float v30 = *(float *)a3;
      CmhBEAMprocOpt::setWNG(v29, v30);
      return *(float *)&a4;
    case 36:
      unsigned int v31 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 88);
      CmhBEAMprocOpt::setModelFreqEQVector(v31, a3);
      return *(float *)&a4;
    case 37:
      unsigned int v32 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int v33 = a3;
      unsigned int v34 = 0;
      goto LABEL_57;
    case 38:
      unsigned int v32 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int v33 = a3;
      unsigned int v34 = 1;
LABEL_57:
      CmhBEAM2NOpt::setModelFreqEQVector(v32, v33, v34);
      return *(float *)&a4;
    case 39:
      float v35 = *(float *)a3;
      uint64_t v36 = *((void *)this + 89);
      *(_DWORD *)(v36 + 108) = *(_DWORD *)a3;
      if (*((int *)this + 70) >= 2) {
        *(float *)(v36 + 244) = v35;
      }
      return *(float *)&a4;
    case 42:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v37 = *((void *)this + 89);
      *(_DWORD *)(v37 + 112) = *(_DWORD *)a3;
      if (*((int *)this + 70) >= 2) {
        *(_DWORD *)(v37 + 248) = LODWORD(a4);
      }
      return *(float *)&a4;
    case 43:
      *((_DWORD *)this + 139) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 44:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 140) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 45:
      float v57 = *(float *)a3;
      if (*(_DWORD *)a3 <= 1u) {
        *((float *)this + 69) = v57;
      }
      *((float *)this + 23) = v57;
      return *(float *)&a4;
    case 46:
      int v38 = (char *)this + 272;
      Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector((uint64_t)v38, (float *)a3);
      return *(float *)&a4;
    case 47:
      signed int v39 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int v40 = 0;
      goto LABEL_71;
    case 48:
      signed int v39 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 272);
      int v40 = 1;
LABEL_71:
      *(float *)&a4 = Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(v39, v40, (float *)a3);
      return *(float *)&a4;
    case 51:
      *((_DWORD *)this + 52) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 65:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 100) = (int)*(float *)a3;
      return *(float *)&a4;
    case 66:
      *((_DWORD *)this + 128) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 67:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 201) = *(_DWORD *)a3;
      goto LABEL_134;
    case 68:
      *((_DWORD *)this + 133) = *(_DWORD *)a3;
      return *(float *)&a4;
    case 69:
      float v5 = *(float *)a3;
LABEL_127:
      *((float *)this + 134) = v5;
      return *(float *)&a4;
    case 70:
      float v42 = *(float *)a3;
      uint64_t v43 = *((void *)this + 148);
      int v44 = (*((_DWORD *)this + 301) + *((_DWORD *)this + 295) - 1) & ((*((_DWORD *)this + 301)
                                                                      + *((_DWORD *)this + 295)
                                                                      - 1) >> 31);
      goto LABEL_81;
    case 71:
      float v42 = *(float *)a3;
      uint64_t v43 = *((void *)this + 148);
      int v44 = *((_DWORD *)this + 301) + *((_DWORD *)this + 295) - 1;
      if (v44 >= 1) {
        int v44 = 1;
      }
LABEL_81:
      *(float *)(v43 + 4 * v44) = v42;
      return *(float *)&a4;
    case 72:
      float v45 = *(float *)a3;
      float v46 = (char *)this + 1176;
      int v47 = 0;
      goto LABEL_84;
    case 73:
      float v45 = *(float *)a3;
      float v46 = (char *)this + 1176;
      int v47 = 1;
LABEL_84:
      Cns::setMinGain((uint64_t)v46, v45, v47);
      return *(float *)&a4;
    case 74:
      float v48 = *(float *)a3;
      int v49 = *((_DWORD *)this + 70);
      if (v49 >= 1) {
        int v49 = 1;
      }
      goto LABEL_91;
    case 75:
      float v48 = *(float *)a3;
      int v49 = *((_DWORD *)this + 70);
      if (v49 >= 2) {
        int v49 = 2;
      }
LABEL_91:
      *(float *)(*((void *)this + 89) + 136 * v49 - 28) = v48;
      return *(float *)&a4;
    case 76:
      LODWORD(a4) = *(_DWORD *)a3;
      int v50 = *((_DWORD *)this + 70);
      if (v50 >= 1) {
        int v50 = 1;
      }
      goto LABEL_96;
    case 77:
      LODWORD(a4) = *(_DWORD *)a3;
      int v50 = *((_DWORD *)this + 70);
      if (v50 >= 2) {
        int v50 = 2;
      }
LABEL_96:
      *(_DWORD *)(*((void *)this + 89) + 136 * v50 - 24) = LODWORD(a4);
      return *(float *)&a4;
    case 78:
      *(float *)&a4 = (float)((float)*(int *)a3 / (float)*((int *)this + 71)) * (float)*((int *)this + 72);
      *((_DWORD *)this + 76) = *(_DWORD *)a3;
      int v51 = *((_DWORD *)this + 74) - 1;
      if (v51 >= (int)*(float *)&a4) {
        int v51 = (int)*(float *)&a4;
      }
      *((_DWORD *)this + 132) = v51;
      return *(float *)&a4;
    case 81:
      float v52 = *(float *)a3;
      *((_DWORD *)this + 102) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((float *)this + 219) = v52;
      goto LABEL_134;
    case 82:
      float v59 = *(float *)a3;
      *(float *)&a4 = v59;
      *(float *)&a4 = Beamformer_BeamNF::CmhBEAM2NOpt::setParameter((Beamformer_BeamNF::CmhBEAM *)((char *)this + 272), 59, (CmhBEAM2NOpt *)&v59, a4, a5);
      return *(float *)&a4;
    case 83:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 202) = *(_DWORD *)a3;
      goto LABEL_134;
    case 84:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 203) = *(_DWORD *)a3;
      goto LABEL_134;
    case 85:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 204) = *(_DWORD *)a3;
      goto LABEL_134;
    case 86:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 205) = *(_DWORD *)a3;
      goto LABEL_134;
    case 87:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 206) = *(_DWORD *)a3;
      goto LABEL_134;
    case 88:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 207) = *(_DWORD *)a3;
      goto LABEL_134;
    case 89:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 208) = *(_DWORD *)a3;
      goto LABEL_134;
    case 90:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 209) = *(_DWORD *)a3;
      goto LABEL_134;
    case 91:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 210) = *(_DWORD *)a3;
      goto LABEL_134;
    case 92:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 211) = *(_DWORD *)a3;
      goto LABEL_134;
    case 93:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 212) = *(_DWORD *)a3;
      goto LABEL_134;
    case 94:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 213) = *(_DWORD *)a3;
      goto LABEL_134;
    case 95:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 214) = *(_DWORD *)a3;
      goto LABEL_134;
    case 96:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 215) = *(_DWORD *)a3;
      goto LABEL_134;
    case 97:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 216) = *(_DWORD *)a3;
      goto LABEL_134;
    case 98:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 217) = *(_DWORD *)a3;
      goto LABEL_134;
    case 99:
      LODWORD(a4) = *(_DWORD *)a3;
      uint64_t v41 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
      *((_DWORD *)this + 218) = *(_DWORD *)a3;
LABEL_134:
      CFTypeRef v54 = v41;
      goto LABEL_135;
    case 100:
      uint64_t v53 = 0;
      do
      {
        LODWORD(a4) = *(_DWORD *)((char *)a3 + v53);
        *(_DWORD *)((char *)this + v53 + 804) = LODWORD(a4);
        v53 += 4;
      }
      while (v53 != 76);
      CFTypeRef v54 = (Beamformer_BeamNF::CmhBEAM *)((char *)this + 768);
LABEL_135:
      LODWORD(a4) = CmhMicCheck::init_check_mics(v54, a4, a5).u32[0];
      return *(float *)&a4;
    case 101:
      *((_DWORD *)this + 78) = *(_DWORD *)a3;
      goto LABEL_117;
    case 102:
LABEL_117:
      *((_DWORD *)this + 270) = *(_DWORD *)a3;
      break;
    case 103:
    case 106:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 163) = *(_DWORD *)a3;
      break;
    case 104:
      float v55 = *(float *)a3;
      *((_DWORD *)this + 103) = *(_DWORD *)a3;
      int v56 = (int)(float)((float)(v55 / (float)*((int *)this + 71)) * (float)*((int *)this + 72));
      if (*((_DWORD *)this + 74) - 1 < v56) {
        int v56 = *((_DWORD *)this + 74) - 1;
      }
      *(float *)&a4 = (float)v56;
      *((float *)this + 164) = (float)v56;
      break;
    case 105:
      LODWORD(a4) = *(_DWORD *)a3;
      *((_DWORD *)this + 165) = *(_DWORD *)a3;
      break;
    case 107:
      *((_DWORD *)this + 104) = *(_DWORD *)a3;
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void AllPassComb::AllPassComb(AllPassComb *this, unsigned int a2, float a3)
{
  *(float *)this = a3;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (a2)
  {
    unint64_t v4 = a2;
    int v9 = 0;
    std::vector<float>::resize((uint64_t)this + 8, a2, &v9);
    int v8 = 0;
    std::vector<float>::resize((uint64_t)this + 32, v4, &v8);
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v5 = *((void *)this + 2);
    a3 = *(float *)this;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = v5 - (void)v6;
  *((_DWORD *)this + 15) = (float)(ceilf(-5.2983 / logf(a3))
                                               * (float)(unint64_t)((v5 - (uint64_t)v6) >> 2));
  if (v7 >= 1) {
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  *((_DWORD *)this + 14) = 0;
}

void sub_1BB67D5DC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *AllPassComb::process(void *this, float *a2, float *a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = this[1];
    uint64_t v6 = this[2];
    if (v5 == v6) {
      __assert_rtn("process", "AllPassComb.cpp", 47, "!mDelayBuf.empty()");
    }
    unsigned int v7 = a4;
    uint64_t v10 = v6 - v5;
    if ((unint64_t)v10 > 0x1F)
    {
      if (v10 >> 2 != (uint64_t)(this[5] - this[4]) >> 2) {
        __assert_rtn("process", "AllPassComb.cpp", 58, "mScratchBuf.size() == mDelayBuf.size()");
      }
      unint64_t v17 = *((unsigned int *)this + 14);
      if (v10 >> 2 <= v17) {
        __assert_rtn("process", "AllPassComb.cpp", 59, "mCircularIndex < mDelayBuf.size()");
      }
      int v18 = 0;
      unint64_t v19 = (unint64_t)v10 >> 2;
      float __B = -*(float *)this;
      do
      {
        if ((int)v19 - (int)v17 >= v7) {
          vDSP_Length v20 = v7;
        }
        else {
          vDSP_Length v20 = (v19 - v17);
        }
        vDSP_vsma((const float *)(*(void *)(v4 + 8) + 4 * v17), 1, &__B, &a2[v18], 1, *(float **)(v4 + 32), 1, v20);
        vDSP_vsma(*(const float **)(v4 + 32), 1, (const float *)v4, (const float *)(*(void *)(v4 + 8) + 4 * *(unsigned int *)(v4 + 56)), 1, &a3[v18], 1, v20);
        this = memmove((void *)(*(void *)(v4 + 8) + 4 * *(unsigned int *)(v4 + 56)), *(const void **)(v4 + 32), 4 * v20);
        v18 += v20;
        LODWORD(v17) = *(_DWORD *)(v4 + 56) + v20;
        if (v17 >= v19) {
          LODWORD(v17) = 0;
        }
        *(_DWORD *)(v4 + 56) = v17;
        v7 -= v20;
      }
      while (v7);
    }
    else
    {
      unint64_t v11 = (unint64_t)v10 >> 2;
      unsigned int v12 = *((_DWORD *)this + 14);
      uint64_t v13 = a4;
      do
      {
        float v14 = *(float *)(v5 + 4 * v12);
        float v15 = *a2++;
        float v16 = v15 - (float)(*(float *)this * v14);
        *(float *)(v5 + 4 * v12) = v16;
        if (v12 + 1 < v11) {
          ++v12;
        }
        else {
          unsigned int v12 = 0;
        }
        *a3++ = v14 + (float)(*(float *)this * v16);
        --v13;
      }
      while (v13);
      *((_DWORD *)this + 14) = v12;
    }
  }
  return this;
}

uint64_t LookUpTreeIsValid(NSArray *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  CFNumberRef v2 = v1;
  if (v1)
  {
    long long v22 = v1;
    uint64_t v3 = [(NSArray *)v1 count];
    uint64_t v4 = [(NSArray *)v2 objectAtIndexedSubscript:0];
    int v21 = (void *)v4;
    uint64_t v5 = [(NSArray *)v2 objectAtIndexedSubscript:1];
    BOOL v6 = v3 != 3 || v4 == 0;
    long long v25 = 0u;
    long long v26 = 0u;
    int v8 = !v6 && v5 != 0;
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    id v9 = v5;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v9);
          }
          BOOL v13 = *(void *)(*((void *)&v23 + 1) + 8 * i) != 0;
          objc_msgSend(v9, "objectForKey:");
          float v14 = (NSArray *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            int v15 = v14 != 0;
          }
          else
          {
            objc_opt_class();
            int isKindOfClass = objc_opt_isKindOfClass();
            int v15 = isKindOfClass & LookUpTreeIsValid(v14);
          }

          v8 &= v13 & v15;
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v10);
    }

    unint64_t v17 = [(NSArray *)v22 objectAtIndexedSubscript:2];
    objc_opt_class();
    int v18 = objc_opt_isKindOfClass();
    if (v18 & 1 | ((v8 & 1) == 0))
    {
      uint64_t IsValid = v18 & v8;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t IsValid = LookUpTreeIsValid(v17);
      }
      else {
        uint64_t IsValid = 0;
      }
    }

    CFNumberRef v2 = v22;
  }
  else
  {
    uint64_t IsValid = 0;
  }

  return IsValid;
}

void sub_1BB67DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

NSArray *LookUpTreeGet(NSDictionary *a1, NSArray *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  if (([(NSArray *)v4 isEqual:0] & 1) != 0 || [(NSArray *)v4 count] != 3)
  {
    int v15 = 0;
  }
  else
  {
    uint64_t v5 = [(NSArray *)v4 objectAtIndexedSubscript:0];
    unint64_t v19 = [(NSArray *)v4 objectAtIndexedSubscript:1];
    vDSP_Length v20 = [(NSArray *)v4 objectAtIndexedSubscript:2];
    BOOL v6 = [(NSDictionary *)v3 objectForKey:v5];

    if (v6)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      id v7 = v19;
      uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v22;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v22 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void *)(*((void *)&v21 + 1) + 8 * i);
            unsigned int v12 = [(NSDictionary *)v3 objectForKey:v5];
            int v13 = [v12 isEqualToString:v11];

            if (v13)
            {
              float v16 = [v7 objectForKey:v11];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unint64_t v17 = v16;
              }
              else
              {
                LookUpTreeGet(v3, v16);
                unint64_t v17 = (NSArray *)objc_claimAutoreleasedReturnValue();
              }
              int v15 = v17;

              goto LABEL_22;
            }
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      float v14 = v20;
    }
    else
    {
      LookUpTreeGet(v3, v20);
      float v14 = (NSArray *)objc_claimAutoreleasedReturnValue();
    }
    int v15 = v14;
LABEL_22:
  }

  return v15;
}

void sub_1BB67DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<__CFString const* const&>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

const __CFNumber *AUSM::RoomCongruence::isArrayOf<float>(const __CFArray *a1)
{
  if (!a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFNumberRef result = (const __CFNumber *)CFArrayGetCount(a1);
  if (result)
  {
    CFNumberRef result = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
    if (result) {
      return (const __CFNumber *)((applesauce::CF::convert_as<float,0>(result) & 0xFF00000000) != 0);
    }
  }
  return result;
}

void sub_1BB67DEC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

BOOL AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid(CFDictionaryRef *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = *a1;
  if (v2)
  {
    if (applesauce::CF::details::has_key<__CFString const* const&>(v2, @"k"))
    {
      if (!*a1) {
        goto LABEL_118;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, @"exp"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v16 = getAUSMV2Log(void)::gLog;
        BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v23 = 136315138;
          long long v24 = "isTuningParametersDictionaryStructurallyValid";
          int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing exp.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1) {
        goto LABEL_118;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, @"lowerVolumeLimit"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v16 = getAUSMV2Log(void)::gLog;
        BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v23 = 136315138;
          long long v24 = "isTuningParametersDictionaryStructurallyValid";
          int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing lower volume limit.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1) {
        goto LABEL_118;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>(*a1, @"upperVolumeLimit"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v16 = getAUSMV2Log(void)::gLog;
        BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v23 = 136315138;
          long long v24 = "isTuningParametersDictionaryStructurallyValid";
          int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing upper volume limit.";
          goto LABEL_116;
        }
        return result;
      }
      if (!*a1)
      {
LABEL_118:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(exception);
      }
      if (applesauce::CF::details::has_key<__CFString const* const&>(*a1, @"alpha"))
      {
        uint64_t v3 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
        if (applesauce::CF::details::has_key<__CFString const* const&>(*v3, @"beta"))
        {
          uint64_t v4 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
          if (applesauce::CF::details::has_key<__CFString const* const&>(*v4, @"lowerReverbLevelLimit"))
          {
            uint64_t v5 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
            if (applesauce::CF::details::has_key<__CFString const* const&>(*v5, @"isWarpingEnabled"))
            {
              CFTypeID v6 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
              if (applesauce::CF::details::has_key<__CFString const* const&>(*v6, @"useSpectralMatching"))
              {
                char v7 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(a1);
                if (applesauce::CF::details::has_key<__CFString const* const&>(*v7, @"isRoomCongruenceEnabled"))
                {
                  uint64_t v8 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                  if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v8, @"k") & 0xFF00000000) != 0)
                  {
                    uint64_t v9 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                    if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v9, @"exp") & 0xFF00000000) != 0)
                    {
                      uint64_t v10 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                      if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v10, @"lowerVolumeLimit") & 0xFF00000000) != 0)
                      {
                        uint64_t v11 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                        if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v11, @"upperVolumeLimit") & 0xFF00000000) != 0)
                        {
                          unsigned int v12 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                          if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v12, @"alpha") & 0xFF00000000) != 0)
                          {
                            int v13 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v13, @"beta") & 0xFF00000000) != 0)
                            {
                              float v14 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                              if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v14, @"lowerReverbLevelLimit") & 0xFF00000000) != 0)
                              {
                                int v15 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v15, @"isWarpingEnabled") > 0xFFu)
                                {
                                  unint64_t v19 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                  if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v19, @"useSpectralMatching") > 0xFFu)
                                  {
                                    vDSP_Length v20 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                    if ((unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(*v20, @"useSpectralMatching") > 0xFFu)
                                    {
                                      long long v21 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a1);
                                      if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(*v21) & 0xFF00000000) != 0) {
                                        return 1;
                                      }
                                      if (getAUSMV2Log(void)::onceToken != -1) {
                                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                      }
                                      float v16 = getAUSMV2Log(void)::gLog;
                                      BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                      if (result)
                                      {
                                        int v23 = 136315138;
                                        long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                        int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried"
                                              " and actual type of the library room IR index.";
                                        goto LABEL_116;
                                      }
                                    }
                                    else
                                    {
                                      if (getAUSMV2Log(void)::onceToken != -1) {
                                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                      }
                                      float v16 = getAUSMV2Log(void)::gLog;
                                      BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                      if (result)
                                      {
                                        int v23 = 136315138;
                                        long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                        int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried"
                                              " and actual type of the room congruence enablement flag.";
                                        goto LABEL_116;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (getAUSMV2Log(void)::onceToken != -1) {
                                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                    }
                                    float v16 = getAUSMV2Log(void)::gLog;
                                    BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                    if (result)
                                    {
                                      int v23 = 136315138;
                                      long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                      int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried a"
                                            "nd actual type of the spectral matching flag.";
                                      goto LABEL_116;
                                    }
                                  }
                                }
                                else
                                {
                                  if (getAUSMV2Log(void)::onceToken != -1) {
                                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                  }
                                  float v16 = getAUSMV2Log(void)::gLog;
                                  BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                  if (result)
                                  {
                                    int v23 = 136315138;
                                    long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                    int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and"
                                          " actual type of the warping enablement flag.";
LABEL_116:
                                    _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v23, 0xCu);
                                    return 0;
                                  }
                                }
                              }
                              else
                              {
                                if (getAUSMV2Log(void)::onceToken != -1) {
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                }
                                float v16 = getAUSMV2Log(void)::gLog;
                                BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                                if (result)
                                {
                                  int v23 = 136315138;
                                  long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                  int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and a"
                                        "ctual type of lower reverb level limit.";
                                  goto LABEL_116;
                                }
                              }
                            }
                            else
                            {
                              if (getAUSMV2Log(void)::onceToken != -1) {
                                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                              }
                              float v16 = getAUSMV2Log(void)::gLog;
                              BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                              if (result)
                              {
                                int v23 = 136315138;
                                long long v24 = "isTuningParametersDictionaryStructurallyValid";
                                int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and act"
                                      "ual type of beta.";
                                goto LABEL_116;
                              }
                            }
                          }
                          else
                          {
                            if (getAUSMV2Log(void)::onceToken != -1) {
                              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                            }
                            float v16 = getAUSMV2Log(void)::gLog;
                            BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                            if (result)
                            {
                              int v23 = 136315138;
                              long long v24 = "isTuningParametersDictionaryStructurallyValid";
                              int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actua"
                                    "l type of alpha.";
                              goto LABEL_116;
                            }
                          }
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          float v16 = getAUSMV2Log(void)::gLog;
                          BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                          if (result)
                          {
                            int v23 = 136315138;
                            long long v24 = "isTuningParametersDictionaryStructurallyValid";
                            int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual "
                                  "type of the upper volume limit.";
                            goto LABEL_116;
                          }
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        float v16 = getAUSMV2Log(void)::gLog;
                        BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                        if (result)
                        {
                          int v23 = 136315138;
                          long long v24 = "isTuningParametersDictionaryStructurallyValid";
                          int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual ty"
                                "pe of lower volume limit.";
                          goto LABEL_116;
                        }
                      }
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      float v16 = getAUSMV2Log(void)::gLog;
                      BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                      if (result)
                      {
                        int v23 = 136315138;
                        long long v24 = "isTuningParametersDictionaryStructurallyValid";
                        int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual type of exp.";
                        goto LABEL_116;
                      }
                    }
                  }
                  else
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    float v16 = getAUSMV2Log(void)::gLog;
                    BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      int v23 = 136315138;
                      long long v24 = "isTuningParametersDictionaryStructurallyValid";
                      int v18 = "[Room Congruence] %s: Tuning Parameters invalid - mismatch between queried and actual type of k.";
                      goto LABEL_116;
                    }
                  }
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  float v16 = getAUSMV2Log(void)::gLog;
                  BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                  if (result)
                  {
                    int v23 = 136315138;
                    long long v24 = "isTuningParametersDictionaryStructurallyValid";
                    int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing room congruence enablement data.";
                    goto LABEL_116;
                  }
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                float v16 = getAUSMV2Log(void)::gLog;
                BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  int v23 = 136315138;
                  long long v24 = "isTuningParametersDictionaryStructurallyValid";
                  int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing spectral matching toggle data.";
                  goto LABEL_116;
                }
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              float v16 = getAUSMV2Log(void)::gLog;
              BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
              if (result)
              {
                int v23 = 136315138;
                long long v24 = "isTuningParametersDictionaryStructurallyValid";
                int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing warping enablement data.";
                goto LABEL_116;
              }
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v16 = getAUSMV2Log(void)::gLog;
            BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
            if (result)
            {
              int v23 = 136315138;
              long long v24 = "isTuningParametersDictionaryStructurallyValid";
              int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing lower reverb level limit.";
              goto LABEL_116;
            }
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v16 = getAUSMV2Log(void)::gLog;
          BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v23 = 136315138;
            long long v24 = "isTuningParametersDictionaryStructurallyValid";
            int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing beta.";
            goto LABEL_116;
          }
        }
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v16 = getAUSMV2Log(void)::gLog;
        BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v23 = 136315138;
          long long v24 = "isTuningParametersDictionaryStructurallyValid";
          int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing alpha.";
          goto LABEL_116;
        }
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      float v16 = getAUSMV2Log(void)::gLog;
      BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v23 = 136315138;
        long long v24 = "isTuningParametersDictionaryStructurallyValid";
        int v18 = "[Room Congruence] %s: Tuning Parameters invalid - missing  k.";
        goto LABEL_116;
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v16 = getAUSMV2Log(void)::gLog;
    BOOL result = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v23 = 136315138;
      long long v24 = "isTuningParametersDictionaryStructurallyValid";
      int v18 = "[Room Congruence] %s: Tuning Parameters dictionary invalid - underlying CF object is nil.";
      goto LABEL_116;
    }
  }
  return result;
}

void sub_1BB67EBB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const* const&>(const __CFDictionary *a1, const void *a2)
{
  CFBooleanRef v2 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (v2)
  {
    LOWORD(v2) = applesauce::CF::convert_as<BOOL,0>(v2);
    int v3 = BYTE1(v2);
  }
  else
  {
    int v3 = 0;
  }
  return v2 | (v3 << 8);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(const __CFDictionary *a1)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, @"libraryRoomIr");
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<int,0>(result);
  }
  return result;
}

void AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange(uint64_t **a1, float *a2, float *a3, float a4, float a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    for (uint64_t i = a2 + 1; i != a3; ++i)
    {
      float v8 = *(i - 1);
      float v7 = *i;
      if (v7 < v8) {
        return;
      }
    }
    unint64_t v9 = a3 - a2;
    uint64_t v10 = a2;
    unint64_t v11 = v9;
    do
    {
      unint64_t v12 = v11 >> 1;
      int v13 = &v10[v11 >> 1];
      float v15 = *v13;
      float v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < a4) {
        uint64_t v10 = v14;
      }
      else {
        unint64_t v11 = v12;
      }
    }
    while (v11);
    if (v10 != a3)
    {
      float v16 = a2;
      do
      {
        unint64_t v17 = v9 >> 1;
        int v18 = &v16[v9 >> 1];
        float v20 = *v18;
        unint64_t v19 = v18 + 1;
        v9 += ~(v9 >> 1);
        if (v20 > a5) {
          unint64_t v9 = v17;
        }
        else {
          float v16 = v19;
        }
      }
      while (v9);
      if (v16 - 1 != a3)
      {
        uint64_t v21 = (char *)v10 - (char *)a2;
        uint64_t v22 = v16 - 1 - a2;
        if (v22 >= v21 >> 2)
        {
          uint64_t v23 = v21 >> 2;
          uint64_t v24 = v22 - (v21 >> 2);
          unint64_t v25 = v24 + 1;
          if (v24 == -1)
          {
            uint64_t v26 = 0;
            uint64_t v27 = 0;
          }
          else
          {
            if (v25 >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v25);
            uint64_t v26 = &v27[8 * v28];
            *a1 = (uint64_t *)v27;
            a1[1] = (uint64_t *)v27;
            a1[2] = (uint64_t *)v26;
          }
          do
          {
            if (v27 >= v26)
            {
              float v30 = (char *)*a1;
              uint64_t v31 = (v27 - (char *)*a1) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              if ((v26 - v30) >> 2 > v32) {
                unint64_t v32 = (v26 - v30) >> 2;
              }
              if ((unint64_t)(v26 - v30) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v33);
              }
              else {
                uint64_t v34 = 0;
              }
              float v35 = (uint64_t *)(v33 + 8 * v31);
              *float v35 = v23;
              int v29 = v35 + 1;
              while (v27 != v30)
              {
                uint64_t v36 = *((void *)v27 - 1);
                v27 -= 8;
                *--float v35 = v36;
              }
              uint64_t v26 = (char *)(v33 + 8 * v34);
              *a1 = v35;
              a1[1] = v29;
              a1[2] = (uint64_t *)v26;
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(void *)uint64_t v27 = v23;
              int v29 = (uint64_t *)(v27 + 8);
            }
            a1[1] = v29;
            uint64_t v27 = (char *)v29;
          }
          while (v23++ != v22);
        }
      }
    }
  }
}

void sub_1BB67EE30(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::RoomCongruence::computeIdealRt60(AUSM::RoomCongruence *this, float a2, float a3, float a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0.0)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v5 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v10 = 136315138;
    unint64_t v11 = "computeIdealRt60";
    CFTypeID v6 = "[Room Congruence] %s: The input room volume must be greater than 0. Returning empty optional.";
    goto LABEL_22;
  }
  if (a3 <= 0.0)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v5 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v10 = 136315138;
    unint64_t v11 = "computeIdealRt60";
    CFTypeID v6 = "[Room Congruence] %s: The input k parameter must be greater than 0. Returning empty optional.";
    goto LABEL_22;
  }
  if (a4 > 0.0 && a4 < 1.0)
  {
    uint64_t v8 = COERCE_UNSIGNED_INT(powf(a2 / 100.0, a4) * a3);
    uint64_t v7 = 0x100000000;
    return v8 | v7;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v5 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    int v10 = 136315138;
    unint64_t v11 = "computeIdealRt60";
    CFTypeID v6 = "[Room Congruence] %s: The input k parameter must be greater than 0 and smaller than 1. Returning empty optional.";
LABEL_22:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, 0xCu);
  }
LABEL_18:
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  return v8 | v7;
}

void *CADeprecated::CABufferList::New(CADeprecated::CABufferList *this, const char *a2, const CAStreamBasicDescription *a3)
{
  if ((a2 & 0x20) != 0) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = 1;
  }
  if ((a2 & 0x20) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = (int)a3;
  }
  CFNumberRef result = operator new(16 * v4 + 32);
  *CFNumberRef result = this;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    uint64_t v7 = (char *)(result + 4);
    do
    {
      *(_DWORD *)uint64_t v7 = v5;
      *((_DWORD *)v7 + 1) = 0;
      *((void *)v7 + 1) = 0;
      v7 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

void std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](void *__p)
{
  uint64_t v2 = __p[1];
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8077774924);
  }

  operator delete(__p);
}

void VoiceProcessorV2::ReadDefaultsOverride(const __CFString *this, const __CFString *a2, BOOL *a3, BOOL *a4, unsigned __int8 *a5)
{
  int v7 = (int)a2;
  CFRetain(@"com.apple.coreaudio");
  CFPreferencesAppSynchronize(@"com.apple.coreaudio");
  BOOL v17 = 0;
  switch(v7)
  {
    case 0:
      CFRetain(@"com.apple.coreaudio");
      BOOL AppBooleanValue = CACFPreferencesGetAppBooleanValue(this, @"com.apple.coreaudio", &v17);
      BOOL v10 = v17;
      if (!a3 || !v17) {
        goto LABEL_18;
      }
      *a3 = AppBooleanValue;
      goto LABEL_17;
    case 1:
    case 3:
      CFRetain(@"com.apple.coreaudio");
      AppIntegerCFNumberRef Value = CACFPreferencesGetAppIntegerValue(this, @"com.apple.coreaudio", &v17);
      BOOL v10 = v17;
      if (!a3 || !v17) {
        goto LABEL_18;
      }
      *(_DWORD *)a3 = AppIntegerValue;
      goto LABEL_17;
    case 2:
      CFRetain(@"com.apple.coreaudio");
      AppFloatCFNumberRef Value = CACFPreferencesGetAppFloatValue(this, @"com.apple.coreaudio", &v17);
      BOOL v10 = v17;
      if (!a3 || !v17) {
        goto LABEL_18;
      }
      float v13 = AppFloatValue;
      *(float *)a3 = v13;
      goto LABEL_17;
    case 4:
      CFRetain(@"com.apple.coreaudio");
      CFPropertyListRef v14 = CFPreferencesCopyAppValue(this, @"com.apple.coreaudio");
      if (v14 && (float v15 = v14, v16 = CFGetTypeID(v14), v16 == CFArrayGetTypeID()))
      {
        if (a3) {
          *(void *)a3 = v15;
        }
        else {
          CFRelease(v15);
        }
LABEL_17:
        BOOL v10 = 1;
      }
      else
      {
        BOOL v10 = 0;
      }
LABEL_18:
      if (a4) {
        *a4 = v10;
      }
      return;
    default:
      return;
  }
}

void VoiceProcessorV2::ReadAndApplyDefaultsOverride(VoiceProcessorV2 *this, const __CFString *a2, int a3, float *a4, unsigned __int8 *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  BOOL v41 = 0;
  if (a4)
  {
    uint64_t v8 = (char *)this + 15961;
    switch(a3)
    {
      case 2:
        float v40 = 0.0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, (const __CFString *)2, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v22 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
              CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
              double v26 = *a4;
              *(_DWORD *)std::string buf = 136316162;
              uint64_t v43 = "vpDebug_DefaultsOverride.cpp";
              __int16 v44 = 1024;
              int v45 = 124;
              __int16 v46 = 2080;
              int v47 = CStringPtr;
              __int16 v48 = 2048;
              *(double *)int v49 = v26;
              *(_WORD *)&v49[8] = 2048;
              double v50 = v40;
              _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %f -> %f", buf, 0x30u);
            }
          }
          uint64_t v27 = (int *)*((void *)this + 1578);
          if (v27 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v28 = VPLogScope(void)::scope;
            CFStringEncoding v29 = CFStringGetSystemEncoding();
            float v30 = CFStringGetCStringPtr(a2, v29);
            CALegacyLog::log(v27, 5, v28, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 124, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %f -> %f", v30, *a4, v40);
          }
          *a4 = v40;
        }
        break;
      case 1:
        float v40 = 0.0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, (const __CFString *)1, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v31 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unint64_t v32 = (*v31 ? *v31 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              CFStringEncoding v33 = CFStringGetSystemEncoding();
              uint64_t v34 = CFStringGetCStringPtr(a2, v33);
              int v35 = *(_DWORD *)a4;
              *(_DWORD *)std::string buf = 136316162;
              uint64_t v43 = "vpDebug_DefaultsOverride.cpp";
              __int16 v44 = 1024;
              int v45 = 108;
              __int16 v46 = 2080;
              int v47 = v34;
              __int16 v48 = 1024;
              *(_DWORD *)int v49 = v35;
              *(_WORD *)&v49[4] = 1024;
              *(float *)&v49[6] = v40;
              _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %d -> %d", buf, 0x28u);
            }
          }
          uint64_t v36 = (int *)*((void *)this + 1578);
          if (v36 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v37 = VPLogScope(void)::scope;
            CFStringEncoding v38 = CFStringGetSystemEncoding();
            signed int v39 = CFStringGetCStringPtr(a2, v38);
            CALegacyLog::log(v36, 5, v37, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 108, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %d -> %d", v39, *(_DWORD *)a4, LODWORD(v40));
          }
          *a4 = v40;
        }
        break;
      case 0:
        LOBYTE(v40) = 0;
        VoiceProcessorV2::ReadDefaultsOverride(a2, 0, (BOOL *)&v40, &v41, a5);
        if (v41)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unint64_t v9 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            BOOL v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              CFStringEncoding v11 = CFStringGetSystemEncoding();
              uint64_t v12 = CFStringGetCStringPtr(a2, v11);
              int v13 = *(unsigned __int8 *)a4;
              CFPropertyListRef v14 = "TRUE";
              uint64_t v43 = "vpDebug_DefaultsOverride.cpp";
              __int16 v44 = 1024;
              if (v13) {
                float v15 = "TRUE";
              }
              else {
                float v15 = "FALSE";
              }
              *(_DWORD *)std::string buf = 136316162;
              int v45 = 100;
              if (!LOBYTE(v40)) {
                CFPropertyListRef v14 = "FALSE";
              }
              __int16 v46 = 2080;
              int v47 = v12;
              __int16 v48 = 2080;
              *(void *)int v49 = v15;
              *(_WORD *)&v49[8] = 2080;
              double v50 = *(double *)&v14;
              _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE (%s): %s -> %s", buf, 0x30u);
            }
          }
          CFTypeID v16 = (int *)*((void *)this + 1578);
          if (v16 && (*v8 || v8[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v17 = VPLogScope(void)::scope;
            CFStringEncoding v18 = CFStringGetSystemEncoding();
            unint64_t v19 = CFStringGetCStringPtr(a2, v18);
            float v20 = "TRUE";
            if (*(unsigned char *)a4) {
              uint64_t v21 = "TRUE";
            }
            else {
              uint64_t v21 = "FALSE";
            }
            if (!LOBYTE(v40)) {
              float v20 = "FALSE";
            }
            CALegacyLog::log(v16, 5, v17, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 100, "ReadAndApplyDefaultsOverride", "DEFAULTS OVERRIDE (%s): %s -> %s", v19, v21, v20);
          }
          *(unsigned char *)a4 = LOBYTE(v40);
        }
        break;
    }
  }
}

void AUThermalSpeakerProtection::newDspLibAlgorithm(AUThermalSpeakerProtection *this)
{
}

void sub_1BB67F8C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C4081234ABDLL);
  _Unwind_Resume(a1);
}

uint64_t AUThermalSpeakerProtection::Version(AUThermalSpeakerProtection *this)
{
  return 131841;
}

uint64_t AUThermalSpeakerProtection::Reset(AUThermalSpeakerProtection *this)
{
  return 0;
}

void AUThermalSpeakerProtection::~AUThermalSpeakerProtection(AUThermalSpeakerProtection *this)
{
  AUDspLib::~AUDspLib(this);

  JUMPOUT(0x1C185D370);
}

BOOL VoiceProcessorV7::IsMusicModeSupportedUnderCurrentRoute(VoiceProcessorV7 *this)
{
  if (**((_DWORD **)this + 295) != 1886216809) {
    return 0;
  }
  int v1 = **((_DWORD **)this + 292);
  return v1 == 1886613611 || v1 == 1885892727;
}

BOOL VoiceProcessorV7::IsVoiceIsolationSupportedUnderCurrentRoute(VoiceProcessorV7 *this)
{
  int v1 = **((_DWORD **)this + 295);
  if (v1 > 1886222184)
  {
    switch(v1)
    {
      case 1886222185:
        int v5 = **((_DWORD **)this + 292);
        int v7 = 21;
        int v8 = 1885892706;
        break;
      case 1886614633:
        int v5 = **((_DWORD **)this + 292);
        int v7 = 1028;
        int v8 = 1886613611;
        break;
      case 1886745449:
        int v2 = **((_DWORD **)this + 292);
        return v2 == 1886613611 || v2 == 1886745455;
      default:
        return 0;
    }
    int v6 = v8 | v7;
    return v5 == v6;
  }
  if (v1 != 1886216809)
  {
    if (v1 != 1886216820) {
      return 0;
    }
    int v5 = **((_DWORD **)this + 292);
    int v6 = 1885892706;
    return v5 == v6;
  }
  int v9 = **((_DWORD **)this + 292);
  BOOL result = 1;
  if (v9 > 1886152046)
  {
    if (v9 > 1886613610)
    {
      BOOL v10 = v9 == 1886613611;
      int v11 = 1886745455;
    }
    else
    {
      BOOL v10 = v9 == 1886152047;
      int v11 = 1886545251;
    }
  }
  else
  {
    if (v9 <= 1885892673)
    {
      if (v9 == 1885888867) {
        return result;
      }
      return v9 == 1885889645 && (_os_feature_enabled_impl() & 1) != 0;
    }
    BOOL v10 = v9 == 1885892674;
    int v11 = 1885892727;
  }
  if (!v10 && v9 != v11) {
    return 0;
  }
  return result;
}

uint64_t VoiceProcessorV7::GetTelephonyVoiceIsolationUseCaseOverrideTuning4CC(VoiceProcessorV7 *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (**((_DWORD **)this + 295) == 1886216820 && **((_DWORD **)this + 292) == 1885892706
    || ((int v2 = *((_DWORD *)this + 19), v2 != 6) ? (v3 = v2 == 1) : (v3 = 1), !v3))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v4 = 0;
    return v7 | v6 | v4;
  }
  uint64_t v4 = 1987260416;
  int v5 = *((float *)this + 550);
  if (v5 <= 23999)
  {
    if (v5 == 8000)
    {
      uint64_t v6 = 0x100000000;
      uint64_t v7 = 56;
      return v7 | v6 | v4;
    }
    if (v5 == 16000)
    {
      uint64_t v4 = 1987260672;
      uint64_t v6 = 0x100000000;
      uint64_t v7 = 54;
      return v7 | v6 | v4;
    }
    goto LABEL_24;
  }
  if (v5 == 24000)
  {
    uint64_t v6 = 0x100000000;
    uint64_t v7 = 111;
    uint64_t v4 = 1986622208;
    return v7 | v6 | v4;
  }
  if (v5 != 32000)
  {
LABEL_24:
    uint64_t v4 = 1986622208;
    if (v5 >= 0x7D01)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      double v10 = (double)v5;
      int v11 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        uint64_t v12 = (*v11 ? *v11 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          CFTypeID v16 = "VoiceProcessor_v7.cpp";
          __int16 v17 = 1024;
          int v18 = 531;
          __int16 v19 = 2048;
          double v20 = v10;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Unexpected vocoder sample rate = %f! Use 'viso' for telephony voice isolation instead.", buf, 0x1Cu);
        }
      }
      int v13 = (int *)*((void *)this + 1578);
      if (v13 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1)
        {
          CFPropertyListRef v14 = (int *)*((void *)this + 1578);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          int v13 = v14;
        }
        CALegacyLog::log(v13, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 531, "GetTelephonyVoiceIsolationUseCaseOverrideTuning4CC", "Unexpected vocoder sample rate = %f! Use 'viso' for telephony voice isolation instead.", v10);
      }
    }
    uint64_t v6 = 0x100000000;
    uint64_t v7 = 111;
    return v7 | v6 | v4;
  }
  int v9 = (*(uint64_t (**)(VoiceProcessorV7 *))(*(void *)this + 232))(this);
  if (v9) {
    uint64_t v4 = 1987261184;
  }
  else {
    uint64_t v4 = 1986622208;
  }
  uint64_t v7 = 50;
  if (!v9) {
    uint64_t v7 = 111;
  }
  uint64_t v6 = 0x100000000;
  return v7 | v6 | v4;
}

void sub_1BB67FE30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(VoiceProcessorV7 *this)
{
  if (VoiceProcessorV2::GetChatFlavor(this) == 2
    && (*((unsigned char *)this + 16608) & 4) != 0
    && (*(unsigned int (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this) >= 7)
  {
    unsigned int v2 = *((_DWORD *)this + 19);
    if (v2 <= 6 && ((1 << v2) & 0x52) != 0)
    {
      uint64_t v3 = 0;
      while (**((_DWORD **)this + 292) != *(_DWORD *)&VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(void)const::singleChannelVIUseCases[v3 + 4]
           || **((_DWORD **)this + 295) != *(_DWORD *)&VoiceProcessorV7::ShouldUsePowerEfficientSingleChannelVoiceIsolation(void)const::singleChannelVIUseCases[v3])
      {
        v3 += 8;
        if (v3 == 16) {
          goto LABEL_10;
        }
      }
      return 1;
    }
  }
LABEL_10:
  int v4 = *((_DWORD *)this + 19);
  if (v4 == 6 || v4 == 1)
  {
    if ((*(unsigned int (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this) <= 8
      && (*(unsigned int (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this) > 6)
    {
      return 1;
    }
    int v4 = *((_DWORD *)this + 19);
  }
  BOOL v6 = v4 == 6 || v4 == 1;
  return v6 && ((*(uint64_t (**)(VoiceProcessorV7 *))(*(void *)this + 616))(this) & 1) != 0;
}

BOOL VoiceProcessorV7::ShouldUseFullIOCycle(VoiceProcessorV7 *this)
{
  return VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0
      || *((_DWORD *)this + 19) != 1;
}

uint64_t VoiceProcessorV7::IsInGenericVoiceIsolationMode(VoiceProcessorV7 *this)
{
  if (VoiceProcessorV2::GetChatFlavor(this) != 2 || (*((unsigned char *)this + 16608) & 4) == 0) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    if (**((_DWORD **)this + 295) == VoiceProcessorV7::IsInGenericVoiceIsolationMode(void)const::genericTuningUseCases[v2])
    {
      int v3 = VoiceProcessorV7::IsInGenericVoiceIsolationMode(void)const::genericTuningUseCases[v2 + 1];
      if (v3 == 1634630002 || **((_DWORD **)this + 292) == v3) {
        break;
      }
    }
    v2 += 2;
    if (v2 == 6) {
      return 0;
    }
  }
  return 1;
}

BOOL VoiceProcessorV7::ShouldApplyThirdPartyAppTuningOverride(VoiceProcessorV7 *this)
{
  return **((_DWORD **)this + 292) == 1886613611
      && !*((_DWORD *)this + 19)
      && (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0
       || VoiceProcessorV2::GetChatFlavor(this) == 1 && (*((unsigned char *)this + 16608) & 2) != 0);
}

uint64_t VoiceProcessorV7::ShouldThirdPartyAppUseFaceTimeDSPAndTuning(VoiceProcessorV7 *this)
{
  if (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0) {
    return 1;
  }
  if (VoiceProcessorV2::GetChatFlavor(this) == 1) {
    return (*((unsigned __int8 *)this + 16608) >> 1) & 1;
  }
  return 0;
}

void VoiceProcessorV7::SetupDownlinkCarPlayVolumeExperienceDSP(VoiceProcessorV7 *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!_os_feature_enabled_impl()) {
    return;
  }
  int v2 = **((_DWORD **)this + 292);
  if (v2 == 1885892674) {
    goto LABEL_5;
  }
  if (v2 != 1886614639)
  {
    if (v2 != 1885892706) {
      return;
    }
LABEL_5:
    if (*((_DWORD *)this + 597) != 1701869160) {
      return;
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v3 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    int v4 = (*v3 ? *v3 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "VoiceProcessor_v7.cpp";
      __int16 v9 = 1024;
      int v10 = 272;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> enabling CarPlay loudness normalization DSP", (uint8_t *)&v7, 0x12u);
    }
  }
  int v5 = (int *)*((void *)this + 1578);
  if (v5 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1)
    {
      BOOL v6 = (int *)*((void *)this + 1578);
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      int v5 = v6;
    }
    CALegacyLog::log(v5, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 272, "SetupDownlinkCarPlayVolumeExperienceDSP", "enabling CarPlay loudness normalization DSP");
  }
  *((void *)this + 1112) |= 0x3C00uLL;
}

void VoiceProcessorV7::SetupDownlinkBasicAUChain(VoiceProcessorV7 *this)
{
  VoiceProcessorV7::InitializeSWCrossoverChannelCount(this);
  VoiceProcessorV6::SetupDownlinkBasicAUChain(this);
  if ((*((_DWORD *)this + 18) - 1) <= 6)
  {
    int v2 = (_DWORD *)*((void *)this + 292);
    if (v2 != *((_DWORD **)this + 293) && *v2 == 1886545251) {
      *((void *)this + 1112) |= 0x100000000000uLL;
    }
  }
}

uint64_t VoiceProcessorV7::InitializeSWCrossoverChannelCount(VoiceProcessorV7 *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 18) - 22) > 7) {
    return 0;
  }
  int v2 = (_DWORD *)*((void *)this + 292);
  if (v2 == *((_DWORD **)this + 293) || *v2 != 1886613611 || (unsigned int v3 = *((_DWORD *)this + 89), v3 < 2))
  {
    uint64_t v8 = 0;
    *((_DWORD *)this + 1075) = 1;
    return v8;
  }
  int v4 = (char *)this + 15961;
  if (v3)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v10 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v11 = (*v10 ? *v10 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        CFPropertyListRef v14 = "VoiceProcessor_v7.cpp";
        __int16 v15 = 1024;
        int v16 = 217;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> downlink mix channel count is an odd number", buf, 0x12u);
      }
    }
    uint64_t v8 = 1650879860;
    uint64_t v12 = (int *)*((void *)this + 1578);
    if (v12 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v12, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 217, "InitializeSWCrossoverChannelCount", "downlink mix channel count is an odd number");
    }
  }
  else
  {
    *((_DWORD *)this + 1075) = v3 >> 1;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v5 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      BOOL v6 = (*v5 ? *v5 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = *((_DWORD *)this + 1075);
        *(_DWORD *)std::string buf = 136315650;
        CFPropertyListRef v14 = "VoiceProcessor_v7.cpp";
        __int16 v15 = 1024;
        int v16 = 221;
        __int16 v17 = 1024;
        int v18 = v7;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> SW crossover channel count = %u", buf, 0x18u);
      }
    }
    uint64_t v8 = *((void *)this + 1578);
    if (v8)
    {
      if (*v4 || *((unsigned char *)this + 15962))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log((int *)v8, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 221, "InitializeSWCrossoverChannelCount", "SW crossover channel count = %u", *((_DWORD *)this + 1075));
      }
      return 0;
    }
  }
  return v8;
}

VoiceProcessorV2 *VoiceProcessorV7::SetupUplink_MS(VoiceProcessorV7 *this, unsigned int a2)
{
  if (a2 != 1)
  {
    uint64_t v3 = *((void *)this + 583);
    uint64_t v4 = v3 | 0x101;
    uint64_t v5 = v3 | 0x107;
    uint64_t v6 = 287;
    if (a2 == 3) {
      uint64_t v6 = 271;
    }
    uint64_t v7 = v3 | v6;
    if (a2 < 3) {
      uint64_t v7 = v5;
    }
    if (!a2) {
      uint64_t v7 = v4;
    }
    *((void *)this + 583) = v7 & 0xF3FFFFFFBBFFF7FFLL | 0xC00000004000800;
  }
  BOOL result = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if (result == 2 && (*((unsigned char *)this + 16608) & 4) != 0)
  {
    *((void *)this + 583) |= 0x1000000000000000uLL;
    if (*((unsigned char *)this + 2246))
    {
      BOOL result = (VoiceProcessorV2 *)VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(result);
      if (result) {
        *((void *)this + 584) |= 8uLL;
      }
    }
  }
  return result;
}

uint64_t VoiceProcessorV7::SetupUplink_BF_MS(VoiceProcessorV7 *this, unsigned int a2, char a3)
{
  VoiceProcessorV6::SetupUplink_BF_MS((uint64_t)this, a2, a3);
  unsigned int ChatFlavor = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if (ChatFlavor == 2 && (*((unsigned char *)this + 16608) & 4) != 0)
  {
    *((void *)this + 583) |= 0x1000000000000000uLL;
    if (*((unsigned char *)this + 2246))
    {
      if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(ChatFlavor)) {
        *((void *)this + 584) |= 8uLL;
      }
    }
  }
  uint64_t result = VoiceProcessorV2::GetChatFlavor(this);
  if (result == 1 && (*((unsigned char *)this + 16608) & 2) != 0)
  {
    uint64_t result = (*(uint64_t (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this);
    if (result >= 9) {
      *((void *)this + 583) |= 0x8000000000000uLL;
    }
  }
  return result;
}

uint64_t VoiceProcessorV7::SetupUplinkBasicAUChain(VoiceProcessorV7 *this)
{
  VoiceProcessorV6::SetupUplinkBasicAUChain(this);
  if ((*(unsigned int (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this) >= 8) {
    *((void *)this + 583) |= 0x20000000uLL;
  }
  unsigned int ChatFlavor = (VoiceProcessorV2 *)VoiceProcessorV2::GetChatFlavor(this);
  if (ChatFlavor == 2 && (*((unsigned char *)this + 16608) & 4) != 0)
  {
    *((void *)this + 583) |= 0x1000000000000000uLL;
    if (*((unsigned char *)this + 2246))
    {
      if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(ChatFlavor)) {
        *((void *)this + 584) |= 8uLL;
      }
    }
  }
  uint64_t result = VoiceProcessorV2::GetChatFlavor(this);
  if (result == 1 && (*((unsigned char *)this + 16608) & 2) != 0)
  {
    uint64_t result = (*(uint64_t (**)(VoiceProcessorV7 *))(*(void *)this + 112))(this);
    if (result >= 9) {
      *((void *)this + 583) |= 0x8000000000000uLL;
    }
  }
  return result;
}

void VoiceProcessorV7::ScaleHardwareOutputPresentationLatency(VoiceProcessorV7 *this, AudioObjectID inObjectID)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 15961;
  double outData = 0.0;
  *(void *)&inAddress.mSelector = 0x6F7574706E737274;
  inAddress.muint64_t Element = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v6 = (void *)VPLogScope(void)::scope;
  if (PropertyData)
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315650;
        *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        __int16 v29 = 1024;
        int v30 = 183;
        __int16 v31 = 1024;
        LODWORD(v32) = PropertyData;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
      }
    }
    uint64_t v8 = (int *)*((void *)this + 1578);
    if (v8 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 183, "ScaleHardwareOutputPresentationLatency", "error %d getting ref physical device nominal sample rate", PropertyData);
    }
  }
  else
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      __int16 v9 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *((void *)this + 88);
        int v11 = *((_DWORD *)this + 292);
        inAddress.mSelector = 136316162;
        *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        __int16 v29 = 1024;
        int v30 = 185;
        __int16 v31 = 2048;
        double v32 = outData;
        __int16 v33 = 2048;
        uint64_t v34 = v10;
        __int16 v35 = 1024;
        int v36 = v11;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
          (uint8_t *)&inAddress,
          0x2Cu);
      }
    }
    uint64_t v12 = (int *)*((void *)this + 1578);
    if (v12 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 185, "ScaleHardwareOutputPresentationLatency", "ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
        outData,
        *((double *)this + 88),
        *((_DWORD *)this + 292));
    }
    if (outData > 0.0)
    {
      LODWORD(v5) = *((_DWORD *)this + 292);
      double v13 = *((double *)this + 73) * (double)v5 / outData;
      *((_DWORD *)this + 292) = v13;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CFPropertyListRef v14 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        __int16 v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          int v16 = *((_DWORD *)this + 292);
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
          __int16 v29 = 1024;
          int v30 = 188;
          __int16 v31 = 1024;
          LODWORD(v32) = v16;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      __int16 v17 = (int *)*((void *)this + 1578);
      if (v17 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 188, "ScaleHardwareOutputPresentationLatency", "output latency after scaling = %u", *((_DWORD *)this + 292));
      }
      if (!*((_DWORD *)this + 1129))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v18 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            int v20 = *((_DWORD *)this + 287);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            __int16 v29 = 1024;
            int v30 = 190;
            __int16 v31 = 1024;
            LODWORD(v32) = v20;
            _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency before scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        uint64_t v21 = (int *)*((void *)this + 1578);
        if (v21 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 190, "ScaleHardwareOutputPresentationLatency", "tap stream input latency before scaling = %u", *((_DWORD *)this + 287));
        }
        LODWORD(v13) = *((_DWORD *)this + 287);
        *((_DWORD *)this + 287) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v22 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            int v24 = *((_DWORD *)this + 287);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            __int16 v29 = 1024;
            int v30 = 192;
            __int16 v31 = 1024;
            LODWORD(v32) = v24;
            _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        unint64_t v25 = (int *)*((void *)this + 1578);
        if (v25 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 192, "ScaleHardwareOutputPresentationLatency", "tap stream input latency after scaling = %u", *((_DWORD *)this + 287));
        }
      }
      VoiceProcessorV2::PListWriteRefPhysicalDevSR(this, &outData);
    }
  }
}

void VoiceProcessorV7::ScaleHardwareOutputSafetyOffsets(VoiceProcessorV7 *this, AudioObjectID inObjectID)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 15961;
  double outData = 0.0;
  *(void *)&inAddress.mSelector = 0x6F7574706E737274;
  inAddress.muint64_t Element = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v6 = (void *)VPLogScope(void)::scope;
  if (PropertyData)
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.mSelector = 136315650;
        *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        __int16 v29 = 1024;
        int v30 = 160;
        __int16 v31 = 1024;
        LODWORD(v32) = PropertyData;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
      }
    }
    uint64_t v8 = (int *)*((void *)this + 1578);
    if (v8 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 160, "ScaleHardwareOutputSafetyOffsets", "error %d getting ref physical device nominal sample rate");
    }
  }
  else
  {
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      __int16 v9 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *((void *)this + 88);
        int v11 = *((_DWORD *)this + 294);
        inAddress.mSelector = 136316162;
        *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
        __int16 v29 = 1024;
        int v30 = 162;
        __int16 v31 = 2048;
        double v32 = outData;
        __int16 v33 = 2048;
        uint64_t v34 = v10;
        __int16 v35 = 1024;
        int v36 = v11;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
          (uint8_t *)&inAddress,
          0x2Cu);
      }
    }
    uint64_t v12 = (int *)*((void *)this + 1578);
    if (v12 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 162, "ScaleHardwareOutputSafetyOffsets", "ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
        outData,
        *((double *)this + 88),
        *((_DWORD *)this + 294));
    }
    if (outData > 0.0)
    {
      LODWORD(v5) = *((_DWORD *)this + 294);
      double v13 = *((double *)this + 73) * (double)v5 / outData;
      *((_DWORD *)this + 294) = v13;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CFPropertyListRef v14 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        __int16 v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          int v16 = *((_DWORD *)this + 294);
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
          __int16 v29 = 1024;
          int v30 = 165;
          __int16 v31 = 1024;
          LODWORD(v32) = v16;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      __int16 v17 = (int *)*((void *)this + 1578);
      if (v17 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 165, "ScaleHardwareOutputSafetyOffsets", "output safety offset after scaling = %u", *((_DWORD *)this + 294));
      }
      if (!*((_DWORD *)this + 1129))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v18 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            int v20 = *((_DWORD *)this + 288);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            __int16 v29 = 1024;
            int v30 = 167;
            __int16 v31 = 1024;
            LODWORD(v32) = v20;
            _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset before scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        uint64_t v21 = (int *)*((void *)this + 1578);
        if (v21 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 167, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset before scaling = %u", *((_DWORD *)this + 288));
        }
        LODWORD(v13) = *((_DWORD *)this + 288);
        *((_DWORD *)this + 288) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v22 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            int v24 = *((_DWORD *)this + 288);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v7.cpp";
            __int16 v29 = 1024;
            int v30 = 169;
            __int16 v31 = 1024;
            LODWORD(v32) = v24;
            _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        unint64_t v25 = (int *)*((void *)this + 1578);
        if (v25 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 169, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset after scaling = %u");
        }
      }
    }
  }
}

uint64_t VoiceProcessorV7::Initialize(VoiceProcessorV7 *this)
{
  *((_DWORD *)this + 100) = 0;
  int v2 = *((_DWORD *)this + 153);
  if (v2)
  {
    int v3 = 0;
    do
    {
      int v3 = (2 * v3) | 1;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 100) = v3;
  }
  uint64_t result = VoiceProcessorV2::Initialize(this);
  if (!result) {
    VoiceProcessorV4::InitializeV4Specifics(this);
  }
  return result;
}

uint64_t VoiceProcessorV7::InitializeV7Specifics(VoiceProcessorV7 *this)
{
  unsigned int v2 = *((_DWORD *)this + 18);
  BOOL v3 = v2 > 0x1F;
  unsigned int v4 = (1 << v2) & 0xC0C0000E;
  if (!v3 && v4 != 0) {
    VoiceProcessorV7::LoadTrimGains(this);
  }

  return VoiceProcessorV7::InitializeSWCrossoverChannelCount(this);
}

void VoiceProcessorV7::LoadTrimGains(VoiceProcessorV7 *this)
{
  char v3 = 0;
  VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(this, &v3);
  char v2 = 1;
  VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(this, &v2);
}

void VoiceProcessorV7::LoadTrimGains(void)::$_0::operator()(void *a1, unsigned char *a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (char *)a1 + 15961;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  if (*a2 == 1)
  {
    unint64_t v5 = (const void *)MGCopyAnswer();
    if (SHIBYTE(v87) < 0)
    {
      uint64_t v86 = 9;
      uint64_t v7 = v85;
      uint64_t v6 = (char *)v85 + 9;
    }
    else
    {
      uint64_t v6 = (char *)&v86 + 1;
      HIBYTE(v87) = 9;
      uint64_t v7 = &v85;
    }
    v7[8] = 101;
    uint64_t v8 = "reference";
  }
  else
  {
    if (*a2) {
      goto LABEL_33;
    }
    unint64_t v5 = (const void *)MGCopyAnswer();
    if (SHIBYTE(v87) < 0)
    {
      uint64_t v86 = 10;
      uint64_t v7 = v85;
      uint64_t v6 = (char *)v85 + 10;
    }
    else
    {
      uint64_t v6 = (char *)&v86 + 2;
      HIBYTE(v87) = 10;
      uint64_t v7 = &v85;
    }
    *((_WORD *)v7 + 4) = 25966;
    uint64_t v8 = "microphone";
  }
  *(void *)uint64_t v7 = *(void *)v8;
  unsigned char *v6 = 0;
  if (v5)
  {
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, v5);
    if (!theData)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v20 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v21 = (*v20 ? *v20 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = &v85;
          if (v87 < 0) {
            uint64_t v22 = v85;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 570;
          __int16 v89 = 2080;
          int v90 = v22;
          _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - CF data is not invalid", buf, 0x1Cu);
        }
      }
      uint64_t v23 = (int *)a1[1578];
      if (v23 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v24 = (const char *)&v85;
        if (v87 < 0) {
          int v24 = (const char *)v85;
        }
        CALegacyLog::log(v23, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 570, "operator()", "couldn't parse %s trim gains - CF data is not invalid", v24);
      }
      goto LABEL_221;
    }
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v25 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        double v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = &v85;
          if (v87 < 0) {
            uint64_t v27 = v85;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 577;
          __int16 v89 = 2080;
          int v90 = v27;
          _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data is NULL", buf, 0x1Cu);
        }
      }
      uint64_t v28 = (int *)a1[1578];
      if (v28 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v29 = (const char *)&v85;
        if (v87 < 0) {
          __int16 v29 = (const char *)v85;
        }
        CALegacyLog::log(v28, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 577, "operator()", "couldn't parse %s trim gains - raw data is NULL", v29);
      }
      goto LABEL_221;
    }
    if (!theData)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    unint64_t Length = CFDataGetLength(theData);
    if (Length <= 4)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v11 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v12 = (*v11 ? *v11 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          double v13 = &v85;
          if (v87 < 0) {
            double v13 = v85;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 592;
          __int16 v89 = 2080;
          int v90 = v13;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data size is not valid", buf, 0x1Cu);
        }
      }
      CFPropertyListRef v14 = (int *)a1[1578];
      if (v14 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v14, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 592, "operator()", "couldn't parse %s trim gains - raw data size is not valid");
      }
LABEL_221:
      if (theData) {
        CFRelease(theData);
      }
      goto LABEL_223;
    }
    int v30 = *(_DWORD *)BytePtr;
    int v31 = (unsigned __int16)HIWORD(*(_DWORD *)BytePtr);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    double v32 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      __int16 v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = &v85;
        if (v87 < 0) {
          uint64_t v34 = v85;
        }
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 600;
        __int16 v89 = 2080;
        int v90 = v34;
        __int16 v91 = 1024;
        *(_DWORD *)uint64_t v92 = v31;
        *(_WORD *)&v92[4] = 1024;
        *(_DWORD *)&v92[6] = BYTE1(v30);
        __int16 v93 = 1024;
        int v94 = v30;
        _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loaded %s trim gains header from MobileGestalt: {version=%d, size=%d, count=%d}", buf, 0x2Eu);
      }
    }
    __int16 v35 = (int *)a1[1578];
    if (v35 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v36 = (const char *)&v85;
      if (v87 < 0) {
        int v36 = (const char *)v85;
      }
      CALegacyLog::log(v35, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 600, "operator()", "loaded %s trim gains header from MobileGestalt: {version=%d, size=%d, count=%d}", v36, HIWORD(v30), BYTE1(v30), v30);
    }
    if (v31 != 1)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v42 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v43 = (*v42 ? *v42 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          __int16 v44 = &v85;
          if (v87 < 0) {
            __int16 v44 = v85;
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 605;
          __int16 v89 = 2080;
          int v90 = v44;
          __int16 v91 = 1024;
          *(_DWORD *)uint64_t v92 = v31;
          _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - data structure version %d is not supported", buf, 0x22u);
        }
      }
      int v45 = (int *)a1[1578];
      if (v45 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v46 = (const char *)&v85;
        if (v87 < 0) {
          __int16 v46 = (const char *)v85;
        }
        CALegacyLog::log(v45, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 605, "operator()", "couldn't parse %s trim gains - data structure version %d is not supported", v46, HIWORD(v30));
      }
      goto LABEL_221;
    }
    unsigned int v37 = v30;
    if (Length < BYTE1(v30) * v30 + 4)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CFStringEncoding v38 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        signed int v39 = (*v38 ? *v38 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          float v40 = &v85;
          if (v87 < 0) {
            float v40 = v85;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 609;
          __int16 v89 = 2080;
          int v90 = v40;
          _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - raw data size is not valid", buf, 0x1Cu);
        }
      }
      BOOL v41 = (int *)a1[1578];
      if (v41 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v41, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 609, "operator()", "couldn't parse %s trim gains - raw data size is not valid");
      }
      goto LABEL_221;
    }
    if ((v30 & 0xFF00) != 0x200)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      size_t v70 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v70)
      {
        uint64_t v71 = v70;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          uint64_t v72 = &v85;
          if (v87 < 0) {
            uint64_t v72 = v85;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 613;
          __int16 v89 = 2080;
          int v90 = v72;
          _os_log_impl(&dword_1BB0CE000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't parse %s trim gains - data structure size is not valid", buf, 0x1Cu);
        }
      }
      uint64_t v73 = (int *)a1[1578];
      if (v73 && (*v4 || v4[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v73, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 613, "operator()", "couldn't parse %s trim gains - data structure size is not valid");
      }
      goto LABEL_221;
    }
    std::string __p = 0;
    size_t v82 = 0;
    unint64_t v83 = 0;
    memset(&v80, 0, sizeof(v80));
    uint64_t v77 = 0;
    size_t v78 = 0;
    uint64_t v79 = 0;
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(&v77, (char *)BytePtr + 4, (char *)&BytePtr[((2 * v30 + 2) & 0x3FC) + 4], (2 * v30 + 2) & 0x3FC);
    Endianness::Swap<(Endianness::Direction)1,short>(buf, (__int16 **)&v77);
    int v47 = *(__int16 **)&buf[8];
    size_t v75 = *(void **)buf;
    if (*(void *)buf != *(void *)&buf[8])
    {
      __int16 v48 = *(__int16 **)buf;
      do
      {
        float v49 = (double)*v48 * 0.1;
        double v50 = v82;
        if (v82 >= v83)
        {
          float v52 = (float *)__p;
          uint64_t v53 = ((char *)v82 - (unsigned char *)__p) >> 2;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v55 = (char *)v83 - (unsigned char *)__p;
          if (((char *)v83 - (unsigned char *)__p) >> 1 > v54) {
            unint64_t v54 = v55 >> 1;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56)
          {
            float v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v83, v56);
            float v52 = (float *)__p;
            double v50 = v82;
          }
          else
          {
            float v57 = 0;
          }
          uint64_t v58 = (float *)&v57[4 * v53];
          float *v58 = v49;
          uint64_t v51 = v58 + 1;
          while (v50 != v52)
          {
            int v59 = *((_DWORD *)v50-- - 1);
            *((_DWORD *)v58-- - 1) = v59;
          }
          std::string __p = v58;
          size_t v82 = v51;
          unint64_t v83 = (float *)&v57[4 * v56];
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *size_t v82 = v49;
          uint64_t v51 = v50 + 1;
        }
        size_t v82 = v51;
        std::to_string(&v76, v49);
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v60 = &v76;
        }
        else {
          size_t v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
        }
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v76.__r_.__value_.__l.__size_;
        }
        std::string::append(&v80, (const std::string::value_type *)v60, size);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (v37 <= (unint64_t)(((char *)v82 - (unsigned char *)__p) >> 2)) {
          break;
        }
        std::string::append(&v80, ", ", 2uLL);
        ++v48;
      }
      while (v48 != v47);
    }
    if (v75) {
      operator delete(v75);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v62 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
    if (v62)
    {
      __int16 v63 = v62;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v64 = &v85;
        if (v87 < 0) {
          uint64_t v64 = v85;
        }
        uint64_t v65 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v65 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 637;
        __int16 v89 = 2080;
        int v90 = v64;
        __int16 v91 = 2080;
        *(void *)uint64_t v92 = v65;
        _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loaded %s trim gains from MobileGestalt: {%s}", buf, 0x26u);
      }
    }
    __int16 v66 = (int *)a1[1578];
    if (v66 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v67 = (const char *)&v85;
      if (v87 < 0) {
        uint64_t v67 = (const char *)v85;
      }
      uint64_t v68 = &v80;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      CALegacyLog::log(v66, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 637, "operator()", "loaded %s trim gains from MobileGestalt: {%s}", v67, (const char *)v68);
    }
    if (*a2)
    {
      if (*a2 != 1)
      {
LABEL_215:
        if (v77)
        {
          size_t v78 = v77;
          operator delete(v77);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (__p)
        {
          size_t v82 = (float *)__p;
          operator delete(__p);
        }
        goto LABEL_221;
      }
      uint64_t v69 = 32781;
    }
    else
    {
      uint64_t v69 = 32780;
    }
    (*(void (**)(void *, uint64_t))(*a1 + 56))(a1, v69);
    goto LABEL_215;
  }
LABEL_33:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  __int16 v15 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    int v16 = (*v15 ? *v15 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = &v85;
      if (v87 < 0) {
        __int16 v17 = v85;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "VoiceProcessor_v7.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 563;
      __int16 v89 = 2080;
      int v90 = v17;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't load %s trim gains from MobileGestalt", buf, 0x1Cu);
    }
  }
  int v18 = (int *)a1[1578];
  if (v18 && (*v4 || v4[1]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v19 = (const char *)&v85;
    if (v87 < 0) {
      uint64_t v19 = (const char *)v85;
    }
    CALegacyLog::log(v18, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v7/VoiceProcessor_v7.cpp", 563, "operator()", "couldn't load %s trim gains from MobileGestalt", v19);
  }
LABEL_223:
  if (SHIBYTE(v87) < 0) {
    operator delete(v85);
  }
}

void sub_1BB6829E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,const void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    operator delete(a30);
  }
  applesauce::CF::DataRef::~DataRef(&a33);
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void Endianness::Swap<(Endianness::Direction)1,short>(void *a1, __int16 **a2)
{
  unint64_t v2 = (char *)a2[1] - (char *)*a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v2 >= 2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, v2 >> 1);
    unint64_t v5 = (char *)a1[1];
    size_t v6 = v2 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v5, v6);
    a1[1] = &v5[v6];
    uint64_t v7 = *a2;
    unint64_t v8 = (char *)a2[1] - (char *)*a2;
    if (v8 >= 2)
    {
      unint64_t v9 = v8 >> 1;
      uint64_t v10 = (_WORD *)*a1;
      do
      {
        __int16 v11 = *v7++;
        *v10++ = v11;
        --v9;
      }
      while (v9);
    }
  }
}

void sub_1BB682B4C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV7::GetVersion(VoiceProcessorV7 *this)
{
  return 7;
}

void VoiceProcessorV7::~VoiceProcessorV7(VoiceProcessorV7 *this)
{
  VoiceProcessorV7::~VoiceProcessorV7(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14BBF18;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 16696);

  VoiceProcessorV6::~VoiceProcessorV6(this);
}

void vp::v7::create(vp::v7 *this, const vp::Context *a2)
{
}

void sub_1BB682CE4(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C40AB698E98);
  _Unwind_Resume(a1);
}

void AULando::LRLsRs::algoExtractLsRsPI(vDSP_Length a1, float *__src, float *a3, void *__dst, float *a5, float *a6, float *a7, int a8, IR::IRProcessor **a9)
{
  v26[2] = *(float **)MEMORY[0x1E4F143B8];
  vDSP_Length v14 = a1;
  if (a8)
  {
    MEMORY[0x1F4188790](a1);
    __int16 v17 = (float *)((char *)&v21 - ((v16 + 15) & 0x7FFFFFFF0));
    v26[0] = v18;
    v26[1] = v17;
    uint64_t v19 = *a9;
    v25[0] = __src;
    IR::IRProcessor::processMultipleInputs(v19, (const float **)v25, v26, 1u, 2u, a1, 1.0, 0);
    float __B = -0.40518;
    float v22 = -0.071903;
    vDSP_vsmul(v17, 1, &__B, a6, 1, v14);
    vDSP_vsmul(v17, 1, &v22, a7, 1, v14);
    v25[0] = a5;
    v25[1] = v17;
    int v20 = a9[1];
    int v24 = a3;
    IR::IRProcessor::processMultipleInputs(v20, (const float **)&v24, v25, 1u, 2u, a1, 1.0, 0);
    LODWORD(v24) = 1033060810;
    HIDWORD(v21) = 1053783024;
    vDSP_vsma(v17, 1, (const float *)&v24, a6, 1, a6, 1, v14);
    vDSP_vsma(v17, 1, (const float *)&v21 + 1, a7, 1, a7, 1, v14);
  }
  else
  {
    memcpy(__dst, __src, 4 * a1);
    memcpy(a5, a3, 4 * v14);
    LODWORD(v26[0]) = 1053783024;
    LODWORD(v25[0]) = 1033060810;
    vDSP_vsmul(__src, 1, (const float *)v26, a6, 1, v14);
    vDSP_vsmul(__src, 1, (const float *)v25, a7, 1, v14);
    LODWORD(v24) = -1114422838;
    float __B = -0.40518;
    vDSP_vsma(a3, 1, (const float *)&v24, a6, 1, a6, 1, v14);
    vDSP_vsma(a3, 1, &__B, a7, 1, a7, 1, v14);
  }
}

void AULando::LRLsRs::algoUpmixPI(vDSP_Length a1, AULando::LRLsRs *this, float *__C, float *__E, float *a5, float *a6, float *a7, int a8, IR::IRProcessor **a9, unsigned int a10, BOOL a11)
{
  v36[2] = *(float **)MEMORY[0x1E4F143B8];
  if (a8)
  {
    uint64_t v32 = (uint64_t)&v32;
    __int16 v33 = a7;
    MEMORY[0x1F4188790](a1);
    __int16 v17 = (float *)((char *)&v32 - ((v16 + 15) & 0x7FFFFFFF0));
    MEMORY[0x1F4188790](v18);
    int v20 = (float *)((char *)&v32 - v19);
    MEMORY[0x1F4188790](v21);
    uint64_t v23 = (float *)((char *)&v32 - v22);
    MEMORY[0x1F4188790](v24);
    double v26 = (float *)((char *)&v32 - v25);
    v36[0] = v17;
    v36[1] = v20;
    uint64_t v27 = *a9;
    v35[0] = v28;
    IR::IRProcessor::processMultipleInputs(v27, (const float **)v35, v36, 1u, 2u, a1, 1.0, 0);
    v35[0] = v23;
    v35[1] = v26;
    __int16 v29 = a9[1];
    uint64_t v34 = __C;
    IR::IRProcessor::processMultipleInputs(v29, (const float **)&v34, v35, 1u, 2u, a1, 1.0, 0);
    BYTE4(v30) = 1;
    LODWORD(v30) = a1;
    AULando::LRLsRs::decode_PI((AULando::LRLsRs *)v17, v20, v23, v26, __E, a5, a6, v33, v30, *(unsigned int *)v31, v31[4]);
  }
  else
  {
    BYTE4(a9) = 0;
    LODWORD(a9) = a1;
    AULando::LRLsRs::decode_PI(this, (const float *)this, __C, __C, __E, a5, a6, a7, (vDSP_Length)a9, a10, a11);
  }
}

void AULando::LRLsRs::decode_PI(AULando::LRLsRs *this, const float *a2, const float *__C, const float *a4, float *__E, float *a6, float *a7, float *a8, vDSP_Length a9, unsigned int a10, BOOL a11)
{
  float __D = 0.26118;
  float __B = 0.61155;
  vDSP_vsmsma((const float *)this, 1, &__B, __C, 1, &__D, __E, 1, a9);
  float v23 = 0.61155;
  float v24 = 0.26118;
  vDSP_vsmsma((const float *)this, 1, &v24, __C, 1, &v23, a6, 1, a9);
  if (BYTE4(a9)) {
    float v17 = 1.0;
  }
  else {
    float v17 = -1.0;
  }
  float v21 = v17 * 0.071903;
  float v22 = v17 * -0.40518;
  vDSP_vsmsma(a2, 1, &v22, a4, 1, &v21, a7, 1, a9);
  float v19 = v17 * 0.40518;
  float v20 = v17 * -0.071903;
  vDSP_vsmsma(a2, 1, &v20, a4, 1, &v19, a8, 1, a9);
}

uint64_t AUOneChannelNS::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 536) = a2;
  return this;
}

uint64_t AUOneChannelNS::ShouldBypassEffect(AUOneChannelNS *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUOneChannelNS::ValidFormat(AUOneChannelNS *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    uint64_t result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105) {
      char v7 = result;
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      long long v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      uint64_t v10 = *(void *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      int v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 != 4) {
        LODWORD(result) = 0;
      }
    }
    if (a4->mChannelsPerFrame == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUOneChannelNS::SupportedNumChannels(AUOneChannelNS *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUOneChannelNS::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUOneChannelNS::StreamFormatWritable(AUOneChannelNS *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUOneChannelNS::SupportsTail(AUOneChannelNS *this)
{
  return 1;
}

double AUOneChannelNS::GetTailTime(AUOneChannelNS *this)
{
  return 0.0;
}

double AUOneChannelNS::GetLatency(AUOneChannelNS *this)
{
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 80);
  if (*((unsigned char *)this + 376))
  {
    LODWORD(v3) = *((_DWORD *)this + 84);
    double v4 = (double)v3;
  }
  else
  {
    double v4 = 1024.0;
    if (v2 < 16000.0) {
      double v4 = 512.0;
    }
    if (v2 >= 32000.0) {
      double v4 = 2048.0;
    }
  }
  return v4 / v2;
}

uint64_t AUOneChannelNS::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 135);
  }
  return result;
}

uint64_t AUOneChannelNS::GetParameterInfo(AUOneChannelNS *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"noise supp level";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"noise supp level", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x42C80000C2C80000;
      AudioUnitParameterValue v6 = -6.0;
      goto LABEL_14;
    case 1:
      buffer->cfNameString = @"speech prob";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"speech prob", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v7 = 0x3F80000000000000;
      goto LABEL_8;
    case 2:
      CFStringRef v8 = @"noise SPL (gated PS)";
      goto LABEL_11;
    case 3:
      buffer->cfNameString = @"(I) AGC dynamic gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) AGC dynamic gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v7 = 0x41A00000C1A00000;
LABEL_8:
      *(void *)&buffer->minCFNumberRef Value = v7;
      AudioUnitParameterOptions v9 = buffer->flags | 0x8000;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v9;
      return result;
    case 4:
      buffer->cfNameString = @"(I) AGC post gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) AGC post gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x41A00000C1A00000;
      buffer->defaultCFNumberRef Value = 0.0;
      return result;
    case 5:
      CFStringRef v8 = @"(I) noise SPL (one mic)";
LABEL_11:
      buffer->cfNameString = v8;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000041A00000;
      AudioUnitParameterValue v6 = 40.0;
      AudioUnitParameterOptions v10 = buffer->flags | 0x8000;
      goto LABEL_15;
    case 6:
      buffer->cfNameString = @"SPL Meter Calibration";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"SPL Meter Calibration", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x42C80000C1C80000;
      AudioUnitParameterValue v6 = 80.0;
      goto LABEL_14;
    case 7:
      buffer->cfNameString = @"SPL Time Constant";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"SPL Time Constant", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4120000000000000;
      AudioUnitParameterValue v6 = 5.0;
LABEL_14:
      AudioUnitParameterOptions v10 = buffer->flags | 0x80000000;
LABEL_15:
      buffer->defaultCFNumberRef Value = v6;
      buffer->AudioUnitParameterOptions flags = v10;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUOneChannelNS::GetParameterList(AUOneChannelNS *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    }
    unsigned int v4 = 8;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUOneChannelNS::SetBusCount(AUOneChannelNS *this, int a2, unsigned int a3)
{
  unsigned int v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    unsigned int v4 = (AUOneChannelNS *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  uint64_t v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    unsigned int v4 = (AUOneChannelNS *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

BOOL AUOneChannelNS::BusCountWritable(AUOneChannelNS *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUOneChannelNS::Render(AUOneChannelNS *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  AudioUnitParameterOptions v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 80), 1u);
    if (v11 && *(_DWORD *)(v11 + 172))
    {
      uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 1u);
      uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 1, a4);
      if (result) {
        return result;
      }
      uint64_t v13 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 1u);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    }
    else
    {
      uint64_t BufferList = 0;
    }
    uint64_t v15 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0);
    v22[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
    v22[1] = BufferList;
    uint64_t v16 = ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0);
    v21[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
    v21[1] = 0;
    uint64_t v17 = *((void *)this + 15);
    if (v17) {
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    uint64_t v19 = *((void *)this + 21);
    if (v19) {
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
    }
    else {
      uint64_t v20 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    return (*(uint64_t (**)(AUOneChannelNS *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, v18, v22, v20, v21);
  }
  return result;
}

uint64_t AUOneChannelNS::ProcessMultipleBufferLists(AUOneChannelNS *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if ((*(unsigned int (**)(AUOneChannelNS *, unsigned int *))(*(void *)this + 576))(this, a2))
  {
    if (*((unsigned __int8 *)this + 548) == *((unsigned __int8 *)this + 549))
    {
      mData = (*a5)->mBuffers[0].mData;
      vDSP_Length v14 = (*a7)->mBuffers[0].mData;
      if (mData != v14)
      {
        size_t mDataByteSize = (*a7)->mBuffers[0].mDataByteSize;
LABEL_42:
        memcpy(v14, mData, mDataByteSize);
      }
    }
    else
    {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    return 0;
  }
  int v16 = *((_DWORD *)this + 135);
  if (v16 != *((_DWORD *)this + 136))
  {
    AUOneChannelNS::UpdateParameters(this);
    *((_DWORD *)this + 136) = v16;
  }
  if (a4 < 2)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = a5[1];
    if (v17) {
      uint64_t v17 = (const AudioBufferList *)v17->mBuffers[0].mData;
    }
  }
  if (*((unsigned char *)this + 376))
  {
    uint64_t v19 = (float *)(*a5)->mBuffers[0].mData;
    if (*((unsigned char *)this + 548))
    {
      uint64_t v20 = &v19[*((unsigned int *)this + 84)];
      v40[0] = v19;
      v40[1] = v20;
      uint64_t v21 = *((void *)this + 78);
      *(void *)(v21 + 600) = v17;
      CNoiseSuppressorV3::speex_preprocess_run_freq(v21, v40, 0);
    }
    else
    {
      uint64_t v23 = *((void *)this + 78);
      *(void *)(v23 + 600) = v17;
      CNoiseSuppressorV3::speex_preprocess_run((int *)v23, (char *)v19, 0);
    }
    uint64_t v24 = *((void *)this + 78);
    if (v24) {
      float v25 = *(float *)(v24 + 332);
    }
    else {
      float v25 = 0.0;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, 1u, v25, 0);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v27, 2u, *(float *)(*((void *)this + 78) + 336), 0);
    uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v28, 5u, *(float *)(*((void *)this + 78) + 340), 0);
    __int16 v29 = (char *)(*a7)->mBuffers[0].mData;
    if (*((unsigned char *)this + 549))
    {
      if (a6 >= 2 && (vDSP_Length v30 = a7[1]) != 0) {
        int v31 = (char *)v30->mBuffers[0].mData;
      }
      else {
        int v31 = 0;
      }
      uint64_t v32 = *((unsigned int *)this + 84);
      __int16 v33 = &v29[4 * v32];
      uint64_t v34 = *((void *)this + 78);
      if (v34)
      {
        __int16 v35 = *(const void **)(v34 + 584);
        uint64_t v19 = *(float **)(v34 + 592);
      }
      else
      {
        __int16 v35 = 0;
        uint64_t v19 = 0;
      }
      memcpy(v29, v35, 4 * v32);
      size_t v37 = 4 * *((unsigned int *)this + 84);
      CFStringEncoding v38 = v33;
    }
    else
    {
      if (a6 >= 2 && (int v36 = a7[1]) != 0) {
        int v31 = (char *)v36->mBuffers[0].mData;
      }
      else {
        int v31 = 0;
      }
      size_t v37 = 4 * *((unsigned int *)this + 84);
      CFStringEncoding v38 = v29;
    }
    memcpy(v38, v19, v37);
    uint64_t result = 0;
    if (v31 && v31 != v29)
    {
      uint64_t v39 = *((void *)this + 78);
      mData = *(void **)(v39 + 168);
      size_t mDataByteSize = 4 * *(int *)(v39 + 4);
      vDSP_Length v14 = v31;
      goto LABEL_42;
    }
  }
  else
  {
    *(void *)(*((void *)this + 78) + 600) = v17;
    float v22 = (BlockProcessor *)*((void *)this + 66);
    return BlockProcessor::Process(v22, a3, a5, a7);
  }
  return result;
}

float AUOneChannelNS::UpdateParameters(AUOneChannelNS *this)
{
  double v2 = (AUOneChannelNS *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v5 = *((void *)this + 78);
  if (v5)
  {
    int v6 = (int)Parameter;
    if ((int)Parameter >= 0) {
      int v6 = -v6;
    }
    *(_DWORD *)(v5 + 52) = v6;
    *(_DWORD *)(v5 + 476) = 1;
  }
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *(float *)(*((void *)this + 78) + 356) = ausdk::AUElement::GetParameter(v7, 6u);
  CFStringRef v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v9 = ausdk::AUElement::GetParameter(v8, 7u);
  uint64_t v10 = *((void *)this + 78);
  float result = 1.0 - expf(-1.0 / (float)(v9 * (float)((float)*(int *)(v10 + 8) / (float)*(int *)(v10 + 4))));
  *(float *)(v10 + 360) = result;
  return result;
}

uint64_t AUOneChannelNS::CanScheduleParameters(AUOneChannelNS *this)
{
  return 0;
}

uint64_t AUOneChannelNS::SetParameter(AUOneChannelNS *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  }
  else
  {
    Scope = (AUOneChannelNS *)((char *)this + 32);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUOneChannelNS *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    ++*((_DWORD *)this + 135);
  }
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(v11, a2, a5, 0);
  return 0;
}

uint64_t AUOneChannelNS::SetProperty(AUOneChannelNS *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  switch(a2)
  {
    case 4520:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a5) {
        return 4294956445;
      }
      CFDictionaryRef v16 = *a5;
      CFNumberRef Value = CFDictionaryGetValue(*a5, @"NoiseUpperBound");
      BOOL v18 = Value != 0;
      if (!Value || (uint64_t result = AUOneChannelNS::SetNoiseBound((uint64_t)this, 0, Value), !result))
      {
        uint64_t result = (uint64_t)CFDictionaryGetValue(v16, @"NoiseLowerBound");
        if (result)
        {
          LODWORD(result) = AUOneChannelNS::SetNoiseBound((uint64_t)this, 1, (CFTypeRef)result);
          if (Value) {
            BOOL v19 = 1;
          }
          else {
            BOOL v19 = result == 0;
          }
          BOOL v18 = v19;
        }
        if (v18) {
          return result;
        }
        else {
          return 4294956445;
        }
      }
      return result;
    case 4521:
    case 4523:
    case 4524:
      uint64_t result = 4294956445;
      if (a6 == 4)
      {
        int v8 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 <= 1u)
        {
          if (a2 == 4521)
          {
            uint64_t result = 0;
            *((_DWORD *)this + 146) = v8;
          }
          else
          {
            uint64_t result = 0;
            if (a2 == 4523) {
              *((_DWORD *)this + 147) = v8;
            }
            else {
              *((_DWORD *)this + 148) = v8;
            }
          }
        }
      }
      return result;
    case 4522:
      return result;
    case 4525:
      if (!a5) {
        return 0;
      }
      uint64_t result = 4294956445;
      if (*(float *)a5 >= 0.0)
      {
        float v11 = *((float *)a5 + 1);
        if (v11 >= 0.0)
        {
          uint64_t v12 = *((unsigned int *)a5 + 2);
          CFDictionaryRef v13 = a5[2];
          *((_DWORD *)this + 150) = *(_DWORD *)a5;
          *((float *)this + 151) = v11;
          *((_DWORD *)this + 152) = v12;
          if (v12)
          {
            size_t v14 = 8 * v12;
            uint64_t v15 = malloc_type_malloc(8 * v12, 0x100004000313F17uLL);
            *((void *)this + 77) = v15;
            memcpy(v15, v13, v14);
          }
          return 0;
        }
      }
      return result;
    default:
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 376) = *(unsigned char *)a5;
          return result;
        }
        return 4294956445;
      }
      if (a2 != 21) {
        return result;
      }
      if (a6 < 4) {
        return 4294956445;
      }
      int v9 = *(_DWORD *)a5;
      int v10 = *(_DWORD *)a5 != 0;
      if (v10 != (*(unsigned int (**)(AUOneChannelNS *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUOneChannelNS *, BOOL))(*(void *)this + 584))(this, v9 != 0);
      }
      return 0;
  }
}

uint64_t AUOneChannelNS::SetNoiseBound(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 552;
  if (a2) {
    uint64_t v4 = a1 + 568;
  }
  if (a2 == 1) {
    uint64_t v5 = a1 + 568;
  }
  else {
    uint64_t v5 = v4;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef v6 = applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>((const __CFDictionary *)cfa, "SampleRate");
  char v8 = v7;
  if (!cfa)
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }
  double v9 = *(double *)&v6;
  applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(&__p, (const __CFDictionary *)cfa, "NoiseProfile");
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUOneChannelNS.cpp";
      __int16 v27 = 1024;
      int v28 = 517;
      __int16 v29 = 1024;
      unsigned int v30 = v9;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved sample rate (%iHz).", buf, 0x18u);
    }
    if (v24)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        int v10 = (unsigned int *)__p;
        unint64_t v11 = v23 - (void)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUOneChannelNS.cpp";
        __int16 v27 = 1024;
        int v28 = 524;
        __int16 v29 = 1024;
        unsigned int v30 = v23 - __p;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved profile vector (length %i).", buf, 0x18u);
      }
      else
      {
        int v10 = (unsigned int *)__p;
        unint64_t v11 = v23 - (void)__p;
      }
      unint64_t v14 = v11 >> 2;
      std::vector<float>::vector(buf, v11 >> 2);
      if (v11 >= 4)
      {
        uint64_t v15 = *(_DWORD **)buf;
        CFDictionaryRef v16 = v10;
        do
        {
          unsigned int v17 = *v16++;
          *v15++ = bswap32(v17);
          --v14;
        }
        while (v14);
      }
      uint64_t v18 = *(void *)(v5 + 8);
      if (v18) {
        MEMORY[0x1C185D340](v18, 0x1000C8052888210);
      }
      *(void *)(v5 + 8) = 0;
      operator new[]();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUOneChannelNS.cpp";
      __int16 v27 = 1024;
      int v28 = 526;
      uint64_t v12 = MEMORY[0x1E4F14500];
      CFDictionaryRef v13 = "%25s:%-5d Profile vector is not present in the dictionary.";
      goto LABEL_18;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUOneChannelNS.cpp";
    __int16 v27 = 1024;
    int v28 = 519;
    uint64_t v12 = MEMORY[0x1E4F14500];
    CFDictionaryRef v13 = "%25s:%-5d Sample rate is not present in the dictionary.";
LABEL_18:
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
  }
  if (v24 && __p) {
    operator delete(__p);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  return 4294956445;
}

void sub_1BB684510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16) {
    operator delete(v16);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t AUOneChannelNS::GetProperty(AUOneChannelNS *this, int a2, int a3, unsigned int a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  switch(a2)
  {
    case 4521:
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 146);
      goto LABEL_12;
    case 4522:
      return result;
    case 4523:
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 147);
      goto LABEL_12;
    case 4524:
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 148);
      goto LABEL_12;
    case 4525:
      uint64_t result = 0;
      long long v9 = *(_OWORD *)((char *)this + 600);
      a5[2] = *((void *)this + 77);
      *(_OWORD *)a5 = v9;
      return result;
    default:
      if (a2 == 3700)
      {
        uint64_t result = 0;
        int v8 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21) {
          return result;
        }
        int v8 = (*(uint64_t (**)(AUOneChannelNS *))(*(void *)this + 576))(this);
        uint64_t result = 0;
      }
LABEL_12:
      *(_DWORD *)a5 = v8;
      break;
  }
  return result;
}

uint64_t AUOneChannelNS::GetPropertyInfo(AUOneChannelNS *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v8 = 4;
  uint64_t result = 4294956417;
  if (a2 > 4522)
  {
    if ((a2 - 4523) >= 2)
    {
      if (a2 != 4525) {
        return result;
      }
      unsigned int v8 = 24;
    }
    char v9 = *((unsigned char *)this + 17) ^ 1;
LABEL_12:
    uint64_t result = 0;
    *a6 = v9;
    *a5 = v8;
    return result;
  }
  char v9 = 1;
  if (a2 == 21 || a2 == 3700 || a2 == 4521) {
    goto LABEL_12;
  }
  return result;
}

uint64_t *AUOneChannelNS::Cleanup(AUOneChannelNS *this)
{
  uint64_t v2 = *((void *)this + 78);
  if (v2)
  {
    CNoiseSuppressorV3::speex_preprocess_state_destroy(v2);
    *((void *)this + 78) = 0;
  }

  return std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
}

void AUOneChannelNS::Initialize(AUOneChannelNS *this)
{
  (*(void (**)(AUOneChannelNS *))(*(void *)this + 64))(this);
  *((unsigned char *)this + 548) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0) + 88) == 1718773105;
  *((unsigned char *)this + 549) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 88) == 1718773105;
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0) + 80);
  if (*((unsigned char *)this + 376)) {
    CNoiseSuppressorV3::speex_preprocess_state_init((CNoiseSuppressorV3 *)*((unsigned int *)this + 84), v2, 0);
  }
  ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0);
  ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 80), 0);
  ausdk::AUScope::SafeGetElement((AUOneChannelNS *)((char *)this + 128), 0);
  operator new();
}

void sub_1BB684AA8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t AUOneChannelNS::BlockProcessClassFunc(int **this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6 = a2;
  unsigned int v8 = *(char **)(*(void *)a3 + 16);
  CNoiseSuppressorV3::speex_preprocess_run(this[78], v8, 0);
  char v9 = this[78];
  if (v9) {
    float v10 = *((float *)v9 + 83);
  }
  else {
    float v10 = 0.0;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(Element, 1u, v10, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(v12, 2u, *((float *)this[78] + 84), 0);
  CFDictionaryRef v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(v13, 5u, *((float *)this[78] + 85), 0);
  memcpy((*a4)->mBuffers[0].mData, v8, 4 * v6);
  return 0;
}

void AUOneChannelNS::~AUOneChannelNS(AUOneChannelNS *this)
{
  AUOneChannelNS::~AUOneChannelNS(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14BC228;
  AUOneChannelNS::Cleanup(this);
  double v2 = *((void *)this + 70);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8052888210);
  }
  *((void *)this + 69) = 0;
  *((void *)this + 70) = 0;
  unsigned int v3 = *((void *)this + 72);
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
  }
  *((void *)this + 71) = 0;
  *((void *)this + 72) = 0;
  uint64_t v4 = (void *)*((void *)this + 77);
  if (v4) {
    free(v4);
  }
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

_OWORD *CResidualSuppressorV5::speex_preprocess_state_res_initV5(CResidualSuppressorV5 *this, int a2, int a3, int a4, char a5, char a6, float a7)
{
  unsigned int v13 = this;
  unint64_t v14 = malloc_type_malloc(0x70uLL, 0x2C8E6D5CuLL);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v15 = v14;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  int v16 = 2 * v13;
  _OWORD *v14 = 0u;
  if (a2)
  {
    unsigned int v17 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
    uint64_t v18 = v17;
    if (v16 && !v17) {
      goto LABEL_24;
    }
    bzero(v17, 8 * v13);
    *(void *)uint64_t v15 = v18;
    *((void *)v15 + 1) = &v18[4 * v13];
  }
  if (a3)
  {
    BOOL v19 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
    uint64_t v20 = v19;
    if (v16 && !v19
      || (bzero(v19, 8 * v13),
          *((void *)v15 + 2) = v20,
          *((void *)v15 + 3) = &v20[4 * v13],
          uint64_t v21 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL),
          float v22 = v21,
          v16)
      && !v21)
    {
LABEL_24:
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      __int16 v35 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v21, 8 * v13);
    *((void *)v15 + 4) = v22;
    *((void *)v15 + 5) = &v22[4 * v13];
    if (a4 == 1)
    {
      uint64_t v23 = (char *)malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
      char v24 = v23;
      if (v16 && !v23) {
        goto LABEL_24;
      }
      bzero(v23, 8 * v13);
      *((void *)v15 + 6) = v24;
      *((void *)v15 + 7) = &v24[4 * v13];
    }
  }
  float v25 = malloc_type_malloc(4 * (v13 + 1), 0x2C8E6D5CuLL);
  double v26 = v25;
  if (v13 != -1 && !v25) {
    goto LABEL_24;
  }
  bzero(v25, 4 * (v13 + 1));
  *((void *)v15 + 11) = v26;
  __int16 v27 = malloc_type_malloc(4 * (v13 + 1), 0x2C8E6D5CuLL);
  int v28 = v27;
  if (v13 != -1 && !v27) {
    goto LABEL_24;
  }
  bzero(v27, 4 * (v13 + 1));
  *((void *)v15 + 12) = v28;
  *((unsigned char *)v15 + 104) = a5;
  *((unsigned char *)v15 + 105) = a6;
  *((float *)v15 + 27) = a7;
  *((void *)v15 + 8) = 0;
  __int16 v29 = malloc_type_malloc(4 * v13, 0x2C8E6D5CuLL);
  unsigned int v30 = v29;
  if (v13)
  {
    if (!v29) {
      goto LABEL_24;
    }
  }
  bzero(v29, 4 * v13);
  *((void *)v15 + 9) = v30;
  uint64_t v31 = malloc_type_malloc(8 * v13, 0x2C8E6D5CuLL);
  uint64_t v32 = v31;
  if (v16)
  {
    if (!v31) {
      goto LABEL_24;
    }
  }
  bzero(v31, 8 * v13);
  *((void *)v15 + 10) = v32;
  return v15;
}

void *CResidualSuppressorV5::speex_preprocess_run_freq(uint64_t a1, const void **a2, const DSPSplitComplex *a3, float **a4, const float *a5, float *__n, uint64_t a7, int a8, const DSPSplitComplex *a9, uint64_t a10, float *a11, uint64_t a12, char a13, int a14)
{
  int v14 = a8;
  uint64_t v15 = __n;
  int v16 = a4;
  unsigned int v17 = (DSPSplitComplex *)a2;
  int v19 = a14;
  unsigned int v20 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    *(_DWORD *)(a1 + 572) = 0;
    if (v20 != 1)
    {
      *(_DWORD *)(a1 + 496) = 0;
      *(_DWORD *)(a1 + 540) = 0;
      if (v20 > 2) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v22 = a10;
  uint64_t v21 = a11;
  imagp = a9->imagp;
  DSPSplitComplex __A = a9->realp;
  if (a13)
  {
    vDSP_Length v23 = *(unsigned int *)(a1 + 8);
    char v24 = *(float **)(a12 + 24);
    __int16 v27 = *(void **)(a12 + 32);
    double v26 = *(float **)(a12 + 40);
    float __C = *(float **)(a12 + 16);
    memcpy(__C, *a2, 4 * v23);
    uint64_t v55 = (DSPSplitComplex *)a2;
    size_t v60 = v24;
    memcpy(v24, a2[1], 4 * v23);
    memcpy(v27, a3->realp, 4 * v23);
    memcpy(v26, a3->imagp, 4 * v23);
    if (a14 == 1)
    {
      int v28 = *(float **)(a12 + 56);
      DSPSplitComplex __A = *(float **)(a12 + 48);
      memcpy(__A, a9->realp, 4 * v23);
      imagp = v28;
      memcpy(v28, a9->imagp, 4 * v23);
    }
    if (a5)
    {
      vDSP_Length v29 = (v23 - 1);
      vDSP_vmul(__C, 1, a5, 1, __C, 1, v23);
      vDSP_vmul(v24 + 1, 1, a5 + 1, 1, v24 + 1, 1, v29);
      *char v24 = *v24 * a5[v29];
      vDSP_vmul((const float *)v27, 1, a5, 1, (float *)v27, 1, v23);
      vDSP_vmul(v26 + 1, 1, a5 + 1, 1, v26 + 1, 1, v29);
      *double v26 = *v26 * a5[v29];
      if (a14 == 1)
      {
        vDSP_vmul(__A, 1, a5, 1, __A, 1, v23);
        vDSP_vmul(imagp + 1, 1, a5 + 1, 1, imagp + 1, 1, (v23 - 1));
        float *imagp = *imagp * a5[v29];
      }
    }
    uint64_t v15 = __n;
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, __C, v24, (float *)v27, v26, __n);
    int v16 = a4;
    unsigned int v17 = v55;
    int v19 = a14;
    uint64_t v22 = a10;
    uint64_t v21 = a11;
    int v14 = a8;
  }
  else
  {
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, (float *)*a2, (float *)a2[1], a3->realp, a3->imagp, __n);
    float __C = 0;
    size_t v60 = 0;
  }
  CResidualSuppressorV3::GetResidualForSuppressor(a1, v16);
  if (*(_DWORD *)(a12 + 68)) {
    BOOL v30 = v14 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  if (v30)
  {
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v65 = 0;
  vDSP_zvmags(a3, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v65 + 1, *(int *)(a1 + 8));
  vDSP_zvmags(v17, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v65, *(int *)(a1 + 8));
  float v42 = *((float *)&v65 + 1) / (*(float *)&v65 + 1.0e-20) + 1.0e-20;
  float v43 = log10f(v42) * 10.0;
  uint64_t v64 = 0;
  vDSP_Length v44 = *(int *)(a1 + 8);
  v66.realp = *(float **)(a12 + 80);
  v66.imagp = &v66.realp[v44];
  vDSP_zvadd(v17, 1, a3, 1, &v66, 1, v44);
  vDSP_zvsub(&v66, 1, a9, 1, &v66, 1, *(int *)(a1 + 8));
  vDSP_zvmags(a9, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v64 + 1, *(int *)(a1 + 8));
  vDSP_zvmags(&v66, 1, *(float **)(a12 + 72), 1, *(int *)(a1 + 8));
  vDSP_sve(*(const float **)(a12 + 72), 1, (float *)&v64, *(int *)(a1 + 8));
  float v45 = *((float *)&v64 + 1) / (*(float *)&v64 + 1.0e-20) + 1.0e-20;
  if ((float)(log10f(v45) * 10.0) >= v43)
  {
LABEL_18:
    int v31 = v19;
    uint64_t v32 = v16;
    __int16 v33 = *(float **)a12;
    uint64_t v34 = *(float **)(a12 + 8);
    vDSP_vsub(a3->realp, 1, a9->realp, 1, *(float **)a12, 1, *(int *)(a1 + 8));
    vDSP_vsub(a3->imagp, 1, a9->imagp, 1, v34, 1, *(int *)(a1 + 8));
    LODWORD(v66.realp) = *(_DWORD *)(a12 + 64);
    vDSP_vsmul(v33, 1, (const float *)&v66, v33, 1, *(int *)(a1 + 8));
    vDSP_vsmul(v34, 1, (const float *)&v66, v34, 1, *(int *)(a1 + 8));
    __int16 v35 = v33;
    int v19 = v31;
    uint64_t v21 = a11;
    uint64_t v15 = __n;
    int v36 = v34;
    int v16 = v32;
    CResidualSuppressorV4::GetLeakageForSuppressor(v22, v17->realp, v17->imagp, v35, v36, a11);
    CResidualSuppressorV3::GetResidualForSuppressor(v22, v32);
    vDSP_vadd(*(const float **)(a1 + 256), 1, *(const float **)(v22 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
  }
LABEL_19:
  if (v19 == 1)
  {
    if (a13)
    {
      uint64_t v37 = v22;
      realp = __C;
      uint64_t v39 = v60;
      BOOL v41 = imagp;
      float v40 = __A;
    }
    else
    {
      realp = v17->realp;
      uint64_t v39 = v17->imagp;
      float v40 = a9->realp;
      BOOL v41 = a9->imagp;
      uint64_t v37 = v22;
    }
    CResidualSuppressorV4::GetLeakageForSuppressor(v37, realp, v39, v40, v41, v21);
    CResidualSuppressorV3::GetResidualForSuppressor(v22, v16);
    vDSP_vmax(*(const float **)(a1 + 256), 1, *(const float **)(v22 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
  }
LABEL_26:
  __int16 v46 = a9->realp;
  if (a9->realp && v19 == 2 && (int v47 = a9->imagp) != 0 && !*(unsigned char *)(a12 + 104))
  {
    uint64_t v51 = *(float **)(a12 + 96);
    vDSP_Length v52 = *(int *)(a1 + 8);
    v66.realp = a9->realp;
    v66.imagp = v47;
    vDSP_zvmags(&v66, 1, v51, 1, v52);
    *uint64_t v51 = *v46 * *v46;
    v51[v52] = *v47 * *v47;
    if (*(unsigned char *)(a12 + 104)) {
      __int16 v48 = (float **)(a12 + 88);
    }
    else {
      __int16 v48 = (float **)(a12 + 96);
    }
  }
  else
  {
    if (!*(unsigned char *)(a12 + 104)) {
      goto LABEL_36;
    }
    __int16 v48 = (float **)(a12 + 88);
  }
  float v49 = *v48;
  if (*(unsigned char *)(a12 + 105))
  {
    LODWORD(v66.realp) = 0;
    vDSP_sve(*(const float **)(a1 + 432), 1, (float *)&v66, *(int *)(a1 + 8));
    *(float *)&v66.realp = *(float *)&v66.realp * *(float *)(a12 + 108);
    HIDWORD(v65) = 0;
    vDSP_sve(v49, 1, (float *)&v65 + 1, *(int *)(a1 + 8));
    if (*((float *)&v65 + 1) > *(float *)&v66.realp)
    {
      *((float *)&v65 + 1) = *(float *)&v66.realp / (float)(*((float *)&v65 + 1) + 1.0e-20);
      vDSP_vsmul(v49, 1, (const float *)&v65 + 1, v49, 1, *(int *)(a1 + 460));
    }
  }
  LODWORD(v66.realp) = 1317011456;
  vDSP_vsmul(v49, 1, (const float *)&v66, *(float **)(a1 + 744), 1, *(int *)(a1 + 460));
  vDSP_vmax(*(const float **)(a1 + 744), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, *(int *)(a1 + 8));
LABEL_36:
  LODWORD(v66.realp) = 813694976;
  vDSP_vsmul(*(const float **)(a1 + 256), 1, (const float *)&v66, *(float **)(a12 + 88), 1, *(int *)(a1 + 8));
  *(_DWORD *)(*(void *)(a12 + 88) + 4 * *(int *)(a1 + 8)) = 0;
  *(void *)(a1 + 304) = a5;
  *(void *)uint64_t v15 = a7;
  CResidualSuppressorV4::speex_preprocess_run_res_estimator(a1, (const float **)&v17->realp, (uint64_t)v15);
  return CResidualSuppressorV3::speex_preprocess_run_res_suppressor(a1);
}

void CResidualSuppressorV5::speex_preprocess_run(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const DSPSplitComplex *a9, uint64_t a10, float *a11, uint64_t a12, char a13, int a14)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  v32.realp = (float *)((char *)&v27 - v23);
  v32.imagp = (float *)((char *)&v27 + 4 * v22 - v23);
  if (v24)
  {
    uint64_t v29 = v20;
    BOOL v30 = v16;
    int v31 = v21;
    int v28 = v19;
    float v25 = v18;
    double v26 = v17;
    CResidualSuppressorV3::speex_analysis(a1, a2, &v32);
    CResidualSuppressorV5::speex_preprocess_run_freq(a1, (const void **)&v32.realp, v30, v26, v25, v28, v29, v31, a9, a10, a11, a12, a13, a14);
    CResidualSuppressorV3::speex_synthesis(a1, (float *)a2);
  }
  else
  {
    CResidualSuppressorV5::speex_preprocess_run_freq(a1, (const void **)&v32.realp, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t *std::unique_ptr<AUSM::Metadata::PImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(void **)(v2 + 104));
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v2 + 8));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::default_delete<AUSM::InputABLBuffer>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  std::unique_ptr<ExtendedAudioBufferList,std::integral_constant<void (*)(ExtendedAudioBufferList*),&(ExtendedAudioBufferList_Destroy)>>::reset[abi:ne180100](a1 + 4, 0);
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t *std::unique_ptr<APAC::Metadata>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unsigned int v3 = (void **)(v2 + 1455624);
    uint64_t v4 = *(void *)(v2 + 1455888);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 1455896);
      unsigned int v6 = *(void **)(v2 + 1455888);
      if (v5 != v4)
      {
        do
        {
          for (uint64_t i = 0; i != -40192; i -= 1256)
          {
            uint64_t v8 = v5 + i;
            char v9 = *(void **)(v5 + i - 32);
            if (v9)
            {
              *(void *)(v8 - 24) = v9;
              operator delete(v9);
            }
            APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(v8 - 456));
          }
          v5 -= 40200;
        }
        while (v5 != v4);
        unsigned int v6 = *(void **)(v2 + 1455888);
      }
      *(void *)(v2 + 1455896) = v4;
      operator delete(v6);
    }
    int v16 = (void **)(v2 + 1455864);
    std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](&v16);
    float v10 = *(void **)(v2 + 1455840);
    if (v10)
    {
      *(void *)(v2 + 1455848) = v10;
      operator delete(v10);
    }
    unint64_t v11 = *(void **)(v2 + 1455720);
    if (v11)
    {
      *(void *)(v2 + 1455728) = v11;
      operator delete(v11);
    }
    uint64_t v12 = *(void **)(v2 + 1455696);
    if (v12)
    {
      *(void *)(v2 + 1455704) = v12;
      operator delete(v12);
    }
    unsigned int v13 = *(void **)(v2 + 1455672);
    if (v13)
    {
      *(void *)(v2 + 1455680) = v13;
      operator delete(v13);
    }
    int v14 = *(void **)(v2 + 1455648);
    if (v14)
    {
      *(void *)(v2 + 1455656) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *v3;
    if (*v3)
    {
      *(void *)(v2 + 1455632) = v15;
      operator delete(v15);
    }
    APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig((APAC::Metadata::RendererMetadataConfig *)(v2 + 1446256));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(APAC::Metadata::RendererMetadataConfig *this)
{
  uint64_t v2 = *((void *)this + 600);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 601);
    uint64_t v4 = (void *)*((void *)this + 600);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(v3 - 456));
        v3 -= 1248;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 600);
    }
    *((void *)this + 601) = v2;
    operator delete(v4);
  }
  uint64_t v12 = (void **)((char *)this + 4776);
  std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](&v12);
  unsigned int v6 = (void *)*((void *)this + 594);
  if (v6)
  {
    *((void *)this + 595) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 579);
  if (v7)
  {
    *((void *)this + 580) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 576);
  if (v8)
  {
    *((void *)this + 577) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 573);
  if (v9)
  {
    *((void *)this + 574) = v9;
    operator delete(v9);
  }
  float v10 = (void *)*((void *)this + 570);
  if (v10)
  {
    *((void *)this + 571) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 567);
  if (v11)
  {
    *((void *)this + 568) = v11;
    operator delete(v11);
  }
}

void std::vector<APAC::Metadata::GroupConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(APAC::Metadata::RendererData::RadiationPattern *this)
{
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

uint64_t std::unique_ptr<ExtendedAudioBufferList,std::integral_constant<void (*)(ExtendedAudioBufferList*),&(ExtendedAudioBufferList_Destroy)>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return ExtendedAudioBufferList_Destroy();
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t AUSM::Metadata::ingestImmersiveRendererData(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v59[9] = *(std::locale *)MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v5 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    DSPSplitComplex v32 = (void *)(v4 + 104);
    if (*(char *)(v4 + 127) < 0) {
      DSPSplitComplex v32 = (void *)*v32;
    }
    int v33 = v2[2] - *v2;
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v32;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "ingestImmersiveRendererData";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v33;
    _os_log_debug_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: receiving %u bytes", buf, 0x1Cu);
  }

  unsigned int v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.coreaudio"];
  if ([v6 BOOLForKey:@"ausm_capture_ird"])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    *(_DWORD *)&buf[*(void *)(*(void *)&buf[16] - 24) + 24] = *(_DWORD *)&buf[*(void *)(*(void *)&buf[16]
                                                                                              - 24)
                                                                                  + 24] & 0xFFFFFFB5 | 8;
    if (*((void *)v2 + 1) != *(void *)v2)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        uint64_t v9 = *(void *)&buf[16];
        *(void *)&buf[*(void *)(*(void *)&buf[16] - 24) + 40] = 2;
        float v10 = &buf[*(void *)(v9 - 24) + 16];
        if (*((_DWORD *)v10 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(v9 - 24) + 16]);
          unint64_t v11 = std::locale::use_facet(v59, v8);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
          std::locale::~locale(v59);
        }
        *((_DWORD *)v10 + 36) = 48;
        std::ostream::operator<<();
        ++v7;
      }
      while (*((void *)v2 + 1) - *(void *)v2 > v7);
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v36 = (std::locale::__imp *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        int v36 = *(std::locale::__imp **)v36;
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[24], v52);
      if (v53 >= 0) {
        uint64_t v37 = (std::locale::__imp *)v52;
      }
      else {
        uint64_t v37 = *(std::locale::__imp **)v52;
      }
      LODWORD(v59[0].__locale_) = 136315650;
      *(std::locale::__imp **)((char *)&v59[0].__locale_ + 4) = v36;
      WORD2(v59[1].__locale_) = 2080;
      *(std::locale::__imp **)((char *)&v59[1].__locale_ + 6) = (std::locale::__imp *)"ingestImmersiveRendererData";
      HIWORD(v59[2].__locale_) = 2080;
      v59[3].__locale_ = v37;
      _os_log_debug_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: dump %s", (uint8_t *)v59, 0x20u);
      if (v53 < 0) {
        operator delete(*(void **)v52);
      }
    }

    *(void *)std::string buf = *MEMORY[0x1E4FBA408];
    uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&uint8_t buf[16] = v13;
    *(void *)&unsigned char buf[24] = MEMORY[0x1E4FBA470] + 16;
    if (v57 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C185D210](&v58);
  }

  if (*((void *)v2 + 1) - *(void *)v2 < 4uLL)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v14 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      __int16 v35 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        __int16 v35 = (void *)*v35;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererData";
      _os_log_error_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData struct size too small", buf, 0x16u);
    }

    return 4294956445;
  }
  int v15 = **(_DWORD **)v2;
  if (v15 == 2)
  {
    if (AUSM::Metadata::mTraceLevel >= 1)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      int v19 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = (void *)(v4 + 104);
        if (*(char *)(v4 + 127) < 0) {
          uint64_t v20 = (void *)*v20;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "ingestImmersiveRendererDataV2";
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V2 ingestion has begun", buf, 0x16u);
      }
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 96));
    atomic_store(1u, (unsigned __int8 *)(v4 + 97));
    int v21 = *(int **)v2;
    unint64_t v22 = *((void *)v2 + 1) - *(void *)v2;
    if (v22 > 3)
    {
      if (*v21 != 2)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v34 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          int v47 = (void *)(v4 + 104);
          if (*(char *)(v4 + 127) < 0) {
            int v47 = (void *)*v47;
          }
          int v48 = *v21;
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v47;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "ingestImmersiveRendererDataV2";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v48;
          _os_log_error_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2: Inconsistent workflow: IRD version %u ≠ 2", buf, 0x1Cu);
        }
        goto LABEL_84;
      }
      if (v22 > 0x17)
      {
        if (v22 >= v21[3] + v21[5] + 20 * (unint64_t)v21[4] + 24)
        {
          APAC::ImmersiveRendererData_V2_Manager::getACLByteSize();
          operator new[]();
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v51 = (void *)(v4 + 104);
          if (*(char *)(v4 + 127) < 0) {
            uint64_t v51 = (void *)*v51;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v51;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "ingestImmersiveRendererDataV2";
          _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 struct truncated", buf, 0x16u);
        }
        goto LABEL_109;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      vDSP_Length v44 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        vDSP_Length v44 = (void *)*v44;
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      vDSP_Length v44 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        vDSP_Length v44 = (void *)*v44;
      }
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v44;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "ingestImmersiveRendererDataV2";
    _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V2 struct too small", buf, 0x16u);
    goto LABEL_109;
  }
  if (v15 != 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v23 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      float v42 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        float v42 = (void *)*v42;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererData";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v15;
      _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Unsupported ImmersiveRendererData version %u", buf, 0x1Cu);
    }

    return 4294956428;
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 96));
  atomic_store(1u, (unsigned __int8 *)(v4 + 97));
  int v16 = *(int **)v2;
  unint64_t v17 = *((void *)v2 + 1) - *(void *)v2;
  if (v17 <= 7)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      float v43 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        float v43 = (void *)*v43;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v43;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V1 struct too small", buf, 0x16u);
    }
    goto LABEL_109;
  }
  if (*v16 != 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v34 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      float v45 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        float v45 = (void *)*v45;
      }
      int v46 = *v16;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v45;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v46;
      _os_log_error_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: ImmersiveRendererData_V1: Inconsistent workflow: IRD version %u ≠ 1", buf, 0x1Cu);
    }
LABEL_84:

    atomic_store(0, (unsigned __int8 *)(v4 + 97));
    return 4294956428;
  }
  unsigned int v24 = v16[1];
  unint64_t v25 = 20 * v24 + 8;
  if (v17 != v25)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
    BOOL v38 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v17 >= v25)
    {
      if (v38)
      {
        double v50 = (void *)(v4 + 104);
        if (*(char *)(v4 + 127) < 0) {
          double v50 = (void *)*v50;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v50;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
        float v40 = "[%s|%s] ERROR: ImmersiveRendererData_V1 struct too big";
        goto LABEL_138;
      }
    }
    else if (v38)
    {
      uint64_t v39 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        uint64_t v39 = (void *)*v39;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v39;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      float v40 = "[%s|%s] ERROR: ImmersiveRendererData_V1 struct truncated";
LABEL_138:
      _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, v40, buf, 0x16u);
    }
LABEL_109:

LABEL_110:
    atomic_store(0, (unsigned __int8 *)(v4 + 97));
    return 4294956445;
  }
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v26 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        uint64_t v27 = (void *)*v27;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V1 ingestion has begun", buf, 0x16u);
    }

    unsigned int v24 = v16[1];
  }
  memset(v59, 0, 24);
  uint64_t v55 = 0;
  memset(buf, 0, sizeof(buf));
  uint64_t v28 = AUSM::Metadata::commonImmersiveRendererDataSetup((void *)v4, (uint64_t)(v16 + 2), v24, (uint64_t *)v59, (uint64_t *)buf);
  if (v28)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v29 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      float v49 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        float v49 = (void *)*v49;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v49;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v28;
      _os_log_error_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData_V1: Error during common configuration, err = %d", buf, 0x1Cu);
    }

    if (v28 == -10851) {
      goto LABEL_110;
    }
  }
  atomic_store(1u, (unsigned __int8 *)(v4 + 96));
  atomic_store(0, (unsigned __int8 *)(v4 + 97));
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    BOOL v30 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      int v31 = (void *)(v4 + 104);
      if (*(char *)(v4 + 127) < 0) {
        int v31 = (void *)*v31;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ingestImmersiveRendererDataV1";
      _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_INFO, "[%s|%s] ImmersiveRendererData_V1 ingestion has ended", buf, 0x16u);
    }
  }
  return v28;
}

void sub_1BB6870C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(v19);
  AUSM::ABLBuffer::~ABLBuffer((AUSM::ABLBuffer *)(v20 - 176));
  if ((void)a9) {
    operator delete((void *)a9);
  }
  MEMORY[0x1C185D340](v18, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t AUSM::Metadata::commonImmersiveRendererDataSetup(void *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  v230[4] = *MEMORY[0x1E4F143B8];
  AUSM::Metadata::prepareParameterTracks((AUSM::Metadata *)a1, 0x400uLL, 0x1000uLL);
  unint64_t v10 = (a4[1] - *a4) >> 2;
  uint64_t v11 = (a5[1] - *a5) >> 2;
  v230[0] = v10;
  v230[1] = v11;
  uint64_t v12 = (a5[4] - a5[3]) >> 2;
  uint64_t v13 = (a5[7] - a5[6]) >> 2;
  v230[2] = v12;
  v230[3] = v13;
  if (v10 != v11 || v11 != v12 || v12 != v13)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v16 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v186 = a1 + 13;
      if (*((char *)a1 + 127) < 0) {
        long long v186 = (void *)*v186;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v186;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
      _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData: all channel info sizes are not equal", buf, 0x16u);
    }

    return 4294956445;
  }
  uint64_t v17 = 1;
  uint64_t v18 = v230;
  do
  {
    if (v230[v17] < v10)
    {
      unint64_t v10 = v230[v17];
      uint64_t v18 = &v230[v17];
    }
    ++v17;
  }
  while (v17 != 4);
  unsigned int v207 = *(_DWORD *)v18;
  uint64_t v202 = a2;
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v19 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v187 = a1 + 13;
    if (*((char *)a1 + 127) < 0) {
      std::string::size_type v187 = (void *)*v187;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v187;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v207;
    _os_log_debug_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData: %u channel infos retrieved", buf, 0x1Cu);
  }
  std::string::size_type v204 = a4;
  float v205 = a5;

  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*a1 + 80), 0);
  ausdk::AUElement::SetParameter(Element, 3u, -120.0, 0);
  int v21 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*a1 + 80), 0);
  ausdk::AUElement::SetParameter(v21, 5u, 0.0, 0);
  HIDWORD(v218) = 1;
  int v22 = AUSpatialMixerV2::SetAPACProperty((AUSpatialMixerV2 *)*a1, 1005, 0, 0, (char *)&v218 + 4, 4);
  if (v22)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned int v24 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v188 = a1 + 13;
      if (*((char *)a1 + 127) < 0) {
        std::string::size_type v188 = (void *)*v188;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v188;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v22;
      _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData: could not enable internal reverb, err = %d", buf, 0x1Cu);
    }
  }
  if (!v202 && a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v25 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v189 = a1 + 13;
      if (*((char *)a1 + 127) < 0) {
        uint64_t v189 = (void *)*v189;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v189;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
      _os_log_error_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: missing renderer descriptions", buf, 0x16u);
    }

    return 4294956445;
  }
  *((_DWORD *)a1 + 20) = 0;
  if (a3)
  {
    uint64_t v28 = 0;
    unsigned int v29 = 0;
    long long v206 = a1 + 13;
    uint64_t v200 = a3;
    *(void *)&long long v23 = 136315650;
    long long v199 = v23;
    *(void *)&long long v23 = 136315906;
    long long v203 = v23;
    *(void *)&long long v23 = 136316162;
    long long v197 = v23;
    *(void *)&long long v23 = 136315394;
    long long v196 = v23;
    uint64_t v30 = 1;
    while (2)
    {
      uint64_t v31 = v202 + 20 * v28;
      unsigned int v34 = *(_DWORD *)(v31 + 4);
      DSPSplitComplex v32 = (unsigned int *)(v31 + 4);
      unsigned int v33 = v34;
      unint64_t v208 = (unsigned int *)(v202 + 20 * v28);
      unsigned int v35 = *v208;
      uint64_t v36 = v34 - *v208;
      if (v34 <= *v208)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        std::string::size_type v184 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 127) < 0) {
            char v192 = (void *)*v206;
          }
          else {
            char v192 = v206;
          }
          unsigned int v194 = *v208;
          unsigned int v195 = *v32;
          *(_DWORD *)std::string buf = v197;
          *(void *)&uint8_t buf[4] = v192;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v28;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v194;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v195;
          _os_log_error_impl(&dword_1BB0CE000, v184, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: inconsistent rendererDescription channel boundaries for rendererDescription #%u: %u, %u", buf, 0x28u);
        }

        return 4294956445;
      }
      if (v36 >= 0x81)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v185 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a1 + 127) < 0) {
            long long v193 = (void *)*v206;
          }
          else {
            long long v193 = v206;
          }
          *(_DWORD *)std::string buf = v199;
          *(void *)&uint8_t buf[4] = v193;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v28;
          _os_log_error_impl(&dword_1BB0CE000, v185, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed: too many channels for rendererDescription #%u", buf, 0x1Cu);
        }

        return 4294956445;
      }
      *((_DWORD *)a1 + 20) += v36;
      uint64_t v37 = v202 + 20 * v28;
      int v39 = *(_DWORD *)(v37 + 8);
      BOOL v38 = (int *)(v37 + 8);
      uint64_t v201 = v28;
      uint64_t v209 = v36;
      switch(v39)
      {
        case -1:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v40 = (id)getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_INFO)) {
            goto LABEL_56;
          }
          BOOL v41 = v206;
          if (*((char *)a1 + 127) < 0) {
            BOOL v41 = (void *)*v206;
          }
          *(_DWORD *)std::string buf = v199;
          *(void *)&uint8_t buf[4] = v41;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v30;
          float v42 = v40;
          float v43 = "[%s|%s] ImmersiveRendererData: kImmersiveRendererType_Unknown used for input #%u. Fallback to object.";
          goto LABEL_55;
        case 0:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v40 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            int v46 = v206;
            if (*((char *)a1 + 127) < 0) {
              int v46 = (void *)*v206;
            }
            *(_DWORD *)std::string buf = v199;
            *(void *)&uint8_t buf[4] = v46;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = v30;
            float v42 = v40;
            float v43 = "[%s|%s] ImmersiveRendererData:  kImmersiveRendererType_Unspecified used for input #%u. Fallback to object.";
LABEL_55:
            _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_INFO, v43, buf, 0x1Cu);
          }
          goto LABEL_56;
        case 1:
          unsigned int v198 = v30 + 1;
          LODWORD(v218) = v30 + 1;
          int v92 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, &v218, 4);
          if (v92)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            __int16 v93 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              unint64_t v159 = v206;
              if (*((char *)a1 + 127) < 0) {
                unint64_t v159 = (void *)*v206;
              }
              *(_DWORD *)std::string buf = v203;
              *(void *)&uint8_t buf[4] = v159;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v92;
              _os_log_error_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }
          }
          memset(buf, 0, sizeof(buf));
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 392))(*a1, 1, v30);
          long long v216 = *(_OWORD *)&buf[16];
          long long __s2 = *(_OWORD *)buf;
          uint64_t v217 = *(void *)&buf[32];
          HIDWORD(v216) = v209;
          int v94 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint8_t *, long long *))(*(void *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
          if (v94)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v95 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
            {
              unint64_t v161 = v206;
              if (*((char *)a1 + 127) < 0) {
                unint64_t v161 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v161;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v94;
              _os_log_error_impl(&dword_1BB0CE000, v95, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v96 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(*(void *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
          if (v96)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v97 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            {
              unint64_t v163 = v206;
              if (*((char *)a1 + 127) < 0) {
                unint64_t v163 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v163;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v96;
              _os_log_error_impl(&dword_1BB0CE000, v97, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v214 = 5;
          int v98 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3003, 1, v30, &v214, 4);
          if (v98)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            size_t v99 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              long long v165 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v165 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v165;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v98;
              _os_log_error_impl(&dword_1BB0CE000, v99, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v213 = 4;
          int v100 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3013, 1, v30, &v213, 4);
          if (v100)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v101 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
            {
              size_t v167 = v206;
              if (*((char *)a1 + 127) < 0) {
                size_t v167 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v167;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v100;
              _os_log_error_impl(&dword_1BB0CE000, v101, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v212 = 7;
          uint64_t v102 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3000, 1, v30, &v212, 4);
          int v103 = v102;
          if (v102)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v104 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            {
              long long v169 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v169 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v169;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v103;
              _os_log_error_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          if (*v32 <= v207)
          {
            MEMORY[0x1F4188790](v102);
            CFStringRef v135 = (char *)&v196 - v134;
            if (v33 != v35)
            {
              unsigned int v136 = *v208;
              uint64_t v137 = *v204;
              uint64_t v138 = *v205;
              uint64_t v139 = v205[3];
              long long v140 = v135 + 8;
              uint64_t v141 = v209;
              uint64_t v142 = v205[6];
              do
              {
                int v143 = *(_DWORD *)(v138 + 4 * v136);
                int v144 = *(_DWORD *)(v139 + 4 * v136);
                int v145 = *(_DWORD *)(v142 + 4 * v136);
                *(v140 - 2) = *(_DWORD *)(v137 + 4 * v136);
                *(v140 - 1) = 2;
                *long long v140 = v143;
                v140[1] = v144;
                v140[2] = v145;
                v140 += 5;
                ++v136;
                --v141;
              }
              while (v141);
            }
            BOOL v146 = v33 == v35;
            if (v209 <= 1) {
              unsigned int v147 = 1;
            }
            else {
              unsigned int v147 = v209;
            }
            __x[0] = 0;
            std::vector<char>::vector(&v211, 20 * v147 + 12, __x);
            std::vector<char>::pointer begin = v211.__begin_;
            *(void *)v211.__begin_ = 0;
            uint64_t v149 = v209;
            *((_DWORD *)begin + 2) = v209;
            if (!v146) {
              memcpy(begin + 12, v135, 20 * v149);
            }
            int v150 = (*(uint64_t (**)(void, uint64_t, uint64_t, std::vector<char>::pointer))(*(void *)*a1 + 536))(*a1, 1, v30, begin);
            if (v150)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              unsigned int v151 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
              {
                long long v178 = v206;
                if (*((char *)a1 + 127) < 0) {
                  long long v178 = (void *)*v206;
                }
                *(_DWORD *)double __x = v203;
                int v220 = v178;
                __int16 v221 = 2080;
                float v222 = "commonImmersiveRendererDataSetup";
                __int16 v223 = 1024;
                int v224 = v30;
                __int16 v225 = 1024;
                int v226 = v150;
                _os_log_error_impl(&dword_1BB0CE000, v151, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout for input #%u, err = %d", (uint8_t *)__x, 0x22u);
              }
            }
            std::vector<char>::pointer v113 = v211.__begin_;
            if (v211.__begin_)
            {
LABEL_273:
              v211.__end_ = v211.__begin_;
              operator delete(v113);
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v105 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
            {
              long long v177 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v177 = (void *)*v206;
              }
              *(_DWORD *)double __x = v196;
              int v220 = v177;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              _os_log_debug_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_DEBUG, "[%s|%s] ImmersiveRendererData does not provide a channel layout, using the default channel layout for the given number of channels", (uint8_t *)__x, 0x16u);
            }

            int v106 = v209 | 0x930000;
            unsigned int v107 = v209 - 1;
            if (v209 - 1) <= 0xF && ((0x8ABBu >> v107)) {
              int v106 = dword_1BB8C201C[v107];
            }
            __x[0] = 0;
            std::vector<char>::vector(&v211, 0x20uLL, __x);
            std::vector<char>::pointer v108 = v211.__begin_;
            *((_DWORD *)v211.__begin_ + 1) = 0;
            *((_DWORD *)v108 + 2) = 0;
            *(_DWORD *)std::vector<char>::pointer v108 = v106;
            int v109 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 536))(*a1, 1, v30);
            if (v109)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              long long v110 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
              {
                std::string::size_type v179 = v206;
                if (*((char *)a1 + 127) < 0) {
                  std::string::size_type v179 = (void *)*v206;
                }
                *(_DWORD *)double __x = v197;
                int v220 = v179;
                __int16 v221 = 2080;
                float v222 = "commonImmersiveRendererDataSetup";
                __int16 v223 = 1024;
                int v224 = v106;
                __int16 v225 = 1024;
                int v226 = v30;
                __int16 v227 = 1024;
                int v228 = v109;
                _os_log_error_impl(&dword_1BB0CE000, v110, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
              }
            }
            if (v106 == 6553601)
            {
              int v111 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(*(void *)*a1 + 152))(*a1, 2, 1, v30, 0, 1.0);
              if (v111)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v112 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                {
                  std::string::size_type v180 = v206;
                  if (*((char *)a1 + 127) < 0) {
                    std::string::size_type v180 = (void *)*v206;
                  }
                  *(_DWORD *)double __x = v203;
                  int v220 = v180;
                  __int16 v221 = 2080;
                  float v222 = "commonImmersiveRendererDataSetup";
                  __int16 v223 = 1024;
                  int v224 = v30;
                  __int16 v225 = 1024;
                  int v226 = v111;
                  _os_log_error_impl(&dword_1BB0CE000, v112, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the distance parameter to 1 for mono input %u, err = %d", (uint8_t *)__x, 0x22u);
                }
              }
            }
            std::vector<char>::pointer v113 = v211.__begin_;
            if (v211.__begin_) {
              goto LABEL_273;
            }
          }
          LODWORD(v211.__begin_) = 3;
          int v152 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, std::vector<char> *, uint64_t))(*(void *)*a1 + 96))(*a1, 3005, 1, v30, &v211, 4);
          if (v152)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v153 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
            {
              long long v174 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v174 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v174;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v152;
              _os_log_error_impl(&dword_1BB0CE000, v153, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to ambience bed for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v154 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(*(void *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
          if (v154)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v155 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v175 = v206;
              if (*((char *)a1 + 127) < 0) {
                std::string::size_type v175 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v175;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v154;
              _os_log_error_impl(&dword_1BB0CE000, v155, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v210 = 1;
          int v156 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3255, 1, v30, &v210, 4);
          if (v156)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v157 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v176 = v206;
              if (*((char *)a1 + 127) < 0) {
                std::string::size_type v176 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v176;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v156;
              _os_log_error_impl(&dword_1BB0CE000, v157, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the source orientation reference for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          uint64_t v30 = v198;
LABEL_290:
          uint64_t v28 = v201 + 1;
          if (v201 + 1 == v200) {
            goto LABEL_362;
          }
          continue;
        case 2:
          goto LABEL_57;
        case 3:
          LODWORD(v218) = v30 + 1;
          int v114 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, &v218, 4);
          if (v114)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v115 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              uint64_t v160 = v206;
              if (*((char *)a1 + 127) < 0) {
                uint64_t v160 = (void *)*v206;
              }
              *(_DWORD *)std::string buf = v203;
              *(void *)&uint8_t buf[4] = v160;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v114;
              _os_log_error_impl(&dword_1BB0CE000, v115, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }
          }
          memset(buf, 0, sizeof(buf));
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 392))(*a1, 1, v30);
          long long v216 = *(_OWORD *)&buf[16];
          long long __s2 = *(_OWORD *)buf;
          uint64_t v217 = *(void *)&buf[32];
          HIDWORD(v216) = v209;
          int v116 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint8_t *, long long *))(*(void *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
          if (v116)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v117 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
            {
              unint64_t v162 = v206;
              if (*((char *)a1 + 127) < 0) {
                unint64_t v162 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v162;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v116;
              _os_log_error_impl(&dword_1BB0CE000, v117, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v118 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(*(void *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
          if (v118)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v119 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
            {
              uint64_t v164 = v206;
              if (*((char *)a1 + 127) < 0) {
                uint64_t v164 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v164;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v118;
              _os_log_error_impl(&dword_1BB0CE000, v119, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v214 = 5;
          int v120 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3003, 1, v30, &v214, 4);
          if (v120)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            size_t v121 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
              long long v166 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v166 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v166;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v120;
              _os_log_error_impl(&dword_1BB0CE000, v121, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v213 = 4;
          int v122 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3013, 1, v30, &v213, 4);
          if (v122)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v123 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v168 = v206;
              if (*((char *)a1 + 127) < 0) {
                std::string::size_type v168 = (void *)*v206;
              }
              *(_DWORD *)double __x = v199;
              int v220 = v168;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v122;
              _os_log_error_impl(&dword_1BB0CE000, v123, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law, err = %d", (uint8_t *)__x, 0x1Cu);
            }
          }
          int v212 = 7;
          int v124 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3000, 1, v30, &v212, 4);
          if (v124)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v125 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
            {
              long long v170 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v170 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v170;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v124;
              _os_log_error_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          __x[0] = 0;
          std::vector<char>::vector(&v211, 0x20uLL, __x);
          int v126 = v209 | 0xBE0000;
          std::vector<char>::pointer v127 = v211.__begin_;
          *((_DWORD *)v211.__begin_ + 1) = 0;
          *((_DWORD *)v127 + 2) = 0;
          *(_DWORD *)std::vector<char>::pointer v127 = v126;
          int v128 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 536))(*a1, 1, v30);
          if (v128)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v129 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v171 = v206;
              if (*((char *)a1 + 127) < 0) {
                std::string::size_type v171 = (void *)*v206;
              }
              *(_DWORD *)double __x = v197;
              int v220 = v171;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v126;
              __int16 v225 = 1024;
              int v226 = v30;
              __int16 v227 = 1024;
              int v228 = v128;
              _os_log_error_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
            }
          }
          int v210 = 3;
          int v130 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3005, 1, v30, &v210, 4);
          if (v130)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v131 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v172 = v206;
              if (*((char *)a1 + 127) < 0) {
                std::string::size_type v172 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v172;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v130;
              _os_log_error_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to ambience bed for input %u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          int v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(*(void *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
          if (v132)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v133 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              long long v173 = v206;
              if (*((char *)a1 + 127) < 0) {
                long long v173 = (void *)*v206;
              }
              *(_DWORD *)double __x = v203;
              int v220 = v173;
              __int16 v221 = 2080;
              float v222 = "commonImmersiveRendererDataSetup";
              __int16 v223 = 1024;
              int v224 = v30;
              __int16 v225 = 1024;
              int v226 = v132;
              _os_log_error_impl(&dword_1BB0CE000, v133, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
            }
          }
          if (v211.__begin_)
          {
            v211.__end_ = v211.__begin_;
            operator delete(v211.__begin_);
          }
          uint64_t v30 = (v30 + 1);
          goto LABEL_290;
        default:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v40 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            vDSP_Length v44 = v206;
            if (*((char *)a1 + 127) < 0) {
              vDSP_Length v44 = (void *)*v206;
            }
            int v45 = *v38;
            *(_DWORD *)std::string buf = v199;
            *(void *)&uint8_t buf[4] = v44;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = v45;
            _os_log_error_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData does not support render type %u. Fallback to object.", buf, 0x1Cu);
          }
LABEL_56:

LABEL_57:
          LODWORD(__s2) = v209 + v30;
          int v47 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 11, 1, 0, (const void **)&__s2, 4);
          if (v47)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v48 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              unint64_t v158 = v206;
              if (*((char *)a1 + 127) < 0) {
                unint64_t v158 = (void *)*v206;
              }
              *(_DWORD *)std::string buf = v203;
              *(void *)&uint8_t buf[4] = v158;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = v30;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v47;
              _os_log_error_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the number of input elements for input #%u, err = %d", buf, 0x22u);
            }
          }
          if (v33 == v35) {
            goto LABEL_290;
          }
          int v49 = 0;
          break;
      }
      break;
    }
    while (1)
    {
      double v50 = (uint64_t **)a1[2];
      vDSP_Length v52 = v50 + 1;
      uint64_t v51 = (uint64_t)v50[1];
      if (v51)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v53 = v51;
            unsigned int v54 = *(_DWORD *)(v51 + 28);
            if (v29 >= v54) {
              break;
            }
            uint64_t v51 = *(void *)v53;
            vDSP_Length v52 = (uint64_t **)v53;
            if (!*(void *)v53) {
              goto LABEL_72;
            }
          }
          if (v54 >= v29) {
            break;
          }
          uint64_t v51 = *(void *)(v53 + 8);
          if (!v51)
          {
            vDSP_Length v52 = (uint64_t **)(v53 + 8);
            goto LABEL_72;
          }
        }
      }
      else
      {
        uint64_t v53 = (uint64_t)(v50 + 1);
LABEL_72:
        uint64_t v55 = (uint64_t *)operator new(0x28uLL);
        *((_DWORD *)v55 + 7) = v29;
        *((_DWORD *)v55 + 8) = 0;
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v50, v53, v52, v55);
        uint64_t v53 = (uint64_t)v55;
      }
      *(_DWORD *)(v53 + 32) = v30;
      memset(buf, 0, sizeof(buf));
      (*(void (**)(void))(*(void *)*a1 + 392))();
      long long v216 = *(_OWORD *)&buf[16];
      long long __s2 = *(_OWORD *)buf;
      uint64_t v217 = *(void *)&buf[32];
      HIDWORD(v216) = 1;
      int v56 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint8_t *, long long *))(*(void *)*a1 + 400))(*a1, 1, v30, buf, &__s2);
      if (v56)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        char v57 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          size_t v82 = v206;
          if (*((char *)a1 + 127) < 0) {
            size_t v82 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v82;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v56;
          _os_log_error_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the stream format for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      int v58 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(*(void *)*a1 + 152))(*a1, 5, 1, v30, 0, 1.0);
      if (v58)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v59 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          unint64_t v83 = v206;
          if (*((char *)a1 + 127) < 0) {
            unint64_t v83 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v83;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v58;
          _os_log_error_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to enable input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      LODWORD(v218) = 5;
      int v60 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const void **, uint64_t))(*(void *)*a1 + 96))(*a1, 3003, 1, v30, &v218, 4);
      if (v60)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        size_t v61 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          uint64_t v84 = v206;
          if (*((char *)a1 + 127) < 0) {
            uint64_t v84 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v84;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v60;
          _os_log_error_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the rendering flags for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      int v214 = 4;
      int v62 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3013, 1, v30, &v214, 4);
      if (v62)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        __int16 v63 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          uint64_t v85 = v206;
          if (*((char *)a1 + 127) < 0) {
            uint64_t v85 = (void *)*v206;
          }
          *(_DWORD *)double __x = v199;
          int v220 = v85;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v62;
          _os_log_error_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the attenuation law, err = %d", (uint8_t *)__x, 0x1Cu);
        }
      }
      int v213 = 7;
      int v64 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3000, 1, v30, &v213, 4);
      if (v64)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v65 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          uint64_t v86 = v206;
          if (*((char *)a1 + 127) < 0) {
            uint64_t v86 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v86;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v64;
          _os_log_error_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the spatialization algorithm for input %u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      unsigned int v66 = *v208 + v49;
      if (v66 < v207) {
        break;
      }
      __x[0] = 0;
      std::vector<char>::vector(&v211, 0x20uLL, __x);
      std::vector<char>::pointer v74 = v211.__begin_;
      *(void *)v211.__begin_ = 6553601;
      *((_DWORD *)v74 + 2) = 0;
      int v75 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 536))(*a1, 1, v30);
      if (v75)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v73 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          __int16 v91 = v206;
          if (*((char *)a1 + 127) < 0) {
            __int16 v91 = (void *)*v206;
          }
          *(_DWORD *)double __x = v197;
          int v220 = v91;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = 6553601;
          __int16 v225 = 1024;
          int v226 = v30;
          __int16 v227 = 1024;
          int v228 = v75;
          _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout (tag = %u) for input #%u, err = %d", (uint8_t *)__x, 0x28u);
        }
LABEL_111:
      }
LABEL_112:
      if (v211.__begin_)
      {
        v211.__end_ = v211.__begin_;
        operator delete(v211.__begin_);
      }
      LODWORD(v211.__begin_) = 2;
      int v76 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, std::vector<char> *, uint64_t))(*(void *)*a1 + 96))(*a1, 3005, 1, v30, &v211, 4);
      if (v76)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v77 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          uint64_t v87 = v206;
          if (*((char *)a1 + 127) < 0) {
            uint64_t v87 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v87;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v76;
          _os_log_error_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the source mode to point source for input %u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      int v78 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(*(void *)*a1 + 152))(*a1, 8, 1, v30, 0, 0.0);
      if (v78)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v79 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          size_t v88 = v206;
          if (*((char *)a1 + 127) < 0) {
            size_t v88 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v88;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v78;
          _os_log_error_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not clear reverb blend on input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      int v212 = 1;
      int v80 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)*a1 + 96))(*a1, 3255, 1, v30, &v212, 4);
      if (v80)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v81 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          __int16 v89 = v206;
          if (*((char *)a1 + 127) < 0) {
            __int16 v89 = (void *)*v206;
          }
          *(_DWORD *)double __x = v203;
          int v220 = v89;
          __int16 v221 = 2080;
          float v222 = "commonImmersiveRendererDataSetup";
          __int16 v223 = 1024;
          int v224 = v30;
          __int16 v225 = 1024;
          int v226 = v80;
          _os_log_error_impl(&dword_1BB0CE000, v81, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to set the source orientation reference for input #%u, err = %d", (uint8_t *)__x, 0x22u);
        }
      }
      ++v29;
      uint64_t v30 = (v30 + 1);
      if (++v49 == v209) {
        goto LABEL_290;
      }
    }
    int v67 = *(_DWORD *)(*v205 + 4 * v66);
    int v68 = *(_DWORD *)(v205[3] + 4 * v66);
    int v69 = *(_DWORD *)(v205[6] + 4 * v66);
    if ((*(_DWORD *)(*v204 + 4 * v66) & 0xFFFF0000) == 0x40000) {
      int v70 = 100;
    }
    else {
      int v70 = *(_DWORD *)(*v204 + 4 * v66);
    }
    __x[0] = 0;
    std::vector<char>::vector(&v211, 0x20uLL, __x);
    std::vector<char>::pointer v71 = v211.__begin_;
    *(void *)v211.__begin_ = 0;
    *((_DWORD *)v71 + 2) = 1;
    *((_DWORD *)v71 + 3) = v70;
    *((_DWORD *)v71 + 4) = 2;
    *((_DWORD *)v71 + 5) = v67;
    *((_DWORD *)v71 + 6) = v68;
    *((_DWORD *)v71 + 7) = v69;
    int v72 = (*(uint64_t (**)(void))(*(void *)*a1 + 536))();
    if (!v72) {
      goto LABEL_112;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v73 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      int v90 = v206;
      if (*((char *)a1 + 127) < 0) {
        int v90 = (void *)*v206;
      }
      *(_DWORD *)double __x = v203;
      int v220 = v90;
      __int16 v221 = 2080;
      float v222 = "commonImmersiveRendererDataSetup";
      __int16 v223 = 1024;
      int v224 = v30;
      __int16 v225 = 1024;
      int v226 = v72;
      _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData could not set the layout for input #%u, err = %d", (uint8_t *)__x, 0x22u);
    }
    goto LABEL_111;
  }
  LODWORD(v30) = 1;
LABEL_362:
  LODWORD(__s2) = 2;
  int v181 = ausdk::AUBase::DispatchSetProperty((const void **)*a1, 3219, 0, 0, (const void **)&__s2, 4);
  if (v181)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v182 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
    {
      long long v190 = a1 + 13;
      if (*((char *)a1 + 127) < 0) {
        long long v190 = (void *)*v190;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v190;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v181;
      _os_log_error_impl(&dword_1BB0CE000, v182, OS_LOG_TYPE_ERROR, "[%s|%s] ImmersiveRendererData failed to switch to scheduled parameters err = %d", buf, 0x1Cu);
    }
  }
  *(_DWORD *)double __x = 0;
  uint64_t v26 = (*(uint64_t (**)(void, uint64_t, void, void, std::vector<char>::value_type *))(*(void *)*a1 + 88))(*a1, 5677, 0, 0, __x);
  if (v26)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    std::string::size_type v183 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v191 = a1 + 13;
      if (*((char *)a1 + 127) < 0) {
        std::string::size_type v191 = (void *)*v191;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v191;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "commonImmersiveRendererDataSetup";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v26;
      _os_log_error_impl(&dword_1BB0CE000, v183, OS_LOG_TYPE_ERROR, "[%s|%s] Could not wait for reverb, err = %d", buf, 0x1Cu);
    }
  }
  *(_DWORD *)(a1[2] + 32) = v30;
  return v26;
}

void sub_1BB68A460(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 344);
  if (v3)
  {
    *(void *)(v1 - 336) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::Metadata::PImpl::ParseMetadataConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 1))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    int v22 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      int v22 = (void *)*v22;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)uint64_t v27 = v22;
    *(_WORD *)&v27[8] = 2080;
    *(void *)&v27[10] = "ParseMetadataConfig";
    long long v23 = "[%s|%s] No renderer metadata config present";
    goto LABEL_50;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v4 = a2 + 16;
  unsigned int v6 = *(unsigned __int16 *)(v4 - 8);
  if (v5) {
    AUSM::Metadata::PImpl::ParseGlobalConfig(a1, v4);
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 4792) - *(void *)(a2 + 4784)) >> 4);
  if (v7 != v6)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    unsigned int v24 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      unsigned int v24 = (void *)*v24;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)uint64_t v27 = v24;
    *(_WORD *)&v27[8] = 2080;
    *(void *)&v27[10] = "ParseMetadataConfig";
    long long v23 = "[%s|%s] Error: not enough group config elements";
    goto LABEL_50;
  }
  if (0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a2 + 4816) - *(void *)(a2 + 4808)) >> 5) != v7)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v21 = (id)getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    unint64_t v25 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      unint64_t v25 = (void *)*v25;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)uint64_t v27 = v25;
    *(_WORD *)&v27[8] = 2080;
    *(void *)&v27[10] = "ParseMetadataConfig";
    long long v23 = "[%s|%s] Error: not enough renderer data elements";
LABEL_50:
    _os_log_error_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
LABEL_51:

    return;
  }
  if (v7 >= v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      unint64_t v10 = (unsigned __int16 *)(*(void *)(a2 + 4784) + 48 * i);
      AUSM::Metadata::PImpl::ParseGroupConfig(a1, v10);
      uint64_t v12 = *(void *)(a1 + 104);
      if (!v12) {
        goto LABEL_22;
      }
      unsigned int v13 = *v10;
      uint64_t v14 = a1 + 104;
      do
      {
        unsigned int v15 = *(_DWORD *)(v12 + 32);
        BOOL v16 = v15 >= v13;
        if (v15 >= v13) {
          uint64_t v17 = (uint64_t *)v12;
        }
        else {
          uint64_t v17 = (uint64_t *)(v12 + 8);
        }
        if (v16) {
          uint64_t v14 = v12;
        }
        uint64_t v12 = *v17;
      }
      while (*v17);
      if (v14 != a1 + 104 && *(_DWORD *)(v14 + 32) <= v13)
      {
        *(_DWORD *)std::string buf = *v10;
        *(void *)&v27[4] = v14 + 40;
        *(void *)&v27[12] = 0;
        AUSM::Metadata::PImpl::ParseRendererData((AUSM::Metadata::PImpl *)a1, *(void *)(a2 + 4808) + 1248 * i, (uint64_t)buf, v11);
      }
      else
      {
LABEL_22:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v18 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = a1 + 48;
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v19 = *(void *)(a1 + 48);
          }
          int v20 = *v10;
          *(_DWORD *)std::string buf = 136315650;
          *(void *)uint64_t v27 = v19;
          *(_WORD *)&v27[8] = 2080;
          *(void *)&v27[10] = "ParseMetadataConfig";
          *(_WORD *)&v27[18] = 1024;
          int v28 = v20;
          _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%s] MC: Group %u not found", buf, 0x1Cu);
        }
      }
    }
  }
}

void AUSM::Metadata::PImpl::ParseGlobalConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 >= 0x801)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v5 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unsigned int v35 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        unsigned int v35 = (void *)*v35;
      }
      *(_DWORD *)__s1 = 136315394;
      *(void *)&__s1[4] = v35;
      *(_WORD *)&__s1[12] = 2080;
      *(void *)&__s1[14] = "ParseGlobalConfig";
      _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters for GlobalConfig", __s1, 0x16u);
    }

    unsigned int v4 = *(unsigned __int16 *)(a2 + 2);
  }
  if (v4 >= 0x800) {
    uint64_t v6 = 2048;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 4;
    uint64_t v36 = (uint64_t *)(a1 + 48);
    while (2)
    {
      int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
      switch(*(_WORD *)(v8 + 2 * v7))
      {
        case 0:
          int v10 = *(unsigned __int8 *)(a2 + 4100);
          *(unsigned char *)(a1 + 120) = v10;
          LODWORD(v37) = v10;
          int v11 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v37, 4);
          if (v11)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              uint64_t v29 = a1 + 48;
              if (*(char *)(a1 + 71) < 0) {
                uint64_t v29 = *v36;
              }
              uint64_t v30 = "enable";
              if (!*(unsigned char *)(a1 + 120)) {
                uint64_t v30 = "disable";
              }
              *(_DWORD *)__s1 = 136315906;
              *(void *)&__s1[4] = v29;
              *(_WORD *)&__s1[12] = 2080;
              *(void *)&__s1[14] = "ParseGlobalConfig";
              *(_WORD *)&__s1[22] = 2080;
              uint64_t v40 = (uint64_t)v30;
              LOWORD(v41) = 1024;
              *(_DWORD *)((char *)&v41 + 2) = v11;
              _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s post-processing reverb, err = %d", __s1, 0x26u);
            }
            goto LABEL_18;
          }
          goto LABEL_12;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
          goto LABEL_12;
        case 7:
          if (*(unsigned __int8 *)(a2 + 4488) >= 3u)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v13 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v32 = a1 + 48;
              if (*(char *)(a1 + 71) < 0) {
                uint64_t v32 = *v36;
              }
              int v33 = *(unsigned __int8 *)(a2 + 4488);
              *(_DWORD *)__s1 = 136315650;
              *(void *)&__s1[4] = v32;
              *(_WORD *)&__s1[12] = 2080;
              *(void *)&__s1[14] = "ParseBinauralization";
              *(_WORD *)&__s1[22] = 1024;
              LODWORD(v40) = v33;
              _os_log_debug_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown HRTF type %u", __s1, 0x1Cu);
            }
            goto LABEL_23;
          }
          goto LABEL_12;
        case 9:
          uint64_t v14 = *(void *)(a2 + 4536) - *(void *)(a2 + 4528);
          *(void *)__s1 = *(unsigned __int8 *)(a2 + 4513);
          *(void *)&__s1[8] = v14;
          uint64_t v15 = (uint64_t)(*(void *)(a2 + 4584) - *(void *)(a2 + 4576)) >> 2;
          *(void *)&__s1[16] = (uint64_t)(*(void *)(a2 + 4560) - *(void *)(a2 + 4552)) >> 2;
          uint64_t v40 = v15;
          uint64_t v16 = *(void *)(a2 + 4632) - *(void *)(a2 + 4624);
          uint64_t v41 = (uint64_t)(*(void *)(a2 + 4608) - *(void *)(a2 + 4600)) >> 2;
          uint64_t v42 = v16;
          if (memcmp(__s1, &__s1[8], 0x28uLL))
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v13 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              uint64_t v31 = a1 + 48;
              if (*(char *)(a1 + 71) < 0) {
                uint64_t v31 = *v36;
              }
              *(_DWORD *)__s1 = 136315394;
              *(void *)&__s1[4] = v31;
              *(_WORD *)&__s1[12] = 2080;
              *(void *)&__s1[14] = "ParseFallbackSPAD";
              _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] FallbackSPAD: inconsistent sizes", __s1, 0x16u);
            }
LABEL_23:
          }
          goto LABEL_12;
        case 0xA:
          int v17 = *(unsigned __int8 *)(a2 + 4648);
          int v38 = 4;
          switch(v17)
          {
            case 0:
              int v18 = 5;
              goto LABEL_41;
            case 1:
              break;
            case 2:
              int v18 = 1;
              goto LABEL_41;
            case 3:
              int v18 = 3;
LABEL_41:
              int v38 = v18;
              break;
            default:
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v19 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                uint64_t v34 = a1 + 48;
                if (*(char *)(a1 + 71) < 0) {
                  uint64_t v34 = *v36;
                }
                *(_DWORD *)__s1 = 136315650;
                *(void *)&__s1[4] = v34;
                *(_WORD *)&__s1[12] = 2080;
                *(void *)&__s1[14] = "ParseDistanceAttenuation";
                *(_WORD *)&__s1[22] = 1024;
                LODWORD(v40) = v17;
                _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "[%s|%s] Distance Attenuation: Unsupported attenuation law %u. Defaulting to 'realistic'", __s1, 0x1Cu);
              }

              break;
          }
          if (*(_DWORD *)(a1 + 32) < 2u) {
            goto LABEL_12;
          }
          uint64_t v20 = 1;
          break;
        default:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v28 = a1 + 48;
            if (*(char *)(a1 + 71) < 0) {
              uint64_t v28 = *v36;
            }
            *(_DWORD *)__s1 = 136315650;
            *(void *)&__s1[4] = v28;
            *(_WORD *)&__s1[12] = 2080;
            *(void *)&__s1[14] = "ParseGlobalConfig";
            *(_WORD *)&__s1[22] = 1024;
            LODWORD(v40) = v9;
            _os_log_debug_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown global param id %u", __s1, 0x1Cu);
          }
LABEL_18:

LABEL_12:
          if (++v7 == v6) {
            return;
          }
          continue;
      }
      break;
    }
    while (1)
    {
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)(a1 + 40)
                                                                                             + 96))(*(void *)(a1 + 40), 3013, 1, v20, &v38, 4))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v21 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = a1 + 48;
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v26 = *v36;
          }
          *(_DWORD *)__s1 = 136315394;
          *(void *)&__s1[4] = v26;
          *(_WORD *)&__s1[12] = 2080;
          *(void *)&__s1[14] = "ParseDistanceAttenuation";
          _os_log_error_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "[%s|%s] Distance Attenuation: Failed to set the attenuation law", __s1, 0x16u);
        }
      }
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 40) + 88))(*(void *)(a1 + 40), 3010, 1, v20, &v37))
      {
        break;
      }
      uint64_t v37 = *(void *)(a2 + 4656);
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 40)
                                                                                                 + 96))(*(void *)(a1 + 40), 3010, 1, v20, &v37, 12))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v22 = (id)getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        uint64_t v27 = a1 + 48;
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v27 = *v36;
        }
        *(_DWORD *)__s1 = 136315394;
        *(void *)&__s1[4] = v27;
        *(_WORD *)&__s1[12] = 2080;
        *(void *)&__s1[14] = "ParseDistanceAttenuation";
        unsigned int v24 = v22;
        unint64_t v25 = "[%s|%s] Distance Attenuation: Failed to set the distance params";
LABEL_69:
        _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, v25, __s1, 0x16u);
LABEL_60:
      }
      uint64_t v20 = (v20 + 1);
      if (v20 >= *(_DWORD *)(a1 + 32)) {
        goto LABEL_12;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v22 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = a1 + 48;
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v23 = *v36;
      }
      *(_DWORD *)__s1 = 136315394;
      *(void *)&__s1[4] = v23;
      *(_WORD *)&__s1[12] = 2080;
      *(void *)&__s1[14] = "ParseDistanceAttenuation";
      unsigned int v24 = v22;
      unint64_t v25 = "[%s|%s] Distance Attenuation: Failed to get the distance params";
      goto LABEL_69;
    }
    goto LABEL_60;
  }
}

void sub_1BB68B1B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AUSM::Metadata::PImpl::ParseGroupConfig(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  uint64_t v6 = a1 + 104;
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= v4) {
          break;
        }
        uint64_t v5 = *(void *)v7;
        int v9 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v4) {
        break;
      }
      uint64_t v5 = *(void *)(v7 + 8);
      if (!v5)
      {
        int v9 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v9 = (uint64_t **)(a1 + 104);
    uint64_t v7 = a1 + 104;
LABEL_9:
    int v10 = operator new(0x40uLL);
    v10[8] = v4;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 5) = 0;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)(v6 - 8), v7, v9, (uint64_t *)v10);
    uint64_t v7 = (uint64_t)v10;
  }
  int v11 = (void **)(v7 + 40);
  *(void *)(v7 + 48) = *(void *)(v7 + 40);
  if (*((unsigned char *)a2 + 2))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unsigned int v35 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        unsigned int v35 = (void *)*v35;
      }
      int v37 = 136315394;
      int v38 = v35;
      __int16 v39 = 2080;
      uint64_t v40 = "ParseGroupConfig";
      _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Unexpected all-ASC group. Not Implemented.", (uint8_t *)&v37, 0x16u);
    }
LABEL_14:

    return;
  }
  if (*((unsigned char *)a2 + 3))
  {
    int v37 = a2[2];
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v7 + 40), (char *)&v37, (uint64_t)&v38, 1uLL);
    if (*((unsigned __int8 *)a2 + 6) >= 3u)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v12 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v13 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          unsigned int v13 = (void *)*v13;
        }
        int v14 = *((unsigned __int8 *)a2 + 6);
        int v37 = 136315650;
        int v38 = v13;
        __int16 v39 = 2080;
        uint64_t v40 = "ParseGroupConfig";
        __int16 v41 = 1024;
        int v42 = v14;
        _os_log_debug_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown ASC type %u", (uint8_t *)&v37, 0x1Cu);
      }
      goto LABEL_14;
    }
  }
  else
  {
    std::vector<unsigned int>::size_type v15 = a2[9];
    if (*((unsigned char *)a2 + 20))
    {
      int v16 = a2[11];
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v7 + 40), v15);
      int v17 = *(_DWORD **)(v7 + 40);
      int v18 = *(_DWORD **)(v7 + 48);
      while (v17 != v18)
        *v17++ = v16++;
    }
    else
    {
      uint64_t v19 = *((void *)a2 + 4) - *((void *)a2 + 3);
      if (v15 != v19 >> 1)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v20 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v36 = (void *)*v36;
          }
          int v37 = 136315394;
          int v38 = v36;
          __int16 v39 = 2080;
          uint64_t v40 = "ParseGroupConfig";
          _os_log_error_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "[%s|%s] Inconsistent member count in ASC ID list", (uint8_t *)&v37, 0x16u);
        }

        uint64_t v19 = *((void *)a2 + 4) - *((void *)a2 + 3);
      }
      unint64_t v21 = (unint64_t)v19 >> 1;
      if (v21 >= v15) {
        std::vector<unsigned int>::size_type v15 = v15;
      }
      else {
        std::vector<unsigned int>::size_type v15 = v21;
      }
      if (v15)
      {
        uint64_t v22 = 0;
        uint64_t v23 = (void *)(v7 + 56);
        unsigned int v24 = *(char **)(v7 + 48);
        do
        {
          int v25 = *(unsigned __int16 *)(*((void *)a2 + 3) + 2 * v22);
          if ((unint64_t)v24 >= *v23)
          {
            uint64_t v27 = (char *)*v11;
            uint64_t v28 = (v24 - (unsigned char *)*v11) >> 2;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = *v23 - (void)v27;
            if (v30 >> 1 > v29) {
              unint64_t v29 = v30 >> 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v7 + 56, v31);
              uint64_t v27 = *(char **)(v7 + 40);
              unsigned int v24 = *(char **)(v7 + 48);
            }
            else
            {
              uint64_t v32 = 0;
            }
            int v33 = &v32[4 * v28];
            *(_DWORD *)int v33 = v25;
            uint64_t v26 = v33 + 4;
            while (v24 != v27)
            {
              int v34 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            *(void *)(v7 + 40) = v33;
            *(void *)(v7 + 48) = v26;
            *(void *)(v7 + 56) = &v32[4 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v24 = v25;
            uint64_t v26 = v24 + 4;
          }
          *(void *)(v7 + 48) = v26;
          ++v22;
          unsigned int v24 = v26;
        }
        while (v22 != v15);
      }
    }
  }
}

void sub_1BB68B678(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AUSM::Metadata::PImpl::ParseRendererData(AUSM::Metadata::PImpl *this, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v6 = this;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *(unsigned __int16 *)(a2 + 2);
  if (v7 >= 0x20)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned int v8 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v129 = (void *)((char *)v6 + 48);
      if (*((char *)v6 + 71) < 0) {
        uint64_t v129 = (void *)*v129;
      }
      *(_DWORD *)std::string buf = 136315394;
      CFStringRef v135 = v129;
      __int16 v136 = 2080;
      uint64_t v137 = "ParseRendererData";
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters", buf, 0x16u);
    }
  }
  if (v7 >= 0x20) {
    uint64_t v9 = 32;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    int v130 = (char **)((char *)v6 + 48);
    uint64_t v131 = a2 + 4;
    a4.n128_u64[0] = 136316162;
    while (1)
    {
      switch(*(_WORD *)(v131 + 2 * v10))
      {
        case 0:
          int v11 = *(unsigned __int8 *)(a2 + 68);
          int v12 = *(unsigned __int8 *)(a2 + 84);
          float v13 = 0.0;
          float v14 = 0.0;
          float v15 = 0.0;
          float v16 = 0.0;
          if (*(unsigned char *)(a2 + 68))
          {
            if (*(unsigned char *)(a2 + 69))
            {
              float v17 = *(float *)(a2 + 88);
              float v18 = *(float *)(a2 + 92);
              float v19 = *(float *)(a2 + 96);
              float v14 = atan2f(v17, v18) * 57.296;
              float v20 = hypotf(v17, v18);
              float v15 = atan2f(v19, v20) * 57.296;
              a4.n128_f32[0] = hypotf(v20, v19);
              float v16 = a4.n128_f32[0];
            }
            else
            {
              a4.n128_u32[0] = *(_DWORD *)(a2 + 72);
              float v15 = *(float *)(a2 + 76);
              float v14 = -a4.n128_f32[0];
              float v16 = *(float *)(a2 + 80);
            }
          }
          float v64 = 0.0;
          float v65 = 0.0;
          if (v12)
          {
            float32x4_t v66 = *(float32x4_t *)(a2 + 100);
            v67.i64[0] = vrev64q_s32((int32x4_t)v66).u64[0];
            v67.i32[2] = vnegq_f32(v66).i32[2];
            v67.i32[3] = v66.i32[3];
            a4.n128_f32[0] = AUSM::auCoordQuaternionToEuler(this, v67);
            float v13 = a4.n128_f32[0];
            float v64 = v68;
            float v65 = v69;
          }
          uint64_t v70 = *(void *)(a3 + 8);
          int v72 = *(_DWORD **)v70;
          std::vector<char>::pointer v71 = *(_DWORD **)(v70 + 8);
          while (v72 != v71)
          {
            unsigned int v73 = *v72 + 1;
            if (v11)
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0, *v72 + 1, *(_DWORD *)(a3 + 16), v14, *(_DWORD *)(a3 + 20));
              AUSM::Metadata::PImpl::setParameter(v6, 1u, v73, *(_DWORD *)(a3 + 16), v15, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 2u, v73, *(_DWORD *)(a3 + 16), v16, *(_DWORD *)(a3 + 20));
            }
            if (v12)
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x16u, v73, *(_DWORD *)(a3 + 16), v13, *(_DWORD *)(a3 + 20));
              AUSM::Metadata::PImpl::setParameter(v6, 0x17u, v73, *(_DWORD *)(a3 + 16), v64, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x18u, v73, *(_DWORD *)(a3 + 16), v65, *(_DWORD *)(a3 + 20));
            }
            ++v72;
          }
          goto LABEL_12;
        case 1:
          uint64_t v29 = *(void *)(a3 + 8);
          uint64_t v30 = *(_DWORD **)v29;
          unint64_t v31 = *(_DWORD **)(v29 + 8);
          while (v30 != v31)
          {
            unsigned int v32 = *v30 + 1;
            float v33 = *(float *)(a2 + 120);
            if (*(unsigned char *)(a2 + 116))
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x19u, *v30 + 1, *(_DWORD *)(a3 + 16), v33, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Au, v32, *(_DWORD *)(a3 + 16), *(float *)(a2 + 124), *(_DWORD *)(a3 + 20));
            }
            else
            {
              AUSM::Metadata::PImpl::setParameter(v6, 0x19u, *v30 + 1, *(_DWORD *)(a3 + 16), v33 / 180.0, *(_DWORD *)(a3 + 20));
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Au, v32, *(_DWORD *)(a3 + 16), *(float *)(a2 + 124) / 90.0, *(_DWORD *)(a3 + 20));
            }
            if (*(unsigned char *)(a2 + 117)) {
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x1Bu, v32, *(_DWORD *)(a3 + 16), *(float *)(a2 + 128), *(_DWORD *)(a3 + 20));
            }
            ++v30;
          }
          goto LABEL_12;
        case 2:
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 3u, a3, *(float *)(a2 + 132));
          int v34 = (int)this;
          if (!this) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            int v90 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              int v90 = *v130;
            }
            int v91 = *(_DWORD *)a3;
            *(_DWORD *)std::string buf = 136315906;
            CFStringRef v135 = v90;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseRendererData";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v34;
            *(_WORD *)&v139[4] = 1024;
            *(_DWORD *)&v139[6] = v91;
            _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Gain on group %u", buf, 0x22u);
          }
          goto LABEL_200;
        case 3:
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x21u, a3, *(float *)(a2 + 136));
          int v21 = (int)this;
          if (!this) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            size_t v88 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              size_t v88 = *v130;
            }
            int v89 = *(_DWORD *)a3;
            *(_DWORD *)std::string buf = 136315906;
            CFStringRef v135 = v88;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseRendererData";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v21;
            *(_WORD *)&v139[4] = 1024;
            *(_DWORD *)&v139[6] = v89;
            _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Diffuse on group %u", buf, 0x22u);
          }
          goto LABEL_200;
        case 4:
          uint64_t v35 = *(void *)(a3 + 8);
          uint64_t v36 = *(_DWORD **)v35;
          int v37 = *(_DWORD **)(v35 + 8);
          while (v36 != v37)
          {
            if (*(unsigned char *)(a2 + 140)) {
              float v38 = 1.0;
            }
            else {
              float v38 = 0.0;
            }
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, 0x20u, *v36++ + 1, *(_DWORD *)(a3 + 16), v38, *(_DWORD *)(a3 + 20));
          }
          goto LABEL_12;
        case 5:
          uint64_t v23 = *(void *)(a3 + 8);
          unsigned int v24 = *(_DWORD **)v23;
          int v25 = *(_DWORD **)(v23 + 8);
          while (v24 != v25)
          {
            unsigned int v26 = *v24 + 1;
            AUSM::Metadata::PImpl::setParameter(v6, 0x1Cu, v26, *(_DWORD *)(a3 + 16), *(float *)(a2 + 148), *(_DWORD *)(a3 + 20));
            if (*(unsigned char *)(a2 + 152)) {
              unsigned int v27 = 30;
            }
            else {
              unsigned int v27 = 29;
            }
            if (*(unsigned char *)(a2 + 152)) {
              uint64_t v28 = (float *)(a2 + 160);
            }
            else {
              uint64_t v28 = (float *)(a2 + 164);
            }
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameter(v6, v27, v26, *(_DWORD *)(a3 + 16), *v28, *(_DWORD *)(a3 + 20));
            ++v24;
          }
          goto LABEL_12;
        case 6:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
        case 0x18:
          goto LABEL_12;
        case 7:
          AUSM::Metadata::PImpl::ParseObjectZoneExclusion((unint64_t)v6, (unsigned char *)(a2 + 172), (int *)a3, a4);
          goto LABEL_12;
        case 8:
          int v133 = *(unsigned __int8 *)(a2 + 1037);
          __int16 v39 = *(int ***)(a3 + 8);
          uint64_t v40 = *v39;
          __int16 v41 = v39[1];
          while (v40 != v41)
          {
            int v42 = *v40;
            unsigned int v43 = *v40 + 1;
            this = (AUSM::Metadata::PImpl *)(*(uint64_t (**)(void, uint64_t, uint64_t, void, int *, uint64_t))(**((void **)v6 + 5) + 96))(*((void *)v6 + 5), 3242, 1, v43, &v133, 4);
            if (this)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              vDSP_Length v44 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
              {
                int v45 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v45 = *v130;
                }
                *(_DWORD *)std::string buf = 136315906;
                CFStringRef v135 = v45;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseRendererData";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v42;
                *(_WORD *)&v139[4] = 1024;
                *(_DWORD *)&v139[6] = v43;
                _os_log_debug_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
              }
            }
            ++v40;
          }
          goto LABEL_12;
        case 9:
          int v46 = *(unsigned __int8 *)(a2 + 568);
          if ((v46 - 2) < 2) {
            goto LABEL_12;
          }
          if (v46 == 1)
          {
            int v133 = *(unsigned __int16 *)(a2 + 570);
            int v74 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 10, 0, 0, &v133, 4);
            if (v74)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v75 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
              {
                int v114 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v114 = *v130;
                }
                int v115 = *(_DWORD *)a3;
                *(_DWORD *)std::string buf = 136315906;
                CFStringRef v135 = v114;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseSceneReverb";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v115;
                *(_WORD *)&v139[4] = 1024;
                *(_DWORD *)&v139[6] = v74;
                _os_log_debug_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb preset for group id = #%u, err = %d", buf, 0x22u);
              }
            }
            if (*(unsigned char *)(a2 + 732))
            {
              int v76 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 8u, a3, *(float *)(a2 + 728));
              if (v76)
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v77 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
                {
                  int v125 = (char *)v6 + 48;
                  if (*((char *)v6 + 71) < 0) {
                    int v125 = *v130;
                  }
                  int v126 = *(_DWORD *)a3;
                  *(_DWORD *)std::string buf = 136315906;
                  CFStringRef v135 = v125;
                  __int16 v136 = 2080;
                  uint64_t v137 = "ParseSceneReverb";
                  __int16 v138 = 1024;
                  *(_DWORD *)uint64_t v139 = v126;
                  *(_WORD *)&v139[4] = 1024;
                  *(_DWORD *)&v139[6] = v76;
                  _os_log_debug_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb blend for group id = %u, err = %d", buf, 0x22u);
                }
              }
            }
            int v132 = 1;
            this = (AUSM::Metadata::PImpl *)AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 1005, 0, 0, &v132, 4);
            int v78 = (int)this;
            if (this)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                int v116 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v116 = *v130;
                }
                int v117 = *(_DWORD *)a3;
                *(_DWORD *)std::string buf = 136315906;
                CFStringRef v135 = v116;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseSceneReverb";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v117;
                *(_WORD *)&v139[4] = 1024;
                *(_DWORD *)&v139[6] = v78;
                _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable scene reverb for group id = %u, err = %d", buf, 0x22u);
              }
              goto LABEL_200;
            }
            goto LABEL_12;
          }
          if (*(unsigned char *)(a2 + 568))
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            __int16 v63 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v105 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                uint64_t v105 = *v130;
              }
              int v106 = *(unsigned __int8 *)(a2 + 568);
              *(_DWORD *)std::string buf = 136315650;
              CFStringRef v135 = v105;
              __int16 v136 = 2080;
              uint64_t v137 = "ParseSceneReverb";
              __int16 v138 = 1024;
              *(_DWORD *)uint64_t v139 = v106;
              _os_log_debug_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown param id %u", buf, 0x1Cu);
            }
LABEL_164:

            goto LABEL_12;
          }
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 8u, a3, 0.0);
          int v47 = (int)this;
          if (!this) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            long long v110 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              long long v110 = *v130;
            }
            int v111 = *(_DWORD *)a3;
            *(_DWORD *)std::string buf = 136315906;
            CFStringRef v135 = v110;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseSceneReverb";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v111;
            *(_WORD *)&v139[4] = 1024;
            *(_DWORD *)&v139[6] = v47;
            _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not remove reverb by setting reverb blend to 0 for group id = %u, err = %d", buf, 0x22u);
          }
          goto LABEL_200;
        case 0xA:
          if (!*((unsigned char *)v6 + 120)) {
            goto LABEL_12;
          }
          int v48 = *(unsigned __int8 *)(a2 + 780);
          if (v48 == 2)
          {
            int v133 = 1;
            int v79 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3267, 0, 0, &v133, 4);
            if (v79)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              int v80 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
              {
                size_t v121 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  size_t v121 = *v130;
                }
                *(_DWORD *)std::string buf = 136315650;
                CFStringRef v135 = v121;
                __int16 v136 = 2080;
                uint64_t v137 = "ParsePostProcessingReverb";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v79;
                _os_log_debug_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP reverb: err = %d", buf, 0x1Cu);
              }
            }
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 50.0);
            int v81 = (int)this;
            if (this)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_200;
              }
              int v124 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                int v124 = *v130;
              }
LABEL_275:
              int v128 = *(_DWORD *)a3;
              *(_DWORD *)std::string buf = 136315906;
              CFStringRef v135 = v124;
              __int16 v136 = 2080;
              uint64_t v137 = "ParsePostProcessingReverb";
              __int16 v138 = 1024;
              *(_DWORD *)uint64_t v139 = v128;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)&v139[6] = v81;
              _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 50 on group id = %u, err = %d", buf, 0x22u);
LABEL_200:
            }
          }
          else if (v48 == 1)
          {
            int v133 = 1;
            int v82 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3267, 0, 0, &v133, 4);
            if (v82)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                int v122 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v122 = *v130;
                }
                *(_DWORD *)std::string buf = 136315650;
                CFStringRef v135 = v122;
                __int16 v136 = 2080;
                uint64_t v137 = "ParsePostProcessingReverb";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v82;
                _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP ERs: err = %d", buf, 0x1Cu);
              }
              goto LABEL_200;
            }
            LOBYTE(v132) = 0;
            int v86 = AUSpatialMixerV2::SetAPACProperty(*((AUSpatialMixerV2 **)v6 + 5), 3262, 0, 0, &v132, 1);
            if (v86)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v87 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
              {
                std::vector<char>::pointer v127 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  std::vector<char>::pointer v127 = *v130;
                }
                *(_DWORD *)std::string buf = 136315650;
                CFStringRef v135 = v127;
                __int16 v136 = 2080;
                uint64_t v137 = "ParsePostProcessingReverb";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v86;
                _os_log_debug_impl(&dword_1BB0CE000, v87, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not disable the PP late reverb: err = %d", buf, 0x1Cu);
              }
            }
            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 50.0);
            int v81 = (int)this;
            if (this)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                int v124 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v124 = *v130;
                }
                goto LABEL_275;
              }
              goto LABEL_200;
            }
          }
          else
          {
            if (!*(unsigned char *)(a2 + 780))
            {
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 0.0);
              int v49 = (int)this;
              if (!this) {
                goto LABEL_12;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_200;
              }
              int v120 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                int v120 = *v130;
              }
LABEL_263:
              int v123 = *(_DWORD *)a3;
              *(_DWORD *)std::string buf = 136315906;
              CFStringRef v135 = v120;
              __int16 v136 = 2080;
              uint64_t v137 = "ParsePostProcessingReverb";
              __int16 v138 = 1024;
              *(_DWORD *)uint64_t v139 = v123;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)&v139[6] = v49;
              _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 0 on group id = %u, err = %d", buf, 0x22u);
              goto LABEL_200;
            }
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v83 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              int v109 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                int v109 = *v130;
              }
              *(_DWORD *)std::string buf = 136315394;
              CFStringRef v135 = v109;
              __int16 v136 = 2080;
              uint64_t v137 = "ParsePostProcessingReverb";
              _os_log_debug_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_DEBUG, "[%s|%s] Invalid PP reverb", buf, 0x16u);
            }

            this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x23u, a3, 0.0);
            int v49 = (int)this;
            if (this)
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_200;
              }
              int v120 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                int v120 = *v130;
              }
              goto LABEL_263;
            }
          }
LABEL_12:
          if (++v10 == v9) {
            return;
          }
          break;
        case 0xB:
          switch(*(unsigned char *)(a2 + 792))
          {
            case 0:
            case 2:
              goto LABEL_12;
            case 1:
              int v133 = *(unsigned __int16 *)(a2 + 794);
              this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setAPACPropertyOnGroup((uint64_t)v6, 3269, **(_DWORD ***)(a3 + 8), *(_DWORD **)(*(void *)(a3 + 8) + 8), (uint64_t)&v133, 4);
              int v50 = (int)this;
              if (!this) {
                goto LABEL_12;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v112 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  uint64_t v112 = *v130;
                }
                int v113 = *(_DWORD *)a3;
                *(_DWORD *)std::string buf = 136316162;
                CFStringRef v135 = v112;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseRadiationPattern";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v133;
                *(_WORD *)&v139[4] = 1024;
                *(_DWORD *)&v139[6] = v113;
                LOWORD(v140[0]) = 1024;
                *(_DWORD *)((char *)v140 + 2) = v50;
                _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set directivity index %u for group #%u: err = %d", buf, 0x28u);
              }
              goto LABEL_200;
            case 3:
              if (*(unsigned __int8 *)(a2 + 808) < 4u) {
                goto LABEL_12;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              __int16 v63 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                int v118 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  int v118 = *v130;
                }
                int v119 = *(unsigned __int8 *)(a2 + 808);
                *(_DWORD *)std::string buf = 136315650;
                CFStringRef v135 = v118;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseParametricRadiationPattern";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v119;
                _os_log_debug_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported directivity model: %u", buf, 0x1Cu);
              }
              goto LABEL_164;
            default:
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              __int16 v63 = (id)getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v107 = (char *)v6 + 48;
                if (*((char *)v6 + 71) < 0) {
                  unsigned int v107 = *v130;
                }
                int v108 = *(unsigned __int8 *)(a2 + 792);
                *(_DWORD *)std::string buf = 136315650;
                CFStringRef v135 = v107;
                __int16 v136 = 2080;
                uint64_t v137 = "ParseRadiationPattern";
                __int16 v138 = 1024;
                *(_DWORD *)uint64_t v139 = v108;
                _os_log_debug_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported index: %u", buf, 0x1Cu);
              }
              goto LABEL_164;
          }
        case 0xC:
          int v51 = *(unsigned __int8 *)(a2 + 1024);
          if (*(unsigned char *)(a2 + 1024)) {
            float v52 = 1.0;
          }
          else {
            float v52 = 0.0;
          }
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x27u, a3, v52);
          int v53 = (int)this;
          if (!this) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            int v92 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              int v92 = *v130;
            }
            int v93 = *(_DWORD *)a3;
            int v94 = "bypass";
            if (!v51) {
              int v94 = "non-bypass";
            }
            *(_DWORD *)std::string buf = 136316162;
            CFStringRef v135 = v92;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseHeadphoneVirtualize";
            __int16 v138 = 2080;
            *(void *)uint64_t v139 = v94;
            *(_WORD *)&v139[8] = 1024;
            v140[0] = v93;
            LOWORD(v140[1]) = 1024;
            *(_DWORD *)((char *)&v140[1] + 2) = v53;
            _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the headphoneVirtualise to %s on group id = %u, err = %d", buf, 0x2Cu);
          }
          goto LABEL_200;
        case 0xD:
          if (*(unsigned char *)(a2 + 1032)) {
            float v54 = 1.0;
          }
          else {
            float v54 = 0.0;
          }
          int v55 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x1Fu, a3, v54);
          if (v55)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v56 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v95 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                uint64_t v95 = *v130;
              }
              int v96 = *(_DWORD *)a3;
              unint64_t v97 = "false";
              if (*(unsigned char *)(a2 + 1032)) {
                unint64_t v97 = "true";
              }
              *(_DWORD *)std::string buf = 136316162;
              CFStringRef v135 = v95;
              __int16 v136 = 2080;
              uint64_t v137 = "ParseHeadLock";
              __int16 v138 = 1024;
              *(_DWORD *)uint64_t v139 = v55;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)&v139[6] = v96;
              LOWORD(v140[0]) = 2080;
              *(void *)((char *)v140 + 2) = v97;
              _os_log_debug_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting HeadLocked on group id = %u to %s", buf, 0x2Cu);
            }
          }
          int v57 = *(unsigned __int8 *)(a2 + 1033);
          if (*(unsigned char *)(a2 + 1033)) {
            float v58 = 0.0;
          }
          else {
            float v58 = 1.0;
          }
          int v59 = AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x27u, a3, v58);
          if (v59)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v60 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              int v98 = (char *)v6 + 48;
              if (*((char *)v6 + 71) < 0) {
                int v98 = *v130;
              }
              int v99 = *(_DWORD *)a3;
              int v100 = "false";
              if (!v57) {
                int v100 = "true";
              }
              *(_DWORD *)std::string buf = 136316162;
              CFStringRef v135 = v98;
              __int16 v136 = 2080;
              uint64_t v137 = "ParseHeadLock";
              __int16 v138 = 1024;
              *(_DWORD *)uint64_t v139 = v59;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)&v139[6] = v99;
              LOWORD(v140[0]) = 2080;
              *(void *)((char *)v140 + 2) = v100;
              _os_log_debug_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting Internalized on group id = %u to %s", buf, 0x2Cu);
            }
          }
          if (v57) {
            float v61 = 45.0;
          }
          else {
            float v61 = 30.0;
          }
          this = (AUSM::Metadata::PImpl *)AUSM::Metadata::PImpl::setParameterOnGroup(v6, 0x28u, a3, v61);
          int v62 = (int)this;
          if (!this) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            int v101 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              int v101 = *v130;
            }
            int v102 = *(_DWORD *)a3;
            *(_DWORD *)std::string buf = 136316162;
            CFStringRef v135 = v101;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseHeadLock";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v62;
            *(_WORD *)&v139[4] = 1024;
            *(_DWORD *)&v139[6] = v102;
            LOWORD(v140[0]) = 2048;
            *(double *)((char *)v140 + 2) = v61;
            _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Error %d setting StereoPanningRefAngle on group id = %u to %f", buf, 0x2Cu);
          }
          goto LABEL_200;
        case 0x16:
          if (*(unsigned __int8 *)(a2 + 1200) < 3u) {
            goto LABEL_12;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          __int16 v63 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            int v103 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              int v103 = *v130;
            }
            int v104 = *(unsigned __int8 *)(a2 + 1200);
            *(_DWORD *)std::string buf = 136315650;
            CFStringRef v135 = v103;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseHOARenderingMatrix";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v104;
            _os_log_debug_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown data location index %u", buf, 0x1Cu);
          }
          goto LABEL_164;
        default:
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          __int16 v63 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v84 = (char *)v6 + 48;
            if (*((char *)v6 + 71) < 0) {
              uint64_t v84 = *v130;
            }
            int v85 = *(unsigned __int16 *)(v131 + 2 * v10);
            *(_DWORD *)std::string buf = 136315650;
            CFStringRef v135 = v84;
            __int16 v136 = 2080;
            uint64_t v137 = "ParseRendererData";
            __int16 v138 = 1024;
            *(_DWORD *)uint64_t v139 = v85;
            _os_log_debug_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown param id %u", buf, 0x1Cu);
          }
          goto LABEL_164;
      }
    }
  }
}

void sub_1BB68D198(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::Metadata::PImpl::setParameter(AUSM::Metadata::PImpl *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, unsigned int a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v12 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      float v13 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        float v13 = (void *)*v13;
      }
      int v15 = 136316930;
      unint64_t v16 = (unint64_t)v13;
      LOWORD(v17) = 2080;
      *(void *)((char *)&v17 + 2) = "setParameter";
      WORD5(v17) = 1024;
      HIDWORD(v17) = a2;
      *(_WORD *)float v18 = 1024;
      *(_DWORD *)&void v18[2] = 1;
      __int16 v19 = 1024;
      unsigned int v20 = a3;
      __int16 v21 = 2048;
      double v22 = a5;
      __int16 v23 = 1024;
      unsigned int v24 = a4;
      __int16 v25 = 1024;
      unsigned int v26 = a6;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "[%s|%s] MetadataSetParameter param = %u, scope = %u, element = %u, value = %f, offset = %d, duratiouint64_t n = %u", (uint8_t *)&v15, 0x3Eu);
    }
  }
  if (*((unsigned char *)this + 92) == 1 && *((unsigned __int8 *)this + 93) <= 2u)
  {
    int v15 = 1;
    unint64_t v16 = __PAIR64__(a2, a3);
    LODWORD(v17) = 3;
    DWORD1(v17) = a4;
    *((void *)&v17 + 1) = 0;
  }
  else
  {
    int v15 = 1;
    unint64_t v16 = __PAIR64__(a2, a3);
    LODWORD(v17) = 4;
    *(void *)((char *)&v17 + 4) = __PAIR64__(a6, a4);
    HIDWORD(v17) = 0;
  }
  *(float *)float v18 = a5;
  return (*(uint64_t (**)(void, int *, uint64_t))(**((void **)this + 5) + 168))(*((void *)this + 5), &v15, 1);
}

uint64_t AUSM::Metadata::PImpl::setParameterOnGroup(AUSM::Metadata::PImpl *this, unsigned int a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(_DWORD **)v4;
  uint64_t v6 = *(_DWORD **)(v4 + 8);
  if (*(_DWORD **)v4 == v6) {
    return 0;
  }
  while (1)
  {
    uint64_t result = AUSM::Metadata::PImpl::setParameter(this, a2, *v5 + 1, *(_DWORD *)(a3 + 16), a4, *(_DWORD *)(a3 + 20));
    if (result) {
      break;
    }
    if (++v5 == v6) {
      return 0;
    }
  }
  return result;
}

void AUSM::Metadata::PImpl::ParseObjectZoneExclusion(unint64_t a1, unsigned char *a2, int *a3, __n128 a4)
{
  uint64_t v5 = a1;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    if (!a2[1])
    {
      float v54 = 0;
      int v55 = 0;
      unint64_t v56 = 0;
      if (a2[3])
      {
        unsigned int v7 = 0;
        unsigned int v8 = 0;
        uint64_t v9 = 0;
        float v52 = (void *)(a1 + 48);
        a4.n128_u64[0] = 136316162;
        __n128 v50 = a4;
        a4.n128_u64[0] = 136315906;
        __n128 v51 = a4;
        while (a2[v9 + 4])
        {
          AUSM::ExclusionZone::getPreset(a2[v9 + 19], (void **)&v54);
          unsigned int v8 = v55;
LABEL_43:
          unsigned int v7 = v54;
          if (v54 == v8)
          {
            int v30 = 0;
          }
          else
          {
            int v30 = 0;
            unint64_t v31 = v54;
            do
            {
              int v33 = *v31;
              v31 += 7;
              int v32 = v33;
              int v34 = v30 + 5;
              if (v33) {
                int v34 = v30;
              }
              if (v32 == 1) {
                v30 += 7;
              }
              else {
                int v30 = v34;
              }
            }
            while (v31 != v8);
          }
          MEMORY[0x1F4188790](a1);
          uint64_t v36 = (char *)&v50 - v35;
          AUSM::ExclusionZone::arrayFromZones(v7, v8, (uint64_t)&v50 - v35);
          int v37 = AUSM::Metadata::PImpl::setAPACPropertyOnGroup(v5, 3226, **((_DWORD ***)a3 + 1), *(_DWORD **)(*((void *)a3 + 1) + 8), (uint64_t)v36, (4 * v30));
          if (v37)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            float v38 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              __int16 v41 = v52;
              if (*(char *)(v5 + 71) < 0) {
                __int16 v41 = (void *)*v52;
              }
              int v42 = *a3;
              *(_DWORD *)std::string buf = v51.n128_u32[0];
              float v58 = v41;
              __int16 v59 = 2080;
              int v60 = "ParseObjectZoneExclusion";
              __int16 v61 = 1024;
              *(_DWORD *)int v62 = v42;
              *(_WORD *)&v62[4] = 1024;
              *(_DWORD *)&v62[6] = v37;
              _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set exclusion zone array on group %u, err = %d", buf, 0x22u);
            }
          }
          BOOL v53 = v37 == 0;
          a1 = AUSM::Metadata::PImpl::setAPACPropertyOnGroup(v5, 3224, **((_DWORD ***)a3 + 1), *(_DWORD **)(*((void *)a3 + 1) + 8), (uint64_t)&v53, 4);
          int v39 = a1;
          if (a1)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v40 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              unsigned int v43 = v52;
              if (*(char *)(v5 + 71) < 0) {
                unsigned int v43 = (void *)*v52;
              }
              vDSP_Length v44 = "enable";
              if (!v53) {
                vDSP_Length v44 = "disable";
              }
              int v45 = *a3;
              *(_DWORD *)std::string buf = v50.n128_u32[0];
              float v58 = v43;
              __int16 v59 = 2080;
              int v60 = "ParseObjectZoneExclusion";
              __int16 v61 = 2080;
              *(void *)int v62 = v44;
              *(_WORD *)&v62[8] = 1024;
              int v63 = v45;
              __int16 v64 = 1024;
              int v65 = v39;
              _os_log_error_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s exclusion zone on group %u, err = %d", buf, 0x2Cu);
            }
          }
          if (++v9 >= (unint64_t)a2[3])
          {
            if (v7) {
              operator delete(v7);
            }
            return;
          }
        }
        uint64_t v10 = (int *)&a2[24 * v9 + 36];
        if (a2[2])
        {
          int v12 = *v10;
          int v11 = *(_DWORD *)&a2[24 * v9 + 40];
          int v14 = *(_DWORD *)&a2[24 * v9 + 44];
          int v13 = *(_DWORD *)&a2[24 * v9 + 48];
          int v16 = *(_DWORD *)&a2[24 * v9 + 52];
          int v15 = *(_DWORD *)&a2[24 * v9 + 56];
          if ((unint64_t)v8 < v56)
          {
            int *v8 = 1;
            v8[1] = v12;
            _OWORD v8[2] = v11;
            v8[3] = v14;
            v8[4] = v13;
            v8[5] = v16;
            v8[6] = v15;
LABEL_12:
            v8 += 7;
LABEL_42:
            int v55 = v8;
            goto LABEL_43;
          }
          unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (v8 - v7) + 1;
          if (v21 > 0x924924924924924) {
            goto LABEL_84;
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (void)v7) >> 2) > v21) {
            unint64_t v21 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (void)v7) >> 2);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - (void)v7) >> 2)) >= 0x492492492492492) {
            a1 = 0x924924924924924;
          }
          else {
            a1 = v21;
          }
          if (a1) {
            a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(a1);
          }
          else {
            uint64_t v22 = 0;
          }
          unsigned int v24 = (int *)(a1 + 4 * (v8 - v7));
          *unsigned int v24 = 1;
          v24[1] = v12;
          v24[2] = v11;
          v24[3] = v14;
          v24[4] = v13;
          v24[5] = v16;
          v24[6] = v15;
          if (v8 != v7)
          {
            unint64_t v25 = a1 + 4 * (v8 - v7);
            do
            {
              long long v26 = *(_OWORD *)(v8 - 7);
              uint64_t v27 = (int *)(v25 - 28);
              *(_OWORD *)(v25 - 16) = *((_OWORD *)v8 - 1);
              *(_OWORD *)(v25 - 28) = v26;
              v8 -= 7;
              v25 -= 28;
            }
            while (v8 != v7);
            goto LABEL_40;
          }
        }
        else
        {
          int v18 = *(_DWORD *)&a2[24 * v9 + 44];
          int v17 = *(_DWORD *)&a2[24 * v9 + 48];
          int v20 = *v10;
          int v19 = *(_DWORD *)&a2[24 * v9 + 40];
          if ((unint64_t)v8 < v56)
          {
            int *v8 = 0;
            v8[1] = v18;
            _OWORD v8[2] = v17;
            v8[3] = v20;
            v8[4] = v19;
            goto LABEL_12;
          }
          unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * (v8 - v7) + 1;
          if (v23 > 0x924924924924924) {
LABEL_84:
          }
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (void)v7) >> 2) > v23) {
            unint64_t v23 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v56 - (void)v7) >> 2);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - (void)v7) >> 2)) >= 0x492492492492492) {
            a1 = 0x924924924924924;
          }
          else {
            a1 = v23;
          }
          if (a1) {
            a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(a1);
          }
          else {
            uint64_t v22 = 0;
          }
          unsigned int v24 = (int *)(a1 + 4 * (v8 - v7));
          *unsigned int v24 = 0;
          v24[1] = v18;
          v24[2] = v17;
          v24[3] = v20;
          v24[4] = v19;
          if (v8 != v7)
          {
            unint64_t v28 = a1 + 4 * (v8 - v7);
            do
            {
              long long v29 = *(_OWORD *)(v8 - 7);
              uint64_t v27 = (int *)(v28 - 28);
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v8 - 1);
              *(_OWORD *)(v28 - 28) = v29;
              v8 -= 7;
              v28 -= 28;
            }
            while (v8 != v7);
LABEL_40:
            unsigned int v8 = v24 + 7;
            float v54 = v27;
            unint64_t v56 = a1 + 28 * v22;
            if (v7) {
              operator delete(v7);
            }
            goto LABEL_42;
          }
        }
        uint64_t v27 = v24;
        goto LABEL_40;
      }
    }
  }
  else
  {
    LODWORD(v54) = 0;
    int v46 = AUSM::Metadata::PImpl::setAPACPropertyOnGroup(a1, 3224, **((_DWORD ***)a3 + 1), *(_DWORD **)(*((void *)a3 + 1) + 8), (uint64_t)&v54, 4);
    if (v46)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      int v47 = (id)getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int v48 = (void *)(v5 + 48);
        if (*(char *)(v5 + 71) < 0) {
          int v48 = (void *)*v48;
        }
        int v49 = *a3;
        *(_DWORD *)std::string buf = 136315906;
        float v58 = v48;
        __int16 v59 = 2080;
        int v60 = "ParseObjectZoneExclusion";
        __int16 v61 = 1024;
        *(_DWORD *)int v62 = v49;
        *(_WORD *)&v62[4] = 1024;
        *(_DWORD *)&v62[6] = v46;
        _os_log_error_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "[%s|%s] Could not disable exclusion zone for group %u, err = %d", buf, 0x22u);
      }
    }
  }
}

void sub_1BB68DB84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::Metadata::PImpl::setAPACPropertyOnGroup(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a4) {
    return 0;
  }
  uint64_t v9 = a3;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, uint64_t))(**(void **)(a1 + 40)
                                                                                           + 96))(*(void *)(a1 + 40), a2, 1, (*v9 + 1), a5, a6);
    if (result) {
      break;
    }
    if (++v9 == a4) {
      return 0;
    }
  }
  return result;
}

APAC::Metadata *APAC::Metadata::Metadata(APAC::Metadata *this)
{
  uint64_t v2 = (char *)this + 1455201;
  uint64_t v3 = (_WORD *)((char *)this + 1451088);
  uint64_t v4 = (char *)this + 1450744;
  uint64_t v5 = (char *)this + 1450369;
  uint64_t v6 = (char *)this + 1446248;
  unsigned int v7 = (char *)this + 1445216;
  unsigned int v8 = (char *)this + 206708;
  uint64_t v9 = (_WORD *)((char *)this + 174192);
  *(_DWORD *)this = 0xFFFF;
  uint64_t v10 = (char *)this + 173164;
  *((_WORD *)this + 2) = 769;
  int v11 = (char *)this + 27872;
  *((unsigned char *)this + 6) = 0;
  *((unsigned char *)this + 8) = 0;
  uint64_t v12 = 12;
  do
  {
    int v13 = (char *)this + v12;
    *(_WORD *)int v13 = 256;
    *((_DWORD *)v13 + 1) = 0;
    v12 += 28;
  }
  while (v13 + 28 != (char *)this + 432);
  uint64_t v14 = 0;
  *((unsigned char *)this + 432) = 0;
  *((_WORD *)this + 218) = 0;
  do
  {
    int v15 = (char *)this + v14;
    v15[578] = 0;
    *((_DWORD *)v15 + 147) = 0;
    *(_DWORD *)((char *)this + v14 + 591) = 0;
    v15[596] = 0;
    *((_DWORD *)v15 + 150) = 0;
    *((_WORD *)v15 + 302) = 0;
    v15[608] = 0;
    *(void *)((char *)this + v14 + 612) = 0;
    *((_DWORD *)v15 + 155) = 0;
    *((_DWORD *)v15 + 143) = 0;
    v15[576] = 0;
    *((_DWORD *)v15 + 145) = 0;
    *(_DWORD *)((char *)this + v14 + 583) = 0;
    *((_DWORD *)v15 + 110) = 0;
    v14 += 216;
    v15[444] = 0;
  }
  while (v14 != 27432);
  uint64_t v16 = 0;
  uint64_t v17 = 27876;
  *int v11 = 0;
  uint64_t v18 = 27992;
  uint64_t v19 = 27990;
  uint64_t v20 = 27989;
  uint64_t v21 = 27988;
  uint64_t v22 = 27952;
  uint64_t v23 = 27940;
  uint64_t v24 = 27937;
  uint64_t v25 = 27936;
  uint64_t v26 = 27932;
  uint64_t v27 = 27928;
  uint64_t v28 = 27892;
  uint64_t v29 = 27910;
  uint64_t v30 = 27896;
  uint64_t v31 = 27900;
  do
  {
    *((unsigned char *)this + v28) = 0;
    *(_DWORD *)((char *)this + v30) = 0;
    *((unsigned char *)this + v31) = 0;
    *((unsigned char *)this + v29) = 0;
    int v32 = (char *)this + v17;
    *(_DWORD *)(v32 + 47) = 0;
    *((_DWORD *)v32 + 11) = 0;
    *((unsigned char *)this + v27) = 0;
    *(_DWORD *)((char *)this + v26) = 0;
    *((unsigned char *)this + v25) = 0;
    *((unsigned char *)this + v24) = 0;
    *((unsigned char *)this + v23) = 0;
    *(void *)((char *)this + v16 + 27944) = 0;
    *(_DWORD *)((char *)this + v22) = 0;
    v32[32] = 0;
    *((_DWORD *)v32 + 7) = 0;
    v16 += 1144;
    v17 += 1144;
    *((_DWORD *)v32 + 9) = 0;
    *(_DWORD *)(v32 + 39) = 0;
    *(_WORD *)((char *)this + v18) = 0;
    v18 += 1144;
    *((unsigned char *)this + v19) = 0;
    v19 += 1144;
    *((unsigned char *)this + v20) = 0;
    v20 += 1144;
    *((unsigned char *)this + v21) = 0;
    v21 += 1144;
    v22 += 1144;
    v23 += 1144;
    v24 += 1144;
    v25 += 1144;
    v32[4] = 0;
    v26 += 1144;
    v27 += 1144;
    *(_DWORD *)int v32 = 0;
    v28 += 1144;
    v29 += 1144;
    *((_DWORD *)v32 + 2) = 0;
    v30 += 1144;
    v31 += 1144;
    *(_DWORD *)(v32 + 11) = 0;
  }
  while (v16 != 145288);
  *uint64_t v10 = 0;
  *((_WORD *)v10 + 1) = 0;
  uint64_t v33 = 32512;
  _WORD *v9 = 0;
  int v34 = (char *)v9 + 225;
  do
  {
    *(_WORD *)(v34 - 89) = 0;
    *(void *)(v34 - 85) = 0;
    *(_DWORD *)(v34 - 78) = 0;
    *(_DWORD *)(v34 - 221) = 0;
    *(v34 - 217) = 0;
    *((_WORD *)v34 - 37) = 1;
    *(v34 - 45) = 0;
    *(_DWORD *)(v34 - 5) = 0;
    *(_OWORD *)(v34 - 41) = 0uLL;
    *(_OWORD *)(v34 - 25) = 0uLL;
    *(v34 - 9) = 0;
    *(_WORD *)(v34 - 1) = 0;
    v34 += 256;
    v33 -= 256;
  }
  while (v33);
  unsigned char *v8 = 0;
  uint64_t v35 = v8 + 4;
  uint64_t v36 = 206784;
  do
  {
    int v37 = v35 + 9752;
    *uint64_t v35 = 0;
    float v38 = v35 + 8724;
    int v39 = v35 + 7572;
    v35[4] = 0;
    v35[8] = 0;
    *((_DWORD *)v35 + 3) = 0;
    *((_WORD *)v35 + 8) = 256;
    *((_WORD *)v35 + 14) = 0;
    *((_DWORD *)v35 + 8) = 0;
    *((_DWORD *)v35 + 5) = 0;
    *(_DWORD *)(v35 + 23) = 0;
    v35[36] = 0;
    v35[40] = 0;
    *((_DWORD *)v35 + 11) = 0;
    *((_WORD *)v35 + 24) = 256;
    *((_WORD *)v35 + 30) = 0;
    *((_DWORD *)v35 + 16) = 0;
    *((_DWORD *)v35 + 13) = 0;
    *(_DWORD *)(v35 + 55) = 0;
    uint64_t v40 = v36;
    *((_WORD *)v35 + 34) = 0;
    do
    {
      __int16 v41 = (char *)this + v40;
      *__int16 v41 = 0;
      *((_WORD *)v41 + 1) = 0;
      v41[4] = 0;
      v41[20] = 0;
      v41[24] = 0;
      *((_DWORD *)v41 + 7) = 0;
      v41[32] = 0;
      *(void *)(v41 + 36) = 0;
      *(void *)(v41 + 41) = 0;
      v41[49] = 1;
      *((_DWORD *)v41 + 13) = 0;
      v41[56] = 0;
      *((_DWORD *)v41 + 15) = 0;
      *((_WORD *)v41 + 32) = 0;
      *((_DWORD *)v41 + 17) = 0;
      v41[72] = 0;
      *(void *)(v41 + 84) = 0;
      *(void *)(v41 + 76) = 0;
      *(void *)(v41 + 90) = 0;
      v40 += 500;
      *(_DWORD *)(v41 + 103) = 0;
      *((_DWORD *)v41 + 25) = 0;
    }
    while (v41 + 500 != v39);
    *(_WORD *)int v39 = 0;
    *((void *)v35 + 947) = 0;
    *(_DWORD *)(v35 + 7583) = 0;
    *(_WORD *)(v35 + 7587) = 1;
    v35[7616] = 0;
    *((_DWORD *)v35 + 1914) = 0;
    *(_OWORD *)(v35 + 7620) = 0uLL;
    *(_OWORD *)(v35 + 7636) = 0uLL;
    v35[7652] = 0;
    *((_WORD *)v35 + 3830) = 0;
    v35[7696] = 0;
    *((_WORD *)v35 + 3849) = 0;
    *float v38 = 0;
    v36 += 9752;
    v35 += 9752;
    *((_WORD *)v38 + 1) = 0;
  }
  while (v37 != v7);
  *unsigned int v7 = 0;
  *((_WORD *)v7 + 1) = 0;
  *(_WORD *)uint64_t v6 = 0;
  *((_WORD *)v6 + 4) = 0;
  v6[16] = 0;
  *((_WORD *)v6 + 9) = 0;
  *((_DWORD *)this + 362591) = 0;
  *((unsigned char *)this + 1450368) = 0;
  char *v5 = 4;
  *(void *)(v5 + 1) = 0;
  *(_DWORD *)(v5 + 11) = 1065353216;
  v5[15] = 0;
  *((_OWORD *)this + 90652) = 0u;
  *((_OWORD *)this + 90653) = 0u;
  *((_OWORD *)this + 90654) = 0u;
  *((_OWORD *)this + 90655) = 0u;
  *((_OWORD *)this + 90656) = 0u;
  *((_OWORD *)this + 90657) = 0u;
  *((_OWORD *)this + 90658) = 0u;
  *((_OWORD *)this + 90659) = 0u;
  *((_OWORD *)this + 90660) = 0u;
  *((_OWORD *)this + 90661) = 0u;
  *((_OWORD *)this + 90662) = 0u;
  *(void *)((char *)this + 1450605) = 0;
  *uint64_t v4 = 0;
  *(_DWORD *)(v4 + 18) = 0;
  v4[24] = 0;
  *(_DWORD *)(v4 + 26) = 0;
  *((_WORD *)v4 + 16) = 0;
  *(void *)((char *)this + 1450916) = 0;
  *(void *)((char *)this + 1450921) = 0;
  *((_WORD *)v4 + 94) = 0;
  *(void *)((char *)this + 1450941) = 0;
  *((void *)this + 181367) = 0;
  v4[236] = 0;
  *((_WORD *)v4 + 119) = 0;
  v4[240] = 0;
  *(void *)((char *)this + 1450986) = 0;
  *((_WORD *)this + 725497) = 0;
  *((_WORD *)v4 + 128) = 0;
  *(_OWORD *)((char *)this + 1450388) = 0u;
  *(_OWORD *)((char *)this + 1450404) = 0u;
  *(_DWORD *)((char *)this + 1450419) = 0;
  *(void *)((char *)this + 1450753) = 0;
  *(void *)((char *)this + 1450748) = 0;
  *(_OWORD *)((char *)this + 1450897) = 0u;
  *(_OWORD *)((char *)this + 1450888) = 0u;
  *(_OWORD *)((char *)this + 1450872) = 0u;
  *(_OWORD *)((char *)this + 1450856) = 0u;
  *(_OWORD *)((char *)this + 1450840) = 0u;
  *(_OWORD *)((char *)this + 1450824) = 0u;
  *(_OWORD *)((char *)this + 1450808) = 0u;
  *(_OWORD *)((char *)this + 1450792) = 0u;
  _WORD *v3 = 0;
  bzero((char *)this + 1451096, 0x1288uLL);
  *(_OWORD *)((char *)this + 1451066) = 0u;
  *((_OWORD *)this + 90691) = 0u;
  *((_OWORD *)this + 90690) = 0u;
  *((_OWORD *)this + 90689) = 0u;
  *((_OWORD *)this + 90688) = 0u;
  *uint64_t v2 = 4;
  *(_DWORD *)(v2 + 11) = 1065353216;
  v2[632] = 0;
  *(_OWORD *)((char *)this + 1455220) = 0u;
  *(_OWORD *)((char *)this + 1455236) = 0u;
  *(_DWORD *)((char *)this + 1455251) = 0;
  *((_OWORD *)this + 90954) = 0u;
  *((_OWORD *)this + 90955) = 0u;
  *((_OWORD *)this + 90956) = 0u;
  *((_OWORD *)this + 90957) = 0u;
  *((_OWORD *)this + 90958) = 0u;
  *((_OWORD *)this + 90959) = 0u;
  *((_OWORD *)this + 90960) = 0u;
  *((_OWORD *)this + 90961) = 0u;
  *((_OWORD *)this + 90962) = 0u;
  *((_OWORD *)this + 90963) = 0u;
  *((_OWORD *)this + 90964) = 0u;
  *(void *)((char *)this + 1455437) = 0;
  *(void *)((char *)this + 1455585) = 0;
  *(_OWORD *)((char *)this + 1455729) = 0u;
  *(void *)((char *)this + 1455580) = 0;
  *(_OWORD *)((char *)this + 1455720) = 0u;
  *(_OWORD *)((char *)this + 1455704) = 0u;
  *(_OWORD *)((char *)this + 1455688) = 0u;
  *(_OWORD *)((char *)this + 1455672) = 0u;
  *(_OWORD *)((char *)this + 1455656) = 0u;
  *(_OWORD *)((char *)this + 1455640) = 0u;
  *(_OWORD *)((char *)this + 1455624) = 0u;
  *(void *)((char *)this + 1455753) = 0;
  *(void *)((char *)this + 1455773) = 0;
  *(void *)((char *)this + 1455748) = 0;
  *((void *)this + 181971) = 0;
  *(void *)((char *)this + 1455818) = 0;
  *((_WORD *)this + 727913) = 0;
  *((_OWORD *)this + 90990) = 0u;
  *((_OWORD *)this + 90991) = 0u;
  *((_OWORD *)this + 90992) = 0u;
  *((_OWORD *)this + 90993) = 0u;
  *((void *)this + 181988) = 0;
  return this;
}

void AUSM::Metadata::PImpl::ParseSceneComponentStaticData(uint64_t a1, unsigned char *a2, __n128 a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    unint64_t v5 = 0;
    float v69 = (void *)(a1 + 48);
    uint64_t v6 = a2 + 84;
    a3.n128_u64[0] = 136316162;
    __n128 v67 = a3;
    a3.n128_u64[0] = 136315906;
    __n128 v66 = a3;
    a3.n128_u64[0] = 136315394;
    __n128 v65 = a3;
    a3.n128_u64[0] = 136315650;
    __n128 v64 = a3;
    do
    {
      unsigned int v7 = &a2[1144 * v5];
      unsigned __int32 v74 = v7[4];
      uint64_t v8 = v74 + 1;
      int v78 = v7[5];
      unsigned __int32 v75 = *((_DWORD *)v7 + 3);
      if (v7[32])
      {
        uint64_t v9 = &a2[1144 * v5];
        unsigned int v12 = v9[33];
        int v11 = v9 + 33;
        unsigned int v10 = v12;
        if (v12 >= 0x20)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          int v13 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            int v62 = v69;
            if (*(char *)(a1 + 71) < 0) {
              int v62 = (void *)*v69;
            }
            *(_DWORD *)std::string buf = v65.n128_u32[0];
            int v82 = v62;
            __int16 v83 = 2080;
            uint64_t v84 = "ParseSceneComponentStaticData";
            _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] Too many parameters for ProprietaryStaticData", buf, 0x16u);
          }

          unsigned int v10 = *v11;
        }
        uint64_t v14 = v10 >= 0x1F ? 31 : v10;
        if (v14)
        {
          char v15 = 0;
          uint64_t v16 = &a2[1144 * v5];
          float v68 = (unsigned __int16 *)(v16 + 50);
          int v72 = v16 + 49;
          unsigned int v73 = v16 + 46;
          int v76 = v16 + 38;
          uint64_t v77 = v16 + 48;
          uint64_t v70 = (unsigned __int16 *)(v16 + 40);
          std::vector<char>::pointer v71 = v16 + 42;
          uint64_t v17 = v6;
          while (2)
          {
            switch(*v17)
            {
              case 0:
              case 1:
              case 2:
              case 6:
              case 7:
              case 8:
                goto LABEL_15;
              case 3:
                unsigned __int32 v18 = *v76;
                switch(*v76)
                {
                  case 0:
                    goto LABEL_15;
                  case 1:
                    unsigned int v19 = *v71;
                    if (*v71)
                    {
                      int v80 = 1;
                      int v20 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 1005, 0, 0, &v80, 4);
                      if (v20)
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        uint64_t v21 = (id)getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                        {
                          int v48 = v69;
                          if (*(char *)(a1 + 71) < 0) {
                            int v48 = (void *)*v69;
                          }
                          *(_DWORD *)std::string buf = v67.n128_u32[0];
                          int v82 = v48;
                          __int16 v83 = 2080;
                          uint64_t v84 = "ParseSceneComponentStaticData";
                          __int16 v85 = 1024;
                          unsigned __int32 v86 = v74;
                          __int16 v87 = 1024;
                          unsigned __int32 v88 = v8;
                          __int16 v89 = 1024;
                          int v90 = v20;
                          _os_log_debug_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the scene reverb on scene component = %u, input = %u, err = %d", buf, 0x28u);
                        }
                      }
                    }
                    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, void, float))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 8, 1, v8, 0, (float)v19))
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      uint64_t v22 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                      {
                        __int16 v41 = v69;
                        if (*(char *)(a1 + 71) < 0) {
                          __int16 v41 = (void *)*v69;
                        }
                        *(_DWORD *)std::string buf = v66.n128_u32[0];
                        int v82 = v41;
                        __int16 v83 = 2080;
                        uint64_t v84 = "ParseSceneComponentStaticData";
                        __int16 v85 = 1024;
                        unsigned __int32 v86 = v74;
                        __int16 v87 = 1024;
                        unsigned __int32 v88 = v8;
                        _os_log_debug_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb blend on sc #%u, input element #%u", buf, 0x22u);
                      }
                    }
                    int v80 = *v70;
                    int v23 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 10, 0, 0, &v80, 4);
                    if (v23)
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      uint64_t v24 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                      {
                        int v42 = v69;
                        if (*(char *)(a1 + 71) < 0) {
                          int v42 = (void *)*v69;
                        }
                        *(_DWORD *)std::string buf = v67.n128_u32[0];
                        int v82 = v42;
                        __int16 v83 = 2080;
                        uint64_t v84 = "ParseSceneComponentStaticData";
                        __int16 v85 = 1024;
                        unsigned __int32 v86 = v74;
                        __int16 v87 = 1024;
                        unsigned __int32 v88 = v8;
                        __int16 v89 = 1024;
                        int v90 = v23;
                        _os_log_debug_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set reverb preset for sc #%u, input element #%u, err = %d", buf, 0x28u);
                      }
                    }
                    goto LABEL_34;
                  case 2:
                  case 3:
LABEL_34:
                    char v15 = 1;
                    break;
                  default:
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v40 = v69;
                      if (*(char *)(a1 + 71) < 0) {
                        uint64_t v40 = (void *)*v69;
                      }
                      *(_DWORD *)std::string buf = v67.n128_u32[0];
                      int v82 = v40;
                      __int16 v83 = 2080;
                      uint64_t v84 = "ParseSceneComponentStaticData";
                      __int16 v85 = 1024;
                      unsigned __int32 v86 = v18;
                      __int16 v87 = 1024;
                      unsigned __int32 v88 = v74;
                      __int16 v89 = 1024;
                      int v90 = v8;
                      _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported reverbProcIndex %u on sc #%u, input element #%u", buf, 0x28u);
                    }
                    goto LABEL_99;
                }
                goto LABEL_15;
              case 4:
                if (!*(unsigned char *)(a1 + 120)) {
                  goto LABEL_39;
                }
                int v25 = *v73;
                if (v25 == 2)
                {
                  int v80 = 1;
                  unsigned __int32 v31 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v80, 4);
                  if (v31)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    int v32 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                    {
                      unsigned int v43 = v69;
                      if (*(char *)(a1 + 71) < 0) {
                        unsigned int v43 = (void *)*v69;
                      }
                      *(_DWORD *)std::string buf = v64.n128_u32[0];
                      int v82 = v43;
                      __int16 v83 = 2080;
                      uint64_t v84 = "ParseSceneComponentStaticData";
                      __int16 v85 = 1024;
                      unsigned __int32 v86 = v31;
                      _os_log_debug_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP reverb: err = %d", buf, 0x1Cu);
                    }
                  }
                  unsigned __int32 v33 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 35, 1, v8, 0, 50.0);
                  if (v33)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_99;
                    }
                    int v45 = v69;
                    if (*(char *)(a1 + 71) < 0) {
                      int v45 = (void *)*v69;
                    }
LABEL_138:
                    *(_DWORD *)std::string buf = v66.n128_u32[0];
                    int v82 = v45;
                    __int16 v83 = 2080;
                    uint64_t v84 = "ParseSceneComponentStaticData";
                    __int16 v85 = 1024;
                    unsigned __int32 v86 = v8;
                    __int16 v87 = 1024;
                    unsigned __int32 v88 = v33;
                    _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 50 on input %u, err = %d", buf, 0x22u);
LABEL_99:
                  }
                }
                else
                {
                  if (v25 != 1)
                  {
                    if (*v73)
                    {
                      unsigned __int32 v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 35, 1, v8, 0, 0.0);
                      if (!v26) {
                        goto LABEL_15;
                      }
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                      {
                        int v39 = v69;
                        if (*(char *)(a1 + 71) < 0) {
                          int v39 = (void *)*v69;
                        }
                        goto LABEL_120;
                      }
                    }
                    else
                    {
LABEL_39:
                      unsigned __int32 v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 35, 1, v8, 0, 0.0);
                      if (!v26) {
                        goto LABEL_15;
                      }
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                      {
                        int v39 = v69;
                        if (*(char *)(a1 + 71) < 0) {
                          int v39 = (void *)*v69;
                        }
LABEL_120:
                        *(_DWORD *)std::string buf = v66.n128_u32[0];
                        int v82 = v39;
                        __int16 v83 = 2080;
                        uint64_t v84 = "ParseSceneComponentStaticData";
                        __int16 v85 = 1024;
                        unsigned __int32 v86 = v8;
                        __int16 v87 = 1024;
                        unsigned __int32 v88 = v26;
                        _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set the post-processing reverb blend to 0 on input %u, err = %d", buf, 0x22u);
                        goto LABEL_99;
                      }
                    }
                    goto LABEL_99;
                  }
                  int v80 = 1;
                  unsigned __int32 v34 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3267, 0, 0, &v80, 4);
                  if (v34)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                    {
                      vDSP_Length v44 = v69;
                      if (*(char *)(a1 + 71) < 0) {
                        vDSP_Length v44 = (void *)*v69;
                      }
                      *(_DWORD *)std::string buf = v64.n128_u32[0];
                      int v82 = v44;
                      __int16 v83 = 2080;
                      uint64_t v84 = "ParseSceneComponentStaticData";
                      __int16 v85 = 1024;
                      unsigned __int32 v86 = v34;
                      _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not enable the PP ERs: err = %d", buf, 0x1Cu);
                    }
                    goto LABEL_99;
                  }
                  char v79 = 0;
                  unsigned __int32 v37 = AUSpatialMixerV2::SetAPACProperty(*(AUSpatialMixerV2 **)(a1 + 40), 3262, 0, 0, &v79, 1);
                  if (v37)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    float v38 = (id)getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                    {
                      __n128 v50 = v69;
                      if (*(char *)(a1 + 71) < 0) {
                        __n128 v50 = (void *)*v69;
                      }
                      *(_DWORD *)std::string buf = v64.n128_u32[0];
                      int v82 = v50;
                      __int16 v83 = 2080;
                      uint64_t v84 = "ParseSceneComponentStaticData";
                      __int16 v85 = 1024;
                      unsigned __int32 v86 = v37;
                      _os_log_debug_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not disable the PP late reverb: err = %d", buf, 0x1Cu);
                    }
                  }
                  unsigned __int32 v33 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, float))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 35, 1, v8, 0, 50.0);
                  if (v33)
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_99;
                    }
                    int v45 = v69;
                    if (*(char *)(a1 + 71) < 0) {
                      int v45 = (void *)*v69;
                    }
                    goto LABEL_138;
                  }
                }
LABEL_15:
                ++v17;
                if (--v14) {
                  continue;
                }
                if ((v15 & 1) == 0) {
                  goto LABEL_140;
                }
                goto LABEL_145;
              case 5:
                if (*v77) {
                  goto LABEL_15;
                }
                int v28 = *v72;
                if (!*v72 || v28 == 2) {
                  goto LABEL_15;
                }
                if (v28 != 1)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  uint64_t v30 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                  {
                    int v46 = v69;
                    if (*(char *)(a1 + 71) < 0) {
                      int v46 = (void *)*v69;
                    }
                    unsigned __int32 v47 = *v72;
                    *(_DWORD *)std::string buf = v67.n128_u32[0];
                    int v82 = v46;
                    __int16 v83 = 2080;
                    uint64_t v84 = "ParseSceneComponentStaticData";
                    __int16 v85 = 1024;
                    unsigned __int32 v86 = v47;
                    __int16 v87 = 1024;
                    unsigned __int32 v88 = v74;
                    __int16 v89 = 1024;
                    int v90 = v8;
                    _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "[%s|%s] Unsupported AuSMProcIndex %u on sc #%u, input element #%u", buf, 0x28u);
                  }
LABEL_58:

                  goto LABEL_15;
                }
                int v80 = *v68;
                if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40), 3269, 1, v8, &v80, 4))goto LABEL_15; {
                if (getAUSMV2Log(void)::onceToken != -1)
                }
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                uint64_t v27 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                {
                  int v49 = v69;
                  if (*(char *)(a1 + 71) < 0) {
                    int v49 = (void *)*v69;
                  }
                  *(_DWORD *)std::string buf = v66.n128_u32[0];
                  int v82 = v49;
                  __int16 v83 = 2080;
                  uint64_t v84 = "ParseSceneComponentStaticData";
                  __int16 v85 = 1024;
                  unsigned __int32 v86 = v74;
                  __int16 v87 = 1024;
                  unsigned __int32 v88 = v8;
                  _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set directivity index on sc #%u, input element #%u", buf, 0x22u);
                }
                goto LABEL_99;
              default:
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                uint64_t v30 = (id)getAUSMV2Log(void)::gLog;
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v35 = v69;
                  if (*(char *)(a1 + 71) < 0) {
                    uint64_t v35 = (void *)*v69;
                  }
                  unsigned __int32 v36 = *v17;
                  *(_DWORD *)std::string buf = v67.n128_u32[0];
                  int v82 = v35;
                  __int16 v83 = 2080;
                  uint64_t v84 = "ParseSceneComponentStaticData";
                  __int16 v85 = 1024;
                  unsigned __int32 v86 = v36;
                  __int16 v87 = 1024;
                  unsigned __int32 v88 = v74;
                  __int16 v89 = 1024;
                  int v90 = v8;
                  _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "[%s|%s] Unknown proprietaryStaticData param index %u on sc #%u, input element #%u", buf, 0x28u);
                }
                goto LABEL_58;
            }
          }
        }
      }
LABEL_140:
      int v51 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, double))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40), 8, 1, v8, 0, 0.0);
      if (v51)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v52 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          int v60 = v69;
          if (*(char *)(a1 + 71) < 0) {
            int v60 = (void *)*v69;
          }
          *(_DWORD *)std::string buf = v67.n128_u32[0];
          int v82 = v60;
          __int16 v83 = 2080;
          uint64_t v84 = "ParseSceneComponentStaticData";
          __int16 v85 = 1024;
          unsigned __int32 v86 = v74;
          __int16 v87 = 1024;
          unsigned __int32 v88 = v8;
          __int16 v89 = 1024;
          int v90 = v51;
          _os_log_debug_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not clear reverb blend on sc #%u, input element #%u, err = %d", buf, 0x28u);
        }
      }
LABEL_145:
      if (a2[1144 * v5 + 116])
      {
        int v80 = a2[1144 * v5 + 117];
        if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)(a1 + 40)
                                                                                                + 96))(*(void *)(a1 + 40), 3242, 1, v8, &v80, 4))goto LABEL_156;
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        BOOL v53 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          __int16 v61 = v69;
          if (*(char *)(a1 + 71) < 0) {
            __int16 v61 = (void *)*v69;
          }
          *(_DWORD *)std::string buf = v66.n128_u32[0];
          int v82 = v61;
          __int16 v83 = 2080;
          uint64_t v84 = "ParseSceneComponentStaticData";
          __int16 v85 = 1024;
          unsigned __int32 v86 = v74;
          __int16 v87 = 1024;
          unsigned __int32 v88 = v8;
          _os_log_debug_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not set binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
        }
      }
      else
      {
        int v80 = 4;
        if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)(a1 + 40)
                                                                                                + 96))(*(void *)(a1 + 40), 3242, 1, v8, &v80, 4))goto LABEL_156;
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        BOOL v53 = (id)getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          int v63 = v69;
          if (*(char *)(a1 + 71) < 0) {
            int v63 = (void *)*v69;
          }
          *(_DWORD *)std::string buf = v66.n128_u32[0];
          int v82 = v63;
          __int16 v83 = 2080;
          uint64_t v84 = "ParseSceneComponentStaticData";
          __int16 v85 = 1024;
          unsigned __int32 v86 = v74;
          __int16 v87 = 1024;
          unsigned __int32 v88 = v8;
          _os_log_debug_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not clear binaural compatibility mode on sc #%u, input element #%u", buf, 0x22u);
        }
      }

LABEL_156:
      if (!v78)
      {
        LOBYTE(v80) = 1;
        uint64_t v54 = (*(uint64_t (**)(void, uint64_t, uint64_t, void, int *))(**(void **)(a1 + 40) + 528))(*(void *)(a1 + 40), 1, v8, 0, &v80);
        __n128 v55 = MEMORY[0x1F4188790](v54);
        int v57 = (__n128 *)((char *)&v64 - ((v56 + 15) & 0x1FFFFFFF0));
        (*(void (**)(__n128))(**(void **)(a1 + 40) + 528))(v55);
        if (v57->n128_u32[0] != v75)
        {
          v57->n128_u32[0] = v75;
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v58 = (id)getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            __int16 v59 = v69;
            if (*(char *)(a1 + 71) < 0) {
              __int16 v59 = (void *)*v69;
            }
            *(_DWORD *)std::string buf = v67.n128_u32[0];
            int v82 = v59;
            __int16 v83 = 2080;
            uint64_t v84 = "ParseSceneComponentStaticData";
            __int16 v85 = 1024;
            unsigned __int32 v86 = v74;
            __int16 v87 = 1024;
            unsigned __int32 v88 = v75;
            __int16 v89 = 1024;
            int v90 = v8;
            _os_log_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_INFO, "[%s|%s] APAC metadata parsing: changing aclt for sc #%u to %u, input element #%u", buf, 0x28u);
          }

          (*(void (**)(void, uint64_t, uint64_t, __n128 *))(**(void **)(a1 + 40) + 536))(*(void *)(a1 + 40), 1, v8, v57);
        }
      }
      ++v5;
      v6 += 1144;
    }
    while (v5 < *a2);
  }
}

void AUSM::Metadata::PImpl::ParseDynamicObjectMetadata(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  __int16 v87 = a2;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v5 = *v87;
  uint64_t v6 = a1 + 8;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 8 && *(_DWORD *)(v6 + 28) <= v5) {
    uint64_t v10 = *(unsigned int *)(v6 + 32);
  }
  else {
LABEL_12:
  }
    uint64_t v10 = (*(_DWORD *)(a1 + 88) + 1);
  LODWORD(v11) = v87[1];
  unsigned int v12 = v87 + 4;
  uint64_t v13 = *(void *)(a1 + 80);
  int v14 = llround(**(double **)(a1 + 72));
  if (!v87[1]) {
    unsigned int v12 = 0;
  }
  unsigned __int32 v86 = v12;
  int v85 = v14 - *(_DWORD *)(a1 + 24) + llround(*(double *)(v13 + 12));
  if (AUSM::Metadata::mTraceLevel >= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    char v15 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      int v17 = llround(**(double **)(a1 + 72));
      int v18 = llround(*(double *)(*(void *)(a1 + 80) + 12));
      int v19 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)std::string buf = 136316418;
      int v93 = v16;
      __int16 v94 = 2080;
      uint64_t v95 = "ParseDynamicObjectMetadata";
      __int16 v96 = 1024;
      *(_DWORD *)unint64_t v97 = v85;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = v17;
      *(_WORD *)int v98 = 1024;
      *(_DWORD *)&v98[2] = v18;
      LOWORD(v99[0]) = 1024;
      *(_DWORD *)((char *)v99 + 2) = v19;
      _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_INFO, "[%s|%s] eventOffsetInAudioBuffer (%d) = mCurrentMDHeader->frameStartTime (%d) + mCurrentMDEvent->eventStartTime (%d) - mFirstAudioBufferSampleTime (%d)", buf, 0x2Eu);
    }

    LODWORD(v11) = v87[1];
  }
  if (v11)
  {
    unint64_t v20 = 0;
    uint64_t v84 = (void *)(a1 + 48);
    a3.n128_u64[0] = 136315906;
    __n128 v83 = a3;
    a3.n128_u64[0] = 136316162;
    __n128 v82 = a3;
    do
    {
      uint64_t v21 = (float *)v86;
      unint64_t v22 = v20 + 1;
      if (!v20 || v22 == v11)
      {
        int v23 = 0;
        if (v11 >= 2 && v22 == v11) {
          int v23 = *(_DWORD *)(*(void *)(a1 + 80) + 20);
        }
      }
      else
      {
        int v23 = *(unsigned __int16 *)&v87[500 * v20 + 6];
      }
      uint64_t v24 = &v87[500 * v20 + 4];
      int v25 = *v24;
      unsigned __int32 v86 = v24;
      if (v25) {
        unsigned __int32 v26 = (float *)v24;
      }
      else {
        unsigned __int32 v26 = v21;
      }
      float v27 = v26[2];
      if (*((unsigned char *)v26 + 4))
      {
        float v28 = v26[3];
        float v29 = v26[4];
        float v30 = atan2f(v26[2], v28) * 57.296;
        float v31 = hypotf(v27, v28);
        float v32 = atan2f(v29, v31) * 57.296;
        float v33 = hypotf(v31, v29);
      }
      else
      {
        float v30 = -v27;
        float v32 = v26[3];
        float v33 = v26[4];
      }
      unsigned int v34 = v23 + v85;
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0, v10, v23 + v85, v30, 0);
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 1u, v10, v34, v32, 0);
      AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 2u, v10, v34, v33, 0);
      if (*((unsigned char *)v26 + 20))
      {
        if (*((unsigned char *)v26 + 24)) {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x22u, v10, v34, v26[7], 0);
        }
        if (*((unsigned char *)v26 + 32))
        {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x19u, v10, v34, v26[9], 0);
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Au, v10, v34, v26[10], 0);
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Bu, v10, v34, v26[11], 0);
        }
        if (*((unsigned char *)v26 + 48))
        {
          float v35 = v26[13];
          if (!*((unsigned char *)v26 + 49))
          {
            if (v35 < 1.1755e-38) {
              float v35 = 1.1755e-38;
            }
            float v35 = log10f(v35) * 20.0;
          }
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 3u, v10, v34, v35, 0);
        }
        if (*((unsigned char *)v26 + 56)) {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x21u, v10, v34, v26[15], 0);
        }
        if (*((unsigned char *)v26 + 64)) {
          float v36 = 1.0;
        }
        else {
          float v36 = 0.0;
        }
        AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x20u, v10, v34, v36, 0);
        if (*((unsigned char *)v26 + 72))
        {
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Cu, v10, v34, v26[19], 0);
          if (*((unsigned char *)v26 + 4)) {
            unsigned int v37 = 30;
          }
          else {
            unsigned int v37 = 29;
          }
          AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, v37, v10, v34, v26[22], 0);
        }
        if (*((unsigned char *)v26 + 95)) {
          float v38 = 1.0;
        }
        else {
          float v38 = 0.0;
        }
        unint64_t v39 = AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x1Fu, v10, v34, v38, 0);
        uint64_t v40 = *((void *)v26 + 12);
        if ((_BYTE)v40)
        {
          if ((v40 & 0xFF00) != 0) {
            float v41 = 1.0;
          }
          else {
            float v41 = 0.0;
          }
          unint64_t v39 = AUSM::Metadata::PImpl::setParameter((AUSM::Metadata::PImpl *)a1, 0x27u, v10, v34, v41, 0);
        }
        if (*((unsigned char *)v26 + 104))
        {
          if (!*((unsigned char *)v26 + 105))
          {
            __int16 v89 = 0;
            int v90 = 0;
            unint64_t v91 = 0;
            if (*((unsigned char *)v26 + 106))
            {
              int v42 = 0;
              unsigned int v43 = 0;
              uint64_t v44 = 0;
              while (1)
              {
                if (*((unsigned char *)v26 + v44 + 107))
                {
                  AUSM::ExclusionZone::getPreset(*((unsigned __int8 *)v26 + v44 + 122), (void **)&v89);
                  unsigned int v43 = v90;
                  goto LABEL_108;
                }
                int v45 = (unsigned __int8 *)&v26[6 * v44 + 35];
                if (*((unsigned char *)v26 + 4))
                {
                  int v46 = *(_DWORD *)v45;
                  float v47 = v26[6 * v44 + 36];
                  float v49 = v26[6 * v44 + 37];
                  float v48 = v26[6 * v44 + 38];
                  float v51 = v26[6 * v44 + 39];
                  float v50 = v26[6 * v44 + 40];
                  if ((unint64_t)v43 >= v91)
                  {
                    unint64_t v56 = 0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 2) + 1;
                    if (v56 > 0x924924924924924) {
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    }
                    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v42) >> 2) > v56) {
                      unint64_t v56 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v42) >> 2);
                    }
                    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v91 - (void)v42) >> 2)) >= 0x492492492492492) {
                      unint64_t v39 = 0x924924924924924;
                    }
                    else {
                      unint64_t v39 = v56;
                    }
                    if (v39) {
                      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v39);
                    }
                    else {
                      uint64_t v57 = 0;
                    }
                    __int16 v59 = (_DWORD *)(v39 + 4 * ((v43 - v42) >> 2));
                    _DWORD *v59 = 1;
                    v59[1] = v46;
                    *((float *)v59 + 2) = v47;
                    *((float *)v59 + 3) = v49;
                    *((float *)v59 + 4) = v48;
                    *((float *)v59 + 5) = v51;
                    *((float *)v59 + 6) = v50;
                    if (v43 == v42)
                    {
                      int v62 = (char *)(v39 + 4 * ((v43 - v42) >> 2));
                    }
                    else
                    {
                      unint64_t v60 = v39 + 4 * ((v43 - v42) >> 2);
                      do
                      {
                        long long v61 = *(_OWORD *)(v43 - 28);
                        int v62 = (char *)(v60 - 28);
                        *(_OWORD *)(v60 - 16) = *((_OWORD *)v43 - 1);
                        *(_OWORD *)(v60 - 28) = v61;
                        v43 -= 28;
                        v60 -= 28;
                      }
                      while (v43 != v42);
                    }
LABEL_105:
                    unsigned int v43 = (char *)(v59 + 7);
                    __int16 v89 = v62;
                    unint64_t v91 = v39 + 28 * v57;
                    if (v42) {
                      operator delete(v42);
                    }
                    goto LABEL_107;
                  }
                  *(_DWORD *)unsigned int v43 = 1;
                  *((_DWORD *)v43 + 1) = v46;
                  *((float *)v43 + 2) = v47;
                  *((float *)v43 + 3) = v49;
                  *((float *)v43 + 4) = v48;
                  *((float *)v43 + 5) = v51;
                  *((float *)v43 + 6) = v50;
                  v43 += 28;
                }
                else
                {
                  float v53 = v26[6 * v44 + 37];
                  float v52 = v26[6 * v44 + 38];
                  int v55 = *(_DWORD *)v45;
                  float v54 = v26[6 * v44 + 36];
                  if ((unint64_t)v43 >= v91)
                  {
                    unint64_t v58 = 0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 2) + 1;
                    if (v58 > 0x924924924924924) {
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    }
                    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v42) >> 2) > v58) {
                      unint64_t v58 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v42) >> 2);
                    }
                    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v91 - (void)v42) >> 2)) >= 0x492492492492492) {
                      unint64_t v39 = 0x924924924924924;
                    }
                    else {
                      unint64_t v39 = v58;
                    }
                    if (v39) {
                      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ExclusionZone>>(v39);
                    }
                    else {
                      uint64_t v57 = 0;
                    }
                    __int16 v59 = (_DWORD *)(v39 + 4 * ((v43 - v42) >> 2));
                    _DWORD *v59 = 0;
                    *((float *)v59 + 1) = v53;
                    *((float *)v59 + 2) = v52;
                    v59[3] = v55;
                    *((float *)v59 + 4) = v54;
                    if (v43 == v42)
                    {
                      int v62 = (char *)(v39 + 4 * ((v43 - v42) >> 2));
                    }
                    else
                    {
                      unint64_t v63 = v39 + 4 * ((v43 - v42) >> 2);
                      do
                      {
                        long long v64 = *(_OWORD *)(v43 - 28);
                        int v62 = (char *)(v63 - 28);
                        *(_OWORD *)(v63 - 16) = *((_OWORD *)v43 - 1);
                        *(_OWORD *)(v63 - 28) = v64;
                        v43 -= 28;
                        v63 -= 28;
                      }
                      while (v43 != v42);
                    }
                    goto LABEL_105;
                  }
                  *(_DWORD *)unsigned int v43 = 0;
                  *((float *)v43 + 1) = v53;
                  *((float *)v43 + 2) = v52;
                  *((_DWORD *)v43 + 3) = v55;
                  *((float *)v43 + 4) = v54;
                  v43 += 28;
                }
LABEL_107:
                int v90 = v43;
LABEL_108:
                int v42 = v89;
                if (v89 == v43) {
                  goto LABEL_117;
                }
                int v65 = 0;
                __n128 v66 = v89;
                do
                {
                  int v68 = *(_DWORD *)v66;
                  v66 += 28;
                  int v67 = v68;
                  int v69 = v65 + 5;
                  if (v68) {
                    int v69 = v65;
                  }
                  if (v67 == 1) {
                    v65 += 7;
                  }
                  else {
                    int v65 = v69;
                  }
                }
                while (v66 != v43);
                if (!v65) {
LABEL_117:
                }
                  int v65 = 0;
                MEMORY[0x1F4188790](v39);
                std::vector<char>::pointer v71 = (char *)&v82 - v70;
                AUSM::ExclusionZone::arrayFromZones(v42, v43, (uint64_t)&v82 - v70);
                int v72 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, void))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40), 3226, 1, v10, v71, (4 * v65));
                if (v72)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  unsigned int v73 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                  {
                    int v76 = v84;
                    if (*(char *)(a1 + 71) < 0) {
                      int v76 = (void *)*v84;
                    }
                    *(_DWORD *)std::string buf = v83.n128_u32[0];
                    int v93 = v76;
                    __int16 v94 = 2080;
                    uint64_t v95 = "ParseDynamicObjectMetadata";
                    __int16 v96 = 1024;
                    *(_DWORD *)unint64_t v97 = v10;
                    *(_WORD *)&v97[4] = 1024;
                    *(_DWORD *)&v97[6] = v72;
                    _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set exclusion zone array on input %u, err = %d", buf, 0x22u);
                  }
                }
                BOOL v88 = v72 == 0;
                unint64_t v39 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, BOOL *, uint64_t))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40), 3224, 1, v10, &v88, 4);
                int v74 = v39;
                if (v39)
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  unsigned __int32 v75 = (id)getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v77 = v84;
                    if (*(char *)(a1 + 71) < 0) {
                      uint64_t v77 = (void *)*v84;
                    }
                    int v78 = "enable";
                    if (!v88) {
                      int v78 = "disable";
                    }
                    *(_DWORD *)std::string buf = v82.n128_u32[0];
                    int v93 = v77;
                    __int16 v94 = 2080;
                    uint64_t v95 = "ParseDynamicObjectMetadata";
                    __int16 v96 = 2080;
                    *(void *)unint64_t v97 = v78;
                    *(_WORD *)&v97[8] = 1024;
                    *(_DWORD *)int v98 = v10;
                    *(_WORD *)&v98[4] = 1024;
                    v99[0] = v74;
                    _os_log_error_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_ERROR, "[%s|%s] Could not %s exclusion zone on input %u, err = %d", buf, 0x2Cu);
                  }
                }
                if (++v44 >= (unint64_t)*((unsigned __int8 *)v26 + 106))
                {
                  if (v42) {
                    operator delete(v42);
                  }
                  break;
                }
              }
            }
          }
        }
        else
        {
          LODWORD(v89) = 0;
          int v79 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char **, uint64_t))(**(void **)(a1 + 40)
                                                                                               + 96))(*(void *)(a1 + 40), 3224, 1, v10, &v89, 4);
          if (v79)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v80 = (id)getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              int v81 = v84;
              if (*(char *)(a1 + 71) < 0) {
                int v81 = (void *)*v84;
              }
              *(_DWORD *)std::string buf = v83.n128_u32[0];
              int v93 = v81;
              __int16 v94 = 2080;
              uint64_t v95 = "ParseDynamicObjectMetadata";
              __int16 v96 = 1024;
              *(_DWORD *)unint64_t v97 = v10;
              *(_WORD *)&v97[4] = 1024;
              *(_DWORD *)&v97[6] = v79;
              _os_log_error_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_ERROR, "[%s|%s] Could not disable exclusion zone for input %u, err = %d", buf, 0x22u);
            }
          }
        }
      }
      unint64_t v11 = v87[1];
      unint64_t v20 = v22;
    }
    while (v22 < v11);
  }
}

void sub_1BB690394(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    *(void *)(v2 - 224) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AUVirtualBass::newDspLibAlgorithm(AUVirtualBass *this)
{
}

void sub_1BB69040C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F1C40A90C03B4);
  _Unwind_Resume(a1);
}

uint64_t AUVirtualBass::Version(AUVirtualBass *this)
{
  return 66818;
}

double AUVirtualBass::GetTailTime(AUVirtualBass *this)
{
  return 0.025;
}

void AUVirtualBass::~AUVirtualBass(AUVirtualBass *this)
{
  AUDspLib::~AUDspLib(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUVariableEQV2::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUVariableEQV2::ShouldBypassEffect(AUVariableEQV2 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUVariableEQV2::GetScopeExtended(AUVariableEQV2 *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 624;
  }
  else {
    return 0;
  }
}

uint64_t AUVariableEQV2::SupportedNumChannels(AUVariableEQV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUVariableEQV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUVariableEQV2::StreamFormatWritable(AUVariableEQV2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUVariableEQV2::SupportsTail(AUVariableEQV2 *this)
{
  return 1;
}

double AUVariableEQV2::GetTailTime(AUVariableEQV2 *this)
{
  return 0.0;
}

double AUVariableEQV2::GetLatency(AUVariableEQV2 *this)
{
  return 0.0;
}

uint64_t AUVariableEQV2::GetParameterValueStrings(AUVariableEQV2 *this, int a2, unsigned int a3, const __CFArray **a4)
{
  v7[11] = *(const void **)MEMORY[0x1E4F143B8];
  uint64_t result = 4294956418;
  if (a2 == 4 && a3 >= 0x3E8 && a3 % 0x3E8 <= 7 && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      v7[0] = @"Parametric";
      v7[1] = @"Butterworth Low Pass";
      v7[2] = @"Butterworth High Pass";
      v7[3] = @"Resonant Low Pass";
      v7[4] = @"Resonant High Pass";
      v7[5] = @"Band Pass";
      v7[6] = @"Band Stop";
      v7[7] = @"Low Shelf";
      v7[8] = @"High Shelf";
      v7[9] = @"Resonant Low Shelf";
      v7[10] = @"Resonant High Shelf";
      CFArrayRef v6 = CFArrayCreate(0, v7, 11, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUVariableEQV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v4 = (ausdk::AUScope *)(this + 4);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 5u);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v4, 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 7u);
  uint64_t v9 = ausdk::AUBase::RestoreState(this, a2);
  if (!v9)
  {
    ++*((_DWORD *)this + 134);
    ++*((_DWORD *)this + 136);
    (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, void, float))*this + 19))(this, 5, 0, 0, 0, Parameter);
    (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, void, float))*this + 19))(this, 7, 0, 0, 0, v8);
  }
  return v9;
}

UInt8 *AUVariableEQV2::SaveExtendedScopes(AUVariableEQV2 *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUVariableEQV2::GetParameterInfo(AUVariableEQV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 1207959552;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    if (!a3)
    {
      buffer->cfNameString = @"global gain";
      CFStringGetCString(@"global gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v10 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v11 = 0x41C00000C2C00000;
LABEL_27:
      *(void *)&buffer->minCFNumberRef Value = v11;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v10;
      return result;
    }
    if (a3 >= 0x3E8)
    {
      unsigned int v9 = a3 % 0x3E8;
      if (a3 % 0x3E8 > 7) {
        return 4294956418;
      }
      a3 = 1000 * (a3 / 0x3E8);
    }
    else
    {
      unsigned int v9 = 0;
    }
    UInt32 v12 = v9 + 1;
    uint64_t result = 4294956418;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        buffer->cfNameString = @"bypass";
        CFStringGetCString(@"bypass", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->clumpID = v12;
        AudioUnitParameterOptions flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
        AudioUnitParameterValue v14 = 1.0;
LABEL_33:
        AudioUnitParameterOptions v21 = flags | 0xC0100000;
        buffer->defaultCFNumberRef Value = v14;
        goto LABEL_34;
      }
      if (a3 != 2000) {
        return result;
      }
      buffer->cfNameString = @"type";
      CFStringGetCString(@"type", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = v12;
      AudioUnitParameterOptions v15 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v16 = 0x4120000000000000;
    }
    else
    {
      if (a3 == 3000)
      {
        buffer->cfNameString = @"frequency";
        CFStringGetCString(@"frequency", buffer->name, 52, 0x8000100u);
        buffer->clumpID = v12;
        buffer->flags |= 0x100000u;
        *(void *)&buffer->unit = 0x4220000000000008;
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0);
        uint64_t result = 0;
        AudioUnitParameterValue v20 = *(double *)(Element + 80) * 0.49000001;
        buffer->maxCFNumberRef Value = v20;
        AudioUnitParameterValue v17 = 1000.0;
        AudioUnitParameterOptions v18 = buffer->flags | 0xC0000000;
LABEL_29:
        buffer->defaultCFNumberRef Value = v17;
        buffer->AudioUnitParameterOptions flags = v18;
        return result;
      }
      if (a3 != 4000)
      {
        if (a3 != 5000) {
          return result;
        }
        buffer->cfNameString = @"bandwidth";
        CFStringGetCString(@"bandwidth", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->clumpID = v12;
        AudioUnitParameterOptions flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Octaves;
        *(void *)&buffer->minCFNumberRef Value = 0x40A000003D4CCCCDLL;
        AudioUnitParameterValue v14 = 0.5;
        goto LABEL_33;
      }
      buffer->cfNameString = @"gain";
      CFStringGetCString(@"gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = v12;
      AudioUnitParameterOptions v15 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v16 = 0x41C00000C2C00000;
    }
    *(void *)&buffer->minCFNumberRef Value = v16;
    AudioUnitParameterOptions v21 = v15 | 0xC0100000;
    buffer->defaultCFNumberRef Value = 0.0;
LABEL_34:
    buffer->AudioUnitParameterOptions flags = v21;
    return result;
  }
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 1u:
      buffer->cfNameString = @"Max Gain for EQ1";
      CFStringGetCString(@"Max Gain for EQ1", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.2;
      break;
    case 2u:
      buffer->cfNameString = @"Max Gain for EQ2";
      CFStringGetCString(@"Max Gain for EQ2", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.5;
      break;
    case 3u:
      buffer->cfNameString = @"Max Gain for EQ3";
      CFStringGetCString(@"Max Gain for EQ3", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.8;
      break;
    case 4u:
      buffer->cfNameString = @"Max Gain for EQ4";
      CFStringGetCString(@"Max Gain for EQ4", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v6 = buffer->flags | 0x80000000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.9;
      break;
    case 5u:
      buffer->cfNameString = @"Current Gain";
      CFStringGetCString(@"Current Gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v6 = buffer->flags | 0x8000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 1.0;
      break;
    case 6u:
      buffer->cfNameString = @"Noise SPL";
      CFStringGetCString(@"Noise SPL", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v17 = 40.0;
      AudioUnitParameterOptions v18 = buffer->flags | 0x40008000;
      goto LABEL_29;
    case 7u:
      buffer->cfNameString = @"PreGain (dB)";
      CFStringGetCString(@"PreGain (dB)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      AudioUnitParameterOptions v10 = buffer->flags | 0x8000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v11 = 0x41400000C2C00000;
      goto LABEL_27;
    default:
      return 4294956418;
  }
  buffer->defaultCFNumberRef Value = v7;
  buffer->AudioUnitParameterOptions flags = v6;
  return result;
}

uint64_t AUVariableEQV2::GetParameterList(AUVariableEQV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    if (a3) {
      *a3 = 0;
    }
    unsigned int v6 = 0;
    AudioUnitParameterValue v7 = a3 + 5;
    do
    {
      if (a3)
      {
        *((int32x4_t *)v7 - 1) = vaddq_s32(vdupq_n_s32(v6), (int32x4_t)xmmword_1BB87BB30);
        *AudioUnitParameterValue v7 = v6 + 5000;
      }
      ++v6;
      v7 += 5;
    }
    while (v6 != 8);
    unsigned int v4 = 41;
    goto LABEL_17;
  }
  if (!a2)
  {
    unsigned int v4 = 0;
    for (unsigned int i = 1; i != 8; ++i)
    {
      if (i != 6)
      {
        if (a3) {
          a3[v4] = i;
        }
        ++v4;
      }
    }
LABEL_17:
    uint64_t result = 0;
    *a4 = v4;
    return result;
  }
  return 4294956430;
}

uint64_t AUVariableEQV2::Render(AUVariableEQV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v15 = 0;
  float v8 = (AUVariableEQV2 *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v13 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0);
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    return (*(uint64_t (**)(AUVariableEQV2 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUVariableEQV2::ProcessBufferLists(AUVariableEQV2 *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  int v9 = *((_DWORD *)this + 134);
  if (v9 != *((_DWORD *)this + 135) && *((unsigned char *)this + 573))
  {
    AUVariableEQV2::UpdateVarEQState(this);
    *((_DWORD *)this + 135) = v9;
  }
  int v10 = *((_DWORD *)this + 136);
  if (v10 != *((_DWORD *)this + 137))
  {
    AUVariableEQV2::UpdateVolumeState(this);
    *((_DWORD *)this + 137) = v10;
  }
  if (*((unsigned char *)this + 575)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = a3->mNumberBuffers == 0;
  }
  if (!v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 16;
    while (1)
    {
      float __C = 0.0;
      vDSP_svemg(*(const float **)((char *)&a3->mNumberBuffers + v13), 1, &__C, __N);
      if (__C > 0.0) {
        break;
      }
      ++v12;
      v13 += 16;
      if (v12 >= a3->mNumberBuffers) {
        goto LABEL_15;
      }
    }
    *((unsigned char *)this + 575) = 1;
  }
LABEL_15:
  UInt32 mDataByteSize = a3->mBuffers[0].mDataByteSize;
  if (mDataByteSize != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0) + 104)
                      * __N)
    *((unsigned char *)this + 672) = 1;
  if (((*(uint64_t (**)(AUVariableEQV2 *))(*(void *)this + 576))(this) & 1) == 0)
  {
    float v15 = *((float *)this + 142);
    if (v15 == 0.0)
    {
      if (*((float *)this + 140) != 1.0 && a3->mNumberBuffers)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 16;
        do
        {
          vDSP_vsmul(*(const float **)((char *)&a3->mNumberBuffers + v24), 1, (const float *)this + 140, *(float **)((char *)&a3->mNumberBuffers + v24), 1, __N);
          ++v23;
          v24 += 16;
        }
        while (v23 < a3->mNumberBuffers);
      }
    }
    else if (__N)
    {
      uint64_t v16 = 0;
      uint64_t mNumberBuffers = a3->mNumberBuffers;
      do
      {
        p_mData = &a3->mBuffers[0].mData;
        uint64_t v19 = mNumberBuffers;
        if (mNumberBuffers)
        {
          do
          {
            AudioUnitParameterValue v20 = (float *)*p_mData;
            p_mData += 2;
            v20[v16] = *((float *)this + 140) * v20[v16];
            --v19;
          }
          while (v19);
          float v15 = *((float *)this + 142);
        }
        float v21 = v15 + *((float *)this + 140);
        *((float *)this + 140) = v21;
        if (v15 < 0.0 && (float v22 = *((float *)this + 141), v21 <= v22)
          || v15 > 0.0 && (float v22 = *((float *)this + 141), v21 >= v22))
        {
          *((_DWORD *)this + 142) = 0;
          *((float *)this + 140) = v22;
          float v15 = 0.0;
        }
        ++v16;
      }
      while (v16 != __N);
    }
  }
  int v25 = (ausdk::AUBufferList *)*((void *)this + 76);
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  float v27 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v25, Element + 2, __N);
  uint64_t v28 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  CopyBufferList(&a3->mNumberBuffers, v27, (*(_DWORD *)(v28 + 104) * __N));
  if (((*(uint64_t (**)(AUVariableEQV2 *))(*(void *)this + 576))(this) & 1) != 0
    || (float v29 = (_DWORD *)*((void *)this + 74), !v29[4]))
  {
    uint64_t v30 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
    CopyBufferList(&a3->mNumberBuffers, a4, (*(_DWORD *)(v30 + 104) * __N));
  }
  else
  {
    (*(void (**)(_DWORD *, vDSP_Length, const AudioBufferList *, AudioBufferList *))(*(void *)v29 + 32))(v29, __N, a3, a4);
  }
  if (*((unsigned char *)this + 572))
  {
    if (*((unsigned char *)this + 573))
    {
      uint64_t v31 = 576;
      if (*((void *)this + 74) == *((void *)this + 72)) {
        uint64_t v31 = 584;
      }
      *((void *)this + 75) = *(void *)((char *)this + v31);
      if (*((unsigned char *)this + 574))
      {
        uint64_t BufferList = ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
        (*(void (**)(void, void, uint64_t, uint64_t))(**((void **)this + 75) + 32))(*((void *)this + 75), *((unsigned int *)this + 133), BufferList, BufferList);
      }
      *((unsigned char *)this + 573) = 0;
    }
    float v33 = (ausdk::AUBufferList *)*((void *)this + 77);
    unsigned int v34 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
    ausdk::AUBufferList::PrepareBuffer(v33, v34 + 2, __N);
    if (((*(uint64_t (**)(AUVariableEQV2 *))(*(void *)this + 576))(this) & 1) != 0
      || (float v35 = (_DWORD *)*((void *)this + 75), !v35[4]))
    {
      unsigned int v37 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
      uint64_t v38 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
      CopyBufferList(&v27->mNumberBuffers, v37, (*(_DWORD *)(v38 + 104) * __N));
    }
    else
    {
      uint64_t v36 = ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
      (*(void (**)(_DWORD *, vDSP_Length, AudioBufferList *, uint64_t))(*(void *)v35 + 32))(v35, __N, v27, v36);
    }
    unint64_t v39 = (unsigned int *)ausdk::AUBufferList::GetBufferList(*((ausdk::AUBufferList **)this + 77));
    if (*v39 != a4->mNumberBuffers) {
      goto LABEL_73;
    }
    uint64_t v40 = v39;
    unsigned int v41 = (*(double *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0) + 80)
                       * 0.02);
    if (v41 <= __N) {
      unsigned int v42 = __N;
    }
    else {
      unsigned int v42 = v41;
    }
    unsigned int v45 = *v40;
    uint64_t v44 = v40 + 2;
    uint64_t v43 = v45;
    if (v45)
    {
      uint64_t v46 = 0;
      float v47 = 1.0 / (float)v42;
      do
      {
        float v48 = *(float **)&v44[4 * v46 + 2];
        mData = (float *)a4->mBuffers[v46].mData;
        if (v48 != mData && __N != 0)
        {
          float v51 = v47 * (float)*((unsigned int *)this + 138);
          uint64_t v52 = __N;
          do
          {
            float v53 = *v48++;
            float *mData = (float)((float)(1.0 - v51) * *mData) + (float)(v51 * v53);
            ++mData;
            float v51 = v47 + v51;
            if (v51 >= 1.0) {
              float v51 = 1.0;
            }
            --v52;
          }
          while (v52);
        }
        ++v46;
      }
      while (v46 != v43);
    }
    unsigned int v54 = *((_DWORD *)this + 138) + __N;
    *((_DWORD *)this + 138) = v54;
    if (v54 >= v41)
    {
      *((unsigned char *)this + 573) = 1;
      *((_DWORD *)this + 138) = 0;
    }
    else
    {
LABEL_73:
      if (!*((unsigned char *)this + 573)) {
        goto LABEL_70;
      }
    }
    *((void *)this + 74) = *((void *)this + 75);
    *((unsigned char *)this + 572) = 0;
  }
LABEL_70:
  int v55 = (ausdk::AUBufferList *)*((void *)this + 77);
  unint64_t v56 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  uint64_t v57 = (AudioBufferList *)ausdk::AUBufferList::PrepareBuffer(v55, v56 + 2, __N);
  uint64_t v58 = ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0);
  CopyBufferList(&v27->mNumberBuffers, v57, (*(_DWORD *)(v58 + 104) * __N));
  *((_DWORD *)this + 133) = __N;
  *((unsigned char *)this + 574) = 1;
  return 0;
}

uint64_t AUVariableEQV2::UpdateVarEQState(AUVariableEQV2 *this)
{
  uint64_t v2 = (AUVariableEQV2 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 5u);
  if (*((float *)this + 139) != Parameter)
  {
    if (*((unsigned char *)this + 17) && *((unsigned char *)this + 575)) {
      *((unsigned char *)this + 572) = 1;
    }
    *((float *)this + 139) = Parameter;
  }
  uint64_t v5 = 0;
  memset(__src, 0, 320);
  do
  {
    unsigned int v6 = (void *)((char *)__src + v5);
    void *v6 = 0;
    v6[1] = 0;
    v6[3] = 0;
    v6[4] = 0;
    v5 += 40;
    v6[2] = 0x3FF0000000000000;
  }
  while (v5 != 320);
  AudioUnitParameterValue v7 = (float64x2_t *)((char *)this + 680);
  memcpy((char *)this + 680, __src, 0x140uLL);
  uint64_t v8 = 0;
  memset(__src, 0, 320);
  do
  {
    int v9 = (void *)((char *)__src + v8);
    void *v9 = 0;
    v9[1] = 0;
    v9[3] = 0;
    v9[4] = 0;
    v8 += 40;
    _OWORD v9[2] = 0x3FF0000000000000;
  }
  while (v8 != 320);
  memcpy((char *)this + 1000, __src, 0x140uLL);
  unsigned int v10 = 0;
  do
  {
    float v11 = *((float *)this + 139);
    unint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    unsigned int v13 = v10 + 1;
    if (v11 <= ausdk::AUElement::GetParameter(v12, v10 + 1)) {
      break;
    }
    ++v10;
  }
  while (v13 != 4);
  float v14 = *((float *)this + 139);
  float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  if (v14 <= ausdk::AUElement::GetParameter(v15, 1u))
  {
    AUVariableEQV2::SetCoefficients((uint64_t)this, (uint64_t)this + 680, 0);
    int v130 = (AUVariableEQV2 *)((char *)this + 624);
    unsigned int v131 = 0;
  }
  else
  {
    float v16 = 1.0;
    if (*((float *)this + 139) < 1.0)
    {
      unsigned int v144 = v10 - 1;
      AUVariableEQV2::SetCoefficients((uint64_t)this, (uint64_t)this + 680, v10 - 1);
      AUVariableEQV2::SetCoefficients((uint64_t)this, (uint64_t)this + 1000, v10);
      AudioUnitParameterValue v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
      float v18 = ausdk::AUElement::GetParameter(v17, v10);
      if (v10 <= 3)
      {
        uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
        float v16 = ausdk::AUElement::GetParameter(v19, v10 + 1);
      }
      float v20 = (float)(*((float *)this + 139) - v18) / (float)(v16 - v18);
      float v21 = (AUVariableEQV2 *)((char *)this + 624);
      unsigned int v22 = v10 - 1;
      unint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 624), v144);
      float v24 = ausdk::AUElement::GetParameter(v23, 0);
      int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 624), v10);
      double v142 = v20;
      double v141 = (float)(v20 * ausdk::AUElement::GetParameter(v25, 0));
      double v145 = 1.0 - v20;
      float64x2_t v140 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v145, 0);
      int v143 = (AUVariableEQV2 *)((char *)this + 128);
      uint64_t v26 = -8;
      float v27 = (float64x2_t *)((char *)this + 680);
      while (1)
      {
        uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v22);
        float v29 = ausdk::AUElement::GetParameter(v28, v26 + 1008);
        uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
        float v31 = ausdk::AUElement::GetParameter(v30, v26 + 1008);
        float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v22);
        unsigned int v33 = ausdk::AUElement::GetParameter(v32, v26 + 2008);
        unsigned int v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
        unsigned int v35 = ausdk::AUElement::GetParameter(v34, v26 + 2008);
        if (v33 == v35 && v29 == v31)
        {
          float v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v22);
          float v54 = ausdk::AUElement::GetParameter(v53, v26 + 3008);
          int v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v22);
          float v56 = ausdk::AUElement::GetParameter(v55, v26 + 4008);
          uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v22);
          float v58 = ausdk::AUElement::GetParameter(v57, v26 + 5008);
          __int16 v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
          float v60 = ausdk::AUElement::GetParameter(v59, v26 + 3008);
          long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
          float v62 = ausdk::AUElement::GetParameter(v61, v26 + 4008);
          unint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
          unsigned int v22 = v10 - 1;
          float v64 = ausdk::AUElement::GetParameter(v63, v26 + 5008);
          float v65 = (float)(v20 * v60) + v145 * v54;
          float v66 = (float)(v20 * v62) + v145 * v56;
          float v67 = (float)(v20 * v64) + v145 * v58;
          int v68 = this;
          int v69 = (char *)this + 680;
          unsigned int v70 = v26 + 8;
          float v71 = v29;
          int v72 = v33;
        }
        else
        {
          BOOL v37 = v29 == 0.0;
          if (v31 != 0.0) {
            BOOL v37 = 1;
          }
          if (!v37 && (v35 - 7 >= 4 ? (BOOL v73 = v35 == 0) : (BOOL v73 = 1), v73))
          {
            int v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
            float v75 = ausdk::AUElement::GetParameter(v74, v26 + 3008);
            int v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
            float v77 = ausdk::AUElement::GetParameter(v76, v26 + 4008);
            int v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
            float v67 = ausdk::AUElement::GetParameter(v78, v26 + 5008);
            float v66 = v20 * v77;
            int v68 = this;
            int v69 = (char *)this + 680;
            unsigned int v70 = v26 + 8;
            float v71 = v31;
            int v72 = v35;
            float v65 = v75;
          }
          else
          {
            BOOL v38 = v31 == 0.0;
            if (v29 != 0.0) {
              BOOL v38 = 1;
            }
            if (!v38 && (v33 - 7 >= 4 ? (BOOL v79 = v33 == 0) : (BOOL v79 = 1), v79))
            {
              int v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v81 = ausdk::AUElement::GetParameter(v80, v26 + 3008);
              __n128 v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v83 = ausdk::AUElement::GetParameter(v82, v26 + 4008);
              uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v67 = ausdk::AUElement::GetParameter(v84, v26 + 5008);
              float v66 = v145 * v83;
              int v68 = this;
              int v69 = (char *)this + 680;
              unsigned int v70 = v26 + 8;
              unsigned int v22 = v10 - 1;
              float v71 = v29;
              int v72 = v33;
              float v65 = v81;
            }
            else
            {
              char v39 = (v35 & 0xFFFFFFFD) != 1 || v37;
              if ((v39 & 1) == 0)
              {
                int v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                float v86 = ausdk::AUElement::GetParameter(v85, v26 + 3008);
                __int16 v87 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                float v88 = ausdk::AUElement::GetParameter(v87, v26 + 4008);
                __int16 v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                float v90 = ausdk::AUElement::GetParameter(v89, v26 + 5008);
                float v47 = (float)(v20 * v86) + v145 * (*(double *)(ausdk::AUScope::SafeGetElement(v143, 0) + 80) * 0.5);
                float v48 = this;
                float v49 = (char *)this + 680;
                unsigned int v50 = v26 + 8;
                float v51 = v31;
                int v52 = v35;
                float v91 = v88;
                float v46 = v90;
                goto LABEL_68;
              }
              char v40 = (v33 & 0xFFFFFFFD) != 1 || v38;
              if (v40)
              {
                if (!v37 && (v35 == 4 || v35 == 2))
                {
                  unsigned int v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                  float v42 = ausdk::AUElement::GetParameter(v41, v26 + 3008);
                  uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                  float v44 = ausdk::AUElement::GetParameter(v43, v26 + 4008);
                  unsigned int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                  float v46 = ausdk::AUElement::GetParameter(v45, v26 + 5008);
                  float v47 = 40.0;
                  if ((float)(v20 * v42) >= 40.0) {
                    float v47 = v20 * v42;
                  }
                  float v48 = this;
                  float v49 = (char *)this + 680;
                  unsigned int v50 = v26 + 8;
                  float v51 = v31;
                  int v52 = v35;
LABEL_67:
                  float v91 = v44;
LABEL_68:
                  AUVariableEQV2::SetCoefficientsForBand((uint64_t)v48, (uint64_t)v49, v50, v52, v51, v47, v91, v46);
                }
                else
                {
                  if (!v38 && (v33 == 4 || v33 == 2))
                  {
                    int v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                    float v100 = ausdk::AUElement::GetParameter(v99, v26 + 3008);
                    int v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                    float v44 = ausdk::AUElement::GetParameter(v101, v26 + 4008);
                    int v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v10);
                    float v46 = ausdk::AUElement::GetParameter(v102, v26 + 5008);
                    float v103 = v145 * v100;
                    float v47 = 40.0;
                    if (v103 >= 40.0) {
                      float v47 = v145 * v100;
                    }
                    float v48 = this;
                    float v49 = (char *)this + 680;
                    unsigned int v50 = v26 + 8;
                    float v51 = v29;
                    int v52 = v33;
                    goto LABEL_67;
                  }
                  __src[0] = 0uLL;
                  long double v150 = 0.0;
                  long double v151 = 0.0;
                  long double v148 = 0.0;
                  long double v149 = 0.0;
                  long double v146 = 0.0;
                  long double v147 = 0.0;
                  GetQuadraticRoots((uint64_t)__src, (uint64_t)&v150, v27->f64[0], v27->f64[1]);
                  GetQuadraticRoots((uint64_t)&v148, (uint64_t)&v146, v27[20].f64[0], v27[20].f64[1]);
                  long long v104 = __src[0];
                  double v105 = hypot(*(long double *)__src, *((long double *)__src + 1));
                  double v106 = atan2(*((long double *)&v104 + 1), *(long double *)&v104);
                  long double v107 = v148;
                  long double v108 = v149;
                  double v139 = hypot(v148, v149) * v142 + v145 * v105;
                  double v109 = atan2(v108, v107) * v142 + v145 * v106;
                  long double v110 = v150;
                  long double v111 = v151;
                  double v112 = hypot(v150, v151);
                  double v113 = atan2(v111, v110);
                  long double v114 = v146;
                  long double v115 = v147;
                  *(float *)&long double v107 = v24;
                  double v116 = hypot(v146, v147);
                  long double v117 = atan2(v115, v114);
                  double v118 = v116 * v142;
                  float v24 = *(float *)&v107;
                  double v119 = v118 + v145 * v112;
                  double v120 = v117 * v142 + v145 * v113;
                  std::polar[abi:ne180100]<double>(v139, v109);
                  double v122 = v121;
                  double v124 = v123;
                  std::polar[abi:ne180100]<double>(v119, v120);
                  double v126 = -(v122 + v125);
                  double v128 = std::operator*[abi:ne180100]<double>(v122, v124, v125, v127);
                  float64_t v129 = v27[22].f64[0] * v142 + v145 * v27[2].f64[0];
                  v27[1] = vmlaq_f64(vmulq_n_f64(v27[21], v142), v27[1], v140);
                  v27[2].f64[0] = v129;
                  v27->f64[0] = v126;
                  v27->f64[1] = v128;
                }
                unsigned int v22 = v10 - 1;
                goto LABEL_58;
              }
              int v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v93 = ausdk::AUElement::GetParameter(v92, v26 + 3008);
              __int16 v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v95 = ausdk::AUElement::GetParameter(v94, v26 + 4008);
              __int16 v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v21, v144);
              float v97 = ausdk::AUElement::GetParameter(v96, v26 + 5008);
              float v65 = *(double *)(ausdk::AUScope::SafeGetElement(v143, 0) + 80) * 0.5 * v142 + v145 * v93;
              int v68 = this;
              int v69 = (char *)this + 680;
              unsigned int v70 = v26 + 8;
              unsigned int v22 = v10 - 1;
              float v71 = v29;
              int v72 = v33;
              float v66 = v95;
              float v67 = v97;
            }
          }
        }
        AUVariableEQV2::SetCoefficientsForBand((uint64_t)v68, (uint64_t)v69, v70, v72, v71, v65, v66, v67);
LABEL_58:
        float v27 = (float64x2_t *)((char *)v27 + 40);
        if (__CFADD__(v26++, 1))
        {
          float v133 = v141 + v145 * v24;
          goto LABEL_74;
        }
      }
    }
    AUVariableEQV2::SetCoefficients((uint64_t)this, (uint64_t)this + 680, 4u);
    int v130 = (AUVariableEQV2 *)((char *)this + 624);
    unsigned int v131 = 4;
  }
  int v132 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v130, v131);
  float v133 = ausdk::AUElement::GetParameter(v132, 0);
LABEL_74:
  v134.n128_f64[0] = AUVariableEQV2::AdjustForGlobalGain(v7, v133);
  uint64_t v135 = *((void *)this + 74);
  if (*((unsigned char *)this + 572))
  {
    if (v135 == *((void *)this + 73))
    {
      __int16 v136 = (char *)this + 576;
      uint64_t v135 = *((void *)this + 72);
    }
    else
    {
      __int16 v136 = (char *)this + 584;
      uint64_t v135 = *((void *)this + 73);
    }
  }
  else
  {
    __int16 v136 = (char *)this + 592;
  }
  (*(void (**)(uint64_t, uint64_t, float64x2_t *, __n128))(*(void *)v135 + 16))(v135, 8, v7, v134);
  uint64_t v137 = *(uint64_t (**)(void))(**(void **)v136 + 24);

  return v137();
}

float AUVariableEQV2::UpdateVolumeState(AUVariableEQV2 *this)
{
  *((_DWORD *)this + 142) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 7u);
  float result = __exp10f(Parameter / 20.0);
  *((float *)this + 141) = result;
  if (*((unsigned char *)this + 575))
  {
    float v5 = *((float *)this + 140);
  }
  else
  {
    *((float *)this + 140) = result;
    float v5 = result;
  }
  if (v5 != result)
  {
    float result = (float)(*((float *)this + 141) - *((float *)this + 140))
           / (float)(*(double *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0)
                                             + 80)
                                 * 0.02);
    *((float *)this + 142) = result;
  }
  return result;
}

unsigned int *CopyBufferList(unsigned int *result, AudioBufferList *a2, size_t __n)
{
  unint64_t v3 = *result;
  if (v3 == a2->mNumberBuffers && v3 != 0)
  {
    UInt32 v5 = __n;
    AudioUnitParameterValue v7 = result;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    size_t v10 = __n;
    do
    {
      if (v7[v8 / 4 + 3] >= v5 && a2->mBuffers[v8 / 0x10].mDataByteSize >= v5)
      {
        float v11 = *(unsigned int **)&v7[v8 / 4 + 4];
        float result = (unsigned int *)a2->mBuffers[v8 / 0x10].mData;
        if (v11 != result)
        {
          float result = (unsigned int *)memcpy(result, v11, v10);
          unint64_t v3 = *v7;
        }
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < v3);
  }
  return result;
}

BiquadCoefficients *AUVariableEQV2::SetCoefficients(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = (ausdk::AUScope *)(a1 + 624);
  for (unsigned int i = 3000; i != 3008; ++i)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, a3);
    int Parameter = ausdk::AUElement::GetParameter(Element, i - 1000);
    size_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, a3);
    float v11 = ausdk::AUElement::GetParameter(v10, i);
    unint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, a3);
    float v13 = ausdk::AUElement::GetParameter(v12, i + 1000);
    float v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, a3);
    float v15 = ausdk::AUElement::GetParameter(v14, i + 2000);
    float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, a3);
    float v17 = ausdk::AUElement::GetParameter(v16, i - 2000);
    float result = AUVariableEQV2::SetCoefficientsForBand(a1, a2, i - 3000, Parameter, v17, v11, v13, v15);
  }
  return result;
}

float64_t AUVariableEQV2::AdjustForGlobalGain(float64x2_t *a1, float a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  while (fabs(a1->f64[v3])
        + fabs(a1->f64[v3 + 1])
        + fabs(a1[1].f64[v3 + 1])
        + fabs(a1[2].f64[v3])
        + fabs(a1[1].f64[v3] + -1.0) < 1.0e-15)
  {
    v3 += 5;
    if (v3 == 40) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = (float64x2_t *)((char *)a1 + v3 * 8);
LABEL_6:
  double v4 = __exp10(a2 * 0.05);
  v2[1] = vmulq_n_f64(v2[1], v4);
  float64_t result = v2[2].f64[0] * v4;
  v2[2].f64[0] = result;
  return result;
}

BiquadCoefficients *AUVariableEQV2::SetCoefficientsForBand(uint64_t a1, uint64_t a2, unsigned int a3, int a4, float a5, float a6, float a7, float a8)
{
  float64_t result = (BiquadCoefficients *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 128), 0);
  if (a5 == 0.0 && (double v16 = *((double *)result + 10), v16 * 0.49 >= a6))
  {
    float v18 = a6 * 6.28318531 / v16;
    switch(a4)
    {
      case 0:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = a7;
        int v23 = 6;
        goto LABEL_25;
      case 1:
        float64_t result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0) {
          goto LABEL_22;
        }
        double v24 = fmin(v18, 3.11017673);
        double v25 = 0.0;
        int v26 = 1;
        goto LABEL_19;
      case 2:
        float64_t result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0) {
          goto LABEL_22;
        }
        double v24 = fmin(v18, 3.11017673);
        double v25 = 0.0;
        int v26 = 2;
        goto LABEL_19;
      case 3:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = 0.0;
        int v23 = 1;
        goto LABEL_25;
      case 4:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = 0.0;
        int v23 = 2;
        goto LABEL_25;
      case 5:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = 0.0;
        int v23 = 3;
        goto LABEL_25;
      case 6:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = 0.0;
        int v23 = 4;
        goto LABEL_25;
      case 7:
        float64_t result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0) {
          goto LABEL_22;
        }
        double v25 = a7;
        double v24 = fmin(v18, 3.11017673);
        int v26 = 7;
        goto LABEL_19;
      case 8:
        float64_t result = (BiquadCoefficients *)(a2 + 40 * a3);
        if (v18 <= 0.0)
        {
LABEL_22:
          float v17 = (void *)(a2 + 40 * a3);
          *(void *)float64_t result = 0;
          *((void *)result + 1) = 0;
          goto LABEL_4;
        }
        double v25 = a7;
        double v24 = fmin(v18, 3.11017673);
        int v26 = 8;
LABEL_19:
        float64_t result = (BiquadCoefficients *)BiquadCoefficients::SetPriv(result, v26, v24, 0.707106781, v25);
        break;
      case 9:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = a7;
        int v23 = 7;
        goto LABEL_25;
      case 10:
        uint64_t v19 = (BiquadCoefficients *)(a2 + 40 * a3);
        double v20 = v18;
        double v21 = a8;
        double v22 = a7;
        int v23 = 8;
LABEL_25:
        return BiquadCoefficients::SetBW(v19, v23, v20, v21, v22);
      default:
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    float v17 = (void *)(a2 + 40 * a3);
    void *v17 = 0;
    v17[1] = 0;
LABEL_4:
    uint64_t v17[3] = 0;
    v17[4] = 0;
    v17[2] = 0x3FF0000000000000;
  }
  return result;
}

void GetQuadraticRoots(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v7 = logb(2.0);
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    int v8 = 0;
    double v9 = 0.0;
    double v25 = 2.0;
  }
  else
  {
    int v8 = (int)v7;
    double v25 = scalbn(2.0, -(int)v7);
    double v9 = scalbn(0.0, -v8);
  }
  double v22 = v9;
  double v10 = v9 * v9 + v25 * v25;
  double v27 = scalbn((v25 + v9 * 0.0) / v10, -v8);
  double v11 = scalbn(-(v22 - v25 * 0.0) / v10, -v8);
  double v12 = std::operator*[abi:ne180100]<double>(a3, 0.0, a3, 0.0);
  double v14 = v13;
  double v15 = std::operator*[abi:ne180100]<double>(4.0, 0.0, a4, 0.0);
  double v26 = std::sqrt[abi:ne180100]<double>(v12 - v15, v14 - v16);
  float64_t v23 = v17;
  *(double *)a1 = std::operator*[abi:ne180100]<double>(v26 - a3, v17, v27, v11);
  *(void *)(a1 + 8) = v18;
  v19.f64[0] = v26;
  v19.f64[1] = v23;
  float64x2_t v20 = vsubq_f64(vnegq_f64((float64x2_t)*(unint64_t *)&a3), v19);
  *(double *)a2 = std::operator*[abi:ne180100]<double>(v20.f64[0], v20.f64[1], v27, v11);
  *(void *)(a2 + 8) = v21;
}

uint64_t AUVariableEQV2::CanScheduleParameters(AUVariableEQV2 *this)
{
  return 0;
}

uint64_t AUVariableEQV2::SetParameter(AUVariableEQV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 624), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    double v10 = (char *)this + 536;
LABEL_6:
    ++*(_DWORD *)v10;
    return 0;
  }
  double v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(v12, a2);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  double v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(v15, a2, a5, 0);
  if (Parameter != a5)
  {
    double v10 = (char *)this + 536;
    if (a2 == 7) {
      double v10 = (char *)this + 544;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t AUVariableEQV2::GetParameter(AUVariableEQV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 624), a4);
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUVariableEQV2::SetProperty(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUVariableEQV2 *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUVariableEQV2 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUVariableEQV2::GetProperty(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    int v8 = (*(uint64_t (**)(AUVariableEQV2 *))(*(void *)this + 576))(this);
    uint64_t result = 0;
    *a5 = v8;
  }
  return result;
}

uint64_t AUVariableEQV2::GetPropertyInfo(AUVariableEQV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUVariableEQV2::Reset(AUVariableEQV2 *this)
{
  uint64_t v2 = *((void *)this + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 73);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *((_DWORD *)this + 138) = 0;
  *(_WORD *)((char *)this + 573) = 1;
  *((unsigned char *)this + 575) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVariableEQV2 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 7u);
  float v6 = __exp10f(Parameter / 20.0);
  *((float *)this + 140) = v6;
  *((float *)this + 141) = v6;
  *((_DWORD *)this + 142) = 0;
  return 0;
}

uint64_t AUVariableEQV2::Cleanup(AUVariableEQV2 *this)
{
  uint64_t v2 = *((void *)this + 72);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 72) = 0;
  }
  uint64_t result = *((void *)this + 73);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 73) = 0;
  }
  return result;
}

uint64_t AUVariableEQV2::Initialize(AUVariableEQV2 *this)
{
  uint64_t v2 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 80), 0)
                                           + 80);
  uint64_t v3 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((AUVariableEQV2 *)((char *)this + 128), 0)
                                           + 80);
  if (!memcmp(v2, v3, 0x28uLL))
  {
    uint64_t v5 = NewIIRFilter(v2, v3, (const CAStreamBasicDescription *)8);
    uint64_t v6 = *((void *)this + 72);
    if (v6 != v5)
    {
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      *((void *)this + 72) = v5;
    }
    if (v5)
    {
      uint64_t v7 = NewIIRFilter(v2, v3, (const CAStreamBasicDescription *)8);
      uint64_t v8 = *((void *)this + 73);
      if (v8 != v7)
      {
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        *((void *)this + 73) = v7;
      }
      if (v7)
      {
        *((void *)this + 74) = *((void *)this + 72);
        *((void *)this + 75) = v7;
        operator new();
      }
    }
  }
  return 4294956428;
}

const void **AUVariableEQV2::CreateExtendedElements(AUVariableEQV2 *this)
{
  uint64_t v1 = (AUVariableEQV2 *)((char *)this + 624);
  ausdk::AUScope::Initialize((AUVariableEQV2 *)((char *)this + 624), this, 4, 5);
  uint64_t Element = ausdk::AUScope::GetElement(v1, 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), @"EQ1");
  uint64_t v3 = ausdk::AUScope::GetElement(v1, 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v3 + 72), @"EQ2");
  uint64_t v4 = ausdk::AUScope::GetElement(v1, 2u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v4 + 72), @"EQ3");
  uint64_t v5 = ausdk::AUScope::GetElement(v1, 3u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v5 + 72), @"EQ4");
  uint64_t v6 = (const void **)(ausdk::AUScope::GetElement(v1, 4u) + 72);

  return ausdk::Owned<__CFString const*>::operator=(v6, @"EQ5");
}

void AUVariableEQV2::~AUVariableEQV2(AUVariableEQV2 *this)
{
  AUVariableEQV2::~AUVariableEQV2(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14BC718;
  AUVariableEQV2::Cleanup(this);
  uint64_t v4 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v4);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)this + 77, 0);
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((void *)this + 76, 0);
  uint64_t v2 = *((void *)this + 73);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 73) = 0;
  }
  uint64_t v3 = *((void *)this + 72);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 72) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUChannelSpecificDelay::GetScopeExtended(AUChannelSpecificDelay *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 2200;
  }
  else {
    return 0;
  }
}

uint64_t AUChannelSpecificDelay::SupportedNumChannels(AUChannelSpecificDelay *this, const AUChannelInfo **a2)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, memory_order_acquire) != -1)
  {
    uint64_t v7 = &v5;
    uint64_t v6 = &v7;
    std::__call_once(&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>);
  }
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  if (*((_DWORD *)this + 562)) {
    return 32;
  }
  else {
    return 8;
  }
}

int16x8_t std::__call_once_proxy[abi:ne180100]<std::tuple<AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>()
{
  uint64_t v0 = 0;
  int16x8_t result = (int16x8_t)xmmword_1BB87BB40;
  v2.i64[0] = 0x8000800080008;
  v2.i64[1] = 0x8000800080008;
  do
  {
    uint64_t v3 = (__int16 *)((char *)&AUChannelSpecificDelay::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs
                   + v0);
    int16x8_t v4 = result;
    vst2q_s16(v3, *(int16x8x2_t *)result.i8);
    int16x8_t result = vaddq_s16(result, v2);
    v0 += 32;
  }
  while (v0 != 128);
  return result;
}

BOOL AUChannelSpecificDelay::StreamFormatWritable(AUChannelSpecificDelay *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUChannelSpecificDelay::SupportsTail(AUChannelSpecificDelay *this)
{
  return 1;
}

double AUChannelSpecificDelay::GetTailTime(AUChannelSpecificDelay *this)
{
  return 0.0;
}

double AUChannelSpecificDelay::GetLatency(AUChannelSpecificDelay *this)
{
  int v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
  if (v2)
  {
    unsigned int v3 = 0;
    double v4 = 0.0;
    do
    {
      if (*((_DWORD *)this + 562))
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUChannelSpecificDelay *)((char *)this + 2200), v3);
        unsigned int v6 = 0;
      }
      else
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUChannelSpecificDelay *)((char *)this + 32), 0);
        unsigned int v6 = v3;
      }
      double Parameter = ausdk::AUElement::GetParameter(Element, v6);
      if (v4 <= Parameter) {
        double v4 = Parameter;
      }
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    double v4 = 0.0;
  }
  return v4 / 1000.0;
}

uint64_t AUChannelSpecificDelay::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3) {
    AUChannelSpecificDelay::ClearRingBuffers((AUChannelSpecificDelay *)this);
  }
  return v3;
}

void AUChannelSpecificDelay::ClearRingBuffers(AUChannelSpecificDelay *this)
{
  uint64_t v2 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
  if (v2)
  {
    uint64_t v3 = (_DWORD *)((char *)this + 1816);
    double v4 = (void *)((char *)this + 568);
    do
    {
      if (*((_DWORD *)v4 - 7))
      {
        char v5 = (void *)*(v4 - 1);
        uint64_t v6 = *v4 - (void)v5;
        if (v6 >= 1) {
          bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
        }
      }
      *(void *)((char *)v4 - 20) = 0;
      *((_DWORD *)v4 - 6) = 0;
      ++*v3++;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  *((unsigned char *)this + 533) = 1;
}

UInt8 *AUChannelSpecificDelay::SaveExtendedScopes(AUChannelSpecificDelay *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUChannelSpecificDelay::GetParameterInfo(AUChannelSpecificDelay *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (*((_DWORD *)this + 562))
  {
    if (a2 == 4)
    {
      if (!a3)
      {
        buffer->cfNameString = @"Desired delay in millisecond";
        buffer->flags |= 0x8000000u;
        CFStringGetCString(@"Desired delay in millisecond", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Milliseconds;
        *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xC080000000000000;
        return result;
      }
      return 4294956418;
    }
    return 4294956430;
  }
  else
  {
    buffer->AudioUnitParameterOptions flags = 0;
    buffer->unitName = 0;
    if (a2) {
      return 4294956418;
    }
    if (a3 > 7)
    {
      return 0;
    }
    else
    {
      buffer->cfNameString = @"Desired delay in millisecond";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Desired delay in millisecond", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterOptions v6 = buffer->flags | 0xC0800000;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v6;
    }
  }
  return result;
}

uint64_t AUChannelSpecificDelay::GetParameterList(AUChannelSpecificDelay *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (!*((_DWORD *)this + 562))
  {
    if (!a2)
    {
      uint64_t v6 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
      if (v6)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (a3) {
            a3[i] = i;
          }
        }
      }
      goto LABEL_13;
    }
    return 4294956430;
  }
  if (a2 != 4) {
    return 4294956430;
  }
  if (a3) {
    *a3 = 0;
  }
  LODWORD(v6) = 1;
LABEL_13:
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUChannelSpecificDelay::Render(AUChannelSpecificDelay *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = (AUChannelSpecificDelay *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  double v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUChannelSpecificDelay *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUChannelSpecificDelay::ProcessBufferLists(AUChannelSpecificDelay *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  if (*((_DWORD *)this + 84) < a5) {
    return 4294956422;
  }
  uint64_t v8 = this;
  if (!*((_DWORD *)this + 132))
  {
    uint64_t v16 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0) + 108);
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)v8 + 128), 0);
    uint64_t v90 = v16;
    if (!v16)
    {
LABEL_77:
      uint64_t result = 0;
      *((_WORD *)v8 + 266) = 0;
      return result;
    }
    uint64_t v19 = 0;
    double v20 = *(double *)(Element + 80);
    LODWORD(v18) = *((_DWORD *)v8 + 84);
    unint64_t v21 = (ceil(v20 * 100.0 / 1000.0) + (double)v18);
    __int16 v89 = (char *)v8 + 1816;
    double v22 = (char *)v8 + 1944;
    float v81 = (AUChannelSpecificDelay *)((char *)v8 + 2200);
    float64_t v23 = (char *)v8 + 2072;
    float v77 = (AUChannelSpecificDelay *)((char *)v8 + 32);
    int v80 = v8;
    unint64_t v82 = v21;
    __int16 v87 = (char *)v8 + 2072;
    float v88 = (char *)v8 + 1944;
    uint64_t v84 = a3;
    int v85 = a4;
    while (1)
    {
      int v24 = *(_DWORD *)&v89[4 * v19];
      if (v24 == *(_DWORD *)&v22[4 * v19])
      {
        if (!*(_DWORD *)&v23[4 * v19]) {
          goto LABEL_73;
        }
        goto LABEL_20;
      }
      if (*((_DWORD *)v8 + 562))
      {
        float v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v81, v19);
        unsigned int v63 = 0;
      }
      else
      {
        float v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v77, 0);
        unsigned int v63 = v19;
      }
      unsigned int v64 = vcvtad_u64_f64(v20 * ausdk::AUElement::GetParameter(v62, v63) / 1000.0);
      if (*(_DWORD *)&v23[4 * v19] != v64 || *((unsigned char *)v8 + 533)) {
        break;
      }
LABEL_72:
      *(_DWORD *)&v22[4 * v19] = v24;
      if (!v64)
      {
LABEL_73:
        int v72 = (char *)a3 + 16 * v19;
        size_t v73 = *((unsigned int *)v72 + 3);
        int v74 = (char *)a4 + 16 * v19;
        if (v73 == *((_DWORD *)v74 + 3))
        {
          float v75 = (const void *)*((void *)v72 + 2);
          int v76 = (void *)*((void *)v74 + 2);
          if (v75 != v76) {
            memcpy(v76, v75, v73);
          }
        }
        goto LABEL_76;
      }
LABEL_20:
      v92[0] = a3->mBuffers[v19].mData;
      mData = a4->mBuffers[v19].mData;
      double v25 = (char *)v8 + 40 * v19;
      if (*((_DWORD *)v25 + 135) == 1)
      {
        double v26 = (unsigned int *)(v25 + 536);
        double v27 = (unsigned int *)(v25 + 540);
        int v28 = *((_DWORD *)v25 + 134);
        unsigned int v29 = *((_DWORD *)v8 + 10 * v19 + 136);
        LODWORD(v30) = 1;
        unsigned int v31 = a5;
        float v83 = (_DWORD *)((char *)v8 + 40 * v19 + 544);
        if (a5)
        {
          unsigned int v32 = v28 - v29;
          if (v28 != v29)
          {
            unint64_t v33 = 0;
            if (v32 >= a5) {
              unsigned int v32 = a5;
            }
            unsigned int v34 = (char *)v8 + 40 * v19;
            unsigned int v35 = v34 + 552;
            unsigned int v36 = v28 - *((_DWORD *)v34 + 138);
            unsigned int v78 = v32;
            if (v36 >= v32) {
              uint64_t v37 = v32;
            }
            else {
              uint64_t v37 = v36;
            }
            BOOL v38 = v34 + 560;
            char v39 = (const void **)v92;
            do
            {
              char v40 = *v39;
              v39 += 2;
              memcpy((void *)(*v38 + 4 * (*v35 + *v26 * v33++)), v40, 4 * v37);
              unint64_t v30 = *v27;
            }
            while (v33 < v30);
            if (v78 > v36 && v30)
            {
              unint64_t v41 = 0;
              float v42 = v92;
              do
              {
                uint64_t v43 = *v42;
                v42 += 2;
                memcpy((void *)(*v38 + 4 * *v26 * v41++), (const void *)(v43 + 4 * v37), 4 * (v78 - v37));
                unint64_t v30 = *v27;
              }
              while (v41 < v30);
            }
            unsigned int v29 = *v83 + v78;
            _DWORD *v83 = v29;
            unsigned int v44 = *v35 + v78;
            *unsigned int v35 = v44;
            int v28 = *v26;
            BOOL v45 = v44 >= *v26;
            unsigned int v46 = v44 - *v26;
            if (v45) {
              *unsigned int v35 = v46;
            }
            uint64_t v8 = v80;
            unsigned int v31 = a5;
            unint64_t v21 = v82;
            float64_t v23 = v87;
            double v22 = v88;
          }
        }
        if (v31 && v30 == 1 && v29)
        {
          unint64_t v47 = 0;
          if (v29 >= a5) {
            unsigned int v48 = a5;
          }
          else {
            unsigned int v48 = v29;
          }
          float v49 = (char *)v8 + 40 * v19;
          unsigned int v50 = v49 + 548;
          unsigned int v51 = v28 - *((_DWORD *)v49 + 137);
          unsigned int v79 = v48;
          if (v51 >= v48) {
            uint64_t v52 = v48;
          }
          else {
            uint64_t v52 = v51;
          }
          float v53 = v49 + 560;
          p_mData = &mData;
          do
          {
            int v55 = *p_mData;
            p_mData += 2;
            memcpy(v55, (const void *)(*v53 + 4 * (*v50 + *v26 * v47++)), 4 * v52);
            unint64_t v56 = *v27;
          }
          while (v47 < v56);
          if (v79 > v51 && v56)
          {
            unint64_t v57 = 0;
            float v58 = &mData;
            do
            {
              __int16 v59 = (char *)*v58;
              v58 += 2;
              memcpy(&v59[4 * v52], (const void *)(*v53 + 4 * *v26 * v57++), 4 * (v79 - v52));
            }
            while (v57 < *v27);
          }
          unint64_t v21 = v82;
          *v83 -= v79;
          unsigned int v60 = *v50 + v79;
          *unsigned int v50 = v60;
          BOOL v45 = v60 >= *v26;
          unsigned int v61 = v60 - *v26;
          uint64_t v8 = v80;
          float64_t v23 = v87;
          double v22 = v88;
          if (v45) {
            *unsigned int v50 = v61;
          }
        }
      }
      a3 = v84;
      a4 = v85;
LABEL_76:
      if (++v19 == v90) {
        goto LABEL_77;
      }
    }
    float v65 = (char *)v8 + 40 * v19;
    *((_DWORD *)v65 + 134) = v21;
    *(_OWORD *)(v65 + 540) = xmmword_1BB87A440;
    float v66 = (void *)*((void *)v65 + 70);
    uint64_t v67 = *((void *)v65 + 71) - (void)v66;
    if (v21 == v67 >> 2)
    {
      if (v67 >= 1)
      {
        unint64_t v68 = (unint64_t)v67 >> 2;
        uint64_t v69 = ((unint64_t)v67 >> 2) + 1;
        bzero(*((void **)v65 + 70), 4 * (v69 - ((unint64_t)v67 > 3)));
LABEL_67:
        bzero(v66, 4 * (v69 - (v68 != 0)));
        unint64_t v21 = v82;
      }
    }
    else
    {
      std::valarray<float>::resize((uint64_t)(v65 + 560), v21, 0.0);
      float v66 = (void *)*((void *)v65 + 70);
      uint64_t v70 = *((void *)v65 + 71) - (void)v66;
      if (v70 >= 1)
      {
        unint64_t v68 = (unint64_t)v70 >> 2;
        uint64_t v69 = ((unint64_t)v70 >> 2) + 1;
        goto LABEL_67;
      }
    }
    if (v64 >= v21) {
      int v71 = v21;
    }
    else {
      int v71 = v64;
    }
    *((_DWORD *)v65 + 136) = v71;
    *((_DWORD *)v65 + 138) = v71;
    float64_t v23 = v87;
    double v22 = v88;
    *(_DWORD *)&v87[4 * v19] = v64;
    goto LABEL_72;
  }
  if (!*((unsigned char *)this + 532)) {
    AUChannelSpecificDelay::ClearRingBuffers(this);
  }
  unint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers == a4->mNumberBuffers && mNumberBuffers != 0)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      size_t mDataByteSize = a3->mBuffers[v11].mDataByteSize;
      if (mDataByteSize == a4->mBuffers[v11].mDataByteSize)
      {
        uint64_t v14 = a3->mBuffers[v11].mData;
        unsigned int v15 = a4->mBuffers[v11].mData;
        if (v14 != v15)
        {
          memcpy(v15, v14, mDataByteSize);
          unint64_t mNumberBuffers = a3->mNumberBuffers;
        }
      }
      ++v12;
      ++v11;
    }
    while (v12 < mNumberBuffers);
  }
  uint64_t result = 0;
  *((unsigned char *)v8 + 532) = 1;
  return result;
}

uint64_t AUChannelSpecificDelay::CanScheduleParameters(AUChannelSpecificDelay *this)
{
  return 0;
}

uint64_t AUChannelSpecificDelay::SetParameter(AUChannelSpecificDelay *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (*((_DWORD *)this + 562))
  {
    if (a3 != 4) {
      return 4294956430;
    }
    goto LABEL_7;
  }
  {
    {
      v13[0] = xmmword_1BB8C2260;
      v13[1] = unk_1BB8C2270;
      v13[2] = xmmword_1BB8C2280;
      v13[3] = unk_1BB8C2290;
      std::unordered_map<unsigned int,unsigned int>::unordered_map(v13, 8);
      __cxa_atexit((void (*)(void *))std::unordered_map<unsigned int,unsigned int>::~unordered_map[abi:ne180100], &AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, &dword_1BB0CE000);
    }
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, a2);
  if (result)
  {
    a4 = *(_DWORD *)(result + 20);
LABEL_7:
    uint64_t result = 0;
    ++*((_DWORD *)this + a4 + 454);
  }
  return result;
}

void sub_1BB6939EC(_Unwind_Exception *a1)
{
}

void std::unordered_map<unsigned int,unsigned int>::unordered_map(void *a1, uint64_t a2)
{
  AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID = 0u;
  *(_OWORD *)&qword_1E9F7FE48 = 0u;
  dword_1E9F7FE58 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = &a1[a2];
    do
    {
      unint64_t v7 = *(unsigned int *)v3;
      if (v5)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = *(unsigned int *)v3;
          if (v5 <= v7) {
            unint64_t v2 = v7 % v5;
          }
        }
        else
        {
          unint64_t v2 = (v5 - 1) & v7;
        }
        int v9 = *(uint64_t ***)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                          + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v11 = i[1];
            if (v11 == v7)
            {
              if (*((_DWORD *)i + 4) == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v5) {
                  v11 %= v5;
                }
              }
              else
              {
                v11 &= v5 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v12 = operator new(0x18uLL);
      *unint64_t v12 = 0;
      v12[1] = v7;
      std::string::value_type v12[2] = *v3;
      float v13 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(*(float *)&dword_1E9F7FE58 * (float)v5) < v13)
      {
        BOOL v14 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3) {
          BOOL v14 = 1;
        }
        unint64_t v15 = v14 | (2 * v5);
        unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E9F7FE58);
        if (v15 <= v16) {
          size_t v17 = v16;
        }
        else {
          size_t v17 = v15;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID, v17);
        unint64_t v5 = *((void *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
             + 1);
        if ((*((void *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
              + 1) & (*((void *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                      + 1)
                    - 1)) != 0)
        {
          if (*((void *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
               + 1) <= v7)
            unint64_t v2 = v7
               % *((void *)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                 + 1);
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (DWORD2(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID)
              - 1) & v7;
        }
      }
      uint64_t v18 = AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID;
      uint64_t v19 = *(void **)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                       + 8 * v2);
      if (v19)
      {
        *unint64_t v12 = *v19;
      }
      else
      {
        *unint64_t v12 = qword_1E9F7FE48;
        qword_1E9F7FE48 = (uint64_t)v12;
        *(void *)(v18 + 8 * v2) = &qword_1E9F7FE48;
        if (!*v12) {
          goto LABEL_40;
        }
        unint64_t v20 = *(void *)(*v12 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v20 >= v5) {
            v20 %= v5;
          }
        }
        else
        {
          v20 &= v5 - 1;
        }
        uint64_t v19 = (void *)(AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID
                       + 8 * v20);
      }
      *uint64_t v19 = v12;
LABEL_40:
      uint64_t v4 = ++qword_1E9F7FE50;
LABEL_41:
      ++v3;
    }
    while (v3 != v6);
  }
}

void sub_1BB693C4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)&AUChannelSpecificDelay::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::channelIndexMapByParameterID);
  _Unwind_Resume(a1);
}

uint64_t AUChannelSpecificDelay::SetProperty(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 != 64102)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 132) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a6 < 4) {
    return 4294956445;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 562) = *a5;
  return result;
}

uint64_t AUChannelSpecificDelay::GetProperty(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64102)
  {
    uint64_t v6 = (char *)this + 2248;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t v6 = (char *)this + 528;
  }
  uint64_t result = 0;
  *a5 = *(_DWORD *)v6;
  return result;
}

uint64_t AUChannelSpecificDelay::GetPropertyInfo(AUChannelSpecificDelay *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 64102 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUChannelSpecificDelay::Reset(AUChannelSpecificDelay *this)
{
  return 0;
}

uint64_t AUChannelSpecificDelay::Initialize(AUChannelSpecificDelay *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  long long v21 = *(_OWORD *)(Element + 80);
  long long v22 = v3;
  uint64_t v23 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v20.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v20.mBytesPerPacket = v5;
  *(void *)&v20.mBitsPerChannel = *(void *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v21, &v20, v6)) {
    return 4294956428;
  }
  unsigned int v7 = *((_DWORD *)this + 562) ? 32 : 8;
  if (HIDWORD(v22) > v7) {
    return 4294956428;
  }
  uint64_t v9 = ausdk::AUScope::SafeGetElement((AUChannelSpecificDelay *)((char *)this + 128), 0);
  unint64_t v10 = 0;
  LODWORD(v11) = *((_DWORD *)this + 84);
  unint64_t v12 = (ceil(*(double *)(v9 + 80) * 100.0 / 1000.0) + (double)v11);
  float v13 = (void *)((char *)this + 568);
  do
  {
    *((_DWORD *)v13 - 8) = v12;
    *(_OWORD *)((char *)v13 - 28) = xmmword_1BB87A440;
    BOOL v14 = (void *)*(v13 - 1);
    uint64_t v15 = *v13 - (void)v14;
    if (v12 == v15 >> 2)
    {
      if (v15 < 1) {
        goto LABEL_14;
      }
      unint64_t v16 = (unint64_t)v15 >> 2;
      uint64_t v17 = ((unint64_t)v15 >> 2) + 1;
      bzero((void *)*(v13 - 1), 4 * (v17 - ((unint64_t)v15 > 3)));
    }
    else
    {
      std::valarray<float>::resize((uint64_t)(v13 - 1), v12, 0.0);
      BOOL v14 = (void *)*(v13 - 1);
      uint64_t v18 = *v13 - (void)v14;
      if (v18 < 1) {
        goto LABEL_14;
      }
      unint64_t v16 = (unint64_t)v18 >> 2;
      uint64_t v17 = ((unint64_t)v18 >> 2) + 1;
    }
    bzero(v14, 4 * (v17 - (v16 != 0)));
LABEL_14:
    *((_DWORD *)v13 - 6) = 0;
    *((_DWORD *)v13 - 4) = 0;
    ++v10;
    if (*((_DWORD *)this + 562)) {
      unint64_t v19 = 32;
    }
    else {
      unint64_t v19 = 8;
    }
    v13 += 5;
  }
  while (v10 < v19);
  return 0;
}

void AUChannelSpecificDelay::CreateExtendedElements(AUChannelSpecificDelay *this)
{
  uint64_t v1 = (AUChannelSpecificDelay *)((char *)this + 2200);
  ausdk::AUScope::Initialize((AUChannelSpecificDelay *)((char *)this + 2200), this, 4, 32);
  for (unsigned int i = 0; i != 32; ++i)
  {
    std::to_string(&v11, i);
    long long v3 = std::string::insert(&v11, 0, "Channel", 7uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v13 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if (v5)
    {
      if (v13 >= 0) {
        CFIndex v6 = HIBYTE(v13);
      }
      else {
        CFIndex v6 = (CFIndex)__p[1];
      }
      CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
      CFStringRef v14 = v7;
      if (!v7)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      if (v13 < 0) {
LABEL_11:
      }
        operator delete(__p[0]);
    }
    else
    {
      CFStringRef v7 = 0;
      CFStringRef v14 = 0;
      if (v13 < 0) {
        goto LABEL_11;
      }
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v7);
    uint64_t v9 = ausdk::AUScope::GetElement(v1, i);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, 1);
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1BB6940D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void AUChannelSpecificDelay::~AUChannelSpecificDelay(AUChannelSpecificDelay *this)
{
  AUChannelSpecificDelay::~AUChannelSpecificDelay(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  char *v3;
  unsigned char *v4;
  unsigned char *v5;
  void *v6;
  void **v7;
  uint64_t vars8;

  *(void *)this = &unk_1F14BC978;
  CFStringRef v7 = (void **)((char *)this + 2216);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v2 = 1280;
  do
  {
    long long v3 = (char *)this + v2;
    long long v4 = *(unsigned char **)((char *)this + v2 + 520);
    if (v4)
    {
      long long v5 = (unsigned char *)*((void *)v3 + 66);
      if (v5 != v4) {
        *((void *)v3 + 66) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      }
      CFIndex v6 = v3 + 520;
      operator delete(v4);
      const AudioStreamBasicDescription *v6 = 0;
      v6[1] = 0;
    }
    v2 -= 40;
  }
  while (v2);

  ausdk::AUBase::~AUBase(this);
}

void ___ZL30AUChannelSpecificDelayLogScopev_block_invoke()
{
}

uint64_t AUToneMeister::algorithm(AUToneMeister *this, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return *((void *)this + 544);
  }
}

uint64_t AUToneMeister::numStatus(AUToneMeister *this)
{
  return 159;
}

uint64_t AUToneMeister::newDspLibAlgorithm(AUToneMeister *this)
{
  return 0;
}

uint64_t AUToneMeister::Version(AUToneMeister *this)
{
  return 394240;
}

double AUToneMeister::GetLatency(AUToneMeister *this)
{
  return 0.0;
}

uint64_t AUToneMeister::GetParameterValueStrings(AUToneMeister *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  long long v5 = (DspLib::ToneMeister::Parameters *)*(unsigned int *)(*((void *)this + 211) + 4 * a3);
  if (DspLib::ToneMeister::Parameters::isAutomatedFilterStateParameter(v5))
  {
    CFIndex v6 = _ZGRN6DspLib11ToneMeister10ParametersL26kAutomatedFilterStateNamesE__3326;
    CFIndex v7 = 3;
LABEL_4:
    uint8x8_t v8 = AUDspLib::CFArrayOfStringsCreateWithCArrayOfStrings((const char **)v6, v7);
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  if (DspLib::ToneMeister::Parameters::isFilterParameter(v5))
  {
    if (DspLib::ToneMeister::Parameters::filterParameter(v5) == 1)
    {
      CFIndex v6 = _ZGRN6DspLib11ToneMeister10ParametersL16kFilterTypeNamesE__3330;
      CFIndex v7 = 22;
      goto LABEL_4;
    }
    if (!DspLib::ToneMeister::Parameters::filterParameter(v5))
    {
      CFIndex v6 = &_ZGRN6DspLib11ToneMeister10ParametersL17kFilterStateNamesE_;
      CFIndex v7 = 8;
      goto LABEL_4;
    }
  }
  return 4294956418;
}

uint64_t AUToneMeister::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = AUDspLib::RestoreState(this, a2);
  if (!v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, void, float))*this + 19))(this, 3, 0, 0, 0, *((float *)this + 542));
    AUToneMeister::enqueueNewToneMeister((uint64_t)this);
  }
  return v3;
}

uint64_t AUToneMeister::enqueueNewToneMeister(uint64_t this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 2176));
  if (v1)
  {
    uint64_t v2 = this;
    if (*(unsigned char *)(this + 17))
    {
      uint64_t v3 = *(caulk::concurrent::messenger **)(this + 2200);
      uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = v2;
      *(void *)uint64_t v4 = &unk_1F14BCEB8;
      *(void *)(v4 + 8) = 0;
      return caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v4);
    }
  }
  return this;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v3 = a1;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)a1 + 3) + 2176));
  if (v1) {
    AUToneMeister::newToneMeister((AUToneMeister *)&v4);
  }
  return caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

void sub_1BB6945B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9)
{
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void AUToneMeister::newToneMeister(AUToneMeister *this)
{
}

void sub_1BB6947B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40D7BDF577);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::pop(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v11);
  if (v4)
  {
    uint64_t v5 = v11;
    if (!v11) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    uint64_t v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v10 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v10))
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
      uint64_t v7 = *a2;
      *a2 = v5;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    else
    {
      *a2 = v11;
    }
  }
  return v4;
}

void sub_1BB694910(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::drain_trash(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result) {
      break;
    }
    if (!v3) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

DspLib::ToneMeister::Algorithm *DspLib::ToneMeister::Algorithm::Algorithm(DspLib::ToneMeister::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ToneMeister::Parameters::kDefault, 0x300uLL, (uint64_t)DspLib::ToneMeister::Parameters::kMinimum, 768, (uint64_t)&DspLib::ToneMeister::Parameters::kMaximum, 768);
  *(void *)uint64_t v2 = &unk_1F14A8088;
  *(unsigned char *)(v2 + 3288) = 0;
  *(_OWORD *)(v2 + 3296) = 0u;
  *(_OWORD *)(v2 + 3312) = 0u;
  *(_OWORD *)(v2 + 3328) = 0u;
  *(_OWORD *)(v2 + 3344) = 0u;
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(v2 + 3360));
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3448));
  DspLib::FFT::Filterbank::Filterbank((DspLib::ToneMeister::Algorithm *)((char *)this + 3536), 0);
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3896));
  DspLibBuffer::DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3984));
  *((_DWORD *)this + 1018) = 0;
  *((unsigned char *)this + 4080) = 0;
  *((_DWORD *)this + 1021) = 0;
  *((unsigned char *)this + 4088) = 0;
  *((_OWORD *)this + 256) = 0u;
  *((_OWORD *)this + 257) = 0u;
  *((_OWORD *)this + 258) = 0u;
  *((_OWORD *)this + 259) = 0u;
  DspLib::copy(&DspLib::ToneMeister::Parameters::kMaximum, 768, (char *)this + 216);
  return this;
}

void sub_1BB694ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v9 = v6;
  uint64_t v11 = (void *)*v9;
  void *v9 = 0;
  if (v11) {
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)v9, v11);
  }
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v12 = (std::__shared_weak_count *)v2[515];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int64_t v13 = (std::__shared_weak_count *)v2[513];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  DspLibBuffer::~DspLibBuffer(v8);
  DspLibBuffer::~DspLibBuffer(v7);
  DspLib::FFT::Filterbank::~Filterbank(v5);
  DspLibBuffer::~DspLibBuffer(v4);
  DspLibBuffer::~DspLibBuffer(v3);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v2 + 411));
  *uint64_t v2 = &unk_1F14A87D8;
  CFStringRef v14 = (void *)v2[4];
  if (v14)
  {
    v2[5] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void sub_1BB694BA0()
{
}

void caulk::concurrent::details::rt_message_call<AUToneMeister::enqueueNewToneMeister(void)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t AUToneMeister::ProcessBufferLists(AUToneMeister *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  v55[3] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 452) < a5) {
    return 4294956422;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  uint64_t result = SimpleMeters::ProcessInputBufferList((AUToneMeister *)((char *)this + 1832), a5, a3);
  if (!result)
  {
    if (a3 != a4)
    {
      unint64_t v10 = 0;
      p_mData = &a3->mBuffers[0].mData;
      for (unsigned int i = &a4->mBuffers[0].mData; ; i += 2)
      {
        int64_t v13 = (unsigned int *)*((void *)this + 268);
        unint64_t v14 = v13 == *((unsigned int **)this + 269) ? 0 : *v13;
        if (v10 >= v14) {
          break;
        }
        uint64_t result = (uint64_t)*i;
        if (*p_mData != *i) {
          uint64_t result = (uint64_t)memcpy((void *)result, *p_mData, 4 * a5);
        }
        ++v10;
        p_mData += 2;
      }
    }
    if (!*((unsigned char *)this + 2113))
    {
      char v15 = *(unsigned char *)(*((void *)this + 273) + 32);
      if (v15) {
        goto LABEL_22;
      }
      do
      {
        char v16 = v15;
        uint64_t result = ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::pop((uint64_t)this + 2304, (uint64_t *)this + 545);
        char v15 = 1;
      }
      while ((result & 1) != 0);
      if ((v16 & 1) == 0)
      {
LABEL_22:
        char v18 = 0;
      }
      else
      {
        uint64_t v17 = (const DspLib::ToneMeister::Algorithm *)*((void *)this + 544);
        uint64_t result = *((void *)this + 545);
        *((void *)this + 544) = result;
        *((void *)this + 545) = v17;
        char v18 = 1;
        if (result && v17) {
          DspLib::ToneMeister::Algorithm::copyStatesFrom((DspLib::ToneMeister::Algorithm *)result, v17);
        }
      }
      MEMORY[0x1F4188790](result);
      AudioStreamBasicDescription v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFF0);
      if (v19 >= 0x200) {
        size_t v21 = 512;
      }
      else {
        size_t v21 = v19;
      }
      bzero((char *)v50 - ((v19 + 15) & 0xFFFFFFFF0), v21);
      uint64_t v23 = (unsigned int *)*((void *)this + 268);
      if (v23 == *((unsigned int **)this + 269))
      {
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = *v23;
        if (v24)
        {
          double v25 = &a4->mBuffers[0].mData;
          double v26 = v20;
          uint64_t v27 = v24;
          do
          {
            int v28 = *v25;
            v25 += 2;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
      }
      if ((v18 & 1) != 0 || *(unsigned char *)(*((void *)this + 273) + 32))
      {
        v50[0] = v50;
        v50[1] = v50;
        if (a5 <= 1uLL) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = a5;
        }
        if (v24 == 1) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = ((v29 - 1) & 0xFFFFFFFC) + 4;
        }
        MEMORY[0x1F4188790](v22);
        unsigned int v32 = (char *)v50 - v31;
        MEMORY[0x1F4188790](v33);
        unsigned int v35 = (char *)v50 - ((v34 + 15) & 0xFFFFFFFF0);
        if (v34 >= 0x200) {
          size_t v36 = 512;
        }
        else {
          size_t v36 = v34;
        }
        bzero((char *)v50 - ((v34 + 15) & 0xFFFFFFFF0), v36);
        if (v24)
        {
          uint64_t v37 = v35;
          uint64_t v38 = v24;
          do
          {
            *v37++ = v32;
            v32 += 4 * v30;
            --v38;
          }
          while (v38);
        }
        uint64_t v39 = *((void *)this + 544);
        if (v39)
        {
          v55[0] = v20;
          v55[1] = v24;
          v55[2] = a5;
          v54[0] = v35;
          v54[1] = v24;
          v54[2] = a5;
          v53[0] = 0;
          v53[24] = 0;
          (*(void (**)(uint64_t, void *, void *, unsigned char *))(*(void *)v39 + 144))(v39, v55, v54, v53);
        }
        uint64_t v40 = *((void *)this + 545);
        if (v40)
        {
          v52[0] = v20;
          v52[1] = v24;
          v52[2] = a5;
          (*(void (**)(uint64_t, void *))(*(void *)v40 + 152))(v40, v52);
          AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 545), a5);
        }
        for (unint64_t j = 0; ; ++j)
        {
          float v42 = (unsigned int *)*((void *)this + 268);
          unint64_t v43 = v42 == *((unsigned int **)this + 269) ? 0 : *v42;
          if (j >= v43) {
            break;
          }
          DspLib::multiply(*(float **)&v35[8 * j], a5, (const float *)(*(void *)(*((void *)this + 273) + 40)+ 4 * *(void *)(*((void *)this + 273) + 16)));
          DspLib::multiply(*(float **)&v20[8 * j], a5, (const float *)(*(void *)(*((void *)this + 273) + 64)+ 4 * *(void *)(*((void *)this + 273) + 16)));
          DspLib::add(*(float **)&v20[8 * j], a5, *(const float **)&v35[8 * j]);
        }
        uint64_t v44 = *((void *)this + 273);
        unint64_t v45 = *(void *)(v44 + 24);
        unint64_t v46 = *(void *)(v44 + 16) + a5;
        BOOL v47 = v46 >= v45;
        BOOL v48 = v46 < v45;
        if (v47) {
          unint64_t v46 = 0;
        }
        *(void *)(v44 + 16) = v46;
        *(unsigned char *)(v44 + 32) = v48;
      }
      else
      {
        uint64_t v49 = *((void *)this + 544);
        if (v49)
        {
          v51[0] = v20;
          v51[1] = v24;
          v51[2] = a5;
          (*(void (**)(uint64_t, void *))(*(void *)v49 + 152))(v49, v51);
          AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 544), a5);
        }
      }
    }
    SimpleMeters::ProcessOutputBufferList((AUToneMeister *)((char *)this + 1832), a5, a4);
    return 0;
  }
  return result;
}

uint64_t AUToneMeister::SetParameter(AUToneMeister *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  BOOL isEqual = DspLib::isEqual(v13, a5, Parameter, 1.0e-20);
  uint64_t v15 = AUDspLib::SetParameter(this, a2, a3, a4, a5);
  uint64_t v16 = v15;
  if (a2 == 3) {
    *((float *)this + 542) = a5;
  }
  if (v15) {
    char v17 = 1;
  }
  else {
    char v17 = isEqual;
  }
  if ((v17 & 1) == 0) {
    AUToneMeister::enqueueNewToneMeister((uint64_t)this);
  }
  return v16;
}

uint64_t AUToneMeister::SetProperty(AUToneMeister *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  MEMORY[0x1F4188790](this);
  int v12 = v6;
  uint64_t v13 = v5;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (v6 <= 6619)
  {
    if (v6 == 6602)
    {
      if (v10 == 4)
      {
        *(_DWORD *)(v5 + 2192) = *(_DWORD *)v9;
        AUToneMeister::enqueueNewToneMeister(v5);
        return 0;
      }
      return 4294956445;
    }
    if (v6 == 6604)
    {
      if (v10 == 8)
      {
        id v14 = *v9;
        applesauce::dispatch::v1::queue::get(*v9);
        uint64_t v15 = [(id)objc_claimAutoreleasedReturnValue() objectForKeyedSubscript:@"channelSplitMode"];
        *(_DWORD *)(v13 + 2192) = [v15 intValue];
        AUToneMeister::enqueueNewToneMeister(v13);

        return 0;
      }
      return 4294956445;
    }
    goto LABEL_21;
  }
  if (v6 == 6620)
  {
    char v18 = *(int **)(v5 + 2144);
    if (v18 == *(int **)(v5 + 2152) || (int v19 = *v18) == 0)
    {
      uint64_t v23 = toneMeisterLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error: AU has zero channels, uninitialized?\n", buf, 2u);
      }

      return 4294956429;
    }
    id v20 = *v9;
    if (!v20)
    {
      toneMeisterLog();
      size_t v21 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v21->super, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, &v21->super, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error data\n", buf, 2u);
      }
      uint64_t v17 = 4294956417;
      goto LABEL_45;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *(void *)std::string buf = 200;
      size_t v21 = [MEMORY[0x1E4F28F98] propertyListWithData:v20 options:0 format:buf error:0];
      if (!v21)
      {
        uint64_t v17 = 0;
LABEL_46:

        return v17;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        toneMeisterLog();
        size_t v21 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(&v21->super, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl(&dword_1BB0CE000, &v21->super, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error: unknown plist format\n", buf, 2u);
        }
        goto LABEL_44;
      }
      size_t v21 = (NSDictionary *)v20;
    }
    DspLib::ToneMeister::Algorithm::Algorithm((DspLib::ToneMeister::Algorithm *)buf);
    uint64_t v31 = buf;
    int v32 = v19;
    char v30 = 0;
    double v25 = AUToneMeisterParameterImporter::importParameters((DspLib::ToneMeister::Algorithm **)&v31, v21, &v30, v24);
    if (v30)
    {
      atomic_store(0, (unsigned __int8 *)(v13 + 2176));
      if (*(_DWORD *)(v13 + 1756))
      {
        unint64_t v26 = 0;
        do
        {
          (*(void (**)(uint64_t, unint64_t, void, void, void, float))(*(void *)v13 + 152))(v13, v26, 0, 0, 0, *(float *)(v34 + 4 * *(unsigned int *)(*(void *)(v13 + 1688) + 4 * v26)));
          ++v26;
        }
        while (v26 < *(unsigned int *)(v13 + 1756));
      }
      atomic_store(1u, (unsigned __int8 *)(v13 + 2176));
      ++*(_DWORD *)(v13 + 2196);
      AUToneMeister::enqueueNewToneMeister(v13);
    }
    else
    {
      uint64_t v27 = toneMeisterLog();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = [v25 cStringUsingEncoding:4];
        int v35 = 136315138;
        uint64_t v36 = v29;
        _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "SetProperty( kAudioUnitProperty_DspLibDictionary) Error : importer : %s\n", (uint8_t *)&v35, 0xCu);
      }
    }
    DspLib::ToneMeister::Algorithm::~Algorithm((DspLib::ToneMeister::Algorithm *)buf);
LABEL_44:
    uint64_t v17 = 0;
LABEL_45:

    goto LABEL_46;
  }
  if (v6 != 1718773107)
  {
LABEL_21:
    uint64_t v22 = AUDspLib::SetProperty((AUDspLib *)v5, v6, v7, v8, (int *)v9, v10, v11);
    uint64_t v17 = v22;
    if (v12 == 6601 && !v22) {
      AUToneMeister::enqueueNewToneMeister(v13);
    }
    return v17;
  }
  float v16 = 0.0;
  if (*(float *)v9 >= 0.0)
  {
    float v16 = (float)(*(_DWORD *)(v5 + 1812) >> 1);
    if (*(float *)v9 <= v16) {
      float v16 = *(float *)v9;
    }
  }
  uint64_t v17 = 0;
  *(float *)(v5 + 2172) = v16;
  return v17;
}

void sub_1BB6955A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v9 = v7;

  DspLib::ToneMeister::Algorithm::~Algorithm((DspLib::ToneMeister::Algorithm *)va);
  _Unwind_Resume(a1);
}

id toneMeisterLog(void)
{
  uint64_t v0 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    uint64_t v0 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v3)
    {
      toneMeisterLog(void)::log = (uint64_t)os_log_create("com.apple.coreaudio", "AUToneMeister");
      uint64_t v0 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    }
  }
  uint64_t v1 = (void *)*((void *)v0 + 463);

  return v1;
}

uint64_t AUToneMeister::GetProperty(AUToneMeister *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  if (a2 > 6619)
  {
    if (a2 == 6620)
    {
      if (a3) {
        return 4294956430;
      }
      uint64_t v24 = @"counterSetPropertyDspLibDictionary";
      id v20 = [NSNumber numberWithInt:*((unsigned int *)this + 549)];
      double v25 = v20;
      *(void *)a5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];

      return 0;
    }
    if (a2 == 1718773107)
    {
      uint64_t v11 = (void *)*((void *)this + 544);
      if (v11)
      {
        int v12 = v11 + 411;
        int v23 = *((_DWORD *)this + 543);
        int v21 = 0;
        float v22 = 0.0;
        double v13 = (*(double (**)(void *))(*v11 + 40))(v11);
        DspLib::Biquad::amplitudeAndPhaseResponse(v12, (uint64_t)&v23, 1uLL, (uint64_t)&v22, 1, (uint64_t)&v21, 1, a4, v13, v14, v15);
        float v17 = DspLib::amp2dBSafe(v16, v22, 0.000001);
        uint64_t v10 = 0;
        int v18 = v21;
        *(float *)a5 = v17;
        a5[1] = v18;
        return v10;
      }
    }
  }
  else
  {
    if (a2 == 6602)
    {
      uint64_t v10 = 0;
      *a5 = *((_DWORD *)this + 548);
      return v10;
    }
    if (a2 == 6604)
    {
      unint64_t v26 = @"channelSplitMode";
      unsigned int v8 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 548)];
      v27[0] = v8;
      uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];

      uint64_t v10 = 0;
      *(void *)a5 = v9;
      return v10;
    }
  }

  return AUDspLib::GetProperty(this, a2, a3, a4, (CFDictionaryRef *)a5, a6);
}

void sub_1BB6958C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUToneMeister::GetPropertyInfo(AUToneMeister *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 <= 6619)
  {
    if (a2 == 6602)
    {
      uint64_t result = 0;
      *a6 = 1;
      unsigned int v7 = 4;
      goto LABEL_9;
    }
    if (a2 == 6604)
    {
      uint64_t result = 0;
      *a6 = 1;
      unsigned int v7 = 8;
LABEL_9:
      *a5 = v7;
      return result;
    }
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  if (a2 == 6620)
  {
    if (a3) {
      return 4294956430;
    }
  }
  else if (a2 != 1718773107)
  {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  uint64_t result = 0;
  *a5 = 8;
  *a6 = 1;
  return result;
}

uint64_t AUToneMeister::Reset(AUToneMeister *this)
{
  if (*((unsigned char *)this + 17))
  {
    caulk::pooled_semaphore_mutex::_lock((AUToneMeister *)((char *)this + 1824));
    uint64_t v2 = *((void *)this + 544);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 136))(v2);
    }
    uint64_t v3 = *((void *)this + 273);
    if (v3)
    {
      *(void *)(v3 + 16) = 0;
      *(unsigned char *)(v3 + 32) = 0;
    }
    caulk::pooled_semaphore_mutex::_unlock((AUToneMeister *)((char *)this + 1824));
  }
  SimpleMeters::Reset((uint64_t)this + 1832);
  return 0;
}

void sub_1BB6959FC(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void AUToneMeister::Cleanup(AUToneMeister *this)
{
  uint64_t v2 = (unsigned __int8 *)this + 2176;
  atomic_store(0, (unsigned __int8 *)this + 2176);
  caulk::concurrent::messenger::drain(*((caulk::concurrent::messenger **)this + 275));
  atomic_store(1u, v2);

  AUDspLib::Cleanup(this);
}

uint64_t AUToneMeister::Initialize(AUToneMeister *this)
{
  uint64_t v1 = AUDspLib::Initialize(this);
  if (!v1) {
    AUToneMeister::newToneMeister((AUToneMeister *)&v3);
  }
  return v1;
}

void AUToneMeister::~AUToneMeister(AUToneMeister *this)
{
  AUToneMeister::~AUToneMeister(this);

  JUMPOUT(0x1C185D360);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F14BCBE8;
  uint64_t v2 = *((void *)this + 545);
  *((void *)this + 545) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 544);
  *((void *)this + 544) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 280) = &unk_1F14BCE78;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)this + 2304);
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 276);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 273);
  *((void *)this + 273) = 0;
  if (v5) {
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 2184, v5);
  }

  AUDspLib::~AUDspLib(this);
}

uint64_t ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BCE98;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::drain_trash(a1);
  uint64_t v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v3))
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void ca::concurrent::deferred_deletion_stash<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14BCE78;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14BCE78;
  ca::concurrent::deferred_deletion_queue<DspLib::ToneMeister::Algorithm,10ul,std::default_delete<DspLib::ToneMeister::Algorithm>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

uint64_t NoiseSuppression::SNR::VPv3::SetVideoMode(uint64_t this, int a2)
{
  float v2 = 0.89;
  if (a2) {
    float v2 = 0.19;
  }
  *(float *)(this + 36) = v2;
  *(float *)(this + 92) = v2;
  return this;
}

unsigned int *NoiseSuppression::SNR::VPv3::Process(NoiseSuppression::SNR::VPv3 *this, float *a2, float *a3, const float *a4, const float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  NoiseSuppression::SNR::VPv3::Core::UpdateSNR((unsigned int *)this + 8, a2, a4, a6, a8, a10);
  uint64_t result = NoiseSuppression::SNR::VPv3::Core::UpdateSNR((unsigned int *)this + 22, a3, a5, a7, a9, a11);
  ++*((_DWORD *)this + 5);
  return result;
}

unsigned int *NoiseSuppression::SNR::VPv3::Core::UpdateSNR(unsigned int *this, float *a2, const float *a3, float *a4, float *a5, float *a6)
{
  uint64_t v6 = *this;
  if (v6)
  {
    unsigned int v7 = (float *)*((void *)this + 1);
    unsigned int v8 = v7;
    uint64_t v9 = *this;
    do
    {
      float v10 = *a4++;
      *v8++ = v10 + 1.0e-20;
      --v9;
    }
    while (v9);
    uint64_t v11 = v7;
    int v12 = a6;
    uint64_t v13 = v6;
    do
    {
      float v14 = *a2++;
      float v15 = v14;
      float v16 = *v11++;
      *v12++ = (float)(v15 / v16) + -1.0;
      --v13;
    }
    while (v13);
    float v17 = a6;
    uint64_t v18 = v6;
    do
    {
      float v19 = *v17;
      if (*v17 > 100.0) {
        float v19 = 100.0;
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
    id v20 = (float *)*((void *)this + 4);
    int v21 = a3;
    float v22 = v7;
    int v23 = v20;
    uint64_t v24 = v6;
    do
    {
      float v25 = *v21++;
      float v26 = v25;
      float v27 = *v22++;
      *v23++ = (float)(1.0 - (float)(*((float *)this + 1) + 0.01))
             + (float)(*((float *)this + 1)
                     * (float)((float)(v26 / (float)(v26 + v27)) * (float)(v26 / (float)(v26 + v27))));
      --v24;
    }
    while (v24);
    int v28 = a5;
    uint64_t v29 = v6;
    do
    {
      float v30 = *v20++;
      float v31 = v30;
      float v32 = *a6++;
      float v33 = v32;
      if (v32 < 0.0) {
        float v33 = 0.0;
      }
      float v34 = *a3++;
      float v35 = v34;
      float v36 = *v7++;
      *v28++ = (float)((float)(1.0 - v31) * (float)(v35 / v36)) + (float)(v31 * v33);
      --v29;
    }
    while (v29);
    do
    {
      float v37 = *a5;
      if (*a5 < -1.0e20) {
        float v37 = -1.0e20;
      }
      if (v37 > 100.0) {
        float v37 = 100.0;
      }
      *a5++ = v37;
      --v6;
    }
    while (v6);
  }
  return this;
}

void NoiseSuppression::SNR::VPv3::Init(NoiseSuppression::SNR::VPv3 *this)
{
  *((unsigned char *)this + 24) = 1;
}

void NoiseSuppression::SNR::VPv3::~VPv3(NoiseSuppression::SNR::VPv3 *this)
{
  NoiseSuppression::SNR::VPv3::~VPv3(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1F14BCEE0;
  float v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
}

void NoiseSuppression::SNR::SNREstimator::SetVideoMode(NoiseSuppression::SNR::SNREstimator *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315394;
    float v2 = "SNREstimator.h";
    __int16 v3 = 1024;
    int v4 = 56;
    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetVideoMode was set on an SNR estimator that does not support it.", (uint8_t *)&v1, 0x12u);
  }
}

void NoiseSuppression::SNR::TSNR::Process(NoiseSuppression::SNR::TSNR *this, const float *a2, const float *a3, const float *a4, const float *a5, const float *__A, const float *a7, float *a8, float *a9, float *a10, float *a11)
{
}

void NoiseSuppression::SNR::TSNR::Core::UpdateSNR(NoiseSuppression::SNR::TSNR::Core *this, const float *a2, const float *a3, const float *__A, float *a5, float *a6)
{
  float __B = 1.0e-20;
  vDSP_vadd(__A, 1, &__B, 0, *((float **)this + 1), 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a2, 1, a6, 1, *(unsigned int *)this);
  float v13 = 1.0;
  float __C = 100.0;
  vDSP_vclip(a6, 1, &v13, &__C, a6, 1, *(unsigned int *)this);
  float v12 = 1.0 - *((float *)this + 1);
  vDSP_vmul(a3, 1, (const float *)this + 1, 0, a5, 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a5, 1, a5, 1, *(unsigned int *)this);
  vDSP_vsub(&v12, 0, a5, 1, a5, 1, *(unsigned int *)this);
  vDSP_vsma(a6, 1, &v12, a5, 1, a5, 1, *(unsigned int *)this);
  float v11 = 1.0;
  vDSP_vadd(a5, 1, &v11, 0, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 4), 1, a5, 1, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vsq(*((const float **)this + 4), 1, *((float **)this + 4), 1, *(unsigned int *)this);
  vDSP_vmul(*((const float **)this + 4), 1, a2, 1, a5, 1, *(unsigned int *)this);
  vDSP_vdiv(*((const float **)this + 1), 1, a5, 1, a5, 1, *(unsigned int *)this);
}

void NoiseSuppression::SNR::TSNR::Init(NoiseSuppression::SNR::TSNR *this)
{
  std::vector<float>::resize((uint64_t)this + 64, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 40, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 120, *((unsigned int *)this + 22));
  std::vector<float>::resize((uint64_t)this + 96, *((unsigned int *)this + 22));
  float v2 = expf(-1.0 / (float)(*((float *)this + 36) * *((float *)this + 4)));
  *((float *)this + 9) = v2;
  *((float *)this + 23) = v2;
  *((unsigned char *)this + 24) = 1;
}

void NoiseSuppression::SNR::TSNR::~TSNR(NoiseSuppression::SNR::TSNR *this)
{
  NoiseSuppression::SNR::TSNR::~TSNR(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1F14BCF18;
  float v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  __int16 v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
}

float clsp::PilotTempSensor::processGoertzel(clsp::PilotTempSensor *this, float *a2, float *a3, uint64_t a4)
{
  clsp::PwrGoertzel<float,double>::processBufferReIm((float *)this + 30, a2, a4);
  float v8 = *((float *)this + 24) * v7;
  clsp::PwrGoertzel<float,double>::processBufferReIm((float *)this + 35, a3, a4);
  return v8;
}

float clsp::PwrGoertzel<float,double>::processBufferReIm(float *a1, float *a2, uint64_t a3)
{
  if (a3)
  {
    float v3 = *a1;
    float v4 = a1[1];
    float v5 = a1[2];
    do
    {
      float v6 = v4;
      float v7 = *a2++;
      float v4 = (float)(v7 + (float)(v3 * v4)) - v5;
      a1[1] = v4;
      a1[2] = v6;
      float v5 = v6;
      --a3;
    }
    while (a3);
  }
  else
  {
    float v4 = a1[1];
    float v6 = a1[2];
  }
  return -(float)(v6 - (float)(a1[3] * v4));
}

double clsp::PilotTempSensor::getAnalysisPeriod(clsp::PilotTempSensor *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 23);
  return (double)*(unint64_t *)&a2;
}

double clsp::PilotTempSensor::getAnalysisFreq(clsp::PilotTempSensor *this)
{
  return *((double *)this + 13);
}

float clsp::PilotTempSensor::getReb_v(clsp::PilotTempSensor *this)
{
  return *((float *)this + 28);
}

double clsp::PilotTempSensor::reset(clsp::PilotTempSensor *this)
{
  float v1 = *((double *)this + 4);
  *((float *)this + 28) = v1;
  *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
  *((_WORD *)this + 44) = 0;
  double result = 0.0;
  *((void *)this + 18) = 0;
  *(void *)((char *)this + 124) = 0;
  return result;
}

double clsp::PilotTempSensor::calcCoeffs(clsp::PilotTempSensor *this, double a2)
{
  char v4 = 0;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = vcvtmd_u64_f64(*((double *)this + 1) * a2 + 0.5);
  do
    unsigned int v6 = 1 << ++v4;
  while (1 << v4 < v5);
  *((_DWORD *)this + 23) = v6;
  float v7 = 1.0 / (double)(v6 << v4);
  *((float *)this + 24) = v7;
  double v8 = (double)v6;
  float v9 = 1.0 - exp(-(double)v6 / (*((double *)this + 3) * a2));
  *((float *)this + 2++*((_DWORD *)this + 5) = v9;
  double v10 = a2 / v8 * round(*((double *)this + 2) / (a2 / v8));
  *((double *)this + 13) = v10;
  __double2 v11 = __sincos_stret(v10 * 6.28318531 / a2);
  float v12 = v11.__cosval + v11.__cosval;
  *((float *)this + 30) = v12;
  float cosval = v11.__cosval;
  float sinval = v11.__sinval;
  *((float *)this + 33) = cosval;
  *((float *)this + 34) = sinval;
  *((float *)this + 3++*((_DWORD *)this + 5) = v12;
  *((float *)this + 38) = cosval;
  *((float *)this + 39) = sinval;
  uint64_t v15 = spp3Subsystem();
  if (v15)
  {
    if (*(unsigned char *)(v15 + 8))
    {
      float v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          double v17 = *((float *)this + 28);
          int v18 = *((_DWORD *)this + 23);
          uint64_t v20 = *((void *)this + 3);
          uint64_t v19 = *((void *)this + 4);
          int v21 = *((_DWORD *)this + 29);
          uint64_t v22 = *((void *)this + 1);
          uint64_t v23 = *((void *)this + 2);
          int v25 = 136317698;
          float v26 = "PilotTempSensor.cpp";
          __int16 v27 = 1024;
          int v28 = 77;
          __int16 v29 = 2048;
          double v30 = v17;
          __int16 v31 = 2048;
          uint64_t v32 = v19;
          __int16 v33 = 2048;
          uint64_t v34 = v22;
          __int16 v35 = 1024;
          int v36 = v18;
          __int16 v37 = 2048;
          uint64_t v38 = v20;
          __int16 v39 = 1024;
          int v40 = v21;
          __int16 v41 = 2048;
          uint64_t v42 = v23;
          __int16 v43 = 2048;
          double v44 = v10;
          __int16 v45 = 2048;
          double v46 = a2;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d rebv=%f, reb20=%f desiredwin=%f, thermalsampleperiod=%d, tau=%f, cnt=%d, f_a_des=%f, f_a=%f, fs=%f", (uint8_t *)&v25, 0x64u);
        }
      }
    }
  }
  return v10;
}

float clsp::PilotTempSensor::processBuffer(clsp::PilotTempSensor *this, const float *a2, const float *a3, unsigned int a4)
{
  shouldTraceRender();
  if (a4)
  {
    float v8 = *((float *)this + 10);
    float v9 = *((float *)this + 11);
    float v10 = *((float *)this + 13);
    float v11 = *((float *)this + 14);
    while (1)
    {
      unsigned int v12 = a4;
      unsigned int v13 = *((_DWORD *)this + 29);
      uint64_t v14 = a4 >= v13 ? v13 : a4;
      (*(void (**)(clsp::PilotTempSensor *, const float *, const float *, uint64_t))(*(void *)this + 80))(this, a2, a3, v14);
      unsigned int v18 = *((_DWORD *)this + 29);
      BOOL v19 = a4 >= v18;
      a4 -= v18;
      if (!v19) {
        break;
      }
      *(void *)((char *)this + 124) = 0;
      *((void *)this + 18) = 0;
      *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
      BOOL v20 = v15 <= v10 || v16 <= v11;
      if (!v20
        && ((float v21 = *((float *)this + 28) + (float)(*((float *)this + 25) * (float)(v17 - *((float *)this + 28))),
             *((float *)this + 28) = v21,
             v21 > v8)
          ? (BOOL v22 = v21 < v9)
          : (BOOL v22 = 0),
            v22))
      {
        char v23 = 1;
        *((unsigned char *)this + 88) = 1;
      }
      else
      {
        char v23 = 0;
      }
      a2 += v14;
      *((unsigned char *)this + 89) = v23;
      a3 += v14;
      shouldTraceRender();
      if (!a4) {
        return *((float *)this + 28) * *((float *)this + 12);
      }
    }
    shouldTraceRender();
    *((_DWORD *)this + 29) -= v12;
  }
  return *((float *)this + 28) * *((float *)this + 12);
}

void clsp::PilotTempSensor::logCoeffs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  unsigned int v5 = *(atomic_ullong **)(a2 + 8);
  v11[0] = *(clsp::CLSP_Log **)a2;
  v11[1] = (clsp::CLSP_Log *)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    clsp::TempSensorParams::logCoeffs(v4, v11);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  else
  {
    clsp::TempSensorParams::logCoeffs(v4, v11);
  }
  unsigned int v6 = *(clsp::CLSP_Log **)a2;
  if (*(void *)a2)
  {
    float __src = (float)*(unsigned int *)(a1 + 92);
    clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
    unsigned int v6 = *(clsp::CLSP_Log **)a2;
    if (*(void *)a2)
    {
      float __src = *(float *)(a1 + 96);
      clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
      unsigned int v6 = *(clsp::CLSP_Log **)a2;
      if (*(void *)a2)
      {
        float __src = *(float *)(a1 + 100);
        clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
        unsigned int v6 = *(clsp::CLSP_Log **)a2;
        if (*(void *)a2)
        {
          float v7 = *(double *)(a1 + 104);
          float __src = v7;
          clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
          unsigned int v6 = *(clsp::CLSP_Log **)a2;
        }
      }
    }
  }
  float v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    float __src = *(float *)(a1 + 120);
    clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  float v9 = *(clsp::CLSP_Log **)a2;
  float v10 = *(std::__shared_weak_count **)(a2 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    float __src = *(float *)(a1 + 140);
    clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
  }
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

float clsp::TempSensorParams::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  float v3 = *a2;
  if (*a2)
  {
    float v5 = *(double *)a1;
    float __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    float v7 = *a2;
    if (*a2)
    {
      float v8 = *(double *)(a1 + 8);
      float __src = v8;
      clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
      float v9 = *a2;
      if (*a2)
      {
        float v10 = *(double *)(a1 + 16);
        float __src = v10;
        clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
        float v11 = *a2;
        if (*a2)
        {
          float v12 = *(double *)(a1 + 24);
          float __src = v12;
          clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
          unsigned int v13 = *a2;
          if (*a2)
          {
            float __src = *(float *)(a1 + 32);
            clsp::CLSP_Log::LogCLSPData(v13, &__src, 1);
            uint64_t v14 = *a2;
            if (*a2)
            {
              float __src = *(float *)(a1 + 36);
              clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
              float v15 = *a2;
              if (*a2)
              {
                float __src = *(float *)(a1 + 40);
                clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
                float v16 = *a2;
                if (*a2)
                {
                  float __src = *(float *)(a1 + 44);
                  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
                  float v17 = *a2;
                  if (*a2)
                  {
                    float __src = *(float *)(a1 + 48);
                    clsp::CLSP_Log::LogCLSPData(v17, &__src, 1);
                    unsigned int v18 = *a2;
                    if (*a2)
                    {
                      float __src = (float)*(unint64_t *)(a1 + 56);
                      clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
                      BOOL v19 = *a2;
                      if (*a2)
                      {
                        float v20 = *(double *)(a1 + 64);
                        float __src = v20;
                        clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
                        float v21 = *a2;
                        if (*a2)
                        {
                          float v22 = *(double *)(a1 + 72);
                          float __src = v22;
                          clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *clsp::PilotTempSensor::dump(uint64_t a1, void *a2)
{
  clsp::TempSensorParams::dump(a1 + 8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\nPTSamplePeriod = ", 18);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nPTPeriodNormFactor = ", 22);
  float v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nGsmooth = ", 11);
  unsigned int v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nAnalysisFreq = ", 16);
  float v7 = (void *)std::ostream::operator<<();
  float v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n\nGoertzv:\n  ", 13);
  clsp::PwrGoertzel<float,double>::dump(a1 + 120, v8);
  float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\nGoertzi:\n  ", 13);
  clsp::PwrGoertzel<float,double>::dump(a1 + 140, v9);
  return a2;
}

void *clsp::TempSensorParams::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"DesiredWindowTime = ", 20);
  float v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\nDesiredAnalysisFreq = ", 23);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nSmoothingTau = ", 16);
  float v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nReb_20C = ", 11);
  unsigned int v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nRebMiuint64_t n = ", 10);
  float v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nRebMax = ", 10);
  float v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nRebScale = ", 12);
  float v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\nVPwrThres = ", 13);
  float v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nIPwrThres = ", 13);
  float v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\nmaxBlockSize = ", 16);
  float v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nnoiseSampleRate = ", 19);
  unsigned int v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nnoiseBandLowerCorner = ", 24);
  std::ostream::operator<<();
  return a2;
}

void *clsp::PwrGoertzel<float,double>::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"a1 = ", 5);
  float v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", s1 = ", 7);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", s2 = ", 7);
  std::ostream::operator<<();
  return a2;
}

void clsp::PilotTempSensor::~PilotTempSensor(clsp::PilotTempSensor *this)
{
}

double clsp::BandTempSensor::getAnalysisPeriod(clsp::BandTempSensor *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 23);
  return (double)*(unint64_t *)&a2;
}

double clsp::BandTempSensor::getAnalysisFreq(clsp::BandTempSensor *this)
{
  return *((double *)this + 2);
}

float clsp::BandTempSensor::getReb_v(clsp::BandTempSensor *this)
{
  return *((float *)this + 26);
}

uint64_t clsp::BandTempSensor::reset(clsp::BandTempSensor *this)
{
  float v2 = *((double *)this + 4);
  *((float *)this + 26) = v2;
  *((_WORD *)this + 44) = 0;
  *(void *)((char *)this + 108) = 0;
  *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
  *(void *)((char *)this + 132) = 0;
  *((void *)this + 19) = 0;
  (*(void (**)(void))(**((void **)this + 20) + 88))(*((void *)this + 20));
  float v3 = *(uint64_t (**)(void))(**((void **)this + 21) + 88);

  return v3();
}

double clsp::BandTempSensor::calcCoeffs(clsp::BandTempSensor *this, double a2)
{
  double v4 = *((double *)this + 9);
  long double v5 = exp(*((double *)this + 10) * -6.28318531 / v4);
  double v6 = *((double *)this + 1) * v4 + 0.5;
  *(float *)&long double v5 = v5;
  *(float *)&long double v5 = -*(float *)&v5;
  *((_DWORD *)this + 30) = LODWORD(v5);
  *(void *)((char *)this + 124) = 0xBF8000003F800000;
  *((_DWORD *)this + 3++*((_DWORD *)this + 5) = LODWORD(v5);
  unsigned int v7 = vcvtmd_u64_f64(v6);
  *((void *)this + 18) = 0xBF8000003F800000;
  *((_DWORD *)this + 23) = v7;
  *(float *)&double v6 = 1.0 / (double)v7;
  *((_DWORD *)this + 24) = LODWORD(v6);
  float v8 = 1.0 - exp(-(double)v7 / (*((double *)this + 3) * a2));
  *((float *)this + 2++*((_DWORD *)this + 5) = v8;
  return 0.0;
}

float clsp::BandTempSensor::processBuffer(clsp::BandTempSensor *this, const float *a2, const float *a3, uint64_t a4)
{
  shouldTraceRender();
  int v39 = a4;
  int v40 = a4;
  unsigned int v38 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 144))(*((void *)this + 20), a4);
  int v37 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 21) + 144))(*((void *)this + 21), a4);
  (*(void (**)(void, const float *, void, void, void, int *, unsigned int *, uint64_t, uint64_t))(**((void **)this + 20) + 32))(*((void *)this + 20), a2, 0, *((void *)this + 22), 0, &v40, &v38, 1, 1);
  (*(void (**)(void, const float *, void, void, void, int *, int *, uint64_t, uint64_t))(**((void **)this + 21) + 32))(*((void *)this + 21), a3, 0, *((void *)this + 25), 0, &v39, &v37, 1, 1);
  unsigned int v8 = v38;
  if (v38)
  {
    unint64_t v9 = 0;
    float v10 = (const float *)*((void *)this + 22);
    float v11 = (const float *)*((void *)this + 25);
    uint64_t v12 = 4 * v38;
    do
    {
      float v13 = v10[v9 / 4];
      float v14 = (float)((float)(*((float *)this + 32) * *((float *)this + 33)) + (float)(v13 * *((float *)this + 31)))
          - (float)(*((float *)this + 34) * *((float *)this + 30));
      *((float *)this + 33) = v13;
      *((float *)this + 34) = v14;
      v10[v9 / 4] = v14;
      float v15 = v11[v9 / 4];
      float v16 = (float)((float)(*((float *)this + 37) * *((float *)this + 38)) + (float)(v15 * *((float *)this + 36)))
          - (float)(*((float *)this + 39) * *((float *)this + 35));
      *((float *)this + 38) = v15;
      *((float *)this + 39) = v16;
      v11[v9 / 4] = v16;
      v9 += 4;
    }
    while (v12 != v9);
    float v17 = *((float *)this + 10);
    float v18 = *((float *)this + 11);
    float v19 = *((float *)this + 13);
    float v20 = *((float *)this + 14);
    while (1)
    {
      unsigned int v21 = *((_DWORD *)this + 29);
      vDSP_Length v22 = v8 >= v21 ? v21 : v8;
      uint64_t __C = 0;
      vDSP_svesq(v10, 1, (float *)&__C + 1, v22);
      vDSP_svesq(v11, 1, (float *)&__C, v22);
      float v23 = *((float *)&__C + 1) + *((float *)this + 27);
      float v24 = *(float *)&__C + *((float *)this + 28);
      *((float *)this + 27) = v23;
      *((float *)this + 28) = v24;
      unsigned int v25 = *((_DWORD *)this + 29);
      unsigned int v26 = v8 - v25;
      if (v8 < v25) {
        break;
      }
      float v27 = *((float *)this + 24);
      float v28 = v23 * v27;
      float v29 = v24 * v27;
      if (v28 <= v19 || v29 <= v20) {
        goto LABEL_19;
      }
      float v31 = v23 / v24;
      if (v31 < 0.0) {
        float v31 = 0.0;
      }
      float v32 = *((float *)this + 26) + (float)(*((float *)this + 25) * (float)(sqrtf(v31) - *((float *)this + 26)));
      *((float *)this + 26) = v32;
      if (v32 > v17 && v32 < v18)
      {
        char v34 = 1;
        *((unsigned char *)this + 88) = 1;
      }
      else
      {
LABEL_19:
        char v34 = 0;
      }
      v10 += v22;
      v11 += v22;
      *((unsigned char *)this + 89) = v34;
      *((_DWORD *)this + 27) = 0;
      *((_DWORD *)this + 28) = 0;
      *((_DWORD *)this + 29) = *((_DWORD *)this + 23);
      shouldTraceRender();
      unsigned int v8 = v26;
      if (!v26) {
        return *((float *)this + 26) * *((float *)this + 12);
      }
    }
    shouldTraceRender();
    *((_DWORD *)this + 29) -= v8;
  }
  return *((float *)this + 26) * *((float *)this + 12);
}

void clsp::BandTempSensor::logCoeffs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  long double v5 = *(atomic_ullong **)(a2 + 8);
  v9[0] = *(clsp::CLSP_Log **)a2;
  v9[1] = (clsp::CLSP_Log *)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    clsp::TempSensorParams::logCoeffs(v4, v9);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  else
  {
    clsp::TempSensorParams::logCoeffs(v4, v9);
  }
  double v6 = *(clsp::CLSP_Log **)a2;
  if (*(void *)a2)
  {
    float __src = (float)*(unsigned int *)(a1 + 92);
    clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
    unsigned int v7 = *(clsp::CLSP_Log **)a2;
    if (*(void *)a2)
    {
      float __src = *(float *)(a1 + 96);
      clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
      unsigned int v8 = *(clsp::CLSP_Log **)a2;
      if (*(void *)a2)
      {
        float __src = *(float *)(a1 + 100);
        clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
      }
    }
  }
}

void *clsp::BandTempSensor::dump(uint64_t a1, void *a2)
{
  clsp::TempSensorParams::dump(a1 + 8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\nSamplePeriod = ", 16);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nPeriodNormFactor = ", 20);
  long double v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nGsmooth = ", 11);
  double v6 = (void *)std::ostream::operator<<();
  unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nDCBlkV = ", 10);
  clsp::IIROrder1<float>::dump(a1 + 120, v7);
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nDCBlkI = ", 10);
  clsp::IIROrder1<float>::dump(a1 + 140, v8);
  return a2;
}

void clsp::BandTempSensor::~BandTempSensor(clsp::BandTempSensor *this)
{
  *(void *)this = &unk_1F14BE558;
  float v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F14BE558;
  float v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

float clsp::CLSPKernel_v3::CalcThermalFFCoeffs(clsp::CLSPKernel_v3 *this, double a2, double a3)
{
  LODWORD(a3) = *((_DWORD *)this + 3);
  double v4 = a2 / (double)*(unint64_t *)&a3;
  double v5 = 1.0 / v4 * 1.57079633 / (*((double *)this + 60) * *((double *)this + 110));
  double v6 = *((double *)this + 58) * v5;
  *(float *)&double v5 = v5 * -2.0 + 1.0;
  *((_DWORD *)this + 212) = LODWORD(v5);
  *(float *)&double v5 = v6;
  *((_DWORD *)this + 213) = LODWORD(v5);
  *((_DWORD *)this + 214) = LODWORD(v5);
  *(float *)&double v4 = v4;
  *((_DWORD *)this + 227) = vcvtps_u32_f32(*(float *)&v4);
  double v7 = a2 * 0.00999999978;
  double v8 = 0.0;
  if (v7 >= 0.00001) {
    double v8 = exp(-4.60517019 / v7);
  }
  float result = 1.0 - v8;
  *((float *)this + 218) = result;
  return result;
}

double clsp::CLSPKernel_v3::CalcThermalCoeffs(clsp::CLSPKernel_v3 *this, double a2, double a3, double a4, uint64_t a5, const char *a6)
{
  int v6 = 0;
  double v7 = *((double *)this + 60);
  double v8 = *((double *)this + 61);
  double v9 = *((double *)this + 58);
  double v10 = *((double *)this + 59);
  unsigned int v11 = vcvtmd_u64_f64(a2 / 200.0 + 0.5);
  do
    unsigned int v12 = 1 << ++v6;
  while (1 << v6 < v11);
  *((_DWORD *)this + 3) = v12;
  *((_DWORD *)this + 4) = v6;
  float v13 = 1.0 / (double)v12;
  double v14 = a2 / (double)v12;
  float v15 = a3;
  *((float *)this + ++*((_DWORD *)this + 5) = v13;
  *((float *)this + 6) = v15;
  float v16 = 1.0 / a4;
  double v17 = 1.0 / v14 * 1.57079633;
  double v18 = v17 / v7;
  double v19 = v17 / v8;
  double v20 = v9 * v18;
  *(float *)&double v18 = v18 * -2.0 + 1.0;
  *((float *)this + 7) = v16;
  *((_DWORD *)this + 8) = LODWORD(v18);
  float v21 = v19 * -2.0 + 1.0;
  *(float *)&double v18 = v20;
  *((_DWORD *)this + 9) = LODWORD(v18);
  *((_DWORD *)this + 10) = LODWORD(v18);
  *(float *)&double v19 = v10 * v19;
  *((float *)this + 11) = v21;
  *((_DWORD *)this + 12) = LODWORD(v19);
  *((_DWORD *)this + 13) = LODWORD(v19);
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 CalcCoeffs thermal params Ch %u: Fs_th=%f; Tc_vc=%f; Tc_mg=%f; T_sett_vc=%f; T_sett_mg=%f; FFfactor=%f; ",
    a6,
    *((unsigned int *)this + 22),
    *(void *)&v14,
    *(void *)&v7,
    *(void *)&v8,
    *(void *)&v9,
    *(void *)&v10,
    *((void *)this + 110));
  return result;
}

double clsp::CLSPKernel_v3::SaveThermalState(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 108);
  int v3 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 864);
  double result = *(double *)(a1 + 60);
  *(double *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 20) = v3;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t clsp::CLSPKernel_v3::RestoreThermalState(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    *(void *)(a1 + 60) = *(void *)(a2 + 8);
    int v2 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 68) = v2;
    *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    clsp::CLSPKernel_v3::ResetThermalState((clsp::CLSPKernel_v3 *)a1);
  }
  return 0;
}

float clsp::CLSPKernel_v3::ResetThermalState(clsp::CLSPKernel_v3 *this)
{
  *((_DWORD *)this + 27) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 111) = _D0;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 68) = xmmword_1BB879DF0;
  *((_DWORD *)this + 21++*((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 217) = 0;
  float v6 = *((float *)this + 21);
  *(float *)&_D0 = *((float *)this + 32) - v6;
  float v7 = *((double *)this + 58);
  float v8 = *((double *)this + 59);
  float v9 = v7 + v8;
  float v10 = (float)(*(float *)&_D0 * v7) / (float)(v7 + v8);
  *(float *)&_D0 = (float)(*(float *)&_D0 * v8) / v9;
  *((float *)this + 1++*((_DWORD *)this + 5) = v10;
  *((_DWORD *)this + 16) = _D0;
  *((float *)this + 216) = v10;
  float result = (float)(v10 + *(float *)&_D0) + v6;
  *((float *)this + 3++*((_DWORD *)this + 5) = result;
  *((float *)this + 224) = result;
  return result;
}

void clsp::CLSPKernel_v3::UpdateThermalState(clsp::CLSPKernel_v3 *this, double a2)
{
  if (a2 >= 0.5)
  {
    double v4 = *((double *)this + 60) * 0.318309886;
    double v5 = *((double *)this + 61) * 0.318309886;
    double v6 = *((float *)this + 15);
    float v7 = exp(-a2 / v4) * v6;
    *((float *)this + 1++*((_DWORD *)this + 5) = v7;
    double v8 = *((float *)this + 16);
    float v9 = exp(-a2 / v5) * v8;
    *((float *)this + 16) = v9;
    double v10 = v4 * *((double *)this + 110);
    double v11 = *((float *)this + 216);
    float v12 = exp(-a2 / v10) * v11;
    *((float *)this + 216) = v12;
    double v13 = (float)(*((float *)this + 27) + -1.0);
    float v14 = v13 * exp(a2 / (*((double *)this + 44) / -4.60517019)) + 1.0;
    if (v14 > 1.0) {
      float v14 = 1.0;
    }
    if (v14 < 0.01) {
      float v14 = 0.01;
    }
    *((float *)this + 27) = v14;
  }
}

void clsp::CLSPKernel_v3::LogCoeffs(clsp::CLSPKernel_v3 *this)
{
  ClosedLoopSpeakerProtectionKernel::LogCoeffs(this);
  int v2 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
  if (v2)
  {
    float __src = *((float *)this + 218);
    clsp::CLSP_Log::LogCLSPData(v2, &__src, 1);
    int v3 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
    if (v3)
    {
      float v4 = *((double *)this + 110);
      float __src = v4;
      clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
      double v5 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
      if (v5)
      {
        float __src = (float)*((unsigned int *)this + 227);
        clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
        double v6 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
        if (v6)
        {
          float __src = (float)*((unint64_t *)this + 120);
          clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
          float v7 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
          if (v7)
          {
            float v8 = *((double *)this + 121);
            float __src = v8;
            clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
            float v9 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
            if (v9)
            {
              float __src = *((float *)this + 212);
              clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
              double v10 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
              if (v10)
              {
                float __src = *((float *)this + 213);
                clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
                double v11 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 101);
                if (v11)
                {
                  float __src = *((float *)this + 214);
                  clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
                }
              }
            }
          }
        }
      }
    }
  }
}

void clsp::CLSPKernel_v3::PrintCoeffs(clsp::CLSPKernel_v3 *this, uint64_t a2, const char *a3)
{
  ClosedLoopSpeakerProtectionKernel::PrintCoeffs(this, a2, a3);
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 coeffs Ch %u:\n ff_ac1=%f;\n"
    " ff_bc0=%f;\n"
    " ff_bc1=%f;\n"
    " TGainTimerInit=%d;\n"
    " mHardAttack=%f;\n"
    " DelaySamples=%d;\n"
    " ",
    v4,
    *((unsigned int *)this + 22),
    *((float *)this + 212),
    *((float *)this + 213),
    *((float *)this + 214),
    *((unsigned int *)this + 227),
    *((float *)this + 218),
    *((void *)this + 120));
}

uint64_t clsp::CLSPKernel_v3::ZapBadValues(uint64_t this)
{
  float v1 = *(float *)(this + 108);
  if (v1 < 0.01 || v1 > 1.0) {
    *(_DWORD *)(this + 108) = 1008981770;
  }
  float v3 = *(float *)(this + 888);
  if (v3 < 0.01 || v3 > 1.0) {
    *(_DWORD *)(this + 888) = 1008981770;
  }
  float v5 = *(float *)(this + 892);
  if (v5 < 0.01 || v5 > 1.0) {
    *(_DWORD *)(this + 892) = 1008981770;
  }
  float v7 = *(float *)(this + 68);
  if (v7 < 0.01 || v7 > 1.0) {
    *(_DWORD *)(this + 68) = 1008981770;
  }
  float v9 = *(float *)(this + 864);
  if (v9 < 0.0 || v9 > 1000.0)
  {
    float v10 = *(float *)(this + 84);
    float v11 = *(float *)(this + 128) - v10;
    float v12 = *(double *)(this + 464);
    float v13 = *(double *)(this + 472);
    float v14 = v12 + v13;
    float v15 = (float)(v11 * v12) / (float)(v12 + v13);
    float v16 = (float)(v11 * v13) / v14;
    *(float *)(this + 60) = v15;
    *(float *)(this + 64) = v16;
    *(float *)(this + 864) = v15;
    float v17 = (float)(v15 + v16) + v10;
    *(float *)(this + 140) = v17;
    *(float *)(this + 896) = v17;
  }
  float v18 = *(float *)(this + 860);
  double v19 = fabsf(v18);
  if (v19 >= 1.0e15 || v19 <= 1.0e-15) {
    float v18 = 0.0;
  }
  *(float *)(this + 860) = v18;
  float v21 = *(float *)(this + 868);
  double v22 = fabsf(v21);
  if (v22 >= 1.0e15 || v22 <= 1.0e-15) {
    float v21 = 0.0;
  }
  *(float *)(this + 868) = v21;
  if (*(_DWORD *)(this + 904) > *(_DWORD *)(this + 908)) {
    *(_DWORD *)(this + 904) = 0;
  }
  return ClosedLoopSpeakerProtectionKernel::ZapBadValues(this);
}

uint64_t clsp::CLSPKernel_v3::CalcCoeffs(clsp::CLSPKernel_v3 *this, double a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  double v3 = *((float *)this + 26);
  double v4 = *((double *)this + 50);
  double v5 = *((double *)this + 54);
  double v65 = *((double *)this + 56);
  double v66 = *((double *)this + 52);
  double v53 = *((double *)this + 57);
  double v6 = 1.0 / a2;
  double v56 = *((double *)this + 49);
  double v57 = *((double *)this + 53);
  double v67 = v57 * v3 / (v56 + v3 + *((double *)this + 48));
  double v7 = sqrt(v66 / v4);
  double v58 = *((double *)this + 51);
  double v59 = v4;
  double v8 = sqrt(v4 * v66) / (v58 + v65 * v65 / v3);
  if (v8 >= 0.50999999) {
    double v9 = v8;
  }
  else {
    double v9 = 0.50999999;
  }
  double v10 = -(v6 * v7);
  long double v11 = exp(v10 / (v9 + v9)) * -2.0;
  long double v68 = v11 * cos(v6 * v7 * sqrt(1.0 - 1.0 / (v9 * (v9 * 4.0))));
  double v63 = exp(v10 / v9);
  double v12 = *((double *)this + 55);
  double v60 = v5;
  double v13 = 1.0 / sqrt(v5) * v7;
  double v14 = -(v6 * v13);
  double v55 = v12 + v12;
  long double v15 = exp(v14 / (v12 + v12)) * -2.0;
  double v69 = v13;
  double v70 = v6;
  double v16 = v6 * v13;
  double v17 = v53;
  double v18 = v12;
  double v19 = sqrt(1.0 - 1.0 / (v12 * (v12 * 4.0)));
  long double v20 = v15 * cos(v16 * v19);
  long double v21 = exp(v14 / v18);
  double v22 = v65 * (v67 * 1000.0);
  double v61 = v3;
  double v23 = v22 / (v66 * v3);
  long double v24 = v23 * (v21 + v20 + 1.0);
  float v25 = v20;
  float v26 = -v25;
  *((float *)this + 64) = v26;
  *(float *)&long double v21 = v21;
  *(float *)&long double v21 = -*(float *)&v21;
  *((_DWORD *)this + 6++*((_DWORD *)this + 5) = LODWORD(v21);
  *((_DWORD *)this + 66) = 1065353216;
  float v27 = v68;
  *((float *)this + 67) = v27;
  float v28 = v63;
  *((float *)this + 68) = v28;
  float v29 = 1.0 / (v63 + 1.0 - v68);
  *((float *)this + 37) = v29;
  *((float *)this + 38) = v26;
  *(float *)&long double v24 = v24;
  *((_DWORD *)this + 39) = LODWORD(v21);
  *((_DWORD *)this + 40) = LODWORD(v24);
  float v30 = v53;
  *((float *)this + 43) = v30;
  *((float *)this + 47) = -v27;
  *((float *)this + 48) = -v28;
  *(float *)&long double v21 = v23 * (v63 + v68 + 1.0);
  *((_DWORD *)this + 49) = LODWORD(v21);
  *((float *)this + 52) = v30;
  *((float *)this + 73) = -v27;
  *((float *)this + 74) = -v28;
  *((float *)this + 7++*((_DWORD *)this + 5) = v28;
  *((float *)this + 76) = v27;
  *((_DWORD *)this + 77) = 1065353216;
  double v64 = v9;
  if (v9 >= 1.0) {
    double v23 = v9 * v22 / (v66 * v3);
  }
  uint64_t v31 = 0;
  if (v23 > v53) {
    double v32 = v23;
  }
  else {
    double v32 = v53;
  }
  double v54 = v32 * 1.5;
  memset(v72, 0, 12);
  double v33 = (v32 * 1.5 - v53) / 9.0;
  memset(v71, 0, 12);
  do
  {
    float v34 = v17 + (double)(int)v31 * v33;
    __A[v31] = v34;
    double v35 = sqrt(v34 / v17);
    double v36 = v19;
    double v37 = v17;
    double v38 = v18;
    double v39 = v69 * v35;
    double v40 = v69 * v35 * -v70;
    long double v41 = exp(v40 / v55);
    long double v42 = v41 + v41;
    double v43 = v70 * v39;
    double v18 = v38;
    double v17 = v37;
    double v19 = v36;
    float v44 = cos(v36 * v43) * v42;
    v74[v31] = v44;
    float v45 = exp(v40 / v18);
    v73[v31++] = -v45;
  }
  while (v31 != 10);
  clsp::polyfit<10ul,2ul>(__A, v74, (float *)v72);
  clsp::polyfit<10ul,2ul>(__A, v73, (float *)v71);
  *((int32x2_t *)this + 28) = vrev64_s32(*(int32x2_t *)((char *)v72 + 4));
  __int32 v46 = v72[0].i32[0];
  *((int32x2_t *)this + 30) = vrev64_s32(*(int32x2_t *)((char *)v71 + 4));
  float v47 = v54;
  *((_DWORD *)this + 62) = v71[0].i32[0];
  *((float *)this + 63) = v47;
  *((_DWORD *)this + 58) = v46;
  *((float *)this + 59) = v47;
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel_v3 CalcCoeffs physical params Ch %u: fs=%f; Reb=%f; Rampout=%f; mt=%f; ct=%f; kt=%f; ag=%f; g_bw=%f; mQ_d"
    "=%f; phi=%f; x_lim=%f; ageff=%f; Q_cd=%f; Q_cn=%f; w_d=%f; LookaheadDelay=%f; ",
    v48,
    *((unsigned int *)this + 22),
    *(void *)&a2,
    *(void *)&v61,
    *(void *)&v56,
    *(void *)&v59,
    *(void *)&v58,
    *(void *)&v66,
    *(void *)&v57,
    *(void *)&v60,
    *((void *)this + 55),
    *(void *)&v65,
    *(void *)&v17,
    *(void *)&v67,
    *(void *)&v18,
    *(void *)&v64,
    *(void *)&v69,
    *((void *)this + 121));
  (*(void (**)(clsp::CLSPKernel_v3 *, double, double, double))(*(void *)this + 152))(this, a2, v67, v61);
  (*(void (**)(clsp::CLSPKernel_v3 *, double))(*(void *)this + 160))(this, a2);
  float v49 = a2;
  float v50 = (float)(*((float *)this + 124) * v49) / (float)*((unsigned int *)this + 3);
  *((_DWORD *)this + 12++*((_DWORD *)this + 5) = vcvtas_u32_f32(v50);
  *((float *)this + 126) = 1.0 / (float)roundf(v50);
  (*(void (**)(clsp::CLSPKernel_v3 *, double))(*(void *)this + 96))(this, a2);
  unint64_t v51 = vcvtad_u64_f64(*((double *)this + 121) * 0.001 * a2);
  if (v51 >= (uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2) {
    unint64_t v51 = (uint64_t)(*((void *)this + 115) - *((void *)this + 114)) >> 2;
  }
  *((void *)this + 120) = v51;
  return (*(uint64_t (**)(clsp::CLSPKernel_v3 *))(*(void *)this + 112))(this);
}

float clsp::CLSPKernel_v3::Process(clsp::CLSPKernel_v3 *this, const float *a2, float *a3, unsigned int a4)
{
  if (*((unsigned char *)this + 840))
  {
    (*(void (**)(clsp::CLSPKernel_v3 *))(*(void *)this + 120))(this);
    *((unsigned char *)this + 840) = 0;
  }
  unint64_t v8 = *((void *)this + 120);
  double v9 = (void *)*((void *)this + 117);
  double v10 = (const void *)*((void *)this + 114);
  uint64_t v11 = 4 * a4;
  if (v8 <= a4)
  {
    memcpy(v9, v10, 4 * v8);
    memcpy((void *)(*((void *)this + 117) + 4 * *((void *)this + 120)), a2, 4 * (a4 - *((void *)this + 120)));
    double v12 = (void *)*((void *)this + 114);
    uint64_t v15 = *((void *)this + 120);
    double v13 = &a2[a4 - v15];
    size_t v14 = 4 * v15;
  }
  else
  {
    memcpy(v9, v10, 4 * a4);
    memcpy(*((void **)this + 114), (const void *)(*((void *)this + 114) + 4 * a4), 4 * (*((void *)this + 120) - a4));
    double v12 = (void *)(*((void *)this + 114) + 4 * (*((void *)this + 120) - a4));
    double v13 = a2;
    size_t v14 = 4 * a4;
  }
  memcpy(v12, v13, v14);
  int v16 = *((_DWORD *)this + 2);
  float v17 = *((float *)this + 15);
  float v130 = *((float *)this + 14);
  float v18 = *((float *)this + 18);
  float v141 = *((float *)this + 19);
  float v132 = *((float *)this + 16);
  float v133 = *((float *)this + 17);
  float v19 = *((float *)this + 69);
  float v20 = *((float *)this + 70);
  float v21 = *((float *)this + 71);
  float v22 = *((float *)this + 72);
  float v23 = *((float *)this + 84);
  float v25 = *((float *)this + 44);
  float v24 = *((float *)this + 45);
  float v26 = *((float *)this + 46);
  float v28 = *((float *)this + 53);
  float v27 = *((float *)this + 54);
  float v142 = *((float *)this + 217);
  float v144 = *((float *)this + 55);
  float v140 = *((float *)this + 83);
  if (a4)
  {
    unint64_t v29 = 0;
    float v127 = *((float *)this + 5);
    float v128 = *((float *)this + 6);
    int v30 = *((_DWORD *)this + 3);
    float v104 = *((float *)this + 10);
    float v105 = *((float *)this + 9);
    float v103 = *((float *)this + 8);
    float v102 = *((float *)this + 13);
    float v101 = *((float *)this + 12);
    float v100 = *((float *)this + 11);
    float v99 = *((float *)this + 21);
    float v125 = *((float *)this + 66);
    float v126 = *((float *)this + 7);
    float v123 = *((float *)this + 68);
    float v124 = *((float *)this + 67);
    float v122 = *((float *)this + 56);
    float v121 = *((float *)this + 57);
    float v120 = *((float *)this + 60);
    float v119 = *((float *)this + 61);
    float v118 = *((float *)this + 62);
    float v117 = *((float *)this + 58);
    float v116 = *((float *)this + 59);
    float v139 = *((float *)this + 41);
    float v138 = *((float *)this + 42);
    float v114 = 1.0 / *((float *)this + 43);
    float v115 = *((float *)this + 43);
    float v113 = *((float *)this + 38);
    double v112 = *((float *)this + 37);
    float v31 = *((float *)this + 54);
    float v32 = *((float *)this + 45);
    float v33 = *((float *)this + 72);
    float v34 = *((float *)this + 70);
    float v110 = *((float *)this + 39);
    float v111 = *((float *)this + 40);
    float v108 = *((float *)this + 47);
    float v109 = *((float *)this + 49);
    float v106 = *((float *)this + 82);
    float v107 = *((float *)this + 48);
    while (1)
    {
      float v35 = v19;
      float v36 = v21;
      float v145 = v25;
      float v146 = v28;
      float v37 = v116;
      if (v23 < v116) {
        float v37 = v23;
      }
      float v38 = (float)(v122 + (float)(v121 * v37)) + (float)(v117 * (float)(v37 * v37));
      float v39 = (float)(v120 + (float)(v119 * v37)) + (float)(v118 * (float)(v37 * v37));
      float v41 = a2[v29 / 4];
      uint64_t v42 = *((void *)this + 117);
      float v43 = *(float *)(v42 + v29);
      float v44 = -1.5;
      if (v43 >= -1.5) {
        float v44 = *(float *)(v42 + v29);
      }
      if (v43 > 1.5) {
        float v44 = 1.5;
      }
      float v136 = v36;
      float v137 = v35;
      float v135 = v44;
      float v131 = (float)(v120 + (float)(v119 * v37)) + (float)(v118 * (float)(v37 * v37));
      float v134 = (float)((float)((float)((float)(v124 * v35) + (float)(v125 * v44)) + (float)(v123 * v34))
                   + (float)(v38 * v36))
           + (float)(v39 * v33);
      if (*((unsigned char *)this + 125))
      {
        float v40 = (v38 + 1.0 - v39) * v112;
        float v45 = v134 * v40;
      }
      else
      {
        float v45 = a2[v29 / 4];
      }
      __int32 v46 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 69);
      if (v46)
      {
        __src[0] = v38;
        clsp::CLSP_Log::LogCLSPData(v46, __src, 1);
        float v47 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 69);
        if (v47)
        {
          __src[0] = v131;
          clsp::CLSP_Log::LogCLSPData(v47, __src, 1);
          BOOL v48 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 69);
          if (v48)
          {
            __src[0] = v41;
            clsp::CLSP_Log::LogCLSPData(v48, __src, 1);
          }
        }
      }
      float v49 = *((float *)this + 27);
      if (v133 >= v49) {
        uint64_t v50 = 120;
      }
      else {
        uint64_t v50 = 116;
      }
      float v51 = v49 + (float)((float)(v133 - v49) * *(float *)((char *)this + v50));
      *((float *)this + 27) = v51;
      float v52 = *((float *)this + 222);
      float v129 = v38;
      if (v52 < v51)
      {
        float v51 = v51 + (float)(*((float *)this + 218) * (float)(v52 - v51));
        *((float *)this + 27) = v51;
      }
      float v53 = v141 + (float)((float)((float)(v128 * v18) * (float)(v126 * (float)(v128 * v18))) * v127);
      float v54 = v142 + (float)((float)(v126 * (float)((float)(v128 * v45) * (float)(v128 * v45))) * v127);
      BOOL v55 = __OFSUB__(v16--, 1);
      if ((v16 < 0) ^ v55 | (v16 == 0)) {
        break;
      }
      float v65 = v141 + (float)((float)((float)(v128 * v18) * (float)(v126 * (float)(v128 * v18))) * v127);
LABEL_52:
      float v141 = v65;
      if (*((unsigned char *)this + 124))
      {
        float v77 = *((float *)this + 27);
        float v18 = v45 * v77;
        float v41 = v41 * v77;
      }
      else
      {
        float v18 = v45;
      }
      a3[v29 / 4] = v18;
      uint64_t v78 = *((unsigned int *)this + 22);
      unsigned int v79 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 65);
      float v142 = v54;
      if (v79)
      {
        __src[0] = v18;
        clsp::CLSP_Log::LogCLSPData(v79, __src, 1);
        uint64_t v78 = *((unsigned int *)this + 22);
      }
      float v80 = (float)(v111 * v41) + (float)(v113 * v145);
      float v25 = v80 + (float)(v110 * v32);
      float v81 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 69);
      if (v81)
      {
        __src[0] = v80 + (float)(v110 * v32);
        clsp::CLSP_Log::LogCLSPData(v81, __src, 1);
        uint64_t v78 = *((unsigned int *)this + 22);
        float v81 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 69);
      }
      float v82 = v139;
      float v83 = -v25;
      if (v25 >= 0.0) {
        float v83 = v25;
      }
      if (v83 > v26) {
        float v82 = v138;
      }
      float v26 = v26 + (float)(v82 * (float)(v83 - v26));
      if (v115 >= v26) {
        float v84 = v115;
      }
      else {
        float v84 = v26;
      }
      if (v81)
      {
        __src[0] = v26;
        clsp::CLSP_Log::LogCLSPData(v81, __src, 1);
        uint64_t v78 = *((unsigned int *)this + 22);
        int v85 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 69);
        if (v85)
        {
          __src[0] = v84;
          clsp::CLSP_Log::LogCLSPData(v85, __src, 1);
          uint64_t v78 = *((unsigned int *)this + 22);
        }
      }
      float v86 = (float)(v109 * v18) + (float)(v108 * v146);
      float v28 = v86 + (float)(v107 * v31);
      __int16 v87 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 65);
      if (v87)
      {
        __src[0] = v86 + (float)(v107 * v31);
        clsp::CLSP_Log::LogCLSPData(v87, __src, 1);
        uint64_t v78 = *((unsigned int *)this + 22);
      }
      float v88 = -v28;
      if (v28 >= 0.0) {
        float v88 = v28;
      }
      float v89 = v139;
      if (v88 > v144) {
        float v89 = v138;
      }
      float v90 = v144 + (float)(v89 * (float)(v88 - v144));
      float v91 = v140 + (float)(v106 * (float)(fmaxf(v114 * v90, 1.0) - v140));
      int v92 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 69);
      if (v92)
      {
        __src[0] = v91;
        clsp::CLSP_Log::LogCLSPData(v92, __src, 1);
        uint64_t v78 = *((unsigned int *)this + 22);
      }
      float v140 = v91;
      float v23 = v84 * v91;
      float v93 = (clsp::CLSP_Log *)*((void *)this + 2 * v78 + 65);
      if (v93)
      {
        __src[0] = v90;
        clsp::CLSP_Log::LogCLSPData(v93, __src, 1);
        __int16 v94 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 65);
        if (v94)
        {
          __src[0] = v23;
          clsp::CLSP_Log::LogCLSPData(v94, __src, 1);
        }
      }
      float v144 = v90;
      v29 += 4;
      float v24 = v145;
      float v27 = v146;
      float v31 = v146;
      float v32 = v145;
      float v22 = v136;
      float v20 = v137;
      float v33 = v136;
      float v34 = v137;
      float v21 = v134;
      float v19 = v135;
      if (v11 == v29) {
        goto LABEL_83;
      }
    }
    float v56 = (float)((float)(v102 * v130) + (float)(v101 * v53)) + (float)(v100 * v132);
    float v143 = (float)((float)(v104 * v130) + (float)(v105 * v53)) + (float)(v103 * v17);
    *((float *)this + 3++*((_DWORD *)this + 5) = v99 + (float)(v143 + v56);
    float v57 = (float)((float)(*((float *)this + 214) * *((float *)this + 215)) + (float)(*((float *)this + 213) * v54))
        + (float)(*((float *)this + 212) * *((float *)this + 216));
    *((float *)this + 21++*((_DWORD *)this + 5) = v54;
    *((float *)this + 216) = v57;
    float v58 = *((float *)this + 32);
    float v59 = *((float *)this + 21);
    float v132 = v56;
    double v60 = v57 + 1.0;
    float v61 = (float)((float)(v58 - v59) - v56) / v60;
    float v62 = 1.0;
    if (v61 <= 1.0) {
      float v62 = v61;
    }
    if (v62 < 0.0001) {
      float v62 = 0.0001;
    }
    float v63 = sqrtf(v62);
    if (v63 >= v51)
    {
      int v66 = *((_DWORD *)this + 226);
      if (!v66)
      {
LABEL_37:
        float v67 = (float)((float)((float)(v58 + *((float *)this + 33)) - v59) - v132) / v60;
        if (v67 > 1.0) {
          float v67 = 1.0;
        }
        if (v67 < 0.0001) {
          float v67 = 0.0001;
        }
        *((float *)this + 222) = sqrtf(v67);
        long double v68 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
        if (v68)
        {
          __src[0] = v63;
          clsp::CLSP_Log::LogCLSPData(v68, __src, 1);
          double v69 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
          if (v69)
          {
            __src[0] = *((float *)this + 222);
            clsp::CLSP_Log::LogCLSPData(v69, __src, 1);
            double v70 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
            if (v70)
            {
              __src[0] = *((float *)this + 27);
              clsp::CLSP_Log::LogCLSPData(v70, __src, 1);
              int v71 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
              if (v71)
              {
                __src[0] = v57;
                clsp::CLSP_Log::LogCLSPData(v71, __src, 1);
                int v72 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
                if (v72)
                {
                  __src[0] = v143;
                  clsp::CLSP_Log::LogCLSPData(v72, __src, 1);
                  size_t v73 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 73);
                  if (v73)
                  {
                    __src[0] = v132;
                    clsp::CLSP_Log::LogCLSPData(v73, __src, 1);
                  }
                }
              }
            }
          }
        }
        *((float *)this + 22++*((_DWORD *)this + 5) = v53;
        float v74 = (*(float (**)(clsp::CLSPKernel_v3 *))(*(void *)this + 48))(this) + *((float *)this + 127);
        *((float *)this + 127) = v74;
        unsigned int v75 = *((_DWORD *)this + 129);
        if (v75 >= *((_DWORD *)this + 125))
        {
          unsigned int v76 = 0;
          *((float *)this + 128) = v74 * *((float *)this + 126);
          *((_DWORD *)this + 127) = 0;
        }
        else
        {
          unsigned int v76 = v75 + 1;
        }
        float v17 = v143;
        *((_DWORD *)this + 129) = v76;
        float v54 = 0.0;
        float v133 = v63;
        float v65 = 0.0;
        float v130 = v53;
        int v16 = v30;
        goto LABEL_52;
      }
      int v64 = v66 - 1;
      float v63 = v133;
    }
    else
    {
      int v64 = *((_DWORD *)this + 227);
    }
    *((_DWORD *)this + 226) = v64;
    goto LABEL_37;
  }
  float v131 = *((float *)this + 65);
  float v129 = *((float *)this + 64);
LABEL_83:
  *((float *)this + 64) = v129;
  *((float *)this + 6++*((_DWORD *)this + 5) = v131;
  *((float *)this + 69) = v19;
  *((float *)this + 70) = v20;
  *((float *)this + 71) = v21;
  *((float *)this + 72) = v22;
  *((float *)this + 44) = v25;
  *((float *)this + 4++*((_DWORD *)this + 5) = v24;
  *((float *)this + 46) = v26;
  *((float *)this + 53) = v28;
  *((float *)this + 54) = v27;
  *((float *)this + 5++*((_DWORD *)this + 5) = v144;
  *((float *)this + 83) = v140;
  *((float *)this + 84) = v23;
  *((float *)this + 14) = v130;
  *((float *)this + 1++*((_DWORD *)this + 5) = v17;
  *((float *)this + 16) = v132;
  *((float *)this + 17) = v133;
  *((float *)this + 18) = v18;
  *((float *)this + 19) = v141;
  *((float *)this + 217) = v142;
  *((_DWORD *)this + 2) = v16;
  *((_DWORD *)this + 224) = *((_DWORD *)this + 35);
  (*(void (**)(clsp::CLSPKernel_v3 *))(*(void *)this + 104))(this);
  DisplacementFilterGaiuint64_t n = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain(this);
  float v96 = DisplacementFilterGain;
  float v97 = (clsp::CLSP_Log *)*((void *)this + 2 * *((unsigned int *)this + 22) + 65);
  if (v97)
  {
    __src[0] = DisplacementFilterGain;
    clsp::CLSP_Log::LogCLSPData(v97, __src, 1);
  }
  return v96;
}

float clsp::CLSPKernel_v3::GetOLPwr(clsp::CLSPKernel_v3 *this)
{
  return *((float *)this + 225);
}

char *clsp::CLSPKernel_v3::Reset(char **this, __n128 a2)
{
  ClosedLoopSpeakerProtectionKernel::Reset((ClosedLoopSpeakerProtectionKernel *)this, a2);
  *((_DWORD *)this + 2) = *((_DWORD *)this + 3);
  *((_DWORD *)this + 17) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  this[111] = _D0;
  *((_DWORD *)this + 226) = 0;
  *((_DWORD *)this + 21++*((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 217) = 0;
  unint64_t v8 = (this[115] - this[114]) >> 2;
  int v12 = 0;
  std::vector<float>::assign(this + 114, v8, &v12);
  unint64_t v9 = (this[118] - this[117]) >> 2;
  int v11 = 0;
  return std::vector<float>::assign(this + 117, v9, &v11);
}

uint64_t clsp::CLSPKernel_v3::Initialize(clsp::CLSPKernel_v3 *this, unsigned int a2, double a3)
{
  std::vector<float>::resize((uint64_t)this + 936, a2);
  std::vector<float>::resize((uint64_t)this + 912, vcvtad_u64_f64(a3 * 0.002));
  double v5 = *(uint64_t (**)(clsp::CLSPKernel_v3 *, __n128))(*(void *)this + 24);
  v6.n128_f64[0] = a3;

  return v5(this, v6);
}

void clsp::CLSPKernel_v3::~CLSPKernel_v3(clsp::CLSPKernel_v3 *this)
{
  *(void *)this = &unk_1F14BCF50;
  int v2 = (void *)*((void *)this + 117);
  if (v2)
  {
    *((void *)this + 118) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 114);
  if (v3)
  {
    *((void *)this + 11++*((_DWORD *)this + 5) = v3;
    operator delete(v3);
  }
  ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14BCF50;
  int v2 = (void *)*((void *)this + 117);
  if (v2)
  {
    *((void *)this + 118) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 114);
  if (v3)
  {
    *((void *)this + 11++*((_DWORD *)this + 5) = v3;
    operator delete(v3);
  }

  ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(this);
}

uint64_t std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BD008;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::CLSPKernel_v3>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BD008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void learnrate_v5::adaptLmsFilter_v4(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  double v4 = v3;
  float v126 = v5;
  double v7 = v6;
  unint64_t v9 = v8;
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  vDSP_Length v10 = v5[4];
  vDSP_Length v11 = v5[10];
  uint64_t v96 = v5[11];
  float v97 = v12;
  uint64_t v13 = v12[23];
  vDSP_Length v14 = (int)v12[9];
  uint64_t v100 = v5[15];
  int v15 = v12[19];
  uint64_t v106 = (int)v12[18];
  *(_DWORD *)(v16 + 72) = v106;
  *(_DWORD *)(v16 + 76) = v15;
  uint64_t v93 = v16;
  int v104 = v15;
  float __A = 0.0;
  vDSP_vmul(*(const float **)(v2 + 96), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 112), 1, v11);
  float v90 = (float *)v9;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v9, 1, v146, 1, v10);
  float v91 = (float *)v7;
  uint64_t v92 = v2;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v7, 1, v145, 1, v10);
  uint64_t v101 = v13;
  if ((int)v13 >= 1)
  {
    vDSP_Length v17 = v14;
    uint64_t v18 = 0;
    uint64_t v94 = (v104 + 1) * (int)v10;
    uint64_t v99 = 4 * v14;
    uint64_t v19 = 4 * v10;
    vDSP_Length __N = (v106 * v10);
    uint64_t v20 = 4 * (int)__N;
    uint64_t v21 = *(void *)(v92 + 104);
    float v22 = (float *)v4[2];
    uint64_t v23 = v4[3];
    float v24 = *(float **)(v93 + 24);
    float v118 = *(float **)(v93 + 16);
    float v25 = *(float **)v93;
    float v26 = *(float **)(v93 + 8);
    uint64_t v98 = 4 * v96;
    vDSP_Length v28 = *(void *)v97;
    uint64_t v27 = *((void *)v97 + 1);
    uint64_t v29 = v21 + 4 * v106;
    uint64_t v122 = 4 * v10;
    float v124 = v4;
    vDSP_Length v95 = v17;
    do
    {
      float v120 = v26;
      vDSP_Length v114 = v28;
      uint64_t v116 = v27;
      uint64_t v112 = v29;
      if (*(unsigned char *)(v4[16] + v18))
      {
        float v108 = v24;
        int v30 = v22;
        uint64_t v31 = v23;
        uint64_t v32 = v21;
        if ((int)v96 >= 1)
        {
          uint64_t v33 = 0;
          float v34 = v142;
          float v35 = v143;
          uint64_t v36 = v96;
          do
          {
            *v35++ = *(_DWORD *)(v28 + v33);
            *v34++ = *(_DWORD *)(v27 + v33);
            v33 += v19;
            --v36;
          }
          while (v36);
        }
        uint64_t __C = v25;
        uint64_t v102 = v18;
        if (v97[17] == 1)
        {
          float __A = 0.0;
          if ((int)__N >= 1)
          {
            uint64_t v37 = v20;
            vDSP_vfill(&__A, v25, 1, __N);
            vDSP_vfill(&__A, v26, 1, __N);
            vDSP_vfill(&__A, v118, 1, __N);
            vDSP_vfill(&__A, v108, 1, __N);
            uint64_t v20 = v37;
          }
          vDSP_Length v38 = (*(_DWORD *)(v93 + 36) - v94);
          if ((int)v38 >= 1)
          {
            uint64_t v39 = v20;
            vDSP_vfill(&__A, &__C[v94], 1, v38);
            vDSP_vfill(&__A, &v26[v94], 1, v38);
            vDSP_vfill(&__A, &v118[v94], 1, v38);
            vDSP_vfill(&__A, &v108[v94], 1, v38);
            uint64_t v20 = v39;
          }
        }
        uint64_t v40 = v19;
        uint64_t v21 = v32;
        uint64_t v41 = v31;
        uint64_t v42 = v30;
        if ((int)v106 <= v104)
        {
          uint64_t v43 = 4 * v106;
          int v44 = v104 + 1 - v106;
          vDSP_Length v46 = v114;
          uint64_t v45 = v116;
          float v47 = __C;
          BOOL v48 = v120;
          uint64_t v129 = v21;
          uint64_t v130 = v41;
          float v127 = v30;
          do
          {
            float __A = *(float *)(v21 + v43);
            int v49 = *(_DWORD *)(v4[11] + v43) * v10;
            float v133 = (float *)(v46 + v20);
            float v137 = (float *)(v45 + v20);
            uint64_t v50 = (float *)((char *)v47 + v20);
            float v135 = (float *)((char *)v48 + v20);
            float v51 = &v42[v49];
            float v52 = (const float *)(v41 + 4 * v49);
            vDSP_vmma(v146, 1, v51, 1, v145, 1, v52, 1, __E, 1, v10);
            vDSP_vsma(__E, 1, &__A, v133, 1, v50, 1, v10);
            float v53 = v51;
            uint64_t v21 = v129;
            float v54 = v52;
            double v4 = v124;
            vDSP_vmmsb(v145, 1, v53, 1, v146, 1, v54, 1, __E, 1, v10);
            vDSP_vsma(__E, 1, &__A, v137, 1, v135, 1, v10);
            uint64_t v42 = v127;
            uint64_t v40 = 4 * v10;
            uint64_t v41 = v130;
            uint64_t v20 = 4 * (int)__N;
            BOOL v48 = (float *)((char *)v48 + v122);
            float v47 = (float *)((char *)v47 + v122);
            v45 += v122;
            v46 += v122;
            v43 += 4;
            --v44;
          }
          while (v44);
        }
        float v24 = v108;
        vDSP_Length v17 = v95;
        uint64_t v18 = v102;
        uint64_t v19 = v40;
        uint64_t v23 = v41;
        float v22 = v42;
        BOOL v55 = v120;
        float v25 = __C;
        uint64_t v56 = v112;
        if ((int)v106 <= v104)
        {
          uint64_t v57 = 0;
          float v58 = *(float **)(v92 + 112);
          float v59 = *v90 * *v58;
          float v60 = *v91 * v58[v10];
          uint64_t v61 = v4[11] + 4 * v106;
          uint64_t v62 = v20;
          do
          {
            int v63 = *(_DWORD *)(v61 + 4 * v57) * v10;
            *(float *)((char *)__C + v62) = *(float *)&v143[v106 + v57]
                                          + (float)((float)(v59 * *(float *)(v112 + 4 * v57)) * v42[v63]);
            *(float *)((char *)v120 + v62) = *(float *)&v142[v106 + v57]
                                           + (float)((float)(v60 * *(float *)(v112 + 4 * v57))
                                                   * *(float *)(v23 + 4 * v63));
            v62 += v19;
            ++v57;
          }
          while (v104 + 1 - v106 != v57);
        }
      }
      else
      {
        vDSP_Length v64 = v17;
        vDSP_vclr(v25, 1, v17);
        vDSP_vclr(v120, 1, v64);
        uint64_t v20 = 4 * (int)__N;
        vDSP_Length v17 = v64;
        uint64_t v56 = v112;
        BOOL v55 = v120;
      }
      v118 += v17;
      v24 += v17;
      float v25 = (float *)((char *)v25 + v99);
      float v26 = &v55[(unint64_t)v99 / 4];
      ++v18;
      uint64_t v27 = v116 + v99;
      vDSP_Length v28 = v114 + v99;
      v21 += v98;
      uint64_t v29 = v56 + v98;
      v22 += v100;
      v23 += 4 * v100;
    }
    while (v18 != v101);
  }
  uint64_t v113 = *(unsigned int *)(v93 + 92);
  if ((int)v113 >= 1)
  {
    uint64_t v65 = 0;
    __Ca = (float *)v4[16];
    int v66 = *v126 >> 1;
    int v67 = *(_DWORD *)(v93 + 72);
    float v128 = *(float **)(v93 + 48);
    float v134 = *(float **)v93;
    uint64_t v136 = *(void *)(v93 + 8);
    uint64_t v131 = v66;
    int v132 = *v126;
    size_t v68 = 4 * v66;
    vDSP_Length v69 = (uint64_t)*v126 >> 2;
    if (v66 <= 2) {
      int v70 = 2;
    }
    else {
      int v70 = *v126 >> 1;
    }
    uint64_t v123 = ((v70 - 1) >> 1) + 1;
    int v125 = *v126 >> 1;
    int v105 = *(_DWORD *)(v93 + 76);
    uint64_t v71 = v67 * (uint64_t)v66;
    float v138 = *(float **)(v93 + 16);
    vDSP_Length v115 = *(int *)(v93 + 36);
    uint64_t v107 = *(int *)(v93 + 72);
    float v109 = (float *)(4 * v115);
    int v103 = ~v67;
    int v72 = *(float **)(v93 + 24);
    float v119 = &v72[v71];
    float v121 = &v138[v71];
    do
    {
      uint64_t v117 = v65;
      if (*((unsigned char *)__Ca + v65))
      {
        if ((int)v107 <= v105)
        {
          size_t v73 = v119;
          float v74 = v121;
          int v75 = v103;
          uint64_t v76 = v107;
          do
          {
            float v77 = &v138[v76 * v131];
            uint64_t v78 = &v72[v76 * v131];
            v141.realp = v77;
            v141.imagp = v78;
            memcpy(v77, &v134[v76 * v131], v68);
            memcpy(v78, (const void *)(v136 + 4 * v76 * v131), v68);
            float v80 = (MultiRadixRealFFT *)*((void *)v126 + 1);
            if (v80) {
              MultiRadixRealFFT::RealInPlaceTransform(v80, &v141, -1, v79);
            }
            float __B = *((float *)v126 + 22) * *((float *)v126 + 21);
            vDSP_vsmul(v77, 1, &__B, v77, 1, v69);
            vDSP_vsmul(v78, 1, &__B, v78, 1, v69);
            vDSP_vclr(&v77[v69], 1, v69);
            vDSP_vclr(&v78[v69], 1, v69);
            if (v132 >= 2)
            {
              uint64_t v82 = v123;
              float v83 = &v128[v125 * (v126[11] + v75)];
              float v84 = v73;
              int v85 = v74;
              do
              {
                int v86 = *(_DWORD *)v85++;
                *(_DWORD *)float v83 = v86;
                float v87 = *v84++;
                float v81 = v87;
                v83[1] = v87;
                v83 += 2;
                --v82;
              }
              while (v82);
            }
            float v88 = (MultiRadixRealFFT *)*((void *)v126 + 1);
            if (v88) {
              MultiRadixRealFFT::RealInPlaceTransform(v88, &v141, 1, v81);
            }
            ++v76;
            float v74 = (float *)((char *)v74 + v68);
            --v75;
            size_t v73 = (float *)((char *)v73 + v68);
          }
          while (v105 + 1 != v76);
        }
      }
      else
      {
        vDSP_vclr(v138, 1, v115);
        vDSP_vclr(v72, 1, v115);
        vDSP_vclr(v128, 1, v115);
      }
      v134 += v115;
      v136 += 4 * v115;
      float v128 = (float *)((char *)v109 + (void)v128);
      uint64_t v65 = v117 + 1;
      v138 += v115;
      float v121 = (float *)((char *)v109 + (void)v121);
      float v119 = (float *)((char *)v109 + (void)v119);
      v72 += v115;
    }
    while (v117 + 1 != v113);
  }
}

id getIntToNSStringAUScopeMap(void)
{
  v3[8] = *MEMORY[0x1E4F143B8];
  {
    v2[0] = &unk_1F14EBC40;
    v2[1] = &unk_1F14EBC58;
    v3[0] = @"Global";
    v3[1] = @"Input";
    v2[2] = &unk_1F14EBC70;
    void v2[3] = &unk_1F14EBC88;
    void v3[2] = @"Output";
    v3[3] = @"Group";
    v2[4] = &unk_1F14EBCA0;
    v2[5] = &unk_1F14EBCB8;
    v3[4] = @"Part";
    v3[5] = @"Note";
    v2[6] = &unk_1F14EBCD0;
    v2[7] = &unk_1F14EBCE8;
    v3[6] = @"Layer";
    v3[7] = @"LayerItem";
    getIntToNSStringAUScopeMap(void)::intToNSStringMapAUScope = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:8];
  }
  uint64_t v0 = (void *)getIntToNSStringAUScopeMap(void)::intToNSStringMapAUScope;

  return v0;
}

void sub_1BB69992C(_Unwind_Exception *a1)
{
}

id createNSDescriptionFromAudioUnit(OpaqueAudioComponentInstance *a1)
{
  v34[13] = *MEMORY[0x1E4F143B8];
  id v24 = [MEMORY[0x1E4F1CA60] dictionary];
  Component = AudioComponentInstanceGetComponent(a1);
  if (!AudioComponentGetDescription(Component, &outDesc))
  {
    outData[0] = @"ComponentManufacturer";
    double v3 = [NSNumber numberWithUnsignedInt:outDesc.componentManufacturer];
    v34[0] = v3;
    outData[1] = @"ComponentSubType";
    double v4 = [NSNumber numberWithUnsignedInt:outDesc.componentSubType];
    v34[1] = v4;
    outData[2] = @"ComponentType";
    double v5 = [NSNumber numberWithUnsignedInt:outDesc.componentType];
    v34[2] = v5;
    outData[3] = @"ComponentFlags";
    __n128 v6 = [NSNumber numberWithUnsignedInt:outDesc.componentFlags];
    v34[3] = v6;
    outData[4] = @"ComponentFlagsMask";
    double v7 = [NSNumber numberWithUnsignedInt:outDesc.componentFlagsMask];
    v34[4] = v7;
    unint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:outData count:5];

    [v24 setObject:v8 forKey:@"AudioComponentDescription"];
    float v25 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v27 = getIntToNSStringAUScopeMap();
    uint64_t v9 = [v27 count];
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        UInt32 ioDataSize = 4;
        LODWORD(outData[0]) = 0;
        if (!AudioUnitGetProperty(a1, 0xBu, i, 0, outData, &ioDataSize))
        {
          vDSP_Length v11 = AudioComponentInstanceGetComponent(a1);
          if (!AudioComponentGetDescription(v11, (AudioComponentDescription *)v34))
          {
            int v12 = [MEMORY[0x1E4F1CA60] dictionary];
            if (LODWORD(outData[0]))
            {
              uint64_t v13 = 0;
              do
              {
                vDSP_Length v14 = [MEMORY[0x1E4F1CA60] dictionary];
                *(_DWORD *)outWritable = v13;
                LODWORD(outValue) = i;
                addGenericAuPropToDescription(v14, a1, (AudioUnitScope *)&outValue, (AudioUnitElement *)outWritable);
                *(_DWORD *)outWritable = v13;
                LODWORD(outValue) = i;
                addSubTypeSpecificAuPropToDescription(v14, a1, (unsigned int *)v34 + 1, (AudioUnitScope *)&outValue, (AudioUnitElement *)outWritable);
                int v15 = objc_msgSend(NSString, "stringWithFormat:", @"Element: %d", v13);
                [v12 setObject:v14 forKey:v15];

                uint64_t v13 = (v13 + 1);
              }
              while (v13 < LODWORD(outData[0]));
            }
            uint64_t v16 = NSString;
            vDSP_Length v17 = [NSNumber numberWithInt:i];
            uint64_t v18 = [v27 objectForKey:v17];
            uint64_t v19 = [v16 stringWithFormat:@"Scope: %@", v18];
            [v25 setObject:v12 forKey:v19];
          }
        }
      }
    }

    [v24 setObject:v25 forKey:@"AUProperties"];
    float v26 = [MEMORY[0x1E4F1CA60] dictionary];
    vDSP_Length v28 = getIntToNSStringAUScopeMap();
    uint64_t v20 = [v28 count];
    if (v20)
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        float v22 = [MEMORY[0x1E4F1CA60] dictionary];
        LODWORD(outData[0]) = 0;
        outWritable[0] = 0;
        if (!AudioUnitGetPropertyInfo(a1, 3u, j, 0, (UInt32 *)outData, outWritable) && LODWORD(outData[0])) {
          operator new[]();
        }
      }
    }

    [v24 setObject:v26 forKey:@"AUParameters"];
  }

  return v24;
}

void sub_1BB699F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void VAD3EventData::~VAD3EventData(VAD3EventData *this)
{
}

void EndpointVADViterbiModel::parseObservationPriorFloat32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  double v4 = (int *)operator new(4uLL);
  *double v4 = 1;
  double v5 = v4 + 1;
  std::string __p = v4;
  uint64_t v19 = v4 + 1;
  double v7 = *(_DWORD **)a3;
  __n128 v6 = *(_DWORD **)(a3 + 8);
  uint64_t v20 = (char *)(v4 + 1);
  if (v7 != v6)
  {
    int v8 = 1;
    do
    {
      v8 *= *v7;
      if (v5 >= (int *)v20)
      {
        vDSP_Length v10 = (int *)__p;
        uint64_t v11 = ((char *)v5 - (unsigned char *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v20 - (unsigned char *)__p;
        if ((v20 - (unsigned char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v20, v14);
          vDSP_Length v10 = (int *)__p;
          double v5 = v19;
        }
        else
        {
          int v15 = 0;
        }
        uint64_t v16 = (int *)&v15[4 * v11];
        int *v16 = v8;
        uint64_t v9 = v16 + 1;
        while (v5 != v10)
        {
          int v17 = *--v5;
          *--uint64_t v16 = v17;
        }
        std::string __p = v16;
        uint64_t v19 = v9;
        uint64_t v20 = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        int *v5 = v8;
        uint64_t v9 = v5 + 1;
      }
      uint64_t v19 = v9;
      ++v7;
      double v5 = v9;
    }
    while (v7 != *(_DWORD **)(a3 + 8));
  }
  operator new[]();
}

void sub_1BB69A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void EndpointVADViterbiModel::parseObservationTransitionFloat32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  double v4 = (int *)operator new(4uLL);
  *double v4 = 1;
  double v5 = v4 + 1;
  std::string __p = v4;
  uint64_t v19 = v4 + 1;
  double v7 = *(_DWORD **)a3;
  __n128 v6 = *(_DWORD **)(a3 + 8);
  uint64_t v20 = (char *)(v4 + 1);
  if (v7 != v6)
  {
    int v8 = 1;
    do
    {
      v8 *= *v7;
      if (v5 >= (int *)v20)
      {
        vDSP_Length v10 = (int *)__p;
        uint64_t v11 = ((char *)v5 - (unsigned char *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v20 - (unsigned char *)__p;
        if ((v20 - (unsigned char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v20, v14);
          vDSP_Length v10 = (int *)__p;
          double v5 = v19;
        }
        else
        {
          int v15 = 0;
        }
        uint64_t v16 = (int *)&v15[4 * v11];
        int *v16 = v8;
        uint64_t v9 = v16 + 1;
        while (v5 != v10)
        {
          int v17 = *--v5;
          *--uint64_t v16 = v17;
        }
        std::string __p = v16;
        uint64_t v19 = v9;
        uint64_t v20 = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        int *v5 = v8;
        uint64_t v9 = v5 + 1;
      }
      uint64_t v19 = v9;
      ++v7;
      double v5 = v9;
    }
    while (v7 != *(_DWORD **)(a3 + 8));
  }
  operator new[]();
}

void sub_1BB69AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, void *a18, uint64_t a19, uint64_t a20)
{
  a17 = &a11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t EndpointVADRTViterbi::decodeStateSequence(char **this, unsigned int a2, unsigned int a3)
{
  EndpointVADRTViterbi::expandWithZerosIfNecessary(this + 3, a2);
  __n128 v6 = this[9];
  if (a2 >= (unint64_t)((this[10] - v6) >> 4)) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  BOOL v7 = *(double *)&v6[16 * a2 + 8] > fmax(*(double *)&v6[16 * a2], 0.0);
  int v8 = this[3];
  uint64_t v9 = (uint64_t)this[4];

  return EndpointVADRTViterbi::backtraceBackpointerArray((uint64_t)this, v8, v9, a2, a3, v7);
}

void EndpointVADRTViterbi::expandWithZerosIfNecessary(char **a1, unsigned int a2)
{
  uint64_t v2 = a1 + 2;
  double v3 = a1[1];
  if ((a1[2] - *a1) >> 2 >= (unint64_t)a2) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = (a1[2] - *a1) >> 2;
  }
  unint64_t v5 = (unint64_t)(v3 - *a1) >> 2;
  if (v4 + 1 > v5 && v4 >= v5)
  {
    do
    {
      if ((unint64_t)v3 >= *v2)
      {
        uint64_t v9 = *a1;
        uint64_t v10 = (v3 - *a1) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v2 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v2, v13);
          uint64_t v9 = *a1;
          double v3 = a1[1];
        }
        else
        {
          unint64_t v14 = 0;
        }
        int v15 = &v14[4 * v10];
        *(_DWORD *)int v15 = 0;
        int v8 = v15 + 4;
        while (v3 != v9)
        {
          int v16 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a1 = v15;
        a1[1] = v8;
        a1[2] = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)double v3 = 0;
        int v8 = v3 + 4;
      }
      a1[1] = v8;
      LODWORD(v++*((_DWORD *)this + 5) = v5 + 1;
      double v3 = v8;
    }
    while (v5 <= v4);
  }
}

uint64_t EndpointVADRTViterbi::backtraceBackpointerArray(uint64_t result, _DWORD *a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a4 >= a5)
  {
    uint64_t v7 = *(void *)(result + 120);
    uint64_t v6 = *(void *)(result + 128);
    int v8 = (_DWORD *)(a3 + 4 * (a4 - ((a3 - (uint64_t)a2) >> 2)));
    _DWORD *v8 = a6;
    if (a4 > a5)
    {
      uint64_t v9 = (a3 - (uint64_t)a2) >> 2;
      BOOL v10 = v8 == (_DWORD *)(a3 + 4 * (a5 - v9)) || v8 == a2;
      if (!v10)
      {
        unint64_t v11 = v6 - ((v6 - v7) & 0xFFFFFFFFFFFFFFF8) + 8 * a4;
        uint64_t v12 = (_DWORD *)(4 * a4 - 4 * v9 + a3 - 4);
        uint64_t v13 = 4 * a5 - 4 * a4 + 4;
        do
        {
          uint64_t v14 = v12[1];
          if (v14 >= 2) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *uint64_t v12 = *(_DWORD *)(v11 + 4 * v14);
          if (!v13) {
            break;
          }
          v11 -= 8;
          v13 += 4;
          BOOL v10 = v12-- == a2;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  unsigned int v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

AudioDSP::Utility *AudioDSP::Utility::DetectNonFinites(AudioDSP::Utility *this, _DWORD *a2, const AudioBufferList *a3, const AudioStreamBasicDescription *a4, BOOL *a5)
{
  if (a2)
  {
    if (a4)
    {
      LOBYTE(a4->mSampleRate) = 0;
      if (*a2)
      {
        unsigned int v8 = this;
        unint64_t v9 = 0;
        uint64_t v10 = (uint64_t)(a2 + 2);
        do
        {
          BOOL v11 = 0;
          this = (AudioDSP::Utility *)AudioDSP::Utility::DetectNonFinites(v8, v10, (const AudioBuffer *)a3->mBuffers[0].mNumberChannels, (const AudioStreamBasicDescription *)a3[1].mBuffers[0].mNumberChannels, &v11);
          if (this) {
            break;
          }
          if (v11)
          {
            LOBYTE(a4->mSampleRate) = 1;
            return this;
          }
          ++v9;
          v10 += 16;
        }
        while (v9 < *a2);
      }
    }
  }
  return this;
}

uint64_t AudioDSP::Utility::DetectNonFinites(AudioDSP::Utility *this, uint64_t a2, const AudioBuffer *a3, const AudioStreamBasicDescription *a4, BOOL *a5)
{
  uint64_t result = 2;
  if (a3)
  {
    if (a2)
    {
      if (a4 == 32)
      {
        uint64_t v12 = v5;
        uint64_t v13 = v6;
        uint64_t result = 2;
        if (a5)
        {
          unint64_t v9 = *(const float **)(a2 + 8);
          if (v9)
          {
            vDSP_Length v10 = (unint64_t)*(unsigned int *)(a2 + 4) >> 2;
            float __C = 0.0;
            vDSP_sve(v9, 1, &__C, v10);
            uint64_t result = 0;
            *a5 = (LODWORD(__C) & 0x7FFFFFFFu) > 0x7F7FFFFF;
          }
        }
      }
    }
  }
  return result;
}

uint64_t SphericalHeadSpatializer::processAccumulating(SphericalHeadSpatializer *this, const float *a2, float **a3, unsigned int a4, float *const *a5, int a6, uint64_t a7, float a8, IR::ComplexDataCircBuffer *a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  if (a4 <= 1)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v15 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
      return 4294956445;
    }
    std::string::basic_string[abi:ne180100]<0>(&v146, "SphericalHeadSpatializer");
    int v16 = std::string::append((std::string *)&v146, "::", 2uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v149[16] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)long double v149 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append((std::string *)v149, "processAccumulating", 0x13uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = __p;
    if (__p[23] < 0) {
      uint64_t v20 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    _os_log_debug_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels != 2", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
    if ((SHIBYTE(v147.f64[0]) & 0x80000000) == 0) {
      return 4294956445;
    }
    float64_t v21 = v146.f64[0];
LABEL_99:
    operator delete(*(void **)&v21);
    return 4294956445;
  }
  if (a6 != a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v30 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG)) {
      return 4294956445;
    }
    uint64_t v116 = (std::string *)std::string::basic_string[abi:ne180100]<0>(buf, "SphericalHeadSpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v116, (std::string *)&v146);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", (std::string *)&v146, (std::string *)v149);
    if (v149[23] >= 0) {
      uint64_t v117 = v149;
    }
    else {
      uint64_t v117 = *(unsigned char **)v149;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v117;
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = a4;
    *(_WORD *)&__p[18] = 1024;
    *(_DWORD *)&__p[20] = a6;
    _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels != %d", __p, 0x18u);
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
    if (SHIBYTE(v147.f64[0]) < 0) {
      operator delete(*(void **)&v146.f64[0]);
    }
    if ((buf[23] & 0x80000000) == 0) {
      return 4294956445;
    }
    float64_t v21 = *(double *)buf;
    goto LABEL_99;
  }
  if (*((unsigned char *)this + 16))
  {
    *(_OWORD *)(*((void *)this + 43) + 16) = *(_OWORD *)a5;
    int v27 = *((unsigned __int8 *)this + 132);
    if (*((unsigned char *)this + 132)) {
      float v28 = a8;
    }
    else {
      float v28 = 0.0;
    }
    int v29 = *((unsigned __int8 *)this + 17);
    if (*((unsigned char *)this + 17))
    {
      *((float *)this + 83) = v28;
      *((unsigned char *)this + 268) = v27;
      *((unsigned char *)this + 17) = 0;
    }
    else if (v27 == *((unsigned __int8 *)this + 268))
    {
      float v33 = *((float *)this + 83);
      if (v33 == v28 || vabds_f32(v33, v28) < 0.0001)
      {
        *((float *)this + 83) = v28;
      }
      else if (!*((_DWORD *)this + 81))
      {
        float v28 = v28 + (float)((float)(v33 - v28) * *((float *)this + 84));
      }
    }
    else
    {
      *((unsigned char *)this + 268) = v27;
    }
    float v35 = *((float *)this + 12);
    float v34 = *((float *)this + 13);
    if (v35 == *((float *)this + 46) && !v29 && v34 == *((float *)this + 47))
    {
      BOOL v39 = *((float *)this + 14) != *((float *)this + 48);
    }
    else
    {
      float v36 = SphericalHeadSpatializer::CalculateInterauralTimeDelays(this, *((float *)this + 12), v34, *((float *)this + 2));
      uint64_t v37 = *((void *)this + 43);
      *(_DWORD *)(v37 + 196) = v36;
      *(_DWORD *)(v37 + 200) = v38;
      BOOL v39 = 1;
    }
    uint64_t v40 = (uint64_t *)*((void *)this + 43);
    *((unsigned char *)v40 + 192) = v39;
    int v41 = *((_DWORD *)this + 83);
    *((_DWORD *)v40 + 53) = v41;
    *((_DWORD *)v40 + 54) = v41;
    *((double *)v40 + 28) = v28;
    *((double *)v40 + 29) = v28;
    if (v39)
    {
      float v42 = *((float *)this + 32);
      float v43 = (float)(v42 / 1000.0) * 200.0;
      float v44 = *((float *)this + 2) * 0.5;
      float v45 = *((float *)this + 14);
      if (v45 <= v42) {
        float v42 = *((float *)this + 14);
      }
      if (v42 < *((float *)this + 31)) {
        float v42 = *((float *)this + 31);
      }
      float v46 = v43 - v42;
      if (v46 < 0.0) {
        float v46 = 0.0;
      }
      float v47 = powf(275.62, v46 / v43) * 80.0;
      if (v47 > v44) {
        float v47 = v44;
      }
      if (v47 < 80.0) {
        float v47 = 80.0;
      }
      *((float *)v40 + 8) = v47;
      float v48 = v35 * 3.14159265 / 180.0;
      float v49 = v48 + 1.57079633;
      float v50 = cosf(v49);
      *((float *)v40 + 9) = (float)((float)(v50 + 1.0) * 20000.0) + 4000.0;
      *((float *)v40 + 10) = (float)((float)(1.0 - v50) * 20000.0) + 4000.0;
      *((void *)this + 23) = *((void *)this + 6);
      *((float *)this + 48) = v45;
    }
    float v52 = *a3;
    float v51 = a3[1];
    float v53 = (const float *)v40[2];
    float v54 = (const float *)v40[3];
    uint32x2_t v55 = *(uint32x2_t *)((char *)v40 + 196);
    unsigned int v56 = *((_DWORD *)v40 + 3);
    if (a7)
    {
      unsigned int v57 = *((_DWORD *)v40 + 2);
      unsigned int v58 = v57 - 1;
      uint64_t v59 = *v40;
      *(float *)&a12 = (float)a7;
      float32x2_t v60 = vcvt_f32_u32(*(uint32x2_t *)((char *)v40 + 204));
      float v61 = (float)v57;
      float32x2_t v62 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(!v39), 0x1FuLL)), (int8x8_t)0x8000000080000000, (int8x8_t)vdiv_f32(vsub_f32(vcvt_f32_u32(v55), v60), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a12, 0)));
      uint64_t v63 = a7;
      vDSP_Length v64 = (float *)v40[2];
      uint64_t v65 = (float *)v40[3];
      do
      {
        int v66 = *(_DWORD *)a2++;
        float v67 = (float)v56;
        *(_DWORD *)(v59 + 4 * v56) = v66;
        if (v60.f32[0] <= (float)v56) {
          float v68 = -0.0;
        }
        else {
          float v68 = v61;
        }
        float v69 = (float)((float)v56 - v60.f32[0]) + v68;
        float v70 = v67 - v60.f32[1];
        if (v60.f32[1] <= v67) {
          float v71 = -0.0;
        }
        else {
          float v71 = v61;
        }
        *(float *)&int v72 = v70 + v71;
        int v73 = (int)v69 + (SLODWORD(v69) >> 31);
        int v74 = (int)*(float *)&v72 + (v72 >> 31);
        *v64++ = *(float *)(v59 + 4 * (int)(v73 & v58))
               + (float)((float)(v69 - (float)(int)(v73 & v58))
                       * (float)(*(float *)(v59 + 4 * (int)((v73 + 1) & v58))
                               - *(float *)(v59 + 4 * (int)(v73 & v58))));
        float v75 = *(float *)(v59 + 4 * (int)(v74 & v58));
        *v65++ = v75
               + (float)((float)(*(float *)&v72 - (float)(int)(v74 & v58))
                       * (float)(*(float *)(v59 + 4 * (int)((v74 + 1) & v58)) - v75));
        float32x2_t v60 = vadd_f32(v60, v62);
        unsigned int v56 = (v56 + 1) & v58;
        --v63;
      }
      while (v63);
    }
    *((_DWORD *)v40 + 3) = v56;
    *(uint64_t *)((char *)v40 + 204) = (uint64_t)v55;
    float64x2_t v146 = 0uLL;
    double v148 = 0.0;
    float64x2_t v147 = (float64x2_t)0x3FF0000000000000uLL;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&unsigned char buf[24] = 0;
    double v160 = 0.0;
    *(void *)&uint8_t buf[16] = 0x3FF0000000000000;
    v140[0] = 1;
    v140[2] = 1;
    v143[0] = 1;
    v143[2] = 1;
    float v120 = v51;
    __O = v52;
    float v119 = v54;
    if (!v39)
    {
      float64x2_t v78 = *((float64x2_t *)v40 + 3);
      float64x2_t v79 = *((float64x2_t *)v40 + 4);
      double v148 = *((double *)v40 + 10);
      double v160 = *((double *)v40 + 15);
      int v141 = 4 * a7;
      int v144 = 4 * a7;
      long long v80 = *((_OWORD *)v40 + 3);
      long long v81 = *((_OWORD *)v40 + 4);
      unint64_t v83 = v40[20];
      uint64_t v82 = v40[21];
      double v155 = *((double *)v40 + 10);
      unint64_t v158 = v83;
      unint64_t v84 = v40[20];
      double v150 = *((double *)v40 + 15);
      unint64_t v153 = v84;
      float64x2_t v146 = v78;
      float64x2_t v147 = v79;
      long long v85 = *(_OWORD *)(v40 + 13);
      *(_OWORD *)std::string buf = *(_OWORD *)(v40 + 11);
      *(_OWORD *)&uint8_t buf[16] = v85;
      *(void *)&a14.f64[0] = v40[20];
      int v86 = v53;
      float v145 = v53;
      float v142 = v54;
      *(_OWORD *)std::string __p = v80;
      *(_OWORD *)&__p[16] = v81;
      float64x2_t v87 = *((float64x2_t *)v40 + 9);
      float64x2_t v156 = *((float64x2_t *)v40 + 8);
      float64x2_t v88 = *((float64x2_t *)v40 + 8);
      float64x2_t v157 = *((float64x2_t *)v40 + 9);
      long long v89 = *(_OWORD *)(v40 + 13);
      *(_OWORD *)long double v149 = *(_OWORD *)(v40 + 11);
      *(_OWORD *)&v149[16] = v89;
      float64x2_t v151 = *((float64x2_t *)v40 + 8);
      float64x2_t v152 = *((float64x2_t *)v40 + 9);
      unint64_t v134 = *(void *)&a14.f64[0];
      float64x2_t v136 = v88;
      float64x2_t v132 = v87;
      if (v82)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v82 + 16))(v82, 2, __p);
        (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(void *)v40[21] + 32))(v40[21], a7, v143, v143);
        *(void *)&a14.f64[0] = v134;
        float64x2_t v88 = v136;
        float64x2_t v87 = v132;
      }
      uint64_t v90 = v40[22];
      if (v90)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v90 + 16))(v90, 2, v149);
        (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(void *)v40[22] + 32))(v40[22], a7, v140, v140);
        *(void *)&a14.f64[0] = v134;
        float64x2_t v88 = v136;
        float64x2_t v87 = v132;
      }
LABEL_84:
      float64x2_t v107 = v147;
      *((float64x2_t *)v40 + 3) = v146;
      *((float64x2_t *)v40 + 4) = v107;
      long long v108 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v40 + 11) = *(_OWORD *)buf;
      *((double *)v40 + 10) = v148;
      *(_OWORD *)(v40 + 13) = v108;
      *((double *)v40 + 1++*((_DWORD *)this + 5) = v160;
      *((float64x2_t *)v40 + 8) = v88;
      *((float64x2_t *)v40 + 9) = v87;
      v40[20] = *(void *)&a14.f64[0];
      float v109 = *((float *)v40 + 54);
      double v110 = *((float *)v40 + 53);
      *(_DWORD *)std::string __p = *((_DWORD *)v40 + 53);
      double v111 = *((double *)v40 + 28);
      *(float *)long double v149 = v109;
      if (v111 == v110)
      {
        double v113 = v109;
        double v112 = *((double *)v40 + 29);
        if (v112 == v113)
        {
          vDSP_vsma(v86, 1, (const float *)__p, __O, 1, __O, 1, a7);
          vDSP_vsma(v119, 1, (const float *)v149, v120, 1, v120, 1, a7);
          goto LABEL_88;
        }
      }
      else
      {
        double v112 = *((double *)v40 + 29);
        double v113 = v109;
      }
      float v114 = (v111 - v110) / (double)a7;
      float v115 = (v112 - v113) / (double)a7;
      float v138 = v115;
      float __Step = v114;
      vDSP_vrampmuladd(v86, 1, (float *)__p, &__Step, __O, 1, a7);
      vDSP_vrampmuladd(v119, 1, (float *)v149, &v138, v120, 1, a7);
LABEL_88:
      uint64_t result = 0;
      *((float *)this + 83) = v28;
      return result;
    }
    double v76 = *((double *)v40 + 23);
    double v77 = *((float *)v40 + 9) / v76 * 3.14159265;
    if (v77 <= 0.0)
    {
      float64x2_t v146 = 0uLL;
      double v148 = 0.0;
      float64x2_t v147 = (float64x2_t)0x3FF0000000000000uLL;
    }
    else
    {
      BiquadCoefficients::SetPriv((BiquadCoefficients *)&v146, 7, fmin(v77, 3.11017673), 0.707106781, 0.0);
      double v76 = *((double *)v40 + 23);
    }
    double v91 = *((float *)v40 + 10) / v76 * 3.14159265;
    if (v91 <= 0.0)
    {
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&unsigned char buf[24] = 0;
      double v160 = 0.0;
      *(void *)&uint8_t buf[16] = 0x3FF0000000000000;
    }
    else
    {
      BiquadCoefficients::SetPriv((BiquadCoefficients *)buf, 7, fmin(v91, 3.11017673), 0.707106781, 0.0);
      double v76 = *((double *)v40 + 23);
    }
    double v92 = *((float *)v40 + 8) / v76 * 3.14159265;
    if (v92 <= 0.0)
    {
      float64x2_t v87 = (float64x2_t)xmmword_1BB872F30;
      float64x2_t v88 = 0uLL;
      a14.f64[0] = 0.0;
      if (a7)
      {
LABEL_72:
        double v97 = v148;
        double v98 = (float)(1.0 / (float)a7);
        float64x2_t v130 = v147;
        float64x2_t v131 = v146;
        float64x2_t v126 = vmulq_n_f64(vsubq_f64(v147, *((float64x2_t *)v40 + 4)), v98);
        float64x2_t v127 = vmulq_n_f64(vsubq_f64(v146, *((float64x2_t *)v40 + 3)), v98);
        double v99 = (v148 - *((double *)v40 + 10)) * v98;
        double v100 = v160;
        float64x2_t v128 = *(float64x2_t *)&buf[16];
        float64x2_t v129 = *(float64x2_t *)buf;
        float64x2_t v124 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)&buf[16], *(float64x2_t *)(v40 + 13)), v98);
        float64x2_t v125 = vmulq_n_f64(vsubq_f64(*(float64x2_t *)buf, *(float64x2_t *)(v40 + 11)), v98);
        double v101 = (v160 - *((double *)v40 + 15)) * v98;
        float64x2_t v122 = vmulq_n_f64(vsubq_f64(v87, *((float64x2_t *)v40 + 9)), v98);
        float64x2_t v123 = vmulq_n_f64(vsubq_f64(v88, *((float64x2_t *)v40 + 8)), v98);
        double v102 = (a14.f64[0] - *((double *)v40 + 20)) * v98;
        unsigned int v103 = a7;
        int v86 = v53;
        do
        {
          float v145 = v53;
          if (v103 >= 0x80) {
            uint64_t v104 = 128;
          }
          else {
            uint64_t v104 = v103;
          }
          float v142 = v54;
          int v141 = 4 * v104;
          int v144 = 4 * v104;
          *(float64x2_t *)std::string __p = v146;
          *(float64x2_t *)&__p[16] = v147;
          double v155 = v148;
          float64x2_t v156 = v88;
          float64x2_t v157 = v87;
          unint64_t v158 = *(void *)&a14.f64[0];
          *(_OWORD *)long double v149 = *(_OWORD *)buf;
          *(_OWORD *)&v149[16] = *(_OWORD *)&buf[16];
          double v150 = v160;
          float64x2_t v151 = v88;
          float64x2_t v152 = v87;
          unint64_t v153 = *(void *)&a14.f64[0];
          uint64_t v105 = v40[21];
          __n128 v135 = (__n128)a14;
          float64x2_t v137 = v88;
          float64x2_t v133 = v87;
          if (v105)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v105 + 16))(v105, 2, __p);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(void *)v40[21] + 32))(v40[21], v104, v143, v143);
            a14 = (float64x2_t)v135;
            float64x2_t v88 = v137;
            float64x2_t v87 = v133;
          }
          uint64_t v106 = v40[22];
          if (v106)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v106 + 16))(v106, 2, v149);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *))(*(void *)v40[22] + 32))(v40[22], v104, v140, v140);
            a14 = (float64x2_t)v135;
            float64x2_t v88 = v137;
            float64x2_t v87 = v133;
          }
          float64x2_t v130 = vmlaq_n_f64(v130, v126, (double)v104);
          float64x2_t v131 = vmlaq_n_f64(v131, v127, (double)v104);
          float64x2_t v146 = v131;
          float64x2_t v147 = v130;
          double v97 = v97 + v99 * (double)v104;
          double v148 = v97;
          float64x2_t v128 = vmlaq_n_f64(v128, v124, (double)v104);
          float64x2_t v129 = vmlaq_n_f64(v129, v125, (double)v104);
          *(float64x2_t *)std::string buf = v129;
          *(float64x2_t *)&uint8_t buf[16] = v128;
          double v100 = v100 + v101 * (double)v104;
          double v160 = v100;
          float64x2_t v88 = vmlaq_n_f64(v88, v123, (double)v104);
          float64x2_t v87 = vmlaq_n_f64(v87, v122, (double)v104);
          a14.f64[0] = a14.f64[0] + v102 * (double)v104;
          v53 += v104;
          v54 += v104;
          v103 -= v104;
        }
        while (v103);
        goto LABEL_84;
      }
    }
    else
    {
      __double2 v93 = __sincos_stret(fmin(v92, 3.11017673));
      double v94 = __exp10(0.0);
      double v95 = v93.__sinval * 0.707106781 + 1.0;
      v88.f64[0] = v93.__cosval * -2.0 * (1.0 / v95);
      v88.f64[1] = 1.0 / v95 - v93.__sinval * 0.707106781 * (1.0 / v95);
      v96.f64[0] = 0.5 - v93.__cosval * 0.5;
      v96.f64[1] = v96.f64[0] + v96.f64[0];
      a14 = vmulq_n_f64(v96, 1.0 / v95 * v94);
      float64x2_t v87 = a14;
      if (a7) {
        goto LABEL_72;
      }
    }
    int v86 = v53;
    goto LABEL_84;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v32 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v146, "SphericalHeadSpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", (std::string *)&v146, (std::string *)v149);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", (std::string *)v149, (std::string *)__p);
    if (__p[23] >= 0) {
      float v118 = __p;
    }
    else {
      float v118 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v118;
    _os_log_debug_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
    if (SHIBYTE(v147.f64[0]) < 0) {
      operator delete(*(void **)&v146.f64[0]);
    }
  }
  return 4294956429;
}

void sub_1BB69BD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  _Unwind_Resume(exception_object);
}

float SphericalHeadSpatializer::CalculateInterauralTimeDelays(SphericalHeadSpatializer *this, float a2, float a3, float a4)
{
  float v5 = (float)((float)(180.0 - a2) / 180.0) * 3.14159265;
  float v6 = (float)(a3 / 180.0) * 3.14159265;
  float v7 = cosf(v6);
  float v8 = (float)(1.0 - v7) * 0.5;
  double v9 = v5;
  float v10 = v9 + -1.57079633;
  float v11 = cosf(v10);
  asinf(sqrtf(v8 + (float)(v7 * (float)((float)(1.0 - v11) * 0.5))));
  float v12 = v9 + -4.71238898;
  float v13 = cosf(v12);
  return (float)(a4 * 0.00052353) * asinf(sqrtf(v8 + (float)(v7 * (float)((float)(1.0 - v13) * 0.5))));
}

uint64_t SphericalHeadSpatializer::initialize(SphericalHeadSpatializer *this, float a2, unsigned int a3)
{
  if (a3 >= 2) {
    operator new();
  }
  return 4294900553;
}

void sub_1BB69C0FC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 176);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(v1 + 176) = 0;
  }
  uint64_t v4 = *(void *)(v1 + 168);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(v1 + 168) = 0;
  }
  if (*(void *)v1)
  {
    free(*(void **)v1);
    *(void *)uint64_t v1 = 0;
  }
  MEMORY[0x1C185D370](v1, 0x10A0C404D7BDC52);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 176);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      *(void *)(v2 + 176) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 168);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(v2 + 168) = 0;
    }
    if (*(void *)v2)
    {
      free(*(void **)v2);
      *(void *)uint64_t v2 = 0;
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void SphericalHeadSpatializer::~SphericalHeadSpatializer(SphericalHeadSpatializer *this)
{
  *(void *)this = &unk_1F14BD060;
  std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  Spatializer::~Spatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14BD060;
  std::unique_ptr<SphericalHeadPanner>::reset[abi:ne180100]((uint64_t *)this + 43, 0);

  Spatializer::~Spatializer(this);
}

BOOL AUBeamNFSelector::ValidFormat(AUBeamNFSelector *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  return a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105 && a4->mChannelsPerFrame == 1;
}

uint64_t AUBeamNFSelector::SupportedNumChannels(AUBeamNFSelector *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUBeamNFSelector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUBeamNFSelector::StreamFormatWritable(AUBeamNFSelector *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUBeamNFSelector::SupportsTail(AUBeamNFSelector *this)
{
  return 1;
}

double AUBeamNFSelector::GetTailTime(AUBeamNFSelector *this)
{
  return 0.05;
}

double AUBeamNFSelector::GetLatency(AUBeamNFSelector *this)
{
  return 0.0;
}

uint64_t AUBeamNFSelector::GetParameterValueStrings(AUBeamNFSelector *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      long long v9 = xmmword_1E6242870;
      long long v10 = *(_OWORD *)&off_1E6242880;
      CFIndex v6 = 4;
      break;
    case 1:
      float v7 = &xmmword_1E6242890;
      goto LABEL_11;
    case 2:
      long long v9 = xmmword_1E62428A8;
      long long v10 = *(_OWORD *)&off_1E62428B8;
      float v11 = @"-X beam.";
      CFIndex v6 = 5;
      break;
    case 3:
      float v7 = &xmmword_1E62428D0;
LABEL_11:
      long long v9 = *v7;
      *(void *)&long long v10 = *((void *)v7 + 2);
      CFIndex v6 = 3;
      break;
    case 4:
      long long v9 = xmmword_1E62428E8;
      CFIndex v6 = 2;
      break;
    default:
      return 0;
  }
  CFArrayRef v8 = CFArrayCreate(0, (const void **)&v9, v6, 0);
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUBeamNFSelector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 132);
  }
  return result;
}

uint64_t AUBeamNFSelector::GetParameterInfo(AUBeamNFSelector *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956430;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Position detection mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Position detection mode.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v6 = 0x4040000000000000;
      goto LABEL_11;
    case 1:
      int v7 = 1073774592;
      buffer->cfNameString = @"Detected phone position.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Detected phone position.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v8 = 0x4000000000000000;
      goto LABEL_8;
    case 2:
      int v7 = 1073774592;
      buffer->cfNameString = @"Current beam.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Current beam.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v8 = 0x4080000000000000;
LABEL_8:
      *(void *)&buffer->minCFNumberRef Value = v8;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_44;
    case 3:
      buffer->cfNameString = @"Output mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Output mode.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_37;
    case 4:
      buffer->cfNameString = @"Update threshold mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Update threshold mode.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v6 = 0x3F80000000000000;
LABEL_11:
      *(void *)&buffer->minCFNumberRef Value = v6;
      buffer->defaultCFNumberRef Value = 1.0;
      goto LABEL_37;
    case 5:
      CFStringRef v9 = @"Update threshold.";
      goto LABEL_15;
    case 6:
      buffer->cfNameString = @"Update threshold at Noise level 1.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Update threshold at Noise level 1.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v10 = 7.0;
      goto LABEL_16;
    case 7:
      CFStringRef v9 = @"Update threshold at Noise level 2.";
LABEL_15:
      buffer->cfNameString = v9;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v10 = 4.0;
LABEL_16:
      buffer->defaultCFNumberRef Value = v10;
      uint64_t v11 = 0x4120000000000000;
      goto LABEL_36;
    case 8:
      buffer->cfNameString = @"Noise level 1.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Noise level 1.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v12 = 60.0;
      goto LABEL_19;
    case 9:
      buffer->cfNameString = @"Noise level 2.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Noise level 2.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v12 = 75.0;
LABEL_19:
      buffer->defaultCFNumberRef Value = v12;
      uint64_t v11 = 0x42C8000041A00000;
      goto LABEL_36;
    case 10:
      int v7 = 1073774592;
      buffer->cfNameString = @"Current noise level.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Current noise level.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = 60.0;
      uint64_t v13 = 0x42C8000041A00000;
      goto LABEL_43;
    case 11:
      buffer->cfNameString = @"Wind detection probability.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wind detection probability.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_35;
    case 12:
      buffer->cfNameString = @"Wind detection threshold.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wind detection threshold.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      AudioUnitParameterValue v14 = 1.0;
      goto LABEL_34;
    case 13:
      buffer->cfNameString = @"Threshold left.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Threshold left.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v15 = 0.84;
      goto LABEL_25;
    case 14:
      buffer->cfNameString = @"Threshold right.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Threshold right.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      AudioUnitParameterValue v15 = -0.13;
LABEL_25:
      buffer->defaultCFNumberRef Value = v15;
      uint64_t v11 = 0x40800000C0800000;
      goto LABEL_36;
    case 15:
      buffer->cfNameString = @"Start frequency (Fmin).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Start frequency (Fmin).", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 160.0;
      uint64_t v11 = 0x447A000043200000;
      goto LABEL_36;
    case 16:
      buffer->cfNameString = @"End frequency (Fmax).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"End frequency (Fmax).", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 800.0;
      uint64_t v11 = 0x453B800043960000;
      goto LABEL_36;
    case 17:
      int v7 = 1073774592;
      CFStringRef v16 = @"Update threshold crossed.";
      goto LABEL_39;
    case 18:
      int v7 = 1073774592;
      CFStringRef v17 = @"M1 Separation.";
      goto LABEL_42;
    case 19:
      int v7 = 1073774592;
      CFStringRef v17 = @"M4 Separation.";
      goto LABEL_42;
    case 20:
      int v7 = 1073774592;
      CFStringRef v17 = @"MaxSep: max([M1],[M4],[+X],[-X]).";
      goto LABEL_42;
    case 21:
      buffer->cfNameString = @"PSD smoothing time constant.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"PSD smoothing time constant.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v14 = 0.1;
      goto LABEL_34;
    case 22:
      buffer->cfNameString = @"Separation Difference smoothing time constant.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Separation Difference smoothing time constant.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v14 = 0.5;
LABEL_34:
      buffer->defaultCFNumberRef Value = v14;
LABEL_35:
      uint64_t v11 = 0x3F80000000000000;
LABEL_36:
      *(void *)&buffer->minCFNumberRef Value = v11;
LABEL_37:
      int v7 = -1073741824;
      goto LABEL_44;
    case 23:
      int v7 = 1073774592;
      CFStringRef v16 = @"Downlink speech presence probabiility";
LABEL_39:
      buffer->cfNameString = v16;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultCFNumberRef Value = 0.0;
      uint64_t v13 = 0x3F80000000000000;
      goto LABEL_43;
    case 24:
      int v7 = 1073774592;
      CFStringRef v17 = @"+X Separation.";
      goto LABEL_42;
    case 25:
      int v7 = 1073774592;
      CFStringRef v17 = @"-X Separation.";
LABEL_42:
      buffer->cfNameString = v17;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = 0.0;
      uint64_t v13 = 0x41A0000000000000;
      goto LABEL_43;
    case 26:
      int v7 = 1073774592;
      buffer->cfNameString = @"Mic Status.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Mic Status.", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultCFNumberRef Value = 5.0;
      uint64_t v13 = 0x40A0000000000000;
LABEL_43:
      *(void *)&buffer->minCFNumberRef Value = v13;
LABEL_44:
      uint64_t result = 0;
      buffer->flags |= v7;
      break;
    default:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUBeamNFSelector::GetParameterList(AUBeamNFSelector *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t result = 4294956430;
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
      *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
      *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
      *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
      *((_OWORD *)a3 + ++*((_DWORD *)this + 5) = xmmword_1BB879E70;
      a3[26] = 26;
      *((void *)a3 + 12) = 0x1900000018;
    }
    unsigned int v4 = 27;
  }
  *a4 = v4;
  return result;
}

uint64_t AUBeamNFSelector::Render(AUBeamNFSelector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  v25[2] = *MEMORY[0x1E4F143B8];
  AudioUnitParameterValue v10 = (AUBeamNFSelector *)((char *)this + 80);
  do
  {
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (Element && *(_DWORD *)(Element + 172))
    {
      double v12 = *((double *)this + 69);
      if (v12 != *(double *)(ausdk::AUScope::SafeGetElement(v10, v8) + 80)) {
        __assert_rtn("Render", "AUBeamNFSelector.cpp", 1166, "mSampleRate == Input(i).GetStreamFormat().mSampleRate");
      }
      uint64_t v13 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      uint64_t result = ausdk::AUInputElement::PullInput(v13, a2, a3, v8, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v9 = 1;
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v8 != 5);
  uint64_t v15 = 0;
  v25[0] = 0;
  v25[1] = 0;
  char v16 = 1;
  do
  {
    char v17 = v16;
    double v18 = *((double *)this + 69);
    if (v18 != *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v15) + 80)) {
      __assert_rtn("Render", "AUBeamNFSelector.cpp", 1191, "mSampleRate == Output(i).GetStreamFormat().mSampleRate");
    }
    long long v19 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v15);
    uint64_t v20 = ausdk::AUIOElement::PrepareBuffer(v19, a4);
    char v16 = 0;
    v25[v15] = v20;
    uint64_t v15 = 1;
  }
  while ((v17 & 1) != 0);
  if (v9) {
    return 0;
  }
  uint64_t v21 = 0;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  do
  {
    uint64_t v22 = ausdk::AUScope::SafeGetElement(v10, v21);
    *((void *)v23 + v21++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
  }
  while (v21 != 5);
  return (*(uint64_t (**)(AUBeamNFSelector *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 5, v23, 2, v25);
}

uint64_t AUBeamNFSelector::ProcessMultipleBufferLists(AUBeamNFSelector *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294956428;
  if (a6 == 2 && a4 == 5 && *((_DWORD *)this + 137) == a3)
  {
    uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 80), 2u);
    ausdk::AUBufferList::PrepareBuffer((AUBeamNFSelector *)((char *)this + 560), Element + 2, a3);
    unsigned int v13 = 2 * a3;
    if (2 * a3)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 4 * v13;
      do
      {
        float v16 = (float)(*(float *)((char *)a5[2]->mBuffers[0].mData + v14)
                    + *(float *)((char *)a5[3]->mBuffers[0].mData + v14))
            * 0.5;
        *(float *)(*(void *)(ausdk::AUBufferList::GetBufferList((AUBeamNFSelector *)((char *)this + 560)) + 16) + v14) = v16;
        v14 += 4;
      }
      while (v15 != v14);
    }
    long long v17 = *(_OWORD *)a5;
    long long v40 = *((_OWORD *)a5 + 1);
    long long v42 = v17;
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((AUBeamNFSelector *)((char *)this + 560));
    int v18 = *((_DWORD *)this + 132);
    if (*((_DWORD *)this + 133) != v18)
    {
      AUBeamNFSelector::UpdateState(this);
      *((_DWORD *)this + 133) = v18;
    }
    if (*((unsigned char *)this + 536))
    {
      CopyBufferList(&a5[2]->mNumberBuffers, *a7);
      CopyBufferList(&a5[4]->mNumberBuffers, a7[1]);
      return 0;
    }
    switch(*((_DWORD *)this + 308))
    {
      case 0:
        if (!*((unsigned char *)this + 1280)) {
          AUBeamNFSelector::DetectPosition(this, (const AudioBuffer *)a5[2]->mBuffers[0].mData, a5[3]->mBuffers, (*a5)->mBuffers, a5[1]->mBuffers, a5[4]->mBuffers);
        }
        break;
      case 1:
        *((_DWORD *)this + 309) = 0;
        break;
      case 2:
        int v19 = 1;
        goto LABEL_17;
      case 3:
        int v19 = 2;
LABEL_17:
        *((_DWORD *)this + 309) = v19;
        break;
      default:
        break;
    }
    unsigned int v20 = *((_DWORD *)this + 309);
    if (v20 != *((_DWORD *)this + 136))
    {
      uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v21, 1u, (float)*((int *)this + 309), 0);
      unsigned int v20 = *((_DWORD *)this + 309);
      *((_DWORD *)this + 136) = v20;
    }
    int v22 = *((_DWORD *)this + 311);
    if (v22 != 2)
    {
      if (v22 != 1)
      {
        if (!v22)
        {
          if (v20 > 1) {
            goto LABEL_35;
          }
          goto LABEL_32;
        }
        if ((*((_DWORD *)this + 310) - 3) > 1) {
          goto LABEL_38;
        }
LABEL_41:
        mData = (const float *)a5[4]->mBuffers[0].mData;
        int v27 = (float *)*((void *)this + 148);
        vDSP_vmul(mData, 1, *((const float **)this + 76), 1, v27, 1, *((unsigned int *)this + 137));
        vDSP_vmul(&mData[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v27[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
        AUBeamNFSelector::ApplySystemNoiseFloor(this, v27, *((const float **)this + 73));
        goto LABEL_42;
      }
      int v24 = *((_DWORD *)this + 335);
      if (v24 == 1)
      {
LABEL_32:
        *((_DWORD *)this + 310) = 0;
LABEL_38:
        memcpy(*((void **)this + 148), a5[4]->mBuffers[0].mData, a5[4]->mBuffers[0].mDataByteSize);
LABEL_42:
        uint64_t v28 = *((void *)&v40 + *((unsigned int *)this + 310));
        memcpy(*((void **)this + 151), *(const void **)(v28 + 16), *(unsigned int *)(v28 + 12));
        if (*((_DWORD *)this + 310) != *((_DWORD *)this + 135))
        {
          int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v29, 2u, (float)*((unsigned int *)this + 310), 0);
          uint64_t v30 = *((void *)&v40 + *((unsigned int *)this + 135));
          memcpy(*((void **)this + 145), *(const void **)(v30 + 16), *(unsigned int *)(v30 + 12));
          if ((*((_DWORD *)this + 135) - 3) > 1)
          {
            memcpy(*((void **)this + 142), a5[4]->mBuffers[0].mData, a5[4]->mBuffers[0].mDataByteSize);
          }
          else
          {
            uint64_t v31 = (const float *)a5[4]->mBuffers[0].mData;
            uint64_t v32 = (float *)*((void *)this + 142);
            vDSP_vmul(v31, 1, *((const float **)this + 76), 1, v32, 1, *((unsigned int *)this + 137));
            vDSP_vmul(&v31[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v32[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
            AUBeamNFSelector::ApplySystemNoiseFloor(this, v32, *((const float **)this + 73));
          }
          float v33 = (const float *)*((void *)this + 145);
          float v34 = (float *)*((void *)this + 151);
          vDSP_Length v35 = (2 * *((_DWORD *)this + 137));
          float __C = 0.5;
          vDSP_vasm(v33, 1, v34, 1, &__C, v34, 1, v35);
          float v36 = (const float *)*((void *)this + 142);
          uint64_t v37 = (float *)*((void *)this + 148);
          vDSP_Length v38 = (2 * *((_DWORD *)this + 137));
          float __C = 0.5;
          vDSP_vasm(v36, 1, v37, 1, &__C, v37, 1, v38);
          *((_DWORD *)this + 13++*((_DWORD *)this + 5) = *((_DWORD *)this + 310);
        }
        memcpy(a7[1]->mBuffers[0].mData, *((const void **)this + 148), a7[1]->mBuffers[0].mDataByteSize);
        memcpy((*a7)->mBuffers[0].mData, *((const void **)this + 151), (*a7)->mBuffers[0].mDataByteSize);
        return 0;
      }
      if (!v24)
      {
LABEL_35:
        int v25 = 1;
LABEL_37:
        *((_DWORD *)this + 310) = v25;
        goto LABEL_38;
      }
      if (v20 != 1)
      {
        if (!v20) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }
LABEL_36:
      int v25 = 2;
      goto LABEL_37;
    }
    if (v20)
    {
      if (v20 == 1) {
        goto LABEL_36;
      }
      int v23 = 4;
    }
    else
    {
      int v23 = 3;
    }
    *((_DWORD *)this + 310) = v23;
    goto LABEL_41;
  }
  return result;
}

void AUBeamNFSelector::UpdateState(AUBeamNFSelector *this)
{
  uint64_t v2 = (AUBeamNFSelector *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  *((_DWORD *)this + 308) = (int)ausdk::AUElement::GetParameter(Element, 0);
  unsigned int v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 309) = (int)ausdk::AUElement::GetParameter(v4, 1u);
  float v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 310) = ausdk::AUElement::GetParameter(v5, 2u);
  uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 311) = (int)ausdk::AUElement::GetParameter(v6, 3u);
  int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 312) = (int)ausdk::AUElement::GetParameter(v7, 4u);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 314) = ausdk::AUElement::GetParameter(v8, 6u);
  char v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 31++*((_DWORD *)this + 5) = ausdk::AUElement::GetParameter(v9, 7u);
  AudioUnitParameterValue v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 316) = ausdk::AUElement::GetParameter(v10, 8u);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 317) = ausdk::AUElement::GetParameter(v11, 9u);
  double v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 318) = ausdk::AUElement::GetParameter(v12, 0xAu);
  unsigned int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 313) = ausdk::AUElement::GetParameter(v13, 5u);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 319) = ausdk::AUElement::GetParameter(v14, 0xBu);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 321) = ausdk::AUElement::GetParameter(v15, 0xCu);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 322) = ausdk::AUElement::GetParameter(v16, 0xDu);
  long long v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 323) = ausdk::AUElement::GetParameter(v17, 0xEu);
  int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 1304) = ausdk::AUElement::GetParameter(v18, 0x11u) != 0.0;
  int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 334) = ausdk::AUElement::GetParameter(v19, 0x17u);
  unsigned int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 33++*((_DWORD *)this + 5) = (int)ausdk::AUElement::GetParameter(v20, 0x1Au);
  *((unsigned char *)this + 1280) = *((float *)this + 319) > *((float *)this + 321);
  AUBeamNFSelector::UpdateFrequencyBinIndices(this);

  AUBeamNFSelector::UpdateSmoothingCoefs(this);
}

void AUBeamNFSelector::DetectPosition(AUBeamNFSelector *this, const AudioBuffer *a2, const AudioBuffer *a3, const AudioBuffer *a4, const AudioBuffer *a5, const AudioBuffer *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  float __B = 1.0;
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a2, (const float **)this + 91);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a3->mData, (const float **)this + 97);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a6->mData, (const float **)this + 103);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a4->mData, (const float **)this + 94);
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, (uint64_t)a5->mData, (const float **)this + 100);
  vDSP_vdbcon(*((const float **)this + 91), 1, &__B, *((float **)this + 112), 1, *((unsigned int *)this + 178), 0);
  vDSP_vdbcon(*((const float **)this + 103), 1, &__B, *((float **)this + 118), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 118), 1, *((const float **)this + 112), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 327, *((unsigned int *)this + 178));
  *((float *)this + 327) = fmaxf(*((float *)this + 327), 0.0);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x12u, *((float *)this + 327), 0);
  vDSP_vdbcon(*((const float **)this + 97), 1, &__B, *((float **)this + 115), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 118), 1, *((const float **)this + 115), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 328, *((unsigned int *)this + 178));
  *((float *)this + 328) = fmaxf(*((float *)this + 328), 0.0);
  double v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0x13u, *((float *)this + 328), 0);
  mData = (const float *)a6->mData;
  uint64_t v14 = (float *)*((void *)this + 139);
  vDSP_vmul(mData, 1, *((const float **)this + 76), 1, v14, 1, *((unsigned int *)this + 137));
  vDSP_vmul(&mData[*((unsigned int *)this + 137)], 1, *((const float **)this + 76), 1, &v14[*((unsigned int *)this + 137)], 1, *((unsigned int *)this + 137));
  AUBeamNFSelector::ApplySystemNoiseFloor(this, v14, *((const float **)this + 73));
  AUBeamNFSelector::GetSmoothedPSD((uint64_t)this, *((void *)this + 139), (const float **)this + 106);
  vDSP_vdbcon(*((const float **)this + 106), 1, &__B, *((float **)this + 121), 1, *((unsigned int *)this + 178), 0);
  vDSP_vdbcon(*((const float **)this + 94), 1, &__B, *((float **)this + 124), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 121), 1, *((const float **)this + 124), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 329, *((unsigned int *)this + 178));
  *((float *)this + 329) = fmaxf(*((float *)this + 329), 0.0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v15, 0x18u, *((float *)this + 329), 0);
  vDSP_vdbcon(*((const float **)this + 100), 1, &__B, *((float **)this + 127), 1, *((unsigned int *)this + 178), 0);
  vDSP_vsub(*((const float **)this + 121), 1, *((const float **)this + 127), 1, *((float **)this + 109), 1, *((unsigned int *)this + 178));
  vDSP_meanv(*((const float **)this + 109), 1, (float *)this + 330, *((unsigned int *)this + 178));
  *((float *)this + 330) = fmaxf(*((float *)this + 330), 0.0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v16, 0x19u, *((float *)this + 330), 0);
  int32x4_t v17 = *(int32x4_t *)((char *)this + 1308);
  int32x4_t v18 = vrev64q_s32(v17);
  v18.i64[0] = *(void *)((char *)this + 1308);
  int32x4_t v33 = v18;
  uint64_t v19 = 1;
  unsigned int v20 = &v33;
  do
  {
    if (*(float *)v17.i32 < *(float *)&v33.i32[v19])
    {
      v17.i32[0] = v33.i32[v19];
      unsigned int v20 = (int32x4_t *)((char *)&v33 + v19 * 4);
    }
    ++v19;
  }
  while (v19 != 4);
  *((_DWORD *)this + 331) = v20->i32[0];
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v21, 0x14u, *((float *)this + 331), 0);
  if (!*((_DWORD *)this + 312))
  {
    float v22 = *((float *)this + 318);
    float v23 = *((float *)this + 316);
    if (v22 <= v23)
    {
      float v25 = *((float *)this + 314);
    }
    else
    {
      float v24 = *((float *)this + 317);
      if (v22 >= v24) {
        float v25 = *((float *)this + 315);
      }
      else {
        float v25 = *((float *)this + 314)
      }
            + (float)((float)((float)(*((float *)this + 314) - *((float *)this + 315)) / (float)(v23 - v24))
                    * (float)(v22 - v23));
    }
    *((float *)this + 313) = v25;
    float v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v26, 5u, *((float *)this + 313), 0);
  }
  float v27 = *((float *)this + 179);
  *((unsigned char *)this + 1304) = 0;
  if (*((float *)this + 331) > *((float *)this + 313))
  {
    *((unsigned char *)this + 1304) = 1;
    float v27 = *((float *)this + 329) - *((float *)this + 330);
  }
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  float v29 = 0.0;
  if (*((unsigned char *)this + 1304)) {
    float v29 = 1.0;
  }
  ausdk::AUElement::SetParameter(v28, 0x11u, v29, 0);
  *((float *)this + 179) = v27;
  float v30 = (float)(v27 * (float)(1.0 - *((float *)this + 333))) + (float)(*((float *)this + 333) * *((float *)this + 180));
  *((float *)this + 180) = v30;
  if (v30 <= *((float *)this + 323))
  {
    int v31 = 2;
  }
  else
  {
    if (v30 < *((float *)this + 322)) {
      return;
    }
    int v31 = 0;
  }
  *((_DWORD *)this + 309) = v31;
}

void AUBeamNFSelector::ApplySystemNoiseFloor(AUBeamNFSelector *this, float *a2, const float *a3)
{
  vDSP_Length v5 = *((unsigned int *)this + 137);
  __A.realp = a2;
  __A.imagp = &a2[v5];
  vDSP_zvmags(&__A, 1, *((float **)this + 133), 1, v5);
  vDSP_zvphas(&__A, 1, *((float **)this + 136), 1, *((unsigned int *)this + 137));
  vDSP_vmax(*((const float **)this + 133), 1, a3, 1, *((float **)this + 133), 1, *((unsigned int *)this + 137));
  int v6 = *((_DWORD *)this + 137);
  vvsqrtf(*((float **)this + 133), *((const float **)this + 133), &v6);
  vvcosf(__A.realp, *((const float **)this + 136), &v6);
  vDSP_vmul(__A.realp, 1, *((const float **)this + 133), 1, __A.realp, 1, *((unsigned int *)this + 137));
  vvsinf(__A.imagp, *((const float **)this + 136), &v6);
  vDSP_vmul(__A.imagp, 1, *((const float **)this + 133), 1, __A.imagp, 1, *((unsigned int *)this + 137));
}

void AUBeamNFSelector::GetSmoothedPSD(uint64_t a1, uint64_t a2, const float **a3)
{
  vDSP_Length v5 = (float *)(a2 + 4 * *(unsigned int *)(a1 + 1296) + 4 * *(unsigned int *)(a1 + 548));
  __A.realp = (float *)(a2 + 4 * *(unsigned int *)(a1 + 1296));
  __A.imagp = v5;
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 1040), 1, *(unsigned int *)(a1 + 712));
  vDSP_vsadd(*(const float **)(a1 + 1040), 1, &AUBeamNFSelector::eps, *(float **)(a1 + 1040), 1, *(unsigned int *)(a1 + 712));
  float __B = *(float *)(a1 + 1328);
  float __D = 1.0 - __B;
  vDSP_vsmsma(*a3, 1, &__B, *(const float **)(a1 + 1040), 1, &__D, (float *)*a3, 1, *(unsigned int *)(a1 + 712));
}

void AUBeamNFSelector::UpdateFrequencyBinIndices(AUBeamNFSelector *this)
{
  float v2 = (float)*((unsigned int *)this + 137);
  uint64_t v3 = (AUBeamNFSelector *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0xFu);
  float v6 = *((double *)this + 69);
  unsigned int v7 = vcvtas_u32_f32((float)(Parameter / (float)(v6 * 0.5)) * v2);
  float v8 = (float)*((unsigned int *)this + 137);
  char v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 0x10u);
  float v11 = *((double *)this + 69);
  unsigned int v12 = vcvtas_u32_f32((float)(v10 / (float)(v11 * 0.5)) * v8);
  if (v12 >= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 != *((_DWORD *)this + 324) || *((_DWORD *)this + 325) != v12)
  {
    *((_DWORD *)this + 324) = v13;
    *((_DWORD *)this + 32++*((_DWORD *)this + 5) = v12;
    unint64_t v14 = v12 - v13 + 1;
    *((_DWORD *)this + 178) = v14;
    int v28 = 0;
    std::vector<float>::assign((char **)this + 91, v14, &v28);
    unint64_t v15 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 97, v15, &v28);
    unint64_t v16 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 94, v16, &v28);
    unint64_t v17 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 100, v17, &v28);
    unint64_t v18 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 103, v18, &v28);
    unint64_t v19 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 106, v19, &v28);
    unint64_t v20 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 109, v20, &v28);
    unint64_t v21 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 112, v21, &v28);
    unint64_t v22 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 115, v22, &v28);
    unint64_t v23 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 118, v23, &v28);
    unint64_t v24 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 121, v24, &v28);
    unint64_t v25 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 124, v25, &v28);
    unint64_t v26 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 127, v26, &v28);
    unint64_t v27 = *((unsigned int *)this + 178);
    int v28 = 0;
    std::vector<float>::assign((char **)this + 130, v27, &v28);
  }
}

void AUBeamNFSelector::UpdateSmoothingCoefs(AUBeamNFSelector *this)
{
  float v2 = (AUBeamNFSelector *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x15u);
  LODWORD(v++*((_DWORD *)this + 5) = *((_DWORD *)this + 137);
  float v6 = *((double *)this + 69) / (double)v5;
  *((float *)this + 332) = expf(-1.0 / (float)(Parameter * v6));
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 0x16u);
  LODWORD(v9) = *((_DWORD *)this + 137);
  float v10 = *((double *)this + 69) / (double)v9;
  *((float *)this + 333) = expf(-1.0 / (float)(v8 * v10));
}

uint64_t AUBeamNFSelector::CanScheduleParameters(AUBeamNFSelector *this)
{
  return 0;
}

uint64_t AUBeamNFSelector::SetParameter(AUBeamNFSelector *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUBeamNFSelector::SetProperty(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, CFTypeRef *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 == 4530)
  {
    if (a5)
    {
      CFDictionaryRef v7 = (const __CFDictionary *)*a5;
      CFRetain(*a5);
      value = 0;
      if (CFDictionaryGetValueIfPresent(v7, @"BeamSystemNoiseProfile", (const void **)&value))
      {
        if (AUBeamNFSelectorLogScope(void)::once != -1) {
          dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
        }
        if (AUBeamNFSelectorLogScope(void)::scope)
        {
          float v8 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
          if (!*(void *)AUBeamNFSelectorLogScope(void)::scope)
          {
LABEL_26:
            SpectralProfile::SetProfile((AUBeamNFSelector *)((char *)this + 632), value);
            goto LABEL_27;
          }
        }
        else
        {
          float v8 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315394;
          unint64_t v16 = "AUBeamNFSelector.cpp";
          __int16 v17 = 1024;
          int v18 = 526;
          _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d BeamSystemNoiseProfile found in plist.", buf, 0x12u);
        }
        goto LABEL_26;
      }
      if (AUBeamNFSelectorLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
      }
      if (AUBeamNFSelectorLogScope(void)::scope)
      {
        float v10 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
        if (!*(void *)AUBeamNFSelectorLogScope(void)::scope) {
          goto LABEL_27;
        }
      }
      else
      {
        float v10 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        unint64_t v16 = "AUBeamNFSelector.cpp";
        __int16 v17 = 1024;
        int v18 = 544;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BeamSystemNoiseProfile dictionary not present in plist.", buf, 0x12u);
      }
LABEL_27:
      CFTypeRef cf = 0;
      if (!CFDictionaryGetValueIfPresent(v7, @"BeamFarfieldEQ", &cf))
      {
        if (AUBeamNFSelectorLogScope(void)::once != -1) {
          dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
        }
        if (AUBeamNFSelectorLogScope(void)::scope)
        {
          unsigned int v12 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
          if (!*(void *)AUBeamNFSelectorLogScope(void)::scope) {
            goto LABEL_42;
          }
        }
        else
        {
          unsigned int v12 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315394;
          unint64_t v16 = "AUBeamNFSelector.cpp";
          __int16 v17 = 1024;
          int v18 = 571;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BeamFarfieldEQ dictionary not present in plist.", buf, 0x12u);
        }
        goto LABEL_42;
      }
      if (AUBeamNFSelectorLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
      }
      if (AUBeamNFSelectorLogScope(void)::scope)
      {
        float v11 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
        if (!*(void *)AUBeamNFSelectorLogScope(void)::scope)
        {
LABEL_41:
          SpectralProfile::SetProfile((AUBeamNFSelector *)((char *)this + 672), cf);
LABEL_42:
          CFRelease(v7);
          return 0;
        }
      }
      else
      {
        float v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315394;
        unint64_t v16 = "AUBeamNFSelector.cpp";
        __int16 v17 = 1024;
        int v18 = 553;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d BeamFarfieldEQ found in plist.", buf, 0x12u);
      }
      goto LABEL_41;
    }
    if (AUBeamNFSelectorLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
    }
    if (AUBeamNFSelectorLogScope(void)::scope)
    {
      unint64_t v9 = *(NSObject **)AUBeamNFSelectorLogScope(void)::scope;
      if (!*(void *)AUBeamNFSelectorLogScope(void)::scope) {
        return 4294956445;
      }
    }
    else
    {
      unint64_t v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v16 = "AUBeamNFSelector.cpp";
      __int16 v17 = 1024;
      int v18 = 513;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
    }
    return 4294956445;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *((unsigned char *)this + 536) = *(_DWORD *)a5 != 0;
  return result;
}

void sub_1BB69E2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  if (*(void *)(v13 + 3744) != -1) {
    dispatch_once(&AUBeamNFSelectorLogScope(void)::once, &__block_literal_global_25085);
  }
  unint64_t v14 = *(NSObject ***)(v12 + 3752);
  if (v14)
  {
    unint64_t v15 = *v14;
    if (!*v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v15 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "AUBeamNFSelector.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 564;
    _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set BeamFarfieldEQ data to SpectralProfile object. Invalid dictionary entry?", (uint8_t *)&buf, 0x12u);
  }
LABEL_10:
  CFRelease(v11);
  __cxa_end_catch();
  JUMPOUT(0x1BB69E17CLL);
}

void ___ZL24AUBeamNFSelectorLogScopev_block_invoke()
{
}

uint64_t AUBeamNFSelector::GetProperty(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    float v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    float v6 = (unsigned __int8 *)this + 536;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUBeamNFSelector::GetPropertyInfo(AUBeamNFSelector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUBeamNFSelector::Reset(AUBeamNFSelector *this)
{
  return 0;
}

uint64_t AUBeamNFSelector::Initialize(AUBeamNFSelector *this)
{
  unsigned int v2 = 0;
  uint64_t v3 = (AUBeamNFSelector *)((char *)this + 80);
  while (1)
  {
    uint64_t v4 = *((void *)this + 15);
    if (v4) {
      LODWORD(v++*((_DWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      uint64_t v5 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v2 >= v5) {
      break;
    }
    if (*(double *)(ausdk::AUScope::SafeGetElement(v3, v2) + 80) != *((double *)this + 69)) {
      __assert_rtn("Initialize", "AUBeamNFSelector.cpp", 375, "Input(i).GetStreamFormat().mSampleRate == mSampleRate");
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement(v3, v2++);
    if (*(_DWORD *)(Element + 108) != 1) {
      return 4294956428;
    }
  }
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t v8 = *((void *)this + 21);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v7 >= v9) {
      break;
    }
    if (*(double *)(ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v7) + 80) != *((double *)this + 69)) {
      __assert_rtn("Initialize", "AUBeamNFSelector.cpp", 383, "Output(i).GetStreamFormat().mSampleRate == mSampleRate");
    }
    uint64_t v10 = ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 128), v7++);
    if (*(_DWORD *)(v10 + 108) != 1) {
      return 4294956428;
    }
  }
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  *((_DWORD *)this + 13++*((_DWORD *)this + 5) = ausdk::AUElement::GetParameter(v12, 2u);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNFSelector *)((char *)this + 32), 0);
  *((_DWORD *)this + 136) = (int)ausdk::AUElement::GetParameter(v13, 1u);
  AUBeamNFSelector::UpdateState(this);
  (*(void (**)(AUBeamNFSelector *, void, void))(*(void *)this + 72))(this, 0, 0);
  return 0;
}

void AUBeamNFSelector::~AUBeamNFSelector(AUBeamNFSelector *this)
{
  AUBeamNFSelector::~AUBeamNFSelector(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t vars8;

  *(void *)this = &unk_1F14BD1B0;
  unsigned int v2 = (void *)*((void *)this + 151);
  if (v2)
  {
    *((void *)this + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 148);
  if (v3)
  {
    *((void *)this + 149) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 145);
  if (v4)
  {
    *((void *)this + 146) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 142);
  if (v5)
  {
    *((void *)this + 143) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 139);
  if (v6)
  {
    *((void *)this + 140) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 136);
  if (v7)
  {
    *((void *)this + 137) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 133);
  if (v8)
  {
    *((void *)this + 134) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 130);
  if (v9)
  {
    *((void *)this + 131) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 127);
  if (v10)
  {
    *((void *)this + 128) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 124);
  if (v11)
  {
    *((void *)this + 12++*((_DWORD *)this + 5) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 121);
  if (v12)
  {
    *((void *)this + 122) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 118);
  if (v13)
  {
    *((void *)this + 119) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 115);
  if (v14)
  {
    *((void *)this + 116) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 112);
  if (v15)
  {
    *((void *)this + 113) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 109);
  if (v16)
  {
    *((void *)this + 110) = v16;
    operator delete(v16);
  }
  __int16 v17 = (void *)*((void *)this + 106);
  if (v17)
  {
    *((void *)this + 107) = v17;
    operator delete(v17);
  }
  int v18 = (void *)*((void *)this + 103);
  if (v18)
  {
    *((void *)this + 104) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 100);
  if (v19)
  {
    *((void *)this + 101) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)*((void *)this + 97);
  if (v20)
  {
    *((void *)this + 98) = v20;
    operator delete(v20);
  }
  unint64_t v21 = (void *)*((void *)this + 94);
  if (v21)
  {
    *((void *)this + 9++*((_DWORD *)this + 5) = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 91);
  if (v22)
  {
    *((void *)this + 92) = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)*((void *)this + 84);
  if (v23)
  {
    *((void *)this + 8++*((_DWORD *)this + 5) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)*((void *)this + 79);
  if (v24)
  {
    *((void *)this + 80) = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)*((void *)this + 76);
  if (v25)
  {
    *((void *)this + 77) = v25;
    operator delete(v25);
  }
  unint64_t v26 = (void *)*((void *)this + 73);
  if (v26)
  {
    *((void *)this + 74) = v26;
    operator delete(v26);
  }
  if (*((void *)this + 71))
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    *((void *)this + 71) = 0;
  }
  *((void *)this + 72) = 0;
  *((_DWORD *)this + 140) = 0;

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUBeamNFSelector::BlockSizeChangedCallback(AUBeamNFSelector *this, AudioUnit inUnit, OpaqueAudioComponentInstance *a3, AudioUnitScope inScope, AudioUnitElement inElement)
{
  if (a3 != 14) {
    __assert_rtn("BlockSizeChangedCallback", "AUBeamNFSelector.cpp", 311, "inID == kAudioUnitProperty_MaximumFramesPerSlice");
  }
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t result = AudioUnitGetProperty(inUnit, 0xEu, inScope, inElement, &outData, &ioDataSize);
  if (ioDataSize >= 5) {
    __assert_rtn("BlockSizeChangedCallback", "AUBeamNFSelector.cpp", 324, "newBlockSizeSize <= sizeof(newBlockSize)");
  }
  if (!result)
  {
    unsigned int v7 = outData;
    if (*((_DWORD *)this + 137) != outData)
    {
      *((_DWORD *)this + 137) = outData;
      SpectralProfile::GetProfile((SpectralProfile *)&v18, *((double *)this + 69), (uint64_t)this + 632, v7, 0.0, 2 * v7);
      uint64_t v8 = (void *)*((void *)this + 73);
      if (v8)
      {
        *((void *)this + 74) = v8;
        operator delete(v8);
      }
      *(_OWORD *)((char *)this + 584) = v18;
      *((void *)this + 7++*((_DWORD *)this + 5) = v19;
      SpectralProfile::GetProfile((SpectralProfile *)&v18, *((double *)this + 69), (uint64_t)this + 672, *((_DWORD *)this + 137), 1.0, 2 * *((_DWORD *)this + 137));
      uint64_t v9 = (void *)*((void *)this + 76);
      if (v9)
      {
        *((void *)this + 77) = v9;
        operator delete(v9);
      }
      *((_OWORD *)this + 38) = v18;
      *((void *)this + 78) = v19;
      AUBeamNFSelector::UpdateFrequencyBinIndices(this);
      AUBeamNFSelector::UpdateSmoothingCoefs(this);
      unint64_t v10 = *((unsigned int *)this + 137);
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 133, v10, &v18);
      unint64_t v11 = *((unsigned int *)this + 137);
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 136, v11, &v18);
      unint64_t v12 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 139, v12, &v18);
      unint64_t v13 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 142, v13, &v18);
      unint64_t v14 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 145, v14, &v18);
      unint64_t v15 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 148, v15, &v18);
      unint64_t v16 = (2 * *((_DWORD *)this + 137));
      LODWORD(v18) = 0;
      std::vector<float>::assign((char **)this + 151, v16, &v18);
      std::vector<float>::reserve((void **)this + 91, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 97, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 94, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 100, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 103, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 106, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 109, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 112, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 115, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 118, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 121, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 124, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 127, (2 * *((_DWORD *)this + 137)));
      std::vector<float>::reserve((void **)this + 130, (2 * *((_DWORD *)this + 137)));
      *(void *)((char *)this + 716) = 0;
      uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUBeamNFSelector *)((char *)this + 80), 0);
      return ausdk::AUBufferList::Allocate((AUBeamNFSelector *)((char *)this + 560), Element + 2, *((_DWORD *)this + 137));
    }
  }
  return result;
}

void AUBeamNFSelector::SampleRateChangedCallback(AUBeamNFSelector *this, AudioUnit inUnit, OpaqueAudioComponentInstance *a3, AudioUnitScope inScope, AudioUnitElement inElement)
{
  if (a3 != 2 && a3 != 8) {
    __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 209, "(inID == kAudioUnitProperty_SampleRate) || (inID == kAudioUnitProperty_StreamFormat)");
  }
  double outData = 0.0;
  if (a3 == 8)
  {
    UInt32 v12 = 40;
    OSStatus Property = AudioUnitGetProperty(inUnit, 8u, inScope, inElement, ioDataSize, &v12);
    if (v12 >= 0x29) {
      __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 255, "tempASBDSize <= sizeof(tempASBD)");
    }
    uint64_t v9 = (UInt32 *)((char *)this + 552);
    if (!Property) {
      uint64_t v9 = ioDataSize;
    }
    double v7 = *(double *)v9;
    goto LABEL_11;
  }
  ioDataSize[0] = 8;
  OSStatus v6 = AudioUnitGetProperty(inUnit, 2u, inScope, inElement, &outData, ioDataSize);
  if (ioDataSize[0] >= 9) {
    __assert_rtn("SampleRateChangedCallback", "AUBeamNFSelector.cpp", 229, "newSampleRateSize <= sizeof(newSampleRate)");
  }
  if (v6)
  {
    double v7 = *((double *)this + 69);
LABEL_11:
    double outData = v7;
    goto LABEL_12;
  }
  double v7 = outData;
LABEL_12:
  if (*((double *)this + 69) != v7)
  {
    *((double *)this + 69) = v7;
    SpectralProfile::GetProfile((SpectralProfile *)ioDataSize, v7, (uint64_t)this + 632, *((_DWORD *)this + 137), 0.0, 2 * *((_DWORD *)this + 137));
    unint64_t v10 = (void *)*((void *)this + 73);
    if (v10)
    {
      *((void *)this + 74) = v10;
      operator delete(v10);
    }
    *(_OWORD *)((char *)this + 584) = *(_OWORD *)ioDataSize;
    *((void *)this + 7++*((_DWORD *)this + 5) = v14;
    SpectralProfile::GetProfile((SpectralProfile *)ioDataSize, *((double *)this + 69), (uint64_t)this + 672, *((_DWORD *)this + 137), 1.0, 2 * *((_DWORD *)this + 137));
    unint64_t v11 = (void *)*((void *)this + 76);
    if (v11)
    {
      *((void *)this + 77) = v11;
      operator delete(v11);
    }
    *((_OWORD *)this + 38) = *(_OWORD *)ioDataSize;
    *((void *)this + 78) = v14;
    AUBeamNFSelector::UpdateFrequencyBinIndices(this);
    AUBeamNFSelector::UpdateSmoothingCoefs(this);
    *(void *)((char *)this + 716) = 0;
  }
}

float AUSM::DistanceGain::calculateDistanceGain(AUSM::DistanceGain *this, float a2)
{
  float result = 1.0;
  if (*(unsigned char *)this)
  {
    float v4 = *((float *)this + 3);
    float v5 = *((float *)this + 4);
    if (v5 < a2) {
      a2 = *((float *)this + 4);
    }
    if (a2 >= v4) {
      float v6 = a2;
    }
    else {
      float v6 = *((float *)this + 3);
    }
    switch(*((_DWORD *)this + 2))
    {
      case 0:
        float result = powf(v6, -1.0 - *((float *)this + 1));
        break;
      case 1:
        if (v4 > 0.001) {
          float result = powf(v6 / v4, *((float *)this + 6));
        }
        break;
      case 2:
        if ((float)(v5 - v4) > 0.001) {
          float result = *((float *)this + 5)
        }
                 / (float)((float)((float)(v6 - v4) / (float)(v5 - v4))
                         + (float)((float)(1.0 - (float)((float)(v6 - v4) / (float)(v5 - v4))) * *((float *)this + 5)));
        break;
      case 3:
        if ((float)(v5 - v4) > 0.001) {
          float result = (float)((float)((float)-(float)(v6 - v4) / (float)(v5 - v4)) * (float)(1.0 - *((float *)this + 5)))
        }
                 + 1.0;
        break;
      case 4:
        if (v4 > 0.001) {
          float result = v4 / v6;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void AUVolume::NewKernel(AUVolume *this)
{
}

void AUVolumeKernel::Process(AUVolumeKernel *this, const float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  uint64_t v8 = *((void *)this + 1);
  if (*((_DWORD *)this + 25) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v9) = -286331153 * a4;
      LODWORD(v9) = -286331153 * a4;
      if ((v9 >> 1) < 0x8888889)
      {
        int v11 = 30;
      }
      else
      {
        HIDWORD(v10) = -1431655765 * a4;
        LODWORD(v10) = -1431655765 * a4;
        if ((v10 >> 3) > 0xAAAAAAA) {
          return;
        }
        int v11 = 24;
      }
    }
    else
    {
      int v11 = 32;
    }
    *((_DWORD *)this + 24) = v11;
    *((_DWORD *)this + 2++*((_DWORD *)this + 5) = a4;
  }
  if (*(unsigned char *)(v8 + 597))
  {
    if (*((unsigned char *)this + 109))
    {
      *((unsigned char *)this + 109) = 0;
      if ((double)mach_absolute_time() * 0.0000000416666667 >= *(double *)(v8 + 600))
      {
        *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeAtUnityState;
        *(void *)((char *)this + 52) = 0x100000000;
        *(_OWORD *)((char *)this + 36) = unk_1BB8C82C8;
        *((_OWORD *)this + 7) = 0u;
        *((_OWORD *)this + 8) = 0u;
        *((_OWORD *)this + 9) = 0u;
        *((_OWORD *)this + 10) = 0u;
        *((_OWORD *)this + 11) = 0u;
        *((_OWORD *)this + 12) = 0u;
        *((_OWORD *)this + 13) = 0u;
        *((_OWORD *)this + 14) = 0u;
        *((_OWORD *)this + 1++*((_DWORD *)this + 5) = 0u;
        *((_OWORD *)this + 16) = 0u;
        *((_OWORD *)this + 17) = 0u;
        *((_OWORD *)this + 18) = 0u;
        *((_OWORD *)this + 19) = 0u;
        *((_OWORD *)this + 20) = 0u;
        *((_OWORD *)this + 21) = 0u;
        *((_OWORD *)this + 22) = 0u;
      }
    }
  }
  int v12 = *(_DWORD *)(v8 + 592);
  if (v12 != *((_DWORD *)this + 26))
  {
    unint64_t v13 = (ausdk::AUScope *)(*((void *)this + 1) + 32);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 0x7063676Eu);
    unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float v17 = ausdk::AUElement::GetParameter(v16, 0x5F737776u);
    long long v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float v19 = ausdk::AUElement::GetParameter(v18, 0x6365696Cu);
    unint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float v21 = ausdk::AUElement::GetParameter(v20, 0x766F6C74u);
    unint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float v23 = ausdk::AUElement::GetParameter(v22, 0x636C6970u);
    unint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    float v25 = ausdk::AUElement::GetParameter(v24, 0x766F6C76u);
    unint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, 0);
    *((unsigned char *)this + 108) = ausdk::AUElement::GetParameter(v26, 0x6D6F6465u) != 0.0;
    *((float *)this + 1++*((_DWORD *)this + 5) = fminf(__exp10f(Parameter * 0.05), 100.0);
    *((float *)this + 16) = fminf(__exp10f(v17 * 0.05), 100.0);
    *((float *)this + 17) = fmaxf(v21, 0.0001);
    *((float *)this + 18) = fmaxf(v25, 0.0001);
    *((float *)this + 19) = fmaxf(__exp10f(v19 * 0.05), 0.001);
    float v27 = __exp10f(v23 * 0.05);
    if (v27 < 0.25) {
      float v27 = 0.25;
    }
    if (v27 >= 0.98) {
      float v27 = 1.0;
    }
    *((float *)this + 20) = v27;
    double v28 = v27;
    *((_DWORD *)this + 21) = vcvtd_n_s64_f64(v28, 0x18uLL);
    *((_DWORD *)this + 22) = vcvtd_n_s64_f64(2.0 - v28, 0x18uLL);
    *((_DWORD *)this + 23) = vcvtd_n_s64_f64(1.0 / ((v28 + -1.0) * 4.0), 0x18uLL);
    *((_DWORD *)this + 26) = v12;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 592))(v8) & 1) == 0)
  {
    if (*((float *)this + 17) != *((float *)this + 10))
    {
      uint64_t v29 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0);
      LODWORD(v30) = *((_DWORD *)this + 24);
      float v31 = *((float *)this + 17);
      double v32 = *(double *)(v29 + 80) / (double)v30 * v31;
      if (v32 >= 2.22507386e-308) {
        double v33 = -6.90775528 / v32;
      }
      else {
        double v33 = -INFINITY;
      }
      double v34 = exp(v33);
      if (v33 < -708.4) {
        double v34 = 0.0;
      }
      float v35 = v34;
      *((float *)this + 10) = v31;
      *((float *)this + 11) = 1.0 - v35;
    }
    if (*((float *)this + 18) == *((float *)this + 12))
    {
      unsigned int v37 = *((_DWORD *)this + 24);
      if (!a4) {
        return;
      }
    }
    else
    {
      uint64_t v36 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0);
      unsigned int v37 = *((_DWORD *)this + 24);
      float v38 = *((float *)this + 18);
      double v39 = *(double *)(v36 + 80) / (double)v37 * v38;
      if (v39 >= 2.22507386e-308) {
        double v40 = -6.90775528 / v39;
      }
      else {
        double v40 = -INFINITY;
      }
      double v41 = exp(v40);
      if (v40 < -708.4) {
        double v41 = 0.0;
      }
      float v42 = v41;
      *((float *)this + 12) = v38;
      *((float *)this + 13) = 1.0 - v42;
      if (!a4) {
        return;
      }
    }
    unsigned int v43 = 0;
    while (1)
    {
      float v44 = (float32x4_t *)&a3[v43];
      float __C = 0.0;
      float v45 = (float32x4_t *)&a2[v43];
      vDSP_maxmgv(v45->f32, 1, &__C, (int)v37);
      float v47 = __C;
      if (*((unsigned char *)this + 108))
      {
        float v48 = *((float *)this + 6);
        if (__C >= v48) {
          float v49 = __C;
        }
        else {
          float v49 = *((float *)this + 6);
        }
        if (v37)
        {
          uint64_t v51 = v37;
          float v50 = (float *)((char *)this + 112);
          float v52 = &a3[v43];
          do
          {
            float v53 = v45->f32[0];
            float v45 = (float32x4_t *)((char *)v45 + 4);
            *v52++ = *v50;
            *v50++ = v53;
            --v51;
          }
          while (v51);
        }
        float v45 = (float32x4_t *)&a3[v43];
      }
      else
      {
        float v48 = __C;
        float v49 = __C;
      }
      if (v49 < 0.00000001) {
        float v49 = 0.00000001;
      }
      float v54 = *((float *)this + 16) * *((float *)this + 15);
      float v55 = *((float *)this + 9);
      if (v54 >= v55
        || (uint64_t v56 = *((void *)this + 1), v57 = (float *)((char *)this + 52), !*(unsigned char *)(v56 + 596))
        && (unsigned int v57 = (float *)((char *)this + 52), !*(unsigned char *)(v56 + 597)))
      {
        unsigned int v57 = (float *)((char *)this + 44);
      }
      float v58 = v55 + (float)(*v57 * (float)(v54 - v55));
      *((float *)this + 9) = v58;
      float v59 = *((float *)this + 19);
      if ((float)(v49 * v58) > v59)
      {
        float v58 = v59 / v49;
        *((float *)this + 9) = v59 / v49;
      }
      *((float *)this + ++*((_DWORD *)this + 5) = v58;
      if (*((unsigned char *)this + 56))
      {
        *((float *)this + 8) = v58;
        *((_DWORD *)this + 7) = vcvts_n_s32_f32(v58, 0x18uLL);
        *((unsigned char *)this + 56) = 0;
        v46.f32[0] = v58;
      }
      else
      {
        v46.i32[0] = *((_DWORD *)this + 8);
      }
      vDSP_Length v60 = *((unsigned int *)this + 24);
      float32_t __B = v46.f32[0];
      float v61 = (float)(v58 - v46.f32[0]) / (float)v60;
      if (v58 >= v46.f32[0]) {
        float v62 = v58;
      }
      else {
        float v62 = v46.f32[0];
      }
      float v63 = v62 * v48;
      float v64 = *((float *)this + 20);
      if (v63 < v64)
      {
        if (v58 == v46.f32[0]) {
          vDSP_vsmul(v45->f32, 1, &__B, v44->f32, 1, v60);
        }
        else {
          RampGainMono(v45, v44, v60, &__B, v61, v46);
        }
        goto LABEL_86;
      }
      if (v64 >= 1.0)
      {
        for (; v60; LODWORD(v60) = v60 - 1)
        {
          float v70 = v45->f32[0];
          float v45 = (float32x4_t *)((char *)v45 + 4);
          float v71 = v70 * v46.f32[0];
          if ((float)(v70 * v46.f32[0]) >= -1.0) {
            float v72 = v71;
          }
          else {
            float v72 = -1.0;
          }
          if (v71 <= 1.0) {
            float v73 = v72;
          }
          else {
            float v73 = 1.0;
          }
          v44->f32[0] = v73;
          float v44 = (float32x4_t *)((char *)v44 + 4);
          v46.f32[0] = v61 + v46.f32[0];
        }
        goto LABEL_86;
      }
      if (v60) {
        break;
      }
LABEL_86:
      *((float *)this + 8) = v58;
      *((float *)this + 6) = v47;
      v43 += v37;
      if (v43 >= a4) {
        return;
      }
    }
    float v65 = (float)*((int *)this + 23) * 0.000000059605;
    float v66 = (float)*((int *)this + 22) * 0.000000059605;
    float v67 = (float)*((int *)this + 21) * 0.000000059605;
    while (1)
    {
      float v68 = v45->f32[0] * v46.f32[0];
      if (v68 >= 0.0)
      {
        if (v68 > v67)
        {
          float v69 = 1.0;
          if (v68 < v66) {
            float v69 = (float)((float)((float)(v68 - v66) * (float)(v68 - v66)) * v65) + 1.0;
          }
          goto LABEL_74;
        }
      }
      else if (v68 < (float)-v67)
      {
        float v69 = -1.0;
        if (v68 >= (float)-v66) {
          float v69 = (float)((float)-(float)((float)((float)-v68 - v66) * (float)((float)-v68 - v66)) * v65) + -1.0;
        }
        goto LABEL_74;
      }
      float v69 = v45->f32[0] * v46.f32[0];
LABEL_74:
      v44->f32[0] = v69;
      float v44 = (float32x4_t *)((char *)v44 + 4);
      float v45 = (float32x4_t *)((char *)v45 + 4);
      v46.f32[0] = v61 + v46.f32[0];
      LODWORD(v60) = v60 - 1;
      if (!v60) {
        goto LABEL_86;
      }
    }
  }
}

double AUVolumeKernel::Reset(AUVolumeKernel *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!*(_WORD *)(v1 + 596))
  {
    *(void *)((char *)this + 52) = 0x100000000;
    *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeState;
    *(_OWORD *)((char *)this + 36) = unk_1BB8C82A0;
  }
  if (*(unsigned char *)(v1 + 597) && !*(unsigned char *)(v1 + 598))
  {
    *(void *)((char *)this + 52) = 0x100000000;
    *(_OWORD *)((char *)this + 20) = AUVolumeKernel::kDefaultVolumeAtUnityState;
    *(_OWORD *)((char *)this + 36) = unk_1BB8C82C8;
  }
  double result = 0.0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 1++*((_DWORD *)this + 5) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

void AUVolumeKernel::~AUVolumeKernel(AUVolumeKernel *this)
{
}

uint64_t AUVolume::ValidFormat(AUVolume *this, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  long long v4 = *(_OWORD *)&a4->mBytesPerPacket;
  long long v8 = *(_OWORD *)&a4->mSampleRate;
  long long v9 = v4;
  uint64_t v10 = *(void *)&a4->mBitsPerChannel;
  unsigned int v5 = HIDWORD(v8);
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)&v8, a2);
  if (result)
  {
    unsigned int v7 = (v5 >> 5) & 1;
    if (HIDWORD(v9) < 3) {
      unsigned int v7 = 1;
    }
    if (HIDWORD(v9)) {
      return v7;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUVolume::SupportedNumChannels(AUVolume *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUVolume::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

uint64_t AUVolume::SupportsTail(AUVolume *this)
{
  return 1;
}

double AUVolume::GetTailTime(AUVolume *this)
{
  return 0.0;
}

double AUVolume::GetLatency(AUVolume *this)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVolume *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x6D6F6465u);
  double result = 0.0;
  if (Parameter != 0.0 && *((unsigned char *)this + 17))
  {
    unsigned int v5 = (uint64_t *)*((void *)this + 66);
    if (*((uint64_t **)this + 67) != v5)
    {
      uint64_t v6 = *v5;
      uint64_t v7 = ausdk::AUScope::SafeGetElement((AUVolume *)((char *)this + 128), 0);
      LODWORD(v8) = *(_DWORD *)(v6 + 96);
      return (double)v8 / *(double *)(v7 + 80);
    }
  }
  return result;
}

uint64_t AUVolume::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

uint64_t AUVolume::GetParameterInfo(AUVolume *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  AudioUnitParameterValue v6 = 0.0;
  uint64_t result = 4294956418;
  if (a3 <= 1836016740)
  {
    switch(a3)
    {
      case 1601402742:
        uint64_t v7 = 0x41400000C2C00000;
        int v8 = -1073741824;
        AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v10 = @"user gain dB";
        break;
      case 1667590508:
        uint64_t v7 = 0x41400000C1400000;
        int v8 = -1073741824;
        AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v10 = @"ceiling dB";
        break;
      case 1668049264:
        uint64_t v7 = 3233808384;
        int v8 = -1073741824;
        AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v10 = @"softclip level dB";
        break;
      default:
        return result;
    }
  }
  else if (a3 > 1987013747)
  {
    if (a3 == 1987013748)
    {
      uint64_t v7 = 0x4270000038D1B717;
      AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Seconds;
      CFStringRef v10 = @"volume smooth time";
    }
    else
    {
      if (a3 != 1987013750) {
        return result;
      }
      uint64_t v7 = 0x4270000038D1B717;
      AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Seconds;
      CFStringRef v10 = @"volume decay smooth time";
    }
    int v8 = -1069547520;
    AudioUnitParameterValue v6 = 0.05;
  }
  else if (a3 == 1836016741)
  {
    uint64_t v7 = 0x3F80000000000000;
    int v8 = -1073741824;
    AudioUnitParameterValue v6 = 1.0;
    AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Boolean;
    CFStringRef v10 = @"look ahead";
  }
  else
  {
    if (a3 != 1885562734) {
      return result;
    }
    uint64_t v7 = 0x42100000C1400000;
    int v8 = -1073741824;
    AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Decibels;
    CFStringRef v10 = @"preclip gain dB";
  }
  buffer->cfNameString = v10;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v9;
  *(void *)&buffer->minCFNumberRef Value = v7;
  buffer->defaultCFNumberRef Value = v6;
  buffer->flags += v8;
  return result;
}

uint64_t AUVolume::SetParameter(AUVolume *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUVolume::SetProperty(AUVolume *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a2 == 64001 && a3 == 0)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 596) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 64002 && !a3)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 597) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 64003 && !a3)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      int v9 = *((unsigned __int8 *)this + 598);
      int v10 = *a5;
      *((unsigned char *)this + 598) = *a5 != 0;
      if (v9 && !v10)
      {
        if (!*((unsigned char *)this + 597)) {
          return 0;
        }
        *((double *)this + 7++*((_DWORD *)this + 5) = (double)mach_absolute_time() * 0.0000000416666667 + 0.25;
        int v11 = (uint64_t *)*((void *)this + 66);
        int v12 = (uint64_t *)*((void *)this + 67);
        if (v11 == v12)
        {
          return 0;
        }
        else
        {
          do
          {
            uint64_t result = 0;
            uint64_t v13 = *v11++;
            *(unsigned char *)(v13 + 109) = 1;
          }
          while (v11 != v12);
        }
      }
      return result;
    }
    return 4294956445;
  }

  return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
}

uint64_t AUVolume::GetProperty(AUVolume *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 == 64001 && a3 == 0)
  {
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 596);
    goto LABEL_9;
  }
  if (a2 == 64002 && !a3)
  {
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 597);
LABEL_9:
    *a5 = v8;
    return result;
  }
  if (a2 == 64003 && !a3)
  {
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 598);
    goto LABEL_9;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 554);
      goto LABEL_9;
    }
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 552);
      goto LABEL_9;
    }
  }
  return 4294956417;
}

uint64_t AUVolume::GetPropertyInfo(AUVolume *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  BOOL v6 = (a2 - 64001) <= 2 && a3 == 0;
  if (!v6 && (a3 || (a2 | 8) != 0x1D)) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUVolume::Reset(AUVolume *this, int a2)
{
  long long v4 = (void *)*((void *)this + 66);
  unsigned int v5 = (void *)*((void *)this + 67);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
    }
    ++v4;
  }
  if (!a2)
  {
    BOOL v6 = (void *)*((void *)this + 66);
    if (*((void **)this + 67) != v6)
    {
      if (*v6) {
        (*(void (**)(void))(*(void *)*v6 + 16))(*v6);
      }
    }
  }
  return 0;
}

double AUVolume::Cleanup(AUVolume *this)
{
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUVolume::Initialize(AUVolume *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 392))(&v6);
  BOOL v3 = (v7 & 0x20) == 0 && v8 == 2;
  *((unsigned char *)this + 584) = v3;
  uint64_t v4 = ausdk::AUEffectBase::Initialize(this);
  if (!v4) {
    (*(void (**)(AUVolume *, void, void))(*(void *)this + 72))(this, 0, 0);
  }
  return v4;
}

void AUVolume::~AUVolume(AUVolume *this)
{
  AUVolume::~AUVolume(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14BD420;
  unsigned int v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  *(_OWORD *)((char *)this + 568) = 0u;
  *(void *)this = &unk_1F14C8258;
  BOOL v3 = v2;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMNBandEQ::GetScopeExtended(AUMNBandEQ *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 584;
  }
  else {
    return 0;
  }
}

uint64_t AUMNBandEQ::ChangeStreamFormat(AUMNBandEQ *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  double mSampleRate = a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    ++*((_DWORD *)this + 132);
    (*(void (**)(AUMNBandEQ *, uint64_t, void, void, double))(*(void *)this + 432))(this, 3, 0, 0, mSampleRate);
  }
  return 0;
}

unint64_t AUMNBandEQ::SupportedNumChannels(AUMNBandEQ *this, const AUChannelInfo **a2)
{
  {
    std::vector<AUChannelInfo>::vector();
    __cxa_atexit((void (*)(void *))std::vector<AUChannelInfo>::~vector[abi:ne180100], &AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs, &dword_1BB0CE000);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    unsigned int v5 = &v6;
    std::__call_once(&AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sOnceFlag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>);
  }
  if (a2) {
    *a2 = (const AUChannelInfo *)AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return (unint64_t)(qword_1E9F7FEB8
                          - AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs) >> 2;
}

void sub_1BB6A01B8(_Unwind_Exception *a1)
{
}

double std::vector<AUChannelInfo>::vector()
{
  AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = 0;
  qword_1E9F7FEB8 = 0;
  qword_1E9F7FEC0 = 0;
  uint64_t v0 = operator new(0x20uLL);
  qword_1E9F7FEB8 = (uint64_t)(v0 + 2);
  qword_1E9F7FEC0 = (uint64_t)(v0 + 2);
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = (uint64_t)v0;
  return result;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::$_0 &&>>()
{
  uint64_t v0 = AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  *(void *)&double result = 0x6000600050005;
  *(_OWORD *)AUMNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = xmmword_1BB87BB60;
  *(_OWORD *)(v0 + 16) = xmmword_1BB87BB50;
  return result;
}

uint64_t std::vector<AUChannelInfo>::~vector[abi:ne180100](uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL AUMNBandEQ::StreamFormatWritable(AUMNBandEQ *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMNBandEQ::SupportsTail(AUMNBandEQ *this)
{
  return 1;
}

double AUMNBandEQ::GetTailTime(AUMNBandEQ *this)
{
  return 0.05;
}

double AUMNBandEQ::GetLatency(AUMNBandEQ *this)
{
  return 0.0;
}

uint64_t AUMNBandEQ::GetParameterValueStrings(AUMNBandEQ *this, int a2, unsigned int a3, const __CFArray **a4)
{
  values[12] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t result = 4294956418;
  if (a2 == 4 && a3 >= 0x3E8 && a3 % 0x3E8 <= 0xF && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      values[0] = @"Parametric";
      values[1] = @"Butterworth Low Pass";
      values[2] = @"Butterworth High Pass";
      values[3] = @"Resonant Low Pass";
      values[4] = @"Resonant High Pass";
      values[5] = @"Band Pass";
      values[6] = @"Band Stop";
      values[7] = @"Low Shelf";
      values[8] = @"High Shelf";
      values[9] = @"Resonant Low Shelf";
      values[10] = @"Resonant High Shelf";
      values[11] = @"All Pass";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)values, 12, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUMNBandEQ::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 132);
  }
  return result;
}

UInt8 *AUMNBandEQ::SaveExtendedScopes(AUMNBandEQ *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMNBandEQ::GetParameterInfo(AUMNBandEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2 != 4) {
    return 4294956418;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a3)
  {
    if (a3 >= 0x3E8)
    {
      unsigned int v6 = a3 % 0x3E8;
      if (a3 % 0x3E8 > 0xF) {
        return 4294956418;
      }
      a3 = 1000 * (a3 / 0x3E8);
    }
    else
    {
      unsigned int v6 = 0;
    }
    UInt32 v9 = v6 + 1;
    uint64_t result = 4294956418;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        buffer->cfNameString = @"bypass";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"bypass", buffer->name, 52, 0x8000100u);
        buffer->clumpID = v9;
        AudioUnitParameterOptions flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
        AudioUnitParameterValue v11 = 1.0;
LABEL_23:
        buffer->defaultCFNumberRef Value = v11;
        goto LABEL_24;
      }
      if (a3 != 2000) {
        return result;
      }
      buffer->cfNameString = @"type";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"type", buffer->name, 52, 0x8000100u);
      buffer->clumpID = v9;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v12 = 0x4130000000000000;
LABEL_21:
      *(void *)&buffer->minCFNumberRef Value = v12;
      buffer->defaultCFNumberRef Value = 0.0;
LABEL_24:
      AudioUnitParameterOptions v8 = flags | 0xC0100000;
      goto LABEL_25;
    }
    if (a3 != 3000)
    {
      if (a3 != 4000)
      {
        if (a3 != 5000) {
          return result;
        }
        buffer->cfNameString = @"bandwidth";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"bandwidth", buffer->name, 52, 0x8000100u);
        buffer->clumpID = v9;
        AudioUnitParameterOptions flags = buffer->flags;
        buffer->unit = kAudioUnitParameterUnit_Octaves;
        *(void *)&buffer->minCFNumberRef Value = 0x40A000003D4CCCCDLL;
        AudioUnitParameterValue v11 = 0.5;
        goto LABEL_23;
      }
      buffer->cfNameString = @"gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = v9;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v12 = 0x41C00000C2C00000;
      goto LABEL_21;
    }
    buffer->cfNameString = @"frequency";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(@"frequency", buffer->name, 52, 0x8000100u);
    buffer->clumpID = v9;
    buffer->flags |= 0x100000u;
    *(void *)&buffer->unit = 0x4120000000000008;
    AudioUnitParameterValue v13 = *(double *)(ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0) + 80) * 0.49000001;
    buffer->maxCFNumberRef Value = v13;
    buffer->defaultCFNumberRef Value = 1000.0;
  }
  else
  {
    buffer->cfNameString = @"global gain";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(@"global gain", buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    *(void *)&buffer->minCFNumberRef Value = 0x41C00000C2C00000;
    buffer->defaultCFNumberRef Value = 0.0;
  }
  AudioUnitParameterOptions v8 = buffer->flags | 0xC0000000;
LABEL_25:
  uint64_t result = 0;
  buffer->AudioUnitParameterOptions flags = v8;
  return result;
}

uint64_t AUMNBandEQ::GetParameterList(AUMNBandEQ *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  if (!a2)
  {
    uint64_t result = 4294956418;
LABEL_11:
    *a4 = a2;
    return result;
  }
  if (a2 == 4)
  {
    if (a3) {
      *a3 = 0;
    }
    unsigned int v4 = 0;
    unsigned int v5 = a3 + 5;
    do
    {
      if (a3)
      {
        *((int32x4_t *)v5 - 1) = vaddq_s32(vdupq_n_s32(v4), (int32x4_t)xmmword_1BB87BB30);
        unsigned int *v5 = v4 + 5000;
      }
      ++v4;
      v5 += 5;
    }
    while (v4 != 16);
    uint64_t result = 0;
    a2 = 81;
    goto LABEL_11;
  }
  return 4294956430;
}

uint64_t AUMNBandEQ::Render(AUMNBandEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  AudioUnitParameterOptions v8 = (AUMNBandEQ *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  AudioUnitParameterValue v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUMNBandEQ *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

void AUMNBandEQ::ProcessBufferLists(AUMNBandEQ *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    AUMNBandEQ::UpdateFilterCoefficients(this);
    *((_DWORD *)this + 133) = v9;
  }
  if (!SimpleMeters::ProcessInputBufferList((AUMNBandEQ *)((char *)this + 640), a5, a3))
  {
    unint64_t mNumberBuffers = a3->mNumberBuffers;
    if (mNumberBuffers > (uint64_t)(*((void *)this + 71) - *((void *)this + 70)) >> 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        unint64_t v24 = "AUMNBandEQ.cpp";
        *(_WORD *)float v25 = 1024;
        *(_DWORD *)&v25[2] = 721;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FATAL - mFilterList size does not match inABL size!", buf, 0x12u);
      }
      __break(1u);
    }
    else
    {
      if (mNumberBuffers)
      {
        unint64_t v11 = 0;
        do
        {
          v21[0] = 1;
          *(_DWORD *)std::string buf = 1;
          uint64_t v12 = (char *)a3 + 16 * v11;
          int v13 = *((_DWORD *)v12 + 3);
          void v21[2] = 1;
          void v21[3] = v13;
          HIDWORD(v24) = 1;
          *(_DWORD *)float v25 = v13;
          *(void *)&v25[4] = *((void *)v12 + 2);
          mData = a4->mBuffers[v11].mData;
          if (*((_DWORD *)this + 158) || (unint64_t v20 = *(_DWORD **)(*((void *)this + 70) + 8 * v11), !v20[4]))
          {
            uint64_t v14 = 0;
            unint64_t v15 = 0;
            unint64_t v16 = 1;
            do
            {
              size_t v17 = *(unsigned int *)&v25[v14 * 4];
              if (v17 == v21[v14 + 3])
              {
                long long v18 = *(const void **)&v25[v14 * 4 + 4];
                float v19 = *(void **)&v21[v14 + 4];
                if (v18 != v19)
                {
                  memcpy(v19, v18, v17);
                  unint64_t v16 = *(unsigned int *)buf;
                }
              }
              ++v15;
              v14 += 4;
            }
            while (v15 < v16);
          }
          else
          {
            (*(void (**)(_DWORD *, uint64_t, uint8_t *, _DWORD *))(*(void *)v20 + 32))(v20, a5, buf, v21);
          }
          ++v11;
        }
        while (v11 < a3->mNumberBuffers);
      }
      SimpleMeters::ProcessOutputBufferList((AUMNBandEQ *)((char *)this + 640), a5, a4);
    }
  }
}

void AUMNBandEQ::UpdateFilterCoefficients(AUMNBandEQ *this)
{
  AUMNBandEQ::SetCoefficients(this, (uint64_t *)this + 67);
  uint64_t v2 = *((void *)this + 70);
  if (*((void *)this + 71) != v2)
  {
    unsigned int v3 = 0;
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 8 * v4) + 16))(*(void *)(v2 + 8 * v4), 16, *((void *)this + 67) + 40 * v3);
      unint64_t v4 = v5;
      uint64_t v2 = *((void *)this + 70);
      ++v5;
      v3 += 16;
    }
    while (v4 < (*((void *)this + 71) - v2) >> 3);
  }
}

void AUMNBandEQ::SetCoefficients(void *a1, uint64_t *a2)
{
  if (a1[71] != a1[70])
  {
    unsigned int v4 = 0;
    LODWORD(v++*((_DWORD *)this + 5) = 0;
    unsigned int v6 = (ausdk::AUScope *)(a1 + 73);
    unsigned int v43 = (ausdk::AUScope *)(a1 + 16);
    do
    {
      uint64_t v7 = 40 * v4;
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
      float Parameter = ausdk::AUElement::GetParameter(Element, 0);
      uint64_t v10 = 0;
      char v11 = 0;
      double v12 = *(double *)(ausdk::AUScope::SafeGetElement(v43, 0) + 80);
      double v13 = Parameter * 0.05;
      unsigned int v14 = 5000;
      do
      {
        unint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
        float v16 = ausdk::AUElement::GetParameter(v15, v14 - 3000);
        size_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
        float v18 = ausdk::AUElement::GetParameter(v17, v14 - 2000);
        float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
        float v20 = ausdk::AUElement::GetParameter(v19, v14 - 1000);
        float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
        float v22 = ausdk::AUElement::GetParameter(v21, v14);
        float v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, v5);
        if (ausdk::AUElement::GetParameter(v23, v14 - 4000) == 0.0 && v12 * 0.49 >= v18)
        {
          float v25 = v18 * 6.28318531 / v12;
          switch(v16)
          {
            case 0u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = v20;
              int v30 = 11;
              goto LABEL_32;
            case 1u:
              uint64_t v32 = *a2;
              double v33 = (BiquadCoefficients *)(*a2 + v7 + v10);
              if (v25 <= 0.0) {
                goto LABEL_26;
              }
              double v34 = fmin(v25, 3.11017673);
              double v35 = 0.0;
              int v36 = 1;
              goto LABEL_24;
            case 2u:
              uint64_t v32 = *a2;
              double v33 = (BiquadCoefficients *)(*a2 + v7 + v10);
              if (v25 <= 0.0) {
                goto LABEL_26;
              }
              double v34 = fmin(v25, 3.11017673);
              double v35 = 0.0;
              int v36 = 2;
              goto LABEL_24;
            case 3u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = 0.0;
              int v30 = 1;
              goto LABEL_32;
            case 4u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = 0.0;
              int v30 = 2;
              goto LABEL_32;
            case 5u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = 0.0;
              int v30 = 3;
              goto LABEL_32;
            case 6u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = 0.0;
              int v30 = 4;
              goto LABEL_32;
            case 7u:
              uint64_t v32 = *a2;
              double v33 = (BiquadCoefficients *)(*a2 + v7 + v10);
              if (v25 <= 0.0) {
                goto LABEL_26;
              }
              double v35 = v20;
              double v34 = fmin(v25, 3.11017673);
              int v36 = 7;
              goto LABEL_24;
            case 8u:
              uint64_t v32 = *a2;
              double v33 = (BiquadCoefficients *)(*a2 + v7 + v10);
              if (v25 <= 0.0)
              {
LABEL_26:
                float v31 = (void *)(v32 + v7 + v10);
                *(void *)double v33 = 0;
                *((void *)v33 + 1) = 0;
LABEL_27:
                v31[3] = 0;
                v31[4] = 0;
                void v31[2] = 0x3FF0000000000000;
                if ((v11 & 1) == 0)
                {
LABEL_33:
                  uint64_t v37 = *a2;
                  double v38 = __exp10(v13);
                  double v39 = (float64x2_t *)(v37 + v7 + v10);
                  v39[1] = vmulq_n_f64(v39[1], v38);
                  v39[2].f64[0] = v39[2].f64[0] * v38;
                }
              }
              else
              {
                double v35 = v20;
                double v34 = fmin(v25, 3.11017673);
                int v36 = 8;
LABEL_24:
                BiquadCoefficients::SetPriv(v33, v36, v34, 0.707106781, v35);
                if ((v11 & 1) == 0) {
                  goto LABEL_33;
                }
              }
LABEL_34:
              char v11 = 1;
              break;
            case 9u:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = v20;
              int v30 = 7;
              goto LABEL_32;
            case 0xAu:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = v20;
              int v30 = 8;
              goto LABEL_32;
            case 0xBu:
              uint64_t v26 = (BiquadCoefficients *)(*a2 + v7 + v10);
              double v27 = v25;
              double v28 = v22;
              double v29 = 0.0;
              int v30 = 5;
LABEL_32:
              BiquadCoefficients::SetBW(v26, v30, v27, v28, v29);
              if ((v11 & 1) == 0) {
                goto LABEL_33;
              }
              goto LABEL_34;
            default:
              float v31 = (void *)(*a2 + v7 + v10);
              *float v31 = 0;
              v31[1] = 0;
              goto LABEL_27;
          }
        }
        else
        {
          unint64_t v24 = (void *)(*a2 + v7 + v10);
          *unint64_t v24 = 0;
          v24[1] = 0;
          v24[3] = 0;
          v24[4] = 0;
          v24[2] = 0x3FF0000000000000;
        }
        v10 += 40;
        ++v14;
      }
      while (v10 != 640);
      if ((v11 & 1) == 0)
      {
        uint64_t v40 = *a2;
        double v41 = __exp10(v13);
        float v42 = (float64x2_t *)(v40 + 40 * (16 * v5));
        v42[1] = vmulq_n_f64(v42[1], v41);
        v42[2].f64[0] = v42[2].f64[0] * v41;
      }
      unint64_t v5 = (v5 + 1);
      v4 += 16;
    }
    while (v5 < (uint64_t)(a1[71] - a1[70]) >> 3);
  }
}

uint64_t AUMNBandEQ::CanScheduleParameters(AUMNBandEQ *this)
{
  return 0;
}

uint64_t AUMNBandEQ::SetParameter(AUMNBandEQ *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 != 4) {
    return 4294956418;
  }
  if (a2 >= 0x3E8 && a2 % 0x3E8 > 0xF) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMNBandEQ *)((char *)this + 584), a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUMNBandEQ::GetParameter(AUMNBandEQ *this, unsigned int a2, int a3, unsigned int a4, float *a5)
{
  if (a3 != 4) {
    return 4294956418;
  }
  if (a2 >= 0x3E8 && a2 % 0x3E8 > 0xF) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMNBandEQ *)((char *)this + 584), a4);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  uint64_t result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUMNBandEQ::SetProperty(AUMNBandEQ *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  unsigned int v12 = 0;
  if (SimpleMeters::HandleSetProperty((AUMNBandEQ *)((char *)this + 640), a2, a3, a5, a6, (int *)&v12, a7)) {
    return v12;
  }
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 158) = *a5;
  }
  return result;
}

uint64_t AUMNBandEQ::GetProperty(AUMNBandEQ *this, int a2, unsigned int a3, unsigned int a4, int *a5, int *a6)
{
  unsigned int v21 = 0;
  if (SimpleMeters::HandleGetProperty((AUMNBandEQ *)((char *)this + 640), a2, a3, a5, &v21, a6)) {
    return v21;
  }
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    int v12 = *((_DWORD *)this + 158);
LABEL_11:
    *a5 = v12;
    return result;
  }
  if (a3 != 4) {
    return 4294956417;
  }
  if (a2 != 2205)
  {
    if (a2 == 2201 || a2 == 2200)
    {
      uint64_t result = 0;
      int v12 = 16;
      goto LABEL_11;
    }
    return 4294956417;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  uint64_t v13 = *((void *)this + 71) - *((void *)this + 70);
  if (a4 >= (unint64_t)(v13 >> 3)) {
    return 4294956419;
  }
  std::vector<BiquadCoefficients>::vector(__p, 2 * v13);
  AUMNBandEQ::SetCoefficients(this, (uint64_t *)__p);
  std::vector<double>::vector(&bytes, 0x50uLL);
  uint64_t v14 = 0;
  unint64_t v15 = bytes;
  float v16 = (char *)__p[0] + 640 * a4;
  do
  {
    size_t v17 = &v15[v14];
    *(void *)size_t v17 = *(void *)&v16[v14];
    *((void *)v17 + 1) = *(void *)&v16[v14 + 8];
    *((void *)v17 + 2) = *(void *)&v16[v14 + 16];
    *((void *)v17 + 3) = *(void *)&v16[v14 + 24];
    *((void *)v17 + 4) = *(void *)&v16[v14 + 32];
    v14 += 40;
  }
  while (v14 != 640);
  *(void *)a5 = CFDataCreate(0, v15, v19 - v15);
  if (bytes)
  {
    float v19 = bytes;
    operator delete(bytes);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1BB6A131C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BiquadCoefficients>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[5 * v5];
    unsigned int v6 = &v4[5 * a2];
    do
    {
      *unsigned int v4 = 0;
      v4[1] = 0;
      v4[3] = 0;
      v4[4] = 0;
      void v4[2] = 0x3FF0000000000000;
      v4 += 5;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}