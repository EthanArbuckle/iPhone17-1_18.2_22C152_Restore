uint64_t AUChannelSelector::Reset(AUChannelSelector *this)
{
  SimpleMeters::Reset((uint64_t)this + 568);
  return 0;
}

void AUChannelSelector::Cleanup(AUChannelSelector *this)
{
  if (!*((unsigned char *)this + 560) && *((unsigned char *)this + 552))
  {
    v2 = (void *)*((void *)this + 66);
    if (v2)
    {
      *((void *)this + 67) = v2;
      operator delete(v2);
    }
    *((unsigned char *)this + 552) = 0;
  }
  *((void *)this + 72) = *((void *)this + 71);
  *((void *)this + 75) = *((void *)this + 74);
}

uint64_t AUChannelSelector::Initialize(AUChannelSelector *this)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  v69[0] = 0;
  v70 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  if (*((unsigned char *)this + 552))
  {
    v67[0] = 0;
    uint64_t v68 = 0;
    nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>((uint64_t)v67, (uint64_t)this + 528);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    v2 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "channel_map");
    v3 = (uint64_t **)&v68;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    char v4 = *(unsigned char *)v2;
    *(unsigned char *)v2 = v67[0];
    v67[0] = v4;
    uint64_t v5 = v2[1];
    v2[1] = v68;
    uint64_t v68 = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    int v6 = v67[0];
  }
  else
  {
    v65[0] = 0;
    uint64_t v66 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "channel_map");
    v3 = (uint64_t **)&v66;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    char v8 = *(unsigned char *)v7;
    *(unsigned char *)v7 = v65[0];
    v65[0] = v8;
    uint64_t v9 = v7[1];
    v7[1] = v66;
    uint64_t v66 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    int v6 = v65[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v3, v6);
  v10 = (uint64_t *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108);
  v63[0] = 6;
  v64 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "num_input_channels");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  unsigned __int8 v12 = *(unsigned char *)v11;
  *(unsigned char *)v11 = v63[0];
  v63[0] = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v64;
  v64 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v64, v63[0]);
  v14 = (uint64_t *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
  v61[0] = 6;
  v62 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "num_output_channels");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  unsigned __int8 v16 = *(unsigned char *)v15;
  *(unsigned char *)v15 = v61[0];
  v61[0] = v16;
  v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v62;
  v62 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v61[0]);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0);
  uint64_t v19 = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0);
  int v20 = *(_DWORD *)(Element + 88);
  BOOL v22 = v20 == 1718773105 && *(_DWORD *)(Element + 112) == 64;
  if (((v20 == 1819304813) & *(unsigned char *)(Element + 92)) == 0 && !v22)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = this;
    v24 = "[%p] input format is not valid";
    goto LABEL_28;
  }
  int v25 = *(_DWORD *)(v19 + 88);
  BOOL v27 = v25 == 1718773105 && *(_DWORD *)(v19 + 112) == 64;
  if (((v25 == 1819304813) & *(unsigned char *)(v19 + 92)) == 0 && !v27)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = this;
    v24 = "[%p] output format is not valid";
LABEL_28:
    v28 = buf;
LABEL_72:
    _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, v24, v28, 0xCu);
LABEL_73:
    uint64_t v53 = 4294956421;
    goto LABEL_74;
  }
  uint64_t v29 = Element + 80;
  uint64_t v30 = v19 + 80;
  long long v31 = *(_OWORD *)(Element + 96);
  *(_OWORD *)buf = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf[16] = v31;
  uint64_t v75 = *(void *)(Element + 112);
  if ((buf[12] & 0x20) != 0)
  {
    unsigned int v32 = 1;
    goto LABEL_33;
  }
  unsigned int v32 = *(_DWORD *)&buf[28];
  if (*(_DWORD *)&buf[28])
  {
LABEL_33:
    unsigned int v33 = *(_DWORD *)&buf[24] / v32;
    goto LABEL_34;
  }
  unsigned int v33 = (v75 + 7) >> 3;
LABEL_34:
  UInt32 mChannelsPerFrame = 1;
  *(_DWORD *)&buf[24] = v33;
  *(_DWORD *)&buf[28] = 1;
  *(_DWORD *)&buf[16] = v33;
  *(_DWORD *)&buf[20] = 1;
  *(_DWORD *)&buf[12] |= 0x20u;
  long long v35 = *(_OWORD *)(v19 + 96);
  *(_OWORD *)&v73.mSampleRate = *(_OWORD *)v30;
  *(_OWORD *)&v73.mBytesPerPacket = v35;
  *(void *)&v73.mBitsPerChannel = *(void *)(v19 + 112);
  if ((v73.mFormatFlags & 0x20) != 0 || (UInt32 mChannelsPerFrame = v73.mChannelsPerFrame) != 0) {
    UInt32 v36 = v73.mBytesPerFrame / mChannelsPerFrame;
  }
  else {
    UInt32 v36 = (v73.mBitsPerChannel + 7) >> 3;
  }
  v73.mBytesPerFrame = v36;
  v73.UInt32 mChannelsPerFrame = 1;
  v73.mBytesPerPacket = v36;
  v73.mFramesPerPacket = 1;
  v73.mFormatFlags |= 0x20u;
  if (*(double *)buf != v73.mSampleRate
    || *(_DWORD *)&buf[8] != v73.mFormatID
    || v33 != v36
    || v75 != v73.mBitsPerChannel
    || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, &v73, 0, 0))
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_73;
    }
    *(_DWORD *)v71 = 134217984;
    v72 = this;
    v24 = "[%p] I/O formats are not compatible";
    v28 = v71;
    goto LABEL_72;
  }
  if (getAUChannelSelectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
  }
  v37 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v69, 4, 0x20u, 0, 0, buf);
    v60 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    LODWORD(v73.mSampleRate) = 134218242;
    *(void *)((char *)&v73.mSampleRate + 4) = this;
    LOWORD(v73.mFormatFlags) = 2080;
    *(void *)((char *)&v73.mFormatFlags + 2) = v60;
    _os_log_debug_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEBUG, "[%p] will initialize with configuration: %s", (uint8_t *)&v73, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (!*((unsigned char *)this + 552))
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    v38 = getAUChannelSelectorLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = this;
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_INFO, "[%p] channel map is not set (AU will use default channel map instead)", buf, 0xCu);
    }
    unint64_t v39 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108);
    std::vector<unsigned int>::size_type v40 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
    std::vector<unsigned int>::vector((std::vector<unsigned int> *)buf, v40);
    if (v40)
    {
      unint64_t v41 = 0;
      uint64_t v42 = *(void *)buf;
      do
      {
        if (v41 >= v39) {
          int v43 = v39 - 1;
        }
        else {
          int v43 = v41;
        }
        *(_DWORD *)(v42 + 4 * v41++) = v43;
      }
      while (v40 != v41);
    }
    std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float>,void>((uint64_t)this + 528, (uint64_t)buf);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  uint64_t v44 = *((void *)this + 67);
  uint64_t v45 = *((void *)this + 66);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108) != (v44 - v45) >> 2)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    uint64_t v55 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_85;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = this;
    v56 = "[%p] failed to initialize - channel map size is not equal to number of output channels";
    v57 = v55;
    uint32_t v58 = 12;
LABEL_84:
    _os_log_error_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, v56, buf, v58);
LABEL_85:
    uint64_t v53 = 4294956445;
    goto LABEL_74;
  }
  v46 = (unsigned int *)*((void *)this + 66);
  v47 = (unsigned int *)*((void *)this + 67);
  if (v46 != v47)
  {
    int v48 = 0;
    while (1)
    {
      unsigned int v49 = *v46;
      if (v49 >= *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108)) {
        break;
      }
      ++v48;
      if (++v46 == v47) {
        goto LABEL_63;
      }
    }
    if (getAUChannelSelectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
    }
    uint64_t v59 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_85;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = this;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v48;
    v56 = "[%p] failed to initialize - channel map element %d is larger than number of input channels";
    v57 = v59;
    uint32_t v58 = 18;
    goto LABEL_84;
  }
LABEL_63:
  long long v50 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)buf = *(_OWORD *)v29;
  *(_OWORD *)&buf[16] = v50;
  uint64_t v75 = *(void *)(v29 + 32);
  long long v51 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)&v73.mSampleRate = *(_OWORD *)v30;
  *(_OWORD *)&v73.mBytesPerPacket = v51;
  *(void *)&v73.mBitsPerChannel = *(void *)(v30 + 32);
  SimpleMeters::Initialize((AUChannelSelector *)((char *)this + 568), (const CAStreamBasicDescription *)buf, (const CAStreamBasicDescription *)&v73);
  if (getAUChannelSelectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
  }
  v52 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = this;
    _os_log_debug_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEBUG, "[%p] did initialize", buf, 0xCu);
  }
  uint64_t v53 = 0;
LABEL_74:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69[0]);
  return v53;
}

void sub_1BB4F6C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

os_log_t ___ZL23getAUChannelSelectorLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUChannelSelector");
  getAUChannelSelectorLog(void)::gLog = (uint64_t)result;
  return result;
}

void AUChannelSelector::~AUChannelSelector(AUChannelSelector *this)
{
  AUChannelSelector::~AUChannelSelector(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  AUChannelSelector *v7;
  uint64_t v8;

  char v8 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B17C0;
  if (getAUChannelSelectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_9832);
  }
  v2 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 134217984;
    v7 = this;
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v6, 0xCu);
  }
  v3 = (void *)*((void *)this + 74);
  if (v3)
  {
    *((void *)this + 75) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 71);
  if (v4)
  {
    *((void *)this + 72) = v4;
    operator delete(v4);
  }
  if (*((unsigned char *)this + 552))
  {
    uint64_t v5 = (void *)*((void *)this + 66);
    if (v5)
    {
      *((void *)this + 67) = v5;
      operator delete(v5);
    }
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t VoiceProcessorV8::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  v3 = (VoiceProcessorV8 *)this;
  uint64_t v477 = *MEMORY[0x1E4F143B8];
  size_t v4 = **(unsigned int **)(this + 1080);
  if (v4) {
    bzero(*(void **)(this + 1408), v4);
  }
  if (*((unsigned char *)v3 + 1404)) {
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  }
  if (!*((unsigned char *)v3 + 2083)) {
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  }
  int v5 = *((unsigned __int8 *)v3 + 15961);
  if (*((unsigned char *)v3 + 15961)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && *((unsigned char *)v3 + 15960)
    || *((unsigned char *)v3 + 15963))
  {
    int v6 = (const AudioBufferList *)*((void *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        int v6 = (const AudioBufferList *)*((void *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      int v5 = *((unsigned __int8 *)v3 + 15961);
    }
  }
  else
  {
    int v6 = (const AudioBufferList *)*((void *)v3 + 134);
  }
  uint64_t v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((unsigned char *)v3 + 15962))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    uint64_t v9 = *((unsigned int *)v3 + 127);
    v10 = (const AudioBufferList *)*((void *)v3 + 135);
    if (*((unsigned char *)v3 + 15961)) {
      goto LABEL_23;
    }
  }
  else
  {
    v10 = (const AudioBufferList *)*((void *)v3 + 135);
  }
  if (!*((unsigned char *)v3 + 15962))
  {
    v11 = (const AudioBufferList *)*((void *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  uint64_t v9 = *((unsigned int *)v3 + 127);
  v11 = (const AudioBufferList *)*((void *)v3 + 177);
  if (*((unsigned char *)v3 + 15961))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_27;
  }
LABEL_28:
  AudioUnitParameterValue v459 = 0.0;
  if (!*((unsigned char *)v3 + 2083) && !*((unsigned char *)v3 + 2085) && !*((unsigned char *)v3 + 472))
  {
    uint64_t v25 = *((void *)v3 + 583);
    if (v25 || *((unsigned char *)v3 + 4672))
    {
      AudioUnitRenderActionFlags v458 = 0;
      *((void *)v3 + 2143) = 0;
      *((void *)v3 + 2144) = 0;
      *((void *)v3 + 2142) = 0;
      UInt64 v449 = (UInt64)v3 + 17136;
      *((_DWORD *)v3 + 4284) = 1;
      *(_OWORD *)((char *)v3 + 17144) = *(_OWORD *)(*((void *)v3 + 134) + 8);
      if (v25 & 1) != 0 && (*((unsigned char *)v3 + 4680))
      {
        this = *((void *)v3 + 347);
        if (this)
        {
          long long v26 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v26;
          long long v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v27;
          AudioUnitRenderActionFlags v458 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v458, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1F4188790](this);
      uint64_t v29 = (AudioBufferList *)((char *)&v436 - ((v28 + 15) & 0x3FFFFFFFF0));
      uint64_t v30 = (_DWORD *)*((void *)v3 + 135);
      if (*v30)
      {
        unint64_t v31 = 0;
        uint64_t v32 = 2;
        unsigned int v33 = v29;
        do
        {
          *(void *)&v33->mNumberBuffers = 0;
          *(void *)&v33->mBuffers[0].mNumberChannels = 0;
          v33->mBuffers[0].mData = 0;
          v33->mNumberBuffers = 1;
          v33->mBuffers[0] = *(AudioBuffer *)&v30[v32];
          ++v31;
          v32 += 4;
          ++v33;
        }
        while (v31 < *v30);
      }
      uint64_t v34 = *((void *)v3 + 583);
      if ((v34 & 2) != 0 && (*((unsigned char *)v3 + 4680) & 2) != 0)
      {
        long long v35 = (OpaqueAudioComponentInstance *)*((void *)v3 + 348);
        if (v35)
        {
          long long v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v36;
          long long v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          AudioUnitRenderActionFlags v458 = 512;
          AudioUnitProcess(v35, &v458, &buf, *((_DWORD *)v3 + 127), v29);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v29, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v29);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 4) != 0 && (*((unsigned char *)v3 + 4680) & 4) != 0)
      {
        v38 = (OpaqueAudioComponentInstance *)*((void *)v3 + 349);
        if (v38)
        {
          long long v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v39;
          long long v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          AudioUnitRenderActionFlags v458 = 512;
          AudioUnitProcess(v38, &v458, &buf, *((_DWORD *)v3 + 127), v29 + 1);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v29 + 1, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v29 + 1);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 8) != 0 && (*((unsigned char *)v3 + 4680) & 8) != 0)
      {
        unint64_t v41 = (OpaqueAudioComponentInstance *)*((void *)v3 + 350);
        if (v41)
        {
          long long v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v42;
          long long v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          AudioUnitRenderActionFlags v458 = 512;
          AudioUnitProcess(v41, &v458, &buf, *((_DWORD *)v3 + 127), v29 + 2);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v29 + 2, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v29 + 2);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 0x10) != 0 && (*((unsigned char *)v3 + 4680) & 0x10) != 0)
      {
        uint64_t v44 = (OpaqueAudioComponentInstance *)*((void *)v3 + 351);
        if (v44)
        {
          long long v45 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v45;
          long long v46 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v46;
          AudioUnitRenderActionFlags v458 = 512;
          v47 = v29 + 3;
          AudioUnitProcess(v44, &v458, &buf, *((_DWORD *)v3 + 127), v47);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v47, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v47);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 0x40) != 0 && (*((unsigned char *)v3 + 4680) & 0x40) != 0 && *((void *)v3 + 353))
      {
        long long v48 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v48;
        long long v49 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v49;
        VoiceProcessorV6::ApplyGMCoexNoiseMitigation(v3, *((const AudioBufferList **)v3 + 135), *((AudioBufferList **)v3 + 135), &buf, *((_DWORD *)v3 + 127));
      }
      uint64_t v50 = *((void *)v3 + 135);
      unsigned int v51 = *(_DWORD *)v50;
      v447 = &v436;
      if (v51 < 3)
      {
        *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v50 + 8);
        if (*(_DWORD *)v50 < 2u)
        {
          unsigned int v56 = 0;
          unsigned int v55 = 0;
          unsigned int v54 = 0;
          unsigned int v53 = 0;
        }
        else
        {
          unsigned int v56 = 0;
          unsigned int v55 = 0;
          if (*(unsigned char *)(v449 + 64))
          {
            unsigned int v54 = 0;
            *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v50 + 24);
            *((_OWORD *)v3 + 1061) = *(_OWORD *)(v50 + 8);
            unsigned int v53 = 1;
          }
          else
          {
            unsigned int v53 = 0;
            *((_OWORD *)v3 + 1061) = *(_OWORD *)(v50 + 24);
            unsigned int v54 = 1;
          }
        }
LABEL_119:
        uint64_t v58 = *((void *)v3 + 583);
        if ((v58 & 0x80) != 0 && (*((unsigned char *)v3 + 4680) & 0x80) != 0)
        {
          uint64_t v59 = (OpaqueAudioComponentInstance *)*((void *)v3 + 354);
          if (v59)
          {
            long long v60 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v60;
            long long v61 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v61;
            AudioUnitRenderActionFlags v458 = 512;
            AudioUnitProcess(v59, &v458, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 706);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
            }
            uint64_t v58 = *((void *)v3 + 583);
          }
        }
        if (v58 & 0x100) != 0 && (*((unsigned char *)v3 + 4681))
        {
          v62 = (OpaqueAudioComponentInstance *)*((void *)v3 + 355);
          if (v62)
          {
            long long v63 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v63;
            long long v64 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v64;
            AudioUnitRenderActionFlags v458 = 512;
            AudioUnitProcess(v62, &v458, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 707);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 707, &buf);
            }
            uint64_t v58 = *((void *)v3 + 583);
          }
        }
        if ((v58 & 0x200) != 0)
        {
          uint64_t v65 = *((void *)v3 + 585);
          if ((v65 & 0x200) != 0)
          {
            uint64_t v66 = (OpaqueAudioComponentInstance *)*((void *)v3 + 356);
            if (v66)
            {
              if ((v58 & v65 & 0x1000000000000) != 0 && *((void *)v3 + 395))
              {
                long long v67 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&buf.mRateScalar = v67;
                long long v68 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&buf.mSMPTETime.mHours = v68;
                AudioUnitRenderActionFlags v458 = 512;
                AudioUnitProcess(v66, &v458, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 708);
                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 8u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 708, &buf);
                }
                uint64_t v58 = *((void *)v3 + 583);
              }
            }
          }
        }
        if ((v58 & 0x400) != 0 && (*((unsigned char *)v3 + 4681) & 4) != 0)
        {
          v69 = (OpaqueAudioComponentInstance *)*((void *)v3 + 357);
          if (v69)
          {
            long long v70 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v70;
            long long v71 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v71;
            AudioUnitRenderActionFlags v458 = 512;
            AudioUnitProcess(v69, &v458, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 709);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 709, &buf);
            }
            uint64_t v58 = *((void *)v3 + 583);
          }
        }
        if ((v58 & 0x400000) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0)
        {
          if (*((void *)v3 + 369))
          {
            v72 = (VPTimeFreqConverter *)*((void *)v3 + 2205);
            if (v72)
            {
              AudioStreamBasicDescription v73 = (const float *)*((void *)v3 + 2120);
              UInt64 v74 = *(void *)(*((void *)v3 + 2200) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2200) + 16);
              buf.mHostTime = v74;
              VPTimeFreqConverter::Analyze(v72, v73, (DSPSplitComplex *)&buf);
              uint64_t v58 = *((void *)v3 + 583);
            }
          }
        }
        if ((v58 & 0x800000) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0)
        {
          if (*((void *)v3 + 370))
          {
            uint64_t v75 = (VPTimeFreqConverter *)*((void *)v3 + 2206);
            if (v75)
            {
              uint64_t v76 = (const float *)*((void *)v3 + 2123);
              UInt64 v77 = *(void *)(*((void *)v3 + 2201) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2201) + 16);
              buf.mHostTime = v77;
              VPTimeFreqConverter::Analyze(v75, v76, (DSPSplitComplex *)&buf);
              uint64_t v58 = *((void *)v3 + 583);
            }
          }
        }
        if (v58 & 0x1000000) != 0 && (*((unsigned char *)v3 + 4683))
        {
          if (*((void *)v3 + 371))
          {
            v78 = (VPTimeFreqConverter *)*((void *)v3 + 2207);
            if (v78)
            {
              v79 = (const float *)*((void *)v3 + 2126);
              UInt64 v80 = *(void *)(*((void *)v3 + 2202) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2202) + 16);
              buf.mHostTime = v80;
              VPTimeFreqConverter::Analyze(v78, v79, (DSPSplitComplex *)&buf);
              uint64_t v58 = *((void *)v3 + 583);
            }
          }
        }
        if ((v58 & 0x2000000) != 0 && (*((unsigned char *)v3 + 4683) & 2) != 0)
        {
          if (*((void *)v3 + 372))
          {
            v81 = (VPTimeFreqConverter *)*((void *)v3 + 2208);
            if (v81)
            {
              v82 = (const float *)*((void *)v3 + 2129);
              UInt64 v83 = *(void *)(*((void *)v3 + 2203) + 16) + 4 * *((unsigned int *)v3 + 127);
              buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2203) + 16);
              buf.mHostTime = v83;
              VPTimeFreqConverter::Analyze(v81, v82, (DSPSplitComplex *)&buf);
              uint64_t v58 = *((void *)v3 + 583);
            }
          }
        }
        if (((v58 & 0x1000000000000) == 0 || (*((unsigned char *)v3 + 4686) & 1) == 0 || !*((void *)v3 + 395))
          && (v58 & 0x800) != 0
          && (*((unsigned char *)v3 + 4681) & 8) != 0)
        {
          uint64_t v84 = *((void *)v3 + 358);
          if (v84)
          {
            MEMORY[0x1F4188790](v84);
            *(&v436 - 6) = 2;
            *(_OWORD *)(&v436 - 5) = *(_OWORD *)((char *)v3 + 16952);
            *(_OWORD *)(&v436 - 3) = *((_OWORD *)v3 + 1061);
            *(void *)&v468.mSampleTime = &v436 - 6;
            v468.mHostTime = 0;
            *(void *)&v473.mSampleTime = (char *)v3 + 16944;
            memset(&v473.mHostTime, 0, 24);
            AudioUnitRenderActionFlags v458 = 512;
            long long v85 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v85;
            long long v86 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v86;
            AudioUnitProcessMultiple(v87, &v458, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 4u, (AudioBufferList **)&v473);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
            }
            uint64_t v58 = *((void *)v3 + 583);
          }
        }
        __int16 v457 = 0;
        long long v88 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v88;
        long long v89 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v89;
        if ((v58 & 0x4000000) == 0 || (*((unsigned char *)v3 + 4683) & 4) == 0 || !*((void *)v3 + 373))
        {
LABEL_197:
          BOOL v456 = 0;
          if ((*((unsigned char *)v3 + 4667) & 8) == 0 || (*((unsigned char *)v3 + 4683) & 8) == 0 || !*((void *)v3 + 374)) {
            goto LABEL_213;
          }
          uint64_t v96 = *((void *)v3 + 2115);
          if ((unint64_t)(*((void *)v3 + 2116) - v96) <= 0x28) {
            goto LABEL_892;
          }
          ECApplicator::apply(*(AudioUnitParameterID **)(v96 + 40), &buf, v54, &v456, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
          uint64_t v97 = *((unsigned int *)v3 + 127);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v97, *((const AudioBufferList **)v3 + 136), &buf);
            uint64_t v97 = *((unsigned int *)v3 + 127);
            uint64_t v98 = *((void *)v3 + 2154);
            if (*((unsigned char *)v3 + 15961)) {
              goto LABEL_207;
            }
          }
          else
          {
            uint64_t v98 = *((void *)v3 + 2154);
          }
          if (!*((unsigned char *)v3 + 15962))
          {
LABEL_208:
            v99 = (VPTimeFreqConverter *)*((void *)v3 + 2162);
            v100 = *(const float **)(v98 + 16);
            uint64_t v101 = *((void *)v3 + 509);
            v473.mSampleTime = *(Float64 *)(v101 + 16);
            v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v97;
            if (v99)
            {
              VPTimeFreqConverter::Analyze(v99, v100, (DSPSplitComplex *)&v473);
              uint64_t v97 = *((unsigned int *)v3 + 127);
              uint64_t v101 = *((void *)v3 + 509);
            }
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v97, (const AudioBufferList *)v101, &buf);
            }
LABEL_213:
            if ((*((unsigned char *)v3 + 4666) & 0x40) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0 && *((void *)v3 + 369))
            {
              v102 = (AudioUnitParameterID **)*((void *)v3 + 2115);
              if (*((AudioUnitParameterID ***)v3 + 2116) == v102) {
                goto LABEL_892;
              }
              ECApplicator::apply(*v102, &buf, v53, (BOOL *)&v457 + 1, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
              uint64_t v103 = *((unsigned int *)v3 + 127);
              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v103, (const AudioBufferList *)v3 + 706, &buf);
                uint64_t v103 = *((unsigned int *)v3 + 127);
                v104 = (const AudioBufferList *)*((void *)v3 + 419);
                if (*((unsigned char *)v3 + 15961))
                {
LABEL_253:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v103, v104, &buf);
                  goto LABEL_239;
                }
              }
              else
              {
                v104 = (const AudioBufferList *)*((void *)v3 + 419);
              }
              if (*((unsigned char *)v3 + 15962)) {
                goto LABEL_253;
              }
            }
            else
            {
              unsigned int v105 = 0;
              while (((*((_DWORD *)v3 + 116) >> v105) & 1) == 0)
              {
                if (++v105 == 32)
                {
                  unsigned int v105 = 33;
                  break;
                }
              }
              if (v105 >= **((_DWORD **)v3 + 135))
              {
                LODWORD(v448) = v54;
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                v106 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v106)
                {
                  v107 = v106;
                  if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                  {
                    int v108 = **((_DWORD **)v3 + 135);
                    LODWORD(v473.mSampleTime) = 136315906;
                    *(void *)((char *)&v473.mSampleTime + 4) = "vpProcessUplink_v8.cpp";
                    WORD2(v473.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v473.mHostTime + 6) = 377;
                    WORD1(v473.mRateScalar) = 1024;
                    HIDWORD(v473.mRateScalar) = v105;
                    LOWORD(v473.mWordClockTime) = 1024;
                    *(_DWORD *)((char *)&v473.mWordClockTime + 2) = v108;
                    _os_log_impl(&dword_1BB0CE000, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&v473, 0x1Eu);
                  }
                }
                v109 = (int *)*((void *)v3 + 1578);
                if (v109 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v109, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessUplink_v8.cpp", 377, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v105, **((_DWORD **)v3 + 135));
                }
                unsigned int v105 = 0;
                unsigned int v54 = v448;
              }
              uint64_t v110 = *((void *)v3 + 135) + 16 * v105;
              memcpy(*(void **)(*((void *)v3 + 136) + 16), *(const void **)(v110 + 16), *(unsigned int *)(v110 + 12));
            }
LABEL_239:
            if ((*((unsigned char *)v3 + 4672) & 0x40) != 0 && (*((unsigned char *)v3 + 4688) & 0x40) != 0)
            {
              v111 = (OpaqueAudioComponentInstance *)*((void *)v3 + 417);
              if (v111)
              {
                v473.mSampleTime = *((Float64 *)v3 + 135);
                v473.mHostTime = v449;
                v468.mSampleTime = *((Float64 *)v3 + 136);
                AudioUnitRenderActionFlags v458 = 512;
                AudioUnitProcessMultiple(v111, &v458, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v473, 1u, (AudioBufferList **)&v468);
              }
            }
            BOOL v455 = 0;
            if ((*((unsigned char *)v3 + 4666) & 0x80) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0 && *((void *)v3 + 370))
            {
              uint64_t v112 = *((void *)v3 + 2115);
              if ((unint64_t)(*((void *)v3 + 2116) - v112) <= 8) {
                goto LABEL_892;
              }
              ECApplicator::apply(*(AudioUnitParameterID **)(v112 + 8), &buf, v54, &v455, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
              uint64_t v113 = *((unsigned int *)v3 + 127);
              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v113, (const AudioBufferList *)v3 + 707, &buf);
                uint64_t v113 = *((unsigned int *)v3 + 127);
                v114 = (const AudioBufferList *)*((void *)v3 + 420);
                if (*((unsigned char *)v3 + 15961))
                {
LABEL_256:
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v113, v114, &buf);
                  goto LABEL_257;
                }
              }
              else
              {
                v114 = (const AudioBufferList *)*((void *)v3 + 420);
              }
              if (*((unsigned char *)v3 + 15962)) {
                goto LABEL_256;
              }
            }
LABEL_257:
            BOOL v454 = 0;
            if ((*((unsigned char *)v3 + 4667) & 1) == 0 || (*((unsigned char *)v3 + 4683) & 1) == 0 || !*((void *)v3 + 371)) {
              goto LABEL_268;
            }
            uint64_t v115 = *((void *)v3 + 2115);
            if ((unint64_t)(*((void *)v3 + 2116) - v115) <= 0x10) {
              goto LABEL_892;
            }
            ECApplicator::apply(*(AudioUnitParameterID **)(v115 + 16), &buf, v56, &v454, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066, (float *)v3 + 1070);
            uint64_t v116 = *((unsigned int *)v3 + 127);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
            {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v116, (const AudioBufferList *)v3 + 708, &buf);
              uint64_t v116 = *((unsigned int *)v3 + 127);
              v117 = (const AudioBufferList *)*((void *)v3 + 422);
              if (*((unsigned char *)v3 + 15961))
              {
LABEL_267:
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v116, v117, &buf);
LABEL_268:
                BOOL v453 = 0;
                if ((*((unsigned char *)v3 + 4667) & 2) == 0 || (*((unsigned char *)v3 + 4683) & 2) == 0 || !*((void *)v3 + 372)) {
                  goto LABEL_279;
                }
                uint64_t v118 = *((void *)v3 + 2115);
                if ((unint64_t)(*((void *)v3 + 2116) - v118) > 0x18)
                {
                  ECApplicator::apply(*(AudioUnitParameterID **)(v118 + 24), &buf, v55, &v453, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067, (float *)v3 + 1071);
                  uint64_t v119 = *((unsigned int *)v3 + 127);
                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                  {
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v119, (const AudioBufferList *)v3 + 709, &buf);
                    uint64_t v119 = *((unsigned int *)v3 + 127);
                    v120 = (const AudioBufferList *)*((void *)v3 + 421);
                    if (*((unsigned char *)v3 + 15961))
                    {
LABEL_278:
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v119, v120, &buf);
                      goto LABEL_279;
                    }
                  }
                  else
                  {
                    v120 = (const AudioBufferList *)*((void *)v3 + 421);
                  }
                  if (*((unsigned char *)v3 + 15962)) {
                    goto LABEL_278;
                  }
LABEL_279:
                  if ((*((unsigned char *)v3 + 8901) & 8) != 0 && (*((unsigned char *)v3 + 8909) & 8) != 0)
                  {
                    if (*((void *)v3 + 481))
                    {
                      *(unsigned char *)(v449 + 32) = 0;
                      if (*((unsigned char *)v3 + 4667) & 1) != 0 && (*((unsigned char *)v3 + 4683))
                      {
                        v121 = (OpaqueAudioComponentInstance *)*((void *)v3 + 371);
                        if (v121)
                        {
                          if (*((void *)v3 + 2145))
                          {
                            LODWORD(v473.mSampleTime) = 0;
                            if (!AudioUnitGetPropertyInfo(v121, 0xF3Cu, 0, 0, (UInt32 *)&v473, 0)
                              && LODWORD(v473.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
                            {
                              v122 = *(void **)(*((void *)v3 + 2145) + 16);
                              OSStatus Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 371), 0xF3Cu, 0, 0, v122, (UInt32 *)&v473);
                              if (*((unsigned char *)v3 + 481)) {
                                AudioUnitSetProperty(*((AudioUnit *)v3 + 481), 0xF3Cu, 0, 0, v122, LODWORD(v473.mSampleTime));
                              }
                              *(unsigned char *)(v449 + 32) = Property == 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  uint64_t Parameter = *((void *)v3 + 519);
                  v125 = (const float *)*((void *)v3 + 2144);
                  UInt64 v126 = *(void *)(*((void *)v3 + 511) + 16) + 4 * *((unsigned int *)v3 + 127);
                  v473.mSampleTime = *(Float64 *)(*((void *)v3 + 511) + 16);
                  v473.mHostTime = v126;
                  if (Parameter) {
                    uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v125, (DSPSplitComplex *)&v473);
                  }
                  AudioUnitParameterValue v452 = 0.0;
                  if ((*((unsigned char *)v3 + 4666) & 0x40) != 0
                    && (*((unsigned char *)v3 + 4682) & 0x40) != 0
                    && *((void *)v3 + 369))
                  {
                    v127 = (VPTimeFreqConverter *)*((void *)v3 + 513);
                    v128 = (const float *)*((void *)v3 + 2120);
                    uint64_t v129 = *((unsigned int *)v3 + 127);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 429) + 16);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v129;
                    if (v127)
                    {
                      VPTimeFreqConverter::Analyze(v127, v128, (DSPSplitComplex *)&v473);
                      uint64_t v129 = *((unsigned int *)v3 + 127);
                    }
                    uint64_t Parameter = *((void *)v3 + 517);
                    v130 = *(const float **)(*((void *)v3 + 419) + 16);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 16);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v129;
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v130, (DSPSplitComplex *)&v473);
                      uint64_t v129 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v129, *((const AudioBufferList **)v3 + 429), &buf);
                    }
                  }
                  if ((*((unsigned char *)v3 + 4666) & 0x80) != 0
                    && (*((unsigned char *)v3 + 4682) & 0x80) != 0
                    && *((void *)v3 + 370))
                  {
                    v131 = (VPTimeFreqConverter *)*((void *)v3 + 514);
                    v132 = (const float *)*((void *)v3 + 2123);
                    uint64_t v133 = *((unsigned int *)v3 + 127);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 506) + 16);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v133;
                    if (v131)
                    {
                      VPTimeFreqConverter::Analyze(v131, v132, (DSPSplitComplex *)&v473);
                      uint64_t v133 = *((unsigned int *)v3 + 127);
                    }
                    uint64_t Parameter = *((void *)v3 + 518);
                    v134 = *(const float **)(*((void *)v3 + 420) + 16);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 32);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v133;
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v134, (DSPSplitComplex *)&v473);
                      uint64_t v133 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v133, *((const AudioBufferList **)v3 + 506), &buf);
                    }
                  }
                  uint64_t v135 = *((void *)v3 + 583);
                  if ((v135 & 0x1000000) != 0)
                  {
                    uint64_t v136 = *((void *)v3 + 585);
                    if ((v136 & 0x1000000) != 0)
                    {
                      if (*((void *)v3 + 371))
                      {
                        if ((v135 & v136 & 0x80000000000) != 0)
                        {
                          uint64_t Parameter = *((void *)v3 + 390);
                          if (Parameter) {
                            uint64_t Parameter = AudioUnitGetParameter((AudioUnit)Parameter, 0x2Bu, 0, 0, &v452);
                          }
                        }
                        if (v452 != 0.0
                          || (*((unsigned char *)v3 + 4670) & 1) != 0
                          && (*((unsigned char *)v3 + 4686) & 1) != 0
                          && *((void *)v3 + 395))
                        {
                          v137 = (VPTimeFreqConverter *)*((void *)v3 + 515);
                          v138 = (const float *)*((void *)v3 + 2126);
                          uint64_t v139 = *((unsigned int *)v3 + 127);
                          v473.mSampleTime = *(Float64 *)(*((void *)v3 + 2184) + 16);
                          v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v139;
                          if (v137)
                          {
                            VPTimeFreqConverter::Analyze(v137, v138, (DSPSplitComplex *)&v473);
                            uint64_t v139 = *((unsigned int *)v3 + 127);
                          }
                          uint64_t Parameter = *((void *)v3 + 2149);
                          v140 = *(const float **)(*((void *)v3 + 422) + 16);
                          v473.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 48);
                          v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v139;
                          if (Parameter)
                          {
                            uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v140, (DSPSplitComplex *)&v473);
                            uint64_t v139 = *((unsigned int *)v3 + 127);
                          }
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x14u, v139, *((const AudioBufferList **)v3 + 2184), &buf);
                          }
                        }
                      }
                    }
                  }
                  if ((*((unsigned char *)v3 + 4667) & 2) != 0 && (*((unsigned char *)v3 + 4683) & 2) != 0 && *((void *)v3 + 372))
                  {
                    v141 = (VPTimeFreqConverter *)*((void *)v3 + 516);
                    v142 = (const float *)*((void *)v3 + 2129);
                    uint64_t v143 = *((unsigned int *)v3 + 127);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 507) + 16);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v143;
                    if (v141)
                    {
                      VPTimeFreqConverter::Analyze(v141, v142, (DSPSplitComplex *)&v473);
                      uint64_t v143 = *((unsigned int *)v3 + 127);
                    }
                    uint64_t Parameter = *((void *)v3 + 2113);
                    v144 = *(const float **)(*((void *)v3 + 421) + 16);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 64);
                    v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v143;
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v144, (DSPSplitComplex *)&v473);
                      uint64_t v143 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v143, *((const AudioBufferList **)v3 + 507), &buf);
                    }
                  }
                  uint64_t v145 = *((void *)v3 + 583);
                  if ((v145 & 0x1000) != 0 && (*((unsigned char *)v3 + 4681) & 0x10) != 0)
                  {
                    uint64_t Parameter = *((void *)v3 + 359);
                    if (Parameter)
                    {
                      MEMORY[0x1F4188790](Parameter);
                      *(&v436 - 6) = 2;
                      *(_OWORD *)(&v436 - 5) = *(_OWORD *)((char *)v3 + 16952);
                      *(_OWORD *)(&v436 - 3) = *((_OWORD *)v3 + 1061);
                      inInputBufferLists = (AudioBufferList *)(&v436 - 6);
                      v475 = 0;
                      v468.mSampleTime = *((Float64 *)v3 + 2189);
                      memset(&v468.mHostTime, 0, 24);
                      AudioUnitRenderActionFlags v458 = 512;
                      long long v146 = *(_OWORD *)&a2->mRateScalar;
                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                      *(_OWORD *)&v473.mRateScalar = v146;
                      long long v147 = *(_OWORD *)&a2->mSMPTETime.mHours;
                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                      *(_OWORD *)&v473.mSMPTETime.mHours = v147;
                      AudioUnitProcessMultiple(v148, &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 4u, (AudioBufferList **)&v468);
                      uint64_t Parameter = *((void *)v3 + 2192);
                      v149 = *(const float **)(*((void *)v3 + 2189) + 16);
                      uint64_t v150 = *((void *)v3 + 2190);
                      uint64_t v151 = *((unsigned int *)v3 + 127);
                      *(void *)&v469.mNumberBuffers = *(void *)(v150 + 16);
                      *(void *)&v469.mBuffers[0].mNumberChannels = *(void *)&v469.mNumberBuffers + 4 * v151;
                      if (Parameter)
                      {
                        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v149, (DSPSplitComplex *)&v469);
                        uint64_t v151 = *((unsigned int *)v3 + 127);
                        uint64_t v150 = *((void *)v3 + 2190);
                      }
                      if (*(unsigned char *)(v449 + 536))
                      {
                        *(void *)&v469.mNumberBuffers = *(void *)(*((void *)v3 + 429) + 16);
                        *(void *)&v469.mBuffers[0].mNumberChannels = *(void *)&v469.mNumberBuffers
                                                                     + 4 * v151;
                        v472.realp = *(float **)(v150 + 16);
                        v472.imagp = &v472.realp[v151];
                        v152 = *(float **)(*((void *)v3 + 2191) + 16);
                        v153 = &v152[v151];
                        vDSP_zvabs((const DSPSplitComplex *)&v469, 1, v152, 1, v151);
                        vDSP_zvabs(&v472, 1, v153, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmin(v152, 1, v153, 1, v152, 1, *((unsigned int *)v3 + 127));
                        LODWORD(v466) = 507307272;
                        vDSP_vsadd(v153, 1, (const float *)&v466, v153, 1, *((unsigned int *)v3 + 127));
                        vDSP_vdiv(v153, 1, v152, 1, v153, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(v472.realp, 1, v153, 1, v472.realp, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(v472.imagp, 1, v153, 1, v472.imagp, 1, *((unsigned int *)v3 + 127));
                        uint64_t v151 = *((unsigned int *)v3 + 127);
                        uint64_t v150 = *((void *)v3 + 2190);
                      }
                      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x5Fu, v151, (const AudioBufferList *)v150, &v473);
                      }
                      uint64_t v145 = *((void *)v3 + 583);
                    }
                  }
                  if ((v145 & 0x20000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x20) != 0)
                  {
                    uint64_t Parameter = *((void *)v3 + 376);
                    if (Parameter)
                    {
                      v468.mSampleTime = *((Float64 *)v3 + 429);
                      *(Float64 *)&v469.mNumberBuffers = v468.mSampleTime;
                      AudioUnitRenderActionFlags v458 = 512;
                      long long v154 = *(_OWORD *)&a2->mRateScalar;
                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                      *(_OWORD *)&v473.mRateScalar = v154;
                      long long v155 = *(_OWORD *)&a2->mSMPTETime.mHours;
                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                      *(_OWORD *)&v473.mSMPTETime.mHours = v155;
                      uint64_t Parameter = AudioUnitProcessMultiple((AudioUnit)Parameter, &v458, &v473, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                      if (!Parameter)
                      {
                        uint64_t Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 376), 0x1450u, 0, 0, *(void **)(*((void *)v3 + 2188) + 16), (UInt32 *)(*((void *)v3 + 2188) + 12));
                        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                          uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2188), &v473);
                        }
                      }
                      uint64_t v145 = *((void *)v3 + 583);
                    }
                  }
                  if ((v145 & 0x100000000000) == 0
                    || (uint64_t v156 = *((void *)v3 + 585), (v156 & 0x100000000000) == 0)
                    || (uint64_t Parameter = *((void *)v3 + 391)) == 0
                    || (v145 & v156 & 0x1000000000000) != 0 && *((void *)v3 + 395))
                  {
LABEL_375:
                    char v451 = 0;
                    if ((v145 & 0x40000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x40) != 0 && *((void *)v3 + 377))
                    {
                      int v166 = 1;
                      BOOL v167 = 1;
                    }
                    else if ((v145 & 0x200000000) != 0 && (*((unsigned char *)v3 + 4684) & 2) != 0)
                    {
                      int v166 = 0;
                      BOOL v167 = *((void *)v3 + 380) != 0;
                    }
                    else
                    {
                      int v166 = 0;
                      BOOL v167 = 0;
                    }
                    uint64_t v168 = v145 & 0x80000000;
                    if ((v145 & 0x80000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
                    {
                      BOOL v169 = 1;
                      int v166 = 1;
                      int v170 = 1;
                      if ((v145 & 0x100000000) == 0) {
                        goto LABEL_400;
                      }
                    }
                    else
                    {
                      if ((v145 & 0x100000000) == 0)
                      {
                        BOOL v169 = 0;
                        int v170 = 1;
                        goto LABEL_400;
                      }
                      int v170 = 1;
                      if (*((unsigned char *)v3 + 4684))
                      {
                        uint64_t v171 = *((void *)v3 + 379);
                        BOOL v169 = v171 != 0;
                        if (v171) {
                          int v170 = 2;
                        }
                        else {
                          int v170 = 1;
                        }
                      }
                      else
                      {
                        BOOL v169 = 0;
                      }
                    }
                    uint64_t v172 = *((void *)v3 + 585);
                    if ((v172 & 0x100000000) != 0
                      && *((void *)v3 + 379)
                      && (v145 & v172 & 0x200000000) != 0
                      && *((void *)v3 + 380))
                    {
                      int v170 = 2;
                      int v166 = 2;
                    }
LABEL_400:
                    if ((v145 & 0x40000000) == 0) {
                      goto LABEL_419;
                    }
                    if ((*((unsigned char *)v3 + 4683) & 0x40) == 0) {
                      goto LABEL_419;
                    }
                    uint64_t Parameter = *((void *)v3 + 377);
                    if (!Parameter) {
                      goto LABEL_419;
                    }
                    AudioUnitSetProperty((AudioUnit)Parameter, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
                    if ((*((unsigned char *)v3 + 4667) & 0x80) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0)
                    {
                      v173 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
                      if (*((void *)v3 + 378))
                      {
                        float v174 = (float)*((unsigned int *)v3 + 684);
LABEL_407:
                        AudioUnitSetParameter(v173, 0x1Bu, 0, 0, v174, 0);
                        uint64_t v175 = *((void *)v3 + 583);
                        if ((v175 & 0x400000) != 0)
                        {
                          uint64_t v176 = *((void *)v3 + 585);
                          if ((v176 & 0x400000) != 0
                            && *((void *)v3 + 369)
                            && (v175 & v176 & 0x800000) != 0
                            && *((void *)v3 + 370))
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x3Fu, 0, 0, *((float *)v3 + 1056) * *((float *)v3 + 1057), 0);
                          }
                        }
                        *(void *)&Float64 v177 = *((void *)v3 + 138) + 24;
                        *(void *)&Float64 v178 = *((void *)v3 + 139) + 24;
                        unsigned int v179 = **((_DWORD **)v3 + 135);
                        if (v179 < 3) {
                          Float64 v180 = 0.0;
                        }
                        else {
                          *(void *)&Float64 v180 = *((void *)v3 + 140) + 24;
                        }
                        *(void *)&v468.mSampleTime = *((void *)v3 + 138) + 24;
                        *(Float64 *)&v468.mHostTime = v178;
                        v468.mRateScalar = v180;
                        v468.mWordClockTime = v449;
                        *(_OWORD *)&v468.mSMPTETime.mSubframes = *(_OWORD *)((char *)v3 + 3352);
                        if (v179 >= 3)
                        {
                          v468.mSampleTime = v178;
                          *(Float64 *)&v468.mHostTime = v180;
                          v468.mRateScalar = v177;
                        }
                        *(void *)&v469.mNumberBuffers = 0;
                        AudioUnitRenderActionFlags v458 = 512;
                        AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1092), 0);
                        long long v181 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&v473.mRateScalar = v181;
                        long long v182 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&v473.mSMPTETime.mHours = v182;
                        uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                        uint64_t v145 = *((void *)v3 + 583);
                        uint64_t v168 = v145 & 0x80000000;
LABEL_419:
                        if (v168 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
                        {
                          memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1042) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1043) + 16), *(const void **)(*((void *)v3 + 506) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          if (*((float *)v3 + 1068) == 0.0 && *((float *)v3 + 1069) == 0.0) {
                            AudioUnitParameterValue v183 = 0.0;
                          }
                          else {
                            AudioUnitParameterValue v183 = 1.0;
                          }
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 378), 0x20u, 0, 0, v183, 0);
                          v468.mSampleTime = *((Float64 *)v3 + 435);
                          *(void *)&v469.mNumberBuffers = *((void *)v3 + 430);
                          long long v184 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v473.mRateScalar = v184;
                          long long v185 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v473.mSMPTETime.mHours = v185;
                          AudioUnitRenderActionFlags v458 = 512;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v458, &v473, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                          LODWORD(inInputBufferLists) = 8 * *((_DWORD *)v3 + 127);
                          AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE7Au, 0, 0, *(void **)(*((void *)v3 + 538) + 16), (UInt32 *)&inInputBufferLists);
                          LODWORD(inInputBufferLists) = 8 * *((_DWORD *)v3 + 127);
                          uint64_t Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE79u, 0, 0, *(void **)(*((void *)v3 + 538) + 32), (UInt32 *)&inInputBufferLists);
                          uint64_t v186 = *((unsigned int *)v3 + 127);
                          imagp = (float *)*((void *)v3 + 430);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            v188 = &v473;
                            uint64_t v189 = (uint64_t)v3;
                            unsigned int v190 = 10;
LABEL_428:
                            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal(v189, v190, v186, (const AudioBufferList *)imagp, v188);
                          }
LABEL_456:
                          MEMORY[0x1F4188790](Parameter);
                          v203 = (const AudioBufferList *)(&v436 - 8);
                          *((_OWORD *)&v436 - 3) = 0u;
                          *((_OWORD *)&v436 - 2) = 0u;
                          *((_OWORD *)&v436 - 4) = 0u;
                          *((_DWORD *)&v436 - 16) = 3;
                          __n128 v206 = MEMORY[0x1F4188790](v204);
                          v448 = (const AudioBufferList *)(&v436 - 8);
                          uint64_t v435 = 0;
                          *((__n128 *)&v436 - 3) = v206;
                          *((__n128 *)&v436 - 2) = v206;
                          *((__n128 *)&v436 - 4) = v206;
                          *((_DWORD *)&v436 - 16) = v207;
                          uint64_t v208 = *((void *)v3 + 583);
                          if ((v208 & 0x400000000) != 0 && (*((unsigned char *)v3 + 4684) & 4) != 0 && *((void *)v3 + 381)
                            || (v208 & 0x800000000) != 0 && (*((unsigned char *)v3 + 4684) & 8) != 0 && *((void *)v3 + 382)
                            || (v208 & 0x2000000000) != 0
                            && (*((unsigned char *)v3 + 4684) & 0x20) != 0
                            && *((void *)v3 + 384))
                          {
                            *(_OWORD *)(&v436 - 7) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                            *(_OWORD *)(&v436 - 5) = *(_OWORD *)(*((void *)v3 + 506) + 8);
                            *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 507) + 8);
                            uint64_t v209 = *((void *)v3 + 505);
                            v210 = v448;
                            v448->mBuffers[0] = *(AudioBuffer *)(v209 + 8);
                            *(_OWORD *)&v210[1].mNumberBuffers = *(_OWORD *)(v209 + 24);
                            __n128 v206 = *(__n128 *)(v209 + 56);
                            *(__n128 *)&v210[1].mBuffers[0].mData = v206;
                          }
                          if ((v208 & 0x400000000) == 0 || (*((unsigned char *)v3 + 4684) & 4) == 0 || !*((void *)v3 + 381))
                          {
LABEL_479:
                            if ((v208 & 0x800000000) == 0
                              || (*((unsigned char *)v3 + 4684) & 8) == 0
                              || !*((void *)v3 + 382))
                            {
LABEL_492:
                              if ((v208 & 0x2000000000) == 0
                                || (*((unsigned char *)v3 + 4684) & 0x20) == 0
                                || !*((void *)v3 + 384))
                              {
LABEL_505:
                                if (v166 == 2)
                                {
                                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v169, v167, (BOOL *)&v451, v206.n128_f32[0]);
                                }
                                else if (v166 == 1)
                                {
                                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v169, v167, &v451, v205);
                                }
                                if (v170 == 1) {
                                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v457) != 0, v455, v169, v451 != 0);
                                }
                                else {
                                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v457) != 0, v453, v169, v451 != 0);
                                }
                                LODWORD(inInputBufferLists) = 0;
                                if ((*((void *)v3 + 583) & 0x2000000000000) != 0
                                  && (*((void *)v3 + 585) & 0x2000000000000) != 0)
                                {
                                  uint64_t v225 = *((void *)v3 + 396);
                                  if (v225)
                                  {
                                    MEMORY[0x1F4188790](v225);
                                    *((_OWORD *)&v436 - 3) = 0u;
                                    *((_OWORD *)&v436 - 2) = 0u;
                                    *((_OWORD *)&v436 - 4) = 0u;
                                    *((_DWORD *)&v436 - 16) = 3;
                                    __n128 v228 = MEMORY[0x1F4188790](v226);
                                    uint64_t v435 = 0;
                                    *((__n128 *)&v436 - 3) = v228;
                                    *((__n128 *)&v436 - 2) = v228;
                                    *((__n128 *)&v436 - 4) = v228;
                                    *((_DWORD *)&v436 - 16) = v229;
                                    *(_OWORD *)(v230 - 56) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                    *(_OWORD *)(v230 - 40) = *(_OWORD *)(*((void *)v3 + 432) + 8);
                                    *(_OWORD *)(v230 - 24) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
                                    uint64_t v231 = *((void *)v3 + 505);
                                    *(_OWORD *)(&v436 - 7) = *(_OWORD *)(v231 + 8);
                                    *(_OWORD *)(&v436 - 5) = *(_OWORD *)(v231 + 24);
                                    *(_OWORD *)(&v436 - 3) = *(_OWORD *)(v231 + 40);
                                    v468.mSampleTime = v232;
                                    v468.mHostTime = (UInt64)(&v436 - 8);
                                    *(_OWORD *)&v469.mNumberBuffers = *(_OWORD *)(v449 + 344);
                                    if ((v233 & v234 & 0x800000000000000) != 0)
                                    {
                                      v235 = (OpaqueAudioComponentInstance *)*((void *)v3 + 406);
                                      if (v235)
                                      {
                                        LODWORD(v473.mSampleTime) = 0;
                                        AudioUnitGetParameter(v235, 0, 0, 0, (AudioUnitParameterValue *)&v473);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 396), 0, 0, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 396), 0xDu, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        v227 = (OpaqueAudioComponentInstance *)*((void *)v3 + 396);
                                      }
                                    }
                                    long long v236 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&v473.mRateScalar = v236;
                                    long long v237 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&v473.mSMPTETime.mHours = v237;
                                    AudioUnitProcessMultiple(v227, &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                                    uint64_t v238 = *((unsigned int *)v3 + 127);
                                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                    {
                                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Fu, v238, *((const AudioBufferList **)v3 + 2185), &v473);
                                      uint64_t v238 = *((unsigned int *)v3 + 127);
                                      v239 = (const AudioBufferList *)*((void *)v3 + 2186);
                                      if (*((unsigned char *)v3 + 15961))
                                      {
LABEL_524:
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x80u, v238, v239, &v473);
                                        goto LABEL_525;
                                      }
                                    }
                                    else
                                    {
                                      v239 = (const AudioBufferList *)*((void *)v3 + 2186);
                                    }
                                    if (*((unsigned char *)v3 + 15962)) {
                                      goto LABEL_524;
                                    }
                                  }
                                }
LABEL_525:
                                v240 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 433) + 16), *(const void **)(*((void *)v3 + 505) + 16), *((unsigned int *)v3 + 1073));
                                uint64_t v241 = *((void *)v3 + 583);
                                if ((v241 & 0x1000000) != 0
                                  && (*((unsigned char *)v3 + 4683) & 1) != 0
                                  && *((void *)v3 + 371)
                                  && v452 == 1.0)
                                {
                                  v240 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 2148) + 16), *(const void **)(*((void *)v3 + 505) + 48), *((unsigned int *)v3 + 1073));
                                  uint64_t v241 = *((void *)v3 + 583);
                                }
                                if ((v241 & 0x400000000000) == 0
                                  || (uint64_t v242 = *((void *)v3 + 585), (v242 & 0x400000000000) == 0)
                                  || !*((void *)v3 + 393))
                                {
LABEL_548:
                                  if ((v241 & 0x800000000000) != 0 && (*((void *)v3 + 585) & 0x800000000000) != 0)
                                  {
                                    uint64_t v258 = *((void *)v3 + 394);
                                    if (v258)
                                    {
                                      MEMORY[0x1F4188790](v258);
                                      *((_OWORD *)&v436 - 3) = 0u;
                                      *((_OWORD *)&v436 - 2) = 0u;
                                      *((_DWORD *)&v436 - 12) = 2;
                                      __n128 v260 = MEMORY[0x1F4188790](v259);
                                      uint64_t v435 = 0;
                                      *((__n128 *)&v436 - 3) = v260;
                                      *((__n128 *)&v436 - 2) = v260;
                                      *((_DWORD *)&v436 - 12) = v261;
                                      *(_OWORD *)(v262 - 40) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                      *(_OWORD *)(v262 - 24) = *(_OWORD *)(*((void *)v3 + 2185) + 8);
                                      *(_OWORD *)(&v436 - 5) = *(_OWORD *)(*((void *)v3 + 505) + 8);
                                      *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 2186) + 8);
                                      __n128 v264 = MEMORY[0x1F4188790](v263);
                                      *((__n128 *)&v436 - 3) = v264;
                                      *((__n128 *)&v436 - 2) = v264;
                                      *((_DWORD *)&v436 - 12) = v265;
                                      __n128 v268 = MEMORY[0x1F4188790](v266);
                                      uint64_t v435 = 0;
                                      *((__n128 *)&v436 - 3) = v268;
                                      *((__n128 *)&v436 - 2) = v268;
                                      *((_DWORD *)&v436 - 12) = v269;
                                      uint64_t v270 = *((void *)v3 + 2187);
                                      *(_OWORD *)(v271 - 40) = *(_OWORD *)(v270 + 8);
                                      *(_OWORD *)(v271 - 24) = *(_OWORD *)(v270 + 24);
                                      *(_OWORD *)(&v436 - 5) = *(_OWORD *)(v270 + 40);
                                      *(_OWORD *)(&v436 - 3) = *(_OWORD *)(v270 + 56);
                                      if ((v272 & v273 & 0x2000000000000) != 0)
                                      {
                                        v274 = (OpaqueAudioComponentInstance *)*((void *)v3 + 396);
                                        if (v274)
                                        {
                                          LODWORD(v473.mSampleTime) = 0;
                                          AudioUnitGetParameter(v274, 1u, 0, 0, (AudioUnitParameterValue *)&v473);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 397), 0, 0, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                          v267 = (OpaqueAudioComponentInstance *)*((void *)v3 + 394);
                                        }
                                      }
                                      *(void *)&v468.mSampleTime = &v436 - 6;
                                      v468.mHostTime = (UInt64)(&v436 - 6);
                                      *(void *)&v469.mNumberBuffers = &v436 - 6;
                                      *(void *)&v469.mBuffers[0].mNumberChannels = &v436 - 6;
                                      long long v275 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v473.mRateScalar = v275;
                                      long long v276 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v473.mSMPTETime.mHours = v276;
                                      AudioUnitRenderActionFlags v458 = 512;
                                      AudioUnitProcessMultiple(v267, &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                                      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x83u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2187), &v473);
                                      }
                                      uint64_t v241 = *((void *)v3 + 583);
                                    }
                                  }
                                  if ((v241 & 0x4000000000000) != 0)
                                  {
                                    uint64_t v277 = *((void *)v3 + 585);
                                    if ((v277 & 0x4000000000000) != 0)
                                    {
                                      uint64_t v278 = *((void *)v3 + 397);
                                      if (v278)
                                      {
                                        if ((v241 & v277 & 0x800000000000) != 0 && *((void *)v3 + 394))
                                        {
                                          MEMORY[0x1F4188790](v278);
                                          uint64_t v435 = 0;
                                          *((_OWORD *)&v436 - 3) = 0u;
                                          *((_OWORD *)&v436 - 2) = 0u;
                                          *((_DWORD *)&v436 - 12) = 2;
                                          uint64_t v279 = *((void *)v3 + 2187);
                                          *(_OWORD *)(&v436 - 5) = *(_OWORD *)(v279 + 8);
                                          *(_OWORD *)(&v436 - 3) = *(_OWORD *)(v279 + 24);
                                          *(void *)&v468.mSampleTime = &v436 - 6;
                                          *(void *)&v469.mNumberBuffers = *((void *)v3 + 432);
                                          long long v280 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&v473.mRateScalar = v280;
                                          long long v281 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&v473.mSMPTETime.mHours = v281;
                                          AudioUnitRenderActionFlags v458 = 512;
                                          AudioUnitProcessMultiple(v282, &v458, &v473, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 432), &v473);
                                          }
                                          uint64_t v241 = *((void *)v3 + 583);
                                        }
                                      }
                                    }
                                  }
                                  if ((v241 & 0x40000000000000) != 0
                                    && (*((unsigned char *)v3 + 4686) & 0x40) != 0
                                    && *((void *)v3 + 401))
                                  {
                                    BOOL v283 = 1;
                                  }
                                  else
                                  {
                                    BOOL v283 = (v241 & 0x100000000000000) != 0
                                        && (*((unsigned char *)v3 + 4687) & 1) != 0
                                        && *((void *)v3 + 403) != 0;
                                  }
                                  LODWORD(v472.realp) = 0;
                                  LODWORD(v466) = 0;
                                  uint64_t v284 = AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v472);
                                  BOOL v285 = *(float *)&v472.realp < 1.0 && v283;
                                  LODWORD(v448) = v285;
                                  if (v283)
                                  {
                                    LODWORD(v473.mSampleTime) = 1065353216;
                                    if (*(float *)&v472.realp < 1.0) {
                                      vDSP_vfill((const float *)&v473, *(float **)(*((void *)v3 + 502) + 16), 1, *((unsigned int *)v3 + 127));
                                    }
                                    vDSP_vfill((const float *)&v473, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
                                    uint64_t v286 = *((void *)v3 + 583);
                                  }
                                  else
                                  {
                                    uint64_t v286 = *((void *)v3 + 583);
                                    if ((v286 & 0x80000000000) == 0
                                      || (*((unsigned char *)v3 + 4685) & 8) == 0
                                      || !*((void *)v3 + 390))
                                    {
                                      goto LABEL_592;
                                    }
                                  }
                                  if ((v286 & 0x1000000000000) == 0
                                    || (*((unsigned char *)v3 + 4686) & 1) == 0
                                    || !*((void *)v3 + 395))
                                  {
                                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                    {
                                      uint64_t v284 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                                      uint64_t v286 = *((void *)v3 + 583);
                                    }
                                    char v287 = 1;
LABEL_593:
                                    v446 = (AudioBufferList *)*((void *)v3 + 501);
                                    if ((v286 & 0x40000000000000) != 0
                                      && (*((unsigned char *)v3 + 4686) & 0x40) != 0
                                      && (uint64_t v284 = *((void *)v3 + 401)) != 0)
                                    {
                                      UInt64 v288 = *((void *)v3 + 500);
                                      v468.mSampleTime = *((Float64 *)v3 + 429);
                                      v468.mHostTime = v288;
                                      *(void *)&v468.mRateScalar = (char *)v3 + 16944;
                                      uint64_t v289 = *((void *)v3 + 502);
                                      *(void *)&v469.mNumberBuffers = *((void *)v3 + 430);
                                      *(void *)&v469.mBuffers[0].mNumberChannels = v289;
                                      v469.mBuffers[0].mData = v446;
                                      AudioUnitRenderActionFlags v458 = 512;
                                      long long v290 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v473.mRateScalar = v290;
                                      long long v291 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v473.mSMPTETime.mHours = v291;
                                      AudioUnitProcessMultiple((AudioUnit)v284, &v458, &v473, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v468, 3u, (AudioBufferList **)&v469);
                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v459);
                                      uint64_t v284 = AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, (AudioUnitParameterValue *)v3 + 4387);
                                      if ((*((unsigned char *)v3 + 4672) & 4) == 0
                                        || (*((unsigned char *)v3 + 4688) & 4) == 0
                                        || !*((void *)v3 + 413))
                                      {
                                        goto LABEL_609;
                                      }
                                      v292 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
                                      AudioUnitParameterID v293 = 2;
                                    }
                                    else
                                    {
                                      if ((v286 & 0x100000000000000) == 0 || (*((unsigned char *)v3 + 4687) & 1) == 0)
                                      {
                                        int v294 = 1;
                                        goto LABEL_613;
                                      }
                                      uint64_t v284 = *((void *)v3 + 403);
                                      int v294 = 1;
                                      if (!v284) {
                                        goto LABEL_613;
                                      }
                                      MEMORY[0x1F4188790](v284);
                                      *(&v436 - 3) = 0;
                                      uint64_t v435 = 0;
                                      *(&v436 - 4) = 0;
                                      *((_DWORD *)&v436 - 8) = 1;
                                      *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 2187) + 8);
                                      AudioUnitSetParameter(v295, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                                      UInt64 v296 = *((void *)v3 + 432);
                                      *(void *)&v468.mSampleTime = &v436 - 4;
                                      v468.mHostTime = v296;
                                      v468.mRateScalar = *((Float64 *)v3 + 500);
                                      v468.mWordClockTime = (UInt64)v3 + 16944;
                                      uint64_t v297 = *((void *)v3 + 437);
                                      *(void *)&v469.mNumberBuffers = *((void *)v3 + 430);
                                      *(void *)&v469.mBuffers[0].mNumberChannels = v297;
                                      v469.mBuffers[0].mData = (void *)*((void *)v3 + 502);
                                      v470 = v446;
                                      long long v298 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&v473.mRateScalar = v298;
                                      long long v299 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&v473.mSMPTETime.mHours = v299;
                                      AudioUnitRenderActionFlags v458 = 512;
                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 403), &v458, &v473, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v468, 4u, (AudioBufferList **)&v469);
                                      uint64_t v284 = AudioUnitGetParameter(*((AudioUnit *)v3 + 403), 2u, 0, 0, &v459);
                                      if ((*((unsigned char *)v3 + 4672) & 4) == 0
                                        || (*((unsigned char *)v3 + 4688) & 4) == 0
                                        || !*((void *)v3 + 413))
                                      {
LABEL_609:
                                        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                          uint64_t v284 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &v473);
                                        }
                                        int v294 = 0;
LABEL_613:
                                        uint64_t v300 = *((void *)v3 + 583);
                                        if ((v300 & 0x400000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 4) != 0)
                                        {
                                          uint64_t v284 = *((void *)v3 + 405);
                                          if (v284)
                                          {
                                            v468.mSampleTime = *((Float64 *)v3 + 429);
                                            *(void *)&v469.mNumberBuffers = 0;
                                            long long v301 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v473.mSMPTETime.mHours = v301;
                                            long long v302 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v473.mRateScalar = v302;
                                            AudioUnitRenderActionFlags v458 = 512;
                                            uint64_t v303 = *((void *)v3 + 503);
                                            v304 = *(void **)(v303 + 16);
                                            unsigned int v305 = *(_DWORD *)(v303 + 12);
                                            uint64_t v284 = AudioUnitProcessMultiple((AudioUnit)v284, &v458, &v473, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                                            if (v284
                                              || (uint64_t v284 = AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x13EDu, 0, 0, *(void **)(*((void *)v3 + 503) + 16), (UInt32 *)(*((void *)v3 + 503) + 12)), v284))
                                            {
                                              if (v305 >= 4) {
                                                memset_pattern16(v304, &unk_1BB873A60, v305 & 0xFFFFFFFC);
                                              }
                                            }
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                              uint64_t v284 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 503), &v473);
                                            }
                                            uint64_t v300 = *((void *)v3 + 583);
                                          }
                                        }
                                        if ((v300 & 0x800000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 8) != 0)
                                        {
                                          if (*((void *)v3 + 406))
                                          {
                                            int v306 = *(_DWORD *)(v449 + 280);
                                            if (v306)
                                            {
                                              if (v306 == 1)
                                              {
                                                v307 = (char *)v3 + 1104;
                                                v308 = (uint64_t *)((char *)v3 + 1128);
                                              }
                                              else
                                              {
                                                v307 = (char *)v3 + 1112;
                                                v308 = (uint64_t *)((char *)v3 + 1120);
                                              }
                                              uint64_t v309 = *v308;
                                              v310 = (VPTimeFreqConverter *)*((void *)v3 + 2163);
                                              v311 = *(const float **)(*(void *)v307 + 40);
                                              Float64 v312 = *((double *)v3 + 2159);
                                              uint64_t v313 = *((unsigned int *)v3 + 127);
                                              v473.mSampleTime = *(Float64 *)(*(void *)&v312 + 16);
                                              v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v313;
                                              if (v310)
                                              {
                                                VPTimeFreqConverter::Analyze(v310, v311, (DSPSplitComplex *)&v473);
                                                Float64 v312 = *((double *)v3 + 2159);
                                                uint64_t v313 = *((unsigned int *)v3 + 127);
                                              }
                                              v314 = (VPTimeFreqConverter *)*((void *)v3 + 2164);
                                              v315 = *(const float **)(v309 + 40);
                                              v473.mSampleTime = *(Float64 *)(*(void *)&v312 + 32);
                                              v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v313;
                                              if (v314)
                                              {
                                                VPTimeFreqConverter::Analyze(v314, v315, (DSPSplitComplex *)&v473);
                                                Float64 v312 = *((double *)v3 + 2159);
                                                LODWORD(v313) = *((_DWORD *)v3 + 127);
                                              }
                                              v468.mSampleTime = v312;
                                              *(Float64 *)&v469.mNumberBuffers = v312;
                                              AudioUnitRenderActionFlags v458 = 512;
                                              long long v316 = *(_OWORD *)&a2->mRateScalar;
                                              *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                              *(_OWORD *)&v473.mRateScalar = v316;
                                              long long v317 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                              *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                              *(_OWORD *)&v473.mSMPTETime.mHours = v317;
                                              OSStatus v318 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 406), &v458, &v473, v313, 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                                              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2159), &v473);
                                              }
                                              uint64_t v319 = *((void *)v3 + 2160);
                                              unsigned int v322 = *(_DWORD *)(v319 + 12);
                                              uint64_t v320 = v319 + 12;
                                              unsigned int v321 = v322;
                                              v323 = *(void **)(v320 + 4);
                                              if ((v318
                                                 || AudioUnitGetProperty(*((AudioUnit *)v3 + 406), 0x15FEu, 0, 0, *(void **)(v320 + 4), (UInt32 *)v320))&& v321 >= 4)
                                              {
                                                memset_pattern16(v323, &unk_1BB873A60, v321 & 0xFFFFFFFC);
                                              }
                                              v324 = (_DWORD *)(v449 + 408);
                                              uint64_t v284 = AudioUnitGetParameter(*((AudioUnit *)v3 + 406), 0, 0, 0, (AudioUnitParameterValue *)(v449 + 408));
                                              if (v284) {
                                                _DWORD *v324 = 0;
                                              }
                                              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                                uint64_t v284 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2160), &v473);
                                              }
                                              uint64_t v300 = *((void *)v3 + 583);
                                            }
                                          }
                                        }
                                        if ((v300 & 0x80000000000) == 0
                                          || (*((void *)v3 + 585) & 0x80000000000) == 0
                                          || !*((void *)v3 + 390))
                                        {
LABEL_688:
                                          if ((v300 & 0x1000000000000) != 0
                                            && (*((unsigned char *)v3 + 4686) & 1) != 0
                                            && *((void *)v3 + 395))
                                          {
                                            LODWORD(v464) = 0;
                                            AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x25u, 0, 0, (AudioUnitParameterValue *)&v464);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 4u, 2u, *(AudioUnitParameterValue *)&v464, 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 4u, 3u, *(AudioUnitParameterValue *)&v464, 0);
                                            v346 = memcpy(*(void **)(*((void *)v3 + 2204) + 16), *(const void **)(*((void *)v3 + 429) + 16), *(unsigned int *)(*((void *)v3 + 429) + 12));
                                            MEMORY[0x1F4188790](v346);
                                            uint64_t v435 = 0;
                                            *((_OWORD *)&v436 - 3) = 0u;
                                            *((_OWORD *)&v436 - 2) = 0u;
                                            *((_OWORD *)&v436 - 5) = 0u;
                                            *((_OWORD *)&v436 - 4) = 0u;
                                            *((_DWORD *)&v436 - 20) = 4;
                                            *(_OWORD *)(&v436 - 9) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                            *(_OWORD *)(&v436 - 7) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
                                            *(_OWORD *)(&v436 - 5) = *(_OWORD *)(*((void *)v3 + 507) + 8);
                                            *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 506) + 8);
                                            __n128 v348 = MEMORY[0x1F4188790](v347);
                                            uint64_t v435 = 0;
                                            *((__n128 *)&v436 - 3) = v348;
                                            *((__n128 *)&v436 - 2) = v348;
                                            *((__n128 *)&v436 - 5) = v348;
                                            *((__n128 *)&v436 - 4) = v348;
                                            *((_DWORD *)&v436 - 20) = 4;
                                            *(_OWORD *)(&v436 - 9) = *(_OWORD *)(*((void *)v3 + 2200) + 8);
                                            *(_OWORD *)(&v436 - 7) = *(_OWORD *)(*((void *)v3 + 2202) + 8);
                                            *(_OWORD *)(&v436 - 5) = *(_OWORD *)(*((void *)v3 + 2203) + 8);
                                            *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 2201) + 8);
                                            *(void *)&v468.mSampleTime = &v436 - 10;
                                            v468.mHostTime = (UInt64)(&v436 - 10);
                                            *(void *)&v469.mNumberBuffers = &v436 - 10;
                                            *(void *)&v469.mBuffers[0].mNumberChannels = &v436 - 10;
                                            long long v349 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v473.mRateScalar = v349;
                                            long long v350 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v473.mSMPTETime.mHours = v350;
                                            AudioUnitRenderActionFlags v458 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 395), &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x84u, *((unsigned int *)v3 + 127), (const AudioBufferList *)(&v436 - 10), &v473);
                                            }
                                            uint64_t v300 = *((void *)v3 + 583);
                                          }
                                          if ((v300 & 0x4000000000000) != 0)
                                          {
                                            uint64_t v351 = *((void *)v3 + 585);
                                            if ((v351 & 0x4000000000000) != 0)
                                            {
                                              uint64_t v352 = *((void *)v3 + 397);
                                              if (v352)
                                              {
                                                if ((v300 & v351 & 0x1000000000000) != 0 && *((void *)v3 + 395))
                                                {
                                                  MEMORY[0x1F4188790](v352);
                                                  uint64_t v435 = 0;
                                                  *((_OWORD *)&v436 - 3) = 0u;
                                                  *((_OWORD *)&v436 - 2) = 0u;
                                                  *((_DWORD *)&v436 - 12) = 2;
                                                  *(_OWORD *)(&v436 - 5) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                                  *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
                                                  *(void *)&v468.mSampleTime = &v436 - 6;
                                                  *(void *)&v469.mNumberBuffers = *((void *)v3 + 432);
                                                  long long v353 = *(_OWORD *)&a2->mRateScalar;
                                                  *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                  *(_OWORD *)&v473.mRateScalar = v353;
                                                  long long v354 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                  *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                  *(_OWORD *)&v473.mSMPTETime.mHours = v354;
                                                  AudioUnitRenderActionFlags v458 = 512;
                                                  AudioUnitProcessMultiple(v355, &v458, &v473, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                                                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 432), &v473);
                                                  }
                                                  uint64_t v300 = *((void *)v3 + 583);
                                                }
                                              }
                                            }
                                          }
                                          LODWORD(v464) = 0;
                                          LODWORD(v462) = 0;
                                          float v356 = 0.0;
                                          if ((v300 & 0x400000) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0)
                                          {
                                            v370 = (OpaqueAudioComponentInstance *)*((void *)v3 + 369);
                                            float v357 = 0.0;
                                            if (v370)
                                            {
                                              AudioUnitGetParameter(v370, 0x43u, 0, 0, (AudioUnitParameterValue *)&v464);
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x47u, 0, 0, (AudioUnitParameterValue *)&v462);
                                              float v357 = *(float *)&v464;
                                              float v356 = *(float *)&v462;
                                              uint64_t v300 = *((void *)v3 + 583);
                                            }
                                          }
                                          else
                                          {
                                            float v357 = 0.0;
                                          }
                                          BOOL v358 = v356 != 0.0 && v357 != 0.0;
                                          if ((v300 & 0x100000000000) == 0
                                            || (uint64_t v359 = *((void *)v3 + 585), (v359 & 0x100000000000) == 0)
                                            || (uint64_t v360 = *((void *)v3 + 391)) == 0
                                            || (v300 & v359 & 0x1000000000000) == 0
                                            || !*((void *)v3 + 395))
                                          {
LABEL_727:
                                            if ((v300 & 0x200000000000) == 0) {
                                              goto LABEL_742;
                                            }
                                            uint64_t v371 = *((void *)v3 + 585);
                                            if ((v371 & 0x200000000000) == 0) {
                                              goto LABEL_742;
                                            }
                                            uint64_t v372 = *((void *)v3 + 392);
                                            if (!v372
                                              || (v300 & v371 & 0x1000000000000) != 0 && *((void *)v3 + 395))
                                            {
                                              goto LABEL_742;
                                            }
                                            MEMORY[0x1F4188790](v372);
                                            *(&v436 - 4) = 0;
                                            *(&v436 - 3) = 0;
                                            *((_DWORD *)&v436 - 8) = 1;
                                            MEMORY[0x1F4188790](v373);
                                            *(&v436 - 3) = 0;
                                            uint64_t v435 = 0;
                                            *(&v436 - 4) = 0;
                                            *((_DWORD *)&v436 - 8) = v374;
                                            *(_OWORD *)(v375 - 24) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
                                            *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 505) + 40);
                                            AudioUnitSetParameter(v376, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
                                            *(void *)&v468.mSampleTime = &v436 - 4;
                                            v468.mHostTime = (UInt64)(&v436 - 4);
                                            UInt64 v377 = *((void *)v3 + 502);
                                            v468.mRateScalar = *((Float64 *)v3 + 512);
                                            v468.mWordClockTime = v377;
                                            *(void *)&v468.mSMPTETime.mSubframes = v446;
                                            *(void *)&v468.mSMPTETime.mType = 0;
                                            *(void *)&v469.mNumberBuffers = *((void *)v3 + 432);
                                            *(void *)&v469.mBuffers[0].mNumberChannels = 0;
                                            v469.mBuffers[0].mData = (void *)*((void *)v3 + 2196);
                                            long long v378 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v473.mRateScalar = v378;
                                            long long v379 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v473.mSMPTETime.mHours = v379;
                                            AudioUnitRenderActionFlags v458 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 392), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 3u, (AudioBufferList **)&v469);
                                            uint64_t v380 = *((unsigned int *)v3 + 127);
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                            {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x26u, v380, *((const AudioBufferList **)v3 + 432), &v473);
                                              uint64_t v380 = *((unsigned int *)v3 + 127);
                                              v381 = (const AudioBufferList *)*((void *)v3 + 2196);
                                              if (*((unsigned char *)v3 + 15961)) {
                                                goto LABEL_738;
                                              }
                                            }
                                            else
                                            {
                                              v381 = (const AudioBufferList *)*((void *)v3 + 2196);
                                            }
                                            if (!*((unsigned char *)v3 + 15962))
                                            {
LABEL_739:
                                              if (*(float *)&inInputBufferLists != 0.0) {
                                                vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, *(const float **)(*((void *)v3 + 2196) + 16), 1, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
                                              }
                                              uint64_t v300 = *((void *)v3 + 583);
LABEL_742:
                                              if ((v300 & 0x80000000000) != 0
                                                && (*((unsigned char *)v3 + 4685) & 8) != 0
                                                && *((void *)v3 + 390))
                                              {
                                                if (!v448)
                                                {
LABEL_765:
                                                  if ((*((unsigned char *)v3 + 4685) & 8) != 0)
                                                  {
                                                    BOOL v386 = *((void *)v3 + 390) != 0;
LABEL_768:
                                                    if (!v386 && !v283)
                                                    {
                                                      LODWORD(v473.mSampleTime) = 1065353216;
                                                      unsigned int v387 = *((_DWORD *)v3 + 127);
                                                      vDSP_vfill((const float *)&v473, *(float **)(*((void *)v3 + 502) + 16), 1, v387);
                                                      memcpy(*(void **)(*((void *)v3 + 430) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * v387);
                                                    }
                                                    goto LABEL_784;
                                                  }
LABEL_766:
                                                  BOOL v386 = 0;
                                                  goto LABEL_768;
                                                }
                                              }
                                              else
                                              {
                                                if ((v300 & 0x100000000000) == 0
                                                  || (*((unsigned char *)v3 + 4685) & 0x10) == 0)
                                                {
                                                  goto LABEL_764;
                                                }
                                                char v382 = (char)v448;
                                                if (!*((void *)v3 + 391)) {
                                                  char v382 = 0;
                                                }
                                                if ((v382 & 1) == 0)
                                                {
LABEL_764:
                                                  if ((v300 & 0x80000000000) == 0) {
                                                    goto LABEL_766;
                                                  }
                                                  goto LABEL_765;
                                                }
                                              }
                                              v383 = *(float **)(*((void *)v3 + 502) + 16);
                                              vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, v383, 1, v383, 1, *((unsigned int *)v3 + 127));
                                              uint64_t v384 = *((void *)v3 + 583);
                                              if ((v384 & 0x400000000000000) != 0
                                                && (*((unsigned char *)v3 + 4687) & 4) != 0
                                                && *((void *)v3 + 405))
                                              {
                                                vDSP_vmin(*(const float **)(*((void *)v3 + 503) + 16), 1, v383, 1, v383, 1, *((unsigned int *)v3 + 127));
                                                uint64_t v384 = *((void *)v3 + 583);
                                              }
                                              if ((v384 & 0x800000000000000) != 0
                                                && (*((unsigned char *)v3 + 4687) & 8) != 0
                                                && *((void *)v3 + 406))
                                              {
                                                vDSP_vmin(*(const float **)(*((void *)v3 + 2160) + 16), 1, v383, 1, v383, 1, *((unsigned int *)v3 + 127));
                                                uint64_t v384 = *((void *)v3 + 583);
                                              }
                                              if ((v384 & 0x1000) != 0
                                                && (*((unsigned char *)v3 + 4681) & 0x10) != 0
                                                && *((void *)v3 + 359))
                                              {
                                                uint64_t v385 = 17520;
                                              }
                                              else if ((v384 & 0x800000000000) != 0 {
                                                     && (*((unsigned char *)v3 + 4685) & 0x80) != 0
                                              }
                                                     && *((void *)v3 + 394))
                                              {
                                                uint64_t v385 = 17496;
                                              }
                                              else
                                              {
                                                if ((v384 & 0x1000000000000) == 0
                                                  || (*((unsigned char *)v3 + 4686) & 1) == 0
                                                  || (!*((void *)v3 + 395) ? (char v388 = 1) : (char v388 = v358),
                                                      (v388 & 1) != 0))
                                                {
                                                  v389 = (char *)v3 + 3432;
LABEL_783:
                                                  v390 = *(const float **)(*(void *)v389 + 16);
                                                  v391 = *(float **)(*((void *)v3 + 430) + 16);
                                                  vDSP_vmul(v390, 1, v383, 1, v391, 1, *((unsigned int *)v3 + 127));
                                                  vDSP_vmul(&v390[*((unsigned int *)v3 + 127) + 1], 1, v383 + 1, 1, &v391[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                                                  v390[*((unsigned int *)v3 + 127)] = v390[*((unsigned int *)v3 + 127)]
                                                                                    * v383[*((_DWORD *)v3 + 127) - 1];
LABEL_784:
                                                  if (((v287 & 1) != 0
                                                     || (*((unsigned char *)v3 + 4669) & 8) != 0
                                                     && (*((unsigned char *)v3 + 4685) & 8) != 0
                                                     && *((void *)v3 + 390))
                                                    && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
                                                  {
                                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), a2);
                                                  }
                                                  if ((*((unsigned char *)v3 + 4671) & 0x20) != 0
                                                    && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
                                                  {
                                                    v392 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
                                                    if (v392)
                                                    {
                                                      AudioUnitSetParameter(v392, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3133), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1048), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1052), 0);
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 3u, 0, 0, v459, 0);
                                                      LODWORD(v460) = 0;
                                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0x1Cu, 0, 0, (AudioUnitParameterValue *)&v460);
                                                      if (*(float *)&v460 == 1.0)
                                                      {
                                                        LODWORD(v473.mSampleTime) = -1082130432;
                                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v473);
                                                        BOOL v393 = *(float *)&v473.mSampleTime != 2.0
                                                            || *(float *)&v473.mSampleTime == 1.0;
                                                        uint64_t v394 = 176;
                                                        if (!v393) {
                                                          uint64_t v394 = 184;
                                                        }
                                                        v395 = (char *)v3 + v394;
                                                        v396 = (OpaqueAudioComponentInstance *)*((void *)v395 + 347);
                                                        if (v396)
                                                        {
                                                          v397 = (AudioUnit *)(v395 + 2776);
                                                          LODWORD(v468.mSampleTime) = 0;
                                                          if (!AudioUnitGetPropertyInfo(v396, 0xED8u, 0, 0, (UInt32 *)&v468, 0))
                                                          {
                                                            v398 = (void *)*((void *)v3 + 2197);
                                                            if (*((void *)v3 + 2198) - (void)v398 >= (unint64_t)LODWORD(v468.mSampleTime)) {
                                                              AudioUnitGetProperty(*v397, 0xED8u, 0, 0, v398, (UInt32 *)&v468);
                                                            }
                                                          }
                                                          v469.mNumberBuffers = 0;
                                                          AudioUnitGetParameter(*v397, 1u, 0, 0, (AudioUnitParameterValue *)&v469.mNumberBuffers);
                                                          AudioUnitSetProperty(*((AudioUnit *)v3 + 408), 0x846u, 0, 0, *((const void **)v3 + 2197), vcvts_n_u32_f32(*(float *)&v469.mNumberBuffers, 2uLL));
                                                        }
                                                      }
                                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                                                      UInt64 v399 = *((void *)v3 + 511);
                                                      v468.mSampleTime = *((Float64 *)v3 + 419);
                                                      v468.mHostTime = v399;
                                                      UInt64 v400 = *((void *)v3 + 510);
                                                      v468.mRateScalar = *((Float64 *)v3 + 430);
                                                      v468.mWordClockTime = v400;
                                                      *(void *)&v468.mSMPTETime.mSubframes = *((void *)v3 + 500);
                                                      *(void *)&v468.mSMPTETime.mType = *((void *)v3 + 502);
                                                      *(void *)&v469.mNumberBuffers = *((void *)v3 + 136);
                                                      AudioUnitRenderActionFlags v458 = 512;
                                                      long long v401 = *(_OWORD *)&a2->mRateScalar;
                                                      *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                      *(_OWORD *)&v473.mRateScalar = v401;
                                                      long long v402 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                      *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                      *(_OWORD *)&v473.mSMPTETime.mHours = v402;
                                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 1u, (AudioBufferList **)&v469);
                                                      AudioUnitParameterValue v450 = 0.0;
                                                      AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 1u, 0, 0, &v450);
                                                      *((AudioUnitParameterValue *)v3 + 3134) = v450;
                                                      if ((*((unsigned char *)v3 + 4672) & 4) != 0
                                                        && (*((unsigned char *)v3 + 4688) & 4) != 0
                                                        && *((void *)v3 + 413))
                                                      {
                                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 2u, 0, 0, &v459);
                                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v459, 0);
                                                      }
                                                    }
                                                  }
                                                  goto LABEL_809;
                                                }
                                                uint64_t v385 = 17632;
                                              }
                                              v389 = (char *)v3 + v385;
                                              goto LABEL_783;
                                            }
LABEL_738:
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x51u, v380, v381, &v473);
                                            goto LABEL_739;
                                          }
                                          MEMORY[0x1F4188790](v360);
                                          *(&v436 - 4) = 0;
                                          *(&v436 - 3) = 0;
                                          *((_DWORD *)&v436 - 8) = 1;
                                          MEMORY[0x1F4188790](v361);
                                          *(&v436 - 3) = 0;
                                          uint64_t v435 = 0;
                                          *(&v436 - 4) = 0;
                                          *((_DWORD *)&v436 - 8) = v362;
                                          *(_OWORD *)(v363 - 24) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                          *(_OWORD *)(&v436 - 3) = *(_OWORD *)(*((void *)v3 + 432) + 8);
                                          AudioUnitSetParameter(v364, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
                                          AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
                                          *(void *)&v468.mSampleTime = &v436 - 4;
                                          v468.mHostTime = (UInt64)(&v436 - 4);
                                          UInt64 v365 = *((void *)v3 + 502);
                                          *(void *)&v468.mRateScalar = &v436 - 4;
                                          v468.mWordClockTime = v365;
                                          *(void *)&v468.mSMPTETime.mSubframes = v446;
                                          *(void *)&v468.mSMPTETime.mType = 0;
                                          *(void *)&v469.mNumberBuffers = *((void *)v3 + 432);
                                          *(void *)&v469.mBuffers[0].mNumberChannels = 0;
                                          v469.mBuffers[0].mData = (void *)*((void *)v3 + 501);
                                          long long v366 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&v473.mRateScalar = v366;
                                          long long v367 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&v473.mSMPTETime.mHours = v367;
                                          AudioUnitRenderActionFlags v458 = 512;
                                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 3u, (AudioBufferList **)&v469);
                                          uint64_t v368 = *((unsigned int *)v3 + 127);
                                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                          {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v368, *((const AudioBufferList **)v3 + 432), &v473);
                                            uint64_t v368 = *((unsigned int *)v3 + 127);
                                            v369 = (const AudioBufferList *)*((void *)v3 + 501);
                                            if (*((unsigned char *)v3 + 15961)) {
                                              goto LABEL_723;
                                            }
                                          }
                                          else
                                          {
                                            v369 = (const AudioBufferList *)*((void *)v3 + 501);
                                          }
                                          if (!*((unsigned char *)v3 + 15962))
                                          {
LABEL_724:
                                            if (v358) {
                                              vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, *(const float **)(*((void *)v3 + 501) + 16), 1, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
                                            }
                                            uint64_t v300 = *((void *)v3 + 583);
                                            goto LABEL_727;
                                          }
LABEL_723:
                                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v368, v369, &v473);
                                          goto LABEL_724;
                                        }
                                        MEMORY[0x1F4188790](v284);
                                        *(&v436 - 4) = 0;
                                        *(&v436 - 3) = 0;
                                        *((_DWORD *)&v436 - 8) = 1;
                                        MEMORY[0x1F4188790](v325);
                                        *(&v436 - 4) = 0;
                                        *(&v436 - 3) = 0;
                                        uint64_t v435 = 0;
                                        *((_DWORD *)&v436 - 8) = v328;
                                        if ((v326 & v327 & 0x800000000000) != 0)
                                        {
                                          v329 = &v436 - 3;
                                          v330 = &v436 - 3;
                                          if (*((void *)v3 + 394))
                                          {
                                            uint64_t v331 = *((void *)v3 + 2187);
                                            *(_OWORD *)v329 = *(_OWORD *)(v331 + 8);
                                            v332 = (_OWORD *)(v331 + 40);
LABEL_656:
                                            *(_OWORD *)v330 = *v332;
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
                                            AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
                                            *(void *)&v468.mSampleTime = &v436 - 4;
                                            v468.mHostTime = (UInt64)(&v436 - 4);
                                            UInt64 v333 = *((void *)v3 + 502);
                                            v468.mRateScalar = *((Float64 *)v3 + 512);
                                            v468.mWordClockTime = v333;
                                            *(void *)&v468.mSMPTETime.mSubframes = v446;
                                            *(void *)&v468.mSMPTETime.mType = 0;
                                            uint64_t v334 = *((void *)v3 + 583);
                                            if ((v334 & 0x1000000000000) != 0
                                              && (*((unsigned char *)v3 + 4686) & 1) != 0
                                              && *((void *)v3 + 395))
                                            {
                                              *(void *)&v468.mSMPTETime.mType = *((void *)v3 + 508);
                                            }
                                            if ((v448 & 1) == 0) {
                                              v468.mWordClockTime = 0;
                                            }
                                            uint64_t v335 = *((void *)v3 + 510);
                                            *(void *)&v469.mNumberBuffers = 0;
                                            *(void *)&v469.mBuffers[0].mNumberChannels = v335;
                                            v469.mBuffers[0].mData = 0;
                                            if ((v334 & 0x4000000) != 0
                                              && (uint64_t v336 = *((void *)v3 + 585), (v336 & 0x4000000) != 0)
                                              && (v337 = (OpaqueAudioComponentInstance *)*((void *)v3 + 373)) != 0
                                              && (v334 & v336 & 0x400000) != 0
                                              && *((void *)v3 + 369))
                                            {
                                              LODWORD(v473.mSampleTime) = 0;
                                              *(void *)&v468.mSMPTETime.mType = *((void *)v3 + 508);
                                              AudioUnitGetParameter(v337, 0x2Du, 0, 0, (AudioUnitParameterValue *)&v473);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x2Du, 0, 0, (AudioUnitParameterValue *)&v473);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x29u, 0, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                            }
                                            else if ((v334 & 0x1000000) != 0 {
                                                   && (*((unsigned char *)v3 + 4683) & 1) != 0
                                            }
                                                   && *((void *)v3 + 371)
                                                   && v452 == 1.0)
                                            {
                                              *(void *)&v468.mSMPTETime.mType = *((void *)v3 + 2148);
                                            }
                                            int v338 = (int)v448;
                                            uint64_t v339 = 4016;
                                            if (v448) {
                                              uint64_t v339 = 4000;
                                            }
                                            v340 = *(void **)((char *)v3 + v339);
                                            if (v448) {
                                              uint64_t v341 = 3456;
                                            }
                                            else {
                                              uint64_t v341 = 3440;
                                            }
                                            *(void *)&v469.mNumberBuffers = *(void *)((char *)v3 + v341);
                                            v469.mBuffers[0].mData = v340;
                                            long long v342 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&v473.mRateScalar = v342;
                                            long long v343 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&v473.mSMPTETime.mHours = v343;
                                            AudioUnitRenderActionFlags v458 = 512;
                                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 3u, (AudioBufferList **)&v469);
                                            if ((v294 | v338 ^ 1) == 1) {
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x20u, 0, 0, &v459);
                                            }
                                            uint64_t v344 = *((unsigned int *)v3 + 127);
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                            {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v344, *(const AudioBufferList **)((char *)v3 + v341), &v473);
                                              uint64_t v344 = *((unsigned int *)v3 + 127);
                                              v345 = (const AudioBufferList *)*((void *)v3 + 500);
                                              if (*((unsigned char *)v3 + 15961)) {
                                                goto LABEL_686;
                                              }
                                            }
                                            else
                                            {
                                              v345 = (const AudioBufferList *)*((void *)v3 + 500);
                                            }
                                            if (!*((unsigned char *)v3 + 15962))
                                            {
LABEL_687:
                                              uint64_t v300 = *((void *)v3 + 583);
                                              goto LABEL_688;
                                            }
LABEL_686:
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v344, v345, &v473);
                                            goto LABEL_687;
                                          }
                                        }
                                        else
                                        {
                                          v329 = &v436 - 3;
                                          v330 = &v436 - 3;
                                        }
                                        *(_OWORD *)v329 = *(_OWORD *)(*((void *)v3 + 429) + 8);
                                        v332 = (_OWORD *)(*((void *)v3 + 433) + 8);
                                        goto LABEL_656;
                                      }
                                      v292 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                                      AudioUnitParameterID v293 = 9;
                                    }
                                    AudioUnitGetParameter(v292, v293, 0, 0, (AudioUnitParameterValue *)&v466);
                                    uint64_t v284 = AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v466, 0);
                                    goto LABEL_609;
                                  }
LABEL_592:
                                  char v287 = 0;
                                  goto LABEL_593;
                                }
                                LODWORD(v472.realp) = 1092616192;
                                if ((v241 & v242 & 0x100000000000000) != 0)
                                {
                                  v240 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                                  if (v240)
                                  {
                                    v240 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v240, 9u, 0, 0, (AudioUnitParameterValue *)&v472);
                                    uint64_t v241 = *((void *)v3 + 583);
                                  }
                                }
                                if ((v241 & 0x100000000) != 0
                                  && (*((unsigned char *)v3 + 4684) & 1) != 0
                                  && *((void *)v3 + 379))
                                {
                                  LODWORD(v473.mSampleTime) = 0;
                                  LODWORD(v468.mSampleTime) = 0;
                                  v469.mNumberBuffers = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x18u, 0, 0, (AudioUnitParameterValue *)&v473);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x19u, 0, 0, (AudioUnitParameterValue *)&v468);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 5u, 0, 0, (AudioUnitParameterValue *)&v469.mNumberBuffers);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 3u, 0, 0, *(AudioUnitParameterValue *)&v473.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 4u, 0, 0, *(AudioUnitParameterValue *)&v468.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 5u, 0, 0, *(AudioUnitParameterValue *)&v469.mNumberBuffers, 0);
                                  v240 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 6u, 0, 0, *(AudioUnitParameterValue *)&v472.realp, 0);
                                }
                                MEMORY[0x1F4188790](v240);
                                uint64_t v435 = 0;
                                *((_OWORD *)&v436 - 3) = 0u;
                                *((_OWORD *)&v436 - 2) = 0u;
                                *((_DWORD *)&v436 - 12) = 2;
                                uint64_t v243 = *((void *)v3 + 429);
                                *(&v436 - 4) = *(void *)(v243 + 16);
                                *(&v436 - 5) = *(void *)(v243 + 8);
                                uint64_t v244 = *((void *)v3 + 432);
                                uint64_t v435 = *(void *)(v244 + 16);
                                *(&v436 - 3) = *(void *)(v244 + 8);
                                __n128 v246 = MEMORY[0x1F4188790](v245);
                                *((__n128 *)&v436 - 3) = v246;
                                *((__n128 *)&v436 - 2) = v246;
                                *((_DWORD *)&v436 - 12) = v247;
                                MEMORY[0x1F4188790](v248);
                                *(&v436 - 3) = 0;
                                uint64_t v435 = 0;
                                *(&v436 - 4) = 0;
                                *((_DWORD *)&v436 - 8) = 1;
                                uint64_t v249 = *((void *)v3 + 433);
                                *(void *)(v250 - 32) = *(void *)(v249 + 16);
                                *(void *)(v250 - 40) = *(void *)(v249 + 8);
                                uint64_t v251 = *((void *)v3 + 505);
                                *(void *)(v250 - 16) = *(void *)(v251 + 32);
                                *(void *)(v250 - 24) = *(void *)(v251 + 24);
                                uint64_t v435 = *(void *)(v249 + 16);
                                *(&v436 - 3) = *(void *)(v249 + 8);
                                v468.mSampleTime = v252;
                                v468.mHostTime = v253;
                                *(Float64 *)&v469.mNumberBuffers = v252;
                                *(void *)&v469.mBuffers[0].mNumberChannels = &v436 - 4;
                                long long v254 = *(_OWORD *)&a2->mRateScalar;
                                *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                *(_OWORD *)&v473.mRateScalar = v254;
                                long long v255 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                *(_OWORD *)&v473.mSMPTETime.mHours = v255;
                                AudioUnitRenderActionFlags v458 = 512;
                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 393), &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                                uint64_t v256 = *((unsigned int *)v3 + 127);
                                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                {
                                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v256, *((const AudioBufferList **)v3 + 429), &v473);
                                  uint64_t v256 = *((unsigned int *)v3 + 127);
                                  v257 = (const AudioBufferList *)*((void *)v3 + 432);
                                  if (*((unsigned char *)v3 + 15961)) {
                                    goto LABEL_546;
                                  }
                                }
                                else
                                {
                                  v257 = (const AudioBufferList *)*((void *)v3 + 432);
                                }
                                if (!*((unsigned char *)v3 + 15962))
                                {
LABEL_547:
                                  uint64_t v241 = *((void *)v3 + 583);
                                  goto LABEL_548;
                                }
LABEL_546:
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v256, v257, &v473);
                                goto LABEL_547;
                              }
                              v446 = (AudioBufferList *)v203;
                              int v442 = v170;
                              BOOL v443 = v169;
                              int v444 = v166;
                              BOOL v445 = v167;
                              uint64_t v219 = 0;
                              v220 = (float *)*((void *)v3 + 524);
                              v438 = (AudioUnitParameterValue *)((char *)v3 + 4192);
                              v472.realp = v220;
                              LODWORD(v472.imagp) = *((_DWORD *)v3 + 1051);
                              v439 = (AudioUnitParameterValue *)((char *)v3 + 4208);
                              v466 = (const AudioBufferList *)*((void *)v3 + 526);
                              int v467 = *((_DWORD *)v3 + 1055);
                              v440 = (AudioUnitParameterValue *)((char *)v3 + 4224);
                              uint64_t v464 = *((void *)v3 + 528);
                              int v465 = *((_DWORD *)v3 + 1059);
                              v441 = (AudioUnitParameterValue *)((char *)v3 + 4240);
                              uint64_t v462 = *((void *)v3 + 530);
                              int v463 = *((_DWORD *)v3 + 1063);
                              v437 = (AudioUnitParameterValue *)((char *)v3 + 4256);
                              uint64_t v460 = *((void *)v3 + 532);
                              int v461 = *((_DWORD *)v3 + 1067);
                              do
                              {
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, v219, *((AudioUnitParameterValue *)&v472.realp + v219), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, v219, *((AudioUnitParameterValue *)&v466 + v219), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, v219, *((AudioUnitParameterValue *)&v464 + v219), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, v219, *((AudioUnitParameterValue *)&v462 + v219), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, v219, *((AudioUnitParameterValue *)&v460 + v219), 0);
                                ++v219;
                              }
                              while (v219 != 3);
                              *(void *)&v469.mNumberBuffers = 1;
                              *(void *)&v469.mBuffers[0].mNumberChannels = 0;
                              v469.mBuffers[0].mData = 0;
                              v469.mBuffers[0] = *(AudioBuffer *)(*((void *)v3 + 505) + 8);
                              inInputBufferLists = v446;
                              v475 = v448;
                              v468.mSampleTime = *((Float64 *)v3 + 429);
                              v468.mHostTime = (UInt64)&v469;
                              v468.mRateScalar = 0.0;
                              v468.mWordClockTime = 0;
                              AudioUnitRenderActionFlags v458 = 512;
                              long long v221 = *(_OWORD *)&a2->mRateScalar;
                              *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                              *(_OWORD *)&v473.mRateScalar = v221;
                              long long v222 = *(_OWORD *)&a2->mSMPTETime.mHours;
                              *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                              *(_OWORD *)&v473.mSMPTETime.mHours = v222;
                              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 384), &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 4u, (AudioBufferList **)&v468);
                              AudioUnitParameterValue v450 = 0.0;
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0xAu, 0, 0, &v450);
                              uint64_t v223 = *((unsigned int *)v3 + 127);
                              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                              {
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v223, *((const AudioBufferList **)v3 + 429), &v473);
                                uint64_t v223 = *((unsigned int *)v3 + 127);
                                int v166 = v444;
                                BOOL v167 = v445;
                                int v170 = v442;
                                BOOL v169 = v443;
                                v224 = v437;
                                if (*((unsigned char *)v3 + 15961)) {
                                  goto LABEL_503;
                                }
                              }
                              else
                              {
                                int v166 = v444;
                                BOOL v167 = v445;
                                int v170 = v442;
                                BOOL v169 = v443;
                                v224 = v437;
                              }
                              if (!*((unsigned char *)v3 + 15962))
                              {
LABEL_504:
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, 0, v438);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, 0, v439);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, 0, v440);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, 0, v441);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, 0, v224);
                                goto LABEL_505;
                              }
LABEL_503:
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v223, &v469, &v473);
                              goto LABEL_504;
                            }
                            v446 = (AudioBufferList *)v203;
                            int v442 = v170;
                            BOOL v443 = v169;
                            int v444 = v166;
                            BOOL v445 = v167;
                            uint64_t v215 = 0;
                            inInputBufferLists = (AudioBufferList *)*((void *)v3 + 524);
                            LODWORD(v475) = *((_DWORD *)v3 + 1051);
                            v472.realp = (float *)*((void *)v3 + 526);
                            LODWORD(v472.imagp) = *((_DWORD *)v3 + 1055);
                            v466 = (const AudioBufferList *)*((void *)v3 + 528);
                            int v467 = *((_DWORD *)v3 + 1059);
                            uint64_t v464 = *((void *)v3 + 530);
                            int v465 = *((_DWORD *)v3 + 1063);
                            uint64_t v462 = *((void *)v3 + 532);
                            int v463 = *((_DWORD *)v3 + 1067);
                            do
                            {
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x12u, 4u, v215, *((AudioUnitParameterValue *)&inInputBufferLists + v215), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x13u, 4u, v215, *((AudioUnitParameterValue *)&v472.realp + v215), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x14u, 4u, v215, *((AudioUnitParameterValue *)&v466 + v215), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x15u, 4u, v215, *((AudioUnitParameterValue *)&v464 + v215), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x16u, 4u, v215, *((AudioUnitParameterValue *)&v462 + v215), 0);
                              ++v215;
                            }
                            while (v215 != 3);
                            v203 = v446;
                            *(void *)&v468.mSampleTime = v446;
                            v468.mHostTime = (UInt64)v448;
                            *(void *)&v469.mNumberBuffers = v446;
                            *(void *)&v469.mBuffers[0].mNumberChannels = v448;
                            AudioUnitRenderActionFlags v458 = 512;
                            long long v216 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&v473.mRateScalar = v216;
                            long long v217 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&v473.mSMPTETime.mHours = v217;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 382), &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                            uint64_t v218 = *((unsigned int *)v3 + 127);
                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                            {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v218, v203, &v473);
                              uint64_t v218 = *((unsigned int *)v3 + 127);
                              int v166 = v444;
                              BOOL v167 = v445;
                              int v170 = v442;
                              BOOL v169 = v443;
                              if (*((unsigned char *)v3 + 15961)) {
                                goto LABEL_490;
                              }
                            }
                            else
                            {
                              int v166 = v444;
                              BOOL v167 = v445;
                              int v170 = v442;
                              BOOL v169 = v443;
                            }
                            if (!*((unsigned char *)v3 + 15962))
                            {
LABEL_491:
                              uint64_t v208 = *((void *)v3 + 583);
                              goto LABEL_492;
                            }
LABEL_490:
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v218, v448, &v473);
                            goto LABEL_491;
                          }
                          v446 = (AudioBufferList *)(&v436 - 8);
                          int v442 = v170;
                          BOOL v443 = v169;
                          int v444 = v166;
                          BOOL v445 = v167;
                          uint64_t v211 = 0;
                          inInputBufferLists = (AudioBufferList *)*((void *)v3 + 524);
                          LODWORD(v475) = *((_DWORD *)v3 + 1051);
                          v472.realp = (float *)*((void *)v3 + 526);
                          LODWORD(v472.imagp) = *((_DWORD *)v3 + 1055);
                          v466 = (const AudioBufferList *)*((void *)v3 + 528);
                          int v467 = *((_DWORD *)v3 + 1059);
                          uint64_t v464 = *((void *)v3 + 530);
                          int v465 = *((_DWORD *)v3 + 1063);
                          uint64_t v462 = *((void *)v3 + 532);
                          int v463 = *((_DWORD *)v3 + 1067);
                          do
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 9u, 4u, v211, *((AudioUnitParameterValue *)&inInputBufferLists + v211), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xAu, 4u, v211, *((AudioUnitParameterValue *)&v472.realp + v211), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xBu, 4u, v211, *((AudioUnitParameterValue *)&v466 + v211), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xCu, 4u, v211, *((AudioUnitParameterValue *)&v464 + v211), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xDu, 4u, v211, *((AudioUnitParameterValue *)&v462 + v211), 0);
                            ++v211;
                          }
                          while (v211 != 3);
                          v203 = v446;
                          *(void *)&v468.mSampleTime = v446;
                          v468.mHostTime = (UInt64)v448;
                          *(void *)&v469.mNumberBuffers = v446;
                          *(void *)&v469.mBuffers[0].mNumberChannels = v448;
                          AudioUnitRenderActionFlags v458 = 512;
                          long long v212 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v473.mRateScalar = v212;
                          long long v213 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v473.mSMPTETime.mHours = v213;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v458, &v473, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v468, 2u, (AudioBufferList **)&v469);
                          uint64_t v214 = *((unsigned int *)v3 + 127);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v214, v203, &v473);
                            uint64_t v214 = *((unsigned int *)v3 + 127);
                            int v166 = v444;
                            BOOL v167 = v445;
                            int v170 = v442;
                            BOOL v169 = v443;
                            if (*((unsigned char *)v3 + 15961)) {
                              goto LABEL_477;
                            }
                          }
                          else
                          {
                            int v166 = v444;
                            BOOL v167 = v445;
                            int v170 = v442;
                            BOOL v169 = v443;
                          }
                          if (!*((unsigned char *)v3 + 15962))
                          {
LABEL_478:
                            uint64_t v208 = *((void *)v3 + 583);
                            goto LABEL_479;
                          }
LABEL_477:
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v214, v448, &v473);
                          goto LABEL_478;
                        }
                        if ((v145 & 0x100000000) == 0 || (*((unsigned char *)v3 + 4684) & 1) == 0 || !*((void *)v3 + 379)) {
                          goto LABEL_456;
                        }
                        memcpy(*(void **)(*((void *)v3 + 435) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * *((unsigned int *)v3 + 127));
                        memcpy(*(void **)(*((void *)v3 + 435) + 32), *(const void **)(*((void *)v3 + 507) + 16), 8 * *((unsigned int *)v3 + 127));
                        v466 = (const AudioBufferList *)*((void *)v3 + 435);
                        v191 = (const AudioBufferList *)*((void *)v3 + 434);
                        inInputBufferLists = (AudioBufferList *)*((void *)v3 + 430);
                        v475 = v191;
                        long long v192 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&v473.mRateScalar = v192;
                        long long v193 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&v473.mSMPTETime.mHours = v193;
                        uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v458, &v473, *((_DWORD *)v3 + 127), 1u, &v466, 2u, &inInputBufferLists);
                        uint64_t v194 = *((unsigned int *)v3 + 127);
                        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                        {
                          uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v194, inInputBufferLists, &v473);
                          uint64_t v194 = *((unsigned int *)v3 + 127);
                          v195 = v475;
                          if (*((unsigned char *)v3 + 15961)) {
                            goto LABEL_441;
                          }
                        }
                        else
                        {
                          v195 = v475;
                        }
                        if (!*((unsigned char *)v3 + 15962))
                        {
LABEL_442:
                          if ((*((unsigned char *)v3 + 4668) & 2) == 0
                            || (*((unsigned char *)v3 + 4684) & 2) == 0
                            || !*((void *)v3 + 380))
                          {
                            goto LABEL_456;
                          }
                          memcpy(*(void **)(*((void *)v3 + 436) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((void *)v3 + 431) + 16), *(const void **)(*((void *)v3 + 432) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          LODWORD(v464) = 1092616192;
                          uint64_t v196 = *((void *)v3 + 434);
                          *(void *)&v469.mNumberBuffers = *((void *)v3 + 430);
                          *(void *)&v469.mBuffers[0].mNumberChannels = v196;
                          v197 = (AudioBufferList *)*((void *)v3 + 507);
                          v469.mBuffers[0].mData = (void *)*((void *)v3 + 436);
                          v470 = v197;
                          uint64_t v471 = *((void *)v3 + 431);
                          v198 = (float *)*((void *)v3 + 432);
                          AudioUnitParameterValue v199 = 10.0;
                          v472.realp = (float *)*((void *)v3 + 429);
                          v472.imagp = v198;
                          if (*((unsigned char *)v3 + 4671) & 1) != 0 && (*((unsigned char *)v3 + 4687))
                          {
                            v200 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                            if (v200)
                            {
                              AudioUnitGetParameter(v200, 9u, 0, 0, (AudioUnitParameterValue *)&v464);
                              AudioUnitParameterValue v199 = *(float *)&v464;
                            }
                          }
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 0, 0, v199, 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                          long long v201 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v468.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v468.mRateScalar = v201;
                          long long v202 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v468.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v468.mSMPTETime.mHours = v202;
                          uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v458, &v468, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v469, 2u, (AudioBufferList **)&v472);
                          uint64_t v186 = *((unsigned int *)v3 + 127);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v186, (const AudioBufferList *)v472.realp, &v468);
                            uint64_t v186 = *((unsigned int *)v3 + 127);
                            imagp = v472.imagp;
                            if (*((unsigned char *)v3 + 15961)) {
                              goto LABEL_455;
                            }
                          }
                          else
                          {
                            imagp = v472.imagp;
                          }
                          if (!*((unsigned char *)v3 + 15962)) {
                            goto LABEL_456;
                          }
LABEL_455:
                          v188 = &v468;
                          uint64_t v189 = (uint64_t)v3;
                          unsigned int v190 = 27;
                          goto LABEL_428;
                        }
LABEL_441:
                        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v194, v195, &v473);
                        goto LABEL_442;
                      }
                    }
                    else
                    {
                      v173 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
                    }
                    float v174 = 2.0;
                    goto LABEL_407;
                  }
                  float v157 = *((float *)v3 + 1057);
                  if (v157 == 0.0)
                  {
                    v158 = (VPTimeFreqConverter *)*((void *)v3 + 2114);
                    v159 = *(const float **)(*((void *)v3 + 425) + 16);
                    UInt64 v160 = *(void *)(*((void *)v3 + 436) + 16) + 4 * *((unsigned int *)v3 + 127);
                    v473.mSampleTime = *(Float64 *)(*((void *)v3 + 436) + 16);
                    v473.mHostTime = v160;
                    if (v158)
                    {
                      VPTimeFreqConverter::Analyze(v158, v159, (DSPSplitComplex *)&v473);
                      float v157 = *((float *)v3 + 1057);
                      uint64_t Parameter = *((void *)v3 + 391);
                    }
                  }
                  AudioUnitSetParameter((AudioUnit)Parameter, 6u, 0, 0, v157, 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1061), 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1065), 0);
                  memcpy(*(void **)(*((void *)v3 + 434) + 16), *(const void **)(*((void *)v3 + 505) + 32), *((unsigned int *)v3 + 1073));
                  UInt64 v161 = *((void *)v3 + 434);
                  v468.mSampleTime = *((Float64 *)v3 + 506);
                  v468.mHostTime = v161;
                  v468.mRateScalar = *((Float64 *)v3 + 512);
                  memset(&v468.mWordClockTime, 0, 24);
                  *(void *)&v469.mNumberBuffers = *((void *)v3 + 432);
                  *(void *)&v469.mBuffers[0].mNumberChannels = 0;
                  v469.mBuffers[0].mData = (void *)*((void *)v3 + 501);
                  long long v162 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v473.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v473.mRateScalar = v162;
                  long long v163 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v473.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v473.mSMPTETime.mHours = v163;
                  AudioUnitRenderActionFlags v458 = 512;
                  uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v458, &v473, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v468, 3u, (AudioBufferList **)&v469);
                  uint64_t v164 = *((unsigned int *)v3 + 127);
                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                  {
                    uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v164, *((const AudioBufferList **)v3 + 432), &v473);
                    uint64_t v164 = *((unsigned int *)v3 + 127);
                    v165 = (const AudioBufferList *)*((void *)v3 + 501);
                    if (*((unsigned char *)v3 + 15961)) {
                      goto LABEL_373;
                    }
                  }
                  else
                  {
                    v165 = (const AudioBufferList *)*((void *)v3 + 501);
                  }
                  if (!*((unsigned char *)v3 + 15962))
                  {
LABEL_374:
                    uint64_t v145 = *((void *)v3 + 583);
                    goto LABEL_375;
                  }
LABEL_373:
                  uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v164, v165, &v473);
                  goto LABEL_374;
                }
LABEL_892:
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            else
            {
              v117 = (const AudioBufferList *)*((void *)v3 + 422);
            }
            if (!*((unsigned char *)v3 + 15962)) {
              goto LABEL_268;
            }
            goto LABEL_267;
          }
LABEL_207:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v97, (const AudioBufferList *)v98, &buf);
          uint64_t v98 = *((void *)v3 + 2154);
          uint64_t v97 = *((unsigned int *)v3 + 127);
          goto LABEL_208;
        }
        uint64_t v90 = *((void *)v3 + 2115);
        if ((unint64_t)(*((void *)v3 + 2116) - v90) <= 0x20) {
          goto LABEL_892;
        }
        ECApplicator::apply(*(AudioUnitParameterID **)(v90 + 32), &buf, v53, (BOOL *)&v457, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
        uint64_t v91 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v91, *((const AudioBufferList **)v3 + 136), &buf);
          uint64_t v91 = *((unsigned int *)v3 + 127);
          uint64_t v92 = *((void *)v3 + 423);
          if (*((unsigned char *)v3 + 15961)) {
            goto LABEL_191;
          }
        }
        else
        {
          uint64_t v92 = *((void *)v3 + 423);
        }
        if (!*((unsigned char *)v3 + 15962))
        {
LABEL_192:
          v93 = (VPTimeFreqConverter *)*((void *)v3 + 2147);
          v94 = *(const float **)(v92 + 16);
          uint64_t v95 = *((void *)v3 + 508);
          v473.mSampleTime = *(Float64 *)(v95 + 16);
          v473.mHostTime = *(void *)&v473.mSampleTime + 4 * v91;
          if (v93)
          {
            VPTimeFreqConverter::Analyze(v93, v94, (DSPSplitComplex *)&v473);
            uint64_t v91 = *((unsigned int *)v3 + 127);
            uint64_t v95 = *((void *)v3 + 508);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v91, (const AudioBufferList *)v95, &buf);
          }
          goto LABEL_197;
        }
LABEL_191:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v91, (const AudioBufferList *)v92, &buf);
        uint64_t v92 = *((void *)v3 + 423);
        uint64_t v91 = *((unsigned int *)v3 + 127);
        goto LABEL_192;
      }
      unsigned int v52 = *((_DWORD *)v3 + 3114);
      if (v51 != 3)
      {
        if (v52 == 2)
        {
          unsigned int v53 = 0;
          *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v50 + 40);
          *((_OWORD *)v3 + 1064) = *(_OWORD *)(v50 + 56);
          unsigned int v54 = 1;
          unsigned int v55 = 3;
          unsigned int v56 = 2;
LABEL_118:
          uint64_t v57 = v50 + 8;
          *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v57 + 16 * v53);
          *((_OWORD *)v3 + 1061) = *(_OWORD *)(v57 + 16 * v54);
          goto LABEL_119;
        }
        unsigned int v52 = *((_DWORD *)v3 + 3114);
        if (v52 <= 0xC && ((0x1028u >> v52) & 1) != 0)
        {
          unsigned int v53 = 0;
          *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v50 + 24);
          *((_OWORD *)v3 + 1064) = *(_OWORD *)(v50 + 40);
          unsigned int v54 = 3;
          unsigned int v55 = 2;
          unsigned int v56 = 1;
          goto LABEL_118;
        }
      }
      if (v52 == 9)
      {
        unsigned int v53 = 0;
        *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v50 + 56);
        *((_OWORD *)v3 + 1064) = *(_OWORD *)(v50 + 40);
        unsigned int v54 = 1;
        unsigned int v55 = 2;
        unsigned int v56 = 3;
      }
      else
      {
        unsigned int v56 = 0;
        unsigned int v55 = 0;
        unsigned int v53 = 1;
        unsigned int v54 = 2;
      }
      goto LABEL_118;
    }
  }
  unsigned int v12 = 0;
  while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
  {
    if (++v12 == 32)
    {
      unsigned int v12 = 33;
      break;
    }
  }
  v13 = (unsigned int *)*((void *)v3 + 135);
  if (v12 >= *v13)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned __int8 v16 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v8.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 56;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v12;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    uint64_t v19 = (int *)*((void *)v3 + 1578);
    if (v19 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v8/vpProcessUplink_v8.cpp", 56, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
    }
    v14 = *(void **)(*((void *)v3 + 136) + 16);
    v15 = (const void **)*((void *)v3 + 135);
  }
  else
  {
    v14 = *(void **)(*((void *)v3 + 136) + 16);
    v15 = (const void **)&v13[4 * v12];
  }
  memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4670) & 0x40) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0)
    {
      int v20 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
      if (v20)
      {
        UInt64 v21 = *((void *)v3 + 500);
        v473.mSampleTime = *((Float64 *)v3 + 136);
        v473.mHostTime = v21;
        UInt64 v22 = *((void *)v3 + 502);
        v468.mSampleTime = v473.mSampleTime;
        v468.mHostTime = v22;
        long long v23 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v23;
        long long v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v24;
        v469.mNumberBuffers = 512;
        AudioUnitProcessMultiple(v20, &v469.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v473, 2u, (AudioBufferList **)&v468);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        }
        if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v459);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v459, 0);
        }
      }
    }
  }
LABEL_809:
  v469.mNumberBuffers = 0;
  unsigned int v403 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  unsigned int v405 = v403;
  if (!*((unsigned char *)v3 + 2080))
  {
    if ((v403 & 1) == 0) {
      goto LABEL_830;
    }
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v404);
LABEL_818:
    uint64_t v407 = *((void *)v3 + 583);
    if ((v407 & 0x4000000000000000) != 0
      && (*((unsigned char *)v3 + 4687) & 0x40) != 0
      && (v408 = (OpaqueAudioComponentInstance *)*((void *)v3 + 409)) != 0)
    {
      AudioUnitParameterID v409 = 1936748646;
    }
    else
    {
      if ((v407 & 0x2000000000000000) == 0
        || (*((unsigned char *)v3 + 4687) & 0x20) == 0
        || (v408 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408)) == 0)
      {
        *(AudioUnitParameterValue *)&v469.mNumberBuffers = v459;
        goto LABEL_828;
      }
      AudioUnitParameterID v409 = 2;
    }
    AudioUnitGetParameter(v408, v409, 0, 0, (AudioUnitParameterValue *)&v469.mNumberBuffers);
    goto LABEL_828;
  }
  if (*((void *)v3 + 2062)) {
    char v406 = 1;
  }
  else {
    char v406 = v403;
  }
  if (v406)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v404);
    if (v405) {
      goto LABEL_818;
    }
  }
LABEL_828:
  if (*((unsigned char *)v3 + 2080))
  {
    bzero(*(void **)(*((void *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v469.mNumberBuffers = 0;
    goto LABEL_831;
  }
LABEL_830:
  *((_DWORD *)v3 + 4126) = 0;
LABEL_831:
  if ((*((unsigned char *)v3 + 8897) & 0x80) != 0 && (*((unsigned char *)v3 + 8905) & 0x80) != 0)
  {
    v410 = (OpaqueAudioComponentInstance *)*((void *)v3 + 453);
    unsigned int v411 = v410 ? v405 : 0;
    if (v411 == 1) {
      AudioUnitSetParameter(v410, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v469.mNumberBuffers, 0);
    }
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  if ((*((unsigned char *)v3 + 4671) & 0x10) != 0 && (*((unsigned char *)v3 + 4687) & 0x10) != 0)
  {
    v412 = (OpaqueAudioComponentInstance *)*((void *)v3 + 407);
    if (v412)
    {
      v473.mSampleTime = *((Float64 *)v3 + 136);
      v468.mSampleTime = v473.mSampleTime;
      LODWORD(inInputBufferLists) = 512;
      long long v413 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v413;
      long long v414 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v414;
      AudioUnitProcessMultiple(v412, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v473, 1u, (AudioBufferList **)&v468);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4672) & 0x80) != 0 && (*((unsigned char *)v3 + 4688) & 0x80) != 0)
    {
      v415 = (OpaqueAudioComponentInstance *)*((void *)v3 + 418);
      if (v415)
      {
        v473.mSampleTime = *((Float64 *)v3 + 136);
        v468.mSampleTime = v473.mSampleTime;
        LODWORD(inInputBufferLists) = 512;
        long long v416 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v416;
        long long v417 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v417;
        AudioUnitProcessMultiple(v415, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v473, 1u, (AudioBufferList **)&v468);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        }
      }
    }
  }
  uint64_t v418 = *((void *)v3 + 584);
  if (v418 & 1) != 0 && (*((unsigned char *)v3 + 4688))
  {
    v419 = (OpaqueAudioComponentInstance *)*((void *)v3 + 411);
    if (v419)
    {
      long long v420 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v420;
      long long v421 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v421;
      LODWORD(v473.mSampleTime) = 512;
      AudioUnitProcess(v419, (AudioUnitRenderActionFlags *)&v473, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
      uint64_t v418 = *((void *)v3 + 584);
    }
  }
  if ((v418 & 2) != 0 && (*((unsigned char *)v3 + 4688) & 2) != 0)
  {
    v422 = (OpaqueAudioComponentInstance *)*((void *)v3 + 412);
    if (v422)
    {
      long long v423 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v423;
      long long v424 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v424;
      LODWORD(v473.mSampleTime) = 512;
      AudioUnitProcess(v422, (AudioUnitRenderActionFlags *)&v473, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      uint64_t v418 = *((void *)v3 + 584);
    }
  }
  if ((v418 & 4) != 0
    && (*((unsigned char *)v3 + 4688) & 4) != 0
    && (v425 = (OpaqueAudioComponentInstance *)*((void *)v3 + 413)) != 0)
  {
    long long v426 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v426;
    long long v427 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v427;
    LODWORD(v473.mSampleTime) = 512;
    AudioUnitProcess(v425, (AudioUnitRenderActionFlags *)&v473, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
    if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0 && *((void *)v3 + 408))
    {
      LODWORD(v468.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 1u, 0, 0, (AudioUnitParameterValue *)&v468);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v468.mSampleTime, 0);
    }
    LODWORD(v468.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v468);
    int mSampleTime_low = LODWORD(v468.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v468.mSampleTime)
    {
      if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
      {
        v429 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
        if (v429)
        {
          AudioUnitSetParameter(v429, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v468.mSampleTime, 0);
          int mSampleTime_low = LODWORD(v468.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((void *)v3 + 583) & 0x8000000000000000) != 0 {
         && ((*((void *)v3 + 585) & 0x8000000000000000) != 0 || *((unsigned char *)v3 + 472)))
  }
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1093) / 20.0);
    vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
    }
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  if ((*((unsigned char *)v3 + 4672) & 0x10) != 0 && (*((unsigned char *)v3 + 4688) & 0x10) != 0)
  {
    v430 = (OpaqueAudioComponentInstance *)*((void *)v3 + 415);
    if (v430)
    {
      long long v431 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v431;
      long long v432 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v432;
      LODWORD(v473.mSampleTime) = 512;
      unsigned __int8 v433 = atomic_load(gWirelessChargingMatIsAttached);
      AudioUnitSetParameter(v430, 5u, 0, 0, (float)(v433 & 1), 0);
      AudioUnitProcess(*((AudioUnit *)v3 + 415), (AudioUnitRenderActionFlags *)&v473, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    }
  }
  return 0;
}

void vp::v10::create(vp::v10 *this, const vp::Context *a2)
{
  if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.coreaudio", 19, 0x8000100u, 0)) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Could not construct");
}

void sub_1BB4FDAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
  {
    _Block_object_dispose(&a26, 8);
    MEMORY[0x1C185D370](v26, 0xA1C40069AE433);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *boost::container::flat_map<unsigned int,std::unique_ptr<vp::Service>,std::less<unsigned int>,boost::container::small_vector<std::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<std::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_subscript(uint64_t a1, unsigned int a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = *(unsigned int **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = *(unsigned int **)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    do
    {
      if (v8 != 1 && !v7) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v7) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v9 = v8 >> 1;
      v10 = &v7[4 * (v8 >> 1)];
      unsigned int v12 = *v10;
      v11 = v10 + 4;
      v8 += ~(v8 >> 1);
      if (v12 >= a2) {
        unint64_t v8 = v9;
      }
      else {
        uint64_t v7 = v11;
      }
    }
    while (v8);
  }
  v13 = (unsigned int *)(v3 + 16 * v4);
  if (v7 == v13)
  {
    unsigned int v43 = a2;
    uint64_t v44 = 0;
    if (v3 <= (unint64_t)v7)
    {
      long long v40 = 0;
      v15 = v13;
      goto LABEL_27;
    }
LABEL_59:
    long long v35 = "this->priv_in_range_or_end(hint)";
    int v36 = 879;
    long long v37 = "flat_tree.hpp";
    v38 = "insert_unique";
    goto LABEL_64;
  }
  if (!v7) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if (*v7 > a2)
  {
    unsigned int v43 = a2;
    uint64_t v44 = 0;
    if (v3 <= (unint64_t)v7 && v7 <= v13)
    {
      long long v40 = 0;
      v15 = v7;
      if (*v7 <= a2)
      {
        unint64_t v41 = v13;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(a1, (uint64_t)v7, &v41, &v43, &v40))goto LABEL_49; {
LABEL_30:
        }
        uint64_t v19 = v40;
        unint64_t v20 = *(void *)(a1 + 8);
        if (v20 > (unint64_t)v40) {
          goto LABEL_61;
        }
        unint64_t v21 = *(void *)(a1 + 16);
        if (!v20 && v21) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        UInt64 v22 = (unsigned int *)(v20 + 16 * v21);
        if (v40 > v22)
        {
LABEL_61:
          long long v35 = "this->priv_in_range_or_end(position)";
          int v36 = 1862;
          long long v37 = "vector.hpp";
          v38 = "emplace";
        }
        else
        {
          unint64_t v23 = *(void *)(a1 + 24);
          if (v23 >= v21)
          {
            if (v23 == v21)
            {
              boost::container::vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>>(&v39, (char *)a1, (uint64_t)v40, (uint64_t)&v43);
            }
            else
            {
              if (v22 == v40)
              {
                *long long v40 = v43;
                uint64_t v32 = v44;
                uint64_t v44 = 0;
                *(void *)(v20 + 16 * v21 + 8) = v32;
                *(void *)(a1 + 16) = v21 + 1;
              }
              else
              {
                long long v24 = v22 - 4;
                *UInt64 v22 = *(v22 - 4);
                uint64_t v25 = *((void *)v22 - 1);
                *((void *)v22 - 1) = 0;
                *(void *)(v20 + 16 * v21 + 8) = v25;
                *(void *)(a1 + 16) = v21 + 1;
                if (v22 - 4 != v19)
                {
                  uint64_t v26 = v22 - 4;
                  do
                  {
                    unsigned int v27 = *(v26 - 4);
                    v26 -= 4;
                    unsigned int *v24 = v27;
                    uint64_t v28 = *((void *)v24 - 1);
                    *((void *)v24 - 1) = 0;
                    uint64_t v29 = *((void *)v24 + 1);
                    *((void *)v24 + 1) = v28;
                    if (v29) {
                      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
                    }
                    long long v24 = v26;
                  }
                  while (v26 != v19);
                }
                *uint64_t v19 = v43;
                uint64_t v30 = v44;
                uint64_t v44 = 0;
                uint64_t v31 = *((void *)v19 + 1);
                *((void *)v19 + 1) = v30;
                if (v31) {
                  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
                }
              }
              long long v39 = v19;
            }
            goto LABEL_52;
          }
          long long v35 = "this->m_holder.capacity() >= this->m_holder.m_size";
          int v36 = 2821;
          long long v37 = "vector.hpp";
          v38 = "priv_insert_forward_range";
        }
LABEL_64:
        __assert_rtn(v38, v37, v36, v35);
      }
LABEL_27:
      long long v40 = v7;
      if (v15 != (unsigned int *)v3)
      {
        if (!v15) {
          __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
        }
        unsigned int v17 = *(v15 - 4);
        unsigned __int8 v16 = v15 - 4;
        BOOL v18 = v17 > a2;
        if (v17 >= a2)
        {
          if (!v18)
          {
            long long v40 = v16;
            goto LABEL_49;
          }
          long long v42 = v16;
          if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(a1, v3, &v42, &v43, &v40))
          {
LABEL_49:
            if (!*(void *)(a1 + 8) && v40) {
              __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
            }
            long long v39 = v40;
LABEL_52:
            uint64_t v33 = v44;
            uint64_t v44 = 0;
            if (v33) {
              (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
            }
            uint64_t v7 = v39;
            if (!v39) {
              __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
            }
            return v7 + 2;
          }
        }
      }
      goto LABEL_30;
    }
    goto LABEL_59;
  }
  return v7 + 2;
}

void sub_1BB4FE07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>>(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (v4 != *((void *)a2 + 2)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v4 == 0xFFFFFFFFFFFFFFFLL) {
    goto LABEL_30;
  }
  if (v4 >> 61 > 4) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 8 * v4;
  }
  if (v4 >> 61) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = 8 * v4 / 5;
  }
  if (v7 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v5 = v7;
  }
  unint64_t v8 = v4 + 1 > v5 ? v4 + 1 : v5;
  if (v8 >> 60) {
LABEL_30:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v13 = *((void *)a2 + 1);
  os_log_t result = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)a2 + 16))(*(void *)a2, 16 * v8, 8);
  v15 = result;
  uint64_t v16 = *((void *)a2 + 1);
  uint64_t v17 = *((void *)a2 + 2);
  uint64_t v18 = v16 + 16 * v17;
  uint64_t v19 = result;
  if (v16 != a3)
  {
    uint64_t v20 = *((void *)a2 + 1);
    uint64_t v19 = result;
    do
    {
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      uint64_t v21 = *(void *)(v20 + 8);
      *(void *)(v20 + 8) = 0;
      v19[1] = v21;
      v19 += 2;
      v20 += 16;
    }
    while (v20 != a3);
  }
  *(_DWORD *)uint64_t v19 = *(_DWORD *)a4;
  uint64_t v22 = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  v19[1] = v22;
  if (v18 != a3)
  {
    unint64_t v23 = v19 + 3;
    uint64_t v24 = a3;
    do
    {
      *((_DWORD *)v23 - 2) = *(_DWORD *)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      *(void *)(v24 + 8) = 0;
      void *v23 = v25;
      v23 += 2;
      v24 += 16;
    }
    while (v24 != v18);
  }
  if (v16)
  {
    if (v17)
    {
      uint64_t v26 = (uint64_t *)(v16 + 8);
      do
      {
        uint64_t v27 = *v26;
        *uint64_t v26 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        v26 += 2;
        --v17;
      }
      while (v17);
    }
    os_log_t result = boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(a2, *((void **)a2 + 1));
  }
  uint64_t v28 = *((void *)a2 + 2) + 1;
  *((void *)a2 + 1) = v15;
  *((void *)a2 + 2) = v28;
  *((void *)a2 + 3) = v8;
  *a1 = (char *)v15 + a3 - v13;
  return result;
}

void *boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(void *result, void *a2)
{
  if (result + 4 != a2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)*result + 24))(*result);
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  v10 = *a3;
  uint64_t v11 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>*,true>,unsigned int>(&v11, &v10, a4, &v12);
  unint64_t v8 = v12;
  *a5 = v12;
  if (v8 == *a3) {
    return 1;
  }
  if (!v8) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v8;
}

void vp::services::Telephony_Utility_Impl::get_is_emergency_changed_cf_notification_key(applesauce::CF::StringRef *a1@<X8>)
{
  id v3 = (id)*MEMORY[0x1E4FADDC0];
  unint64_t v4 = v3;
  id v5 = v3;
  if (v3)
  {
    CFRetain(v3);
    unint64_t v4 = v5;
  }
  applesauce::CF::StringRef::StringRef(a1, v4);
}

void sub_1BB4FE44C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __clang_call_terminate(a1);
}

uint64_t vp::services::Telephony_Utility_Impl::is_in_emergency_call(vp::services::Telephony_Utility_Impl *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  v1 = objc_msgSend(MEMORY[0x1E4FADA98], "sharedInstance", 0);
  v2 = [v1 currentAudioAndVideoCalls];

  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        if ([*(id *)(*((void *)&v7 + 1) + 8 * i) isEmergency])
        {
          uint64_t v3 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

void sub_1BB4FE578(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void vp::services::Telephony_Utility_Impl::~Telephony_Utility_Impl(vp::services::Telephony_Utility_Impl *this)
{
}

uint64_t vp::services::Legacy_Wireless_Charging_Detector_Impl::is_wireless_charging_mat_attached(vp::services::Legacy_Wireless_Charging_Detector_Impl *this)
{
  unsigned __int8 v1 = atomic_load(gWirelessChargingMatIsAttached);
  return v1 & 1;
}

void vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(vp::services::Legacy_Wireless_Charging_Detector_Impl *this)
{
  vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(this);

  JUMPOUT(0x1C185D370);
}

{
  StopVPWirelessChargingMatStateListener();
}

{
  vp::services::Legacy_Wireless_Charging_Detector_Impl::~Legacy_Wireless_Charging_Detector_Impl(this);
}

void sub_1BB4FE620(void *a1)
{
}

uint64_t vp::services::User_Defaults_Impl::synchronize(vp::services::User_Defaults_Impl *this, CFStringRef *a2)
{
  return CFPreferencesAppSynchronize(*a2);
}

void vp::services::User_Defaults_Impl::set_object(vp::services::User_Defaults_Impl *this, CFStringRef *a2, CFStringRef *a3, CFPropertyListRef *a4)
{
}

CFPropertyListRef vp::services::User_Defaults_Impl::get_object@<X0>(CFStringRef *a1@<X1>, CFStringRef *a2@<X2>, void *a3@<X8>)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(*a2, *a1);
  *a3 = result;
  return result;
}

void vp::services::User_Defaults_Impl::get_all_keys(CFStringRef *a1@<X1>, void *a2@<X8>)
{
  CFArrayRef v4 = CFPreferencesCopyKeyList(*a1, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFArrayRef v5 = v4;
  if (!v4) {
    goto LABEL_26;
  }
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    v34[0] = 0;
    LOBYTE(v35) = 0;
LABEL_30:
    *(_OWORD *)a2 = v28;
    a2[2] = v29;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    goto LABEL_31;
  }
  int Count = CFArrayGetCount(v5);
  long long v32 = 0uLL;
  unint64_t v33 = 0;
  std::vector<applesauce::CF::StringRef>::reserve(&v32, Count);
  if (Count >= 1)
  {
    CFIndex v9 = 0;
    uint64_t v10 = Count;
    while (1)
    {
      ValueAtIndex = (void **)CFArrayGetValueAtIndex(v5, v9);
      uint64_t v12 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFRetain(ValueAtIndex);
      CFTypeID v13 = CFGetTypeID(v12);
      if (v13 != CFStringGetTypeID())
      {
        CFRelease(v12);
        break;
      }
      uint64_t v30 = v12;
      char v31 = 1;
      v14 = (void *)*((void *)&v32 + 1);
      if (*((void *)&v32 + 1) >= v33)
      {
        v15 = (void *)v32;
        uint64_t v16 = (uint64_t)(*((void *)&v32 + 1) - v32) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v33 - v32;
        if ((uint64_t)(v33 - v32) >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        int v36 = &v33;
        if (v19)
        {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v19);
          v14 = (void *)*((void *)&v32 + 1);
          v15 = (void *)v32;
          uint64_t v12 = v30;
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (void ***)(v19 + 8 * v16);
        unint64_t v22 = v19 + 8 * v20;
        unint64_t v35 = v22;
        *uint64_t v21 = v12;
        unint64_t v23 = v21 + 1;
        uint64_t v30 = 0;
        *(void *)&v34[16] = v21 + 1;
        if (v14 != v15)
        {
          do
          {
            uint64_t v24 = (void **)*--v14;
            *--uint64_t v21 = v24;
            void *v14 = 0;
          }
          while (v14 != v15);
          unint64_t v23 = *(void **)&v34[16];
          unint64_t v22 = v35;
        }
        long long v25 = v32;
        *(void *)&long long v32 = v21;
        *((void *)&v32 + 1) = v23;
        *(_OWORD *)&v34[8] = v25;
        unint64_t v26 = v33;
        unint64_t v33 = v22;
        unint64_t v35 = v26;
        *(void *)uint64_t v34 = v25;
        std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)v34);
        *((void *)&v32 + 1) = v23;
      }
      else
      {
        **((void **)&v32 + 1) = v12;
        uint64_t v30 = 0;
        *((void *)&v32 + 1) = v14 + 1;
      }
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
      if (++v9 == v10) {
        goto LABEL_24;
      }
    }
    LOBYTE(v30) = 0;
    char v31 = 0;
    v34[0] = 0;
    LOBYTE(v35) = 0;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
    uint64_t v30 = (void **)&v32;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v30);
    goto LABEL_30;
  }
LABEL_24:
  *(_OWORD *)uint64_t v34 = v32;
  *(void *)&v34[16] = v33;
  unint64_t v33 = 0;
  long long v32 = 0uLL;
  LOBYTE(v35) = 1;
  uint64_t v27 = *(CFTypeRef **)&v34[8];
  uint64_t v30 = (void **)&v32;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v30);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<applesauce::CF::StringRef>::__init_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>(a2, *(CFTypeRef **)v34, v27, ((uint64_t)v27 - *(void *)v34) >> 3);
  *(void *)&long long v32 = v34;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
LABEL_31:
  *(void *)uint64_t v34 = &v28;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  CFRelease(v5);
}

CFTypeRef vp::services::User_Defaults_Impl::get_default_app_id@<X0>(CFTypeRef this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    this = CFRetain(*((CFTypeRef *)this + 2));
  }
  *a2 = v3;
  return this;
}

void vp::services::User_Defaults_Impl::~User_Defaults_Impl(vp::services::User_Defaults_Impl *this)
{
  unsigned __int8 v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C185D370);
}

{
  const void *v1;

  unsigned __int8 v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL vp::services::Legacy_Smart_Cover_Detector_Impl::is_smart_cover_attached(vp::services::Legacy_Smart_Cover_Detector_Impl *this)
{
  BOOL v4 = 0;
  int IsAttached = GetVPSmartCoverIsAttached(&v4);
  return v4 && IsAttached == 0;
}

void vp::services::Legacy_Smart_Cover_Detector_Impl::~Legacy_Smart_Cover_Detector_Impl(vp::services::Legacy_Smart_Cover_Detector_Impl *this)
{
}

void vp::services::Power_Log_Impl::log_speaker_amp_power(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v35 = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    float v4 = *(float *)&a2;
    CFRetain(@"Avg Watts Measured");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, @"Avg Watts Measured");
    float valuePtr = v4;
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFNumberRef v34 = v5;
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFTypeID v6 = (vp *)std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(&v35, cf, (const void **)&v34);
    long long v7 = vp::get_log(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      uint64_t v10 = v33;
      uint64_t v11 = v32;
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if ((v10 & 0x80u) == 0) {
          uint64_t v13 = v10;
        }
        else {
          uint64_t v13 = v11;
        }
        p_p = __p;
        if ((v33 & 0x80u) == 0) {
          p_p = &__p;
        }
        if (v13) {
          v15 = " ";
        }
        else {
          v15 = "";
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&buf[4] = p_p;
        __int16 v40 = 2080;
        unint64_t v41 = v15;
        __int16 v42 = 2048;
        double v43 = v4;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%s%saverage measured power is %f watts", buf, 0x20u);
      }

      if ((char)v33 < 0) {
        operator delete(__p);
      }
    }
    CFRelease(v5);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if ((a3 & 0xFF00000000) != 0)
  {
    CFRetain(@"Avg Watts Modelled");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, @"Avg Watts Modelled");
    float valuePtr = *(float *)&a3;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFNumberRef v34 = v16;
    if (!v16)
    {
      uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
    }
    unint64_t v17 = (vp *)std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(&v35, cf, (const void **)&v34);
    uint64_t v18 = vp::get_log(v17);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

    if (v19)
    {
      uint64_t v20 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      uint64_t v21 = v33;
      uint64_t v22 = v32;
      unint64_t v23 = vp::get_log(v20);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if ((v21 & 0x80u) == 0) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = v22;
        }
        long long v25 = __p;
        if ((v33 & 0x80u) == 0) {
          long long v25 = &__p;
        }
        if (v24) {
          unint64_t v26 = " ";
        }
        else {
          unint64_t v26 = "";
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&buf[4] = v25;
        __int16 v40 = 2080;
        unint64_t v41 = v26;
        __int16 v42 = 2048;
        double v43 = *(float *)&a3;
        _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%s%saverage modelled power is %f watts", buf, 0x20u);
      }

      if ((char)v33 < 0) {
        operator delete(__p);
      }
    }
    CFRelease(v16);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (v35 != v36)
  {
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(&v35);
    *(void *)AudioTimeStamp buf = CFDictionaryRef;
    PLLogRegisteredEvent();
    if (CFDictionaryRef) {
      CFRelease(CFDictionaryRef);
    }
  }
  *(void *)AudioTimeStamp buf = &v35;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BB4FEF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void **buf,int a26,__int16 a27,uint64_t a28,__int16 a29,uint64_t a30)
{
  if (a2)
  {
    applesauce::CF::StringRef::~StringRef((const void **)&a9);
    AudioTimeStamp buf = &__p;
    std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&buf);
    char v31 = (vp *)__cxa_begin_catch(exception_object);
    uint64_t v32 = vp::get_log(v31);
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);

    if (v33)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Power_Log_Impl]", 28, &__p);
      unint64_t v35 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a23 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB4FEE70);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(void *a1, CFTypeRef *a2, const void **a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v12 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - *a1;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v21 = v6;
    if (v15) {
      CFNumberRef v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v6, v15);
    }
    else {
      CFNumberRef v16 = 0;
    }
    unint64_t v17 = v16;
    uint64_t v18 = &v16[16 * v12];
    uint64_t v20 = &v16[16 * v15];
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(v18, *a2, a3);
    BOOL v19 = v18 + 16;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    unint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    uint64_t result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(*(void **)(v6 - 8), *a2, a3);
    unint64_t v11 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1BB4FF224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef const,applesauce::CF::NumberRef const>(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  uint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void vp::services::Power_Log_Impl::~Power_Log_Impl(vp::services::Power_Log_Impl *this)
{
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_preset_routeid_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_accommodationTypesByRouteUID";
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_preset_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_personalAudioAccommodationTypes";
}

void vp::services::Personal_Audio_Impl::get_personal_media_preset(id *a1@<X1>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  if (objc_opt_class())
  {
    float v4 = (NSString *)*a1;
    parse_route_uid(v4);
    id v10 = (id)objc_claimAutoreleasedReturnValue();

    CFNumberRef v5 = [MEMORY[0x1E4F89D50] sharedInstance];
    uint64_t v6 = [v5 personalMediaConfigurationForRouteUID:v10];
    unint64_t v7 = [v6 preset];

    id v8 = v7;
    unint64_t v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    applesauce::CF::DictionaryRef::DictionaryRef(a2, v9);
  }
  else
  {
    *(void *)a2 = 0;
  }
}

id parse_route_uid(NSString *a1)
{
  unsigned __int8 v1 = [(NSString *)a1 componentsSeparatedByString:@"-"];
  v2 = [v1 objectAtIndexedSubscript:0];

  return v2;
}

void sub_1BB4FF414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vp::services::Personal_Audio_Impl::get_personal_media_preset(applesauce::CF::DictionaryRef *a1@<X8>)
{
  if (objc_opt_class())
  {
    uint64_t v3 = [MEMORY[0x1E4F89D50] sharedInstance];
    id v8 = [v3 personalMediaConfiguration];

    float v4 = [v8 presetAdjustments];
    id v5 = (id)*MEMORY[0x1E4F89D58];
    id v6 = [v4 objectForKey:v5];
    unint64_t v7 = v6;
    if (v6) {
      CFRetain(v6);
    }
    applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);
  }
  else
  {
    *(void *)a1 = 0;
  }
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_enabled_routeid_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_personalMediaEnabledByRouteUID";
}

const char *vp::services::Personal_Audio_Impl::get_personal_media_enabled_darwin_notification_key(vp::services::Personal_Audio_Impl *this)
{
  return "_AXNotification_PersonalMediaEnabled";
}

unint64_t vp::services::Personal_Audio_Impl::is_personal_media_enabled(uint64_t a1, id *a2)
{
  if (!objc_opt_class()) {
    return 0;
  }
  uint64_t v3 = (NSString *)*a2;
  float v4 = parse_route_uid(v3);

  id v5 = [MEMORY[0x1E4F89D50] sharedInstance];
  int v6 = [v5 personalMediaEnabledForRouteUID:v4];

  if (v6)
  {
    unint64_t v7 = [MEMORY[0x1E4F89D50] sharedInstance];
    unint64_t v8 = ((unint64_t)[v7 accommodationTypesForRouteUID:v4] >> 1) & 1;
  }
  else
  {
    unint64_t v8 = 0;
  }

  return v8;
}

unint64_t vp::services::Personal_Audio_Impl::is_personal_media_enabled(vp::services::Personal_Audio_Impl *this)
{
  if (!objc_opt_class()) {
    return 0;
  }
  unsigned __int8 v1 = [MEMORY[0x1E4F89D50] sharedInstance];
  unint64_t v2 = [v1 personalMediaEnabled];

  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F89D50] sharedInstance];
    unint64_t v2 = ((unint64_t)[v3 personalAudioAccommodationTypes] >> 1) & 1;
  }
  return v2;
}

void vp::services::Personal_Audio_Impl::~Personal_Audio_Impl(vp::services::Personal_Audio_Impl *this)
{
}

uint64_t vp::services::Orientation_Impl::unregister_ui_orientation_listener(vp::services::Orientation_Impl *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = (vp *)CAUnregisterUIOrientation();
  int v2 = (int)v1;
  if (!v1) {
    return 1;
  }
  float v4 = vp::get_log(v1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
    unint64_t v7 = v14;
    unint64_t v8 = __p[1];
    unint64_t v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = v7;
      }
      else {
        unint64_t v10 = (unint64_t)v8;
      }
      if ((v14 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      CFNumberRef v16 = v11;
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 1024;
      int v20 = v2;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister UI orientation listener with status %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB4FF7FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB4FF7ECLL);
  }
  j___Unwind_Resume_122(a1);
}

void sub_1BB4FF80C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  j___Unwind_Resume_122(a1);
}

BOOL vp::services::Orientation_Impl::register_ui_orientation_listener(uint64_t a1, uint64_t *a2)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 3321888768;
  unint64_t v26 = ___ZN2vp8services16Orientation_Impl32register_ui_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke;
  uint64_t v27 = &__block_descriptor_80_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE_e8_v12__0i8l;
  uint64_t v2 = *a2;
  uint64_t v28 = a1;
  uint64_t v29 = v2;
  (*(void (**)(void *, uint64_t *))(v2 + 8))(v30, a2 + 1);
  uint64_t v3 = (vp *)CARegisterUIOrientation();
  int v4 = (int)v3;
  BOOL v5 = v3 == 0;
  if (v3)
  {
    unint64_t v7 = vp::get_log(v3);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      unint64_t v10 = v17;
      unint64_t v11 = __p[1];
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if ((v10 & 0x80u) == 0) {
          unint64_t v13 = v10;
        }
        else {
          unint64_t v13 = (unint64_t)v11;
        }
        if ((v17 & 0x80u) == 0) {
          unsigned __int8 v14 = __p;
        }
        else {
          unsigned __int8 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = v14;
        if (v13) {
          unint64_t v15 = " ";
        }
        else {
          unint64_t v15 = "";
        }
        __int16 v20 = 2080;
        uint64_t v21 = v15;
        __int16 v22 = 1024;
        int v23 = v4;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%s%sfailed to register UI orientation listener with status %u", buf, 0x1Cu);
      }

      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void *))(v29 + 24))(v30);
  return v5;
}

void sub_1BB4FFA04(_Unwind_Exception *exception_object)
{
}

void sub_1BB4FFA24(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
  {
    (*(void (**)(uint64_t))(a23 + 24))(v23);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB4FF8D4);
  }
  JUMPOUT(0x1BB4FFA14);
}

uint64_t ___ZN2vp8services16Orientation_Impl32register_ui_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke(vp *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = vp::get_log(a1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);

  if (v5)
  {
    int v6 = (vp *)CFStringCreateWithCAOrientation();
    unint64_t v7 = vp::get_log(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      unint64_t v10 = v18;
      unint64_t v11 = __p[1];
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        if ((v10 & 0x80u) == 0) {
          unint64_t v13 = v10;
        }
        else {
          unint64_t v13 = (unint64_t)v11;
        }
        if ((v18 & 0x80u) == 0) {
          unsigned __int8 v14 = __p;
        }
        else {
          unsigned __int8 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v20 = v14;
        if (v13) {
          unint64_t v15 = " ";
        }
        else {
          unint64_t v15 = "";
        }
        __int16 v21 = 2080;
        __int16 v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v6;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s%sUI orientation changed to \"%@\"", buf, 0x20u);
      }

      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFRelease(v6);
  }
  *(_DWORD *)AudioTimeStamp buf = a2;
  return (**((uint64_t (***)(uint64_t, uint8_t *))a1 + 5))((uint64_t)a1 + 48, buf);
}

uint64_t __destroy_helper_block_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 24))(a1 + 48);
}

uint64_t __copy_helper_block_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1 + 48, a2 + 48);
}

uint64_t vp::services::Orientation_Impl::unregister_device_orientation_listener(vp::services::Orientation_Impl *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = (vp *)CAUnregisterDeviceOrientation();
  int v2 = (int)v1;
  if (!v1) {
    return 1;
  }
  int v4 = vp::get_log(v1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
    unint64_t v7 = v14;
    BOOL v8 = __p[1];
    unint64_t v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = v7;
      }
      else {
        unint64_t v10 = (unint64_t)v8;
      }
      if ((v14 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      CFNumberRef v16 = v11;
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      __int16 v17 = 2080;
      unsigned __int8 v18 = v12;
      __int16 v19 = 1024;
      int v20 = v2;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to unregister device orientation listener with status %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB4FFDD0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB4FFDC0);
  }
  j___Unwind_Resume_124(a1);
}

void sub_1BB4FFDE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  j___Unwind_Resume_124(a1);
}

BOOL vp::services::Orientation_Impl::register_device_orientation_listener(uint64_t a1, uint64_t *a2)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 3321888768;
  unint64_t v26 = ___ZN2vp8services16Orientation_Impl36register_device_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke;
  uint64_t v27 = &__block_descriptor_80_ea8_40c95_ZTSN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS_23inplace_function_detail6vtableEEE_e8_v12__0i8l;
  uint64_t v2 = *a2;
  uint64_t v28 = a1;
  uint64_t v29 = v2;
  (*(void (**)(void *, uint64_t *))(v2 + 8))(v30, a2 + 1);
  uint64_t v3 = (vp *)CARegisterDeviceOrientation();
  int v4 = (int)v3;
  BOOL v5 = v3 == 0;
  if (v3)
  {
    unint64_t v7 = vp::get_log(v3);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      unint64_t v10 = v17;
      unint64_t v11 = __p[1];
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if ((v10 & 0x80u) == 0) {
          unint64_t v13 = v10;
        }
        else {
          unint64_t v13 = (unint64_t)v11;
        }
        if ((v17 & 0x80u) == 0) {
          unsigned __int8 v14 = __p;
        }
        else {
          unsigned __int8 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v19 = v14;
        if (v13) {
          unint64_t v15 = " ";
        }
        else {
          unint64_t v15 = "";
        }
        __int16 v20 = 2080;
        uint64_t v21 = v15;
        __int16 v22 = 1024;
        int v23 = v4;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%s%sfailed to register device orientation listener with status %u", buf, 0x1Cu);
      }

      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void *))(v29 + 24))(v30);
  return v5;
}

void sub_1BB4FFFD8(_Unwind_Exception *exception_object)
{
}

void sub_1BB4FFFF8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
  {
    (*(void (**)(uint64_t))(a23 + 24))(v23);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BB4FFEA8);
  }
  JUMPOUT(0x1BB4FFFE8);
}

uint64_t ___ZN2vp8services16Orientation_Impl36register_device_orientation_listenerEN5caulk16inplace_functionIFv13CAOrientationELm32ELm8ENS2_23inplace_function_detail6vtableEEE_block_invoke(vp *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = vp::get_log(a1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);

  if (v5)
  {
    int v6 = (vp *)CFStringCreateWithCAOrientation();
    unint64_t v7 = vp::get_log(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

    if (v8)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Orientation_Impl]", 30, __p);
      unint64_t v10 = v18;
      unint64_t v11 = __p[1];
      uint64_t v12 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        if ((v10 & 0x80u) == 0) {
          unint64_t v13 = v10;
        }
        else {
          unint64_t v13 = (unint64_t)v11;
        }
        if ((v18 & 0x80u) == 0) {
          unsigned __int8 v14 = __p;
        }
        else {
          unsigned __int8 v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v20 = v14;
        if (v13) {
          unint64_t v15 = " ";
        }
        else {
          unint64_t v15 = "";
        }
        __int16 v21 = 2080;
        __int16 v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v6;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s%sdevice orientation changed to \"%@\"", buf, 0x20u);
      }

      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFRelease(v6);
  }
  *(_DWORD *)AudioTimeStamp buf = a2;
  return (**((uint64_t (***)(uint64_t, uint8_t *))a1 + 5))((uint64_t)a1 + 48, buf);
}

void vp::services::Orientation_Impl::~Orientation_Impl(vp::services::Orientation_Impl *this)
{
}

uint64_t vp::services::Mobile_Gestalt_Impl::copy_answer@<X0>(unsigned int a1@<W1>, uint64_t *a2@<X8>)
{
  if (a1 <= 1) {
    return vp::services::Mobile_Gestalt_Impl::copy_answer<__CFString const*>(a2);
  }
  *a2 = 0;
  return result;
}

uint64_t vp::services::Mobile_Gestalt_Impl::copy_answer<__CFString const*>(uint64_t *a1)
{
  uint64_t result = MGCopyAnswer();
  *a1 = result;
  return result;
}

void sub_1BB50026C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BB500260);
}

void vp::services::Mobile_Gestalt_Impl::~Mobile_Gestalt_Impl(vp::services::Mobile_Gestalt_Impl *this)
{
}

void vp::services::Core_Media_Impl::get_fig_capture_speaker_interference_mitigation_cf_notification_key(void *a1@<X8>)
{
  uint64_t v3 = (const void *)*MEMORY[0x1E4F513E8];
  if (*MEMORY[0x1E4F513E8]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E4F513E8]), CFTypeID v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

BOOL vp::services::Core_Media_Impl::is_fig_capture_speaker_interference_mitigation_required(vp::services::Core_Media_Impl *this)
{
  return FigCaptureSpeakerInterferenceMitigationIsRequired() != 0;
}

BOOL vp::services::Core_Media_Impl::is_fig_capture_speaker_interference_mitigation_supported(vp::services::Core_Media_Impl *this)
{
  return FigCaptureSpeakerInterferenceMitigationIsSupported() != 0;
}

void vp::services::Core_Media_Impl::~Core_Media_Impl(vp::services::Core_Media_Impl *this)
{
}

Class ___ZL27getSTMediaStatusDomainClassv_block_invoke(uint64_t a1)
{
  int v6 = 0;
  uint64_t v2 = SystemStatusLibraryCore(&v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
  }
  free(v3);
LABEL_3:
  Class result = objc_getClass("STMediaStatusDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSTMediaStatusDomainClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v5 = (char **)abort_report_np();
    return (Class)SystemStatusLibraryCore(v5);
  }
  return result;
}

uint64_t SystemStatusLibraryCore(char **a1)
{
  if (!SystemStatusLibraryCore(char **)::frameworkLibrary) {
    SystemStatusLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return SystemStatusLibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL23SystemStatusLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SystemStatusLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *vp::services::System_Status_Impl::Media_Status_Domain::observe_camera_capture_attributions(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZNK2vp8services18System_Status_Impl19Media_Status_Domain35observe_camera_capture_attributionsENSt3__18functionIFvNS3_6vectorINS0_13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS_9AllocatorIS8_EEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE_e33_v16__0__STMediaStatusDomainData_8l;
  std::__function::__value_func<void ()(std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  uint64_t v3 = _Block_copy(aBlock);
  [*(id *)(a1 + 8) observeDataWithBlock:v3];

  return std::__function::__value_func<void ()(std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>)>::~__value_func[abi:ne180100](v6);
}

void sub_1BB50062C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZNK2vp8services18System_Status_Impl19Media_Status_Domain35observe_camera_capture_attributionsENSt3__18functionIFvNS3_6vectorINS0_13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS_9AllocatorIS8_EEEEEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = a1;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t default_resource = std::pmr::get_default_resource(v2);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  __int16 v21 = v2;
  uint64_t v3 = [(std::pmr *)v2 cameraAttributions];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v24 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * i), "activityAttribution", v20);
        BOOL v8 = [v7 attributedEntity];
        id v9 = [v8 bundleIdentifier];
        unint64_t v10 = v9;
        if (v9) {
          CFRetain(v9);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v10);

        unint64_t v11 = v28;
        if ((unint64_t)v28 >= v29)
        {
          uint64_t v12 = v28 - v27;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v29 - (void)v27;
          if ((uint64_t)(v29 - (void)v27) >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          v31[4] = &default_resource;
          if (v15) {
            CFNumberRef v16 = (uint64_t *)std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100]((uint64_t)&default_resource, v15);
          }
          else {
            CFNumberRef v16 = 0;
          }
          unsigned __int8 v17 = &v16[v12];
          v31[0] = v16;
          v31[1] = v17;
          v31[3] = &v16[v15];
          uint64_t *v17 = (uint64_t)cf;
          CFTypeRef cf = 0;
          v31[2] = v17 + 1;
          std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(&v27, v31);
          unsigned __int8 v18 = v28;
          std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer((uint64_t *)v31);
          uint64_t v28 = v18;
          if (cf) {
            CFRelease(cf);
          }
        }
        else
        {
          CFTypeRef *v28 = cf;
          CFTypeRef cf = 0;
          uint64_t v28 = v11 + 1;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v4);
  }

  memset(v22, 0, 24);
  v22[3] = default_resource;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__init_with_size[abi:ne180100]<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution*,vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution*>(v22, v27, v28, v28 - v27);
  uint64_t v19 = *(void *)(v20 + 56);
  if (!v19) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, v22);
  v31[0] = v22;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100](v31);
  v31[0] = (uint64_t *)&v27;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100](v31);
}

void sub_1BB5008F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32)
{
  a32 = &a23;
  std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&a32);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *__destroy_helper_block_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_ea8_32c137_ZTSNSt3__18functionIFvNS_6vectorIN2vp8services13System_Status19Media_Status_Domain26Camera_Capture_AttributionENS2_9AllocatorIS6_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
    void *v2 = 0;
  }
  a2[1] = v4;
  int v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  for (uint64_t i = a1[2]; i != v3; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 8;
    std::pmr::polymorphic_allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>::destroy[abi:ne180100]<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>(v4, (CFTypeRef *)(i - 8));
  }
  if (*a1) {
    std::allocator_traits<vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::deallocate[abi:ne180100]((void *)a1[4], *a1, (a1[3] - *a1) >> 3);
  }
  return a1;
}

void vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution::~Camera_Capture_Attribution(const void **this)
{
  unsigned __int8 v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void vp::services::System_Status_Impl::Media_Status_Domain::get_camera_capture_attributions(id *this@<X0>, void *a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::pmr *)SystemStatusLibraryCore(0);
  if (!v4)
  {
    uint64_t v5 = vp::get_log(0);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::System_Status_Impl::Media_Status_Domain]", 53, &__p);
      uint64_t v8 = (char *)HIBYTE(v39);
      id v9 = v38;
      unint64_t v10 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v8 >= 0) {
          unint64_t v11 = v8;
        }
        else {
          unint64_t v11 = v9;
        }
        p_p = __p;
        if (SHIBYTE(v39) >= 0) {
          p_p = &__p;
        }
        if (v11) {
          unint64_t v13 = " ";
        }
        else {
          unint64_t v13 = "";
        }
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = p_p;
        __int16 v44 = 2080;
        uint64_t v45 = v13;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%sSystemStatus framework is unavailable and camera status indicator will not function", buf, 0x16u);
      }

      if (SHIBYTE(v39) < 0) {
        operator delete(__p);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = std::pmr::get_default_resource(v4);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v14 = [this[1] data];
  id obj = [v14 cameraAttributions];

  uint64_t v15 = [obj countByEnumeratingWithState:&v33 objects:v42 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v34;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v34 != v16) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v18 = [*(id *)(*((void *)&v33 + 1) + 8 * v17) activityAttribution];
        uint64_t v19 = [v18 attributedEntity];
        id v20 = [v19 bundleIdentifier];
        __int16 v21 = v20;
        if (v20) {
          CFRetain(v20);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v21);

        __int16 v22 = (void *)a2[1];
        unint64_t v23 = a2[2];
        if ((unint64_t)v22 >= v23)
        {
          uint64_t v24 = ((uint64_t)v22 - *a2) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v23 - *a2;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          unint64_t v41 = a2 + 3;
          if (v27) {
            uint64_t v28 = (char *)std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<vp::vx::Property_ID,void *> *> *>::allocate[abi:ne180100]((uint64_t)(a2 + 3), v27);
          }
          else {
            uint64_t v28 = 0;
          }
          unint64_t v29 = &v28[8 * v24];
          __p = v28;
          v38 = v29;
          __int16 v40 = &v28[8 * v27];
          *(void *)unint64_t v29 = *(void *)buf;
          *(void *)AudioTimeStamp buf = 0;
          long long v39 = v29 + 8;
          std::vector<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution>>::__swap_out_circular_buffer(a2, &__p);
          uint64_t v30 = a2[1];
          std::__split_buffer<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution,vp::Allocator<vp::services::System_Status::Media_Status_Domain::Camera_Capture_Attribution> &>::~__split_buffer((uint64_t *)&__p);
          char v31 = *(const void **)buf;
          a2[1] = v30;
          if (v31) {
            CFRelease(v31);
          }
        }
        else
        {
          *__int16 v22 = *(void *)buf;
          *(void *)AudioTimeStamp buf = 0;
          a2[1] = v22 + 1;
        }

        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = [obj countByEnumeratingWithState:&v33 objects:v42 count:16];
    }
    while (v15);
  }
}

void sub_1BB500E80(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void vp::services::System_Status_Impl::Media_Status_Domain::~Media_Status_Domain(id *this)
{
  JUMPOUT(0x1C185D370);
}

{
}

uint64_t vp::services::System_Status_Impl::get_media_status_domain(vp::services::System_Status_Impl *this)
{
  return (uint64_t)this + 16;
}

void vp::services::System_Status_Impl::~System_Status_Impl(id *this)
{
  JUMPOUT(0x1C185D370);
}

{
}

void vp::services::Control_Center_Impl::get_automatic_mic_mode_is_enabled_notification(vp::services::Control_Center_Impl *this@<X0>, void *a2@<X8>)
{
  if (vp::services::isAutomaticMicModeFeatureFlagOn(this))
  {
    uint64_t v3 = (const void *)*MEMORY[0x1E4F15518];
    if (*MEMORY[0x1E4F15518])
    {
      CFRetain((CFTypeRef)*MEMORY[0x1E4F15518]);
      CFTypeID v4 = CFGetTypeID(v3);
      if (v4 != CFStringGetTypeID())
      {
        *a2 = 0;
        CFRelease(v3);
        return;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a2 = v3;
}

uint64_t vp::services::isAutomaticMicModeFeatureFlagOn(vp::services *this)
{
  return _os_feature_enabled_impl();
}

vp *vp::services::Control_Center_Impl::get_automatic_mic_mode_is_enabled_for_bundle_id(vp *a1, const __CFString **a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = vp::get_log(a1);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v32);
    uint64_t v7 = v34;
    uint64_t v8 = v33;
    id v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if ((v7 & 0x80u) == 0) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v8;
      }
      if ((v34 & 0x80u) == 0) {
        unint64_t v11 = &v32;
      }
      else {
        unint64_t v11 = v32;
      }
      if (v10) {
        uint64_t v12 = " ";
      }
      else {
        uint64_t v12 = "";
      }
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v31 >= 0) {
        unint64_t v13 = __p;
      }
      else {
        unint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      long long v36 = v11;
      __int16 v37 = 2080;
      v38 = v12;
      __int16 v39 = 2080;
      __int16 v40 = v13;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, "%s%sgetting automatic mic mode is enabled for bundle ID \"%s\"", buf, 0x20u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v34 < 0) {
      operator delete(v32);
    }
  }
  isAutomaticMicModeFeatureFlagOn = (vp *)vp::services::isAutomaticMicModeFeatureFlagOn(v5);
  if (isAutomaticMicModeFeatureFlagOn)
  {
    isAutomaticMicModeFeatureFlagOn = (vp *)AVAUVoiceIOIsAutoChatFlavorEnabledForBundleID();
    uint64_t v15 = isAutomaticMicModeFeatureFlagOn;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = vp::get_log(isAutomaticMicModeFeatureFlagOn);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);

  if (v17)
  {
    unsigned __int8 v18 = &v32;
    uint64_t v19 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v32);
    uint64_t v20 = v34;
    uint64_t v21 = v33;
    __int16 v22 = vp::get_log(v19);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      if ((v20 & 0x80u) == 0) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = v21;
      }
      if ((v34 & 0x80u) != 0) {
        unsigned __int8 v18 = v32;
      }
      if (v23) {
        uint64_t v24 = " ";
      }
      else {
        uint64_t v24 = "";
      }
      if (v15) {
        unint64_t v25 = "enabled";
      }
      else {
        unint64_t v25 = "disabled";
      }
      if (!*a2)
      {
        unint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v31 >= 0) {
        uint64_t v26 = __p;
      }
      else {
        uint64_t v26 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      long long v36 = v18;
      __int16 v37 = 2080;
      v38 = v24;
      __int16 v39 = 2080;
      __int16 v40 = (void *)v25;
      __int16 v41 = 2080;
      __int16 v42 = v26;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_INFO, "%s%sautomatic mic mode is %s for bundle ID \"%s\"", buf, 0x2Au);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v34 < 0) {
      operator delete(v32);
    }
  }
  return v15;
}

void sub_1BB5013D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __cxa_free_exception(v19);

    if (a19 < 0) {
      operator delete(__p);
    }
    __int16 v22 = (vp *)__cxa_begin_catch(a1);
    uint64_t v23 = vp::get_log(v22);
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      uint64_t v26 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB50131CLL);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::set_supported_chat_flavors_for_bundle_id(vp *a1, const __CFString **a2, uint64_t a3, unint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = vp::get_log(a1);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (v8)
  {
    memset(&v30, 0, sizeof(v30));
    std::string::reserve(&v30, 0x80uLL);
    if (a4)
    {
      unint64_t v10 = 0;
      unsigned int v11 = 1;
      do
      {
        if (v11 != 1) {
          std::string::append(&v30, ", ", 2uLL);
        }
        std::string::append(&v30, "\"", 1uLL);
        uint64_t v12 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(*(_DWORD *)(a3 + 4 * v10));
        std::string::append(&v30, v12, v13);
        id v9 = std::string::append(&v30, "\"", 1uLL);
        unint64_t v10 = v11++;
      }
      while (v10 < a4);
    }
    uint64_t v14 = vp::get_log((vp *)v9);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);

    if (v15)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v28);
      unint64_t v17 = v29;
      unsigned __int8 v18 = v28[1];
      uint64_t v19 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if ((v17 & 0x80u) == 0) {
          unint64_t v20 = v17;
        }
        else {
          unint64_t v20 = (unint64_t)v18;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v21 = v28;
        }
        else {
          uint64_t v21 = (void **)v28[0];
        }
        if (v20) {
          __int16 v22 = " ";
        }
        else {
          __int16 v22 = "";
        }
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
        if (v27 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        BOOL v24 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = v21;
        __int16 v32 = 2080;
        uint64_t v33 = v22;
        __int16 v34 = 2080;
        long long v35 = v23;
        __int16 v36 = 2080;
        __int16 v37 = v24;
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s%ssetting supported chat flavors for bundle ID \"%s\" to [%s]", buf, 0x2Au);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }

      if ((char)v29 < 0) {
        operator delete(v28[0]);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  vp::services::Control_Center_Impl::convert_chat_flavors((applesauce::CF::ArrayRef *)buf, a3, a4);
  AVAUVoiceIOSetSupportedChatFlavorsForBundleID();
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
}

void sub_1BB501880(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    __cxa_free_exception(v24);

    if (a18 < 0) {
      operator delete(__p);
    }
    if (a24 < 0) {
      operator delete(a19);
    }
    char v27 = (vp *)__cxa_begin_catch(a1);
    uint64_t v28 = vp::get_log(v27);
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);

    if (v29)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &a19);
      char v31 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a10);
      }

      if (a24 < 0) {
        operator delete(a19);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB50180CLL);
  }
  _Unwind_Resume(a1);
}

char *vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(int a1)
{
  if (a1)
  {
    unsigned __int8 v1 = vp::detail::reflect_value_name<(vp::services::Control_Center::Chat_Flavor)1,128ul>(a1);
    if (!v2)
    {
      unint64_t v3 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    unsigned __int8 v1 = "vp::services::Control_Center::Chat_Flavor::Standard]";
    unint64_t v2 = 51;
  }
  unint64_t v3 = v2;
  while (v3)
  {
    int v4 = v1[--v3];
    if (v4 == 58)
    {
      ++v3;
      break;
    }
  }
LABEL_9:
  if (v2 < v3) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v1[v3];
}

applesauce::CF::ArrayRef *vp::services::Control_Center_Impl::convert_chat_flavors(applesauce::CF::ArrayRef *a1, uint64_t a2, unint64_t capacity)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
  if (capacity)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      int valuePtr = *(_DWORD *)(a2 + 4 * v7);
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      CFNumberRef v10 = v9;
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v10);
      unint64_t v7 = v8++;
    }
    while (v7 < capacity);
  }
  return applesauce::CF::ArrayRef::ArrayRef(a1, Mutable);
}

void sub_1BB501BD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *vp::detail::reflect_value_name<(vp::services::Control_Center::Chat_Flavor)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "vp::services::Control_Center::Chat_Flavor::Wide_Spectrum]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "vp::services::Control_Center::Chat_Flavor::Voice_Isolation]";
      break;
    case 2:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)3]";
      break;
    case 3:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)4]";
      break;
    case 4:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)5]";
      break;
    case 5:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)6]";
      break;
    case 6:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)7]";
      break;
    case 7:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)8]";
      break;
    case 8:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)9]";
      break;
    case 9:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)10]";
      break;
    case 10:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)11]";
      break;
    case 11:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)12]";
      break;
    case 12:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)13]";
      break;
    case 13:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)14]";
      break;
    case 14:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)15]";
      break;
    case 15:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)16]";
      break;
    case 16:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)17]";
      break;
    case 17:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)18]";
      break;
    case 18:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)19]";
      break;
    case 19:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)20]";
      break;
    case 20:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)21]";
      break;
    case 21:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)22]";
      break;
    case 22:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)23]";
      break;
    case 23:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)24]";
      break;
    case 24:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)25]";
      break;
    case 25:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)26]";
      break;
    case 26:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)27]";
      break;
    case 27:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)28]";
      break;
    case 28:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)29]";
      break;
    case 29:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)30]";
      break;
    case 30:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)31]";
      break;
    case 31:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)32]";
      break;
    case 32:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)33]";
      break;
    case 33:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)34]";
      break;
    case 34:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)35]";
      break;
    case 35:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)36]";
      break;
    case 36:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)37]";
      break;
    case 37:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)38]";
      break;
    case 38:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)39]";
      break;
    case 39:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)40]";
      break;
    case 40:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)41]";
      break;
    case 41:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)42]";
      break;
    case 42:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)43]";
      break;
    case 43:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)44]";
      break;
    case 44:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)45]";
      break;
    case 45:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)46]";
      break;
    case 46:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)47]";
      break;
    case 47:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)48]";
      break;
    case 48:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)49]";
      break;
    case 49:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)50]";
      break;
    case 50:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)51]";
      break;
    case 51:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)52]";
      break;
    case 52:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)53]";
      break;
    case 53:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)54]";
      break;
    case 54:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)55]";
      break;
    case 55:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)56]";
      break;
    case 56:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)57]";
      break;
    case 57:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)58]";
      break;
    case 58:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)59]";
      break;
    case 59:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)60]";
      break;
    case 60:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)61]";
      break;
    case 61:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)62]";
      break;
    case 62:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)63]";
      break;
    case 63:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)64]";
      break;
    case 64:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)65]";
      break;
    case 65:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)66]";
      break;
    case 66:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)67]";
      break;
    case 67:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)68]";
      break;
    case 68:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)69]";
      break;
    case 69:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)70]";
      break;
    case 70:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)71]";
      break;
    case 71:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)72]";
      break;
    case 72:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)73]";
      break;
    case 73:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)74]";
      break;
    case 74:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)75]";
      break;
    case 75:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)76]";
      break;
    case 76:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)77]";
      break;
    case 77:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)78]";
      break;
    case 78:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)79]";
      break;
    case 79:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)80]";
      break;
    case 80:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)81]";
      break;
    case 81:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)82]";
      break;
    case 82:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)83]";
      break;
    case 83:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)84]";
      break;
    case 84:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)85]";
      break;
    case 85:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)86]";
      break;
    case 86:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)87]";
      break;
    case 87:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)88]";
      break;
    case 88:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)89]";
      break;
    case 89:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)90]";
      break;
    case 90:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)91]";
      break;
    case 91:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)92]";
      break;
    case 92:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)93]";
      break;
    case 93:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)94]";
      break;
    case 94:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)95]";
      break;
    case 95:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)96]";
      break;
    case 96:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)97]";
      break;
    case 97:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)98]";
      break;
    case 98:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)99]";
      break;
    case 99:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)100]";
      break;
    case 100:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)101]";
      break;
    case 101:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)102]";
      break;
    case 102:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)103]";
      break;
    case 103:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)104]";
      break;
    case 104:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)105]";
      break;
    case 105:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)106]";
      break;
    case 106:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)107]";
      break;
    case 107:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)108]";
      break;
    case 108:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)109]";
      break;
    case 109:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)110]";
      break;
    case 110:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)111]";
      break;
    case 111:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)112]";
      break;
    case 112:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)113]";
      break;
    case 113:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)114]";
      break;
    case 114:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)115]";
      break;
    case 115:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)116]";
      break;
    case 116:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)117]";
      break;
    case 117:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)118]";
      break;
    case 118:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)119]";
      break;
    case 119:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)120]";
      break;
    case 120:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)121]";
      break;
    case 121:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)122]";
      break;
    case 122:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)123]";
      break;
    case 123:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)124]";
      break;
    case 124:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)125]";
      break;
    case 125:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)126]";
      break;
    case 126:
      uint64_t result = "(vp::services::Control_Center::Chat_Flavor)127]";
      break;
    default:
      if ("vp::services::Control_Center::Chat_Flavor::Wide_Spectrum]" == 128) {
        uint64_t result = "(vp::services::Control_Center::Chat_Flavor)128]";
      }
      else {
        uint64_t result = "?";
      }
      break;
  }
  return result;
}

void vp::services::Control_Center_Impl::set_hidden_chat_flavors_for_bundle_id(vp *a1, const __CFString **a2, uint64_t a3, unint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = vp::get_log(a1);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (v8)
  {
    memset(&v30, 0, sizeof(v30));
    std::string::reserve(&v30, 0x80uLL);
    if (a4)
    {
      unint64_t v10 = 0;
      unsigned int v11 = 1;
      do
      {
        if (v11 != 1) {
          std::string::append(&v30, ", ", 2uLL);
        }
        std::string::append(&v30, "\"", 1uLL);
        uint64_t v12 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(*(_DWORD *)(a3 + 4 * v10));
        std::string::append(&v30, v12, v13);
        CFNumberRef v9 = std::string::append(&v30, "\"", 1uLL);
        unint64_t v10 = v11++;
      }
      while (v10 < a4);
    }
    uint64_t v14 = vp::get_log((vp *)v9);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);

    if (v15)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v28);
      unint64_t v17 = v29;
      unsigned __int8 v18 = v28[1];
      uint64_t v19 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        if ((v17 & 0x80u) == 0) {
          unint64_t v20 = v17;
        }
        else {
          unint64_t v20 = (unint64_t)v18;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v21 = v28;
        }
        else {
          uint64_t v21 = (void **)v28[0];
        }
        if (v20) {
          __int16 v22 = " ";
        }
        else {
          __int16 v22 = "";
        }
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
        if (v27 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        BOOL v24 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = v21;
        __int16 v32 = 2080;
        uint64_t v33 = v22;
        __int16 v34 = 2080;
        long long v35 = v23;
        __int16 v36 = 2080;
        __int16 v37 = v24;
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s%ssetting hidden chat flavors for bundle ID \"%s\" to [%s]", buf, 0x2Au);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }

      if ((char)v29 < 0) {
        operator delete(v28[0]);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  vp::services::Control_Center_Impl::convert_chat_flavors((applesauce::CF::ArrayRef *)buf, a3, a4);
  AVAUVoiceIOSetHiddenChatFlavorsForBundleID();
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
}

void sub_1BB502734(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    __cxa_free_exception(v24);

    if (a18 < 0) {
      operator delete(__p);
    }
    if (a24 < 0) {
      operator delete(a19);
    }
    char v27 = (vp *)__cxa_begin_catch(a1);
    uint64_t v28 = vp::get_log(v27);
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);

    if (v29)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &a19);
      char v31 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a10);
      }

      if (a24 < 0) {
        operator delete(a19);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB5026C0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::set_voice_processing_bypassed_for_bundle_id(vp *a1, const __CFString **a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = vp::get_log(a1);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);

  if (v6)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v23);
    unint64_t v8 = v24;
    CFNumberRef v9 = v23[1];
    unint64_t v10 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = v8;
      }
      else {
        unint64_t v11 = (unint64_t)v9;
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v12 = v23;
      }
      else {
        uint64_t v12 = (void **)v23[0];
      }
      if (v11) {
        std::string::size_type v13 = " ";
      }
      else {
        std::string::size_type v13 = "";
      }
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      int v14 = v22;
      BOOL v15 = (void **)__p[0];
      std::to_string(&v20, a3);
      uint64_t v16 = __p;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &v20;
      }
      else {
        unint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v26 = v12;
      __int16 v27 = 2080;
      uint64_t v28 = v13;
      __int16 v29 = 2080;
      std::string v30 = v16;
      __int16 v31 = 2080;
      __int16 v32 = v17;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_INFO, "%s%ssetting bypass for bundle ID \"%s\" to %s", buf, 0x2Au);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  return AVAUVoiceIOSetVoiceProcessingBypassedForBundleID();
}

void sub_1BB502B30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    __cxa_free_exception(v22);

    if (a21 < 0) {
      operator delete(__p);
    }
    unsigned __int8 v24 = (vp *)__cxa_begin_catch(a1);
    unint64_t v25 = vp::get_log(v24);
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);

    if (v26)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      uint64_t v28 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a10);
      }

      if (a21 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB502AB8);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::remove_active_chat_flavor_for_bundle_id(vp *a1, const __CFString **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = vp::get_log(a1);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v17);
    unint64_t v6 = v18;
    unint64_t v7 = v17[1];
    unint64_t v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = v6;
      }
      else {
        unint64_t v9 = (unint64_t)v7;
      }
      if ((v18 & 0x80u) == 0) {
        unint64_t v10 = v17;
      }
      else {
        unint64_t v10 = (void **)v17[0];
      }
      if (v9) {
        unint64_t v11 = " ";
      }
      else {
        unint64_t v11 = "";
      }
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v16 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      std::string v20 = v10;
      __int16 v21 = 2080;
      char v22 = v11;
      __int16 v23 = 2080;
      unsigned __int8 v24 = v12;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%s%sremoving active chat flavor for bundle ID \"%s\"", buf, 0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v18 < 0) {
      operator delete(v17[0]);
    }
  }
  return AVAUVoiceIORemoveActiveChatFlavorForBundleID();
}

void sub_1BB502EBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0) {
      operator delete(__p);
    }
    char v22 = (vp *)__cxa_begin_catch(a1);
    __int16 v23 = vp::get_log(v22);
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      BOOL v26 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB502E4CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::set_active_chat_flavor_for_bundle_id(uint64_t a1, const __CFString **a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v4 = vp::reflect_value_name_tag<vp::services::Control_Center::Chat_Flavor,128ul>(a3);
  size_t v6 = v5;
  unint64_t v7 = vp::get_log((vp *)v4);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);

  if (!v8) {
    return AVAUVoiceIOSetActiveChatFlavorForBundleID();
  }
  log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v27);
  unint64_t v10 = v28;
  unint64_t v11 = v27[1];
  uint64_t v12 = vp::get_log(log_context_info);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if ((v10 & 0x80u) == 0) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = (unint64_t)v11;
    }
    if ((v28 & 0x80u) == 0) {
      int v14 = v27;
    }
    else {
      int v14 = (void **)v27[0];
    }
    if (v13) {
      BOOL v15 = " ";
    }
    else {
      BOOL v15 = "";
    }
    if (!*a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    char v16 = __p;
    applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
    if (v26 < 0) {
      char v16 = (void **)__p[0];
    }
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v6 >= 0x17)
    {
      uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v18 = v6 | 7;
      }
      uint64_t v19 = v18 + 1;
      unint64_t v17 = (void **)operator new(v18 + 1);
      __dst[1] = (void *)v6;
      int64_t v24 = v19 | 0x8000000000000000;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v24) = v6;
      unint64_t v17 = __dst;
      if (!v6) {
        goto LABEL_23;
      }
    }
    memmove(v17, v4, v6);
LABEL_23:
    *((unsigned char *)v17 + v6) = 0;
    std::string v20 = __dst;
    if (v24 < 0) {
      std::string v20 = (void **)__dst[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    std::string v30 = v14;
    __int16 v31 = 2080;
    __int16 v32 = v15;
    __int16 v33 = 2080;
    __int16 v34 = v16;
    __int16 v35 = 2080;
    __int16 v36 = v20;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s%ssetting active chat flavor for bundle ID \"%s\" to \"%s\"", buf, 0x2Au);
    if (SHIBYTE(v24) < 0) {
      operator delete(__dst[0]);
    }
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  return AVAUVoiceIOSetActiveChatFlavorForBundleID();
}

void sub_1BB5032FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    __cxa_free_exception(v22);

    if (a21 < 0) {
      operator delete(__p);
    }
    int64_t v24 = (vp *)__cxa_begin_catch(a1);
    uint64_t v25 = vp::get_log(v24);
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);

    if (v26)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      unsigned __int8 v28 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a10);
      }

      if (a21 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB503278);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::get_notification_dictionary_bundle_id_key(void *a1@<X8>)
{
  unint64_t v3 = (const void *)*MEMORY[0x1E4F15520];
  if (*MEMORY[0x1E4F15520]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E4F15520]), CFTypeID v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

void vp::services::Control_Center_Impl::get_preferred_chat_flavor_notification(void *a1@<X8>)
{
  unint64_t v3 = (const void *)*MEMORY[0x1E4F15528];
  if (*MEMORY[0x1E4F15528]
    && (CFRetain((CFTypeRef)*MEMORY[0x1E4F15528]), CFTypeID v4 = CFGetTypeID(v3), v4 != CFStringGetTypeID()))
  {
    *a1 = 0;
    CFRelease(v3);
  }
  else
  {
    *a1 = v3;
  }
}

vp *vp::services::Control_Center_Impl::get_preferred_chat_flavor_for_bundle_id(vp *a1, const __CFString **a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = vp::get_log(a1);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v28);
    uint64_t v6 = v30;
    uint64_t v7 = v29;
    BOOL v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v7;
      }
      if ((v30 & 0x80u) == 0) {
        unint64_t v10 = &v28;
      }
      else {
        unint64_t v10 = v28;
      }
      if (v9) {
        unint64_t v11 = " ";
      }
      else {
        unint64_t v11 = "";
      }
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v27 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v32 = v10;
      __int16 v33 = 2080;
      __int16 v34 = v11;
      __int16 v35 = 2080;
      __int16 v36 = v12;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%s%sgetting preferred chat flavor for bundle ID \"%s\"", buf, 0x20u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v30 < 0) {
      operator delete(v28);
    }
  }
  unint64_t v13 = (vp *)AVAUVoiceIOGetPreferredChatFlavorForBundleID();
  int v14 = v13;
  if (v13 >= 3)
  {
    char v16 = vp::get_log(v13);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_FAULT);

    if (v17)
    {
      uint64_t v18 = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &v28);
      uint64_t v19 = v30;
      uint64_t v20 = v29;
      __int16 v21 = vp::get_log(v18);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      {
        if ((v19 & 0x80u) == 0) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v20;
        }
        if ((v30 & 0x80u) == 0) {
          __int16 v23 = &v28;
        }
        else {
          __int16 v23 = v28;
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        __int16 v32 = v23;
        if (v22) {
          int64_t v24 = " ";
        }
        else {
          int64_t v24 = "";
        }
        __int16 v33 = 2080;
        __int16 v34 = v24;
        __int16 v35 = 1024;
        LODWORD(v36) = v14;
        _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_FAULT, "%s%shandling unknown chat flavor %u", buf, 0x1Cu);
      }

      if ((char)v30 < 0) {
        operator delete(v28);
      }
    }
    return 0;
  }
  return v14;
}

void sub_1BB50388C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0) {
      operator delete(__p);
    }
    uint64_t v22 = (vp *)__cxa_begin_catch(a1);
    __int16 v23 = vp::get_log(v22);
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      BOOL v26 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB503844);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Control_Center_Impl::initialize_listeners_for_bundle_id(vp *a1, const __CFString **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = vp::get_log(a1);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);

  if (v4)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, v17);
    unint64_t v6 = v18;
    uint64_t v7 = v17[1];
    BOOL v8 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = v6;
      }
      else {
        unint64_t v9 = (unint64_t)v7;
      }
      if ((v18 & 0x80u) == 0) {
        unint64_t v10 = v17;
      }
      else {
        unint64_t v10 = (void **)v17[0];
      }
      if (v9) {
        unint64_t v11 = " ";
      }
      else {
        unint64_t v11 = "";
      }
      if (!*a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>(*a2, (uint64_t)__p);
      if (v16 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v20 = v10;
      __int16 v21 = 2080;
      uint64_t v22 = v11;
      __int16 v23 = 2080;
      BOOL v24 = v12;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%s%sinitializing listeners for bundle ID \"%s\"", buf, 0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((char)v18 < 0) {
      operator delete(v17[0]);
    }
  }
  return AVAUVoiceIOInitializeListenersForBundleID();
}

void sub_1BB503BFC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __cxa_free_exception(v20);

    if (a19 < 0) {
      operator delete(__p);
    }
    uint64_t v22 = (vp *)__cxa_begin_catch(a1);
    __int16 v23 = vp::get_log(v22);
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

    if (v24)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Control_Center_Impl]", 33, &__p);
      BOOL v26 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB503B8CLL);
  }
  _Unwind_Resume(a1);
}

void vp::services::Control_Center_Impl::~Control_Center_Impl(vp::services::Control_Center_Impl *this)
{
}

const char *vp::services::Backboard_Impl::get_proximity_changed_darwin_notification_key(vp::services::Backboard_Impl *this)
{
  return "com.apple.backboard.proximity.changed";
}

void vp::services::Backboard_Impl::~Backboard_Impl(vp::services::Backboard_Impl *this)
{
}

void vp::services::Audio_Statistics_Impl::copy_configuration(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_197);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym)
  {
    size_t v5 = (const void *)AudioStatisticsLibraryLoader(void)::libSym(a1);
    unint64_t v6 = v5;
    if (v5)
    {
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 != CFDictionaryGetTypeID())
      {
        *a2 = 0;
        CFRelease(v6);
        return;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a2 = v6;
}

void sub_1BB503EC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_10200()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    int v1 = result;
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSym = dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSym = dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)result;
  }
  return result;
}

uint64_t vp::services::Audio_Statistics_Impl::get_audio_service_type(vp::services::Audio_Statistics_Impl *this, uint64_t a2)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_197);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    return AudioStatisticsLibraryLoader(void)::libSym(a2);
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_1BB5043D0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BB5043D4);
  }
  __clang_call_terminate(a1);
}

void vp::services::Audio_Statistics_Impl::report_event(vp::services::Audio_Statistics_Impl *this, const vp::services::Audio_Statistics::Event *a2, uint64_t a3)
{
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(unsigned int *)a2;
  uint64_t v6 = *((unsigned __int16 *)a2 + 2);
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_197);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    AudioStatisticsLibraryLoader(void)::libSym(a3, v4, v5, v6);
  }
}

void sub_1BB50449C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    uint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Statistics_Impl]", 35, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB504450);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Statistics_Impl::report_event(vp::services::Audio_Statistics_Impl *this, const vp::services::Audio_Statistics::Event *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  uint64_t v3 = *(unsigned int *)a2;
  uint64_t v4 = *((unsigned __int16 *)a2 + 2);
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_197);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    AudioStatisticsLibraryLoader(void)::libSym(v2, v3, v4);
  }
}

void sub_1BB5046BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    uint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Statistics_Impl]", 35, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB504670);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Statistics_Impl::~Audio_Statistics_Impl(vp::services::Audio_Statistics_Impl *this)
{
}

void vp::services::Audio_Issue_Detector_Impl::set_downlink_route_specific_gain_adjustment(vp::services::Audio_Issue_Detector_Impl *this, float a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
  }
}

void sub_1BB5048E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    uint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB504890);
  }
  _Unwind_Resume(a1);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_10219()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void vp::services::Audio_Issue_Detector_Impl::set_downlink_volume(vp::services::Audio_Issue_Detector_Impl *this, float a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
  }
}

void sub_1BB504CB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    uint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB504C60);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::set_uplink_mute(vp::services::Audio_Issue_Detector_Impl *this, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(a2);
  }
}

void sub_1BB504EB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    uint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl]", 39, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB504E68);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::create_client(vp::services::Audio_Issue_Detector_Impl *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB505124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,__int16 a27,uint64_t a28)
{
  if (a2)
  {
    if (__p)
    {
      a24 = (uint64_t)__p;
      operator delete(__p);
    }
    uint64_t v29 = (vp *)__cxa_begin_catch(exception_object);
    unsigned __int8 v30 = vp::get_log(v29);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);

    if (v31)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &a17);
      __int16 v33 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a22 < 0) {
        operator delete(a17);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB5050D0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::analyze(vp *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) > 2) {
    uint64_t v10 = 51;
  }
  else {
    uint64_t v10 = *(unsigned int *)&aD_5[4 * (a2 - 1)];
  }
  uint64_t v11 = *((void *)a1 + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v11, v10, a3, a4, a5, a6);
    int v12 = (int)a1;
    if (!a1) {
      return 1;
    }
  }
  else
  {
    int v12 = -1;
  }
  int v14 = vp::get_log(a1);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

  if (v15)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    unint64_t v17 = v24;
    unsigned __int8 v18 = __p[1];
    uint64_t v19 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if ((v17 & 0x80u) == 0) {
        unint64_t v20 = v17;
      }
      else {
        unint64_t v20 = (unint64_t)v18;
      }
      if ((v24 & 0x80u) == 0) {
        BOOL v21 = __p;
      }
      else {
        BOOL v21 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      BOOL v26 = v21;
      if (v20) {
        uint64_t v22 = " ";
      }
      else {
        uint64_t v22 = "";
      }
      __int16 v27 = 2080;
      unsigned __int8 v28 = v22;
      __int16 v29 = 1024;
      int v30 = v12;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to analyze buffer due to error - %u", buf, 0x1Cu);
    }

    if ((char)v24 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB5054A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    uint64_t v19 = (vp *)__cxa_begin_catch(a1);
    unint64_t v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB505454);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::initialize(vp::services::Audio_Issue_Detector_Impl::Client *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    this = (vp::services::Audio_Issue_Detector_Impl::Client *)AudioIssueDetectorLibraryLoader(void)::libSym(v1);
    int v2 = (int)this;
    if (!this) {
      return 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  uint64_t v4 = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    unint64_t v7 = v14;
    BOOL v8 = __p[1];
    unint64_t v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = v7;
      }
      else {
        unint64_t v10 = (unint64_t)v8;
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      char v16 = v11;
      if (v10) {
        int v12 = " ";
      }
      else {
        int v12 = "";
      }
      __int16 v17 = 2080;
      unsigned __int8 v18 = v12;
      __int16 v19 = 1024;
      int v20 = v2;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to initialize due to error - %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB5057B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      __int16 v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB505760);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::set_reporter_ids(vp *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v3, a2);
    int v4 = (int)a1;
    if (!a1) {
      return 1;
    }
  }
  else
  {
    int v4 = -1;
  }
  uint64_t v6 = vp::get_log(a1);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, __p);
    unint64_t v9 = v16;
    unint64_t v10 = __p[1];
    uint64_t v11 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = (unint64_t)v10;
      }
      if ((v16 & 0x80u) == 0) {
        unint64_t v13 = __p;
      }
      else {
        unint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unsigned __int8 v18 = v13;
      if (v12) {
        unsigned __int8 v14 = " ";
      }
      else {
        unsigned __int8 v14 = "";
      }
      __int16 v19 = 2080;
      int v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set reporter IDs due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB505AC0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      uint64_t v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB505A70);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Issue_Detector_Impl::Client::set_node_format(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  BOOL v8 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, off_1E623E530[a2]);
  if ((a2 - 1) > 2) {
    uint64_t v9 = 51;
  }
  else {
    uint64_t v9 = *(unsigned int *)&aD_5[4 * (a2 - 1)];
  }
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    BOOL v8 = (vp *)AudioIssueDetectorLibraryLoader(void)::libSym(v7, __p, v9, a3, a4);
    int v10 = (int)v8;
  }
  else
  {
    int v10 = -1;
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)__p);
  }
  if (!v10) {
    return 1;
  }
  unint64_t v12 = vp::get_log(v8);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

  if (v13)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, v21);
    unint64_t v15 = v22;
    unsigned __int8 v16 = v21[1];
    __int16 v17 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if ((v15 & 0x80u) == 0) {
        unint64_t v18 = v15;
      }
      else {
        unint64_t v18 = (unint64_t)v16;
      }
      if ((v22 & 0x80u) == 0) {
        __int16 v19 = v21;
      }
      else {
        __int16 v19 = (void **)v21[0];
      }
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v19;
      if (v18) {
        int v20 = " ";
      }
      else {
        int v20 = "";
      }
      __int16 v24 = 2080;
      uint64_t v25 = v20;
      __int16 v26 = 1024;
      int v27 = v10;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to set node format due to error - %u", __p, 0x1Cu);
    }

    if ((char)v22 < 0) {
      operator delete(v21[0]);
    }
  }
  return 0;
}

void sub_1BB505E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,int a24,__int16 a25,uint64_t a26,char a27,char a28,uint64_t a29)
{
  if (a2)
  {
    if (SHIBYTE(a26) < 0) {
      operator delete(__p);
    }
    int v30 = (vp *)__cxa_begin_catch(exception_object);
    uint64_t v31 = vp::get_log(v30);
    BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);

    if (v32)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &a17);
      __int16 v34 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a22 < 0) {
        operator delete(a17);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB505E20);
  }
  _Unwind_Resume(exception_object);
}

void vp::services::Audio_Issue_Detector_Impl::Client::~Client(vp::services::Audio_Issue_Detector_Impl::Client *this)
{
  vp::services::Audio_Issue_Detector_Impl::Client::~Client(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v1;

  uint64_t v1 = *((void *)this + 1);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_168);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v1);
  }
}

void sub_1BB506098(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Issue_Detector_Impl::Client]", 47, &__p);
      uint64_t v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB506048);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Issue_Detector_Impl::~Audio_Issue_Detector_Impl(vp::services::Audio_Issue_Detector_Impl *this)
{
}

uint64_t vp::services::Audio_Hardware_Impl::audio_object_get_property_data(vp::services::Audio_Hardware_Impl *this, AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, unsigned int *a6, void *outData)
{
  UInt32 v8 = *a6;
  uint64_t v9 = a6;
  uint64_t result = AudioObjectGetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, &v8, outData);
  *uint64_t v9 = v8;
  return result;
}

uint64_t vp::services::Audio_Hardware_Impl::audio_object_has_property(vp::services::Audio_Hardware_Impl *this, AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return AudioObjectHasProperty(inObjectID, inAddress);
}

void vp::services::Audio_Hardware_Impl::~Audio_Hardware_Impl(vp::services::Audio_Hardware_Impl *this)
{
}

void vp::services::Audio_Data_Analysis_Impl::create_settings_manager(vp::services::Audio_Data_Analysis_Impl *this)
{
}

void sub_1BB506310(void *a1)
{
  MEMORY[0x1C185D370](v1, 0x81C40803F642BLL);
  __clang_call_terminate(a1);
}

float vp::services::Audio_Data_Analysis_Impl::Settings_Manager::get_volume_limit_threshold(id *this)
{
  uint64_t v1 = [this[1] getPreferenceFor:*MEMORY[0x1E4F4E7C0]];
  [v1 floatValue];
  float v3 = v2;

  return v3;
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Settings_Manager::is_volume_limit_enabled(id *this)
{
  uint64_t v1 = [this[1] getPreferenceFor:*MEMORY[0x1E4F4E7B8]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void vp::services::Audio_Data_Analysis_Impl::Settings_Manager::~Settings_Manager(id *this)
{
  JUMPOUT(0x1C185D370);
}

{
}

void vp::services::Audio_Data_Analysis_Impl::create_client()
{
}

void sub_1BB5065FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      uint64_t v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB506524);
  }
  _Unwind_Resume(a1);
}

void vp::services::Audio_Data_Analysis_Impl::Client::~Client(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != 560033897 && v2 != 561211748)
  {
    if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
    }
    if (AudioDataAnalysisManagerLibraryLoader(void)::libSym) {
      AudioDataAnalysisManagerLibraryLoader(void)::libSym(v2);
    }
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  uint64_t vars8;

  vp::services::Audio_Data_Analysis_Impl::Client::~Client(this);

  JUMPOUT(0x1C185D370);
}

void sub_1BB506834(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      uint64_t v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB5067D8);
  }
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_10248()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    float v3 = dlerror();
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    float v3 = v1;
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::initialize(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    this = (vp::services::Audio_Data_Analysis_Impl::Client *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v1);
    int v2 = (int)this;
    if (!this) {
      return 1;
    }
  }
  else
  {
    int v2 = 560033897;
  }
  uint64_t v4 = vp::get_log(this);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    unint64_t v7 = v14;
    UInt32 v8 = __p[1];
    uint64_t v9 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = v7;
      }
      else {
        unint64_t v10 = (unint64_t)v8;
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unsigned __int8 v16 = v11;
      if (v10) {
        unint64_t v12 = " ";
      }
      else {
        unint64_t v12 = "";
      }
      __int16 v17 = 2080;
      unint64_t v18 = v12;
      __int16 v19 = 1024;
      int v20 = v2;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s%sfailed to initialize due to error - %u", buf, 0x1Cu);
    }

    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB506E68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __int16 v19 = (vp *)__cxa_begin_catch(a1);
    int v20 = vp::get_log(v19);
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, &__p);
      uint64_t v23 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        vp::get_log_exception_info((uint64_t)&a9);
      }

      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB506E18);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::process(vp::services::Audio_Data_Analysis_Impl::Client *this, uint64_t a2, const AudioBufferList *a3, uint64_t a4, const AudioTimeStamp *a5)
{
  uint64_t v10 = *((void *)this + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    int v11 = AudioDataAnalysisManagerLibraryLoader(void)::libSym(v10, a2, a3, a4, a5);
    if (!v11) {
      return 1;
    }
  }
  else
  {
    int v11 = 560033897;
  }
  uint64_t v13 = _os_log_pack_size();
  uint64_t result = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 2), v13 + 88, 16);
  if (result)
  {
    unsigned __int8 v14 = (caulk::concurrent::message *)result;
    unint64_t v15 = (_DWORD *)_os_log_pack_fill();
    _DWORD *v15 = 67109120;
    v15[1] = v11;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 2) + 16), v14);
    return 0;
  }
  return result;
}

void sub_1BB507108(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a2)
  {
    float v3 = (vp *)__cxa_begin_catch(a1);
    uint64_t v4 = vp::get_log(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      vp::get_log_exception_info((uint64_t)va);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB5070BCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::create_pcm_node(uint64_t a1, uint64_t a2, const __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = (vp *)applesauce::CF::convert_to<std::string,0>(*a3, (uint64_t)__p);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    int v11 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v10, a2, __p, a4, a5, a6);
    int v12 = (int)v11;
  }
  else
  {
    int v12 = 560033897;
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)__p);
  }
  if (!v12) {
    return 1;
  }
  unsigned __int8 v14 = vp::get_log(v11);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

  if (v15)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, v23);
    unint64_t v17 = v24;
    unint64_t v18 = v23[1];
    __int16 v19 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if ((v17 & 0x80u) == 0) {
        unint64_t v20 = v17;
      }
      else {
        unint64_t v20 = (unint64_t)v18;
      }
      if ((v24 & 0x80u) == 0) {
        BOOL v21 = v23;
      }
      else {
        BOOL v21 = (void **)v23[0];
      }
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v21;
      if (v20) {
        unsigned __int8 v22 = " ";
      }
      else {
        unsigned __int8 v22 = "";
      }
      __int16 v26 = 2080;
      int v27 = v22;
      __int16 v28 = 1024;
      int v29 = v12;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to create PCM node due to error - %u", __p, 0x1Cu);
    }

    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  return 0;
}

void sub_1BB5073CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t buf, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    BOOL v21 = (vp *)__cxa_begin_catch(a1);
    unsigned __int8 v22 = vp::get_log(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      vp::get_log_exception_info((uint64_t)&a10);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB5073C0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::set_application_bundle_id(vp *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *a2;
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v2, v3);
    int v4 = (int)a1;
    if (!a1) {
      return 1;
    }
  }
  else
  {
    int v4 = 560033897;
  }
  uint64_t v6 = vp::get_log(a1);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    unint64_t v9 = v16;
    uint64_t v10 = __p[1];
    int v11 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = (unint64_t)v10;
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unint64_t v18 = v13;
      if (v12) {
        unsigned __int8 v14 = " ";
      }
      else {
        unsigned __int8 v14 = "";
      }
      __int16 v19 = 2080;
      unint64_t v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set application bundle ID due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB507678(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a2)
  {
    uint64_t v3 = (vp *)__cxa_begin_catch(a1);
    int v4 = vp::get_log(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      vp::get_log_exception_info((uint64_t)va);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB507628);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::set_reporter_ids(vp *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 1);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_10244);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
  {
    a1 = (vp *)AudioDataAnalysisManagerLibraryLoader(void)::libSym(v3, a2);
    int v4 = (int)a1;
    if (!a1) {
      return 1;
    }
  }
  else
  {
    int v4 = 560033897;
  }
  uint64_t v6 = vp::get_log(a1);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::services::Audio_Data_Analysis_Impl::Client]", 46, __p);
    unint64_t v9 = v16;
    uint64_t v10 = __p[1];
    int v11 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = (unint64_t)v10;
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unint64_t v18 = v13;
      if (v12) {
        unsigned __int8 v14 = " ";
      }
      else {
        unsigned __int8 v14 = "";
      }
      __int16 v19 = 2080;
      unint64_t v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%s%sfailed to set reporter IDs due to error - %u", buf, 0x1Cu);
    }

    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BB5078F0(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a2)
  {
    uint64_t v3 = (vp *)__cxa_begin_catch(a1);
    int v4 = vp::get_log(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      vp::get_log_exception_info((uint64_t)va);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB5078A0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::services::Audio_Data_Analysis_Impl::Client::get_session_id(vp::services::Audio_Data_Analysis_Impl::Client *this)
{
  return *((void *)this + 1);
}

void vp::services::Audio_Data_Analysis_Impl::~Audio_Data_Analysis_Impl(vp::services::Audio_Data_Analysis_Impl *this)
{
}

std::__shared_weak_count **std::unique_ptr<vp::Service_Provider>::reset[abi:ne180100](std::__shared_weak_count ***a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    vp::Service_Provider::~Service_Provider(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void vp::Service_Provider::~Service_Provider(std::__shared_weak_count **this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = vp::get_log((vp *)this);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::Service_Provider]", 20, __p);
    unint64_t v5 = v16;
    uint64_t v6 = __p[1];
    BOOL v7 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if ((v5 & 0x80u) == 0) {
        unint64_t v8 = v5;
      }
      else {
        unint64_t v8 = (unint64_t)v6;
      }
      unint64_t v9 = (void **)__p[0];
      if ((v16 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      if (v8) {
        uint64_t v10 = " ";
      }
      else {
        uint64_t v10 = "";
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      unint64_t v18 = v9;
      __int16 v19 = 2080;
      unint64_t v20 = v10;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%s%sdestroyed", buf, 0x16u);
    }

    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
  int v11 = this[4];
  if (v11)
  {
    p_shared_owners = &this[3]->__shared_owners_;
    do
    {
      uint64_t v13 = *p_shared_owners;
      uint64_t *p_shared_owners = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      p_shared_owners += 2;
      int v11 = (std::__shared_weak_count *)((char *)v11 - 1);
    }
    while (v11);
  }
  if (this[5]) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,vp::Allocator<void>,void>::deallocate(this + 2, this[3]);
  }
  unsigned __int8 v14 = this[1];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

std::__shared_weak_count **std::__shared_ptr_pointer<vp::Service_Provider *,std::shared_ptr<vp::Service_Provider>::__shared_ptr_default_delete<vp::Service_Provider,vp::Service_Provider>,std::allocator<vp::Service_Provider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(std::__shared_weak_count ***)(a1 + 24);
  if (result)
  {
    vp::Service_Provider::~Service_Provider(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_pointer<vp::Service_Provider *,std::shared_ptr<vp::Service_Provider>::__shared_ptr_default_delete<vp::Service_Provider,vp::Service_Provider>,std::allocator<vp::Service_Provider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::vector<AUFIREngineKernel::FilterData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<AUFIREngineKernel::FilterData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<AUFIREngineKernel::FilterData>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<AUFIREngineKernel::FilterData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AUFIREngineKernel::FilterData>,AUFIREngineKernel::FilterData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    BOOL v3 = **(void ****)(a1 + 16);
    int v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 4;
      unint64_t v5 = v3;
      std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

AUFIREngineKernel::XfadeChannel *AUFIREngineKernel::XfadeChannel::XfadeChannel(AUFIREngineKernel::XfadeChannel *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a3;
  unint64_t v7 = a3;
  unint64_t v8 = a4;
  LODWORD(v29) = 0;
  std::vector<float>::vector(&__p, a4, &v29);
  std::vector<std::vector<float>>::vector(this, v7, (uint64_t)&__p);
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
  std::vector<std::span<float,18446744073709551615ul>>::vector((void *)this + 3, v7);
  LODWORD(__p) = 0;
  std::vector<float>::vector((void *)this + 6, v8, &__p);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  __p = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  if (v4)
  {
    std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](&__p, v7);
    unint64_t v9 = (char *)v27;
    bzero(v27, 8 * v7);
    uint64_t v10 = &v9[8 * v7];
  }
  else
  {
    uint64_t v10 = 0;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  unint64_t v11 = a2;
  *((void *)this + 13) = 0;
  int v29 = (char *)this + 88;
  char v30 = 0;
  if (a2)
  {
    unsigned int v24 = v4;
    unint64_t v25 = v7;
    unint64_t v23 = a2;
    size_t v12 = 3 * a2;
    uint64_t v13 = operator new(v12 * 8);
    *((void *)this + 11) = v13;
    *((void *)this + 12) = v13;
    int v22 = &v13[v12];
    *((void *)this + 13) = &v13[v12];
    unsigned __int8 v14 = (char *)__p;
    size_t v15 = v10 - (unsigned char *)__p;
    unint64_t v16 = (v10 - (unsigned char *)__p) >> 3;
    do
    {
      void *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      if (v10 != v14)
      {
        std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](v13, v16);
        unint64_t v17 = (char *)v13[1];
        memmove(v17, v14, v15);
        v13[1] = &v17[8 * v16];
      }
      v13 += 3;
      v12 -= 3;
    }
    while (v12 * 8);
    unint64_t v11 = v23;
    *((void *)this + 12) = v22;
    unint64_t v7 = v25;
    unsigned int v4 = v24;
    if (v14) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned __int8 v14 = (char *)__p;
    if (__p) {
LABEL_12:
    }
      operator delete(v14);
  }
  *((_DWORD *)this + 28) = 1065353216;
  LODWORD(v29) = 1065353216;
  std::vector<float>::vector(&__p, v7, &v29);
  std::vector<std::vector<float>>::vector((void *)this + 15, v11, (uint64_t)&__p);
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
  *((unsigned char *)this + 144) = 1;
  if (v4)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = (void *)(*((void *)this + 3) + v18);
      *unint64_t v20 = *(void *)(*(void *)this + v19);
      v20[1] = v8;
      v19 += 24;
      v18 += 16;
    }
    while (24 * v7 != v19);
  }
  return this;
}

void sub_1BB5080A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v21 = __p;
  std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (v21) {
    operator delete(v21);
  }
  int v22 = (std::__shared_weak_count *)v19[10];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unint64_t v23 = *a10;
  if (*a10)
  {
    v19[7] = v23;
    operator delete(v23);
  }
  unsigned int v24 = *a11;
  if (*a11)
  {
    v19[4] = v24;
    operator delete(v24);
  }
  __p = v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *std::vector<std::span<float,18446744073709551615ul>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DSPSplitComplex>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1BB5081E0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        unint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<AUFIREngineKernel::FilterInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<std::vector<BOOL>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1BB508430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void AUFIREngineKernel::SetMatrixFIRs(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - *a2) >> 3) == a1[3])
  {
    if (v3 == v2) {
LABEL_8:
    }
      operator new();
    while (1)
    {
      unint64_t v5 = *(void **)v3;
      unsigned int v4 = *(void **)(v3 + 8);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)v3) >> 3) != a1[1]) {
        goto LABEL_9;
      }
      if (v5 != v4) {
        break;
      }
LABEL_7:
      v3 += 24;
      if (v3 == v2) {
        goto LABEL_8;
      }
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3) == *a1)
    {
      v5 += 3;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
  }
LABEL_9:
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "matrix");
}

void sub_1BB5090BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void AUFIREngineKernel::PrepareXfadeChannel(AUFIREngineKernel *this, unsigned int a2)
{
  unsigned int v4 = (void ***)((char *)this + 176);
  unint64_t v5 = (char *)this + 256;
  while (ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::pop((uint64_t)v5, v4));
  int v6 = (char *)this + 152 * a2;
  uint64_t v7 = *((void *)v6 + 309);
  uint64_t v8 = *((void *)v6 + 310);
  *((void *)v6 + 310) = 0;
  uint64_t v9 = (void *)MEMORY[0x1E4FB7E90];
  *((void *)v6 + 309) = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v9 + 16))(*v9, 48, 8);
  unsigned int v11 = a2;
  size_t v12 = v6 + 2472;
  uint64_t v13 = (std::__shared_weak_count **)(v6 + 2480);
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 32) = v8;
  *(void *)uint64_t v10 = &unk_1F14B1FE8;
  *(void *)(v10 + 8) = 0;
  caulk::concurrent::messenger::enqueue((AUFIREngineKernel *)((char *)this + 2712), (caulk::concurrent::message *)v10);
  uint64_t v14 = *((unsigned int *)this + 576);
  long long v15 = *(_OWORD *)(**((void **)this + 22) + 16 * v14);
  uint64_t v16 = *(void *)(**((void **)this + 22) + 16 * v14 + 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = *v13;
  *size_t v12 = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = (char *)this + 152 * v11;
  *((_DWORD *)v18 + 628) = *((_DWORD *)this + 577);
  if (v18 + 2520 != (char *)this + 2312) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v18 + 2520), *((void *)this + 289), *((void *)this + 290), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 290) - *((void *)this + 289)) >> 3));
  }
  uint64_t v19 = (char *)this + 152 * v11;
  v19[2544] = 1;
  unint64_t v20 = *(unsigned int *)this;
  if (v20)
  {
    unint64_t v21 = 0;
    int v22 = v19 + 2544;
    unint64_t v23 = (void *)((char *)this + 152 * v11 + 2488);
    LODWORD(v24) = *((_DWORD *)this + 1);
    do
    {
      if (v24)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        uint64_t v27 = *(void *)(*((void *)this + 295) + 24 * v21);
        uint64_t v28 = *(void *)(*((void *)this + 292) + 24 * v21);
        int v29 = (int *)(*(void *)(**(void **)v12 + 24 * v21) + 28);
        do
        {
          uint64_t v30 = (v26 >> 3) & 0x1FFFFFFFFFFFFFF8;
          int v31 = *(v29 - 1);
          if (v31) {
            BOOL v32 = (*(void *)(v27 + v30) & (1 << v26)) == 0;
          }
          else {
            BOOL v32 = 0;
          }
          if (v32)
          {
            uint64_t v33 = *(void *)(v28 + v30) & (1 << v26);
            if (v31 != 1 && v33 == 0)
            {
              *(void *)(*(void *)(*v23 + 24 * v21) + 8 * v26) = 2;
              *int v22 = 0;
            }
            else
            {
              if (v33) {
                int v35 = 0;
              }
              else {
                int v35 = *v29;
              }
              __int16 v36 = (_DWORD *)(*(void *)(*v23 + 24 * v21) + 4 * v25);
              *__int16 v36 = 1;
              v36[1] = v35;
            }
          }
          else
          {
            *(void *)(*(void *)(*v23 + 24 * v21) + 8 * v26) = 0;
          }
          ++v26;
          unint64_t v24 = *((unsigned int *)this + 1);
          v25 += 2;
          v29 += 8;
        }
        while (v26 < v24);
        unint64_t v20 = *(unsigned int *)this;
      }
      ++v21;
    }
    while (v21 < v20);
  }
}

void sub_1BB509524(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14C0660;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::drain_trash(a1);
  unsigned int v4 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v4))
  {
    uint64_t v2 = v4;
    if (v4)
    {
      unint64_t v5 = v4;
      std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1C185D370](v2, 0x20C40960023A9);
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ***std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        uint64_t v9 = (void **)(v4 - 32);
        std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v9);
        uint64_t v8 = (void *)*((void *)v6 - 7);
        v6 -= 56;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 6) = v7;
          operator delete(v7);
        }
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::drain_trash(uint64_t a1)
{
  unsigned int v4 = 0;
  uint64_t v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result) {
      break;
    }
    uint64_t v3 = v4;
    if (!v4) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    unint64_t v5 = v4;
    std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1C185D370](v3, 0x20C40960023A9);
  }
  return result;
}

void ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    unint64_t v5 = *(void **)(i - 24);
    unsigned int v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::pop(uint64_t a1, void ***a2)
{
  uint64_t v10 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v10);
  if (v4)
  {
    unint64_t v5 = v10;
    if (!v10) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    int v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1BB5099D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::perform(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B2010;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], this, 48, 8);
}

void caulk::concurrent::details::message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::~message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B2010;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B2010;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

void caulk::concurrent::details::rt_message_call<AUFIREngineKernel::PrepareXfadeChannel(unsigned int)::$_0>::~rt_message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1F14B2010;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B2010;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  caulk::concurrent::message::~message(this);
}

void *CDSPSplitComplex::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2) {
    std::valarray<float>::__assign_range((uint64_t)(a1 + 2), *(unsigned char **)(a2 + 16), *(unsigned char **)(a2 + 24));
  }
  uint64_t v3 = a1[2];
  uint64_t v4 = v3 + 4 * ((a1[3] - v3) >> 3);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

BOOL anonymous namespace'::IsNearlyZero(_anonymous_namespace_ *this, float a2)
{
  uint64_t v2 = (float *)&xmmword_1E9F7EFF8 + 2;
  {
    float v5 = a2;
    uint64_t v2 = (float *)(&xmmword_1E9F7EFF8 + 8);
    a2 = v5;
    if (v4)
    {
      uint64_t v2 = (float *)(&xmmword_1E9F7EFF8 + 8);
      a2 = v5;
    }
  }
  return fabsf(a2) < v2[576];
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::vector<AUFIREngineKernel::FilterData>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B1FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<AUFIREngineKernel::FilterBank>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B1FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  BOOL result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return a1;
  }
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  float v5 = *(void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    unint64_t v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v9 = v8 - 1;
  }
  unint64_t v10 = v9 >> 6;
  if (v8 >= 0x41) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  *(void *)(*a1 + 8 * v11) = 0;
LABEL_10:
  int v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v13 = 0;
    int v14 = 0;
    long long v15 = &v5[v6 >> 6];
    int v16 = v7 & 0x3F;
    unint64_t v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      uint64_t v18 = 1 << v16;
      if ((*v5 >> v14)) {
        uint64_t v19 = *v17 | v18;
      }
      else {
        uint64_t v19 = *v17 & ~v18;
      }
      uint64_t *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63) {
        int v14 = 0;
      }
      v17 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        ++v16;
      }
      int v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void ca::concurrent::deferred_deletion_stash<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C0640;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C0640;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void AUFIREngineKernel::AUFIREngineKernel(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  unsigned int v10 = 1 << -(char)__clz(2 * a4 - 1);
  *(_DWORD *)(a1 + 12) = -1431655765 * ((unint64_t)(a5[1] - *a5) >> 3);
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v10 >> 1;
  *(float *)(a1 + 24) = 1.0 / (float)v10;
  *(void *)(a1 + 32) = 0;
  unint64_t v11 = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (a2)
  {
    int v12 = (char *)operator new(16 * a2);
    *(void *)(a1 + 32) = v12;
    int v13 = &v12[16 * v11];
    *(void *)(a1 + 48) = v13;
    bzero(v12, 16 * v11);
    *(void *)(a1 + 40) = v13;
  }
  std::vector<std::span<float,18446744073709551615ul>>::vector((void *)(a1 + 56), a3);
  std::vector<float>::vector((void *)(a1 + 80), *(unsigned int *)(a1 + 16));
  CDSPSplitComplex::CDSPSplitComplex((CDSPSplitComplex *)(a1 + 104), *(unsigned int *)(a1 + 20));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  __p = (void *)(a1 + 152);
  LOBYTE(v20) = 0;
  if (a2)
  {
    int v14 = (char *)operator new(56 * v11);
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 168) = &v14[56 * v11];
    bzero(v14, 56 * ((56 * v11 - 56) / 0x38) + 56);
    *(void *)(a1 + 160) = &v14[56 * ((56 * v11 - 56) / 0x38) + 56];
  }
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = &unk_1F14C0640;
  *(void *)(a1 + 256) = &unk_1F14C0660;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 320));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)(a1 + 1280));
  *(unsigned char *)(a1 + 2241) = 0;
  *(void *)(a1 + 2304) = 0;
  int v18 = 1065353216;
  std::vector<float>::vector(&__p, a3, &v18);
  std::vector<std::vector<float>>::vector((void *)(a1 + 2312), v11, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
  LOBYTE(v18) = 0;
  std::vector<BOOL>::vector(&__p, a3, (unsigned __int8 *)&v18);
  std::vector<std::vector<BOOL>>::vector((void *)(a1 + 2336), v11, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  LOBYTE(v18) = 0;
  std::vector<BOOL>::vector(&__p, a3, (unsigned __int8 *)&v18);
  std::vector<std::vector<BOOL>>::vector((void *)(a1 + 2360), v11, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  *(_OWORD *)(a1 + 2384) = 0u;
  AUFIREngineKernel::XfadeChannel::XfadeChannel((AUFIREngineKernel::XfadeChannel *)(a1 + 2400), a2, a3, a4);
  long long v15 = AUFIREngineKernel::XfadeChannel::XfadeChannel((AUFIREngineKernel::XfadeChannel *)(a1 + 2552), a2, a3, a4);
  *(_DWORD *)(a1 + 2704) = 0;
  uint64_t v16 = caulk::concurrent::messenger::shared_high_priority(v15);
  MEMORY[0x1C185C230](a1 + 2712, 0, v16);
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        MultiRadixRealFFT::Initialize((MultiRadixRealFFT *)(a1 + 136), *(_DWORD *)(a1 + 16));
        *(_DWORD *)(a1 + 2384) = 0;
        AUFIREngineKernel::SetMatrixFIRs((_DWORD *)a1, a5);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "blockSize");
    }
    else
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "numChannelsOut");
    }
  }
  else
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "numChannelsIn");
  }
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
}

void sub_1BB50A350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, CDSPSplitComplex *a15, void **a16, void **a17, void **a18, uint64_t a19, void *__p,uint64_t a21)
{
  __cxa_free_exception(v22);
  MEMORY[0x1C185C240](v24);
  uint64_t v26 = 0;
  while (1)
  {
    uint64_t v27 = &v21[v26];
    __p = &v21[v26 + 334];
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = &v21[v26 + 330];
    std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v28 = (std::__shared_weak_count *)v21[v26 + 329];
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    int v29 = (void *)v27[325];
    if (v29)
    {
      v21[v26 + 326] = v29;
      operator delete(v29);
    }
    uint64_t v30 = (void *)v21[v26 + 322];
    if (v30)
    {
      v21[v26 + 323] = v30;
      operator delete(v30);
    }
    __p = v27 + 319;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v26 -= 19;
    if (v26 == -38)
    {
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = a10;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *a13 = a12;
      ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue(a11);
      std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100](v23, 0);
      __p = a14;
      std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      int v31 = (std::__shared_weak_count *)v21[18];
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      CDSPSplitComplex::~CDSPSplitComplex(a15);
      BOOL v32 = *a16;
      if (*a16)
      {
        v21[11] = v32;
        operator delete(v32);
      }
      uint64_t v33 = *a17;
      if (*a17)
      {
        v21[8] = v33;
        operator delete(v33);
      }
      __int16 v34 = *a18;
      if (*a18)
      {
        v21[5] = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
}

void AUFIREngineKernel::ProcessXfadeChannel(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a1 + 4))
  {
    int v6 = a6;
    uint64_t v7 = a4;
    uint64_t v8 = a2;
    unint64_t v10 = 0;
    uint64_t v11 = a3;
    unsigned int v52 = (void *)(**(void **)(a2 + 72) + 24 * a3);
    int v12 = (const DSPSplitComplex *)(a1 + 104);
    uint64_t v50 = (const vDSP_DFT_SetupStruct ***)(a1 + 136);
    uint64_t v47 = a3;
    do
    {
      float v54 = 0.0;
      float v13 = *(float *)(v8 + 112) * *(float *)(*(void *)(*(void *)(v8 + 120) + 24 * v11) + 4 * v10);
      float v54 = v13;
      uint64_t v14 = *(void *)(*(void *)(v8 + 88) + 24 * v11);
      int v15 = *(_DWORD *)(v14 + 8 * v10);
      if (v15 == 2)
      {
        uint64_t v17 = *(void *)(a1 + 152);
        int v18 = (uint64_t *)(*v52 + 32 * v10);
        float __B = v13;
        uint64_t v19 = *v18;
        if (*v18 == v18[1]) {
          __assert_rtn("ProcessFilter", "AUFIREngineKernel.cpp", 353, "!filter.mIRBlockFFTs.empty()");
        }
        unint64_t v20 = 0;
        unsigned int v21 = 0;
        unsigned int v53 = (float **)(v7 + 16 * v10);
        uint64_t v22 = v17 + 56 * v11;
        unint64_t v23 = (void *)(v22 + 24);
        uint64_t v24 = (void *)(v22 + 32);
        uint64_t v25 = (_DWORD *)(v22 + 48);
        do
        {
          unint64_t v26 = (uint64_t)(*v24 - *v23) >> 5;
          if (v26 <= v21) {
            __assert_rtn("GetPastInputBlock", "AUFIREngineKernel.cpp", 405, "block < blockCount");
          }
          uint64_t v27 = (const DSPSplitComplex *)(v19 + 32 * v20);
          unsigned int v28 = v21;
          unsigned int v29 = v26 + ~v21 + *v25;
          if (v26 <= v29) {
            int v30 = (uint64_t)(*v24 - *v23) >> 5;
          }
          else {
            int v30 = 0;
          }
          uint64_t v31 = v29 - v30;
          BOOL v32 = (const DSPSplitComplex *)(*v23 + 32 * v31);
          if (v21)
          {
            float v33 = **(float **)(a1 + 104);
            float v34 = **(float **)(a1 + 112);
            vDSP_zvma(v27, 1, v32, 1, v12, 1, v12, 1, *(unsigned int *)(a1 + 20));
            imagp = v27->imagp;
            __int16 v36 = v32->imagp;
            **(float **)(a1 + 104) = v33 + (float)(*v27->realp * *v32->realp);
            float v37 = v34 + (float)(*imagp * *v36);
          }
          else
          {
            vDSP_zvmul(v27, 1, (const DSPSplitComplex *)(*v23 + 32 * v31), 1, v12, 1, *(unsigned int *)(a1 + 20), 1);
            uint64_t v38 = v27->imagp;
            __int16 v39 = v32->imagp;
            **(float **)(a1 + 104) = *v27->realp * *v32->realp;
            float v37 = *v38 * *v39;
          }
          **(float **)(a1 + 112) = v37;
          unint64_t v20 = v28 + 1;
          uint64_t v19 = *v18;
          unsigned int v21 = v28 + 1;
        }
        while (v20 < (v18[1] - *v18) >> 5);
        uint64_t v40 = *(unsigned int *)(a1 + 8);
        MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v50, v12, *(DSPComplex **)(a1 + 80));
        __int16 v41 = (const float *)(*(void *)(a1 + 80) + 4 * v40);
        __int16 v42 = *v53;
        vDSP_Length v43 = *(unsigned int *)(a1 + 8);
        int v6 = a6;
        if (a6) {
          vDSP_vsma(v41, 1, &__B, v42, 1, *v53, 1, v43);
        }
        else {
          vDSP_vsmul(v41, 1, &__B, v42, 1, v43);
        }
        uint64_t v8 = a2;
        uint64_t v7 = a4;
        uint64_t v11 = v47;
      }
      else if (v15 == 1)
      {
        vDSP_Length v44 = *(unsigned int *)(a1 + 8);
        uint64_t v45 = (const float *)(*(void *)(*(void *)(a1 + 152) + 56 * v11)
                            + 4 * v44
                            - 4 * *(unsigned int *)(v14 + 8 * v10 + 4));
        uint64_t v46 = *(float **)(v7 + 16 * v10);
        if (v6) {
          vDSP_vsma(v45, 1, &v54, v46, 1, *(float **)(v7 + 16 * v10), 1, v44);
        }
        else {
          vDSP_vsmul(v45, 1, &v54, v46, 1, *(unsigned int *)(a1 + 8));
        }
      }
      else
      {
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v6 == 0;
        }
        if (v16) {
          vDSP_vclr(*(float **)(v7 + 16 * v10), 1, *(unsigned int *)(a1 + 8));
        }
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 4));
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(uint64_t a1)
{
  float v5 = (void **)(a1 + 80);
  std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>(v4);
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void CartesianPanner::~CartesianPanner(CartesianPanner *this)
{
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 29) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 19);
  if (v5)
  {
    *((void *)this + 20) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 16);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 17);
    uint64_t v8 = (void *)*((void *)this + 16);
    if (v7 != v6)
    {
      do
      {
        v7 -= 104;
        std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(v7);
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v6;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    *((void *)this + 14) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
  float v13 = (void **)((char *)this + 8);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v13);
}

uint64_t CartesianPanner::initialize(uint64_t a1, int a2, int a3)
{
  *(void *)&long long v202 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1) {
    return 4294956447;
  }
  uint64_t result = 4294956428;
  if (a2 > 8126469)
  {
    if (a2 > 12648463)
    {
      if (a2 > 12779529)
      {
        if (a2 == 12779530)
        {
          *(_DWORD *)(a1 + 4) = 9;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Ltf");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rtf");
          std::string::basic_string[abi:ne180100]<0>(&v194, "Ltr");
          std::string::basic_string[abi:ne180100]<0>(v195, "Rtr");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v196, 9uLL);
          for (uint64_t i = 0; i != -27; i -= 3)
          {
            if (SHIBYTE(v195[i + 2]) < 0) {
              operator delete((void *)v195[i]);
            }
          }
          *(_OWORD *)__p = xmmword_1BB8992A8;
          *(_OWORD *)&__p[16] = unk_1BB8992B8;
          *(_DWORD *)&__p[32] = 1056964608;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8992CC;
          *(_OWORD *)&__p[16] = *(_OWORD *)algn_1BB8992DC;
          *(_DWORD *)&__p[32] = -1090519040;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8992F0;
          *(_OWORD *)&__p[16] = unk_1BB899300;
          *(_DWORD *)&__p[32] = 1065353216;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8993F0;
          *(_OWORD *)&__p[16] = unk_1BB899400;
          *(_DWORD *)&__p[32] = 9;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[36], 9uLL);
        }
        else
        {
          if (a2 != 12845066) {
            return result;
          }
          *(_DWORD *)(a1 + 4) = 9;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
          std::string::basic_string[abi:ne180100]<0>(&v194, "Ltm");
          std::string::basic_string[abi:ne180100]<0>(v195, "Rtm");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v196, 9uLL);
          for (uint64_t j = 0; j != -27; j -= 3)
          {
            if (SHIBYTE(v195[j + 2]) < 0) {
              operator delete((void *)v195[j]);
            }
          }
          *(_OWORD *)__p = xmmword_1BB899384;
          *(_OWORD *)&__p[16] = unk_1BB899394;
          *(_DWORD *)&__p[32] = 1056964608;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8993A8;
          *(_OWORD *)&__p[16] = unk_1BB8993B8;
          *(_DWORD *)&__p[32] = 0;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8993CC;
          *(_OWORD *)&__p[16] = *(_OWORD *)algn_1BB8993DC;
          *(_DWORD *)&__p[32] = 1065353216;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[36], 9uLL);
          *(_OWORD *)__p = xmmword_1BB8993F0;
          *(_OWORD *)&__p[16] = unk_1BB899400;
          *(_DWORD *)&__p[32] = 9;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[36], 9uLL);
        }
      }
      else if (a2 == 12648464)
      {
        *(_DWORD *)(a1 + 4) = 15;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lw");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rw");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v194, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v195, "Rrs");
        std::string::basic_string[abi:ne180100]<0>(&v196, "Ltf");
        std::string::basic_string[abi:ne180100]<0>(v197, "Rtf");
        std::string::basic_string[abi:ne180100]<0>(&v198, "Ltm");
        std::string::basic_string[abi:ne180100]<0>(v199, "Rtm");
        std::string::basic_string[abi:ne180100]<0>(v200, "Ltr");
        std::string::basic_string[abi:ne180100]<0>(v201, "Rtr");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v202, 0xFuLL);
        uint64_t v17 = 360;
        do
        {
          if ((char)__p[v17 - 1] < 0) {
            operator delete(*(void **)&v185[v17 + 8]);
          }
          v17 -= 24;
        }
        while (v17);
        *(_OWORD *)__p = xmmword_1BB8994C4;
        *(_OWORD *)&__p[16] = unk_1BB8994D4;
        *(_OWORD *)&__p[32] = xmmword_1BB8994E4;
        *(_OWORD *)&__p[44] = *(long long *)((char *)&xmmword_1BB8994E4 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[60], 0xFuLL);
        *(_OWORD *)__p = xmmword_1BB899500;
        *(_OWORD *)&__p[16] = unk_1BB899510;
        *(_OWORD *)&__p[32] = xmmword_1BB899520;
        *(_OWORD *)&__p[44] = *(long long *)((char *)&xmmword_1BB899520 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[60], 0xFuLL);
        memset(__p, 0, 32);
        *(_OWORD *)&__p[32] = xmmword_1BB89955C;
        *(_OWORD *)&__p[44] = *(long long *)((char *)&xmmword_1BB89955C + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[60], 0xFuLL);
        *(_OWORD *)__p = xmmword_1BB899578;
        *(_OWORD *)&__p[16] = unk_1BB899588;
        *(_OWORD *)&__p[32] = xmmword_1BB899598;
        *(_OWORD *)&__p[44] = *(long long *)((char *)&xmmword_1BB899598 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[60], 0xFuLL);
      }
      else
      {
        if (a2 != 12713992) {
          return result;
        }
        *(_DWORD *)(a1 + 4) = 7;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Ltm");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rtm");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
        for (uint64_t k = 0; k != -21; k -= 3)
        {
          if (SHIBYTE(v193[k + 2]) < 0) {
            operator delete((void *)v193[k]);
          }
        }
        *(_OWORD *)__p = xmmword_1BB899254;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899254 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1BB899270;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899270 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1BB89928C;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB89928C + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1BB899368;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899368 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
      }
    }
    else
    {
      if (a2 <= 10485767)
      {
        if (a2 != 8126470)
        {
          if (a2 != 8388616) {
            return result;
          }
          *(_DWORD *)(a1 + 4) = 7;
          std::string::basic_string[abi:ne180100]<0>(__p, "L");
          std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
          std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
          std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
          std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
          std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
          std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
          for (uint64_t m = 0; m != -21; m -= 3)
          {
            if (SHIBYTE(v193[m + 2]) < 0) {
              operator delete((void *)v193[m]);
            }
          }
          *(_OWORD *)__p = xmmword_1BB899330;
          *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899330 + 12);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
          *(_OWORD *)__p = xmmword_1BB89934C;
          *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB89934C + 12);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
          memset(__p, 0, 28);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
          *(_OWORD *)__p = xmmword_1BB899368;
          *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899368 + 12);
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
          goto LABEL_99;
        }
        *(_DWORD *)(a1 + 4) = 5;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
        for (uint64_t n = 0; n != -15; n -= 3)
        {
          if (SHIBYTE(v191[n + 2]) < 0) {
            operator delete((void *)v191[n]);
          }
        }
LABEL_63:
        *(_OWORD *)__p = xmmword_1BB899218;
        *(_DWORD *)&__p[16] = 1065353216;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
        *(_OWORD *)__p = xmmword_1BB89922C;
        *(_DWORD *)&__p[16] = 0;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
        memset(__p, 0, 20);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
        *(_OWORD *)__p = xmmword_1BB899240;
        *(_DWORD *)&__p[16] = 4;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
        goto LABEL_99;
      }
      if (a2 == 10485768)
      {
        *(_DWORD *)(a1 + 4) = 7;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v194, 7uLL);
        for (iuint64_t i = 0; ii != -21; ii -= 3)
        {
          if (SHIBYTE(v193[ii + 2]) < 0) {
            operator delete((void *)v193[ii]);
          }
        }
        *(_OWORD *)__p = xmmword_1BB899330;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899330 + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1BB89934C;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB89934C + 12);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[28], 7uLL);
        memset(__p, 0, 28);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[28], 7uLL);
        *(_OWORD *)__p = xmmword_1BB899314;
        *(_OWORD *)&unsigned char __p[12] = *(long long *)((char *)&xmmword_1BB899314 + 12);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[28], 7uLL);
      }
      else
      {
        if (a2 != 12582924) {
          return result;
        }
        *(_DWORD *)(a1 + 4) = 11;
        std::string::basic_string[abi:ne180100]<0>(__p, "L");
        std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
        std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
        std::string::basic_string[abi:ne180100]<0>(&v189, "Lss");
        std::string::basic_string[abi:ne180100]<0>(v191, "Rss");
        std::string::basic_string[abi:ne180100]<0>(&v192, "Lrs");
        std::string::basic_string[abi:ne180100]<0>(v193, "Rrs");
        std::string::basic_string[abi:ne180100]<0>(&v194, "Ltf");
        std::string::basic_string[abi:ne180100]<0>(v195, "Rtf");
        std::string::basic_string[abi:ne180100]<0>(&v196, "Ltr");
        std::string::basic_string[abi:ne180100]<0>(v197, "Rtr");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v198, 0xBuLL);
        uint64_t v11 = 264;
        do
        {
          if ((char)__p[v11 - 1] < 0) {
            operator delete(*(void **)&v185[v11 + 8]);
          }
          v11 -= 24;
        }
        while (v11);
        *(_OWORD *)__p = xmmword_1BB899414;
        *(_OWORD *)&__p[16] = unk_1BB899424;
        *(_OWORD *)&__p[28] = unk_1BB899430;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1BB899440;
        *(_OWORD *)&__p[16] = unk_1BB899450;
        *(_OWORD *)&__p[28] = unk_1BB89945C;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1BB89946C;
        *(_OWORD *)&__p[16] = *(_OWORD *)algn_1BB89947C;
        *(_OWORD *)&__p[28] = unk_1BB899488;
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[44], 0xBuLL);
        *(_OWORD *)__p = xmmword_1BB899498;
        *(_OWORD *)&__p[16] = unk_1BB8994A8;
        *(_OWORD *)&__p[28] = unk_1BB8994B4;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[44], 0xBuLL);
      }
    }
    goto LABEL_99;
  }
  if (a2 <= 7864324)
  {
    if (a2 == 7667717)
    {
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (juint64_t j = 0; jj != -15; jj -= 3)
      {
        if (SHIBYTE(v191[jj + 2]) < 0) {
          operator delete((void *)v191[jj]);
        }
      }
      *(_OWORD *)__p = xmmword_1BB899218;
      *(_DWORD *)&__p[16] = 1065353216;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1BB89922C;
      *(_DWORD *)&__p[16] = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
      memset(__p, 0, 20);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1BB8991C8;
      *(_DWORD *)&__p[16] = 4;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
      goto LABEL_99;
    }
    if (a2 != 7733253)
    {
      if (a2 != 7798789) {
        return result;
      }
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (kuint64_t k = 0; kk != -15; kk -= 3)
      {
        if (SHIBYTE(v191[kk + 2]) < 0) {
          operator delete((void *)v191[kk]);
        }
      }
LABEL_37:
      *(_OWORD *)__p = xmmword_1BB899218;
      *(_DWORD *)&__p[16] = 1065353216;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1BB89922C;
      *(_DWORD *)&__p[16] = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
      memset(__p, 0, 20);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
      *(_OWORD *)__p = xmmword_1BB899204;
      *(_DWORD *)&__p[16] = 4;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
      goto LABEL_99;
    }
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (muint64_t m = 0; mm != -15; mm -= 3)
    {
      if (SHIBYTE(v191[mm + 2]) < 0) {
        operator delete((void *)v191[mm]);
      }
    }
LABEL_68:
    *(_OWORD *)__p = xmmword_1BB899218;
    *(_DWORD *)&__p[16] = 1065353216;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
    *(_OWORD *)__p = xmmword_1BB89922C;
    *(_DWORD *)&__p[16] = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
    memset(__p, 0, 20);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
    *(_OWORD *)__p = xmmword_1BB8991F0;
    *(_DWORD *)&__p[16] = 3;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
    goto LABEL_99;
  }
  if (a2 > 7995397)
  {
    if (a2 != 7995398)
    {
      if (a2 != 8060934) {
        return result;
      }
      *(_DWORD *)(a1 + 4) = 5;
      std::string::basic_string[abi:ne180100]<0>(__p, "L");
      std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
      std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
      std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
      std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
      for (uint64_t nn = 0; nn != -15; nn -= 3)
      {
        if (SHIBYTE(v191[nn + 2]) < 0) {
          operator delete((void *)v191[nn]);
        }
      }
      goto LABEL_37;
    }
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (uint64_t i1 = 0; i1 != -15; i1 -= 3)
    {
      if (SHIBYTE(v191[i1 + 2]) < 0) {
        operator delete((void *)v191[i1]);
      }
    }
    goto LABEL_68;
  }
  if (a2 == 7864325)
  {
    *(_DWORD *)(a1 + 4) = 5;
    std::string::basic_string[abi:ne180100]<0>(__p, "L");
    std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
    std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
    std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
    std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
    for (uint64_t i2 = 0; i2 != -15; i2 -= 3)
    {
      if (SHIBYTE(v191[i2 + 2]) < 0) {
        operator delete((void *)v191[i2]);
      }
    }
    goto LABEL_63;
  }
  if (a2 != 7929862) {
    return result;
  }
  *(_DWORD *)(a1 + 4) = 5;
  std::string::basic_string[abi:ne180100]<0>(__p, "L");
  std::string::basic_string[abi:ne180100]<0>(&__p[24], "R");
  std::string::basic_string[abi:ne180100]<0>(&__p[48], "C");
  std::string::basic_string[abi:ne180100]<0>(&v189, "Ls");
  std::string::basic_string[abi:ne180100]<0>(v191, "Rs");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)(a1 + 8), (std::string *)__p, &v192, 5uLL);
  for (uint64_t i3 = 0; i3 != -15; i3 -= 3)
  {
    if (SHIBYTE(v191[i3 + 2]) < 0) {
      operator delete((void *)v191[i3]);
    }
  }
  *(_OWORD *)__p = xmmword_1BB899218;
  *(_DWORD *)&__p[16] = 1065353216;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 32), __p, (uint64_t)&__p[20], 5uLL);
  *(_OWORD *)__p = xmmword_1BB89922C;
  *(_DWORD *)&__p[16] = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), __p, (uint64_t)&__p[20], 5uLL);
  memset(__p, 0, 20);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), __p, (uint64_t)&__p[20], 5uLL);
  *(_OWORD *)__p = xmmword_1BB8991DC;
  *(_DWORD *)&__p[16] = 5;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(a1 + 104), __p, (uint64_t)&__p[20], 5uLL);
LABEL_99:
  memset(__p, 0, 24);
  int v158 = a3;
  AUSM::ExclusionZone::getPreset(a3, (void **)__p);
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = a1;
  uint64_t v24 = *(AUSM::ExclusionZone **)__p;
  if (v21 != v22)
  {
    uint64_t v25 = *(void *)(a1 + 104);
    unint64_t v26 = *(float **)(a1 + 80);
    uint64_t v27 = *(float **)(v23 + 56);
    unsigned int v28 = *(float **)(v23 + 32);
    unsigned int v29 = *(AUSM::ExclusionZone **)&__p[8];
    int v166 = *(AUSM::ExclusionZone **)__p;
    do
    {
      float v30 = *v28;
      float v31 = *v27;
      float v32 = *v26;
      float v33 = atan2f(*v28, *v27);
      float v34 = hypotf(v30, v31);
      float v36 = atan2f(v32, v34);
      if (v24 == v29)
      {
LABEL_105:
        v21 += 24;
        ++v28;
        ++v27;
        ++v26;
        v25 += 4;
      }
      else
      {
        float v37 = v33 * 57.296;
        float v38 = v36 * 57.296;
        __int16 v39 = v24;
        while (!AUSM::ExclusionZone::isInExclusionZone(v39, v37, v38, v35))
        {
          __int16 v39 = (AUSM::ExclusionZone *)((char *)v39 + 28);
          if (v39 == v29) {
            goto LABEL_105;
          }
        }
        uint64_t v40 = v21;
        if (v21 + 24 != v22)
        {
          do
          {
            if (*(char *)(v40 + 23) < 0) {
              operator delete(*(void **)v40);
            }
            *(_OWORD *)uint64_t v40 = *(_OWORD *)(v40 + 24);
            *(void *)(v40 + 16) = *(void *)(v40 + 40);
            *(unsigned char *)(v40 + 47) = 0;
            uint64_t v41 = v40 + 48;
            *(unsigned char *)(v40 + 24) = 0;
            v40 += 24;
          }
          while (v41 != v22);
          uint64_t v22 = *(void *)(v23 + 16);
        }
        while (v22 != v40)
        {
          if (*(char *)(v22 - 1) < 0) {
            operator delete(*(void **)(v22 - 24));
          }
          v22 -= 24;
        }
        *(void *)(v23 + 16) = v40;
        __int16 v42 = *(float **)(v23 + 40);
        int64_t v43 = (char *)v42 - (char *)(v28 + 1);
        if (v42 != v28 + 1) {
          memmove(v28, v28 + 1, (char *)v42 - (char *)(v28 + 1));
        }
        *(void *)(v23 + 40) = (char *)v28 + v43;
        vDSP_Length v44 = *(float **)(v23 + 64);
        int64_t v45 = (char *)v44 - (char *)(v27 + 1);
        uint64_t v24 = v166;
        if (v44 != v27 + 1) {
          memmove(v27, v27 + 1, (char *)v44 - (char *)(v27 + 1));
        }
        *(void *)(v23 + 64) = (char *)v27 + v45;
        uint64_t v46 = *(char **)(v23 + 88);
        int64_t v47 = v46 - (char *)(v26 + 1);
        if (v46 != (char *)(v26 + 1)) {
          memmove(v26, v26 + 1, v46 - (char *)(v26 + 1));
        }
        *(void *)(v23 + 88) = (char *)v26 + v47;
        uint64_t v48 = *(void *)(v23 + 112);
        uint64_t v49 = v48 - (v25 + 4);
        if (v48 != v25 + 4) {
          memmove((void *)v25, (const void *)(v25 + 4), v48 - (v25 + 4));
        }
        *(void *)(v23 + 112) = v25 + v49;
        --*(_DWORD *)(v23 + 4);
        uint64_t v22 = *(void *)(v23 + 16);
      }
    }
    while (v21 != v22);
  }
  if (v24) {
    operator delete(v24);
  }
  long long v181 = 0;
  long long v182 = 0;
  uint64_t v183 = 0;
  uint64_t v50 = v23;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v181, *(const void **)(v23 + 80), *(void *)(v23 + 88), (uint64_t)(*(void *)(v23 + 88) - *(void *)(v23 + 80)) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  unsigned int v51 = v181;
  unsigned int v52 = v182;
  if (v181 != v182)
  {
    unsigned int v53 = v181 + 1;
    while (v53 != v182)
    {
      float v54 = v53 - 1;
      float v55 = *(v53 - 1);
      float v56 = *v53++;
      if (v55 == v56)
      {
        for (i4 = v54 + 2; i4 != v52; ++i4)
        {
          float v58 = *i4;
          if (v55 != *i4)
          {
            v54[1] = v58;
            ++v54;
            float v55 = v58;
          }
        }
        unsigned int v52 = v54 + 1;
        break;
      }
    }
    if (v51 != v52)
    {
      v159 = v52;
      do
      {
        UInt64 v160 = v51;
        float v59 = *v51;
        Float64 v178 = 0;
        unsigned int v179 = 0;
        unint64_t v180 = 0;
        long long v61 = *(float **)(v50 + 80);
        long long v60 = *(float **)(v50 + 88);
        if (v61 == v60)
        {
          v62 = 0;
          uint64_t v66 = 0;
        }
        else
        {
          v62 = 0;
          long long v63 = 0;
          unint64_t v64 = 0;
          do
          {
            if (*v61 == v59)
            {
              uint64_t v65 = ((uint64_t)v61 - *(void *)(v50 + 80)) >> 2;
              if ((unint64_t)v63 >= v64)
              {
                uint64_t v67 = v63 - v62;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62) {
LABEL_320:
                }
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                v69 = v62;
                if ((uint64_t)(v64 - (void)v62) >> 1 > v68) {
                  unint64_t v68 = (uint64_t)(v64 - (void)v62) >> 1;
                }
                if (v64 - (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v70 = v68;
                }
                if (v70) {
                  unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v70);
                }
                else {
                  uint64_t v71 = 0;
                }
                uint64_t v50 = v23;
                v62 = (_DWORD *)(v70 + 4 * v67);
                _DWORD *v62 = v65;
                uint64_t v66 = (uint64_t)(v62 + 1);
                while (v63 != v69)
                {
                  int v72 = *--v63;
                  *--v62 = v72;
                }
                unint64_t v64 = v70 + 4 * v71;
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *long long v63 = v65;
                uint64_t v66 = (uint64_t)(v63 + 1);
              }
              uint64_t v73 = *(void *)(v50 + 56);
              UInt64 v74 = v179;
              if ((unint64_t)v179 >= v180)
              {
                uint64_t v76 = v178;
                uint64_t v77 = ((char *)v179 - (unsigned char *)v178) >> 2;
                unint64_t v78 = v77 + 1;
                if ((unint64_t)(v77 + 1) >> 62) {
LABEL_321:
                }
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                uint64_t v79 = v180 - (void)v178;
                if ((uint64_t)(v180 - (void)v178) >> 1 > v78) {
                  unint64_t v78 = v79 >> 1;
                }
                if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v80 = v78;
                }
                if (v80)
                {
                  v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v180, v80);
                  uint64_t v76 = v178;
                  UInt64 v74 = v179;
                }
                else
                {
                  v81 = 0;
                }
                v82 = &v81[4 * v77];
                *(_DWORD *)v82 = *(_DWORD *)(v73 + 4 * v65);
                uint64_t v75 = v82 + 4;
                while (v74 != v76)
                {
                  int v83 = *--v74;
                  *((_DWORD *)v82 - 1) = v83;
                  v82 -= 4;
                }
                Float64 v178 = v82;
                unsigned int v179 = v75;
                unint64_t v180 = (unint64_t)&v81[4 * v80];
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                *unsigned int v179 = *(_DWORD *)(v73 + 4 * v65);
                uint64_t v75 = v74 + 1;
              }
              unsigned int v179 = v75;
              long long v60 = *(float **)(v50 + 88);
              long long v63 = (_DWORD *)v66;
            }
            else
            {
              uint64_t v66 = (uint64_t)v63;
            }
            ++v61;
          }
          while (v61 != v60);
        }
        *(_DWORD *)__p = 0;
        unint64_t v161 = (v66 - (uint64_t)v62) >> 2;
        std::vector<float>::vector(&v176, v161, __p);
        memset(v175, 0, 24);
        uint64_t v172 = 0;
        v173 = 0;
        uint64_t v174 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v172, v178, (uint64_t)v179, ((char *)v179 - (unsigned char *)v178) >> 2);
        std::__sort<std::__less<float,float> &,float *>();
        long long v85 = (float *)v172;
        uint64_t v84 = v173;
        v165 = v62;
        if (v172 != v173)
        {
          long long v86 = (float *)((char *)v172 + 4);
          while (v86 != v173)
          {
            AudioUnit v87 = v86 - 1;
            float v88 = *(v86 - 1);
            float v89 = *v86++;
            if (v88 == v89)
            {
              for (i5 = v87 + 2; i5 != v84; ++i5)
              {
                float v91 = *i5;
                if (v88 != *i5)
                {
                  v87[1] = v91;
                  ++v87;
                  float v88 = v91;
                }
              }
              uint64_t v84 = v87 + 1;
              break;
            }
          }
          for (i6 = v84; v85 != i6; v62 = v165)
          {
            float v92 = *v85;
            BOOL v169 = 0;
            int v170 = 0;
            unint64_t v171 = 0;
            if (v62 == (_DWORD *)v66)
            {
              v94 = 0;
              uint64_t v98 = 0;
            }
            else
            {
              v93 = v62;
              v94 = 0;
              uint64_t v95 = 0;
              unint64_t v96 = 0;
              do
              {
                int v97 = *v93;
                if (*(float *)(*(void *)(v23 + 56) + 4 * *v93) == v92)
                {
                  if ((unint64_t)v95 >= v96)
                  {
                    uint64_t v99 = (v95 - v94) >> 2;
                    unint64_t v100 = v99 + 1;
                    if ((unint64_t)(v99 + 1) >> 62) {
                      goto LABEL_320;
                    }
                    if ((uint64_t)(v96 - (void)v94) >> 1 > v100) {
                      unint64_t v100 = (uint64_t)(v96 - (void)v94) >> 1;
                    }
                    if (v96 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v101 = v100;
                    }
                    if (v101) {
                      unint64_t v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v101);
                    }
                    else {
                      uint64_t v102 = 0;
                    }
                    uint64_t v103 = (char *)(v101 + 4 * v99);
                    *(_DWORD *)uint64_t v103 = v97;
                    uint64_t v98 = (uint64_t)(v103 + 4);
                    while (v95 != v94)
                    {
                      int v104 = *((_DWORD *)v95 - 1);
                      v95 -= 4;
                      *((_DWORD *)v103 - 1) = v104;
                      v103 -= 4;
                    }
                    unint64_t v96 = v101 + 4 * v102;
                    if (v94) {
                      operator delete(v94);
                    }
                    v94 = v103;
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v95 = v97;
                    uint64_t v98 = (uint64_t)(v95 + 4);
                  }
                  uint64_t v105 = v97;
                  uint64_t v106 = *(void *)(v23 + 32);
                  v107 = v170;
                  if ((unint64_t)v170 >= v171)
                  {
                    v109 = v169;
                    uint64_t v110 = ((char *)v170 - (unsigned char *)v169) >> 2;
                    unint64_t v111 = v110 + 1;
                    if ((unint64_t)(v110 + 1) >> 62) {
                      goto LABEL_321;
                    }
                    uint64_t v112 = v171 - (void)v169;
                    if ((uint64_t)(v171 - (void)v169) >> 1 > v111) {
                      unint64_t v111 = v112 >> 1;
                    }
                    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v113 = v111;
                    }
                    if (v113)
                    {
                      v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v171, v113);
                      v109 = v169;
                      v107 = v170;
                    }
                    else
                    {
                      v114 = 0;
                    }
                    uint64_t v115 = &v114[4 * v110];
                    *(_DWORD *)uint64_t v115 = *(_DWORD *)(v106 + 4 * v105);
                    int v108 = v115 + 4;
                    while (v107 != v109)
                    {
                      int v116 = *--v107;
                      *((_DWORD *)v115 - 1) = v116;
                      v115 -= 4;
                    }
                    BOOL v169 = v115;
                    int v170 = v108;
                    unint64_t v171 = (unint64_t)&v114[4 * v113];
                    if (v109) {
                      operator delete(v109);
                    }
                  }
                  else
                  {
                    *int v170 = *(_DWORD *)(v106 + 4 * v97);
                    int v108 = v107 + 1;
                  }
                  int v170 = v108;
                  uint64_t v95 = (char *)v98;
                }
                else
                {
                  uint64_t v98 = (uint64_t)v95;
                }
                ++v93;
              }
              while (v93 != (int *)v66);
            }
            *(_DWORD *)__p = 0;
            std::vector<float>::vector(&v167, (v98 - (uint64_t)v94) >> 2, __p);
            *(float *)__p = v92;
            memset(&__p[8], 0, 24);
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[8], v94, v98, (v98 - (uint64_t)v94) >> 2);
            memset(&__p[32], 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[32], v169, (uint64_t)v170, ((char *)v170 - (unsigned char *)v169) >> 2);
            *(void *)&__p[56] = 0;
            uint64_t v188 = 0;
            uint64_t v189 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[56], v167, (uint64_t)v168, (v168 - (unsigned char *)v167) >> 2);
            uint64_t v117 = *((void *)&v175[0] + 1);
            if (*((void *)&v175[0] + 1) >= *(void *)&v175[1])
            {
              unint64_t v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v175[0] + 1) - *(void *)&v175[0]) >> 4);
              unint64_t v120 = v119 + 1;
              if (v119 + 1 > 0x333333333333333) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(*(void *)&v175[1] - *(void *)&v175[0]) >> 4) > v120) {
                unint64_t v120 = 0x999999999999999ALL * ((uint64_t)(*(void *)&v175[1] - *(void *)&v175[0]) >> 4);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v175[1] - *(void *)&v175[0]) >> 4) >= 0x199999999999999) {
                unint64_t v121 = 0x333333333333333;
              }
              else {
                unint64_t v121 = v120;
              }
              uint64_t v186 = &v175[1];
              if (v121) {
                unint64_t v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(v121);
              }
              else {
                uint64_t v122 = 0;
              }
              long long v184 = (void **)v121;
              *(void *)long long v185 = v121 + 80 * v119;
              *(void *)&v185[8] = *(void *)v185;
              *(void *)&v185[16] = v121 + 80 * v122;
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(*(uint64_t *)v185, (uint64_t)__p);
              uint64_t v123 = *(void *)v185;
              *(void *)&v185[8] += 80;
              long long v124 = v175[0];
              for (uint64_t i7 = 80; ; i7 -= 80)
              {
                uint64_t v126 = v123 + i7;
                if (*((void *)&v124 + 1) + i7 - 80 == (void)v124) {
                  break;
                }
                uint64_t v127 = *((void *)&v124 + 1) + i7 - 160;
                std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(v126 - 160, v127);
              }
              uint64_t v128 = *(void *)&v175[1];
              uint64_t v162 = *(void *)&v185[8];
              long long v129 = *(_OWORD *)&v185[8];
              long long v130 = v175[0];
              *(void *)&v175[0] = v126 - 80;
              *(_OWORD *)long long v185 = v130;
              *(_OWORD *)((char *)v175 + 8) = v129;
              *(void *)&v185[16] = v128;
              long long v184 = (void **)v130;
              std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::~__split_buffer((uint64_t)&v184);
              uint64_t v118 = v162;
            }
            else
            {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(*((uint64_t *)&v175[0] + 1), (uint64_t)__p);
              uint64_t v118 = v117 + 80;
            }
            *((void *)&v175[0] + 1) = v118;
            if (*(void *)&__p[56])
            {
              uint64_t v188 = *(void *)&__p[56];
              operator delete(*(void **)&__p[56]);
            }
            if (*(void *)&__p[32])
            {
              *(void *)&__p[40] = *(void *)&__p[32];
              operator delete(*(void **)&__p[32]);
            }
            if (*(void *)&__p[8])
            {
              *(void *)&__p[16] = *(void *)&__p[8];
              operator delete(*(void **)&__p[8]);
            }
            if (v167)
            {
              uint64_t v168 = v167;
              operator delete(v167);
            }
            if (v169)
            {
              int v170 = v169;
              operator delete(v169);
            }
            if (v94) {
              operator delete(v94);
            }
            ++v85;
          }
        }
        *(float *)__p = v59;
        memset(&__p[8], 0, 24);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[8], v62, v66, v161);
        uint64_t v50 = v23;
        memset(&__p[32], 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[32], v178, (uint64_t)v179, ((char *)v179 - (unsigned char *)v178) >> 2);
        *(void *)&__p[56] = 0;
        uint64_t v188 = 0;
        uint64_t v189 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[56], v176, (uint64_t)v177, (v177 - (unsigned char *)v176) >> 2);
        v190[0] = 0;
        v190[1] = 0;
        v191[0] = 0;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>((uint64_t)v190, *(uint64_t *)&v175[0], *((uint64_t *)&v175[0] + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v175[0] + 1) - *(void *)&v175[0]) >> 4));
        unint64_t v132 = *(void *)(v23 + 136);
        unint64_t v131 = *(void *)(v23 + 144);
        if (v132 >= v131)
        {
          uint64_t v134 = *(void *)(v23 + 128);
          uint64_t v135 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v132 - v134) >> 3);
          unint64_t v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) > 0x276276276276276) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v137 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v131 - v134) >> 3);
          if (2 * v137 > v136) {
            unint64_t v136 = 2 * v137;
          }
          if (v137 >= 0x13B13B13B13B13BLL) {
            unint64_t v138 = 0x276276276276276;
          }
          else {
            unint64_t v138 = v136;
          }
          uint64_t v186 = (_OWORD *)(v23 + 144);
          if (v138)
          {
            if (v138 > 0x276276276276276) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v139 = (void **)operator new(104 * v138);
          }
          else
          {
            uint64_t v139 = 0;
          }
          long long v184 = v139;
          *(void *)long long v185 = &v139[13 * v135];
          *(void *)&v185[8] = *(void *)v185;
          *(void *)&v185[16] = &v139[13 * v138];
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(*(uint64_t *)v185, (uint64_t)__p);
          uint64_t v140 = 0;
          uint64_t v141 = *(void *)v185;
          *(void *)&v185[8] += 104;
          uint64_t v143 = *(void *)(v23 + 128);
          uint64_t v142 = *(void *)(v23 + 136);
          while (1)
          {
            uint64_t v144 = v141 + v140;
            uint64_t v145 = v142 + v140;
            if (v142 + v140 == v143) {
              break;
            }
            int v146 = *(_DWORD *)(v145 - 104);
            *(void *)(v144 - 96) = 0;
            uint64_t v147 = v144 - 96;
            *(_DWORD *)(v144 - 104) = v146;
            *(void *)(v147 + 8) = 0;
            *(void *)(v147 + 16) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v144 - 96), *(const void **)(v145 - 96), *(void *)(v145 - 88), (uint64_t)(*(void *)(v145 - 88) - *(void *)(v145 - 96)) >> 2);
            uint64_t v148 = v141 + v140;
            uint64_t v149 = v141 + v140;
            *(void *)(v149 - 72) = 0;
            *(void *)(v149 - 64) = 0;
            *(void *)(v141 + v140 - 56) = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v141 + v140 - 72), *(const void **)(v145 - 72), *(void *)(v145 - 64), (uint64_t)(*(void *)(v145 - 64) - *(void *)(v145 - 72)) >> 2);
            *(void *)(v148 - 48) = 0;
            *(void *)(v148 - 40) = 0;
            uint64_t v150 = (void *)(v141 + v140 - 48);
            v150[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v150, *(const void **)(v145 - 48), *(void *)(v145 - 40), (uint64_t)(*(void *)(v145 - 40) - *(void *)(v145 - 48)) >> 2);
            uint64_t v151 = v141 + v140;
            *(void *)(v151 - 24) = 0;
            *(void *)(v151 - 16) = 0;
            uint64_t v152 = v141 + v140 - 24;
            *(void *)(v152 + 16) = 0;
            v140 -= 104;
            std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>(v152, *(void *)(v145 - 24), *(void *)(v145 - 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v145 - 16) - *(void *)(v145 - 24)) >> 4));
          }
          uint64_t v50 = v23;
          uint64_t v153 = *(void *)(v23 + 144);
          unint64_t v164 = *(void *)&v185[8];
          long long v154 = *(_OWORD *)&v185[8];
          long long v155 = *(_OWORD *)(v23 + 128);
          *(void *)(v23 + 128) = v144;
          *(_OWORD *)long long v185 = v155;
          *(_OWORD *)(v23 + 136) = v154;
          *(void *)&v185[16] = v153;
          long long v184 = (void **)v155;
          std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>>::~__split_buffer((uint64_t)&v184);
          unint64_t v133 = v164;
        }
        else
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(*(void *)(v23 + 136), (uint64_t)__p);
          unint64_t v133 = v132 + 104;
        }
        *(void *)(v50 + 136) = v133;
        long long v184 = (void **)v190;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v184);
        if (*(void *)&__p[56])
        {
          uint64_t v188 = *(void *)&__p[56];
          operator delete(*(void **)&__p[56]);
        }
        if (*(void *)&__p[32])
        {
          *(void *)&__p[40] = *(void *)&__p[32];
          operator delete(*(void **)&__p[32]);
        }
        if (*(void *)&__p[8])
        {
          *(void *)&__p[16] = *(void *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (v172)
        {
          v173 = (float *)v172;
          operator delete(v172);
        }
        *(void *)__p = v175;
        std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v176)
        {
          Float64 v177 = v176;
          operator delete(v176);
        }
        if (v178)
        {
          unsigned int v179 = v178;
          operator delete(v178);
        }
        if (v165) {
          operator delete(v165);
        }
        unsigned int v51 = v160 + 1;
      }
      while (v160 + 1 != v159);
      unsigned int v51 = v181;
    }
  }
  if (v51)
  {
    long long v182 = v51;
    operator delete(v51);
  }
  std::vector<float>::resize(v50 + 152, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 176, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 200, *(unsigned int *)(v50 + 4));
  std::vector<float>::resize(v50 + 224, *(unsigned int *)(v50 + 4));
  if (v158 || *(unsigned char *)(v50 + 252)) {
    goto LABEL_318;
  }
  if (a2 <= 8126469)
  {
    if (a2 <= 7864324)
    {
      if (a2 == 7667717 || a2 == 7733253) {
        goto LABEL_317;
      }
      int v156 = 7798789;
    }
    else if (a2 > 7995397)
    {
      if (a2 == 7995398) {
        goto LABEL_317;
      }
      int v156 = 8060934;
    }
    else
    {
      if (a2 == 7864325) {
        goto LABEL_317;
      }
      int v156 = 7929862;
    }
  }
  else if (a2 > 12648463)
  {
    if (a2 > 12779529)
    {
      if (a2 == 12845066) {
        goto LABEL_317;
      }
      int v156 = 12779530;
    }
    else
    {
      if (a2 == 12648464) {
        goto LABEL_317;
      }
      int v156 = 12713992;
    }
  }
  else
  {
    if (a2 <= 10485767)
    {
      if (a2 != 8126470)
      {
        int v156 = 8388616;
        goto LABEL_316;
      }
LABEL_317:
      *(_DWORD *)(v50 + 248) = a2;
      *(unsigned char *)(v50 + 252) = 1;
      *(unsigned char *)(v50 + 256) = 1;
      goto LABEL_318;
    }
    if (a2 == 10485768) {
      goto LABEL_317;
    }
    int v156 = 12582924;
  }
LABEL_316:
  if (a2 == v156) {
    goto LABEL_317;
  }
LABEL_318:
  uint64_t result = 0;
  *(unsigned char *)uint64_t v50 = 1;
  return result;
}

void sub_1BB50D27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return a1;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  return a1;
}

void sub_1BB50D4C0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

void sub_1BB50D594(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>,std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>,0>(i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::__init_with_size[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*,std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(a4);
    uint64_t v7 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = result + 80 * v8;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,float const,std::vector<int> const,std::vector<float> const,std::vector<float>>::__tuple_impl(v7 + v9, a2 + v9);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1BB50D6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1BB50D78C(_Unwind_Exception *exception_object)
{
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<std::tuple<float const,std::vector<int> const,std::vector<float> const,std::vector<float>>,0>((void *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  begiuint64_t n = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::__fs::filesystem::path>::__vdeallocate(a1);
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](a1, v11);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_14:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    uint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        uint64_t v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begiuint64_t n = a1->__end_;
    }
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_14;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      uint64_t v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1BB50D9E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t CartesianPanner::pan(CartesianPanner *this, float a2, float a3, float a4, float a5, float *a6, unsigned int a7)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)this) {
    return 4294956429;
  }
  uint64_t result = 4294900553;
  if (a6 && *((_DWORD *)this + 1))
  {
    vDSP_vclr(a6, 1, a7);
    int v16 = a2 < 0.05 || a2 == 0.0;
    MEMORY[0x1F4188790](v15);
    int v18 = (float *)&v113[-((v17 + 15) & 0x7FFFFFFF0)];
    vDSP_vclr(v18, 1, *((unsigned int *)this + 1));
    uint64_t v20 = *((unsigned int *)this + 1);
    if (((*((unsigned char *)this + 256) != 0) & ~v16) == 0)
    {
      uint64_t v21 = (uint64_t)(*((void *)this + 29) - *((void *)this + 28)) >> 2;
      if (v21 != v20) {
        return 0xFFFFFFFFLL;
      }
      int v114 = v16;
      uint64_t v115 = v113;
      CartesianPanner::axisPanner(*((float **)this + 10), *((float **)this + 11), *((float **)this + 25), *((void *)this + 26), a5);
      uint64_t v22 = *((void *)this + 16);
      uint64_t v23 = *((void *)this + 17);
      while (v22 != v23)
      {
        CartesianPanner::axisPanner(*(float **)(v22 + 32), *(float **)(v22 + 40), *(float **)(v22 + 56), *(void *)(v22 + 64), a4);
        uint64_t v24 = *(int **)(v22 + 8);
        uint64_t v25 = *(int **)(v22 + 16);
        if (v24 != v25)
        {
          unint64_t v26 = *(int **)(v22 + 56);
          uint64_t v27 = *((void *)this + 22);
          do
          {
            int v28 = *v26++;
            int v29 = v28;
            uint64_t v30 = *v24++;
            *(_DWORD *)(v27 + 4 * v30) = v29;
          }
          while (v24 != v25);
        }
        uint64_t v31 = *(void *)(v22 + 80);
        uint64_t v32 = *(void *)(v22 + 88);
        while (v31 != v32)
        {
          CartesianPanner::axisPanner(*(float **)(v31 + 32), *(float **)(v31 + 40), *(float **)(v31 + 56), *(void *)(v31 + 64), a3);
          float v33 = *(int **)(v31 + 8);
          float v34 = *(int **)(v31 + 16);
          if (v33 != v34)
          {
            BOOL v35 = *(int **)(v31 + 56);
            uint64_t v36 = *((void *)this + 19);
            do
            {
              int v37 = *v35++;
              int v38 = v37;
              uint64_t v39 = *v33++;
              *(_DWORD *)(v36 + 4 * v39) = v38;
            }
            while (v33 != v34);
          }
          v31 += 80;
        }
        v22 += 104;
      }
      uint64_t v19 = (float *)*((void *)this + 28);
      uint64_t v40 = *((void *)this + 29) - (void)v19;
      vDSP_Length v41 = v40 >> 2;
      if (v40)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *((void *)this + 19);
        uint64_t v44 = *((void *)this + 22);
        uint64_t v45 = *((void *)this + 25);
        do
        {
          v19[v42] = (float)(*(float *)(v43 + 4 * v42) * *(float *)(v44 + 4 * v42)) * *(float *)(v45 + 4 * v42);
          ++v42;
        }
        while (v41 > v42);
      }
      LOBYTE(v16) = v114;
      if (*((void *)this + 17) - *((void *)this + 16) == 104)
      {
        int v46 = *((_DWORD *)this + 1);
        if (a5 == 0.0 || v46 != 5)
        {
          if (a5 != 0.0 && v46 == 7)
          {
            *(float *)float __B = (float)(a5 * -0.095) + 1.0;
            vDSP_vsmul(v19, 1, (const float *)__B, v19, 1, v41);
          }
        }
        else
        {
          *(float *)float __B = (float)(a5 * -0.184) + 1.0;
          vDSP_vsmul(v19, 1, (const float *)__B, v19, 1, v41);
        }
      }
      if (v20)
      {
        int64_t v47 = (int *)*((void *)this + 28);
        uint64_t v48 = v18;
        do
        {
          int v49 = *v47++;
          *(_DWORD *)v48++ = v49;
          --v21;
        }
        while (v21);
      }
      LODWORD(v20) = *((_DWORD *)this + 1);
    }
    MEMORY[0x1F4188790](v19);
    unsigned int v53 = (float *)&v113[-v52];
    if (a2 == 0.0 || v51 == 0)
    {
      uint64_t v55 = v20;
LABEL_104:
      MEMORY[0x1F4188790](result);
      int v104 = (float *)&v113[-((v102 + 15) & 0x7FFFFFFF0)];
      if (a2 == 0.0 || !v103)
      {
        if (!v20) {
          return 0;
        }
      }
      else
      {
        if (v16)
        {
          if (v20)
          {
            uint64_t v105 = (float *)&v113[-((v102 + 15) & 0x7FFFFFFF0)];
            uint64_t v106 = v55;
            do
            {
              float v107 = *v18++;
              float v108 = v107;
              float v109 = *v53++;
              *v105++ = (float)((float)(a2 * 20.0) * v109) + (float)((float)(1.0 - (float)(a2 * 20.0)) * v108);
              --v106;
            }
            while (v106);
LABEL_113:
            uint64_t result = 0;
            uint64_t v110 = (unsigned int *)*((void *)this + 13);
            do
            {
              unsigned int v112 = *v110++;
              uint64_t v111 = v112;
              if (v112 >= a7) {
                uint64_t result = 4294967246;
              }
              else {
                a6[v111] = *v104;
              }
              ++v104;
              --v55;
            }
            while (v55);
            return result;
          }
          return 0;
        }
        int v18 = v53;
        if (!v20) {
          return 0;
        }
      }
      memcpy(&v113[-((v102 + 15) & 0x7FFFFFFF0)], v18, v102);
      goto LABEL_113;
    }
    if (!*((unsigned char *)this + 252)) {
      return 4294956429;
    }
    int v56 = *((_DWORD *)this + 62);
    uint64_t result = 4294956428;
    if (v56 > 8126469)
    {
      if (v56 > 12648463)
      {
        if (v56 > 12779529)
        {
          if (v56 == 12779530)
          {
            if (v20 == 9)
            {
              CartesianPannerNN::panAtmos504Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
              CartesianPannerNN::panAtmos504Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v96);
              for (uint64_t i = 0; i != 20; i += 4)
                *(float *)&__B[i] = fmaxf(*(float *)&__B[i], 0.0);
              for (uint64_t j = 0; j != 20; j += 4)
                *(float *)&v117[j] = fmaxf(*(float *)&v117[j], 0.0);
              int v99 = *(_DWORD *)v117;
              int v100 = *(_DWORD *)&__B[4];
              *unsigned int v53 = *(float *)__B;
              *((_DWORD *)v53 + 1) = v99;
              *((_DWORD *)v53 + 2) = v100;
              unint64_t v101 = v53 + 3;
              v121.val[0] = *(float32x2_t *)&__B[8];
              v121.val[1] = *(float32x2_t *)&v117[8];
              vst2_f32(v101, v121);
              v121.val[1].i32[0] = *(_DWORD *)&v117[16];
              v53[7] = *(float *)&__B[16];
              v53[8] = v121.val[1].f32[0];
              float v116 = 1.05;
              vDSP_vsmul(v53, 1, &v116, v53, 1, 9uLL);
            }
          }
          else
          {
            if (v56 != 12845066) {
              return result;
            }
            if (v20 == 9)
            {
              CartesianPannerNN::panAtmos702Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
              CartesianPannerNN::panAtmos702Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v76);
              for (uint64_t k = 0; k != 20; k += 4)
                *(float *)&__B[k] = fmaxf(*(float *)&__B[k], 0.0);
              for (uint64_t m = 0; m != 20; m += 4)
                *(float *)&v117[m] = fmaxf(*(float *)&v117[m], 0.0);
              int v79 = *(_DWORD *)v117;
              int v80 = *(_DWORD *)&__B[4];
              *unsigned int v53 = *(float *)__B;
              *((_DWORD *)v53 + 1) = v79;
              *((_DWORD *)v53 + 2) = v80;
              v81 = v53 + 3;
              v120.val[0] = *(float32x2_t *)&__B[8];
              v120.val[1] = *(float32x2_t *)&v117[8];
              vst2_f32(v81, v120);
              v120.val[1].i32[0] = *(_DWORD *)&v117[16];
              v53[7] = *(float *)&__B[16];
              v53[8] = v120.val[1].f32[0];
              float v116 = 1.015;
              vDSP_vsmul(v53, 1, &v116, v53, 1, 9uLL);
            }
          }
        }
        else if (v56 == 12648464)
        {
          if (v20 == 15)
          {
            CartesianPannerNN::panAtmos906Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos906Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v86);
            for (uint64_t n = 0; n != 32; n += 16)
              *(float32x4_t *)&__B[n] = vmaxnmq_f32(*(float32x4_t *)&__B[n], (float32x4_t)0);
            for (iuint64_t i = 0; ii != 32; ii += 16)
              *(float32x4_t *)&v117[ii] = vmaxnmq_f32(*(float32x4_t *)&v117[ii], (float32x4_t)0);
            int v89 = *(_DWORD *)v117;
            uint64_t v90 = v53 + 3;
            v122.val[0] = *(float32x2_t *)&__B[8];
            v122.val[1] = *(float32x2_t *)&v117[8];
            vst2_f32(v90, v122);
            v122.val[1].i32[0] = *(_DWORD *)&__B[4];
            *unsigned int v53 = *(float *)__B;
            *((_DWORD *)v53 + 1) = v89;
            float v91 = v53 + 7;
            long long v92 = *(_OWORD *)&__B[16];
            float32x2x2_t v122 = *(float32x2x2_t *)&v117[16];
            vst2_f32(v91, v122);
            v53[2] = v122.val[1].f32[0];
            v122.val[1] = (float32x2_t)*((void *)&v92 + 1);
            v93 = v53 + 11;
            uint64_t v95 = v94;
            vst2_f32(v93, *(float32x2x2_t *)((char *)&v122 + 8));
            float v116 = 0.975;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 0xFuLL);
          }
        }
        else
        {
          if (v56 != 12713992) {
            return result;
          }
          if (v20 == 7)
          {
            CartesianPannerNN::panAtmos502Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos502Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v58);
            float32x4_t v59 = vmaxnmq_f32(*(float32x4_t *)__B, (float32x4_t)0);
            *(float32x4_t *)float __B = v59;
            float32x4_t v60 = vmaxnmq_f32(*(float32x4_t *)v117, (float32x4_t)0);
            *(float32x4_t *)uint64_t v117 = v60;
            v53[2] = v59.f32[1];
            *(int32x2_t *)unsigned int v53 = vzip1_s32(*(int32x2_t *)v59.f32, *(int32x2_t *)v60.f32);
            v123.val[0] = (float32x2_t)v59.i64[1];
            long long v61 = v53 + 3;
            v123.val[1] = (float32x2_t)v60.i64[1];
            vst2_f32(v61, v123);
            float v116 = 1.08;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 7uLL);
          }
        }
        goto LABEL_103;
      }
      if (v56 > 10485767)
      {
        if (v56 != 10485768)
        {
          if (v56 != 12582924) {
            return result;
          }
          if (v20 == 11)
          {
            CartesianPannerNN::panAtmos704Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
            CartesianPannerNN::panAtmos704Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v62);
            for (juint64_t j = 0; jj != 24; jj += 4)
              *(float *)&__B[jj] = fmaxf(*(float *)&__B[jj], 0.0);
            for (kuint64_t k = 0; kk != 24; kk += 4)
              *(float *)&v117[kk] = fmaxf(*(float *)&v117[kk], 0.0);
            int v65 = *(_DWORD *)v117;
            int v66 = *(_DWORD *)&__B[4];
            *unsigned int v53 = *(float *)__B;
            *((_DWORD *)v53 + 1) = v65;
            uint64_t v67 = v53 + 3;
            float32x2x2_t v68 = *(float32x2x2_t *)&__B[8];
            long long v69 = *(_OWORD *)&v117[8];
            vst2_f32(v67, v68);
            *((_DWORD *)v53 + 2) = v66;
            v124.val[0] = v68.val[1];
            unint64_t v70 = v53 + 7;
            v124.val[1] = (float32x2_t)*((void *)&v69 + 1);
            vst2_f32(v70, v124);
            float v116 = 0.953;
            vDSP_vsmul(v53, 1, &v116, v53, 1, 0xBuLL);
          }
          goto LABEL_103;
        }
        goto LABEL_89;
      }
      if (v56 != 8126470)
      {
        if (v56 != 8388616) {
          return result;
        }
LABEL_89:
        if (v20 == 7)
        {
          CartesianPannerNN::panAtmos700Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
          CartesianPannerNN::panAtmos700Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v82);
          float32x4_t v83 = vmaxnmq_f32(*(float32x4_t *)__B, (float32x4_t)0);
          *(float32x4_t *)float __B = v83;
          float32x4_t v84 = vmaxnmq_f32(*(float32x4_t *)v117, (float32x4_t)0);
          *(float32x4_t *)uint64_t v117 = v84;
          v53[2] = v83.f32[1];
          *(int32x2_t *)unsigned int v53 = vzip1_s32(*(int32x2_t *)v83.f32, *(int32x2_t *)v84.f32);
          v125.val[0] = (float32x2_t)v83.i64[1];
          long long v85 = v53 + 3;
          v125.val[1] = (float32x2_t)v84.i64[1];
          vst2_f32(v85, v125);
          float v116 = 1.045;
          vDSP_vsmul(v53, 1, &v116, v53, 1, 7uLL);
        }
LABEL_103:
        uint64_t v55 = *((unsigned int *)this + 1);
        LODWORD(v20) = *((_DWORD *)this + 1);
        goto LABEL_104;
      }
LABEL_75:
      if (v20 == 5)
      {
        CartesianPannerNN::panAtmos500Side((CartesianPannerNN *)__B, a2, a3, a4, a5, v50);
        CartesianPannerNN::panAtmos500Side((CartesianPannerNN *)v117, a2, -a3, a4, a5, v71);
        for (muint64_t m = 0; mm != 12; mm += 4)
          *(float *)&__B[mm] = fmaxf(*(float *)&__B[mm], 0.0);
        for (uint64_t nn = 0; nn != 12; nn += 4)
          *(float *)&v117[nn] = fmaxf(*(float *)&v117[nn], 0.0);
        int v74 = *(_DWORD *)v117;
        int v75 = *(_DWORD *)&v117[8];
        *unsigned int v53 = *(float *)__B;
        *((_DWORD *)v53 + 1) = v74;
        *((void *)v53 + 1) = *(void *)&__B[4];
        *((_DWORD *)v53 + 4) = v75;
        float v116 = 1.13;
        vDSP_vsmul(v53, 1, &v116, v53, 1, 5uLL);
      }
      goto LABEL_103;
    }
    if (v56 <= 7864324)
    {
      if (v56 == 7667717 || v56 == 7733253) {
        goto LABEL_75;
      }
      int v57 = 7798789;
    }
    else if (v56 > 7995397)
    {
      if (v56 == 7995398) {
        goto LABEL_75;
      }
      int v57 = 8060934;
    }
    else
    {
      if (v56 == 7864325) {
        goto LABEL_75;
      }
      int v57 = 7929862;
    }
    if (v56 != v57) {
      return result;
    }
    goto LABEL_75;
  }
  return result;
}

void sub_1BB50E518(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void CartesianPanner::axisPanner(float *a1, float *a2, float *__b, uint64_t a4, float a5)
{
  uint64_t v5 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 != a4 - (void)__b) {
    __assert_rtn("axisPanner", "CartesianPanner.cpp", 534, "inSpeakerCoords.size() == outGains.size()");
  }
  uint64_t v7 = a1;
  if (a2 != a1)
  {
    uint64_t v8 = __b;
    uint64_t v9 = a1 + 1;
    float v10 = *a1;
    if (a1 + 1 == a2)
    {
      float v17 = *a1;
    }
    else
    {
      float v11 = *a1;
      int v12 = a1 + 1;
      float v13 = a1;
      uint64_t v14 = a1 + 1;
      do
      {
        float v15 = *v14++;
        float v16 = v15;
        if (v15 < v11)
        {
          float v11 = v16;
          float v13 = v12;
        }
        int v12 = v14;
      }
      while (v14 != a2);
      float v17 = *v13;
      int v18 = a1;
      uint64_t v19 = a1 + 1;
      do
      {
        float v20 = *v19++;
        float v21 = v20;
        if (v10 < v20)
        {
          float v10 = v21;
          int v18 = v9;
        }
        uint64_t v9 = v19;
      }
      while (v19 != a2);
      float v10 = *v18;
    }
    if (v10 >= a5) {
      float v22 = a5;
    }
    else {
      float v22 = v10;
    }
    if (v17 <= a5) {
      float v23 = v22;
    }
    else {
      float v23 = v17;
    }
    if ((float)(v10 - v17) == 0.0)
    {
      if (v5 >= 1)
      {
        memset_pattern16(__b, &unk_1BB873A60, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
      }
    }
    else
    {
      uint64_t v24 = a1;
      while (*v24 != v23)
      {
        if (++v24 == a2) {
          goto LABEL_30;
        }
      }
      uint64_t v5 = (char *)v24 - (char *)a1;
LABEL_30:
      if ((float *)((char *)a1 + v5) == a2)
      {
        uint64_t v27 = a1;
        do
        {
          float v28 = *v27++;
          float v29 = v28;
          if (v28 >= v17) {
            float v30 = v29;
          }
          else {
            float v30 = v17;
          }
          if (v29 < v23) {
            float v17 = v30;
          }
          if (v10 >= v29 && v29 >= v23) {
            float v10 = v29;
          }
        }
        while (v27 != a2);
        if ((float)(v10 - v17) == 0.0) {
          float v32 = 0.7854;
        }
        else {
          float v32 = (float)((float)(v23 - v17) / (float)(v10 - v17)) * 1.5708;
        }
        __float2 v33 = __sincosf_stret(v32);
        do
        {
          float v34 = *v7++;
          float v35 = v34;
          if (v34 == v10) {
            float sinval = v33.__sinval;
          }
          else {
            float sinval = 0.0;
          }
          if (v35 == v17) {
            float cosval = v33.__cosval;
          }
          else {
            float cosval = sinval;
          }
          *v8++ = cosval;
        }
        while (v7 != a2);
      }
      else
      {
        do
        {
          float v25 = *v7++;
          if (v25 == v23) {
            float v26 = 1.0;
          }
          else {
            float v26 = 0.0;
          }
          *v8++ = v26;
        }
        while (v7 != a2);
      }
    }
  }
}

void MidSideRotation::calculateCoefficients(__float2 *this)
{
  float cosval = this[2].__cosval;
  float v3 = sinf(this[2].__sinval * 0.017453);
  float v4 = asinf(v3);
  this[1] = __sincosf_stret((float)((float)(cosval * -0.5) * v4) + 0.7854);
}

uint64_t AUExpanseController::SupportedNumChannels(AUExpanseController *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUExpanseController::SupportedNumChannels(AUChannelInfo const**)::chans;
  }
  return 1;
}

BOOL AUExpanseController::StreamFormatWritable(AUExpanseController *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUExpanseController::SupportsTail(AUExpanseController *this)
{
  return 1;
}

double AUExpanseController::GetTailTime(AUExpanseController *this)
{
  return 0.0;
}

double AUExpanseController::GetLatency(AUExpanseController *this)
{
  return 0.0;
}

uint64_t AUExpanseController::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 142);
  }
  return result;
}

uint64_t AUExpanseController::GetParameterInfo(AUExpanseController *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956430;
  }
  buffer->flags = 0;
  buffer->unitName = 0;
  switch(a3)
  {
    case 0:
      int v6 = -1069547520;
      CFStringRef v7 = @"Min. Media Gain (dB)";
      goto LABEL_7;
    case 1:
      int v6 = -1069547520;
      CFStringRef v7 = @"Max. Media Gain (dB)";
LABEL_7:
      buffer->cfNameString = v7;
      buffer->flags = 0x8000000;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minValue = 3266576384;
      buffer->defaultValue = -15.0;
      goto LABEL_19;
    case 2:
      int v6 = -1069547520;
      CFStringRef v8 = @"Min. Voice Gain (dB)";
      goto LABEL_10;
    case 3:
      int v6 = -1069547520;
      CFStringRef v8 = @"Max. Voice Gain (dB)";
LABEL_10:
      buffer->cfNameString = v8;
      buffer->flags = 0x8000000;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minValue = 0x41F00000C2B40000;
      buffer->defaultValue = 0.0;
      goto LABEL_19;
    case 4:
      buffer->cfNameString = @"Scale factor for volume matching";
      buffer->flags = 0x8000000;
      CFStringGetCString(@"Scale factor for volume matching", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x4248000000000000;
      goto LABEL_18;
    case 5:
      buffer->cfNameString = @"Current Scalar Volume";
      buffer->flags = 0x8000000;
      CFStringGetCString(@"Current Scalar Volume", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      int v6 = 1073782784;
      goto LABEL_19;
    case 6:
      CFStringRef v10 = @"AGC media target (dB)";
      goto LABEL_17;
    case 7:
      buffer->cfNameString = @"AGC max media gain (dB)";
      buffer->flags = 0x8000000;
      CFStringGetCString(@"AGC max media gain (dB)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v9 = 0x41F00000C1F00000;
      goto LABEL_18;
    case 8:
      buffer->cfNameString = @"Hold time for switching AGC parameters (frames)";
      buffer->flags = 0x8000000;
      CFStringGetCString(@"Hold time for switching AGC parameters (frames)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x43FA000000000000;
      goto LABEL_18;
    case 9:
      CFStringRef v10 = @"Threshold for media presence detection (dB)";
LABEL_17:
      buffer->cfNameString = v10;
      buffer->flags = 0x8000000;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v9 = 3266576384;
LABEL_18:
      *(void *)&buffer->minValue = v9;
      buffer->defaultValue = 0.0;
      int v6 = -1073741824;
LABEL_19:
      uint64_t result = 0;
      buffer->flags |= v6;
      break;
    default:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

double AUExpanseController::GetParameterList(AUExpanseController *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    *a4 = 0;
  }
  else
  {
    *a4 = 10;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
      *(void *)&double result = 0x900000008;
      *((void *)a3 + 4) = 0x900000008;
    }
  }
  return result;
}

uint64_t AUExpanseController::Render(AUExpanseController *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = (AUExpanseController *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUExpanseController *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172))
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    float v15 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 134217984;
      *(void *)&uint8_t buf[4] = this;
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "[%p] AU has no input busses", buf, 0xCu);
    }
    return 4294956420;
  }
  CFStringRef v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t v11 = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (v11)
  {
    uint64_t v12 = v11;
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    float v13 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      uint64_t v14 = "[%p] Error[%d] pulling input from bus 0";
LABEL_8:
      _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
      return v12;
    }
    return v12;
  }
  uint64_t v17 = ausdk::AUScope::GetElement(v8, 1u);
  if (!v17 || !*(_DWORD *)(v17 + 172))
  {
    uint64_t BufferList = 0;
LABEL_23:
    uint64_t v21 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0);
    uint64_t v22 = ausdk::AUScope::SafeGetElement(v8, 0);
    *(void *)AudioTimeStamp buf = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
    *(void *)&buf[8] = BufferList;
    v24[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v21 + 144));
    v24[1] = 0;
    return (*(uint64_t (**)(AUExpanseController *, unsigned int *, uint64_t, uint64_t, unsigned char *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 2, buf, 2, v24);
  }
  int v18 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
  uint64_t v19 = ausdk::AUInputElement::PullInput(v18, a2, a3, 1, a4);
  if (!v19)
  {
    uint64_t v23 = ausdk::AUScope::SafeGetElement(v8, 1u);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v23 + 144));
    goto LABEL_23;
  }
  uint64_t v12 = v19;
  if (getAUExpanseControllerLog(void)::onceToken != -1) {
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
  }
  float v13 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    uint64_t v14 = "[%p] Error[%d] pulling input from bus 1";
    goto LABEL_8;
  }
  return v12;
}

os_log_t ___Z25getAUExpanseControllerLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUExpanseController");
  getAUExpanseControllerLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUExpanseController::ProcessMultipleBufferLists(AUExpanseController *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (a4 != 2)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    uint64_t v81 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = a3;
    __int16 v94 = 1024;
    int v95 = 2;
    v82 = "[%p] cannot process %u input busses (expected input bus count is %u)";
    float32x4_t v83 = v81;
    goto LABEL_95;
  }
  uint64_t v12 = (unsigned int *)*a5;
  int v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0) + 108);
  if (*v12 != v13)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    uint64_t v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    unsigned int v85 = *v12;
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = v85;
    __int16 v94 = 1024;
    int v95 = v13;
    v82 = "[%p] number of voice input buffers %u is not equal to expected number of voice input channels %u";
    goto LABEL_94;
  }
  uint64_t v14 = a5[1];
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 1u);
  if (!v14)
  {
    float v35 = (unsigned int *)*a7;
    uint64_t mNumberBuffers = (*a7)->mNumberBuffers;
    if (mNumberBuffers)
    {
      uint64_t v37 = 0;
      unsigned int v38 = *v12 - 1;
      size_t v39 = 4 * a3;
      uint64_t v40 = (void **)(v35 + 4);
      do
      {
        if (v38 >= v37) {
          unsigned int v41 = v37;
        }
        else {
          unsigned int v41 = v38;
        }
        uint64_t v42 = *(void **)&v12[4 * v41 + 4];
        if (v42 != *v40) {
          memcpy(*v40, v42, v39);
        }
        ++v37;
        v40 += 2;
      }
      while (mNumberBuffers != v37);
    }
    return 0;
  }
  int v16 = *(_DWORD *)(Element + 108);
  if (v14->mNumberBuffers != v16)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    uint64_t v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    UInt32 v86 = v14->mNumberBuffers;
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = v86;
    __int16 v94 = 1024;
    int v95 = v16;
    v82 = "[%p] number of media input buffers %u is not equal to expected number of media input channels %u";
    goto LABEL_94;
  }
  if (a6 != 2)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    uint64_t v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = a6;
    __int16 v94 = 1024;
    int v95 = 2;
    v82 = "[%p] cannot process %u output busses (expected output bus count is %u)";
    goto LABEL_94;
  }
  uint64_t v17 = (unsigned int *)*a7;
  int v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0) + 108);
  if (*v17 != v18)
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    uint64_t v84 = getAUExpanseControllerLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    unsigned int v87 = *v17;
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = v87;
    __int16 v94 = 1024;
    int v95 = v18;
    v82 = "[%p] number of voice output buffers %u is not equal to expected number of voice output channels %u";
    goto LABEL_94;
  }
  uint64_t v19 = a7[1];
  int v20 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 1u) + 108);
  if (v19->mNumberBuffers == v20)
  {
    int v21 = *((_DWORD *)this + 142);
    if (v21 != *((_DWORD *)this + 143))
    {
      AUExpanseController::UpdateExpanseControllerState(this);
      *((_DWORD *)this + 143) = v21;
    }
    if (*((unsigned char *)this + 528))
    {
      uint64_t v22 = *v17;
      if (v22)
      {
        uint64_t v23 = 0;
        unsigned int v24 = *v12 - 1;
        float v25 = (void **)(v17 + 4);
        do
        {
          if (v24 >= v23) {
            unsigned int v26 = v23;
          }
          else {
            unsigned int v26 = v24;
          }
          uint64_t v27 = *(void **)&v12[4 * v26 + 4];
          if (v27 != *v25) {
            memcpy(*v25, v27, 4 * a3);
          }
          ++v23;
          v25 += 2;
        }
        while (v22 != v23);
      }
      uint64_t v28 = v19->mNumberBuffers;
      if (v28)
      {
        uint64_t v29 = 0;
        unsigned int v30 = v14->mNumberBuffers - 1;
        size_t v31 = 4 * a3;
        p_mData = &v19->mBuffers[0].mData;
        do
        {
          if (v30 >= v29) {
            unsigned int v33 = v29;
          }
          else {
            unsigned int v33 = v30;
          }
          mData = v14->mBuffers[v33].mData;
          if (mData != *p_mData) {
            memcpy(*p_mData, mData, v31);
          }
          ++v29;
          p_mData += 2;
        }
        while (v28 != v29);
      }
    }
    else
    {
      unsigned __int8 v43 = atomic_load((unsigned __int8 *)this + 529);
      if (v43)
      {
        *((_DWORD *)this + 134) = 0;
        atomic_store(0, (unsigned __int8 *)this + 529);
      }
      float v44 = COERCE_FLOAT(atomic_load((unsigned int *)this + 133));
      float v45 = v44;
      if (*((float *)this + 134) == v44)
      {
        float __Step = *((float *)this + 140);
        uint64_t v67 = *v17;
        if (v67)
        {
          uint64_t v68 = 0;
          unsigned int v69 = *v12 - 1;
          unint64_t v70 = (float **)(v17 + 4);
          do
          {
            if (v69 >= v68) {
              unsigned int v71 = v68;
            }
            else {
              unsigned int v71 = v69;
            }
            int v72 = *v70;
            v70 += 2;
            vDSP_vsmul(*(const float **)&v12[4 * v71 + 4], 1, &__Step, v72, 1, a3);
            ++v68;
          }
          while (v67 != v68);
        }
        float __Step = *((float *)this + 141);
        uint64_t v73 = v19->mNumberBuffers;
        if (v73)
        {
          uint64_t v74 = 0;
          unsigned int v75 = v14->mNumberBuffers - 1;
          vDSP_Length v76 = a3;
          uint64_t v77 = (float **)&v19->mBuffers[0].mData;
          do
          {
            if (v75 >= v74) {
              unsigned int v78 = v74;
            }
            else {
              unsigned int v78 = v75;
            }
            int v79 = *v77;
            v77 += 2;
            vDSP_vsmul((const float *)v14->mBuffers[v78].mData, 1, &__Step, v79, 1, v76);
            ++v74;
          }
          while (v73 != v74);
        }
      }
      else
      {
        *((float *)this + 134) = v44;
        float v46 = 0.0;
        if (v44 <= 0.25)
        {
          float v47 = roundf(v44 * 16.0) * 0.0625;
          float v48 = (float)((float)((float)(v47 * 16.0) + -1.0) * -0.25) + 1.0;
          if (v47 <= 0.0625) {
            float v48 = 1.0;
          }
          float v46 = v48 * *((float *)this + 139);
        }
        float v49 = __exp10f((float)((float)(*((float *)this + 137)+ (float)(v44 * (float)(*((float *)this + 138) - *((float *)this + 137))))+ v46)* 0.05);
        float v50 = *((float *)this + 140);
        float __Step = (float)(v49 - v50) / (float)a3;
        uint64_t v51 = *v17;
        if (v51)
        {
          uint64_t v52 = 0;
          unsigned int v53 = *v12 - 1;
          float v54 = (float **)(v17 + 4);
          do
          {
            if (v53 >= v52) {
              unsigned int v55 = v52;
            }
            else {
              unsigned int v55 = v53;
            }
            int v56 = *(const float **)&v12[4 * v55 + 4];
            int v57 = *v54;
            v54 += 2;
            float __Start = v50;
            vDSP_vrampmul(v56, 1, &__Start, &__Step, v57, 1, a3);
            *((float *)this + 140) = __Start;
            ++v52;
          }
          while (v51 != v52);
        }
        float v58 = __exp10f((float)(*((float *)this + 135) + (float)(v45 * (float)(*((float *)this + 136) - *((float *)this + 135))))* 0.05);
        float v59 = *((float *)this + 141);
        float __Step = (float)(v58 - v59) / (float)a3;
        uint64_t v60 = v19->mNumberBuffers;
        if (v60)
        {
          uint64_t v61 = 0;
          unsigned int v62 = v14->mNumberBuffers - 1;
          long long v63 = (float **)&v19->mBuffers[0].mData;
          do
          {
            if (v62 >= v61) {
              unsigned int v64 = v61;
            }
            else {
              unsigned int v64 = v62;
            }
            int v65 = (const float *)v14->mBuffers[v64].mData;
            int v66 = *v63;
            v63 += 2;
            float __Start = v59;
            vDSP_vrampmul(v65, 1, &__Start, &__Step, v66, 1, a3);
            *((float *)this + 141) = __Start;
            ++v61;
          }
          while (v60 != v61);
        }
      }
    }
    return 0;
  }
  if (getAUExpanseControllerLog(void)::onceToken != -1) {
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
  }
  uint64_t v84 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    UInt32 v88 = v19->mNumberBuffers;
    float __Step = 3.8522e-34;
    float v91 = this;
    __int16 v92 = 1024;
    unsigned int v93 = v88;
    __int16 v94 = 1024;
    int v95 = v20;
    v82 = "[%p] number of media output buffers %u is not equal to expected number of media output channels %u";
LABEL_94:
    float32x4_t v83 = v84;
LABEL_95:
    _os_log_error_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_ERROR, v82, (uint8_t *)&__Step, 0x18u);
  }
  return 4294956428;
}

void AUExpanseController::UpdateExpanseControllerState(AUExpanseController *this)
{
  uint64_t v2 = (AUExpanseController *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUExpanseController *)((char *)this + 32), 0);
  *((float *)this + 135) = ausdk::AUElement::GetParameter(Element, 0);
  float v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 136) = ausdk::AUElement::GetParameter(v4, 1u);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 137) = ausdk::AUElement::GetParameter(v5, 2u);
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 138) = ausdk::AUElement::GetParameter(v6, 3u);
  CFStringRef v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 139) = ausdk::AUElement::GetParameter(v7, 4u);
}

uint64_t AUExpanseController::CanScheduleParameters(AUExpanseController *this)
{
  return 0;
}

uint64_t AUExpanseController::SetParameter(AUExpanseController *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3) {
    return 4294956430;
  }
  if (a2 == 5)
  {
    uint64_t result = 0;
    float v9 = COERCE_FLOAT(atomic_load((unsigned int *)this + 133));
    if (a5 <= 1.0 && a5 >= 0.0 && v9 != a5)
    {
      for (i = v9; ; float v9 = i)
      {
        atomic_compare_exchange_strong((atomic_uint *volatile)this + 133, (unsigned int *)&i, LODWORD(a5));
        if (LODWORD(i) == LODWORD(v9)) {
          break;
        }
        sched_yield();
      }
      return 0;
    }
  }
  else
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    uint64_t result = 0;
    ++*((_DWORD *)this + 142);
  }
  return result;
}

uint64_t AUExpanseController::GetParameter(AUExpanseController *this, unsigned int a2, int a3, unsigned int a4, float *a5)
{
  if (a3) {
    return 4294956430;
  }
  if (a2 == 5)
  {
    uint64_t result = 0;
    unsigned int v9 = atomic_load((unsigned int *)this + 133);
    *(_DWORD *)a5 = v9;
  }
  else
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 32), a4);
    float Parameter = ausdk::AUElement::GetParameter(Element, a2);
    uint64_t result = 0;
    *a5 = Parameter;
  }
  return result;
}

uint64_t AUExpanseController::SetProperty(AUExpanseController *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 376) = *a5 != 0;
    return result;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  if (a6 > 3)
  {
    uint64_t result = 0;
    int v10 = *((unsigned __int8 *)this + 528);
    int v11 = *a5;
    *((unsigned char *)this + 528) = *a5 != 0;
    if (v10 && !v11)
    {
      uint64_t result = 0;
      atomic_store(1u, (unsigned __int8 *)this + 529);
    }
  }
  else
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    unsigned int v9 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v12 = 134218240;
      int v13 = this;
      __int16 v14 = 1024;
      unsigned int v15 = a6;
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "[%p] failed to set bypass property; size error; inDataSize[%u]",
        (uint8_t *)&v12,
        0x12u);
    }
    return 4294956445;
  }
  return result;
}

uint64_t AUExpanseController::GetProperty(AUExpanseController *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = (unsigned __int8 *)this + 528;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUExpanseController::GetPropertyInfo(AUExpanseController *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    char v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    char v7 = *((unsigned char *)this + 17) ^ 1;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUExpanseController::Reset(AUExpanseController *this)
{
  *((_DWORD *)this + 134) = 0;
  return 0;
}

uint64_t AUExpanseController::Initialize(AUExpanseController *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (getAUExpanseControllerLog(void)::onceToken != -1) {
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
  }
  uint64_t v2 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    int v12 = 134217984;
    int v13 = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", (uint8_t *)&v12, 0xCu);
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUExpanseController *)((char *)this + 128), 0);
  uint64_t v5 = v4;
  if (*(double *)(Element + 80) == *(double *)(v4 + 80) && *(_DWORD *)(Element + 108) == *(_DWORD *)(v4 + 108))
  {
    (*(void (**)(AUExpanseController *, void, void))(*(void *)this + 72))(this, 0, 0);
    *((_DWORD *)this + 143) = *((_DWORD *)this + 142);
    AUExpanseController::UpdateExpanseControllerState(this);
    return 0;
  }
  else
  {
    if (getAUExpanseControllerLog(void)::onceToken != -1) {
      dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
    }
    char v7 = getAUExpanseControllerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(Element + 108);
      uint64_t v9 = *(void *)(Element + 80);
      int v10 = *(_DWORD *)(v5 + 108);
      uint64_t v11 = *(void *)(v5 + 80);
      int v12 = 134219008;
      int v13 = this;
      __int16 v14 = 1024;
      int v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "[%p] failed to initialize - input format [%u %lf] and output format [%u %lf] mismatched ", (uint8_t *)&v12, 0x2Cu);
    }
    return 4294956428;
  }
}

void AUExpanseController::~AUExpanseController(AUExpanseController *this)
{
  AUExpanseController::~AUExpanseController(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  int v3;
  AUExpanseController *v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B2038;
  if (getAUExpanseControllerLog(void)::onceToken != -1) {
    dispatch_once(&getAUExpanseControllerLog(void)::onceToken, &__block_literal_global_10414);
  }
  uint64_t v2 = getAUExpanseControllerLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUExpanseControllerLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    float v3 = 134217984;
    uint64_t v4 = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", (uint8_t *)&v3, 0xCu);
  }
  ausdk::AUBase::~AUBase(this);
}

void AUFIRFilter::NewKernel(AUFIRFilter *this)
{
}

void sub_1BB50FDA0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A1C40D1E223BDLL);
  _Unwind_Resume(a1);
}

void *AUFIRFilter::FIRFilterKernel::Process(AUFIRFilter::FIRFilterKernel *this, const float *a2, float *__dst, unsigned int a4, BOOL *a5)
{
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *(void *)(v7 + 600);
  uint64_t v9 = v8 - *(void *)(v7 + 592);
  if (v9)
  {
    vDSP_Length v10 = v9 >> 2;
    uint64_t v11 = (const float *)(v8 - 4);
    int v12 = (float *)*((void *)this + 4);
    size_t v13 = v9 - 4;
    memcpy((char *)v12 + v9 - 4, a2, 4 * a4);
    vDSP_conv(v12, 1, v11, -1, __dst, 1, a4, v10);
    return memmove(v12, &v12[a4], v13);
  }
  else
  {
    return memcpy(__dst, a2, 4 * a4);
  }
}

void AUFIRFilter::FIRFilterKernel::Reset(AUFIRFilter::FIRFilterKernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  uint64_t v3 = *((void *)this + 5) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
}

void AUFIRFilter::FIRFilterKernel::~FIRFilterKernel(AUFIRFilter::FIRFilterKernel *this)
{
  *(void *)this = &unk_1F14B2510;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

{
  void *v2;

  *(void *)this = &unk_1F14B2510;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

BOOL AUFIRFilter::StreamFormatWritable(AUFIRFilter *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUFIRFilter::SupportsTail(AUFIRFilter *this)
{
  return 1;
}

double AUFIRFilter::GetTailTime(AUFIRFilter *this)
{
  double v1 = (double)(unint64_t)((uint64_t)(*((void *)this + 75) - *((void *)this + 74)) >> 2);
  return v1 / *(double *)(ausdk::AUScope::SafeGetElement((AUFIRFilter *)((char *)this + 128), 0) + 80);
}

double AUFIRFilter::GetLatency(AUFIRFilter *this)
{
  return *((double *)this + 79);
}

uint64_t AUFIRFilter::SetProperty(AUFIRFilter *this, int a2, int a3, unsigned int a4, int *__src, unsigned int a6)
{
  if (a3)
  {
LABEL_2:
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, __src, a6);
  }
  else
  {
    switch(a2)
    {
      case 4501:
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (!a6) {
          return 4294956445;
        }
        if (a6 < 4)
        {
          unsigned int v8 = 0;
          goto LABEL_33;
        }
        unsigned int v8 = 0;
        uint64_t v18 = a6 >> 2;
        break;
      case 4502:
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (a6 != 8) {
          return 4294956445;
        }
        applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v19, *(const __CFArray **)__src);
        if (!v21) {
          return 4294956445;
        }
        uint64_t v9 = v19;
        unint64_t v10 = (unint64_t)(v20 - (void)v19) >> 2;
        if (((v20 - (void)v19) & 0x3FFFFFFFCLL) != 0)
        {
          unint64_t v11 = 0;
          int v12 = v10 - 1;
          do
          {
            if (v19[v12] != 0.0) {
              goto LABEL_35;
            }
            ++v11;
            --v12;
          }
          while (((unint64_t)(v20 - (void)v19) >> 2) != v11);
          unint64_t v11 = (unint64_t)(v20 - (void)v19) >> 2;
        }
        else
        {
          LODWORD(v11) = 0;
        }
LABEL_35:
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 592, (char *)v19, (uint64_t)&v19[(v10 - v11)], (v10 - v11));
        if (v9) {
          operator delete(v9);
        }
        return 0;
      case 4503:
        CFBooleanRef v13 = applesauce::CF::convert_as<double,0>(*(const __CFNumber **)__src);
        if (!v14) {
          return 4294956445;
        }
        CFBooleanRef v15 = v13;
        uint64_t result = 0;
        *((void *)this + 79) = v15;
        return result;
      case 4504:
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (a6 != 8) {
          return 4294956445;
        }
        applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v19, *(CFTypeRef *)__src);
        __int16 v16 = (float *)*((void *)this + 77);
        *((void *)this + 77) = v19;
        int v19 = v16;
        applesauce::CF::StringRef::~StringRef((const void **)&v19);
        return 0;
      case 4505:
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (a6 == 8)
        {
          applesauce::CF::NumberRef::from_get((applesauce::CF::NumberRef *)&v19, *(CFTypeRef *)__src);
          uint64_t v17 = (float *)*((void *)this + 78);
          *((void *)this + 78) = v19;
          int v19 = v17;
          applesauce::CF::NumberRef::~NumberRef((const void **)&v19);
          return 0;
        }
        return 4294956445;
      default:
        a3 = 0;
        goto LABEL_2;
    }
    while (*(float *)&__src[(v18 - 1)] == 0.0)
    {
      ++v8;
      if (!--v18)
      {
        unsigned int v8 = a6 >> 2;
        break;
      }
    }
LABEL_33:
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 592, (char *)__src, (uint64_t)&__src[(a6 >> 2) - v8], (a6 >> 2) - v8);
    return 0;
  }
}

void sub_1BB510220(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::NumberRef *applesauce::CF::NumberRef::from_get(applesauce::CF::NumberRef *this, CFTypeRef cf)
{
  uint64_t v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::NumberRef::NumberRef(v2, cf);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

uint64_t AUFIRFilter::GetProperty(const void **this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 4501:
      memcpy(__dst, this[74], (unsigned char *)this[75] - (unsigned char *)this[74]);
      return 0;
    case 4502:
      CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(this + 74);
      goto LABEL_16;
    case 4503:
      int valuePtr = this[79];
      CFArrayRef CFArray = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!CFArray)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
LABEL_16:
      CFArrayRef v12 = CFArray;
      uint64_t result = 0;
      *__dst = v12;
      return result;
    case 4504:
      CFArrayRef v11 = (const __CFArray *)this[77];
      if (v11) {
        CFRetain(this[77]);
      }
      goto LABEL_19;
    case 4505:
      CFArrayRef v11 = (const __CFArray *)this[78];
      if (v11) {
        CFRetain(this[78]);
      }
LABEL_19:
      uint64_t result = 0;
      *__dst = v11;
      return result;
    default:
      if (a2 == 29)
      {
        uint64_t result = 0;
        int v8 = *((unsigned __int8 *)this + 554);
      }
      else
      {
        if (a2 != 21) {
          return 4294956417;
        }
        uint64_t result = 0;
        int v8 = *((unsigned __int8 *)this + 552);
      }
      *(_DWORD *)__dst = v8;
      break;
  }
  return result;
}

void sub_1BB5103F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUFIRFilter::GetPropertyInfo(AUFIRFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 4501:
      *a6 = *((unsigned char *)this + 17) ^ 1;
      unsigned int v7 = (*((_DWORD *)this + 150) - *((_DWORD *)this + 148)) & 0xFFFFFFFC;
      break;
    case 4502:
    case 4503:
    case 4504:
    case 4505:
      *a6 = *((unsigned char *)this + 17) ^ 1;
      unsigned int v7 = 8;
      break;
    default:
      if (a2 != 29 && a2 != 21) {
        return 4294956417;
      }
      *a6 = 1;
      unsigned int v7 = 4;
      break;
  }
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUFIRFilter::Initialize(AUFIRFilter *this)
{
  CFStringRef v2 = (const __CFString *)*((void *)this + 77);
  if (!v2 || !*((void *)this + 78)) {
    goto LABEL_63;
  }
  uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)this + 1);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUFIRFilter *)((char *)this + 128), 0);
  CFNumberRef v5 = (const __CFNumber *)*((void *)this + 78);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  double v6 = *(double *)(Element + 80);
  unsigned int v7 = applesauce::CF::convert_to<unsigned int,0>(v5);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v9 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&fileURL, v9);
  if (!fileURL)
  {
    LODWORD(error) = -1;
    goto LABEL_62;
  }
  unint64_t v10 = CFReadStreamCreateWithFile(v8, fileURL);
  CFArrayRef v11 = v10;
  uint64_t v37 = v10;
  if (!v10)
  {
    LODWORD(Value) = 0;
    std::string::size_type error = 0xFFFFFFFFLL;
    goto LABEL_55;
  }
  if (CFReadStreamOpen(v10))
  {
    CFDictionaryRef v12 = (const __CFDictionary *)CFPropertyListCreateWithStream(v8, v11, 0, 0, 0, 0);
    CFDictionaryRef v36 = v12;
    CFReadStreamClose(v11);
    if (!v12)
    {
      LODWORD(Value) = 0;
      std::string::size_type error = 0xFFFFFFFFLL;
      goto LABEL_53;
    }
    std::to_string(&v34, (int)v6);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFBooleanRef v13 = &v34;
    }
    else {
      CFBooleanRef v13 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = v34.__r_.__value_.__l.__size_;
      }
      CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, size, 0x8000100u, 0);
      CFStringRef v35 = v15;
      if (!v15)
      {
        float v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
      }
      if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      CFStringRef v15 = 0;
      CFStringRef v35 = 0;
      if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_18;
      }
    }
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_18:
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v12, v15);
    if (Value)
    {
      std::to_string(&v34, v7);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v34;
      }
      else {
        uint64_t v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if (v17)
      {
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v18 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v18 = v34.__r_.__value_.__l.__size_;
        }
        CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
        if (!v19)
        {
          uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v20, "Could not construct");
        }
      }
      else
      {
        CFStringRef v19 = 0;
      }
      CFStringRef v35 = v19;
      if (v15) {
        CFRelease(v15);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      CFDataRef v22 = (const __CFData *)CFDictionaryGetValue(Value, v19);
      CFDataRef v23 = v22;
      if (v22)
      {
        unint64_t Length = CFDataGetLength(v22);
        std::vector<float>::vector(&v34, Length >> 2);
        BytePtr = CFDataGetBytePtr(v23);
        std::string::size_type error = v34.__r_.__value_.__r.__words[0];
        if (Length >= 4)
        {
          if (Length >> 2 <= 1) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = Length >> 2;
          }
          uint64_t v27 = (_DWORD *)v34.__r_.__value_.__r.__words[0];
          do
          {
            unsigned int v28 = *(_DWORD *)BytePtr;
            BytePtr += 4;
            *v27++ = bswap32(v28);
            --v26;
          }
          while (v26);
        }
        int v33 = v34.__r_.__value_.__r.__words[1];
        LODWORD(Value) = 1;
      }
      else
      {
        LODWORD(Value) = 0;
        std::string::size_type error = 0xFFFFFFFFLL;
      }
    }
    else
    {
      std::string::size_type error = 0xFFFFFFFFLL;
      CFStringRef v19 = v15;
    }
    if (v19)
    {
      CFRelease(v19);
      CFDictionaryRef v12 = v36;
    }
    if (v12) {
      CFRelease(v12);
    }
LABEL_53:
    CFArrayRef v11 = v37;
    if (!v37) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  LODWORD(Value) = 0;
  std::string::size_type error = CFReadStreamGetError(v11).error;
LABEL_54:
  CFRelease(v11);
LABEL_55:
  if (fileURL) {
    CFRelease(fileURL);
  }
  if (Value)
  {
    OSStatus v29 = AudioUnitSetProperty(v3, 0x1195u, 0, 0, (const void *)error, (v33 - error) & 0xFFFFFFFC);
    if (error) {
      operator delete((void *)error);
    }
    if (v29) {
      return 4294956421;
    }
    goto LABEL_63;
  }
LABEL_62:
  if (error) {
    return 4294956421;
  }
LABEL_63:

  return ausdk::AUEffectBase::Initialize(this);
}

void sub_1BB5108EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19, const void *a20,const void *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a18);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a19);
  applesauce::CF::ObjectRef<__CFReadStream *>::~ObjectRef(&a20);
  applesauce::CF::URLRef::~URLRef(&a21);
  _Unwind_Resume(a1);
}

void AUFIRFilter::~AUFIRFilter(AUFIRFilter *this)
{
  AUFIRFilter::~AUFIRFilter(this);

  JUMPOUT(0x1C185D370);
}

{
  const void *v2;
  const void *v3;
  void *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1F14B22A8;
  CFStringRef v2 = (const void *)*((void *)this + 78);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 77);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 74);
  if (v4)
  {
    *((void *)this + 75) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1F14C8258;
  CFNumberRef v5 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v5);

  ausdk::AUBase::~AUBase(this);
}

uint64_t VPEchoGateBaseV3::Cleanup(VPEchoGateBaseV3 *this)
{
  return 0;
}

uint64_t VPEchoGateBaseV3::GetParameter(VPEchoGateBaseV3 *this, int a2, void *a3)
{
  return 4294967292;
}

uint64_t VPEchoGateBaseV3::SetParameter(VPEchoGateBaseV3 *this, int a2, void *a3)
{
  return 4294967292;
}

uint64_t VPEchoGateBaseV3::Process(VPEchoGateBaseV3 *this, float a2, float a3, DSPSplitComplex *a4, DSPSplitComplex *a5, DSPSplitComplex *a6, const float *a7, const float *a8, const float *a9, const float *a10, const float *a11, float *a12)
{
  if (a4 && a5 && a6) {
    return (*(uint64_t (**)(VPEchoGateBaseV3 *, float, float))(*(void *)this + 56))(this, a2, a3);
  }
  else {
    return 4294967246;
  }
}

uint64_t VPEchoGateBaseV3::Initialize(VPEchoGateBaseV3 *this, int a2, const AudioStreamBasicDescription *a3)
{
  (*(void (**)(VPEchoGateBaseV3 *))(*(void *)this + 48))(this);
  *((_DWORD *)this + 2) = a2;
  uint64_t v6 = *(void *)&a3->mBitsPerChannel;
  long long v7 = *(_OWORD *)&a3->mBytesPerPacket;
  *((_OWORD *)this + 1) = *(_OWORD *)&a3->mSampleRate;
  *((_OWORD *)this + 2) = v7;
  *((void *)this + 6) = v6;
  return 0;
}

uint64_t VPEchoGateV3::ProcessBypass(VPEchoGateV3 *this, DSPSplitComplex *a2, float *a3)
{
  *((unsigned char *)this + 736) = 1;
  if (a2 && a3)
  {
    uint64_t v6 = (char *)*((void *)this + 30);
    size_t v7 = *((unsigned int *)this + 72);
    CFAllocatorRef v8 = &v6[4 * v7];
    memcpy(v6, a2->realp, v7);
    memcpy(v8, a2->imagp, *((unsigned int *)this + 72));
    v10.realp = (float *)v6;
    v10.imagp = (float *)v8;
    if (*((unsigned char *)this + 736))
    {
      if (*((unsigned char *)this + 56))
      {
        memcpy(a3, v6, 4 * *((unsigned int *)this + 17));
        memcpy(&a3[*((unsigned int *)this + 17)], v8, 4 * *((unsigned int *)this + 17));
      }
      else
      {
        MultiRadixRealFFT::RealOutOfPlaceInverseTransform((const vDSP_DFT_SetupStruct ***)this + 31, &v10, *((DSPComplex **)this + 12));
        vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 35), 1, *((float **)this + 12), 1, *((unsigned int *)this + 16));
        vDSP_vadd(*((const float **)this + 12), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 16));
        memcpy(a3, *((const void **)this + 27), 4 * *((unsigned int *)this + 17));
        memmove(*((void **)this + 27), (const void *)(*((void *)this + 27) + 4 * *((unsigned int *)this + 17)), 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17)));
        bzero((void *)(*((void *)this + 27) + 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17))), 4 * *((unsigned int *)this + 17));
      }
    }
  }
  else
  {
    *((unsigned char *)this + 736) = 0;
  }
  return 0;
}

void ___ZL20VPEchoGateV3LogScopev_block_invoke()
{
}

uint64_t VPEchoGateV3::Initialize(VPEchoGateV3 *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4, char a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  (*(void (**)(VPEchoGateV3 *))(*(void *)this + 48))(this);
  (*(void (**)(VPEchoGateV3 *))(*(void *)this + 48))(this);
  *((_DWORD *)this + 2) = a2;
  uint64_t v9 = *(void *)&a4->mBitsPerChannel;
  long long v10 = *(_OWORD *)&a4->mBytesPerPacket;
  *((_OWORD *)this + 1) = *(_OWORD *)&a4->mSampleRate;
  *((_OWORD *)this + 2) = v10;
  *((void *)this + 6) = v9;
  *((unsigned char *)this + 56) = a5;
  CFArrayRef v11 = (const AudioStreamBasicDescription *)(2 * a2);
  *((_DWORD *)this + 16) = v11;
  *((_DWORD *)this + 17) = a2;
  *((_DWORD *)this + 15) = v11;
  *((_DWORD *)this + 72) = a2 & 0x7FFFFFFF;
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), v11, (uint64_t)this + 80, v12);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 15), (uint64_t)this + 104, v13);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 128, v14);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 152, v15);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 72), (uint64_t)this + 176, v16);
  EchoGateV3::myAllocABL((VPEchoGateV3 *)((char *)this + 16), (const AudioStreamBasicDescription *)*((unsigned int *)this + 16), (uint64_t)this + 200, v17);
  size_t v18 = (8 * *((_DWORD *)this + 15));
  CFStringRef v19 = malloc_type_malloc(v18, 0x2C8E6D5CuLL);
  uint64_t v20 = v19;
  if (v18 && !v19) {
    goto LABEL_20;
  }
  bzero(v19, v18);
  *((void *)this + 28) = v20;
  char v21 = malloc_type_malloc(v18, 0x2C8E6D5CuLL);
  CFDataRef v22 = v21;
  if (v18)
  {
    if (!v21) {
      goto LABEL_20;
    }
  }
  bzero(v21, v18);
  *((void *)this + 29) = v22;
  CFDataRef v23 = malloc_type_malloc(v18, 0x2C8E6D5CuLL);
  unsigned int v24 = v23;
  if (v18)
  {
    if (!v23) {
      goto LABEL_20;
    }
  }
  bzero(v23, v18);
  *((void *)this + 30) = v24;
  float v25 = *((double *)this + 2);
  *((float *)this + 18) = v25;
  uint64_t v26 = *((unsigned int *)this + 15);
  uint64_t v27 = malloc_type_malloc(4 * v26, 0x2C8E6D5CuLL);
  uint64_t v28 = (uint64_t)v27;
  if (v26)
  {
    if (!v27)
    {
LABEL_20:
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      CFStringRef v35 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v27, 4 * v26);
  *((void *)this + 35) = v28;
  CreateMagicalWindow(v28, *((_DWORD *)this + 16));
  uint64_t v29 = MultiRadixRealFFT::Initialize((VPEchoGateV3 *)((char *)this + 248), *((_DWORD *)this + 15));
  if (!v29) {
    operator new[]();
  }
  uint64_t v30 = v29;
  if (VPEchoGateV3LogScope(void)::once != -1) {
    dispatch_once(&VPEchoGateV3LogScope(void)::once, &__block_literal_global_10503);
  }
  if (VPEchoGateV3LogScope(void)::scope)
  {
    size_t v31 = *(NSObject **)VPEchoGateV3LogScope(void)::scope;
    if (!*(void *)VPEchoGateV3LogScope(void)::scope) {
      return v30;
    }
  }
  else
  {
    size_t v31 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    int v32 = *((_DWORD *)this + 15);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    uint64_t v37 = "vpEchoGateV3.cpp";
    __int16 v38 = 1024;
    int v39 = 420;
    __int16 v40 = 1024;
    int v41 = v30;
    __int16 v42 = 1024;
    int v43 = v32;
    _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: gate: err %d initializing res fft to %d", buf, 0x1Eu);
  }
  return v30;
}

void EchoGateV3::myAllocABL(EchoGateV3 *this, const AudioStreamBasicDescription *a2, uint64_t a3, AudioBufferList *a4)
{
  int v5 = (int)a2;
  size_t v7 = *(void **)(a3 + 16);
  if (v7)
  {
    free(v7);
    *(void *)(a3 + 16) = 0;
  }
  *(_DWORD *)a3 = 1;
  size_t v8 = (*((_DWORD *)this + 6) * v5);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)this + 7);
  *(_DWORD *)(a3 + 12) = v8;
  uint64_t v9 = malloc_type_malloc(v8, 0x2C8E6D5CuLL);
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    CFBooleanRef v13 = std::bad_alloc::bad_alloc(exception);
  }
  CFArrayRef v11 = v9;
  bzero(v9, v8);
  *(void *)(a3 + 16) = v11;
}

uint64_t VPEchoGateV3::ProcessInternal(VPEchoGateV3 *this, float a2, float a3, DSPSplitComplex *a4, DSPSplitComplex *a5, DSPSplitComplex *a6, const float *a7, const float *a8, const float *a9, const float *a10, float *a11, float *a12)
{
  uint64_t v407 = *MEMORY[0x1E4F143B8];
  float __B = (float)*((unsigned int *)this + 15);
  *((float *)this + 79) = a2;
  v390 = (float32x2_t *)((char *)this + 1212);
  v392 = (float *)((char *)this + 320);
  *((float *)this + 80) = a3;
  *((unsigned char *)this + 736) = a12 != 0;
  *((unsigned char *)this + 737) = a8 != 0;
  vDSP_Length v16 = *((unsigned int *)this + 72);
  size_t v18 = (float *)*((void *)this + 28);
  uint64_t v17 = (float *)*((void *)this + 29);
  CFStringRef v19 = &v18[v16];
  v406.realp = v18;
  v406.imagp = v19;
  uint64_t v20 = &v17[v16];
  v404.realp = v17;
  v404.imagp = v20;
  char v21 = (float *)*((void *)this + 30);
  CFDataRef v22 = &v21[v16];
  __A.realp = v21;
  __A.imagp = v22;
  vDSP_vsmul(a4->realp, 1, &__B, v18, 1, v16);
  vDSP_vsmul(a4->imagp, 1, &__B, v19, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a6->realp, 1, &__B, v17, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a6->imagp, 1, &__B, v20, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a5->realp, 1, &__B, v21, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(a5->imagp, 1, &__B, v22, 1, *((unsigned int *)this + 72));
  if (*((unsigned char *)this + 1440))
  {
    CFDataRef v23 = (void (*)(void, char *, char *, float *, float *, float *, float *, float *))*((void *)this + 179);
    if (v23)
    {
      int v24 = (int)a7;
      if (!a7) {
        int v24 = (int)v18;
      }
      int v369 = v24;
      v23(*((void *)this + 177), (char *)this + 312, (char *)this + 316, v392, v21, v22, v17, v20);
    }
  }
  DSPSplitComplex __src = *(DSPSplitComplex *)((char *)this + 1160);
  DSPSplitComplex v396 = __src;
  uint64_t v400 = 0;
  float v399 = 0.0;
  ++*((_DWORD *)this + 348);
  float32x2_t v25 = v390[46];
  float v26 = *((float *)this + 397);
  if (!*((unsigned char *)this + 1492)) {
    goto LABEL_9;
  }
  if (*((unsigned char *)this + 1493))
  {
    float32x2_t v25 = *(float32x2_t *)((char *)this + 1592);
    float v26 = *((float *)this + 400);
LABEL_9:
    float v373 = 0.0;
    goto LABEL_10;
  }
  float32x2_t v379 = v390[46];
  __C[0] = 0.0;
  vDSP_svesq(*((const float **)this + 181), 1, __C, *((unsigned int *)this + 369));
  float v42 = log10((float)(__C[0] / (float)*((unsigned int *)this + 369)) + 0.01) * 10.0;
  float v43 = v42 - *((float *)this + 372);
  float v373 = v43;
  if (v43 <= 0.0)
  {
    float32x2_t v25 = v379;
  }
  else
  {
    float v44 = powf(fminf(v43 / *((float *)this + 370), 1.0), *((float *)this + 371));
    float32x2_t v25 = vmla_n_f32(v379, vsub_f32(*(float32x2_t *)((char *)this + 1592), v379), v44);
    float v26 = v26 + (float)(v44 * (float)(*((float *)this + 400) - v26));
  }
LABEL_10:
  *((float *)this + 302) = *((float *)this + 394) + 0.0;
  float32x2_t v378 = v25;
  *((float *)this + 301) = v26 + 0.0;
  float32x2_t *v390 = vadd_f32(v25, 0);
  float v27 = *((float *)this + 407);
  *((float *)this + 78) = v27;
  float v385 = *((float *)this + 79);
  float v28 = *((float *)this + 351);
  float v29 = *((float *)this + 352);
  float v389 = *((float *)this + 349);
  float v391 = *((float *)this + 350);
  __C[0] = v389;
  __C[1] = v391;
  float v377 = v28;
  __C[2] = v28;
  __C[3] = v29;
  if (*((unsigned char *)this + 1440))
  {
    uint64_t v30 = (void (*)(void, float *, uint64_t, void))*((void *)this + 178);
    if (v30) {
      v30(*((void *)this + 177), __C, 16, 0);
    }
  }
  *__A.imagp = 0.0;
  *v404.imagp = 0.0;
  *v406.imagp = 0.0;
  size_t v31 = (float *)*((void *)this + 24);
  int v32 = (float *)*((void *)this + 18);
  int v33 = (float *)*((void *)this + 21);
  vDSP_zvmags(&__A, 1, v31, 1, *((unsigned int *)this + 72));
  vDSP_zvmags(&v404, 1, v32, 1, *((unsigned int *)this + 72));
  vDSP_zvmags(&v406, 1, v33, 1, *((unsigned int *)this + 72));
  *((float *)&v400 + 1) = 1.0 / *((float *)this + 73);
  vDSP_vsmul(v31, 1, (const float *)&v400 + 1, v31, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(v32, 1, (const float *)&v400 + 1, v32, 1, *((unsigned int *)this + 72));
  vDSP_vsmul(v33, 1, (const float *)&v400 + 1, v33, 1, *((unsigned int *)this + 72));
  if (*((unsigned char *)this + 737)) {
    vDSP_vsq(a8, 1, *((float **)this + 145), 1, *((int *)this + 214));
  }
  *((_DWORD *)this + 296) = 0;
  std::string v34 = &DspLib::BassKoenig::kSRCcoeffs[16];
  if (*((float *)this + 411) == 0.0)
  {
    *((int32x2_t *)this + 94) = vdup_n_s32(0x3C23D70Au);
    goto LABEL_71;
  }
  CFStringRef v35 = (char *)*((void *)this + 115);
  vDSP_vmul(*((const float **)this + 96), 1, v32, 1, *((float **)this + 146), 1, *((int *)this + 130));
  uint64_t v36 = *((unsigned int *)this + 130);
  if (*((unsigned char *)this + 737))
  {
    if ((int)v36 >= 1)
    {
      uint64_t v37 = 0;
      uint64_t v38 = *((void *)this + 145);
      do
      {
        float v39 = *(float *)(v38 + v37 * 4);
        if (v39 <= 0.0)
        {
          *(_DWORD *)&v35[v37 * 4] = 0;
          __int16 v40 = (char *)*((void *)this + 146);
          float v41 = 0.0;
        }
        else
        {
          __int16 v40 = v35;
          float v41 = v31[v37] / v39;
        }
        *(float *)&v40[v37 * 4] = v41;
        ++v37;
      }
      while (v36 != v37);
    }
  }
  else
  {
    memcpy(v35, v31, 4 * (int)v36);
    LODWORD(v36) = *((_DWORD *)this + 130);
  }
  vDSP_vmul(*((const float **)this + 96), 1, (const float *)v35, 1, (float *)v35, 1, (int)v36);
  int v45 = *((_DWORD *)this + 130);
  if (v45 >= 0) {
    int v46 = *((_DWORD *)this + 130);
  }
  else {
    int v46 = v45 + 1;
  }
  int v47 = v46 >> 1;
  uint64_t v401 = 0;
  if (v45 <= 1)
  {
    float v48 = 0.0;
    float v49 = 0.0;
    float v50 = 0.0;
  }
  else
  {
    VPEchoGateV3::GatecrossCorrSpec((VPEchoGateV3 *)v35, *((const float **)this + 97), *((const float **)this + 146), *((const float **)this + 98), *((float **)this + 147), (float *)&v401 + 1, (float *)&v401, (float *)(v46 >> 1), v369);
    float v49 = *((float *)&v401 + 1);
    float v48 = *(float *)&v401;
    float v50 = *((float *)&v401 + 1) / (float)(*(float *)&v401 + 1.0e-15);
    int v45 = *((_DWORD *)this + 130);
  }
  float v403 = 0.0;
  float v402 = 0.0;
  VPEchoGateV3::GatecrossCorrSpec((VPEchoGateV3 *)&v35[4 * v47], (const float *)(*((void *)this + 97) + 4 * v47), (const float *)(*((void *)this + 146) + 4 * v47), (const float *)(*((void *)this + 98) + 4 * v47), (float *)(*((void *)this + 147) + 4 * v47), &v403, &v402, (float *)(v45 - v47), v369);
  float v51 = (float)(v403 + v49) / (float)((float)(v402 + v48) + 1.0e-15);
  if (v51 <= (float)(v403 / (float)(v402 + 1.0e-15))) {
    float v51 = v403 / (float)(v402 + 1.0e-15);
  }
  if (v50 > v51) {
    float v51 = v50;
  }
  *((_DWORD *)this + 296) = 0;
  if (*((float *)this + 415) != 1.0)
  {
    int v53 = 0;
    goto LABEL_46;
  }
  if (v51 > 0.8 || v51 < 0.0)
  {
    int v52 = 1;
    *((_DWORD *)this + 296) = 1;
    float v54 = 0.0;
    goto LABEL_45;
  }
  int v52 = 0;
  int v53 = 0;
  float v54 = *((float *)this + 300);
  if (v54 < 1200.0)
  {
LABEL_45:
    *((float *)this + 300) = v54 + *((float *)this + 76);
    int v53 = v52;
  }
LABEL_46:
  if (v51 >= 0.0 || (float v55 = 0.5, *((float *)this + 121) >= 3000.0) && !v53)
  {
    if (v51 >= -0.1)
    {
      float v55 = 0.001;
      if (v51 >= 0.001)
      {
        float v55 = 0.5;
        if (v51 <= 0.5 || *((float *)this + 121) >= 3000.0 && !v53)
        {
          float v55 = v51;
          if (v51 > 0.1) {
            float v55 = 0.1;
          }
        }
      }
    }
    else
    {
      float v55 = 0.1;
    }
  }
  if (v51 <= 0.0)
  {
    float v56 = *((float *)this + 185);
    float v57 = *((float *)this + 186);
    float v58 = *((float *)this + 187);
  }
  else
  {
    float v56 = (float)(*((float *)this + 137) * *((float *)this + 185)) + (float)(*((float *)this + 136) * v55);
    float v57 = (float)(*((float *)this + 139) * *((float *)this + 186)) + (float)(*((float *)this + 138) * v55);
    float v58 = (float)(*((float *)this + 141) * *((float *)this + 187)) + (float)(*((float *)this + 140) * v55);
  }
  if (v56 < 0.001) {
    float v56 = 0.001;
  }
  *((float *)this + 185) = v56;
  if (v57 < 0.001) {
    float v57 = 0.001;
  }
  *((float *)this + 186) = v57;
  if (v58 < 0.001) {
    float v58 = 0.001;
  }
  *((float *)this + 187) = v58;
  if (v57 <= v56) {
    float v57 = v56;
  }
  if (v58 <= v57) {
    float v58 = v57;
  }
  *((float *)this + 188) = v58;
  *((float *)this + 189) = v56;
  VPEchoGateV3::GatesmoothPowerSpectrum(*((VPEchoGateV3 **)this + 97), (const float *)v35, (const float *)*((unsigned int *)this + 130), *((float *)this + 190));
  VPEchoGateV3::GatesmoothPowerSpectrum(*((VPEchoGateV3 **)this + 98), *((const float **)this + 146), (const float *)*((unsigned int *)this + 130), *((float *)this + 190));
LABEL_71:
  if (*((float *)this + 415) != 0.0)
  {
    float v59 = 0.0;
    if (*((float *)this + 298) != *((float *)this + 297) || (float v59 = *((float *)this + 299), v59 < 1200.0))
    {
      float v59 = v59 + *((float *)this + 76);
      *((float *)this + 299) = v59;
    }
    if (*((float *)this + 300) < 1000.0
      && v59 < 1000.0
      && *((float *)this + 408) * 2000.0 < (float)(*((float *)this + 121) + *((float *)this + 121)))
    {
      *((_DWORD *)this + 121) = 0;
    }
  }
  vDSP_sve(&v32[*((int *)this + 129)], 1, (float *)this + 146, *((int *)this + 130) - (uint64_t)*((int *)this + 129));
  vDSP_sve(&v33[*((int *)this + 129)], 1, (float *)this + 122, *((int *)this + 130) - (uint64_t)*((int *)this + 129));
  float v60 = *((float *)this + 143);
  *((float *)this + 146) = *((float *)this + 146) / v60;
  *((float *)this + 122) = *((float *)this + 122) / v60;
  if (*((float *)this + 410) != 1) {
    goto LABEL_84;
  }
  if (*((float *)this + 18) <= 8000.0) {
    goto LABEL_84;
  }
  float v403 = 0.0;
  float v402 = 0.0;
  vDSP_sve(&v32[*((int *)this + 130)], 1, &v403, *((int *)this + 131) - (uint64_t)*((int *)this + 130));
  vDSP_sve(&v33[*((int *)this + 130)], 1, &v402, *((int *)this + 131) - (uint64_t)*((int *)this + 130));
  float v61 = *((float *)this + 146);
  float v60 = *((float *)this + 143);
  float v62 = *((float *)this + 144);
  float v63 = (float)(v403 + (float)(v61 * v60)) / v62;
  if (v63 <= v61) {
    goto LABEL_84;
  }
  float v64 = *((float *)this + 122);
  float v65 = (float)(v402 + (float)(v64 * v60)) / v62;
  if (v65 > v64)
  {
    *((float *)this + 146) = v63;
    *((float *)this + 122) = v65;
    int v66 = *((_DWORD *)this + 131);
    int v67 = 1;
    int v68 = v66;
    float v69 = v62;
  }
  else
  {
LABEL_84:
    int v67 = 0;
    int v66 = *((_DWORD *)this + 130);
    int v68 = *((_DWORD *)this + 128);
    float v62 = v60;
    float v69 = *((float *)this + 142);
  }
  if (*((unsigned char *)this + 737))
  {
    vDSP_vmul(v32, 1, *((const float **)this + 145), 1, v32, 1, v66);
    if (*((_DWORD *)this + 234)) {
      vDSP_vmul(a11, 1, *((const float **)this + 145), 1, *((float **)this + 118), 1, v66);
    }
  }
  vDSP_sve(&v32[*((int *)this + 129)], 1, (float *)this + 157, v66 - (uint64_t)*((int *)this + 129));
  float v70 = *((float *)this + 157) / v62;
  *((float *)this + 157) = v70;
  uint64_t v71 = *((int *)this + 129);
  vDSP_Length v72 = v68 - v71;
  float v388 = v70;
  if (*((float *)this + 411) == 0.0)
  {
    vDSP_Length v76 = &v31[v71];
    uint64_t v77 = (float *)((char *)this + 580);
    vDSP_Length v78 = (int)v72;
  }
  else
  {
    int v73 = *((_DWORD *)this + 234);
    if (v73 == 4 || v73 == 2)
    {
      memcpy(*((void **)this + 146), *((const void **)this + 118), 4 * *((unsigned int *)this + 2));
      vDSP_Length v72 = (int)v72;
    }
    else
    {
      uint64_t v74 = &v32[v71];
      unsigned int v75 = (const float *)((char *)this + 756);
      if (v73)
      {
        vDSP_Length v72 = (int)v72;
        vDSP_vsmul(v74, 1, v75, (float *)(*((void *)this + 146) + 4 * v71), 1, (int)v72);
        if ((*((_DWORD *)this + 234) | 2) == 3) {
          vDSP_vmax((const float *)(*((void *)this + 146) + 4 * *((int *)this + 129)), 1, (const float *)(*((void *)this + 118) + 4 * *((int *)this + 129)), 1, (float *)(*((void *)this + 146) + 4 * *((int *)this + 129)), 1, (int)v72);
        }
      }
      else
      {
        vDSP_vsmul(v74, 1, v75, (float *)(*((void *)this + 146) + 4 * v71), 1, v68 - v71);
      }
    }
    LODWORD(v400) = 0;
    uint64_t v79 = *((int *)this + 129);
    int v80 = (float *)(*((void *)this + 145) + 4 * v79);
    vDSP_vsub((const float *)(*((void *)this + 146) + 4 * v79), 1, &v31[v79], 1, v80, 1, v72);
    vDSP_vthr(v80, 1, (const float *)&v400, v80, 1, v72);
    uint64_t v77 = (float *)((char *)this + 580);
    vDSP_Length v76 = v80;
    vDSP_Length v78 = v72;
  }
  vDSP_sve(v76, 1, v77, v78);
  float v81 = *((float *)this + 145) / v69;
  *((float *)this + 145) = v81;
  float v82 = *((float *)this + 146);
  *((float *)this + 199) = v82;
  float v83 = *((float *)this + 157);
  uint64_t v84 = (float *)&unk_1BB876000;
  float v376 = v29;
  if (*((float *)this + 411) == 0.0)
  {
    float v90 = *((float *)this + 136);
    float v91 = *((float *)this + 137);
    float v92 = (float)(v91 * *((float *)this + 148)) + (float)(v90 * v81);
    float v93 = v91 * *((float *)this + 159);
    float v94 = 0.0;
  }
  else
  {
    float v85 = v81 + v29 * -2.0 * v83;
    if (v85 >= 0.0) {
      float v86 = v81 + v29 * -2.0 * v83;
    }
    else {
      float v86 = 0.0;
    }
    float v87 = *((float *)this + 188);
    float v403 = 0.0;
    float v402 = 0.0;
    UInt32 v88 = (const float *)*((void *)this + 115);
    int v89 = *((_DWORD *)this + 234);
    if (v89 == 4 || v89 == 2)
    {
      memcpy(*((void **)this + 146), *((const void **)this + 118), 4 * *((unsigned int *)this + 2));
    }
    else if (v89)
    {
      vDSP_vsmul(v32, 1, (const float *)this + 188, *((float **)this + 146), 1, *((int *)this + 214));
      if ((*((_DWORD *)this + 234) | 2) == 3) {
        vDSP_vmax((const float *)(*((void *)this + 146) + 4 * *((int *)this + 129)), 1, (const float *)(*((void *)this + 118) + 4 * *((int *)this + 129)), 1, (float *)(*((void *)this + 146) + 4 * *((int *)this + 129)), 1, *((int *)this + 214));
      }
    }
    else
    {
      vDSP_vsmul(v32, 1, (const float *)this + 188, *((float **)this + 146), 1, *((int *)this + 214));
    }
    int v95 = v67;
    vDSP_vmin(*((const float **)this + 146), 1, v31, 1, *((float **)this + 146), 1, *((int *)this + 214));
    uint64_t v96 = (const float *)*((unsigned int *)this + 214);
    if ((int)v96 >= 1)
    {
      int v97 = (float *)*((void *)this + 146);
      uint64_t v98 = v31;
      int v99 = (float *)v88;
      uint64_t v100 = *((unsigned int *)this + 214);
      do
      {
        float v101 = *v98++;
        float v102 = v101;
        float v103 = *v97++;
        float v104 = v102 - v103;
        if (v102 <= v103) {
          float v105 = 0.0;
        }
        else {
          float v105 = v104;
        }
        *v99++ = v105;
        --v100;
      }
      while (v100);
    }
    VPEchoGateV3::Gate_spread_energy(*((VPEchoGateV3 **)this + 147), v88, *((const float **)this + 106), *((float **)this + 116), v96, *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    int v106 = *((_DWORD *)this + 203);
    if (v106 + 1 < *((_DWORD *)this + 204)) {
      int v107 = v106 + 1;
    }
    else {
      int v107 = 0;
    }
    *((_DWORD *)this + 203) = v107;
    int v108 = *((_DWORD *)this + 214);
    int v109 = v107 * v108;
    memcpy((void *)(*((void *)this + 109) + 4 * v107 * v108), *((const void **)this + 147), 4 * v108);
    int v110 = *((_DWORD *)this + 214);
    uint64_t v111 = *((void *)this + 147);
    if (v110 >= 1)
    {
      unsigned int v112 = (float *)(*((void *)this + 110) + 4 * v109);
      unint64_t v113 = (float *)*((void *)this + 147);
      uint64_t v114 = *((unsigned int *)this + 214);
      do
      {
        float v115 = *v113++;
        *v112++ = log10f(v115 + 1.0e-15);
        --v114;
      }
      while (v114);
    }
    VPEchoGateV3::Gate_spread_energy((VPEchoGateV3 *)(*((void *)this + 145) + 4 * *((int *)this + 208)), (const float *)(v111 + 4 * *((int *)this + 208)), *((const float **)this + 106), *((float **)this + 116), (const float *)(v110 - *((_DWORD *)this + 208)), *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    vDSP_vsmul((const float *)(*((void *)this + 145) + 4 * *((int *)this + 209)), 1, (const float *)this + 238, (float *)(*((void *)this + 147) + 4 * *((int *)this + 209)), 1, *((int *)this + 214) - (uint64_t)*((int *)this + 209));
    VPEchoGateV3::Gate_spread_energy((VPEchoGateV3 *)(*((void *)this + 145) + 4 * *((int *)this + 209)), (const float *)(*((void *)this + 147) + 4 * *((int *)this + 209)), *((const float **)this + 106), *((float **)this + 116), (const float *)(*((_DWORD *)this + 214) - *((_DWORD *)this + 209)), *((_DWORD *)this + 241), *((_DWORD *)this + 242));
    vDSP_vsmul((const float *)(*((void *)this + 145) + 4 * *((int *)this + 210)), 1, (const float *)this + 239, (float *)(*((void *)this + 147) + 4 * *((int *)this + 210)), 1, *((int *)this + 214) - (uint64_t)*((int *)this + 210));
    int v116 = *((_DWORD *)this + 203);
    int v117 = *((_DWORD *)this + 214) * v116;
    memcpy(*((void **)this + 115), (const void *)(*((void *)this + 110) + 4 * v117), 4 * v66);
    memcpy(*((void **)this + 116), (const void *)(*((void *)this + 109) + 4 * v117), 4 * v66);
    int v118 = *((_DWORD *)this + 204);
    if (v118 > 1)
    {
      for (int i = 1; i < v118; ++i)
      {
        if (v116 + 1 < v118) {
          ++v116;
        }
        else {
          int v116 = 0;
        }
        int v120 = *((_DWORD *)this + 214) * v116;
        vDSP_vadd((const float *)(*((void *)this + 110) + 4 * v120), 1, *((const float **)this + 115), 1, *((float **)this + 115), 1, v66);
        vDSP_vadd((const float *)(*((void *)this + 109) + 4 * v120), 1, *((const float **)this + 116), 1, *((float **)this + 116), 1, v66);
        int v118 = *((_DWORD *)this + 204);
      }
    }
    vDSP_vsmul(*((const float **)this + 115), 1, (const float *)this + 206, *((float **)this + 115), 1, *((int *)this + 214));
    vDSP_vsmul(*((const float **)this + 116), 1, (const float *)this + 206, *((float **)this + 116), 1, *((int *)this + 214));
    float32x2x2_t v121 = (const float *)*((void *)this + 145);
    uint64_t v122 = *((unsigned int *)this + 129);
    if ((int)v122 < 1)
    {
      LODWORD(v122) = 0;
      float32x2x2_t v123 = (float *)*((void *)this + 145);
    }
    else
    {
      memset_pattern16(*((void **)this + 145), &unk_1BB873A60, 4 * v122);
      float32x2x2_t v123 = (float *)&v121[(v122 - 1) + 1];
    }
    float v382 = v27;
    if ((int)v122 >= v66)
    {
      int v67 = v95;
    }
    else
    {
      unint64_t v124 = v66 - (unint64_t)v122;
      float32x2x2_t v125 = (float *)(*((void *)this + 115) + 4 * v122);
      uint64_t v126 = (float *)(*((void *)this + 116) + 4 * v122);
      do
      {
        float v127 = *((float *)this + 202);
        float v128 = *v126++;
        float v129 = log10f(v128 + 1.0e-15);
        float v130 = *v125++;
        float v131 = v127 * (float)(v129 - v130);
        if (v131 < 0.0) {
          float v131 = 0.0;
        }
        if (v131 > 1.0) {
          float v131 = 1.0;
        }
        float v403 = v131;
        *v123++ = v131;
        --v124;
      }
      while (v124);
      LODWORD(v122) = v66;
      int v67 = v95;
    }
    uint64_t v132 = *((int *)this + 214);
    if ((int)v122 < (int)v132) {
      memset_pattern16(v123, &unk_1BB873A60, 4 * (v132 + ~v122) + 4);
    }
    unint64_t v133 = (float *)*((void *)this + 115);
    if (*((float *)this + 75) < 0.015)
    {
      vDSP_vadd(v121, 1, *((const float **)this + 111), 1, *((float **)this + 115), 1, v66);
      float v403 = 0.5;
      vDSP_vsmul(v133, 1, &v403, v133, 1, v66);
      uint64_t v132 = *((int *)this + 214);
      if ((int)v132 > v66)
      {
        uint64_t v134 = v132 - v66;
        uint64_t v135 = &v133[v66];
        unint64_t v136 = &v121[v66];
        do
        {
          int v137 = *(_DWORD *)v136++;
          *(_DWORD *)v135++ = v137;
          --v134;
        }
        while (v134);
      }
      unint64_t v133 = (float *)*((void *)this + 111);
    }
    memcpy(v133, v121, 4 * v132);
    unint64_t v138 = (const float *)*((void *)this + 113);
    int v139 = *((_DWORD *)this + 129);
    if (v139 < 1)
    {
      unsigned int v145 = 0;
      uint64_t v142 = (float *)*((void *)this + 113);
      std::string v34 = &DspLib::BassKoenig::kSRCcoeffs[16];
      uint64_t v143 = (float *)((char *)this + 752);
    }
    else
    {
      uint64_t v140 = (float *)*((void *)this + 147);
      uint64_t v141 = *((unsigned int *)this + 129);
      uint64_t v142 = (float *)*((void *)this + 113);
      std::string v34 = DspLib::BassKoenig::kSRCcoeffs + 64;
      uint64_t v143 = (float *)((char *)this + 752);
      do
      {
        float v144 = *v140++;
        *v142++ = v144 * 0.0316;
        --v141;
      }
      while (v141);
      unsigned int v145 = v139;
    }
    uint64_t v146 = *((unsigned int *)this + 214);
    if ((int)v145 < (int)v146)
    {
      uint64_t v147 = (float *)(*((void *)this + 115) + 4 * v139);
      uint64_t v148 = v146 - v145;
      uint64_t v149 = (float *)(*((void *)this + 147) + 4 * v145);
      do
      {
        float v150 = *v147++;
        float v151 = (float)(1.0 - v150) * *((float *)this + 414);
        int v152 = llroundf(v151 + (float)(v150 * *((float *)this + 413)));
        float v403 = v151 + (float)(v150 * *((float *)this + 413));
        if (v152 >= 25) {
          int v152 = 25;
        }
        float v153 = *v149++;
        *v142++ = *((float *)this + (v152 & ~(v152 >> 31)) + 263) * v153;
        --v148;
      }
      while (v148);
    }
    double v154 = (float)(v83 * (float)(v29 + v87));
    long long v155 = (float *)*((void *)this + 145);
    float v403 = 0.8;
    float v402 = 0.2;
    vDSP_vsmul(v138, 1, &v403, v155, 1, v66);
    vDSP_vsmul(*((const float **)this + 112), 1, &v402, *((float **)this + 112), 1, v66);
    vDSP_vadd(v155, 1, *((const float **)this + 112), 1, v155, 1, v66);
    vDSP_vmin(*((const float **)this + 113), 1, v155, 1, v155, 1, v66);
    memcpy(*((void **)this + 112), *((const void **)this + 113), 4 * *((int *)this + 214));
    int v156 = *((_DWORD *)this + 129);
    float v157 = 0.0;
    if (v66 > v156)
    {
      uint64_t v158 = *((void *)this + 146);
      float v159 = v34[514];
      uint64_t v160 = *((int *)this + 129);
      do
      {
        float v161 = *(float *)(v158 + 4 * v160);
        float v162 = v155[v160];
        if (v161 > v162)
        {
          float v163 = v162 * 3.0;
          float v164 = (float)(v161 - v162) * 0.25;
          float v165 = (float)(v161 + (float)(v162 * -3.0)) + (float)(v162 * 0.5);
          if (v161 <= v163) {
            float v166 = v164;
          }
          else {
            float v166 = v165;
          }
          float v402 = v166;
          float v167 = v159 + (float)((float)(*((float *)this + 240) * 4.0) * *(float *)(v158 + 4 * v160));
          float v403 = (float)((float)(*(float *)(*((void *)this + 147) + 4 * v160) / v167)
                       * (float)(*(float *)(*((void *)this + 147) + 4 * v160) / v167))
               + 1.0;
          float v157 = v157 + (float)(v166 / v403);
        }
        ++v160;
      }
      while (v66 != v160);
    }
    float v168 = (float)(v157 * (float)(1.0 / *v143)) / v62;
    float v169 = v34[514];
    float v170 = (float)(v168 + (float)((float)(v66 - v156) * v169)) / *((float *)this + 157);
    if (v170 > 1.0) {
      float v170 = 1.0;
    }
    float v171 = log10f(v170) * 10.0;
    float v172 = -20.0;
    if (v171 >= -20.0)
    {
      float v172 = v171;
      if (v171 > 0.0) {
        float v172 = 0.0;
      }
    }
    float v173 = (float)(*((float *)this + 137) * *((float *)this + 215)) + (float)(*((float *)this + 136) * v172);
    if (v173 > 0.0) {
      float v173 = 0.0;
    }
    float v174 = (float)(*((float *)this + 139) * *((float *)this + 216)) + (float)(*((float *)this + 138) * v172);
    if (v174 > 0.0) {
      float v174 = 0.0;
    }
    float v175 = (float)(*((float *)this + 141) * *((float *)this + 217)) + (float)(*((float *)this + 140) * v172);
    if (v175 > 0.0) {
      float v175 = 0.0;
    }
    *((float *)this + 215) = v173;
    *((float *)this + 216) = v174;
    *((float *)this + 217) = v175;
    if (v173 >= v175) {
      float v175 = v173;
    }
    if (v175 >= v174) {
      float v176 = v175;
    }
    else {
      float v176 = v174;
    }
    Float64 v177 = (float *)*((void *)this + 114);
    uint64_t v178 = *((unsigned int *)this + 205);
    uint64_t v84 = (float *)&unk_1BB876000;
    if ((int)v178 <= 1)
    {
      *Float64 v177 = v176;
    }
    else
    {
      uint64_t v179 = 4 * v178 - 8;
      unsigned int v180 = v178 + 1;
      do
      {
        *(float *)((char *)v177 + v179 + 4) = *(float *)((char *)v177 + v179);
        v179 -= 4;
        --v180;
      }
      while (v180 > 2);
      *Float64 v177 = v176;
      long long v181 = v177 + 1;
      uint64_t v182 = v178 - 1;
      do
      {
        float v183 = *v181++;
        float v184 = v183;
        if (v176 < v183) {
          float v176 = v184;
        }
        --v182;
      }
      while (v182);
    }
    float v185 = (v86 + 1.0e-20) / (v154 + 1.0e-20);
    float v90 = *((float *)this + 136);
    float v91 = *((float *)this + 137);
    float v93 = v91 * *((float *)this + 159);
    float v380 = *((float *)this + 157);
    float v81 = *((float *)this + 145);
    float v92 = (float)(v91 * *((float *)this + 148)) + (float)(v90 * v81);
    if ((float)(log10f((float)(v92 + v169) / (float)((float)(v93 + (float)(v90 * v380)) + v169)) * 10.0) <= (float)(*((float *)this + 303) + 3.0))
    {
      float v188 = -20.0;
      if (v176 >= -20.0) {
        float v188 = v176;
      }
      float v94 = 0.0;
      float v187 = 0.0 - roundf(v188);
      if (v187 >= 0.0) {
        float v94 = v187;
      }
      if (v94 > 25.0) {
        float v94 = 25.0;
      }
    }
    else
    {
      float v186 = -10.0;
      if (v176 >= -10.0) {
        float v186 = v176;
      }
      float v94 = 0.0;
      float v187 = 0.0 - roundf(v186);
    }
    float v395 = 0.0;
    if (v187 < 0.0) {
      float v187 = 0.0;
    }
    if (v187 > 25.0) {
      float v187 = 25.0;
    }
    float v27 = v382;
    if (v185 <= 6.0 || *v143 >= 0.05)
    {
      float v82 = *((float *)this + 199);
      float v83 = v380;
      goto LABEL_209;
    }
    float v83 = v380 * *((float *)this + (int)v94 + 263);
    *((float *)this + 157) = v83;
    float v82 = *((float *)this + 199) * *((float *)this + (int)v187 + 263);
  }
  float v395 = v94;
LABEL_209:
  float v375 = v27 + v385;
  float v189 = *((float *)this + 146);
  float v190 = *((float *)this + 122);
  *((float *)this + 145) = v92;
  float v191 = (float)(v91 * *((float *)this + 149)) + (float)(v90 * v189);
  *((float *)this + 146) = v191;
  float v192 = (float)(v91 * *((float *)this + 150)) + (float)(v90 * v190);
  *((float *)this + 122) = v192;
  float v193 = *((float *)this + 140);
  float v194 = *((float *)this + 141);
  float v195 = (float)(v194 * *((float *)this + 154)) + (float)(v193 * v81);
  *((float *)this + 151) = v195;
  float v196 = (float)(v194 * *((float *)this + 155)) + (float)(v193 * v189);
  *((float *)this + 152) = v196;
  float v197 = (float)(v194 * *((float *)this + 156)) + (float)(v193 * v190);
  *((float *)this + 123) = v197;
  *((float *)this + 148) = v92;
  *((float *)this + 149) = v191;
  *((float *)this + 150) = v192;
  *((float *)this + 154) = v195;
  *((float *)this + 155) = v196;
  *((float *)this + 156) = v197;
  float v198 = v93 + (float)(v90 * v83);
  *((float *)this + 157) = v198;
  float v199 = (float)(v194 * *((float *)this + 160)) + (float)(v193 * v83);
  *((float *)this + 158) = v199;
  float v200 = (float)(v91 * *((float *)this + 200)) + (float)(v90 * v82);
  *((float *)this + 199) = v200;
  float v201 = (float)(v194 * *((float *)this + 201)) + (float)(v193 * v82);
  *((float *)this + 198) = v201;
  *((float *)this + 159) = v198;
  *((float *)this + 160) = v199;
  *((float *)this + 200) = v200;
  *((float *)this + 201) = v201;
  memmove((char *)this + 328, (char *)this + 324, 0x4CuLL);
  uint64_t v202 = 0;
  do
  {
    *((_DWORD *)this + v202 + 120) = *((_DWORD *)this + v202 + 119);
    unint64_t v203 = v202 + 19;
    --v202;
  }
  while (v203 > 1);
  *((_DWORD *)this + 81) = *((_DWORD *)this + 122);
  *((_DWORD *)this + 101) = *((_DWORD *)this + 123);
  float v204 = *((float *)this + 80);
  *(float *)&int v205 = 0.0;
  if (v204 > 0.0)
  {
    if (v204 <= 1000000000.0) {
      goto LABEL_215;
    }
    *(float *)&int v205 = 2000.0;
  }
  float *v392 = *(float *)&v205;
  float v204 = *(float *)&v205;
LABEL_215:
  float v206 = v204 * *((float *)this + 77);
  if (v206 > 19.0) {
    float v206 = 19.0;
  }
  int v207 = llroundf(v206);
  unsigned int v208 = v207 & ~(v207 >> 31);
  if (v207 <= 1) {
    int v207 = 1;
  }
  unsigned int v209 = v207 - 1;
  if (v208 > 0x12)
  {
    unsigned int v208 = 19;
    unsigned int v209 = 19;
  }
  *(float *)&uint64_t v400 = (float)(int)v209 + 0.5;
  float v210 = (float)((float)(int)v208 + 0.5) - v206;
  if (v210 > 1.0) {
    float v210 = 1.0;
  }
  if (v210 < 0.0) {
    float v210 = 0.0;
  }
  double v211 = 1.0 - v210;
  float v212 = (float)(*((float *)this + v209 + 81) * v210) + v211 * *((float *)this + v208 + 81);
  *((float *)this + 147) = v212;
  float v213 = (float)(*((float *)this + v209 + 101) * v210) + v211 * *((float *)this + v208 + 101);
  float v214 = v34[514];
  float v386 = log10f(*((float *)this + 145) + v214) * 10.0;
  *((float *)this + 145) = v386;
  float v383 = log10f(*((float *)this + 146) + v214) * 10.0;
  *((float *)this + 146) = v383;
  float v381 = log10f(v212 + v214) * 10.0;
  *((float *)this + 147) = v381;
  float v215 = log10f(*((float *)this + 151) + v214) * 10.0;
  *((float *)this + 151) = v215;
  float v216 = log10f(*((float *)this + 152) + v214) * 10.0;
  *((float *)this + 152) = v216;
  float v217 = log10f(v213 + v214) * 10.0;
  *((float *)this + 153) = v217;
  float v218 = log10f(*((float *)this + 157) + v214) * 10.0;
  *((float *)this + 157) = v218;
  float v219 = log10f(*((float *)this + 158) + v214) * 10.0;
  *((float *)this + 158) = v219;
  float v220 = log10f(*((float *)this + 199) + v214) * 10.0;
  *((float *)this + 199) = v220;
  float v221 = log10f(*((float *)this + 198) + v214) * 10.0;
  *((float *)this + 198) = v221;
  float v393 = v215;
  if (v386 >= v215) {
    float v222 = v386;
  }
  else {
    float v222 = v215;
  }
  if (v383 >= v216) {
    float v223 = v383;
  }
  else {
    float v223 = v216;
  }
  if (v381 >= v217) {
    float v224 = v381;
  }
  else {
    float v224 = v217;
  }
  if (v218 >= v219) {
    float v225 = v218;
  }
  else {
    float v225 = v219;
  }
  if (v220 >= v221) {
    float v221 = v220;
  }
  float v384 = v221;
  float v387 = v219;
  *((float *)&v400 + 1) = v225;
  float v226 = *((float *)this + 401);
  float v227 = v225;
  if (v223 > v226)
  {
    float v228 = *((float *)this + 403);
    float v229 = v223 - v226;
    float v230 = v224 - v228;
    BOOL v231 = v224 <= v228 || v230 <= v229;
    float v227 = v225;
    if (!v231)
    {
      float v283 = v225 + v230;
      float v227 = v225 + 6.0;
      *(float *)&uint64_t v400 = v225 + 6.0;
      if (v283 <= (float)(v225 + 6.0))
      {
        *((float *)&v400 + 1) = v283;
        float v227 = v283;
      }
      else
      {
        *((float *)&v400 + 1) = v225 + 6.0;
      }
    }
  }
  if (v395 <= 0.0 || (float v232 = v227 - v225, (float)(v227 - v225) <= 0.0))
  {
    float v236 = v227;
  }
  else
  {
    float v233 = 6.0;
    if (v232 <= 6.0)
    {
      float v233 = v232;
      if (v232 < 0.0) {
        float v233 = 0.0;
      }
    }
    float v234 = (float)((float)(v388 * *((float *)this + 189)) / *((float *)this + (int)v233 + 263))
         - (float)(v388 * *((float *)this + 189));
    float v235 = 0.0;
    float v236 = v227;
    float v237 = v393;
    if (v234 > 0.0)
    {
      float v238 = __exp10f(v222 * 0.1) - v234;
      if (v238 >= 0.0) {
        float v239 = v238 + v214;
      }
      else {
        float v239 = v214;
      }
      float v235 = v222 + (float)(log10f(v239) * -10.0);
      float v237 = *((float *)this + 151);
      float v387 = *((float *)this + 158);
      float v236 = *((float *)&v400 + 1);
    }
    if (v235 < (float)(v395 * 0.75)) {
      float v235 = v395 * 0.75;
    }
    float v222 = v222 - v235;
    float v393 = v237 - v235;
    *((float *)this + 151) = v237 - v235;
  }
  float v240 = *((float *)this + 304);
  *((float *)this + 181) = v240;
  *((_DWORD *)this + 182) = -1023279104;
  if (*((float *)this + 409) == 1.0)
  {
    float v241 = *((float *)this + 302);
    if (v241 < -85.0 && v376 < 5.0 && v240 > -10.0)
    {
      float v242 = (float)(v227 + v375) + -20.0;
      float v243 = v240;
      if (v242 < (float)((float)(v222 + v375) + -6.0))
      {
        float v244 = -10.0;
        if (v242 < -95.0
          || (float v244 = -6.0, (float)(v241 + -4.5) > v227)
          || (float v244 = -4.0, (float)(v241 + -3.0) > v227)
          || (v244 = -3.0, float v243 = v240, (float)(v241 + -1.5) > v227))
        {
          float v243 = v240 + v244;
          *((float *)this + 181) = v240 + v244;
          *((_DWORD *)this + 182) = -1024458752;
        }
      }
      if ((float)(v222 + v375) < -90.0) {
        *((_DWORD *)this + 182) = -1025769472;
      }
      if (v240 >= -5.0 && (float v245 = -10.0, v243 < -10.0) || (float v245 = -15.0, v243 < -15.0)) {
        *((float *)this + 181) = v245;
      }
    }
  }
  vDSP_sve(v31, 1, (float *)this + 161, *((unsigned int *)this + 72));
  float v246 = *((float *)this + 161);
  float v247 = (float)(*((float *)this + 137) * *((float *)this + 162)) + (float)(*((float *)this + 136) * v246);
  *((float *)this + 162) = v247;
  float v248 = (float)(*((float *)this + 141) * *((float *)this + 163)) + (float)(*((float *)this + 140) * v246);
  *((float *)this + 163) = v248;
  if (v247 >= v248) {
    float v248 = v247;
  }
  *((float *)this + 164) = v248;
  uint64_t v249 = *((unsigned int *)this + 176);
  vDSP_Length v250 = *((unsigned int *)this + 177);
  if (v249 >= v250)
  {
    long long v254 = (const float *)*((void *)this + 86);
    uint64_t v255 = (v250 - 1);
    if (v250 == 1)
    {
      uint64_t v255 = 0;
    }
    else
    {
      memmove(*((void **)this + 86), v254 + 1, 4 * (v250 - 1));
      float v247 = *((float *)this + 162);
    }
    v254[v255] = v247;
    Float64 v252 = (float *)((char *)this + 660);
    uint64_t v251 = v254;
    vDSP_Length v253 = v250;
  }
  else
  {
    uint64_t v251 = (const float *)*((void *)this + 86);
    v251[v249] = v247;
    Float64 v252 = (float *)((char *)this + 660);
    vDSP_Length v253 = (v249 + 1);
  }
  vDSP_minv(v251, 1, v252, v253);
  uint64_t v256 = *((unsigned int *)this + 176);
  vDSP_Length v257 = *((unsigned int *)this + 178);
  if (v256 >= v257)
  {
    int v261 = (const float *)*((void *)this + 87);
    uint64_t v262 = (v257 - 1);
    if (v257 == 1) {
      uint64_t v262 = 0;
    }
    else {
      memmove(*((void **)this + 87), v261 + 1, 4 * (v257 - 1));
    }
    v261[v262] = *((const float *)this + 162);
    uint64_t v259 = (float *)((char *)this + 664);
    uint64_t v258 = v261;
    vDSP_Length v260 = v257;
  }
  else
  {
    uint64_t v258 = (const float *)*((void *)this + 87);
    v258[v256] = *((const float *)this + 162);
    uint64_t v259 = (float *)((char *)this + 664);
    vDSP_Length v260 = (v256 + 1);
  }
  vDSP_minv(v258, 1, v259, v260);
  unsigned int v263 = *((_DWORD *)this + 176);
  if (v263 < *((_DWORD *)this + 177) || v263 < *((_DWORD *)this + 178)) {
    *((_DWORD *)this + 176) = v263 + 1;
  }
  float v264 = *((float *)this + 165) + 1.0e-15;
  float v265 = log10f(v264) * 10.0;
  float v266 = *((float *)this + 166) + 1.0e-15;
  float v267 = log10f(v266) * 10.0;
  float v268 = *((float *)this + 162) + 1.0e-15;
  float v269 = log10f(v268) * 10.0;
  float v270 = v265 - v269;
  *((float *)this + 167) = v265 - v269;
  float v271 = v267 - v269;
  *((float *)this + 168) = v271;
  if (v265 >= -70.0)
  {
    if (v265 >= -50.0) {
      goto LABEL_297;
    }
    float v270 = (float)(v270 + -15.0) + (float)((float)(v265 + 60.0) * 1.5);
  }
  else
  {
    float v270 = v270 + -30.0;
  }
  *((float *)this + 167) = v270;
LABEL_297:
  if (v267 < -70.0)
  {
    float v271 = v271 + -30.0;
LABEL_301:
    *((float *)this + 168) = v271;
    goto LABEL_302;
  }
  if (v267 < -50.0)
  {
    float v271 = (float)(v271 + -15.0) + (float)((float)(v267 + 60.0) * 1.5);
    goto LABEL_301;
  }
LABEL_302:
  *(float *)&int v272 = -70.0;
  if (v270 < -70.0 || (*(float *)&int v272 = 0.0, v270 > 0.0))
  {
    *((float *)this + 167) = *(float *)&v272;
    float v270 = *(float *)&v272;
  }
  *(float *)&int v273 = -70.0;
  if (v271 < -70.0 || (*(float *)&int v273 = 0.0, v271 > 0.0))
  {
    *((float *)this + 168) = *(float *)&v273;
    float v271 = *(float *)&v273;
  }
  float v274 = *((float *)this + 405);
  float v275 = *((float *)this + 121);
  float v276 = 0.0;
  float v277 = v274;
  float v278 = 0.0;
  if (v275 <= 7000.0)
  {
    float v279 = v275 + *((float *)this + 76);
    *((float *)this + 121) = v279;
    float v280 = *((float *)this + 408);
    float v277 = v274;
    float v278 = 0.0;
    if (v280 > 0.0)
    {
      float v277 = v274;
      float v278 = 0.0;
      if (v280 <= 1.0)
      {
        double v281 = v279;
        double v282 = v280;
        if (v280 * 2000.0 <= v279)
        {
          if (v282 * 3000.0 <= v281)
          {
            BOOL v231 = v282 * 5000.0 <= v281;
            float v277 = v274;
            float v278 = 0.0;
            if (!v231)
            {
              float v277 = 5.0;
              float v278 = 5.0;
            }
          }
          else
          {
            float v278 = 10.0;
            float v277 = 3.0;
          }
        }
        else
        {
          float v278 = 20.0;
          float v277 = 1.0;
          if (*((float *)this + 415) == 1.0) {
            float v277 = 0.5;
          }
        }
      }
    }
  }
  if (v277 <= v274) {
    float v284 = v277;
  }
  else {
    float v284 = v274;
  }
  float v285 = *((float *)this + 147);
  if (v285 >= -100.0)
  {
    if (v285 >= -90.0)
    {
      float v276 = v376;
    }
    else
    {
      *((float *)&v400 + 1) = (float)(v285 + 100.0) * 0.1;
      float v276 = v376 * *((float *)&v400 + 1);
    }
  }
  float v286 = (float)(v222 - v236) + -3.0;
  if (!v67) {
    float v286 = v222 - v236;
  }
  *((_DWORD *)this + 180) = 1120403456;
  BOOL v287 = v285 > -100.0;
  if (v286 >= 30.0) {
    BOOL v287 = 0;
  }
  if (v285 > -85.0) {
    BOOL v287 = 1;
  }
  BOOL v288 = v388 > 5.0e-10 && v287;
  float v289 = *((float *)this + 303);
  if (v288 && v276 > v284 && ((float)(v286 - v395) < (float)(v289 + 6.0) || v274 <= 20.0))
  {
    float v271 = v271 - v278;
    *((_DWORD *)this + 179) = 0;
    goto LABEL_359;
  }
  float v290 = v393 - v387;
  if (v286 > v289 && v384 < *((float *)this + 402))
  {
    *((_DWORD *)this + 179) = 2;
LABEL_356:
    float v295 = (float)(v290 - v378.f32[0]) + -6.0;
    *((float *)this + 180) = v295;
    float v292 = 0.0;
    if (v295 < 0.0) {
      *((_DWORD *)this + 180) = 0;
    }
    goto LABEL_377;
  }
  if (v286 <= *((float *)this + 181))
  {
    float v293 = *((float *)this + 301);
    *((_DWORD *)this + 179) = 0;
    if (v286 <= v293)
    {
      float v271 = -70.0;
    }
    else
    {
      float v294 = (float)(v290 - v378.f32[0]) + -6.0;
      *((float *)this + 180) = v294;
      if (v294 < 0.0) {
        *((_DWORD *)this + 180) = 0;
      }
    }
    goto LABEL_359;
  }
  float v291 = *((float *)this + 302);
  if (v222 >= v291)
  {
    *((_DWORD *)this + 170) = 0;
    *((_DWORD *)this + 179) = 2;
    if (v286 <= *((float *)this + 304))
    {
      v302.i32[0] = *((_DWORD *)this + 402);
      v302.f32[1] = v393 - v387;
      v303.i32[1] = v378.i32[1];
      v303.i32[0] = *((_DWORD *)this + 152);
      float32x2_t v304 = vsub_f32(v302, v303);
      __asm { FMOV            V1.2S, #-6.0 }
      float32x2_t v310 = vadd_f32(v304, _D1);
      float32x2_t v311 = (float32x2_t)vdup_n_s32(0xC3960000);
      int8x8_t v312 = vbsl_s8((int8x8_t)vcgt_f32(v311, v310), (int8x8_t)v311, (int8x8_t)v310);
      *((_DWORD *)this + 180) = v312.i32[0];
      float v292 = 0.0;
      if (*(float *)v312.i32 > *(float *)&v312.i32[1]) {
        *((_DWORD *)this + 180) = v312.i32[1];
      }
      goto LABEL_377;
    }
    goto LABEL_356;
  }
  if (v227 < -85.0 && v227 < v291 && *((float *)this + 409) == 1.0)
  {
    *((_DWORD *)this + 179) = 2;
    float v292 = 0.0;
LABEL_377:
    float v299 = v377;
    goto LABEL_378;
  }
  int v301 = *((_DWORD *)this + 179);
  float v292 = 0.0;
  float v299 = v377;
  if (v301 != 2)
  {
    float v271 = v270 + 0.0;
    float v299 = v377;
    if (v301)
    {
LABEL_368:
      float v292 = -70.0;
      if (v271 >= -70.0)
      {
        if (v271 <= 0.0) {
          float v292 = v271;
        }
        else {
          float v292 = 0.0;
        }
      }
      goto LABEL_378;
    }
LABEL_359:
    float v296 = -5.0;
    if (v375 >= -5.0)
    {
      float v296 = v375;
      if (v375 > 20.0) {
        float v296 = 20.0;
      }
    }
    float v297 = *((float *)this + 182) - v296;
    float v298 = v222 + v271;
    if ((float)((float)((float)(v227 + v271) - v395) + -25.0) > (float)(v222 + v271)) {
      float v298 = (float)((float)(v227 + v271) - v395) + -25.0;
    }
    float v299 = 0.0;
    if (v298 < v297)
    {
      float v300 = v297 - v298;
      if (v300 > 100.0) {
        float v300 = 100.0;
      }
      float v271 = v271 + v300;
      *((float *)this + 170) = v271;
    }
    goto LABEL_368;
  }
LABEL_378:
  float v313 = *((float *)this + 169);
  float v314 = *((float *)this + 75);
  float v315 = (float)(v292 - v313) / v314;
  float v316 = 5000.0;
  if (v315 <= 5000.0)
  {
    float v316 = v315;
    if (v315 < -5000.0) {
      float v316 = -5000.0;
    }
  }
  float v317 = v313 + (float)(v316 * v314);
  OSStatus v318 = "N8nlohmann6detail12out_of_rangeE";
  uint64_t v319 = &xmmword_1BB878000;
  if (v317 <= v313)
  {
    float v320 = v313 * 0.7 + v317 * 0.3;
    *((float *)this + 170) = v320;
    *((_DWORD *)this + 347) = 0;
  }
  else
  {
    if ((*((unsigned char *)this + 1532) & 2) != 0 && v299 < *((float *)this + 393)) {
      float v320 = (float)(v313 * *((float *)this + 343)) + (float)(*((float *)this + 344) * v317);
    }
    else {
      float v320 = v313 * 0.2 + v317 * 0.8;
    }
    *((float *)this + 170) = v320;
    float v321 = (float)(v313 - v320) + *((float *)this + 347);
    if (v321 < -20.0) {
      float v321 = -20.0;
    }
    *((float *)this + 347) = v321;
  }
  *((float *)this + 169) = v320;
  *((float *)this + 351) = v299;
  float v322 = v84[856];
  float v323 = __exp10f(v320 * v322);
  float v399 = v323;
  if (*((_DWORD *)this + 375))
  {
    float v324 = *((float *)this + 374);
    if (v323 < v324) {
      float v324 = v323;
    }
    float v323 = fmaxf(v324, 0.0);
    float v399 = v323;
    float v325 = log10f(v323) * 20.0;
    *((float *)this + 169) = v325;
    *((float *)this + 170) = v325;
  }
  *((float *)this + 183) = v323;
  if (*((unsigned char *)this + 736))
  {
    if (!*((_DWORD *)this + 382)) {
      float v399 = 1.0;
    }
    realp = v396.realp;
    vDSP_vsmul(__A.realp, 1, &v399, v396.realp, 1, *((unsigned int *)this + 72));
    imagp = v396.imagp;
    vDSP_vsmul(__A.imagp, 1, &v399, v396.imagp, 1, *((unsigned int *)this + 72));
    *(void *)((char *)this + 1380) = 0;
    if (v373 <= 0.0 && (*((_DWORD *)this + 383) & 1) != 0)
    {
      float v403 = 0.0;
      float v402 = 0.0;
      char v328 = v377 >= *((float *)this + 393) || v288;
      if ((v328 & 1) == 0)
      {
        float v402 = 9.3132e-10;
        vDSP_vsmul(a9, 1, &v402, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        vDSP_vmul(*((const float **)this + 153), 1, a10, 1, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        float v329 = *((float *)this + 386);
        float v330 = *((float *)this + 342);
        uint64_t v331 = 1360;
        if (v329 > v330) {
          uint64_t v331 = 1352;
        }
        uint64_t v332 = 1364;
        if (v329 > v330) {
          uint64_t v332 = 1356;
        }
        float v333 = *(float *)((char *)this + v331);
        LODWORD(v401) = *(_DWORD *)((char *)this + v332);
        *((float *)&v401 + 1) = v333;
        *((float *)this + 342) = (float)(v329 * *(float *)&v401) + (float)(v333 * v330);
        vDSP_vsmul(*((const float **)this + 153), 1, (const float *)&v401, *((float **)this + 153), 1, *((unsigned int *)this + 72));
        vDSP_vsma(*((const float **)this + 159), 1, (const float *)&v401 + 1, *((const float **)this + 153), 1, *((float **)this + 159), 1, *((unsigned int *)this + 72));
      }
      vDSP_meanv(a7, 1, &v403, *((unsigned int *)this + 72));
      float v334 = *((float *)this + 342);
      if (v334 <= *((float *)this + 392) || v334 >= *((float *)this + 390))
      {
        unsigned int v335 = *((_DWORD *)this + 331) + 1;
        *((_DWORD *)this + 331) = v335;
        unsigned int v336 = *((_DWORD *)this + 332);
        BOOL v337 = v335 < v336;
      }
      else
      {
        unsigned int v335 = *((_DWORD *)this + 331);
        unsigned int v336 = *((_DWORD *)this + 332);
        BOOL v337 = 1;
      }
      if (v335 > v336) {
        *((_DWORD *)this + 331) = v336;
      }
      if (v299 > *((float *)this + 393))
      {
        *((_DWORD *)this + 330) = 0;
        goto LABEL_439;
      }
      BOOL v338 = *((float *)this + 384) > 0.0;
      if ((float)(v403 * v399) >= *((float *)this + 387)) {
        BOOL v338 = 0;
      }
      if (v338 && v337)
      {
        *((_DWORD *)this + 330) = 1065353216;
LABEL_421:
        float v340 = __exp10f((float)(*((float *)this + 347) + fminf(*((float *)this + 391) - v334, 0.0)) * v322);
        vDSP_Length v341 = *((unsigned int *)this + 72);
        if (v341)
        {
          uint64_t v342 = 0;
          float v343 = v340 * *((float *)this + 385);
          uint64_t v344 = (float *)*((void *)this + 156);
          uint64_t v345 = *((void *)this + 159);
          int v346 = *((unsigned __int8 *)this + 1348);
          do
          {
            v344[2 * v342] = v343 * sqrtf(*(float *)(v345 + 4 * v342));
            if (v346)
            {
              int v346 = 0;
              *((unsigned char *)this + 1348) = 0;
              float v362 = *((float *)this + 336);
            }
            else
            {
              unsigned int v347 = *((_DWORD *)this + 333);
              do
              {
                unsigned int v348 = v347 / 0xADC8;
                unsigned int v349 = 48271 * (v347 % 0xADC8);
                v348 *= 3399;
                _CF = v349 >= v348;
                unsigned int v350 = v349 - v348;
                if (_CF) {
                  int v351 = 0;
                }
                else {
                  int v351 = 0x7FFFFFFF;
                }
                unsigned int v352 = v351 + v350;
                float v353 = (float)(v352 - 1) * 4.6566e-10;
                unsigned int v354 = v352 / 0xADC8;
                unsigned int v355 = 48271 * (v352 % 0xADC8);
                v354 *= 3399;
                _CF = v355 >= v354;
                unsigned int v356 = v355 - v354;
                if (_CF) {
                  int v357 = 0;
                }
                else {
                  int v357 = 0x7FFFFFFF;
                }
                unsigned int v347 = v357 + v356;
                float v358 = (float)(v353 * 2.0) + -1.0;
                float v359 = (float)((float)((float)(v347 - 1) * 4.6566e-10) * 2.0) + -1.0;
                float v360 = (float)(v359 * v359) + (float)(v358 * v358);
              }
              while (v360 > 1.0 || v360 == 0.0);
              *((_DWORD *)this + 333) = v347;
              float v361 = sqrtf((float)(logf((float)(v359 * v359) + (float)(v358 * v358)) * -2.0) / v360);
              *((float *)this + 336) = v359 * v361;
              int v346 = 1;
              *((unsigned char *)this + 1348) = 1;
              float v362 = v358 * v361;
            }
            *(float *)((char *)v344 + ((8 * v342++) | 4)) = *((float *)this + 334)
                                                          + (float)(v362 * *((float *)this + 335));
          }
          while (v342 != v341);
          OSStatus v318 = "N8nlohmann6detail12out_of_rangeE";
          uint64_t v319 = &xmmword_1BB878000;
        }
        else
        {
          vDSP_Length v341 = 0;
          uint64_t v344 = (float *)*((void *)this + 156);
        }
        vDSP_rect(v344, 2, v344, 2, v341);
        *((float *)&v401 + 1) = (float)*((unsigned int *)this + 15);
        vDSP_vsmul(*((const float **)this + 156), 1, (const float *)&v401 + 1, *((float **)this + 156), 1, (2 * *((_DWORD *)this + 72)));
        vDSP_vadd(realp, 1, *((const float **)this + 156), 2, realp, 1, *((unsigned int *)this + 72));
        vDSP_vadd(imagp, 1, (const float *)(*((void *)this + 156) + 4), 2, imagp, 1, *((unsigned int *)this + 72));
        goto LABEL_439;
      }
      float v339 = *((float *)this + 343) * *((float *)this + 330);
      *((float *)this + 330) = v339;
      if (v339 > 0.1) {
        goto LABEL_421;
      }
    }
  }
LABEL_439:
  float v363 = v389 + *((float *)this + 180);
  double v364 = *((double *)v319 + 128);
  double v365 = *((double *)v318 + 441);
  if (v363 >= v391) {
    double v366 = v363 * v365 + v391 * v364;
  }
  else {
    double v366 = v363 * v364 + v391 * v365;
  }
  float v367 = v366;
  if (v367 > 0.0) {
    float v367 = 0.0;
  }
  if (v367 < *((float *)this + 406)) {
    float v367 = *((float *)this + 406);
  }
  *((float *)this + 350) = v367;
  *((_DWORD *)this + 297) = *((_DWORD *)this + 298);
  if (*((unsigned char *)this + 736))
  {
    if (*((unsigned char *)this + 56))
    {
      memcpy(a12, __src.realp, 4 * *((unsigned int *)this + 17));
      memcpy(&a12[*((unsigned int *)this + 17)], __src.imagp, 4 * *((unsigned int *)this + 17));
    }
    else
    {
      MultiRadixRealFFT::RealOutOfPlaceInverseTransform((const vDSP_DFT_SetupStruct ***)this + 31, &v396, *((DSPComplex **)this + 12));
      vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 35), 1, *((float **)this + 12), 1, *((unsigned int *)this + 16));
      __C[0] = 1.0 / (float)*((unsigned int *)this + 15);
      vDSP_vsmul(*((const float **)this + 12), 1, __C, *((float **)this + 12), 1, *((unsigned int *)this + 16));
      vDSP_vadd(*((const float **)this + 12), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 16));
      memcpy(a12, *((const void **)this + 27), 4 * *((unsigned int *)this + 17));
      memmove(*((void **)this + 27), (const void *)(*((void *)this + 27) + 4 * *((unsigned int *)this + 17)), 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17)));
      bzero((void *)(*((void *)this + 27) + 4 * (*((_DWORD *)this + 16) - *((_DWORD *)this + 17))), 4 * *((unsigned int *)this + 17));
    }
  }
  return 0;
}

void VPEchoGateV3::Gate_spread_energy(VPEchoGateV3 *this, const float *__A, const float *a3, float *a4, const float *a5, int a6, int a7)
{
  uint64_t v12 = (int)a5;
  CFBooleanRef v13 = &a3[a6];
  vDSP_vsmul(__A, 1, v13, (float *)this, 1, (int)a5);
  if (a6 >= 1)
  {
    char v14 = v13 - 1;
    vDSP_Length v15 = v12 - 1;
    vDSP_Length v16 = __A + 1;
    uint64_t v17 = a6;
    do
    {
      vDSP_vsmul(v16, 1, v14, a4, 1, v15);
      vDSP_vadd((const float *)this, 1, a4, 1, (float *)this, 1, v15);
      --v14;
      --v15;
      ++v16;
      --v17;
    }
    while (v17);
  }
  int v18 = a6 + 1;
  if (a6 + 1 < a7)
  {
    uint64_t v19 = (~a6 + a7);
    uint64_t v20 = (float *)((char *)this + 4);
    vDSP_Length v21 = v12 - 1;
    CFDataRef v22 = &a3[v18];
    do
    {
      vDSP_vsmul(__A, 1, v22, a4, 1, v21);
      vDSP_vadd(v20, 1, a4, 1, v20, 1, v21);
      ++v20;
      --v21;
      ++v22;
      --v19;
    }
    while (v19);
  }
}

float VPEchoGateV3::GatecrossCorrSpec(VPEchoGateV3 *this, const float *a2, const float *a3, const float *__B, float *a5, float *a6, float *a7, float *a8, int a9)
{
  uint64_t __C = 0;
  vDSP_Length __N = (int)a8;
  vDSP_vsub(__B, 1, a3, 1, a5, 1, (int)a8);
  vDSP_svesq(a5, 1, (float *)&__C + 1, __N);
  vDSP_vsbm((const float *)this, 1, a2, 1, a5, 1, a5, 1, __N);
  vDSP_sve(a5, 1, (float *)&__C, __N);
  float v15 = *(float *)&__C + 8.6736e-19;
  float v16 = sqrtf(*((float *)&__C + 1) + 8.6736e-19);
  *a7 = v16;
  float result = v15 / v16;
  *a6 = result;
  return result;
}

void VPEchoGateV3::GatesmoothPowerSpectrum(VPEchoGateV3 *this, const float *a2, const float *a3, float a4)
{
  float v8 = a4;
  float __B = 1.0 - a4;
  vDSP_Length v6 = (int)a3;
  vDSP_vsmul((const float *)this, 1, &__B, (float *)this, 1, (int)a3);
  vDSP_vsma(a2, 1, &v8, (const float *)this, 1, (float *)this, 1, v6);
}

uint64_t VPEchoGateV3::Cleanup(VPEchoGateV3 *this)
{
  CFStringRef v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    free(v2);
    *((void *)this + 12) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    free(v3);
    *((void *)this + 15) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 27);
  if (v4)
  {
    free(v4);
    *((void *)this + 27) = 0;
  }
  int v5 = (void *)*((void *)this + 24);
  if (v5)
  {
    free(v5);
    *((void *)this + 24) = 0;
  }
  vDSP_Length v6 = (void *)*((void *)this + 18);
  if (v6)
  {
    free(v6);
    *((void *)this + 18) = 0;
  }
  size_t v7 = (void *)*((void *)this + 21);
  if (v7)
  {
    free(v7);
    *((void *)this + 21) = 0;
  }
  free(*((void **)this + 28));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    MEMORY[0x1C185D340](v8, 0x1000C8052888210);
    *((void *)this + 33) = 0;
  }
  uint64_t v9 = *((void *)this + 34);
  if (v9)
  {
    MEMORY[0x1C185D340](v9, 0x1000C8052888210);
    *((void *)this + 34) = 0;
  }
  BOOL v10 = (void *)*((void *)this + 35);
  if (v10)
  {
    free(v10);
    *((void *)this + 35) = 0;
  }
  CFArrayRef v11 = (void *)*((void *)this + 87);
  if (v11)
  {
    free(v11);
    *((void *)this + 87) = 0;
  }
  uint64_t v12 = (void *)*((void *)this + 86);
  if (v12)
  {
    free(v12);
    *((void *)this + 86) = 0;
  }
  CFBooleanRef v13 = (void *)*((void *)this + 96);
  if (v13)
  {
    free(v13);
    *((void *)this + 96) = 0;
  }
  char v14 = (void *)*((void *)this + 97);
  if (v14)
  {
    free(v14);
    *((void *)this + 97) = 0;
  }
  float v15 = (void *)*((void *)this + 98);
  if (v15)
  {
    free(v15);
    *((void *)this + 98) = 0;
  }
  float v16 = (void *)*((void *)this + 145);
  if (v16)
  {
    free(v16);
    *((void *)this + 145) = 0;
  }
  uint64_t v17 = (void *)*((void *)this + 112);
  if (v17)
  {
    free(v17);
    *((void *)this + 112) = 0;
  }
  int v18 = (void *)*((void *)this + 113);
  if (v18)
  {
    free(v18);
    *((void *)this + 113) = 0;
  }
  uint64_t v19 = (void *)*((void *)this + 111);
  if (v19)
  {
    free(v19);
    *((void *)this + 111) = 0;
  }
  uint64_t v20 = (void *)*((void *)this + 115);
  if (v20)
  {
    free(v20);
    *((void *)this + 115) = 0;
  }
  vDSP_Length v21 = (void *)*((void *)this + 116);
  if (v21)
  {
    free(v21);
    *((void *)this + 116) = 0;
  }
  CFDataRef v22 = (void *)*((void *)this + 109);
  if (v22)
  {
    free(v22);
    *((void *)this + 109) = 0;
  }
  CFDataRef v23 = (void *)*((void *)this + 110);
  if (v23)
  {
    free(v23);
    *((void *)this + 110) = 0;
  }
  int v24 = (void *)*((void *)this + 114);
  if (v24)
  {
    free(v24);
    *((void *)this + 114) = 0;
  }
  float32x2_t v25 = (void *)*((void *)this + 118);
  if (v25)
  {
    free(v25);
    *((void *)this + 118) = 0;
  }
  float v26 = (void *)*((void *)this + 153);
  *((void *)this + 155) = 0;
  *((void *)this + 154) = 0;
  *((void *)this + 153) = 0;
  if (v26) {
    operator delete(v26);
  }
  float v27 = (void *)*((void *)this + 156);
  *((void *)this + 158) = 0;
  *((void *)this + 157) = 0;
  *((void *)this + 156) = 0;
  if (v27) {
    operator delete(v27);
  }
  float v28 = (void *)*((void *)this + 159);
  *((void *)this + 161) = 0;
  *((void *)this + 160) = 0;
  *((void *)this + 159) = 0;
  if (v28) {
    operator delete(v28);
  }
  float v29 = (void *)*((void *)this + 162);
  *((void *)this + 164) = 0;
  *((void *)this + 163) = 0;
  *((void *)this + 162) = 0;
  if (v29) {
    operator delete(v29);
  }
  return 0;
}

uint64_t VPEchoGateV3::GetParameter(VPEchoGateV3 *this, int a2, _OWORD *a3)
{
  if (!a3) {
    return 4294967246;
  }
  uint64_t result = 4294967292;
  switch(a2)
  {
    case 3:
    case 5:
      uint64_t result = 0;
      int v5 = *((_DWORD *)this + 350);
      goto LABEL_10;
    case 6:
      uint64_t result = 0;
      int v5 = *((_DWORD *)this + 351);
      goto LABEL_10;
    case 7:
      uint64_t result = 0;
      int v5 = *((_DWORD *)this + 183);
      goto LABEL_10;
    case 8:
      uint64_t result = 0;
      long long v6 = *(_OWORD *)((char *)this + 1592);
      *a3 = *(_OWORD *)((char *)this + 1576);
      a3[1] = v6;
      long long v7 = *(_OWORD *)((char *)this + 1608);
      long long v8 = *(_OWORD *)((char *)this + 1624);
      long long v9 = *(_OWORD *)((char *)this + 1640);
      *((void *)a3 + 10) = *((void *)this + 207);
      a3[3] = v8;
      a3[4] = v9;
      a3[2] = v7;
      return result;
    case 9:
      uint64_t result = 0;
      int v5 = *((_DWORD *)this + 298);
      goto LABEL_10;
    case 18:
      uint64_t result = 0;
      int v5 = *((_DWORD *)this + 345);
LABEL_10:
      *(_DWORD *)a3 = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VPEchoGateV3::SetParameter(VPEchoGateV3 *this, int a2, _OWORD *a3)
{
  if (!a3) {
    return 4294967246;
  }
  uint64_t result = 4294967292;
  switch(a2)
  {
    case 1:
      uint64_t result = 0;
      *((_DWORD *)this + 352) = *(_DWORD *)a3;
      break;
    case 2:
    case 4:
      uint64_t result = 0;
      *((_DWORD *)this + 349) = *(_DWORD *)a3;
      break;
    case 6:
      uint64_t result = 0;
      *((_DWORD *)this + 351) = *(_DWORD *)a3;
      break;
    case 8:
      uint64_t result = 0;
      long long v11 = a3[1];
      *(_OWORD *)((char *)this + 1576) = *a3;
      *(_OWORD *)((char *)this + 1592) = v11;
      long long v12 = a3[2];
      long long v13 = a3[3];
      long long v14 = a3[4];
      *((void *)this + 207) = *((void *)a3 + 10);
      *(_OWORD *)((char *)this + 1624) = v13;
      *(_OWORD *)((char *)this + 1640) = v14;
      *(_OWORD *)((char *)this + 1608) = v12;
      break;
    case 9:
      uint64_t result = 0;
      *((_DWORD *)this + 298) = *(_DWORD *)a3;
      break;
    case 16:
      float v5 = *(float *)a3;
      if (*(float *)a3 <= 0.0)
      {
        uint64_t result = 0;
        *(_OWORD *)((char *)this + 1352) = xmmword_1BB87AD10;
      }
      else
      {
        float v6 = v5 * 0.25;
        float v7 = *((float *)this + 18) / (float)*((unsigned int *)this + 2);
        float v8 = expf(-1.0 / (float)(v5 * v7));
        *((float *)this + 338) = v8;
        *((float *)this + 339) = 1.0 - v8;
        float v9 = expf(-1.0 / (float)(v6 * v7));
        uint64_t result = 0;
        *((float *)this + 340) = v9;
        *((float *)this + 341) = 1.0 - v9;
      }
      break;
    case 17:
      if (*(float *)a3 <= 0.0)
      {
        uint64_t result = 0;
        *(void *)((char *)this + 1372) = 0x3F80000000000000;
      }
      else
      {
        float v10 = expf(-1.0 / (float)(*(float *)a3 * (float)(*((float *)this + 18) / (float)*((unsigned int *)this + 2))));
        uint64_t result = 0;
        *((float *)this + 343) = v10;
        *((float *)this + 344) = 1.0 - v10;
      }
      break;
    default:
      return result;
  }
  return result;
}

void VPEchoGateV3::~VPEchoGateV3(void **this)
{
  VPEchoGateV3::~VPEchoGateV3(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  *this = &unk_1F14B2590;
  VPEchoGateV3::Cleanup((VPEchoGateV3 *)this);
  if (*((char *)this + 1527) < 0) {
    operator delete(this[188]);
  }
  CFStringRef v2 = this[181];
  if (v2)
  {
    this[182] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[162];
  if (v3)
  {
    this[163] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[159];
  if (v4)
  {
    this[160] = v4;
    operator delete(v4);
  }
  float v5 = this[156];
  if (v5)
  {
    this[157] = v5;
    operator delete(v5);
  }
  float v6 = this[153];
  if (v6)
  {
    this[154] = v6;
    operator delete(v6);
  }
  float v7 = (std::__shared_weak_count *)this[32];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *this = &unk_1F14B2540;
}

uint64_t AUDereverb::GetScopeExtended(AUDereverb *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 568;
  }
  else {
    return 0;
  }
}

uint64_t AUDereverb::ChangeStreamFormat(AUDereverb *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6 = a3;
  int v7 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  uint64_t v9 = 0;
  if (v7 == 1 && !v6)
  {
    if (ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 80), 1u))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 1u);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)Element + 56))(Element, a5);
      if (AUDereverbLogScope(void)::once != -1) {
        dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
      }
      if (AUDereverbLogScope(void)::scope)
      {
        long long v11 = *(NSObject **)AUDereverbLogScope(void)::scope;
        if (!*(void *)AUDereverbLogScope(void)::scope) {
          return v9;
        }
      }
      else
      {
        long long v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315394;
        long long v14 = "AUDereverb.cpp";
        __int16 v15 = 1024;
        int v16 = 916;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v13, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void ___ZL18AUDereverbLogScopev_block_invoke()
{
}

uint64_t AUDereverb::ValidFormat(AUDereverb *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUDereverb::SupportedNumChannels(AUDereverb *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDereverb::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUDereverb::StreamFormatWritable(AUDereverb *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDereverb::SupportsTail(AUDereverb *this)
{
  return 1;
}

double AUDereverb::GetTailTime(AUDereverb *this)
{
  return 0.05;
}

double AUDereverb::GetLatency(AUDereverb *this)
{
  return 0.0;
}

uint64_t AUDereverb::GetParameterValueStrings(AUDereverb *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3) {
    return 0;
  }
  v7[0] = xmmword_1E623E590;
  v7[1] = *(_OWORD *)off_1E623E5A0;
  CFArrayRef v6 = CFArrayCreate(0, (const void **)v7, 4, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUDereverb::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

UInt8 *AUDereverb::SaveExtendedScopes(AUDereverb *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDereverb::GetParameterInfo(AUDereverb *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 9:
        buffer->cfNameString = @"EC Delta EIR";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Delta EIR", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFDictionaryRef Value = 0.0;
        uint64_t v7 = 0x501502F900000000;
        goto LABEL_14;
      case 10:
        buffer->cfNameString = @"EC IR Delay";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC IR Delay", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFDictionaryRef Value = 0.0;
        uint64_t v7 = 0x43C8000000000000;
        goto LABEL_14;
      case 11:
        CFStringRef v8 = @"EC Adapted flag";
        goto LABEL_13;
      case 12:
        buffer->cfNameString = @"EC Time aligned ref signal energy";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Time aligned ref signal energy", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFDictionaryRef Value = 0.0;
        uint64_t v7 = 0x447A000000000000;
        goto LABEL_14;
      case 13:
        CFStringRef v8 = @"EC Mic-Eclee cross correlation";
LABEL_13:
        buffer->cfNameString = v8;
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFDictionaryRef Value = 0.0;
        uint64_t v7 = 0x3F80000000000000;
LABEL_14:
        *(void *)&buffer->minCFDictionaryRef Value = v7;
        AudioUnitParameterOptions flags = buffer->flags;
        int v10 = 1073774592;
LABEL_40:
        AudioUnitParameterOptions v15 = flags | v10;
LABEL_41:
        uint64_t result = 0;
        buffer->AudioUnitParameterOptions flags = v15;
        break;
      default:
        uint64_t result = 4294956418;
        break;
    }
  }
  else
  {
    if (!a2)
    {
      uint64_t result = 4294956418;
      switch(a3)
      {
        case 0:
          buffer->cfNameString = @"MCLP mode";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"MCLP mode", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          uint64_t v6 = 0x4040000000000000;
          goto LABEL_26;
        case 1:
          buffer->cfNameString = @"Delay for MCLP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Delay for MCLP", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v6 = 0x408000003F800000;
          goto LABEL_26;
        case 2:
          buffer->cfNameString = @"MCLP order";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"MCLP order", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFDictionaryRef Value = 0x41F000003F800000;
          AudioUnitParameterValue v11 = 5.0;
          goto LABEL_27;
        case 3:
          buffer->cfNameString = @"Forgetting factor (time constant)";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Forgetting factor (time constant)", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(void *)&buffer->minCFDictionaryRef Value = 0x412000003E99999ALL;
          AudioUnitParameterValue v11 = 1.58;
          goto LABEL_27;
        case 4:
          buffer->cfNameString = @"Backward prediction error energy threshold";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Backward prediction error energy threshold", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFDictionaryRef Value = 0x41C8000000000000;
          AudioUnitParameterValue v12 = 10.0;
          goto LABEL_30;
        case 5:
          CFStringRef v13 = @"Filter echo estimates?";
          goto LABEL_21;
        case 6:
          CFStringRef v13 = @"Stop adaptation during echo?";
LABEL_21:
          buffer->cfNameString = v13;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions v14 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          *(void *)&buffer->minCFDictionaryRef Value = 0x3F80000000000000;
          buffer->defaultCFDictionaryRef Value = 0.0;
          AudioUnitParameterOptions v15 = v14 | 0xC0100000;
          goto LABEL_41;
        case 7:
          CFStringRef v16 = @"Sxx threshold to stop adaptation";
          goto LABEL_24;
        case 8:
          CFStringRef v16 = @"Eclee threshold to stop adaptation";
LABEL_24:
          buffer->cfNameString = v16;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          buffer->defaultCFDictionaryRef Value = -60.0;
          *(void *)&buffer->minCFDictionaryRef Value = 3267887104;
          goto LABEL_31;
        case 14:
          buffer->cfNameString = @"Apply conversion factor?";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Apply conversion factor?", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          uint64_t v6 = 0x3F80000000000000;
LABEL_26:
          *(void *)&buffer->minCFDictionaryRef Value = v6;
          AudioUnitParameterValue v11 = 1.0;
LABEL_27:
          buffer->defaultCFDictionaryRef Value = v11;
          AudioUnitParameterOptions v15 = buffer->flags | 0xC0000000;
          goto LABEL_41;
        case 15:
          buffer->cfNameString = @"Min frequency for backward prediction energy";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Min frequency for backward prediction energy", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(void *)&buffer->minCFDictionaryRef Value = 0x447A000000000000;
          AudioUnitParameterValue v12 = 50.0;
          goto LABEL_30;
        case 16:
          buffer->cfNameString = @"Max frequency for backward prediction energy";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Max frequency for backward prediction energy", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(void *)&buffer->minCFDictionaryRef Value = 0x46BB8000447A0000;
          AudioUnitParameterValue v12 = 7000.0;
LABEL_30:
          buffer->defaultCFDictionaryRef Value = v12;
LABEL_31:
          int v10 = -1072693248;
          goto LABEL_40;
        case 17:
          buffer->cfNameString = @"Selected MCLP order";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Selected MCLP order", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions v17 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFDictionaryRef Value = 0x41F0000000000000;
          buffer->defaultCFDictionaryRef Value = 0.0;
          AudioUnitParameterOptions v15 = v17 | 0x40108000;
          goto LABEL_41;
        case 18:
          buffer->cfNameString = @"Weighted error regularization energy threshold";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Weighted error regularization energy threshold", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFDictionaryRef Value = 0xC2200000C2C80000;
          buffer->defaultCFDictionaryRef Value = -70.0;
          goto LABEL_39;
        case 19:
          CFStringRef v18 = @"P-norm";
          goto LABEL_37;
        case 20:
          buffer->cfNameString = @"Time period after which debug metrics are logged";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Time period after which debug metrics are logged", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v19 = 0x45D0500000000000;
          goto LABEL_38;
        case 21:
          CFStringRef v18 = @"Place holder";
LABEL_37:
          buffer->cfNameString = v18;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v19 = 0x3F80000000000000;
LABEL_38:
          *(void *)&buffer->minCFDictionaryRef Value = v19;
          buffer->defaultCFDictionaryRef Value = 0.0;
LABEL_39:
          int v10 = -1005584384;
          goto LABEL_40;
        default:
          return result;
      }
    }
    return 4294956430;
  }
  return result;
}

uint64_t AUDereverb::GetParameterList(AUDereverb *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    if (!a3)
    {
      unsigned int v4 = 5;
      goto LABEL_10;
    }
    unsigned int v4 = 5;
    *a3 = 9;
    unsigned int v5 = 13;
    unsigned int v6 = 12;
    unsigned int v7 = 11;
    unsigned int v8 = 10;
    uint64_t v9 = 4;
    uint64_t v10 = 3;
    uint64_t v11 = 2;
    uint64_t v12 = 1;
    goto LABEL_7;
  }
  if (a2) {
    return 4294956430;
  }
  unsigned int v4 = 17;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    unsigned int v5 = 21;
    unsigned int v6 = 20;
    unsigned int v7 = 19;
    unsigned int v8 = 18;
    *((_OWORD *)a3 + 2) = xmmword_1BB87B540;
    a3[12] = 17;
    uint64_t v9 = 16;
    uint64_t v10 = 15;
    uint64_t v11 = 14;
    uint64_t v12 = 13;
LABEL_7:
    a3[v12] = v8;
    a3[v11] = v7;
    a3[v10] = v6;
    a3[v9] = v5;
  }
LABEL_10:
  uint64_t result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUDereverb::Render(AUDereverb *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (AUDereverb *)((char *)this + 80);
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (Element && *(_DWORD *)(Element + 172))
    {
      AudioUnitParameterOptions v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v8, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v9 = 1;
    }
    char v11 = 0;
    uint64_t v8 = 1;
  }
  while ((v12 & 1) != 0);
  CFStringRef v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), 0);
  v22[0] = ausdk::AUIOElement::PrepareBuffer(v16, a4);
  AudioUnitParameterOptions v17 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), 1u);
  uint64_t v18 = ausdk::AUIOElement::PrepareBuffer(v17, a4);
  uint64_t result = 0;
  v22[1] = v18;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = ausdk::AUScope::SafeGetElement(v10, 0);
    v21[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    uint64_t v20 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v21[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v20 + 144));
    return (*(uint64_t (**)(AUDereverb *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 2, v21, 2, v22);
  }
  return result;
}

uint64_t AUDereverb::ProcessMultipleBufferLists(AUDereverb *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8)
{
  int v10 = (int)a3;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  LODWORD(a8) = *((_DWORD *)this + 154);
  *((double *)this + 81) = *((double *)this + 81) + (double)*(unint64_t *)&a8 / *((double *)this + 78);
  uint64_t v12 = *((void *)this + 66);
  if (*((void *)this + 67) != v12)
  {
    AUDereverb::UpdateState(this);
    *((void *)this + 67) = v12;
    if (AUDereverbLogScope(void)::once != -1) {
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
    }
    if (AUDereverbLogScope(void)::scope)
    {
      CFStringRef v13 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(void *)AUDereverbLogScope(void)::scope) {
        goto LABEL_10;
      }
    }
    else
    {
      CFStringRef v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v63.uint64_t mNumberBuffers = 136315394;
      *(void *)(&v63.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 1029;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: parameters changed after Initialize, which will allocate memory on the realtime audio thread - only SetParameter before Initialize.\n", (uint8_t *)&v63, 0x12u);
    }
  }
LABEL_10:
  uint64_t v14 = *((void *)this + 68);
  if (*((void *)this + 69) != v14)
  {
    if (*((_DWORD *)this + 158))
    {
      unint64_t v15 = 0;
      CFStringRef v16 = (float *)((char *)this + 708);
      do
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), v15);
        *(v16 - 4) = ausdk::AUElement::GetParameter(Element, 9u);
        uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), v15);
        *(v16 - 3) = ausdk::AUElement::GetParameter(v18, 0xAu);
        uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), v15);
        *(v16 - 2) = ausdk::AUElement::GetParameter(v19, 0xBu);
        uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), v15);
        *(v16 - 1) = ausdk::AUElement::GetParameter(v20, 0xCu);
        vDSP_Length v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), v15);
        *CFStringRef v16 = ausdk::AUElement::GetParameter(v21, 0xDu);
        v16 += 5;
        ++v15;
      }
      while (v15 < *((unsigned int *)this + 158));
    }
    *((void *)this + 69) = v14;
  }
  if (*((_DWORD *)this + 84) != v10) {
    return 4294956422;
  }
  CFDataRef v22 = (int *)*a5;
  if (!*a5)
  {
    if (AUDereverbLogScope(void)::once != -1) {
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
    }
    if (AUDereverbLogScope(void)::scope)
    {
      uint64_t v30 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(void *)AUDereverbLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      uint64_t v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v63.uint64_t mNumberBuffers = 136315394;
      *(void *)(&v63.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 1045;
      size_t v31 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_49:
      _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&v63, 0x12u);
    }
    return 4294956420;
  }
  int v23 = *v22;
  if (*v22 != *((_DWORD *)this + 158)) {
    return 4294956428;
  }
  int v24 = a5[1];
  if (!v24)
  {
    if (AUDereverbLogScope(void)::once != -1) {
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
    }
    if (AUDereverbLogScope(void)::scope)
    {
      uint64_t v30 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(void *)AUDereverbLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      uint64_t v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v63.uint64_t mNumberBuffers = 136315394;
      *(void *)(&v63.mNumberBuffers + 1) = "AUDereverb.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 1053;
      size_t v31 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_49;
    }
    return 4294956420;
  }
  if (v24->mNumberBuffers != v23 || *a7 && (*a7)->mNumberBuffers != v23) {
    return 4294956428;
  }
  float32x2_t v25 = a7[1];
  if (v25)
  {
    if (v25->mNumberBuffers != v23) {
      return 4294956428;
    }
  }
  int v54 = 0;
  float v26 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 154));
  *(void *)&v63.uint64_t mNumberBuffers = *((void *)this + 78);
  v63.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v64 = 4;
  int v65 = v23;
  uint64_t v66 = 32;
  AudioDSP::Utility::DetectNonFinites(v26, v22, &v63, (const AudioStreamBasicDescription *)((char *)&v54 + 3), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v26, a5[1], &v63, (const AudioStreamBasicDescription *)((char *)&v54 + 2), v27);
  if (!*((unsigned char *)this + 560) && (!(HIBYTE(v54) | BYTE2(v54)) || !*((unsigned char *)this + 656)))
  {
    if (*((unsigned char *)this + 681))
    {
      if (*((_DWORD *)this + 158))
      {
        unint64_t v32 = 0;
        char v33 = 0;
        do
        {
          if (*((float *)this + 5 * v32 + 175) == 0.0)
          {
            float v34 = *((float *)this + 5 * v32 + 176);
            float v35 = *((float *)this + 171);
            float v36 = 1.0;
            if (v35 != 0.0) {
              float v36 = __exp10f(v35 / 10.0);
            }
            if (v34 > v36) {
              char v33 = 1;
            }
          }
          else
          {
            uint64_t v37 = *((unsigned int *)this + 154);
            if (v37)
            {
              uint64_t v38 = 0;
              float v40 = 0.0;
              do
              {
                mData = (float *)a5[1]->mBuffers[v32].mData;
                float v40 = v40
                    + (float)((float)(mData[(v37 + v38)] * mData[(v37 + v38)])
                            + (float)(mData[v38] * mData[v38]));
                ++v38;
              }
              while (v37 != v38);
            }
            else
            {
              float v40 = 0.0;
            }
            float v41 = *((float *)this + 172);
            float v42 = 1.0;
            if (v41 != 0.0) {
              float v42 = __exp10f(v41 / 10.0);
            }
            if (v40 > v42) {
              char v33 = 1;
            }
          }
          ++v32;
        }
        while (v32 < *((unsigned int *)this + 158));
      }
      else
      {
        char v33 = 0;
      }
      int v43 = v33 & 1;
    }
    else
    {
      int v43 = 0;
    }
    int v44 = v43 ^ 1;
    switch(*((_DWORD *)this + 165))
    {
      case 0:
        MCLP_ORNLMS_BLAS::ProcessBufferList(*((MCLP_ORNLMS_BLAS **)this + 131), *a5, *a7, v43);
        if (*((unsigned char *)this + 680)) {
          MCLP_ORNLMS_BLAS::ProcessEchoBufferList(*((MCLP_ORNLMS_BLAS **)this + 131), a5[1], a7[1]);
        }
        int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
        float Parameter = ausdk::AUElement::GetParameter(v45, 2u);
        goto LABEL_84;
      case 1:
        MCLP_FRLS_vDSP::ProcessBufferList(*((MCLP_FRLS_vDSP **)this + 132), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 680), v44, *((unsigned __int8 *)this + 1012));
        int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
        float Parameter = ausdk::AUElement::GetParameter(v47, 2u);
LABEL_84:
        *((_DWORD *)this + 256) = Parameter;
        break;
      case 2:
        MCLP_FLSL_Joint_OS_vDSP::ProcessBufferList(*((MCLP_FLSL_Joint_OS_vDSP **)this + 133), *a5, a5[1], *a7, a7[1], v44, 0, *((unsigned __int8 *)this + 1012), (unsigned int *)this + 256);
        float v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
        *((_DWORD *)this + 256) = ausdk::AUElement::GetParameter(v48, 2u);
        break;
      case 3:
        MCLP_FLSL_Joint_OS_vDSP::ProcessBufferList(*((MCLP_FLSL_Joint_OS_vDSP **)this + 133), *a5, a5[1], *a7, a7[1], v44, 1, *((unsigned __int8 *)this + 1012), (unsigned int *)this + 256);
        break;
      default:
        break;
    }
    if (!*((unsigned char *)this + 680)) {
      CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
    }
    float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v49, 0x11u, (float)*((unsigned int *)this + 256), 0);
    AudioDSP::Utility::DetectNonFinites(v26, *a7, &v63, (const AudioStreamBasicDescription *)((char *)&v54 + 1), v50);
    AudioDSP::Utility::DetectNonFinites(v26, a7[1], &v63, (const AudioStreamBasicDescription *)&v54, v51);
    if (!(BYTE1(v54) | v54) || !*((unsigned char *)this + 656)) {
      goto LABEL_100;
    }
    if (AUDereverbLogScope(void)::once != -1) {
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
    }
    if (AUDereverbLogScope(void)::scope)
    {
      int v53 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(void *)AUDereverbLogScope(void)::scope)
      {
LABEL_99:
        (*(void (**)(AUDereverb *))(*(void *)this + 64))(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *a7);
        CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
        *((void *)this + 80) = 0;
LABEL_100:
        AUDereverb::LogMaster((uint64_t)this, *a5, *a7, v52);
        return 0;
      }
    }
    else
    {
      int v53 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      int v55 = 136315906;
      float v56 = "AUDereverb.cpp";
      __int16 v57 = 1024;
      int v58 = 1193;
      __int16 v59 = 1024;
      int v60 = BYTE1(v54);
      __int16 v61 = 1024;
      int v62 = v54;
      _os_log_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: (OutputSignals, MCLPLeeOut) is NOT finite: (%u, %u)\n", (uint8_t *)&v55, 0x1Eu);
    }
    goto LABEL_99;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
  if (HIBYTE(v54) | BYTE2(v54))
  {
    if (AUDereverbLogScope(void)::once != -1) {
      dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
    }
    if (AUDereverbLogScope(void)::scope)
    {
      float v28 = *(NSObject **)AUDereverbLogScope(void)::scope;
      if (!*(void *)AUDereverbLogScope(void)::scope) {
        goto LABEL_75;
      }
    }
    else
    {
      float v28 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v55 = 136315906;
      float v56 = "AUDereverb.cpp";
      __int16 v57 = 1024;
      int v58 = 1092;
      __int16 v59 = 1024;
      int v60 = HIBYTE(v54);
      __int16 v61 = 1024;
      int v62 = BYTE2(v54);
      _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDereverb: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v55, 0x1Eu);
    }
  }
LABEL_75:
  *((void *)this + 80) = 0;
  return 0;
}

void AUDereverb::UpdateState(AUDereverb *this)
{
  CFStringRef v2 = (AUDereverb *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
  *((_DWORD *)this + 165) = (int)ausdk::AUElement::GetParameter(Element, 0);
  unsigned int v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 166) = ausdk::AUElement::GetParameter(v4, 1u);
  unsigned int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 167) = ausdk::AUElement::GetParameter(v5, 2u);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 168) = ausdk::AUElement::GetParameter(v6, 3u);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v7, 4u);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 680) = ausdk::AUElement::GetParameter(v8, 5u) != 0.0;
  char v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 681) = ausdk::AUElement::GetParameter(v9, 6u) != 0.0;
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v10, 7u);
  char v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 172) = ausdk::AUElement::GetParameter(v11, 8u);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 1012) = ausdk::AUElement::GetParameter(v12, 0xEu) != 0.0;
  CFStringRef v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 254) = ausdk::AUElement::GetParameter(v13, 0xFu);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 255) = ausdk::AUElement::GetParameter(v14, 0x10u);
  unint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 256) = ausdk::AUElement::GetParameter(v15, 0x11u);
  CFStringRef v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 257) = ausdk::AUElement::GetParameter(v16, 0x12u);
  AudioUnitParameterOptions v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 258) = ausdk::AUElement::GetParameter(v17, 0x13u);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 259) = ausdk::AUElement::GetParameter(v18, 0x14u);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 260) = ausdk::AUElement::GetParameter(v19, 0x15u);
  if (*((float *)this + 257) == 0.0) {
    *((_DWORD *)this + 257) = -1031012352;
  }
  *((_DWORD *)this + 154) = *((_DWORD *)this + 84);
  *((_DWORD *)this + 158) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0) + 108);
  uint64_t v20 = (caulk::concurrent::messenger *)ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0);
  *((void *)this + 78) = *((void *)v20 + 10);
  if (!*((void *)this + 134) && *((float *)this + 259) > 0.0)
  {
    caulk::concurrent::messenger::shared_logging_priority(v20);
    operator new();
  }

  AUDereverb::InitializeMCLPClasses(this);
}

void sub_1BB516504(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t AUDereverb::LogMaster(uint64_t this, const AudioBufferList *a2, const AudioBufferList *a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(this + 616);
  double v4 = *(double *)(this + 640) + (double)*(unint64_t *)&a4 / *(double *)(this + 624);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  *(double *)(this + 640) = v4;
  float v5 = *(float *)(this + 1036);
  if (v5 > 0.0 && v4 > v5)
  {
    uint64_t v6 = this;
    unsigned int v7 = *(caulk::concurrent::messenger **)(this + 1072);
    if (v7)
    {
      int v10 = (void *)MEMORY[0x1E4FB7E90];
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(void *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 640);
      *(void *)uint64_t v11 = &unk_1F14B2880;
      caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v11);
      if (*(_DWORD *)(v6 + 632))
      {
        unint64_t v12 = 0;
        p_mData = &a3->mBuffers[0].mData;
        uint64_t v14 = &a2->mBuffers[0].mData;
        do
        {
          uint64_t __C = 0;
          float v25 = 0.0;
          vDSP_svesq((const float *)*v14, 1, (float *)&__C + 1, (2 * *(_DWORD *)(v6 + 616)));
          vDSP_svesq((const float *)*p_mData, 1, (float *)&__C, (2 * *(_DWORD *)(v6 + 616)));
          CFStringRef v16 = (const float *)*v14;
          v14 += 2;
          unint64_t v15 = v16;
          AudioUnitParameterOptions v17 = (const float *)*p_mData;
          p_mData += 2;
          vDSP_distancesq(v15, 1, v17, 1, &v25, (2 * *(_DWORD *)(v6 + 616)));
          float v18 = *(float *)&__C + 2.2204e-16;
          float v19 = log10f((float)(*(float *)&__C + 2.2204e-16) / (float)(v25 + 2.2204e-16)) * 10.0;
          float v20 = log10f(v18 / (float)(*((float *)&__C + 1) + 2.2204e-16)) * 10.0;
          vDSP_Length v21 = *(caulk::concurrent::messenger **)(v6 + 1072);
          uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v10 + 16))(*v10, 40, 8);
          *(_DWORD *)(v22 + 16) = 0;
          *(_DWORD *)(v22 + 24) = v12;
          *(float *)(v22 + 28) = v19;
          *(float *)(v22 + 32) = v20;
          *(void *)uint64_t v22 = &unk_1F14B28A8;
          *(void *)(v22 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v22);
          ++v12;
        }
        while (v12 < *(unsigned int *)(v6 + 632));
      }
      int v23 = *(caulk::concurrent::messenger **)(v6 + 1072);
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v10 + 16))(*v10, 24, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = &unk_1F14B28D0;
      *(void *)(v24 + 8) = 0;
      this = caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v24);
      *(void *)(v6 + 640) = 0;
    }
  }
  return this;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  float v3 = *(float *)(a1 + 32);
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    double v4 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
    }
  }
  else
  {
    double v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    uint64_t v8 = "AUDereverb.cpp";
    __int16 v9 = 1024;
    int v10 = 1246;
    __int16 v11 = 1024;
    int v12 = v1;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    double v16 = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: DRR measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  float v3 = a1;
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    float v5 = "AUDereverb.cpp";
    __int16 v6 = 1024;
    int v7 = 1250;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::perform(caulk::concurrent::message *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  float v5 = a1;
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v1 = *((void *)a1 + 4);
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    float v3 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
    }
  }
  else
  {
    float v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v7 = "AUDereverb.cpp";
    __int16 v8 = 1024;
    int v9 = 1231;
    __int16 v10 = 2048;
    uint64_t v11 = v2;
    __int16 v12 = 2048;
    uint64_t v13 = v1;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: ********* Logging begins *********\nAUDereverb: logging (period, timestamp): (%f, %f) (s)\n", buf, 0x26u);
  }
  return caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDereverb::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void AUDereverb::InitializeMCLPClasses(AUDereverb *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUDereverb.cpp";
    __int16 v19 = 1024;
    int v20 = 1325;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Initialize MCLP Classes.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  double v3 = *((double *)this + 78) * 0.5;
  if (v3 >= *((float *)this + 254)) {
    goto LABEL_19;
  }
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (!AUDereverbLogScope(void)::scope)
  {
    double v4 = MEMORY[0x1E4F14500];
LABEL_16:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUDereverb.cpp";
      __int16 v19 = 1024;
      int v20 = 1331;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Fmin must be < (samplingRate/2). Setting Fmiuint64_t n = samplingRate/2.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_18;
  }
  double v4 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(void *)AUDereverbLogScope(void)::scope) {
    goto LABEL_16;
  }
LABEL_18:
  float v5 = *((double *)this + 78) * 0.5;
  *((float *)this + 254) = v5;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0xFu, *((float *)this + 254), 0);
  double v3 = *((double *)this + 78) * 0.5;
LABEL_19:
  float v7 = *((float *)this + 255);
  if (v3 >= v7) {
    goto LABEL_29;
  }
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (!AUDereverbLogScope(void)::scope)
  {
    __int16 v8 = MEMORY[0x1E4F14500];
LABEL_26:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUDereverb.cpp";
      __int16 v19 = 1024;
      int v20 = 1336;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Fmax must be < (samplingRate/2). Setting Fmax = samplingRate/2.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_28;
  }
  __int16 v8 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(void *)AUDereverbLogScope(void)::scope) {
    goto LABEL_26;
  }
LABEL_28:
  float v9 = *((double *)this + 78) * 0.5;
  *((float *)this + 255) = v9;
  __int16 v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v10, 0x10u, *((float *)this + 255), 0);
  float v7 = *((float *)this + 255);
LABEL_29:
  if (*((float *)this + 254) <= v7) {
    goto LABEL_39;
  }
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (!AUDereverbLogScope(void)::scope)
  {
    uint64_t v11 = MEMORY[0x1E4F14500];
LABEL_36:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "AUDereverb.cpp";
      __int16 v19 = 1024;
      int v20 = 1341;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Fmin must be <= Fmax. Setting Fmiuint64_t n = Fmax.\n", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_38;
  }
  uint64_t v11 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(void *)AUDereverbLogScope(void)::scope) {
    goto LABEL_36;
  }
LABEL_38:
  *((_DWORD *)this + 254) = *((_DWORD *)this + 255);
  __int16 v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v12, 0xFu, *((float *)this + 254), 0);
LABEL_39:
  float v13 = *((float *)this + 168);
  if (v13 != 0.0)
  {
    float v14 = *((double *)this + 78);
    expf((float)((float)-(float)*((unsigned int *)this + 154) / v14) / v13);
  }
  float v15 = *((float *)this + 169);
  if (v15 != 0.0) {
    __exp10f(v15 / 10.0);
  }
  if (*((void *)this + 131)) {
    std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100]((void *)this + 131, 0);
  }
  if (*((void *)this + 132)) {
    std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  }
  if (*((void *)this + 133)) {
    std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  }
  int v16 = *((_DWORD *)this + 165);
  if ((v16 - 2) < 2)
  {
    float v17 = *((float *)this + 257);
    if (v17 != 0.0) {
      __exp10f(v17 / 10.0);
    }
    operator new();
  }
  if (v16 == 1) {
    operator new();
  }
  if (!v16) {
    operator new();
  }
  *((_OWORD *)this + 40) = 0u;
}

void sub_1BB517F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,uint64_t a35,void **a36,void **a37,void **a38)
{
  float v48 = *v42;
  if (*v42)
  {
    v38[88] = v48;
    operator delete(v48);
  }
  float v49 = *v41;
  if (*v41)
  {
    v38[85] = v49;
    operator delete(v49);
  }
  float v50 = *v40;
  if (*v40)
  {
    v38[82] = v50;
    operator delete(v50);
  }
  float v51 = *v39;
  if (*v39)
  {
    v38[79] = v51;
    operator delete(v51);
  }
  double v52 = *v45;
  if (*v45)
  {
    v38[76] = v52;
    operator delete(v52);
  }
  int v53 = *v44;
  if (*v44)
  {
    v38[73] = v53;
    operator delete(v53);
  }
  int v54 = *v43;
  if (*v43)
  {
    v38[70] = v54;
    operator delete(v54);
  }
  int v55 = *a24;
  if (*a24)
  {
    v38[67] = v55;
    operator delete(v55);
  }
  float v56 = *a25;
  if (*a25)
  {
    v38[64] = v56;
    operator delete(v56);
  }
  __int16 v57 = *a26;
  if (*a26)
  {
    v38[61] = v57;
    operator delete(v57);
  }
  int v58 = *a27;
  if (*a27)
  {
    v38[58] = v58;
    operator delete(v58);
  }
  __int16 v59 = *a28;
  if (*a28)
  {
    v38[55] = v59;
    operator delete(v59);
  }
  int v60 = *a29;
  if (*a29)
  {
    v38[52] = v60;
    operator delete(v60);
  }
  __int16 v61 = *a30;
  if (*a30)
  {
    v38[49] = v61;
    operator delete(v61);
  }
  int v62 = *a31;
  if (*a31)
  {
    v38[46] = v62;
    operator delete(v62);
  }
  AudioBufferList v63 = *a32;
  if (*a32)
  {
    v38[43] = v63;
    operator delete(v63);
  }
  int v64 = *a33;
  if (*a33)
  {
    v38[40] = v64;
    operator delete(v64);
  }
  int v65 = *a34;
  if (*a34)
  {
    v38[37] = v65;
    operator delete(v65);
  }
  *(void *)(v46 - 160) = a35;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 160));
  uint64_t v66 = *a36;
  if (*a36)
  {
    v38[31] = v66;
    operator delete(v66);
  }
  uint64_t v67 = *a37;
  if (*a37)
  {
    v38[28] = v67;
    operator delete(v67);
  }
  int v68 = *a38;
  if (*a38)
  {
    v38[25] = v68;
    operator delete(v68);
  }
  float v69 = **(void ***)(v46 - 224);
  if (v69)
  {
    v38[22] = v69;
    operator delete(v69);
  }
  float v70 = **(void ***)(v46 - 216);
  if (v70)
  {
    v38[19] = v70;
    operator delete(v70);
  }
  uint64_t v71 = **(void ***)(v46 - 208);
  if (v71)
  {
    v38[16] = v71;
    operator delete(v71);
  }
  *(void *)(v46 - 160) = *(void *)(v46 - 200);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 160));
  MEMORY[0x1C185D370](v38, 0x10A0C403BC2864ALL);
  _Unwind_Resume(a1);
}

void sub_1BB51890C()
{
}

void *std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    double v3 = (void *)v2[39];
    if (v3)
    {
      v2[40] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v2[36];
    if (v4)
    {
      v2[37] = v4;
      operator delete(v4);
    }
    float v5 = (void *)v2[33];
    if (v5)
    {
      v2[34] = v5;
      operator delete(v5);
    }
    __int16 v6 = (void *)v2[30];
    if (v6)
    {
      v2[31] = v6;
      operator delete(v6);
    }
    float v7 = (void *)v2[27];
    if (v7)
    {
      v2[28] = v7;
      operator delete(v7);
    }
    __int16 v8 = (void *)v2[24];
    if (v8)
    {
      v2[25] = v8;
      operator delete(v8);
    }
    float v9 = (void *)v2[21];
    if (v9)
    {
      v2[22] = v9;
      operator delete(v9);
    }
    __int16 v10 = (void *)v2[18];
    if (v10)
    {
      v2[19] = v10;
      operator delete(v10);
    }
    uint64_t v11 = (void *)v2[15];
    if (v11)
    {
      v2[16] = v11;
      operator delete(v11);
    }
    __int16 v12 = (void *)v2[12];
    if (v12)
    {
      v2[13] = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    double v3 = *(void **)(v2 + 720);
    if (v3)
    {
      *(void *)(v2 + 728) = v3;
      operator delete(v3);
    }
    double v4 = *(void **)(v2 + 696);
    if (v4)
    {
      *(void *)(v2 + 704) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v2 + 672);
    if (v5)
    {
      *(void *)(v2 + 680) = v5;
      operator delete(v5);
    }
    __int16 v6 = *(void **)(v2 + 648);
    if (v6)
    {
      *(void *)(v2 + 656) = v6;
      operator delete(v6);
    }
    float v7 = *(void **)(v2 + 624);
    if (v7)
    {
      *(void *)(v2 + 632) = v7;
      operator delete(v7);
    }
    __int16 v8 = *(void **)(v2 + 600);
    if (v8)
    {
      *(void *)(v2 + 608) = v8;
      operator delete(v8);
    }
    float v9 = *(void **)(v2 + 576);
    if (v9)
    {
      *(void *)(v2 + 584) = v9;
      operator delete(v9);
    }
    __int16 v10 = *(void **)(v2 + 552);
    if (v10)
    {
      *(void *)(v2 + 560) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)(v2 + 528);
    if (v11)
    {
      *(void *)(v2 + 536) = v11;
      operator delete(v11);
    }
    __int16 v12 = *(void **)(v2 + 504);
    if (v12)
    {
      *(void *)(v2 + 512) = v12;
      operator delete(v12);
    }
    float v13 = *(void **)(v2 + 480);
    if (v13)
    {
      *(void *)(v2 + 488) = v13;
      operator delete(v13);
    }
    float v14 = *(void **)(v2 + 456);
    if (v14)
    {
      *(void *)(v2 + 464) = v14;
      operator delete(v14);
    }
    float v15 = *(void **)(v2 + 432);
    if (v15)
    {
      *(void *)(v2 + 440) = v15;
      operator delete(v15);
    }
    int v16 = *(void **)(v2 + 408);
    if (v16)
    {
      *(void *)(v2 + 416) = v16;
      operator delete(v16);
    }
    float v17 = *(void **)(v2 + 384);
    if (v17)
    {
      *(void *)(v2 + 392) = v17;
      operator delete(v17);
    }
    float v18 = *(void **)(v2 + 360);
    if (v18)
    {
      *(void *)(v2 + 368) = v18;
      operator delete(v18);
    }
    __int16 v19 = *(void **)(v2 + 336);
    if (v19)
    {
      *(void *)(v2 + 344) = v19;
      operator delete(v19);
    }
    int v20 = *(void **)(v2 + 312);
    if (v20)
    {
      *(void *)(v2 + 320) = v20;
      operator delete(v20);
    }
    uint64_t v21 = *(void **)(v2 + 288);
    if (v21)
    {
      *(void *)(v2 + 296) = v21;
      operator delete(v21);
    }
    float v28 = (void **)(v2 + 264);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
    uint64_t v22 = *(void **)(v2 + 240);
    if (v22)
    {
      *(void *)(v2 + 248) = v22;
      operator delete(v22);
    }
    int v23 = *(void **)(v2 + 216);
    if (v23)
    {
      *(void *)(v2 + 224) = v23;
      operator delete(v23);
    }
    uint64_t v24 = *(void **)(v2 + 192);
    if (v24)
    {
      *(void *)(v2 + 200) = v24;
      operator delete(v24);
    }
    float v25 = *(void **)(v2 + 168);
    if (v25)
    {
      *(void *)(v2 + 176) = v25;
      operator delete(v25);
    }
    float v26 = *(void **)(v2 + 144);
    if (v26)
    {
      *(void *)(v2 + 152) = v26;
      operator delete(v26);
    }
    float v27 = *(void **)(v2 + 120);
    if (v27)
    {
      *(void *)(v2 + 128) = v27;
      operator delete(v27);
    }
    float v28 = (void **)(v2 + 96);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v30 = (void **)(v2 + 1104);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 1080);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 1056);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 1032);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    double v3 = *(void **)(v2 + 1008);
    if (v3)
    {
      *(void *)(v2 + 1016) = v3;
      operator delete(v3);
    }
    double v4 = *(void **)(v2 + 984);
    if (v4)
    {
      *(void *)(v2 + 992) = v4;
      operator delete(v4);
    }
    uint64_t v30 = (void **)(v2 + 960);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    float v5 = *(void **)(v2 + 936);
    if (v5)
    {
      *(void *)(v2 + 944) = v5;
      operator delete(v5);
    }
    __int16 v6 = *(void **)(v2 + 912);
    if (v6)
    {
      *(void *)(v2 + 920) = v6;
      operator delete(v6);
    }
    float v7 = *(void **)(v2 + 888);
    if (v7)
    {
      *(void *)(v2 + 896) = v7;
      operator delete(v7);
    }
    __int16 v8 = *(void **)(v2 + 864);
    if (v8)
    {
      *(void *)(v2 + 872) = v8;
      operator delete(v8);
    }
    float v9 = *(void **)(v2 + 840);
    if (v9)
    {
      *(void *)(v2 + 848) = v9;
      operator delete(v9);
    }
    __int16 v10 = *(void **)(v2 + 816);
    if (v10)
    {
      *(void *)(v2 + 824) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)(v2 + 792);
    if (v11)
    {
      *(void *)(v2 + 800) = v11;
      operator delete(v11);
    }
    __int16 v12 = *(void **)(v2 + 768);
    if (v12)
    {
      *(void *)(v2 + 776) = v12;
      operator delete(v12);
    }
    float v13 = *(void **)(v2 + 744);
    if (v13)
    {
      *(void *)(v2 + 752) = v13;
      operator delete(v13);
    }
    float v14 = *(void **)(v2 + 720);
    if (v14)
    {
      *(void *)(v2 + 728) = v14;
      operator delete(v14);
    }
    float v15 = *(void **)(v2 + 696);
    if (v15)
    {
      *(void *)(v2 + 704) = v15;
      operator delete(v15);
    }
    int v16 = *(void **)(v2 + 656);
    if (v16)
    {
      *(void *)(v2 + 664) = v16;
      operator delete(v16);
    }
    float v17 = *(void **)(v2 + 632);
    if (v17)
    {
      *(void *)(v2 + 640) = v17;
      operator delete(v17);
    }
    float v18 = *(void **)(v2 + 608);
    if (v18)
    {
      *(void *)(v2 + 616) = v18;
      operator delete(v18);
    }
    uint64_t v30 = (void **)(v2 + 584);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 560);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 536);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    __int16 v19 = *(void **)(v2 + 512);
    if (v19)
    {
      *(void *)(v2 + 520) = v19;
      operator delete(v19);
    }
    int v20 = *(void **)(v2 + 488);
    if (v20)
    {
      *(void *)(v2 + 496) = v20;
      operator delete(v20);
    }
    uint64_t v21 = *(void **)(v2 + 464);
    if (v21)
    {
      *(void *)(v2 + 472) = v21;
      operator delete(v21);
    }
    uint64_t v30 = (void **)(v2 + 440);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 416);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 392);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v30 = (void **)(v2 + 368);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v22 = *(void **)(v2 + 344);
    if (v22)
    {
      *(void *)(v2 + 352) = v22;
      operator delete(v22);
    }
    int v23 = *(void **)(v2 + 320);
    if (v23)
    {
      *(void *)(v2 + 328) = v23;
      operator delete(v23);
    }
    uint64_t v30 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v30);
    uint64_t v24 = *(void **)(v2 + 272);
    if (v24)
    {
      *(void *)(v2 + 280) = v24;
      operator delete(v24);
    }
    float v25 = *(void **)(v2 + 248);
    if (v25)
    {
      *(void *)(v2 + 256) = v25;
      operator delete(v25);
    }
    float v26 = *(void **)(v2 + 224);
    if (v26)
    {
      *(void *)(v2 + 232) = v26;
      operator delete(v26);
    }
    float v27 = *(void **)(v2 + 200);
    if (v27)
    {
      *(void *)(v2 + 208) = v27;
      operator delete(v27);
    }
    float v28 = *(void **)(v2 + 176);
    if (v28)
    {
      *(void *)(v2 + 184) = v28;
      operator delete(v28);
    }
    float v29 = *(void **)(v2 + 144);
    if (v29) {
      operator delete(v29);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUDereverb::CanScheduleParameters(AUDereverb *this)
{
  return 0;
}

uint64_t AUDereverb::SetParameter(AUDereverb *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 568), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    float v9 = (char *)this + 544;
    goto LABEL_5;
  }
  if (!a3)
  {
    __int16 v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    float v9 = (char *)this + 528;
LABEL_5:
    uint64_t result = 0;
    ++*(void *)v9;
    return result;
  }
  return 4294956418;
}

uint64_t AUDereverb::SetProperty(AUDereverb *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 560) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUDereverb::GetProperty(AUDereverb *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    __int16 v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    __int16 v6 = (unsigned __int8 *)this + 560;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDereverb::GetPropertyInfo(AUDereverb *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDereverb::Reset(AUDereverb *this)
{
  int v1 = *((_DWORD *)this + 165);
  if ((v1 - 2) >= 2)
  {
    if (v1 == 1)
    {
      uint64_t v12 = *((void *)this + 132);
      *(void *)(v12 + 88) = 0;
      *(_DWORD *)(v12 + 84) = 0;
      bzero(*(void **)(v12 + 144), *(void *)(v12 + 152) - *(void *)(v12 + 144));
      bzero(*(void **)(v12 + 168), *(void *)(v12 + 176) - *(void *)(v12 + 168));
    }
  }
  else
  {
    uint64_t v2 = *((void *)this + 133);
    *(_DWORD *)(v2 + 168) = 0;
    unint64_t v3 = *(unsigned int *)(v2 + 72);
    if (v3)
    {
      unint64_t v4 = 0;
      unsigned int v5 = *(_DWORD *)(v2 + 40);
      unsigned int v6 = v5;
      do
      {
        if (v6)
        {
          int v7 = 0;
          int v8 = 0;
          unsigned int v9 = *(_DWORD *)(v2 + 60);
          do
          {
            unsigned int v10 = v7 + 1;
            if (v7 + 1 < v9)
            {
              int v11 = 1;
              do
              {
                if ((v7 + v11) < *(_DWORD *)(v2 + 40))
                {
                  bzero(*(void **)(*(void *)(*(void *)(v2 + 440) + 24 * v4) + 16 * (v8 + v11 - 1)), 4 * *(unsigned int *)(v2 + 64));
                  bzero(*(void **)(*(void *)(*(void *)(v2 + 440) + 24 * v4) + 16 * (v8 + v11 - 1) + 8), 4 * *(unsigned int *)(v2 + 64));
                  unsigned int v9 = *(_DWORD *)(v2 + 60);
                }
                ++v11;
              }
              while (v7 + v11 < v9);
              int v8 = v8 + v11 - 1;
              unsigned int v5 = *(_DWORD *)(v2 + 40);
            }
            ++v7;
          }
          while (v10 < v5);
          unint64_t v3 = *(unsigned int *)(v2 + 72);
          unsigned int v6 = v5;
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
  return 0;
}

void AUDereverb::Cleanup(AUDereverb *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    float v26 = "AUDereverb.cpp";
    __int16 v27 = 1024;
    int v28 = 191;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Cleanup.\n", buf, 0x12u);
  }
LABEL_9:
  uint64_t v24 = this;
  uint64_t v3 = *((void *)this + 131);
  if (v3)
  {
    *(_DWORD *)(v3 + 84) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    bzero(*(void **)(v3 + 96), *(void *)(v3 + 104) - *(void *)(v3 + 96));
    bzero(*(void **)(v3 + 120), *(void *)(v3 + 128) - *(void *)(v3 + 120));
    bzero(*(void **)(v3 + 144), *(void *)(v3 + 152) - *(void *)(v3 + 144));
    bzero(*(void **)(v3 + 168), *(void *)(v3 + 176) - *(void *)(v3 + 168));
    bzero(*(void **)(v3 + 192), *(void *)(v3 + 200) - *(void *)(v3 + 192));
    bzero(*(void **)(v3 + 216), *(void *)(v3 + 224) - *(void *)(v3 + 216));
    bzero(*(void **)(v3 + 240), *(void *)(v3 + 248) - *(void *)(v3 + 240));
    bzero(*(void **)(v3 + 264), *(void *)(v3 + 272) - *(void *)(v3 + 264));
    bzero(*(void **)(v3 + 288), *(void *)(v3 + 296) - *(void *)(v3 + 288));
    bzero(*(void **)(v3 + 312), *(void *)(v3 + 320) - *(void *)(v3 + 312));
    int v4 = *(_DWORD *)(v3 + 40);
    if (v4)
    {
      unsigned int v5 = 0;
      int v6 = *(_DWORD *)(v3 + 32);
      do
      {
        if (v6)
        {
          int v7 = 0;
          int v8 = 0;
          uint64_t v9 = *(unsigned int *)(v3 + 28);
          do
          {
            if (v9)
            {
              uint64_t v10 = *(void *)(v3 + 192);
              unsigned int v11 = v7 + v5 * *(_DWORD *)(v3 + 52);
              uint64_t v12 = v9;
              do
              {
                *(float *)(v10 + 4 * v11++) = powf(*(float *)(v3 + 20), (float)v5);
                --v12;
              }
              while (v12);
            }
            ++v8;
            v7 += v9;
          }
          while (v8 != v6);
        }
        ++v5;
      }
      while (v5 != v4);
    }
  }
  uint64_t v13 = *((void *)v24 + 132);
  if (v13)
  {
    *(void *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 84) = 0;
    vec::cleanup<float>((uint64_t *)(v13 + 96));
    bzero(*(void **)(v13 + 120), *(void *)(v13 + 128) - *(void *)(v13 + 120));
    bzero(*(void **)(v13 + 144), *(void *)(v13 + 152) - *(void *)(v13 + 144));
    bzero(*(void **)(v13 + 168), *(void *)(v13 + 176) - *(void *)(v13 + 168));
    bzero(*(void **)(v13 + 192), *(void *)(v13 + 200) - *(void *)(v13 + 192));
    float v14 = *(_DWORD **)(v13 + 216);
    uint64_t v15 = *(void *)(v13 + 224) - (void)v14;
    if (v15 >= 1)
    {
      unint64_t v16 = ((unint64_t)v15 >> 2) + 1;
      do
      {
        *v14++ = *(_DWORD *)(v13 + 64);
        --v16;
      }
      while (v16 > 1);
    }
    float v17 = *(_DWORD **)(v13 + 240);
    uint64_t v18 = *(void *)(v13 + 248) - (void)v17;
    if (v18 >= 1)
    {
      unint64_t v19 = ((unint64_t)v18 >> 2) + 1;
      do
      {
        *v17++ = *(_DWORD *)(v13 + 64);
        --v19;
      }
      while (v19 > 1);
    }
    vec::cleanup<float>((uint64_t *)(v13 + 264));
    bzero(*(void **)(v13 + 288), *(void *)(v13 + 296) - *(void *)(v13 + 288));
    bzero(*(void **)(v13 + 312), *(void *)(v13 + 320) - *(void *)(v13 + 312));
    bzero(*(void **)(v13 + 336), *(void *)(v13 + 344) - *(void *)(v13 + 336));
    bzero(*(void **)(v13 + 360), *(void *)(v13 + 368) - *(void *)(v13 + 360));
    bzero(*(void **)(v13 + 384), *(void *)(v13 + 392) - *(void *)(v13 + 384));
    bzero(*(void **)(v13 + 408), *(void *)(v13 + 416) - *(void *)(v13 + 408));
    bzero(*(void **)(v13 + 432), *(void *)(v13 + 440) - *(void *)(v13 + 432));
    bzero(*(void **)(v13 + 456), *(void *)(v13 + 464) - *(void *)(v13 + 456));
    bzero(*(void **)(v13 + 480), *(void *)(v13 + 488) - *(void *)(v13 + 480));
    bzero(*(void **)(v13 + 504), *(void *)(v13 + 512) - *(void *)(v13 + 504));
    bzero(*(void **)(v13 + 528), *(void *)(v13 + 536) - *(void *)(v13 + 528));
    bzero(*(void **)(v13 + 552), *(void *)(v13 + 560) - *(void *)(v13 + 552));
    bzero(*(void **)(v13 + 576), *(void *)(v13 + 584) - *(void *)(v13 + 576));
    bzero(*(void **)(v13 + 600), *(void *)(v13 + 608) - *(void *)(v13 + 600));
    bzero(*(void **)(v13 + 624), *(void *)(v13 + 632) - *(void *)(v13 + 624));
    bzero(*(void **)(v13 + 648), *(void *)(v13 + 656) - *(void *)(v13 + 648));
    bzero(*(void **)(v13 + 672), *(void *)(v13 + 680) - *(void *)(v13 + 672));
    bzero(*(void **)(v13 + 696), *(void *)(v13 + 704) - *(void *)(v13 + 696));
    bzero(*(void **)(v13 + 720), *(void *)(v13 + 728) - *(void *)(v13 + 720));
  }
  uint64_t v20 = *((void *)v24 + 133);
  if (v20)
  {
    *(_DWORD *)(v20 + 140) = *(_DWORD *)(v20 + 40);
    vec::fill<BOOL>(*(void *)(v20 + 144), *(void *)(v20 + 152), 0);
    *(_DWORD *)(v20 + 168) = 0;
    bzero(*(void **)(v20 + 176), *(void *)(v20 + 184) - *(void *)(v20 + 176));
    bzero(*(void **)(v20 + 200), *(void *)(v20 + 208) - *(void *)(v20 + 200));
    bzero(*(void **)(v20 + 248), *(void *)(v20 + 256) - *(void *)(v20 + 248));
    bzero(*(void **)(v20 + 272), *(void *)(v20 + 280) - *(void *)(v20 + 272));
    bzero(*(void **)(v20 + 320), *(void *)(v20 + 328) - *(void *)(v20 + 320));
    bzero(*(void **)(v20 + 344), *(void *)(v20 + 352) - *(void *)(v20 + 344));
    vec::cleanup<float>((uint64_t *)(v20 + 392));
    vec::cleanup<float>((uint64_t *)(v20 + 416));
    uint64_t v21 = *(_DWORD **)(v20 + 464);
    uint64_t v22 = *(void *)(v20 + 472) - (void)v21;
    if (v22 >= 1)
    {
      unint64_t v23 = ((unint64_t)v22 >> 2) + 1;
      do
      {
        *v21++ = *(_DWORD *)(v20 + 88);
        --v23;
      }
      while (v23 > 1);
    }
    bzero(*(void **)(v20 + 488), *(void *)(v20 + 496) - *(void *)(v20 + 488));
    bzero(*(void **)(v20 + 512), *(void *)(v20 + 520) - *(void *)(v20 + 512));
    vec::cleanup<float>((uint64_t *)(v20 + 536));
    vec::cleanup<float>((uint64_t *)(v20 + 560));
    bzero(*(void **)(v20 + 608), *(void *)(v20 + 616) - *(void *)(v20 + 608));
    bzero(*(void **)(v20 + 632), *(void *)(v20 + 640) - *(void *)(v20 + 632));
    bzero(*(void **)(v20 + 656), *(void *)(v20 + 664) - *(void *)(v20 + 656));
    bzero(*(void **)(v20 + 696), *(void *)(v20 + 704) - *(void *)(v20 + 696));
    bzero(*(void **)(v20 + 720), *(void *)(v20 + 728) - *(void *)(v20 + 720));
    bzero(*(void **)(v20 + 744), *(void *)(v20 + 752) - *(void *)(v20 + 744));
    bzero(*(void **)(v20 + 768), *(void *)(v20 + 776) - *(void *)(v20 + 768));
    bzero(*(void **)(v20 + 792), *(void *)(v20 + 800) - *(void *)(v20 + 792));
    bzero(*(void **)(v20 + 816), *(void *)(v20 + 824) - *(void *)(v20 + 816));
    if (*(unsigned char *)(v20 + 36))
    {
      bzero(*(void **)(v20 + 840), *(void *)(v20 + 848) - *(void *)(v20 + 840));
      bzero(*(void **)(v20 + 864), *(void *)(v20 + 872) - *(void *)(v20 + 864));
      bzero(*(void **)(v20 + 912), *(void *)(v20 + 920) - *(void *)(v20 + 912));
      bzero(*(void **)(v20 + 936), *(void *)(v20 + 944) - *(void *)(v20 + 936));
      bzero(*(void **)(v20 + 984), *(void *)(v20 + 992) - *(void *)(v20 + 984));
      bzero(*(void **)(v20 + 1008), *(void *)(v20 + 1016) - *(void *)(v20 + 1008));
      vec::cleanup<float>((uint64_t *)(v20 + 1056));
      vec::cleanup<float>((uint64_t *)(v20 + 1080));
    }
  }
}

uint64_t AUDereverb::Initialize(AUDereverb *this)
{
  *(void *)&void v30[5] = *MEMORY[0x1E4F143B8];
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (!AUDereverbLogScope(void)::scope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      float v26 = "AUDereverb.cpp";
      __int16 v27 = 1024;
      int v28 = 130;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Initialize.\n", buf, 0x12u);
    }
    goto LABEL_9;
  }
  uint64_t v2 = *(NSObject **)AUDereverbLogScope(void)::scope;
  if (*(void *)AUDereverbLogScope(void)::scope) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), 0);
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(Element + 80);
  *((_DWORD *)this + 158) = *(_DWORD *)(Element + 108);
  *((void *)this + 78) = v5;
  char v6 = 1;
  while (1)
  {
    char v7 = v6;
    int v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 80), v4) + 108);
    if (v8 != *((_DWORD *)this + 158)) {
      break;
    }
    char v6 = 0;
    unsigned int v4 = 1;
    if ((v7 & 1) == 0)
    {
      unsigned int v9 = 0;
      char v10 = 1;
      while (1)
      {
        char v11 = v10;
        int v12 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDereverb *)((char *)this + 128), v9) + 108);
        if (v12 != *((_DWORD *)this + 158)) {
          break;
        }
        char v10 = 0;
        unsigned int v9 = 1;
        if ((v11 & 1) == 0)
        {
          Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
          *((_DWORD *)this + 154) = *((_DWORD *)this + 84);
          BOOL v24 = 0;
          AppFloatCFDictionaryRef Value = CACFPreferencesGetAppFloatValue(@"mclp_log_period_in_seconds", @"com.apple.coreaudio", &v24);
          if (v24)
          {
            float v15 = AppFloatValue;
            if (v15 > 0.0)
            {
              *((float *)this + 259) = v15;
              unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDereverb *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(v16, 0x14u, v15, 0);
              if (AUDereverbLogScope(void)::once != -1) {
                dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
              }
              if (AUDereverbLogScope(void)::scope)
              {
                float v17 = *(NSObject **)AUDereverbLogScope(void)::scope;
                if (!*(void *)AUDereverbLogScope(void)::scope) {
                  goto LABEL_43;
                }
              }
              else
              {
                float v17 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315650;
                float v26 = "AUDereverb.cpp";
                __int16 v27 = 1024;
                int v28 = 168;
                __int16 v29 = 2048;
                *(double *)uint64_t v30 = v15;
                _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Using logPeriod of (%g)s as specified in defaults write mclp_log_period_in_seconds.\n", buf, 0x1Cu);
              }
            }
          }
LABEL_43:
          AUDereverb::UpdateState(this);
          *((void *)this + 67) = *((void *)this + 66);
          (*(void (**)(AUDereverb *, void, void))(*(void *)this + 72))(this, 0, 0);
          if (AUDereverbLogScope(void)::once != -1) {
            dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
          }
          if (AUDereverbLogScope(void)::scope)
          {
            unint64_t v23 = *(NSObject **)AUDereverbLogScope(void)::scope;
            if (!*(void *)AUDereverbLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            unint64_t v23 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            float v26 = "AUDereverb.cpp";
            __int16 v27 = 1024;
            int v28 = 180;
            _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDereverb: Successfully initialized.\n", buf, 0x12u);
          }
          return 0;
        }
      }
      if (AUDereverbLogScope(void)::once != -1) {
        dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
      }
      if (AUDereverbLogScope(void)::scope)
      {
        uint64_t v18 = *(NSObject **)AUDereverbLogScope(void)::scope;
        if (!*(void *)AUDereverbLogScope(void)::scope) {
          return 4294956421;
        }
      }
      else
      {
        uint64_t v18 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v21 = *((_DWORD *)this + 158);
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        float v26 = "AUDereverb.cpp";
        __int16 v27 = 1024;
        int v28 = 147;
        __int16 v29 = 1024;
        v30[0] = v12;
        LOWORD(v30[1]) = 1024;
        *(_DWORD *)((char *)&v30[1] + 2) = v21;
        uint64_t v20 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
        goto LABEL_38;
      }
      return 4294956421;
    }
  }
  if (AUDereverbLogScope(void)::once != -1) {
    dispatch_once(&AUDereverbLogScope(void)::once, &__block_literal_global_10569);
  }
  if (AUDereverbLogScope(void)::scope)
  {
    uint64_t v18 = *(NSObject **)AUDereverbLogScope(void)::scope;
    if (!*(void *)AUDereverbLogScope(void)::scope) {
      return 4294956421;
    }
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    int v19 = *((_DWORD *)this + 158);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    float v26 = "AUDereverb.cpp";
    __int16 v27 = 1024;
    int v28 = 140;
    __int16 v29 = 1024;
    v30[0] = v8;
    LOWORD(v30[1]) = 1024;
    *(_DWORD *)((char *)&v30[1] + 2) = v19;
    uint64_t v20 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_38:
    _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, v20, buf, 0x1Eu);
  }
  return 4294956421;
}

void AUDereverb::CreateExtendedElements(AUDereverb *this)
{
  int v1 = (AUDereverb *)((char *)this + 568);
  ausdk::AUScope::Initialize((AUDereverb *)((char *)this + 568), this, 4, 16);
  for (unsigned int i = 0; i != 16; ++i)
  {
    std::to_string(&v8, i);
    uint64_t v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB519D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUDereverb::~AUDereverb(AUDereverb *this)
{
  AUDereverb::~AUDereverb(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B2610;
  uint64_t v2 = (void *)((char *)this + 1048);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100]((void *)this + 131, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 134, 0);
  std::unique_ptr<MCLP_FLSL_Joint_OS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 133, 0);
  std::unique_ptr<MCLP_FRLS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 132, 0);
  std::unique_ptr<MCLP_ORNLMS_BLAS>::reset[abi:ne180100](v2, 0);
  uint64_t v3 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

void *std::vector<void *>::assign(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = *(void **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v10];
    uint64_t v11 = (uint64_t)&result[a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *result++ = *a3;
      v12 -= 8;
    }
    while (v12);
    goto LABEL_23;
  }
  unint64_t v13 = (uint64_t)(*(void *)(a1 + 8) - (void)result) >> 3;
  if (v13 >= a2) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)result) >> 3;
  }
  for (; v14; --v14)
    *result++ = *a3;
  if (a2 <= v13)
  {
    uint64_t v11 = *(void *)a1 + 8 * a2;
LABEL_23:
    *(void *)(a1 + 8) = v11;
    return result;
  }
  float v15 = *(void **)(a1 + 8);
  unint64_t v16 = &v15[a2 - v13];
  uint64_t v17 = 8 * a2 - 8 * v13;
  do
  {
    *v15++ = *a3;
    v17 -= 8;
  }
  while (v17);
  *(void *)(a1 + 8) = v16;
  return result;
}

float NFNSwitchKernel::CalculateEnergyRatioInFreqRange(uint64_t a1, const float *a2, const float *a3, unsigned int a4, unsigned int a5, float *a6, float a7, float a8, float a9)
{
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  float v15 = (float)(v14 - 1);
  double v16 = (float)v14;
  double v17 = *(double *)(a1 + 8);
  float v18 = a7 / (v17 * 0.5) * v16;
  unsigned int v19 = fminf(v15, roundf(v18));
  v28.realp = *(float **)(a1 + 176);
  v28.imagp = &v28.realp[v14];
  uint64_t __C = 0;
  float v20 = a8 / (v17 * 0.5) * v16;
  vDSP_Length v21 = fminf(v15, roundf(v20)) - v19 + 1;
  __A.realp = &v28.realp[v19];
  __A.imagp = &v28.imagp[v19];
  uint64_t v22 = *(VPTimeFreqConverter **)(*(void *)(a1 + 32) + 8 * a4);
  if (v22) {
    VPTimeFreqConverter::Analyze(v22, a2, &v28);
  }
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 200), 1, v21);
  vDSP_sve(*(const float **)(a1 + 200), 1, (float *)&__C + 1, v21);
  unint64_t v23 = *(VPTimeFreqConverter **)(*(void *)(a1 + 32) + 8 * a5);
  if (v23) {
    VPTimeFreqConverter::Analyze(v23, a3, &v28);
  }
  float v24 = v17 / (double)v14;
  float v25 = expf(-1.0 / (float)(v24 * a9));
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 200), 1, v21);
  vDSP_sve(*(const float **)(a1 + 200), 1, (float *)&__C, v21);
  float result = (float)((float)(1.0 - v25) * (float)(*((float *)&__C + 1) / (float)(*(float *)&__C + 1.0e-12)))
         + (float)(v25 * *a6);
  *a6 = result;
  return result;
}

void NFNSwitchKernel::ProcessBufferLists(NFNSwitchKernel *this, const float *a2, const float *a3, const float *a4, const float *a5, float *a6, float *a7, float *a8, float *a9)
{
  if (*(unsigned char *)this)
  {
    float v15 = a9;
    float v16 = *((float *)this + 18);
    float v17 = *((float *)this + 19);
    float v18 = *((float *)this + 24);
    float __C = 0.0;
    realp = (float *)*((void *)this + 22);
    uint64_t v20 = *((unsigned int *)this + 4);
    imagp = &realp[v20];
    float v22 = (float)(v20 - 1);
    double v23 = (float)v20;
    double v24 = *((double *)this + 1);
    float v25 = v16 / (v24 * 0.5) * v23;
    unsigned int v26 = fminf(v22, roundf(v25));
    v61.realp = realp;
    v61.imagp = imagp;
    float v27 = v17 / (v24 * 0.5) * v23;
    vDSP_Length __N = fminf(v22, roundf(v27)) - v26 + 1;
    float v28 = v24 / (double)v20;
    float v29 = expf(-1.0 / (float)(v18 * v28));
    uint64_t v30 = *(VPTimeFreqConverter **)(*((void *)this + 4) + 32);
    if (v30)
    {
      VPTimeFreqConverter::Analyze(v30, a6, &v61);
      realp = v61.realp;
      imagp = v61.imagp;
    }
    __A.realp = &realp[v26];
    __A.imagp = &imagp[v26];
    vDSP_zvmags(&__A, 1, *((float **)this + 25), 1, __N);
    vDSP_sve(*((const float **)this + 25), 1, &__C, __N);
    *((float *)this + 5) = (float)((float)(1.0 - v29) * __C) + (float)(v29 * *((float *)this + 5));
    NFNSwitchKernel::CalculateEnergyRatioInFreqRange((uint64_t)this, a3, a2, 1u, 0, (float *)this + 6, *((float *)this + 20), *((float *)this + 21), *((float *)this + 25));
    NFNSwitchKernel::CalculateEnergyRatioInFreqRange((uint64_t)this, a4, a5, 2u, 3u, (float *)this + 7, *((float *)this + 22), *((float *)this + 23), *((float *)this + 26));
    float v31 = log10f(*((float *)this + 5) + 1.0e-12) * 10.0;
    *((float *)this + 27) = v31;
    float v32 = log10f(*((float *)this + 6) + 1.0e-12) * 10.0;
    *((float *)this + 28) = v32;
    float v33 = log10f(*((float *)this + 7) + 1.0e-12) * 10.0;
    *((float *)this + 29) = v33;
    int v34 = *((_DWORD *)this + 33);
    *((unsigned char *)this + 120) = 0;
    *((_DWORD *)this + 31) = 0;
    *((_DWORD *)this + 33) = 1;
    if (v31 >= *((float *)this + 14))
    {
      *((_DWORD *)this + 32) = 1;
    }
    else
    {
      *((_DWORD *)this + 32) = 0;
      if (v33 > *((float *)this + 16))
      {
        *((unsigned char *)this + 120) = 1;
        goto LABEL_11;
      }
    }
    if (v32 <= *((float *)this + 15) && v33 >= *((float *)this + 17))
    {
      if (v34 != 1)
      {
        unsigned int v35 = 1;
        if (!v34)
        {
          *((_DWORD *)this + 33) = 1;
          uint64_t v47 = *((unsigned int *)this + 4);
          if (v47)
          {
            float v48 = 1.0 / (double)(v47 - 1);
            float v49 = 1.0;
            do
            {
              float v50 = *a4++;
              double v51 = (float)(v49 * v50);
              double v52 = 1.0 - v49;
              float v53 = *a5++;
              *(float *)&double v51 = v51 + v52 * v53;
              *a8++ = *(float *)&v51;
              float v54 = *a6++;
              double v55 = (float)(v49 * v54);
              float v56 = *a7++;
              *(float *)&double v55 = v55 + v52 * v56;
              *v15++ = *(float *)&v55;
              float v49 = v49 - v48;
              --v47;
            }
            while (v47);
            unsigned int v35 = 1;
          }
          goto LABEL_18;
        }
        goto LABEL_12;
      }
LABEL_17:
      memcpy(a8, a5, 4 * *((unsigned int *)this + 4));
      memcpy(a9, a7, 4 * *((unsigned int *)this + 4));
      unsigned int v35 = *((_DWORD *)this + 33);
LABEL_18:
      uint64_t v46 = (char *)this + 20 * v35 + 136;
      *(_OWORD *)((char *)this + 136) = *(_OWORD *)v46;
      *((_DWORD *)this + 38) = *((_DWORD *)v46 + 4);
      return;
    }
    *((_DWORD *)this + 31) = 1;
LABEL_11:
    unsigned int v35 = 0;
    *((_DWORD *)this + 33) = 0;
    if (v34)
    {
LABEL_12:
      uint64_t v36 = *((unsigned int *)this + 4);
      if (v36)
      {
        float v37 = 1.0 / (double)(v36 - 1);
        float v38 = 1.0;
        do
        {
          float v39 = *a5++;
          double v40 = (float)(v38 * v39);
          double v41 = 1.0 - v38;
          float v42 = *a4++;
          *(float *)&double v40 = v40 + v41 * v42;
          *a8++ = *(float *)&v40;
          float v43 = *a7++;
          double v44 = (float)(v38 * v43);
          float v45 = *a6++;
          *(float *)&double v44 = v44 + v41 * v45;
          *v15++ = *(float *)&v44;
          float v38 = v38 - v37;
          --v36;
        }
        while (v36);
      }
      goto LABEL_18;
    }
    a5 = a4;
    a7 = a6;
    goto LABEL_17;
  }
}

BOOL AUDSPGraph::ValidFormat(AUDSPGraph *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a2 - 1 > 1) {
    return 0;
  }
  Scope = (void *)ausdk::AUBase::GetScope(this, a2);
  uint64_t v6 = Scope[5];
  if (v6) {
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  else {
    uint64_t v7 = (Scope[3] - Scope[2]) >> 3;
  }
  return v7 > a3;
}

uint64_t AUDSPGraph::SupportedNumChannels(AUDSPGraph *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDSPGraph::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

BOOL AUDSPGraph::StreamFormatWritable(AUDSPGraph *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDSPGraph::SupportsTail(AUDSPGraph *this)
{
  return 1;
}

double AUDSPGraph::GetLatency(AUDSPGraph *this)
{
  int v1 = (DSPGraph::Graph *)*((void *)this + 92);
  if (!v1 || !*((unsigned char *)v1 + 762)) {
    return 0.0;
  }
  DSPGraph::Graph::getLatencyInSeconds(v1);
  return result;
}

double AUDSPGraph::GetParameterInfo(AUDSPGraph *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v5 = (DSPGraph::Graph *)*((void *)this + 92);
    if (v5)
    {
      uint64_t v8 = *((void *)this + 113);
      uint64_t v9 = *((void *)this + 114);
      if (v8 != v9)
      {
        uint64_t v10 = v8 + 48;
        do
        {
          int v11 = *(_DWORD *)(v10 - 48);
          BOOL v12 = v11 == a3 || v10 == v9;
          v10 += 48;
        }
        while (!v12);
        if (v11 == a3) {
          goto LABEL_13;
        }
      }
      if (DSPGraph::Graph::hasParameter(v5))
      {
LABEL_13:
        CAX4CCString::CAX4CCString((CAX4CCString *)cStr, a3);
        CFStringRef v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        if (!v14) {
          __assert_rtn("GetParameterInfo", "AUDSPGraph.cpp", 692, "cfStr");
        }
        a4->cfNameString = v14;
        a4->flags |= 0x8000010u;
        CFStringGetCString(v14, a4->name, 52, 0x8000100u);
        a4->unit = kAudioUnitParameterUnit_Generic;
        double result = 1.40444709e306;
        *(void *)&a4->minCFDictionaryRef Value = 0x7F7FFFFF00800000;
        a4->defaultCFDictionaryRef Value = 0.0;
      }
    }
  }
  return result;
}

BOOL AUDSPGraph::BusCountWritable(AUDSPGraph *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUDSPGraph::Render(AUDSPGraph *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v7 = *((void *)this + 107);
  if (v7 == *((void *)this + 106))
  {
    uint64_t v13 = *((void *)this + 107);
LABEL_7:
    if (*((void *)this + 110) != *((void *)this + 109))
    {
      unint64_t v14 = 0;
      do
      {
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), v14);
        *(void *)(*((void *)this + 109) + 8 * v14++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      }
      while (v14 < (uint64_t)(*((void *)this + 110) - *((void *)this + 109)) >> 3);
      uint64_t v13 = *((void *)this + 107);
      uint64_t v7 = *((void *)this + 106);
    }
    uint64_t v16 = *(uint64_t (**)(AUDSPGraph *, unsigned int *, uint64_t, unint64_t))(*(void *)this + 184);
    return v16(this, a2, a4, (unint64_t)(v13 - v7) >> 3);
  }
  else
  {
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 80), v9);
      uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, v9, a4);
      if (result) {
        break;
      }
      uint64_t v12 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 80), v9);
      *(void *)(*((void *)this + 106) + 8 * v9++) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
      uint64_t v13 = *((void *)this + 107);
      uint64_t v7 = *((void *)this + 106);
      if (v9 >= (v13 - v7) >> 3) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t AUDSPGraph::ProcessMultipleBufferLists(DSPGraph::Graph **this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  if (!this[92])
  {
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v14 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956433;
      }
      float v15 = (AUDSPGraph *)(this + 79);
      if (*((char *)this + 655) < 0) {
        float v15 = *(AUDSPGraph **)v15;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      float v173 = v15;
      __int16 v174 = 2048;
      *(void *)float v175 = this;
      uint64_t v16 = "[%s|%p] failed to process because DSPGraph is null";
      float v17 = v14;
      uint32_t v18 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v19 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956433;
      }
      *(_DWORD *)AudioTimeStamp buf = 134217984;
      float v173 = (AUDSPGraph *)this;
      uint64_t v16 = "[%p] failed to process because DSPGraph is null";
      float v17 = v19;
      uint32_t v18 = 12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 4294956433;
  }
  if (!*((unsigned char *)this + 899))
  {
    uint64_t v12 = this[15];
    if (v12) {
      LODWORD(v13) = (*(uint64_t (**)(DSPGraph::Graph *))(*(void *)v12 + 24))(v12);
    }
    else {
      unint64_t v13 = (unint64_t)(this[13] - this[12]) >> 3;
    }
    vDSP_Length v21 = this[21];
    if (v21) {
      LODWORD(v22) = (*(uint64_t (**)(DSPGraph::Graph *))(*(void *)v21 + 24))(v21);
    }
    else {
      unint64_t v22 = (unint64_t)(this[19] - this[18]) >> 3;
    }
    unsigned int v163 = a6;
    if (DSPGraph::Graph::numInputs(this[92]) != v13
      || DSPGraph::Graph::numOutputs(this[92]) != v22)
    {
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        double v23 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          double v24 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            double v24 = *(AUDSPGraph **)v24;
          }
          int v25 = DSPGraph::Graph::numInputs(this[92]);
          unsigned int v26 = DSPGraph::Graph::numOutputs(this[92]);
          *(_DWORD *)AudioTimeStamp buf = 136316418;
          float v173 = v24;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)float v176 = v13;
          *(_WORD *)&v176[4] = 1024;
          *(_DWORD *)&v176[6] = v22;
          *(_WORD *)&v176[10] = 1024;
          *(_DWORD *)&v176[12] = v25;
          *(_WORD *)&v176[16] = 1024;
          unsigned int v177 = v26;
          _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match", buf, 0x2Eu);
          a6 = v163;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        float v27 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          int v157 = DSPGraph::Graph::numInputs(this[92]);
          int v158 = DSPGraph::Graph::numOutputs(this[92]);
          *(_DWORD *)AudioTimeStamp buf = 134219008;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 1024;
          *(_DWORD *)float v175 = v13;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v22;
          *(_WORD *)float v176 = 1024;
          *(_DWORD *)&v176[2] = v157;
          *(_WORD *)&v176[6] = 1024;
          *(_DWORD *)&v176[8] = v158;
          _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match", buf, 0x24u);
        }
      }
    }
    unsigned int v28 = DSPGraph::Graph::numInputs(this[92]);
    if (v13 >= v28) {
      LODWORD(v13) = v28;
    }
    if (v13)
    {
      unsigned int v29 = 0;
      float v164 = this + 79;
      do
      {
        uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), v29);
        long long v31 = *(_OWORD *)(Element + 96);
        long long v170 = *(_OWORD *)(Element + 80);
        *(_OWORD *)float v171 = v31;
        *(void *)&v171[16] = *(void *)(Element + 112);
        uint64_t v32 = DSPGraph::Graph::in(this[92]);
        uint64_t v33 = *(void *)(v32 + 88);
        if (*(void *)(v32 + 96) == v33)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v167, "out");
          uint64_t v160 = (void *)(v32 + 32);
          if (*(char *)(v32 + 55) < 0) {
            uint64_t v160 = (void *)*v160;
          }
          DSPGraph::strprintf((uint64_t *)__p, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v159, v160, (uint64_t)(*(void *)(v32 + 96) - *(void *)(v32 + 88)) >> 5, 0);
          DSPGraph::ThrowException();
LABEL_249:
          __break(1u);
        }
        uint64_t v34 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v33 + 40))(v33) + 120);
        uint64_t v35 = *(void *)(v34 + 32);
        long long v36 = *(_OWORD *)(v34 + 16);
        *(_OWORD *)&v167.mSampleRate = *(_OWORD *)v34;
        *(_OWORD *)&v167.mBytesPerPacket = v36;
        *(void *)&v167.mBitsPerChannel = v35;
        if (*(double *)&v170 == v167.mSampleRate
          && DWORD2(v170) == v167.mFormatID
          && *(void *)v171 == *(void *)&v167.mBytesPerPacket
          && *(void *)&v171[12] == *(void *)&v167.mChannelsPerFrame
          && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v170, &v167, 0, 0))
        {
          goto LABEL_94;
        }
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v37 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_53;
          }
          float v38 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            float v38 = *v164;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          float v173 = v38;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)float v176 = v29;
          float v39 = v37;
          double v40 = "[%s|%p] [FATAL] AudioUnit and DSPGraph formats for input bus %d don't match";
          uint32_t v41 = 28;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v42 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_53:
            uint64_t v43 = -1;
            goto LABEL_54;
          }
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 1024;
          *(_DWORD *)float v175 = v29;
          float v39 = v42;
          double v40 = "[%p] [FATAL] AudioUnit and DSPGraph formats for input bus %d don't match";
          uint32_t v41 = 18;
        }
        _os_log_error_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_ERROR, v40, buf, v41);
        uint64_t v43 = getAUDSPGraphLog(void)::onceToken;
LABEL_54:
        if (*((unsigned char *)this + 656))
        {
          if (v43 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          double v44 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_68;
          }
          uint64_t v46 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            uint64_t v46 = *v164;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v45);
          uint64_t v47 = __p;
          if (v169 < 0) {
            uint64_t v47 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          float v173 = v46;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(void *)float v176 = v47;
          *(_WORD *)&v176[8] = 2048;
          *(void *)&v176[10] = HIDWORD(v170);
          _os_log_error_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
          a6 = v163;
        }
        else
        {
          if (v43 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          float v48 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_68:
            uint64_t v50 = -1;
            goto LABEL_69;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v49);
          int v64 = __p;
          if (v169 < 0) {
            int v64 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 134218498;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 2080;
          *(void *)float v175 = v64;
          *(_WORD *)&v175[8] = 2048;
          *(void *)float v176 = HIDWORD(v170);
          _os_log_error_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v50 = getAUDSPGraphLog(void)::onceToken;
LABEL_69:
        if (*((unsigned char *)this + 656))
        {
          if (v50 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          double v51 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          float v53 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            float v53 = *v164;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v52);
          float v54 = __p;
          if (v169 < 0) {
            float v54 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          float v173 = v53;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(void *)float v176 = v54;
          *(_WORD *)&v176[8] = 2048;
          *(void *)&v176[10] = v167.mFormatFlags;
          _os_log_error_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
          a6 = v163;
        }
        else
        {
          if (v50 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          double v55 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_83:
            uint64_t v57 = -1;
            goto LABEL_84;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v56);
          int v65 = __p;
          if (v169 < 0) {
            int v65 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 134218498;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 2080;
          *(void *)float v175 = v65;
          *(_WORD *)&v175[8] = 2048;
          *(void *)float v176 = v167.mFormatFlags;
          _os_log_error_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_ERROR, "[%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v57 = getAUDSPGraphLog(void)::onceToken;
LABEL_84:
        if (*((unsigned char *)this + 656))
        {
          if (v57 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v58 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_94;
          }
          __int16 v59 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            __int16 v59 = *v164;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          float v173 = v59;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)float v176 = v29;
          int v60 = v58;
          DSPSplitComplex v61 = "[%s|%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
          uint32_t v62 = 28;
        }
        else
        {
          if (v57 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v63 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_94;
          }
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 1024;
          *(_DWORD *)float v175 = v29;
          int v60 = v63;
          DSPSplitComplex v61 = "[%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
          uint32_t v62 = 18;
        }
        _os_log_error_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_ERROR, v61, buf, v62);
LABEL_94:
        ++v29;
      }
      while (v13 != v29);
    }
    unsigned int v66 = DSPGraph::Graph::numOutputs(this[92]);
    if (v22 >= v66) {
      unsigned int v67 = v66;
    }
    else {
      unsigned int v67 = v22;
    }
    if (v67)
    {
      unsigned int v68 = 0;
      float v165 = this + 79;
      do
      {
        uint64_t v69 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), v68);
        long long v70 = *(_OWORD *)(v69 + 96);
        long long v170 = *(_OWORD *)(v69 + 80);
        *(_OWORD *)float v171 = v70;
        *(void *)&v171[16] = *(void *)(v69 + 112);
        uint64_t v71 = DSPGraph::Graph::out(this[92]);
        uint64_t v72 = *(void *)(v71 + 64);
        if (*(void *)(v71 + 72) == v72)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v167, "in");
          float v162 = (void *)(v71 + 32);
          if (*(char *)(v71 + 55) < 0) {
            float v162 = (void *)*v162;
          }
          DSPGraph::strprintf((uint64_t *)__p, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v161, v162, (uint64_t)(*(void *)(v71 + 72) - *(void *)(v71 + 64)) >> 5, 0);
          DSPGraph::ThrowException();
          goto LABEL_249;
        }
        uint64_t v73 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v72 + 40))(v72) + 120);
        uint64_t v74 = *(void *)(v73 + 32);
        long long v75 = *(_OWORD *)(v73 + 16);
        *(_OWORD *)&v167.mSampleRate = *(_OWORD *)v73;
        *(_OWORD *)&v167.mBytesPerPacket = v75;
        *(void *)&v167.mBitsPerChannel = v74;
        if (*(double *)&v170 == v167.mSampleRate
          && DWORD2(v170) == v167.mFormatID
          && *(void *)v171 == *(void *)&v167.mBytesPerPacket
          && *(void *)&v171[12] == *(void *)&v167.mChannelsPerFrame
          && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v170, &v167, 0, 0))
        {
          goto LABEL_172;
        }
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v76 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_131;
          }
          uint64_t v77 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            uint64_t v77 = *v165;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          float v173 = v77;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)float v176 = v68;
          vDSP_Length v78 = v76;
          uint64_t v79 = "[%s|%p] [FATAL] AudioUnit and DSPGraph formats for output bus %d don't match";
          uint32_t v80 = 28;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v81 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_131:
            uint64_t v82 = -1;
            goto LABEL_132;
          }
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 1024;
          *(_DWORD *)float v175 = v68;
          vDSP_Length v78 = v81;
          uint64_t v79 = "[%p] [FATAL] AudioUnit and DSPGraph formats for output bus %d don't match";
          uint32_t v80 = 18;
        }
        _os_log_error_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_ERROR, v79, buf, v80);
        uint64_t v82 = getAUDSPGraphLog(void)::onceToken;
LABEL_132:
        if (*((unsigned char *)this + 656))
        {
          if (v82 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          float v83 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_146;
          }
          float v85 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            float v85 = *v165;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v84);
          float v86 = __p;
          if (v169 < 0) {
            float v86 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          float v173 = v85;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 2080;
          *(void *)float v176 = v86;
          *(_WORD *)&v176[8] = 2048;
          *(void *)&v176[10] = HIDWORD(v170);
          _os_log_error_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x2Au);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
          a6 = v163;
        }
        else
        {
          if (v82 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          float v87 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
LABEL_146:
            uint64_t v89 = -1;
            goto LABEL_147;
          }
          CA::StreamDescription::AsString((CA::StreamDescription *)&v170, (uint64_t)__p, v88);
          float v103 = __p;
          if (v169 < 0) {
            float v103 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 134218498;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 2080;
          *(void *)float v175 = v103;
          *(_WORD *)&v175[8] = 2048;
          *(void *)float v176 = HIDWORD(v170);
          _os_log_error_impl(&dword_1BB0CE000, v87, OS_LOG_TYPE_ERROR, "[%p] [FATAL] AudioUnit format: %s, format flags: 0x%lX", buf, 0x20u);
          if (v169 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v89 = getAUDSPGraphLog(void)::onceToken;
LABEL_147:
        if (*((unsigned char *)this + 656))
        {
          if (v89 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          float v90 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            float v92 = (AUDSPGraph *)(this + 79);
            if (*((char *)this + 655) < 0) {
              float v92 = *v165;
            }
            CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v91);
            float v93 = __p;
            if (v169 < 0) {
              float v93 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            float v173 = v92;
            __int16 v174 = 2048;
            *(void *)float v175 = this;
            *(_WORD *)&v175[8] = 2080;
            *(void *)float v176 = v93;
            *(_WORD *)&v176[8] = 2048;
            *(void *)&v176[10] = v167.mFormatFlags;
            _os_log_error_impl(&dword_1BB0CE000, v90, OS_LOG_TYPE_ERROR, "[%s|%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x2Au);
            if (v169 < 0) {
              operator delete(__p[0]);
            }
            a6 = v163;
LABEL_185:
            uint64_t v96 = getAUDSPGraphLog(void)::onceToken;
            goto LABEL_162;
          }
        }
        else
        {
          if (v89 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          float v94 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            CA::StreamDescription::AsString((CA::StreamDescription *)&v167, (uint64_t)__p, v95);
            float v104 = __p;
            if (v169 < 0) {
              float v104 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 134218498;
            float v173 = (AUDSPGraph *)this;
            __int16 v174 = 2080;
            *(void *)float v175 = v104;
            *(_WORD *)&v175[8] = 2048;
            *(void *)float v176 = v167.mFormatFlags;
            _os_log_error_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_ERROR, "[%p] [FATAL]  DSPGraph format: %s, format flags: 0x%lX", buf, 0x20u);
            if (v169 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_185;
          }
        }
        uint64_t v96 = -1;
LABEL_162:
        if (*((unsigned char *)this + 656))
        {
          if (v96 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v97 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_172;
          }
          uint64_t v98 = (AUDSPGraph *)(this + 79);
          if (*((char *)this + 655) < 0) {
            uint64_t v98 = *v165;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          float v173 = v98;
          __int16 v174 = 2048;
          *(void *)float v175 = this;
          *(_WORD *)&v175[8] = 1024;
          *(_DWORD *)float v176 = v68;
          int v99 = v97;
          uint64_t v100 = "[%s|%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
          uint32_t v101 = 28;
        }
        else
        {
          if (v96 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v102 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_172;
          }
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          float v173 = (AUDSPGraph *)this;
          __int16 v174 = 1024;
          *(_DWORD *)float v175 = v68;
          int v99 = v102;
          uint64_t v100 = "[%p] [FATAL] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
          uint32_t v101 = 18;
        }
        _os_log_error_impl(&dword_1BB0CE000, v99, OS_LOG_TYPE_ERROR, v100, buf, v101);
LABEL_172:
        ++v68;
      }
      while (v67 != v68);
    }
    *((unsigned char *)this + 899) = 1;
  }
  float v105 = this[15];
  if (v105) {
    LODWORD(v106) = (*(uint64_t (**)(DSPGraph::Graph *))(*(void *)v105 + 24))(v105);
  }
  else {
    unint64_t v106 = (unint64_t)(this[13] - this[12]) >> 3;
  }
  int v107 = this[21];
  if (v107) {
    LODWORD(v108) = (*(uint64_t (**)(DSPGraph::Graph *))(*(void *)v107 + 24))(v107);
  }
  else {
    unint64_t v108 = (unint64_t)(this[19] - this[18]) >> 3;
  }
  if (v106 == a4 && v108 == a6) {
    goto LABEL_209;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v110 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_209;
    }
    uint64_t v111 = (AUDSPGraph *)(this + 79);
    if (*((char *)this + 655) < 0) {
      uint64_t v111 = *(AUDSPGraph **)v111;
    }
    *(_DWORD *)AudioTimeStamp buf = 136316418;
    float v173 = v111;
    __int16 v174 = 2048;
    *(void *)float v175 = this;
    *(_WORD *)&v175[8] = 1024;
    *(_DWORD *)float v176 = v106;
    *(_WORD *)&v176[4] = 1024;
    *(_DWORD *)&v176[6] = v108;
    *(_WORD *)&v176[10] = 1024;
    *(_DWORD *)&v176[12] = a4;
    *(_WORD *)&v176[16] = 1024;
    unsigned int v177 = a6;
    unsigned int v112 = "[%s|%p] [FATAL] AudioUnit (%d -> %d) and runtime (%d -> %d) I/O bus counts don't match";
    unint64_t v113 = v110;
    uint32_t v114 = 46;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v115 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_209;
    }
    *(_DWORD *)AudioTimeStamp buf = 134219008;
    float v173 = (AUDSPGraph *)this;
    __int16 v174 = 1024;
    *(_DWORD *)float v175 = v106;
    *(_WORD *)&v175[4] = 1024;
    *(_DWORD *)&v175[6] = v108;
    *(_WORD *)float v176 = 1024;
    *(_DWORD *)&v176[2] = a4;
    *(_WORD *)&v176[6] = 1024;
    *(_DWORD *)&v176[8] = a6;
    unsigned int v112 = "[%p] [FATAL] AudioUnit (%d -> %d) and runtime (%d -> %d) I/O bus counts don't match";
    unint64_t v113 = v115;
    uint32_t v114 = 36;
  }
  _os_log_error_impl(&dword_1BB0CE000, v113, OS_LOG_TYPE_ERROR, v112, buf, v114);
LABEL_209:
  if (*((unsigned char *)this + 897))
  {
    *((unsigned char *)this + 897) = 0;
    DSPGraph::Graph::reset(this[92]);
  }
  if (*((unsigned char *)this + 896))
  {
    if (a6)
    {
      uint64_t v116 = 0;
      uint64_t v117 = a6;
      do
      {
        int v118 = a7[v116];
        if (v118->mNumberBuffers)
        {
          UInt32 v119 = 0;
          p_mData = &v118->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v119;
            p_mData += 2;
          }
          while (v119 < v118->mNumberBuffers);
        }
        ++v116;
      }
      while (v116 != v117);
    }
  }
  else
  {
    unsigned int v121 = a4;
    if (v106 < a4) {
      unsigned int v121 = v106;
    }
    if (v121)
    {
      uint64_t v122 = 0;
      float32x2x2_t v123 = this[94];
      do
      {
        uint64_t v124 = (uint64_t)v123 + v122;
        long long v125 = *((_OWORD *)this + 17);
        long long v126 = *((_OWORD *)this + 18);
        long long v127 = *((_OWORD *)this + 19);
        *(_OWORD *)(v124 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v124 + 40) = v127;
        *(_OWORD *)(v124 + 24) = v126;
        *(_OWORD *)(v124 + 8) = v125;
        float32x2x2_t v123 = this[94];
        uint64_t v128 = (uint64_t)v123 + v122;
        *(_DWORD *)(v128 + 4) = *a2;
        uint64_t v129 = (uint64_t)*a5++;
        *(void *)(v128 + 72) = v129;
        v122 += 80;
      }
      while (80 * v121 != v122);
    }
    if (v106 > a4)
    {
      float v130 = this[94];
      unint64_t v131 = v106 - (unint64_t)v121;
      uint64_t v132 = 80 * v121;
      do
      {
        uint64_t v133 = (uint64_t)v130 + v132;
        long long v134 = *((_OWORD *)this + 17);
        long long v135 = *((_OWORD *)this + 18);
        long long v136 = *((_OWORD *)this + 19);
        *(_OWORD *)(v133 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v133 + 40) = v136;
        *(_OWORD *)(v133 + 24) = v135;
        *(_OWORD *)(v133 + 8) = v134;
        float v130 = this[94];
        uint64_t v137 = (uint64_t)v130 + v132;
        *(_DWORD *)(v137 + 4) = *a2;
        *(void *)(v137 + 72) = 0;
        v132 += 80;
        --v131;
      }
      while (v131);
    }
    if (v108 >= a6) {
      unsigned int v138 = a6;
    }
    else {
      unsigned int v138 = v108;
    }
    if (v138)
    {
      uint64_t v139 = 0;
      uint64_t v140 = this[97];
      do
      {
        uint64_t v141 = (uint64_t)v140 + v139;
        long long v142 = *((_OWORD *)this + 17);
        long long v143 = *((_OWORD *)this + 18);
        long long v144 = *((_OWORD *)this + 19);
        *(_OWORD *)(v141 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v141 + 40) = v144;
        *(_OWORD *)(v141 + 24) = v143;
        *(_OWORD *)(v141 + 8) = v142;
        uint64_t v140 = this[97];
        uint64_t v145 = (uint64_t)v140 + v139;
        *(_DWORD *)(v145 + 4) = *a2;
        uint64_t v146 = (uint64_t)*a7++;
        *(void *)(v145 + 72) = v146;
        v139 += 80;
      }
      while (80 * v138 != v139);
    }
    if (v108 > a6)
    {
      uint64_t v147 = v108;
      uint64_t v148 = this[97];
      uint64_t v149 = v147 - v138;
      uint64_t v150 = 80 * v138;
      do
      {
        uint64_t v151 = (uint64_t)v148 + v150;
        long long v152 = *((_OWORD *)this + 17);
        long long v153 = *((_OWORD *)this + 18);
        long long v154 = *((_OWORD *)this + 19);
        *(_OWORD *)(v151 + 56) = *((_OWORD *)this + 20);
        *(_OWORD *)(v151 + 40) = v154;
        *(_OWORD *)(v151 + 24) = v153;
        *(_OWORD *)(v151 + 8) = v152;
        uint64_t v148 = this[97];
        uint64_t v155 = (uint64_t)v148 + v150;
        *(_DWORD *)(v155 + 4) = *a2;
        *(void *)(v155 + 72) = 0;
        v150 += 80;
        --v149;
      }
      while (v149);
    }
    ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
    DSPGraph::Graph::preflight();
    DSPGraph::Graph::processMultiple();
  }
  return 0;
}

void sub_1BB51BEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,long long buf,int a42,__int16 a43,char a44,char a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  switch(a2)
  {
    case 5:
      float v48 = __cxa_begin_catch(exception_object);
      if (*(unsigned char *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        int16x8_t v49 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = (void *)(v45 + 632);
          if (*(char *)(v45 + 655) < 0) {
            uint64_t v50 = (void *)*v50;
          }
          double v51 = a45 >= 0 ? &buf : (long long *)buf;
          *(_DWORD *)(v46 - 160) = 136315650;
          *(void *)(v46 - 156) = v50;
          *(_WORD *)(v46 - 148) = 2048;
          *(void *)(v46 - 146) = v45;
          *(_WORD *)(v46 - 138) = 2080;
          *(void *)(v46 - 136) = v51;
          _os_log_error_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", (uint8_t *)(v46 - 160), 0x20u);
          if (a45 < 0)
          {
            int16x8_t v52 = (void *)buf;
LABEL_78:
            operator delete(v52);
          }
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        int v64 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v75 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(void *)(v46 - 160);
          LODWORD(buf) = 134218242;
          *(void *)((char *)&buf + 4) = v45;
          WORD6(buf) = 2080;
          *(void *)((char *)&buf + 14) = v75;
          _os_log_error_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", (uint8_t *)&buf, 0x16u);
          if (*(char *)(v46 - 137) < 0)
          {
            int16x8_t v52 = *(void **)(v46 - 160);
            goto LABEL_78;
          }
        }
      }
      __cxa_end_catch();
      JUMPOUT(0x1BB51BC28);
    case 4:
      __cxa_begin_catch(exception_object);
      if (*(unsigned char *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v53 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          float v54 = (void *)(v45 + 632);
          if (*(char *)(v45 + 655) < 0) {
            float v54 = (void *)*v54;
          }
          *(_DWORD *)(v46 - 160) = 136315394;
          *(void *)(v46 - 156) = v54;
          *(_WORD *)(v46 - 148) = 2048;
          *(void *)(v46 - 146) = v45;
          double v55 = "[%s|%p] caught CAXException";
          int16x8_t v56 = (uint8_t *)(v46 - 160);
          uint64_t v57 = v53;
          uint32_t v58 = 22;
          goto LABEL_92;
        }
LABEL_72:
        __cxa_end_catch();
        JUMPOUT(0x1BB51BC2CLL);
      }
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v70 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
      *(_DWORD *)(v46 - 160) = 134217984;
      *(void *)(v46 - 156) = v45;
      double v55 = "[%p] caught CAXException";
      int16x8_t v56 = (uint8_t *)(v46 - 160);
      uint64_t v57 = v70;
      uint32_t v58 = 12;
      goto LABEL_92;
    case 3:
      __int16 v59 = (const std::system_error *)__cxa_begin_catch(exception_object);
      if (*(unsigned char *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        int v60 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_72;
        }
        DSPSplitComplex v61 = (void *)(v45 + 632);
        if (*(char *)(v45 + 655) < 0) {
          DSPSplitComplex v61 = (void *)*v61;
        }
        uint32_t v62 = a45 >= 0 ? &buf : (long long *)buf;
        *(_DWORD *)(v46 - 160) = 136315650;
        *(void *)(v46 - 156) = v61;
        *(_WORD *)(v46 - 148) = 2048;
        *(void *)(v46 - 146) = v45;
        *(_WORD *)(v46 - 138) = 2080;
        *(void *)(v46 - 136) = v62;
        _os_log_error_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::system_error: %s", (uint8_t *)(v46 - 160), 0x20u);
        if ((a45 & 0x80000000) == 0) {
          goto LABEL_72;
        }
        uint64_t v63 = (void *)buf;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v72 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_72;
        }
        uint64_t v76 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(void *)(v46 - 160);
        LODWORD(buf) = 134218242;
        *(void *)((char *)&buf + 4) = v45;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v76;
        _os_log_error_impl(&dword_1BB0CE000, v72, OS_LOG_TYPE_ERROR, "[%p] caught std::system_error: %s", (uint8_t *)&buf, 0x16u);
        if ((*(char *)(v46 - 137) & 0x80000000) == 0) {
          goto LABEL_72;
        }
        uint64_t v63 = *(void **)(v46 - 160);
      }
      break;
    default:
      int v65 = (const std::exception *)__cxa_begin_catch(exception_object);
      unsigned int v66 = (void *)(v45 + 632);
      if (a2 != 2)
      {
        if (*(unsigned char *)(v45 + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v71 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(v45 + 655) < 0) {
              unsigned int v66 = (void *)*v66;
            }
            *(_DWORD *)(v46 - 160) = 136315394;
            *(void *)(v46 - 156) = v66;
            *(_WORD *)(v46 - 148) = 2048;
            *(void *)(v46 - 146) = v45;
            double v55 = "[%s|%p] caught unknown exception";
            int16x8_t v56 = (uint8_t *)(v46 - 160);
            uint64_t v57 = v71;
            uint32_t v58 = 22;
            goto LABEL_92;
          }
          goto LABEL_72;
        }
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v74 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_72;
        }
        *(_DWORD *)(v46 - 160) = 134217984;
        *(void *)(v46 - 156) = v45;
        double v55 = "[%p] caught unknown exception";
        int16x8_t v56 = (uint8_t *)(v46 - 160);
        uint64_t v57 = v74;
        uint32_t v58 = 12;
LABEL_92:
        _os_log_error_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, v55, v56, v58);
        goto LABEL_72;
      }
      unsigned int v67 = v65;
      if (*(unsigned char *)(v45 + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        unsigned int v68 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_72;
        }
        if (*(char *)(v45 + 655) < 0) {
          unsigned int v66 = (void *)*v66;
        }
        uint64_t v69 = a45 >= 0 ? &buf : (long long *)buf;
        *(_DWORD *)(v46 - 160) = 136315650;
        *(void *)(v46 - 156) = v66;
        *(_WORD *)(v46 - 148) = 2048;
        *(void *)(v46 - 146) = v45;
        *(_WORD *)(v46 - 138) = 2080;
        *(void *)(v46 - 136) = v69;
        _os_log_error_impl(&dword_1BB0CE000, v68, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::exception: %s", (uint8_t *)(v46 - 160), 0x20u);
        if ((a45 & 0x80000000) == 0) {
          goto LABEL_72;
        }
        uint64_t v63 = (void *)buf;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v73 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_72;
        }
        uint64_t v77 = *(char *)(v46 - 137) >= 0 ? v46 - 160 : *(void *)(v46 - 160);
        LODWORD(buf) = 134218242;
        *(void *)((char *)&buf + 4) = v45;
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v77;
        _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "[%p] caught std::exception: %s", (uint8_t *)&buf, 0x16u);
        if ((*(char *)(v46 - 137) & 0x80000000) == 0) {
          goto LABEL_72;
        }
        uint64_t v63 = *(void **)(v46 - 160);
      }
      break;
  }
  operator delete(v63);
  goto LABEL_72;
}

void anonymous namespace'::convertExceptionToString(void *a1, uint64_t a2)
{
  v31[0] = 0;
  uint64_t v32 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v29, a2 + 72);
  long long v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v29[0];
  v29[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v30;
  uint64_t v30 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  uint64_t v7 = (uint64_t *)*(int *)(a2 + 8);
  v27[0] = 5;
  unsigned int v28 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "os_status");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v27[0];
  v27[0] = v9;
  uint64_t v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v28;
  unsigned int v28 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v25, a2 + 16);
  int v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  char v12 = *(unsigned char *)v11;
  *(unsigned char *)int v11 = v25[0];
  v25[0] = v12;
  unint64_t v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v26;
  unsigned int v26 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2 + 48);
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v23[0];
  v23[0] = v15;
  uint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v24;
  double v24 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  float v17 = (uint64_t *)*(int *)(a2 + 40);
  v21[0] = 5;
  unint64_t v22 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  uint32_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "line");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  unsigned __int8 v19 = *(unsigned char *)v18;
  *(unsigned char *)uint32_t v18 = v21[0];
  v21[0] = v19;
  uint64_t v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v22;
  unint64_t v22 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v31, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  uint64_t *v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  unsigned char v23[8];
  uint64_t *v24;
  unsigned char v25[8];
  uint64_t *v26;
  unsigned __int8 v27[8];
  uint64_t *v28;
  unsigned char v29[8];
  uint64_t *v30;
  unsigned __int8 v31[8];
  uint64_t *v32;

  v31[0] = 0;
  uint64_t v32 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v29, a2 + 72);
  long long v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v29[0];
  v29[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v30;
  uint64_t v30 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  uint64_t v7 = (uint64_t *)*(int *)(a2 + 8);
  v27[0] = 5;
  unsigned int v28 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "os_status");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v27[0];
  v27[0] = v9;
  uint64_t v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v28;
  unsigned int v28 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v25, a2 + 16);
  int v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  char v12 = *(unsigned char *)v11;
  *(unsigned char *)int v11 = v25[0];
  v25[0] = v12;
  unint64_t v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v26;
  unsigned int v26 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2 + 48);
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v23[0];
  v23[0] = v15;
  uint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v24;
  double v24 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  float v17 = (uint64_t *)*(int *)(a2 + 40);
  v21[0] = 5;
  unint64_t v22 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  uint32_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "line");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  unsigned __int8 v19 = *(unsigned char *)v18;
  *(unsigned char *)uint32_t v18 = v21[0];
  v21[0] = v19;
  uint64_t v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v22;
  unint64_t v22 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v31, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
}

{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  char *v7;
  unsigned char v8[8];
  uint64_t *v9;
  unsigned __int8 v10[8];
  uint64_t *v11;

  v10[0] = 0;
  int v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v8, &v7);
  long long v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v8[0];
  v8[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  unsigned __int8 v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v10, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
}

void anonymous namespace'::convertExceptionToString(_anonymous_namespace_ *this, const std::system_error *a2)
{
  v30[0] = 0;
  long long v31 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::system_error *))a2->what)(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v28, &v21.__r_.__value_.__l.__data_);
  long long v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v28[0];
  v28[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v29;
  unsigned int v29 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
  p_ec = &a2->__ec_;
  val = (uint64_t *)a2->__ec_.__val_;
  v26[0] = 5;
  float v27 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  unsigned __int8 v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v9, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  unsigned __int8 v11 = *(unsigned char *)v10;
  *(unsigned char *)uint64_t v10 = v26[0];
  v26[0] = v11;
  char v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v27;
  float v27 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::error_category *))a2->__ec_.__cat_->name)(a2->__ec_.__cat_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v24, &v21.__r_.__value_.__l.__data_);
  unint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v13, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v24[0];
  v24[0] = v15;
  uint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v25;
  int v25 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  std::error_code::message(&v21, p_ec);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v22, (uint64_t)&v21);
  float v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  uint32_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v17, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  char v19 = *(unsigned char *)v18;
  *(unsigned char *)uint32_t v18 = v22[0];
  v22[0] = v19;
  uint64_t v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v23;
  double v23 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v30, 4, 0x20u, 0, 0, this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
}

void anonymous namespace'::convertExceptionToString(_anonymous_namespace_ *this, const std::exception *a2)
{
  v10[0] = 0;
  unsigned __int8 v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  uint64_t v7 = (char *)((uint64_t (*)(const std::exception *))a2->what)(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v8, &v7);
  long long v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v8[0];
  v8[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  unsigned __int8 v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v10, 4, 0x20u, 0, 0, this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
}

os_log_t ___Z16getAUDSPGraphLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUDSPGraph");
  getAUDSPGraphLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUDSPGraph::CanScheduleParameters(AUDSPGraph *this)
{
  return 0;
}

uint64_t AUDSPGraph::SetParameter(AUDSPGraph *this, unsigned int a2, int a3, int a4, __n128 a5)
{
  if (a3) {
    return 4294956430;
  }
  if (a4) {
    return 4294956419;
  }
  float v6 = a5.n128_f32[0];
  if (*((void *)this + 92))
  {
    AUDSPGraph::SetGraphParameter((uint64_t)this, a2, a5);
  }
  else
  {
    unsigned __int8 v9 = (unsigned int *)*((void *)this + 101);
    unint64_t v10 = *((void *)this + 102);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v12 = *((void *)this + 100);
      uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v10 - v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v16);
      uint32_t v18 = (unsigned int *)&v17[8 * v13];
      uint64_t v20 = &v17[8 * v19];
      *uint32_t v18 = a2;
      *((float *)v18 + 1) = v6;
      unsigned __int8 v11 = (uint64_t *)(v18 + 2);
      std::string v21 = (char *)*((void *)this + 101);
      unint64_t v22 = (char *)*((void *)this + 100);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v18 - 1) = v23;
          v18 -= 2;
        }
        while (v21 != v22);
        std::string v21 = (char *)*((void *)this + 100);
      }
      *((void *)this + 100) = v18;
      *((void *)this + 101) = v11;
      *((void *)this + 102) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *unsigned __int8 v9 = a2;
      v9[1] = a5.n128_u32[0];
      unsigned __int8 v11 = (uint64_t *)(v9 + 2);
    }
    *((void *)this + 101) = v11;
    std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((void *)this + 128, *((uint64_t **)this + 100), v11, ((uint64_t)v11 - *((void *)this + 100)) >> 3);
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, v6, 0);
  return 0;
}

void sub_1BB51CECC(void *a1)
{
}

uint64_t AUDSPGraph::SetGraphParameter(uint64_t this, int a2, __n128 a3)
{
  float v3 = a3.n128_f32[0];
  uint64_t v14 = this;
  uint64_t v15 = caulk::function_ref<void ()(unsigned int,float)>::functor_invoker<AUDSPGraph::SetGraphParameter(unsigned int,float)::$_0>;
  unint64_t v16 = &v14;
  uint64_t v4 = *(void *)(this + 904);
  uint64_t v5 = *(void *)(this + 912);
  if (v4 == v5) {
    return (*(uint64_t (**)(void, __n128))(**(void **)(this + 736) + 40))(*(void *)(this + 736), a3);
  }
  while (*(_DWORD *)v4 != a2)
  {
    v4 += 48;
    if (v4 == v5) {
      return (*(uint64_t (**)(void, __n128))(**(void **)(this + 736) + 40))(*(void *)(this + 736), a3);
    }
  }
  for (unsigned int i = *(uint64_t ***)(v4 + 24); i; unsigned int i = (uint64_t **)*i)
  {
    uint64_t v7 = (float *)i[3];
    uint64_t v8 = (float *)i[4];
    a3.n128_f32[0] = v3;
    if (v7 != v8)
    {
      if (*v7 >= v3)
      {
        a3.n128_f32[0] = v7[1];
      }
      else if (*(v8 - 2) <= v3)
      {
        a3.n128_f32[0] = *(v8 - 1);
      }
      else
      {
        unint64_t v9 = ((char *)v8 - (char *)v7) >> 3;
        do
        {
          unint64_t v10 = v9 >> 1;
          unsigned __int8 v11 = &v7[2 * (v9 >> 1)];
          float v13 = *v11;
          uint64_t v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 > v3) {
            unint64_t v9 = v10;
          }
          else {
            uint64_t v7 = v12;
          }
        }
        while (v9);
        a3.n128_f32[0] = *(v7 - 1)
                       + (float)((float)((float)(v3 - *(v7 - 2)) * (float)(v7[1] - *(v7 - 1))) / (float)(*v7 - *(v7 - 2)));
      }
    }
    this = ((uint64_t (*)(uint64_t **, void, __n128))v15)(&v16, *((unsigned int *)i + 4), a3);
  }
  *(float *)(v4 + 4) = v3;
  return this;
}

char *std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  float v6 = a2;
  uint64_t v8 = a1[2];
  os_log_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint32_t v18 = (char *)a1[1];
    float v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v23 = result;
      while (v6 != a3)
      {
        *(_DWORD *)uint64_t v23 = *(_DWORD *)v6;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        v23 += 8;
        ++v6;
      }
      float v17 = (char *)(v23 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)os_log_t result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6++ + 1);
          result += 8;
        }
        while (v6 != v20);
      }
      std::string v21 = v12;
      while (v20 != a3)
      {
        uint64_t v22 = *v20++;
        *(void *)std::string v21 = v22;
        v21 += 8;
      }
      float v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    os_log_t result = std::vector<std::pair<unsigned int,float>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    float v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    float v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

uint64_t caulk::function_ref<void ()(unsigned int,float)>::functor_invoker<AUDSPGraph::SetGraphParameter(unsigned int,float)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)a1 + 736) + 40))();
}

uint64_t AUDSPGraph::GetParameter(AUDSPGraph *this, int a2, int a3, int a4, float *a5)
{
  if (a3) {
    return 4294956430;
  }
  if (a4) {
    return 4294956419;
  }
  if (!*((void *)this + 92)) {
    return 4294956429;
  }
  Graphfloat Parameter = AUDSPGraph::GetGraphParameter(this, a2);
  uint64_t result = 0;
  *a5 = GraphParameter;
  return result;
}

void sub_1BB51D22C(void *a1)
{
}

float AUDSPGraph::GetGraphParameter(AUDSPGraph *this, int a2)
{
  for (uint64_t i = *((void *)this + 113); ; i += 48)
  {
    if (i == *((void *)this + 114))
    {
      (*(void (**)(void))(**((void **)this + 92) + 48))();
      return result;
    }
    if (*(_DWORD *)i == a2) {
      break;
    }
  }
  return *(float *)(i + 4);
}

uint64_t AUDSPGraph::SetProperty(AUDSPGraph *this, uint64_t a2, int a3, int a4, CFTypeRef *a5, uint64_t a6)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if ((int)a2 <= 1735554167)
  {
    if ((int)a2 > 1667788396)
    {
      if ((int)a2 > 1685287014)
      {
        if (a2 != 1685287015)
        {
          if (a2 != 1735287149)
          {
            if (a2 == 1735553138)
            {
              uint64_t v6 = 4294956445;
              if (!a5 || a6 != 8) {
                return v6;
              }
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&__p, *a5);
              if (!*((void *)this + 92))
              {
                float v93 = (__CFArray *)*((void *)this + 131);
                if (!v93)
                {
                  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                  uint64_t v95 = *((void *)this + 131);
                  *((void *)this + 131) = Mutable;
                  *(void *)AudioTimeStamp buf = v95;
                  applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
                  applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 131));
                  uint64_t v96 = *((void *)this + 103);
                  *((void *)this + 103) = *(void *)buf;
                  *(void *)AudioTimeStamp buf = v96;
                  applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
                  float v93 = (__CFArray *)*((void *)this + 131);
                }
                CFArrayAppendValue(v93, __p);
                goto LABEL_285;
              }
              uint64_t v12 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
              uint64_t v13 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*v12);
              if (!DSPGraph::Graph::hasProperty(*((DSPGraph::Graph **)this + 92)))
              {
                if (*((unsigned char *)this + 656))
                {
                  if (getAUDSPGraphLog(void)::onceToken != -1) {
                    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                  }
                  uint64_t v102 = getAUDSPGraphLog(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_285;
                  }
                  float v103 = (void *)((char *)this + 632);
                  if (*((char *)this + 655) < 0) {
                    float v103 = (void *)*v103;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 136315650;
                  *(void *)&uint8_t buf[4] = v103;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v13;
                  float v104 = "[%s|%p] skipping setting graph property %d.";
                  float v105 = v102;
                  uint32_t v106 = 28;
                }
                else
                {
                  if (getAUDSPGraphLog(void)::onceToken != -1) {
                    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                  }
                  uint64_t v112 = getAUDSPGraphLog(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_285;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 134218240;
                  *(void *)&uint8_t buf[4] = this;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v13;
                  float v104 = "[%p] skipping setting graph property %d.";
                  float v105 = v112;
                  uint32_t v106 = 18;
                }
                _os_log_debug_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_DEBUG, v104, buf, v106);
LABEL_285:
                uint64_t v6 = 0;
                p_p = &__p;
LABEL_286:
                applesauce::CF::DictionaryRef::~DictionaryRef((const void **)p_p);
                return v6;
              }
              uint64_t v14 = applesauce::CF::DictionaryRef::operator->(&__p);
              if (!applesauce::CF::details::has_key<char const(&)[9]>(*v14, "cfobject"))
              {
                uint64_t v110 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
                applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>(*v110, "data", (applesauce::CF::DataRef *)&__s1);
                uint64_t v111 = (const void **)applesauce::CF::DataRef::operator->(&__s1);
                applesauce::CF::convert_to<std::vector<unsigned char>,0>(*v111, buf);
                (*(void (**)(void, uint64_t, void))(**((void **)this + 92) + 56))(*((void *)this + 92), v13, (*(_DWORD *)&buf[8] - *(_DWORD *)buf));
                if (*(void *)buf)
                {
                  *(void *)&buf[8] = *(void *)buf;
                  operator delete(*(void **)buf);
                }
                applesauce::CF::DataRef::~DataRef((const void **)&__s1.__r_.__value_.__l.__data_);
                goto LABEL_285;
              }
              cf[0] = 0;
              uint64_t v15 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&__p);
              applesauce::CF::details::find_at_key<applesauce::CF::TypeRef,char const(&)[9]>(buf, *v15);
              uint64_t v16 = *(const void **)buf;
              applesauce::CF::TypeRef::~TypeRef((const void **)buf);
              cf[0] = v16;
              if (*((unsigned char *)this + 656))
              {
                if (getAUDSPGraphLog(void)::onceToken != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v17 = getAUDSPGraphLog(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_284;
                }
                uint32_t v18 = (void *)((char *)this + 632);
                if (*((char *)this + 655) < 0) {
                  uint32_t v18 = (void *)*v18;
                }
                applesauce::CF::details::pretty_print((applesauce::CF::details *)&__s1, (__CFString *)cf[0]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_s1 = &__s1;
                }
                else {
                  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioTimeStamp buf = 136315906;
                *(void *)&uint8_t buf[4] = v18;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = this;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v13;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = p_s1;
                uint64_t v20 = "[%s|%p] setting graph property %d with CF object: %s";
                std::string v21 = v17;
                uint32_t v22 = 38;
              }
              else
              {
                if (getAUDSPGraphLog(void)::onceToken != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v118 = getAUDSPGraphLog(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_284;
                }
                applesauce::CF::details::pretty_print((applesauce::CF::details *)&__s1, (__CFString *)cf[0]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  UInt32 v119 = &__s1;
                }
                else {
                  UInt32 v119 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioTimeStamp buf = 134218498;
                *(void *)&uint8_t buf[4] = this;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v13;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v119;
                uint64_t v20 = "[%p] setting graph property %d with CF object: %s";
                std::string v21 = v118;
                uint32_t v22 = 28;
              }
              _os_log_debug_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s1.__r_.__value_.__l.__data_);
              }
LABEL_284:
              (*(void (**)(void, uint64_t, uint64_t, CFTypeRef *))(**((void **)this + 92) + 56))(*((void *)this + 92), v13, 8, cf);
              goto LABEL_285;
            }
            goto LABEL_188;
          }
          uint64_t v6 = 4294956445;
          if (!a5 || a6 != 8) {
            return v6;
          }
          if (!*((unsigned char *)this + 17))
          {
            applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
            unsigned int v66 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
            applesauce::CF::convert_to<std::string,0>(*v66, (uint64_t)buf);
            unsigned int v67 = (char *)this + 632;
LABEL_276:
            std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)v67, (long long *)buf);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int16x8_t v84 = &__s1;
LABEL_279:
            applesauce::CF::StringRef::~StringRef((const void **)&v84->__r_.__value_.__l.__data_);
            return 0;
          }
          return 4294956447;
        }
        uint64_t v6 = 4294956445;
        if (!a5 || a6 != 8) {
          return v6;
        }
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
        float v39 = (char *)this + 568;
        if (*((unsigned char *)this + 592))
        {
          unsigned int v68 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
          applesauce::CF::convert_to<std::string,0>(*v68, (uint64_t)buf);
          int v69 = buf[23];
          uint64_t v70 = *(void **)buf;
          if (buf[23] >= 0) {
            uint64_t v71 = buf;
          }
          else {
            uint64_t v71 = *(unsigned char **)buf;
          }
          if (buf[23] >= 0) {
            size_t v72 = buf[23];
          }
          else {
            size_t v72 = *(void *)&buf[8];
          }
          if (!*((unsigned char *)this + 592)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          if (*((char *)this + 591) < 0)
          {
            uint64_t v74 = (char *)*((void *)this + 71);
            uint64_t v73 = *((void *)this + 72);
          }
          else
          {
            uint64_t v73 = *((unsigned __int8 *)this + 591);
            uint64_t v74 = (char *)this + 568;
          }
          BOOL v115 = v72 == v73 && memcmp(v71, v74, v72) == 0;
          if (v69 < 0) {
            operator delete(v70);
          }
          if (!v115)
          {
            if (_os_feature_enabled_impl() && *((void *)this + 92)) {
              AUDSPGraph::ResetCachedProps(this);
            }
            uint64_t v116 = (std::__shared_weak_count *)*((void *)this + 93);
            *((_OWORD *)this + 46) = 0u;
            if (v116) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v116);
            }
          }
        }
LABEL_275:
        uint64_t v117 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
        applesauce::CF::convert_to<std::string,0>(*v117, (uint64_t)buf);
        unsigned int v67 = v39;
        goto LABEL_276;
      }
      if (a2 == 1667788397)
      {
        uint64_t v6 = 4294956445;
        if (!a5 || a6 != 8) {
          return v6;
        }
        if (!*((unsigned char *)this + 17))
        {
          CACFDictionary::operator=((uint64_t)this + 688, *a5);
          return 0;
        }
        return 4294956447;
      }
      if (a2 == 1685283431)
      {
        if (a6 == 4)
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 896) = *(_DWORD *)a5 != 0;
          return v6;
        }
        return 4294956445;
      }
LABEL_188:
      if (a4) {
        return 4294956417;
      }
      float v85 = (DSPGraph::Graph *)*((void *)this + 92);
      if (!v85 || !DSPGraph::Graph::hasProperty(v85)) {
        return 4294956417;
      }
      (*(void (**)(void, uint64_t, uint64_t, CFTypeRef *))(**((void **)this + 92) + 56))(*((void *)this + 92), a2, a6, a5);
      return 0;
    }
    if ((int)a2 <= 1652060273)
    {
      if (a2 != 3700)
      {
        if (a2 != 1635087216) {
          goto LABEL_188;
        }
        uint64_t v6 = 4294956445;
        if (!a5 || a6 != 8) {
          return v6;
        }
        uint64_t v23 = (std::mutex *)((char *)this + 928);
        std::mutex::lock((std::mutex *)((char *)this + 928));
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        uint64_t v24 = *((void *)this + 83);
        *((void *)this + 83) = *(void *)buf;
        *(void *)AudioTimeStamp buf = v24;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
        if (_os_feature_enabled_impl()) {
          applesauce::CF::DictionaryRef::operator=((const void **)this + 134, *((CFTypeRef *)this + 83));
        }
        int v25 = (DSPGraph::Graph *)*((void *)this + 92);
        if (v25)
        {
          uint64_t v6 = DSPGraph::Graph::setAUStrip(v25, *((const __CFDictionary **)this + 83));
LABEL_207:
          std::mutex::unlock(v23);
          return v6;
        }
LABEL_206:
        uint64_t v6 = 0;
        goto LABEL_207;
      }
      if (a6 == 4)
      {
        if (!*((unsigned char *)this + 17))
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 376) = *(_DWORD *)a5 != 0;
          return v6;
        }
        return 4294956447;
      }
      return 4294956445;
    }
    if (a2 != 1652060274)
    {
      if (a2 == 1652060275)
      {
        uint64_t v6 = 4294956445;
        if (!a5 || a6 != 8) {
          return v6;
        }
        CFTypeRef v31 = *a5;
        uint64_t v32 = (__CFArray *)*((void *)this + 133);
        if (!v32)
        {
          CFMutableArrayRef v33 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          uint64_t v34 = *((void *)this + 133);
          *((void *)this + 133) = v33;
          *(void *)AudioTimeStamp buf = v34;
          applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
          applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 133));
          uint64_t v35 = *((void *)this + 105);
          *((void *)this + 105) = *(void *)buf;
          *(void *)AudioTimeStamp buf = v35;
          applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
          uint64_t v32 = (__CFArray *)*((void *)this + 133);
        }
        CFArrayAppendValue(v32, v31);
        if (*((void *)this + 92)) {
          return AUDSPGraph::SetBoxPreset(this, v31);
        }
        return 0;
      }
      goto LABEL_188;
    }
    uint64_t v6 = 4294956445;
    if (!a5 || a6 != 8) {
      return v6;
    }
    applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&value, *a5);
    uint64_t v47 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>((applesauce::CF::StringRef *)&v123, *v47);
    float v48 = (const __CFString **)applesauce::CF::StringRef::operator->(&v123);
    applesauce::CF::convert_to<std::string,0>(*v48, (uint64_t)&__s1);
    int16x8_t v49 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    uint64_t v50 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*v49);
    double v51 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&value);
    applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>(*v51, "data", (applesauce::CF::DataRef *)&v122);
    uint64_t v52 = *((void *)this + 92);
    if (v52)
    {
      uint64_t v53 = (const void **)applesauce::CF::DataRef::operator->(&v122);
      applesauce::CF::convert_to<std::vector<unsigned char>,0>(*v53, &__p);
      for (uint64_t i = *(void **)(v52 + 24); i; uint64_t i = (void *)*i)
      {
        uint64_t v55 = i[2];
        int16x8_t v56 = (char *)(v55 + 32);
        if (*(char *)(v55 + 55) < 0) {
          int16x8_t v56 = *(char **)v56;
        }
        std::string::basic_string[abi:ne180100]<0>(buf, v56);
        uint64_t v57 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v59 = buf[23];
        int v60 = buf[23];
        if (buf[23] < 0) {
          uint64_t v59 = *(void *)&buf[8];
        }
        if (size != v59) {
          goto LABEL_122;
        }
        if (buf[23] >= 0) {
          DSPSplitComplex v61 = buf;
        }
        else {
          DSPSplitComplex v61 = *(unsigned __int8 **)buf;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, v61, __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_122;
          }
        }
        else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          uint32_t v62 = &__s1;
          while (v62->__r_.__value_.__s.__data_[0] == *v61)
          {
            uint32_t v62 = (std::string *)((char *)v62 + 1);
            ++v61;
            if (!--v57) {
              goto LABEL_124;
            }
          }
LABEL_122:
          if (v60 < 0) {
            operator delete(*(void **)buf);
          }
          continue;
        }
LABEL_124:
        uint64_t v63 = (*(uint64_t (**)(void, unsigned __int8 *))(*(void *)i[2] + 216))(i[2], v61);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v63) {
          (*(void (**)(void, uint64_t, void, void, void))(*(void *)i[2] + 312))(i[2], v50, 0, 0, (v121 - __p));
        }
      }
      if (__p)
      {
        unsigned int v121 = __p;
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v97 = (__CFArray *)*((void *)this + 132);
      if (!v97)
      {
        CFMutableArrayRef v98 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        uint64_t v99 = *((void *)this + 132);
        *((void *)this + 132) = v98;
        *(void *)AudioTimeStamp buf = v99;
        applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef((const void **)buf);
        applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *((CFTypeRef *)this + 132));
        uint64_t v100 = *((void *)this + 104);
        *((void *)this + 104) = *(void *)buf;
        *(void *)AudioTimeStamp buf = v100;
        applesauce::CF::ArrayRef::~ArrayRef((const void **)buf);
        uint64_t v97 = (__CFArray *)*((void *)this + 132);
      }
      CFArrayAppendValue(v97, value);
    }
    uint64_t v6 = 0;
    applesauce::CF::DataRef::~DataRef(&v122);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    applesauce::CF::StringRef::~StringRef(&v123);
    p_p = &value;
    goto LABEL_286;
  }
  if ((int)a2 > 1886548591)
  {
    if ((int)a2 <= 1886548852)
    {
      if (a2 == 1886548592)
      {
        uint64_t v6 = 4294956445;
        if (!a5 || a6 != 8) {
          return v6;
        }
        applesauce::CF::StringRef::from_get_noexcept(*a5, buf);
        uint64_t v83 = *((void *)this + 85);
        *((void *)this + 85) = *(void *)buf;
        *(void *)AudioTimeStamp buf = v83;
        int16x8_t v84 = (std::string *)buf;
        goto LABEL_279;
      }
      if (a2 != 1886548848) {
        goto LABEL_188;
      }
      uint64_t v6 = 4294956445;
      if (!a5 || a6 != 8) {
        return v6;
      }
      uint64_t v23 = (std::mutex *)((char *)this + 928);
      std::mutex::lock((std::mutex *)((char *)this + 928));
      if (*((void *)this + 127))
      {
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        AUDSPGraph::SubstitutePropertyStripPath((AUDSPGraph *)&__s1, (const applesauce::CF::DictionaryRef **)this, (const __CFDictionary **)buf);
        std::string::size_type v38 = *((void *)this + 84);
        *((void *)this + 84) = __s1.__r_.__value_.__r.__words[0];
        __s1.__r_.__value_.__r.__words[0] = v38;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&__s1.__r_.__value_.__l.__data_);
      }
      else
      {
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
        uint64_t v91 = *((void *)this + 84);
        *((void *)this + 84) = *(void *)buf;
        *(void *)AudioTimeStamp buf = v91;
      }
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
      if (_os_feature_enabled_impl()) {
        applesauce::CF::DictionaryRef::operator=((const void **)this + 135, *((CFTypeRef *)this + 84));
      }
      float v92 = (DSPGraph::Graph *)*((void *)this + 92);
      if (v92) {
        DSPGraph::Graph::setPropertyStrip(v92, *((const __CFDictionary **)this + 84), *((const __CFString **)this + 85));
      }
      goto LABEL_206;
    }
    if (a2 != 1886548853)
    {
      if (a2 == 1919247202)
      {
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        if (a6 == 4)
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 528) = *(_DWORD *)a5 != 0;
          return v6;
        }
      }
      else
      {
        if (a2 != 1920169063) {
          goto LABEL_188;
        }
        if (a6 == 4)
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 897) = *(_DWORD *)a5 != 0;
          return v6;
        }
      }
      return 4294956445;
    }
    uint64_t v6 = 4294956445;
    if (!a5 || a6 != 8) {
      return v6;
    }
    applesauce::CF::convert_to<std::map<std::string,std::string>,0>((uint64_t)buf, *a5);
    if (!*(void *)&buf[16])
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 126));
      *((void *)this + 125) = (char *)this + 1008;
      *((void *)this + 127) = 0;
      *((void *)this + 126) = 0;
    }
    uint64_t v75 = *(unsigned char **)buf;
    if (*(unsigned char **)buf != &buf[8])
    {
      do
      {
        {
        }
        memset(&__s1, 0, sizeof(__s1));
        int v76 = (char)v75[55];
        if (v76 >= 0) {
          uint64_t v77 = v75 + 32;
        }
        else {
          uint64_t v77 = (char *)*((void *)v75 + 4);
        }
        if (v76 >= 0) {
          uint64_t v78 = v75[55];
        }
        else {
          uint64_t v78 = *((void *)v75 + 5);
        }
        __p = &__s1;
        uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 125, (void **)&__s1.__r_.__value_.__l.__data_, (_OWORD **)&__p);
        std::string::operator=((std::string *)((char *)v79 + 56), (const std::string *)(v75 + 56));
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        uint32_t v80 = (void *)*((void *)v75 + 1);
        if (v80)
        {
          do
          {
            uint64_t v81 = v80;
            uint32_t v80 = (void *)*v80;
          }
          while (v80);
        }
        else
        {
          do
          {
            uint64_t v81 = (unsigned char *)*((void *)v75 + 2);
            BOOL v82 = *(void *)v81 == (void)v75;
            uint64_t v75 = v81;
          }
          while (!v82);
        }
        uint64_t v75 = v81;
      }
      while (v81 != &buf[8]);
    }
    if (*((void *)this + 84))
    {
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v86 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_INFO)) {
          goto LABEL_229;
        }
        float v87 = (void *)((char *)this + 632);
        if (*((char *)this + 655) < 0) {
          float v87 = (void *)*v87;
        }
        LODWORD(__s1.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
        WORD2(__s1.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)this;
        int16x8_t v88 = "[%s|%p] A propstrip has already been set on the graph. Propstrip path substitution will not apply until th"
              "e next kAUDSPGraphProperty_PropertyStrip property set.";
        uint64_t v89 = v86;
        uint32_t v90 = 22;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v107 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_INFO)) {
          goto LABEL_229;
        }
        LODWORD(__s1.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
        int16x8_t v88 = "[%p] A propstrip has already been set on the graph. Propstrip path substitution will not apply until the n"
              "ext kAUDSPGraphProperty_PropertyStrip property set.";
        uint64_t v89 = v107;
        uint32_t v90 = 12;
      }
      _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_INFO, v88, (uint8_t *)&__s1, v90);
    }
LABEL_229:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&buf[8]);
    return 0;
  }
  if ((int)a2 <= 1836347500)
  {
    if (a2 == 1735554168)
    {
      uint64_t v6 = 4294956445;
      if (!a5 || a6 != 8) {
        return v6;
      }
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&__s1, *a5);
      float v39 = (char *)this + 600;
      if (*((unsigned char *)this + 624))
      {
        double v40 = (const __CFString **)applesauce::CF::StringRef::operator->(&__s1);
        applesauce::CF::convert_to<std::string,0>(*v40, (uint64_t)buf);
        int v41 = buf[23];
        uint64_t v42 = *(void **)buf;
        if (buf[23] >= 0) {
          uint64_t v43 = buf;
        }
        else {
          uint64_t v43 = *(unsigned char **)buf;
        }
        if (buf[23] >= 0) {
          size_t v44 = buf[23];
        }
        else {
          size_t v44 = *(void *)&buf[8];
        }
        if (!*((unsigned char *)this + 624)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (*((char *)this + 623) < 0)
        {
          uint64_t v46 = (char *)*((void *)this + 75);
          uint64_t v45 = *((void *)this + 76);
        }
        else
        {
          uint64_t v45 = *((unsigned __int8 *)this + 623);
          uint64_t v46 = (char *)this + 600;
        }
        BOOL v113 = v44 == v45 && memcmp(v43, v46, v44) == 0;
        if (v41 < 0) {
          operator delete(v42);
        }
        if (!v113)
        {
          if (_os_feature_enabled_impl() && *((void *)this + 92)) {
            AUDSPGraph::ResetCachedProps(this);
          }
          uint32_t v114 = (std::__shared_weak_count *)*((void *)this + 93);
          *((_OWORD *)this + 46) = 0u;
          if (v114) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v114);
          }
        }
      }
      goto LABEL_275;
    }
    if (a2 == 1835758191)
    {
      uint64_t v6 = 4294956445;
      if (!a5 || a6 != 8 || !_os_feature_enabled_impl()) {
        return v6;
      }
      applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)buf, *a5);
      uint64_t v26 = *((void *)this + 124);
      *((void *)this + 124) = *(void *)buf;
      *(void *)AudioTimeStamp buf = v26;
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)buf);
      *((unsigned char *)this + 898) = 1;
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        float v27 = getAUDSPGraphLog(void)::gLog;
        uint64_t v6 = 0;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          return v6;
        }
        unsigned int v28 = (void *)((char *)this + 632);
        if (*((char *)this + 655) < 0) {
          unsigned int v28 = (void *)*v28;
        }
        applesauce::CF::DictionaryRef::to_description((applesauce::CF::DictionaryRef *)&__s1, *((const void **)this + 124));
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v29 = &__s1;
        }
        else {
          unsigned int v29 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = v28;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = this;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = v29;
        _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEFAULT, "[%s|%p] custom macros set: %s", buf, 0x20u);
        if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        uint64_t v30 = (void *)__s1.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        unint64_t v108 = getAUDSPGraphLog(void)::gLog;
        uint64_t v6 = 0;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          return v6;
        }
        applesauce::CF::DictionaryRef::to_description((applesauce::CF::DictionaryRef *)buf, *((const void **)this + 124));
        if (buf[23] >= 0) {
          int v109 = buf;
        }
        else {
          int v109 = *(unsigned char **)buf;
        }
        LODWORD(__s1.__r_.__value_.__l.__data_) = 134218242;
        *(std::string::size_type *)((char *)__s1.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
        WORD2(__s1.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v109;
        _os_log_impl(&dword_1BB0CE000, v108, OS_LOG_TYPE_DEFAULT, "[%p] custom macros set: %s", (uint8_t *)&__s1, 0x16u);
        if ((buf[23] & 0x80000000) == 0) {
          return 0;
        }
        uint64_t v30 = *(void **)buf;
      }
      operator delete(v30);
      return 0;
    }
    goto LABEL_188;
  }
  if (a2 != 1836347501)
  {
    if (a2 != 1852797026) {
      goto LABEL_188;
    }
    if (a6 == 4)
    {
      int v36 = *(_DWORD *)a5;
      *((unsigned char *)this + 900) = *(_DWORD *)a5 != 0;
      if (*((void *)this + 92) && *((unsigned char *)this + 17))
      {
        uint64_t v37 = *((void *)this + 70);
        if (!v36 && !v37) {
          std::make_unique[abi:ne180100]<AUProcessingBlock_DSPGraph,std::shared_ptr<DSPGraph::Graph> &>();
        }
        uint64_t v6 = 0;
        if (!v36 || !v37) {
          return v6;
        }
        *((void *)this + 70) = 0;
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      return 0;
    }
    return 4294956445;
  }
  uint64_t v6 = 4294956445;
  if (!a5 || a6 != 8) {
    return v6;
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  CFDictionaryRef v64 = (const __CFDictionary *)*a5;
  int v65 = (AUDSPGraph *)((char *)this + 904);

  return AU::DSPGraph::MetaParameterManager::loadMetaParametersFromPlist(v65, v64);
}

void AUDSPGraph::ResetCachedProps(AUDSPGraph *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!_os_feature_enabled_impl()) {
    return;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v2 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    float v3 = (AUDSPGraph *)((char *)this + 632);
    if (*((char *)this + 655) < 0) {
      float v3 = *(AUDSPGraph **)v3;
    }
    int v13 = 136315394;
    uint64_t v14 = v3;
    __int16 v15 = 2048;
    uint64_t v16 = this;
    uint64_t v4 = "[%s|%p] Reset cached props";
    uint64_t v5 = v2;
    uint32_t v6 = 22;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v7 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    int v13 = 134217984;
    uint64_t v14 = this;
    uint64_t v4 = "[%p] Reset cached props";
    uint64_t v5 = v7;
    uint32_t v6 = 12;
  }
  _os_log_debug_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v13, v6);
LABEL_12:
  *((void *)this + 129) = *((void *)this + 128);
  uint64_t v8 = (const void *)*((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v8) {
    CFRelease(v8);
  }
  unint64_t v9 = (const void *)*((void *)this + 132);
  *((void *)this + 132) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 133);
  *((void *)this + 133) = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = (const void *)*((void *)this + 134);
  *((void *)this + 134) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)*((void *)this + 135);
  *((void *)this + 135) = 0;
  if (v12) {
    CFRelease(v12);
  }
}

void sub_1BB51F2C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

const void **applesauce::CF::DictionaryRef::operator=(const void **a1, CFTypeRef cf)
{
  float v3 = *a1;
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void AUDSPGraph::SubstitutePropertyStripPath(AUDSPGraph *this, const applesauce::CF::DictionaryRef **a2, const __CFDictionary **a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *a3;
  if (!*a3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  __p.__loc_.__locale_ = (std::locale::__imp *)@"Boxes";
  CFDictionaryRef v4 = applesauce::CF::details::at_key<__CFString const*>(v3, (const void **)&__p.__loc_.__locale_);
  if (!v4)
  {
    float v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not find item");
  }
  applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>((uint64_t *)&v37, v4);
  long long v5 = v37;
  uint64_t v30 = v38;
  if (v37 != v38)
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Properties");
      uint32_t v6 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>((uint64_t)v5, (void **)&__p.__loc_.__locale_);
      if (SHIBYTE(__p.__col_) < 0) {
        operator delete(__p.__loc_.__locale_);
      }
      if (v5 + 1 == (void ***)v6) {
        goto LABEL_37;
      }
      uint64_t v7 = v6[7];
      if (!v7)
      {
        int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v25, "Could not construct");
      }
      unsigned int v29 = (const std::ctype<char> *)(v5 + 1);
      uint64_t v31 = (uint64_t)v5;
      applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>((uint64_t *)&v35, v7);
      unint64_t v9 = v35;
      uint64_t v8 = v36;
      CFMutableArrayRef v33 = v36;
      while (v9 != v8)
      {
        uint64_t v10 = 0;
        while (1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, off_1E623E5F0[v10]);
          unint64_t v11 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>((uint64_t)v9, (void **)&__p.__loc_.__locale_);
          if (SHIBYTE(__p.__col_) < 0) {
            operator delete(__p.__loc_.__locale_);
          }
          if (v9 + 1 != (void ***)v11) {
            break;
          }
          if (++v10 == 3) {
            goto LABEL_22;
          }
        }
        CFStringRef v12 = (const __CFString *)v11[7];
        if (!v12)
        {
          uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v24, "Could not construct");
        }
        applesauce::CF::convert_as<std::string,0>((uint64_t)&v44, v12);
        if (v45)
        {
          if (a2[125] != (const applesauce::CF::DictionaryRef *)(a2 + 126))
          {
            std::regex_traits<char>::regex_traits(&__p);
            uint64_t v43 = 0;
            long long v41 = 0u;
            long long v42 = 0u;
            std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
        }
LABEL_22:
        v9 += 3;
        uint64_t v8 = v33;
      }
      CFArrayRef v13 = applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(&v35);
      CFArrayRef v14 = v13;
      long long v5 = (void ***)v31;
      if (v13) {
        CFRetain(v13);
      }
      CFArrayRef v39 = v14;
      std::string::basic_string[abi:ne180100]<0>(&v44, "Properties");
      __int16 v15 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v31, __n, (void **)&v44.__r_.__value_.__l.__data_);
      uint64_t v16 = *v15;
      if (!*v15)
      {
        uint64_t v17 = v15;
        uint64_t v16 = operator new(0x40uLL);
        __p.__ct_ = v29;
        v16[2] = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        std::string::size_type v18 = v44.__r_.__value_.__r.__words[2];
        memset(&v44, 0, sizeof(v44));
        *((void *)v16 + 6) = v18;
        *((void *)v16 + 7) = 0;
        LOBYTE(__p.__col_) = 1;
        size_t v19 = __n[0];
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v19;
        char *v17 = v16;
        uint64_t v20 = **(void **)v31;
        std::string v21 = (uint64_t *)v16;
        if (v20)
        {
          *(void *)uint64_t v31 = v20;
          std::string v21 = (uint64_t *)*v17;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v31 + 8), v21);
        ++*(void *)(v31 + 16);
        __p.__loc_.__locale_ = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
      }
      CFArrayRef v22 = (const __CFArray *)*((void *)v16 + 7);
      *((void *)v16 + 7) = v14;
      CFArrayRef v39 = v22;
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(v44.__r_.__value_.__l.__data_);
      if (v22) {
        goto LABEL_33;
      }
LABEL_34:
      if (v14) {
        CFRelease(v14);
      }
      __p.__loc_.__locale_ = (std::locale::__imp *)&v35;
      std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_37:
      v5 += 3;
      if (v5 == v30) {
        goto LABEL_38;
      }
    }
    if (!v22) {
      goto LABEL_34;
    }
LABEL_33:
    CFRelease(v22);
    goto LABEL_34;
  }
LABEL_38:
  uint64_t v23 = (void ***)applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(&v37);
  uint64_t v35 = v23;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v44, "Boxes");
  if (v23) {
    CFRetain(v23);
  }
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  __p.__loc_.__locale_ = (std::locale::__imp *)&v44;
  __p.__ct_ = (const std::ctype<char> *)1;
  *(void *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
  if (v44.__r_.__value_.__l.__size_) {
    CFRelease((CFTypeRef)v44.__r_.__value_.__l.__size_);
  }
  if (v44.__r_.__value_.__r.__words[0]) {
    CFRelease(v44.__r_.__value_.__l.__data_);
  }
  if (v23) {
    CFRelease(v23);
  }
  __p.__loc_.__locale_ = (std::locale::__imp *)&v37;
  std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BB51FB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9, applesauce::CF::DictionaryRef *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,long long buf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v30);
  __cxa_begin_catch(exception_object);
  if (*(unsigned char *)(a14 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v32 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CFMutableArrayRef v33 = (void *)(a14 + 632);
      if (*(char *)(a14 + 655) < 0) {
        CFMutableArrayRef v33 = (void *)*v33;
      }
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = v33;
      WORD6(buf) = 2048;
      *(void *)((char *)&buf + 14) = a14;
      uint64_t v34 = "[%s|%p] Skipping propstrip path substitution for ill-formed propstrip";
      uint64_t v35 = v32;
      uint32_t v36 = 22;
      goto LABEL_18;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v37 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a14;
      uint64_t v34 = "[%p] Skipping propstrip path substitution for ill-formed propstrip";
      uint64_t v35 = v37;
      uint32_t v36 = 12;
LABEL_18:
      _os_log_error_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&buf, v36);
    }
  }
  CFTypeRef v38 = *a9;
  if (*a9) {
    CFRetain(*a9);
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a10, v38);
  __cxa_end_catch();
  JUMPOUT(0x1BB51F988);
}

void sub_1BB51FE6C()
{
}

void sub_1BB51FE74()
{
}

void applesauce::CF::convert_to<std::map<std::string,std::string>,0>(uint64_t a1, const void *a2)
{
  if (!a2 || (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  std::vector<void const*>::vector(keys, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys[0], (const void **)values[0]);
  if (Count)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>((const __CFString *)keys[0][i], (uint64_t)v14);
      applesauce::CF::convert_to<std::string,0>((const __CFString *)values[0][i], (uint64_t)v12);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v14;
      uint64_t v17 = v15;
      v14[1] = 0;
      uint64_t v15 = 0;
      long long __p = *(_OWORD *)v12;
      uint64_t v19 = v13;
      v12[0] = 0;
      v12[1] = 0;
      uint64_t v13 = 0;
      v14[0] = 0;
      uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v24, v16);
      if (!*v7)
      {
        uint64_t v8 = v7;
        unint64_t v9 = (char *)operator new(0x50uLL);
        v22[0] = v9;
        v22[1] = a1 + 8;
        char v23 = 0;
        uint64_t v10 = (std::string *)(v9 + 32);
        if (SHIBYTE(v17) < 0)
        {
          std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          *((void *)v9 + 6) = v17;
        }
        *(_OWORD *)(v9 + 56) = __p;
        *((void *)v9 + 9) = v19;
        uint64_t v19 = 0;
        long long __p = 0uLL;
        char v23 = 1;
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, v24, v8, (uint64_t *)v9);
        v22[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v17) < 0) {
        operator delete(v16[0]);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
}

void sub_1BB5200C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  uint32_t v6 = a2;
  v46.__begin_.__i_ = a2;
  v46.__end_.__i_ = a3;
  v46.__pregex_ = a4;
  v46.__flags_ = match_default;
  memset(&v46.__match_.__prefix_, 0, 17);
  memset(&v46.__match_.__suffix_, 0, 17);
  v46.__match_.__ready_ = 0;
  v46.__match_.__position_start_.__i_ = 0;
  memset(&v46.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, a2, a3, (std::match_results<const char *> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v6, (std::sub_match<std::__wrap_iter<const char *>> *)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_)
  {
    __p.__end_.__i_ = __p.__begin_.__i_;
    operator delete((void *)__p.__begin_.__i_);
  }
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v46, &__p))
  {
    std::__wrap_iter<const char *>::iterator_type v8 = 0;
    unint64_t v9 = 0;
    size_t v44 = strlen(a5);
    uint64_t v10 = (unsigned __int8 *)&a5[v44];
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v46, &__p))
      {
        while (v9 != v8)
          std::string::push_back(a1, *v9++);
        goto LABEL_64;
      }
      uint64_t i = (std::string::value_type *)v46.__match_.__prefix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v12 = v46.__match_.__prefix_.second.__i_;
      while (i != v12)
        std::string::push_back(a1, *i++);
      if (v44)
      {
        uint64_t v13 = a5;
        do
        {
          int v14 = *(unsigned __int8 *)v13;
          if (v14 == 36)
          {
            uint64_t v15 = (unsigned __int8 *)(v13 + 1);
            if (v13 + 1 == (const char *)v10) {
              goto LABEL_42;
            }
            int v16 = (char)*v15;
            int v14 = *v15;
            if (v16 > 38)
            {
              if (v16 == 39)
              {
                std::string v21 = (std::string::value_type *)v46.__match_.__suffix_.first.__i_;
                std::__wrap_iter<const char *>::iterator_type v22 = v46.__match_.__suffix_.second.__i_;
                while (v21 != v22)
                  std::string::push_back(a1, *v21++);
                goto LABEL_44;
              }
              if (v16 == 96)
              {
                uint64_t v19 = (std::string::value_type *)v46.__match_.__prefix_.first.__i_;
                std::__wrap_iter<const char *>::iterator_type v20 = v46.__match_.__prefix_.second.__i_;
                while (v19 != v20)
                  std::string::push_back(a1, *v19++);
                goto LABEL_44;
              }
LABEL_30:
              if ((v14 - 48) <= 9)
              {
                unint64_t v23 = *v15 - 48;
                if (v13 + 2 != (const char *)v10)
                {
                  uint64_t v24 = *((unsigned __int8 *)v13 + 2);
                  unsigned int v25 = v24 - 48;
                  uint64_t v26 = v24 + 10 * (int)v23 - 48;
                  if (v25 > 9)
                  {
                    uint64_t v15 = (unsigned __int8 *)(v13 + 1);
                  }
                  else
                  {
                    unint64_t v23 = v26;
                    uint64_t v15 = (unsigned __int8 *)(v13 + 2);
                  }
                }
                float v27 = &v46.__match_.__matches_.__begin_[(int)v23];
                BOOL v28 = 0xAAAAAAAAAAAAAAABLL
                    * (((char *)v46.__match_.__matches_.__end_ - (char *)v46.__match_.__matches_.__begin_) >> 3) > v23;
                p_unmatched = &v46.__match_.__unmatched_;
                if (v28) {
                  p_unmatched = v27;
                }
                uint64_t v30 = (std::string::value_type *)p_unmatched->first.__i_;
                p_second = &v27->second;
                if (!v28) {
                  p_second = &v46.__match_.__unmatched_.second;
                }
                uint64_t v32 = (std::string::value_type *)p_second->__i_;
                while (v30 != v32)
                  std::string::push_back(a1, *v30++);
                goto LABEL_44;
              }
LABEL_42:
              LOBYTE(v14) = 36;
              goto LABEL_43;
            }
            if (v16 != 36)
            {
              if (v16 == 38)
              {
                uint64_t v17 = (std::string::value_type *)v46.__match_.__matches_.__begin_->first.__i_;
                std::__wrap_iter<const char *>::iterator_type v18 = v46.__match_.__matches_.__begin_->second.__i_;
                while (v17 != v18)
                  std::string::push_back(a1, *v17++);
                goto LABEL_44;
              }
              goto LABEL_30;
            }
            ++v13;
          }
LABEL_43:
          std::string::push_back(a1, v14);
          uint64_t v15 = (unsigned __int8 *)v13;
LABEL_44:
          uint64_t v13 = (const char *)(v15 + 1);
        }
        while (v15 + 1 != v10);
      }
      unint64_t v9 = (std::string::value_type *)v46.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v8 = v46.__match_.__suffix_.second.__i_;
      std::regex_constants::match_flag_type flags = v46.__flags_;
      unsigned __int32 v34 = v46.__flags_ | 0x800;
      v46.__flags_ |= 0x800u;
      begiuint64_t n = v46.__match_.__matches_.__begin_;
      uint32_t v36 = &v46.__match_.__unmatched_;
      if (v46.__match_.__matches_.__end_ != v46.__match_.__matches_.__begin_) {
        uint32_t v36 = v46.__match_.__matches_.__begin_;
      }
      uint64_t v37 = &v46.__match_.__matches_.__begin_->second;
      if (v46.__match_.__matches_.__end_ == v46.__match_.__matches_.__begin_) {
        uint64_t v37 = &v46.__match_.__unmatched_.second;
      }
      CFTypeRef v38 = (char *)v37->__i_;
      if (v36->first.__i_ != v37->__i_) {
        goto LABEL_50;
      }
      long long v41 = (std::sub_match<std::__wrap_iter<const char *>> *)v46.__end_.__i_;
      if (v46.__end_.__i_ == v38)
      {
LABEL_59:
        if (begin)
        {
          v46.__match_.__matches_.__end_ = begin;
          operator delete(begin);
        }
        v46.__match_.__ready_ = 0;
        memset(&v46.__match_, 0, 41);
        memset(&v46.__match_.__prefix_, 0, 17);
        memset(&v46.__match_.__suffix_, 0, 17);
        v46.__match_.__position_start_.__i_ = 0;
      }
      else
      {
        memset(&v47.__prefix_, 0, 17);
        memset(&v47.__suffix_, 0, 17);
        v47.__ready_ = 0;
        v47.__position_start_ = 0;
        memset(&v47, 0, 41);
        char v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v46.__pregex_, v38, (char *)v46.__end_.__i_, &v47, flags | 0x860);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v38, v41, (uint64_t *)&v47, 1);
        if (v47.__matches_.__begin_)
        {
          v47.__matches_.__end_ = v47.__matches_.__begin_;
          operator delete(v47.__matches_.__begin_);
        }
        if ((v42 & 1) == 0)
        {
          ++v38;
          unsigned __int32 v34 = v46.__flags_;
LABEL_50:
          v46.__flags_ = v34 | 0x80;
          CFArrayRef v39 = (std::sub_match<std::__wrap_iter<const char *>> *)v46.__end_.__i_;
          memset(&v47.__prefix_, 0, 17);
          memset(&v47.__suffix_, 0, 17);
          v47.__ready_ = 0;
          v47.__position_start_ = 0;
          memset(&v47, 0, 41);
          char v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v46.__pregex_, v38, (char *)v46.__end_.__i_, &v47, v34 | 0x80);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&v46.__match_.__matches_, (uint64_t)v38, v39, (uint64_t *)&v47, (v34 & 0x800) != 0);
          if (v47.__matches_.__begin_)
          {
            v47.__matches_.__end_ = v47.__matches_.__begin_;
            operator delete(v47.__matches_.__begin_);
          }
          if ((v40 & 1) == 0)
          {
            begiuint64_t n = v46.__match_.__matches_.__begin_;
            goto LABEL_59;
          }
        }
      }
    }
  }
  while (v6 != a3)
    std::string::push_back(a1, *v6++);
LABEL_64:
  if (v46.__match_.__matches_.__begin_)
  {
    v46.__match_.__matches_.__end_ = v46.__match_.__matches_.__begin_;
    operator delete(v46.__match_.__matches_.__begin_);
  }
}

void sub_1BB52063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[3]>(a1, "ID");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<unsigned int,0>(v1);
}

void sub_1BB52071C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFTypeRef applesauce::CF::details::find_at_key<applesauce::CF::TypeRef,char const(&)[9]>(void *a1, const __CFDictionary *a2)
{
  CFDictionaryRef v3 = applesauce::CF::details::at_key<char const(&)[9]>(a2, "cfobject");
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFDictionaryRef v4 = v3;
  CFTypeRef result = CFRetain(v3);
  *a1 = v4;
  return result;
}

void sub_1BB5207A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::pretty_print(applesauce::CF::details *this, __CFString *cf)
{
  if (!cf)
  {
    long long v5 = "(null)";
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(this, v5);
    return;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    applesauce::CF::convert_to<std::string,0>(cf, (uint64_t)this);
    return;
  }
  if (v4 == CFArrayGetTypeID())
  {
    CFStringRef v6 = CFCopyDescription(cf);
    CFStringRef v8 = v6;
    applesauce::CF::details::CFString_get_value<true>(v6, (uint64_t)this);
    if (v6) {
      CFRelease(v6);
    }
    return;
  }
  if (v4 == CFDictionaryGetTypeID())
  {
    CFStringRef v7 = CFCopyDescription(cf);
    CFStringRef v8 = v7;
    applesauce::CF::details::CFString_get_value<true>(v7, (uint64_t)this);
    if (v7) {
      CFRelease(v7);
    }
    return;
  }
  if (v4 == CFBooleanGetTypeID())
  {
    if (applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)cf)) {
      long long v5 = "1";
    }
    else {
      long long v5 = "0";
    }
    goto LABEL_7;
  }
  if (v4 == CFNumberGetTypeID())
  {
    applesauce::CF::details::pretty_print((applesauce::CF::details *)cf, this);
  }
  else if (v4 == CFURLGetTypeID())
  {
    applesauce::CF::details::pretty_print(this, (CFURLRef)cf);
  }
  else
  {
    CFStringRef v8 = CFCopyDescription(cf);
    applesauce::CF::details::CFString_get_value<true>(v8, (uint64_t)this);
    applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef((const void **)&v8);
  }
}

void sub_1BB520990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void *applesauce::CF::DataRef::operator->(void *result)
{
  if (!*result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1BB520A0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>(applesauce::CF::StringRef *a1, const __CFDictionary *a2)
{
  CFDictionaryRef v3 = applesauce::CF::details::at_key<char const(&)[7]>(a2, "AUName");
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFTypeID v4 = v3;
  CFRetain(v3);

  return applesauce::CF::StringRef::StringRef(a1, v4);
}

void sub_1BB520AAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUDSPGraph::SetBoxPreset(AUDSPGraph *this, CFTypeRef cf)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!cf)
  {
    CFTypeRef v32 = 0;
    goto LABEL_61;
  }
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v32, cf);
  if (!v32)
  {
LABEL_61:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_63;
  }
  CFTypeID v4 = applesauce::CF::details::at_key<char const(&)[8]>((const __CFDictionary *)v32, "BoxName");
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
LABEL_63:
  }
  long long v5 = v4;
  CFRetain(v4);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v31, v5);
  if (!v32)
  {
    BOOL v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    goto LABEL_66;
  }
  CFStringRef v6 = applesauce::CF::details::at_key<char const(&)[7]>((const __CFDictionary *)v32, "Preset");
  if (!v6)
  {
    BOOL v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not find item");
LABEL_66:
  }
  CFStringRef v7 = v6;
  CFRetain(v6);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, v7);
  CFStringRef v8 = *(void **)(*((void *)this + 92) + 24);
  if (!v8) {
    goto LABEL_30;
  }
  char v9 = 0;
  do
  {
    while (1)
    {
      if (!v31)
      {
        uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v31, (uint64_t)__p);
      int v10 = SHIBYTE(v38);
      unint64_t v11 = *(void **)__p;
      if (v38 >= 0) {
        std::__wrap_iter<const char *>::iterator_type v12 = __p;
      }
      else {
        std::__wrap_iter<const char *>::iterator_type v12 = *(unsigned char **)__p;
      }
      if (v38 >= 0) {
        size_t v13 = HIBYTE(v38);
      }
      else {
        size_t v13 = *(void *)&__p[8];
      }
      int v14 = (char *)v8[2];
      uint64_t v15 = v14 + 32;
      if (v14[55] < 0) {
        uint64_t v15 = *(const char **)v15;
      }
      if (v13 != strlen(v15) || memcmp(v12, v15, v13))
      {
        if (v10 < 0) {
          operator delete(v11);
        }
        break;
      }
      uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v14 + 216))(v14);
      if (SHIBYTE(v38) < 0) {
        operator delete(*(void **)__p);
      }
      if (!v16) {
        break;
      }
      (*(void (**)(void, CFTypeRef))(*(void *)v8[2] + 352))(v8[2], cfa);
      uint64_t v17 = 0;
      CFStringRef v8 = (void *)*v8;
      char v9 = 1;
      if (!v8) {
        goto LABEL_46;
      }
    }
    CFStringRef v8 = (void *)*v8;
  }
  while (v8);
  if (v9)
  {
    uint64_t v17 = 0;
    goto LABEL_46;
  }
LABEL_30:
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    std::__wrap_iter<const char *>::iterator_type v18 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (void *)((char *)this + 632);
      if (*((char *)this + 655) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      if (!v31)
      {
        unsigned int v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v31, (uint64_t)buf);
      std::__wrap_iter<const char *>::iterator_type v20 = v36 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315650;
      *(void *)&__p[4] = v19;
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(void *)&__p[14] = this;
      __int16 v38 = 2080;
      CFArrayRef v39 = v20;
      _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "[%s|%p] failed to find %s box inside DSPGraph", __p, 0x20u);
      if (v36 < 0)
      {
        std::string v21 = *(void **)buf;
        goto LABEL_58;
      }
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    std::__wrap_iter<const char *>::iterator_type v22 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = (const __CFString **)applesauce::CF::StringRef::operator->(&v31);
      applesauce::CF::convert_to<std::string,0>(*v24, (uint64_t)__p);
      unsigned int v25 = v38 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)AudioTimeStamp buf = 134218242;
      *(void *)&uint8_t buf[4] = this;
      __int16 v34 = 2080;
      uint64_t v35 = v25;
      _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "[%p] failed to find %s box inside DSPGraph", buf, 0x16u);
      if (SHIBYTE(v38) < 0)
      {
        std::string v21 = *(void **)__p;
LABEL_58:
        operator delete(v21);
      }
    }
  }
  uint64_t v17 = 4294956445;
LABEL_46:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  return v17;
}

void std::make_unique[abi:ne180100]<AUProcessingBlock_DSPGraph,std::shared_ptr<DSPGraph::Graph> &>()
{
}

void sub_1BB5213E8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0xE1C40E9FAB1CALL);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::to_description(applesauce::CF::DictionaryRef *this, const void *a2)
{
  CFStringRef v3 = CFCopyDescription(a2);
  applesauce::CF::details::CFString_get_value<true>(v3, (uint64_t)this);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1BB521450(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *applesauce::CF::details::pretty_print(applesauce::CF::details *this, CFURLRef anURL)
{
  CFStringRef v3 = CFURLGetString(anURL);
  if (v3)
  {
    return applesauce::CF::convert_to<std::string,0>(v3, (uint64_t)this);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(this, "(null)");
  }
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  begiuint64_t n = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  char v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  CFStringRef v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    long long v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    long long v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    BOOL v10 = (void **)&v15;
  }
  else {
    BOOL v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1BB5216B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::map<std::string,applesauce::CF::TypeRef>>(void ****a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  int64x2_t v43 = 0uLL;
  v44[0] = 0;
  if (v1 != v2)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v1 - v2);
    if (v4 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    int16x8_t v49 = v44;
    long long v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v4);
    size_t v7 = (void *)v43.i64[1];
    CFStringRef v8 = (void *)v43.i64[0];
    if (v43.i64[1] == v43.i64[0])
    {
      int64x2_t v11 = vdupq_n_s64(v43.u64[1]);
      size_t v9 = v5;
    }
    else
    {
      size_t v9 = v5;
      do
      {
        uint64_t v10 = *--v7;
        *((void *)v9 - 1) = v10;
        v9 -= 8;
        void *v7 = 0;
      }
      while (v7 != v8);
      int64x2_t v11 = v43;
    }
    v43.i64[0] = (uint64_t)v9;
    v43.i64[1] = (uint64_t)v5;
    int64x2_t v47 = v11;
    unint64_t v12 = v44[0];
    v44[0] = &v5[8 * v6];
    unint64_t v48 = v12;
    std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = (int64x2_t *)v11.i64[0];
    std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v46);
    uint64_t v2 = *a1;
    uint64_t v1 = a1[1];
  }
  if (v2 != v1)
  {
    while (1)
    {
      long long v41 = 0;
      uint64_t v42 = 0;
      uint64_t v40 = &v41;
      unsigned int v13 = *v2;
      if (*v2 != (void **)(v2 + 1)) {
        break;
      }
LABEL_38:
      uint64_t v26 = v43.i64[1];
      if (v43.i64[1] >= v44[0])
      {
        uint64_t v28 = (v43.i64[1] - v43.i64[0]) >> 3;
        if ((unint64_t)(v28 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v29 = (v44[0] - v43.i64[0]) >> 2;
        if (v29 <= v28 + 1) {
          unint64_t v29 = v28 + 1;
        }
        if (v44[0] - v43.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        int16x8_t v49 = v44;
        if (v30) {
          unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v30);
        }
        else {
          uint64_t v31 = 0;
        }
        std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = (int64x2_t *)v30;
        v47.i64[0] = v30 + 8 * v28;
        v47.i64[1] = v47.i64[0];
        unint64_t v48 = v30 + 8 * v31;
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v47.i64[0], &v40);
        uint64_t v32 = v47.i64[0];
        uint64_t v27 = v47.i64[1] + 8;
        v47.i64[1] += 8;
        CFMutableArrayRef v33 = (void *)v43.i64[1];
        __int16 v34 = (void *)v43.i64[0];
        if (v43.i64[1] == v43.i64[0])
        {
          int64x2_t v36 = vdupq_n_s64(v43.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v35 = *--v33;
            *(void *)(v32 - 8) = v35;
            v32 -= 8;
            *CFMutableArrayRef v33 = 0;
          }
          while (v33 != v34);
          int64x2_t v36 = v43;
          uint64_t v27 = v47.i64[1];
        }
        v43.i64[0] = v32;
        v43.i64[1] = v27;
        int64x2_t v47 = v36;
        unint64_t v37 = v44[0];
        v44[0] = v48;
        unint64_t v48 = v37;
        std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = (int64x2_t *)v36.i64[0];
        std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v46);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v43.i64[1], &v40);
        uint64_t v27 = v26 + 8;
      }
      v43.i64[1] = v27;
      std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v41);
      v2 += 3;
      if (v2 == v1) {
        goto LABEL_55;
      }
    }
    while (1)
    {
      int v14 = v41;
      if (v40 == &v41)
      {
        size_t v16 = &v41;
        if (!v41) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v15 = &v41;
        if (v41)
        {
          do
          {
            size_t v16 = (uint64_t **)v14;
            int v14 = (uint64_t *)v14[1];
          }
          while (v14);
        }
        else
        {
          do
          {
            size_t v16 = (uint64_t **)v15[2];
            BOOL v17 = *v16 == (uint64_t *)v15;
            uint64_t v15 = v16;
          }
          while (v17);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v13 + 4) & 0x80) == 0)
        {
          std::__wrap_iter<const char *>::iterator_type v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)&v40, &v45, v13 + 4);
          goto LABEL_20;
        }
        if (!v41)
        {
LABEL_23:
          char v45 = &v41;
          std::__wrap_iter<const char *>::iterator_type v18 = &v41;
LABEL_24:
          size_t v19 = (char *)operator new(0x40uLL);
          std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = (int64x2_t *)v19;
          v47.i64[0] = (uint64_t)&v41;
          v47.i8[8] = 0;
          uint64_t v20 = (std::string *)(v19 + 32);
          if (*((char *)v13 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v13[4], (std::string::size_type)v13[5]);
          }
          else
          {
            long long v21 = *((_OWORD *)v13 + 2);
            *((void *)v19 + 6) = v13[6];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          std::__wrap_iter<const char *>::iterator_type v22 = v13[7];
          if (v22) {
            CFRetain(v13[7]);
          }
          *((void *)v19 + 7) = v22;
          v47.i8[8] = 1;
          unint64_t v23 = v45;
          *(void *)size_t v19 = 0;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = v23;
          *std::__wrap_iter<const char *>::iterator_type v18 = (uint64_t *)v19;
          if (*v40)
          {
            uint64_t v40 = (uint64_t **)*v40;
            size_t v19 = (char *)*v18;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, (uint64_t *)v19);
          ++v42;
          std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46);
          goto LABEL_32;
        }
      }
      char v45 = v16;
      std::__wrap_iter<const char *>::iterator_type v18 = v16 + 1;
LABEL_20:
      if (!*v18) {
        goto LABEL_24;
      }
LABEL_32:
      uint64_t v24 = (void **)v13[1];
      if (v24)
      {
        do
        {
          unsigned int v25 = (void ***)v24;
          uint64_t v24 = (void **)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unsigned int v25 = (void ***)v13[2];
          BOOL v17 = *v25 == v13;
          unsigned int v13 = (void **)v25;
        }
        while (!v17);
      }
      unsigned int v13 = (void **)v25;
      if (v25 == v2 + 1) {
        goto LABEL_38;
      }
    }
  }
LABEL_55:
  CFArrayRef v38 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v43);
  std::regex_iterator<std::__wrap_iter<const char *>, char> v46 = &v43;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  return v38;
}

void sub_1BB521A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void **std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  unsigned int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      long long v5 = (void **)v3;
    }
    unsigned int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void applesauce::CF::convert_to<std::vector<std::map<std::string,applesauce::CF::TypeRef>>,0>(uint64_t *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  int v6 = Count;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = a1 + 2;
    __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)Count);
    __p[1] = __p[0];
    uint64_t v42 = __p[0];
    CFTypeRef cf = (char *)__p[0] + 24 * v7;
    std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(a1, __p);
    std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer((uint64_t)__p);
  }
  if (v6 >= 1)
  {
    CFIndex v8 = 0;
    uint64_t v9 = v6;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
      if (!ValueAtIndex || (CFTypeID v11 = CFDictionaryGetTypeID(), v11 != CFGetTypeID(ValueAtIndex)))
      {
        int64x2_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Could not convert");
      }
      CFIndex v12 = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
      CFArrayRef v39 = 0;
      uint64_t v40 = 0;
      CFArrayRef v38 = &v39;
      std::vector<void const*>::vector(keys, v12);
      std::vector<void const*>::vector(values, v12);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)ValueAtIndex, (const void **)keys[0], (const void **)values[0]);
      if (v12)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          applesauce::CF::convert_to<std::string,0>((const __CFString *)keys[0][i], (uint64_t)v46);
          int v14 = values[0][i];
          if (v14) {
            CFRetain(values[0][i]);
          }
          *(_OWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = *(_OWORD *)v46;
          uint64_t v15 = v47;
          v46[1] = 0;
          int64x2_t v47 = 0;
          uint64_t v45 = 0;
          v46[0] = 0;
          uint64_t v42 = v15;
          CFTypeRef cf = v14;
          size_t v16 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)&v38, &v52, __p);
          if (!*v16)
          {
            BOOL v17 = v16;
            std::__wrap_iter<const char *>::iterator_type v18 = (uint64_t *)operator new(0x40uLL);
            v50[0] = v18;
            v50[1] = &v39;
            char v51 = 0;
            size_t v19 = (std::string *)(v18 + 4);
            if (SHIBYTE(v42) < 0)
            {
              std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v18[6] = (uint64_t)v42;
            }
            v18[7] = (uint64_t)cf;
            CFTypeRef cf = 0;
            char v51 = 1;
            uint64_t v20 = v52;
            *std::__wrap_iter<const char *>::iterator_type v18 = 0;
            v18[1] = 0;
            v18[2] = v20;
            std::string::value_type *v17 = v18;
            if (*v38)
            {
              CFArrayRef v38 = (uint64_t **)*v38;
              std::__wrap_iter<const char *>::iterator_type v18 = *v17;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v39, v18);
            uint64_t v40 = (uint64_t **)((char *)v40 + 1);
            v50[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(v42) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[0]);
          }
        }
      }
      if (values[0])
      {
        values[1] = values[0];
        operator delete(values[0]);
      }
      if (keys[0])
      {
        keys[1] = keys[0];
        operator delete(keys[0]);
      }
      long long v21 = (uint64_t ***)a1[1];
      unint64_t v22 = a1[2];
      if ((unint64_t)v21 >= v22)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - *a1) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a1) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v27;
        }
        size_t v44 = a1 + 2;
        if (v29) {
          unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v32 = (uint64_t ***)(v29 + 24 * v26);
        __p[0] = (void *)v29;
        __p[1] = v32;
        CFTypeRef cf = (CFTypeRef)(v29 + 24 * v30);
        *uint64_t v32 = v38;
        CFMutableArrayRef v33 = v39;
        v32[1] = (uint64_t **)v39;
        __int16 v34 = (uint64_t **)(v32 + 1);
        uint64_t v35 = v40;
        v32[2] = v40;
        if (v35)
        {
          v33[2] = (uint64_t)v34;
          CFArrayRef v38 = &v39;
          CFArrayRef v39 = 0;
          uint64_t v40 = 0;
        }
        else
        {
          *uint64_t v32 = v34;
        }
        uint64_t v42 = v32 + 3;
        std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(a1, __p);
        uint64_t v31 = (void *)a1[1];
        std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *long long v21 = v38;
        unint64_t v23 = v39;
        v21[1] = (uint64_t **)v39;
        uint64_t v24 = (uint64_t **)(v21 + 1);
        unsigned int v25 = v40;
        void v21[2] = v40;
        if (v25)
        {
          v23[2] = (uint64_t)v24;
          CFArrayRef v38 = &v39;
          CFArrayRef v39 = 0;
          uint64_t v40 = 0;
        }
        else
        {
          *long long v21 = v24;
        }
        uint64_t v31 = v21 + 3;
      }
      a1[1] = (uint64_t)v31;
      std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v39);
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_1BB521F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*((void **)v4 - 2));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1BB5225E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    CFIndex v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    CFTypeID v11 = v8 + 1;
    do
    {
      CFIndex v8 = v11;
      CFTypeID v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v10 == v8) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 == (char *)a3) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      int v6 = v3;
      unsigned int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  CFIndex v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    CFIndex v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    int v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!this->__open_count_) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_32:
      int v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      int v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, v10, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      int v14 = (unsigned __int8 *)&a2[v16];
    }
    if (v14 != (unsigned __int8 *)a2)
    {
LABEL_25:
      if (v14 == (unsigned __int8 *)a2 && v14 != (unsigned __int8 *)a3)
      {
        int v17 = *a2;
        if (v17 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v17 != 40)
        {
          if (v17 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v18 = this->__marked_count_;
        ++this->__open_count_;
        size_t v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
        if (v19 == a3 || (uint64_t v20 = v19, *v19 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v18);
        --this->__open_count_;
        int v14 = (unsigned __int8 *)(v20 + 1);
      }
      if (v14 != (unsigned __int8 *)a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v21 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v21);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              size_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            size_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unsigned int v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_140;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_140;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_140;
    }
    int v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        int v11 = a3;
        goto LABEL_118;
      }
      int v10 = *(unsigned __int8 *)v5;
      int v11 = (char *)v5;
      if (v10 != 93) {
        break;
      }
LABEL_118:
      uint64_t v5 = (uint64_t)v11;
LABEL_119:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_140:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    int v12 = 0;
    v43[0] = 0;
    v43[1] = 0;
    uint64_t v44 = 0;
    char v13 = 0;
    int v11 = (char *)v5;
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      int v14 = *(unsigned __int8 *)(v5 + 1);
      switch(v14)
      {
        case '.':
          int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)v43);
          char v13 = (void *)HIBYTE(v44);
          int v12 = v43[1];
          break;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_139;
          }
          for (unint64_t i = 0; ; ++i)
          {
            uint64_t v16 = (char *)(v5 + i + 2);
            if (*v16 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
              break;
            }
            if (&v8[-v5] == (char *)i) {
              goto LABEL_139;
            }
          }
          if (v16 == a3) {
LABEL_139:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v21 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          BOOL v22 = (char *)HIBYTE(v48);
          if (v48 >= 0) {
            unint64_t v23 = __p;
          }
          else {
            unint64_t v23 = (void **)__p[0];
          }
          if (v48 < 0) {
            BOOL v22 = (char *)__p[1];
          }
          (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v23, &v22[(void)v23]);
          if (v48 >= 0) {
            uint64_t v24 = __p;
          }
          else {
            uint64_t v24 = (void **)__p[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v24, v21 & 1);
          if (SHIBYTE(v48) < 0) {
            operator delete(__p[0]);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v26 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_114;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_139;
          }
          for (uint64_t j = 0; ; ++j)
          {
            uint64_t v16 = &j[v5 + 2];
            if (*v16 == 61 && j[v5 + 3] == 93) {
              break;
            }
            if (&v8[-v5] == j) {
              goto LABEL_139;
            }
          }
          if (v16 == a3) {
            goto LABEL_139;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(v48) < 0)
          {
            int v27 = (char *)__p[1];
            if (!__p[1]) {
LABEL_141:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            unint64_t v28 = (char *)__p[0];
          }
          else
          {
            int v27 = (char *)HIBYTE(v48);
            if (!HIBYTE(v48)) {
              goto LABEL_141;
            }
            unint64_t v28 = (char *)__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v28, &v27[(void)v28], (uint64_t)v45);
          uint64_t v30 = (void *)HIBYTE(v46);
          if (v46 < 0) {
            uint64_t v30 = v45[1];
          }
          if (v30)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v45);
          }
          else
          {
            uint64_t v31 = (void *)HIBYTE(v48);
            if (v48 < 0) {
              uint64_t v31 = __p[1];
            }
            if (v31 == (void *)2)
            {
              if (v48 >= 0) {
                CFArrayRef v38 = __p;
              }
              else {
                CFArrayRef v38 = (void **)__p[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v38, *((char *)v38 + 1));
            }
            else
            {
              if (v31 != (void *)1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if (v48 >= 0) {
                uint64_t v32 = __p;
              }
              else {
                uint64_t v32 = (void **)__p[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v32);
            }
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(v45[0]);
          }
          if (SHIBYTE(v48) < 0) {
            operator delete(__p[0]);
          }
          char v26 = 0;
LABEL_114:
          uint64_t v5 = (uint64_t)(v16 + 2);
          int64x2_t v36 = v9;
          goto LABEL_115;
        default:
          int v12 = 0;
          char v13 = 0;
          int v11 = (char *)v5;
          break;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if ((char)v13 >= 0) {
      int v12 = v13;
    }
    if (!v12)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        int v18 = *v11;
        if (v18 == 92)
        {
          BOOL v19 = v11 + 1;
          if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
            BOOL v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v19, a3, (uint64_t *)v43);
          }
          else {
            BOOL v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v19, (unsigned __int8 *)a3, (uint64_t)v43, v7);
          }
          int v11 = v20;
          goto LABEL_80;
        }
      }
      else
      {
        LOBYTE(v18) = *v11;
      }
      if ((char)v13 < 0)
      {
        unint64_t v29 = (void **)v43[0];
        v43[1] = (void *)1;
      }
      else
      {
        HIBYTE(v44) = 1;
        unint64_t v29 = v43;
      }
      *(unsigned char *)unint64_t v29 = v18;
      *((unsigned char *)v29 + 1) = 0;
      ++v11;
    }
LABEL_80:
    if (v11 != a3)
    {
      int v33 = *v11;
      if (v33 != 93)
      {
        uint64_t v35 = v11 + 1;
        if (v11 + 1 != a3 && v33 == 45 && *v35 != 93)
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v48 = 0;
          int64x2_t v36 = v11 + 2;
          if (v11 + 2 != a3 && *v35 == 91 && *v36 == 46)
          {
            unint64_t v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)__p);
            goto LABEL_124;
          }
          if ((v5 | 0x40) == 0x40)
          {
            LODWORD(v35) = *v35;
            if (v35 == 92)
            {
              if (v5) {
                unint64_t v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, (uint64_t *)__p);
              }
              else {
                unint64_t v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v11 + 2, (unsigned __int8 *)a3, (uint64_t)__p, v7);
              }
LABEL_124:
              int64x2_t v36 = v37;
LABEL_125:
              *(_OWORD *)uint64_t v45 = *(_OWORD *)v43;
              uint64_t v39 = v44;
              v43[1] = 0;
              uint64_t v44 = 0;
              *(_OWORD *)long long v41 = *(_OWORD *)__p;
              uint64_t v42 = v48;
              v43[0] = 0;
              __p[1] = 0;
              uint64_t v48 = 0;
              uint64_t v46 = v39;
              __p[0] = 0;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v45, (char *)v41);
              if (SHIBYTE(v42) < 0) {
                operator delete(v41[0]);
              }
              if (SHIBYTE(v46) < 0) {
                operator delete(v45[0]);
              }
              if (SHIBYTE(v48) < 0) {
                operator delete(__p[0]);
              }
              char v26 = 1;
LABEL_115:
              if (SHIBYTE(v44) < 0) {
                operator delete(v43[0]);
              }
              int v11 = v36;
              if ((v26 & 1) == 0) {
                goto LABEL_119;
              }
              goto LABEL_118;
            }
          }
          else
          {
            LOBYTE(v35) = *v35;
          }
          HIBYTE(v48) = 1;
          LOBYTE(__p[0]) = (_BYTE)v35;
          goto LABEL_125;
        }
      }
    }
    if (SHIBYTE(v44) < 0)
    {
      if (v43[1])
      {
        if (v43[1] == (void *)1)
        {
          __int16 v34 = (void **)v43[0];
LABEL_89:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v34);
LABEL_100:
          char v26 = 1;
          int64x2_t v36 = v11;
          goto LABEL_115;
        }
        __int16 v34 = (void **)v43[0];
LABEL_99:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v34, *((char *)v34 + 1));
        goto LABEL_100;
      }
      operator delete(v43[0]);
    }
    else if (HIBYTE(v44))
    {
      __int16 v34 = v43;
      if (HIBYTE(v44) == 1) {
        goto LABEL_89;
      }
      goto LABEL_99;
    }
    goto LABEL_118;
  }
  return a2;
}

void sub_1BB523604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  unsigned int v6 = a2;
  for (i = a2; ; unsigned int v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 != 87) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  }
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  unint64_t v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        unint64_t v9 = a2 + 3;
      }
      else {
        unint64_t v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  unint64_t v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  int v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_81;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_81;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_81;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_91;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_91;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_91;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_53;
      }
      goto LABEL_81;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_69;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_81:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_53:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_69;
      }
LABEL_91:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_91;
    }
    if ((char)v4[1] < 65) {
      goto LABEL_91;
    }
    unsigned int v14 = v4[1];
    if (v14 >= 0x5B && (v14 - 97) > 0x19u) {
      goto LABEL_91;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1BB524180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  if (a2 != (char *)a3)
  {
    if ((end = a1->__end_,
          unsigned int marked_count = a1->__marked_count_,
          int v9 = (unsigned __int8 *)(a2 + 1),
          int v8 = *a2,
          a2 + 1 == (char *)a3)
      && v8 == 36
      || ((v8 - 46) <= 0x2E
        ? (BOOL v10 = ((1 << (v8 - 46)) & 0x600000000001) == 0)
        : (BOOL v10 = 1),
          !v10))
    {
      std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
      if (v11 == v3)
      {
        if (*v3 == 46) {
          operator new();
        }
        std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      std::string v11 = v3 + 1;
    }
    if (v3 == v11 && v9 != a3 && *v3 == 92)
    {
      if (2 * (v3[1] == 40))
      {
        uint64_t v12 = (uint64_t)&v3[2 * (v3[1] == 40)];
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v13 = a1->__marked_count_;
        do
        {
          unsigned int v14 = (unsigned __int8 *)v12;
          uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v12, a3);
        }
        while (v14 != (unsigned __int8 *)v12);
        if (v14 == a3 || v14 + 1 == a3 || *v14 != 92 || v14[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::string v11 = (char *)(v14 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v13);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        std::string v11 = &v3[v16];
      }
    }
    if (v11 != v3)
    {
      if (v11 == (char *)a3) {
        return (char *)a3;
      }
      size_t v17 = a1->__marked_count_ + 1;
      int v18 = *v11;
      if (v18 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return ++v11;
      }
      if (v11 + 1 == (char *)a3 || v18 != 92 || v11[1] != 123) {
        return v11;
      }
      BOOL v20 = (unsigned __int8 *)(v11 + 2);
      int v29 = 0;
      int v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v20, a3, &v29);
      if (v20 == v21) {
LABEL_46:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v21 != a3)
      {
        BOOL v22 = v21 + 1;
        int v23 = *v21;
        if (v23 == 44)
        {
          int v28 = -1;
          uint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v21 + 1, a3, &v28);
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            size_t v26 = v28;
            size_t v25 = v29;
            if (v28 == -1)
            {
              size_t v26 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_46;
            }
            std::string v11 = (char *)&v24[2 * (v24[1] == 125)];
            int v27 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v27, v25, v26, end, marked_count + 1, v17, 1);
            return v11;
          }
        }
        else if (v22 != a3 && v23 == 92 && *v22 == 125)
        {
          std::string v11 = (char *)(v21 + 2);
          size_t v25 = v29;
          int v27 = a1;
          size_t v26 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_33;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
LABEL_22:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    goto LABEL_22;
  }
  BOOL v8 = v6 == 40;
  unint64_t v7 = (char *)(a2 + 1);
  BOOL v8 = !v8 || v7 == a3;
  if (!v8)
  {
    BOOL v8 = *v7 == 63;
    int v9 = (char *)(a2 + 2);
    if (v8 && v9 != a3)
    {
      int v11 = *v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = this->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int marked_count = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v46, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v11 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = this->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int v13 = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v46, 0, this->__marked_count_);
        this->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      unsigned int v14 = (unsigned __int8 *)(v12 + 1);
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v46.__traits_.__loc_);
      if (v12 + 1 != (char *)a2) {
        return v14;
      }
    }
  }
LABEL_33:
  end = this->__end_;
  unsigned int v20 = this->__marked_count_;
  int v21 = (char)*a2;
  int v22 = *a2;
  if (v21 <= 91)
  {
    int v23 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_96;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          uint64_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --this->__open_count_;
            int v23 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_91;
          }
LABEL_96:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v29 = this->__marked_count_;
        ++this->__open_count_;
        uint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
        if (v30 == a3) {
          goto LABEL_96;
        }
        uint64_t v31 = v30;
        if (*v30 != 41) {
          goto LABEL_96;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v29);
        --this->__open_count_;
        int v23 = (unsigned __int8 *)(v31 + 1);
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        operator new();
      default:
        if (v21 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
          goto LABEL_91;
        }
        if (v21 != 63) {
          goto LABEL_56;
        }
        goto LABEL_58;
    }
  }
  uint64_t v25 = (v21 - 92);
  if (v25 > 0x21) {
    goto LABEL_56;
  }
  int v23 = a2;
  if (((1 << v25) & 0x300000006) != 0) {
    goto LABEL_91;
  }
  if (v25)
  {
    if (v25 == 31) {
LABEL_58:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v22);
    int v23 = a2 + 1;
    goto LABEL_91;
  }
  int v23 = a2;
  if (v22 != 92) {
    goto LABEL_91;
  }
  size_t v26 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v27 = *v26;
  unsigned int v28 = v27 - 48;
  if (v27 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
LABEL_90:
    int v23 = a2 + 2;
    goto LABEL_91;
  }
  if ((v27 - 49) <= 8)
  {
    int v23 = a2 + 2;
    if (a2 + 2 == (unsigned __int8 *)a3)
    {
      int v23 = (unsigned __int8 *)a3;
    }
    else
    {
      while (1)
      {
        int v32 = *v23;
        if ((v32 - 48) > 9) {
          break;
        }
        if (v28 >= 0x19999999) {
          goto LABEL_97;
        }
        ++v23;
        unsigned int v28 = v32 + 10 * v28 - 48;
        if (v23 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
          break;
        }
      }
      if (!v28) {
LABEL_97:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v28 > v20) {
      goto LABEL_97;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v28);
    if (v26 != v23) {
      goto LABEL_91;
    }
  }
  int v33 = (char)*v26;
  if (v33 > 99)
  {
    if (v33 == 119)
    {
      __int16 v34 = this;
      BOOL v35 = 0;
      goto LABEL_82;
    }
    if (v33 == 115)
    {
      uint64_t v42 = this;
      BOOL v43 = 0;
      goto LABEL_88;
    }
    if (v33 != 100) {
      goto LABEL_83;
    }
    int64x2_t v36 = this;
    BOOL v37 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
    int v39 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v39;
    goto LABEL_90;
  }
  switch(v33)
  {
    case 'D':
      int64x2_t v36 = this;
      BOOL v37 = 1;
      goto LABEL_80;
    case 'S':
      uint64_t v42 = this;
      BOOL v43 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
      int v39 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      __int16 v34 = this;
      BOOL v35 = 1;
LABEL_82:
      uint64_t v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      v40->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
      goto LABEL_90;
  }
LABEL_83:
  long long v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, (unsigned __int8 *)a3, 0);
  if (v26 == v41) {
    int v23 = a2;
  }
  else {
    int v23 = v41;
  }
LABEL_91:
  unsigned int v14 = a2;
  if (v23 == a2) {
    return v14;
  }
  size_t v44 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v23, (unsigned __int8 *)a3, end, v20 + 1, v44);
}

void sub_1BB524AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

uint64_t *std::vector<std::map<std::string,applesauce::CF::TypeRef>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      unint64_t v7 = (uint64_t *)(v2 + v5 - 16);
      uint64_t v8 = *v7;
      *(void *)(v4 + v5 - 16) = *v7;
      uint64_t v9 = v4 + v5 - 16;
      uint64_t v10 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 8) = v10;
      if (v10)
      {
        *(void *)(v8 + 16) = v9;
        *(void *)(v2 + v5 - 24) = v7;
        uint64_t *v7 = 0;
        *(void *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(void *)(v6 - 24) = v9;
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *CFTypeRef result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::map<std::string,applesauce::CF::TypeRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string const,applesauce::CF::TypeRef>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFDictionaryRef *std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::map<std::string,applesauce::CF::TypeRef>,applesauce::CF::DictionaryRef*>(CFDictionaryRef *a1, void *a2)
{
  int64x2_t v23 = 0uLL;
  v24[0] = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve(&v23, a2[2]);
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    unint64_t v7 = (CFStringRef *)v23.i64[1];
    do
    {
      if ((unint64_t)v7 >= v24[0])
      {
        uint64_t v8 = ((uint64_t)v7 - v23.i64[0]) >> 4;
        if ((unint64_t)(v8 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v9 = (v24[0] - v23.i64[0]) >> 3;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if (v24[0] - v23.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        unsigned int v28 = v24;
        if (v10) {
          uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v24, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v25 = v11;
        v26.i64[0] = (uint64_t)&v11[2 * v8];
        v26.i64[1] = v26.i64[0];
        int v27 = &v11[2 * v10];
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v26.i64[0], (const UInt8 *)v5 + 32, (const void **)v5 + 7);
        uint64_t v12 = v26.i64[0];
        unint64_t v7 = (CFStringRef *)(v26.i64[1] + 16);
        v26.i64[1] += 16;
        uint64_t v13 = (void *)v23.i64[1];
        unsigned int v14 = (void *)v23.i64[0];
        if (v23.i64[1] == v23.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v23.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v15 = *(v13 - 2);
            v13 -= 2;
            *(void *)(v12 - 16) = v15;
            v12 -= 16;
            void *v13 = 0;
            *(void *)(v12 + 8) = v13[1];
            v13[1] = 0;
          }
          while (v13 != v14);
          int64x2_t v16 = v23;
          unint64_t v7 = (CFStringRef *)v26.i64[1];
        }
        v23.i64[0] = v12;
        v23.i64[1] = (uint64_t)v7;
        int64x2_t v26 = v16;
        BOOL v17 = (void **)v24[0];
        v24[0] = v27;
        int v27 = v17;
        uint64_t v25 = (void **)v16.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v25);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(v7, (const UInt8 *)v5 + 32, (const void **)v5 + 7);
        v7 += 2;
      }
      v23.i64[1] = (uint64_t)v7;
      int v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          BOOL v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = (void *)v5[2];
          BOOL v20 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v20);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v23);
  uint64_t v25 = (void **)&v23;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v25);
  *a1 = CFDictionaryRef;
  return a1;
}

void sub_1BB524E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_1BB524F58(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDSPGraph::GetProperty(AUDSPGraph *this, uint64_t a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if ((int)a2 > 1852797025)
  {
    if ((int)a2 <= 1920169062)
    {
      if (a2 == 1852797026)
      {
        uint64_t v5 = 0;
        int v9 = *((unsigned __int8 *)this + 900);
        goto LABEL_138;
      }
      if (a2 == 1919247202)
      {
        uint64_t v5 = 0;
        int v9 = *((unsigned __int8 *)this + 528);
        goto LABEL_138;
      }
LABEL_139:
      uint64_t v86 = (DSPGraph::Graph *)*((void *)this + 92);
      if (!v86 || !DSPGraph::Graph::hasProperty(v86)) {
        return 4294956417;
      }
      uint32_t v114 = (uint64_t **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 92) + 64))(*((void *)this + 92), a2);
      LODWORD(v115) = v87;
      if ((_BYTE)v87)
      {
        (*(void (**)(void, uint64_t, uint64_t ***, CFArrayRef *))(**((void **)this + 92) + 72))(*((void *)this + 92), a2, &v114, a5);
        return 0;
      }
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v89 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return v114;
        }
        uint32_t v90 = (void *)((char *)this + 632);
        if (*((char *)this + 655) < 0) {
          uint32_t v90 = (void *)*v90;
        }
        CAX4CCString::CAX4CCString((CAX4CCString *)&v118, a2);
        *(_DWORD *)int valuePtr = 136315906;
        *(void *)&valuePtr[4] = v90;
        *(_WORD *)&valuePtr[12] = 2048;
        *(void *)&valuePtr[14] = this;
        *(_WORD *)&valuePtr[22] = 2080;
        unsigned int v121 = &v118;
        LOWORD(v122) = 1024;
        *(_DWORD *)((char *)&v122 + 2) = v114;
        uint64_t v91 = "[%s|%p] failed to query property info for property %s (error %d)";
        float v92 = v89;
        uint32_t v93 = 38;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v94 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return v114;
        }
        CAX4CCString::CAX4CCString((CAX4CCString *)&v118, a2);
        *(_DWORD *)int valuePtr = 134218498;
        *(void *)&valuePtr[4] = this;
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = &v118;
        *(_WORD *)&valuePtr[22] = 1024;
        LODWORD(v121) = v114;
        uint64_t v91 = "[%p] failed to query property info for property %s (error %d)";
        float v92 = v94;
        uint32_t v93 = 28;
      }
      _os_log_error_impl(&dword_1BB0CE000, v92, OS_LOG_TYPE_ERROR, v91, valuePtr, v93);
      return v114;
    }
    if (a2 == 1920169063)
    {
      uint64_t v5 = 0;
      int v9 = *((unsigned __int8 *)this + 897);
      goto LABEL_138;
    }
    if (a2 != 1936289382) {
      goto LABEL_139;
    }
    uint64_t v11 = *((void *)this + 92);
    if (!v11) {
      return 4294956446;
    }
    *((void *)&v118 + 1) = 0;
    UInt32 v119 = 0;
    *(void *)&long long v118 = (char *)&v118 + 8;
    uint64_t v12 = *(uint64_t ***)(v11 + 24);
    if (!v12)
    {
LABEL_144:
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)valuePtr, (const void ***)&v118);
      *a5 = *(CFArrayRef *)valuePtr;
      std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(*((void **)&v118 + 1));
      return 0;
    }
    while (1)
    {
      BOOL v115 = 0;
      uint64_t v116 = 0;
      uint32_t v114 = &v115;
      uint64_t v13 = (*(uint64_t (**)(uint64_t *))(*v12[2] + 216))(v12[2]);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 848);
        if (ABHelperLibraryLoader(void)::once != -1) {
          dispatch_once(&ABHelperLibraryLoader(void)::once, &__block_literal_global_217);
        }
        if (ABHelperLibraryLoader(void)::libSym) {
          CFDictionaryRef v15 = (CFDictionaryRef)ABHelperLibraryLoader(void)::libSym(v14);
        }
        else {
          CFDictionaryRef v15 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v15);
        int v18 = operator new(0x30uLL);
        *(void *)int valuePtr = v18;
        *(void *)&valuePtr[8] = &v115;
        valuePtr[16] = 0;
        CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"AUSpecific", 10, 0x8000100u, 0);
        *((void *)v18 + 4) = v19;
        if (!v19)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFTypeRef v20 = cf;
        if (cf) {
          CFRetain(cf);
        }
        *((void *)v18 + 5) = v20;
        valuePtr[16] = 1;
        int v21 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v114, &v108, (CFTypeRef *)v18 + 4);
        if (!*v21)
        {
          int v22 = (const void **)v108;
          *(void *)int v18 = 0;
          *((void *)v18 + 1) = 0;
          *((void *)v18 + 2) = v22;
          *int v21 = v18;
          if (*v114)
          {
            uint32_t v114 = (uint64_t **)*v114;
            int v18 = *v21;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v115, (uint64_t *)v18);
          ++v116;
          *(void *)int valuePtr = 0;
        }
        std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
        CFTypeRef v23 = cf;
        if (!cf) {
          goto LABEL_50;
        }
      }
      else
      {
        int64x2_t v16 = v12[2];
        if (ABHelperLibraryLoader(void)::once != -1) {
          dispatch_once(&ABHelperLibraryLoader(void)::once, &__block_literal_global_217);
        }
        if (ABHelperLibraryLoader(void)::libSym) {
          CFDictionaryRef v17 = (CFDictionaryRef)ABHelperLibraryLoader(void)::libSym(v16);
        }
        else {
          CFDictionaryRef v17 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v17);
        uint64_t v24 = operator new(0x30uLL);
        *(void *)int valuePtr = v24;
        *(void *)&valuePtr[8] = &v115;
        valuePtr[16] = 0;
        CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"BoxSpecific", 11, 0x8000100u, 0);
        *((void *)v24 + 4) = v25;
        if (!v25)
        {
          uint32_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v106, "Could not construct");
        }
        CFTypeRef v26 = cf;
        if (cf) {
          CFRetain(cf);
        }
        *((void *)v24 + 5) = v26;
        valuePtr[16] = 1;
        int v27 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v114, &v108, (CFTypeRef *)v24 + 4);
        if (!*v27)
        {
          unsigned int v28 = (const void **)v108;
          *(void *)uint64_t v24 = 0;
          *((void *)v24 + 1) = 0;
          *((void *)v24 + 2) = v28;
          *int v27 = v24;
          if (*v114)
          {
            uint32_t v114 = (uint64_t **)*v114;
            uint64_t v24 = *v27;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v115, (uint64_t *)v24);
          ++v116;
          *(void *)int valuePtr = 0;
        }
        std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
        CFTypeRef v23 = cf;
        if (!cf) {
          goto LABEL_50;
        }
      }
      CFRelease(v23);
LABEL_50:
      unsigned int v29 = v12[2];
      uint64_t v30 = (const char *)(v29 + 4);
      if (*((char *)v29 + 55) < 0) {
        uint64_t v30 = *(const char **)v30;
      }
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&cf, (const void ***)&v114);
      uint64_t v31 = (uint64_t *)operator new(0x30uLL);
      *(void *)int valuePtr = v31;
      *(void *)&valuePtr[8] = (char *)&v118 + 8;
      int v32 = (CFTypeRef *)(v31 + 4);
      valuePtr[16] = 0;
      CFIndex v33 = strlen(v30);
      if (v30)
      {
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v33, 0x8000100u, 0);
        *int v32 = v34;
        if (!v34)
        {
          uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v97, "Could not construct");
        }
      }
      else
      {
        *int v32 = 0;
      }
      CFTypeRef v35 = cf;
      if (cf) {
        CFRetain(cf);
      }
      v31[5] = (uint64_t)v35;
      valuePtr[16] = 1;
      int64x2_t v36 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v118, &v108, v32);
      if (!*v36)
      {
        BOOL v37 = (const void **)v108;
        *uint64_t v31 = 0;
        v31[1] = 0;
        v31[2] = (uint64_t)v37;
        *int64x2_t v36 = v31;
        if (*(void *)v118)
        {
          *(void *)&long long v118 = *(void *)v118;
          uint64_t v31 = *v36;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v118 + 1), v31);
        UInt32 v119 = (long long *)((char *)v119 + 1);
        *(void *)int valuePtr = 0;
      }
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
      if (v35) {
        CFRelease(v35);
      }
      std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v115);
      uint64_t v12 = (uint64_t **)*v12;
      if (!v12) {
        goto LABEL_144;
      }
    }
  }
  if ((int)a2 <= 1734504311)
  {
    if (a2 == 3700)
    {
      uint64_t v5 = 0;
      int v9 = *((unsigned __int8 *)this + 376);
      goto LABEL_138;
    }
    if (a2 == 1685283431)
    {
      uint64_t v5 = 0;
      int v9 = *((unsigned __int8 *)this + 896);
LABEL_138:
      *(_DWORD *)a5 = v9;
      return v5;
    }
    goto LABEL_139;
  }
  if (a2 == 1734504312)
  {
    uint64_t v38 = *((void *)this + 92);
    if (v38)
    {
      long long v118 = 0uLL;
      UInt32 v119 = 0;
      int v39 = *(void **)(v38 + 24);
      if (!v39)
      {
LABEL_145:
        *a5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v118);
        *(void *)int valuePtr = &v118;
        std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
        return 0;
      }
      uint64_t v40 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v41 = (const void *)*MEMORY[0x1E4F1CFC8];
      while (1)
      {
        BOOL v115 = 0;
        uint64_t v116 = 0;
        uint32_t v114 = &v115;
        uint64_t v42 = v39[2];
        BOOL v43 = (const char *)(v42 + 32);
        if ((*(char *)(v42 + 55) & 0x80000000) == 0) {
          break;
        }
        BOOL v43 = *(const char **)v43;
        CFIndex v44 = strlen(v43);
        if (v43) {
          goto LABEL_74;
        }
        CFStringRef v45 = 0;
        CFTypeRef cf = 0;
LABEL_75:
        std::basic_regex<char> v46 = operator new(0x30uLL);
        *(void *)int valuePtr = v46;
        *(void *)&valuePtr[8] = &v115;
        valuePtr[16] = 0;
        CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"name", 4, 0x8000100u, 0);
        *((void *)v46 + 4) = v47;
        if (!v47)
        {
          uint64_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v95, "Could not construct");
        }
        if (v45) {
          CFRetain(v45);
        }
        *((void *)v46 + 5) = v45;
        valuePtr[16] = 1;
        uint64_t v48 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v114, &v108, (CFTypeRef *)v46 + 4);
        if (!*v48)
        {
          int16x8_t v49 = (const void **)v108;
          *(void *)std::basic_regex<char> v46 = 0;
          *((void *)v46 + 1) = 0;
          *((void *)v46 + 2) = v49;
          *uint64_t v48 = v46;
          if (*v114)
          {
            uint32_t v114 = (uint64_t **)*v114;
            std::basic_regex<char> v46 = *v48;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v115, (uint64_t *)v46);
          ++v116;
          *(void *)int valuePtr = 0;
        }
        std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
        if (v45) {
          CFRelease(v45);
        }
        uint64_t v50 = (*(uint64_t (**)(void))(*(void *)v39[2] + 216))(v39[2]);
        if (v50)
        {
          uint64_t v51 = v50;
          *(void *)int valuePtr = v40;
          std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>((uint64_t **)&v114, (const void **)valuePtr);
          if (v40) {
            CFRelease(v40);
          }
          CFTypeRef cf = 0;
          uint64_t v112 = 0;
          int v113 = 0;
          (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v51 + 208))(&cf, v51);
          int v109 = 0;
          uint64_t v110 = 0;
          unint64_t v108 = (const void ***)&v109;
          *(_DWORD *)int valuePtr = cf;
          CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFTypeRef v107 = v52;
          if (!v52)
          {
            uint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v99, "Could not construct");
          }
          uint64_t v53 = operator new(0x30uLL);
          *(void *)int valuePtr = v53;
          *(void *)&valuePtr[8] = &v109;
          valuePtr[16] = 0;
          CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"componentType", 13, 0x8000100u, 0);
          *((void *)v53 + 4) = v54;
          if (!v54)
          {
            uint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v100, "Could not construct");
          }
          CFRetain(v52);
          *((void *)v53 + 5) = v52;
          valuePtr[16] = 1;
          uint64_t v55 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v108, &v117, (CFTypeRef *)v53 + 4);
          if (!*v55)
          {
            uint64_t v56 = v117;
            *(void *)uint64_t v53 = 0;
            *((void *)v53 + 1) = 0;
            *((void *)v53 + 2) = v56;
            *uint64_t v55 = v53;
            if (*v108)
            {
              unint64_t v108 = (const void ***)*v108;
              uint64_t v53 = *v55;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v109, (uint64_t *)v53);
            ++v110;
            *(void *)int valuePtr = 0;
          }
          std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
          CFRelease(v52);
          *(_DWORD *)int valuePtr = HIDWORD(cf);
          CFNumberRef v57 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFTypeRef v107 = v57;
          if (!v57)
          {
            uint32_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v101, "Could not construct");
          }
          uint32_t v58 = operator new(0x30uLL);
          *(void *)int valuePtr = v58;
          *(void *)&valuePtr[8] = &v109;
          valuePtr[16] = 0;
          CFStringRef v59 = CFStringCreateWithBytes(0, (const UInt8 *)"componentSubType", 16, 0x8000100u, 0);
          *((void *)v58 + 4) = v59;
          if (!v59)
          {
            uint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v102, "Could not construct");
          }
          CFRetain(v57);
          *((void *)v58 + 5) = v57;
          valuePtr[16] = 1;
          int v60 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v108, &v117, (CFTypeRef *)v58 + 4);
          if (!*v60)
          {
            uint64_t v61 = v117;
            *(void *)uint32_t v58 = 0;
            *((void *)v58 + 1) = 0;
            *((void *)v58 + 2) = v61;
            NSObject *v60 = v58;
            if (*v108)
            {
              unint64_t v108 = (const void ***)*v108;
              uint32_t v58 = *v60;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v109, (uint64_t *)v58);
            ++v110;
            *(void *)int valuePtr = 0;
          }
          std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
          CFRelease(v57);
          *(_DWORD *)int valuePtr = v112;
          CFNumberRef v62 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFTypeRef v107 = v62;
          if (!v62)
          {
            float v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v103, "Could not construct");
          }
          uint64_t v63 = operator new(0x30uLL);
          *(void *)int valuePtr = v63;
          *(void *)&valuePtr[8] = &v109;
          valuePtr[16] = 0;
          CFStringRef v64 = CFStringCreateWithBytes(0, (const UInt8 *)"componentManufacturer", 21, 0x8000100u, 0);
          *((void *)v63 + 4) = v64;
          if (!v64)
          {
            float v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v104, "Could not construct");
          }
          CFRetain(v62);
          *((void *)v63 + 5) = v62;
          valuePtr[16] = 1;
          int v65 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v108, &v117, (CFTypeRef *)v63 + 4);
          if (!*v65)
          {
            uint64_t v66 = v117;
            *(void *)uint64_t v63 = 0;
            *((void *)v63 + 1) = 0;
            *((void *)v63 + 2) = v66;
            *int v65 = v63;
            if (*v108)
            {
              unint64_t v108 = (const void ***)*v108;
              uint64_t v63 = *v65;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v109, (uint64_t *)v63);
            ++v110;
            *(void *)int valuePtr = 0;
          }
          std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
          CFRelease(v62);
          applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&v107, (const void ***)&v108);
          unsigned int v67 = operator new(0x30uLL);
          *(void *)int valuePtr = v67;
          *(void *)&valuePtr[8] = &v115;
          valuePtr[16] = 0;
          CFStringRef v68 = CFStringCreateWithBytes(0, (const UInt8 *)"audioComponentDescription", 25, 0x8000100u, 0);
          *((void *)v67 + 4) = v68;
          if (!v68)
          {
            float v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v105, "Could not construct");
          }
          CFTypeRef v69 = v107;
          if (v107) {
            CFRetain(v107);
          }
          *((void *)v67 + 5) = v69;
          valuePtr[16] = 1;
          uint64_t v70 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)&v114, &v117, (CFTypeRef *)v67 + 4);
          if (!*v70)
          {
            uint64_t v71 = v117;
            *(void *)unsigned int v67 = 0;
            *((void *)v67 + 1) = 0;
            *((void *)v67 + 2) = v71;
            void *v70 = v67;
            if (*v114)
            {
              uint32_t v114 = (uint64_t **)*v114;
              unsigned int v67 = *v70;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v115, (uint64_t *)v67);
            ++v116;
            *(void *)int valuePtr = 0;
          }
          std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)valuePtr);
          if (v69) {
            CFRelease(v69);
          }
          std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v109);
        }
        else
        {
          *(void *)int valuePtr = v41;
          std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>((uint64_t **)&v114, (const void **)valuePtr);
          if (v41) {
            CFRelease(v41);
          }
        }
        applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,applesauce::CF::TypeRef>((CFDictionaryRef *)&v108, (const void ***)&v114);
        size_t v72 = (void *)*((void *)&v118 + 1);
        if (*((void *)&v118 + 1) >= (unint64_t)v119)
        {
          uint64_t v73 = (void *)v118;
          uint64_t v74 = (uint64_t)(*((void *)&v118 + 1) - v118) >> 3;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v76 = (uint64_t)v119 - v118;
          if ((uint64_t)((uint64_t)v119 - v118) >> 2 > v75) {
            unint64_t v75 = v76 >> 2;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          uint64_t v122 = &v119;
          if (v77)
          {
            unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v77);
            size_t v72 = (void *)*((void *)&v118 + 1);
            uint64_t v73 = (void *)v118;
          }
          else
          {
            uint64_t v78 = 0;
          }
          uint64_t v79 = (const void ****)(v77 + 8 * v74);
          uint32_t v80 = (long long *)(v77 + 8 * v78);
          unsigned int v121 = v80;
          _OWORD *v79 = v108;
          uint64_t v81 = v79 + 1;
          unint64_t v108 = 0;
          *(void *)&valuePtr[16] = v79 + 1;
          if (v72 == v73)
          {
            uint64_t v83 = 0;
          }
          else
          {
            do
            {
              BOOL v82 = (const void ***)*--v72;
              *--uint64_t v79 = v82;
              void *v72 = 0;
            }
            while (v72 != v73);
            uint64_t v81 = *(void **)&valuePtr[16];
            uint32_t v80 = v121;
            uint64_t v83 = (const void **)v108;
          }
          long long v84 = v118;
          *(void *)&long long v118 = v79;
          *((void *)&v118 + 1) = v81;
          *(_OWORD *)&valuePtr[8] = v84;
          float v85 = v119;
          UInt32 v119 = v80;
          unsigned int v121 = v85;
          *(void *)int valuePtr = v84;
          std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)valuePtr);
          *((void *)&v118 + 1) = v81;
          if (v83) {
            CFRelease(v83);
          }
        }
        else
        {
          **((void **)&v118 + 1) = v108;
          *((void *)&v118 + 1) = v72 + 1;
        }
        std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::destroy(v115);
        int v39 = (void *)*v39;
        if (!v39) {
          goto LABEL_145;
        }
      }
      CFIndex v44 = strlen(v43);
LABEL_74:
      CFStringRef v45 = CFStringCreateWithBytes(0, (const UInt8 *)v43, v44, 0x8000100u, 0);
      CFTypeRef cf = v45;
      if (!v45)
      {
        uint64_t v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v96, "Could not construct");
      }
      goto LABEL_75;
    }
    return 4294956446;
  }
  if (a2 != 1835758191) {
    goto LABEL_139;
  }
  CFArrayRef v10 = (const __CFArray *)*((void *)this + 124);
  if (v10) {
    CFRetain(*((CFTypeRef *)this + 124));
  }
  uint64_t v5 = 0;
  *a5 = v10;
  return v5;
}

void sub_1BB5260AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,int a26,__int16 a27,uint64_t a28,char a29,char a30,long long buf,int a32,__int16 a33,__int16 a34,int *a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v38 = __cxa_begin_catch(exception_object);
  int v39 = (void *)(v35 + 632);
  if (a2 == 2)
  {
    uint64_t v40 = (uint64_t)v38;
    if (*(unsigned char *)(v35 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      long long v41 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = (void *)(v35 + 632);
        if (*(char *)(v35 + 655) < 0) {
          uint64_t v42 = (void *)*v39;
        }
        if (a28 >= 0) {
          BOOL v43 = &a24;
        }
        else {
          BOOL v43 = *(int **)&a24;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = v42;
        WORD6(buf) = 2048;
        *(void *)((char *)&buf + 14) = v35;
        a34 = 2080;
        a35 = v43;
        _os_log_error_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", (uint8_t *)&buf, 0x20u);
        if ((SHIBYTE(a28) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        CFIndex v44 = *(void **)&a24;
        goto LABEL_45;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      int16x8_t v49 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (a34 >= 0) {
          p_AudioTimeStamp buf = &buf;
        }
        else {
          p_AudioTimeStamp buf = (long long *)buf;
        }
        a24 = 134218242;
        *(void *)(&a24 + 1) = v35;
        a27 = 2080;
        *(void *)((char *)&a26 + 6) = p_buf;
        _os_log_error_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", (uint8_t *)&a24, 0x16u);
        if ((SHIBYTE(a34) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        CFIndex v44 = (void *)buf;
LABEL_45:
        operator delete(v44);
LABEL_46:
        BOOL v50 = getAUDSPGraphLog(void)::onceToken == -1;
LABEL_25:
        if (*(unsigned char *)(v35 + 656))
        {
          if (!v50) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v51 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(v35 + 655) < 0) {
              int v39 = (void *)*v39;
            }
            CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
            LODWORD(buf) = 136315650;
            *(void *)((char *)&buf + 4) = v39;
            WORD6(buf) = 2048;
            *(void *)((char *)&buf + 14) = v35;
            a34 = 2080;
            a35 = &a24;
            CFNumberRef v52 = "[%s|%p] DSPGraph exception while getting property %s";
            uint64_t v53 = v51;
            uint32_t v54 = 32;
            goto LABEL_50;
          }
        }
        else
        {
          if (!v50) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v56 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
            LODWORD(buf) = 134218242;
            *(void *)((char *)&buf + 4) = v35;
            WORD6(buf) = 2080;
            *(void *)((char *)&buf + 14) = &a24;
            CFNumberRef v52 = "[%p] DSPGraph exception while getting property %s";
            uint64_t v53 = v56;
            uint32_t v54 = 22;
LABEL_50:
            _os_log_error_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_ERROR, v52, (uint8_t *)&buf, v54);
          }
        }
        __cxa_end_catch();
        JUMPOUT(0x1BB525C30);
      }
    }
    BOOL v50 = 1;
    goto LABEL_25;
  }
  if (*(unsigned char *)(v35 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v45 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v35 + 655) < 0) {
        int v39 = (void *)*v39;
      }
      CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = v39;
      WORD6(buf) = 2048;
      *(void *)((char *)&buf + 14) = v35;
      a34 = 2080;
      a35 = &a24;
      std::basic_regex<char> v46 = "[%s|%p] unknown exception while getting property %s";
      CFStringRef v47 = v45;
      uint32_t v48 = 32;
      goto LABEL_48;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v55 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&a24, v36);
      LODWORD(buf) = 134218242;
      *(void *)((char *)&buf + 4) = v35;
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = &a24;
      std::basic_regex<char> v46 = "[%p] unknown exception while getting property %s";
      CFStringRef v47 = v55;
      uint32_t v48 = 22;
LABEL_48:
      _os_log_error_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, v46, (uint8_t *)&buf, v48);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1BB524FC0);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__emplace_unique_impl<char const(&)[5],applesauce::CF::BooleanRef>(uint64_t **a1, const void **a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = operator new(0x30uLL);
  v11[0] = v5;
  v11[1] = v4;
  char v12 = 0;
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"isAU", 4, 0x8000100u, 0);
  *((void *)v5 + 4) = v6;
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v7 = *a2;
  if (v7) {
    CFRetain(v7);
  }
  *((void *)v5 + 5) = v7;
  char v12 = 1;
  CFStringRef v8 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>>::__find_equal<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>>((uint64_t)a1, &v10, (CFTypeRef *)v5 + 4);
  if (!*v8)
  {
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v5);
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
}

void sub_1BB52692C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2) {
    CFRelease(*v2);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *___Z21ABHelperLibraryLoaderv_block_invoke()
{
  CFTypeRef result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(result, "ABHelperIsABTestModeOn");
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "ABHelperWriteJSONFileFromDescription");
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "ABHelperCreateDescriptionFromAudioUnit");
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "ABHelperCreateDescriptionFromDSPGraphBox");
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "ABHelperCreateDescriptionFromASBD");
    CFTypeRef result = dlsym(v1, "ABHelperCreateDescriptionFromDSPGraph");
    ABHelperLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

uint64_t AUDSPGraph::GetPropertyInfo(AUDSPGraph *this, uint64_t a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if ((int)a2 > 1735554167)
  {
    if ((int)a2 > 1886548847)
    {
      if ((int)a2 <= 1919247201)
      {
        if (a2 == 1886548848) {
          goto LABEL_34;
        }
        int v11 = 1886548853;
        goto LABEL_33;
      }
      if (a2 == 1919247202)
      {
        uint64_t v6 = 0;
        char v13 = *((unsigned char *)this + 17) ^ 1;
        goto LABEL_30;
      }
      if (a2 != 1920169063)
      {
        if (a2 != 1936289382) {
          goto LABEL_40;
        }
LABEL_22:
        uint64_t v6 = 0;
        *a6 = 0;
LABEL_36:
        unsigned int v14 = 8;
        goto LABEL_37;
      }
    }
    else
    {
      if ((int)a2 <= 1836347500)
      {
        if (a2 == 1735554168) {
          goto LABEL_34;
        }
        int v11 = 1835758191;
        goto LABEL_33;
      }
      if (a2 == 1836347501) {
        goto LABEL_34;
      }
      if (a2 != 1852797026)
      {
        if (a2 == 1886548592)
        {
          uint64_t v6 = 0;
          char v12 = *((unsigned char *)this + 17) ^ 1;
LABEL_35:
          *a6 = v12;
          goto LABEL_36;
        }
        goto LABEL_40;
      }
    }
LABEL_29:
    uint64_t v6 = 0;
    char v13 = 1;
LABEL_30:
    *a6 = v13;
    unsigned int v14 = 4;
LABEL_37:
    *a5 = v14;
    return v6;
  }
  if ((int)a2 <= 1685283430)
  {
    if ((int)a2 > 1652060273)
    {
      if ((a2 - 1652060274) >= 2)
      {
        int v11 = 1667788397;
        goto LABEL_33;
      }
LABEL_34:
      uint64_t v6 = 0;
      char v12 = 1;
      goto LABEL_35;
    }
    if (a2 != 3700)
    {
      int v11 = 1635087216;
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if ((int)a2 <= 1734504311)
  {
    if (a2 != 1685283431)
    {
      int v11 = 1685287015;
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if (a2 == 1734504312) {
    goto LABEL_22;
  }
  if (a2 == 1735287149) {
    goto LABEL_34;
  }
  int v11 = 1735553138;
LABEL_33:
  if (a2 == v11) {
    goto LABEL_34;
  }
LABEL_40:
  int64x2_t v16 = (DSPGraph::Graph *)*((void *)this + 92);
  if (!v16 || !DSPGraph::Graph::hasProperty(v16)) {
    return 4294956417;
  }
  uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 92) + 64))(*((void *)this + 92), a2);
  uint64_t v6 = v17;
  if (v18)
  {
    *a5 = v17;
    *a6 = BYTE4(v17);
    return 0;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v19 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v20 = (AUDSPGraph *)((char *)this + 632);
      if (*((char *)this + 655) < 0) {
        CFTypeRef v20 = *(AUDSPGraph **)v20;
      }
      CAX4CCString::CAX4CCString((CAX4CCString *)v25, a2);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      int v27 = v20;
      __int16 v28 = 2048;
      unsigned int v29 = this;
      __int16 v30 = 2080;
      uint64_t v31 = v25;
      __int16 v32 = 1024;
      int v33 = v6;
      int v21 = "[%s|%p] failed to query property info for property %s (error %d)";
      int v22 = v19;
      uint32_t v23 = 38;
      goto LABEL_55;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v24 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v25, a2);
      *(_DWORD *)AudioTimeStamp buf = 134218498;
      int v27 = this;
      __int16 v28 = 2080;
      unsigned int v29 = (AUDSPGraph *)v25;
      __int16 v30 = 1024;
      LODWORD(v31) = v6;
      int v21 = "[%p] failed to query property info for property %s (error %d)";
      int v22 = v24;
      uint32_t v23 = 28;
LABEL_55:
      _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    }
  }
  return v6;
}

uint64_t AUDSPGraph::Reset(AUDSPGraph *this)
{
  uint64_t v1 = (DSPGraph::Graph *)*((void *)this + 92);
  if (v1 && *((unsigned char *)v1 + 762)) {
    DSPGraph::Graph::reset(v1);
  }
  return 0;
}

void AUDSPGraph::Cleanup(DSPGraph::Graph **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AUDSPGraph *)(this + 79);
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v3 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = v2;
      if (*((char *)this + 655) < 0) {
        uint64_t v4 = *(AUDSPGraph **)v2;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v21 = v4;
      __int16 v22 = 2048;
      uint32_t v23 = (AUDSPGraph *)this;
      uint64_t v5 = "[%s|%p] will uninitialize";
      uint64_t v6 = v3;
      uint32_t v7 = 22;
      goto LABEL_12;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v8 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 134217984;
      int v21 = (AUDSPGraph *)this;
      uint64_t v5 = "[%p] will uninitialize";
      uint64_t v6 = v8;
      uint32_t v7 = 12;
LABEL_12:
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  int v9 = this[83];
  this[83] = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = this[84];
  this[84] = 0;
  if (v10) {
    CFRelease(v10);
  }
  int v11 = this[103];
  this[103] = 0;
  if (v11) {
    CFRelease(v11);
  }
  char v12 = this[104];
  this[104] = 0;
  if (v12) {
    CFRelease(v12);
  }
  char v13 = this[105];
  this[105] = 0;
  if (v13) {
    CFRelease(v13);
  }
  this[101] = this[100];
  *((unsigned char *)this + 899) = 0;
  unsigned int v14 = this[92];
  if (v14)
  {
    DSPGraph::Graph::uninitialize(v14);
    DSPGraph::Graph::unconfigure(this[92]);
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v15 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 655) < 0) {
        uint64_t v2 = *(AUDSPGraph **)v2;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v21 = v2;
      __int16 v22 = 2048;
      uint32_t v23 = (AUDSPGraph *)this;
      int64x2_t v16 = "[%s|%p] did uninitialize";
      uint64_t v17 = v15;
      uint32_t v18 = 22;
      goto LABEL_36;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v19 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 134217984;
      int v21 = (AUDSPGraph *)this;
      int64x2_t v16 = "[%p] did uninitialize";
      uint64_t v17 = v19;
      uint32_t v18 = 12;
LABEL_36:
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
    }
  }
}

void sub_1BB527134(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1BB527160(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, int a10, __int16 a11, uint64_t a12, char a13, char a14, long long buf, int a16, __int16 a17, __int16 a18, uint64_t a19)
{
  switch(a2)
  {
    case 0:
      JUMPOUT(0x1BB527158);
    case 4:
      uint64_t v24 = __cxa_begin_catch(a1);
      uint64_t v25 = *(void *)(v22 + 2376);
      if (*(unsigned char *)(v19 + 656))
      {
        if (v25 != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        CFTypeRef v26 = *(NSObject **)(v21 + 2368);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
        int v27 = v20;
        if (*(char *)(v19 + 655) < 0) {
          int v27 = (void *)*v20;
        }
        if (a12 >= 0) {
          __int16 v28 = (uint64_t *)&a9;
        }
        else {
          __int16 v28 = a9;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = v27;
        WORD6(buf) = 2048;
        *(void *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v28;
        unsigned int v29 = "[%s|%p] caught DSPGraph::Exception: %s";
LABEL_35:
        _os_log_error_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(a12) < 0)
        {
          int v39 = a9;
LABEL_67:
          operator delete(v39);
          goto LABEL_71;
        }
        goto LABEL_71;
      }
      if (v25 != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v40 = *(NSObject **)(v21 + 2368);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_71;
      }
      if (a18 >= 0) {
        p_AudioTimeStamp buf = &buf;
      }
      else {
        p_AudioTimeStamp buf = (long long *)buf;
      }
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(void *)((char *)&a10 + 6) = p_buf;
      uint64_t v42 = "[%p] caught DSPGraph::Exception: %s";
      break;
    case 3:
      __int16 v30 = (const std::system_error *)__cxa_begin_catch(a1);
      uint64_t v31 = *(void *)(v22 + 2376);
      if (*(unsigned char *)(v19 + 656))
      {
        if (v31 != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        CFTypeRef v26 = *(NSObject **)(v21 + 2368);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
        __int16 v32 = v20;
        if (*(char *)(v19 + 655) < 0) {
          __int16 v32 = (void *)*v20;
        }
        if (a12 >= 0) {
          int v33 = (uint64_t *)&a9;
        }
        else {
          int v33 = a9;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = v32;
        WORD6(buf) = 2048;
        *(void *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v33;
        unsigned int v29 = "[%s|%p] caught std::system_error: %s";
        goto LABEL_35;
      }
      if (v31 != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v40 = *(NSObject **)(v21 + 2368);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_71;
      }
      if (a18 >= 0) {
        uint32_t v48 = &buf;
      }
      else {
        uint32_t v48 = (long long *)buf;
      }
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(void *)((char *)&a10 + 6) = v48;
      uint64_t v42 = "[%p] caught std::system_error: %s";
      break;
    default:
      uint64_t v34 = (const std::exception *)__cxa_begin_catch(a1);
      uint64_t v35 = *(void *)(v22 + 2376);
      if (a2 != 2)
      {
        if (*(unsigned char *)(v19 + 656))
        {
          if (v35 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          BOOL v43 = *(NSObject **)(v21 + 2368);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
            goto LABEL_71;
          }
          CFIndex v44 = v20;
          if (*(char *)(v19 + 655) < 0) {
            CFIndex v44 = (void *)*v20;
          }
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = v44;
          WORD6(buf) = 2048;
          *(void *)((char *)&buf + 14) = v19;
          uint64_t v45 = "[%s|%p] caught unknown exception";
          std::basic_regex<char> v46 = v43;
          uint32_t v47 = 22;
        }
        else
        {
          if (v35 != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          BOOL v50 = *(NSObject **)(v21 + 2368);
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            goto LABEL_71;
          }
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = v19;
          uint64_t v45 = "[%p] caught unknown exception";
          std::basic_regex<char> v46 = v50;
          uint32_t v47 = 12;
        }
        _os_log_error_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, v47);
        goto LABEL_71;
      }
      unsigned int v36 = v34;
      if (*(unsigned char *)(v19 + 656))
      {
        if (v35 != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        CFTypeRef v26 = *(NSObject **)(v21 + 2368);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          goto LABEL_71;
        }
        BOOL v37 = v20;
        if (*(char *)(v19 + 655) < 0) {
          BOOL v37 = (void *)*v20;
        }
        if (a12 >= 0) {
          uint64_t v38 = (uint64_t *)&a9;
        }
        else {
          uint64_t v38 = a9;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = v37;
        WORD6(buf) = 2048;
        *(void *)((char *)&buf + 14) = v19;
        a18 = 2080;
        a19 = (uint64_t)v38;
        unsigned int v29 = "[%s|%p] caught std::exception: %s";
        goto LABEL_35;
      }
      if (v35 != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v40 = *(NSObject **)(v21 + 2368);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_71;
      }
      if (a18 >= 0) {
        int16x8_t v49 = &buf;
      }
      else {
        int16x8_t v49 = (long long *)buf;
      }
      LODWORD(a9) = 134218242;
      *(uint64_t **)((char *)&a9 + 4) = (uint64_t *)v19;
      a11 = 2080;
      *(void *)((char *)&a10 + 6) = v49;
      uint64_t v42 = "[%p] caught std::exception: %s";
      break;
  }
  _os_log_error_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&a9, 0x16u);
  if (SHIBYTE(a18) < 0)
  {
    int v39 = (uint64_t *)buf;
    goto LABEL_67;
  }
LABEL_71:
  __cxa_end_catch();
  JUMPOUT(0x1BB526FDCLL);
}

uint64_t AUDSPGraph::Initialize(AUDSPGraph *this)
{
  uint64_t v569 = *MEMORY[0x1E4F143B8];
  v535 = (std::string::size_type *)((char *)this + 632);
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v2 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    uint64_t v3 = v535;
    if (*((char *)this + 655) < 0) {
      uint64_t v3 = (std::string::size_type *)*v535;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = this;
    uint64_t v4 = "[%s|%p] will initialize";
    uint64_t v5 = v2;
    uint32_t v6 = 22;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v7 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_DWORD *)AudioTimeStamp buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    uint64_t v4 = "[%p] will initialize";
    uint64_t v5 = v7;
    uint32_t v6 = 12;
  }
  _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, v4, buf, v6);
LABEL_13:
  uint64_t v8 = this;
  uint64_t v9 = *((void *)this + 15);
  if (v9)
  {
    LODWORD(v529) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    uint64_t v8 = this;
  }
  else
  {
    uint64_t v529 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v10 = *((void *)v8 + 21);
  if (v10)
  {
    LODWORD(v532) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    uint64_t v8 = this;
  }
  else
  {
    uint64_t v532 = (*((void *)v8 + 19) - *((void *)v8 + 18)) >> 3;
  }
  v533 = (AUDSPGraph *)((char *)v8 + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)v8 + 80), 0);
  if (v532)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), 0);
    char v13 = *(unsigned char *)(v12 + 80);
    v567[0] = *(_OWORD *)(v12 + 81);
    *(_OWORD *)((char *)v567 + 11) = *(_OWORD *)(v12 + 92);
    char v527 = v13;
    int __val = *(_DWORD *)(v12 + 108);
    uint64_t v526 = *(void *)(v12 + 112);
  }
  else
  {
    char v527 = 0;
  }
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)buf);
  *(_OWORD *)v561 = 0u;
  long long v562 = 0u;
  int v563 = 1065353216;
  long long v547 = 0u;
  long long v548 = 0u;
  float v549 = 1.0;
  long long v544 = 0u;
  long long v545 = 0u;
  v546[0] = 1.0;
  uint64_t v530 = Element + 80;
  std::to_string((std::string *)v558, (int)*(double *)(Element + 80));
  std::string::basic_string[abi:ne180100]<0>(__p, "sampleRate");
  *(void *)__sz = __p;
  unsigned int v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v547, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)__sz);
  uint64_t v15 = v14 + 40;
  if ((char)v14[63] < 0) {
    operator delete(*(void **)v15);
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v558;
  *((void *)v15 + 2) = *(void *)&v558[16];
  v558[23] = 0;
  v558[0] = 0;
  if (SBYTE7(v540) < 0)
  {
    operator delete(__p[0]);
    if ((v558[23] & 0x80000000) != 0) {
      operator delete(*(void **)v558);
    }
  }
  std::to_string((std::string *)v558, *(_DWORD *)(Element + 108));
  std::string::basic_string[abi:ne180100]<0>(__p, "numIns");
  *(void *)__sz = __p;
  int64x2_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v547, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)__sz);
  uint64_t v17 = v16 + 40;
  if ((char)v16[63] < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v558;
  *((void *)v17 + 2) = *(void *)&v558[16];
  v558[23] = 0;
  v558[0] = 0;
  if (SBYTE7(v540) < 0)
  {
    operator delete(__p[0]);
    if ((v558[23] & 0x80000000) != 0) {
      operator delete(*(void **)v558);
    }
  }
  if (v532)
  {
    std::to_string((std::string *)v558, __val);
    std::string::basic_string[abi:ne180100]<0>(__p, "numOuts");
    *(void *)__sz = __p;
    uint32_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v547, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)__sz);
    uint64_t v19 = v18 + 40;
    if ((char)v18[63] < 0) {
      operator delete(*(void **)v19);
    }
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v558;
    *((void *)v19 + 2) = *(void *)&v558[16];
    v558[23] = 0;
    v558[0] = 0;
    if (SBYTE7(v540) < 0)
    {
      operator delete(__p[0]);
      if ((v558[23] & 0x80000000) != 0) {
        operator delete(*(void **)v558);
      }
    }
  }
  if (*((unsigned char *)this + 376)) {
    unsigned int v20 = *((_DWORD *)this + 84);
  }
  else {
    unsigned int v20 = 1;
  }
  std::to_string((std::string *)v558, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "blockSize");
  *(void *)__sz = __p;
  uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v547, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)__sz);
  uint64_t v22 = v21 + 40;
  if ((char)v21[63] < 0) {
    operator delete(*(void **)v22);
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v558;
  *((void *)v22 + 2) = *(void *)&v558[16];
  v558[23] = 0;
  v558[0] = 0;
  if (SBYTE7(v540) < 0)
  {
    operator delete(__p[0]);
    if ((v558[23] & 0x80000000) != 0) {
      operator delete(*(void **)v558);
    }
  }
  unint64_t v23 = (unint64_t)this;
  applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator((uint64_t)v558, *((CFDictionaryRef *)this + 124));
  applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator((uint64_t)__p, *((CFDictionaryRef *)this + 124));
  __p[1] = (void *)((uint64_t)(*((void *)&v540 + 1) - v540) >> 3);
  while (1)
  {
    if (*(void *)v558
      && (unint64_t v24 = *(void *)&v558[8], *(void *)&v558[8] != (uint64_t)(*(void *)&v558[24] - *(void *)&v558[16]) >> 3))
    {
      uint64_t v25 = __p[0];
    }
    else
    {
      uint64_t v25 = __p[0];
      if (!__p[0] || __p[1] == (void *)((uint64_t)(*((void *)&v540 + 1) - v540) >> 3)) {
        break;
      }
      unint64_t v24 = *(void *)&v558[8];
    }
    if (*(void **)v558 == v25 && (void *)v24 == __p[1]) {
      break;
    }
    if ((v24 & 0x8000000000000000) != 0 || v24 >= (uint64_t)(*(void *)&v558[24] - *(void *)&v558[16]) >> 3)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    }
    applesauce::CF::convert_to<std::string,0>(*(const __CFString **)(*(void *)&v558[16] + 8 * v24), (uint64_t)&v555);
    applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v559 + *(void *)&v558[8]), (uint64_t)&v568);
    *(std::string *)__sz = v555;
    *(std::string *)&__sz[24] = v568;
    unint64_t v27 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v548 + 8, (uint64_t)__sz);
    unint64_t v28 = v27;
    unint64_t v23 = *((void *)&v547 + 1);
    if (!*((void *)&v547 + 1)) {
      goto LABEL_75;
    }
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v547 + 8));
    v29.i16[0] = vaddlv_u8(v29);
    unint64_t v30 = v29.u32[0];
    if (v29.u32[0] > 1uLL)
    {
      unint64_t v1 = v27;
      if (v27 >= *((void *)&v547 + 1)) {
        unint64_t v1 = v27 % *((void *)&v547 + 1);
      }
    }
    else
    {
      unint64_t v1 = (*((void *)&v547 + 1) - 1) & v27;
    }
    uint64_t v31 = *(uint64_t ***)(v547 + 8 * v1);
    if (!v31 || (__int16 v32 = *v31) == 0)
    {
LABEL_75:
      uint64_t v35 = (char *)operator new(0x40uLL);
      unsigned int v36 = v35;
      v555.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      v555.__r_.__value_.__l.__size_ = (std::string::size_type)&v548;
      v555.__r_.__value_.__s.__data_[16] = 0;
      *(void *)uint64_t v35 = 0;
      *((void *)v35 + 1) = v28;
      if ((__sz[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v35 + 16), *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
      }
      else
      {
        *((_OWORD *)v35 + 1) = *(_OWORD *)__sz;
        *((void *)v35 + 4) = *(void *)&__sz[16];
      }
      BOOL v37 = (std::string *)(v36 + 40);
      if ((__sz[47] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)&__sz[24], *(std::string::size_type *)&__sz[32]);
      }
      else
      {
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz[24];
        *((void *)v36 + 7) = *(void *)&__sz[40];
      }
      v555.__r_.__value_.__s.__data_[16] = 1;
      float v38 = (float)(unint64_t)(*((void *)&v548 + 1) + 1);
      if (!v23 || (float)(v549 * (float)v23) < v38)
      {
        BOOL v39 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3) {
          BOOL v39 = 1;
        }
        unint64_t v40 = v39 | (2 * v23);
        unint64_t v41 = vcvtps_u32_f32(v38 / v549);
        if (v40 <= v41) {
          size_t v42 = v41;
        }
        else {
          size_t v42 = v40;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&v547, v42);
        unint64_t v23 = *((void *)&v547 + 1);
        if ((*((void *)&v547 + 1) & (*((void *)&v547 + 1) - 1)) != 0)
        {
          if (v28 >= *((void *)&v547 + 1)) {
            unint64_t v1 = v28 % *((void *)&v547 + 1);
          }
          else {
            unint64_t v1 = v28;
          }
        }
        else
        {
          unint64_t v1 = (*((void *)&v547 + 1) - 1) & v28;
        }
      }
      BOOL v43 = *(void **)(v547 + 8 * v1);
      if (v43)
      {
        *(void *)v555.__r_.__value_.__l.__data_ = *v43;
        *BOOL v43 = v555.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(void *)v555.__r_.__value_.__l.__data_ = v548;
        *(void *)&long long v548 = v555.__r_.__value_.__r.__words[0];
        *(void *)(v547 + 8 * v1) = &v548;
        if (*(void *)v555.__r_.__value_.__l.__data_)
        {
          unint64_t v44 = *(void *)(*(void *)v555.__r_.__value_.__l.__data_ + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v44 >= v23) {
              v44 %= v23;
            }
          }
          else
          {
            v44 &= v23 - 1;
          }
          *(void *)(v547 + 8 * v44) = v555.__r_.__value_.__r.__words[0];
        }
      }
      v555.__r_.__value_.__r.__words[0] = 0;
      ++*((void *)&v548 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v555, 0);
      unint64_t v45 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v545 + 8, (uint64_t)__sz);
      unint64_t v46 = v45;
      unint64_t v23 = *((void *)&v544 + 1);
      if (*((void *)&v544 + 1))
      {
        uint8x8_t v47 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v544 + 8));
        v47.i16[0] = vaddlv_u8(v47);
        unint64_t v48 = v47.u32[0];
        if (v47.u32[0] > 1uLL)
        {
          unint64_t v1 = v45;
          if (v45 >= *((void *)&v544 + 1)) {
            unint64_t v1 = v45 % *((void *)&v544 + 1);
          }
        }
        else
        {
          unint64_t v1 = (*((void *)&v544 + 1) - 1) & v45;
        }
        int16x8_t v49 = *(unsigned __int8 ***)(v544 + 8 * v1);
        if (v49)
        {
          for (uint64_t i = *v49; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v51 = *((void *)i + 1);
            if (v51 == v46)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v546, i + 16, __sz)) {
                goto LABEL_144;
              }
            }
            else
            {
              if (v48 > 1)
              {
                if (v51 >= v23) {
                  v51 %= v23;
                }
              }
              else
              {
                v51 &= v23 - 1;
              }
              if (v51 != v1) {
                break;
              }
            }
          }
        }
      }
      CFNumberRef v52 = (char *)operator new(0x40uLL);
      uint64_t v53 = v52;
      v555.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      v555.__r_.__value_.__l.__size_ = (std::string::size_type)&v545;
      v555.__r_.__value_.__s.__data_[16] = 0;
      *(void *)CFNumberRef v52 = 0;
      *((void *)v52 + 1) = v46;
      if ((__sz[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v52 + 16), *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
      }
      else
      {
        *((_OWORD *)v52 + 1) = *(_OWORD *)__sz;
        *((void *)v52 + 4) = *(void *)&__sz[16];
      }
      uint32_t v54 = (std::string *)(v53 + 40);
      if ((__sz[47] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)&__sz[24], *(std::string::size_type *)&__sz[32]);
      }
      else
      {
        *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz[24];
        *((void *)v53 + 7) = *(void *)&__sz[40];
      }
      v555.__r_.__value_.__s.__data_[16] = 1;
      float v55 = (float)(unint64_t)(*((void *)&v545 + 1) + 1);
      if (!v23 || (float)(v546[0] * (float)v23) < v55)
      {
        BOOL v56 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3) {
          BOOL v56 = 1;
        }
        unint64_t v57 = v56 | (2 * v23);
        unint64_t v58 = vcvtps_u32_f32(v55 / v546[0]);
        if (v57 <= v58) {
          size_t v59 = v58;
        }
        else {
          size_t v59 = v57;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)&v544, v59);
        unint64_t v23 = *((void *)&v544 + 1);
        if ((*((void *)&v544 + 1) & (*((void *)&v544 + 1) - 1)) != 0)
        {
          if (v46 >= *((void *)&v544 + 1)) {
            unint64_t v1 = v46 % *((void *)&v544 + 1);
          }
          else {
            unint64_t v1 = v46;
          }
        }
        else
        {
          unint64_t v1 = (*((void *)&v544 + 1) - 1) & v46;
        }
      }
      int v60 = *(void **)(v544 + 8 * v1);
      if (v60)
      {
        *(void *)v555.__r_.__value_.__l.__data_ = *v60;
        void *v60 = v555.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(void *)v555.__r_.__value_.__l.__data_ = v545;
        *(void *)&long long v545 = v555.__r_.__value_.__r.__words[0];
        *(void *)(v544 + 8 * v1) = &v545;
        if (*(void *)v555.__r_.__value_.__l.__data_)
        {
          unint64_t v61 = *(void *)(*(void *)v555.__r_.__value_.__l.__data_ + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v61 >= v23) {
              v61 %= v23;
            }
          }
          else
          {
            v61 &= v23 - 1;
          }
          *(void *)(v544 + 8 * v61) = v555.__r_.__value_.__r.__words[0];
        }
      }
      v555.__r_.__value_.__r.__words[0] = 0;
      ++*((void *)&v545 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v555, 0);
      goto LABEL_144;
    }
    while (1)
    {
      unint64_t v33 = v32[1];
      if (v33 == v28) {
        break;
      }
      if (v30 > 1)
      {
        if (v33 >= v23) {
          v33 %= v23;
        }
      }
      else
      {
        v33 &= v23 - 1;
      }
      if (v33 != v1) {
        goto LABEL_75;
      }
LABEL_74:
      __int16 v32 = (uint64_t *)*v32;
      if (!v32) {
        goto LABEL_75;
      }
    }
    uint64_t v34 = v32 + 2;
    if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v549, (unsigned __int8 *)v32 + 16, __sz) & 1) == 0) {
      goto LABEL_74;
    }
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v62 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v63 = (std::string::size_type)v535;
        if (*((char *)this + 655) < 0) {
          std::string::size_type v63 = *v535;
        }
        if (*((char *)v32 + 39) < 0) {
          uint64_t v34 = (void *)*v34;
        }
        LODWORD(v555.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v555.__r_.__value_.__r.__words + 4) = v63;
        WORD2(v555.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v555.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)this;
        HIWORD(v555.__r_.__value_.__r.__words[2]) = 2080;
        v556 = v34;
        CFStringRef v64 = v62;
        int v65 = "[%s|%p] failed to insert %s, key already exists.";
        uint32_t v66 = 32;
        goto LABEL_164;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v67 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v32 + 39) < 0) {
          uint64_t v34 = (void *)*v34;
        }
        LODWORD(v555.__r_.__value_.__l.__data_) = 134218242;
        *(std::string::size_type *)((char *)v555.__r_.__value_.__r.__words + 4) = (std::string::size_type)this;
        WORD2(v555.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v555.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
        CFStringRef v64 = v67;
        int v65 = "[%p] failed to insert %s, key already exists.";
        uint32_t v66 = 22;
LABEL_164:
        _os_log_error_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_ERROR, v65, (uint8_t *)&v555, v66);
      }
    }
LABEL_144:
    if ((__sz[47] & 0x80000000) != 0) {
      operator delete(*(void **)&__sz[24]);
    }
    if ((__sz[23] & 0x80000000) != 0) {
      operator delete(*(void **)__sz);
    }
    ++*(void *)&v558[8];
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  if ((void)v540)
  {
    *((void *)&v540 + 1) = v540;
    operator delete((void *)v540);
  }
  if (v559)
  {
    v560 = v559;
    operator delete(v559);
  }
  if (*(void *)&v558[16])
  {
    *(void *)&v558[24] = *(void *)&v558[16];
    operator delete(*(void **)&v558[16]);
  }
  memset(v538, 0, sizeof(v538));
  v534 = (void *)((char *)this + 736);
  if (*((void *)this + 92) && !*((unsigned char *)this + 898)) {
    goto LABEL_319;
  }
  if (_os_feature_enabled_impl())
  {
    CFDictionaryRef v68 = (const __CFDictionary *)*((void *)this + 124);
    if (v68)
    {
      if (CFDictionaryGetCount(v68))
      {
        std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((void *)this + 100, *((uint64_t **)this + 128), *((uint64_t **)this + 129), (uint64_t)(*((void *)this + 129) - *((void *)this + 128)) >> 3);
        CFTypeRef v69 = (const void *)*((void *)this + 131);
        if (v69) {
          CFRetain(*((CFTypeRef *)this + 131));
        }
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v558, v69);
        uint64_t v70 = (const void *)*((void *)this + 103);
        *((void *)this + 103) = *(void *)v558;
        *(void *)v558 = v70;
        if (v70) {
          CFRelease(v70);
        }
        uint64_t v71 = (const void *)*((void *)this + 132);
        if (v71) {
          CFRetain(*((CFTypeRef *)this + 132));
        }
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v558, v71);
        size_t v72 = (const void *)*((void *)this + 104);
        *((void *)this + 104) = *(void *)v558;
        *(void *)v558 = v72;
        if (v72) {
          CFRelease(v72);
        }
        uint64_t v73 = (const void *)*((void *)this + 133);
        if (v73) {
          CFRetain(*((CFTypeRef *)this + 133));
        }
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v558, v73);
        uint64_t v74 = (const void *)*((void *)this + 105);
        *((void *)this + 105) = *(void *)v558;
        *(void *)v558 = v74;
        if (v74) {
          CFRelease(v74);
        }
        unint64_t v75 = (const void *)*((void *)this + 83);
        uint64_t v76 = (const void *)*((void *)this + 134);
        *((void *)this + 83) = v76;
        if (v76) {
          CFRetain(v76);
        }
        if (v75) {
          CFRelease(v75);
        }
        unint64_t v77 = (const void *)*((void *)this + 84);
        uint64_t v78 = (const void *)*((void *)this + 135);
        *((void *)this + 84) = v78;
        if (v78) {
          CFRetain(v78);
        }
        if (v77) {
          CFRelease(v77);
        }
      }
    }
  }
  uint64_t v79 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  if (!*((unsigned char *)this + 624))
  {
    if (*((unsigned char *)this + 592))
    {
      float v85 = (char **)((char *)this + 568);
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v86 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_316;
        }
        int v87 = v535;
        if (*((char *)this + 655) < 0) {
          int v87 = (std::string::size_type *)*v535;
        }
        int16x8_t v88 = (char *)this + 568;
        if (*((char *)this + 591) < 0) {
          int16x8_t v88 = *v85;
        }
        *(_DWORD *)v558 = 136315650;
        *(void *)&v558[4] = v87;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        *(_WORD *)&v558[22] = 2080;
        *(void *)&v558[24] = v88;
        uint64_t v89 = "[%s|%p] compiling graph file: '%s'";
        uint32_t v90 = v86;
        uint32_t v91 = 32;
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v136 = getAUDSPGraphLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_316;
        }
        uint64_t v137 = (char *)this + 568;
        if (*((char *)this + 591) < 0) {
          uint64_t v137 = *v85;
        }
        *(_DWORD *)v558 = 134218242;
        *(void *)&v558[4] = this;
        *(_WORD *)&v558[12] = 2080;
        *(void *)&v558[14] = v137;
        uint64_t v89 = "[%p] compiling graph file: '%s'";
        uint32_t v90 = v136;
        uint32_t v91 = 22;
      }
      _os_log_impl(&dword_1BB0CE000, v90, OS_LOG_TYPE_DEFAULT, v89, v558, v91);
LABEL_316:
      DSPGraph::Interpreter::compileFile();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v534, (uint64_t *)v558);
      uint64_t v138 = *(void *)v558;
      *(void *)v558 = 0;
      if (v138) {
        (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
      }
      goto LABEL_318;
    }
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v95 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v96 = v535;
        if (*((char *)this + 655) < 0) {
          uint64_t v96 = (std::string::size_type *)*v535;
        }
        *(_DWORD *)v558 = 136315394;
        *(void *)&v558[4] = v96;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        uint64_t v97 = "[%s|%p] patcher mode is enabled";
        CFMutableArrayRef v98 = v95;
        uint32_t v99 = 22;
        goto LABEL_671;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v293 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v558 = 134217984;
        *(void *)&v558[4] = this;
        uint64_t v97 = "[%p] patcher mode is enabled";
        CFMutableArrayRef v98 = v293;
        uint32_t v99 = 12;
LABEL_671:
        _os_log_impl(&dword_1BB0CE000, v98, OS_LOG_TYPE_DEFAULT, v97, v558, v99);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v558, "graphName \"");
    if (*((unsigned char *)this + 656))
    {
      if (*((char *)this + 655) >= 0) {
        size_t v294 = *((unsigned __int8 *)this + 655);
      }
      else {
        size_t v294 = *((void *)this + 80);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v294 + 2);
      if ((SBYTE7(v540) & 0x80u) == 0) {
        float v295 = __p;
      }
      else {
        float v295 = (void **)__p[0];
      }
      if (v294)
      {
        if (*((char *)this + 655) >= 0) {
          float v296 = v535;
        }
        else {
          float v296 = (std::string::size_type *)*((void *)this + 79);
        }
        memmove(v295, v296, v294);
      }
      strcpy((char *)v295 + v294, "\"\n");
      if ((SBYTE7(v540) & 0x80u) == 0) {
        float v297 = __p;
      }
      else {
        float v297 = (void **)__p[0];
      }
      if ((SBYTE7(v540) & 0x80u) == 0) {
        std::string::size_type v298 = BYTE7(v540);
      }
      else {
        std::string::size_type v298 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)v558, (const std::string::value_type *)v297, v298);
      if (SBYTE7(v540) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::append((std::string *)v558, "Default Matrix Patcher (No graph specified)\"\n", 0x2DuLL);
    }
    if (v558[23] >= 0) {
      size_t v299 = v558[23];
    }
    else {
      size_t v299 = *(void *)&v558[8];
    }
    unint64_t v23 = (unint64_t)&v554;
    std::string::basic_string[abi:ne180100]((uint64_t)&v554, v299 + 9);
    if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v300 = &v554;
    }
    else {
      float v300 = (std::string *)v554.__r_.__value_.__r.__words[0];
    }
    if (v299)
    {
      if (v558[23] >= 0) {
        int v301 = v558;
      }
      else {
        int v301 = *(unsigned char **)v558;
      }
      memmove(v300, v301, v299);
    }
    strcpy((char *)v300 + v299, "in input\n");
    float32x2_t v302 = std::string::append(&v554, "out output\n", 0xBuLL);
    long long v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
    v568.__r_.__value_.__r.__words[2] = v302->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v568.__r_.__value_.__l.__data_ = v303;
    v302->__r_.__value_.__l.__size_ = 0;
    v302->__r_.__value_.__r.__words[2] = 0;
    v302->__r_.__value_.__r.__words[0] = 0;
    float32x2_t v304 = std::string::append(&v568, "box MatrixPatcher (aufx pchr appl) 1 1\n", 0x27uLL);
    long long v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
    v555.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v555.__r_.__value_.__l.__data_ = v305;
    v304->__r_.__value_.__l.__size_ = 0;
    v304->__r_.__value_.__r.__words[2] = 0;
    v304->__r_.__value_.__r.__words[0] = 0;
    int v306 = std::string::append(&v555, "wire input MatrixPatcher ([sampleRate] [numIns])\n", 0x31uLL);
    long long v307 = *(_OWORD *)&v306->__r_.__value_.__l.__data_;
    *(void *)&__sz[16] = *((void *)&v306->__r_.__value_.__l + 2);
    *(_OWORD *)__sz = v307;
    v306->__r_.__value_.__l.__size_ = 0;
    v306->__r_.__value_.__r.__words[2] = 0;
    v306->__r_.__value_.__r.__words[0] = 0;
    v308 = std::string::append((std::string *)__sz, "wire MatrixPatcher output ([sampleRate] [numOuts])\n", 0x33uLL);
    long long v309 = *(_OWORD *)&v308->__r_.__value_.__l.__data_;
    *(void *)&long long v540 = *((void *)&v308->__r_.__value_.__l + 2);
    *(_OWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = v309;
    v308->__r_.__value_.__l.__size_ = 0;
    v308->__r_.__value_.__r.__words[2] = 0;
    v308->__r_.__value_.__r.__words[0] = 0;
    if ((__sz[23] & 0x80000000) != 0) {
      operator delete(*(void **)__sz);
    }
    if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v555.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v568.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v554.__r_.__value_.__l.__data_);
    }
    memset(__sz, 0, 24);
    DSPGraph::Interpreter::compileText();
    std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v534, (uint64_t *)&v568);
    std::string::size_type v310 = v568.__r_.__value_.__r.__words[0];
    v568.__r_.__value_.__r.__words[0] = 0;
    if (v310) {
      (*(void (**)(std::string::size_type))(*(void *)v310 + 8))(v310);
    }
    v555.__r_.__value_.__r.__words[0] = (std::string::size_type)__sz;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v555);
    *((unsigned char *)this + 898) = 1;
    CFDictionaryRef v311 = (const __CFDictionary *)*((void *)this + 86);
    if (!v311 || !CFDictionaryGetCount(v311)) {
      goto LABEL_1097;
    }
    std::string::basic_string[abi:ne180100]<0>(__sz, "MatrixPatcher");
    uint64_t v312 = DSPGraph::Graph::box();
    if ((__sz[23] & 0x80000000) != 0) {
      operator delete(*(void **)__sz);
    }
    if (!v312) {
      goto LABEL_1097;
    }
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v313 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_1096;
      }
      float v314 = v535;
      if (*((char *)this + 655) < 0) {
        float v314 = (std::string::size_type *)*v535;
      }
      *(_DWORD *)__sz = 136315394;
      *(void *)&__sz[4] = v314;
      *(_WORD *)&__sz[12] = 2048;
      *(void *)&__sz[14] = this;
      float v315 = "[%s|%p] setting I/O channel names on MatrixPatcher box";
      float v316 = v313;
      uint32_t v317 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v508 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_1096;
      }
      *(_DWORD *)__sz = 134217984;
      *(void *)&__sz[4] = this;
      float v315 = "[%p] setting I/O channel names on MatrixPatcher box";
      float v316 = v508;
      uint32_t v317 = 12;
    }
    _os_log_debug_impl(&dword_1BB0CE000, v316, OS_LOG_TYPE_DEBUG, v315, __sz, v317);
LABEL_1096:
    *(void *)__sz = *((void *)this + 86);
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned char *))(*(void *)v312 + 312))(v312, 1667788397, 0, 0, 8, __sz);
LABEL_1097:
    if (SBYTE7(v540) < 0) {
      operator delete(__p[0]);
    }
    if ((v558[23] & 0x80000000) != 0) {
      operator delete(*(void **)v558);
    }
    goto LABEL_319;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v80 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v81 = v535;
      if (*((char *)this + 655) < 0) {
        uint64_t v81 = (std::string::size_type *)*v535;
      }
      *(_DWORD *)v558 = 136315394;
      *(void *)&v558[4] = v81;
      *(_WORD *)&v558[12] = 2048;
      *(void *)&v558[14] = this;
      BOOL v82 = "[%s|%p] compiling graph text";
      uint64_t v83 = v80;
      uint32_t v84 = 22;
LABEL_222:
      _os_log_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_DEFAULT, v82, v558, v84);
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v92 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v558 = 134217984;
      *(void *)&v558[4] = this;
      BOOL v82 = "[%p] compiling graph text";
      uint64_t v83 = v92;
      uint32_t v84 = 12;
      goto LABEL_222;
    }
  }
  if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_301;
  }
  if (!*((unsigned char *)this + 624)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*((char *)this + 623) < 0)
  {
    uint64_t v94 = (char *)*((void *)this + 75);
    unint64_t v93 = *((void *)this + 76);
  }
  else
  {
    unint64_t v93 = *((unsigned __int8 *)this + 623);
    uint64_t v94 = (char *)this + 600;
  }
  unint64_t v100 = 0;
  uint32_t v101 = 0;
  uint64_t v102 = 0;
  unint64_t v103 = 0;
  float v104 = &v94[v93];
  while (1)
  {
    float v105 = (char *)(v93 - v103);
    if (v93 < v103) {
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    }
    uint32_t v106 = &v94[v103];
    size_t v107 = v93 - v103;
    if ((uint64_t)(v93 - v103) < 1) {
      break;
    }
    unint64_t v108 = &v94[v103];
    while (1)
    {
      int v109 = (char *)memchr(v108, 10, v107);
      if (!v109) {
        goto LABEL_268;
      }
      if (*v109 == 10) {
        break;
      }
      unint64_t v108 = v109 + 1;
      size_t v107 = v104 - v108;
      if (v104 - v108 < 1) {
        goto LABEL_268;
      }
    }
    if (v109 == v104) {
      break;
    }
    uint64_t v110 = v109 - v94;
    if (v109 - v94 == -1) {
      break;
    }
    if ((unint64_t)v105 >= v110 - v103) {
      uint64_t v111 = (char *)(v110 - v103);
    }
    else {
      uint64_t v111 = (char *)(v93 - v103);
    }
    if ((unint64_t)v101 >= v100)
    {
      uint64_t v113 = (v101 - v102) >> 4;
      unint64_t v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 60) {
        goto LABEL_1137;
      }
      if ((uint64_t)(v100 - (void)v102) >> 3 > v114) {
        unint64_t v114 = (uint64_t)(v100 - (void)v102) >> 3;
      }
      if (v100 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v115 = v114;
      }
      if (v115) {
        unint64_t v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v115);
      }
      else {
        uint64_t v116 = 0;
      }
      uint64_t v117 = (char **)(v115 + 16 * v113);
      const AudioBufferList *v117 = v106;
      v117[1] = v111;
      if (v101 == v102)
      {
        uint64_t v102 = (char *)(v115 + 16 * v113);
      }
      else
      {
        long long v118 = (char *)(v115 + 16 * v113);
        do
        {
          *((_OWORD *)v118 - 1) = *((_OWORD *)v101 - 1);
          v118 -= 16;
          v101 -= 16;
        }
        while (v101 != v102);
        uint32_t v101 = v102;
        uint64_t v102 = v118;
      }
      unint64_t v100 = v115 + 16 * v116;
      uint64_t v112 = (char *)(v117 + 2);
      if (v101) {
        operator delete(v101);
      }
    }
    else
    {
      *(void *)uint32_t v101 = v106;
      *((void *)v101 + 1) = v111;
      uint64_t v112 = v101 + 16;
    }
    unint64_t v103 = v110 + 1;
    uint32_t v101 = v112;
  }
LABEL_268:
  if ((unint64_t)v101 >= v100)
  {
    uint64_t v120 = (v101 - v102) >> 4;
    unint64_t v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60) {
LABEL_1137:
    }
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v100 - (void)v102) >> 3 > v121) {
      unint64_t v121 = (uint64_t)(v100 - (void)v102) >> 3;
    }
    if (v100 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v122 = v121;
    }
    if (v122) {
      unint64_t v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v122);
    }
    uint64_t v123 = (char **)(v122 + 16 * v120);
    *uint64_t v123 = v106;
    v123[1] = v105;
    UInt32 v119 = (char *)(v123 + 2);
    if (v101 != v102)
    {
      do
      {
        *((_OWORD *)v123 - 1) = *((_OWORD *)v101 - 1);
        v123 -= 2;
        v101 -= 16;
      }
      while (v101 != v102);
      uint32_t v101 = v102;
    }
    uint64_t v102 = (char *)v123;
    if (v101) {
      operator delete(v101);
    }
  }
  else
  {
    *(void *)uint32_t v101 = v106;
    *((void *)v101 + 1) = v105;
    UInt32 v119 = v101 + 16;
  }
  if (v102 == v119) {
    goto LABEL_300;
  }
  uint64_t v124 = 0;
  long long v125 = v102;
  while (2)
  {
    long long v127 = *(void **)v125;
    uint64_t v126 = *((void *)v125 + 1);
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v128 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v129 = v535;
        if (*((char *)this + 655) < 0) {
          uint64_t v129 = (std::string::size_type *)*v535;
        }
        uint64_t v130 = v124 + 1;
        *(_DWORD *)v558 = 136316162;
        *(void *)&v558[4] = v129;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        *(_WORD *)&v558[22] = 2048;
        *(void *)&v558[24] = v124;
        *(_WORD *)&v558[32] = 1040;
        *(_DWORD *)&v558[34] = v126;
        *(_WORD *)&v558[38] = 2080;
        v559 = v127;
        unint64_t v131 = v128;
        uint64_t v132 = "[%s|%p] [%2lu]: %.*s";
        uint32_t v133 = 48;
LABEL_298:
        _os_log_debug_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_DEBUG, v132, v558, v133);
        uint64_t v124 = v130;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v134 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v130 = v124 + 1;
        *(_DWORD *)v558 = 134218754;
        *(void *)&v558[4] = this;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = v124;
        *(_WORD *)&v558[22] = 1040;
        *(_DWORD *)&v558[24] = v126;
        *(_WORD *)&v558[28] = 2080;
        *(void *)&v558[30] = v127;
        unint64_t v131 = v134;
        uint64_t v132 = "[%p] [%2lu]: %.*s";
        uint32_t v133 = 38;
        goto LABEL_298;
      }
    }
    v125 += 16;
    if (v125 != v119) {
      continue;
    }
    break;
  }
  if (v102) {
LABEL_300:
  }
    operator delete(v102);
LABEL_301:
  unint64_t v23 = *((void *)&v545 + 1);
  if (*((void *)&v545 + 1))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v540 = 0;
  }
  else
  {
    *(_OWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 0u;
    long long v540 = 0u;
    int v541 = 1065353216;
    memset(v537, 0, sizeof(v537));
  }
  DSPGraph::Interpreter::compileText();
  std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(v534, (uint64_t *)__sz);
  uint64_t v135 = *(void *)__sz;
  *(void *)__sz = 0;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
  }
  if (v23)
  {
    *(void *)v558 = __p;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v558);
  }
  else
  {
    *(void *)v558 = v537;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v558);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  }
LABEL_318:
  *((unsigned char *)this + 898) = 0;
LABEL_319:
  if (!*v534)
  {
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v146 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_845;
      }
      uint64_t v147 = v535;
      if (*((char *)this + 655) < 0) {
        uint64_t v147 = (std::string::size_type *)*v535;
      }
      *(_DWORD *)v558 = 136315394;
      *(void *)&v558[4] = v147;
      *(_WORD *)&v558[12] = 2048;
      *(void *)&v558[14] = this;
      uint64_t v148 = "[%s|%p] failed to create DSPGraph instance";
      uint64_t v149 = v146;
      uint32_t v150 = 22;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v151 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_845;
      }
      *(_DWORD *)v558 = 134217984;
      *(void *)&v558[4] = this;
      uint64_t v148 = "[%p] failed to create DSPGraph instance";
      uint64_t v149 = v151;
      uint32_t v150 = 12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v149, OS_LOG_TYPE_ERROR, v148, v558, v150);
LABEL_845:
    int v257 = 1;
    goto LABEL_846;
  }
  if (*((void *)this + 127))
  {
    for (uint64_t j = *(uint64_t ***)(*v534 + 24); j; uint64_t j = (uint64_t **)*j)
    {
      (*(void (**)(unsigned char *__return_ptr))(*j[2] + 208))(v558);
      if (*(_DWORD *)&v558[4] == 1685287015)
      {
        applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)v558, (const UInt8 **)this + 125);
        *(void *)__sz = *(void *)v558;
        (*(void (**)(uint64_t *, uint64_t, void, void, uint64_t, unsigned char *))(*j[2] + 312))(j[2], 1886548853, 0, 0, 8, __sz);
        if (*(void *)v558) {
          CFRelease(*(CFTypeRef *)v558);
        }
      }
    }
  }
  CFDictionaryRef v140 = (const __CFDictionary *)*((void *)this + 84);
  if (v140 && CFDictionaryGetCount(v140))
  {
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v141 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        long long v142 = v535;
        if (*((char *)this + 655) < 0) {
          long long v142 = (std::string::size_type *)*v535;
        }
        *(_DWORD *)v558 = 136315394;
        *(void *)&v558[4] = v142;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        long long v143 = "[%s|%p] setting .propstrip on DSPGraph";
        long long v144 = v141;
        uint32_t v145 = 22;
LABEL_351:
        _os_log_impl(&dword_1BB0CE000, v144, OS_LOG_TYPE_DEFAULT, v143, v558, v145);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v152 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v558 = 134217984;
        *(void *)&v558[4] = this;
        long long v143 = "[%p] setting .propstrip on DSPGraph";
        long long v144 = v152;
        uint32_t v145 = 12;
        goto LABEL_351;
      }
    }
    DSPGraph::Graph::setPropertyStrip(*((DSPGraph::Graph **)this + 92), *((const __CFDictionary **)this + 84), *((const __CFString **)this + 85));
  }
  CFDictionaryRef v153 = (const __CFDictionary *)*((void *)this + 83);
  if (v153 && CFDictionaryGetCount(v153))
  {
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v154 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v155 = v535;
        if (*((char *)this + 655) < 0) {
          uint64_t v155 = (std::string::size_type *)*v535;
        }
        *(_DWORD *)v558 = 136315394;
        *(void *)&v558[4] = v155;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        int v156 = "[%s|%p] setting .austrip on DSPGraph";
        int v157 = v154;
        uint32_t v158 = 22;
LABEL_366:
        _os_log_impl(&dword_1BB0CE000, v157, OS_LOG_TYPE_DEFAULT, v156, v558, v158);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v159 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v558 = 134217984;
        *(void *)&v558[4] = this;
        int v156 = "[%p] setting .austrip on DSPGraph";
        int v157 = v159;
        uint32_t v158 = 12;
        goto LABEL_366;
      }
    }
    DSPGraph::Graph::setAUStrip(*((DSPGraph::Graph **)this + 92), *((const __CFDictionary **)this + 83));
  }
  uint64_t v160 = this;
  if (!*((unsigned char *)this + 898))
  {
    DSPGraph::Graph::getFormatNames((uint64_t *)__sz, (DSPGraph::Graph *)*v534);
    uint64_t v161 = *(void *)__sz;
    for (uint64_t k = *(void *)&__sz[8]; v161 != k; v161 += 24)
    {
      v555.__r_.__value_.__r.__words[0] = 0;
      DSPGraph::Graph::getFormat();
      if (v555.__r_.__value_.__r.__words[0])
      {
        std::string::basic_string[abi:ne180100]<0>(v558, "input");
        int v163 = v558[23];
        float v164 = *(void **)v558;
        if (v558[23] >= 0) {
          unint64_t v165 = v558[23];
        }
        else {
          unint64_t v165 = *(void *)&v558[8];
        }
        if (*(char *)(v161 + 23) < 0)
        {
          if (v165 == -1) {
LABEL_1124:
          }
            std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__throw_out_of_range[abi:ne180100]();
          AudioStreamBasicDescription v167 = *(const void **)v161;
          if (*(void *)(v161 + 8) >= v165) {
            size_t v166 = v165;
          }
          else {
            size_t v166 = *(void *)(v161 + 8);
          }
        }
        else
        {
          if (v165 == -1) {
            goto LABEL_1124;
          }
          if (*(unsigned __int8 *)(v161 + 23) >= v165) {
            size_t v166 = v165;
          }
          else {
            size_t v166 = *(unsigned __int8 *)(v161 + 23);
          }
          AudioStreamBasicDescription v167 = (const void *)v161;
        }
        if (v558[23] >= 0) {
          __int16 v174 = v558;
        }
        else {
          __int16 v174 = *(unsigned char **)v558;
        }
        BOOL v176 = !memcmp(v167, v174, v166) && v166 == v165;
        if (v163 < 0)
        {
          operator delete(v164);
          if (v176)
          {
LABEL_404:
            __n128 v177 = *(__n128 *)v530;
            long long v178 = *(_OWORD *)(v530 + 16);
            *(_OWORD *)v558 = *(_OWORD *)v530;
            *(_OWORD *)&v558[16] = v178;
            uint64_t v179 = *(void *)(v530 + 32);
LABEL_441:
            *(void *)&v558[32] = v179;
            AUDSPGraph::Initialize(void)::$_1::operator()((uint64_t *)v555.__r_.__value_.__l.__data_, (void *)v161, (uint64_t *)v558, v177);
            continue;
          }
        }
        else if (v176)
        {
          goto LABEL_404;
        }
        std::string::basic_string[abi:ne180100]<0>(v558, "output");
        int v180 = v558[23];
        long long v181 = *(void **)v558;
        if (v558[23] >= 0) {
          unint64_t v182 = v558[23];
        }
        else {
          unint64_t v182 = *(void *)&v558[8];
        }
        if (*(char *)(v161 + 23) < 0)
        {
          if (v182 == -1) {
LABEL_1132:
          }
            std::basic_string<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::__throw_out_of_range[abi:ne180100]();
          float v184 = *(const void **)v161;
          if (*(void *)(v161 + 8) >= v182) {
            size_t v183 = v182;
          }
          else {
            size_t v183 = *(void *)(v161 + 8);
          }
        }
        else
        {
          if (v182 == -1) {
            goto LABEL_1132;
          }
          if (*(unsigned __int8 *)(v161 + 23) >= v182) {
            size_t v183 = v182;
          }
          else {
            size_t v183 = *(unsigned __int8 *)(v161 + 23);
          }
          float v184 = (const void *)v161;
        }
        if (v558[23] >= 0) {
          float v187 = v558;
        }
        else {
          float v187 = *(unsigned char **)v558;
        }
        BOOL v189 = !memcmp(v184, v187, v183) && v183 == v182;
        if (v180 < 0)
        {
          operator delete(v181);
          if (!v189) {
            continue;
          }
        }
        else if (!v189)
        {
          continue;
        }
        if (v532)
        {
          v558[0] = v527;
          *(_OWORD *)&v558[1] = v567[0];
          __n128 v177 = *(__n128 *)((char *)v567 + 11);
          *(_OWORD *)&v558[12] = *(_OWORD *)((char *)v567 + 11);
          *(_DWORD *)&v558[28] = __val;
          uint64_t v179 = v526;
          goto LABEL_441;
        }
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v190 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
            continue;
          }
          float v191 = v535;
          if (*((char *)this + 655) < 0) {
            float v191 = (std::string::size_type *)*v535;
          }
          float v192 = (const void *)v161;
          if (*(char *)(v161 + 23) < 0) {
            float v192 = *(const void **)v161;
          }
          *(_DWORD *)v558 = 136315650;
          *(void *)&v558[4] = v191;
          *(_WORD *)&v558[12] = 2048;
          *(void *)&v558[14] = this;
          *(_WORD *)&v558[22] = 2080;
          *(void *)&v558[24] = v192;
          float v193 = v190;
          float v194 = "[%s|%p] failed to update output format \"%s\"";
          uint32_t v195 = 32;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v196 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
            continue;
          }
          float v197 = (const void *)v161;
          if (*(char *)(v161 + 23) < 0) {
            float v197 = *(const void **)v161;
          }
          *(_DWORD *)v558 = 134218242;
          *(void *)&v558[4] = this;
          *(_WORD *)&v558[12] = 2080;
          *(void *)&v558[14] = v197;
          float v193 = v196;
          float v194 = "[%p] failed to update output format \"%s\"";
          uint32_t v195 = 22;
        }
        _os_log_impl(&dword_1BB0CE000, v193, OS_LOG_TYPE_DEFAULT, v194, v558, v195);
      }
      else
      {
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v168 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            continue;
          }
          char v169 = v535;
          if (*((char *)this + 655) < 0) {
            char v169 = (std::string::size_type *)*v535;
          }
          long long v170 = (const void *)v161;
          if (*(char *)(v161 + 23) < 0) {
            long long v170 = *(const void **)v161;
          }
          *(_DWORD *)v558 = 136315650;
          *(void *)&v558[4] = v169;
          *(_WORD *)&v558[12] = 2048;
          *(void *)&v558[14] = this;
          *(_WORD *)&v558[22] = 2080;
          *(void *)&v558[24] = v170;
          float v171 = v168;
          float v172 = "[%s|%p] Failed to get format and block size for named format '%s'";
          uint32_t v173 = 32;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v185 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            continue;
          }
          float v186 = (const void *)v161;
          if (*(char *)(v161 + 23) < 0) {
            float v186 = *(const void **)v161;
          }
          *(_DWORD *)v558 = 134218242;
          *(void *)&v558[4] = this;
          *(_WORD *)&v558[12] = 2080;
          *(void *)&v558[14] = v186;
          float v171 = v185;
          float v172 = "[%p] Failed to get format and block size for named format '%s'";
          uint32_t v173 = 22;
        }
        _os_log_error_impl(&dword_1BB0CE000, v171, OS_LOG_TYPE_ERROR, v172, v558, v173);
      }
    }
    *(void *)v558 = __sz;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v558);
    uint64_t v160 = this;
  }
  int v198 = *((unsigned __int8 *)v160 + 376);
  int v199 = *((unsigned __int8 *)v160 + 656);
  if (!v198)
  {
    if (v199)
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v206 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        int v207 = v535;
        unint64_t v23 = (unint64_t)this;
        if (*((char *)this + 655) < 0) {
          int v207 = (std::string::size_type *)*v535;
        }
        int v208 = *((_DWORD *)this + 84);
        *(_DWORD *)v558 = 136315650;
        *(void *)&v558[4] = v207;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        *(_WORD *)&v558[22] = 1024;
        *(_DWORD *)&v558[24] = v208;
        unint64_t v203 = "[%s|%p] setting variable slice duration with block size: %d";
        float v204 = v206;
        uint32_t v205 = 28;
        goto LABEL_480;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v211 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v23 = (unint64_t)this;
        int v212 = *((_DWORD *)this + 84);
        *(_DWORD *)v558 = 134218240;
        *(void *)&v558[4] = this;
        *(_WORD *)&v558[12] = 1024;
        *(_DWORD *)&v558[14] = v212;
        unint64_t v203 = "[%p] setting variable slice duration with block size: %d";
        float v204 = v211;
        uint32_t v205 = 18;
        goto LABEL_480;
      }
    }
    unint64_t v23 = (unint64_t)this;
    goto LABEL_486;
  }
  if (!v199)
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v209 = getAUDSPGraphLog(void)::gLog;
    unint64_t v23 = (unint64_t)this;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_486;
    }
    int v210 = *((_DWORD *)this + 84);
    *(_DWORD *)v558 = 134218240;
    *(void *)&v558[4] = this;
    *(_WORD *)&v558[12] = 1024;
    *(_DWORD *)&v558[14] = v210;
    unint64_t v203 = "[%p] setting fixed slice duration with block size: %d";
    float v204 = v209;
    uint32_t v205 = 18;
LABEL_480:
    _os_log_impl(&dword_1BB0CE000, v204, OS_LOG_TYPE_DEFAULT, v203, v558, v205);
    goto LABEL_486;
  }
  if (getAUDSPGraphLog(void)::onceToken != -1) {
    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
  }
  uint64_t v200 = getAUDSPGraphLog(void)::gLog;
  unint64_t v23 = (unint64_t)this;
  if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    float v201 = v535;
    if (*((char *)this + 655) < 0) {
      float v201 = (std::string::size_type *)*v535;
    }
    int v202 = *((_DWORD *)this + 84);
    *(_DWORD *)v558 = 136315650;
    *(void *)&v558[4] = v201;
    *(_WORD *)&v558[12] = 2048;
    *(void *)&v558[14] = this;
    *(_WORD *)&v558[22] = 1024;
    *(_DWORD *)&v558[24] = v202;
    unint64_t v203 = "[%s|%p] setting fixed slice duration with block size: %d";
    float v204 = v200;
    uint32_t v205 = 28;
    goto LABEL_480;
  }
LABEL_486:
  DSPGraph::Graph::setSliceDuration();
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v213 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      float v214 = v535;
      if (*((char *)this + 655) < 0) {
        float v214 = (std::string::size_type *)*v535;
      }
      *(_DWORD *)v558 = 136315394;
      *(void *)&v558[4] = v214;
      *(_WORD *)&v558[12] = 2048;
      *(void *)&v558[14] = this;
      float v215 = "[%s|%p] configuring DSPGraph";
      float v216 = v213;
      uint32_t v217 = 22;
      goto LABEL_497;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v218 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v558 = 134217984;
      *(void *)&v558[4] = this;
      float v215 = "[%p] configuring DSPGraph";
      float v216 = v218;
      uint32_t v217 = 12;
LABEL_497:
      _os_log_impl(&dword_1BB0CE000, v216, OS_LOG_TYPE_DEFAULT, v215, v558, v217);
    }
  }
  DSPGraph::Graph::configure((DSPGraph::Graph *)*v534);
  float v220 = this;
  CFArrayRef v221 = (const __CFArray *)*((void *)this + 103);
  if (v221)
  {
    CFIndex Count = CFArrayGetCount(*((CFArrayRef *)this + 103));
    CFIndex v223 = Count;
    CFArrayRef v224 = (const __CFArray *)*((void *)this + 103);
    if (v224)
    {
      CFIndex v225 = CFArrayGetCount(*((CFArrayRef *)this + 103));
      if (!v223)
      {
LABEL_524:
        float v220 = this;
        float v235 = (const void *)*((void *)this + 103);
        *((void *)this + 103) = 0;
        if (v235) {
          CFRelease(v235);
        }
        goto LABEL_526;
      }
    }
    else
    {
      CFIndex v225 = 0;
      if (!Count) {
        goto LABEL_524;
      }
    }
    unint64_t v226 = 0;
    v219.n128_u32[1] = 0;
    unint64_t v23 = 1024;
    while (1)
    {
      if (v221 == v224 && v225 == v226) {
        goto LABEL_524;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v221, v226, (applesauce::CF::DictionaryRef *)__sz);
      if (!*(void *)__sz)
      {
        v520 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v520, "Could not construct");
      }
      int v227 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>(*(const __CFDictionary **)__sz);
      v555.__r_.__value_.__r.__words[0] = *(void *)__sz;
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v228 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          float v229 = v535;
          if (*((char *)this + 655) < 0) {
            float v229 = (std::string::size_type *)*v535;
          }
          *(_DWORD *)v558 = 136315650;
          *(void *)&v558[4] = v229;
          *(_WORD *)&v558[12] = 2048;
          *(void *)&v558[14] = this;
          *(_WORD *)&v558[22] = 1024;
          *(_DWORD *)&v558[24] = v227;
          float v230 = v228;
          BOOL v231 = "[%s|%p] setting graph property %d";
          uint32_t v232 = 28;
          goto LABEL_519;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v233 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v558 = 134218240;
          *(void *)&v558[4] = this;
          *(_WORD *)&v558[12] = 1024;
          *(_DWORD *)&v558[14] = v227;
          float v230 = v233;
          BOOL v231 = "[%p] setting graph property %d";
          uint32_t v232 = 18;
LABEL_519:
          _os_log_impl(&dword_1BB0CE000, v230, OS_LOG_TYPE_DEFAULT, v231, v558, v232);
        }
      }
      int v234 = (*(uint64_t (**)(AUDSPGraph *, uint64_t, void, void, std::string *, uint64_t))(*(void *)this + 96))(this, 1735553138, 0, 0, &v555, 8);
      if (v234)
      {
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v286 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            BOOL v287 = v535;
            if (*((char *)this + 655) < 0) {
              BOOL v287 = (std::string::size_type *)*v535;
            }
            *(_DWORD *)v558 = 136315906;
            *(void *)&v558[4] = v287;
            *(_WORD *)&v558[12] = 2048;
            *(void *)&v558[14] = this;
            *(_WORD *)&v558[22] = 1024;
            *(_DWORD *)&v558[24] = v227;
            *(_WORD *)&v558[28] = 1024;
            *(_DWORD *)&v558[30] = v234;
            BOOL v288 = "[%s|%p] failed to set graph property %d. Error code: %d";
            float v289 = v286;
            uint32_t v290 = 34;
LABEL_1113:
            _os_log_error_impl(&dword_1BB0CE000, v289, OS_LOG_TYPE_ERROR, v288, v558, v290);
          }
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v372 = getAUDSPGraphLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v558 = 134218496;
            *(void *)&v558[4] = this;
            *(_WORD *)&v558[12] = 1024;
            *(_DWORD *)&v558[14] = v227;
            *(_WORD *)&v558[18] = 1024;
            *(_DWORD *)&v558[20] = v234;
            BOOL v288 = "[%p] failed to set graph property %d. Error code: %d";
            float v289 = v372;
            uint32_t v290 = 24;
            goto LABEL_1113;
          }
        }
        float v292 = *(const void **)__sz;
        if (*(void *)__sz) {
LABEL_844:
        }
          CFRelease(v292);
        goto LABEL_845;
      }
      if (*(void *)__sz) {
        CFRelease(*(CFTypeRef *)__sz);
      }
      if (v223 == ++v226) {
        goto LABEL_524;
      }
    }
  }
  *((void *)this + 103) = 0;
LABEL_526:
  CFArrayRef v236 = (const __CFArray *)*((void *)v220 + 104);
  if (!v236)
  {
    *((void *)v220 + 104) = 0;
    goto LABEL_610;
  }
  CFIndex v237 = CFArrayGetCount(*((CFArrayRef *)v220 + 104));
  CFIndex v238 = v237;
  CFArrayRef v239 = (const __CFArray *)*((void *)this + 104);
  if (v239)
  {
    CFIndex v240 = CFArrayGetCount(*((CFArrayRef *)this + 104));
    if (!v238)
    {
LABEL_608:
      float v220 = this;
      float v266 = (const void *)*((void *)this + 104);
      *((void *)this + 104) = 0;
      if (v266) {
        CFRelease(v266);
      }
LABEL_610:
      CFArrayRef v267 = (const __CFArray *)*((void *)v220 + 105);
      if (!v267)
      {
        *((void *)v220 + 105) = 0;
        goto LABEL_625;
      }
      CFIndex v268 = CFArrayGetCount(*((CFArrayRef *)v220 + 105));
      CFIndex v269 = v268;
      CFArrayRef v270 = (const __CFArray *)*((void *)this + 105);
      if (v270)
      {
        CFIndex v271 = CFArrayGetCount(*((CFArrayRef *)this + 105));
        if (!v269)
        {
LABEL_623:
          float v220 = this;
          int v273 = (const void *)*((void *)this + 105);
          *((void *)this + 105) = 0;
          if (v273) {
            CFRelease(v273);
          }
LABEL_625:
          float v274 = (int *)*((void *)v220 + 100);
          float v275 = (int *)*((void *)v220 + 101);
          while (v274 != v275)
          {
            v219.n128_u32[0] = v274[1];
            AUDSPGraph::SetGraphParameter((uint64_t)this, *v274, v219);
            v274 += 2;
          }
          int v276 = _os_feature_enabled_impl();
          float v277 = (uint64_t *)*((void *)this + 100);
          if (v276)
          {
            float v278 = (uint64_t *)*((void *)this + 101);
            if (v278 != v277)
            {
              std::vector<std::pair<unsigned int,float>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((void *)this + 128, v277, v278, v278 - v277);
              float v277 = (uint64_t *)*((void *)this + 100);
            }
          }
          *((void *)this + 101) = v277;
          if (*((unsigned char *)this + 528)) {
            goto LABEL_632;
          }
          if (isInternalBuild())
          {
            unint64_t v23 = (unint64_t)&xmmword_1E9F7EFF8 + 8;
            goto LABEL_654;
          }
LABEL_781:
          if (*((unsigned char *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v339 = getAUDSPGraphLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_793;
            }
            float v340 = v535;
            if (*((char *)this + 655) < 0) {
              float v340 = (std::string::size_type *)*v535;
            }
            *(_DWORD *)v558 = 136315394;
            *(void *)&v558[4] = v340;
            *(_WORD *)&v558[12] = 2048;
            *(void *)&v558[14] = this;
            vDSP_Length v341 = "[%s|%p] initializing DSPGraph";
            uint64_t v342 = v339;
            uint32_t v343 = 22;
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v344 = getAUDSPGraphLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_793;
            }
            *(_DWORD *)v558 = 134217984;
            *(void *)&v558[4] = this;
            vDSP_Length v341 = "[%p] initializing DSPGraph";
            uint64_t v342 = v344;
            uint32_t v343 = 12;
          }
          _os_log_impl(&dword_1BB0CE000, v342, OS_LOG_TYPE_DEFAULT, v341, v558, v343);
LABEL_793:
          DSPGraph::Graph::initialize((DSPGraph::Graph *)*v534);
          DSPGraph::Graph::getParameterList((uint64_t *)__sz, (DSPGraph::Graph *)*v534);
          memset(v558, 0, 24);
          uint64_t v345 = (_DWORD *)*((void *)this + 113);
          int v346 = (_DWORD *)*((void *)this + 114);
          if (v345 != v346)
          {
            unsigned int v347 = 0;
            do
            {
              if ((unint64_t)v347 >= *(void *)&v558[16])
              {
                unsigned int v348 = *(_DWORD **)v558;
                uint64_t v349 = ((uint64_t)v347 - *(void *)v558) >> 2;
                unint64_t v350 = v349 + 1;
                if ((unint64_t)(v349 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v351 = *(void *)&v558[16] - *(void *)v558;
                if ((uint64_t)(*(void *)&v558[16] - *(void *)v558) >> 1 > v350) {
                  unint64_t v350 = v351 >> 1;
                }
                if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v352 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v352 = v350;
                }
                if (v352)
                {
                  float v353 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v558[16], v352);
                  unsigned int v347 = *(_DWORD **)&v558[8];
                  unsigned int v348 = *(_DWORD **)v558;
                }
                else
                {
                  float v353 = 0;
                }
                unsigned int v354 = &v353[4 * v349];
                *(_DWORD *)unsigned int v354 = *v345;
                unsigned int v355 = v354 + 4;
                while (v347 != v348)
                {
                  int v356 = *--v347;
                  *((_DWORD *)v354 - 1) = v356;
                  v354 -= 4;
                }
                *(void *)v558 = v354;
                *(void *)&v558[8] = v355;
                *(void *)&v558[16] = &v353[4 * v352];
                if (v348) {
                  operator delete(v348);
                }
                unsigned int v347 = v355;
              }
              else
              {
                *v347++ = *v345;
              }
              *(void *)&v558[8] = v347;
              v345 += 12;
            }
            while (v345 != v346);
            int v357 = *(_DWORD **)v558;
            if (*(_DWORD **)v558 == v347) {
              goto LABEL_833;
            }
            float v358 = *(_DWORD **)&__sz[8];
            do
            {
              if ((unint64_t)v358 >= *(void *)&__sz[16])
              {
                float v360 = *(_DWORD **)__sz;
                uint64_t v361 = ((uint64_t)v358 - *(void *)__sz) >> 2;
                unint64_t v362 = v361 + 1;
                if ((unint64_t)(v361 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v363 = *(void *)&__sz[16] - *(void *)__sz;
                if ((uint64_t)(*(void *)&__sz[16] - *(void *)__sz) >> 1 > v362) {
                  unint64_t v362 = v363 >> 1;
                }
                if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v364 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v364 = v362;
                }
                if (v364)
                {
                  double v365 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__sz[16], v364);
                  float v358 = *(_DWORD **)&__sz[8];
                  float v360 = *(_DWORD **)__sz;
                }
                else
                {
                  double v365 = 0;
                }
                double v366 = &v365[4 * v361];
                *(_DWORD *)double v366 = *v357;
                float v359 = v366 + 4;
                while (v358 != v360)
                {
                  int v367 = *--v358;
                  *((_DWORD *)v366 - 1) = v367;
                  v366 -= 4;
                }
                *(void *)__sz = v366;
                *(void *)&__sz[8] = v359;
                *(void *)&__sz[16] = &v365[4 * v364];
                if (v360) {
                  operator delete(v360);
                }
              }
              else
              {
                *float v358 = *v357;
                float v359 = v358 + 1;
              }
              *(void *)&__sz[8] = v359;
              ++v357;
              float v358 = v359;
            }
            while (v357 != v347);
            unsigned int v347 = *(_DWORD **)v558;
            if (*(void *)v558)
            {
LABEL_833:
              *(void *)&v558[8] = v347;
              operator delete(v347);
            }
          }
          uint64_t v368 = *(int **)__sz;
          unint64_t v23 = *(void *)&__sz[8];
          if (*(void *)__sz != *(void *)&__sz[8])
          {
            do
            {
              unsigned int v369 = *v368;
              Graphfloat Parameter = AUDSPGraph::GetGraphParameter(this, *v368);
              uint64_t v371 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(v371, v369, GraphParameter, 0);
              ++v368;
            }
            while (v368 != (int *)v23);
            uint64_t v368 = *(int **)__sz;
          }
          if (v368)
          {
            *(void *)&__sz[8] = v368;
            operator delete(v368);
          }
          int v257 = 0;
          goto LABEL_846;
        }
      }
      else
      {
        CFIndex v271 = 0;
        if (!v268) {
          goto LABEL_623;
        }
      }
      unint64_t v272 = 0;
      while (v267 != v270 || v271 != v272)
      {
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v267, v272, (applesauce::CF::DictionaryRef *)v558);
        if (AUDSPGraph::SetBoxPreset(this, *(CFTypeRef *)v558))
        {
          float v291 = (const void *)*((void *)this + 105);
          *((void *)this + 105) = 0;
          if (v291) {
            CFRelease(v291);
          }
          float v292 = *(const void **)v558;
          if (!*(void *)v558) {
            goto LABEL_845;
          }
          goto LABEL_844;
        }
        if (*(void *)v558) {
          CFRelease(*(CFTypeRef *)v558);
        }
        if (v269 == ++v272) {
          goto LABEL_623;
        }
      }
      goto LABEL_623;
    }
  }
  else
  {
    CFIndex v240 = 0;
    if (!v237) {
      goto LABEL_608;
    }
  }
  unint64_t v241 = 0;
  v219.n128_u32[1] = 0;
  while (2)
  {
    if (v236 == v239 && v241 == v240) {
      goto LABEL_608;
    }
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v236, v241, (applesauce::CF::DictionaryRef *)&v554);
    if (!v554.__r_.__value_.__r.__words[0])
    {
      v523 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v523, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::StringRef,char const(&)[7]>((applesauce::CF::StringRef *)&v553, (const __CFDictionary *)v554.__r_.__value_.__l.__data_);
    if (!v553.__r_.__value_.__r.__words[0])
    {
      v522 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v522, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)v553.__r_.__value_.__l.__data_, (uint64_t)__sz);
    if (!v554.__r_.__value_.__r.__words[0])
    {
      v521 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v521, "Could not construct");
    }
    uint64_t v242 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[3]>((const __CFDictionary *)v554.__r_.__value_.__l.__data_);
    if (!v554.__r_.__value_.__r.__words[0])
    {
      v525 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v525, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::DataRef,char const(&)[5]>((const __CFDictionary *)v554.__r_.__value_.__l.__data_, "data", (applesauce::CF::DataRef *)cf);
    if (!cf[0])
    {
      v524 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v524, "Could not construct");
    }
    applesauce::CF::convert_to<std::vector<unsigned char>,0>(cf[0], &v555);
    unint64_t v23 = *(void *)(*v534 + 24);
    if (!v23) {
      goto LABEL_576;
    }
    char v243 = 0;
    do
    {
      while ((*(uint64_t (**)(void))(**(void **)(v23 + 16) + 216))(*(void *)(v23 + 16)))
      {
        uint64_t v244 = *(void *)(v23 + 16);
        float v245 = (const char *)(v244 + 32);
        if (*(char *)(v244 + 55) < 0) {
          float v245 = *(const char **)v245;
        }
        size_t v246 = strlen(v245);
        uint64_t v247 = __sz[23];
        if (__sz[23] < 0) {
          uint64_t v247 = *(void *)&__sz[8];
        }
        if (v246 != v247) {
          break;
        }
        float v248 = __sz[23] >= 0 ? __sz : *(unsigned char **)__sz;
        if (memcmp(v245, v248, v246)) {
          break;
        }
        if (*((unsigned char *)this + 656))
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v249 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_572;
          }
          vDSP_Length v250 = v535;
          if (*((char *)this + 655) < 0) {
            vDSP_Length v250 = (std::string::size_type *)*v535;
          }
          if (__sz[23] >= 0) {
            uint64_t v251 = __sz;
          }
          else {
            uint64_t v251 = *(unsigned char **)__sz;
          }
          *(_DWORD *)v558 = 136315906;
          *(void *)&v558[4] = v250;
          *(_WORD *)&v558[12] = 2048;
          *(void *)&v558[14] = this;
          *(_WORD *)&v558[22] = 1024;
          *(_DWORD *)&v558[24] = v242;
          *(_WORD *)&v558[28] = 2080;
          *(void *)&v558[30] = v251;
          Float64 v252 = v249;
          vDSP_Length v253 = "[%s|%p] setting box property %d on %s";
          uint32_t v254 = 38;
        }
        else
        {
          if (getAUDSPGraphLog(void)::onceToken != -1) {
            dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
          }
          uint64_t v255 = getAUDSPGraphLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_572;
          }
          if (__sz[23] >= 0) {
            uint64_t v256 = __sz;
          }
          else {
            uint64_t v256 = *(unsigned char **)__sz;
          }
          *(_DWORD *)v558 = 134218498;
          *(void *)&v558[4] = this;
          *(_WORD *)&v558[12] = 1024;
          *(_DWORD *)&v558[14] = v242;
          *(_WORD *)&v558[18] = 2080;
          *(void *)&v558[20] = v256;
          Float64 v252 = v255;
          vDSP_Length v253 = "[%p] setting box property %d on %s";
          uint32_t v254 = 28;
        }
        _os_log_impl(&dword_1BB0CE000, v252, OS_LOG_TYPE_DEFAULT, v253, v558, v254);
LABEL_572:
        (*(void (**)(void, uint64_t, void, void, void))(**(void **)(v23 + 16) + 312))(*(void *)(v23 + 16), v242, 0, 0, (LODWORD(v555.__r_.__value_.__r.__words[1]) - LODWORD(v555.__r_.__value_.__l.__data_)));
        int v257 = 0;
        unint64_t v23 = *(void *)v23;
        char v243 = 1;
        if (!v23) {
          goto LABEL_590;
        }
      }
      unint64_t v23 = *(void *)v23;
    }
    while (v23);
    if (v243)
    {
      int v257 = 0;
      char v243 = 1;
      goto LABEL_590;
    }
LABEL_576:
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v258 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v259 = v535;
        if (*((char *)this + 655) < 0) {
          uint64_t v259 = (std::string::size_type *)*v535;
        }
        if (__sz[23] >= 0) {
          vDSP_Length v260 = __sz;
        }
        else {
          vDSP_Length v260 = *(unsigned char **)__sz;
        }
        *(_DWORD *)v558 = 136315650;
        *(void *)&v558[4] = v259;
        *(_WORD *)&v558[12] = 2048;
        *(void *)&v558[14] = this;
        *(_WORD *)&v558[22] = 2080;
        *(void *)&v558[24] = v260;
        int v261 = v258;
        uint64_t v262 = "[%s|%p] failed to find %s box inside DSPGraph";
        uint32_t v263 = 32;
LABEL_607:
        _os_log_error_impl(&dword_1BB0CE000, v261, OS_LOG_TYPE_ERROR, v262, v558, v263);
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v264 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (__sz[23] >= 0) {
          float v265 = __sz;
        }
        else {
          float v265 = *(unsigned char **)__sz;
        }
        *(_DWORD *)v558 = 134218242;
        *(void *)&v558[4] = this;
        *(_WORD *)&v558[12] = 2080;
        *(void *)&v558[14] = v265;
        int v261 = v264;
        uint64_t v262 = "[%p] failed to find %s box inside DSPGraph";
        uint32_t v263 = 22;
        goto LABEL_607;
      }
    }
    char v243 = 0;
    int v257 = 1;
LABEL_590:
    if (v555.__r_.__value_.__r.__words[0])
    {
      v555.__r_.__value_.__l.__size_ = v555.__r_.__value_.__r.__words[0];
      operator delete(v555.__r_.__value_.__l.__data_);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if ((__sz[23] & 0x80000000) != 0) {
      operator delete(*(void **)__sz);
    }
    if (v553.__r_.__value_.__r.__words[0]) {
      CFRelease(v553.__r_.__value_.__l.__data_);
    }
    if (v554.__r_.__value_.__r.__words[0]) {
      CFRelease(v554.__r_.__value_.__l.__data_);
    }
    if (v243)
    {
      if (++v241 == v238) {
        goto LABEL_608;
      }
      continue;
    }
    break;
  }
LABEL_846:
  *(void *)v558 = v538;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v558);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v544);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v547);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v561);
  MEMORY[0x1C185C400](buf);
  if (v257) {
    return 4294956421;
  }
  if (DSPGraph::Graph::numInputs((DSPGraph::Graph *)*v534) == v529
    && DSPGraph::Graph::numOutputs((DSPGraph::Graph *)*v534) == v532)
  {
    int v531 = 1;
    goto LABEL_863;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v375 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = (unint64_t)v535;
      if (*((char *)this + 655) < 0) {
        unint64_t v23 = *v535;
      }
      int v376 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 92));
      int v377 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 92));
      *(_DWORD *)AudioTimeStamp buf = 136316418;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = this;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v529;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v532;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v376;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v377;
      float32x2_t v378 = "[%s|%p] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match";
      float32x2_t v379 = v375;
      uint32_t v380 = 46;
LABEL_1102:
      _os_log_error_impl(&dword_1BB0CE000, v379, OS_LOG_TYPE_ERROR, v378, buf, v380);
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v381 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v509 = DSPGraph::Graph::numInputs(*((DSPGraph::Graph **)this + 92));
      int v510 = DSPGraph::Graph::numOutputs(*((DSPGraph::Graph **)this + 92));
      *(_DWORD *)AudioTimeStamp buf = 134219008;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v529;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v532;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v509;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&unsigned char buf[32] = v510;
      float32x2_t v378 = "[%p] AudioUnit (%d -> %d) and DSPGraph (%d -> %d) I/O bus counts don't match";
      float32x2_t v379 = v381;
      uint32_t v380 = 36;
      goto LABEL_1102;
    }
  }
  int v531 = 0;
LABEL_863:
  unsigned int v382 = DSPGraph::Graph::numInputs((DSPGraph::Graph *)*v534);
  if (v529 >= v382) {
    unsigned int v383 = v382;
  }
  else {
    unsigned int v383 = v529;
  }
  if (v383)
  {
    unsigned int v384 = 0;
    while (2)
    {
      uint64_t v385 = ausdk::AUScope::SafeGetElement(v533, v384);
      long long v386 = *(_OWORD *)(v385 + 96);
      *(_OWORD *)v558 = *(_OWORD *)(v385 + 80);
      *(_OWORD *)&v558[16] = v386;
      *(void *)&v558[32] = *(void *)(v385 + 112);
      uint64_t v387 = DSPGraph::Graph::in((DSPGraph::Graph *)*v534);
      uint64_t v388 = *(void *)(v387 + 88);
      if (*(void *)(v387 + 96) == v388)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(__sz, "out");
        v517 = (void *)(v387 + 32);
        if (*(char *)(v387 + 55) < 0) {
          v517 = (void *)*v517;
        }
        DSPGraph::strprintf((uint64_t *)v561, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v516, v517, (uint64_t)(*(void *)(v387 + 96) - *(void *)(v387 + 88)) >> 5, 0);
        DSPGraph::ThrowException();
LABEL_1138:
        __break(1u);
LABEL_1139:
        {
          *(unsigned char *)(v23 + 2384) = CFPreferencesGetAppBooleanValue(@"enable_audspg_dsp_captures", @"com.apple.coreaudio", 0) != 0;
        }
LABEL_654:
        if (!*(unsigned char *)(v23 + 2384)) {
          goto LABEL_781;
        }
LABEL_632:
        std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>((std::string *)v558, "/tmp/AudioCapture/AUDSPGraph");
        float v279 = (char *)(*v534 + 408);
        if (*(char *)(*v534 + 431) < 0) {
          float v279 = *(char **)v279;
        }
        std::string::basic_string[abi:ne180100]<0>(&v568, v279);
        std::string v555 = v568;
        memset(&v568, 0, sizeof(v568));
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v555, (uint64_t)v558, (std::__fs::filesystem::path *)__sz);
        if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v555.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v568.__r_.__value_.__l.__data_);
        }
        if ((v558[23] & 0x80000000) != 0) {
          operator delete(*(void **)v558);
        }
        std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__sz, 0);
        if ((v558[0] == 255 || !v558[0])
          && std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__sz, 0))
        {
          if (*((unsigned char *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v280 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              double v281 = v535;
              if (*((char *)this + 655) < 0) {
                double v281 = (std::string::size_type *)*v535;
              }
              double v282 = __sz;
              if (__sz[23] < 0) {
                double v282 = *(unsigned char **)__sz;
              }
              *(_DWORD *)v558 = 136315650;
              *(void *)&v558[4] = v281;
              *(_WORD *)&v558[12] = 2048;
              *(void *)&v558[14] = this;
              *(_WORD *)&v558[22] = 2080;
              *(void *)&v558[24] = v282;
              float v283 = "[%s|%p] Captures folder created : %s";
              float v284 = v280;
              uint32_t v285 = 32;
              goto LABEL_1111;
            }
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v318 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v514 = __sz;
              if (__sz[23] < 0) {
                v514 = *(unsigned char **)__sz;
              }
              *(_DWORD *)v558 = 134218242;
              *(void *)&v558[4] = this;
              *(_WORD *)&v558[12] = 2080;
              *(void *)&v558[14] = v514;
              float v283 = "[%p] Captures folder created : %s";
              float v284 = v318;
              uint32_t v285 = 22;
LABEL_1111:
              _os_log_debug_impl(&dword_1BB0CE000, v284, OS_LOG_TYPE_DEBUG, v283, v558, v285);
            }
          }
        }
        for (uint64_t m = *(void **)(*v534 + 24); m; uint64_t m = (void *)*m)
        {
          float v320 = (void *)m[2];
          if (((v320[9] - v320[8]) & 0x1FFFFFFFE0) != 0 || ((v320[12] - v320[11]) & 0x1FFFFFFFE0) != 0)
          {
            if (*((char *)this + 559) >= 0) {
              size_t v321 = *((unsigned __int8 *)this + 559);
            }
            else {
              size_t v321 = *((void *)this + 68);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v553, v321 + 1);
            if ((v553.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v322 = &v553;
            }
            else {
              float v322 = (std::string *)v553.__r_.__value_.__r.__words[0];
            }
            if (v321)
            {
              if (*((char *)this + 559) >= 0) {
                float v323 = (char *)this + 536;
              }
              else {
                float v323 = (char *)*((void *)this + 67);
              }
              memmove(v322, v323, v321);
            }
            *(_WORD *)((char *)&v322->__r_.__value_.__l.__data_ + v321) = 95;
            uint64_t v324 = m[2];
            float v325 = (char *)(v324 + 32);
            if (*(char *)(v324 + 55) < 0) {
              float v325 = *(char **)v325;
            }
            std::string::basic_string[abi:ne180100]<0>(cf, v325);
            if ((v552 & 0x80u) == 0) {
              uint64_t v326 = cf;
            }
            else {
              uint64_t v326 = (CFTypeRef *)cf[0];
            }
            if ((v552 & 0x80u) == 0) {
              std::string::size_type v327 = v552;
            }
            else {
              std::string::size_type v327 = (std::string::size_type)cf[1];
            }
            char v328 = std::string::append(&v553, (const std::string::value_type *)v326, v327);
            long long v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
            v554.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v329;
            v328->__r_.__value_.__l.__size_ = 0;
            v328->__r_.__value_.__r.__words[2] = 0;
            v328->__r_.__value_.__r.__words[0] = 0;
            float v330 = std::string::append(&v554, "_", 1uLL);
            long long v331 = *(_OWORD *)&v330->__r_.__value_.__l.__data_;
            v568.__r_.__value_.__r.__words[2] = v330->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v568.__r_.__value_.__l.__data_ = v331;
            v330->__r_.__value_.__l.__size_ = 0;
            v330->__r_.__value_.__r.__words[2] = 0;
            v330->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v550, *((_DWORD *)this + 133));
            if ((v550.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v332 = &v550;
            }
            else {
              uint64_t v332 = (std::string *)v550.__r_.__value_.__r.__words[0];
            }
            if ((v550.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v550.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v550.__r_.__value_.__l.__size_;
            }
            float v334 = std::string::append(&v568, (const std::string::value_type *)v332, size);
            long long v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
            v555.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v555.__r_.__value_.__l.__data_ = v335;
            v334->__r_.__value_.__l.__size_ = 0;
            v334->__r_.__value_.__r.__words[2] = 0;
            v334->__r_.__value_.__r.__words[0] = 0;
            unsigned int v336 = std::string::append(&v555, ".caf", 4uLL);
            long long v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
            *(void *)&v558[16] = *((void *)&v336->__r_.__value_.__l + 2);
            *(_OWORD *)v558 = v337;
            v336->__r_.__value_.__l.__size_ = 0;
            v336->__r_.__value_.__r.__words[2] = 0;
            v336->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v555.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v550.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v550.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v568.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v554.__r_.__value_.__l.__data_);
            }
            if ((char)v552 < 0) {
              operator delete((void *)cf[0]);
            }
            if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v553.__r_.__value_.__l.__data_);
            }
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v568, v558);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v568, (uint64_t)__sz, (std::__fs::filesystem::path *)&v555);
            if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v568.__r_.__value_.__l.__data_);
            }
            if ((v555.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v338 = &v555;
            }
            else {
              BOOL v338 = (std::string *)v555.__r_.__value_.__r.__words[0];
            }
            (*(void (**)(void, std::string *, void, uint64_t, void, uint64_t))(*(void *)m[2] + 152))(m[2], v338, 0, 1, 0, 4096);
            if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v555.__r_.__value_.__l.__data_);
            }
            if ((v558[23] & 0x80000000) != 0) {
              operator delete(*(void **)v558);
            }
          }
        }
        ++*((_DWORD *)this + 133);
        if ((__sz[23] & 0x80000000) != 0) {
          operator delete(*(void **)__sz);
        }
        goto LABEL_781;
      }
      uint64_t v389 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v388 + 40))(v388) + 120);
      uint64_t v390 = *(void *)(v389 + 32);
      long long v391 = *(_OWORD *)(v389 + 16);
      *(_OWORD *)__sz = *(_OWORD *)v389;
      *(_OWORD *)&__sz[16] = v391;
      *(void *)&__sz[32] = v390;
      if (*(double *)v558 == *(double *)__sz
        && *(_DWORD *)&v558[8] == *(_DWORD *)&__sz[8]
        && *(void *)&v558[16] == *(void *)&__sz[16]
        && *(void *)&v558[28] == *(void *)&__sz[28]
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v558, (const AudioStreamBasicDescription *)__sz, 0, 0))
      {
        goto LABEL_941;
      }
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v392 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          float v393 = v535;
          if (*((char *)this + 655) < 0) {
            float v393 = (std::string::size_type *)*v535;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = v393;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = this;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v384;
          uint64_t v394 = v392;
          float v395 = "[%s|%p] [WARNING] AudioUnit and DSPGraph formats for input bus %d don't match";
          uint32_t v396 = 28;
LABEL_885:
          _os_log_impl(&dword_1BB0CE000, v394, OS_LOG_TYPE_DEFAULT, v395, buf, v396);
          uint64_t v398 = getAUDSPGraphLog(void)::onceToken;
LABEL_887:
          if (*((unsigned char *)this + 656))
          {
            if (v398 != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v399 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v23 = (unint64_t)v535;
              if (*((char *)this + 655) < 0) {
                unint64_t v23 = *v535;
              }
              CA::StreamDescription::AsString((CA::StreamDescription *)v558, (uint64_t)v561, v400);
              if ((SBYTE7(v562) & 0x80u) == 0) {
                uint64_t v401 = v561;
              }
              else {
                uint64_t v401 = *(uint8_t **)v561;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = v23;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&buf[24] = v401;
              *(_WORD *)&unsigned char buf[32] = 2048;
              *(void *)&buf[34] = *(unsigned int *)&v558[12];
              float v402 = v399;
              float v403 = "[%s|%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              uint32_t v404 = 42;
LABEL_904:
              _os_log_impl(&dword_1BB0CE000, v402, OS_LOG_TYPE_DEFAULT, v403, buf, v404);
              if (SBYTE7(v562) < 0) {
                operator delete(*(void **)v561);
              }
              uint64_t v408 = getAUDSPGraphLog(void)::onceToken;
LABEL_908:
              if (*((unsigned char *)this + 656))
              {
                if (v408 != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v409 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v23 = (unint64_t)v535;
                  if (*((char *)this + 655) < 0) {
                    unint64_t v23 = *v535;
                  }
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v561, v410);
                  if ((SBYTE7(v562) & 0x80u) == 0) {
                    unsigned int v411 = v561;
                  }
                  else {
                    unsigned int v411 = *(uint8_t **)v561;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 136315906;
                  *(void *)&uint8_t buf[4] = v23;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&buf[24] = v411;
                  *(_WORD *)&unsigned char buf[32] = 2048;
                  *(void *)&buf[34] = *(unsigned int *)&__sz[12];
                  v412 = v409;
                  long long v413 = "[%s|%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  uint32_t v414 = 42;
LABEL_925:
                  _os_log_impl(&dword_1BB0CE000, v412, OS_LOG_TYPE_DEFAULT, v413, buf, v414);
                  if (SBYTE7(v562) < 0) {
                    operator delete(*(void **)v561);
                  }
                  uint64_t v418 = getAUDSPGraphLog(void)::onceToken;
LABEL_929:
                  if (*((unsigned char *)this + 656))
                  {
                    if (v418 != -1) {
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                    }
                    uint64_t v419 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_941;
                    }
                    long long v420 = v535;
                    if (*((char *)this + 655) < 0) {
                      long long v420 = (std::string::size_type *)*v535;
                    }
                    *(_DWORD *)AudioTimeStamp buf = 136315650;
                    *(void *)&uint8_t buf[4] = v420;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = this;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v384;
                    long long v421 = v419;
                    v422 = "[%s|%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
                    uint32_t v423 = 28;
                  }
                  else
                  {
                    if (v418 != -1) {
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                    }
                    uint64_t v424 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_941;
                    }
                    *(_DWORD *)AudioTimeStamp buf = 134218240;
                    *(void *)&uint8_t buf[4] = this;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v384;
                    long long v421 = v424;
                    v422 = "[%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on input bus %d";
                    uint32_t v423 = 18;
                  }
                  _os_log_impl(&dword_1BB0CE000, v421, OS_LOG_TYPE_DEFAULT, v422, buf, v423);
LABEL_941:
                  if (v383 == ++v384) {
                    goto LABEL_942;
                  }
                  continue;
                }
              }
              else
              {
                if (v408 != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v415 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v561, v416);
                  if ((SBYTE7(v562) & 0x80u) == 0) {
                    long long v417 = v561;
                  }
                  else {
                    long long v417 = *(uint8_t **)v561;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 134218498;
                  *(void *)&uint8_t buf[4] = this;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = v417;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = *(unsigned int *)&__sz[12];
                  v412 = v415;
                  long long v413 = "[%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  uint32_t v414 = 32;
                  goto LABEL_925;
                }
              }
              uint64_t v418 = -1;
              goto LABEL_929;
            }
          }
          else
          {
            if (v398 != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v405 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CA::StreamDescription::AsString((CA::StreamDescription *)v558, (uint64_t)v561, v406);
              if ((SBYTE7(v562) & 0x80u) == 0) {
                uint64_t v407 = v561;
              }
              else {
                uint64_t v407 = *(uint8_t **)v561;
              }
              *(_DWORD *)AudioTimeStamp buf = 134218498;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v407;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = *(unsigned int *)&v558[12];
              float v402 = v405;
              float v403 = "[%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              uint32_t v404 = 32;
              goto LABEL_904;
            }
          }
          uint64_t v408 = -1;
          goto LABEL_908;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v397 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v384;
          uint64_t v394 = v397;
          float v395 = "[%p] [WARNING] AudioUnit and DSPGraph formats for input bus %d don't match";
          uint32_t v396 = 18;
          goto LABEL_885;
        }
      }
      break;
    }
    uint64_t v398 = -1;
    goto LABEL_887;
  }
LABEL_942:
  unsigned int v425 = DSPGraph::Graph::numOutputs((DSPGraph::Graph *)*v534);
  if (v532 >= v425) {
    unsigned int v426 = v425;
  }
  else {
    unsigned int v426 = v532;
  }
  if (v426)
  {
    unsigned int v427 = 0;
    while (2)
    {
      uint64_t v428 = ausdk::AUScope::SafeGetElement((AUDSPGraph *)((char *)this + 128), v427);
      long long v429 = *(_OWORD *)(v428 + 96);
      *(_OWORD *)v558 = *(_OWORD *)(v428 + 80);
      *(_OWORD *)&v558[16] = v429;
      *(void *)&v558[32] = *(void *)(v428 + 112);
      uint64_t v430 = DSPGraph::Graph::out((DSPGraph::Graph *)*v534);
      uint64_t v431 = *(void *)(v430 + 64);
      if (*(void *)(v430 + 72) == v431)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(__sz, "in");
        v519 = (void *)(v430 + 32);
        if (*(char *)(v430 + 55) < 0) {
          v519 = (void *)*v519;
        }
        DSPGraph::strprintf((uint64_t *)v561, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v518, v519, (uint64_t)(*(void *)(v430 + 72) - *(void *)(v430 + 64)) >> 5, 0);
        DSPGraph::ThrowException();
        goto LABEL_1138;
      }
      uint64_t v432 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v431 + 40))(v431) + 120);
      uint64_t v433 = *(void *)(v432 + 32);
      long long v434 = *(_OWORD *)(v432 + 16);
      *(_OWORD *)__sz = *(_OWORD *)v432;
      *(_OWORD *)&__sz[16] = v434;
      *(void *)&__sz[32] = v433;
      if (*(double *)v558 == *(double *)__sz
        && *(_DWORD *)&v558[8] == *(_DWORD *)&__sz[8]
        && *(void *)&v558[16] == *(void *)&__sz[16]
        && *(void *)&v558[28] == *(void *)&__sz[28]
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v558, (const AudioStreamBasicDescription *)__sz, 0, 0))
      {
        goto LABEL_1020;
      }
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v435 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v436 = v535;
          if (*((char *)this + 655) < 0) {
            uint64_t v436 = (std::string::size_type *)*v535;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = v436;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = this;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v427;
          v437 = v435;
          v438 = "[%s|%p] [WARNING] AudioUnit and DSPGraph formats for output bus %d don't match";
          uint32_t v439 = 28;
LABEL_964:
          _os_log_impl(&dword_1BB0CE000, v437, OS_LOG_TYPE_DEFAULT, v438, buf, v439);
          uint64_t v441 = getAUDSPGraphLog(void)::onceToken;
LABEL_966:
          if (*((unsigned char *)this + 656))
          {
            if (v441 != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v442 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v23 = (unint64_t)v535;
              if (*((char *)this + 655) < 0) {
                unint64_t v23 = *v535;
              }
              CA::StreamDescription::AsString((CA::StreamDescription *)v558, (uint64_t)v561, v443);
              if ((SBYTE7(v562) & 0x80u) == 0) {
                int v444 = v561;
              }
              else {
                int v444 = *(uint8_t **)v561;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = v23;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&buf[24] = v444;
              *(_WORD *)&unsigned char buf[32] = 2048;
              *(void *)&buf[34] = *(unsigned int *)&v558[12];
              BOOL v445 = v442;
              v446 = "[%s|%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              uint32_t v447 = 42;
LABEL_983:
              _os_log_impl(&dword_1BB0CE000, v445, OS_LOG_TYPE_DEFAULT, v446, buf, v447);
              if (SBYTE7(v562) < 0) {
                operator delete(*(void **)v561);
              }
              uint64_t v451 = getAUDSPGraphLog(void)::onceToken;
LABEL_987:
              if (*((unsigned char *)this + 656))
              {
                if (v451 != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v452 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v23 = (unint64_t)v535;
                  if (*((char *)this + 655) < 0) {
                    unint64_t v23 = *v535;
                  }
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v561, v453);
                  if ((SBYTE7(v562) & 0x80u) == 0) {
                    BOOL v454 = v561;
                  }
                  else {
                    BOOL v454 = *(uint8_t **)v561;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 136315906;
                  *(void *)&uint8_t buf[4] = v23;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = this;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&buf[24] = v454;
                  *(_WORD *)&unsigned char buf[32] = 2048;
                  *(void *)&buf[34] = *(unsigned int *)&__sz[12];
                  BOOL v455 = v452;
                  BOOL v456 = "[%s|%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  uint32_t v457 = 42;
LABEL_1004:
                  _os_log_impl(&dword_1BB0CE000, v455, OS_LOG_TYPE_DEFAULT, v456, buf, v457);
                  if (SBYTE7(v562) < 0) {
                    operator delete(*(void **)v561);
                  }
                  uint64_t v461 = getAUDSPGraphLog(void)::onceToken;
LABEL_1008:
                  if (*((unsigned char *)this + 656))
                  {
                    if (v461 != -1) {
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                    }
                    uint64_t v462 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_1020;
                    }
                    int v463 = v535;
                    if (*((char *)this + 655) < 0) {
                      int v463 = (std::string::size_type *)*v535;
                    }
                    *(_DWORD *)AudioTimeStamp buf = 136315650;
                    *(void *)&uint8_t buf[4] = v463;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = this;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v427;
                    uint64_t v464 = v462;
                    int v465 = "[%s|%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
                    uint32_t v466 = 28;
                  }
                  else
                  {
                    if (v461 != -1) {
                      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                    }
                    uint64_t v467 = getAUDSPGraphLog(void)::gLog;
                    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_1020;
                    }
                    *(_DWORD *)AudioTimeStamp buf = 134218240;
                    *(void *)&uint8_t buf[4] = this;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v427;
                    uint64_t v464 = v467;
                    int v465 = "[%p] [WARNING] AudioUnit host may have incorrectly set kAudioUnitProperty_StreamFormat on output bus %d";
                    uint32_t v466 = 18;
                  }
                  _os_log_impl(&dword_1BB0CE000, v464, OS_LOG_TYPE_DEFAULT, v465, buf, v466);
LABEL_1020:
                  if (v426 == ++v427) {
                    goto LABEL_1021;
                  }
                  continue;
                }
              }
              else
              {
                if (v451 != -1) {
                  dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
                }
                uint64_t v458 = getAUDSPGraphLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
                {
                  CA::StreamDescription::AsString((CA::StreamDescription *)__sz, (uint64_t)v561, v459);
                  if ((SBYTE7(v562) & 0x80u) == 0) {
                    uint64_t v460 = v561;
                  }
                  else {
                    uint64_t v460 = *(uint8_t **)v561;
                  }
                  *(_DWORD *)AudioTimeStamp buf = 134218498;
                  *(void *)&uint8_t buf[4] = this;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = v460;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = *(unsigned int *)&__sz[12];
                  BOOL v455 = v458;
                  BOOL v456 = "[%p] [WARNING]  DSPGraph format: %s, format flags: 0x%lX";
                  uint32_t v457 = 32;
                  goto LABEL_1004;
                }
              }
              uint64_t v461 = -1;
              goto LABEL_1008;
            }
          }
          else
          {
            if (v441 != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v448 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CA::StreamDescription::AsString((CA::StreamDescription *)v558, (uint64_t)v561, v449);
              if ((SBYTE7(v562) & 0x80u) == 0) {
                AudioUnitParameterValue v450 = v561;
              }
              else {
                AudioUnitParameterValue v450 = *(uint8_t **)v561;
              }
              *(_DWORD *)AudioTimeStamp buf = 134218498;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v450;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = *(unsigned int *)&v558[12];
              BOOL v445 = v448;
              v446 = "[%p] [WARNING] AudioUnit format: %s, format flags: 0x%lX";
              uint32_t v447 = 32;
              goto LABEL_983;
            }
          }
          uint64_t v451 = -1;
          goto LABEL_987;
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v440 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 134218240;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v427;
          v437 = v440;
          v438 = "[%p] [WARNING] AudioUnit and DSPGraph formats for output bus %d don't match";
          uint32_t v439 = 18;
          goto LABEL_964;
        }
      }
      break;
    }
    uint64_t v441 = -1;
    goto LABEL_966;
  }
LABEL_1021:
  if (v531)
  {
    AudioTimeStamp v468 = this;
    if (*((unsigned char *)this + 656))
    {
      AudioBufferList v469 = (const std::string::value_type *)v535;
      if (*((char *)this + 655) < 0) {
        AudioBufferList v469 = (const std::string::value_type *)*v535;
      }
      std::string::__assign_external((std::string *)(*((void *)this + 92) + 408), v469);
      AudioTimeStamp v468 = this;
    }
    uint64_t v470 = *((void *)v468 + 70);
    if (v470)
    {
      if (*((unsigned char *)v468 + 900))
      {
        *((void *)this + 70) = 0;
        (*(void (**)(uint64_t))(*(void *)v470 + 8))(v470);
      }
    }
    else if (!*((unsigned char *)v468 + 900))
    {
      operator new();
    }
    long long v565 = 0u;
    long long v566 = 0u;
    memset(buf, 0, sizeof(buf));
    std::vector<DSPGraph::GraphIOData>::vector(v558, v529, buf);
    uint64_t v471 = (void *)*((void *)this + 94);
    if (v471)
    {
      *((void *)this + 95) = v471;
      operator delete(v471);
      *((void *)this + 94) = 0;
      *((void *)this + 95) = 0;
      *((void *)this + 96) = 0;
    }
    *((_OWORD *)this + 47) = *(_OWORD *)v558;
    *((void *)this + 96) = *(void *)&v558[16];
    long long v565 = 0u;
    long long v566 = 0u;
    memset(buf, 0, sizeof(buf));
    std::vector<DSPGraph::GraphIOData>::vector(v558, v532, buf);
    DSPSplitComplex v472 = (void *)((char *)this + 776);
    AudioTimeStamp v473 = (void *)*((void *)this + 97);
    if (v473)
    {
      *((void *)this + 98) = v473;
      operator delete(v473);
      *DSPSplitComplex v472 = 0;
      *((void *)this + 98) = 0;
      *((void *)this + 99) = 0;
    }
    *(_OWORD *)DSPSplitComplex v472 = *(_OWORD *)v558;
    *((void *)this + 99) = *(void *)&v558[16];
    std::vector<AudioBufferList *>::resize((char **)this + 106, v529);
    std::vector<AudioBufferList *>::resize((char **)this + 109, v532);
    uint64_t v373 = 0;
  }
  else
  {
    uint64_t v373 = 4294956428;
  }
  if (isInternalBuild())
  {
    {
      isDetailedLoggingEnabledViaDefaults(void)::loggingEnabled = CFPreferencesGetAppBooleanValue(@"enable_audspg_details", @"com.apple.coreaudio", 0) != 0;
    }
    if (isDetailedLoggingEnabledViaDefaults(void)::loggingEnabled)
    {
      if (*((unsigned char *)this + 656))
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v474 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          v475 = v535;
          if (*((char *)this + 655) < 0) {
            v475 = (std::string::size_type *)*v535;
          }
          DSPGraph::Graph::getLatencyInSeconds(*((DSPGraph::Graph **)this + 92));
          uint64_t v476 = *((void *)this + 92);
          int v477 = *(_DWORD *)(v476 + 688);
          LODWORD(v476) = *(_DWORD *)(v476 + 692);
          *(_DWORD *)AudioTimeStamp buf = 136316162;
          *(void *)&uint8_t buf[4] = v475;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = this;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v478;
          *(_WORD *)&unsigned char buf[32] = 1024;
          *(_DWORD *)&buf[34] = v477;
          *(_WORD *)&unsigned char buf[38] = 1024;
          *(_DWORD *)&buf[40] = v476;
          v479 = "[%s|%p] total graph latency : %f, number of frames per slice = %u, sample rate %u";
          v480 = v474;
          uint32_t v481 = 44;
LABEL_1107:
          _os_log_debug_impl(&dword_1BB0CE000, v480, OS_LOG_TYPE_DEBUG, v479, buf, v481);
        }
      }
      else
      {
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        uint64_t v482 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          DSPGraph::Graph::getLatencyInSeconds(*((DSPGraph::Graph **)this + 92));
          uint64_t v511 = *((void *)this + 92);
          int v512 = *(_DWORD *)(v511 + 688);
          LODWORD(v511) = *(_DWORD *)(v511 + 692);
          *(_DWORD *)AudioTimeStamp buf = 134218752;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v513;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v512;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v511;
          v479 = "[%p] total graph latency : %f, number of frames per slice = %u, sample rate %u";
          v480 = v482;
          uint32_t v481 = 34;
          goto LABEL_1107;
        }
      }
      v483 = *(void **)(*v534 + 24);
      if (v483)
      {
        while (2)
        {
          if (*((unsigned char *)this + 656))
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v484 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v485 = v535;
              if (*((char *)this + 655) < 0) {
                v485 = (std::string::size_type *)*v535;
              }
              v486 = (char *)v483[2];
              v487 = v486 + 32;
              if (v486[55] < 0) {
                v487 = (void *)*v487;
              }
              DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v486);
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = v485;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = this;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&buf[24] = v487;
              *(_WORD *)&unsigned char buf[32] = 2048;
              *(void *)&buf[34] = v488;
              v489 = v484;
              v490 = "[%s|%p] latency for box %s : %f";
              uint32_t v491 = 42;
              goto LABEL_1067;
            }
          }
          else
          {
            if (getAUDSPGraphLog(void)::onceToken != -1) {
              dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
            }
            uint64_t v492 = getAUDSPGraphLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v493 = (char *)v483[2];
              v494 = v493 + 32;
              if (v493[55] < 0) {
                v494 = (void *)*v494;
              }
              DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v493);
              *(_DWORD *)AudioTimeStamp buf = 134218498;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v494;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = v495;
              v489 = v492;
              v490 = "[%p] latency for box %s : %f";
              uint32_t v491 = 32;
LABEL_1067:
              _os_log_debug_impl(&dword_1BB0CE000, v489, OS_LOG_TYPE_DEBUG, v490, buf, v491);
            }
          }
          v483 = (void *)*v483;
          if (!v483) {
            break;
          }
          continue;
        }
      }
    }
  }
  if (!v531)
  {
    if (*((unsigned char *)this + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v498 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return v373;
      }
      if (*((char *)this + 655) < 0) {
        v499 = (std::string::size_type *)*v535;
      }
      else {
        v499 = v535;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = v499;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = this;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v373;
      v505 = "[%s|%p] failed to initialize with error %d";
      v506 = v498;
      uint32_t v507 = 28;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v504 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return v373;
      }
      *(_DWORD *)AudioTimeStamp buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v373;
      v505 = "[%p] failed to initialize with error %d";
      v506 = v504;
      uint32_t v507 = 18;
    }
    _os_log_error_impl(&dword_1BB0CE000, v506, OS_LOG_TYPE_ERROR, v505, buf, v507);
    return v373;
  }
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v496 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 655) < 0) {
        v497 = (std::string::size_type *)*v535;
      }
      else {
        v497 = v535;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = v497;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = this;
      v501 = "[%s|%p] did initialize";
      v502 = v496;
      uint32_t v503 = 22;
      goto LABEL_1092;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v500 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 134217984;
      *(void *)&uint8_t buf[4] = this;
      v501 = "[%p] did initialize";
      v502 = v500;
      uint32_t v503 = 12;
LABEL_1092:
      _os_log_impl(&dword_1BB0CE000, v502, OS_LOG_TYPE_DEFAULT, v501, buf, v503);
    }
  }
  return v373;
}

void sub_1BB52D05C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D064);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D07C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a2)
  {
    if (a48 < 0) {
      operator delete(__p);
    }
    if (SLOBYTE(STACK[0x277]) < 0) {
      operator delete((void *)STACK[0x260]);
    }
    JUMPOUT(0x1BB52DFB8);
  }
  _Unwind_Resume(v48);
}

void sub_1BB52D254(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2)
  {
    STACK[0x260] = (unint64_t)&a37;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a43);
    __cxa_begin_catch(a1);
    if (a2 == 4)
    {
      STACK[0x268] = 0;
      STACK[0x260] = 0;
      STACK[0x270] = 0;
      DSPGraph::Interpreter::compileText();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(a33, (uint64_t *)&STACK[0x210]);
      unint64_t v44 = STACK[0x210];
      STACK[0x210] = 0;
      if (v44) {
        (*(void (**)(unint64_t))(*(void *)v44 + 8))(v44);
      }
    }
    else
    {
      STACK[0x268] = 0;
      STACK[0x260] = 0;
      STACK[0x270] = 0;
      DSPGraph::Interpreter::compileText();
      std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(a33, (uint64_t *)&STACK[0x210]);
      unint64_t v45 = STACK[0x210];
      STACK[0x210] = 0;
      if (v45) {
        (*(void (**)(unint64_t))(*(void *)v45 + 8))(v45);
      }
    }
    STACK[0x230] = (unint64_t)&STACK[0x260];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
    *(unsigned char *)(a36 + 898) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1BB528BF4);
  }
  _Unwind_Resume(v46);
}

void sub_1BB52D688(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x210];
    STACK[0x210] = 0;
    if (v2) {
      (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
    }
    STACK[0x230] = (unint64_t)&STACK[0x260];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
    __cxa_end_catch();
    JUMPOUT(0x1BB52DFB8);
  }
  _Unwind_Resume(v3);
}

void sub_1BB52D704(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x210];
    STACK[0x210] = 0;
    if (v2) {
      (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
    }
    STACK[0x230] = (unint64_t)&STACK[0x260];
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
    __cxa_end_catch();
    JUMPOUT(0x1BB52D768);
  }
  _Unwind_Resume(v3);
}

void sub_1BB52D774(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a2)
  {
    if (a48 < 0) {
      operator delete(__p);
    }
    if (SLOBYTE(STACK[0x277]) < 0) {
      operator delete((void *)STACK[0x260]);
    }
    JUMPOUT(0x1BB52DFC8);
  }
  _Unwind_Resume(v48);
}

void sub_1BB52D820(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52DFE8);
}

void sub_1BB52D838(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    JUMPOUT(0x1BB52D980);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D854(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    applesauce::CF::DataRef::~DataRef(&v29);
    JUMPOUT(0x1BB52D970);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    JUMPOUT(0x1BB52D9A8);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D88C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    applesauce::CF::StringRef::~StringRef(&v29);
    JUMPOUT(0x1BB52D9ECLL);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D8A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    if (v30 < 0) {
      operator delete(v29);
    }
    JUMPOUT(0x1BB52D9A0);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D8C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    __cxa_free_exception(v27);
    JUMPOUT(0x1BB52D9E8);
  }
  _Unwind_Resume(v28);
}

void sub_1BB52D8FC()
{
}

void sub_1BB52D928(uint64_t a1, int a2)
{
  if (a2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef((applesauce::CF::DictionaryRef *)&STACK[0x260]);
    JUMPOUT(0x1BB52DFB0);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D93C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D948);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D954(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52DFB4);
}

void sub_1BB52D964(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D970);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D974(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D980);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D994(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D9A0);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D9B0(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52D9A8);
}

void sub_1BB52D9C0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52D9DC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52D9ECLL);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52DA04(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v31);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  STACK[0x260] = (unint64_t)&STACK[0x230];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  BOOL v37 = (void **)&v34;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v37);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v35);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v36);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v38);
  MEMORY[0x1C185C400](v42);
  if (a2 == 4)
  {
    uint64_t v3 = __cxa_begin_catch(v31);
    if (*(unsigned char *)(v33 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v4 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_43;
      }
      if (*(char *)(v33 + 655) < 0) {
        __int16 v32 = (void *)*v32;
      }
      uint64_t v5 = v41 >= 0 ? v38 : *(unsigned char **)v38;
      *(_DWORD *)size_t v42 = 136315650;
      *(void *)&v42[4] = v32;
      __int16 v43 = 2048;
      uint64_t v44 = v33;
      __int16 v45 = 2080;
      unint64_t v46 = v5;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "[%s|%p] caught DSPGraph::Exception: %s", v42, 0x20u);
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint32_t v6 = *(void **)v38;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      int64x2_t v16 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_43;
      }
      unint64_t v28 = v45 >= 0 ? v42 : *(unsigned char **)v42;
      *(_DWORD *)float v38 = 134218242;
      *(void *)&v38[4] = v33;
      __int16 v39 = 2080;
      unint64_t v40 = v28;
      _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "[%p] caught DSPGraph::Exception: %s", v38, 0x16u);
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint32_t v6 = *(void **)v42;
    }
    operator delete(v6);
LABEL_43:
    uint64_t v17 = *(std::__shared_weak_count **)(v33 + 744);
    *(_OWORD *)(v33 + 736) = 0u;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    goto LABEL_70;
  }
  if (a2 == 3)
  {
    uint64_t v7 = (const std::system_error *)__cxa_begin_catch(v31);
    if (*(unsigned char *)(v33 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v8 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      if (*(char *)(v33 + 655) < 0) {
        __int16 v32 = (void *)*v32;
      }
      uint64_t v9 = v41 >= 0 ? v38 : *(unsigned char **)v38;
      *(_DWORD *)size_t v42 = 136315650;
      *(void *)&v42[4] = v32;
      __int16 v43 = 2048;
      uint64_t v44 = v33;
      __int16 v45 = 2080;
      unint64_t v46 = v9;
      _os_log_error_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::system_error: %s", v42, 0x20u);
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_56;
      }
      uint64_t v10 = *(void **)v38;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v22 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      uint8x8_t v29 = v45 >= 0 ? v42 : *(unsigned char **)v42;
      *(_DWORD *)float v38 = 134218242;
      *(void *)&v38[4] = v33;
      __int16 v39 = 2080;
      unint64_t v40 = v29;
      _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "[%p] caught std::system_error: %s", v38, 0x16u);
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_56;
      }
      uint64_t v10 = *(void **)v42;
    }
    operator delete(v10);
LABEL_56:
    unint64_t v23 = *(std::__shared_weak_count **)(v33 + 744);
    *(_OWORD *)(v33 + 736) = 0u;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    goto LABEL_70;
  }
  int v11 = (const std::exception *)__cxa_begin_catch(v31);
  if (a2 == 2)
  {
    uint64_t v12 = v11;
    if (*(unsigned char *)(v33 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      char v13 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      if (*(char *)(v33 + 655) < 0) {
        __int16 v32 = (void *)*v32;
      }
      unsigned int v14 = v41 >= 0 ? v38 : *(unsigned char **)v38;
      *(_DWORD *)size_t v42 = 136315650;
      *(void *)&v42[4] = v32;
      __int16 v43 = 2048;
      uint64_t v44 = v33;
      __int16 v45 = 2080;
      unint64_t v46 = v14;
      _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%p] caught std::exception: %s", v42, 0x20u);
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      uint64_t v15 = *(void **)v38;
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      unint64_t v24 = getAUDSPGraphLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      char v30 = v45 >= 0 ? v42 : *(unsigned char **)v42;
      *(_DWORD *)float v38 = 134218242;
      *(void *)&v38[4] = v33;
      __int16 v39 = 2080;
      unint64_t v40 = v30;
      _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "[%p] caught std::exception: %s", v38, 0x16u);
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      uint64_t v15 = *(void **)v42;
    }
    operator delete(v15);
LABEL_62:
    uint64_t v25 = *(std::__shared_weak_count **)(v33 + 744);
    *(_OWORD *)(v33 + 736) = 0u;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    goto LABEL_70;
  }
  if (*(unsigned char *)(v33 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v18 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_68;
    }
    if (*(char *)(v33 + 655) < 0) {
      __int16 v32 = (void *)*v32;
    }
    *(_DWORD *)size_t v42 = 136315394;
    *(void *)&v42[4] = v32;
    __int16 v43 = 2048;
    uint64_t v44 = v33;
    uint64_t v19 = "[%s|%p] caught unknown exception";
    unsigned int v20 = v18;
    uint32_t v21 = 22;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v26 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_68;
    }
    *(_DWORD *)size_t v42 = 134217984;
    *(void *)&v42[4] = v33;
    uint64_t v19 = "[%p] caught unknown exception";
    unsigned int v20 = v26;
    uint32_t v21 = 12;
  }
  _os_log_error_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, v19, v42, v21);
LABEL_68:
  unint64_t v27 = *(std::__shared_weak_count **)(v33 + 744);
  *(_OWORD *)(v33 + 736) = 0u;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
LABEL_70:
  AUDSPGraph::ResetCachedProps((AUDSPGraph *)v33);
  __cxa_end_catch();
  JUMPOUT(0x1BB52B228);
}

void sub_1BB52DA98(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a72 < 0) {
      operator delete(__p);
    }
    if (SLOBYTE(STACK[0x247]) < 0) {
      operator delete((void *)STACK[0x230]);
    }
    JUMPOUT(0x1BB52DBFCLL);
  }
  _Unwind_Resume(v72);
}

void sub_1BB52DAA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x207]) < 0) {
      operator delete(__p);
    }
    if (a70 < 0) {
      operator delete(a65);
    }
    if (a72 < 0) {
      JUMPOUT(0x1BB52DBB8);
    }
    JUMPOUT(0x1BB52DBBCLL);
  }
  _Unwind_Resume(v73);
}

void sub_1BB52DAB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a2)
  {
    if (a67 < 0) {
      operator delete(__p);
    }
    if (*(char *)(v73 - 121) < 0) {
      operator delete(*(void **)(v73 - 144));
    }
    if (SLOBYTE(STACK[0x207]) < 0) {
      operator delete(a73);
    }
    if (a72 < 0) {
      operator delete(a68);
    }
    JUMPOUT(0x1BB52DB80);
  }
  _Unwind_Resume(v74);
}

void sub_1BB52DAC8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x277]) < 0) {
      JUMPOUT(0x1BB52DBB8);
    }
    if (SLOBYTE(STACK[0x247]) < 0) {
      operator delete((void *)STACK[0x230]);
    }
    JUMPOUT(0x1BB52DBFCLL);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52DAD8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x227]) < 0) {
      operator delete((void *)STACK[0x210]);
    }
    if (SLOBYTE(STACK[0x277]) < 0) {
      JUMPOUT(0x1BB52DBB8);
    }
    JUMPOUT(0x1BB52DBBCLL);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52DB04(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52DB70);
}

void sub_1BB52DB14(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52DB50);
}

void sub_1BB52DB24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x227]) < 0) {
      operator delete((void *)STACK[0x210]);
    }
    if (a67 < 0) {
      operator delete(a62);
    }
    if (*(char *)(v67 - 121) < 0) {
      operator delete(*(void **)(v67 - 144));
    }
    JUMPOUT(0x1BB52DB60);
  }
  _Unwind_Resume(v68);
}

void sub_1BB52DB90(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 121) < 0) {
      JUMPOUT(0x1BB52DBA8);
    }
    if (SLOBYTE(STACK[0x277]) < 0) {
      JUMPOUT(0x1BB52DBB8);
    }
    JUMPOUT(0x1BB52DBBCLL);
  }
  _Unwind_Resume(v3);
}

void sub_1BB52DBD0(uint64_t a1, int a2)
{
  if (a2)
  {
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](&STACK[0x210], 0);
    JUMPOUT(0x1BB52DF28);
  }
  JUMPOUT(0x1BB52E6E0);
}

void sub_1BB52DBF0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52DBFCLL);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52DC08(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t *a35,uint64_t a36)
{
  if (!a2) {
    _Unwind_Resume(v58);
  }
  float v38 = __cxa_begin_catch(a1);
  if (a2 == 4)
  {
    uint64_t v39 = (uint64_t)v38;
    if (*(unsigned char *)(a36 + 656))
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v40 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        unint64_t v41 = (unint64_t)a35;
        if (*(char *)(a36 + 655) < 0) {
          unint64_t v41 = *a35;
        }
        int v42 = *v36;
        if (SLOBYTE(STACK[0x247]) >= 0) {
          __int16 v43 = &STACK[0x230];
        }
        else {
          __int16 v43 = (unint64_t *)STACK[0x230];
        }
        LODWORD(STACK[0x260]) = 136315906;
        STACK[0x264] = v41;
        LOWORD(STACK[0x26C]) = 2048;
        STACK[0x26E] = a36;
        LOWORD(STACK[0x276]) = 1024;
        LODWORD(STACK[0x278]) = v42;
        LOWORD(STACK[0x27C]) = 2080;
        STACK[0x27E] = (unint64_t)v43;
        uint64_t v44 = "[%s|%p] failed to set parameter %d on the graph: %s";
        __int16 v45 = v40;
        uint32_t v46 = 38;
        goto LABEL_32;
      }
    }
    else
    {
      if (getAUDSPGraphLog(void)::onceToken != -1) {
        dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
      }
      uint64_t v53 = getAUDSPGraphLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        int v55 = *v36;
        if (SLOBYTE(STACK[0x247]) >= 0) {
          BOOL v56 = &STACK[0x230];
        }
        else {
          BOOL v56 = (unint64_t *)STACK[0x230];
        }
        LODWORD(STACK[0x260]) = 134218498;
        STACK[0x264] = a36;
        LOWORD(STACK[0x26C]) = 1024;
        LODWORD(STACK[0x26E]) = v55;
        LOWORD(STACK[0x272]) = 2080;
        STACK[0x274] = (unint64_t)v56;
        uint64_t v44 = "[%p] failed to set parameter %d on the graph: %s";
        __int16 v45 = v53;
        uint32_t v46 = 28;
LABEL_32:
        _os_log_error_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_ERROR, v44, (uint8_t *)&STACK[0x260], v46);
        if (SLOBYTE(STACK[0x247]) < 0) {
          operator delete((void *)STACK[0x230]);
        }
      }
    }
LABEL_27:
    __cxa_end_catch();
    JUMPOUT(0x1BB52B1F0);
  }
  if (*(unsigned char *)(a36 + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v47 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    unint64_t v48 = (unint64_t)a35;
    if (*(char *)(a36 + 655) < 0) {
      unint64_t v48 = *a35;
    }
    int v49 = *v36;
    LODWORD(STACK[0x260]) = a25;
    STACK[0x264] = v48;
    LOWORD(STACK[0x26C]) = 2048;
    STACK[0x26E] = a36;
    LOWORD(STACK[0x276]) = 1024;
    LODWORD(STACK[0x278]) = v49;
    BOOL v50 = "[%s|%p] failed to set parameter %d on the graph: unspecified error";
    unint64_t v51 = v47;
    uint32_t v52 = 28;
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v54 = getAUDSPGraphLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    int v57 = *v36;
    LODWORD(STACK[0x260]) = 134218240;
    STACK[0x264] = a36;
    LOWORD(STACK[0x26C]) = 1024;
    LODWORD(STACK[0x26E]) = v57;
    BOOL v50 = "[%p] failed to set parameter %d on the graph: unspecified error";
    unint64_t v51 = v54;
    uint32_t v52 = 18;
  }
  _os_log_error_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&STACK[0x260], v52);
  goto LABEL_27;
}

void sub_1BB52DF0C(uint64_t a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(v2);
  }
  JUMPOUT(0x1BB52D95CLL);
}

void sub_1BB52DF18(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52DF28);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52DF34(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a2)
  {
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&a43);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&STACK[0x260]);
    JUMPOUT(0x1BB52DF8CLL);
  }
  _Unwind_Resume(v43);
}

void sub_1BB52DF94(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB52DFA0);
  }
  _Unwind_Resume(v2);
}

void sub_1BB52E6A4()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

uint64_t applesauce::CF::DictionaryRef_iterator<std::string,std::string>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = a1 + 40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize(a1 + 16, Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void *std::shared_ptr<DSPGraph::Graph>::operator=[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<DSPGraph::Graph>::shared_ptr[abi:ne180100]<DSPGraph::Graph,std::default_delete<DSPGraph::Graph>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

__n128 AUDSPGraph::Initialize(void)::$_1::operator()(uint64_t *a1, void *__s, uint64_t *a3, __n128 a4)
{
  long long v4 = __s;
  uint64_t v6 = *((unsigned __int8 *)__s + 23);
  unsigned int v28 = *((_DWORD *)a1 + 3);
  if (*((char *)__s + 23) < 0)
  {
    uint64_t v7 = (void *)*__s;
    uint64_t v8 = __s[1];
  }
  else
  {
    uint64_t v7 = __s;
    uint64_t v8 = *((unsigned __int8 *)__s + 23);
  }
  uint64_t v9 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 6);
  unsigned int v11 = *((_DWORD *)a1 + 7);
  int v27 = *((_DWORD *)a1 + 8);
  if (v8 >= 17)
  {
    uint64_t v12 = (char *)v7 + v8;
    a4.n128_u64[0] = a1[2];
    __n128 v29 = a4;
    char v13 = v7;
    do
    {
      unsigned int v14 = (char *)memchr(v13, 70, v8 - 16);
      if (!v14) {
        break;
      }
      if (*(void *)v14 == 0x6168436465786946 && *((void *)v14 + 1) == 0x6E756F436C656E6ELL && v14[16] == 116)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1) {
          break;
        }
        unsigned int v17 = v28;
        if ((v6 & 0x80) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      char v13 = v14 + 1;
      uint64_t v8 = v12 - (unsigned char *)v13;
    }
    while (v12 - (unsigned char *)v13 >= 17);
  }
  int v18 = *((_DWORD *)a3 + 3) & 0x20;
  if ((v28 & 0x20) != 0)
  {
    unsigned int v11 = 1;
  }
  else if (!v11)
  {
    unsigned int v19 = (v27 + 7) >> 3;
    goto LABEL_25;
  }
  unsigned int v19 = v10 / v11;
LABEL_25:
  if (v18) {
    int v20 = 1;
  }
  else {
    int v20 = *((_DWORD *)a3 + 7);
  }
  unsigned int v10 = v19 * v20;
  unsigned int v17 = v18 | v28 & 0xFFFFFFDF;
  a4.n128_u32[1] = 1;
  a4.n128_u32[0] = v19 * v20;
  __n128 v29 = a4;
  unsigned int v11 = *((_DWORD *)a3 + 7);
  if ((v6 & 0x80) != 0)
  {
LABEL_29:
    uint32_t v21 = v4;
    long long v4 = (void *)*v4;
    uint64_t v6 = v21[1];
  }
LABEL_30:
  if (v6 >= 15)
  {
    uint64_t v22 = (char *)v4 + v6;
    unint64_t v23 = v4;
    do
    {
      unint64_t v24 = (char *)memchr(v23, 70, v6 - 14);
      if (!v24) {
        break;
      }
      if (*(void *)v24 == 0x6D61536465786946 && *(void *)(v24 + 7) == 0x65746152656C706DLL)
      {
        if (v24 != v22 && v24 - (char *)v4 != -1) {
          goto LABEL_42;
        }
        break;
      }
      unint64_t v23 = v24 + 1;
      uint64_t v6 = v22 - (unsigned char *)v23;
    }
    while (v22 - (unsigned char *)v23 >= 15);
  }
  uint64_t v9 = *a3;
LABEL_42:
  *a1 = v9;
  *((_DWORD *)a1 + 3) = v17;
  __n128 result = v29;
  a1[2] = v29.n128_u64[0];
  *((_DWORD *)a1 + 6) = v10;
  *((_DWORD *)a1 + 7) = v11;
  return result;
}

uint64_t isInternalBuild(void)
{
  {
    isInternalBuild(void)::sIsInternalBuild = isInternalBuild(void)::$_0::operator()();
  }
  return isInternalBuild(void)::sIsInternalBuild;
}

void sub_1BB52EA30(_Unwind_Exception *a1)
{
}

void *std::vector<DSPGraph::GraphIOData>::vector(void *a1, uint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v5 = 5 * a2;
    uint64_t v6 = 80 * a2;
    uint64_t v7 = operator new(80 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      long long v9 = a3[3];
      _OWORD v7[2] = a3[2];
      v7[3] = v9;
      v7[4] = a3[4];
      long long v10 = a3[1];
      _OWORD *v7 = *a3;
      v7[1] = v10;
      v7 += 5;
      v6 -= 80;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void std::vector<AudioBufferList *>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  long long v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unsigned int v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    unsigned int v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v10);
  uint64_t v12 = &v11[8 * v5];
  unsigned int v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  uint64_t v15 = &v12[8 * v6];
  unsigned int v17 = *a1;
  int64x2_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    int64x2_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1BB52EC10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL isInternalBuild(void)::$_0::operator()()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  BOOL v2 = CFBooleanGetValue(v0) != 0;
  CFRelease(v1);
  return v2;
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, const UInt8 **a2)
{
  memset(v11, 0, sizeof(v11));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v11, (unint64_t)a2[2]);
  unint64_t v6 = *a2;
  long long v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != (const UInt8 *)v4)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::string const&>(v11, v5 + 32, (uint64_t)(v5 + 56));
      uint64_t v7 = (UInt8 *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (const UInt8 **)v7;
          uint64_t v7 = *(UInt8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const UInt8 **)*((void *)v5 + 2);
          BOOL v9 = *v8 == v5;
          unint64_t v5 = (const UInt8 *)v8;
        }
        while (!v9);
      }
      unint64_t v5 = (const UInt8 *)v8;
    }
    while (v8 != v4);
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v11);
  uint64_t v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *a1 = CFDictionaryRef;
}

void sub_1BB52ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void AUDSPGraph::~AUDSPGraph(AUDSPGraph *this)
{
  AUDSPGraph::~AUDSPGraph(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  unsigned char v29[12];
  __int16 v30;
  AUDSPGraph *v31;
  uint64_t v32;

  __int16 v32 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B2918;
  BOOL v2 = (void **)((char *)this + 632);
  if (*((unsigned char *)this + 656))
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v3 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      long long v4 = v2;
      if (*((char *)this + 655) < 0) {
        long long v4 = *v2;
      }
      *(_DWORD *)__n128 v29 = 136315394;
      *(void *)&v29[4] = v4;
      char v30 = 2048;
      uint64_t v31 = this;
      unint64_t v5 = "[%s|%p] destructed";
      unint64_t v6 = v3;
      uint64_t v7 = 22;
      goto LABEL_12;
    }
  }
  else
  {
    if (getAUDSPGraphLog(void)::onceToken != -1) {
      dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
    }
    uint64_t v8 = getAUDSPGraphLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 v29 = 134217984;
      *(void *)&v29[4] = this;
      unint64_t v5 = "[%p] destructed";
      unint64_t v6 = v8;
      uint64_t v7 = 12;
LABEL_12:
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, v5, v29, v7);
    }
  }
  BOOL v9 = (const void *)*((void *)this + 135);
  if (v9) {
    CFRelease(v9);
  }
  unint64_t v10 = (const void *)*((void *)this + 134);
  if (v10) {
    CFRelease(v10);
  }
  unsigned int v11 = (const void *)*((void *)this + 133);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)*((void *)this + 132);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 131);
  if (v13) {
    CFRelease(v13);
  }
  unsigned int v14 = (void *)*((void *)this + 128);
  if (v14)
  {
    *((void *)this + 129) = v14;
    operator delete(v14);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 126));
  uint64_t v15 = (const void *)*((void *)this + 124);
  if (v15) {
    CFRelease(v15);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 928));
  *(void *)__n128 v29 = (char *)this + 904;
  std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  int64x2_t v16 = (void *)*((void *)this + 109);
  if (v16)
  {
    *((void *)this + 110) = v16;
    operator delete(v16);
  }
  unsigned int v17 = (void *)*((void *)this + 106);
  if (v17)
  {
    *((void *)this + 107) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (const void *)*((void *)this + 105);
  if (v18) {
    CFRelease(v18);
  }
  unsigned int v19 = (const void *)*((void *)this + 104);
  if (v19) {
    CFRelease(v19);
  }
  int v20 = (const void *)*((void *)this + 103);
  if (v20) {
    CFRelease(v20);
  }
  uint32_t v21 = (void *)*((void *)this + 100);
  if (v21)
  {
    *((void *)this + 101) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)this + 97);
  if (v22)
  {
    *((void *)this + 98) = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)*((void *)this + 94);
  if (v23)
  {
    *((void *)this + 95) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  CACFArray::~CACFArray((AUDSPGraph *)((char *)this + 720));
  CACFArray::~CACFArray((AUDSPGraph *)((char *)this + 704));
  CACFDictionary::~CACFDictionary((AUDSPGraph *)((char *)this + 688));
  uint64_t v25 = (const void *)*((void *)this + 85);
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = (const void *)*((void *)this + 84);
  if (v26) {
    CFRelease(v26);
  }
  int v27 = (const void *)*((void *)this + 83);
  if (v27) {
    CFRelease(v27);
  }
  if (*((unsigned char *)this + 656) && *((char *)this + 655) < 0) {
    operator delete(*v2);
  }
  if (*((unsigned char *)this + 624) && *((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  if (*((unsigned char *)this + 592) && *((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  unsigned int v28 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  ausdk::AUBase::~AUBase(this);
}

void sub_1BB52F0D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AULoudnessMeter::newDspLibAlgorithm(AULoudnessMeter *this)
{
}

void sub_1BB52F178(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40AC40406ELL);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessMeter::Version(AULoudnessMeter *this)
{
  return 0x20000;
}

uint64_t AULoudnessMeter::GetParameterValueStrings(AULoudnessMeter *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  if (*(_DWORD *)(*((void *)this + 211) + 4 * a3)) {
    return 4294956418;
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<char const*,char const* const*>(DspLib::LoudnessMeter::Parameters::kStateNames, DspLib::LoudnessNormalizer::Parameters::kRenderQualityNames);
  uint64_t result = 0;
  *a4 = CFArray;
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<char const*,char const* const*>(char **a1, char **a2)
{
  uint64_t v3 = a1;
  memset(v17, 0, sizeof(v17));
  unint64_t v18 = 0;
  std::vector<applesauce::CF::StringRef>::reserve(v17, a2 - a1);
  if (v3 != a2)
  {
    long long v4 = *(CFStringRef **)&v17[2];
    do
    {
      if ((unint64_t)v4 >= v18)
      {
        uint64_t v5 = ((uint64_t)v4 - *(void *)v17) >> 3;
        if ((unint64_t)(v5 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = (uint64_t)(v18 - *(void *)v17) >> 2;
        if (v6 <= v5 + 1) {
          unint64_t v6 = v5 + 1;
        }
        if (v18 - *(void *)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v6;
        }
        uint64_t v22 = &v18;
        if (v7) {
          unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v7);
        }
        else {
          uint64_t v8 = 0;
        }
        unsigned int v19 = (void **)v7;
        v20.i64[0] = v7 + 8 * v5;
        v20.i64[1] = v20.i64[0];
        unint64_t v21 = v7 + 8 * v8;
        std::construct_at[abi:ne180100]<applesauce::CF::StringRef,char const* const&,applesauce::CF::StringRef*>((CFStringRef *)v20.i64[0], *v3);
        uint64_t v9 = v20.i64[0];
        long long v4 = (CFStringRef *)(v20.i64[1] + 8);
        v20.i64[1] += 8;
        unsigned int v11 = *(void **)v17;
        unint64_t v10 = *(void **)&v17[2];
        if (*(void *)&v17[2] == *(void *)v17)
        {
          int64x2_t v13 = vdupq_n_s64(*(unint64_t *)&v17[2]);
        }
        else
        {
          do
          {
            uint64_t v12 = *--v10;
            *(void *)(v9 - 8) = v12;
            v9 -= 8;
            void *v10 = 0;
          }
          while (v10 != v11);
          int64x2_t v13 = *(int64x2_t *)v17;
          long long v4 = (CFStringRef *)v20.i64[1];
        }
        *(void *)unsigned int v17 = v9;
        *(void *)&v17[2] = v4;
        int64x2_t v20 = v13;
        unint64_t v14 = v18;
        unint64_t v18 = v21;
        unint64_t v21 = v14;
        unsigned int v19 = (void **)v13.i64[0];
        std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v19);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::CF::StringRef,char const* const&,applesauce::CF::StringRef*>(v4++, *v3);
      }
      *(void *)&v17[2] = v4;
      ++v3;
    }
    while (v3 != a2);
  }
  CFArrayRef v15 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef>((uint64_t **)v17);
  unsigned int v19 = (void **)v17;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&v19);
  return v15;
}

void sub_1BB52F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessMeter::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = AUDspLib::RestoreState(this, a2);
  if (!result)
  {
    return AUDspLib::loadDefaultAudioChannelLayout((AUDspLib *)this, (CFDictionaryRef)a2);
  }
  return result;
}

uint64_t AULoudnessMeter::GetParameterInfo(AULoudnessMeter *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if ((a3 & 0xFFFFFFFC) == 0x64)
  {
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    *(void *)&buffer->minCFDictionaryRef Value = 0x42200000C2F00000;
    *(void *)&buffer->defaultCFDictionaryRef Value = 0x40008000C2F00000;
    switch(a3)
    {
      case 'd':
        CFStringRef v5 = @"integrated loudness";
        goto LABEL_10;
      case 'e':
        CFStringRef v5 = @"true peak";
        goto LABEL_10;
      case 'f':
        CFStringRef v5 = @"momentary loudness";
        goto LABEL_10;
      case 'g':
        CFStringRef v5 = @"short term loudness";
LABEL_10:
        buffer->cfNameString = v5;
        buffer->std::regex_constants::match_flag_type flags = 1207992320;
        CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
        break;
      default:
        return 0;
    }
    return 0;
  }
  else
  {
    return AUDspLib::GetParameterInfo(this, a2, a3, buffer);
  }
}

uint64_t AULoudnessMeter::GetParameterList(AULoudnessMeter *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  *a4 = 9;
  if (!a3) {
    return 0;
  }
  for (uint64_t i = 0; i != 5; ++i)
    a3[i] = DspLib::LoudnessMeter::Parameters::kAUParameters[i];
  uint64_t result = 0;
  *(_OWORD *)(a3 + 5) = xmmword_1BB87A900;
  return result;
}

uint64_t AULoudnessMeter::GetParameter(AULoudnessMeter *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v6 = *((void *)this + 66);
  if (!v6) {
    return 4294956429;
  }
  switch(a2)
  {
    case 'd':
      DspLib::LoudnessMeter::Algorithm::integratedLoudness((DspLib::LoudnessMeter::Algorithm *)v6);
      break;
    case 'e':
      if (*(unsigned char *)(v6 + 560)) {
        float Parameter = DspLib::amp2dBSafe((DspLib *)v6, *(float *)(v6 + 456), 0.000001);
      }
      else {
        float Parameter = -120.0;
      }
      break;
    case 'f':
      float Parameter = *(float *)(v6 + 452);
      break;
    case 'g':
      uint64_t v14 = 448;
      if (!*(unsigned char *)(v6 + 561)) {
        uint64_t v14 = 564;
      }
      float Parameter = *(float *)(v6 + v14);
      break;
    default:
      Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
      float Parameter = ausdk::AUElement::GetParameter(Element, a2);
      break;
  }
  uint64_t result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AULoudnessMeter::Initialize(AULoudnessMeter *this)
{
  unsigned int v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessMeter *)((char *)this + 80), 0) + 108);
  if (v2 >= 3 && v2 != *((unsigned __int16 *)this + 900)) {
    return 4294956428;
  }

  return AUDspLib::Initialize(this);
}

void AULoudnessMeter::~AULoudnessMeter(AULoudnessMeter *this)
{
  AUDspLib::~AUDspLib(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUSignalCombiner::GetScopeExtended(AUSignalCombiner *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 1568;
  }
  else {
    return 0;
  }
}

uint64_t AUSignalCombiner::ValidFormat(AUSignalCombiner *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    return 0;
  }
}

uint64_t AUSignalCombiner::SupportedNumChannels(AUSignalCombiner *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSignalCombiner::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 2;
}

BOOL AUSignalCombiner::StreamFormatWritable(AUSignalCombiner *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSignalCombiner::SupportsTail(AUSignalCombiner *this)
{
  return 1;
}

double AUSignalCombiner::GetTailTime(AUSignalCombiner *this)
{
  return 0.0;
}

double AUSignalCombiner::GetLatency(AUSignalCombiner *this)
{
  return 0.0;
}

uint64_t AUSignalCombiner::CopyClumpName(AUSignalCombiner *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if ((a3 - 1) > 3) {
    return 4294956418;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, off_1E623E728[a3 - 1], 0x8000100u);
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUSignalCombiner::GetParameterValueStrings(AUSignalCombiner *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 == 4)
  {
    CFStringRef v5 = (char *)this + 648;
  }
  else if (a2 == 1)
  {
    CFStringRef v5 = (char *)this + 600;
  }
  else
  {
    if (a2) {
      return 4294956418;
    }
    CFStringRef v5 = (char *)this + 576;
  }
  uint64_t v8 = *((void *)v5 + 1);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = v8;
  if (!v8) {
    return 4294956418;
  }
  uint64_t v9 = v6;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= a3;
    if (v10 >= a3) {
      uint64_t v12 = (uint64_t *)v7;
    }
    else {
      uint64_t v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = (char *)v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((_DWORD *)v9 + 8) > a3) {
    return 4294956418;
  }
  if (a2 != 1)
  {
    if (a2) {
      return 4294956418;
    }
    if (a4)
    {
      if (!a3)
      {
        int64x2_t v13 = &xmmword_1E623E6F0;
LABEL_31:
        long long v17 = *v13;
        CFIndex v14 = 2;
        goto LABEL_32;
      }
      return 4294956418;
    }
    return 0;
  }
  if (!a4) {
    return 0;
  }
  if (a3 == 2)
  {
    int64x2_t v13 = &xmmword_1E623E718;
    goto LABEL_31;
  }
  if (a3 == 1)
  {
    long long v17 = xmmword_1E623E700;
    unint64_t v18 = @"Only Track External Channel During Occlusion";
    CFIndex v14 = 3;
LABEL_32:
    CFArrayRef v16 = CFArrayCreate(0, (const void **)&v17, v14, 0);
    uint64_t result = 0;
    *a4 = v16;
    return result;
  }
  return 4294956418;
}

uint64_t AUSignalCombiner::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    if (*((unsigned char *)this + 17))
    {
      ++*((_DWORD *)this + 137);
      ++*((_DWORD *)this + 139);
      ++*((_DWORD *)this + 141);
    }
  }
  return result;
}

UInt8 *AUSignalCombiner::SaveExtendedScopes(AUSignalCombiner *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSignalCombiner::GetParameterInfo(AUSignalCombiner *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  if (a2 == 4)
  {
    uint64_t v6 = (char *)this + 648;
  }
  else if (a2 == 1)
  {
    uint64_t v6 = (char *)this + 600;
  }
  else
  {
    if (a2) {
      return 4294956418;
    }
    uint64_t v6 = (char *)this + 576;
  }
  uint64_t v9 = (uint64_t *)*((void *)v6 + 1);
  uint64_t v8 = (uint64_t **)(v6 + 8);
  uint64_t v7 = v9;
  if (!v9) {
    return 4294956418;
  }
  unsigned int v10 = v8;
  BOOL v11 = v7;
  do
  {
    unsigned int v12 = *((_DWORD *)v11 + 8);
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      CFIndex v14 = (uint64_t **)v11;
    }
    else {
      CFIndex v14 = (uint64_t **)(v11 + 1);
    }
    if (v13) {
      unsigned int v10 = (uint64_t **)v11;
    }
    BOOL v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || *((_DWORD *)v10 + 8) > a3) {
    return 4294956418;
  }
  a4->unit = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(v7, a3) + 2);
  a4->minCFDictionaryRef Value = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 4);
  a4->maxCFDictionaryRef Value = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 5);
  a4->defaultCFDictionaryRef Value = *((AudioUnitParameterValue *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 6);
  a4->std::regex_constants::match_flag_type flags = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 3) + 1082130432;
  if (*((int *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 7) >= 1)
  {
    a4->clumpID = *((_DWORD *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3) + 7);
    a4->flags |= 0x100000u;
  }
  CFStringRef v16 = (const __CFString *)*std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v8, a3);
  a4->cfNameString = v16;
  a4->flags |= 0x8000000u;
  CFStringGetCString(v16, a4->name, 52, 0x8000100u);
  return 0;
}

uint64_t AUSignalCombiner::SetBusCount(AUSignalCombiner *this, int a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    if (a3 - 1 <= 0x14)
    {
      uint64_t v4 = (AUSignalCombiner *)((char *)this + 128);
      goto LABEL_7;
    }
    {
      AU::AUSignalCombiner::get_log(void)::ausicm_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUAUSignalCombiner");
    }
    uint64_t v6 = AU::AUSignalCombiner::get_log(void)::ausicm_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUSignalCombiner::get_log(void)::ausicm_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956445;
    }
    int v8 = 136315650;
    uint64_t v9 = "AUSignalCombiner.cpp";
    __int16 v10 = 1024;
    int v11 = 155;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    uint64_t v7 = "%s:%-5d Invalid number (%u) of output buses requested. We only support 1–2 buses.";
    goto LABEL_15;
  }
  if (a2 != 1) {
    return 4294956430;
  }
  if (a3 - 1 <= 0x13)
  {
    uint64_t v4 = (AUSignalCombiner *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  {
    {
      AU::AUSignalCombiner::get_log(void)::ausicm_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUAUSignalCombiner");
    }
  }
  uint64_t v6 = AU::AUSignalCombiner::get_log(void)::ausicm_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUSignalCombiner::get_log(void)::ausicm_os_log, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315650;
    uint64_t v9 = "AUSignalCombiner.cpp";
    __int16 v10 = 1024;
    int v11 = 146;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    uint64_t v7 = "%s:%-5d Invalid number (%u) of input buses requested. We only support 1 bus.";
LABEL_15:
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v8, 0x18u);
  }
  return 4294956445;
}

BOOL AUSignalCombiner::BusCountWritable(AUSignalCombiner *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUSignalCombiner::Render(AUSignalCombiner *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  __int16 v10 = (AUSignalCombiner *)((char *)this + 80);
  while (1)
  {
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v9 >= v12) {
      break;
    }
    uint64_t Element = ausdk::AUScope::GetElement(v10, v9);
    if (Element && *(_DWORD *)(Element + 172))
    {
      uint64_t v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v9, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v8 = 1;
    }
    uint64_t v9 = (v9 + 1);
  }
  unint64_t v16 = 0;
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  do
  {
    uint64_t v17 = *((void *)this + 21);
    if (v17) {
      LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v16 >= v18)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v19 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 128), v16);
      uint64_t v20 = ausdk::AUIOElement::PrepareBuffer(v19, a4);
    }
    *((void *)v31 + v16++) = v20;
  }
  while (v16 != 21);
  if (v8) {
    return 0;
  }
  unint64_t v21 = 0;
  memset(v30, 0, sizeof(v30));
  do
  {
    uint64_t v22 = *((void *)this + 15);
    if (v22) {
      LODWORD(v23) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
    }
    else {
      uint64_t v23 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v21 >= v23)
    {
      uint64_t BufferList = 0;
    }
    else
    {
      uint64_t v24 = ausdk::AUScope::SafeGetElement(v10, v21);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v24 + 144));
    }
    *((void *)v30 + v21++) = BufferList;
  }
  while (v21 != 20);
  uint64_t v26 = *((void *)this + 15);
  if (v26) {
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  else {
    uint64_t v27 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v28 = *((void *)this + 21);
  if (v28) {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  else {
    uint64_t v29 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  return (*(uint64_t (**)(AUSignalCombiner *, unsigned int *, uint64_t, uint64_t, _OWORD *, uint64_t, _OWORD *))(*(void *)this + 184))(this, a2, a4, v27, v30, v29, v31);
}

uint64_t AUSignalCombiner::ProcessMultipleBufferLists(AUSignalCombiner *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 133) != a3) {
    return 4294956422;
  }
  if (*((_DWORD *)this + 135) != a4 || *((_DWORD *)this + 136) != a6) {
    return 4294956419;
  }
  unsigned int v10 = 2 * a3;
  if (a6 >= a4) {
    unint64_t v11 = a4;
  }
  else {
    unint64_t v11 = a6;
  }
  if (v11)
  {
    uint64_t v12 = 0;
    do
    {
      if (v10) {
        memmove(a7[v12]->mBuffers[0].mData, a5[v12]->mBuffers[0].mData, 4 * v10);
      }
      if (!(v12 * 8) && *((unsigned char *)this + 716))
      {
        uint64_t mNumberBuffers = (*a5)->mNumberBuffers;
        if ((mNumberBuffers & 1) != 0 || (*a7)->mNumberBuffers < 2)
        {
          *((unsigned char *)this + 716) = 0;
        }
        else if (v10)
        {
          memmove(*(void **)&(*a7)[1].mBuffers[0].mNumberChannels, *(const void **)((char *)&(*a5)->mBuffers[0].mData + ((8 * mNumberBuffers) & 0x7FFFFFFF0)), 4 * v10);
        }
      }
      ++v12;
    }
    while (v11 != v12);
    a6 = *((_DWORD *)this + 136);
  }
  if (v11 < a6)
  {
    do
    {
      if (v10)
      {
        memmove(a7[v11]->mBuffers[0].mData, a5[*((_DWORD *)this + 135) - 1]->mBuffers[0].mData, 4 * v10);
        a6 = *((_DWORD *)this + 136);
      }
      ++v11;
    }
    while (v11 < a6);
  }
  vDSP_vfill(&AlgorithmUtils::kZerof, *((float **)this + 193), 1, *((unsigned int *)this + 134));
  if (!*((unsigned char *)this + 528))
  {
    AUSignalCombiner::propagateParameterChanges(this);
    *((_DWORD *)this + 342) = 0;
    if (*((_DWORD *)this + 135))
    {
      unint64_t v14 = 0;
      uint64_t v15 = (2 * *((_DWORD *)this + 133));
      unint64_t v16 = (_DWORD *)((char *)this + 748);
      while (1)
      {
        int v17 = *(v16 - 5);
        if (v17 < 0) {
          int v17 = *((_DWORD *)this + 171);
        }
        *(v16 - 1) = v17;
        int v18 = *(v16 - 4);
        if (v18 == 1 || v18 == 2 && *((unsigned char *)this + 677)) {
          *(v16 - 1) = *((_DWORD *)this + 170);
        }
        unsigned int v19 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), v14) + 108) - 1;
        unsigned int v20 = *(v16 - 2);
        if (v19 >= *(v16 - 1)) {
          unsigned int v19 = *(v16 - 1);
        }
        *(v16 - 1) = v19;
        if ((v20 & 0x80000000) == 0 && v15)
        {
          if (*((_DWORD *)this + 136) - 1 < v20) {
            unsigned int v20 = *((_DWORD *)this + 136) - 1;
          }
          memmove(a7[v20]->mBuffers[0].mData, a5[v14]->mBuffers[v19].mData, 4 * v15);
        }
        if ((*v16 & 0x80000000) != 0)
        {
          if (*((unsigned char *)v16 - 12))
          {
LABEL_42:
            uint64_t v21 = *(v16 - 1);
            *(void *)(*((void *)this + 172) + 8 * v14) = a5[v14]->mBuffers[v21].mData;
            uint64_t v22 = a5[v14];
            if (v22->mNumberBuffers)
            {
              mData = 0;
              *((unsigned char *)this + 716) = 0;
            }
            else if (*((unsigned char *)this + 716))
            {
              mData = v22->mBuffers[(v21 + (v22->mNumberBuffers >> 1))].mData;
            }
            else
            {
              mData = 0;
            }
            *(void *)(*((void *)this + 175) + 8 * v14) = mData;
            ++*((_DWORD *)this + 342);
            goto LABEL_50;
          }
        }
        else if (*v16)
        {
          goto LABEL_42;
        }
        *(void *)(*((void *)this + 172) + 8 * v14) = 0;
        *(void *)(*((void *)this + 175) + 8 * v14) = 0;
LABEL_50:
        uint64_t v24 = *((unsigned int *)this + 173);
        if ((v24 & 0x80000000) == 0 && v14 == v24)
        {
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), *(v16 - 1));
          *((float *)this + 302) = ausdk::AUElement::GetParameter(Element, 0);
          uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), *(v16 - 1));
          *((float *)this + 303) = ausdk::AUElement::GetParameter(v26, 1u);
          uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), *(v16 - 1));
          *((float *)this + 304) = ausdk::AUElement::GetParameter(v27, 2u);
          uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), *(v16 - 1));
          *((float *)this + 305) = ausdk::AUElement::GetParameter(v28, 3u);
          uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), *(v16 - 1));
          *((float *)this + 306) = ausdk::AUElement::GetParameter(v29, 4u);
        }
        ++v14;
        unint64_t v30 = *((unsigned int *)this + 135);
        v16 += 6;
        if (v14 >= v30) {
          goto LABEL_58;
        }
      }
    }
    LODWORD(v30) = 0;
LABEL_58:
    if (*((_DWORD *)this + 168) == 1)
    {
      int v32 = *((_DWORD *)this + 342);
      if (v32)
      {
        unsigned int v33 = *((_DWORD *)this + 172);
        if (*((unsigned char *)this + 676) && *((int *)this + 175) >= 0) {
          unsigned int v33 = *((_DWORD *)this + 175);
        }
        unsigned int v34 = v30 - 1;
        if (v34 >= v33) {
          unsigned int v34 = v33;
        }
        *((_DWORD *)this + 343) = v34;
        unsigned int v35 = *((_DWORD *)this + 176);
        if ((v35 & 0x80000000) != 0 || !*((unsigned char *)this + 24 * v35 + 736)) {
          goto LABEL_72;
        }
        *((_DWORD *)this + 177) = *((_DWORD *)this + 178);
        uint64_t v36 = *((unsigned int *)this + 174);
        if ((v36 & 0x80000000) == 0)
        {
          uint64_t v37 = *((unsigned int *)this + 133);
          __A.realp = (float *)a5[v36]->mBuffers[*((unsigned int *)this + 6 * v36 + 186)].mData;
          __A.imagp = &__A.realp[v37];
          float v38 = (float *)*((void *)this + 178);
          float v39 = *__A.realp;
          float v40 = *__A.imagp;
          vDSP_Length v41 = *((unsigned int *)this + 134) - 1;
          vDSP_zvmags(&__A, 1, v38, 1, v41);
          float *v38 = v39 * v39;
          v38[v41] = v40 * v40;
          LODWORD(__C.realp) = 0;
          vDSP_sve(*((const float **)this + 178), 1, (float *)&__C, *((unsigned int *)this + 134));
          float v42 = log10f(*(float *)&__C.realp + 2.2204e-16) * 10.0;
          *((float *)this + 177) = v42;
          int v32 = *((_DWORD *)this + 342);
          if (v42 < *((float *)this + 178)) {
            goto LABEL_70;
          }
        }
        if (*((unsigned char *)this + 677))
        {
LABEL_70:
          uint64_t v43 = *((int *)this + 176);
          *(void *)(*((void *)this + 172) + 8 * v43) = 0;
          *(void *)(*((void *)this + 175) + 8 * v43) = 0;
          *((_DWORD *)this + 342) = --v32;
        }
        if (v32)
        {
LABEL_72:
          uint64_t v44 = (uint64_t)*a7;
          int v45 = *((unsigned __int8 *)this + 716);
          if (*((unsigned char *)this + 716)) {
            __dst = *(char **)(v44 + 32);
          }
          else {
            __dst = 0;
          }
          uint32_t v46 = *(char **)(v44 + 16);
          unint64_t v47 = *((unsigned int *)this + 173);
          if ((v47 & 0x80000000) == 0)
          {
            uint64_t v48 = *((void *)this + 172);
            if (v47 < (*((void *)this + 173) - v48) >> 3)
            {
              int v49 = *(const void **)(v48 + 8 * v47);
              if (v49)
              {
                if (2 * *((_DWORD *)this + 133))
                {
                  memmove(v46, v49, 4 * (2 * *((_DWORD *)this + 133)));
                  int v45 = *((unsigned __int8 *)this + 716);
                }
                if (v45 && 2 * *((_DWORD *)this + 133)) {
                  memmove(__dst, *(const void **)(*((void *)this + 175) + 8 * *((int *)this + 173)), 4 * (2 * *((_DWORD *)this + 133)));
                }
              }
            }
          }
          uint64_t v50 = *((void *)this + 172);
          uint64_t v51 = *((unsigned int *)this + 133);
          uint32_t v52 = (float *)&v46[4 * v51];
          uint64_t v53 = (float *)&__dst[4 * v51];
          unsigned int v54 = *((_DWORD *)this + 180);
          vDSP_Length v55 = *((_DWORD *)this + 181) - v54;
          uint64_t v56 = *((void *)this + 173);
          if (v56 != v50)
          {
            uint64_t v57 = 0;
            uint64_t v58 = *(void *)(v50 + 8 * *((unsigned int *)this + 343));
            char v59 = 1;
            while (!*(void *)(v50 + 8 * v57))
            {
LABEL_108:
              if (++v57 >= (unint64_t)((v56 - v50) >> 3))
              {
                unsigned int v54 = *((_DWORD *)this + 180);
                goto LABEL_110;
              }
            }
            __A.realp = *(float **)(v50 + 8 * v57);
            vDSP_Length v60 = *((unsigned int *)this + 133);
            __A.imagp = (float *)(*(void *)(v50 + 8 * v57) + 4 * v60);
            if (*((unsigned char *)this + 716))
            {
              uint64_t v61 = *((void *)this + 175);
              __C.realp = *(float **)(v61 + 8 * v57);
              __C.imagp = (float *)(*(void *)(v61 + 8 * v57) + 4 * v60);
            }
            vDSP_zvabs(&__A, 1, *((float **)this + 181), 1, v60);
            uint64_t v62 = (float *)*((void *)this + 181);
            float *v62 = fabsf(*__A.realp);
            vDSP_Length v63 = *((unsigned int *)this + 133);
            v62[v63] = fabsf(*__A.imagp);
            if (*((unsigned char *)this + 716))
            {
              vDSP_zvabs(&__C, 1, *((float **)this + 187), 1, v63);
              CFStringRef v64 = (float *)*((void *)this + 187);
              float *v64 = fabsf(*__C.realp);
              v64[*((unsigned int *)this + 133)] = fabsf(*__C.imagp);
            }
            float __B = (float)(int)v57;
            vDSP_Length v65 = *((unsigned int *)this + 134);
            if (v59)
            {
              memcpy(*((void **)this + 178), *((const void **)this + 181), 4 * v65);
              vDSP_vfill(&__B, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((unsigned char *)this + 716)) {
                memcpy(*((void **)this + 184), *((const void **)this + 187), 4 * *((unsigned int *)this + 134));
              }
              if (!v58) {
                goto LABEL_99;
              }
            }
            else
            {
              vDSP_vmin(*((const float **)this + 181), 1, *((const float **)this + 178), 1, *((float **)this + 178), 1, v65);
              vDSP_vsub(*((const float **)this + 178), 1, *((const float **)this + 181), 1, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vthrsc(*((const float **)this + 190), 1, &AUSignalCombiner::kEpsf, &AUSignalCombiner::kPoint5f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vsadd(*((const float **)this + 190), 1, &AUSignalCombiner::kPoint5f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vmul(*((const float **)this + 190), 1, *((const float **)this + 193), 1, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((unsigned char *)this + 716)) {
                vDSP_vmul(*((const float **)this + 190), 1, *((const float **)this + 184), 1, *((float **)this + 184), 1, *((unsigned int *)this + 134));
              }
              vDSP_vsadd(*((const float **)this + 190), 1, &AUSignalCombiner::kMinus1f, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vabs(*((const float **)this + 190), 1, *((float **)this + 190), 1, *((unsigned int *)this + 134));
              vDSP_vsma(*((const float **)this + 190), 1, &__B, *((const float **)this + 193), 1, *((float **)this + 193), 1, *((unsigned int *)this + 134));
              if (*((unsigned char *)this + 716)) {
                vDSP_vma(*((const float **)this + 190), 1, *((const float **)this + 187), 1, *((const float **)this + 184), 1, *((float **)this + 184), 1, *((unsigned int *)this + 134));
              }
            }
            if (v57 != *((_DWORD *)this + 343))
            {
LABEL_105:
              if (v59) {
                char v59 = 0;
              }
              uint64_t v56 = *((void *)this + 173);
              uint64_t v50 = *((void *)this + 172);
              goto LABEL_108;
            }
LABEL_99:
            *((_DWORD *)this + 343) = v57;
            vDSP_vsadd(*((const float **)this + 181), 1, &AUSignalCombiner::kEpsf, *((float **)this + 181), 1, *((unsigned int *)this + 134));
            vDSP_svdiv(&AUSignalCombiner::kOnef, *((const float **)this + 181), 1, *((float **)this + 181), 1, *((unsigned int *)this + 134));
            float v66 = *v52;
            vDSP_vmul(&__A.realp[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 181) + 4 * *((unsigned int *)this + 180)), 1, (float *)&v46[4 * *((unsigned int *)this + 180)], 1, v55);
            vDSP_vmul(&__A.imagp[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 181) + 4 * *((unsigned int *)this + 180)), 1, &v52[*((unsigned int *)this + 180)], 1, v55);
            uint64_t v67 = *((unsigned int *)this + 181);
            if (v67 == *((_DWORD *)this + 133)) {
              float v66 = *__A.imagp * *(float *)(*((void *)this + 181) + 4 * v67);
            }
            float *v52 = v66;
            if (*((unsigned char *)this + 716))
            {
              vDSP_vsadd(*((const float **)this + 187), 1, &AUSignalCombiner::kEpsf, *((float **)this + 187), 1, *((unsigned int *)this + 134));
              vDSP_svdiv(&AUSignalCombiner::kOnef, *((const float **)this + 187), 1, *((float **)this + 187), 1, *((unsigned int *)this + 134));
              float v68 = *v53;
              vDSP_vmul(&__C.realp[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 187) + 4 * *((unsigned int *)this + 180)), 1, (float *)&__dst[4 * *((unsigned int *)this + 180)], 1, v55);
              vDSP_vmul(&__C.imagp[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 187) + 4 * *((unsigned int *)this + 180)), 1, &v53[*((unsigned int *)this + 180)], 1, v55);
              uint64_t v69 = *((unsigned int *)this + 181);
              if (v69 == *((_DWORD *)this + 133)) {
                float v68 = *__C.imagp * *(float *)(*((void *)this + 187) + 4 * v69);
              }
              *uint64_t v53 = v68;
            }
            goto LABEL_105;
          }
LABEL_110:
          float v70 = *v52;
          vDSP_vmul((const float *)&v46[4 * v54], 1, (const float *)(*((void *)this + 178) + 4 * v54), 1, (float *)&v46[4 * v54], 1, v55);
          vDSP_vmul(&v52[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 178) + 4 * *((unsigned int *)this + 180)), 1, &v52[*((unsigned int *)this + 180)], 1, v55);
          uint64_t v71 = *((unsigned int *)this + 181);
          float v72 = 1.0;
          if (v71 == *((_DWORD *)this + 133)) {
            float v72 = *(float *)(*((void *)this + 178) + 4 * v71);
          }
          float *v52 = v70 * v72;
          if (*((unsigned char *)this + 716))
          {
            float v73 = *v53;
            vDSP_vmul((const float *)&__dst[4 * *((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 184) + 4 * *((unsigned int *)this + 180)), 1, (float *)&__dst[4 * *((unsigned int *)this + 180)], 1, v55);
            vDSP_vmul(&v53[*((unsigned int *)this + 180)], 1, (const float *)(*((void *)this + 184) + 4 * *((unsigned int *)this + 180)), 1, &v53[*((unsigned int *)this + 180)], 1, v55);
            uint64_t v74 = *((unsigned int *)this + 181);
            float v75 = 1.0;
            if (v74 == *((_DWORD *)this + 133)) {
              float v75 = *(float *)(*((void *)this + 184) + 4 * v74);
            }
            *uint64_t v53 = v73 * v75;
          }
        }
      }
    }
    uint64_t v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v76, 0x97u, (float)*((unsigned int *)this + 343), 0);
    unint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v77, 0x9Au, *((float *)this + 177), 0);
    if (*((_DWORD *)this + 135))
    {
      unint64_t v78 = 0;
      uint64_t v79 = (unsigned int *)((char *)this + 744);
      do
      {
        uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v78);
        unsigned int v81 = *v79;
        v79 += 6;
        ausdk::AUElement::SetParameter(v80, 0x32u, (float)v81, 0);
        ++v78;
      }
      while (v78 < *((unsigned int *)this + 135));
    }
    BOOL v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), 0);
    ausdk::AUElement::SetParameter(v82, 0, *((float *)this + 302), 0);
    uint64_t v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), 0);
    ausdk::AUElement::SetParameter(v83, 1u, *((float *)this + 303), 0);
    uint32_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), 0);
    ausdk::AUElement::SetParameter(v84, 2u, *((float *)this + 304), 0);
    float v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), 0);
    ausdk::AUElement::SetParameter(v85, 3u, *((float *)this + 305), 0);
    uint64_t v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 1568), 0);
    ausdk::AUElement::SetParameter(v86, 4u, *((float *)this + 306), 0);
  }
  return 0;
}

void AUSignalCombiner::propagateParameterChanges(AUSignalCombiner *this)
{
  int v2 = *((_DWORD *)this + 137);
  if (v2 != *((_DWORD *)this + 138))
  {
    *((_DWORD *)this + 138) = v2;
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 168) = ausdk::AUElement::GetParameter(Element, 0);
    uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 171) = ausdk::AUElement::GetParameter(v4, 0x32u);
    CFStringRef v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 172) = (int)ausdk::AUElement::GetParameter(v5, 0x96u);
    uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 173) = (int)ausdk::AUElement::GetParameter(v6, 0x64u);
    uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v7, 0x65u);
    char v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 175) = (int)ausdk::AUElement::GetParameter(v8, 0x66u);
    uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 176) = (int)ausdk::AUElement::GetParameter(v9, 0x67u);
    unsigned int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((float *)this + 178) = ausdk::AUElement::GetParameter(v10, 0x9Bu);
    unint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((unsigned char *)this + 716) = ausdk::AUElement::GetParameter(v11, 0x9Cu) != 0.0;
    float v12 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
    float v13 = v12 / (float)((float)*((unsigned int *)this + 133) + (float)*((unsigned int *)this + 133));
    unint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    float v15 = roundf(fabsf(ausdk::AUElement::GetParameter(v14, 0x98u) / v13));
    if (v15 > (float)*((unsigned int *)this + 133)) {
      float v15 = (float)*((unsigned int *)this + 133);
    }
    *((_DWORD *)this + 180) = (unint64_t)v15;
    unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    float v17 = roundf(fabsf(ausdk::AUElement::GetParameter(v16, 0x99u) / v13));
    if (v17 > (float)*((unsigned int *)this + 133)) {
      float v17 = (float)*((unsigned int *)this + 133);
    }
    *((_DWORD *)this + 181) = (unint64_t)v17;
    unsigned int v18 = (unint64_t)v17 - 1;
    if (v18 >= *((_DWORD *)this + 180)) {
      unsigned int v18 = *((_DWORD *)this + 180);
    }
    *((_DWORD *)this + 180) = v18;
    if (*((_DWORD *)this + 135))
    {
      unint64_t v19 = 0;
      unsigned int v20 = (_DWORD *)((char *)this + 740);
      do
      {
        uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v19);
        *(v20 - 3) = (int)ausdk::AUElement::GetParameter(v21, 0);
        uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v19);
        *(v20 - 2) = ausdk::AUElement::GetParameter(v22, 1u);
        uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v19);
        *((unsigned char *)v20 - 4) = ausdk::AUElement::GetParameter(v23, 2u) != 0.0;
        uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v19);
        *unsigned int v20 = (int)ausdk::AUElement::GetParameter(v24, 3u);
        v20 += 6;
        ++v19;
      }
      while (v19 < *((unsigned int *)this + 135));
    }
  }
  int v25 = *((_DWORD *)this + 139);
  if (v25 != *((_DWORD *)this + 140))
  {
    *((_DWORD *)this + 140) = v25;
    uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((unsigned char *)this + 676) = ausdk::AUElement::GetParameter(v26, 0xAu) != 0.0;
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((unsigned char *)this + 677) = ausdk::AUElement::GetParameter(v27, 0xBu) != 0.0;
    uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
    *((_DWORD *)this + 170) = ausdk::AUElement::GetParameter(v28, 0x33u);
    if (*((_DWORD *)this + 135))
    {
      unint64_t v29 = 0;
      unint64_t v30 = (_DWORD *)((char *)this + 748);
      do
      {
        uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v29);
        *unint64_t v30 = (int)ausdk::AUElement::GetParameter(v31, 0x33u);
        v30 += 6;
        ++v29;
      }
      while (v29 < *((unsigned int *)this + 135));
    }
  }
  int v32 = *((_DWORD *)this + 141);
  if (v32 != *((_DWORD *)this + 142))
  {
    uint64_t v33 = 0;
    *((_DWORD *)this + 142) = v32;
    unsigned int v34 = (AUSignalCombiner *)((char *)this + 1568);
    unsigned int v35 = (float *)((char *)this + 1224);
    do
    {
      uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v34, v33);
      *(v35 - 4) = ausdk::AUElement::GetParameter(v36, 0);
      uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v34, v33);
      *(v35 - 3) = ausdk::AUElement::GetParameter(v37, 1u);
      float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v34, v33);
      *(v35 - 2) = ausdk::AUElement::GetParameter(v38, 2u);
      float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v34, v33);
      *(v35 - 1) = ausdk::AUElement::GetParameter(v39, 3u);
      float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v34, v33);
      *unsigned int v35 = ausdk::AUElement::GetParameter(v40, 4u);
      v35 += 5;
      ++v33;
    }
    while (v33 != 8);
  }
}

uint64_t AUSignalCombiner::CanScheduleParameters(AUSignalCombiner *this)
{
  return 0;
}

uint64_t AUSignalCombiner::SetParameter(AUSignalCombiner *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3 == 4)
  {
    float v13 = (char *)this + 564;
  }
  else
  {
    if (a3 == 1)
    {
      float v12 = (uint64_t **)((char *)this + 600);
    }
    else
    {
      if (a3) {
        return 4294956418;
      }
      float v12 = (uint64_t **)((char *)this + 576);
    }
    if ((*((unsigned char *)std::map<unsigned int,SpatialCaptureParameterInfo>::at(v12[1], a2) + 13) & 0x80) != 0) {
      float v13 = (char *)this + 556;
    }
    else {
      float v13 = (char *)this + 548;
    }
  }
  uint64_t result = 0;
  ++*(_DWORD *)v13;
  return result;
}

uint64_t AUSignalCombiner::SetProperty(AUSignalCombiner *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUSignalCombiner::GetProperty(AUSignalCombiner *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  v18[3] = v5;
  v18[4] = v6;
  uint64_t result = 4294956417;
  if (a2 <= 1001)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 528);
LABEL_26:
      char *__dst = v10;
      return result;
    }
    if (a2 != 1001) {
      return result;
    }
    if (*((unsigned char *)this + 17))
    {
      int v11 = *((_DWORD *)this + 133);
      if (v11 == *((_DWORD *)this + 84))
      {
        BOOL v12 = __CFADD__(v11, 1);
        unsigned int v13 = v11 + 1;
        if (!v12) {
          memmove(__dst, *((const void **)this + 193), 4 * v13);
        }
        return 0;
      }
    }
    return 4294956446;
  }
  if (a2 != 1002)
  {
    if (a2 != 1003)
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 376);
      goto LABEL_26;
    }
    if (*((unsigned char *)this + 17) && *((_DWORD *)this + 133) == *((_DWORD *)this + 84))
    {
      CFArrayRef v17 = applesauce::CF::details::make_CFArrayRef<float,std::__wrap_iter<float const*>>(*((int **)this + 193), *((int **)this + 194));
      v18[0] = 0;
      *(void *)__dst = v17;
      applesauce::CF::ArrayRef::~ArrayRef(v18);
      return 0;
    }
    return 4294956446;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956446;
  }
  int v14 = *((_DWORD *)this + 133);
  if (v14 != *((_DWORD *)this + 84)) {
    return 4294956446;
  }
  if (v14 == -1) {
    return 0;
  }
  unint64_t v15 = 0;
  uint64_t v16 = *((void *)this + 193);
  do
  {
    uint64_t result = 0;
    __dst[v15] = *(float *)(v16 + 4 * v15);
    ++v15;
  }
  while (v15 < (*((_DWORD *)this + 133) + 1));
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float,std::__wrap_iter<float const*>>(int *a1, int *a2)
{
  uint64_t v3 = a1;
  uint64_t v7 = 0;
  char v8 = 0;
  unint64_t v9 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v7, a2 - a1);
  if (v3 != a2)
  {
    uint64_t v4 = v8;
    do
    {
      if ((unint64_t)v4 >= v9) {
        uint64_t v4 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>((uint64_t *)&v7, v3);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(v4++, v3);
      }
      char v8 = v4;
      ++v3;
    }
    while (v3 != a2);
  }
  CFArrayRef v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v7);
  int v10 = (void **)&v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v5;
}

void sub_1BB5312E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t AUSignalCombiner::GetPropertyInfo(AUSignalCombiner *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1001)
  {
    if (a2 != 1002)
    {
      if (a2 == 1003)
      {
        *a6 = 0;
        int v8 = 8;
        goto LABEL_13;
      }
      if (a2 != 3700) {
        return result;
      }
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (a2 == 21)
  {
LABEL_11:
    *a6 = 1;
    int v8 = 4;
    goto LABEL_13;
  }
  if (a2 == 1001)
  {
LABEL_10:
    *a6 = 0;
    int v8 = 4 * *((_DWORD *)this + 84) + 4;
LABEL_13:
    uint64_t result = 0;
    *a5 = v8;
  }
  return result;
}

uint64_t AUSignalCombiner::Reset(AUSignalCombiner *this)
{
  *(_OWORD *)((char *)this + 548) = xmmword_1BB873AA0;
  *(void *)((char *)this + 564) = 1;
  int v2 = (AUSignalCombiner *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0xAu, 0.0, 0);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v4, 0xBu, 0.0, 0);
  CFArrayRef v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v5, 0x33u, 0.0, 0);
  if (*((_DWORD *)this + 135))
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSignalCombiner *)((char *)this + 80), v6);
      ausdk::AUElement::SetParameter(v7, 0x33u, -1.0, 0);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 135));
  }
  AUSignalCombiner::propagateParameterChanges(this);
  return 0;
}

uint64_t AUSignalCombiner::Initialize(AUSignalCombiner *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if ((v3 - 21) >= 0xFFFFFFEC && v5 != 0 && v5 <= 0x15)
  {
    unsigned int v9 = 0;
    while (1)
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), v9);
      if (*(_DWORD *)(Element + 88) != 1718773105) {
        break;
      }
      uint64_t v11 = Element;
      double v12 = *(double *)(Element + 80);
      float v13 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
      if (v12 != v13 || *(_DWORD *)(v11 + 108) == 0) {
        break;
      }
      if (v3 == ++v9)
      {
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v16 = ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 128), v15);
          if (*(_DWORD *)(v16 + 88) != 1718773105) {
            break;
          }
          uint64_t v17 = v16;
          double v18 = *(double *)(v16 + 80);
          float v19 = *(double *)(ausdk::AUScope::SafeGetElement((AUSignalCombiner *)((char *)this + 80), 0) + 80);
          if (v18 != v19 || *(_DWORD *)(v17 + 108) > 2u) {
            break;
          }
          if (v5 == ++v15)
          {
            int v21 = *((_DWORD *)this + 84);
            *((_DWORD *)this + 133) = v21;
            *((_DWORD *)this + 134) = v21 + 1;
            *((_DWORD *)this + 135) = v3;
            *((_DWORD *)this + 136) = v5;
            uint64_t v28 = 0;
            std::vector<float *>::assign((char **)this + 172, v3, &v28);
            uint64_t v28 = 0;
            std::vector<float *>::assign((char **)this + 175, v3, &v28);
            unint64_t v22 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 178, v22, &v28);
            unint64_t v23 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 181, v23, &v28);
            unint64_t v24 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 184, v24, &v28);
            unint64_t v25 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 187, v25, &v28);
            unint64_t v26 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 190, v26, &v28);
            unint64_t v27 = *((unsigned int *)this + 134);
            LODWORD(v28) = 0;
            std::vector<float>::assign((char **)this + 193, v27, &v28);
            (*(void (**)(AUSignalCombiner *, void, void))(*(void *)this + 72))(this, 0, 0);
            return 0;
          }
        }
        return 4294956428;
      }
    }
  }
  return 4294956428;
}

void AUSignalCombiner::CreateExtendedElements(AUSignalCombiner *this)
{
  uint64_t v1 = (AUSignalCombiner *)((char *)this + 1568);
  ausdk::AUScope::Initialize((AUSignalCombiner *)((char *)this + 1568), this, 4, 8);
  for (unsigned int i = 0; i != 8; ++i)
  {
    std::to_string(&v8, i);
    uint64_t v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB531808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUSignalCombiner::~AUSignalCombiner(AUSignalCombiner *this)
{
  AUSignalCombiner::~AUSignalCombiner(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t vars8;

  *(void *)this = &unk_1F14B2E18;
  int64_t v10 = (void **)((char *)this + 1584);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v2 = (void *)*((void *)this + 193);
  if (v2)
  {
    *((void *)this + 194) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 190);
  if (v3)
  {
    *((void *)this + 191) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 187);
  if (v4)
  {
    *((void *)this + 188) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 184);
  if (v5)
  {
    *((void *)this + 185) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = (void *)*((void *)this + 181);
  if (v6)
  {
    *((void *)this + 182) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 178);
  if (v7)
  {
    *((void *)this + 179) = v7;
    operator delete(v7);
  }
  std::string v8 = (void *)*((void *)this + 175);
  if (v8)
  {
    *((void *)this + 176) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)this + 172);
  if (v9)
  {
    *((void *)this + 173) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 82));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 79));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 76));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 73));

  ausdk::AUBase::~AUBase(this);
}

void std::__tree<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>>::__emplace_unique_impl<std::pair<sicm::ParametersInScoped,std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,int,int,int,int>>>(uint64_t **a1, int32x2_t *a2)
{
  long long v4 = (int32x2_t *)operator new(0x48uLL);
  uint64_t v5 = a1 + 1;
  CFStringRef v6 = a1[1];
  unsigned __int32 v7 = a2->i32[0];
  v4[4].i32[0] = a2->i32[0];
  v4[5] = a2[1];
  float32x2_t v8 = vcvt_f32_s32(a2[3]);
  v4[6] = a2[2];
  v4[7] = (int32x2_t)v8;
  *(float *)v4[8].i32 = (float)a2[4].i32[0];
  v4[8].i32[1] = a2[4].i32[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned __int32 v10 = *((_DWORD *)v6 + 8);
        if (v7 >= v10) {
          break;
        }
        CFStringRef v6 = *v9;
        uint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= v7) {
        break;
      }
      CFStringRef v6 = v9[1];
      if (!v6)
      {
        uint64_t v5 = v9 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v4);
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v9, v5, (uint64_t *)v4);
  }
}

uint64_t PassThroughSpatializer::processAccumulating(PassThroughSpatializer *this, const float *__A, float **a3, unsigned int a4, float *const *a5, unsigned int a6, vDSP_Length __N, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    if (a4)
    {
      int v11 = __N;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      float v16 = (float)__N;
      vDSP_Length v17 = __N;
      uint64_t v18 = 4 * a4;
      do
      {
        if (*((unsigned char *)this + 132)) {
          float v19 = *(float *)(*((void *)this + 17) + v14) * a8;
        }
        else {
          float v19 = 0.0;
        }
        if (*((unsigned char *)this + 17))
        {
          uint64_t v20 = *((void *)this + 42);
          int v21 = (float *)(v20 + 4 * v15);
        }
        else
        {
          uint64_t v20 = *((void *)this + 42);
          if (*((unsigned __int8 *)this + 132) != *((unsigned __int8 *)this + 268)) {
            goto LABEL_14;
          }
          int v21 = (float *)(v20 + v14);
          float v22 = *(float *)(v20 + v14);
          if (v22 != v19 && vabds_f32(v22, v19) >= 0.0001)
          {
            if (*((_DWORD *)this + 81))
            {
LABEL_14:
              if (v11) {
                goto LABEL_15;
              }
            }
            else
            {
              float v19 = v19 + (float)((float)(v22 - v19) * *((float *)this + 83));
              if (v11)
              {
LABEL_15:
                LODWORD(__Step) = 0;
                *(float *)&long long __Step = (float)(v19 - *(float *)(v20 + v14)) / v16;
                LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
                LODWORD(__Start.__r_.__value_.__l.__data_) = *(_DWORD *)(v20 + v14);
                vDSP_vrampmuladd(__A, 1, (float *)&__Start, (const float *)&__Step, *a3, 1, v17);
                uint64_t v20 = *((void *)this + 42);
              }
            }
            *(float *)(v20 + v14) = v19;
            goto LABEL_17;
          }
        }
        *int v21 = v19;
        vDSP_vsma(__A, 1, (const float *)(v20 + v14), *a3, 1, *a3, 1, v17);
LABEL_17:
        ++v15;
        v14 += 4;
        ++a3;
      }
      while (v18 != v14);
    }
    uint64_t result = 0;
    *((unsigned char *)this + 17) = 0;
    *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v24 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "PassThroughSpatializer");
      unint64_t v25 = std::string::append(&v30, "::", 2uLL);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __Start.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Start.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      unint64_t v27 = std::string::append(&__Start, "processAccumulating", 0x13uLL);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      int64_t v33 = v27->__r_.__value_.__r.__words[2];
      long long __Step = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      p_Step = &__Step;
      if (v33 < 0) {
        p_Step = (long long *)__Step;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      unsigned int v35 = p_Step;
      _os_log_debug_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)__Step);
      }
      if (SHIBYTE(__Start.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__Start.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
    return 4294956429;
  }
  return result;
}

void sub_1BB531D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PassThroughSpatializer::initialize(PassThroughSpatializer *this, float a2, unsigned int a3, int a4)
{
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  double v7 = a2 * 0.001953125 * 0.0219999999;
  if (v7 >= 2.22507386e-308) {
    double v8 = -6.90775528 / v7;
  }
  else {
    double v8 = -INFINITY;
  }
  double v9 = exp(v8);
  if (v8 < -708.4) {
    double v9 = 0.0;
  }
  float v10 = v9;
  *((float *)this + 83) = v10;
  *((_DWORD *)this + 5) = (float)(a2 * 0.044);
  int v15 = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &v15);
  int v14 = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &v14);
  *((_WORD *)this + 8) = 257;
  unint64_t v11 = (uint64_t)(*((void *)this + 18) - *((void *)this + 17)) >> 2;
  int v13 = 1065353216;
  std::vector<float>::assign((char **)this + 42, v11, &v13);
  return 0;
}

void PassThroughSpatializer::~PassThroughSpatializer(PassThroughSpatializer *this)
{
  *(void *)this = &unk_1F14B3068;
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  Spatializer::~Spatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B3068;
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }

  Spatializer::~Spatializer(this);
}

uint64_t MixViterbiProd::createCProdArray(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = (a2 - result) >> 2;
  if ((int)v4 < 1)
  {
    int v6 = 1;
  }
  else
  {
    unint64_t v5 = ((unint64_t)(a2 - result) >> 2) + 1;
    int v6 = 1;
    do
    {
      unint64_t v7 = (v5 - 2);
      *(_DWORD *)(a3 + 4 * v7) = v6;
      if (v4 <= v7) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      v6 *= *(_DWORD *)(result + 4 * v7);
      --v5;
    }
    while (v5 > 1);
  }
  *a4 = v6;
  return result;
}

uint64_t MixViterbiProd::fullToTopLayerAddr(uint64_t this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  int v6 = *(_DWORD **)(this + 112);
  unint64_t v7 = *(_DWORD **)(this + 136);
  if (v6 != v7)
  {
    uint64_t v8 = a2 % *(_DWORD *)(this + 80);
    double v9 = a3;
    do
    {
      if (v9 == a4)
      {
        uint64_t v10 = v8;
      }
      else
      {
        uint64_t v10 = v8 % *v6;
        LODWORD(v8) = v8 / *v6;
      }
      *v9++ = v8;
      ++v6;
      uint64_t v8 = v10;
    }
    while (v6 != v7);
  }
  if (*(_DWORD *)(this + 92))
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(this + 24);
    do
    {
      a5[v11] = a3[v11] / *(_DWORD *)(v12 + 4 * v11);
      ++v11;
    }
    while (v11 < *(_DWORD *)(this + 92));
  }
  int v13 = *(int **)(this + 96);
  int v14 = *(int **)(this + 120);
  *a6 = 0;
  if (v13 != v14)
  {
    unsigned int v15 = 0;
    do
    {
      int v17 = *a5++;
      int v16 = v17;
      int v18 = *v13++;
      v15 += v18 * v16;
      *a6 = v15;
    }
    while (v13 != v14);
  }
  return this;
}

void MixViterbiProd::MixViterbiProd(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 84) = a4;
  *(_DWORD *)(a1 + 88) = a9;
  *(_DWORD *)(a1 + 92) = (*(void *)(a2 + 8) - *(void *)a2) >> 2;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a5;
  *(void *)(a1 + 152) = a6;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 160) = a7;
  *(void *)(a1 + 168) = a8;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  int v17 = 1;
  *(unsigned char *)(a1 + 220) = 1;
  *(void *)(a1 + 224) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  float v19 = *(int **)a1;
  int v18 = *(int **)(a1 + 8);
  uint64_t v20 = (uint64_t)v18 - *(void *)a1;
  if (v18 != *(int **)a1)
  {
    int v22 = *v19;
    int v21 = v19 + 1;
    int v17 = v22;
    while (v21 != v18)
    {
      int v23 = *v21++;
      v17 *= v23;
    }
  }
  *(_DWORD *)(a1 + 72) = v17;
  unint64_t v25 = *(int **)(a1 + 24);
  unint64_t v24 = *(int **)(a1 + 32);
  if (v24 == v25)
  {
    int v26 = 1;
  }
  else
  {
    int v28 = *v25;
    unint64_t v27 = v25 + 1;
    int v26 = v28;
    while (v27 != v24)
    {
      int v29 = *v27++;
      v26 *= v29;
    }
  }
  *(_DWORD *)(a1 + 76) = v26;
  *(void *)(a1 + 56) = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 48), v20 >> 2);
  std::string v30 = *(int **)a1;
  uint64_t v31 = *(int **)(a1 + 8);
  if (*(int **)a1 != v31)
  {
    int v32 = *(_DWORD **)(a1 + 48);
    int64_t v33 = *(int **)(a1 + 24);
    do
    {
      int v35 = *v30++;
      int v34 = v35;
      int v36 = *v33++;
      *v32++ = v36 * v34;
    }
    while (v30 != v31);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 76) * *(_DWORD *)(a1 + 72);
  uint64_t v37 = *(unsigned int *)(a1 + 92);
  float v38 = malloc_type_malloc(4 * v37, 0x2C8E6D5CuLL);
  float v39 = v38;
  if (v37) {
    BOOL v40 = v38 == 0;
  }
  else {
    BOOL v40 = 0;
  }
  if (!v40)
  {
    bzero(v38, 4 * v37);
    *(void *)(a1 + 96) = v39;
    uint64_t v41 = *(unsigned int *)(a1 + 92);
    float v42 = malloc_type_malloc(4 * v41, 0x2C8E6D5CuLL);
    uint64_t v43 = v42;
    if (!v41 || v42)
    {
      bzero(v42, 4 * v41);
      *(void *)(a1 + 104) = v43;
      uint64_t v44 = *(unsigned int *)(a1 + 92);
      int v45 = malloc_type_malloc(4 * v44, 0x2C8E6D5CuLL);
      uint32_t v46 = v45;
      if (!v44 || v45)
      {
        bzero(v45, 4 * v44);
        *(void *)(a1 + 112) = v46;
        operator new();
      }
    }
  }
  exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  uint64_t v48 = std::bad_alloc::bad_alloc(exception);
}

void sub_1BB532A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x1C185D370](v12, 0x1080C40FC6463CFLL);
  int v14 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 56) = v14;
    operator delete(v14);
  }
  unsigned int v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v15;
    operator delete(v15);
  }
  int v16 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

double MixViterbiProd::Initialize(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  ++*(_DWORD *)(a1 + 236);
  vDSP_mmov(*(const float **)(a1 + 144), *(float **)(a1 + 272), **(void **)(a1 + 392), 1uLL, **(void **)(a1 + 392), **(void **)(a1 + 392));
  int v6 = *(vDSP_Length **)(a1 + 392);
  unint64_t v7 = *(float **)(a1 + 280);
  uint64_t v8 = a2;
  vDSP_vmul(*(const float **)(a1 + 272), 1, (const float *)(*(void *)(a1 + 256) + 4 * *v6 * a2), 1, v7, 1, *v6);
  float __C = 0.0;
  vDSP_sve(v7, 1, &__C, *v6);
  float __C = 1.0 / __C;
  vDSP_vsmul(v7, 1, &__C, v7, 1, *v6);
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 272), *(float **)(a1 + 240), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 280), *(float **)(a1 + 296), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  double v9 = *(vDSP_Length **)(a1 + 400);
  uint64_t v10 = *(float **)(a1 + 320);
  uint64_t v11 = *(void **)(a1 + 336);
  vDSP_vmul(*(const float **)(a1 + 240), 1, (const float *)(*(void *)(a1 + 160) + 4 * *v9 * v8), 1, v10, 1, *v9);
  ViterbiOdep::normalizeLik(v9, v10);
  bzero(v11, 4 * *v9);

  *(void *)&double result = MixViterbiProd::prepareForNextIter(a1, a3).u64[0];
  return result;
}

float MixViterbiProd::marginalizeStateDist(MixViterbiProd *this, const float *a2, float *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  bzero(a3, 4 * *((unsigned int *)this + 18));
  if (*((_DWORD *)this + 20))
  {
    unint64_t v13 = 0;
    do
    {
      unsigned int v14 = 0;
      MixViterbiProd::fullToTopLayerAddr((uint64_t)this, v13, a4, a6, a5, &v14);
      float result = a2[v13] + a3[v14];
      a3[v14] = result;
      ++v13;
    }
    while (v13 < *((unsigned int *)this + 20));
  }
  return result;
}

int8x16_t MixViterbiProd::prepareForNextIter(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 176);
  unint64_t v5 = *(char **)(a1 + 336);
  int v6 = *(_DWORD *)(a1 + 72);
  int v7 = *(_DWORD *)(v4 + 8);
  uint64_t v8 = *(int *)(v4 + 12);
  if (v7 < v6) {
    int v6 = *(_DWORD *)(v4 + 8);
  }
  int v9 = v8 + v6;
  int v10 = v8 + v6 - v7;
  if (v10 < 0)
  {
    memcpy((void *)(*(void *)v4 + 4 * v8), v5, 4 * v6);
  }
  else
  {
    int v11 = v7 - v8;
    memcpy((void *)(*(void *)v4 + 4 * v8), v5, 4 * (v7 - (int)v8));
    memcpy(*(void **)v4, &v5[4 * v11], 4 * v10);
    int v9 = v10;
  }
  *(_DWORD *)(v4 + 12) = v9;
  uint64_t v12 = *(void *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 320);
  int v14 = *(_DWORD *)(a1 + 72);
  int v15 = *(_DWORD *)(v12 + 8);
  uint64_t v16 = *(int *)(v12 + 12);
  if (v15 < v14) {
    int v14 = *(_DWORD *)(v12 + 8);
  }
  int v17 = v16 + v14;
  int v18 = v16 + v14 - v15;
  if (v18 < 0)
  {
    memcpy((void *)(*(void *)v12 + 4 * v16), *(const void **)(a1 + 320), 4 * v14);
  }
  else
  {
    int v19 = v15 - v16;
    memcpy((void *)(*(void *)v12 + 4 * v16), *(const void **)(a1 + 320), 4 * (v15 - (int)v16));
    memcpy(*(void **)v12, (const void *)(v13 + 4 * v19), 4 * v18);
    int v17 = v18;
  }
  *(_DWORD *)(v12 + 12) = v17;
  uint64_t v20 = *(void *)(a1 + 208);
  uint64_t v21 = *(void *)(a1 + 296);
  int v22 = *(_DWORD *)(a1 + 72);
  int v23 = *(_DWORD *)(v20 + 8);
  uint64_t v24 = *(int *)(v20 + 12);
  if (v23 < v22) {
    int v22 = *(_DWORD *)(v20 + 8);
  }
  int v25 = v24 + v22;
  int v26 = v24 + v22 - v23;
  if (v26 < 0)
  {
    memcpy((void *)(*(void *)v20 + 4 * v24), *(const void **)(a1 + 296), 4 * v22);
  }
  else
  {
    int v27 = v23 - v24;
    memcpy((void *)(*(void *)v20 + 4 * v24), *(const void **)(a1 + 296), 4 * (v23 - (int)v24));
    memcpy(*(void **)v20, (const void *)(v21 + 4 * v27), 4 * v26);
    int v25 = v26;
  }
  *(_DWORD *)(v20 + 12) = v25;
  uint64_t v28 = *(void *)(a1 + 192);
  int v29 = *(_DWORD *)(v28 + 8);
  uint64_t v30 = *(int *)(v28 + 12);
  *(_OWORD *)(*(void *)v28 + 16 * v30) = *a2;
  *(_DWORD *)(v28 + 12) = ((int)v30 + 1) % v29;
  --*(_DWORD *)(a1 + 216);
  if (*(_DWORD *)(a1 + 236) < 2u) {
    goto LABEL_28;
  }
  int v31 = *(_DWORD *)(a1 + 72);
  if (v31 <= 0) {
    goto LABEL_27;
  }
  int v32 = 0;
  int64_t v33 = *(uint64_t **)(a1 + 176);
  uint64_t v34 = *v33;
  int v35 = *((_DWORD *)v33 + 2);
  int v36 = v31 - 1;
  int v37 = v35 - *((_DWORD *)v33 + 3);
  char v38 = 1;
  do
  {
    char v39 = v38 | (v32 == *(_DWORD *)(v34 + 4 * (v35 + ~((v37 + v36) % v35))));
    if (v38) {
      int v32 = *(_DWORD *)(v34 + 4 * (v35 + ~((v37 + v36) % v35)));
    }
    BOOL v41 = v36-- != 0;
    if ((v39 & 1) == 0) {
      break;
    }
    char v38 = 0;
  }
  while (v41);
  if (v39)
  {
LABEL_27:
    *(unsigned char *)(a1 + 232) = 0;
    int v42 = -1;
  }
  else
  {
LABEL_28:
    int v42 = *(_DWORD *)(a1 + 224) - 1;
  }
  *(_DWORD *)(a1 + 224) = v42;
  int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 320), *(int8x16_t *)(a1 + 320), 8uLL);
  *(int8x16_t *)(a1 + 320) = result;
  return result;
}

double MixViterbiProd::Update(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  ++*(_DWORD *)(a1 + 236);
  int v7 = *(vDSP_Length **)(a1 + 392);
  uint64_t v8 = *(const float **)(a1 + 152);
  int v9 = *(float **)(a1 + 272);
  int v10 = *(float **)(a1 + 288);
  vDSP_Length v11 = *v7;
  if (*v7)
  {
    vDSP_Length v12 = 0;
    uint64_t v13 = *(const float **)(a1 + 280);
    int v14 = *(float **)(a1 + 288);
    do
    {
      vDSP_mmov(v13, v14, v11, 1uLL, v11, v11);
      vDSP_Length v11 = *v7;
      v14 += *v7;
      ++v12;
    }
    while (v12 < *v7);
  }
  vDSP_vmul(v8, 1, v10, 1, v10, 1, v7[1]);
  vDSP_Length v15 = *v7;
  if (*v7)
  {
    vDSP_Length v16 = 0;
    do
    {
      vDSP_sve(v10, 1, v9++, v15);
      vDSP_Length v15 = *v7;
      v10 += *v7;
      ++v16;
    }
    while (v16 < *v7);
  }
  int v17 = *(vDSP_Length **)(a1 + 392);
  int v18 = *(float **)(a1 + 280);
  uint64_t v56 = a3;
  unsigned int v58 = a2;
  vDSP_vmul(*(const float **)(a1 + 272), 1, (const float *)(*(void *)(a1 + 264) + 4 * (v17[2] * a3 + a2) * *v17), 1, v18, 1, *v17);
  LODWORD(__C) = 0;
  vDSP_sve(v18, 1, (float *)&__C, *v17);
  *(float *)&vDSP_Length __C = 1.0 / *(float *)&__C;
  vDSP_vsmul(v18, 1, (const float *)&__C, v18, 1, *v17);
  uint64_t v19 = *(void *)(a1 + 288);
  uint64_t v20 = *(void **)(a1 + 248);
  vDSP_Length v60 = *(unsigned int **)(a1 + 352);
  uint64_t v61 = *(unsigned int **)(a1 + 344);
  uint64_t v21 = *(unsigned int **)(a1 + 368);
  char v59 = *(unsigned int **)(a1 + 360);
  int v23 = *(unsigned int **)(a1 + 376);
  int v22 = *(unsigned int **)(a1 + 384);
  bzero(v20, 4 * (*(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 72)));
  if (*(_DWORD *)(a1 + 80))
  {
    unsigned int v24 = 0;
    int v25 = 0;
    do
    {
      LODWORD(__C) = 0;
      MixViterbiProd::fullToTopLayerAddr(a1, v24, v61, v60, v59, (unsigned int *)&__C);
      unsigned int v26 = *(_DWORD *)(a1 + 80);
      if (!v26) {
        break;
      }
      unsigned int v27 = 0;
      int v28 = __C * *(_DWORD *)(a1 + 72);
      do
      {
        float v29 = *(float *)(v19 + 4 * (v25 + v27));
        if (v29 > 0.0)
        {
          unsigned int v62 = 0;
          MixViterbiProd::fullToTopLayerAddr(a1, v27, v21, v23, v22, &v62);
          *((float *)v20 + v62 + v28) = v29 + *((float *)v20 + v62 + v28);
          unsigned int v26 = *(_DWORD *)(a1 + 80);
        }
        ++v27;
      }
      while (v27 < v26);
      v25 += v27;
      ++v24;
    }
    while (v24 < v26);
  }
  uint64_t v30 = *(unsigned int *)(a1 + 72);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 248);
    uint64_t v32 = v31 + 4 * v30;
    int v33 = v30 * v30;
    uint64_t v34 = 4 * (v30 * v30);
    uint64_t v35 = 4 * v30;
    do
    {
      if (v33)
      {
        uint64_t v36 = 0;
        float v37 = 0.0;
        do
        {
          float v37 = v37 + *(float *)(v31 + v36);
          v36 += v35;
        }
        while (v34 != v36);
        uint64_t v38 = 0;
        float v39 = 1.0 / (v37 + 2.2204e-16);
        do
        {
          *(float *)(v31 + v38) = *(float *)(v31 + v38) * v39;
          v38 += v35;
        }
        while (v34 != v38);
      }
      v31 += 4;
    }
    while (v31 != v32);
  }
  MixViterbiProd::marginalizeStateDist((MixViterbiProd *)a1, *(const float **)(a1 + 280), *(float **)(a1 + 296), *(unsigned int **)(a1 + 344), *(unsigned int **)(a1 + 360), *(unsigned int **)(a1 + 352));
  BOOL v40 = *(vDSP_Length **)(a1 + 400);
  BOOL v41 = *(const float **)(a1 + 248);
  uint64_t v42 = *(void *)(a1 + 168);
  uint64_t v44 = *(float **)(a1 + 312);
  uint64_t v43 = *(float **)(a1 + 320);
  uint64_t v45 = *(void *)(a1 + 336);
  vDSP_Length v46 = *v40;
  if (*v40)
  {
    vDSP_Length v47 = 0;
    uint64_t v48 = *(const float **)(a1 + 328);
    int v49 = *(float **)(a1 + 312);
    do
    {
      vDSP_mmov(v48, v49, v46, 1uLL, v46, v46);
      vDSP_Length v46 = *v40;
      v49 += *v40;
      ++v47;
    }
    while (v47 < *v40);
  }
  vDSP_vmul(v41, 1, v44, 1, v44, 1, v40[1]);
  vDSP_Length v50 = *v40;
  if (*v40)
  {
    vDSP_Length v51 = 0;
    uint32_t v52 = v43;
    uint64_t v54 = v56;
    uint64_t v53 = a4;
    do
    {
      vDSP_Length __C = 0;
      vDSP_maxvi(v44, 1, v52, &__C, v50);
      vDSP_Length v50 = *v40;
      v44 += *v40;
      ++v52;
      *(_DWORD *)(v45 + 4 * v51++) = __C;
    }
    while (v51 < v50);
  }
  else
  {
    uint64_t v54 = v56;
    uint64_t v53 = a4;
  }
  vDSP_vmul((const float *)(v42 + 4 * (v58 + v40[2] * v54) * v50), 1, v43, 1, v43, 1, v50);
  ViterbiOdep::normalizeLik(v40, v43);

  *(void *)&double result = MixViterbiProd::prepareForNextIter(a1, v53).u64[0];
  return result;
}

void MixViterbiProd::decodeRaw(uint64_t a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this)
{
  int v4 = __sz;
  this->__end_ = this->__begin_;
  std::vector<unsigned int>::resize(this, __sz);
  float __C = 0.0;
  vDSP_Length v15 = 0;
  vDSP_maxvi(*(const float **)(a1 + 328), 1, &__C, &v15, *(unsigned int *)(a1 + 72));
  unint64_t v6 = (v4 - 1);
  begiuint64_t n = this->__begin_;
  unint64_t v8 = this->__end_ - this->__begin_;
  if (v8 <= v6) {
    goto LABEL_10;
  }
  unsigned int v9 = v15;
  begin[v6] = v15;
  if (v4 - 2 >= 0)
  {
    int v10 = -*(_DWORD *)(a1 + 72);
    vDSP_Length v11 = *(uint64_t **)(a1 + 176);
    uint64_t v12 = *v11;
    while (1)
    {
      int v13 = v10 + v9;
      int v14 = v13 < 0
          ? *((_DWORD *)v11 + 2) + ~((*((_DWORD *)v11 + 2) - v13 + ~*((_DWORD *)v11 + 3)) % *((_DWORD *)v11 + 2))
          : (*((_DWORD *)v11 + 3) + v13) % *((_DWORD *)v11 + 2);
      unint64_t v6 = (v6 - 1);
      if (v8 <= v6) {
        break;
      }
      v10 -= *(_DWORD *)(a1 + 72);
      unsigned int v9 = *(_DWORD *)(v12 + 4 * v14);
      begin[v6] = v9;
      if ((int)v6 <= 0) {
        return;
      }
    }
LABEL_10:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
}

void MixViterbiProd::convertRawStateSequenceToProd(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = a2[1] - *a2;
  unint64_t v7 = (v6 >> 2);
  std::vector<std::vector<unsigned int>>::resize(a3, v7);
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 4 * (*(_DWORD *)(a1 + 72) - 1);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v8
        || (std::vector<unsigned int>::resize((std::vector<unsigned int> *)(*a3 + 24 * v8), *(unsigned int *)(a1 + 92)),
            0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v8))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v11 = *a3 + 24 * v8;
      int v10 = *(_DWORD **)v11;
      if (*(void *)(v11 + 8) == *(void *)v11 || v8 >= (uint64_t)(a2[1] - *a2) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = *(_DWORD **)(a1 + 96);
      int v13 = *(_DWORD **)(a1 + 120);
      if (v12 != v13)
      {
        uint64_t v14 = (*(_DWORD *)(*a2 + 4 * v8) % *(_DWORD *)(a1 + 72));
        uint64_t v15 = v9;
        do
        {
          if (v15)
          {
            uint64_t v16 = v14 % *v12;
            LODWORD(v14) = v14 / *v12;
          }
          else
          {
            uint64_t v16 = v14;
          }
          *v10++ = v14;
          ++v12;
          v15 -= 4;
          uint64_t v14 = v16;
        }
        while (v12 != v13);
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void MixViterbiProd::retrieveTimeStamps(uint64_t a1, int a2, int a3, char **a4)
{
  std::vector<std::span<float,18446744073709551615ul>>::resize(a4, (a3 - a2 + 1));
  if (a3 >= a2)
  {
    unint64_t v8 = *a4;
    uint64_t v9 = *(void *)(a1 + 192);
    int v10 = a2 - 1;
    do
    {
      *(double *)unint64_t v8 = MRRingBuffer<DataTimeStamp>::GetSample(v9, v10);
      *((void *)v8 + 1) = v11;
      v8 += 16;
      ++v10;
    }
    while (a3 != v10);
  }
}

void MixViterbiProd::updateDecode(uint64_t a1, void *a2, char **a3, int a4)
{
  int v5 = *(_DWORD *)(a1 + 216);
  std::vector<unsigned int>::size_type v6 = (a4 - v5);
  if (a4 - v5 >= 0)
  {
    memset(&v11, 0, sizeof(v11));
    MixViterbiProd::decodeRaw(a1, -v5, &v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned int>::resize(&__p, v6);
    MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(a1, &v11.__begin_, &__p, v6);
    MixViterbiProd::convertRawStateSequenceToProd(a1, &__p, a2);
    MixViterbiProd::retrieveTimeStamps(a1, *(_DWORD *)(a1 + 216) + 1, a4, a3);
    *(_DWORD *)(a1 + 216) = a4;
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v11.__begin_)
    {
      v11.__end_ = v11.__begin_;
      operator delete(v11.__begin_);
    }
  }
  *(unsigned char *)(a1 + 220) = 0;
}

void sub_1BB533720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(uint64_t a1, unsigned int **a2, std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::resize(this, __sz);
  begiuint64_t n = this->__begin_;
  end = this->__end_;
  if (this->__begin_ != end)
  {
    uint64_t v9 = *a2;
    int v10 = *(uint64_t **)(a1 + 184);
    uint64_t v11 = *v10;
    do
    {
      *begin++ = *v9;
      int v12 = *v9++;
      *(_DWORD *)(v11 + 4 * *((int *)v10 + 3)) = v12;
      *((_DWORD *)v10 + 3) = (*((_DWORD *)v10 + 3) + 1) % *((_DWORD *)v10 + 2);
    }
    while (begin != end);
  }
}

BOOL MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent(MixViterbiProd *this, double a2, int *a3)
{
  int v5 = *((_DWORD *)this + 59);
  if (v5 >= *((_DWORD *)this + 22)) {
    int v5 = *((_DWORD *)this + 22);
  }
  int v6 = -v5;
  if (!*((unsigned char *)this + 220) && *((_DWORD *)this + 54) > v6) {
    int v6 = *((_DWORD *)this + 54);
  }
  BOOL v7 = 0;
  *a3 = 0;
  if (v6 < 0)
  {
    int v8 = 0;
    uint64_t v9 = *((void *)this + 24);
    while (1)
    {
      int v10 = v8 - 1;
      MRRingBuffer<DataTimeStamp>::GetSample(v9, v8 - 1);
      BOOL v7 = v11 <= a2;
      if (v11 <= a2) {
        break;
      }
      *a3 = v8--;
      if (v10 <= v6) {
        return 0;
      }
    }
  }
  return v7;
}

_DWORD *MixViterbiProd::decodeRaw_Post(uint64_t a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this, uint64_t *a4)
{
  int v6 = __sz;
  this->__end_ = this->__begin_;
  unint64_t v8 = __sz;
  std::vector<unsigned int>::resize(this, __sz);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a4);
  std::vector<std::vector<float>>::resize(a4, v8);
  float __C = 0.0;
  vDSP_Length v18 = 0;
  vDSP_maxvi(*(const float **)(a1 + 328), 1, &__C, &v18, *(unsigned int *)(a1 + 72));
  unint64_t v9 = (v6 - 1);
  if (v9 >= this->__end_ - this->__begin_) {
LABEL_14:
  }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  unsigned int v10 = v18;
  this->__begin_[v9] = v18;
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9) {
    goto LABEL_13;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 72);
  std::vector<float>::resize(*a4 + 24 * v9, v11);
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9) {
    goto LABEL_13;
  }
  int v12 = -v11;
  double result = MixViterbiProd::copyFloat32RingBufToVector(*(_DWORD **)(*a4 + 24 * v9), *(uint64_t **)(a1 + 208), v12, *(_DWORD *)(a1 + 72));
  if (v6 - 2 >= 0)
  {
    while (1)
    {
      uint64_t v14 = *(void *)(a1 + 176);
      unsigned int v15 = v12 + v10;
      int v16 = (int)(v12 + v10) < 0
          ? *(_DWORD *)(v14 + 8) + ~((int)(*(_DWORD *)(v14 + 8) - v15 + ~*(_DWORD *)(v14 + 12)) % *(_DWORD *)(v14 + 8))
          : (int)(*(_DWORD *)(v14 + 12) + v15) % *(_DWORD *)(v14 + 8);
      unint64_t v9 = (v9 - 1);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9) {
        break;
      }
      unsigned int v10 = *(_DWORD *)(*(void *)v14 + 4 * v16);
      unsigned int v17 = *(_DWORD *)(a1 + 72);
      std::vector<float>::resize(*a4 + 24 * v9, v17);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v9) {
        break;
      }
      v12 -= v17;
      double result = MixViterbiProd::copyFloat32RingBufToVector(*(_DWORD **)(*a4 + 24 * v9), *(uint64_t **)(a1 + 208), v12, *(_DWORD *)(a1 + 72));
      if (v9 >= this->__end_ - this->__begin_) {
        goto LABEL_14;
      }
      this->__begin_[v9] = v10;
      if ((int)v9 <= 0) {
        return result;
      }
    }
LABEL_13:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

_DWORD *MixViterbiProd::copyFloat32RingBufToVector(_DWORD *result, uint64_t *a2, int a3, int a4)
{
  if (a4)
  {
    uint64_t v4 = *a2;
    int v5 = ~a3;
    do
    {
      if (a3 < 0) {
        int v6 = *((_DWORD *)a2 + 2) + ~((v5 + *((_DWORD *)a2 + 2) - *((_DWORD *)a2 + 3)) % *((_DWORD *)a2 + 2));
      }
      else {
        int v6 = (a3 + *((_DWORD *)a2 + 3)) % *((_DWORD *)a2 + 2);
      }
      *result++ = *(_DWORD *)(v4 + 4 * v6);
      --v5;
      ++a3;
      --a4;
    }
    while (a4);
  }
  return result;
}

void MixViterbiProd::updateDecode_Post(uint64_t a1, void *a2, char **a3, uint64_t *a4, int a5)
{
  int v6 = *(_DWORD *)(a1 + 216);
  std::vector<unsigned int>::size_type v7 = (a5 - v6);
  if (a5 - v6 >= 0)
  {
    memset(&__p, 0, sizeof(__p));
    memset(v17, 0, sizeof(v17));
    MixViterbiProd::decodeRaw_Post(a1, -v6, &__p, v17);
    memset(&v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    std::vector<unsigned int>::resize(&v16, v7);
    std::vector<std::vector<float>>::resize(a4, v7);
    MixViterbiProd::copyStateSequenceAndUpdateTrajectoryRingBuf(a1, &__p.__begin_, &v16, v7);
    std::vector<std::vector<float>>::resize(a4, v7);
    int v13 = (char *)*a4;
    int v12 = (char *)a4[1];
    if ((char *)*a4 != v12)
    {
      uint64_t v14 = v17[0];
      do
      {
        if (v13 != (char *)v14)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v13, *(char **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
          int v12 = (char *)a4[1];
        }
        v14 += 24;
        v13 += 24;
      }
      while (v13 != v12);
    }
    MixViterbiProd::convertRawStateSequenceToProd(a1, &v16, a2);
    MixViterbiProd::retrieveTimeStamps(a1, *(_DWORD *)(a1 + 216) + 1, a5, a3);
    *(_DWORD *)(a1 + 216) = a5;
    uint64_t v19 = (void **)v15;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
    v16.__begin_ = (std::vector<unsigned int>::pointer)v17;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  *(unsigned char *)(a1 + 220) = 0;
}

void sub_1BB533C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a13 = &a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id createDescriptionFromAudioStreamBasicDescription(const AudioStreamBasicDescription *a1)
{
  v14[9] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(NSNumber, "numberWithDouble:", a1->mSampleRate, @"SampleRate");
  v14[0] = v2;
  v13[1] = @"AudioFormatID";
  uint64_t v3 = [NSNumber numberWithUnsignedInt:a1->mFormatID];
  v14[1] = v3;
  v13[2] = @"AudioFormatFlags";
  uint64_t v4 = [NSNumber numberWithUnsignedInt:a1->mFormatFlags];
  v14[2] = v4;
  v13[3] = @"BytesPerPacket";
  int v5 = [NSNumber numberWithUnsignedInt:a1->mBytesPerPacket];
  v14[3] = v5;
  v13[4] = @"FramesPerPacket";
  int v6 = [NSNumber numberWithUnsignedInt:a1->mFramesPerPacket];
  v14[4] = v6;
  v13[5] = @"BytesPerFrame";
  std::vector<unsigned int>::size_type v7 = [NSNumber numberWithUnsignedInt:a1->mBytesPerFrame];
  v14[5] = v7;
  v13[6] = @"ChannelsPerFrame";
  unint64_t v8 = [NSNumber numberWithUnsignedInt:a1->mChannelsPerFrame];
  v14[6] = v8;
  v13[7] = @"BitsPerChannel";
  unint64_t v9 = [NSNumber numberWithUnsignedInt:a1->mBitsPerChannel];
  v14[7] = v9;
  v13[8] = @"Reserved";
  unsigned int v10 = [NSNumber numberWithUnsignedInt:a1->mReserved];
  v14[8] = v10;
  unsigned int v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:9];

  return v11;
}

void sub_1BB533EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fromInt(unsigned int *a1, unsigned int *a2)
{
  return [NSNumber numberWithInt:*a1];
}

uint64_t fromInt64(void *a1, unsigned int *a2)
{
  return [NSNumber numberWithLongLong:*a1];
}

uint64_t fromUInt32(unsigned int *a1, unsigned int *a2)
{
  return [NSNumber numberWithUnsignedInt:*a1];
}

uint64_t fromFloat32(_DWORD *a1, unsigned int *a2, double a3)
{
  LODWORD(a3) = *a1;
  return [NSNumber numberWithFloat:a3];
}

uint64_t fromFloat64(double *a1, unsigned int *a2)
{
  return [NSNumber numberWithDouble:*a1];
}

id fromCFDataRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromCFArrayRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromInt64Array(uint64_t *a1, unsigned int *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  if (v3 >= 8)
  {
    unint64_t v5 = v3 >> 3;
    do
    {
      uint64_t v6 = *a1++;
      std::vector<unsigned int>::size_type v7 = [NSNumber numberWithLongLong:v6];
      [v4 addObject:v7];

      --v5;
    }
    while (v5);
  }

  return v4;
}

void sub_1BB534050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromUInt32Array(unsigned int *a1, unsigned int *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  if (v3 >= 4)
  {
    unint64_t v5 = v3 >> 2;
    do
    {
      unsigned int v6 = *a1++;
      std::vector<unsigned int>::size_type v7 = [NSNumber numberWithUnsignedInt:v6];
      [v4 addObject:v7];

      --v5;
    }
    while (v5);
  }

  return v4;
}

void sub_1BB534104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromCFStringRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromFloat32Array(_DWORD *a1, unsigned int *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  if (v3 >= 4)
  {
    unint64_t v6 = v3 >> 2;
    do
    {
      LODWORD(v5) = *a1;
      std::vector<unsigned int>::size_type v7 = [NSNumber numberWithFloat:v5];
      [v4 addObject:v7];

      ++a1;
      --v6;
    }
    while (v6);
  }

  return v4;
}

void sub_1BB5341C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromFloat64Array(double *a1, unsigned int *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  if (v3 >= 8)
  {
    unint64_t v5 = v3 >> 3;
    do
    {
      unint64_t v6 = [NSNumber numberWithDouble:*a1];
      [v4 addObject:v6];

      ++a1;
      --v5;
    }
    while (v5);
  }

  return v4;
}

void sub_1BB53427C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromCFNumberRef(id *a1, unsigned int *a2)
{
  return *a1;
}

id fromAUChannelInfo(__int16 *a1, unsigned int *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v7[0] = @"InChannels";
  unint64_t v3 = [NSNumber numberWithShort:*a1];
  v7[1] = @"OutChannels";
  v8[0] = v3;
  uint64_t v4 = [NSNumber numberWithShort:a1[1]];
  v8[1] = v4;
  unint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];

  return v5;
}

void sub_1BB534384(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id fromAUFreqRespBin(double *a1, unsigned int *a2)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v7[0] = @"Frequency";
  unint64_t v3 = [NSNumber numberWithDouble:*a1];
  v7[1] = @"Magnitude";
  v8[0] = v3;
  uint64_t v4 = [NSNumber numberWithDouble:a1[1]];
  v8[1] = v4;
  unint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];

  return v5;
}

void sub_1BB53448C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id fromCFDictionaryRef(id *a1, unsigned int *a2)
{
  id v2 = *a1;
  if ([*a1 count] == 1)
  {
    id v3 = [MEMORY[0x1E4F1C9E8] dictionary];
  }
  else
  {
    id v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_1BB534518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromAudioChannelLayout(unsigned int *a1, unsigned int *a2)
{
  v28[3] = *MEMORY[0x1E4F143B8];
  v21[0] = @"AudioChannelLayoutTag";
  vDSP_Length v18 = [NSNumber numberWithUnsignedInt:*a1];
  int v22 = v18;
  v21[1] = @"AudioChannelBitmap";
  uint64_t v23 = [NSNumber numberWithUnsignedInt:a1[1]];
  void v21[2] = @"NumberChannelDescriptions";
  std::vector<unsigned int> v16 = (void *)v23;
  uint64_t v24 = [NSNumber numberWithUnsignedInt:a1[2]];
  v21[3] = @"AudioChannelDescriptions";
  unsigned int v17 = (void *)v24;
  uint64_t v19 = objc_opt_new();
  if (a1[2])
  {
    unint64_t v2 = 0;
    id v3 = a1 + 7;
    do
    {
      v27[0] = @"AudioChannelLabel";
      uint64_t v4 = [NSNumber numberWithUnsignedInt:*(v3 - 4)];
      v28[0] = v4;
      v27[1] = @"AudioChannelFlags";
      unint64_t v5 = [NSNumber numberWithUnsignedInt:*(v3 - 3)];
      v28[1] = v5;
      v27[2] = @"Coordinates";
      LODWORD(v6) = *(v3 - 2);
      std::vector<unsigned int>::size_type v7 = [NSNumber numberWithFloat:v6];
      v26[0] = v7;
      LODWORD(v8) = *(v3 - 1);
      unint64_t v9 = [NSNumber numberWithFloat:v8];
      v26[1] = v9;
      LODWORD(v10) = *v3;
      unsigned int v11 = [NSNumber numberWithFloat:v10];
      v26[2] = v11;
      int v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:3];
      v28[2] = v12;
      int v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:3];

      [v19 addObject:v13];
      ++v2;
      v3 += 5;
    }
    while (v2 < a1[2]);
  }
  int v25 = v19;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:v21 count:4];

  return v14;
}

void sub_1BB5347C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id fromAUOneChannelNS_VADTheshParams(unsigned int *a1, unsigned int *a2, double a3)
{
  v17[5] = *MEMORY[0x1E4F143B8];
  v16[0] = @"ThresholdMultiplier";
  LODWORD(a3) = *a1;
  uint64_t v4 = [NSNumber numberWithFloat:a3];
  v17[0] = v4;
  v16[1] = @"ThresholdMultiplierPower";
  LODWORD(v5) = a1[1];
  double v6 = [NSNumber numberWithFloat:v5];
  v17[1] = v6;
  v16[2] = @"NumLUTPoints";
  std::vector<unsigned int>::size_type v7 = [NSNumber numberWithUnsignedInt:a1[2]];
  v17[2] = v7;
  v16[3] = @"ThresholdMultiplierLUTx";
  unint64_t v9 = (_DWORD *)*((void *)a1 + 2);
  if (v9)
  {
    LODWORD(v8) = *v9;
    [NSNumber numberWithFloat:v8];
  }
  else
  {
    [MEMORY[0x1E4F1CA98] null];
  double v10 = };
  uint64_t v17[3] = v10;
  v16[4] = @"ThresholdMultiplierLUTy";
  uint64_t v12 = *((void *)a1 + 2);
  if (v12)
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 4);
    [NSNumber numberWithFloat:v11];
  }
  else
  {
    [MEMORY[0x1E4F1CA98] null];
  int v13 = };
  int v17[4] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:5];

  return v14;
}

void sub_1BB534A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id fromAUOneChannelNSV4_VADTheshParams(unsigned int *a1, unsigned int *a2, double a3)
{
  v17[5] = *MEMORY[0x1E4F143B8];
  v16[0] = @"ThresholdMultiplier";
  LODWORD(a3) = *a1;
  uint64_t v4 = [NSNumber numberWithFloat:a3];
  v17[0] = v4;
  v16[1] = @"ThresholdMultiplierPower";
  LODWORD(v5) = a1[1];
  double v6 = [NSNumber numberWithFloat:v5];
  v17[1] = v6;
  v16[2] = @"NumLUTPoints";
  std::vector<unsigned int>::size_type v7 = [NSNumber numberWithUnsignedInt:a1[2]];
  v17[2] = v7;
  v16[3] = @"ThresholdMultiplierLUTx";
  unint64_t v9 = (_DWORD *)*((void *)a1 + 2);
  if (v9)
  {
    LODWORD(v8) = *v9;
    [NSNumber numberWithFloat:v8];
  }
  else
  {
    [MEMORY[0x1E4F1CA98] null];
  double v10 = };
  uint64_t v17[3] = v10;
  v16[4] = @"ThresholdMultiplierLUTy";
  uint64_t v12 = *((void *)a1 + 2);
  if (v12)
  {
    LODWORD(v11) = *(_DWORD *)(v12 + 4);
    [NSNumber numberWithFloat:v11];
  }
  else
  {
    [MEMORY[0x1E4F1CA98] null];
  int v13 = };
  int v17[4] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:5];

  return v14;
}

void sub_1BB534C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getValueTypeFunctionCastMap(void)
{
  {
    qword_1E9F7FA20 = 0;
    qword_1E9F7FA18 = 0;
    getValueTypeFunctionCastMap(void)::gMap = (uint64_t)&qword_1E9F7FA18;
  }
  if (getValueTypeFunctionCastMap(void)::onceToken != -1)
  {
    dispatch_once(&getValueTypeFunctionCastMap(void)::onceToken, &__block_literal_global_11524);
  }
}

void ___Z27getValueTypeFunctionCastMapv_block_invoke()
{
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(0, 0, (uint64_t)fromInt);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(1, 1, (uint64_t)fromUInt32);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(2, 2, (uint64_t)fromInt64);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(3, 3, (uint64_t)fromFloat32);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(4, 4, (uint64_t)fromFloat64);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(17, 17, (uint64_t)fromUInt32Array);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(18, 18, (uint64_t)fromInt64Array);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(19, 19, (uint64_t)fromFloat32Array);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(20, 20, (uint64_t)fromFloat64Array);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(5, 5, (uint64_t)fromASBD);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(6, 6, (uint64_t)fromAUChannelInfo);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(7, 7, (uint64_t)fromAudioChannelLayout);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(11, 11, (uint64_t)fromNSDictionary);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(12, 12, (uint64_t)fromCFNumberRef);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(13, 13, (uint64_t)fromCFArrayRef);
  uint64_t v0 = qword_1E9F7FA18;
  if (qword_1E9F7FA18)
  {
    uint64_t v1 = qword_1E9F7FA18;
    while (1)
    {
      while (1)
      {
        unint64_t v2 = (uint64_t *)v1;
        int v3 = *(_DWORD *)(v1 + 32);
        if (v3 < 15) {
          break;
        }
        uint64_t v1 = *v2;
        uint64_t v4 = (uint64_t **)v2;
        if (!*v2) {
          goto LABEL_10;
        }
      }
      if (v3 == 14) {
        break;
      }
      uint64_t v1 = v2[1];
      if (!v1)
      {
        uint64_t v4 = (uint64_t **)(v2 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v4 = (uint64_t **)&qword_1E9F7FA18;
    unint64_t v2 = &qword_1E9F7FA18;
LABEL_10:
    double v5 = operator new(0x48uLL);
    double v11 = &qword_1E9F7FA18;
    v5[8] = 14;
    *((void *)v5 + 5) = &unk_1F14B3330;
    *((void *)v5 + 6) = fromCFDataRef;
    *((void *)v5 + 8) = v5 + 10;
    char v12 = 1;
    std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v2, v4, (uint64_t *)v5);
    uint64_t v10 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v10);
    uint64_t v0 = qword_1E9F7FA18;
  }
  if (v0)
  {
    while (1)
    {
      while (1)
      {
        double v6 = (uint64_t *)v0;
        int v7 = *(_DWORD *)(v0 + 32);
        if (v7 < 16) {
          break;
        }
        uint64_t v0 = *v6;
        double v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_19;
        }
      }
      if (v7 == 15) {
        break;
      }
      uint64_t v0 = v6[1];
      if (!v0)
      {
        double v8 = (uint64_t **)(v6 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
    double v8 = (uint64_t **)&qword_1E9F7FA18;
    double v6 = &qword_1E9F7FA18;
LABEL_19:
    unint64_t v9 = operator new(0x48uLL);
    double v11 = &qword_1E9F7FA18;
    v9[8] = 15;
    *((void *)v9 + 5) = &unk_1F14B3378;
    *((void *)v9 + 6) = fromCFStringRef;
    *((void *)v9 + 8) = v9 + 10;
    char v12 = 1;
    std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v6, v8, (uint64_t *)v9);
    uint64_t v10 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v10);
  }
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(16, 16, (uint64_t)fromCFDictionaryRef);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(8, 8, (uint64_t)fromAUFreqRespBin);
  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(9, 9, (uint64_t)fromAUOneChannelNS_VADTheshParams);

  std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(10, 10, (uint64_t)fromAUOneChannelNSV4_VADTheshParams);
}

void std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSNumber * (&)(void *,unsigned int *)>(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = qword_1E9F7FA18;
  if (qword_1E9F7FA18)
  {
    while (1)
    {
      while (1)
      {
        double v6 = (uint64_t *)v5;
        int v7 = *(_DWORD *)(v5 + 32);
        if (v7 <= a1) {
          break;
        }
        uint64_t v5 = *v6;
        double v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a1) {
        break;
      }
      uint64_t v5 = v6[1];
      if (!v5)
      {
        double v8 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v8 = (uint64_t **)&qword_1E9F7FA18;
    double v6 = &qword_1E9F7FA18;
LABEL_9:
    unint64_t v9 = operator new(0x48uLL);
    v10[1] = &qword_1E9F7FA18;
    v9[8] = a2;
    *((void *)v9 + 5) = &unk_1F14B3258;
    *((void *)v9 + 6) = a3;
    *((void *)v9 + 8) = v9 + 10;
    char v11 = 1;
    std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v6, v8, (uint64_t *)v9);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
}

void std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSArray * (&)(void *,unsigned int *)>(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = qword_1E9F7FA18;
  if (qword_1E9F7FA18)
  {
    while (1)
    {
      while (1)
      {
        double v6 = (uint64_t *)v5;
        int v7 = *(_DWORD *)(v5 + 32);
        if (v7 <= a1) {
          break;
        }
        uint64_t v5 = *v6;
        double v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a1) {
        break;
      }
      uint64_t v5 = v6[1];
      if (!v5)
      {
        double v8 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v8 = (uint64_t **)&qword_1E9F7FA18;
    double v6 = &qword_1E9F7FA18;
LABEL_9:
    unint64_t v9 = operator new(0x48uLL);
    v10[1] = &qword_1E9F7FA18;
    v9[8] = a2;
    *((void *)v9 + 5) = &unk_1F14B32A0;
    *((void *)v9 + 6) = a3;
    *((void *)v9 + 8) = v9 + 10;
    char v11 = 1;
    std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v6, v8, (uint64_t *)v9);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
}

void std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__emplace_unique_key_args<ValueType,ValueType,NSDictionary * (&)(void *,unsigned int *)>(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = qword_1E9F7FA18;
  if (qword_1E9F7FA18)
  {
    while (1)
    {
      while (1)
      {
        double v6 = (uint64_t *)v5;
        int v7 = *(_DWORD *)(v5 + 32);
        if (v7 <= a1) {
          break;
        }
        uint64_t v5 = *v6;
        double v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a1) {
        break;
      }
      uint64_t v5 = v6[1];
      if (!v5)
      {
        double v8 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v8 = (uint64_t **)&qword_1E9F7FA18;
    double v6 = &qword_1E9F7FA18;
LABEL_9:
    unint64_t v9 = operator new(0x48uLL);
    v10[1] = &qword_1E9F7FA18;
    v9[8] = a2;
    *((void *)v9 + 5) = &unk_1F14B32E8;
    *((void *)v9 + 6) = a3;
    *((void *)v9 + 8) = v9 + 10;
    char v11 = 1;
    std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at((uint64_t)v6, v8, (uint64_t *)v9);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
}

uint64_t *std::__tree<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::__map_value_compare<ValueType,std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,std::less<ValueType>,true>,std::allocator<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)getValueTypeFunctionCastMap(void)::gMap)
  {
    getValueTypeFunctionCastMap(void)::gMap = *(void *)getValueTypeFunctionCastMap(void)::gMap;
    a3 = *a2;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F7FA18, a3);
  ++qword_1E9F7FA20;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v2 = (void *)v1[8];
      if (v2 == v1 + 5)
      {
        (*(void (**)(void *))(v1[5] + 32))(v1 + 5);
      }
      else if (v2)
      {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
    }
    operator delete(v1);
  }
}

uint64_t std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14B3378;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14B3378;
  result[1] = v3;
  return result;
}

void std::__function::__func<NSString * (*)(void *,unsigned int *),std::allocator<NSString * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
}

uint64_t std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14B3330;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14B3330;
  result[1] = v3;
  return result;
}

void std::__function::__func<NSData * (*)(void *,unsigned int *),std::allocator<NSData * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
}

uint64_t std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14B32E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14B32E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<NSDictionary * (*)(void *,unsigned int *),std::allocator<NSDictionary * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
}

uint64_t std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14B32A0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14B32A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<NSArray * (*)(void *,unsigned int *),std::allocator<NSArray * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
}

uint64_t std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14B3258;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14B3258;
  result[1] = v3;
  return result;
}

void std::__function::__func<NSNumber * (*)(void *,unsigned int *),std::allocator<NSNumber * (*)(void *,unsigned int *)>,objc_object * ()(void *,unsigned int *)>::~__func()
{
}

void ___Z23getAUGenericPropertyMapv_block_invoke()
{
  id v11 = @"Latency";
  int v12 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xCu, (uint64_t)&v11);

  id v11 = @"TailTime";
  int v12 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x14u, (uint64_t)&v11);

  id v11 = @"SampleRate";
  int v12 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 2u, (uint64_t)&v11);

  id v11 = @"SupportsMPE";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x3Au, (uint64_t)&v11);

  id v11 = @"StreamFormat";
  int v12 = 5;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 8u, (uint64_t)&v11);

  id v11 = @"ElementCount";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xBu, (uint64_t)&v11);

  id v11 = @"BypassEffect";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x15u, (uint64_t)&v11);

  id v11 = @"RenderQuality";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x1Au, (uint64_t)&v11);

  id v11 = @"OfflineRender";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x25u, (uint64_t)&v11);

  id v11 = @"LastRenderError";
  int v12 = 0;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x16u, (uint64_t)&v11);

  id v11 = @"ContextName";
  int v12 = 15;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x19u, (uint64_t)&v11);

  id v11 = @"AudioChannelLayout";
  int v12 = 7;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x13u, (uint64_t)&v11);

  id v11 = @"InPlaceProcessing";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x1Du, (uint64_t)&v11);

  uint64_t v0 = operator new(0x38uLL);
  v0[8] = 3700;
  *((void *)v0 + 5) = @"UsesFixedBlockSize";
  v0[12] = 1;
  uint64_t v1 = (uint64_t **)&qword_1E9F7FA40;
  uint64_t v2 = qword_1E9F7FA40;
  if (qword_1E9F7FA40)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v3 = (uint64_t *)v2;
        unsigned int v4 = *(_DWORD *)(v2 + 32);
        if (v4 < 0xE75) {
          break;
        }
        uint64_t v2 = *v3;
        uint64_t v5 = (uint64_t **)v3;
        if (!*v3) {
          goto LABEL_9;
        }
      }
      if (v4 == 3700) {
        break;
      }
      uint64_t v2 = v3[1];
      if (!v2)
      {
        uint64_t v5 = (uint64_t **)(v3 + 1);
        goto LABEL_9;
      }
    }
    operator delete(v0);
  }
  else
  {
    uint64_t v5 = (uint64_t **)&qword_1E9F7FA40;
    uint64_t v3 = &qword_1E9F7FA40;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&getAUGenericPropertyMap(void)::gMap, (uint64_t)v3, v5, (uint64_t *)v0);
  }
  id v11 = @"ShouldAllocateBuffer";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x33u, (uint64_t)&v11);

  id v11 = @"FrequencyResponse";
  int v12 = 8;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x34u, (uint64_t)&v11);

  id v11 = @"MaximumFramesPerSlice";
  int v12 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xEu, (uint64_t)&v11);

  id v11 = @"SupportedNumChannels";
  int v12 = 6;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0xDu, (uint64_t)&v11);

  double v6 = operator new(0x38uLL);
  v6[8] = 6625;
  *((void *)v6 + 5) = @"DspLibExcludeChannelMask";
  v6[12] = 1;
  uint64_t v7 = qword_1E9F7FA40;
  if (qword_1E9F7FA40)
  {
    while (1)
    {
      while (1)
      {
        double v8 = (uint64_t *)v7;
        unsigned int v9 = *(_DWORD *)(v7 + 32);
        if (v9 >> 1 < 0xCF1) {
          break;
        }
        uint64_t v7 = *v8;
        uint64_t v1 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_19;
        }
      }
      if (v9 == 6625) {
        break;
      }
      uint64_t v7 = v8[1];
      if (!v7)
      {
        uint64_t v1 = (uint64_t **)(v8 + 1);
        goto LABEL_19;
      }
    }
    operator delete(v6);
  }
  else
  {
    double v8 = &qword_1E9F7FA40;
LABEL_19:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&getAUGenericPropertyMap(void)::gMap, (uint64_t)v8, v1, (uint64_t *)v6);
  }
  id v11 = @"SupportedChannelLayoutTags";
  int v12 = 17;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getAUGenericPropertyMap(void)::gMap, 0x20u, (uint64_t)&v11);
  id v10 = v11;
}

void sub_1BB535C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  double v6 = operator new(0x38uLL);
  uint64_t v7 = a1 + 1;
  double v8 = a1[1];
  v6[8] = a2;
  unsigned int v9 = *(void **)a3;
  *(void *)a3 = 0;
  *((void *)v6 + 5) = v9;
  v6[12] = *(_DWORD *)(a3 + 8);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        id v10 = (uint64_t **)v8;
        unsigned int v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2) {
          break;
        }
        double v8 = *v10;
        uint64_t v7 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      if (v11 >= a2) {
        break;
      }
      double v8 = v10[1];
      if (!v8)
      {
        uint64_t v7 = v10 + 1;
        goto LABEL_9;
      }
    }

    operator delete(v6);
  }
  else
  {
    id v10 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v10, v7, (uint64_t *)v6);
  }
}

void getAUEffectSubTypePropertyMap(void)
{
  {
    qword_1E9F7FA70 = 0;
    qword_1E9F7FA68 = 0;
    getAUEffectSubTypePropertyMap(void)::gMap = (uint64_t)&qword_1E9F7FA68;
  }
  if (getAUEffectSubTypePropertyMap(void)::onceToken != -1)
  {
    dispatch_once(&getAUEffectSubTypePropertyMap(void)::onceToken, &__block_literal_global_207);
  }
}

void ___Z29getAUEffectSubTypePropertyMapv_block_invoke()
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  LODWORD(v72) = 2200;
  float v73 = @"NumberOfBands";
  int v74 = 1;
  int v75 = 2201;
  uint64_t v76 = @"MaxNumberOfBands";
  int v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v57, (int *)&v72, 2);
  for (uint64_t i = 32; i != -16; i -= 24)

  uint64_t v1 = operator new(0x40uLL);
  uint64_t v2 = v58;
  uint64_t v3 = v57;
  v1[6] = v58;
  unsigned int v4 = (char *)(v1 + 6);
  *((_DWORD *)v1 + 8) = 1851942257;
  v1[5] = v3;
  uint64_t v5 = v59;
  v1[7] = v59;
  if (v5)
  {
    v2[2] = v4;
    uint64_t v57 = &v58;
    unsigned int v58 = 0;
    uint64_t v59 = 0;
  }
  else
  {
    v1[5] = v4;
  }
  double v6 = (uint64_t **)&qword_1E9F7FA68;
  uint64_t v7 = qword_1E9F7FA68;
  if (qword_1E9F7FA68)
  {
    while (1)
    {
      while (1)
      {
        double v8 = (uint64_t *)v7;
        unsigned int v9 = *(_DWORD *)(v7 + 32);
        if (v9 <= 0x6E626571) {
          break;
        }
        uint64_t v7 = *v8;
        double v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_14;
        }
      }
      if (v9 == 1851942257) {
        break;
      }
      uint64_t v7 = v8[1];
      if (!v7)
      {
        double v6 = (uint64_t **)(v8 + 1);
        goto LABEL_14;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v2);
    operator delete(v1);
  }
  else
  {
    double v8 = &qword_1E9F7FA68;
LABEL_14:
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v8, v6, v1);
  }
  v56[1] = 0;
  v56[0] = 0;
  vDSP_Length v55 = v56;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6C656335u, &v55);
  LODWORD(v72) = 4521;
  float v73 = @"UseVideoMode";
  int v74 = 1;
  int v75 = 4522;
  uint64_t v76 = @"UseV1Mode";
  int v77 = 1;
  int v78 = 4523;
  uint64_t v79 = @"VADModeThresholdParams";
  int v80 = 10;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v54, (int *)&v72, 3);
  for (uint64_t j = 56; j != -16; j -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F6E7334u, v54);
  LODWORD(v72) = 64001;
  float v73 = @"DeesserMode";
  int v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v53, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64656573u, v53);
  LODWORD(v72) = 4521;
  float v73 = @"UseVideoMode";
  int v74 = 1;
  int v75 = 4523;
  uint64_t v76 = @"UseVADMode";
  int v77 = 1;
  int v78 = 4525;
  uint64_t v79 = @"VADModeThresholdParams";
  int v80 = 9;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v52, (int *)&v72, 3);
  for (uint64_t k = 56; k != -16; k -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F636E73u, v52);
  v51[1] = 0;
  v51[0] = 0;
  vDSP_Length v50 = v51;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D636563u, &v50);
  LODWORD(v72) = 64001;
  float v73 = @"AllowLookAhead";
  int v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v49, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766C6332u, v49);
  LODWORD(v72) = 3701;
  float v73 = @"TransformSize";
  int v74 = 1;
  int v75 = 3704;
  uint64_t v76 = @"AuxVectorEnable";
  int v77 = 1;
  int v78 = 3709;
  uint64_t v79 = @"ReverseMicChannelFlag";
  int v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v48, (int *)&v72, 3);
  for (uint64_t m = 56; m != -16; m -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x62656D32u, v48);
  LODWORD(v72) = 3701;
  float v73 = @"TransformSize";
  int v74 = 1;
  int v75 = 3704;
  uint64_t v76 = @"AuxVectorEnable";
  int v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v47, (int *)&v72, 2);
  for (uint64_t n = 32; n != -16; n -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x626D6E66u, v47);
  LODWORD(v72) = 4503;
  float v73 = @"ReportedLatency";
  int v74 = 12;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v46, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x66697266u, v46);
  LODWORD(v72) = 5200;
  float v73 = @"NoiseSpectrumEstimate";
  int v74 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v45, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6F636E65u, v45);
  LODWORD(v72) = 2200;
  float v73 = @"NumberOfBands";
  int v74 = 1;
  int v75 = 2201;
  uint64_t v76 = @"MaxNumberOfBands";
  int v77 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v44, (int *)&v72, 2);
  for (iuint64_t i = 32; ii != -16; ii -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D626571u, v44);
  LODWORD(v72) = 64002;
  float v73 = @"ShadingMode";
  int v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v43, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x726F7368u, v43);
  LODWORD(v72) = 64002;
  float v73 = @"GainsDB";
  int v74 = 19;
  int v75 = 64003;
  uint64_t v76 = @"Gains";
  int v77 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v42, (int *)&v72, 2);
  for (juint64_t j = 32; jj != -16; jj -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6678676Eu, v42);
  LODWORD(v72) = 64001;
  float v73 = @"ForThermalProtection";
  int v74 = 1;
  int v75 = 64002;
  uint64_t v76 = @"ForNonCLTMHaptics";
  int v77 = 1;
  int v78 = 64003;
  uint64_t v79 = @"AttenuationActiveState";
  int v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v41, (int *)&v72, 3);
  for (kuint64_t k = 56; kk != -16; kk -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766F6C69u, v41);
  LODWORD(v72) = 64001;
  float v73 = @"ForThermalProtection";
  int v74 = 1;
  int v75 = 64002;
  uint64_t v76 = @"ForNonCLTMHaptics";
  int v77 = 1;
  int v78 = 64003;
  uint64_t v79 = @"AttenuationActiveState";
  int v80 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v40, (int *)&v72, 3);
  for (muint64_t m = 56; mm != -16; mm -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x766F6C69u, v40);
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v38 = v39;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x61787463u, &v38);
  LODWORD(v72) = 1668179559;
  float v73 = @"ConfigPlist";
  int v74 = 16;
  int v75 = 1718186611;
  uint64_t v76 = @"FIRMatrices";
  int v77 = 13;
  int v78 = 1717924720;
  uint64_t v79 = @"SetParameters";
  int v80 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v37, (int *)&v72, 3);
  for (uint64_t nn = 56; nn != -16; nn -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x66697265u, v37);
  LODWORD(v72) = 1667788397;
  float v73 = @"IOChannelNames";
  int v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v36, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x70636872u, v36);
  LODWORD(v72) = 8900;
  float v73 = @"BQPlist";
  int v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v35, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6C6F7564u, v35);
  LODWORD(v72) = 3699;
  float v73 = @"NeuralNetSPPMask";
  int v74 = 19;
  int v75 = 36999;
  uint64_t v76 = @"NeuralNetSPPPostMask";
  int v77 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v34, (int *)&v72, 2);
  for (uint64_t i1 = 32; i1 != -16; i1 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6E6E7370u, v34);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v32 = v33;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x776E646Bu, &v32);
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v30 = v31;
  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64727662u, &v30);
  LODWORD(v72) = 1885566051;
  float v73 = @"ParameterChangeTimeConstant";
  int v74 = 3;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v29, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73637479u, v29);
  LODWORD(v72) = 6611;
  float v73 = @"DspLibPeakPowerGuardAdmittanceFilterCoefficients";
  int v74 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v28, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x61707067u, v28);
  LODWORD(v72) = 8808;
  float v73 = @"AlgoOrder";
  int v74 = 12;
  int v75 = 1668179559;
  uint64_t v76 = @"ConfigPlist";
  int v77 = 16;
  int v78 = 8801;
  uint64_t v79 = @"SpksInRows";
  int v80 = 13;
  int v81 = 8802;
  BOOL v82 = @"SpksOffset";
  int v83 = 13;
  int v84 = 8800;
  float v85 = @"BeamComp";
  int v86 = 13;
  int v87 = 8803;
  int16x8_t v88 = @"BeamFIR";
  int v89 = 13;
  int v90 = 8804;
  uint32_t v91 = @"ModalFIR";
  int v92 = 13;
  int v93 = 8805;
  uint64_t v94 = @"EQBiQuad";
  int v95 = 13;
  int v96 = 8806;
  uint64_t v97 = @"DriverBQ";
  int v98 = 13;
  int v99 = 8807;
  unint64_t v100 = @"CongifPlistVersion";
  int v101 = 15;
  int v102 = 8809;
  unint64_t v103 = @"BeamDescriptions";
  int v104 = 13;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v27, (int *)&v72, 11);
  for (uint64_t i2 = 248; i2 != -16; i2 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x63726361u, v27);
  LODWORD(v72) = 1003;
  float v73 = @"ChannelSplitMode";
  int v74 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v26, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73656E73u, v26);
  LODWORD(v72) = 1936483181;
  float v73 = @"ChannelMap";
  int v74 = 17;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v25, (int *)&v72, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x636C736Cu, v25);
  LODWORD(v72) = 64001;
  float v73 = @"TransducerCalibration";
  int v74 = 13;
  int v75 = 64002;
  uint64_t v76 = @"VPMode";
  int v77 = 1;
  int v78 = 64004;
  uint64_t v79 = @"EnableClosedLoop";
  int v80 = 1;
  int v81 = 64005;
  BOOL v82 = @"SpeakerInputDataSourceOrder";
  int v83 = 17;
  int v84 = 64006;
  float v85 = @"IgnoreChannelTelemetry";
  int v86 = 17;
  int v87 = 64007;
  int16x8_t v88 = @"ThermalStateOverride";
  int v89 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v24, (int *)&v72, 6);
  for (uint64_t i3 = 128; i3 != -16; i3 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73707033u, v24);
  LODWORD(v72) = 64003;
  float v73 = @"MaxNumBands";
  int v74 = 1;
  int v75 = 64004;
  uint64_t v76 = @"CrossoverOrder";
  int v77 = 1;
  int v78 = 64005;
  uint64_t v79 = @"PrioritizeLatency";
  int v80 = 1;
  int v81 = 64006;
  BOOL v82 = @"AllowLookahead";
  int v83 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)v23, (int *)&v72, 4);
  for (uint64_t i4 = 80; i4 != -16; i4 -= 24)

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x6D647032u, v23);
  LODWORD(v69) = 64002;
  float v70 = @"InitialGainDB";
  int v71 = 19;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v72, (int *)&v69, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x706C7567u, &v72);
  LODWORD(v66) = 1936289382;
  uint64_t v67 = @"StateInformation";
  int v68 = 13;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v69, (int *)&v66, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x64737067u, &v69);
  LODWORD(v63) = 64001;
  CFStringRef v64 = @"VolumeMap";
  int v65 = 16;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v66, (int *)&v63, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x73706C6Du, &v66);
  int v60 = 4501;
  uint64_t v61 = @"Algorithm";
  int v62 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v63, &v60, 1);

  std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(0x62737332u, &v63);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v64);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v67);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v70);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v73);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v23[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v24[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v25[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v26[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v27[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v28[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v29[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v31[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v33[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v34[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v35[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v36[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v37[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v39[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v40[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v41[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v42[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v43[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v44[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v45[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v46[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v47[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v48[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v49[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v51[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v52[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v53[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)v54[1]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v56[0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v58);
}

void sub_1BB536CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x300]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x318]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x330]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x348]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a12);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a15);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a18);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a21);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a24);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a27);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a30);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a33);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a36);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a39);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a42);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a45);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a48);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a51);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a54);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a57);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a60);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a63);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a66);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a69);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a72);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x210]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x228]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x240]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x258]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x270]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x288]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x2A0]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x2B8]);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy((void *)STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void sub_1BB536E50()
{
  JUMPOUT(0x1BB536D58);
}

void sub_1BB536E60()
{
}

void sub_1BB536E68()
{
  for (uint64_t i = 80; i != -16; i -= 24)

  JUMPOUT(0x1BB536D60);
}

void sub_1BB536E88()
{
}

void sub_1BB536E90()
{
  for (uint64_t i = 128; i != -16; i -= 24)

  JUMPOUT(0x1BB536D68);
}

void sub_1BB536EB0()
{
}

void sub_1BB536EB8()
{
  JUMPOUT(0x1BB536D70);
}

void sub_1BB536EC8()
{
}

void sub_1BB536ED0()
{
  JUMPOUT(0x1BB536D78);
}

void sub_1BB536EE0()
{
}

void sub_1BB536EE8()
{
  for (uint64_t i = 248; i != -16; i -= 24)

  JUMPOUT(0x1BB536D80);
}

void sub_1BB536F08()
{
}

void sub_1BB536F10()
{
  JUMPOUT(0x1BB536D88);
}

void sub_1BB536F20()
{
}

void sub_1BB536F28()
{
  JUMPOUT(0x1BB536D90);
}

void sub_1BB536F38()
{
}

void sub_1BB536F40()
{
}

void sub_1BB536F48()
{
}

void sub_1BB536F50()
{
  for (uint64_t i = 32; i != -16; i -= 24)

  JUMPOUT(0x1BB536DA8);
}

void sub_1BB536F70()
{
}

void sub_1BB536F78()
{
  JUMPOUT(0x1BB536DB0);
}

void sub_1BB536F88()
{
}

void sub_1BB536F90()
{
  JUMPOUT(0x1BB536DB8);
}

void sub_1BB536FA0()
{
}

void sub_1BB536FA8()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536DC0);
}

void sub_1BB536FC8()
{
}

void sub_1BB536FD0()
{
}

void sub_1BB536FD8()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536DD0);
}

void sub_1BB536FF8()
{
}

void sub_1BB537000()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536DD8);
}

void sub_1BB537020()
{
}

void sub_1BB537028()
{
  for (uint64_t i = 32; i != -16; i -= 24)

  JUMPOUT(0x1BB536DE0);
}

void sub_1BB537048()
{
}

void sub_1BB537050()
{
  JUMPOUT(0x1BB536DE8);
}

void sub_1BB537060()
{
}

void sub_1BB537068()
{
  for (uint64_t i = 32; i != -16; i -= 24)

  JUMPOUT(0x1BB536DF0);
}

void sub_1BB537088()
{
}

void sub_1BB537090()
{
  JUMPOUT(0x1BB536DF8);
}

void sub_1BB5370A0()
{
}

void sub_1BB5370A8()
{
  JUMPOUT(0x1BB536E00);
}

void sub_1BB5370B8()
{
}

void sub_1BB5370C0()
{
  for (uint64_t i = 32; i != -16; i -= 24)

  JUMPOUT(0x1BB536E08);
}

void sub_1BB5370E0()
{
}

void sub_1BB5370E8()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536E10);
}

void sub_1BB537108()
{
}

void sub_1BB537110()
{
  JUMPOUT(0x1BB536E18);
}

void sub_1BB537120()
{
}

void sub_1BB537128()
{
}

void sub_1BB537130()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536E28);
}

void sub_1BB537150()
{
}

void sub_1BB537158()
{
  JUMPOUT(0x1BB536E30);
}

void sub_1BB537168()
{
}

void sub_1BB537170()
{
  for (uint64_t i = 56; i != -16; i -= 24)

  JUMPOUT(0x1BB536E38);
}

void sub_1BB537190()
{
}

void sub_1BB537198()
{
}

void sub_1BB5371A0()
{
  for (uint64_t i = 32; i != -16; i -= 24)

  JUMPOUT(0x1BB536E48);
}

uint64_t std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a2;
    double v6 = 0;
    uint64_t v7 = &a2[6 * a3];
    double v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      unsigned int v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      id v10 = v6;
      unsigned int v11 = v4;
      if (v6)
      {
        do
        {
          unsigned int v9 = v10;
          id v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unsigned int v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        unsigned int v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (uint64_t **)v4;
        unsigned int v15 = (uint64_t **)v4;
        if (v6)
        {
          unsigned int v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unsigned int v17 = *((_DWORD *)v6 + 8);
              if (v13 >= v17) {
                break;
              }
              double v6 = *v14;
              unsigned int v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v17 >= v13) {
              break;
            }
            unsigned int v15 = v14 + 1;
            double v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        std::vector<unsigned int> v16 = operator new(0x38uLL);
        v16[8] = *v5;
        *((void *)v16 + 5) = *((id *)v5 + 1);
        v16[12] = v5[4];
        std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v14, v15, (uint64_t *)v16);
      }
      v5 += 6;
      if (v5 == v7) {
        break;
      }
      double v8 = *(uint64_t **)a1;
      double v6 = *(uint64_t **)(a1 + 8);
    }
  }
  return a1;
}

void sub_1BB537324(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)getAUEffectSubTypePropertyMap(void)::gMap)
  {
    getAUEffectSubTypePropertyMap(void)::gMap = *(void *)getAUEffectSubTypePropertyMap(void)::gMap;
    a3 = *a2;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F7FA68, a3);
  ++qword_1E9F7FA70;
  return result;
}

void std::map<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>::emplace[abi:ne180100]<$_25,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>(unsigned int a1, void *a2)
{
  unsigned int v4 = operator new(0x40uLL);
  v4[8] = a1;
  double v6 = a2 + 1;
  uint64_t v5 = (void *)a2[1];
  *((void *)v4 + 5) = *a2;
  *((void *)v4 + 6) = v5;
  uint64_t v7 = (char *)(v4 + 12);
  uint64_t v8 = a2[2];
  *((void *)v4 + 7) = v8;
  if (v8)
  {
    v5[2] = v7;
    *a2 = v6;
    *double v6 = 0;
    a2[2] = 0;
  }
  else
  {
    *((void *)v4 + 5) = v7;
  }
  unsigned int v9 = (uint64_t **)&qword_1E9F7FA68;
  uint64_t v10 = qword_1E9F7FA68;
  if (qword_1E9F7FA68)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v11 = (uint64_t *)v10;
        unsigned int v12 = *(_DWORD *)(v10 + 32);
        if (v12 <= a1) {
          break;
        }
        uint64_t v10 = *v11;
        unsigned int v9 = (uint64_t **)v11;
        if (!*v11) {
          goto LABEL_12;
        }
      }
      if (v12 >= a1) {
        break;
      }
      uint64_t v10 = v11[1];
      if (!v10)
      {
        unsigned int v9 = (uint64_t **)(v11 + 1);
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v5);
    operator delete(v4);
  }
  else
  {
    unsigned int v11 = &qword_1E9F7FA68;
LABEL_12:
    std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v11, v9, (uint64_t *)v4);
  }
}

void std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void ___Z24getBoxGenericPropertyMapv_block_invoke()
{
  id v1 = @"SampleRate";
  int v2 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 2u, (uint64_t)&v1);

  id v1 = @"StreamFormat";
  int v2 = 5;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 8u, (uint64_t)&v1);

  id v1 = @"ElementCount";
  int v2 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0xBu, (uint64_t)&v1);

  id v1 = @"Latency";
  int v2 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0xCu, (uint64_t)&v1);

  id v1 = @"TailTime";
  int v2 = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x14u, (uint64_t)&v1);

  id v1 = @"BypassEffect";
  int v2 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x15u, (uint64_t)&v1);

  id v1 = @"InPlaceProcessing";
  int v2 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x1Du, (uint64_t)&v1);

  id v1 = @"NickName";
  int v2 = 15;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::emplace[abi:ne180100]<$_1,std::tuple<NSString * {__strong},ValueType>>((uint64_t **)&getBoxGenericPropertyMap(void)::gMap, 0x36u, (uint64_t)&v1);
  id v0 = v1;
}

void sub_1BB537690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void getBoxSpecificPropertyMap(void)
{
  {
    qword_1E9F7FAC0 = 0;
    qword_1E9F7FAB8 = 0;
    getBoxSpecificPropertyMap(void)::gMap = (uint64_t)&qword_1E9F7FAB8;
  }
  if (getBoxSpecificPropertyMap(void)::onceToken != -1)
  {
    dispatch_once(&getBoxSpecificPropertyMap(void)::onceToken, &__block_literal_global_376);
  }
}

void ___Z25getBoxSpecificPropertyMapv_block_invoke()
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  LODWORD(v88) = 0;
  int v89 = @"EnableDetailedLogging";
  LODWORD(v90) = 1;
  int v91 = 1;
  int v92 = @"LogSamplingThreshold";
  int v93 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v76, (int *)&v88, 2);
  for (uint64_t i = 4; i != -2; i -= 3)

  id v1 = operator new(0x40uLL);
  uint64_t v3 = v76;
  int v2 = v77;
  v1[6] = v77;
  unsigned int v4 = v1 + 6;
  v1[4] = "NonFiniteProtectionBox";
  v1[5] = v3;
  uint64_t v5 = v78;
  v1[7] = v78;
  if (v5)
  {
    v2[2] = v4;
    uint64_t v76 = &v77;
    int v77 = 0;
    uint64_t v78 = 0;
  }
  else
  {
    v1[5] = v4;
  }
  double v6 = (uint64_t **)&qword_1E9F7FAB8;
  uint64_t v7 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v8 = v1[4];
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t *)v7;
        unint64_t v10 = *(void *)(v7 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v7 = *v9;
        unsigned int v11 = (uint64_t **)v9;
        if (!*v9) {
          goto LABEL_15;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        unsigned int v11 = (uint64_t **)(v9 + 1);
        goto LABEL_15;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v2);
    operator delete(v1);
  }
  else
  {
    unsigned int v11 = (uint64_t **)&qword_1E9F7FAB8;
    unsigned int v9 = &qword_1E9F7FAB8;
LABEL_15:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v9, v11, v1);
  }
  LODWORD(v88) = 3014;
  int v89 = @"SampleRateConverterComplexity";
  LODWORD(v90) = 1;
  int v91 = 26;
  int v92 = @"RenderQuality";
  int v93 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v73, (int *)&v88, 2);
  for (uint64_t j = 4; j != -2; j -= 3)

  unsigned int v13 = operator new(0x40uLL);
  unsigned int v15 = v73;
  uint64_t v14 = v74;
  v13[6] = v74;
  std::vector<unsigned int> v16 = v13 + 6;
  v13[4] = "src";
  v13[5] = v15;
  uint64_t v17 = v75;
  v13[7] = v75;
  if (v17)
  {
    v14[2] = v16;
    float v73 = &v74;
    int v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    v13[5] = v16;
  }
  uint64_t v18 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v19 = v13[4];
    while (1)
    {
      while (1)
      {
        uint64_t v20 = (uint64_t *)v18;
        unint64_t v21 = *(void *)(v18 + 32);
        if (v19 >= v21) {
          break;
        }
        uint64_t v18 = *v20;
        int v22 = (uint64_t **)v20;
        if (!*v20) {
          goto LABEL_31;
        }
      }
      if (v21 >= v19) {
        break;
      }
      uint64_t v18 = v20[1];
      if (!v18)
      {
        int v22 = (uint64_t **)(v20 + 1);
        goto LABEL_31;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v14);
    operator delete(v13);
  }
  else
  {
    int v22 = (uint64_t **)&qword_1E9F7FAB8;
    uint64_t v20 = &qword_1E9F7FAB8;
LABEL_31:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v20, v22, v13);
  }
  LODWORD(v88) = 0;
  int v89 = @"RefIndex";
  LODWORD(v90) = 0;
  int v91 = 1;
  int v92 = @"SpacedOmniLeftIndex";
  int v93 = 0;
  int v94 = 2;
  int v95 = @"SpacedOmniRightIndex";
  int v96 = 0;
  int v97 = 3;
  int v98 = @"LinearSpatialFirstIndex";
  int v99 = 0;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v70, (int *)&v88, 4);
  for (uint64_t k = 10; k != -2; k -= 3)

  uint64_t v24 = operator new(0x40uLL);
  unsigned int v26 = v70;
  int v25 = v71;
  v24[6] = v71;
  unsigned int v27 = v24 + 6;
  v24[4] = "SCMicSelectionBox";
  v24[5] = v26;
  uint64_t v28 = v72;
  v24[7] = v72;
  if (v28)
  {
    v25[2] = v27;
    float v70 = &v71;
    int v71 = 0;
    uint64_t v72 = 0;
  }
  else
  {
    v24[5] = v27;
  }
  uint64_t v29 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v30 = v24[4];
    while (1)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v29;
        unint64_t v32 = *(void *)(v29 + 32);
        if (v30 >= v32) {
          break;
        }
        uint64_t v29 = *v31;
        int v33 = (uint64_t **)v31;
        if (!*v31) {
          goto LABEL_47;
        }
      }
      if (v32 >= v30) {
        break;
      }
      uint64_t v29 = v31[1];
      if (!v29)
      {
        int v33 = (uint64_t **)(v31 + 1);
        goto LABEL_47;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v25);
    operator delete(v24);
  }
  else
  {
    int v33 = (uint64_t **)&qword_1E9F7FAB8;
    uint64_t v31 = &qword_1E9F7FAB8;
LABEL_47:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v31, v33, v24);
  }
  LODWORD(v85) = 3098;
  int v86 = @"ParameterChangeSmoothingTime";
  LODWORD(v87) = 4;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v88, (int *)&v85, 1);

  uint64_t v34 = (char *)operator new(0x40uLL);
  uint64_t v36 = v88;
  uint64_t v35 = v89;
  *((void *)v34 + 6) = v89;
  float v37 = v34 + 48;
  *((void *)v34 + 4) = "GainBox";
  *((void *)v34 + 5) = v36;
  uint64_t v38 = v90;
  *((void *)v34 + 7) = v90;
  if (v38)
  {
    v35->data = v37;
    int16x8_t v88 = &v89;
    int v89 = 0;
    uint64_t v90 = 0;
  }
  else
  {
    *((void *)v34 + 5) = v37;
  }
  uint64_t v39 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v40 = *((void *)v34 + 4);
    while (1)
    {
      while (1)
      {
        BOOL v41 = (uint64_t *)v39;
        unint64_t v42 = *(void *)(v39 + 32);
        if (v40 >= v42) {
          break;
        }
        uint64_t v39 = *v41;
        uint64_t v43 = (uint64_t **)v41;
        if (!*v41) {
          goto LABEL_61;
        }
      }
      if (v42 >= v40) {
        break;
      }
      uint64_t v39 = v41[1];
      if (!v39)
      {
        uint64_t v43 = (uint64_t **)(v41 + 1);
        goto LABEL_61;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v35);
    operator delete(v34);
  }
  else
  {
    uint64_t v43 = (uint64_t **)&qword_1E9F7FAB8;
    BOOL v41 = &qword_1E9F7FAB8;
LABEL_61:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v41, v43, (uint64_t *)v34);
  }
  LODWORD(v82) = 100;
  int v83 = @"NumPropVectors";
  LODWORD(v84) = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v85, (int *)&v82, 1);

  uint64_t v44 = 0;
  do
  {
    uint64_t v45 = objc_msgSend(NSString, "stringWithFormat:", @"PropVector%u", v44, v70);
    vDSP_Length v46 = v86;
    vDSP_Length v47 = &v86;
    uint64_t v48 = &v86;
    if (v86)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v48 = (__CFString **)v46;
          unsigned int isa = v46[1].isa;
          if (v44 >= isa) {
            break;
          }
          vDSP_Length v46 = *v48;
          vDSP_Length v47 = v48;
          if (!*v48) {
            goto LABEL_71;
          }
        }
        if (isa >= v44) {
          break;
        }
        vDSP_Length v46 = v48[1];
        if (!v46)
        {
          vDSP_Length v47 = v48 + 1;
          goto LABEL_71;
        }
      }
    }
    else
    {
LABEL_71:
      vDSP_Length v50 = (__CFString *)operator new(0x38uLL);
      LODWORD(v50[1].isa) = v44;
      v50[1].info = (uint64_t)v45;
      LODWORD(v50[1].data) = 19;
      v50->unsigned int isa = 0;
      v50->info = 0;
      v50->data = (char *)v48;
      NSObject *v47 = v50;
      if (*v85)
      {
        float v85 = (__CFString **)*v85;
        vDSP_Length v50 = *v47;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v86, (uint64_t *)v50);
      uint64_t v45 = 0;
      ++v87;
    }

    uint64_t v44 = (v44 + 1);
  }
  while (v44 != 100);
  vDSP_Length v51 = (char *)operator new(0x40uLL);
  uint64_t v53 = v85;
  uint32_t v52 = v86;
  *((void *)v51 + 6) = v86;
  uint64_t v54 = v51 + 48;
  *((void *)v51 + 4) = "VectorGainBox";
  *((void *)v51 + 5) = v53;
  uint64_t v55 = v87;
  *((void *)v51 + 7) = v87;
  if (v55)
  {
    v52->data = v54;
    float v85 = &v86;
    int v86 = 0;
    uint64_t v87 = 0;
  }
  else
  {
    *((void *)v51 + 5) = v54;
  }
  uint64_t v56 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v57 = *((void *)v51 + 4);
    while (1)
    {
      while (1)
      {
        unsigned int v58 = (uint64_t *)v56;
        unint64_t v59 = *(void *)(v56 + 32);
        if (v57 >= v59) {
          break;
        }
        uint64_t v56 = *v58;
        int v60 = (uint64_t **)v58;
        if (!*v58) {
          goto LABEL_87;
        }
      }
      if (v59 >= v57) {
        break;
      }
      uint64_t v56 = v58[1];
      if (!v56)
      {
        int v60 = (uint64_t **)(v58 + 1);
        goto LABEL_87;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v52);
    operator delete(v51);
  }
  else
  {
    int v60 = (uint64_t **)&qword_1E9F7FAB8;
    unsigned int v58 = &qword_1E9F7FAB8;
LABEL_87:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v58, v60, (uint64_t *)v51);
  }
  int v79 = 64000;
  int v80 = @"MaxDelayFrames";
  int v81 = 1;
  std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>::map[abi:ne180100]((uint64_t)&v82, &v79, 1);

  uint64_t v61 = (char *)operator new(0x40uLL);
  uint64_t v63 = v82;
  int v62 = v83;
  *((void *)v61 + 6) = v83;
  CFStringRef v64 = v61 + 48;
  *((void *)v61 + 4) = "DelayBox";
  *((void *)v61 + 5) = v63;
  uint64_t v65 = v84;
  *((void *)v61 + 7) = v84;
  if (v65)
  {
    v62->data = v64;
    BOOL v82 = &v83;
    int v83 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    *((void *)v61 + 5) = v64;
  }
  uint64_t v66 = qword_1E9F7FAB8;
  if (qword_1E9F7FAB8)
  {
    unint64_t v67 = *((void *)v61 + 4);
    while (1)
    {
      while (1)
      {
        int v68 = (uint64_t *)v66;
        unint64_t v69 = *(void *)(v66 + 32);
        if (v67 >= v69) {
          break;
        }
        uint64_t v66 = *v68;
        double v6 = (uint64_t **)v68;
        if (!*v68) {
          goto LABEL_101;
        }
      }
      if (v69 >= v67) {
        break;
      }
      uint64_t v66 = v68[1];
      if (!v66)
      {
        double v6 = (uint64_t **)(v68 + 1);
        goto LABEL_101;
      }
    }
    std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v62);
    operator delete(v61);
  }
  else
  {
    int v68 = &qword_1E9F7FAB8;
LABEL_101:
    std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at((uint64_t)v68, v6, (uint64_t *)v61);
  }
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v83);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v86);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v89);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v71);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v74);
  std::__tree<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>::destroy(v77);
}

void sub_1BB537EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t *std::__tree<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::map<unsigned int,std::tuple<NSString * {__strong},ValueType>>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)getBoxSpecificPropertyMap(void)::gMap)
  {
    getBoxSpecificPropertyMap(void)::gMap = *(void *)getBoxSpecificPropertyMap(void)::gMap;
    a3 = *a2;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F7FAB8, a3);
  ++qword_1E9F7FAC0;
  return result;
}

void addGenericAuPropToDescription(NSMutableDictionary *a1, OpaqueAudioComponentInstance *a2, AudioUnitScope *a3, AudioUnitElement *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v22 = a1;
  UInt32 outDataSize = 0;
  Boolean outWritable = 1;
  uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionary];
  {
    qword_1E9F7FA48 = 0;
    qword_1E9F7FA40 = 0;
    getAUGenericPropertyMap(void)::gMap = (uint64_t)&qword_1E9F7FA40;
  }
  if (getAUGenericPropertyMap(void)::onceToken != -1) {
    dispatch_once(&getAUGenericPropertyMap(void)::onceToken, &__block_literal_global_148);
  }
  uint64_t v8 = getAUGenericPropertyMap(void)::gMap;
  if ((uint64_t *)getAUGenericPropertyMap(void)::gMap != &qword_1E9F7FA40)
  {
    do
    {
      AudioUnitPropertyID v9 = *(_DWORD *)(v8 + 32);
      id v10 = *(id *)(v8 + 40);
      uint64_t PropertyInfo = AudioUnitGetPropertyInfo(a2, v9, *a3, *a4, &outDataSize, &outWritable);
      if (!PropertyInfo)
      {
        MEMORY[0x1F4188790](PropertyInfo);
        unsigned int v13 = (char *)&v21 - ((v12 + 15) & 0x1FFFFFFF0);
        if (!AudioUnitGetProperty(a2, v9, *a3, *a4, v13, &outDataSize))
        {
          getValueTypeFunctionCastMap();
          uint64_t v14 = std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)qword_1E9F7FA40, v9);
          uint64_t v15 = std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(*((_DWORD *)v14 + 2));
          std::vector<unsigned int> v16 = std::function<objc_object * ()(void *,unsigned int *)>::operator()(*(void *)(v15 + 24), (uint64_t)v13, (uint64_t)&outDataSize);
          id v17 = (id)*std::map<unsigned int,SpatialCaptureParameterInfo>::at((uint64_t *)qword_1E9F7FA40, v9);
          [v7 setObject:v16 forKey:v17];
        }
      }

      uint64_t v18 = *(uint64_t **)(v8 + 8);
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = *(uint64_t **)(v8 + 16);
          BOOL v20 = *v19 == v8;
          uint64_t v8 = (uint64_t)v19;
        }
        while (!v20);
      }
      uint64_t v8 = (uint64_t)v19;
    }
    while (v19 != &qword_1E9F7FA40);
  }
  [(NSMutableDictionary *)v22 setObject:v7 forKey:@"Generic"];
}

void sub_1BB5382BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(int a1)
{
  uint64_t v1 = qword_1E9F7FA18;
  if (!qword_1E9F7FA18) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1) {
        break;
      }
      uint64_t v1 = *(void *)v1;
      if (!v1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a1) {
      return v1 + 40;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      goto LABEL_8;
    }
  }
}

id std::function<objc_object * ()(void *,unsigned int *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v6, &v5);

  return v3;
}

void addSubTypeSpecificAuPropToDescription(NSMutableDictionary *a1, OpaqueAudioComponentInstance *a2, unsigned int *a3, AudioUnitScope *a4, AudioUnitElement *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a1;
  UInt32 outDataSize = 0;
  Boolean outWritable = 0;
  AudioUnitPropertyID v9 = [MEMORY[0x1E4F1CA60] dictionary];
  getAUEffectSubTypePropertyMap();
  uint64_t v10 = qword_1E9F7FA68;
  if (!qword_1E9F7FA68)
  {
LABEL_7:
    [v9 setObject:@"EitherNoSubtypePropertiesElseNeedsToBeAdded" forKey:@"SubtypeSpecificPropertiesUnavailable"];
    goto LABEL_8;
  }
  unsigned int v11 = *a3;
  while (1)
  {
    unsigned int v12 = *(_DWORD *)(v10 + 32);
    if (v11 >= v12) {
      break;
    }
LABEL_6:
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      goto LABEL_7;
    }
  }
  if (v12 < v11)
  {
    v10 += 8;
    goto LABEL_6;
  }
  getAUEffectSubTypePropertyMap();
  uint64_t v13 = qword_1E9F7FA68;
  if (!qword_1E9F7FA68) {
LABEL_16:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unsigned int v14 = *a3;
  while (1)
  {
    while (1)
    {
      unsigned int v15 = *(_DWORD *)(v13 + 32);
      if (v14 >= v15) {
        break;
      }
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_16;
      }
    }
    if (v15 >= v14) {
      break;
    }
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13) {
      goto LABEL_16;
    }
  }
  std::vector<unsigned int> v16 = *(uint64_t ***)(v13 + 40);
  id v17 = (uint64_t **)(v13 + 48);
  if (v16 != (uint64_t **)(v13 + 48))
  {
    do
    {
      AudioUnitPropertyID v18 = *((_DWORD *)v16 + 8);
      unint64_t v19 = v16[5];
      uint64_t PropertyInfo = AudioUnitGetPropertyInfo(a2, v18, *a4, *a5, &outDataSize, &outWritable);
      if (PropertyInfo) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = outDataSize == 0;
      }
      if (!v21)
      {
        MEMORY[0x1F4188790](PropertyInfo);
        uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0x1FFFFFFF0);
        if (!AudioUnitGetProperty(a2, v18, *a4, *a5, v23, &outDataSize))
        {
          getValueTypeFunctionCastMap();
          uint64_t v24 = std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v17, v18);
          uint64_t v25 = std::map<ValueType,std::function<objc_object * ()(void *,unsigned int *)>>::at(*((_DWORD *)v24 + 2));
          unsigned int v26 = std::function<objc_object * ()(void *,unsigned int *)>::operator()(*(void *)(v25 + 24), (uint64_t)v23, (uint64_t)&outDataSize);
          id v27 = (id)*std::map<unsigned int,SpatialCaptureParameterInfo>::at(*v17, v18);
          [v9 setObject:v26 forKey:v27];
        }
      }

      uint64_t v28 = v16[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = (uint64_t **)v28;
          uint64_t v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (uint64_t **)v16[2];
          BOOL v21 = *v29 == (uint64_t *)v16;
          std::vector<unsigned int> v16 = v29;
        }
        while (!v21);
      }
      std::vector<unsigned int> v16 = v29;
    }
    while (v29 != v17);
  }
LABEL_8:
  [(NSMutableDictionary *)v31 setObject:v9 forKey:@"SubTypeSpecific"];
}

void sub_1BB53865C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUSM::Properties::Properties(uint64_t a1, uint64_t a2, int a3, int a4, long long *a5)
{
  *(void *)a1 = &unk_1F14BE008;
  AudioUnitPropertyID v9 = (std::string *)(a1 + 8);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    v9->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

void AUSM::Properties::addPropertyMapEntry<unsigned int>()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_1BB5388B4(_Unwind_Exception *a1)
{
  AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(v1);
  _Unwind_Resume(a1);
}

void sub_1BB538A48(_Unwind_Exception *a1)
{
  AUSM::AtomicProperty<unsigned int>::~AtomicProperty(v1);
  _Unwind_Resume(a1);
}

void AUSM::Properties::addPropertyMapEntry<AUSM::DistanceParameters>()
{
}

void sub_1BB538BCC(_Unwind_Exception *a1)
{
  AUSM::AtomicProperty<AUSM::DistanceParameters>::~AtomicProperty(v1);
  _Unwind_Resume(a1);
}

void sub_1BB538D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::Properties::addCFURLAndCStringPropertyMapEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  if (*((char *)a5 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v6 = (size_t)a5[1];
  }
  uint64_t v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 6);
  if (v10 < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v8 = a5;
    }
    else {
      uint64_t v8 = *a5;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " CFURL");
  operator new();
}

void sub_1BB539010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1C185D370](v14, 0x10B3C403C7774E2);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void AUSM::Properties::~Properties(AUSM::Properties *this)
{
  *(void *)this = &unk_1F14BE008;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((void **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t AUSM::PropertyDescriptor::PropertyDescriptor(uint64_t a1, int a2, int a3, char a4, long long *a5)
{
  *(void *)a1 = &unk_1F14BE0C0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(unsigned char *)(a1 + 16) = a4;
  size_t v6 = (std::string *)(a1 + 24);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

std::string *AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB539204(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::PropertyDescriptor::getName(AUSM::PropertyDescriptor *this)
{
  return (uint64_t)this + 24;
}

uint64_t AUSM::PropertyDescriptor::isWritable(AUSM::PropertyDescriptor *this, int a2)
{
  int v2 = *((_DWORD *)this + 2);
  unsigned int v3 = a2 ^ 1;
  if (v2 != 2) {
    unsigned int v3 = 0;
  }
  if (v2 == 1) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t AUSM::PropertyDescriptor::setWritable(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<AUSM::eBinauralCompatibilityMode>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::PropertyDescriptor::hasValueRange(AUSM::PropertyDescriptor *this)
{
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eBinauralCompatibilityMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::string *AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5394F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<AUSM::ExclusionZone::ePreset>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::Properties::addPropertyMapEntry<char [],(decltype(nullptr))0>()
{
}

void sub_1BB5397F0(_Unwind_Exception *a1)
{
  AUSM::CFURLPropertyCStringInterface::~CFURLPropertyCStringInterface(v1);
  _Unwind_Resume(a1);
}

void AUSM::CFURLPropertyCStringInterface::printValue(AUSM::CFURLPropertyCStringInterface *this@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((void *)this + 6));
  CFURLRef v3 = anURL;
  if (anURL)
  {
    CFStringRef v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)a2);
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "[empty]");
  }
}

void sub_1BB5398EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::URLRef::~URLRef(&a10);
  _Unwind_Resume(a1);
}

void AUSM::CFURLPropertyCStringInterface::createCF(AUSM::CFURLPropertyCStringInterface *this@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((void *)this + 6));
  CFURLRef v3 = anURL;
  if (anURL)
  {
    CFStringRef v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    CFTypeRef v5 = cf;
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v6 = cf;
      *a2 = v5;
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1BB5399CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFURLPropertyCStringInterface::setData(AUSM::CFURLPropertyCStringInterface *this, unsigned char *a2, unsigned int a3, char a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 2);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  CFTypeRef cf = 0;
  std::string::size_type v8 = a3;
  if (a3 <= 1)
  {
    if (!a2 || a3 != 1 || !*a2) {
      goto LABEL_44;
    }
  }
  else if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unsigned int v11 = operator new(v9 + 1);
    v44.__r_.__value_.__l.__size_ = v8;
    v44.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_15;
  }
  *((unsigned char *)&v44.__r_.__value_.__s + 23) = a3;
  unsigned int v11 = &v44;
LABEL_15:
  memcpy(v11, a2, v8);
  *((unsigned char *)v11 + v8) = 0;
  std::string::size_type v12 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  char v13 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v44.__r_.__value_.__l.__size_;
  std::string::size_type v15 = v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v16 = v44.__r_.__value_.__l.__size_;
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v17 = &v44;
  }
  else {
    id v17 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if (v16 >= 7)
  {
    AudioUnitPropertyID v18 = (std::string *)((char *)v17 + v16);
    unint64_t v19 = v17;
    do
    {
      BOOL v20 = (std::string *)memchr(v19, 102, v16 - 6);
      if (!v20) {
        break;
      }
      if (LODWORD(v20->__r_.__value_.__l.__data_) == 1701603686
        && *(_DWORD *)((char *)v20->__r_.__value_.__r.__words + 3) == 791624293)
      {
        if (v20 != v18 && v20 == v17)
        {
          std::string::erase(&v44, 0, 7uLL);
          std::string::size_type v12 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
          std::string::size_type v15 = v44.__r_.__value_.__r.__words[0];
          char v13 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        }
        break;
      }
      unint64_t v19 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
      int64_t v16 = (char *)v18 - (char *)v19;
    }
    while ((char *)v18 - (char *)v19 >= 7);
  }
  if (v13 >= 0) {
    uint64_t v22 = &v44;
  }
  else {
    uint64_t v22 = (std::string *)v15;
  }
  if (v13 >= 0) {
    std::string::size_type v23 = v12;
  }
  else {
    std::string::size_type v23 = size;
  }
  uint64_t v24 = (const void *)MEMORY[0x1C185B8C0](0, v22, v23, 0, 0);
  if (!v24)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFTypeRef v25 = cf;
  CFTypeRef cf = v24;
  if (v25) {
    CFRelease(v25);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
LABEL_44:
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&relativeURL, *((void *)this + 6));
  if (!cf)
  {
    if (!relativeURL) {
      return 2;
    }
    goto LABEL_65;
  }
  if (!CFURLGetFileSystemRepresentation((CFURLRef)cf, 1u, (UInt8 *)&v44, 1024)
    || stat((const char *)&v44, &v43)
    || (v43.st_mode & 0xF000) == 0x4000)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v30 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = (const __CFURL **)applesauce::CF::URLRef::operator->(&cf);
      applesauce::CF::URLRef_proxy::get_filesystem_path((applesauce::CF::URLRef_proxy *)&v40, *v34);
      uint64_t v35 = (const __CFString **)applesauce::CF::StringRef::operator->(&v40);
      applesauce::CF::convert_to<std::string,0>(*v35, (uint64_t)&v44);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v44;
      }
      else {
        uint64_t v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      v43.st_dev = 136315394;
      *(void *)&v43.st_mode = "setData";
      WORD2(v43.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v43.st_ino + 6) = (__darwin_ino64_t)v36;
      _os_log_error_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "CFURLPropertyCStringInterface::%s: file %s not found", (uint8_t *)&v43, 0x16u);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      applesauce::CF::StringRef::~StringRef(&v40);
    }
    uint64_t v7 = 7;
    goto LABEL_69;
  }
  if (!relativeURL) {
    goto LABEL_75;
  }
  if (!cf)
  {
LABEL_65:
    CFTypeRef v31 = 0;
    uint64_t v32 = *((void *)this + 6);
LABEL_66:
    uint64_t v39 = v31;
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::store(v32, &v39);
    if (v31) {
      CFRelease(v31);
    }
    uint64_t v7 = 1;
    goto LABEL_69;
  }
  CFURLRef v26 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v44, v26);
  if (!cf)
  {
    uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
  }
  CFURLRef v27 = CFURLCopyAbsoluteURL((CFURLRef)cf);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v43, v27);
  uint64_t v28 = *(const void **)&v43.st_dev;
  BOOL v29 = (v44.__r_.__value_.__r.__words[0] | *(void *)&v43.st_dev) == 0;
  if (v44.__r_.__value_.__r.__words[0] && *(void *)&v43.st_dev)
  {
    BOOL v29 = CFEqual(v44.__r_.__value_.__l.__data_, *(CFTypeRef *)&v43.st_dev) != 0;
    uint64_t v28 = *(const void **)&v43.st_dev;
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v44.__r_.__value_.__r.__words[0]) {
    CFRelease(v44.__r_.__value_.__l.__data_);
  }
  if (!v29)
  {
LABEL_75:
    CFTypeRef v31 = cf;
    uint64_t v32 = *((void *)this + 6);
    if (cf) {
      CFRetain(cf);
    }
    goto LABEL_66;
  }
  uint64_t v7 = 2;
LABEL_69:
  if (relativeURL) {
    CFRelease(relativeURL);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void sub_1BB539E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **applesauce::CF::URLRef::operator=(const void **a1)
{
  unsigned int v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *applesauce::CF::URLRef::operator->(void *result)
{
  if (!*result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1BB53A07C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::URLRef_proxy::get_filesystem_path(applesauce::CF::URLRef_proxy *this, const __CFURL *a2)
{
  CFStringRef v3 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);

  return applesauce::CF::StringRef::StringRef(this, v3);
}

uint64_t AUSM::CFURLPropertyCStringInterface::getData(AUSM::CFURLPropertyCStringInterface *this, char *a2)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *((void *)this + 6));
  CFURLRef v3 = anURL;
  if (anURL)
  {
    CFStringRef v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)__src);
    if (v10 < 0)
    {
      CFTypeRef v5 = *(char **)__src;
      strcpy(a2, *(const char **)__src);
      operator delete(v5);
    }
    else
    {
      strcpy(a2, __src);
    }
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1BB53A1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14)
{
  __cxa_free_exception(v14);
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::URLRef::~URLRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFURLPropertyCStringInterface::getDataSizeBytes(AUSM::CFURLPropertyCStringInterface *this)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v10, *((void *)this + 6));
  CFURLRef v1 = v10;
  if (!v10) {
    return 1;
  }
  CFStringRef v2 = CFURLCopyFileSystemPath(v10, kCFURLPOSIXPathStyle);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v2);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&__p);
  if ((char)v9 < 0)
  {
    int v3 = v8;
    operator delete(__p);
  }
  else
  {
    int v3 = v9;
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v1);
  return (v3 + 1);
}

void sub_1BB53A2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  applesauce::CF::URLRef::~URLRef((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

void AUSM::CFURLPropertyCStringInterface::~CFURLPropertyCStringInterface(void **this)
{
  *this = &unk_1F14BE0C0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x1C185D370);
}

{
  *this = &unk_1F14BE0C0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void AUSM::CFProperty<__CFURL const*>::printValue(uint64_t a1@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&anURL, *(void *)(a1 + 48));
  CFURLRef v3 = anURL;
  if (anURL)
  {
    CFStringRef v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    if (!cf)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)a2);
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "[empty]");
  }
}

void sub_1BB53A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::URLRef::~URLRef(&a10);
  _Unwind_Resume(a1);
}

void AUSM::CFProperty<__CFURL const*>::createCF(uint64_t a1@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t AUSM::CFProperty<__CFURL const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  int v8 = *a2;
  if (v8 && (CFRetain(v8), CFTypeID v9 = CFGetTypeID(v8), v9 != CFURLGetTypeID()))
  {
    CFURLRef url = 0;
    CFRelease(v8);
  }
  else
  {
    CFURLRef url = (CFURLRef)v8;
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&relativeURL, *(void *)(a1 + 48));
  if (!url)
  {
    if (!relativeURL) {
      return 2;
    }
    goto LABEL_33;
  }
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)
    || stat((const char *)buffer, &v26)
    || (v26.st_mode & 0xF000) == 0x4000)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v14 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      AudioUnitPropertyID v18 = (const __CFURL **)applesauce::CF::URLRef::operator->(&url);
      applesauce::CF::URLRef_proxy::get_filesystem_path((applesauce::CF::URLRef_proxy *)&v23, *v18);
      unint64_t v19 = (const __CFString **)applesauce::CF::StringRef::operator->(&v23);
      applesauce::CF::convert_to<std::string,0>(*v19, (uint64_t)buffer);
      if (v28 >= 0) {
        BOOL v20 = buffer;
      }
      else {
        BOOL v20 = *(UInt8 **)buffer;
      }
      v26.st_dev = 136315394;
      *(void *)&v26.st_mode = "setData";
      WORD2(v26.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v26.st_ino + 6) = (__darwin_ino64_t)v20;
      _os_log_error_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "CFProperty::%s: file %s not found", (uint8_t *)&v26, 0x16u);
      if (v28 < 0) {
        operator delete(*(void **)buffer);
      }
      applesauce::CF::StringRef::~StringRef(&v23);
    }
    uint64_t v7 = 7;
    goto LABEL_37;
  }
  if (!relativeURL) {
    goto LABEL_43;
  }
  if (!url)
  {
LABEL_33:
    CFURLRef v15 = 0;
    uint64_t v16 = *(void *)(a1 + 48);
LABEL_34:
    CFURLRef v22 = v15;
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::store(v16, (const void **)&v22);
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v7 = 1;
    goto LABEL_37;
  }
  CFURLRef v10 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)buffer, v10);
  if (!url)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFURLRef v11 = CFURLCopyAbsoluteURL(url);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v26, v11);
  std::string::size_type v12 = *(const void **)&v26.st_dev;
  BOOL v13 = (*(void *)buffer | *(void *)&v26.st_dev) == 0;
  if (*(void *)buffer && *(void *)&v26.st_dev)
  {
    BOOL v13 = CFEqual(*(CFTypeRef *)buffer, *(CFTypeRef *)&v26.st_dev) != 0;
    std::string::size_type v12 = *(const void **)&v26.st_dev;
  }
  if (v12) {
    CFRelease(v12);
  }
  if (*(void *)buffer) {
    CFRelease(*(CFTypeRef *)buffer);
  }
  if (!v13)
  {
LABEL_43:
    CFURLRef v15 = url;
    uint64_t v16 = *(void *)(a1 + 48);
    if (url) {
      CFRetain(url);
    }
    goto LABEL_34;
  }
  uint64_t v7 = 2;
LABEL_37:
  if (relativeURL) {
    CFRelease(relativeURL);
  }
  if (url) {
    CFRelease(url);
  }
  return v7;
}

void sub_1BB53A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::CFProperty<__CFURL const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1BB53A9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFURL const*>::getDataSizeBytes()
{
  return 8;
}

void AUSM::CFProperty<__CFURL const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::CFProperty<__CFURL const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,std::unique_ptr<AUSM::AtomicProperty<BOOL>>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  int v4 = (uint64_t **)result;
  CFTypeRef v6 = (uint64_t **)(result + 1);
  CFTypeRef v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        CFTypeRef v5 = *v7;
        CFTypeRef v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      CFTypeRef v5 = v7[1];
      if (!v5)
      {
        CFTypeRef v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    CFTypeID v9 = operator new(0x30uLL);
    v9[8] = *(_DWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *((void *)v9 + 5) = v10;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void *AUSM::AtomicProperty<BOOL>::printValue@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned __int8 v2 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  if (v2) {
    CFTypeRef v3 = "true";
  }
  else {
    CFTypeRef v3 = "false";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void AUSM::AtomicProperty<BOOL>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  int valuePtr = v3 & 1;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB53ABF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicProperty<BOOL>::setData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  BOOL v8 = *a2 != 0;
  unsigned __int8 v9 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  if (v8 == (v9 & 1)) {
    return 2;
  }
  atomic_store(*a2 != 0, *(unsigned __int8 **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<BOOL>::getData(uint64_t a1, int *a2)
{
  unsigned __int8 v2 = atomic_load(*(unsigned __int8 **)(a1 + 48));
  *a2 = v2 & 1;
  return 0;
}

uint64_t AUSM::AtomicProperty<BOOL>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicProperty<BOOL>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<BOOL>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::printValue(std::string *a1@<X8>)
{
  _X20 = 0;
  _X21 = 0;
  __asm { CASPAL          X20, X21, X20, X21, [X8] }
  std::to_string(&v24, *(float *)&_X20);
  unsigned __int8 v9 = std::string::insert(&v24, 0, "ReferenceDistance = ", 0x14uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  CFURLRef v11 = std::string::append(&v25, ", MaxDistance = ", 0x10uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v23, *((float *)&_X20 + 1));
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v13 = &v23;
  }
  else {
    BOOL v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  CFURLRef v15 = std::string::append(&v26, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  id v17 = std::string::append(&v27, ", MaxAttenuation = ", 0x13uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, 0.0);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v19 = &v22;
  }
  else {
    unint64_t v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v22.__r_.__value_.__l.__size_;
  }
  BOOL v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
  *a1 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1BB53AFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::createCF(void *a1@<X8>)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(void *)bytes = _X2;
  int v14 = 0;
  CFDataRef v9 = CFDataCreate(0, bytes, 12);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v9);
  CFTypeRef v10 = cf;
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v11 = cf;
    *a1 = v10;
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  _X0 = 0;
  _X1 = 0;
  float v10 = a2[1];
  __asm { CASPAL          X0, X1, X0, X1, [X8] }
  _ZF = *a2 == *(float *)&_X0 && v10 == *((float *)&_X0 + 1);
  if (_ZF && a2[2] == 0.0) {
    return 2;
  }
  id v17 = *(uint64_t **)(a1 + 48);
  _X0 = *(unsigned int *)a2 | ((unint64_t)LODWORD(v10) << 32);
  uint64_t v19 = *v17;
  do
  {
    _X5 = v17[1];
    __asm { CASPAL          X4, X5, X0, X1, [X8] }
    _ZF = _X4 == v19;
    uint64_t v19 = _X4;
  }
  while (!_ZF);
  return 1;
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::getData(uint64_t a1, uint64_t a2)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(void *)a2 = _X2;
  *(_DWORD *)(a2 + 8) = 0;
  return 0;
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::getDataSizeBytes()
{
  return 12;
}

void AUSM::AtomicProperty<AUSM::DistanceParameters>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<AUSM::DistanceParameters>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::string *AUSM::AtomicProperty<unsigned int>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<unsigned int>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB53B370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicProperty<unsigned int>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<unsigned int>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<unsigned int>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicProperty<unsigned int>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<unsigned int>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 60) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<unsigned int>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUsubMAEC::dualEC::~dualEC(AUsubMAEC::dualEC *this)
{
  unsigned int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    free(v2);
    *((void *)this + 3) = 0;
  }
  unsigned int v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    free(v3);
    *((void *)this + 4) = 0;
  }
  int v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    free(v4);
    *((void *)this + 5) = 0;
  }
  CFNumberRef v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    free(v5);
    *((void *)this + 6) = 0;
  }
  CFTypeRef v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    free(v6);
    *((void *)this + 7) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    free(v7);
    *((void *)this + 8) = 0;
  }
  unsigned int v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    free(v8);
    *((void *)this + 9) = 0;
  }
}

void AUsubMAEC::dualEC::initDualEC(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  *(_DWORD *)(a1 + 180) = a2[12];
  *(_DWORD *)(a1 + 184) = a2[2];
  *(_DWORD *)(a1 + 192) = a2[6];
  LODWORD(a4) = a2[7];
  *(_DWORD *)(a1 + 196) = LODWORD(a4);
  *(_DWORD *)(a1 + 200) = a2[13];
  *(_DWORD *)(a1 + 204) = a2[14];
  *(_DWORD *)(a1 + 188) = a2[15];
  *(_OWORD *)(a1 + 112) = xmmword_1BB87B550;
  *(_DWORD *)(a1 + 128) = 1138819072;
  *(_DWORD *)(a1 + 152) = 1101004800;
  *(void *)(a1 + 172) = 1;
  *(void *)(a1 + 80) = 0;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 92) = v5;
  if (*(float *)&a4 <= 0.0)
  {
    uint32x2_t v16 = (uint32x2_t)0x100000001;
    unsigned int v8 = 1;
    unsigned int v7 = 5;
    uint32x2_t v20 = (uint32x2_t)0x100000001;
    goto LABEL_13;
  }
  float v6 = floorf(500.0 / *(float *)&a4);
  if (v6 <= 1.0) {
    float v6 = 1.0;
  }
  unsigned int v7 = v6;
  *(_DWORD *)(a1 + 88) = v6;
  unsigned int v8 = a2[13];
  if (v8 > v6)
  {
    unsigned int v7 = v8 + 1;
    *(_DWORD *)(a1 + 88) = v8 + 1;
  }
  float32x2_t v9 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
  float32x2_t v10 = vrndm_f32(vdiv_f32((float32x2_t)0x42C8000041A00000, v9));
  __asm { FMOV            V4.2S, #1.0 }
  uint32x2_t v16 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32(_D4, v10), (int8x8_t)_D4, (int8x8_t)v10));
  float32x2_t v17 = vdiv_f32((float32x2_t)0x41A0000043480000, v9);
  float v18 = floorf(450.0 / *(float *)&a4);
  if (v18 <= 1.0) {
    float v18 = 1.0;
  }
  if (v8 <= v18) {
    unsigned int v8 = v18;
  }
  float32x2_t v19 = vrndm_f32(v17);
  uint32x2_t v20 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcge_f32(_D4, v19), (int8x8_t)_D4, (int8x8_t)v19));
  if (v7 < 5)
  {
    unsigned int v7 = 5;
LABEL_13:
    *(_DWORD *)(a1 + 88) = v7;
    goto LABEL_14;
  }
  if (v7 >= 0x51)
  {
    unsigned int v7 = 80;
    goto LABEL_13;
  }
LABEL_14:
  unsigned int v21 = v20.i32[0];
  if (v20.i32[0] >= v7) {
    unsigned int v21 = v7;
  }
  unsigned int v22 = v20.u32[1];
  if (v20.i32[1] >= v7) {
    unsigned int v22 = v7;
  }
  *(_DWORD *)(a1 + 108) = v22;
  *(uint32x2_t *)(a1 + 92) = vmin_u32(v16, (uint32x2_t)vdup_n_s32(v7));
  if (v8 >= v7 + 1) {
    unsigned int v8 = v7 + 1;
  }
  *(_DWORD *)(a1 + 100) = v21;
  *(_DWORD *)(a1 + 104) = v8;
  if (v8 > v7) {
    unsigned int v7 = v8;
  }
  size_t v23 = 4 * v7;
  std::string v24 = malloc_type_malloc(v23, 0x2C8E6D5CuLL);
  if (!v24) {
    goto LABEL_41;
  }
  std::string v25 = v24;
  bzero(v24, v23);
  *(void *)(a1 + 48) = v25;
  memset_pattern16(v25, &unk_1BB87C2B0, v23);
  size_t v26 = (4 * *(_DWORD *)(a1 + 88));
  std::string v27 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  std::string v28 = v27;
  if (v26)
  {
    if (!v27) {
      goto LABEL_41;
    }
  }
  bzero(v27, v26);
  *(void *)(a1 + 56) = v28;
  uint64_t v29 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  uint64_t v30 = v29;
  if (v26)
  {
    if (!v29) {
      goto LABEL_41;
    }
  }
  bzero(v29, v26);
  *(void *)(a1 + 64) = v30;
  CFTypeRef v31 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  uint64_t v32 = v31;
  if (v26)
  {
    if (!v31) {
      goto LABEL_41;
    }
  }
  bzero(v31, v26);
  *(void *)(a1 + 72) = v32;
  int v33 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  uint64_t v34 = v33;
  if (v26)
  {
    if (!v33) {
      goto LABEL_41;
    }
  }
  bzero(v33, v26);
  *(void *)(a1 + 24) = v34;
  uint64_t v35 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  uint64_t v36 = v35;
  if (v26)
  {
    if (!v35) {
      goto LABEL_41;
    }
  }
  bzero(v35, v26);
  *(void *)(a1 + 32) = v36;
  float v37 = malloc_type_malloc(v26, 0x2C8E6D5CuLL);
  uint64_t v38 = v37;
  if (v26)
  {
    if (!v37)
    {
LABEL_41:
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      std::string v44 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v37, v26);
  *(void *)(a1 + 40) = v38;
  uint64_t v39 = *(unsigned int *)(a1 + 88);
  if (v39)
  {
    uint64_t v40 = *(_DWORD **)(a1 + 56);
    BOOL v41 = *(_DWORD **)(a1 + 64);
    unint64_t v42 = *(_DWORD **)(a1 + 72);
    do
    {
      *v40++ = 1;
      *v41++ = 1;
      *v42++ = 1;
      --v39;
    }
    while (v39);
  }
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_1BB87A440;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(float *)(a1 + 132) = __exp10f(-3.5);
  *(void *)(a1 + 136) = 0xBF0000003E4CCCCDLL;
  *(_DWORD *)(a1 + 144) = -1061158912;
  *(float *)(a1 + 148) = __exp10f(-9.0);
}

void AUsubMAEC::dualEC::dualECProcess(AUsubMAEC::dualEC *this, AUsubMAEC::myFilter *a2, AUsubMAEC::myFilter *a3, AUsubMAEC::Kalman *a4, AUsubMAEC::Kalman *a5, AUsubMAEC::learnRate *a6, AUsubMAEC::learnRate *a7, void **a8, const void **a9, BOOL a10)
{
  float __C = 0.0;
  *((_DWORD *)this + 44) = 0;
  *((_DWORD *)this + 39) = 1;
  *(void *)this = a8;
  *((_DWORD *)this + 4) = 0;
  if (*((_DWORD *)this + 43) == 1)
  {
    *(void *)((char *)this + 172) = 0x100000000;
    **((_DWORD **)this + 7) = 1;
    *((_DWORD *)this + 4) = 2;
    float v16 = 0.0;
    int v17 = 0;
    float v18 = 0.0;
    float v19 = 0.0;
    goto LABEL_65;
  }
  float v90 = *((float *)a6 + 23);
  float v21 = *((float *)a7 + 22);
  float v22 = *((float *)a7 + 23);
  int v94 = *((_DWORD *)a7 + 21);
  float v89 = *((float *)a6 + 22);
  float v91 = *((float *)a6 + 20);
  float v23 = *((float *)this + 33);
  float v92 = log10f(v23 + (float)((float)(v89 + 1.0e-13) / (float)(v91 + 0.000000001))) * 10.0;
  float v93 = v21;
  float v24 = log10f(v23 + (float)((float)(v21 + 1.0e-13) / (float)(v91 + 0.000000001))) * 10.0;
  float v25 = log10f(v23 + (float)((float)(v89 + 1.0e-13) / (float)(v90 + 0.000000001))) * 10.0;
  float v16 = v22;
  double v26 = log10f(v23 + (float)((float)(v21 + 1.0e-13) / (float)(v22 + 0.000000001))) * 10.0;
  if (v26 <= v25)
  {
    float v27 = v26;
    float v28 = v27;
  }
  else
  {
    float v28 = v25;
  }
  int v29 = *((_DWORD *)this + 22);
  unsigned int v30 = v29 - 1;
  if (v29 == 1)
  {
    uint64_t v36 = (float *)*((void *)this + 4);
    BOOL v41 = (float *)*((void *)this + 5);
    uint64_t v35 = (float *)*((void *)this + 3);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = *((void *)this + 8);
    uint64_t v32 = *((void *)this + 9);
    uint64_t v34 = v32 + 4 * v30;
    uint64_t v35 = (float *)*((void *)this + 3);
    uint64_t v36 = (float *)*((void *)this + 4);
    uint64_t v37 = *((void *)this + 6);
    uint64_t v38 = *((void *)this + 7);
    uint64_t v39 = v33 + 4 * v30;
    uint64_t v40 = v38 + 4 * v30;
    BOOL v41 = (float *)*((void *)this + 5);
    int v42 = v29 - 2;
    unsigned int v43 = v30 - 1;
    uint64_t v44 = v37 + 4 * v30;
    uint64_t v45 = &v41[v30];
    vDSP_Length v46 = &v36[v30];
    vDSP_Length v47 = &v35[v30];
    do
    {
      v47[v31] = v35[(v42 + v31)];
      v46[v31] = v36[(v42 + v31)];
      v45[v31] = v41[(v42 + v31)];
      *(_DWORD *)(v44 + 4 * v31) = *(_DWORD *)(v37 + 4 * (v42 + v31));
      *(_DWORD *)(v40 + 4 * v31) = *(_DWORD *)(v38 + 4 * (v42 + v31));
      *(_DWORD *)(v39 + 4 * v31) = *(_DWORD *)(v33 + 4 * (v42 + v31));
      *(_DWORD *)(v34 + 4 * v31) = *(_DWORD *)(v32 + 4 * (v42 + v31));
    }
    while (v43 + v31--);
  }
  int v17 = v94;
  *uint64_t v36 = v92;
  *BOOL v41 = v28;
  float v49 = v92 - v24;
  *uint64_t v35 = v92 - v24;
  *((void *)this + 20) = 0;
  float v19 = v90 / (float)*((int *)this + 46);
  if ((float)((float)(v92 - v24) + *((float *)this + 34)) >= 0.0 && v19 >= *((float *)this + 37))
  {
    vDSP_Length v50 = (_DWORD *)*((void *)this + 6);
    *vDSP_Length v50 = 0;
  }
  else
  {
    vDSP_Length v50 = (_DWORD *)*((void *)this + 6);
    *vDSP_Length v50 = 1;
  }
  if (v91 * 4.0 < v89 && (float)(v19 * 10.0) >= *((float *)this + 37))
  {
    *vDSP_Length v50 = 1;
    *((void *)this + 20) = 0x100000001;
    bzero(v50, 4 * *((unsigned int *)this + 26));
    float v49 = **((float **)this + 3);
  }
  BOOL v51 = v49 < *((float *)this + 35) && **((float **)this + 4) < -10.0;
  uint32_t v52 = (_DWORD *)*((void *)this + 8);
  **((_DWORD **)this + 7) = v51;
  _DWORD *v52 = v92 > v24;
  **((_DWORD **)this + 9) = **((float **)this + 5) < *((float *)this + 36);
  int v53 = *((_DWORD *)this + 26);
  float v18 = v93;
  if (v53 > *((_DWORD *)this + 22)) {
    goto LABEL_36;
  }
  if (v53 < 1) {
    goto LABEL_28;
  }
  int v54 = 0;
  uint64_t v55 = (int *)*((void *)this + 6);
  uint64_t v56 = *((unsigned int *)this + 26);
  do
  {
    int v57 = *v55++;
    v54 += v57;
    --v56;
  }
  while (v56);
  if (v54)
  {
    unsigned int v58 = *((_DWORD *)this + 21);
  }
  else
  {
LABEL_28:
    unsigned int v58 = *((_DWORD *)this + 21);
    if (v58 > 1) {
      goto LABEL_33;
    }
  }
  if (v58 < v53)
  {
    int v59 = *((_DWORD *)this + 40);
    if (v59 != 1) {
      goto LABEL_37;
    }
    if (a10) {
      goto LABEL_32;
    }
LABEL_34:
    int v60 = a4;
    AUsubMAEC::dualEC::copyLmsFilter((int *)this, a2, a3);
    goto LABEL_35;
  }
LABEL_33:
  *((void *)this + 20) = 0x100000001;
  if (!a10) {
    goto LABEL_34;
  }
LABEL_32:
  int v60 = a4;
  AUsubMAEC::dualEC::copyKalmanFilter(this, (uint64_t)a4, a5);
LABEL_35:
  *(void *)this = a9;
  size_t v61 = 4 * *((_DWORD *)this + 48);
  memcpy(a8[6], a9[6], v61);
  memcpy(a8[7], a9[7], v61);
  *((void *)a6 + 14) = *((void *)a7 + 14);
  memcpy(*((void **)a6 + 1), *((const void **)a7 + 1), 4 * *((int *)this + 48));
  memcpy(*((void **)a6 + 2), *((const void **)a7 + 2), 4 * *((int *)this + 48));
  *((_DWORD *)a6 + 21) = v94;
  *((float *)a6 + 22) = v93;
  *((float *)a6 + 23) = v22;
  **((_DWORD **)this + 6) = 1;
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 39) = 1;
  *((_DWORD *)this + 4) = 1;
  a4 = v60;
LABEL_36:
  int v59 = *((_DWORD *)this + 40);
LABEL_37:
  if (v59) {
    goto LABEL_65;
  }
  int v62 = (int *)*((void *)this + 7);
  uint64_t v63 = *((unsigned int *)this + 24);
  if ((int)v63 < 1)
  {
    int v64 = 0;
  }
  else
  {
    int v64 = 0;
    uint64_t v65 = (int *)*((void *)this + 7);
    do
    {
      int v66 = *v65++;
      v64 += v66;
      --v63;
    }
    while (v63);
  }
  uint64_t v67 = *((unsigned int *)this + 25);
  int16x8_t v88 = a2;
  int v68 = a5;
  unint64_t v69 = a4;
  int v70 = 0;
  if ((int)v67 >= 1)
  {
    do
    {
      int v71 = *v62++;
      v70 += v71;
      --v67;
    }
    while (v67);
  }
  uint64_t v72 = *((unsigned int *)this + 27);
  if ((int)v72 < 1)
  {
    int v73 = 0;
  }
  else
  {
    int v73 = 0;
    int v74 = (int *)*((void *)this + 9);
    do
    {
      int v75 = *v74++;
      v73 += v75;
      --v72;
    }
    while (v72);
  }
  if (*((int *)this + 42) > 2)
  {
    int v76 = 0;
  }
  else
  {
    vDSP_maxv(*((const float **)this + 3), 1, &__C, *((unsigned int *)this + 23));
    int v76 = __C < -10.0;
  }
  int v77 = (float *)*((void *)this + 4);
  float v78 = v77[1];
  if (*v77 >= v78 && ((v78 >= v77[2]) & ~v76) != 0)
  {
    a4 = v69;
  }
  else
  {
    if (v64 == *((_DWORD *)this + 24) && v73 == *((_DWORD *)this + 27))
    {
      if ((float)((float)v70 * 1.5) > (float)*((unsigned int *)this + 25)) {
        LOBYTE(v76) = 1;
      }
      a4 = v69;
      if ((v76 & 1) == 0) {
        goto LABEL_64;
      }
LABEL_62:
      *((_DWORD *)this + 44) = 1;
      a5 = v68;
      a2 = v88;
      goto LABEL_66;
    }
    a4 = v69;
    if (v76) {
      goto LABEL_62;
    }
  }
LABEL_64:
  a5 = v68;
  a2 = v88;
LABEL_65:
  int v79 = *((_DWORD *)this + 44);
  if (v79 != 1)
  {
    ++*((_DWORD *)this + 20);
    if (v79) {
      goto LABEL_83;
    }
    goto LABEL_74;
  }
LABEL_66:
  *((_DWORD *)this + 20) = 0;
  if (a10) {
    AUsubMAEC::dualEC::copyKalmanFilter(this, (uint64_t)a5, a4);
  }
  else {
    AUsubMAEC::dualEC::copyLmsFilter((int *)this, a3, a2);
  }
  *((void *)a7 + 14) = *((void *)a6 + 14);
  memcpy(*((void **)a7 + 1), *((const void **)a6 + 1), 4 * *((int *)this + 48));
  memcpy(*((void **)a7 + 2), *((const void **)a6 + 2), 4 * *((int *)this + 48));
  int v80 = (void *)*((void *)this + 7);
  **((_DWORD **)this + 6) = 0;
  bzero(v80, 4 * *((unsigned int *)this + 25));
  int v81 = (_DWORD *)*((void *)this + 9);
  **((_DWORD **)this + 8) = 0;
  _DWORD *v81 = 0;
  int v82 = *((_DWORD *)this + 42);
  if (v82 <= 4) {
    *((_DWORD *)this + 42) = v82 + 1;
  }
  *((_DWORD *)this + 4) = 2;
  if (!*((_DWORD *)this + 44))
  {
LABEL_74:
    int v83 = *((_DWORD *)this + 23);
    if (v83 < 1)
    {
      int v84 = 0;
    }
    else
    {
      int v84 = 0;
      float v85 = (int *)*((void *)this + 8);
      uint64_t v86 = *((unsigned int *)this + 23);
      do
      {
        int v87 = *v85++;
        v84 += v87;
        --v86;
      }
      while (v86);
    }
    if (v84 == v83)
    {
      *(void *)this = a9;
      *((float *)a6 + 22) = v18;
      *((float *)a6 + 23) = v16;
      *((_DWORD *)a6 + 21) = v17;
      *((_DWORD *)this + 4) = 3;
      if (v19 >= *((float *)this + 37)) {
        ++*((_DWORD *)this + 21);
      }
    }
    else
    {
      *((_DWORD *)this + 21) = 0;
    }
  }
LABEL_83:
  *((void *)this + 1) = a6;
}

int *AUsubMAEC::dualEC::copyLmsFilter(int *result, void *a2, void *a3)
{
  if (result[45] >= 1)
  {
    long long v5 = result;
    uint64_t v6 = 0;
    int v7 = result[48];
    size_t v8 = 4 * result[50] * v7;
    size_t v9 = 4 * v7 * result[51];
    do
    {
      memcpy(*(void **)(*a2 + 8 * v6), *(const void **)(*a3 + 8 * v6), v8);
      double result = (int *)memcpy(*(void **)(a2[1] + 8 * v6), *(const void **)(a3[1] + 8 * v6), v8);
      if (v5[51])
      {
        memcpy(*(void **)(a2[2] + 8 * v6), *(const void **)(a3[2] + 8 * v6), v9);
        memcpy(*(void **)(a2[3] + 8 * v6), *(const void **)(a3[3] + 8 * v6), v9);
        memcpy(*(void **)(a2[4] + 8 * v6), *(const void **)(a3[4] + 8 * v6), v9);
        double result = (int *)memcpy(*(void **)(a2[5] + 8 * v6), *(const void **)(a3[5] + 8 * v6), v9);
      }
      ++v6;
    }
    while (v6 < v5[45]);
  }
  return result;
}

_DWORD *AUsubMAEC::dualEC::copyKalmanFilter(_DWORD *result, uint64_t a2, void *a3)
{
  if ((int)result[48] >= 1)
  {
    long long v5 = result;
    uint64_t v6 = 0;
    size_t v7 = 4 * result[47];
    size_t v8 = 4 * *(_DWORD *)(a2 + 140);
    do
    {
      memcpy(*(void **)(*(void *)(a2 + 16) + 8 * v6), *(const void **)(a3[2] + 8 * v6), v7);
      memcpy(*(void **)(*(void *)(a2 + 24) + 8 * v6), *(const void **)(a3[3] + 8 * v6), v7);
      memcpy(*(void **)(*(void *)(a2 + 32) + 8 * v6), *(const void **)(a3[4] + 8 * v6), v8);
      double result = memcpy(*(void **)(*(void *)(a2 + 40) + 8 * v6), *(const void **)(a3[5] + 8 * v6), v8);
      ++v6;
    }
    while (v6 < (int)v5[48]);
  }
  return result;
}

void AU::FTSpatialAC::GetMessenger(AU::FTSpatialAC *this)
{
  {
    if (v1)
    {
      uint64_t v2 = caulk::concurrent::messenger::shared_logging_priority(v1);
      MEMORY[0x1C185C230](&AU::FTSpatialAC::GetMessenger(void)::sMessenger, 0, v2);
    }
  }
}

void sub_1BB53C44C(_Unwind_Exception *a1)
{
}

uint64_t TTYSignalTracker::Gain(uint64_t this, float a2)
{
  float v2 = fabsf(a2);
  float v3 = *(float *)this;
  switch(*(_DWORD *)(this + 48))
  {
    case 0:
      float v4 = *(float *)(this + 8);
      if (v2 > v3)
      {
        *(void *)(this + 44) = 0x100000000;
        *(float *)(this + 20) = v4;
      }
      break;
    case 1:
      float v4 = *(float *)(this + 20) + (float)(*(float *)(this + 24) * (float)*(unsigned int *)(this + 44));
      float v5 = *(float *)(this + 12);
      if (v4 >= v5)
      {
        *(void *)(this + 44) = 0x200000000;
        goto LABEL_15;
      }
      break;
    case 2:
      float v4 = *(float *)(this + 12);
      if (v2 < *(float *)(this + 4))
      {
        uint64_t v6 = 0x300000000;
        goto LABEL_12;
      }
      break;
    case 3:
      float v4 = *(float *)(this + 16);
      if (*(_DWORD *)(this + 44) > *(_DWORD *)(this + 36))
      {
        *(void *)(this + 44) = 0x400000000;
        *(float *)(this + 20) = v4;
      }
      if (v2 > v3)
      {
        uint64_t v6 = 0x200000000;
LABEL_12:
        *(void *)(this + 44) = v6;
      }
      break;
    case 4:
      float v4 = *(float *)(this + 20) + (float)(*(float *)(this + 28) * (float)*(unsigned int *)(this + 44));
      float v5 = *(float *)(this + 8);
      if (v4 <= v5)
      {
        *(_DWORD *)(this + 44) = 0;
        *(_DWORD *)(this + 48) = 0;
LABEL_15:
        float v4 = v5;
      }
      break;
    default:
      float v4 = 0.0;
      break;
  }
  ++*(_DWORD *)(this + 44);
  *(float *)(this + 16) = v4;
  return this;
}

uint64_t MicIssueDetectorCore::getSuppressionGains(MicIssueDetectorCore *this)
{
  return (uint64_t)this + 88;
}

void *MicIssueDetectorCore::process(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, void **a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (v13 == *a2)
  {
    uint64_t v12 = a2[1];
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      float v18 = *(unsigned char **)(v12 + v16);
      float v19 = *(unsigned char **)(v12 + v16 + 8);
      if (v19 != v18)
      {
        memmove(*(void **)(*a3 + v16), v18, v19 - v18);
        uint64_t v12 = *a2;
        uint64_t v13 = a2[1];
      }
      ++v17;
      v16 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3) > v17);
  }
  double result = *(void **)a4;
  if (*(_DWORD *)(a1 + 68) == (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2)
  {
    float v21 = *(unsigned char **)(v12 + 24);
    float v22 = *(unsigned char **)(v12 + 32);
    if (v22 != v21) {
      double result = memmove(result, v21, v22 - v21);
    }
  }
  uint64_t v24 = *a5;
  uint64_t v23 = a5[1];
  if (v23 != *a5)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      float v27 = *(unsigned char **)(v24 + v25);
      float v28 = *(unsigned char **)(v24 + v25 + 8);
      if (v28 != v27)
      {
        double result = memmove(*(void **)(*a6 + v25), v27, v28 - v27);
        uint64_t v24 = *a5;
        uint64_t v23 = a5[1];
      }
      ++v26;
      v25 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3) > v26);
    int v29 = *(const void **)v24;
    uint64_t v30 = *(void *)(v24 + 8);
    size_t v31 = v30 - *(void *)v24;
    if (v30 != *(void *)v24)
    {
      uint64_t v32 = *a7;
      return memmove(v32, v29, v31);
    }
  }
  return result;
}

float MicIssueDetectorCore::getPartParameter(MicIssueDetectorCore *this, unsigned int a2, unsigned int a3)
{
  return *(float *)(*(void *)(*((void *)this + 4) + 24 * a3) + 4 * a2);
}

float MicIssueDetectorCore::getGlobalParameter(MicIssueDetectorCore *this, unsigned int a2)
{
  return *(float *)(*((void *)this + 1) + 4 * a2);
}

uint64_t MicIssueDetectorCore::setPartParameter(uint64_t this, unsigned int a2, unsigned int a3, float a4)
{
  *(float *)(*(void *)(*(void *)(this + 32) + 24 * a3) + 4 * a2) = a4;
  return this;
}

uint64_t MicIssueDetectorCore::setGlobalParameter(uint64_t this, unsigned int a2, float a3)
{
  *(float *)(*(void *)(this + 8) + 4 * a2) = a3;
  return this;
}

uint64_t MicIssueDetectorCore::initialize(uint64_t result, int a2, unsigned int a3, float a4)
{
  *(_DWORD *)(result + 76) = a2;
  *(_DWORD *)(result + 80) = (float)((float)((a2 - 1) * a2) * 0.5);
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = 2 * a3;
  *(_DWORD *)(result + 72) = a3 + 1;
  *(float *)(result + 56) = a4;
  *(float *)(result + 60) = a4 / (float)a3;
  return result;
}

void MicIssueDetectorCore::~MicIssueDetectorCore(MicIssueDetectorCore *this)
{
  MicIssueDetectorCore::~MicIssueDetectorCore(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1F14B34B0;
  float v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  float v4 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t non-virtual thunk to'AUSpatialMixerV2InputElement::PropertyObserverIsInitialized(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 400);
  return v1 & 1;
}

uint64_t non-virtual thunk to'AUSpatialMixerV2InputElement::PropertyChanged(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  return AUSpatialMixerV2InputElement::PropertyChanged((AUSpatialMixerV2InputElement *)((char *)this - 208), a2);
}

uint64_t AUSpatialMixerV2InputElement::PropertyChanged(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = 0;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if ((int)a2 > 3201)
  {
    if ((int)a2 <= 5683)
    {
      switch((int)a2)
      {
        case 3202:
        case 3203:
          unsigned int v22 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
          if (v22 == 2)
          {
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
            uint64_t v23 = *((void *)this + 34);
            if (v23)
            {
              AUSM::IRManager::getXTCIRAttributes((AUSM::IRManager *)buf, *((void *)this + 200));
              AUSM::OBHDConfig::setDirectSoundAttributes(v23, (const IR::IRDataAttributes *)buf);
              IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)buf);
            }
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
          }
          AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, v2);
          atomic_store(1u, (unsigned __int8 *)this + 1577);
          unsigned int v24 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
          if (v24 == 2)
          {
            unsigned int v25 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
            if (v25 == 3)
            {
              unsigned int v26 = atomic_load((unsigned int *)this + 186);
              if (v26 == 7)
              {
                unsigned int v27 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
                if (v27 == 2) {
                  goto LABEL_25;
                }
              }
            }
          }
          return 0;
        case 3204:
        case 3205:
        case 3269:
          atomic_store(1u, (unsigned __int8 *)this + 1577);
          goto LABEL_4;
        case 3206:
        case 3207:
        case 3208:
        case 3209:
        case 3215:
        case 3216:
        case 3223:
        case 3225:
        case 3226:
        case 3231:
        case 3232:
        case 3233:
        case 3234:
        case 3235:
        case 3237:
        case 3238:
        case 3239:
        case 3240:
        case 3241:
        case 3243:
        case 3244:
        case 3245:
        case 3246:
        case 3247:
        case 3248:
        case 3249:
        case 3250:
        case 3251:
        case 3252:
        case 3253:
        case 3254:
        case 3258:
        case 3259:
        case 3260:
        case 3261:
        case 3262:
        case 3263:
        case 3264:
        case 3265:
        case 3266:
        case 3268:
        case 3270:
        case 3271:
        case 3272:
        case 3273:
        case 3277:
        case 3280:
        case 3283:
        case 3284:
        case 3285:
          return v4;
        case 3210:
        case 3211:
        case 3212:
        case 3213:
        case 3214:
        case 3217:
        case 3218:
        case 3219:
        case 3228:
        case 3229:
        case 3274:
        case 3275:
        case 3279:
          goto LABEL_4;
        case 3220:
          uint64_t v4 = 0;
          unsigned int v33 = atomic_load((unsigned int *)this + 222);
          if (*((unsigned char *)this + 665) || v33 > 0xFFFEFFFF) {
            return v4;
          }
          std::vector<AudioChannelLayout>::vector(buf, 1uLL);
          uint64_t v34 = *(AudioChannelLayout **)buf;
          *(_DWORD *)(*(void *)buf + 4) = 0;
          v34->mNumberChannelDescriptions = 0;
          v34->mChannelLayoutTag = v33;
          AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(this, v34, 1);
LABEL_72:
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          return 0;
        case 3221:
        case 3222:
          AUSpatialMixerV2InputElement::UpdateParametricProcessor(this);
          return 0;
        case 3224:
          atomic_store(1u, (unsigned __int8 *)this + 1577);
          a2 = 3224;
          goto LABEL_4;
        case 3227:
          int v36 = atomic_load((unsigned int *)this + 219);
          memset(buf, 0, sizeof(buf));
          AUSM::ExclusionZone::getPreset(v36, (void **)buf);
          AUSpatialMixerV2InputElement::SetExclusionZones(this, (uint64_t)buf);
          atomic_store(1u, (unsigned __int8 *)this + 1577);
          goto LABEL_72;
        case 3230:
          unsigned __int8 v37 = atomic_load((unsigned __int8 *)this + 608);
          if ((v37 & 1) == 0)
          {
            unsigned __int8 v38 = atomic_load((unsigned __int8 *)this + 609);
            if ((v38 & 1) == 0) {
              return 0;
            }
          }
          int v39 = atomic_load((unsigned int *)this + 167);
          if (!ChannelLayoutTagIsSupportedHOA(v39)) {
            return 0;
          }
          if (*((_DWORD *)this + 27) != 4) {
            return 0;
          }
          unsigned int v40 = atomic_load((unsigned int *)this + 188);
          if (v40 != 3) {
            return 0;
          }
          unsigned int v41 = atomic_load((unsigned int *)this + 186);
          if (v41 != 7) {
            return 0;
          }
          *(void *)&__p[0].mChannelLayoutTag = (char *)this + 648;
          *(void *)&__p[0].mNumberChannelDescriptions = (char *)this + 632;
          std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 648, (uint64_t)this + 632);
          uint64_t v4 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
          if (v4)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            int v42 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              int v76 = (void *)((char *)this + 1608);
              if (*((char *)this + 1631) < 0) {
                int v76 = (void *)*v76;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = v76;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "PropertyChanged";
              *(_WORD *)&buf[22] = 1024;
              int v80 = v4;
              _os_log_error_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "[%s|%s] Reinitialization of channel processors failed: err = %d", buf, 0x1Cu);
            }
          }
          std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)__p);
          return v4;
        case 3236:
          unsigned __int8 v43 = atomic_load((unsigned __int8 *)this + 609);
          if ((v43 & 1) == 0)
          {
            unsigned __int8 v44 = atomic_load((unsigned __int8 *)this + 608);
            if ((v44 & 1) == 0) {
              return 0;
            }
          }
          unsigned __int8 v45 = atomic_load((unsigned __int8 *)this + 880);
          if ((v45 & 1) == 0)
          {
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 1216);
            if (*((void *)this + 147))
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              vDSP_Length v46 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
              {
                int v73 = (void *)((char *)this + 1608);
                if (*((char *)this + 1631) < 0) {
                  int v73 = (void *)*v73;
                }
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = v73;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "PropertyChanged";
                _os_log_debug_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEBUG, "[%s|%s] Deleting upmixer", buf, 0x16u);
              }
              std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 147, 0);
              std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 1232, *((void **)this + 154));
            }
            caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 1216);
            return 0;
          }
          v77[0] = (uint64_t)this + 648;
          v77[1] = (uint64_t)this + 1216;
          std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 648, (uint64_t)this + 1216);
          double v49 = *((double *)this + 10);
          vDSP_Length v50 = (ausdk::AUChannelLayout *)*((void *)this + 15);
          int v52 = ausdk::AUChannelLayout::NumberChannels(v50, v51);
          GetChannelLayoutChannelLabels(__p, (int *)v50);
          uint64_t v53 = *(void *)&__p[0].mChannelLayoutTag;
          if (*(void *)&__p[0].mNumberChannelDescriptions != *(void *)&__p[0].mChannelLayoutTag)
          {
            uint64_t v54 = 0;
            int v55 = 0;
            unint64_t v56 = (uint64_t)(*(void *)&__p[0].mNumberChannelDescriptions - *(void *)&__p[0].mChannelLayoutTag) >> 2;
            while (1)
            {
              int v57 = *(_DWORD *)(v53 + 4 * v54);
              if (v57 == 3) {
                break;
              }
              if (v57 == 2)
              {
                unsigned int v58 = (_DWORD *)(*((void *)this + 148) + 4);
                goto LABEL_107;
              }
              if (v57 == 1)
              {
                unsigned int v58 = (_DWORD *)*((void *)this + 148);
LABEL_107:
                *unsigned int v58 = v54;
                ++v55;
              }
              if (v56 <= ++v54) {
                goto LABEL_111;
              }
            }
            unsigned int v58 = (_DWORD *)(*((void *)this + 148) + 8);
            goto LABEL_107;
          }
          int v55 = 0;
LABEL_111:
          atomic_store(v55 == 3, (unsigned __int8 *)this + 1208);
          unsigned __int8 v59 = atomic_load((unsigned __int8 *)this + 1208);
          if (v59)
          {
            if (!*((void *)this + 147) || (unsigned __int8 v60 = atomic_load((unsigned __int8 *)this + 609), (v60 & 1) != 0))
            {
              size_t v61 = (AUSpatialMixerV2 *)*((void *)this + 27);
              unsigned int v62 = *((_DWORD *)v61 + 84);
              unsigned int v63 = AUSpatialMixerV2::MaxFramesForInputSampleRate(v61, v49);
              if (v63 >= v62) {
                unsigned int v64 = v62;
              }
              else {
                unsigned int v64 = v63;
              }
              HIDWORD(v65) = -286331153 * v64;
              LODWORD(v65) = -286331153 * v64;
              if ((v65 >> 5) >= 0x888889) {
                int v66 = 2048;
              }
              else {
                int v66 = 1920;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v67 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
              {
                int v74 = (void *)((char *)this + 1608);
                if (*((char *)this + 1631) < 0) {
                  int v74 = (void *)*v74;
                }
                *(_DWORD *)AudioTimeStamp buf = 136315650;
                *(void *)&uint8_t buf[4] = v74;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "PropertyChanged";
                *(_WORD *)&buf[22] = 1024;
                int v80 = v66;
                _os_log_debug_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_DEBUG, "[%s|%s] Creating upmixer with FFT size %u", buf, 0x1Cu);
              }
              std::make_unique[abi:ne180100]<ScottyLite,unsigned int &,unsigned int &,std::string &>();
            }
            if (*(unsigned char *)(*((void *)this + 147) + 756))
            {
              std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)this + 1232, (v52 - 2));
              uint64_t v68 = *((void *)this + 155);
              uint64_t v69 = *((void *)this + 154);
              if (v68 != v69)
              {
                unint64_t v70 = 0;
                unsigned int v71 = 1;
                do
                {
                  if (!*(void *)(v69 + 8 * v70)) {
                    operator new();
                  }
                  unint64_t v70 = v71++;
                }
                while (v70 < (v68 - v69) >> 3);
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v72 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                int v75 = (void *)((char *)this + 1608);
                if (*((char *)this + 1631) < 0) {
                  int v75 = (void *)*v75;
                }
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = v75;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "PropertyChanged";
                _os_log_error_impl(&dword_1BB0CE000, v72, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR, Upmixer did not initialize properly", buf, 0x16u);
              }
              std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 147, 0);
              std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 1232, *((void **)this + 154));
            }
          }
          if (*(void *)&__p[0].mChannelLayoutTag)
          {
            *(void *)&__p[0].mNumberChannelDescriptions = *(void *)&__p[0].mChannelLayoutTag;
            operator delete(*(void **)&__p[0].mChannelLayoutTag);
          }
          std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v77);
          break;
        case 3242:
          uint64_t v4 = 0;
          atomic_store(1u, (unsigned __int8 *)this + 1577);
          uint64_t v35 = (unsigned __int8 *)this + 1578;
          goto LABEL_95;
        case 3255:
          uint64_t v4 = 0;
          uint64_t v32 = (unsigned __int8 *)this + 1577;
          goto LABEL_96;
        case 3256:
        case 3257:
          unsigned __int8 v28 = atomic_load((unsigned __int8 *)this + 608);
          if (v28 & 1) != 0 || (unsigned __int8 v29 = atomic_load((unsigned __int8 *)this + 609), (v29))
          {
            int v30 = atomic_load((unsigned int *)this + 167);
            if (ChannelLayoutTagIsSupportedHOA(v30))
            {
              unsigned int v31 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
              if (v31 == 1) {
                goto LABEL_58;
              }
            }
          }
          return 0;
        case 3267:
          goto LABEL_41;
        case 3276:
        case 3281:
        case 3282:
          unsigned __int8 v13 = atomic_load((unsigned __int8 *)this + 608);
          if (v13 & 1) != 0 || (unsigned __int8 v14 = atomic_load((unsigned __int8 *)this + 609), (v14))
          {
            int v15 = atomic_load((unsigned int *)this + 167);
            if (ChannelLayoutTagIsSupportedHOA(v15)) {
              goto LABEL_58;
            }
          }
          return 0;
        case 3278:
          uint64_t v4 = 0;
          uint64_t v35 = (unsigned __int8 *)this + 1577;
LABEL_95:
          atomic_store(1u, v35);
          uint64_t v32 = (unsigned __int8 *)this + 624;
          goto LABEL_96;
        case 3286:
          uint64_t v47 = *((void *)this + 114);
          unsigned __int8 v48 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 2628));
          AUSM::MatrixMix::setHOAPowerSavingMode(v47, v48 & 1);
          return 0;
        default:
          if (a2 == 5003) {
            goto LABEL_4;
          }
          return v4;
      }
      return 0;
    }
    if ((a2 - 5688) < 2)
    {
      unsigned int v18 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
      if (v18 - 1 <= 1)
      {
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
        float v19 = (AUSM::OBHDConfig *)*((void *)this + 34);
        if (v19)
        {
          AUSM::IRManager::getEarlyReverbAttributes((uint64_t)buf, *((void *)this + 200), 1);
          AUSM::IRManager::getEarlyReverbAttributes((uint64_t)__p, *((void *)this + 200), 0);
          AUSM::IRManager::getEarlyReverbAttributes((uint64_t)v77, *((void *)this + 200), 2);
          AUSM::OBHDConfig::setEarlyReverbAttributes(v19, (const IR::IRDataAttributes *)buf, (const IR::IRDataAttributes *)__p, (const IR::IRDataAttributes *)v77);
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)v77);
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)__p);
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)buf);
        }
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
      }
      AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, v2);
      return 0;
    }
    if (a2 != 5684)
    {
      if (a2 != 5687) {
        return v4;
      }
      unsigned int v6 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
      if (v6 == 1)
      {
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
        uint64_t v7 = *((void *)this + 34);
        if (v7)
        {
          AUSM::IRManager::getHRIRAttributes((AUSM::IRManager *)buf, *((void *)this + 200));
          AUSM::OBHDConfig::setDirectSoundAttributes(v7, (const IR::IRDataAttributes *)buf);
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)buf);
        }
        caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
      }
      AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, 5687);
      AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
      unsigned int v8 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
      if (v8 == 1)
      {
        unsigned int v9 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
        if (v9 == 3)
        {
          unsigned int v10 = atomic_load((unsigned int *)this + 186);
          if (v10 == 7)
          {
            unsigned int v11 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
            if (v11 == 2)
            {
LABEL_25:
              __int16 v12 = atomic_load((unsigned int *)this + 167);
              AUSpatialMixerV2InputElement::InitializeParametricProcessor((uint64_t *)this, v12);
            }
          }
        }
      }
      return 0;
    }
LABEL_4:
    AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(this, a2);
    return 0;
  }
  if ((int)a2 <= 3009)
  {
    if ((int)a2 <= 3002)
    {
      if (a2 == 1005)
      {
LABEL_41:
        unsigned __int8 v20 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 85));
        if ((v20 & 1) == 0)
        {
          unsigned __int8 v21 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 86));
          if ((v21 & 1) == 0) {
            AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
          }
        }
      }
      else
      {
        if (a2 != 3000) {
          return v4;
        }
        AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(this);
      }
      return 0;
    }
    if (a2 != 3003)
    {
      if (a2 != 3005) {
        return v4;
      }
LABEL_33:
      unsigned __int8 v16 = atomic_load((unsigned __int8 *)this + 608);
      if (v16 & 1) != 0 || (unsigned __int8 v17 = atomic_load((unsigned __int8 *)this + 609), (v17)) {
LABEL_58:
      }
        AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
      return 0;
    }
    atomic_store(1u, (unsigned __int8 *)this + 1578);
    a2 = 3003;
    goto LABEL_4;
  }
  switch((int)a2)
  {
    case 3100:
      AUSpatialMixerV2InputElement::UpdateOutputType(this);
      return 0;
    case 3101:
    case 3102:
    case 3104:
    case 3105:
    case 3107:
      return v4;
    case 3103:
      AUSpatialMixerV2InputElement::UpdatePointSourceInHeadMode(this);
      return 0;
    case 3106:
      goto LABEL_33;
    case 3108:
    case 3109:
      goto LABEL_4;
    default:
      if (a2 == 3010 || a2 == 3013)
      {
        uint64_t v4 = 0;
        uint64_t v32 = (unsigned __int8 *)this + 1578;
LABEL_96:
        atomic_store(1u, v32);
      }
      break;
  }
  return v4;
}

void sub_1BB53D3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
}

uint64_t AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(AUSpatialMixerV2InputElement *this)
{
  uint64_t v2 = (char *)this + 632;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 632);
  uint64_t v4 = *((void *)this + 31);
  uint64_t v3 = *((void *)this + 32);
  while (v4 != v3)
  {
    float v5 = *(IR::FixedIntegerDelay **)(*(void *)v4 + 560);
    if (v5) {
      IR::FixedIntegerDelay::reset(v5);
    }
    v4 += 8;
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
}

uint64_t AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 608);
  if ((v1 & 1) == 0) {
    return 0;
  }
  unsigned int v3 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
  if (v3 == 1 || !v3 && *(_DWORD *)(*((void *)this + 162) + 108) > 1u) {
    return 0;
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  int v5 = atomic_load((unsigned int *)this + 186);
  if (AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v5)) {
    uint64_t v6 = *((unsigned int *)this + 27);
  }
  else {
    uint64_t v6 = 1;
  }
  int v7 = atomic_load((unsigned int *)this + 167);
  if (ChannelLayoutTagIsSupportedHOA(v7) || v6 != (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 3)
  {
    uint64_t v4 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
  }
  else
  {
    AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
    unsigned int v8 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
    if (v8 != *((AUSpatialMixerV2ChannelProcessor ***)this + 32))
    {
      unsigned int v9 = *v8;
      int v10 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
      AUSpatialMixerV2ChannelProcessor::initializeSpatializer(v9, v5, v10);
    }
    AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
    AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
    uint64_t v4 = 0;
  }
  AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(this);
  atomic_store(1u, (unsigned __int8 *)this + 1577);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
  return v4;
}

void sub_1BB53D81C(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::UpdateOutputType(AUSpatialMixerV2InputElement *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
  unsigned int v3 = atomic_load((unsigned int *)this + 186);
  if (v3 == 7)
  {
    unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
    if (v4 != 1 && (v4 || *(_DWORD *)(*((void *)this + 162) + 108) <= 1u))
    {
      unsigned int v5 = atomic_load((unsigned int *)(*((void *)this + 163) + 72));
      if (v5 != 5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 608);
        if ((v6 & 1) != 0 || (unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 609), (v7))
          && (int v8 = atomic_load((unsigned int *)this + 167), ChannelLayoutTagIsSupportedHOA(v8)))
        {
          if (AUSpatialMixerV2InputElement::InitializeChannelProcessors(this))
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v9 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              int v10 = (void *)((char *)this + 1608);
              if (*((char *)this + 1631) < 0) {
                int v10 = (void *)*v10;
              }
              int v13 = 136315650;
              unsigned __int8 v14 = v10;
              __int16 v15 = 2080;
              unsigned __int8 v16 = "UpdateOutputType";
              __int16 v17 = 1024;
              unsigned int v18 = v2;
              unsigned int v11 = "[%s|%s] could not initialize the channel processors with output type %u";
LABEL_24:
              _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0x1Cu);
            }
          }
        }
        else if (AUSpatialMixerV2InputElement::UpdateSpatializationAlgorithm(this))
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unsigned int v9 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            __int16 v12 = (void *)((char *)this + 1608);
            if (*((char *)this + 1631) < 0) {
              __int16 v12 = (void *)*v12;
            }
            int v13 = 136315650;
            unsigned __int8 v14 = v12;
            __int16 v15 = 2080;
            unsigned __int8 v16 = "UpdateOutputType";
            __int16 v17 = 1024;
            unsigned int v18 = v2;
            unsigned int v11 = "[%s|%s] could not set the spatialization algorithm with output type %u";
            goto LABEL_24;
          }
        }
      }
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 1577);
}

uint64_t AUSpatialMixerV2InputElement::InitializeChannelProcessors(AUSpatialMixerV2InputElement *this)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 608);
  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 609);
    if ((v3 & 1) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unsigned int v4 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v62 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          unsigned int v62 = (void *)*v62;
        }
        LODWORD(v73.mSampleRate) = 136315394;
        *(void *)((char *)&v73.mSampleRate + 4) = v62;
        LOWORD(v73.mFormatFlags) = 2080;
        *(void *)((char *)&v73.mFormatFlags + 2) = "InitializeChannelProcessors";
        _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "[%s|%s] Initialize channel processors called before the input element is initialized", (uint8_t *)&v73, 0x16u);
      }
      return 0;
    }
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unsigned __int8 v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v13 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      int v13 = (void *)*v13;
    }
    LODWORD(v73.mSampleRate) = 136315394;
    *(void *)((char *)&v73.mSampleRate + 4) = v13;
    LOWORD(v73.mFormatFlags) = 2080;
    *(void *)((char *)&v73.mFormatFlags + 2) = "InitializeChannelProcessors";
    _os_log_debug_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "[%s|%s] Initializing channel processors", (uint8_t *)&v73, 0x16u);
  }
  v71[0] = (uint64_t)this + 648;
  v71[1] = (uint64_t)this + 632;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 648, (uint64_t)this + 632);
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 27) + 128), 0);
  double v8 = *(double *)(Element + 80);
  int v64 = *(_DWORD *)(Element + 108);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 27) + 128), 0);
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)__p, (const ausdk::AUChannelLayout *)(v9 + 120));
  if (!ausdk::AUChannelLayout::NumberChannels((ausdk::AUChannelLayout *)__p[0], v10))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    __int16 v12 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v14 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        unsigned __int8 v14 = (void *)*v14;
      }
      LODWORD(v73.mSampleRate) = 136315394;
      *(void *)((char *)&v73.mSampleRate + 4) = v14;
      LOWORD(v73.mFormatFlags) = 2080;
      *(void *)((char *)&v73.mFormatFlags + 2) = "InitializeChannelProcessors";
      _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid output channel layout, unable to initialize channel processors", (uint8_t *)&v73, 0x16u);
    }
    uint64_t v5 = 4294956445;
    goto LABEL_102;
  }
  int v63 = *(_DWORD *)(*((void *)this + 27) + 336);
  if (ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v11)) {
    AUSpatialMixerV2InputElement::CreateMatrixMix((AUSpatialMixerV2InputElement *)&v72, (uint64_t)this);
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  __int16 v15 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v16 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      unsigned __int8 v16 = (void *)*v16;
    }
    LODWORD(v73.mSampleRate) = 136315650;
    *(void *)((char *)&v73.mSampleRate + 4) = v16;
    LOWORD(v73.mFormatFlags) = 2080;
    *(void *)((char *)&v73.mFormatFlags + 2) = "InitializeChannelProcessors";
    HIWORD(v73.mFramesPerPacket) = 1024;
    v73.mBytesPerFrame = 1;
    _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing %u channel processors", (uint8_t *)&v73, 0x1Cu);
  }
  uint64_t v17 = *((void *)this + 31);
  unsigned int v18 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32);
  unint64_t v19 = ((uint64_t)v18 - v17) >> 3;
  if (v19 != 1)
  {
    if (v19 <= 1) {
      operator new();
    }
    unsigned __int8 v20 = (AUSpatialMixerV2ChannelProcessor **)(v17 + 8);
    while (v18 != v20)
      std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](--v18);
    *((void *)this + 32) = v20;
    unsigned int v22 = (char *)*((void *)this + 28);
    unsigned __int8 v21 = (char *)*((void *)this + 29);
    unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((v21 - v22) >> 2);
    unint64_t v24 = 1 - v23;
    if (!v23)
    {
      uint64_t v25 = *((void *)this + 30);
      if (0x6DB6DB6DB6DB6DB7 * ((v25 - (uint64_t)v21) >> 2) < v24)
      {
        unint64_t v26 = 0xDB6DB6DB6DB6DB6ELL * ((v25 - (uint64_t)v22) >> 2);
        if (v26 <= 1) {
          unint64_t v26 = 1;
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v25 - (uint64_t)v22) >> 2)) >= 0x492492492492492) {
          unint64_t v27 = 0x924924924924924;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned __int8 v28 = (char *)operator new(28 * v27);
        unsigned __int8 v29 = &v28[4 * ((v21 - v22) >> 2)];
        uint64_t v30 = 28 - 4 * ((v21 - v22) >> 2);
        unsigned int v31 = v29;
        do
        {
          *(void *)unsigned int v31 = 0;
          *((void *)v31 + 1) = 0;
          *((_DWORD *)v31 + 6) = 0;
          *((void *)v31 + 2) = 0;
          v31 += 28;
          v30 -= 28;
        }
        while (v30);
        if (v21 != v22)
        {
          do
          {
            long long v32 = *(_OWORD *)(v21 - 28);
            *((_OWORD *)v29 - 1) = *((_OWORD *)v21 - 1);
            *(_OWORD *)(v29 - 28) = v32;
            v29 -= 28;
            v21 -= 28;
          }
          while (v21 != v22);
          unsigned __int8 v21 = (char *)*((void *)this + 28);
        }
        *((void *)this + 28) = v29;
        *((void *)this + 29) = v28 + 28;
        *((void *)this + 30) = &v28[28 * v27];
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_56;
      }
      unsigned int v33 = &v21[28 * v24];
      uint64_t v34 = 28 - 4 * ((v21 - v22) >> 2);
      do
      {
        *(void *)unsigned __int8 v21 = 0;
        *((void *)v21 + 1) = 0;
        *((_DWORD *)v21 + 6) = 0;
        *((void *)v21 + 2) = 0;
        v21 += 28;
        v34 -= 28;
      }
      while (v34);
      goto LABEL_55;
    }
    if (v23 > 1)
    {
      unsigned int v33 = v22 + 28;
LABEL_55:
      *((void *)this + 29) = v33;
    }
  }
LABEL_56:
  AUSpatialMixerV2InputElement::UpdateChannelLayout(this, 0);
  if (*((void *)this + 34))
  {
    unsigned int v35 = atomic_load((unsigned int *)(*((void *)this + 113) + 2616));
    if (v35) {
      int v36 = (v35 + 1) * (v35 + 1);
    }
    else {
      int v36 = 0;
    }
  }
  else
  {
    int v36 = *(_DWORD *)(*((void *)this + 114) + 196);
  }
  int v65 = v36;
  if (*((void *)this + 32) != *((void *)this + 31))
  {
    BOOL v66 = v36 != 0;
    int v37 = 1 - v36;
    float v38 = v8;
    int v39 = (char *)&kAllPassFilterLengthsForReverbSend + 12 * (*((_DWORD *)this + 153) % 0x19u);
    v67[0] = 0;
    v67[1] = 0;
    uint64_t v68 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v67, v39, (uint64_t)(v39 + 12), 3uLL);
    AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(**((void ***)this + 31), (uint64_t *)v67);
    uint64_t v40 = **((void **)this + 31);
    AUSM::InputGeometry::getExclusionZones((AUSM::InputGeometry *)&v73, (uint64_t)this + 1296);
    AUSpatialMixerV2ChannelProcessor::setExclusionZones(v40, (uint64_t)&v73);
    if (*(void *)&v73.mSampleRate)
    {
      *(Float64 *)&v73.mFormatID = v73.mSampleRate;
      operator delete(*(void **)&v73.mSampleRate);
    }
    if (*((void *)this + 115)) {
      AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(**((AUSpatialMixerV2ChannelProcessor ***)this + 31), *((_DWORD *)this + 236));
    }
    uint64_t v41 = *((void *)this + 34);
    if (v41)
    {
      uint64_t v42 = **((void **)this + 31);
      *(unsigned char *)(v42 + 486) = 1;
      *(unsigned char *)(v42 + 487) = 1;
    }
    else
    {
      BOOL v43 = v66;
      if (!v37) {
        BOOL v43 = 0;
      }
      if (v43)
      {
        uint64_t v42 = **((void **)this + 31);
        *(_WORD *)(v42 + 486) = 1;
      }
      else
      {
        uint64_t v42 = **((void **)this + 31);
        if (!v65 || v37) {
          __int16 v44 = 257;
        }
        else {
          __int16 v44 = 256;
        }
        *(_WORD *)(v42 + 486) = v44;
      }
    }
    uint64_t v45 = *((void *)this + 35);
    if (v45) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
    }
    *(float *)(v42 + 236) = v38;
    *(_DWORD *)(v42 + 240) = v64;
    ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v42 + 208), (const ausdk::AUChannelLayout *)__p);
    *(_DWORD *)(v42 + 244) = v63;
    if (v45) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v42 + 616) = v41;
    vDSP_Length v46 = *(std::__shared_weak_count **)(v42 + 624);
    *(void *)(v42 + 624) = v45;
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3003);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3219);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3204);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3279);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 5003);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3108);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3109);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3210);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3274);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3217);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3228);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3214);
    (**(void (***)(uint64_t, uint64_t))v42)(v42, 3224);
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v42 + 468));
    v73.mSampleRate = v38;
    *(_OWORD *)&v73.mFormatID = xmmword_1BB8727B0;
    *(_OWORD *)&v73.mBytesPerFrame = xmmword_1BB8727C0;
    AUSpatialMixerV2OcclusionFilter::initialize((uint64_t *)(v42 + 112), &v73);
    v69.mSampleRate = v38;
    *(_OWORD *)&v69.mFormatID = xmmword_1BB8727B0;
    *(_OWORD *)&v69.mBytesPerFrame = xmmword_1BB8727C0;
    AUSpatialMixerV2OcclusionFilter::initialize((uint64_t *)(v42 + 88), &v69);
    caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v42 + 468));
    uint64_t v47 = *(IR::DynamicIRProcessor **)(v42 + 136);
    if (v47) {
      IR::DynamicIRProcessor::initialize(v47, *(float *)(v42 + 236), *(_DWORD *)(v42 + 244));
    }
    unsigned __int8 v48 = *(void **)(v42 + 640);
    unsigned int v49 = atomic_load((unsigned int *)(v48[1] + 80));
    if (v49 == 1
      || !v49 && *(_DWORD *)(*v48 + 108) > 1u
      || (unsigned int v50 = atomic_load((unsigned int *)(v48[1] + 72)), v50 == 5))
    {
      int v51 = 5;
    }
    else
    {
      int v51 = atomic_load((unsigned int *)(*(void *)(v42 + 568) + 72));
    }
    int v52 = atomic_load((unsigned int *)(*(void *)(*(void *)(v42 + 568) + 232) + 88));
    AUSpatialMixerV2ChannelProcessor::initializeSpatializer((AUSpatialMixerV2ChannelProcessor *)v42, v51, v52);
  }
  uint64_t v5 = 0;
  AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(this);
  uint64_t v54 = *((void *)this + 28);
  uint64_t v55 = *((void *)this + 29);
  while (v54 != v55)
  {
    *(void *)(v54 + 4) = 0;
    *(void *)(v54 + 20) = 0;
    v54 += 28;
  }
  if (ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v53))
  {
    int v56 = atomic_load((unsigned int *)this + 167);
    if (ChannelLayoutTagIsSupportedHOA(v56))
    {
      unsigned int v57 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
      if (v57 == 3)
      {
        unsigned int v58 = atomic_load((unsigned int *)this + 186);
        if (v58 == 7)
        {
          unsigned int v59 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
          if (v59 == 2)
          {
            __int16 v60 = atomic_load((unsigned int *)this + 167);
            AUSpatialMixerV2InputElement::InitializeParametricProcessor((uint64_t *)this, v60);
          }
        }
      }
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 624);
  atomic_store(1u, (unsigned __int8 *)this + 1577);
LABEL_102:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v71);
  return v5;
}

void sub_1BB53F808(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A0C40B42DDE52);
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100]((AUSM::MatrixMix **)&STACK[0x288], 0);
  unsigned __int8 v3 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v3;
    operator delete(v3);
  }
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)&STACK[0x278]);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::UpdatePointSourceInHeadMode(AUSpatialMixerV2InputElement *this)
{
  int v2 = atomic_load((unsigned int *)this + 186);
  uint64_t result = AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v2);
  if (result) {
    uint64_t v4 = *((unsigned int *)this + 27);
  }
  else {
    uint64_t v4 = 1;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 608);
  if (v5 & 1) != 0 || (unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 609), (v6))
  {
    int v7 = atomic_load((unsigned int *)this + 167);
    if (ChannelLayoutTagIsSupportedHOA(v7) || v4 == (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 3)
    {
      return AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
    }
    else
    {
      return AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
    }
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2, int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v6 = (char *)this + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  if (a2->mChannelLayoutTag == 0x10000)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2->mChannelBitmap);
    v8.i16[0] = vaddlv_u8(v8);
    UInt32 mChannelLayoutTag = v8.i32[0];
  }
  else if (a2->mChannelLayoutTag)
  {
    UInt32 mChannelLayoutTag = (unsigned __int16)a2->mChannelLayoutTag;
  }
  else
  {
    UInt32 mChannelLayoutTag = a2->mNumberChannelDescriptions;
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)this + 608);
  if ((v9 & 1) == 0)
  {
    if (((*(uint64_t (**)(void))(**((void **)this + 27) + 608))(*((void *)this + 27)) & 1) == 0
      && *((_DWORD *)this + 27) != mChannelLayoutTag
      && (a3 & 1) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      int v10 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        unsigned int v50 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          unsigned int v50 = (void *)*v50;
        }
        GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v51 = &v54;
        }
        else {
          int v51 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v55 = 136315906;
        *(void *)&v55[4] = v50;
        *(_WORD *)&v55[12] = 2080;
        *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
        __int16 v56 = 1024;
        *(_DWORD *)unsigned int v57 = mChannelLayoutTag;
        *(_WORD *)&v57[4] = 2080;
        *(void *)&v57[6] = v51;
        _os_log_error_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels %u in requested audio channel layout %s is different than in the stream format.", v55, 0x26u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
      }
      unsigned int v11 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_79;
      }
      __int16 v12 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        __int16 v12 = (void *)*v12;
      }
      PrintAudioChannelLayout(&v54, *((int **)this + 15));
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v54;
      }
      else {
        int v13 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      goto LABEL_76;
    }
    goto LABEL_20;
  }
  if (*((_DWORD *)this + 27) == mChannelLayoutTag)
  {
LABEL_20:
    if (a2->mChannelLayoutTag >= 0xFFFF0000)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unsigned __int8 v14 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_79;
      }
      __int16 v15 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        __int16 v15 = (void *)*v15;
      }
      GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
      int v16 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = v54.__r_.__value_.__r.__words[0];
      int v18 = atomic_load((unsigned int *)this + 167);
      GetStringFromAudioChannelLayoutTag(__p, v18);
      unint64_t v19 = &v54;
      if (v16 < 0) {
        unint64_t v19 = (std::string *)v17;
      }
      if (v53 >= 0) {
        unsigned __int8 v20 = __p;
      }
      else {
        unsigned __int8 v20 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t v55 = 136315906;
      *(void *)&v55[4] = v15;
      *(_WORD *)&v55[12] = 2080;
      *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
      __int16 v56 = 2080;
      *(void *)unsigned int v57 = v19;
      *(_WORD *)&v57[8] = 2080;
      *(void *)&v57[10] = v20;
      _os_log_error_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to set audio channel layout %s. Current audio channel layout tag = %s", v55, 0x2Au);
      if (v53 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_77;
    }
    UInt32 v21 = 20 * a2->mNumberChannelDescriptions + 12;
    LODWORD(__p[0]) = 4;
    uint64_t Property = AudioFormatGetProperty(0x7661636Cu, v21, a2, (UInt32 *)__p, 0);
    if (Property)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v23 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v47 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        *(_DWORD *)uint64_t v55 = 136315650;
        *(void *)&v55[4] = v47;
        *(_WORD *)&v55[12] = 2080;
        *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
        __int16 v56 = 1024;
        *(_DWORD *)unsigned int v57 = Property;
        _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid audio channel layout: AudioFormatGetProperty returned error %d", v55, 0x1Cu);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
      }
      unint64_t v24 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          uint64_t v25 = (void *)*v25;
        }
        PrintAudioChannelLayout(&v54, *((int **)this + 15));
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v26 = &v54;
        }
        else {
          unint64_t v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v55 = 136315650;
        *(void *)&v55[4] = v25;
        *(_WORD *)&v55[12] = 2080;
        *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
        __int16 v56 = 2080;
        *(void *)unsigned int v57 = v26;
        _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (!a2->mChannelLayoutTag) {
        goto LABEL_118;
      }
      unint64_t v35 = 20 * a2->mNumberChannelDescriptions + 12;
      BOOL v36 = (v35 & 0x1C) == 0;
      unint64_t v37 = v35 >> 5;
      unint64_t v38 = v36 ? v37 : v37 + 1;
      std::vector<AudioChannelLayout>::vector(v55, v38);
      memcpy(*(void **)v55, a2, 20 * a2->mNumberChannelDescriptions + 12);
      int v39 = *(void **)v55;
      BOOL v40 = ausdk::ACL::operator==(*(int **)v55, *((_DWORD **)this + 15));
      *(void *)&v55[8] = v39;
      operator delete(v39);
      if (!v40)
      {
LABEL_118:
        int v41 = atomic_load((unsigned int *)this + 167);
        BOOL IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v41);
        ausdk::AUIOElement::ForceSetAudioChannelLayout(this, a2);
        atomic_store(a2->mChannelLayoutTag, (unsigned int *)this + 167);
        unsigned __int8 v43 = atomic_load((unsigned __int8 *)this + 608);
        if (v43 & 1) != 0 || (unsigned __int8 v44 = atomic_load((unsigned __int8 *)this + 609), (v44))
        {
          int v45 = atomic_load((unsigned int *)this + 167);
          if (ChannelLayoutTagIsSupportedHOA(v45) || IsSupportedHOA) {
            AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
          }
          else {
            AUSpatialMixerV2InputElement::UpdateChannelLayout(this, 1);
          }
        }
      }
      *((unsigned char *)this + 664) = 1;
      char v46 = a3 ^ 1;
      if (*((unsigned char *)this + 665)) {
        char v46 = 1;
      }
      *((unsigned char *)this + 665) = v46;
    }
    goto LABEL_80;
  }
  if (!a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unsigned int v33 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v48 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        unsigned __int8 v48 = (void *)*v48;
      }
      GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v49 = &v54;
      }
      else {
        unsigned int v49 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v55 = 136315906;
      *(void *)&v55[4] = v48;
      *(_WORD *)&v55[12] = 2080;
      *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
      __int16 v56 = 1024;
      *(_DWORD *)unsigned int v57 = mChannelLayoutTag;
      *(_WORD *)&v57[4] = 2080;
      *(void *)&v57[6] = v49;
      _os_log_error_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels %u in requested audio channel layout %s is different than in the stream format.", v55, 0x26u);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
    }
    unsigned int v11 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_79;
    }
    __int16 v12 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      __int16 v12 = (void *)*v12;
    }
    PrintAudioChannelLayout(&v54, *((int **)this + 15));
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v54;
    }
    else {
      int v13 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
LABEL_76:
    *(_DWORD *)uint64_t v55 = 136315650;
    *(void *)&v55[4] = v12;
    *(_WORD *)&v55[12] = 2080;
    *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
    __int16 v56 = 2080;
    *(void *)unsigned int v57 = v13;
    _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
LABEL_77:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
LABEL_79:
    uint64_t Property = 4294956445;
    goto LABEL_80;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unint64_t v27 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v28 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      unsigned __int8 v28 = (void *)*v28;
    }
    GetStringFromAudioChannelLayoutTag(&v54, a2->mChannelLayoutTag);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v29 = &v54;
    }
    else {
      unsigned __int8 v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v55 = 136315906;
    *(void *)&v55[4] = v28;
    *(_WORD *)&v55[12] = 2080;
    *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
    __int16 v56 = 1024;
    *(_DWORD *)unsigned int v57 = mChannelLayoutTag;
    *(_WORD *)&v57[4] = 2080;
    *(void *)&v57[6] = v29;
    _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEFAULT, "[%s|%s] Number of channels %u in requested audio channel layout is different than in stream format. Default audio channel layout tag %s from preset is ignored.", v55, 0x26u);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
  }
  uint64_t v30 = getAUSMV2Log(void)::gLog;
  uint64_t Property = 0;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v31 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      unsigned int v31 = (void *)*v31;
    }
    PrintAudioChannelLayout(&v54, *((int **)this + 15));
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v32 = &v54;
    }
    else {
      long long v32 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v55 = 136315650;
    *(void *)&v55[4] = v31;
    *(_WORD *)&v55[12] = 2080;
    *(void *)&v55[14] = "SetAudioChannelLayoutPrivate";
    __int16 v56 = 2080;
    *(void *)unsigned int v57 = v32;
    _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, "[%s|%s] Current audio channel layout is %s", v55, 0x20u);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    uint64_t Property = 0;
  }
LABEL_80:
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
  return Property;
}

void sub_1BB540980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v17);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::UpdateParametricProcessor(AUSpatialMixerV2InputElement *this)
{
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *((void *)this + 113) + 1592);
  CFDictionaryRef v2 = (const __CFDictionary *)cf;
  if (!cf)
  {
    atomic_store(1u, (unsigned __int8 *)this + 1577);
    return;
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  CFNumberRef v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[5]>(v2, "CDDR");
  if (((unint64_t)v3 & 0xFF00000000) != 0)
  {
    float v4 = 1.0;
    if (*(float *)&v3 <= 1.0) {
      float v4 = *(float *)&v3;
    }
    float v5 = 0.0;
    if (*(float *)&v3 >= 0.0) {
      float v5 = v4;
    }
    *((float *)this + 263) = v5;
    uint64_t v6 = *((void *)this + 115);
    if (v6) {
      *(float *)(v6 + 124) = v5;
    }
  }
  CFNumberRef v7 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[16]>(v2, "SharpeningLimit");
  if (((unint64_t)v7 & 0xFF00000000) != 0)
  {
    float v8 = 24000.0;
    if (*(float *)&v7 <= 24000.0) {
      float v8 = *(float *)&v7;
    }
    float v9 = 0.0;
    if (*(float *)&v7 >= 0.0) {
      float v9 = v8;
    }
    *((float *)this + 233) = v9;
    uint64_t v10 = *((void *)this + 115);
    if (v10) {
      *(float *)(v10 + 4) = v9;
    }
    if (v9 <= 0.0) {
      AUSpatialMixerV2InputElement::ResetParametricProcessingReverbDelay(this);
    }
  }
  CFNumberRef v11 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[19]>(v2, "DecorrelationLimit");
  if (((unint64_t)v11 & 0xFF00000000) != 0)
  {
    float v12 = 20000.0;
    if (*(float *)&v11 <= 20000.0) {
      float v12 = *(float *)&v11;
    }
    if (*(float *)&v11 >= -1.0) {
      float v13 = v12;
    }
    else {
      float v13 = -1.0;
    }
    *((float *)this + 234) = v13;
    uint64_t v14 = *((void *)this + 115);
    if (v14) {
      *(float *)(v14 + 8) = v13;
    }
  }
  CFNumberRef v15 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>(v2, "AnalysisType");
  if (((unint64_t)v15 & 0xFF00000000) == 0) {
    goto LABEL_32;
  }
  float v16 = 5.0;
  if (*(float *)&v15 <= 5.0) {
    float v16 = *(float *)&v15;
  }
  if (*(float *)&v15 < 0.0) {
    float v16 = 0.0;
  }
  if (*((_DWORD *)this + 264) != llroundf(v16))
  {
    *((_DWORD *)this + 264) = (int)*(float *)&v15;
    uint64_t v18 = *((void *)this + 115);
    if (v18) {
      *(_DWORD *)(v18 + 128) = (int)*(float *)&v15;
    }
    int v17 = 1;
  }
  else
  {
LABEL_32:
    int v17 = 0;
  }
  CFNumberRef v19 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>(v2, "FrameSize");
  if (v19)
  {
    uint64_t v20 = applesauce::CF::convert_as<unsigned int,0>(v19);
    if ((v20 & 0xFF00000000) != 0)
    {
      unsigned int v21 = v20 >= 0x800 ? 2048 : v20;
      int v22 = v21 <= 0x40 ? 64 : v21;
      if (*((_DWORD *)this + 236) != v22)
      {
        *((_DWORD *)this + 236) = v22;
        if (*((void *)this + 115))
        {
          unint64_t v23 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
          unint64_t v24 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32);
          while (v23 != v24)
            AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(*v23++, v22);
        }
        int v17 = 1;
      }
    }
  }
  CFNumberRef v25 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[8]>(v2, "HopSize");
  if (v25)
  {
    uint64_t v26 = applesauce::CF::convert_as<unsigned int,0>(v25);
    if ((v26 & 0xFF00000000) != 0)
    {
      if (v26 >= 0x800) {
        unsigned int v27 = 2048;
      }
      else {
        unsigned int v27 = v26;
      }
      if (v27 <= 0x40) {
        unsigned int v27 = 64;
      }
      if (*((_DWORD *)this + 237) != v27)
      {
        *((_DWORD *)this + 237) = v27;
        goto LABEL_62;
      }
    }
  }
  if (v17)
  {
    unsigned int v27 = *((_DWORD *)this + 237);
LABEL_62:
    *((_DWORD *)this + 240) = *((_DWORD *)this + 236) / (int)v27;
    unsigned int v28 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
    if (v28 == 3)
    {
      unsigned int v29 = atomic_load((unsigned int *)this + 186);
      if (v29 == 7)
      {
        unsigned int v30 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
        if (v30 == 2)
        {
          __int16 v31 = atomic_load((unsigned int *)this + 167);
          AUSpatialMixerV2InputElement::InitializeParametricProcessor((uint64_t *)this, v31);
        }
      }
    }
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
  CFTypeRef v32 = cf;
  atomic_store(1u, (unsigned __int8 *)this + 1577);
  if (v32) {
    CFRelease(v32);
  }
}

void sub_1BB540CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::NotifyChannelProcessorsOfPropertyChange(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  float v4 = (char *)this + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 608);
  if (v5 & 1) != 0 || (unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 609), (v6))
  {
    float v9 = (void *)*((void *)this + 31);
    float v8 = (void *)*((void *)this + 32);
    while (v9 != v8)
    {
      (**(void (***)(void, uint64_t))*v9)(*v9, a2);
      ++v9;
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v4);
}

void sub_1BB540DB8(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::SetIsUsingPersonalizedHRTF(AUSpatialMixerV2InputElement *this)
{
  v42[2] = *MEMORY[0x1E4F143B8];
  unsigned int v1 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
  if (v1 == 1)
  {
    unsigned int v3 = atomic_load((unsigned int *)this + 186);
    if (v3 == 7)
    {
      uint64_t v4 = *((void *)this + 200);
      std::mutex::lock((std::mutex *)(v4 + 1560));
      IR::IRDataAttributes::IRDataAttributes((uint64_t)anURL, v4 + 64);
      std::mutex::unlock((std::mutex *)(v4 + 1560));
      unsigned __int8 v6 = (IR::IRDataLoader *)IR::IRDataLoader::instance(v5);
      IR::IRDataLoader::getLoadedIR((uint64_t *)&v32, v6, (const IR::IRDataAttributes *)anURL);
      if (v32)
      {
        int v7 = *(_DWORD *)(IR::IRData::getIRDataAttributes(v32) + 48);
        if (v7)
        {
          atomic_store(1u, (unsigned __int8 *)this + 1632);
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          float v8 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            float v9 = (void *)((char *)this + 1608);
            if (*((char *)this + 1631) < 0) {
              float v9 = (void *)*v9;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v39 = 2080;
            BOOL v40 = "SetIsUsingPersonalizedHRTF";
            __int16 v41 = 1024;
            LODWORD(v42[0]) = v7;
            _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_HRIR: Personalized HRIR type %u is loaded.", buf, 0x1Cu);
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)buf, "hrir_category");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&buf[8], "personal");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)&v40 + 2), "hrir_type");
          LODWORD(valuePtr) = v7;
          v42[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v42[0])
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          __p[0] = buf;
          __p[1] = (void *)2;
          CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)__p);
          uint64_t v11 = 0;
          v28[0] = CFDictionaryRef;
          do
          {
            float v12 = (const void *)v42[v11];
            if (v12) {
              CFRelease(v12);
            }
            float v13 = *(const char **)((char *)&v40 + v11 * 8 + 2);
            if (v13) {
              CFRelease(v13);
            }
            v11 -= 2;
          }
          while (v11 != -4);
          if (AudioStatisticsLibraryLoader(void)::once != -1) {
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_11858);
          }
          if (AudioStatisticsLibraryLoader(void)::libSym) {
            AudioStatisticsLibraryLoader(void)::libSym(CFDictionaryRef, 268435457, 5);
          }
          if (CFDictionaryRef) {
            CFRelease(CFDictionaryRef);
          }
        }
        else
        {
          atomic_store(0, (unsigned __int8 *)this + 1632);
          if (!anURL[0])
          {
            uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
          }
          CFStringRef v14 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v14);
          if (!*(void *)buf)
          {
            unsigned int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v27, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(*(const __CFString **)buf, (uint64_t)__p);
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          CFNumberRef v15 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            float v16 = (void *)((char *)this + 1608);
            if (*((char *)this + 1631) < 0) {
              float v16 = (void *)*v16;
            }
            int v17 = __p;
            if (v31 < 0) {
              int v17 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = v16;
            __int16 v39 = 2080;
            BOOL v40 = "SetIsUsingPersonalizedHRTF";
            __int16 v41 = 2080;
            v42[0] = v17;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_HRIR: Generic HRIR is loaded from %s.", buf, 0x20u);
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)buf, "hrir_category");
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&buf[8], "generic");
          int v18 = v31;
          CFNumberRef v19 = (char *)__p[0];
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)&v40 + 2), "hrir_source");
          if (v18 >= 0) {
            uint64_t v20 = (char *)__p;
          }
          else {
            uint64_t v20 = v19;
          }
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v42, v20);
          v28[0] = buf;
          v28[1] = 2;
          CFDictionaryRef v21 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v28);
          uint64_t v22 = 0;
          CFDictionaryRef valuePtr = v21;
          do
          {
            unint64_t v23 = (const void *)v42[v22];
            if (v23) {
              CFRelease(v23);
            }
            unint64_t v24 = *(const char **)((char *)&v40 + v22 * 8 + 2);
            if (v24) {
              CFRelease(v24);
            }
            v22 -= 2;
          }
          while (v22 != -4);
          if (AudioStatisticsLibraryLoader(void)::once != -1) {
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_11858);
          }
          if (AudioStatisticsLibraryLoader(void)::libSym) {
            AudioStatisticsLibraryLoader(void)::libSym(v21, 268435457, 5);
          }
          if (v21) {
            CFRelease(v21);
          }
          if (v31 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v36) {
        CFRelease(v36);
      }
      if (v35) {
        CFRelease(v35);
      }
      if (anURL[0]) {
        CFRelease(anURL[0]);
      }
    }
  }
}

void sub_1BB541338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  __cxa_free_exception(v21);
  applesauce::CF::StringRef::~StringRef((const void **)(v22 - 96));
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a21);
  _Unwind_Resume(a1);
}

uint64_t *AUSpatialMixerV2InputElement::InitializeParametricProcessor(uint64_t *this, __int16 a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 608);
  if (v3 & 1) != 0 || (unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 609), (v4))
  {
    unsigned int v5 = atomic_load((unsigned int *)(this[113] + 2544));
    if (v5 == 2 || (unsigned int v6 = atomic_load((unsigned int *)(this[113] + 88)), v6 != 3))
    {
      if (a2 == 4 && this[31] != this[32])
      {
        unsigned int v7 = atomic_load((unsigned int *)(this[113] + 88));
        AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, this[113] + 320);
        CFTypeRef v8 = cf;
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v9 = v8;
        }
        else
        {
          IR::getPresetDataAttributes();
          CFTypeRef v9 = v51;
          CFTypeRef v51 = 0;
        }
        uint64_t v10 = *(void **)(v2 + 1080);
        *(void *)(v2 + 1080) = v9;
        if (v10) {
          CFRelease(v10);
        }
        if (!v8)
        {
          if (v54) {
            CFRelease(v54);
          }
          if (v53) {
            CFRelease(v53);
          }
          if (v52) {
            CFRelease(v52);
          }
          uint64_t v10 = (void *)v51;
          if (v51) {
            CFRelease(v51);
          }
        }
        if (v7 == 2)
        {
          IR::IRDataLoader::instance((IR::IRDataLoader *)v10);
          uint64_t v11 = *(const void **)(v2 + 1080);
          if (v11) {
            CFRetain(*(CFTypeRef *)(v2 + 1080));
          }
          CFTypeRef v50 = v11;
          int v12 = IR::IRDataLoader::fileExists();
          if (v11) {
            CFRelease(v11);
          }
          if (v12) {
            unsigned int v7 = 2;
          }
          else {
            unsigned int v7 = 3;
          }
        }
        float v13 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(v2 + 216) + 128), 0) + 80);
        *(float *)(v2 + 940) = v13;
        *(_DWORD *)(v2 + 1060) = v7;
        *(_DWORD *)(v2 + 964) = 4;
        uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(v2 + 216) + 128), 0);
        *(_DWORD *)(v2 + 968) = ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)(Element + 120), v15);
        int v16 = **(_DWORD **)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(v2 + 216) + 128), 0) + 120);
        uint64_t v17 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(v2 + 216) + 128), 0);
        ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v49.mChannelDescriptions[0].mCoordinates[1], (const ausdk::AUChannelLayout *)(v17 + 120));
        ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v2 + 1152), (const ausdk::AUChannelLayout *)&v49.mChannelDescriptions[0].mCoordinates[1]);
        if ((v16 & 0xFFFEFFFF) == 0)
        {
          __int16 v60 = 0;
          unsigned int v59 = 0;
          uint64_t v61 = 0;
          CFTypeRef v43 = 0;
          unsigned __int8 v44 = 0;
          uint64_t v45 = 0;
          *(void *)uint64_t v67 = 0;
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)buf, *(float **)&v49.mChannelDescriptions[0].mCoordinates[1]);
          *(void *)&v56.UInt32 mChannelLayoutTag = &v59;
          *(void *)&v56.mNumberChannelDescriptions = &v43;
          *(void *)&v56.mChannelDescriptions[0].mChannelFlags = v67;
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>((void ***)&v56, (uint64_t)buf);
          if (__p)
          {
            BOOL v66 = __p;
            operator delete(__p);
          }
          if ((void)v64)
          {
            *((void *)&v64 + 1) = v64;
            operator delete((void *)v64);
          }
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          GetChannelLayoutChannelLabels(&v56, *(int **)&v49.mChannelDescriptions[0].mCoordinates[1]);
          unint64_t v18 = (v60 - (unsigned char *)v59) >> 2;
          if (v18 != (v44 - (unsigned char *)v43) >> 2) {
            goto LABEL_54;
          }
          if (v18 != ((uint64_t)v68 - *(void *)v67) >> 2) {
            goto LABEL_54;
          }
          CFNumberRef v19 = *(void **)&v56.mChannelLayoutTag;
          if (v18 != (uint64_t)(*(void *)&v56.mNumberChannelDescriptions - *(void *)&v56.mChannelLayoutTag) >> 2) {
            goto LABEL_54;
          }
          if (v60 == v59)
          {
            unint64_t v18 = 0;
            int v21 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            int v21 = 0;
            do
            {
              unsigned int v22 = *(_DWORD *)(*(void *)&v56.mChannelLayoutTag + 4 * v20);
              BOOL v23 = v22 > 0x3E || ((0x4000002000000010uLL >> v22) & 1) == 0;
              if (!v23 || *(float *)(*(void *)v67 + 4 * v20) == 0.0) {
                ++v21;
              }
              ++v20;
            }
            while (v18 > v20);
          }
          if (v18 == v21)
          {
LABEL_54:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unint64_t v24 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              __int16 v39 = (void *)(v2 + 1608);
              if (*(char *)(v2 + 1631) < 0) {
                __int16 v39 = (void *)*v39;
              }
              GetStringFromAudioChannelLayoutTag(&v57, v16);
              if (v58 >= 0) {
                BOOL v40 = &v57;
              }
              else {
                BOOL v40 = v57;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = v39;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "InitializeParametricProcessor";
              __int16 v63 = 1024;
              LODWORD(v64) = v16;
              WORD2(v64) = 2080;
              *(void *)((char *)&v64 + 6) = v40;
              _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid layout for output channel layout tag = %u (%s); Defaulting to stereo",
                buf,
                0x26u);
              if (v58 < 0) {
                operator delete(v57);
              }
            }
            *(_DWORD *)(v2 + 968) = 2;
            std::vector<AudioChannelLayout>::vector(buf, 1uLL);
            uint64_t v25 = *(void *)buf;
            **(void **)AudioTimeStamp buf = 6619138;
            *(_DWORD *)(v25 + 8) = 0;
            ausdk::AUChannelLayout::CopyStorage((ausdk::AUChannelLayout *)(v2 + 1152), (const ausdk::AUChannelLayout *)buf);
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            CFNumberRef v19 = *(void **)&v56.mChannelLayoutTag;
          }
          if (v19)
          {
            *(void *)&v56.mNumberChannelDescriptions = v19;
            operator delete(v19);
          }
          if (*(void *)v67)
          {
            uint64_t v68 = *(void **)v67;
            operator delete(*(void **)v67);
          }
          if (v43)
          {
            unsigned __int8 v44 = v43;
            operator delete((void *)v43);
          }
          if (v59)
          {
            __int16 v60 = v59;
            operator delete(v59);
          }
        }
        GetChannelLayoutChannelLabels(&v49, *(int **)(v2 + 1152));
        uint64_t v26 = *(unsigned int **)&v49.mChannelLayoutTag;
        if (*(void *)&v49.mNumberChannelDescriptions != *(void *)&v49.mChannelLayoutTag)
        {
          unint64_t v27 = (uint64_t)(*(void *)&v49.mNumberChannelDescriptions - *(void *)&v49.mChannelLayoutTag) >> 2;
          if (v27 <= 1) {
            unint64_t v27 = 1;
          }
          do
          {
            unsigned int v28 = *v26++;
            unint64_t v29 = (0x4000002000000010uLL >> v28) & 1;
            if (v28 <= 0x3E && v29 != 0) {
              --*(_DWORD *)(v2 + 968);
            }
            --v27;
          }
          while (v27);
        }
        switch(v7)
        {
          case 1u:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v34 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v42 = (void *)(v2 + 1608);
              if (*(char *)(v2 + 1631) < 0) {
                uint64_t v42 = (void *)*v42;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = v42;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "InitializeParametricProcessor";
              _os_log_debug_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in Headphone Rendering Mode", buf, 0x16u);
            }
            AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(buf, *(void *)(v2 + 904) + 248);
            CFTypeRef v35 = *(const void **)buf;
            if (*(void *)buf)
            {
              CFRetain(*(CFTypeRef *)buf);
              CFTypeRef v36 = v35;
            }
            else
            {
              IR::getPresetDataAttributes();
              CFTypeRef v36 = v43;
              CFTypeRef v43 = 0;
            }
            unint64_t v37 = *(const void **)(v2 + 1072);
            *(void *)(v2 + 1072) = v36;
            if (v37) {
              CFRelease(v37);
            }
            if (!v35)
            {
              if (v48) {
                CFRelease(v48);
              }
              if (v47) {
                CFRelease(v47);
              }
              if (v46) {
                CFRelease(v46);
              }
              if (v43) {
                CFRelease(v43);
              }
            }
            unsigned int v38 = atomic_load((unsigned int *)(*(void *)(v2 + 904) + 2552));
            *(_DWORD *)(v2 + 1064) = v38;
            *(_DWORD *)(v2 + 968) = 2;
            if (*(void *)buf) {
              CFRelease(*(CFTypeRef *)buf);
            }
            break;
          case 2u:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v33 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              __int16 v41 = (void *)(v2 + 1608);
              if (*(char *)(v2 + 1631) < 0) {
                __int16 v41 = (void *)*v41;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = v41;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "InitializeParametricProcessor";
              _os_log_debug_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in BuiltInSpeakers Rendering Mode", buf, 0x16u);
            }
            *(_DWORD *)(v2 + 968) = 2;
            break;
          case 3u:
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            char v31 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              CFTypeRef v32 = (void *)(v2 + 1608);
              if (*(char *)(v2 + 1631) < 0) {
                CFTypeRef v32 = (void *)*v32;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = v32;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "InitializeParametricProcessor";
              _os_log_debug_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric Processor is in External Speakers Rendering Mode", buf, 0x16u);
            }
            break;
        }
        std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(v2 + 648, v2 + 632);
        operator new();
      }
    }
    if (this[115])
    {
      *(void *)AudioTimeStamp buf = this + 81;
      *(void *)&buf[8] = this + 79;
      std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)(this + 81), (uint64_t)(this + 79));
      AUSpatialMixerV2InputElement::DestroyParametricProcessors((ParametricProcessor **)v2);
      return std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)buf);
    }
  }
  return this;
}

uint64_t AUSpatialMixerV2::MaxFramesForInputSampleRate(AUSpatialMixerV2 *this, double a2)
{
  double v4 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpatialMixerV2 *)((char *)this + 128), 0) + 80);
  uint64_t result = *((unsigned int *)this + 84);
  if (v4 != a2) {
    return ((double)result * a2 / v4 + 15.0) & 0xFFFFFFF0;
  }
  return result;
}

void std::make_unique[abi:ne180100]<ScottyLite,unsigned int &,unsigned int &,std::string &>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB5436B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v37 = 0;
  while (1)
  {
    unsigned int v38 = *(void **)(v34 + v37 + 712);
    if (v38)
    {
      *(void *)(v34 + v37 + 720) = v38;
      operator delete(v38);
    }
    v37 -= 24;
    if (v37 == -72)
    {
      uint64_t v39 = 0;
      while (1)
      {
        BOOL v40 = *(void **)(v34 + v39 + 640);
        if (v40)
        {
          *(void *)(v34 + v39 + 648) = v40;
          operator delete(v40);
        }
        v39 -= 24;
        if (v39 == -48)
        {
          uint64_t v41 = 0;
          while (1)
          {
            uint64_t v42 = *(void **)(v34 + v41 + 544);
            if (v42)
            {
              *(void *)(v34 + v41 + 552) = v42;
              operator delete(v42);
            }
            v41 -= 24;
            if (v41 == -96)
            {
              uint64_t v43 = *(void *)(v34 + 464);
              *(void *)(v34 + 464) = 0;
              if (v43) {
                MultiRadixFFT_Dispose(v43);
              }
              ScottyLite::STFT_state_t::~STFT_state_t(v35);
              unsigned __int8 v44 = *(void **)v34;
              if (*(void *)v34)
              {
                *(void *)(v34 + 8) = v44;
                operator delete(v44);
              }
              if (a34 < 0) {
                operator delete(__p);
              }
              MEMORY[0x1C185D370](v34, 0x1092C40F99F0848);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

uint64_t *std::unique_ptr<ScottyLite>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (getScottyLog(void)::onceToken != -1) {
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
    }
    unsigned __int8 v3 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      double v4 = (void *)(v2 + 760);
      if (*(char *)(v2 + 783) < 0) {
        double v4 = (void *)*v4;
      }
      int v13 = 136315394;
      CFStringRef v14 = v4;
      __int16 v15 = 2080;
      int v16 = "~ScottyLite";
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "[%s|%s] Destructing", (uint8_t *)&v13, 0x16u);
    }
    ScottyLite::UnInitialize((ScottyLite *)v2);
    if (*(char *)(v2 + 783) < 0) {
      operator delete(*(void **)(v2 + 760));
    }
    uint64_t v5 = 0;
    while (1)
    {
      unsigned int v6 = *(void **)(v2 + v5 + 712);
      if (v6)
      {
        *(void *)(v2 + v5 + 720) = v6;
        operator delete(v6);
      }
      v5 -= 24;
      if (v5 == -72)
      {
        uint64_t v7 = 0;
        while (1)
        {
          CFTypeRef v8 = *(void **)(v2 + v7 + 640);
          if (v8)
          {
            *(void *)(v2 + v7 + 648) = v8;
            operator delete(v8);
          }
          v7 -= 24;
          if (v7 == -48)
          {
            uint64_t v9 = 0;
            while (1)
            {
              uint64_t v10 = *(void **)(v2 + v9 + 544);
              if (v10)
              {
                *(void *)(v2 + v9 + 552) = v10;
                operator delete(v10);
              }
              v9 -= 24;
              if (v9 == -96)
              {
                uint64_t v11 = *(void *)(v2 + 464);
                *(void *)(v2 + 464) = 0;
                if (v11) {
                  MultiRadixFFT_Dispose(v11);
                }
                ScottyLite::STFT_state_t::~STFT_state_t((ScottyLite::STFT_state_t *)(v2 + 24));
                int v12 = *(void **)v2;
                if (*(void *)v2)
                {
                  *(void *)(v2 + 8) = v12;
                  operator delete(v12);
                }
                JUMPOUT(0x1C185D370);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1BB5439AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  double v4 = *(void **)(a1 + 8);
  while (v4 != a2)
  {
    unsigned int v6 = (void *)*--v4;
    uint64_t v5 = v6;
    *double v4 = 0;
    if (v6) {
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v5);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize(uint64_t a1, unint64_t a2)
{
  double v4 = *(void **)a1;
  unsigned __int8 v3 = *(void **)(a1 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 > v5)
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *(void *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*(void **)(a1 + 8), 8 * v6);
      *(void *)(a1 + 8) = &v3[v6];
      return;
    }
    if (a2 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v7 - (void)v4;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= a2) {
      uint64_t v9 = a2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(8 * v10);
    int v12 = &v11[8 * v5];
    int v13 = &v11[8 * v10];
    bzero(v12, 8 * v6);
    CFStringRef v14 = &v12[8 * v6];
    if (v3 == v4)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v15 = *--v3;
        void *v3 = 0;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }
      while (v3 != v4);
      int v16 = *(void **)a1;
      unsigned __int8 v3 = *(void **)(a1 + 8);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
      if (v3 != v16)
      {
        do
        {
          unint64_t v18 = (void *)*--v3;
          uint64_t v17 = v18;
          void *v3 = 0;
          if (v18) {
            std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v17);
          }
        }
        while (v3 != v16);
        unsigned __int8 v3 = v16;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    CFNumberRef v19 = &v4[a2];
    while (v3 != v19)
    {
      int v21 = (void *)*--v3;
      uint64_t v20 = v21;
      void *v3 = 0;
      if (v21) {
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v20);
      }
    }
    *(void *)(a1 + 8) = v19;
  }
}

void AUSpatialMixerV2InputElement::DestroyParametricProcessors(ParametricProcessor **this)
{
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](this + 115, 0);
  unsigned __int8 v3 = this[31];
  uint64_t v2 = this[32];
  while (v3 != v2)
  {
    double v4 = *(void **)(*(void *)v3 + 560);
    *(void *)(*(void *)v3 + 560) = 0;
    if (v4) {
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v4);
    }
    unsigned __int8 v3 = (ParametricProcessor *)((char *)v3 + 8);
  }
}

void ParametricProcessor::~ParametricProcessor(ParametricProcessor *this)
{
  uint64_t v2 = (void *)*((void *)this + 1071);
  if (v2)
  {
    *((void *)this + 1072) = v2;
    operator delete(v2);
  }
  unsigned __int8 v3 = (void *)*((void *)this + 1070);
  *((void *)this + 1070) = 0;
  if (v3) {
    std::default_delete<ActiveIntensityAnalysis>::operator()[abi:ne180100](v3);
  }
  double v4 = (void *)*((void *)this + 1067);
  if (v4)
  {
    *((void *)this + 1068) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 1064);
  if (v5)
  {
    *((void *)this + 1065) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 1059);
  if (v6)
  {
    *((void *)this + 1060) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1054);
  if (v7)
  {
    *((void *)this + 1055) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1049);
  if (v8)
  {
    *((void *)this + 1050) = v8;
    operator delete(v8);
  }
  unint64_t v115 = (void **)((char *)this + 8352);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 8328);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 8304);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 8280);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v9 = (void *)*((void *)this + 1032);
  if (v9)
  {
    *((void *)this + 1033) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 1027);
  if (v10)
  {
    *((void *)this + 1028) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 1022);
  if (v11)
  {
    *((void *)this + 1023) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 1017);
  if (v12)
  {
    *((void *)this + 1018) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 1012);
  if (v13)
  {
    *((void *)this + 1013) = v13;
    operator delete(v13);
  }
  CFStringRef v14 = (void *)*((void *)this + 1007);
  if (v14)
  {
    *((void *)this + 1008) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 1002);
  if (v15)
  {
    *((void *)this + 1003) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)this + 997);
  if (v16)
  {
    *((void *)this + 998) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 992);
  if (v17)
  {
    *((void *)this + 993) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 987);
  if (v18)
  {
    *((void *)this + 988) = v18;
    operator delete(v18);
  }
  CFNumberRef v19 = (void *)*((void *)this + 982);
  if (v19)
  {
    *((void *)this + 983) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 977);
  if (v20)
  {
    *((void *)this + 978) = v20;
    operator delete(v20);
  }
  int v21 = (void *)*((void *)this + 972);
  if (v21)
  {
    *((void *)this + 973) = v21;
    operator delete(v21);
  }
  unsigned int v22 = (void *)*((void *)this + 967);
  if (v22)
  {
    *((void *)this + 968) = v22;
    operator delete(v22);
  }
  BOOL v23 = (void *)*((void *)this + 962);
  if (v23)
  {
    *((void *)this + 963) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)*((void *)this + 957);
  if (v24)
  {
    *((void *)this + 958) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 952);
  if (v25)
  {
    *((void *)this + 953) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 947);
  if (v26)
  {
    *((void *)this + 948) = v26;
    operator delete(v26);
  }
  unint64_t v27 = (void *)*((void *)this + 942);
  if (v27)
  {
    *((void *)this + 943) = v27;
    operator delete(v27);
  }
  unint64_t v115 = (void **)((char *)this + 7496);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 7472);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unsigned int v28 = (void *)*((void *)this + 931);
  if (v28)
  {
    *((void *)this + 932) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)this + 926);
  if (v29)
  {
    *((void *)this + 927) = v29;
    operator delete(v29);
  }
  unsigned int v30 = (void *)*((void *)this + 921);
  if (v30)
  {
    *((void *)this + 922) = v30;
    operator delete(v30);
  }
  char v31 = (void *)*((void *)this + 916);
  if (v31)
  {
    *((void *)this + 917) = v31;
    operator delete(v31);
  }
  CFTypeRef v32 = (void *)*((void *)this + 911);
  if (v32)
  {
    *((void *)this + 912) = v32;
    operator delete(v32);
  }
  unsigned int v33 = (void *)*((void *)this + 906);
  if (v33)
  {
    *((void *)this + 907) = v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)*((void *)this + 901);
  if (v34)
  {
    *((void *)this + 902) = v34;
    operator delete(v34);
  }
  CFTypeRef v35 = (void *)*((void *)this + 896);
  if (v35)
  {
    *((void *)this + 897) = v35;
    operator delete(v35);
  }
  CFTypeRef v36 = (void *)*((void *)this + 891);
  if (v36)
  {
    *((void *)this + 892) = v36;
    operator delete(v36);
  }
  uint64_t v37 = (void *)*((void *)this + 886);
  if (v37)
  {
    *((void *)this + 887) = v37;
    operator delete(v37);
  }
  unsigned int v38 = (void *)*((void *)this + 881);
  if (v38)
  {
    *((void *)this + 882) = v38;
    operator delete(v38);
  }
  uint64_t v39 = (void *)*((void *)this + 876);
  if (v39)
  {
    *((void *)this + 877) = v39;
    operator delete(v39);
  }
  BOOL v40 = (void *)*((void *)this + 871);
  if (v40)
  {
    *((void *)this + 872) = v40;
    operator delete(v40);
  }
  uint64_t v41 = (void *)*((void *)this + 866);
  if (v41)
  {
    *((void *)this + 867) = v41;
    operator delete(v41);
  }
  unint64_t v115 = (void **)((char *)this + 6904);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v42 = (void *)*((void *)this + 860);
  if (v42)
  {
    *((void *)this + 861) = v42;
    operator delete(v42);
  }
  unint64_t v115 = (void **)((char *)this + 6840);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6816);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6792);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6768);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v43 = (void *)*((void *)this + 843);
  if (v43)
  {
    *((void *)this + 844) = v43;
    operator delete(v43);
  }
  unsigned __int8 v44 = (void *)*((void *)this + 838);
  if (v44)
  {
    *((void *)this + 839) = v44;
    operator delete(v44);
  }
  unint64_t v115 = (void **)((char *)this + 6664);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6640);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6616);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  unint64_t v115 = (void **)((char *)this + 6592);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v45 = (void *)*((void *)this + 821);
  if (v45)
  {
    *((void *)this + 822) = v45;
    operator delete(v45);
  }
  unint64_t v115 = (void **)((char *)this + 6528);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  CFTypeRef v46 = (void *)*((void *)this + 813);
  if (v46)
  {
    *((void *)this + 814) = v46;
    operator delete(v46);
  }
  unint64_t v115 = (void **)((char *)this + 6464);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  CFTypeRef v47 = (void *)*((void *)this + 805);
  if (v47)
  {
    *((void *)this + 806) = v47;
    operator delete(v47);
  }
  CFTypeRef v48 = (void *)*((void *)this + 800);
  if (v48)
  {
    *((void *)this + 801) = v48;
    operator delete(v48);
  }
  AudioChannelLayout v49 = (void *)*((void *)this + 795);
  if (v49)
  {
    *((void *)this + 796) = v49;
    operator delete(v49);
  }
  CFTypeRef v50 = (void *)*((void *)this + 790);
  if (v50)
  {
    *((void *)this + 791) = v50;
    operator delete(v50);
  }
  CFTypeRef v51 = (void *)*((void *)this + 787);
  if (v51)
  {
    *((void *)this + 788) = v51;
    operator delete(v51);
  }
  CFTypeRef v52 = (void *)*((void *)this + 782);
  if (v52)
  {
    *((void *)this + 783) = v52;
    operator delete(v52);
  }
  CFTypeRef v53 = (void *)*((void *)this + 777);
  if (v53)
  {
    *((void *)this + 778) = v53;
    operator delete(v53);
  }
  CFTypeRef v54 = (void *)*((void *)this + 772);
  if (v54)
  {
    *((void *)this + 773) = v54;
    operator delete(v54);
  }
  uint64_t v55 = (void *)*((void *)this + 767);
  if (v55)
  {
    *((void *)this + 768) = v55;
    operator delete(v55);
  }
  AudioChannelLayout v56 = (void *)*((void *)this + 762);
  if (v56)
  {
    *((void *)this + 763) = v56;
    operator delete(v56);
  }
  unsigned int v57 = (void *)*((void *)this + 757);
  if (v57)
  {
    *((void *)this + 758) = v57;
    operator delete(v57);
  }
  char v58 = (void *)*((void *)this + 752);
  if (v58)
  {
    *((void *)this + 753) = v58;
    operator delete(v58);
  }
  unsigned int v59 = (void *)*((void *)this + 747);
  if (v59)
  {
    *((void *)this + 748) = v59;
    operator delete(v59);
  }
  __int16 v60 = (void *)*((void *)this + 742);
  if (v60)
  {
    *((void *)this + 743) = v60;
    operator delete(v60);
  }
  uint64_t v61 = (void *)*((void *)this + 737);
  if (v61)
  {
    *((void *)this + 738) = v61;
    operator delete(v61);
  }
  unsigned int v62 = (void *)*((void *)this + 732);
  if (v62)
  {
    *((void *)this + 733) = v62;
    operator delete(v62);
  }
  __int16 v63 = (void *)*((void *)this + 727);
  if (v63)
  {
    *((void *)this + 728) = v63;
    operator delete(v63);
  }
  long long v64 = (void *)*((void *)this + 722);
  if (v64)
  {
    *((void *)this + 723) = v64;
    operator delete(v64);
  }
  int v65 = (void *)*((void *)this + 717);
  if (v65)
  {
    *((void *)this + 718) = v65;
    operator delete(v65);
  }
  unint64_t v115 = (void **)((char *)this + 5696);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v115);
  BOOL v66 = (void *)*((void *)this + 709);
  if (v66)
  {
    *((void *)this + 710) = v66;
    operator delete(v66);
  }
  uint64_t v67 = (void *)*((void *)this + 704);
  if (v67)
  {
    *((void *)this + 705) = v67;
    operator delete(v67);
  }
  uint64_t v68 = (void *)*((void *)this + 699);
  if (v68)
  {
    *((void *)this + 700) = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)*((void *)this + 694);
  if (v69)
  {
    *((void *)this + 695) = v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)*((void *)this + 689);
  if (v70)
  {
    *((void *)this + 690) = v70;
    operator delete(v70);
  }
  unsigned int v71 = (void *)*((void *)this + 684);
  if (v71)
  {
    *((void *)this + 685) = v71;
    operator delete(v71);
  }
  CFTypeRef v72 = (void *)*((void *)this + 679);
  if (v72)
  {
    *((void *)this + 680) = v72;
    operator delete(v72);
  }
  AudioStreamBasicDescription v73 = (void *)*((void *)this + 674);
  if (v73)
  {
    *((void *)this + 675) = v73;
    operator delete(v73);
  }
  uint64_t v74 = (void *)*((void *)this + 669);
  if (v74)
  {
    *((void *)this + 670) = v74;
    operator delete(v74);
  }
  unint64_t v115 = (void **)((char *)this + 5312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  int v75 = (void *)*((void *)this + 660);
  if (v75)
  {
    *((void *)this + 661) = v75;
    operator delete(v75);
  }
  int v76 = (void *)*((void *)this + 656);
  if (v76)
  {
    *((void *)this + 657) = v76;
    operator delete(v76);
  }
  int v77 = (void *)*((void *)this + 653);
  if (v77)
  {
    *((void *)this + 654) = v77;
    operator delete(v77);
  }
  float v78 = (void *)*((void *)this + 650);
  if (v78)
  {
    *((void *)this + 651) = v78;
    operator delete(v78);
  }
  int v79 = (void *)*((void *)this + 647);
  if (v79)
  {
    *((void *)this + 648) = v79;
    operator delete(v79);
  }
  int v80 = (void *)*((void *)this + 642);
  if (v80)
  {
    *((void *)this + 643) = v80;
    operator delete(v80);
  }
  uint64_t v81 = (void *)*((void *)this + 637);
  if (v81)
  {
    *((void *)this + 638) = v81;
    operator delete(v81);
  }
  int v82 = (void *)*((void *)this + 632);
  if (v82)
  {
    *((void *)this + 633) = v82;
    operator delete(v82);
  }
  int v83 = (void *)*((void *)this + 627);
  if (v83)
  {
    *((void *)this + 628) = v83;
    operator delete(v83);
  }
  int v84 = (void *)*((void *)this + 624);
  if (v84)
  {
    *((void *)this + 625) = v84;
    operator delete(v84);
  }
  float v85 = (void *)*((void *)this + 621);
  if (v85)
  {
    *((void *)this + 622) = v85;
    operator delete(v85);
  }
  uint64_t v86 = (void *)*((void *)this + 618);
  if (v86)
  {
    *((void *)this + 619) = v86;
    operator delete(v86);
  }
  int v87 = (void *)*((void *)this + 613);
  if (v87)
  {
    *((void *)this + 614) = v87;
    operator delete(v87);
  }
  int16x8_t v88 = (void *)*((void *)this + 608);
  if (v88)
  {
    *((void *)this + 609) = v88;
    operator delete(v88);
  }
  float v89 = (void *)*((void *)this + 603);
  if (v89)
  {
    *((void *)this + 604) = v89;
    operator delete(v89);
  }
  float v90 = (void *)*((void *)this + 598);
  if (v90)
  {
    *((void *)this + 599) = v90;
    operator delete(v90);
  }
  float v91 = (void *)*((void *)this + 593);
  if (v91)
  {
    *((void *)this + 594) = v91;
    operator delete(v91);
  }
  float v92 = (void *)*((void *)this + 590);
  if (v92)
  {
    *((void *)this + 591) = v92;
    operator delete(v92);
  }
  float v93 = (void *)*((void *)this + 587);
  if (v93)
  {
    *((void *)this + 588) = v93;
    operator delete(v93);
  }
  int v94 = (void *)*((void *)this + 584);
  if (v94)
  {
    *((void *)this + 585) = v94;
    operator delete(v94);
  }
  int v95 = (void *)*((void *)this + 581);
  if (v95)
  {
    *((void *)this + 582) = v95;
    operator delete(v95);
  }
  int v96 = (void *)*((void *)this + 578);
  if (v96)
  {
    *((void *)this + 579) = v96;
    operator delete(v96);
  }
  int v97 = (void *)*((void *)this + 573);
  if (v97)
  {
    *((void *)this + 574) = v97;
    operator delete(v97);
  }
  int v98 = (void *)*((void *)this + 568);
  if (v98)
  {
    *((void *)this + 569) = v98;
    operator delete(v98);
  }
  int v99 = (void *)*((void *)this + 563);
  if (v99)
  {
    *((void *)this + 564) = v99;
    operator delete(v99);
  }
  uint64_t v100 = (void *)*((void *)this + 558);
  if (v100)
  {
    *((void *)this + 559) = v100;
    operator delete(v100);
  }
  int v101 = (void *)*((void *)this + 553);
  if (v101)
  {
    *((void *)this + 554) = v101;
    operator delete(v101);
  }
  int v102 = (void *)*((void *)this + 550);
  if (v102)
  {
    *((void *)this + 551) = v102;
    operator delete(v102);
  }
  ParametricProcessor::parsData::~parsData((ParametricProcessor *)((char *)this + 3008));
  unint64_t v103 = (void *)*((void *)this + 373);
  if (v103)
  {
    *((void *)this + 374) = v103;
    operator delete(v103);
  }
  int v104 = (void *)*((void *)this + 368);
  if (v104)
  {
    *((void *)this + 369) = v104;
    operator delete(v104);
  }
  uint64_t v105 = (void *)*((void *)this + 363);
  if (v105)
  {
    *((void *)this + 364) = v105;
    operator delete(v105);
  }
  uint32_t v106 = (void *)*((void *)this + 358);
  if (v106)
  {
    *((void *)this + 359) = v106;
    operator delete(v106);
  }
  MatrixDecompositions::~MatrixDecompositions((ParametricProcessor *)((char *)this + 2488));
  covarianceBasedAdaptiveFilter::~covarianceBasedAdaptiveFilter((ParametricProcessor *)((char *)this + 456));
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)this + 56, 0);
  std::unique_ptr<VBAP>::reset[abi:ne180100]((VBAP **)this + 55, 0);
  uint64_t v107 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 53, 0);
  uint64_t v108 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v108) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v108);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 51, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)this + 50, 0);
  int v109 = (void *)*((void *)this + 45);
  if (v109)
  {
    *((void *)this + 46) = v109;
    operator delete(v109);
  }
  unint64_t v115 = (void **)((char *)this + 320);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v110 = (void *)*((void *)this + 37);
  if (v110)
  {
    *((void *)this + 38) = v110;
    operator delete(v110);
  }
  unint64_t v115 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v115);
  uint64_t v111 = (void *)*((void *)this + 31);
  if (v111)
  {
    *((void *)this + 32) = v111;
    operator delete(v111);
  }
  uint64_t v112 = (void *)*((void *)this + 28);
  if (v112)
  {
    *((void *)this + 29) = v112;
    operator delete(v112);
  }
  uint64_t v113 = (const void *)*((void *)this + 19);
  if (v113) {
    CFRelease(v113);
  }
  unint64_t v114 = (const void *)*((void *)this + 18);
  if (v114) {
    CFRelease(v114);
  }
}

ParametricProcessor *std::unique_ptr<ParametricProcessor>::reset[abi:ne180100](ParametricProcessor **a1, ParametricProcessor *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ParametricProcessor::~ParametricProcessor(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_11866()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    unsigned int v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[16]>(const __CFDictionary *a1, char *a2)
{
  CFNumberRef result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[16]>(a1, a2);
  if (result)
  {
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::UpdateChannelLayout(AUSpatialMixerV2InputElement *this, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  double v4 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      uint64_t v25 = (void *)*v25;
    }
    PrintAudioChannelLayout(&v29, *((int **)this + 15));
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v29;
    }
    else {
      uint64_t v26 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    v30.UInt32 mChannelLayoutTag = 136315650;
    *(void *)&v30.mChannelBitmap = v25;
    LOWORD(v30.mChannelDescriptions[0].mChannelLabel) = 2080;
    *(void *)((char *)&v30.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateChannelLayout";
    HIWORD(v30.mChannelDescriptions[0].mCoordinates[0]) = 2080;
    *(void *)&v30.mChannelDescriptions[0].mCoordinates[1] = v26;
    _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "[%s|%s] Updating audio channel layout %s", (uint8_t *)&v30, 0x20u);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  if (a2) {
    AUSpatialMixerV2InputElement::CreateMatrixMix((AUSpatialMixerV2InputElement *)&v29, (uint64_t)this);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  std::vector<AUSMChannelParameters>::vector(&v29, *(unsigned int *)(*((void *)this + 114) + 60));
  uint64_t v5 = *((void *)this + 114);
  if (ChannelLayoutTagIsSupportedHOA(**(_DWORD **)(v5 + 8)))
  {
    if (&v29 != (std::string *)(v5 + 72)) {
      std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>((char *)&v29, *(char **)(v5 + 72), *(void *)(v5 + 80), (uint64_t)(*(void *)(v5 + 80) - *(void *)(v5 + 72)) >> 5);
    }
    atomic_store(1u, (unsigned __int8 *)this + 1576);
    goto LABEL_38;
  }
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v27.mChannelDescriptions[0].mCoordinates[1], (const ausdk::AUChannelLayout *)(v5 + 32));
  GetChannelLayoutSphericalCoordinates(&v30, *(float **)&v27.mChannelDescriptions[0].mCoordinates[1]);
  unint64_t v6 = *(float **)&v30.mChannelLayoutTag;
  for (uint64_t i = *(float **)&v30.mNumberChannelDescriptions; v6 != i; ++v6)
  {
    float v8 = remainderf(*v6, 360.0);
    if (v8 == -180.0) {
      float v8 = 180.0;
    }
    *unint64_t v6 = v8;
  }
  unsigned int v9 = atomic_load((unsigned int *)this + 167);
  if (v9 == 6553601) {
    *(_DWORD *)std::vector<unsigned int> __p = 1065353216;
  }
  if ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 5 != (uint64_t)(*(void *)&v30.mNumberChannelDescriptions - *(void *)&v30.mChannelLayoutTag) >> 2)
  {
    unsigned int v10 = atomic_load((unsigned int *)this + 188);
    if (v10 == 2)
    {
      v27.UInt32 mChannelLayoutTag = 0;
      std::vector<float>::assign((char **)&v30, (uint64_t)(*(void *)&v30.mNumberChannelDescriptions - *(void *)&v30.mChannelLayoutTag) >> 2, &v27);
      v27.UInt32 mChannelLayoutTag = 0;
      std::vector<float>::assign((char **)&v30.mChannelDescriptions[0].mCoordinates[1], (v31 - *(void *)&v30.mChannelDescriptions[0].mCoordinates[1]) >> 2, &v27);
      v27.UInt32 mChannelLayoutTag = 1065353216;
      std::vector<float>::assign((char **)&__p, (v33 - (unsigned char *)__p) >> 2, &v27);
    }
  }
  GetChannelLayoutChannelLabels(&v27, *(int **)&v27.mChannelDescriptions[0].mCoordinates[1]);
  uint64_t v11 = *(void *)&v30.mChannelLayoutTag;
  int v12 = *(_DWORD **)&v27.mChannelLayoutTag;
  int v13 = (char *)__p;
  if ((uint64_t)(*(void *)&v27.mNumberChannelDescriptions - *(void *)&v27.mChannelLayoutTag) >> 2 >= (unint64_t)((uint64_t)(*(void *)&v30.mNumberChannelDescriptions - *(void *)&v30.mChannelLayoutTag) >> 2)) {
    unint64_t v14 = (uint64_t)(*(void *)&v30.mNumberChannelDescriptions - *(void *)&v30.mChannelLayoutTag) >> 2;
  }
  else {
    unint64_t v14 = (uint64_t)(*(void *)&v27.mNumberChannelDescriptions - *(void *)&v27.mChannelLayoutTag) >> 2;
  }
  if ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 5 < v14) {
    unint64_t v14 = (uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 5;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)&v30.mChannelDescriptions[0].mCoordinates[1];
    uint64_t v17 = (_DWORD *)(v29.__r_.__value_.__r.__words[0] + 20);
    do
    {
      *(v17 - 5) = *(_DWORD *)(v11 + 4 * v15);
      *(v17 - 4) = *(_DWORD *)(v16 + 4 * v15);
      *(v17 - 3) = *(_DWORD *)&v13[4 * v15];
      *((void *)v17 - 1) = 1065353216;
      _DWORD *v17 = 0;
      v17[1] = 1;
      v17[2] = v12[v15++];
      v17 += 8;
    }
    while (v14 > v15);
    atomic_store(0, (unsigned __int8 *)this + 1576);
    goto LABEL_29;
  }
  atomic_store(0, (unsigned __int8 *)this + 1576);
  if (v12)
  {
LABEL_29:
    *(void *)&v27.mNumberChannelDescriptions = v12;
    operator delete(v12);
    int v13 = (char *)__p;
  }
  if (v13)
  {
    unsigned int v33 = v13;
    operator delete(v13);
  }
  if (*(void *)&v30.mChannelDescriptions[0].mCoordinates[1])
  {
    uint64_t v31 = *(void *)&v30.mChannelDescriptions[0].mCoordinates[1];
    operator delete(*(void **)&v30.mChannelDescriptions[0].mCoordinates[1]);
  }
  if (*(void *)&v30.mChannelLayoutTag)
  {
    *(void *)&v30.mNumberChannelDescriptions = *(void *)&v30.mChannelLayoutTag;
    operator delete(*(void **)&v30.mChannelLayoutTag);
  }
  if (*(void *)&v27.mChannelDescriptions[0].mCoordinates[1])
  {
    uint64_t v28 = *(void *)&v27.mChannelDescriptions[0].mCoordinates[1];
    operator delete(*(void **)&v27.mChannelDescriptions[0].mCoordinates[1]);
  }
LABEL_38:
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)this + 880);
  if (v18) {
    (*(void (**)(AUSpatialMixerV2InputElement *, uint64_t))(*(void *)this + 136))(this, 3236);
  }
  CFNumberRef v19 = (uint64_t *)*((void *)this + 31);
  uint64_t v20 = (uint64_t *)*((void *)this + 32);
  if (v20 - v19 == (uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 5)
  {
    if (v20 != v19)
    {
      unint64_t v21 = 0;
      unsigned int v22 = 1;
      do
      {
        AUSpatialMixerV2ChannelProcessor::setChannelParameters(v19[v21], v29.__r_.__value_.__r.__words[0] + 32 * v21);
        unint64_t v21 = v22;
        CFNumberRef v19 = (uint64_t *)*((void *)this + 31);
        ++v22;
      }
      while (v21 < (uint64_t)(*((void *)this + 32) - (void)v19) >> 3);
    }
  }
  else
  {
    *(_OWORD *)&v30.UInt32 mChannelLayoutTag = xmmword_1BB875830;
    *(void *)&v30.mChannelDescriptions[0].mChannelFlags = 0;
    *(void *)&v30.mChannelDescriptions[0].mCoordinates[1] = 0x64000100000001;
    while (v19 != v20)
      AUSpatialMixerV2ChannelProcessor::setChannelParameters(*v19++, (uint64_t)&v30);
  }
  AUSpatialMixerV2InputElement::UpdateBypassMatrix(this);
  unsigned __int8 v23 = atomic_load((unsigned __int8 *)this + 608);
  if (v23) {
    AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(this);
  }
  atomic_store(1u, (unsigned __int8 *)this + 624);
  if (v29.__r_.__value_.__r.__words[0])
  {
    v29.__r_.__value_.__l.__size_ = v29.__r_.__value_.__r.__words[0];
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 648);
}

void sub_1BB544C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  AUSM::ABLBuffer::~ABLBuffer((AUSM::ABLBuffer *)&a19);
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v19);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::CreateMatrixMix(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2544));
  unsigned int v4 = atomic_load((unsigned int *)(a2 + 744));
  int v5 = atomic_load((unsigned int *)(a2 + 668));
  if (ChannelLayoutTagIsSupportedHOA(v5) && (v4 & 0xFFFFFFFB) != 2)
  {
    if (v4 != 7 || (unsigned int v6 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 88)), v6 == 3))
    {
      unsigned int v7 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2544));
      if (v7 == 2)
      {
        unsigned int v8 = atomic_load((unsigned int *)(*(void *)(a2 + 1304) + 80));
        if (v8 == 3)
        {
          unsigned int v9 = atomic_load((unsigned int *)(a2 + 744));
          if (v9 == 7) {
            atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2544));
          }
        }
      }
    }
  }
  atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2612));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v22, *(void *)(a2 + 904) + 1112);
  if (!v22)
  {
    CFURLRef v10 = CFURLCreateWithBytes(0, (const UInt8 *)"/System/Library/Audio/Tunings/Generic/AU/neural_transcoder/aumx-3dem-appl-nt.plist", 82, 0, 0);
    if (!v10)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFTypeRef v22 = v10;
  }
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(void *)(a2 + 904) + 1184);
  if (!cf)
  {
    CFURLRef v11 = CFURLCreateWithBytes(0, (const UInt8 *)"/System/Library/Audio/Tunings/Generic/AU/neuralrad/aumx-3dem-appl-nrad.plist", 76, 0, 0);
    if (!v11)
    {
      unint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
    }
    CFTypeRef v12 = cf;
    CFTypeRef cf = v11;
    if (v12) {
      CFRelease(v12);
    }
  }
  BOOL v24 = v3 == 1;
  if (AUSpatialMixerV2InputElement::ShouldUseOBHD((AUSpatialMixerV2InputElement *)a2)) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2616));
  }
  unsigned int v25 = v13;
  unsigned int v14 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2620));
  unsigned int v15 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2624));
  unsigned int v26 = v14;
  unsigned int v27 = v15;
  unsigned int v16 = atomic_load((unsigned int *)(*(void *)(a2 + 904) + 2632));
  unsigned int v28 = v16;
  LOBYTE(v16) = atomic_load((unsigned __int8 *)(*(void *)(a2 + 904) + 2628));
  char v29 = v16 & 1;
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v17 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    unsigned __int8 v18 = (void *)(a2 + 1608);
    if (*(char *)(a2 + 1631) < 0) {
      unsigned __int8 v18 = (void *)*v18;
    }
    int MatrixMixOutputType = AUSpatialMixerV2InputElement::GetMatrixMixOutputType((AUSpatialMixerV2InputElement *)a2);
    LODWORD(inSpecifier.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)inSpecifier.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    WORD2(inSpecifier.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&inSpecifier.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"CreateMatrixMix";
    HIWORD(inSpecifier.__r_.__value_.__r.__words[2]) = 1024;
    int v31 = MatrixMixOutputType;
    _os_log_debug_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "[%s|%s] output type: %u", (uint8_t *)&inSpecifier, 0x1Cu);
  }
  operator new();
}

void sub_1BB545B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,AUSM::MatrixMix *a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  applesauce::CF::URLRef::~URLRef(&a30);
  MEMORY[0x1C185D370](v36, 0x10B2C406F01888DLL);
  AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct((AUSM::MatrixMixHOAParamsStruct *)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100](&a21, 0);
  AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct((AUSM::MatrixMixHOAParamsStruct *)&a22);
  _Unwind_Resume(a1);
}

void AUSM::MatrixMix::~MatrixMix(AUSM::MatrixMix *this)
{
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  std::unique_ptr<NeuralRAD>::reset[abi:ne180100]((uint64_t *)this + 20, 0);
  std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

AUSM::MatrixMix *std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100](AUSM::MatrixMix **a1, AUSM::MatrixMix *a2)
{
  CFNumberRef result = *a1;
  *a1 = a2;
  if (result)
  {
    AUSM::MatrixMix::~MatrixMix(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

char *std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    CFNumberRef result = std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](v7, v11);
    unsigned int v13 = (char *)v7[1];
    CFTypeRef v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned __int8 v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  CFTypeRef v12 = (void **)(result + 8);
  unsigned int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    CFNumberRef result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned __int8 v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    CFNumberRef result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *CFTypeRef v12 = &v9[v17];
  return result;
}

uint64_t AUSpatialMixerV2InputElement::UpdateBypassMatrix(AUSpatialMixerV2InputElement *this)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 27) + 128), 0);
  uint64_t v4 = *(unsigned int *)(Element + 108);
  uint64_t v5 = *((void *)this + 114);
  uint64_t v6 = *(void *)(v5 + 152);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(v6 + 64);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(Element + 108);
    if (!*(void *)(v5 + 160)) {
      unsigned int v7 = *((_DWORD *)this + 27);
    }
  }
  if (*((void *)this + 32) - *((void *)this + 31) <= 8uLL) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = atomic_load((unsigned int *)this + 186);
  if (v9 - 3 < 2
    || v9 - 8 < 2
    || v9 == 7 && (unsigned int v10 = atomic_load((unsigned int *)(*((void *)this + 113) + 88)), v10 == 3))
  {
    unsigned int v11 = *(_DWORD *)(Element + 108);
  }
  else
  {
    unsigned int v11 = 2;
  }
  ausdk::AUChannelLayout::AUChannelLayout((ausdk::AUChannelLayout *)&v107.mChannelDescriptions[0].mCoordinates[1], (AUSpatialMixerV2InputElement *)((char *)this + 120));
  if (ausdk::AUChannelLayout::NumberChannels(*(ausdk::AUChannelLayout **)&v107.mChannelDescriptions[0].mCoordinates[1], v12))
  {
    if (v8 == 1)
    {
      std::vector<AudioChannelLayout>::vector(buf, 1uLL);
      uint64_t v13 = *(void *)buf;
      **(void **)AudioTimeStamp buf = 6553601;
      *(_DWORD *)(v13 + 8) = 0;
      if (*(void *)&v107.mChannelDescriptions[0].mCoordinates[1])
      {
        *(void *)&long long v108 = *(void *)&v107.mChannelDescriptions[0].mCoordinates[1];
        operator delete(*(void **)&v107.mChannelDescriptions[0].mCoordinates[1]);
        uint64_t v13 = *(void *)buf;
      }
      *(void *)&v107.mChannelDescriptions[0].mCoordinates[1] = v13;
      long long v108 = *(_OWORD *)&buf[8];
    }
    v107.UInt32 mChannelLayoutTag = 0;
    std::vector<float>::vector(buf, (v8 * v4), &v107);
    GetChannelLayoutChannelLabels(&v107, *(int **)&v107.mChannelDescriptions[0].mCoordinates[1]);
    uint64_t v14 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 27) + 128), 0);
    unint64_t v15 = *(ausdk::AUChannelLayout **)(v14 + 120);
    if (!ausdk::AUChannelLayout::NumberChannels(v15, v16))
    {
      unsigned int v28 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
      for (uint64_t i = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32); v28 != i; ++v28)
        AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*v28, 0, 0);
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      AudioChannelLayout v30 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        int v31 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          int v31 = (void *)*v31;
        }
        v114.UInt32 mChannelLayoutTag = 136315394;
        *(void *)&v114.mChannelBitmap = v31;
        LOWORD(v114.mChannelDescriptions[0].mChannelLabel) = 2080;
        *(void *)((char *)&v114.mChannelDescriptions[0].mChannelLabel + 2) = "UpdateBypassMatrix";
        _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "[%s|%s] unexpected invalid output layout", (uint8_t *)&v114, 0x16u);
      }
      goto LABEL_157;
    }
    GetChannelLayoutChannelLabels(&v114, (int *)v15);
    size_t v17 = *(unsigned int **)&v114.mChannelLayoutTag;
    if (*(void *)&v114.mChannelLayoutTag == *(void *)&v114.mNumberChannelDescriptions)
    {
      unsigned int v18 = 0;
    }
    else
    {
      unsigned int v18 = 0;
      do
      {
        unsigned int v20 = *v17++;
        unint64_t v19 = v20;
        if ((((0x4000002000000010uLL >> v20) & 1) == 0 || v19 > 0x3E) && v19 != 45) {
          ++v18;
        }
      }
      while (v17 != *(unsigned int **)&v114.mNumberChannelDescriptions);
    }
    if (v11 >= v18) {
      unsigned int v32 = v18;
    }
    else {
      unsigned int v32 = v11;
    }
    if (v32 <= 1) {
      unsigned int v32 = 1;
    }
    if (v8 == 1 && v11 == 2)
    {
      if ((unsigned int v33 = atomic_load((unsigned int *)(*((void *)this + 163) + 80)), v33 == 1)
        || !v33 && *(_DWORD *)(*((void *)this + 162) + 108) > 1u
        || (unsigned int v34 = atomic_load((unsigned int *)(*((void *)this + 163) + 72)), v34 == 5))
      {
        __asm { FMOV            V0.2S, #1.0 }
        **(void **)AudioTimeStamp buf = _D0;
        goto LABEL_145;
      }
    }
    float v39 = sqrtf(1.0 / (float)v32);
    uint64_t v40 = *(void *)&v107.mChannelDescriptions[0].mCoordinates[1];
    if (ChannelLayoutTagIsSupportedHOA(**(_DWORD **)&v107.mChannelDescriptions[0].mCoordinates[1]))
    {
      uint64_t v41 = *((void *)this + 114);
      uint64_t v42 = *(char **)(v41 + 120);
      uint64_t v43 = *(void *)(v41 + 128);
      unsigned __int8 v44 = (unsigned char *)(v41 + 120);
      unint64_t v45 = (v43 - (uint64_t)v42) >> 2;
      if (v45 == v7 * v4)
      {
        if (buf != v44) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(buf, v42, v43, v45);
        }
        goto LABEL_145;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      CFTypeRef v46 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        if (!v11) {
          goto LABEL_145;
        }
        goto LABEL_73;
      }
      int v87 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        int v87 = (void *)*v87;
      }
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = v87;
      __int16 v112 = 2080;
      uint64_t v113 = "UpdateBypassMatrix";
      _os_log_debug_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEBUG, "[%s|%s] Setting HOA bypass matrix for W passthrough", ioPropertyDataSize, 0x16u);
      if (v11)
      {
LABEL_73:
        uint64_t v47 = v11;
        CFTypeRef v48 = *(unsigned int **)&v114.mChannelLayoutTag;
        AudioChannelLayout v49 = *(float **)buf;
        do
        {
          unsigned int v50 = *v48++;
          unsigned int v51 = (v50 < 0x3FuLL) & (0x4000002000000010uLL >> v50);
          if (v50 == 45) {
            unsigned int v51 = 1;
          }
          if (v51) {
            float v52 = 0.0;
          }
          else {
            float v52 = v39;
          }
          *v49++ = v52;
          --v47;
        }
        while (v47);
      }
LABEL_145:
      unsigned int v97 = atomic_load((unsigned int *)this + 186);
      if (v97 == 8)
      {
        uint64_t v98 = *(void *)buf;
        if ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >= 1) {
          bzero(*(void **)buf, 4 * (((*(void *)&buf[8] - *(void *)buf) >> 2) - (*(void *)&buf[8] - *(void *)buf > 3uLL)) + 4);
        }
        if (!v8) {
          goto LABEL_155;
        }
        unsigned int v99 = 0;
        uint64_t v100 = v8;
        do
        {
          *(_DWORD *)(v98 + 4 * v99) = 1065353216;
          v99 += v4;
          --v100;
        }
        while (v100);
      }
      if (v8)
      {
        unsigned int v101 = 0;
        unint64_t v102 = 0;
        do
        {
          uint64_t v103 = *((void *)this + 31);
          if (v102 >= (*((void *)this + 32) - v103) >> 3) {
            break;
          }
          AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*(AUSpatialMixerV2ChannelProcessor **)(v103 + 8 * v102++), (float *)(*(void *)buf + 4 * v101), v4);
          v101 += v4;
        }
        while (v8 != v102);
      }
LABEL_155:
      if (*(void *)&v114.mChannelLayoutTag)
      {
        *(void *)&v114.mNumberChannelDescriptions = *(void *)&v114.mChannelLayoutTag;
        operator delete(*(void **)&v114.mChannelLayoutTag);
      }
LABEL_157:
      if (*(void *)&v107.mChannelLayoutTag)
      {
        *(void *)&v107.mNumberChannelDescriptions = *(void *)&v107.mChannelLayoutTag;
        operator delete(*(void **)&v107.mChannelLayoutTag);
      }
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      goto LABEL_161;
    }
    uint64_t inSpecifier = v40;
    uint64_t v110 = 0;
    if (v11 < 3)
    {
      CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)ioPropertyDataSize, 6619138);
      uint64_t v110 = *(void *)ioPropertyDataSize + 16;
      UInt32 v106 = 8 * v8;
      MEMORY[0x1F4188790](v53);
      uint64_t v55 = &v105[-v54];
      OSStatus Property = AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, &v106, &v105[-v54]);
      if (v8)
      {
        uint64_t v57 = 0;
        uint64_t v58 = *(void *)buf;
        unsigned int v59 = 1;
        do
        {
          *(_DWORD *)(v58 + 4 * (v59 - 1)) = *(_DWORD *)&v55[4 * v57];
          *(_DWORD *)(v58 + 4 * v59) = *(_DWORD *)&v55[4 * (v57 + 1)];
          v57 += 2;
          v59 += v4;
        }
        while (2 * v8 != v57);
      }
      CAAudioChannelLayout::~CAAudioChannelLayout((atomic_uint **)ioPropertyDataSize);
      if (!Property) {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v110 = *(void *)(v14 + 120);
      *(_DWORD *)ioPropertyDataSize = 4 * v8 * v4;
      if (!AudioFormatGetProperty(0x6D6D6170u, 0x10u, &inSpecifier, (UInt32 *)ioPropertyDataSize, *(void **)buf))
      {
LABEL_96:
        unsigned int v64 = atomic_load((unsigned int *)this + 186);
        if (v64 == 7)
        {
          unsigned int v65 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
          if (v65 != 1 && (v65 || *(_DWORD *)(*((void *)this + 162) + 108) <= 1u))
          {
            unsigned int v66 = atomic_load((unsigned int *)(*((void *)this + 163) + 72));
            if (v66 != 5)
            {
              unsigned int v67 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
              if (v67 == 3)
              {
                unsigned int v75 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
                if (v75 == 3
                  || (unsigned int v88 = atomic_load((unsigned int *)this + 186), v88 == 7)
                  && (unsigned int v89 = atomic_load((unsigned int *)this + 188), v89 == 2)
                  && (unsigned int v90 = atomic_load((unsigned int *)this + 197), v90 == 1))
                {
                  if ((uint64_t)(*(void *)&v114.mNumberChannelDescriptions - *(void *)&v114.mChannelLayoutTag) >> 2 == v18)
                  {
                    uint64_t v76 = *(void *)&v107.mChannelLayoutTag;
                    if (*(void *)&v107.mNumberChannelDescriptions != *(void *)&v107.mChannelLayoutTag)
                    {
                      unsigned int v77 = 0;
                      unint64_t v78 = 0;
                      uint64_t v79 = *(void *)buf;
                      unint64_t v80 = (uint64_t)(*(void *)&v107.mNumberChannelDescriptions - *(void *)&v107.mChannelLayoutTag) >> 2;
                      do
                      {
                        unsigned int v81 = *(_DWORD *)(v76 + 4 * v78);
                        if (v81 <= 0x3E && ((0x4000002000000010uLL >> v81) & 1) != 0 && v4 != 0)
                        {
                          unsigned int v84 = v77;
                          uint64_t v85 = v4;
                          do
                          {
                            *(float *)(v79 + 4 * v84++) = v39;
                            --v85;
                          }
                          while (v85);
                        }
                        unint64_t v78 = (v78 + 1);
                        v77 += v4;
                      }
                      while (v80 > v78);
                    }
                  }
                }
                else if (v4)
                {
                  float v91 = *(unsigned int **)&v114.mChannelLayoutTag;
                  float v92 = *(float **)buf;
                  uint64_t v93 = v4;
                  do
                  {
                    unsigned int v94 = *v91++;
                    unsigned int v95 = (v94 < 0x3FuLL) & (0x4000002000000010uLL >> v94);
                    if (v94 == 45) {
                      unsigned int v95 = 1;
                    }
                    if (v95) {
                      float v96 = 0.0;
                    }
                    else {
                      float v96 = v39;
                    }
                    *v92++ = v96;
                    --v93;
                  }
                  while (v93);
                }
              }
              else if (v67 == 1)
              {
                uint64_t v68 = *(void *)&v107.mChannelLayoutTag;
                if (*(void *)&v107.mNumberChannelDescriptions != *(void *)&v107.mChannelLayoutTag)
                {
                  uint64_t v69 = 0;
                  uint64_t v70 = *(void *)buf;
                  unint64_t v71 = (uint64_t)(*(void *)&v107.mNumberChannelDescriptions - *(void *)&v107.mChannelLayoutTag) >> 2;
                  unsigned int v72 = 1;
                  do
                  {
                    unsigned int v73 = *(_DWORD *)(v68 + 4 * v69);
                    if (v73 <= 0x3E && ((0x4000002000000010uLL >> v73) & 1) != 0)
                    {
                      *(_DWORD *)(v70 + 4 * (v72 - 1)) = 1060439283;
                      *(_DWORD *)(v70 + 4 * v72) = 1060439283;
                    }
                    ++v69;
                    v72 += v4;
                  }
                  while (v71 > v69);
                }
              }
            }
          }
        }
        goto LABEL_145;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    __int16 v60 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v86 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        uint64_t v86 = (void *)*v86;
      }
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = v86;
      __int16 v112 = 2080;
      uint64_t v113 = "UpdateBypassMatrix";
      _os_log_debug_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "[%s|%s] Standard bypass matrix not available; reverting to a diagonal matrix",
        ioPropertyDataSize,
        0x16u);
    }
    uint64_t v61 = *(void *)buf;
    if ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >= 1) {
      bzero(*(void **)buf, 4 * (((*(void *)&buf[8] - *(void *)buf) >> 2) - (*(void *)&buf[8] - *(void *)buf > 3uLL)) + 4);
    }
    if (v8 >= v11) {
      uint64_t v62 = v11;
    }
    else {
      uint64_t v62 = v8;
    }
    if (v62)
    {
      unsigned int v63 = 0;
      do
      {
        *(_DWORD *)(v61 + 4 * v63) = 1065353216;
        v63 += v4 + 1;
        --v62;
      }
      while (v62);
    }
    goto LABEL_96;
  }
  unsigned __int8 v23 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
  BOOL v24 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32);
  while (v23 != v24)
    AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(*v23++, 0, 0);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unsigned int v25 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v26 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      unsigned int v26 = (void *)*v26;
    }
    int v27 = **(_DWORD **)&v107.mChannelDescriptions[0].mCoordinates[1];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = v26;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "UpdateBypassMatrix";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v116 = v27;
    __int16 v117 = 2080;
    long long v118 = "UpdateBypassMatrix";
    _os_log_debug_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "[%s|%s] invalid input channel layout %d in %s", buf, 0x26u);
  }
LABEL_161:
  if (*(void *)&v107.mChannelDescriptions[0].mCoordinates[1])
  {
    *(void *)&long long v108 = *(void *)&v107.mChannelDescriptions[0].mCoordinates[1];
    operator delete(*(void **)&v107.mChannelDescriptions[0].mCoordinates[1]);
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
}

void sub_1BB546968(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 - 192);
  if (v4)
  {
    *(void *)(v2 - 184) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v2 - 288);
  if (v5)
  {
    *(void *)(v2 - 280) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 - 160);
  if (v6)
  {
    *(void *)(v2 - 152) = v6;
    operator delete(v6);
  }
  unsigned int v7 = *(void **)(v2 - 264);
  if (v7)
  {
    *(void *)(v2 - 256) = v7;
    operator delete(v7);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

void *AUSpatialMixerV2InputElement::UpdateAlignmentDelayLines(void *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[27];
  if (!*(unsigned char *)(v1 + 17))
  {
    uint64_t v2 = this;
    unsigned int v3 = atomic_load((unsigned int *)(v1 + 12096));
    uint64_t v4 = (unsigned int *)this[200];
    unsigned int v5 = atomic_load((unsigned int *)(*(void *)v4 + 88));
    if (v5 == 1) {
      unsigned int v6 = atomic_load(v4 + 9);
    }
    else {
      unsigned int v6 = 0;
    }
    if (v3 > v6)
    {
      unsigned int v7 = (unsigned int *)this[200];
      unsigned int v8 = atomic_load((unsigned int *)(*(void *)v7 + 88));
      if (v8 == 1) {
        unsigned int v9 = atomic_load(v7 + 9);
      }
      else {
        unsigned int v9 = 0;
      }
      v3 -= v9;
    }
    unsigned int UncompensatedLatencyFrames = AUSpatialMixerV2InputElement::GetUncompensatedLatencyFrames((AUSpatialMixerV2InputElement *)this);
    unsigned int v11 = v3 - UncompensatedLatencyFrames;
    if (v3 < UncompensatedLatencyFrames)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      CFTypeRef v12 = getAUSMV2Log(void)::gLog;
      BOOL v13 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
      unsigned int v11 = 0;
      if (v13)
      {
        uint64_t v14 = v2 + 201;
        if (*((char *)v2 + 1631) < 0) {
          uint64_t v14 = (void *)*v14;
        }
        *(_DWORD *)BOOL v24 = 136315394;
        *(void *)&v24[4] = v14;
        __int16 v25 = 2080;
        unsigned int v26 = "UpdateAlignmentDelayLines";
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "[%s|%s] Input latency exceeds AU latency calculated at initialization time. The additional latency is not going to be aligned.", v24, 0x16u);
        unsigned int v11 = 0;
      }
    }
    atomic_store(v11, (unsigned int *)v2 + 314);
    *(void *)BOOL v24 = v2 + 79;
    unsigned char v24[8] = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(v2 + 79));
    if (atomic_load((unsigned int *)v2 + 314))
    {
      unsigned int v16 = atomic_load((unsigned int *)v2 + 314);
      unsigned int v17 = vcvtad_u64_f64(*((double *)v2 + 10)* (double)v16/ *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2[27] + 128), 0) + 80));
      unint64_t v18 = *((unsigned int *)v2 + 27);
      unint64_t v19 = (_DWORD **)v2[158];
      if (v18 > (uint64_t)(v2[159] - (void)v19) >> 3 || **v19 != v17)
      {
        std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)(v2 + 158), v18);
        if (*((_DWORD *)v2 + 27)) {
          operator new();
        }
      }
    }
    else
    {
      unsigned int v20 = (void *)v2[159];
      unint64_t v21 = (void *)v2[158];
      if (v20 != v21)
      {
        do
        {
          unsigned __int8 v23 = (void *)*--v20;
          CFTypeRef v22 = v23;
          *unsigned int v20 = 0;
          if (v23) {
            std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v22);
          }
        }
        while (v20 != v21);
        v2[159] = v21;
      }
    }
    return (void *)std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v24);
  }
  return this;
}

void sub_1BB546CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2InputElement::GetUncompensatedLatencyFrames(AUSpatialMixerV2InputElement *this)
{
  if (*((void *)this + 115))
  {
    if (*((float *)this + 233) != 0.0)
    {
      unsigned int v2 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
      if (v2 == 3)
      {
        unsigned int v3 = atomic_load((unsigned int *)this + 186);
        if (v3 == 7)
        {
          unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 113) + 2544));
          if (v4 == 2) {
            return *((unsigned int *)this + 236);
          }
        }
      }
    }
  }
  unsigned int v6 = (char *)this + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  uint64_t v8 = *((void *)this + 31);
  uint64_t v7 = *((void *)this + 32);
  if (v7 == v8)
  {
    unsigned int v10 = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)v8 + 176);
    if (v9)
    {
      unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 304))(v9);
      uint64_t v7 = *((void *)this + 32);
    }
    else
    {
      unsigned int v10 = 0;
    }
    while (1)
    {
      v8 += 8;
      if (v8 == v7) {
        break;
      }
      uint64_t v11 = *(void *)(*(void *)v8 + 176);
      if (v11)
      {
        LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 304))(v11);
        uint64_t v7 = *((void *)this + 32);
      }
      if (v11 > v10) {
        unsigned int v10 = v11;
      }
    }
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)this + 880);
    if (v12)
    {
      uint64_t v13 = *((void *)this + 147);
      if (v13)
      {
        if (*(unsigned char *)(v13 + 756)) {
          v10 += *(_DWORD *)(v13 + 748);
        }
      }
    }
  }
  uint64_t v14 = *((void *)this + 114);
  uint64_t v15 = *(void *)(v14 + 152);
  if (v15)
  {
    if (*(unsigned char *)(v15 + 216) && *(unsigned char *)(v15 + 232))
    {
      int v16 = *(_DWORD *)(v15 + 104);
      int v17 = *(_DWORD *)(v15 + 108);
      float v18 = *(float *)(v15 + 240);
      float v19 = *(float *)(v15 + 244);
      AudioSampleRateConverterGetLatency();
      double v21 = v20;
      AudioSampleRateConverterGetLatency();
      float v22 = (float)(v17 + v16) / v19;
      float v24 = v21 + v23;
      float v25 = *(float *)(v15 + 240);
LABEL_29:
      LODWORD(v15) = (float)((float)(v25 * v24) + (float)(v22 * v18));
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v15 = *(void *)(v14 + 160);
  if (v15)
  {
    if (*(unsigned char *)(v15 + 248) && *(unsigned char *)(v15 + 264))
    {
      int v26 = *(_DWORD *)(v15 + 104);
      int v27 = *(_DWORD *)(v15 + 108);
      float v28 = *(float *)(v15 + 276);
      float v18 = *(float *)(v15 + 272);
      AudioSampleRateConverterGetLatency();
      double v30 = v29;
      AudioSampleRateConverterGetLatency();
      float v22 = (float)(v27 + v26) / v28;
      float v24 = v30 + v31;
      float v25 = *(float *)(v15 + 272);
      goto LABEL_29;
    }
LABEL_30:
    LODWORD(v15) = *(_DWORD *)(v15 + 108) + *(_DWORD *)(v15 + 104);
  }
LABEL_31:
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
  return v15 + v10;
}

void sub_1BB546F6C(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AUSpatialMixerV2InputElement::ShouldUseOBHD(AUSpatialMixerV2InputElement *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 186);
  if (v1 != 7) {
    return 0;
  }
  unsigned int v3 = atomic_load((unsigned int *)this + 188);
  if (v3 != 3) {
    return 0;
  }
  unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
  uint64_t v5 = *((void *)this + 113);
  if (v4 != 1)
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 88));
    if (v6 != 2) {
      return 0;
    }
    uint64_t v5 = *((void *)this + 113);
    if (*(unsigned char *)(v5 + 2548)) {
      goto LABEL_8;
    }
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v5 + 2549));
    if ((v7 & 1) == 0) {
      return 0;
    }
    uint64_t v5 = *((void *)this + 113);
  }
LABEL_8:
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v5 + 1578));
  if ((v8 & 1) == 0) {
    return 0;
  }
  int v10 = atomic_load((unsigned int *)this + 167);
  BOOL result = ChannelLayoutTagIsSupportedHOA(v10);
  if (result) {
    return *((_DWORD *)this + 27) > 4u;
  }
  return result;
}

uint64_t AUSpatialMixerV2InputElement::GetMatrixMixOutputType(AUSpatialMixerV2InputElement *this)
{
  int v2 = atomic_load((unsigned int *)this + 167);
  BOOL IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v2);
  unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
  if (IsSupportedHOA)
  {
    if (v4 == 1 || !v4 && *(_DWORD *)(*((void *)this + 162) + 108) > 1u) {
      return 5;
    }
    unsigned int v5 = atomic_load((unsigned int *)(*((void *)this + 163) + 72));
    if (v5 == 5)
    {
      return 5;
    }
    else
    {
      unsigned int v9 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
      if (v9 == 3)
      {
        if (AUSpatialMixerV2InputElement::ShouldUseOBHD(this)) {
          return 5;
        }
        else {
          return 3;
        }
      }
      else
      {
        return 6;
      }
    }
  }
  else
  {
    if (v4 == 1
      || !v4 && *(_DWORD *)(*((void *)this + 162) + 108) > 1u
      || (unsigned int v7 = atomic_load((unsigned int *)(*((void *)this + 163) + 72)), v7 == 5))
    {
      int v8 = 5;
    }
    else
    {
      int v8 = atomic_load((unsigned int *)this + 186);
    }
    if (AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v8))
    {
      AUSpatialMixerV2InputElement::GetMatrixMixOutputLayout((AUSpatialMixerV2InputElement *)v13, (uint64_t)this);
      int v10 = v13[0];
      int v12 = ausdk::AUChannelLayout::NumberChannels(v13[0], v11);
      v13[1] = v10;
      operator delete(v10);
      return *((_DWORD *)this + 27) != v12;
    }
    else
    {
      return 2 * (*((_DWORD *)this + 27) != 1);
    }
  }
}

ausdk::AUChannelLayout *AUSpatialMixerV2InputElement::GetMatrixMixOutputLayout(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t Element = a2;
  int v4 = atomic_load((unsigned int *)(a2 + 668));
  if (ChannelLayoutTagIsSupportedHOA(v4))
  {
    unsigned int v5 = atomic_load((unsigned int *)(Element + 744));
    if (v5 - 3 >= 2 && v5 - 8 >= 2)
    {
      if (v5 != 7 || (unsigned int v6 = atomic_load((unsigned int *)(*(void *)(Element + 904) + 88)), v6 != 3))
      {
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(Element + 216) + 128), 0) + 108) >= 3u)
        {
          BOOL result = (ausdk::AUChannelLayout *)std::vector<AudioChannelLayout>::vector(this, 1uLL);
          uint64_t v8 = *(void *)this;
          *(void *)uint64_t v8 = 6619138;
          *(_DWORD *)(v8 + 8) = 0;
          return result;
        }
      }
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(Element + 216) + 128), 0);
  }
  return ausdk::AUChannelLayout::AUChannelLayout(this, (const ausdk::AUChannelLayout *)(Element + 120));
}

void AUSM::MatrixMixHOAParamsStruct::~MatrixMixHOAParamsStruct(AUSM::MatrixMixHOAParamsStruct *this)
{
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

BOOL AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(AUSpatialMixerV2InputElement *this, int a2)
{
  if (*((_DWORD *)this + 27) >= 2u)
  {
    unsigned int v3 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
    if (v3 == 1 || !v3 && *(_DWORD *)(*((void *)this + 162) + 108) > 1u) {
      return 1;
    }
    unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 163) + 72));
    if (v4 == 5) {
      return 1;
    }
    unsigned int v5 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
    if (v5 == 3) {
      return 1;
    }
    if (a2 == 7)
    {
      unsigned int v7 = atomic_load((unsigned int *)this + 188);
      if (v7 == 2)
      {
        unsigned int v8 = atomic_load((unsigned int *)this + 197);
        if (v8 == 1)
        {
          int v9 = atomic_load((unsigned int *)this + 167);
          if (!ChannelLayoutTagIsSupportedHOA(v9)) {
            return 1;
          }
        }
      }
    }
  }
  unsigned int v10 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
  if (v10 != 3) {
    return 0;
  }
  int v11 = atomic_load((unsigned int *)this + 167);

  return ChannelLayoutTagIsSupportedHOA(v11);
}

uint64_t std::__split_buffer<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100]((AUSpatialMixerV2ChannelProcessor **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AUSpatialMixerV2ChannelProcessor::~AUSpatialMixerV2ChannelProcessor(AUSpatialMixerV2ChannelProcessor *this)
{
  *(void *)this = &unk_1F14B3640;
  int v2 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  uint64_t v3 = (void *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v3) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v3);
  }
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 68, 0);
  unsigned int v4 = (void *)*((void *)this + 64);
  if (v4)
  {
    *((void *)this + 65) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v5) {
    (*((void (**)(void))this + 63))();
  }
  unsigned int v6 = (void *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v6) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v6);
  }
  unsigned int v7 = (void *)*((void *)this + 26);
  if (v7)
  {
    *((void *)this + 27) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v11) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v11);
  }
  uint64_t v12 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v12) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v13) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v13);
  }
  uint64_t v14 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v14) {
    std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v14);
  }
  uint64_t v15 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  for (uint64_t i = 56; i != -16; i -= 24)
  {
    float v18 = (void **)((char *)this + i);
    std::vector<std::unique_ptr<AllPassComb>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

AUSpatialMixerV2ChannelProcessor *std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](AUSpatialMixerV2ChannelProcessor **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    AUSpatialMixerV2ChannelProcessor::~AUSpatialMixerV2ChannelProcessor(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_emplace<AUSM::OBHDConfig>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  int v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(void *)(a1 + 384) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(void *)(a1 + 360) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 304);
  if (v5)
  {
    *(void *)(a1 + 312) = v5;
    operator delete(v5);
  }
  uint64_t v11 = (void **)(a1 + 248);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)(a1 + 224);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)(a1 + 200);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)(a1 + 176);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 168);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  if (v10)
  {
    *(void *)(a1 + 40) = v10;
    operator delete(v10);
  }
}

void std::__shared_ptr_emplace<AUSM::OBHDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B3660;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<AUSM::OBHDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B3660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AUSpatialMixerV2InputElement::PropertyObserverIsInitialized(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 608);
  return v1 & 1;
}

uint64_t AUSpatialMixerV2InputElement::Cleanup(AUSpatialMixerV2InputElement *this)
{
  v11[0] = (uint64_t)this + 648;
  v11[1] = (uint64_t)this + 632;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 648, (uint64_t)this + 632);
  AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
  atomic_store(0, (unsigned __int8 *)this + 608);
  *((void *)this + 29) = *((void *)this + 28);
  uint64_t v3 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
  for (uint64_t i = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32);
        i != v3;
        std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](i))
  {
    --i;
  }
  *((void *)this + 32) = v3;
  uint64_t v4 = *((void *)this + 114);
  *(void *)(v4 + 104) = *(void *)(v4 + 96);
  *(void *)(v4 + 128) = *(void *)(v4 + 120);
  *(void *)(v4 + 80) = *(void *)(v4 + 72);
  *(unsigned char *)(v4 + 64) = 0;
  AUSpatialMixerV2InputElement::DestroyParametricProcessors((ParametricProcessor **)this);
  uint64_t v5 = (void *)*((void *)this + 158);
  unsigned int v6 = (void *)*((void *)this + 159);
  while (v6 != v5)
  {
    uint64_t v8 = (void *)*--v6;
    unsigned int v7 = v8;
    *unsigned int v6 = 0;
    if (v8) {
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v7);
    }
  }
  *((void *)this + 159) = v5;
  atomic_store(0, (unsigned int *)this + 314);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v11);
  return 0;
}

void sub_1BB5478DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUSpatialMixerV2InputElement::DisposeInputCaptureFile(uint64_t this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(this + 616))
  {
    uint64_t v1 = this;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v2 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(v1 + 1608);
      if (*(char *)(v1 + 1631) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      int v4 = 136315394;
      uint64_t v5 = v3;
      __int16 v6 = 2080;
      unsigned int v7 = "DisposeInputCaptureFile";
      _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Disposing input capture file", (uint8_t *)&v4, 0x16u);
    }
    this = ExtAudioFileDispose(*(ExtAudioFileRef *)(v1 + 616));
    *(void *)(v1 + 616) = 0;
  }
  return this;
}

uint64_t AUSpatialMixerV2InputElement::Reset(AUSpatialMixerV2InputElement *this)
{
  int v2 = (char *)this + 632;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 632);
  uint64_t v3 = *((void *)this + 28);
  uint64_t v4 = *((void *)this + 29);
  while (v3 != v4)
  {
    *(void *)(v3 + 4) = 0;
    *(void *)(v3 + 20) = 0;
    v3 += 28;
  }
  uint64_t v5 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 31);
  __int16 v6 = (AUSpatialMixerV2ChannelProcessor **)*((void *)this + 32);
  while (v5 != v6)
    AUSpatialMixerV2ChannelProcessor::reset(*v5++);
  uint64_t v7 = *((void *)this + 158);
  if (*((void *)this + 159) != v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      IR::FixedIntegerDelay::reset(*(IR::FixedIntegerDelay **)(v7 + 8 * v8));
      unint64_t v8 = v9;
      uint64_t v7 = *((void *)this + 158);
      ++v9;
    }
    while (v8 < (*((void *)this + 159) - v7) >> 3);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v2);
  return 0;
}

void sub_1BB547AAC(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::Initialize(AUSpatialMixerV2InputElement *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  (*(void (**)(AUSpatialMixerV2InputElement *))(*(void *)this + 128))(this);
  v19[0] = (uint64_t)this + 648;
  v19[1] = (uint64_t)this + 632;
  std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 648, (uint64_t)this + 632);
  atomic_store(1u, (unsigned __int8 *)this + 609);
  AUSpatialMixerV2InputElement::UpdateParametricProcessor(this);
  if (!*((unsigned char *)this + 664)) {
    goto LABEL_7;
  }
  if (ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v2) != *((_DWORD *)this + 27))
  {
    *((unsigned char *)this + 664) = 0;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v3 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      int v14 = ausdk::AUChannelLayout::NumberChannels(*((ausdk::AUChannelLayout **)this + 15), v4);
      int v15 = *((_DWORD *)this + 27);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      double v21 = v13;
      __int16 v22 = 2080;
      double v23 = "Initialize";
      __int16 v24 = 1024;
      *(_DWORD *)float v25 = v14;
      *(_WORD *)&v25[4] = 1024;
      *(_DWORD *)&v25[6] = v15;
      _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "[%s|%s] Number of channels = %u in AudioChannelLayout does not match number of channels = %u in stream format.", buf, 0x22u);
    }
  }
  if (!*((unsigned char *)this + 664))
  {
LABEL_7:
    int v5 = *((_DWORD *)this + 27);
    int v6 = v5 - 1;
    if (v5 - 1) < 0x10 && ((0x89FFu >> v6)) {
      int v7 = dword_1BB886F4C[v6];
    }
    else {
      int v7 = v5 | 0x930000;
    }
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v18, v7);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v8 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        unsigned int v9 = (void *)*v9;
      }
      GetStringFromAudioChannelLayoutTag(__p, v18[4]);
      if (v17 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      int v11 = *((_DWORD *)this + 27);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      double v21 = v9;
      __int16 v22 = 2080;
      double v23 = "Initialize";
      __int16 v24 = 2080;
      *(void *)float v25 = v10;
      *(_WORD *)&unsigned char v25[8] = 1024;
      int v26 = v11;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting default audio channel layout tag = %s for %u channels", buf, 0x26u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(AUSpatialMixerV2InputElement *, atomic_uint *))(*(void *)this + 88))(this, v18 + 4);
    *((unsigned char *)this + 665) = 0;
    CAAudioChannelLayout::~CAAudioChannelLayout(&v18);
  }
  AUSM::InputGeometry::update((AUSpatialMixerV2InputElement *)((char *)this + 1296), 1);
  AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
  AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(this);
  atomic_store(1u, (unsigned __int8 *)this + 624);
  atomic_store(1u, (unsigned __int8 *)this + 608);
  atomic_store(0, (unsigned __int8 *)this + 609);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100](v19);
  return 0;
}

void sub_1BB547DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, atomic_uint *);
  CAAudioChannelLayout::~CAAudioChannelLayout((atomic_uint **)va);
  std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(AUSpatialMixerV2InputElement *this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 77))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v2 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      float v28 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        float v28 = (void *)*v28;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CreateInputCaptureFileIfNecessary";
      _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Inconsistent behaviour: there was already an input capture file! Disposing of it.", buf, 0x16u);
    }
    AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
  }
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFDictionaryRef Value = (CATimeUtilities *)CFPreferencesGetAppBooleanValue(@"ausm_capture_all", @"com.apple.coreaudio", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v4 = AppBooleanValue == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4
    || (Boolean keyExistsAndHasValidFormat = 0,
        AppBooleanCFDictionaryRef Value = (CATimeUtilities *)CFPreferencesGetAppBooleanValue(@"ausm_capture_input", @"com.apple.coreaudio", &keyExistsAndHasValidFormat), keyExistsAndHasValidFormat)&& AppBooleanValue)
  {
    uint64_t v5 = *((void *)this + 113);
    if (*(char *)(v5 + 2607) < 0)
    {
      if (*(void *)(v5 + 2592))
      {
LABEL_15:
        unint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(AppBooleanValue);
        int v7 = (void *)(v5 + 2584);
        caulk::make_string((caulk *)"%d%02d%02d.%02d%02d%02d", (uint64_t)v37, CurrentGregorianDate, ((int)(CurrentGregorianDate >> 8) >> 24), ((int)(CurrentGregorianDate >> 16) >> 24), ((int)(CurrentGregorianDate >> 24) >> 24), (SHIDWORD(CurrentGregorianDate) >> 24), (int)v8);
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (*(char *)(v5 + 2607) < 0) {
          int v7 = (void *)*v7;
        }
        uint64_t v10 = *((void *)this + 113);
        int v11 = (void *)(v10 + 8);
        if (*(char *)(v10 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        uint64_t v12 = v37;
        if (v38 < 0) {
          uint64_t v12 = (void **)v37[0];
        }
        CFStringRef v13 = CFStringCreateWithFormat(v9, 0, @"%s/ausm_%s_input_%u_%s_%u.caf", v7, v11, *((unsigned int *)this + 153), v12, AUSpatialMixerV2InputElement::mCaptureFileNumber);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&filePath, v13);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        int v14 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = (void *)((char *)this + 1608);
          if (*((char *)this + 1631) < 0) {
            int v15 = (void *)*v15;
          }
          if (!filePath)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>(filePath, (uint64_t)&__p);
          if ((__p.mFramesPerPacket & 0x80000000) == 0) {
            Float64 mSampleRate = COERCE_DOUBLE(&__p);
          }
          else {
            Float64 mSampleRate = __p.mSampleRate;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "CreateInputCaptureFileIfNecessary";
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(Float64 *)&unsigned char buf[24] = mSampleRate;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "[%s|%s] Capture file: %s", buf, 0x20u);
          if (SHIBYTE(__p.mFramesPerPacket) < 0) {
            operator delete(*(void **)&__p.mSampleRate);
          }
        }
        CFURLRef v17 = CFURLCreateWithFileSystemPath(v9, filePath, kCFURLPOSIXPathStyle, 0);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&inURL, v17);
        float v18 = (ExtAudioFileRef *)((char *)this + 616);
        long long v19 = *((_OWORD *)this + 6);
        *(_OWORD *)AudioTimeStamp buf = *((_OWORD *)this + 5);
        *(_OWORD *)&buf[16] = v19;
        uint64_t v49 = *((void *)this + 14);
        if (*(_DWORD *)&buf[8] == 1885564203) {
          *(_DWORD *)&buf[8] = 1819304813;
        }
        __p.Float64 mSampleRate = *(Float64 *)buf;
        *(void *)&__p.mFormatID = 0x96C70636DLL;
        __p.mBytesPerPacket = 4 * *(_DWORD *)&buf[28];
        __p.mFramesPerPacket = 1;
        __p.mBytesPerFrame = 4 * *(_DWORD *)&buf[28];
        __p.UInt32 mChannelsPerFrame = *(_DWORD *)&buf[28];
        *(void *)&__p.mBitsPerChannel = 32;
        OSStatus v20 = ExtAudioFileCreateWithURL(inURL, 0x63616666u, &__p, 0, 1u, (ExtAudioFileRef *)this + 77);
        if (v20)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          double v21 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            __int16 v22 = (void *)((char *)this + 1608);
            if (*((char *)this + 1631) < 0) {
              __int16 v22 = (void *)*v22;
            }
            *(_DWORD *)uint64_t v40 = 136315650;
            uint64_t v41 = v22;
            __int16 v42 = 2080;
            uint64_t v43 = "CreateInputCaptureFileIfNecessary";
            __int16 v44 = 1024;
            OSStatus v45 = v20;
            _os_log_error_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (ExtAudioFileCreateWithURL returned %d)", v40, 0x1Cu);
          }
        }
        else
        {
          OSStatus v25 = ExtAudioFileSetProperty(*v18, 0x63666D74u, 0x28u, buf);
          if (!v25)
          {
LABEL_54:
            ++AUSpatialMixerV2InputElement::mCaptureFileNumber;
            if (inURL) {
              CFRelease(inURL);
            }
            if (filePath) {
              CFRelease(filePath);
            }
            if (v38 < 0) {
              operator delete(v37[0]);
            }
            return;
          }
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          int v26 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            double v29 = (void *)((char *)this + 1608);
            if (*((char *)this + 1631) < 0) {
              double v29 = (void *)*v29;
            }
            CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)v32, v27);
            if (v33 >= 0) {
              double v30 = v32;
            }
            else {
              double v30 = (void **)v32[0];
            }
            *(_DWORD *)uint64_t v40 = 136315906;
            uint64_t v41 = v29;
            __int16 v42 = 2080;
            uint64_t v43 = "CreateInputCaptureFileIfNecessary";
            __int16 v44 = 1024;
            OSStatus v45 = v25;
            __int16 v46 = 2080;
            uint64_t v47 = v30;
            _os_log_error_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (ExtAudioFileSetProperty with kExtAudioFileProperty_ClientDataFormat returned %d; format was %s)",
              v40,
              0x26u);
            if (v33 < 0) {
              operator delete(v32[0]);
            }
          }
          ExtAudioFileDispose(*v18);
        }
        *float v18 = 0;
        goto LABEL_54;
      }
    }
    else if (*(unsigned char *)(v5 + 2607))
    {
      goto LABEL_15;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    double v23 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      __int16 v24 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        __int16 v24 = (void *)*v24;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CreateInputCaptureFileIfNecessary";
      _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] ERROR: Could not create input capture file (no capture dir path available)", buf, 0x16u);
    }
  }
}

void sub_1BB548490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,const void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  __cxa_free_exception(v31);
  applesauce::CF::StringRef::~StringRef(&a25);
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::SetAudioChannelLayout(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2)
{
  return AUSpatialMixerV2InputElement::SetAudioChannelLayoutPrivate(this, a2, 0);
}

BOOL ausdk::AUInputElement::NeedsBufferSpace(ausdk::AUInputElement *this)
{
  return *((_DWORD *)this + 43) == 2;
}

uint64_t AUSpatialMixerV2InputElement::SetStreamFormat(AUSpatialMixerV2InputElement *this, const AudioChannelLayout *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  BOOL v4 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int16x8_t v6 = *(int16x8_t *)&a2->mChannelDescriptions[0].mChannelFlags;
    *(_OWORD *)uint64_t v37 = *(_OWORD *)&a2->mChannelLayoutTag;
    *(int16x8_t *)&v37[16] = v6;
    *(void *)&v37[32] = *(void *)&a2[1].mChannelLayoutTag;
    CA::StreamDescription::AsString((CA::StreamDescription *)v37, (uint64_t)__p, v6);
    if (v36 >= 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v39 = 2080;
    uint64_t v40 = "SetStreamFormat";
    __int16 v41 = 2080;
    __int16 v42 = v7;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting stream format: %s", buf, 0x20u);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(double *)&a2->mChannelLayoutTag > 0.0)
  {
    __p[0] = (char *)this + 632;
    __p[1] = (char *)this + 648;
    std::lock[abi:ne180100]<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((uint64_t)this + 632, (uint64_t)this + 648);
    int v8 = *((_DWORD *)this + 27);
    int v9 = atomic_load((unsigned int *)this + 186);
    BOOL v10 = AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v9);
    ausdk::AUIOElement::SetStreamFormat(this, a2);
    (*(void (**)(AUSpatialMixerV2InputElement *, void))(*(void *)this + 64))(this, 0);
    if (*((void *)this + 77))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 632);
      AUSpatialMixerV2InputElement::DisposeInputCaptureFile((uint64_t)this);
      AUSpatialMixerV2InputElement::CreateInputCaptureFileIfNecessary(this);
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 632);
    }
    int v11 = *((_DWORD *)this + 27);
    if (v11 == v8)
    {
      uint64_t v12 = 0;
LABEL_54:
      (*(void (**)(AUSpatialMixerV2InputElement *))(*(void *)this + 120))(this);
      std::scoped_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~scoped_lock[abi:ne180100]((uint64_t *)__p);
      return v12;
    }
    int v14 = v11 - 1;
    if (v11 - 1) < 0x10 && ((0x89FFu >> v14)) {
      int v15 = dword_1BB886F4C[v14];
    }
    else {
      int v15 = v11 | 0x930000;
    }
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v34, v15);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v16 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      CFURLRef v17 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        CFURLRef v17 = (void *)*v17;
      }
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = v17;
      *(_WORD *)&v37[12] = 2080;
      *(void *)&v37[14] = "SetStreamFormat";
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Number of channels in stream format changed", v37, 0x16u);
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
    }
    float v18 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      long long v19 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        long long v19 = (void *)*v19;
      }
      GetStringFromAudioChannelLayoutTag(buf, v34[4]);
      if (v41 >= 0) {
        OSStatus v20 = buf;
      }
      else {
        OSStatus v20 = *(unsigned char **)buf;
      }
      int v21 = *((_DWORD *)this + 27);
      *(_DWORD *)uint64_t v37 = 136315906;
      *(void *)&v37[4] = v19;
      *(_WORD *)&v37[12] = 2080;
      *(void *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 2080;
      *(void *)&v37[24] = v20;
      *(_WORD *)&v37[32] = 1024;
      *(_DWORD *)&v37[34] = v21;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting default audio channel layout tag = %s for %u channels", v37, 0x26u);
      if (SHIBYTE(v41) < 0) {
        operator delete(*(void **)buf);
      }
    }
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)this + 608);
    if ((v22 & 1) != 0 || (unsigned __int8 v23 = atomic_load((unsigned __int8 *)this + 609), (v23))
      && (int v24 = atomic_load((unsigned int *)this + 186),
          AUSpatialMixerV2InputElement::NeedsMoreThanOneSpatializer(this, v24) || v10))
    {
      ausdk::AUIOElement::SetAudioChannelLayout(this, (AudioChannelLayout *)(v34 + 4));
      atomic_store(v34[4], (unsigned int *)this + 167);
      *((unsigned char *)this + 664) = 1;
      uint64_t v12 = AUSpatialMixerV2InputElement::InitializeChannelProcessors(this);
      if (!v12) {
        goto LABEL_53;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      OSStatus v25 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
      int v26 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        int v26 = (void *)*v26;
      }
      int v27 = *((_DWORD *)this + 27);
      *(_DWORD *)uint64_t v37 = 136315906;
      *(void *)&v37[4] = v26;
      *(_WORD *)&v37[12] = 2080;
      *(void *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 1024;
      *(_DWORD *)&v37[24] = v27;
      *(_WORD *)&v37[28] = 1024;
      *(_DWORD *)&v37[30] = v12;
      float v28 = "[%s|%s] Could not initialize channel processors after number of channels in a stream changed to %u: error = %d";
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(AUSpatialMixerV2InputElement *, atomic_uint *))(*(void *)this + 88))(this, v34 + 4);
      if (!v12) {
        goto LABEL_53;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      OSStatus v25 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
      unsigned int v32 = (void *)((char *)this + 1608);
      if (*((char *)this + 1631) < 0) {
        unsigned int v32 = (void *)*v32;
      }
      int v33 = *((_DWORD *)this + 27);
      *(_DWORD *)uint64_t v37 = 136315906;
      *(void *)&v37[4] = v32;
      *(_WORD *)&v37[12] = 2080;
      *(void *)&v37[14] = "SetStreamFormat";
      *(_WORD *)&v37[22] = 1024;
      *(_DWORD *)&v37[24] = v33;
      *(_WORD *)&v37[28] = 1024;
      *(_DWORD *)&v37[30] = v12;
      float v28 = "[%s|%s] Could not set default channel layout after number of channels in a stream changed to %u: error = %d";
    }
    _os_log_error_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, v28, v37, 0x22u);
LABEL_53:
    *((unsigned char *)this + 665) = 0;
    CAAudioChannelLayout::~CAAudioChannelLayout(&v34);
    goto LABEL_54;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  CFStringRef v13 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    double v30 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      double v30 = (void *)*v30;
    }
    Float64 v31 = *(double *)&a2->mChannelLayoutTag;
    *(_DWORD *)uint64_t v37 = 136315650;
    *(void *)&v37[4] = v30;
    *(_WORD *)&v37[12] = 2080;
    *(void *)&v37[14] = "SetStreamFormat";
    *(_WORD *)&v37[22] = 2048;
    *(Float64 *)&v37[24] = v31;
    _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "[%s|%s] Could not set the stream format: invalid samplerate %f", v37, 0x20u);
  }
  return 4294967246;
}

void sub_1BB548B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

double AUSpatialMixerV2InputElement::GetParameterList(AUSpatialMixerV2InputElement *this, unsigned int *a2)
{
  *(_OWORD *)a2 = xmmword_1BB8727D0;
  *((_OWORD *)a2 + 1) = xmmword_1BB879D60;
  *(void *)&double result = 0xA00000008;
  *((void *)a2 + 4) = 0xA00000008;
  a2[10] = 11;
  return result;
}

uint64_t AUSpatialMixerV2InputElement::GetNumberOfParameters(AUSpatialMixerV2InputElement *this)
{
  return 11;
}

void AUSpatialMixerV2InputElement::~AUSpatialMixerV2InputElement(AUSpatialMixerV2InputElement *this)
{
  AUSpatialMixerV2InputElement::~AUSpatialMixerV2InputElement(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned char v20[12];
  __int16 v21;
  const char *v22;
  uint64_t v23;

  unsigned __int8 v23 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B3518;
  *((void *)this + 26) = &unk_1F14B35C0;
  AUSpatialMixerV2InputElement::Cleanup(this);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v2 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    long long v19 = (void *)((char *)this + 1608);
    if (*((char *)this + 1631) < 0) {
      long long v19 = (void *)*v19;
    }
    *(_DWORD *)OSStatus v20 = 136315394;
    *(void *)&v20[4] = v19;
    int v21 = 2080;
    unsigned __int8 v22 = "~AUSpatialMixerV2InputElement";
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "[%s|%s] Destructed", v20, 0x16u);
  }
  if (*((char *)this + 1631) < 0) {
    operator delete(*((void **)this + 201));
  }
  uint64_t v3 = (void *)*((void *)this + 194);
  if (v3)
  {
    *((void *)this + 195) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 191);
  if (v4)
  {
    *((void *)this + 192) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 166);
  *((void *)this + 166) = 0;
  if (v5) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v5);
  }
  int16x8_t v6 = *((void *)this + 165);
  *((void *)this + 165) = 0;
  if (v6) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v6);
  }
  *(void *)OSStatus v20 = (char *)this + 1264;
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  *(void *)OSStatus v20 = (char *)this + 1232;
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  int v7 = (void *)*((void *)this + 148);
  if (v7)
  {
    *((void *)this + 149) = v7;
    operator delete(v7);
  }
  std::unique_ptr<ScottyLite>::reset[abi:ne180100]((uint64_t *)this + 147, 0);
  int v8 = (void *)*((void *)this + 144);
  if (v8)
  {
    *((void *)this + 145) = v8;
    operator delete(v8);
  }
  int v9 = (const void *)*((void *)this + 135);
  if (v9) {
    CFRelease(v9);
  }
  BOOL v10 = (const void *)*((void *)this + 134);
  if (v10) {
    CFRelease(v10);
  }
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)this + 115, 0);
  std::unique_ptr<AUSM::MatrixMix>::reset[abi:ne180100]((AUSM::MatrixMix **)this + 114, 0);
  *((void *)this + 84) = &unk_1F14B35E0;
  std::mutex::~mutex((std::mutex *)((char *)this + 808));
  int v11 = (const void *)*((void *)this + 100);
  if (v11) {
    CFRelease(v11);
  }
  *((void *)this + 84) = &unk_1F14BE008;
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((void **)this + 90));
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  uint64_t v12 = (void *)*((void *)this + 40);
  if (v12)
  {
    *((void *)this + 41) = v12;
    operator delete(v12);
  }
  CFStringRef v13 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v13) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v13);
  }
  int v14 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v14) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v14);
  }
  int v15 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v15) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)OSStatus v20 = (char *)this + 248;
  std::vector<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  CFURLRef v17 = (void *)*((void *)this + 28);
  if (v17)
  {
    *((void *)this + 29) = v17;
    operator delete(v17);
  }
  *(void *)this = &unk_1F14C81D8;
  if (*((void *)this + 19))
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    *((void *)this + 19) = 0;
  }
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 36) = 0;
  float v18 = (void *)*((void *)this + 15);
  if (v18)
  {
    *((void *)this + 16) = v18;
    operator delete(v18);
  }
  ausdk::AUElement::~AUElement((const void **)this);
}

void sub_1BB548F98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    BOOL v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v7 = (void *)*--v4;
        int16x8_t v6 = v7;
        *BOOL v4 = 0;
        if (v7) {
          std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AUSpatialMixerV2ChannelProcessor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (AUSpatialMixerV2ChannelProcessor **)**a1;
  if (v2)
  {
    BOOL v4 = (AUSpatialMixerV2ChannelProcessor **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<AUSpatialMixerV2ChannelProcessor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUSpatialMixerV2InputElement::GetParametricProcessorParams(AUSpatialMixerV2InputElement *this, _DWORD *a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v15, "CDDR");
  int valuePtr = a2[263];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int v12 = a2[264];
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],unsigned int>((applesauce::CF::TypeRef *)&v17, "AnalysisType", &v12);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v18, "SharpeningLimit");
  int valuePtr = a2[233];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v20, "DecorrelationLimit");
  int valuePtr = a2[234];
  if (!CFNumberCreate(0, kCFNumberFloatType, &valuePtr))
  {
    int v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v22, "FrameSize");
  int valuePtr = a2[236];
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    BOOL v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v24, "HopSize");
  int valuePtr = a2[237];
  v25[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v25[0])
  {
    int v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  v13[0] = v15;
  v13[1] = 6;
  uint64_t v4 = 0;
  *(void *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
  do
  {
    uint64_t v5 = (const void *)v25[v4];
    if (v5) {
      CFRelease(v5);
    }
    int16x8_t v6 = *(const void **)&v24[v4 * 8];
    if (v6) {
      CFRelease(v6);
    }
    v4 -= 2;
  }
  while (v4 != -12);
}

void sub_1BB5493D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, CFTypeRef a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef a19, uint64_t a20,CFTypeRef a21,uint64_t a22,CFTypeRef a23,uint64_t a24,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::TypeRef::~TypeRef(v25);
  do
  {
    v25 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v25);
  }
  while (v25 != (const void **)&a14);
  _Unwind_Resume(a1);
}

BOOL AUSpatialMixerV2InputElement::MustProcessPostProcReverb(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 86));
  if ((v1 & 1) != 0 && (unsigned int v2 = atomic_load((unsigned int *)this + 186), v2 == 7))
  {
    unsigned int v3 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
    BOOL v4 = v3 == 1;
  }
  else
  {
    BOOL v4 = 0;
  }
  BOOL v5 = !*(unsigned char *)(*((void *)this + 113) + 2608)
    && !*(unsigned char *)(*(void *)(*((void *)this + 163) + 232) + 2608)
    && *(_DWORD *)(*((void *)this + 164) + 412) == 1;
  unsigned int v6 = atomic_load((unsigned int *)this + 186);
  unsigned int v7 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
  unsigned int v8 = atomic_load((unsigned int *)this + 221);
  uint64_t v9 = *((void *)this + 113);
  if (!*(unsigned char *)(v9 + 2548)) {
    atomic_load((unsigned __int8 *)(v9 + 2549));
  }
  if (v6 != 7 || v7 != 1) {
    goto LABEL_14;
  }
  if (v8 - 1 < 3) {
    goto LABEL_17;
  }
  if (v8)
  {
LABEL_14:
    if (!v4) {
      return 0;
    }
  }
  else if (!v5)
  {
    return 0;
  }
LABEL_17:
  unsigned int v11 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
  if (v11 == 1) {
    return 0;
  }
  return v11 || *(_DWORD *)(*((void *)this + 162) + 108) < 2u;
}

BOOL AUSpatialMixerV2InputElement::MustProcessInternalReverb(AUSpatialMixerV2InputElement *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 85));
  unsigned int v2 = atomic_load((unsigned int *)this + 186);
  unsigned int v3 = atomic_load((unsigned int *)(*((void *)this + 113) + 88));
  unsigned int v4 = atomic_load((unsigned int *)this + 221);
  uint64_t v5 = *((void *)this + 113);
  if (!*(unsigned char *)(v5 + 2548)) {
    atomic_load((unsigned __int8 *)(v5 + 2549));
  }
  if (v2 == 7 && v3 == 1)
  {
    int v7 = v1 & 1;
    if (v4 < 4 || v7 == 0) {
      return 0;
    }
  }
  else if ((v1 & 1) == 0)
  {
    return 0;
  }
  unsigned int v9 = atomic_load((unsigned int *)(*((void *)this + 163) + 80));
  if (v9 == 1) {
    return 0;
  }
  return v9 || *(_DWORD *)(*((void *)this + 162) + 108) < 2u;
}

uint64_t AUSpatialMixerV2InputElement::ResetReverbProcessors(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1 + 648);
  uint64_t v5 = *(void ***)(a1 + 248);
  for (uint64_t i = *(void ***)(a1 + 256); v5 != i; ++v5)
  {
    int v7 = *v5;
    if (*v5)
    {
      unsigned int v9 = (char *)v7 + 468;
      char v10 = 1;
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)v7 + 468));
      AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(v7, a2);
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v4);
}

void sub_1BB549768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2InputElement::GetHeadTrackedEarlyReflectionsFilterParams(int *a1, uint64_t a2, int a3)
{
  uint64_t v22 = a2 + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 648);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  a1[6] = 0;
  *((void *)a1 + 2) = 0;
  unsigned int v6 = *(void ***)(a2 + 248);
  if (v6 != *(void ***)(a2 + 256))
  {
    AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams((uint64_t)v23, *v6, a3);
    *(_OWORD *)a1 = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)&v23[12];
    uint64_t v7 = *(void *)(a2 + 248);
    if ((unint64_t)(*(void *)(a2 + 256) - v7) >= 9)
    {
      unsigned int v8 = *a1;
      unsigned int v9 = a1[1];
      unsigned int v10 = a1[2];
      unsigned int v11 = a1[3];
      unint64_t v12 = 1;
      unsigned int v14 = a1[4];
      unsigned int v13 = a1[5];
      do
      {
        AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams((uint64_t)v23, *(void **)(v7 + 8 * v12), a3);
        unsigned int v15 = *(_DWORD *)&v23[4];
        if (*(_DWORD *)&v23[4] > v9)
        {
          a1[1] = *(_DWORD *)&v23[4];
          unsigned int v9 = v15;
        }
        unsigned int v16 = *(_DWORD *)&v23[8];
        if (*(_DWORD *)&v23[8] > v10)
        {
          a1[2] = *(_DWORD *)&v23[8];
          unsigned int v10 = v16;
        }
        unsigned int v17 = *(_DWORD *)&v23[12];
        if (*(_DWORD *)&v23[12] > v11)
        {
          a1[3] = *(_DWORD *)&v23[12];
          unsigned int v11 = v17;
        }
        unsigned int v18 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 > v8)
        {
          *a1 = *(_DWORD *)v23;
          unsigned int v8 = v18;
        }
        unsigned int v19 = *(_DWORD *)&v23[16];
        if (*(_DWORD *)&v23[16] > v14)
        {
          a1[4] = *(_DWORD *)&v23[16];
          unsigned int v14 = v19;
        }
        unsigned int v20 = *(_DWORD *)&v23[20];
        if (*(_DWORD *)&v23[20] > v13)
        {
          a1[5] = *(_DWORD *)&v23[20];
          unsigned int v13 = v20;
        }
        ++v12;
        uint64_t v7 = *(void *)(a2 + 248);
      }
      while (v12 < (*(void *)(a2 + 256) - v7) >> 3);
    }
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v22);
}

void sub_1BB5498E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t AUSpatialMixerV2InputElement::SetEnableForChannel(AUSpatialMixerV2InputElement *this, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = (char *)this + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 648);
  uint64_t v7 = *((void *)this + 31);
  if (a3 < (unint64_t)((*((void *)this + 32) - v7) >> 3)) {
    AUSpatialMixerV2ChannelProcessor::setEnable(*(AUSpatialMixerV2ChannelProcessor **)(v7 + 8 * a3), a2);
  }
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v6);
}

void sub_1BB54996C(_Unwind_Exception *a1)
{
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 AUSpatialMixerV2InputElement::GetChannelParameters(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a2 + 608));
  if (v3)
  {
    uint64_t v6 = a2 + 648;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 648);
    uint64_t v7 = *(uint64_t **)(a2 + 248);
    unsigned int v8 = *(uint64_t **)(a2 + 256);
    if (v7 == v8)
    {
      unint64_t v4 = 0;
      __n128 v30 = 0u;
    }
    else
    {
      unint64_t v4 = 0;
      __n128 v30 = 0u;
      do
      {
        uint64_t v9 = *v7;
        int v32 = *(_DWORD *)(*v7 + 684);
        long long v31 = *(_OWORD *)(*v7 + 668);
        float v10 = *(float *)(*v7 + 836);
        float v11 = *(float *)(*v7 + 832);
        float v12 = atan2f(v10, v11) * 57.296;
        float v13 = *(float *)(v9 + 840);
        float v14 = hypotf(v11, v10);
        float v15 = atan2f(-v13, v14) * 57.296;
        float v16 = sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v13 * v13));
        unint64_t v17 = v30.n128_u64[1];
        if (v30.n128_u64[1] >= v4)
        {
          unsigned int v19 = (void *)v30.n128_u64[0];
          uint64_t v20 = (uint64_t)(v30.n128_u64[1] - v30.n128_u64[0]) >> 5;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v4 - v30.n128_u64[0]) >> 4 > v21) {
            unint64_t v21 = (uint64_t)(v4 - v30.n128_u64[0]) >> 4;
          }
          if (v4 - v30.n128_u64[0] >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = v22 + 32 * v20;
          *(float *)unint64_t v24 = v12;
          *(float *)(v24 + 4) = v15;
          *(float *)(v24 + 8) = v16;
          *(_OWORD *)(v24 + 12) = v31;
          *(_DWORD *)(v24 + 28) = v32;
          if (v30.n128_u64[1] == v30.n128_u64[0])
          {
            unint64_t v27 = v22 + 32 * v20;
          }
          else
          {
            unint64_t v25 = v22 + 32 * v20;
            do
            {
              long long v26 = *(_OWORD *)(v17 - 16);
              unint64_t v27 = v25 - 32;
              *(_OWORD *)(v25 - 32) = *(_OWORD *)(v17 - 32);
              *(_OWORD *)(v25 - 16) = v26;
              v17 -= 32;
              v25 -= 32;
            }
            while (v17 != v30.n128_u64[0]);
          }
          unint64_t v4 = v22 + 32 * v23;
          uint64_t v18 = v24 + 32;
          v30.n128_u64[0] = v27;
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(float *)v30.n128_u64[1] = v12;
          *(float *)(v30.n128_u64[1] + 4) = v15;
          *(float *)(v30.n128_u64[1] + 8) = v16;
          *(_DWORD *)(v30.n128_u64[1] + 28) = v32;
          *(_OWORD *)(v30.n128_u64[1] + 12) = v31;
          uint64_t v18 = v30.n128_u64[1] + 32;
        }
        v28.n128_u64[0] = v30.n128_u64[0];
        v28.n128_u64[1] = v18;
        __n128 v30 = v28;
        ++v7;
      }
      while (v7 != v8);
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v6);
  }
  else
  {
    unint64_t v4 = 0;
    __n128 v30 = 0u;
  }
  __n128 result = v30;
  *(__n128 *)this = v30;
  *((void *)this + 2) = v4;
  return result;
}

void sub_1BB549BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
}

uint64_t AUSpatialMixerV2InputElement::GetGeometry(AUSpatialMixerV2InputElement *this, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = a2 + 648;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 648);
  long long v42 = 0uLL;
  unint64_t v43 = 0;
  unsigned __int8 v3 = *(uint64_t **)(a2 + 248);
  for (uint64_t i = *(uint64_t **)(a2 + 256); v3 != i; ++v3)
  {
    uint64_t v4 = *v3;
    unsigned int v59 = (void **)(*v3 + 448);
    LOBYTE(v60) = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)v59);
    long long v5 = *(_OWORD *)(v4 + 400);
    long long v48 = *(_OWORD *)(v4 + 384);
    long long v49 = v5;
    long long v6 = *(_OWORD *)(v4 + 432);
    __n128 v50 = *(__n128 *)(v4 + 416);
    long long v51 = v6;
    long long v7 = *(_OWORD *)(v4 + 336);
    long long v44 = *(_OWORD *)(v4 + 320);
    long long v45 = v7;
    long long v8 = *(_OWORD *)(v4 + 368);
    long long v46 = *(_OWORD *)(v4 + 352);
    long long v47 = v8;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v59);
    if ((_BYTE)v45 && (_BYTE)v49)
    {
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v56, *(double *)&v44, *((float *)&v44 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v59, "SourcePosition", &v56);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v55, *(double *)&v48, *((float *)&v48 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v60 + 8), "SourceSize", &v55);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v62, (int *)&v51);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v51 + 1);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float const&>((applesauce::CF::TypeRef *)v64, (int *)&v51 + 2);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>((applesauce::CF::TypeRef *)v65, "InternalizedAmount", (int *)&v51 + 3);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>((applesauce::CF::TypeRef *)v66, (int *)&v45 + 1);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v54, *(double *)&v46, *((float *)&v46 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v67, &v54);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v53, *(double *)&v47, *((float *)&v47 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v68, &v53);
      AUSM::ObjectParameters::createArray((AUSM::ObjectParameters *)&cf, v9, v50);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v69, &cf);
      uint64_t v57 = &v59;
      uint64_t v58 = 10;
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v57);
      for (uint64_t j = 0; j != -160; j -= 16)
      {
        float v12 = *(const void **)&v69[j + 8];
        if (v12) {
          CFRelease(v12);
        }
        float v13 = *(const void **)&v69[j];
        if (v13) {
          CFRelease(v13);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v53) {
        CFRelease(v53);
      }
      if (v54) {
        CFRelease(v54);
      }
      if (v55) {
        CFRelease(v55);
      }
      CFTypeRef v14 = v56;
      if (!v56) {
        goto LABEL_58;
      }
    }
    else if (*((float *)&v45 + 1) <= 0.0)
    {
      if ((_BYTE)v49)
      {
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v56, *(double *)&v44, *((float *)&v44 + 2));
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v59, "SourcePosition", &v56);
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v55, *(double *)&v48, *((float *)&v48 + 2));
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v60 + 8), "SourceSize", &v55);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v62, (int *)&v51);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v51 + 1);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float const&>((applesauce::CF::TypeRef *)v64, (int *)&v51 + 2);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>((applesauce::CF::TypeRef *)v65, "InternalizedAmount", (int *)&v51 + 3);
        AUSM::ObjectParameters::createArray((AUSM::ObjectParameters *)&v54, v18, v50);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v66, &v54);
        uint64_t v57 = &v59;
        uint64_t v58 = 7;
        CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v57);
        for (uint64_t k = 0; k != -112; k -= 16)
        {
          uint64_t v20 = *(const void **)&v66[k + 8];
          if (v20) {
            CFRelease(v20);
          }
          unint64_t v21 = *(const void **)&v66[k];
          if (v21) {
            CFRelease(v21);
          }
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v55) {
          CFRelease(v55);
        }
        CFTypeRef v14 = v56;
        if (!v56) {
          goto LABEL_58;
        }
      }
      else
      {
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v56, *(double *)&v44, *((float *)&v44 + 2));
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v59, "SourcePosition", &v56);
        AUSM::ObjectParameters::createArray((CFArrayRef *)&v55, *(double *)&v48, *((float *)&v48 + 2));
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v60 + 8), "SourceSize", &v55);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v62, (int *)&v51);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v51 + 1);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float const&>((applesauce::CF::TypeRef *)v64, (int *)&v51 + 2);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>((applesauce::CF::TypeRef *)v65, "InternalizedAmount", (int *)&v51 + 3);
        uint64_t v57 = &v59;
        uint64_t v58 = 6;
        CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v57);
        for (uint64_t m = 0; m != -96; m -= 16)
        {
          uint64_t v23 = *(const void **)&v65[m + 8];
          if (v23) {
            CFRelease(v23);
          }
          unint64_t v24 = *(const void **)&v65[m];
          if (v24) {
            CFRelease(v24);
          }
        }
        if (v55) {
          CFRelease(v55);
        }
        CFTypeRef v14 = v56;
        if (!v56) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v56, *(double *)&v44, *((float *)&v44 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v59, "SourcePosition", &v56);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v55, *(double *)&v48, *((float *)&v48 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)((char *)&v60 + 8), "SourceSize", &v55);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>((applesauce::CF::TypeRef *)v62, (int *)&v51);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],float const&>((applesauce::CF::TypeRef *)v63, (int *)&v51 + 1);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float const&>((applesauce::CF::TypeRef *)v64, (int *)&v51 + 2);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],float const&>((applesauce::CF::TypeRef *)v65, "InternalizedAmount", (int *)&v51 + 3);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>((applesauce::CF::TypeRef *)v66, (int *)&v45 + 1);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v54, *(double *)&v46, *((float *)&v46 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v67, &v54);
      AUSM::ObjectParameters::createArray((CFArrayRef *)&v53, *(double *)&v47, *((float *)&v47 + 2));
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v68, &v53);
      uint64_t v57 = &v59;
      uint64_t v58 = 9;
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v57);
      for (uint64_t n = 0; n != -144; n -= 16)
      {
        float v16 = *(const void **)&v68[n + 8];
        if (v16) {
          CFRelease(v16);
        }
        unint64_t v17 = *(const void **)&v68[n];
        if (v17) {
          CFRelease(v17);
        }
      }
      if (v53) {
        CFRelease(v53);
      }
      if (v54) {
        CFRelease(v54);
      }
      if (v55) {
        CFRelease(v55);
      }
      CFTypeRef v14 = v56;
      if (!v56) {
        goto LABEL_58;
      }
    }
    CFRelease(v14);
LABEL_58:
    unint64_t v25 = (void *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1) >= v43)
    {
      long long v26 = (void *)v42;
      uint64_t v27 = (uint64_t)(*((void *)&v42 + 1) - v42) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v43 - v42;
      if ((uint64_t)(v43 - v42) >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      v62[0] = &v43;
      if (v30)
      {
        unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v30);
        unint64_t v25 = (void *)*((void *)&v42 + 1);
        long long v26 = (void *)v42;
      }
      else
      {
        uint64_t v31 = 0;
      }
      int v32 = (CFDictionaryRef *)(v30 + 8 * v27);
      unint64_t v33 = v30 + 8 * v31;
      unint64_t v61 = v33;
      *int v32 = CFDictionaryRef;
      unsigned int v34 = v32 + 1;
      *((void *)&v60 + 1) = v32 + 1;
      if (v25 != v26)
      {
        do
        {
          CFDictionaryRef v35 = (const __CFDictionary *)*--v25;
          *--int v32 = v35;
          *unint64_t v25 = 0;
        }
        while (v25 != v26);
        unsigned int v34 = (void *)*((void *)&v60 + 1);
        unint64_t v33 = v61;
      }
      long long v36 = v42;
      *(void *)&long long v42 = v32;
      long long v60 = v36;
      unint64_t v37 = v43;
      unint64_t v43 = v33;
      unint64_t v61 = v37;
      unsigned int v59 = (void **)v36;
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v59);
      *((void *)&v42 + 1) = v34;
    }
    else
    {
      **((void **)&v42 + 1) = CFDictionaryRef;
      *((void *)&v42 + 1) = v25 + 1;
    }
  }
  *(void *)this = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)&v42);
  unsigned int v59 = (void **)&v42;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v59);
  return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v40);
}

void sub_1BB54A360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,CFTypeRef a46,CFTypeRef a47,CFTypeRef a48,CFTypeRef cf,CFTypeRef a50,uint64_t a51,uint64_t a52,char a53)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AUSM::ObjectParameters::createArray(CFArrayRef *a1, double a2, float a3)
{
  long long v6 = (float *)operator new(0xCuLL);
  long long v8 = v6 + 3;
  uint64_t v9 = (char *)(v6 + 3);
  *(double *)long long v6 = a2;
  v6[2] = a3;
  AudioStreamBasicDescription __p = v6;
  *a1 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  if (__p)
  {
    long long v8 = __p;
    operator delete(__p);
  }
}

void sub_1BB54A91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "SceneDistanceGainLin");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB54A9D8(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "TuningGainLin");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB54AAB4(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "PostProcDRRLin");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB54AB90(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float const&>(applesauce::CF::TypeRef *a1, int *a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "Divergence");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((void *)a1 + 1) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB54AC6C(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[23],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "DivergenceLeftPosition");
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *((void *)a1 + 1) = v4;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[24],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "DivergenceRightPosition");
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *((void *)a1 + 1) = v4;
  return a1;
}

void AUSM::ObjectParameters::createArray(AUSM::ObjectParameters *this, const simd_quatf *a2, __n128 a3)
{
  CFNumberRef v4 = (__n128 *)operator new(0x10uLL);
  AudioStreamBasicDescription __p = v4;
  *CFNumberRef v4 = a3;
  long long v7 = v4 + 1;
  long long v8 = v4 + 1;
  *(void *)this = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  if (__p)
  {
    long long v7 = (__n128 *)__p;
    operator delete(__p);
  }
}

void sub_1BB54ADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  applesauce::CF::TypeRef::TypeRef(a1, "SourceOrientation");
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *((void *)a1 + 1) = v4;
  return a1;
}

uint64_t AUSpatialMixerV2InputElement::PullSharedInput(AUSpatialMixerV2InputElement *this, AudioBufferList *ioData, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, uint64_t a5, uint64_t inNumberFrames)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 43);
  if (!v6) {
    return 4294956420;
  }
  if (v6 == 1) {
    unsigned int v10 = AudioUnitRender(*((AudioUnit *)this + 24), ioActionFlags, inTimeStamp, *((_DWORD *)this + 50), inNumberFrames, ioData);
  }
  else {
    unsigned int v10 = (*((uint64_t (**)(void, AudioUnitRenderActionFlags *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))this
  }
           + 22))(*((void *)this + 23), ioActionFlags, inTimeStamp, a5, inNumberFrames, ioData);
  if (*((_DWORD *)this + 43)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 4294956420;
  }
  if (*((void *)this + 77))
  {
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*((void *)this + 113) + 84));
    BOOL v13 = (v12 & 1) == 0;
    CFTypeRef v14 = (uint64_t (*)(void, uint64_t, AudioBufferList *))MEMORY[0x1E4F4EA80];
    if (v13) {
      CFTypeRef v14 = (uint64_t (*)(void, uint64_t, AudioBufferList *))MEMORY[0x1E4F4EA88];
    }
    int v15 = v14(*((void *)this + 77), inNumberFrames, ioData);
    if (v15)
    {
      int v16 = v15;
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v17 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v19 = (void *)((char *)this + 1608);
        if (*((char *)this + 1631) < 0) {
          unsigned int v19 = (void *)*v19;
        }
        int v20 = 136315650;
        unint64_t v21 = v19;
        __int16 v22 = 2080;
        uint64_t v23 = "PullSharedInput";
        __int16 v24 = 1024;
        int v25 = v16;
        _os_log_debug_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "[%s|%s] Error writing input data to file, %d", (uint8_t *)&v20, 0x1Cu);
      }
    }
  }
  return v11;
}

uint64_t AUSpatialMixerV2InputElement::Process(uint64_t a1, AudioUnitRenderActionFlags *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *(void *)&long long v638 = a5;
  *((void *)&v638 + 1) = a6;
  juint64_t j = a1;
  uint64_t v710 = *MEMORY[0x1E4F143B8];
  uint64_t v694 = a1 + 632;
  int v11 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1 + 632);
  char v695 = v11;
  if (!v11) {
    goto LABEL_51;
  }
  double v12 = *(double *)(jj + 80);
  unsigned int v633 = *(_DWORD *)(jj + 104);
  *(void *)v646 = *(unsigned int *)(jj + 108);
  double v13 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(void *)(jj + 216) + 128), 0) + 80);
  BOOL v14 = AUSM::InputGeometry::update((AUSM::InputGeometry *)(jj + 1296), 0);
  updated = *(unsigned __int8 **)(jj + 272);
  if (updated)
  {
    unsigned __int8 v16 = atomic_load(updated + 400);
    if (v16) {
      updated = (unsigned __int8 *)AUSM::OBHDConfig::updateInternal((AUSM::OBHDConfig *)updated, 0);
    }
  }
  if (v14)
  {
    unint64_t v17 = *(float ***)(jj + 288);
    if (v17)
    {
      float32x4_t v18 = *(float32x4_t *)(jj + 1456);
      float32x4_t v19 = vaddq_f32(v18, (float32x4_t)xmmword_1BB87B560);
      int8x16_t v20 = (int8x16_t)vmulq_f32(v19, v19);
      if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)))) <= 0.00000011921)
      {
        HOA::RotationMatrix::setIdentity(*(float ***)(jj + 288));
        char v24 = 0;
      }
      else
      {
        float v21 = AUSM::auCoordQuaternionToEuler((AUSM *)updated, v18);
        HOA::RotationMatrix::setRotationMatrixYPR(v17, v21, v22, v23);
        char v24 = 1;
      }
      *(unsigned char *)(jj + 317) = v24;
      HOA::RotationMatrix::toRegularMatrix(*(void *)(jj + 288), **(char ***)(jj + 304), (uint64_t)(*(void *)(*(void *)(jj + 304) + 8) - **(void **)(jj + 304)) >> 2);
      *(unsigned char *)(jj + 316) = 1;
    }
  }
  unsigned int v25 = atomic_load((unsigned int *)(*(void *)(jj + 904) + 2544));
  if (v25 == 2
    && *(void *)(jj + 920)
    && *(float *)(jj + 932) != 0.0
    && (unsigned int v26 = atomic_load((unsigned int *)(*(void *)(jj + 1304) + 80)), v26 == 3)
    && (unsigned int v27 = atomic_load((unsigned int *)(jj + 744)), v27 == 7))
  {
    unsigned int v28 = atomic_load((unsigned int *)(*(void *)(jj + 904) + 2544));
    unsigned int v29 = atomic_load((unsigned int *)(*(void *)(jj + 1304) + 80));
    if (v29 == 3 && v28 == 2)
    {
      if (*(unsigned char *)(*(void *)(jj + 904) + 2608)
        || *(unsigned char *)(*(void *)(*(void *)(jj + 1304) + 232) + 2608))
      {
        BOOL v30 = 0;
      }
      else
      {
        uint64_t v619 = *(void *)(jj + 1312);
        if (atomic_load((unsigned int *)(v619 + 408))) {
          BOOL v30 = 1;
        }
        else {
          BOOL v30 = *(_DWORD *)(v619 + 412) != 0;
        }
      }
      uint64_t v31 = *(void *)(jj + 920);
      *(unsigned char *)(v31 + 212) = v30;
      int v32 = *(uint64_t **)(jj + 248);
      uint64_t v33 = (*(void *)(jj + 256) - (void)v32) >> 3;
      if (v33 >= 4) {
        uint64_t v33 = 4;
      }
      else {
        uint64_t v33 = v33;
      }
      if (v33)
      {
        unsigned int v34 = &v697;
        p_A = &__A;
        do
        {
          uint64_t v36 = *v32++;
          uint64_t v37 = *(void *)(v36 + 176);
          int v38 = *(_DWORD *)(v37 + 52);
          p_A->UInt32 mNumberBuffers = *(_DWORD *)(v37 + 48);
          p_A = (AudioBufferList *)((char *)p_A + 4);
          LODWORD(v34->realp) = v38;
          unsigned int v34 = (DSPSplitComplex *)((char *)v34 + 4);
          --v33;
        }
        while (v33);
      }
      vDSP_vsmul((const float *)&__A.mNumberBuffers, 1, &AUSM::kDeg2Rad, (float *)&__C.mNumberBuffers, 1, 4uLL);
      vDSP_vsmul((const float *)&v697, 1, &AUSM::kDeg2Rad, (float *)&inTimeStamp, 1, 4uLL);
      HOA::sphericalHarmonics((HOA *)&__C, (const float *)&inTimeStamp, (const float *)4, *(void *)(v31 + 4336), (float *)1);
    }
  }
  else
  {
    atomic_load((unsigned int *)(*(void *)(jj + 1304) + 80));
  }
  unsigned __int8 v39 = atomic_load((unsigned __int8 *)(jj + 624));
  if (v39)
  {
    *(void *)&__C.UInt32 mNumberBuffers = jj + 648;
    int v40 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(jj + 648);
    LOBYTE(__C.mBuffers[0].mNumberChannels) = v40;
    if (v40)
    {
      atomic_store(0, (unsigned __int8 *)(jj + 624));
      float Parameter = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 0xAu);
      float v42 = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 0xBu);
      float v43 = ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 5u);
      uint64_t v44 = *(void *)(jj + 248);
      if (*(void *)(jj + 256) != v44)
      {
        float v45 = v43;
        unint64_t v46 = 0;
        float v47 = 0.0;
        if (Parameter <= 0.0) {
          float v48 = Parameter;
        }
        else {
          float v48 = 0.0;
        }
        if (Parameter < -100.0) {
          float v48 = -100.0;
        }
        unsigned int v49 = LODWORD(v48);
        if (v42 <= 0.0) {
          float v47 = v42;
        }
        if (v42 < -100.0) {
          float v47 = -100.0;
        }
        unsigned int v50 = LODWORD(v47);
        unsigned int v51 = 1;
        do
        {
          atomic_store(v49, (unsigned int *)(*(void *)(v44 + 8 * v46) + 104));
          atomic_store(v50, (unsigned int *)(*(void *)(*(void *)(jj + 248) + 8 * v46) + 128));
          AUSpatialMixerV2ChannelProcessor::setEnable(*(AUSpatialMixerV2ChannelProcessor **)(*(void *)(jj + 248) + 8 * v46), v45 != 0.0);
          unint64_t v46 = v51;
          uint64_t v44 = *(void *)(jj + 248);
          ++v51;
        }
        while (v46 < (*(void *)(jj + 256) - v44) >> 3);
      }
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&__C);
  }
  float v52 = *(uint64_t **)(jj + 248);
  CFTypeRef v53 = *(uint64_t **)(jj + 256);
  if (v52 == v53)
  {
LABEL_51:
    *a2 |= 0x10u;
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v694);
  }
  while (1)
  {
    uint64_t v54 = *v52;
    if (*(unsigned char *)(*v52 + 484) || *(unsigned char *)(v54 + 485)) {
      break;
    }
    if ((*(void *)(v54 + 144) || *(void *)(v54 + 152)) && *(_DWORD *)(v54 + 476) < *(_DWORD *)(v54 + 480)) {
      break;
    }
    if (++v52 == v53) {
      goto LABEL_51;
    }
  }
  v649 = (uint64_t *)(a4 + 224);
  if (*(void *)v646 <= (unint64_t)((uint64_t)(*(void *)(a4 + 232) - *(void *)(a4 + 224)) >> 5))
  {
    CFTypeRef v56 = *(AUSpatialMixerV2 **)(jj + 216);
    unsigned int v57 = *((_DWORD *)v56 + 84);
    unsigned int v58 = AUSpatialMixerV2::MaxFramesForInputSampleRate(v56, v12);
    if (v58 >= v57) {
      unsigned int v59 = v57;
    }
    else {
      unsigned int v59 = v58;
    }
    unsigned int v631 = v59;
    uint64_t v60 = *(void *)(jj + 216);
    if (*(unsigned char *)(v60 + 540) && *(_DWORD *)(v60 + 536) == 1)
    {
      int v644 = 0;
      double v61 = 1.0;
    }
    else
    {
      float v62 = v12 / v13 * ausdk::AUElement::GetParameter((ausdk::AUElement *)jj, 4u);
      double v61 = v62;
      if (v62 != 1.0)
      {
        uint64_t v63 = *(void *)(jj + 224);
        uint64_t v64 = *(void *)(jj + 232);
        if (v63 != v64)
        {
          unsigned int v65 = vcvtms_s32_f32(v62);
          float v66 = v62 - (float)(int)floorf(v62);
          uint64_t v67 = *(void *)(jj + 224);
          do
          {
            if (*(float *)v67 != v62)
            {
              *(_DWORD *)(v67 + 12) = v65;
              *(float *)(v67 + 16) = v66;
              *(float *)uint64_t v67 = v62;
            }
            v67 += 28;
          }
          while (v67 != v64);
        }
        unsigned int v68 = vcvtps_u32_f32((float)(*(float *)(v63 + 8) + (float)*(int *)(v63 + 4)) + (float)((float)a9 * *(float *)v63));
        int v644 = 1;
        goto LABEL_69;
      }
      int v644 = 0;
    }
    unsigned int v68 = a9;
LABEL_69:
    uint64_t v69 = jj + 344;
    double v70 = 1.0 / v61;
    *(double *)(jj + 584) = v70;
    long long v71 = *(_OWORD *)(jj + 424);
    *(_OWORD *)(jj + 472) = *(_OWORD *)(jj + 408);
    *(_OWORD *)(jj + 488) = v71;
    long long v72 = *(_OWORD *)(jj + 456);
    *(_OWORD *)(jj + 504) = *(_OWORD *)(jj + 440);
    *(_OWORD *)(jj + 520) = v72;
    *(void *)(jj + 552) = *(void *)(jj + 536);
    long long v73 = *a3;
    long long v74 = a3[1];
    long long v75 = a3[3];
    *(_OWORD *)(jj + 440) = a3[2];
    *(_OWORD *)(jj + 456) = v75;
    *(_OWORD *)(jj + 408) = v73;
    *(_OWORD *)(jj + 424) = v74;
    v629 = (_OWORD *)(jj + 344);
    if (!*(unsigned char *)(jj + 563))
    {
      if (*(unsigned char *)(jj + 592))
      {
        int v76 = *(_DWORD *)(jj + 464);
        if ((v76 & 2) == 0 && (*(unsigned char *)(jj + 528) & 2) != 0)
        {
          double v77 = 1.0;
          if ((v76 & 4) != 0) {
            double v77 = *(double *)(jj + 424);
          }
          *(void *)(jj + 416) = *(void *)(jj + 480)
                                + (unint64_t)(v77
                                                   * ((*(double *)(jj + 408) - *(double *)(jj + 472))
                                                    * 24000000.0)
                                                   / v13);
          *(_DWORD *)(jj + 464) = v76 | 2;
          uint64_t v69 = jj + 344;
        }
      }
      if (v70 != 1.0)
      {
        int v78 = *(_DWORD *)(jj + 464);
        if ((v78 & 4) != 0)
        {
          *(double *)(jj + 424) = *(double *)(jj + 424) * v70;
        }
        else
        {
          *(double *)(jj + 424) = v70;
          *(_DWORD *)(jj + 464) = v78 | 4;
        }
      }
      if (*(unsigned char *)(jj + 600))
      {
        *(unsigned char *)(jj + 600) = 0;
        *(unsigned char *)(jj + 562) = 0;
        *(void *)(jj + 576) = 0;
        if (!*(unsigned char *)(jj + 560))
        {
          uint64_t v79 = 568;
          if (!*(unsigned char *)(jj + 561)) {
            uint64_t v79 = 408;
          }
          uint64_t v80 = *(void *)(jj + v79);
          *(void *)(jj + 536) = v80;
          *(void *)(jj + 552) = v80;
        }
      }
      else
      {
        double v81 = *(double *)(jj + 408);
        double v82 = *(double *)(jj + 544);
        *(unsigned char *)(jj + 562) = v81 != v82;
        double v83 = v81 - v82;
        if (v83 < 0.0) {
          double v83 = 0.0;
        }
        *(double *)(jj + 576) = v83;
      }
      *(double *)(jj + 544) = *(double *)(jj + 408) + (double)a9;
    }
    v630 = (_OWORD *)(v69 + 64);
    unsigned int v84 = atomic_load((unsigned int *)(*(void *)(jj + 904) + 2544));
    double v622 = v12;
    if (v84 == 2
      && *(void *)(jj + 920)
      && *(float *)(jj + 932) != 0.0
      && (unsigned int v85 = atomic_load((unsigned int *)(*(void *)(jj + 1304) + 80)), v85 == 3)
      && (unsigned int v86 = atomic_load((unsigned int *)(jj + 744)), v86 == 7))
    {
      unsigned int v87 = atomic_load((unsigned int *)(*(void *)(jj + 904) + 2544));
      BOOL v645 = v87 == 2;
    }
    else
    {
      BOOL v645 = 0;
    }
    unsigned int v636 = 0;
    v640 = (void *)(a4 + 64);
    v627 = (ausdk::AUBufferList *)(jj + 144);
    v626 = (float **)(jj + 1216);
    v628 = (int8x16_t *)(jj + 296);
    uint64_t v624 = jj + 440;
    uint64_t v623 = jj + 376;
    v621 = (void *)(jj + 1608);
    v641 = (_DWORD *)(a4 + 380);
    v634 = (IR::ComplexDataCircBuffer *)(a4 + 776);
    if ((void)v638) {
      BOOL v88 = a7 == 0;
    }
    else {
      BOOL v88 = 1;
    }
    int v89 = !v88;
    int v625 = v89;
    uint64_t v647 = jj;
    while (1)
    {
      unsigned int v632 = v68;
      if (v631 >= v68) {
        uint64_t v90 = v68;
      }
      else {
        uint64_t v90 = v631;
      }
      float v91 = v630;
      if (*(unsigned char *)(jj + 563)) {
        goto LABEL_125;
      }
      int v92 = 1;
      *(_DWORD *)(jj + 400) = 1;
      int v93 = *(_DWORD *)(jj + 464);
      if ((v93 & 4) != 0)
      {
        int v92 = 5;
        *(_DWORD *)(jj + 400) = 5;
        double v94 = *(double *)(jj + 424);
        *(double *)(jj + 360) = v94;
        if ((v93 & 2) != 0)
        {
LABEL_109:
          v92 |= 2u;
          *(_DWORD *)(jj + 400) = v92;
          unint64_t v95 = *(void *)(jj + 416);
          unint64_t v96 = *(void *)(jj + 352);
          if (v96 <= v95) {
            unint64_t v96 = *(void *)(jj + 416);
          }
          *(void *)(jj + 352) = v96;
          if (*(unsigned char *)(jj + 592) && *(unsigned char *)(jj + 562) && (*(unsigned char *)(jj + 528) & 2) != 0)
          {
            double v97 = *(double *)(jj + 344)
                + floor(v622 / v94 * ((double)(v95 - *(void *)(jj + 480)) * 0.0000000416666667) + 0.5);
            *(unsigned char *)(jj + 562) = 0;
          }
          else
          {
            double v97 = *(double *)(jj + 536);
            if (!*(unsigned char *)(jj + 592)) {
              goto LABEL_118;
            }
          }
          goto LABEL_121;
        }
      }
      else
      {
        double v94 = 1.0;
        if ((v93 & 2) != 0) {
          goto LABEL_109;
        }
      }
      double v97 = *(double *)(jj + 536);
      if (!*(unsigned char *)(jj + 592))
      {
LABEL_118:
        double v98 = *(double *)(jj + 576);
        if (v98 != 0.0)
        {
          double v97 = v97 + floor(v98 / *(double *)(jj + 584) + 0.5);
          *(void *)(jj + 576) = 0;
        }
      }
LABEL_121:
      *(double *)(jj + 344) = v97;
      *(double *)(jj + 536) = v97 + (double)v90;
      if ((v93 & 8) != 0)
      {
        v92 |= 8u;
        *(_DWORD *)(jj + 400) = v92;
        *(void *)(jj + 368) = *(void *)(jj + 432);
      }
      float v91 = v629;
      if ((v93 & 0x10) != 0)
      {
        *(_DWORD *)(jj + 400) = v92 | 0x10;
        *(_OWORD *)uint64_t v623 = *(_OWORD *)v624;
        *(void *)(v623 + 16) = *(void *)(v624 + 16);
        float v91 = v629;
      }
LABEL_125:
      long long v99 = v91[1];
      *(_OWORD *)&inTimeStamp.mSampleTime = *v91;
      *(_OWORD *)&inTimeStamp.mRateScalar = v99;
      long long v100 = v91[3];
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = v91[2];
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v100;
      unsigned int v101 = AUSM::ABLBuffer::setupBufferList((AUSM::ABLBuffer *)(a4 + 248), v646[0], (*(_DWORD *)(jj + 92) & 0x20) == 0, v90, v633);
      *a2 &= ~0x10u;
      uint64_t v102 = *(void *)(jj + 216);
      vDSP_Length __N = v90;
      if (*(unsigned char *)(v102 + 540) && *(_DWORD *)(v102 + 536) == 1)
      {
        uint64_t BufferList = (unsigned int *)ausdk::AUBufferList::GetBufferList(v627);
        int v104 = BufferList;
        if (*v101 >= *BufferList) {
          uint64_t v105 = *BufferList;
        }
        else {
          uint64_t v105 = *v101;
        }
        if (v105)
        {
          UInt32 v106 = BufferList + 4;
          AudioChannelLayout v107 = v101 + 4;
          do
          {
            if (*((_DWORD *)v107 - 2) != *((_DWORD *)v106 - 2)) {
              __assert_rtn("CopyFromBufferList", "AUSpatialMixerV2InputElement.cpp", 2057, "dst.mNumberChannels == src.mNumberChannels");
            }
            int v109 = (void *)*v107;
            v107 += 2;
            long long v108 = v109;
            uint64_t v110 = *v106;
            v106 += 2;
            memcpy(v108, (const void *)(v110 + v636 * v633), __N * v633);
            --v105;
          }
          while (v105);
        }
        juint64_t j = v647;
        if (*(void *)(v647 + 616))
        {
          unsigned __int8 v111 = atomic_load((unsigned __int8 *)(*(void *)(v647 + 904) + 84));
          BOOL v88 = (v111 & 1) == 0;
          __int16 v112 = (uint64_t (*)(void, vDSP_Length, unsigned int *))MEMORY[0x1E4F4EA80];
          if (v88) {
            __int16 v112 = (uint64_t (*)(void, vDSP_Length, unsigned int *))MEMORY[0x1E4F4EA88];
          }
          int v113 = v112(*(void *)(v647 + 616), __N, v104);
          if (v113)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            AudioChannelLayout v114 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v115 = v621;
              if (*(char *)(v647 + 1631) < 0) {
                unint64_t v115 = (void *)*v621;
              }
              __C.UInt32 mNumberBuffers = 136315650;
              *(void *)(&__C.mNumberBuffers + 1) = v115;
              LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
              *(void *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "CopyFromBufferList";
              HIWORD(__C.mBuffers[0].mData) = 1024;
              LODWORD(p_Start) = v113;
              _os_log_debug_impl(&dword_1BB0CE000, v114, OS_LOG_TYPE_DEBUG, "[%s|%s] Error writing input data to file, %d", (uint8_t *)&__C, 0x1Cu);
            }
          }
        }
      }
      else if (AUSpatialMixerV2InputElement::PullSharedInput((AUSpatialMixerV2InputElement *)jj, (AudioBufferList *)v101, a2, &inTimeStamp, *(unsigned int *)(jj + 612), v90))
      {
        goto LABEL_763;
      }
      uint64_t v116 = *(void *)(a4 + 328);
      uint64_t v117 = *(void *)(a4 + 336);
      if (*(unsigned char *)(jj + 1476))
      {
        unint64_t v118 = v117 - v116;
        uint64_t v119 = (void *)a7;
        uint64_t v120 = (void *)*((void *)&v638 + 1);
        unint64_t v121 = (void *)v638;
        unsigned int v122 = v636;
        if (((v117 - v116) & 0x7FFFFFFF8) != 0)
        {
          uint64_t v123 = 0;
          unint64_t v124 = v118 >> 3;
          uint64_t v125 = (v118 >> 3);
          unint64_t v126 = v124 - 1;
          do
            *(void *)(*(void *)(a4 + 352) + 8 * v123++) = *(void *)(*(void *)(a4 + 328)
                                                                        + 8 * v126--)
                                                            + 4 * v636;
          while (v125 != v123);
        }
        unint64_t v127 = *(void *)(a4 + 496) - *(void *)(a4 + 488);
        if ((v127 & 0x7FFFFFFF8) != 0)
        {
          uint64_t v128 = 0;
          unint64_t v129 = v127 >> 3;
          uint64_t v130 = (v127 >> 3);
          unint64_t v131 = v129 - 1;
          do
            *(void *)(*(void *)(a4 + 512) + 8 * v128++) = *(void *)(*(void *)(a4 + 488)
                                                                        + 8 * v131--)
                                                            + 4 * v636;
          while (v130 != v128);
        }
        unint64_t v132 = *(void *)(a4 + 592) - *(void *)(a4 + 584);
        if ((v132 & 0x7FFFFFFF8) != 0)
        {
          uint64_t v133 = 0;
          unint64_t v134 = v132 >> 3;
          uint64_t v135 = (v132 >> 3);
          unint64_t v136 = v134 - 1;
          do
            *(void *)(*(void *)(a4 + 608) + 8 * v133++) = *(void *)(*(void *)(a4 + 584)
                                                                        + 8 * v136--)
                                                            + 4 * v636;
          while (v135 != v133);
        }
        unint64_t v137 = *(void *)(a4 + 688) - *(void *)(a4 + 680);
        if ((v137 & 0x7FFFFFFF8) != 0)
        {
          uint64_t v138 = 0;
          unint64_t v139 = v137 >> 3;
          uint64_t v140 = (v137 >> 3);
          unint64_t v141 = v139 - 1;
          do
            *(void *)(*(void *)(a4 + 704) + 8 * v138++) = *(void *)(*(void *)(a4 + 680)
                                                                        + 8 * v141--)
                                                            + 4 * v636;
          while (v140 != v138);
        }
        unint64_t v142 = *(void *)(a4 + 400) - *(void *)(a4 + 392);
        if ((v142 & 0x7FFFFFFF8) != 0)
        {
          uint64_t v143 = 0;
          unint64_t v144 = v142 >> 3;
          uint64_t v145 = (v142 >> 3);
          unint64_t v146 = v144 - 1;
          do
            *(void *)(*(void *)(a4 + 416) + 8 * v143++) = *(void *)(*(void *)(a4 + 392)
                                                                        + 8 * v146--)
                                                            + 4 * v636;
          while (v145 != v143);
        }
      }
      else
      {
        uint64_t v119 = (void *)a7;
        uint64_t v120 = (void *)*((void *)&v638 + 1);
        unint64_t v121 = (void *)v638;
        unsigned int v122 = v636;
        if (v117 != v116)
        {
          unint64_t v147 = 0;
          unsigned int v148 = 1;
          do
          {
            *(void *)(*(void *)(a4 + 352) + 8 * v147) = *(void *)(v116 + 8 * v147) + 4 * v636;
            unint64_t v147 = v148;
            uint64_t v116 = *(void *)(a4 + 328);
            ++v148;
          }
          while (v147 < (*(void *)(a4 + 336) - v116) >> 3);
        }
        uint64_t v149 = *(void *)(a4 + 488);
        if (*(void *)(a4 + 496) != v149)
        {
          unint64_t v150 = 0;
          unsigned int v151 = 1;
          do
          {
            *(void *)(*(void *)(a4 + 512) + 8 * v150) = *(void *)(v149 + 8 * v150) + 4 * v636;
            unint64_t v150 = v151;
            uint64_t v149 = *(void *)(a4 + 488);
            ++v151;
          }
          while (v150 < (*(void *)(a4 + 496) - v149) >> 3);
        }
        uint64_t v152 = *(void *)(a4 + 584);
        if (*(void *)(a4 + 592) != v152)
        {
          unint64_t v153 = 0;
          unsigned int v154 = 1;
          do
          {
            *(void *)(*(void *)(a4 + 608) + 8 * v153) = *(void *)(v152 + 8 * v153) + 4 * v636;
            unint64_t v153 = v154;
            uint64_t v152 = *(void *)(a4 + 584);
            ++v154;
          }
          while (v153 < (*(void *)(a4 + 592) - v152) >> 3);
        }
        uint64_t v155 = *(void *)(a4 + 680);
        if (*(void *)(a4 + 688) != v155)
        {
          unint64_t v156 = 0;
          unsigned int v157 = 1;
          do
          {
            *(void *)(*(void *)(a4 + 704) + 8 * v156) = *(void *)(v155 + 8 * v156) + 4 * v636;
            unint64_t v156 = v157;
            uint64_t v155 = *(void *)(a4 + 680);
            ++v157;
          }
          while (v156 < (*(void *)(a4 + 688) - v155) >> 3);
        }
        uint64_t v158 = *(void *)(a4 + 392);
        if (*(void *)(a4 + 400) != v158)
        {
          unint64_t v159 = 0;
          unsigned int v160 = 1;
          do
          {
            *(void *)(*(void *)(a4 + 416) + 8 * v159) = *(void *)(v158 + 8 * v159) + 4 * v636;
            unint64_t v159 = v160;
            uint64_t v158 = *(void *)(a4 + 392);
            ++v160;
          }
          while (v159 < (*(void *)(a4 + 400) - v158) >> 3);
        }
      }
      if (v121) {
        v121[4] = *v121 + 4 * v122;
      }
      if (v120) {
        v120[4] = *v120 + 4 * v122;
      }
      if (v119) {
        v119[4] = *v119 + 4 * v122;
      }
      if (v646[0])
      {
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        do
        {
          uint64_t v164 = *v649;
          unint64_t v165 = (float **)(*v649 + 32 * v163);
          unint64_t v166 = *(unsigned int *)(v647 + 108);
          if (v166 <= v163 || (*(unsigned char *)a2 & 0x10) != 0)
          {
            vDSP_vclr(*v165, 1, __N);
          }
          else
          {
            int v167 = *(_DWORD *)(v647 + 92);
            if (v167)
            {
              if (v166 != 1 && (*(_DWORD *)(v647 + 92) & 0x20) == 0)
              {
                if (__N)
                {
                  BOOL v176 = *v165;
                  __n128 v177 = (float *)(*((void *)v101 + 2) + v162);
                  int v178 = __N;
                  do
                  {
                    *v176++ = *v177;
                    v177 += v166;
                    --v178;
                  }
                  while (v178);
                }
              }
              else
              {
                memcpy(*v165, *(const void **)&v101[4 * v163 + 4], 4 * __N);
              }
              goto LABEL_219;
            }
            int v168 = *(_DWORD *)(v647 + 112) >> 3;
            __C.UInt32 mNumberBuffers = 1;
            __C.mBuffers[0].mNumberChannels = 1;
            __A.UInt32 mNumberBuffers = 1;
            __A.mBuffers[0].mNumberChannels = 1;
            char v169 = *v165;
            __A.mBuffers[0].mData = *v165;
            __A.mBuffers[0].mDataByteSize = 4 * __N;
            if (v168 == 2)
            {
              if (v166 == 1 || (v167 & 0x20) != 0)
              {
                float v186 = &v101[4 * v163];
                __C.mBuffers[0].mData = (void *)*((void *)v186 + 2);
                UInt32 v183 = v186[3];
              }
              else
              {
                uint64_t v179 = (_WORD *)*v640;
                if (__N)
                {
                  int v180 = (_WORD *)(*((void *)v101 + 2) + v161);
                  long long v181 = (_WORD *)*v640;
                  vDSP_Length v182 = __N;
                  do
                  {
                    *v181++ = *v180;
                    v180 += v166;
                    --v182;
                  }
                  while (v182);
                }
                __C.mBuffers[0].mData = v179;
                UInt32 v183 = 2 * __N;
              }
              __C.mBuffers[0].mDataByteSize = v183;
              uint64_t v185 = (AudioConverterRef *)(*(void *)(v647 + 216) + 2904);
LABEL_218:
              AudioConverterConvertComplexBuffer(*v185, __N, &__C, &__A);
LABEL_219:
              uint64_t v187 = *(void *)(v647 + 1264);
              if (v166 <= (*(void *)(v647 + 1272) - v187) >> 3)
              {
                float v188 = *(IR::FixedIntegerDelay **)(v187 + 8 * v163);
                if (v188) {
                  IR::FixedIntegerDelay::process(v188, *v165, *v165, __N);
                }
              }
              __C.UInt32 mNumberBuffers = 0;
              vDSP_svesq(*v165, 1, (float *)&__C.mNumberBuffers, __N);
              *(unsigned char *)(v164 + 32 * v163 + 24) = *(float *)&__C.mNumberBuffers == 0.0;
              goto LABEL_223;
            }
            if (v168 == 1)
            {
              if (v166 == 1 || (v167 & 0x20) != 0)
              {
                float v184 = &v101[4 * v163];
                __C.mBuffers[0].mData = (void *)*((void *)v184 + 2);
                UInt32 v174 = v184[3];
              }
              else
              {
                long long v170 = (_WORD *)*v640;
                if (__N)
                {
                  uint64_t v171 = *((void *)v101 + 2);
                  float v172 = (unsigned char *)*v640;
                  vDSP_Length v173 = __N;
                  do
                  {
                    *v172++ = *(unsigned char *)(v171 + v163);
                    v171 += v166;
                    --v173;
                  }
                  while (v173);
                }
                __C.mBuffers[0].mData = v170;
                UInt32 v174 = __N;
              }
              __C.mBuffers[0].mDataByteSize = v174;
              uint64_t v185 = (AudioConverterRef *)(*(void *)(v647 + 216) + 2896);
              goto LABEL_218;
            }
            vDSP_vclr(v169, 1, __N);
          }
          *(unsigned char *)(v164 + 32 * v163 + 24) = 1;
LABEL_223:
          ++v163;
          v162 += 4;
          v161 += 2;
        }
        while (v163 != *(void *)v646);
      }
      juint64_t j = v647;
      unsigned __int8 v189 = atomic_load((unsigned __int8 *)(v647 + 880));
      if (v189)
      {
        unsigned __int8 v190 = atomic_load((unsigned __int8 *)(v647 + 1208));
        if (v190)
        {
          v692 = v626;
          int v191 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)v626);
          char v693 = v191;
          if (v191)
          {
            uint64_t v192 = *(void *)(v647 + 1176);
            if (v192)
            {
              if (*(unsigned char *)(v192 + 756))
              {
                float v193 = *(unsigned int **)(v647 + 1184);
                uint64_t v194 = *(void *)(a4 + 224);
                uint32_t v195 = *(CLiteMatrix **)(v194 + 32 * *v193);
                *(void *)&__C.UInt32 mNumberBuffers = v195;
                uint64_t v196 = *(CLiteMatrix **)(v194 + 32 * v193[1]);
                float v197 = *(void **)(a4 + 96);
                *(void *)&__C.mBuffers[0].mNumberChannels = v196;
                __C.mBuffers[0].mData = v197;
                unsigned int v198 = *(_DWORD *)(v192 + 752);
                if (v198 >= __N) {
                  unint64_t v199 = __N;
                }
                else {
                  unint64_t v199 = v198;
                }
                if (v199)
                {
                  uint64_t v685 = v192 + 616;
                  uint64_t v200 = v192 + 568;
                  float __B = (DSPSplitComplex *)(v192 + 584);
                  v674 = (DSPSplitComplex *)(v192 + 600);
                  LODWORD(v201) = *(_DWORD *)(v192 + 744);
                  uint64_t v202 = v192 + 24;
                  unsigned int v203 = *(_DWORD *)(v192 + 736);
                  unsigned int v204 = v199;
                  v671 = (CLiteMatrix *)v199;
                  v669 = v195;
                  v667 = v196;
                  do
                  {
                    if (v204 < v201) {
                      LODWORD(v201) = v204;
                    }
                    unsigned int v681 = v204;
                    unsigned int v205 = v199 - v204;
                    memcpy((void *)(*(void *)(v192 + 616) + 4 * v203), (char *)v195 + 4 * (v199 - v204), 4 * v201);
                    memcpy((void *)(*(void *)(v192 + 640) + 4 * *(unsigned int *)(v192 + 736)), (char *)v196 + 4 * v205, 4 * v201);
                    int v679 = v201;
                    unsigned int v203 = *(_DWORD *)(v192 + 736) + v201;
                    *(_DWORD *)(v192 + 736) = v203;
                    uint64_t v201 = *(unsigned int *)(v192 + 744);
                    if (v203 >= v201)
                    {
                      uint64_t v206 = 0;
                      int v207 = *(_DWORD *)(v192 + 748);
                      uint64_t v208 = (v207 - v201);
                      float v209 = 1.0 / (float)(2 * v207);
                      char v210 = 1;
                      do
                      {
                        char v211 = v210;
                        memcpy(*(void **)(v202 + 24 * v206), (const void *)(*(void *)(v202 + 24 * v206) + 4 * v201), 4 * v208);
                        memcpy((void *)(*(void *)(v202 + 24 * v206) + 4 * v208), *(const void **)(v685 + 24 * v206), 4 * v201);
                        vDSP_vmul(*(const float **)(v202 + 24 * v206), 1, *(const float **)v192, 1, *(float **)(v192 + 440), 1, *(unsigned int *)(v192 + 748));
                        vDSP_ctoz(*(const DSPComplex **)(v192 + 440), 2, (const DSPSplitComplex *)(v200 + 16 * v206), 1, *(unsigned int *)(v192 + 744));
                        uint64_t v213 = *(MultiRadixRealFFT **)(v192 + 464);
                        if (v213) {
                          MultiRadixRealFFT::RealInPlaceTransform(v213, (DSPSplitComplex *)(v200 + 16 * v206), 1, v212);
                        }
                        *(float *)&__A.UInt32 mNumberBuffers = v209;
                        vDSP_vsmul(*(const float **)(v200 + 16 * v206), 1, (const float *)&__A.mNumberBuffers, *(float **)(v200 + 16 * v206), 1, *(unsigned int *)(v192 + 744));
                        uint64_t v214 = v200 + 16 * v206;
                        float v215 = *(float **)(v214 + 8);
                        v214 += 8;
                        vDSP_vsmul(v215, 1, (const float *)&__A.mNumberBuffers, v215, 1, *(unsigned int *)(v192 + 744));
                        char v210 = 0;
                        float v216 = *(_DWORD **)v214;
                        *(_DWORD *)(v192 + 432 + 4 * v206) = **(_DWORD **)v214;
                        *float v216 = 0;
                        uint64_t v206 = 1;
                      }
                      while ((v211 & 1) != 0);
                      vDSP_Length v217 = *(unsigned int *)(v192 + 744);
                      uint64_t v218 = *(void *)(v192 + 168);
                      *(void *)&__A.UInt32 mNumberBuffers = *(void *)(v192 + 144);
                      *(void *)&__A.mBuffers[0].mNumberChannels = v218;
                      __n128 v219 = *(float **)(v192 + 216);
                      v697.realp = *(float **)(v192 + 192);
                      v697.imagp = v219;
                      float v220 = *(float **)(v192 + 240);
                      CFArrayRef v221 = *(float **)(v192 + 264);
                      float v222 = (const DSPSplitComplex *)(v192 + 600);
                      vDSP_zvadd((const DSPSplitComplex *)(v192 + 568), 1, __B, 1, v674, 1, v217);
                      vDSP_zvmul(v222, 1, v222, 1, &v697, 1, v217, 1);
                      LODWORD(__Start) = -1518338048;
                      vDSP_viclip(v697.realp, 1, (const float *)&__Start, &kEPS, v697.realp, 1, v217);
                      vDSP_zvmul((const DSPSplitComplex *)(v192 + 568), 1, __B, 1, (const DSPSplitComplex *)&__A, 1, v217, 1);
                      vDSP_zvdiv(&v697, 1, (const DSPSplitComplex *)&__A, 1, (const DSPSplitComplex *)&__A, 1, v217);
                      vDSP_zvneg((const DSPSplitComplex *)&__A, 1, (const DSPSplitComplex *)&__A, 1, v217);
                      float v702 = 0.25;
                      vDSP_vsadd(*(const float **)&__A.mNumberBuffers, 1, &v702, *(float **)&__A.mNumberBuffers, 1, v217);
                      ScottySTFTUpmixer::complexSquareRootDouble((const float **)&__A, &v697.realp, v217, (double **)(v192 + 472));
                      float v701 = 0.5;
                      vDSP_vsadd(v697.realp, 1, &v701, *(float **)&__A.mNumberBuffers, 1, v217);
                      vDSP_zvabs((const DSPSplitComplex *)&__A, 1, v220, 1, v217);
                      vDSP_zvneg(&v697, 1, (const DSPSplitComplex *)&__A, 1, v217);
                      vDSP_vsadd(*(const float **)&__A.mNumberBuffers, 1, &v701, *(float **)&__A.mNumberBuffers, 1, v217);
                      vDSP_zvabs((const DSPSplitComplex *)&__A, 1, v221, 1, v217);
                      vDSP_vmin(v220, 1, v221, 1, v220, 1, v217);
                      ScottySTFTUpmixer::inphaseICC((const DSPSplitComplex *)(v192 + 568), __B, *(DSPSplitComplex **)&__A.mBuffers[0].mNumberChannels, *(float **)&__A.mNumberBuffers, (float *)v217);
                      vDSP_vmul(v220, 1, *(const float **)&__A.mNumberBuffers, 1, v220, 1, v217);
                      vDSP_zrvmul(v222, 1, v220, 1, v222, 1, v217);
                      vDSP_zvsub((const DSPSplitComplex *)(v192 + 568), 1, v674, 1, (const DSPSplitComplex *)(v192 + 568), 1, v217);
                      vDSP_zvsub(__B, 1, v674, 1, __B, 1, v217);
                      unsigned int v700 = 1068827891;
                      vDSP_vsmul(v222->realp, 1, (const float *)&v700, v222->realp, 1, v217);
                      vDSP_vsmul(*(const float **)(v192 + 608), 1, (const float *)&v700, *(float **)(v192 + 608), 1, v217);
                      uint64_t v224 = 0;
                      uint64_t v225 = 0;
                      for (uint64_t i = 0; i != 3; ++i)
                      {
                        uint64_t v227 = *(unsigned int *)(v192 + 740);
                        uint64_t v228 = *(void *)(v192 + v224 + 664);
                        if ((i & 0xFFFFFFFE) == 0)
                        {
                          float v223 = *(float *)(v192 + 4 * i + 432);
                          **(float **)(v192 + v225 + 576) = v223;
                        }
                        float v229 = *(MultiRadixRealFFT **)(v192 + 464);
                        if (v229) {
                          MultiRadixRealFFT::RealInPlaceTransform(v229, (DSPSplitComplex *)(v192 + v225 + 568), -1, v223);
                        }
                        vDSP_ztoc((const DSPSplitComplex *)(v192 + v225 + 568), 1, *(DSPComplex **)(v192 + 440), 2, *(unsigned int *)(v192 + 744));
                        __A.UInt32 mNumberBuffers = 0x40000000;
                        vDSP_vsmul(*(const float **)(v192 + 440), 1, (const float *)&__A.mNumberBuffers, *(float **)(v192 + 440), 1, *(unsigned int *)(v192 + 748));
                        vDSP_vmul(*(const float **)(v192 + 440), 1, *(const float **)v192, 1, *(float **)(v192 + 440), 1, *(unsigned int *)(v192 + 748));
                        vDSP_vadd(*(const float **)(v192 + 440), 1, (const float *)(*(void *)(v192 + v224 + 72) + 4 * *(unsigned int *)(v192 + 744)), 1, *(float **)(v192 + 440), 1, (*(_DWORD *)(v192 + 748) - *(_DWORD *)(v192 + 744)));
                        memcpy(*(void **)(v192 + v224 + 72), *(const void **)(v192 + 440), 4 * *(unsigned int *)(v192 + 748));
                        memcpy((void *)(v228 + 4 * v227), *(const void **)(v192 + v224 + 72), 4 * *(unsigned int *)(v192 + 744));
                        v225 += 16;
                        v224 += 24;
                      }
                      uint64_t v230 = 0;
                      char v231 = 1;
                      uint64_t v196 = v667;
                      do
                      {
                        char v232 = v231;
                        uint64_t v233 = v685 + 24 * v230;
                        int v234 = (const void *)(*(void *)v233 + 4 * *(unsigned int *)(v192 + 744));
                        memmove(*(void **)v233, v234, (*(void *)(v233 + 8) - (void)v234) & 0xFFFFFFFFFFFFFFFCLL);
                        char v231 = 0;
                        uint64_t v230 = 1;
                      }
                      while ((v232 & 1) != 0);
                      LODWORD(v201) = *(_DWORD *)(v192 + 744);
                      unsigned int v203 = *(_DWORD *)(v192 + 736) - v201;
                      *(_DWORD *)(v192 + 736) = v203;
                      *(_DWORD *)(v192 + 740) += v201;
                      juint64_t j = v647;
                      unint64_t v199 = (unint64_t)v671;
                      uint32_t v195 = v669;
                    }
                    unsigned int v204 = v681 - v679;
                  }
                  while (v681 != v679);
                }
                uint64_t v235 = 0;
                CFArrayRef v236 = (const void **)(v192 + 664);
                do
                {
                  memcpy(*(void **)((char *)&__C.mNumberBuffers + v235), *v236, 4 * v199);
                  CFIndex v237 = (char *)*v236;
                  CFIndex v238 = (char *)v236[1];
                  v236 += 3;
                  memmove(v237, &v237[4 * v199], (unint64_t)&v238[-4 * v199 - (void)v237] & 0xFFFFFFFFFFFFFFFCLL);
                  v235 += 8;
                }
                while (v235 != 24);
                unsigned int v239 = *(_DWORD *)(v192 + 740);
                BOOL v240 = v239 >= v199;
                unsigned int v241 = v239 - v199;
                if (v240) {
                  *(_DWORD *)(v192 + 740) = v241;
                }
                if (v646[0])
                {
                  uint64_t v242 = 0;
                  unsigned int v243 = 0;
                  uint64_t v244 = 24;
                  do
                  {
                    float v245 = *(_DWORD **)(jj + 1184);
                    if (v242 != *v245 && v242 != v245[1])
                    {
                      uint64_t v246 = *(void *)(jj + 1232);
                      if (v243 < (unint64_t)((*(void *)(jj + 1240) - v246) >> 3))
                      {
                        IR::FixedIntegerDelay::process(*(IR::FixedIntegerDelay **)(v246 + 8 * v243++), *(float **)(*v649 + v244 - 24), *(float **)(*v649 + v244 - 24), __N);
                        float v245 = *(_DWORD **)(jj + 1184);
                      }
                    }
                    uint64_t v247 = v245[2];
                    uint64_t v248 = *v649;
                    if (v242 == v247)
                    {
                      vDSP_vadd(*(const float **)(v248 + v244 - 24), 1, *(const float **)(a4 + 96), 1, *(float **)(v248 + v244 - 24), 1, __N);
                      uint64_t v248 = *v649;
                    }
                    __A.UInt32 mNumberBuffers = 0;
                    vDSP_svesq(*(const float **)(v248 + v244 - 24), 1, (float *)&__A.mNumberBuffers, __N);
                    *(unsigned char *)(*v649 + v244) = *(float *)&__A.mNumberBuffers == 0.0;
                    ++v242;
                    v244 += 32;
                  }
                  while (*(void *)v646 != v242);
                }
              }
            }
          }
          std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v692);
        }
      }
      uint64_t v249 = *(void *)(jj + 912);
      vDSP_Length v250 = *(void ***)(v249 + 152);
      if (v250)
      {
        NeuralTranscoder::process(v250, v649, __N);
      }
      else
      {
        uint64_t v251 = *(void ***)(v249 + 160);
        if (v251) {
          NeuralRAD::process(v251, v649, __N);
        }
      }
      unsigned int v648 = a9 - v636;
      float v691 = 1.0 / (float)__N;
      float __Step = -v691;
      Float64 v252 = *(uint64_t **)(jj + 256);
      if (v252 == *(uint64_t **)(jj + 248)) {
        goto LABEL_567;
      }
      uint64_t v253 = 0;
      unsigned int v254 = 0;
      do
      {
        if (*(void *)(jj + 272))
        {
          if (*(unsigned char *)(jj + 316))
          {
            if (AUSM::MatrixMix::process(*(int **)(jj + 912), (const void ***)v649, v254, (uint64_t)v640, __N, **(void **)(jj + 296), *(_DWORD *)(jj + 312)))
            {
              int v615 = 2386;
              goto LABEL_785;
            }
            if (AUSM::MatrixMix::process(*(int **)(jj + 912), (const void ***)v649, v254, a4 + 32, __N, **(void **)(jj + 304), *(_DWORD *)(jj + 312)))
            {
              int v615 = 2390;
              goto LABEL_785;
            }
            __C.UInt32 mNumberBuffers = 0;
            __A.UInt32 mNumberBuffers = 1065353216;
            vDSP_vrampmul(*(const float **)(a4 + 64), 1, (float *)&__A.mNumberBuffers, &__Step, *(float **)a4, 1, __N);
            vDSP_vrampmuladd(*(const float **)(a4 + 32), 1, (float *)&__C.mNumberBuffers, &v691, *(float **)a4, 1, __N);
            if (*(unsigned char *)(a4 + 88)) {
              BOOL v255 = *(unsigned char *)(a4 + 56) == 0;
            }
            else {
              BOOL v255 = 1;
            }
            char v256 = !v255;
            *(unsigned char *)(a4 + 24) = v256;
          }
          else
          {
            if (*(unsigned char *)(jj + 317))
            {
              uint64_t v257 = **(void **)(jj + 296);
              unsigned int v258 = *(_DWORD *)(jj + 312);
            }
            else
            {
              uint64_t v257 = 0;
              unsigned int v258 = 0;
            }
            if (AUSM::MatrixMix::process(*(int **)(jj + 912), (const void ***)v649, v254, a4, __N, v257, v258))
            {
              int v615 = 2403;
LABEL_785:
              __assert_rtn("Process", "AUSpatialMixerV2InputElement.cpp", v615, "locErr == noErr");
            }
          }
        }
        else if (AUSM::MatrixMix::process(*(int **)(jj + 912), (const void ***)v649, v254, a4, __N, 0, 0))
        {
          int v615 = 2407;
          goto LABEL_785;
        }
        if (!v644)
        {
          uint64_t v282 = a4;
          goto LABEL_339;
        }
        uint64_t v259 = *(void *)(jj + 224);
        vDSP_Length v260 = *(float **)a4;
        uint64_t v261 = v259 + 28 * v253;
        unsigned int v264 = *(_DWORD *)(v261 + 4);
        uint64_t v262 = v261 + 4;
        uint32_t v263 = (float *)v264;
        uint64_t v265 = *(void *)(a4 + 32);
        float v266 = *(float *)(v262 + 4);
        int v267 = *(_DWORD *)(v262 + 8);
        float v268 = *(float *)(v262 + 12);
        uint64_t v269 = v259 + 28 * v253;
        CFArrayRef v270 = (float *)(v269 + 20);
        CFIndex v271 = (float *)(v269 + 24);
        if (!v264)
        {
          CFArrayRef v270 = (float *)(v259 + 28 * v253 + 24);
          CFIndex v271 = *(float **)a4;
        }
        if ((int)v263 >= 1)
        {
          CFArrayRef v270 = &v260[v263 - 1];
          CFIndex v271 = &v260[(void)v263];
        }
        float v272 = *v271;
        float v273 = *v270;
        BOOL v274 = (int)v263 >= (int)__N || (int)v648 <= 0;
        int v275 = !v274;
        if (v267)
        {
          if (v275)
          {
            uint64_t v276 = 0;
            uint64_t v277 = v259 + 28 * v253;
            float v278 = (float *)(v277 + 20);
            float v279 = (float *)(v277 + 24);
            while (1)
            {
              *(float *)(v265 + 4 * v276++) = v273 + (float)(v266 * (float)(v272 - v273));
              LODWORD(v263) = v263 + v267;
              float v266 = v268 + v266;
              if (v266 >= 1.0)
              {
                float v266 = v266 + -1.0;
                LODWORD(v263) = v263 + 1;
              }
              if ((int)v263 < 1)
              {
                if (v263) {
                  uint64_t v280 = v278;
                }
                else {
                  uint64_t v280 = v279;
                }
                if (v263) {
                  double v281 = v279;
                }
                else {
                  double v281 = v260;
                }
              }
              else
              {
                if ((int)v263 >= (int)__N)
                {
                  unsigned int v648 = v276;
                  goto LABEL_333;
                }
                uint64_t v280 = &v260[v263 - 1];
                double v281 = &v260[v263];
              }
              float v272 = *v281;
              float v273 = *v280;
              if (v648 == v276) {
                goto LABEL_333;
              }
            }
          }
LABEL_332:
          unsigned int v648 = 0;
          goto LABEL_333;
        }
        if (!v275) {
          goto LABEL_332;
        }
        uint64_t v283 = 0;
        uint64_t v284 = v259 + 28 * v253;
        uint32_t v285 = (float *)(v284 + 20);
        uint64_t v286 = (float *)(v284 + 24);
        while (1)
        {
          *(float *)(v265 + 4 * v283++) = v273 + (float)(v266 * (float)(v272 - v273));
          float v266 = v268 + v266;
          if (v266 >= 1.0) {
            break;
          }
LABEL_330:
          if (v648 == v283) {
            goto LABEL_333;
          }
        }
        int v287 = v263 + 1;
        float v266 = v266 + -1.0;
        if ((v263 & 0x80000000) != 0)
        {
          if (v263 == -1) {
            uint32_t v263 = v260;
          }
          else {
            uint32_t v263 = v286;
          }
          if (v287) {
            BOOL v288 = v285;
          }
          else {
            BOOL v288 = v286;
          }
          goto LABEL_329;
        }
        if (v287 < (int)__N)
        {
          BOOL v288 = &v260[v263];
          uint32_t v263 = &v260[v287];
LABEL_329:
          float v273 = *v288;
          float v272 = *v263;
          LODWORD(v263) = v287;
          goto LABEL_330;
        }
        LODWORD(v263) = v263 + 1;
        unsigned int v648 = v283;
LABEL_333:
        if (__N >= 2)
        {
          uint64_t v289 = v259 + 28 * v253;
          *(float *)(v289 + 20) = v260[(__N - 2)];
          float v290 = v260[(__N - 1)];
          goto LABEL_337;
        }
        if (__N == 1)
        {
          uint64_t v289 = v259 + 28 * v253;
          *(_DWORD *)(v289 + 20) = *(_DWORD *)(v289 + 24);
          float v290 = *v260;
LABEL_337:
          *(float *)(v289 + 24) = v290;
        }
        *(_DWORD *)uint64_t v262 = v263 - __N;
        *(float *)(v262 + 4) = v266;
        *(unsigned char *)(a4 + 56) = *(unsigned char *)(a4 + 24);
        uint64_t v282 = a4 + 32;
LABEL_339:
        float v689 = 0.0;
        int v291 = (*(uint64_t (**)(void, uint64_t, void, void, float *))(**(void **)(jj + 216) + 144))(*(void *)(jj + 216), 9, 0, 0, &v689);
        float v292 = 1.0;
        if (!v291) {
          float v292 = __exp10f(v689 * 0.05);
        }
        float v689 = v292;
        uint64_t v293 = *(void *)(*(void *)(jj + 248) + 8 * v253);
        if (v645 && (uint64_t v294 = *(void *)(jj + 920), *(_DWORD *)(v294 + 44) > v254)) {
          float v295 = (float *)(*(void *)(v294 + 248) + 4 * (*(_DWORD *)(v294 + 344) + *(_DWORD *)(v294 + 392) * v254));
        }
        else {
          float v295 = 0;
        }
        float v701 = v292;
        unsigned int v700 = v648;
        *(void *)&__A.UInt32 mNumberBuffers = v293 + 468;
        int v296 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v293 + 468));
        LOBYTE(__A.mBuffers[0].mNumberChannels) = v296;
        if (!v296)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          int v301 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          {
            float32x2_t v302 = (void *)(v293 + 592);
            if (*(char *)(v293 + 615) < 0) {
              float32x2_t v302 = (void *)*v302;
            }
            __C.UInt32 mNumberBuffers = 136315394;
            *(void *)(&__C.mNumberBuffers + 1) = v302;
            LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
            *(void *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "processAccumulating";
            _os_log_debug_impl(&dword_1BB0CE000, v301, OS_LOG_TYPE_DEBUG, "[%s|%s] Channel processing dropped because the spatializer is locked", (uint8_t *)&__C, 0x16u);
          }
          goto LABEL_566;
        }
        uint64_t v297 = *(void *)(v293 + 616);
        if (v297) {
          goto LABEL_367;
        }
        uint64_t v298 = atomic_load((unsigned int *)(*(void *)(*(void *)(v293 + 568) + 232) + 2540));
        if (AUSM::ChannelGeometry::update((float32x4_t **)(v293 + 640), 0))
        {
          AUSpatialMixerV2ChannelProcessor::updateSpatializationParameters((AUSpatialMixerV2ChannelProcessor *)v293);
          if (v298) {
            atomic_store(1u, (unsigned __int8 *)(v293 + 464));
          }
        }
        unsigned __int8 v299 = atomic_load((unsigned __int8 *)(v293 + 464));
        if (v299)
        {
          switch(v298)
          {
            case 1:
              float v300 = (long long *)(v293 + 704);
              break;
            case 2:
              float v300 = (long long *)(v293 + 832);
              break;
            case 3:
              float v300 = (long long *)(v293 + 960);
              break;
            case 4:
              float v300 = (long long *)(v293 + 1088);
              break;
            default:
              float v300 = (long long *)(v293 + 1216);
              break;
          }
          atomic_store(AUSM::AsymmetricAccessContainer<AUSM::ObjectParameters>::setNonBlocking((_OWORD *)(v293 + 320), v300) ^ 1, (unsigned __int8 *)(v293 + 464));
        }
        uint64_t v297 = *(void *)(v293 + 616);
        if (v297) {
LABEL_367:
        }
          long long v303 = (float *)(v297 + 32);
        else {
          long long v303 = (float *)(v293 + 1344);
        }
        if ((*(unsigned char *)(v282 + 24)
           || (float)(v303[2] * v303[3]) == 0.0
           || !*(unsigned char *)(v293 + 484) && !*(unsigned char *)(v293 + 485))
          && *(_DWORD *)(v293 + 476) > *(_DWORD *)(v293 + 480))
        {
          unsigned int v304 = atomic_load((unsigned int *)(*(void *)(*(void *)(v293 + 568) + 232) + 1256));
          if (!v304 || v700 != 0)
          {
            if (v295) {
              vDSP_vclr(v295, 1, v700);
            }
            goto LABEL_566;
          }
        }
        float v306 = (*(float (**)(void))(**(void **)(v293 + 176) + 296))(*(void *)(v293 + 176));
        float v308 = v303[3];
        float v307 = v303[4];
        float v309 = *v303;
        float v310 = (float)(v303[1] * v308) * v303[12];
        float v311 = v303[8];
        float v312 = (float)((float)((float)(1.0 - v306) * v307) * v303[6]) * v311;
        float v313 = (float)((float)(1.0 - v306) * v303[5]) * v303[7];
        float v314 = v303[10];
        *(float *)(v293 + 252) = v310 * (float)((float)(v313 * v311) * v314);
        float v315 = v306 + (float)(v312 * v314);
        float v316 = v303[9];
        *(float *)(v293 + 268) = (float)((float)(v303[2] * v308) * v303[13])
                               * (float)((float)((float)((float)((float)(1.0 - v306) * v316) * v303[11]) * v307)
                                       * v303[6]);
        *(float *)(v293 + 284) = (float)(v310 * v303[13]) * (float)((float)(v313 * v316) * v303[11]);
        uint32_t v317 = (unsigned int *)(a4 + 380);
        if (*(_DWORD *)(v293 + 476) > *(_DWORD *)(v293 + 480)
          && !atomic_load((unsigned int *)(*(void *)(*(void *)(v293 + 568) + 232) + 1256)))
        {
          uint64_t v341 = *(void *)(v293 + 144);
          if (v341)
          {
            uint64_t v342 = *(void *)(v341 + 32);
            if (v342) {
              *(unsigned char *)(v342 + 168) = 1;
            }
          }
          uint64_t v343 = *(void *)(v293 + 152);
          if (v343)
          {
            uint64_t v344 = *(void *)(v343 + 32);
            if (v344) {
              *(unsigned char *)(v344 + 168) = 1;
            }
          }
          uint64_t v345 = *(void *)(v293 + 160);
          if (v345)
          {
            uint64_t v346 = *(void *)(v345 + 32);
            if (v346) {
              *(unsigned char *)(v346 + 168) = 1;
            }
          }
          uint64_t v347 = *(void *)(v293 + 136);
          if (v347)
          {
            uint64_t v348 = *(void *)(v347 + 32);
            if (v348
              || (unsigned __int8 v365 = atomic_load((unsigned __int8 *)(v347 + 144)), (v365 & 1) != 0)
              && (uint64_t v348 = *(void *)(*(void *)(v293 + 136) + 32)) != 0)
            {
              *(unsigned char *)(v348 + 168) = 1;
            }
          }
          uint64_t v366 = *(void *)(v293 + 176);
          if (v366)
          {
            (*(void (**)(uint64_t))(*(void *)v366 + 264))(v366);
            uint64_t v367 = *(void *)(v293 + 184);
            if (v367)
            {
              (*(void (**)(uint64_t))(*(void *)v367 + 264))(v367);
              (*(void (**)(void))(**(void **)(v293 + 192) + 264))(*(void *)(v293 + 192));
            }
          }
          if (*(float *)(v293 + 256) <= 0.0)
          {
            float v368 = *(float *)(v293 + 272);
            uint32_t v317 = (unsigned int *)(a4 + 380);
            if (v368 <= 0.0) {
              goto LABEL_381;
            }
            *(float *)(v293 + 248) = v315;
          }
          else
          {
            *(float *)(v293 + 248) = v315;
            *(_DWORD *)(v293 + 256) = *(_DWORD *)(v293 + 252);
            float v368 = *(float *)(v293 + 272);
            uint32_t v317 = (unsigned int *)(a4 + 380);
          }
          if (v368 > 0.0) {
            *(_DWORD *)(v293 + 272) = *(_DWORD *)(v293 + 268);
          }
          if (*(float *)(v293 + 288) > 0.0) {
            *(_DWORD *)(v293 + 288) = *(_DWORD *)(v293 + 284);
          }
        }
LABEL_381:
        uint64_t v319 = *(float **)(a4 + 128);
        v697.realp = *(float **)(a4 + 152);
        float v320 = *(float **)(a4 + 176);
        v692 = *(float ***)(a4 + 200);
        if (*(float *)(*(void *)(v293 + 648) + 440) < 0.5 || *(unsigned char *)(*(void *)(v293 + 640) + 77))
        {
          int v682 = 0;
          size_t v321 = (uint64_t *)(a4 + 352);
          float v322 = v317;
        }
        else
        {
          int v682 = 1;
          float v322 = (unsigned int *)(a4 + 444);
          size_t v321 = (uint64_t *)(a4 + 416);
        }
        unsigned int v684 = *v322;
        uint64_t v686 = *v321;
        uint64_t v323 = v282;
        realp = *(float **)v282;
        unsigned int v699 = 0;
        float v325 = *(const vDSP_biquad_SetupStruct **)(v293 + 496);
        if (v325)
        {
          vDSP_biquad(v325, *(float **)(v293 + 512), realp, 1, v319, 1, v700);
          v699 += 500;
          realp = v319;
        }
        uint64_t v326 = *(unsigned int *)(v293 + 552);
        (*(void (**)(void, uint64_t))(**(void **)(v293 + 176) + 200))(*(void *)(v293 + 176), v326);
        uint64_t v327 = *(void *)(v293 + 184);
        if (v327) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v327 + 200))(v327, v326);
        }
        uint64_t v328 = *(void *)(v293 + 192);
        if (v328) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v328 + 200))(v328, v326);
        }
        long long v329 = *(void **)(v293 + 640);
        unsigned int v330 = atomic_load((unsigned int *)(v329[1] + 80));
        if (v330 != 1 && (v330 || *(_DWORD *)(*v329 + 108) <= 1u))
        {
          float v334 = *(IR::DelayLine **)(v293 + 544);
          if (v334)
          {
            if (*(_DWORD *)(*(void *)(v293 + 640) + 64) == 4) {
              goto LABEL_407;
            }
            uint64_t v335 = *(void *)(*(void *)(v293 + 568) + 232);
            if (!*(unsigned char *)(v335 + 2548)) {
              atomic_load((unsigned __int8 *)(v335 + 2549));
            }
            if (*(_DWORD *)(v293 + 168) != 7 || *(_DWORD *)(v293 + 172) != 1)
            {
              float v334 = *(IR::DelayLine **)(v293 + 544);
LABEL_407:
              *(void *)&__C.UInt32 mNumberBuffers = v697.realp;
              IR::DelayLine::process(v334, realp, (float **)&__C, v700);
              uint64_t v336 = *(void *)(v293 + 544);
              if (!*(_DWORD *)(v336 + 8)) {
                __assert_rtn("getLatestDelay", "DelayLine.cpp", 433, "inTapIdx < mNumTaps");
              }
              unsigned int v337 = *(_DWORD *)(v336 + 4);
              if (v337 > 7) {
                goto LABEL_476;
              }
              int v338 = 1 << v337;
              if ((v338 & 0xE0) != 0)
              {
                float v350 = **(float **)(v336 + 48) - (float)*(unsigned int *)(v336 + 132);
              }
              else if ((v338 & 0xA) != 0)
              {
                float v339 = **(float **)(v336 + 48);
                float v340 = -2.0;
LABEL_430:
                float v350 = v339 + v340;
              }
              else
              {
                if ((v338 & 0x14) != 0)
                {
                  float v339 = **(float **)(v336 + 48);
                  float v340 = -3.0;
                  goto LABEL_430;
                }
LABEL_476:
                float v350 = **(float **)(v336 + 48);
              }
              unsigned int v699 = (float)(v350 + (float)v699);
              realp = v697.realp;
            }
          }
          uint64_t v351 = *(IR::FixedIntegerDelay **)(v293 + 312);
          if (v351)
          {
            IR::FixedIntegerDelay::process(v351, realp, v319, v700);
            uint64_t v331 = v323;
            v699 += **(_DWORD **)(v293 + 312);
            unsigned int v352 = v700;
          }
          else
          {
            unsigned int v352 = v700;
            if (realp != v319) {
              memcpy(v319, realp, 4 * v700);
            }
            uint64_t v331 = v323;
          }
          AUSpatialMixerV2OcclusionFilter::processInplace((AUSpatialMixerV2OcclusionFilter *)(v293 + 88), v319, v352);
          v699 += *(_DWORD *)(v293 + 108);
          if (v638 == 0)
          {
            if (*(unsigned char *)(v293 + 487))
            {
              *(_DWORD *)(v293 + 248) = 1065353216;
              *(_DWORD *)(v293 + 256) = 0;
              *(_DWORD *)(v293 + 272) = 0;
              *(_DWORD *)(v293 + 288) = 0;
            }
            goto LABEL_495;
          }
          if (!*(unsigned char *)(v293 + 487)) {
            goto LABEL_495;
          }
          unsigned __int8 v353 = atomic_load((unsigned __int8 *)(v293 + 80));
          if (v353)
          {
            uint64_t v354 = *(void *)(v293 + 8);
            uint64_t v355 = *(void *)(v293 + 16);
            if (v354 != v355)
            {
              uint64_t v356 = 0;
              unint64_t v357 = (v355 - v354) >> 3;
              unsigned int v358 = v699;
              do
              {
                uint64_t v359 = *(void *)(v354 + 8 * v356);
                if (v359)
                {
                  v358 += *(_DWORD *)(v359 + 60);
                  unsigned int v699 = v358;
                }
                ++v356;
              }
              while (v357 > v356);
            }
          }
          std::string __Start = v319;
          if (v295)
          {
            float v360 = *(IR::FixedIntegerDelay **)(v293 + 560);
            if (v360)
            {
              IR::FixedIntegerDelay::process(v360, v319, v320, v700);
              std::string __Start = v320;
            }
          }
          if (*((void *)&v638 + 1) && (uint64_t v361 = *(void *)(v293 + 152)) != 0)
          {
            if (*(void *)(v361 + 32))
            {
              int v362 = 1;
              if (!(void)v638)
              {
                int v363 = 0;
                goto LABEL_480;
              }
LABEL_457:
              uint64_t v364 = *(void *)(v293 + 144);
              if (v364)
              {
                if (*(void *)(v364 + 32))
                {
                  int v363 = 1;
                  goto LABEL_480;
                }
                unsigned __int8 v370 = atomic_load((unsigned __int8 *)(v364 + 144));
                int v363 = v370 & 1;
              }
              else
              {
                int v363 = 0;
              }
              if ((v362 | v363))
              {
LABEL_480:
                *(void *)&__C.UInt32 mNumberBuffers = v293;
                *(void *)&__C.mBuffers[0].mNumberChannels = v323;
                __C.mBuffers[0].mData = &v699;
                p_Start = (const float **)&__Start;
                v706 = &v700;
                v707 = &v692;
                v708 = &v697;
                v709 = &v701;
                unsigned int v371 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v363, 1u, (uint64_t *)(v293 + 144), a4 + 488, (IR::ComplexDataCircBuffer *)(a4 + 784), v638, v293 + 252);
                unsigned int v372 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v362, 0, (uint64_t *)(v293 + 152), a4 + 584, (IR::ComplexDataCircBuffer *)(a4 + 792), *((uint64_t *)&v638 + 1), v293 + 268);
                unsigned int v373 = AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,unsigned int,float *)::$_0::operator()((uint64_t)&__C, v363 & v362, 2u, (uint64_t *)(v293 + 160), a4 + 680, (IR::ComplexDataCircBuffer *)(a4 + 800), a7, v293 + 284);
                if (v371 <= v372) {
                  unsigned int v374 = v372;
                }
                else {
                  unsigned int v374 = v371;
                }
                if (v374 <= v373) {
                  unsigned int v374 = v373;
                }
                v699 += v374;
                uint64_t v331 = v323;
                goto LABEL_486;
              }
              AUSpatialMixerV2ChannelProcessor::processReverbSend(v293, __Start, v638, v700, 1u, v697.realp, 0);
              uint64_t v331 = v323;
LABEL_504:
              if (*((void *)&v638 + 1))
              {
                AUSpatialMixerV2ChannelProcessor::processReverbSend(v293, __Start, *((uint64_t *)&v638 + 1), v700, 0, v697.realp, 0);
                if (v625) {
                  AUSpatialMixerV2ChannelProcessor::processReverbSend(v293, __Start, a7, v700, 2u, v697.realp, 0);
                }
              }
LABEL_486:
              unsigned int v375 = v700;
              int v376 = (float *)(v293 + 248);
              if (*(unsigned char *)(v293 + 232))
              {
                *int v376 = v315;
                int v377 = v319;
              }
              else
              {
                int v377 = v319;
                if (*v376 != v315)
                {
                  if (v700 >= 0x100) {
                    vDSP_Length v378 = 256;
                  }
                  else {
                    vDSP_Length v378 = v700;
                  }
                  *(float *)&__C.UInt32 mNumberBuffers = (float)(v315 - *v376) / (float)v378;
                  vDSP_vrampmul(v319, 1, (float *)(v293 + 248), (const float *)&__C.mNumberBuffers, v319, 1, v378);
                  *int v376 = v315;
                  v375 -= v378;
                  int v377 = &v319[v378];
                }
              }
              if (v375) {
                vDSP_vsmul(v377, 1, (const float *)(v293 + 248), v377, 1, v375);
              }
LABEL_495:
              if (!*(unsigned char *)(v293 + 486))
              {
                unsigned int v385 = v699;
                if (v295) {
                  goto LABEL_528;
                }
                goto LABEL_557;
              }
              float v379 = v309 * v308;
              if (a8
                && !*(void *)(v293 + 616)
                && ((*(uint64_t (**)(void))(**(void **)(v293 + 176) + 104))(*(void *)(v293 + 176)) & 1) == 0)
              {
                float v380 = ausdk::AUElement::GetParameter(**(ausdk::AUElement ***)(v293 + 640), 0x21u);
                float v381 = v379 * sqrtf(v380);
                vDSP_Length v382 = v700;
                *(float *)&__C.UInt32 mNumberBuffers = v381;
                unsigned int v383 = *(float **)(a8 + 32);
                if (*(unsigned char *)(v293 + 232))
                {
                  *(float *)(v293 + 308) = v381;
                  float v384 = v381;
                }
                else
                {
                  float v384 = *(float *)(v293 + 308);
                }
                if (v384 == v381)
                {
                  if (v381 > 0.0)
                  {
                    if (*(unsigned char *)(a8 + 24)) {
                      vDSP_vsmul(v319, 1, (const float *)&__C.mNumberBuffers, v383, 1, v382);
                    }
                    else {
                      vDSP_vsma(v319, 1, (const float *)&__C.mNumberBuffers, v383, 1, v383, 1, v382);
                    }
                    goto LABEL_516;
                  }
                }
                else
                {
                  *(float *)&std::string __Start = v384;
                  float v702 = (float)(v381 - v384) / (float)v382;
                  if (*(unsigned char *)(a8 + 24)) {
                    vDSP_vrampmul(v319, 1, (float *)&__Start, &v702, v383, 1, v382);
                  }
                  else {
                    vDSP_vrampmuladd(v319, 1, (float *)&__Start, &v702, v383, 1, v382);
                  }
LABEL_516:
                  *(unsigned char *)(a8 + 24) = 0;
                  float v381 = *(float *)&__C.mNumberBuffers;
                }
                *(float *)(v293 + 308) = v381;
                float v379 = v379 * sqrtf(1.0 - v380);
              }
              AUSpatialMixerV2OcclusionFilter::processInplace((AUSpatialMixerV2OcclusionFilter *)(v293 + 112), v319, v700);
              v699 += *(_DWORD *)(v293 + 132);
              uint64_t v386 = *(void *)(v293 + 136);
              if (v386)
              {
                if (*(void *)(v386 + 32)) {
                  goto LABEL_522;
                }
                unsigned __int8 v387 = atomic_load((unsigned __int8 *)(v386 + 144));
                if (v387)
                {
                  uint64_t v386 = *(void *)(v293 + 136);
LABEL_522:
                  float v388 = 3000.0;
                  if (*(_DWORD *)(v293 + 552)) {
                    float v388 = -1.0;
                  }
                  *(float *)(v386 + 80) = v388;
                  IR::DynamicIRProcessor::processInternal(v386, (IR::IRProcessor *)v319, &v697.realp, 1u, v700, 1.0, v692, 0, 0);
                  uint64_t v319 = v697.realp;
                  unsigned int v389 = atomic_load((unsigned int *)(*(void *)(v293 + 136) + 156));
                  v699 += v389;
                }
              }
              if (v295)
              {
                memcpy(v295, v319, 4 * v700);
                goto LABEL_527;
              }
              int v392 = *(_DWORD *)(v293 + 168);
              if (v392 != 9 && *(unsigned char *)(*(void *)(v293 + 648) + 480))
              {
                if (*(_DWORD *)(*(void *)(v293 + 640) + 64) == 4) {
                  goto LABEL_533;
                }
                uint64_t v398 = *(void *)(*(void *)(v293 + 568) + 232);
                if (!*(unsigned char *)(v398 + 2548)) {
                  atomic_load((unsigned __int8 *)(v398 + 2549));
                }
                if (v392 != 7 || *(_DWORD *)(v293 + 172) != 1)
                {
LABEL_533:
                  float v393 = *(float *)(v293 + 200);
                  if ((v393 > 0.0 || *(float *)(v293 + 204) > 0.0) && !*(void *)(v293 + 616))
                  {
                    float v394 = 1.0 / (float)(v393 + 1.0);
                    if (!(*(unsigned int (**)(void, float *, uint64_t, void, float **, void, void, IR::ComplexDataCircBuffer *, float))(**(void **)(v293 + 176) + 272))(*(void *)(v293 + 176), v319, v686, v684, v692, v684, v700, v634, (float)(v379 * (float)(1.0 - v393)) * v394))
                    {
                      if (v682) {
                        *(unsigned char *)(a4 + 440) = 0;
                      }
                      float v395 = v394 * (float)(v379 * *(float *)(v293 + 200));
                      if (!(*(unsigned int (**)(void, float *, uint64_t, void, float **, void, void, void, float))(**(void **)(v293 + 184) + 272))(*(void *)(v293 + 184), v319, v686, v684, v692, v684, v700, 0, v395))(*(void (**)(void, float *, uint64_t, void, float **, void, void, void, float))(**(void **)(v293 + 192) + 272))(*(void *)(v293 + 192), v319, v686, v684, v692, v684, v700, 0, v395); {
                    }
                      }
                    float v396 = *(float *)(v293 + 200);
                    if (v396 == 0.0)
                    {
                      int v397 = *(_DWORD *)(v293 + 168);
                      if (v397 != 4 && (v397 != 7 || *(_DWORD *)(v293 + 172) != 3))
                      {
                        (*(void (**)(void))(**(void **)(v293 + 184) + 264))(*(void *)(v293 + 184));
                        (*(void (**)(void))(**(void **)(v293 + 192) + 264))(*(void *)(v293 + 192));
                        float v396 = *(float *)(v293 + 200);
                      }
                    }
                    *(float *)(v293 + 204) = v396;
LABEL_556:
                    unsigned int v385 = v699;
LABEL_557:
                    int v391 = (*(uint64_t (**)(void))(**(void **)(v293 + 176) + 312))(*(void *)(v293 + 176));
                    goto LABEL_558;
                  }
                }
              }
              int v349 = (*(uint64_t (**)(void, float *, uint64_t, void, float **, void, void, IR::ComplexDataCircBuffer *, float))(**(void **)(v293 + 176) + 272))(*(void *)(v293 + 176), v319, v686, v684, v692, v684, v700, v634, v379);
LABEL_552:
              char v399 = v682 ^ 1;
              if (v349) {
                char v399 = 1;
              }
              if ((v399 & 1) == 0) {
                *(unsigned char *)(a4 + 440) = 0;
              }
              goto LABEL_556;
            }
            unsigned __int8 v369 = atomic_load((unsigned __int8 *)(v361 + 144));
            int v362 = v369 & 1;
          }
          else
          {
            int v362 = 0;
          }
          if ((void)v638) {
            goto LABEL_457;
          }
          if (v362)
          {
            int v363 = 0;
            int v362 = 1;
            goto LABEL_480;
          }
          goto LABEL_504;
        }
        if (!v295)
        {
          int v349 = (*(uint64_t (**)(void, float *, uint64_t, void, float **, void, void, IR::ComplexDataCircBuffer *, float))(**(void **)(v293 + 176) + 272))(*(void *)(v293 + 176), realp, v686, v684, v692, v684, v700, v634, (float)(v303[1] * v303[3]) * v303[12]);
          uint64_t v331 = v323;
          goto LABEL_552;
        }
        vDSP_vclr(v295, 1, v700);
        uint64_t v331 = v323;
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v332 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          float v333 = (void *)(v293 + 592);
          if (*(char *)(v293 + 615) < 0) {
            float v333 = (void *)*v333;
          }
          __C.UInt32 mNumberBuffers = 136315394;
          *(void *)(&__C.mNumberBuffers + 1) = v333;
          LOWORD(__C.mBuffers[0].mDataByteSize) = 2080;
          *(void *)((char *)&__C.mBuffers[0].mDataByteSize + 2) = "processAccumulating";
          _os_log_debug_impl(&dword_1BB0CE000, v332, OS_LOG_TYPE_DEBUG, "[%s|%s] Parametric processing is enabled with bypass source mode. Input is set to zero.", (uint8_t *)&__C, 0x16u);
        }
LABEL_527:
        unsigned int v385 = v699;
LABEL_528:
        uint64_t v390 = *(int **)(v293 + 560);
        if (!v390) {
          goto LABEL_557;
        }
        int v391 = *v390;
LABEL_558:
        *(_DWORD *)(v293 + 480) = v391 + v385;
        if (!*(unsigned char *)(v331 + 24) && (*(unsigned char *)(v293 + 484) || *(unsigned char *)(v293 + 485)))
        {
          int v401 = 0;
        }
        else
        {
          int v400 = *(_DWORD *)(v293 + 476);
          BOOL v240 = __CFADD__(v400, v700);
          int v401 = v400 + v700;
          if (v240) {
            int v401 = -1;
          }
        }
        *(_DWORD *)(v293 + 476) = v401;
        *(unsigned char *)(a4 + 376) = 0;
        *(unsigned char *)(v293 + 232) = 0;
        std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&__A);
        juint64_t j = v647;
LABEL_566:
        std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__A);
        Float64 v252 = *(uint64_t **)(jj + 248);
        uint64_t v253 = ++v254;
      }
      while (v254 < (unint64_t)((uint64_t)(*(void *)(jj + 256) - (void)v252) >> 3));
LABEL_567:
      if (*(void *)(jj + 272) && *(unsigned char *)(jj + 316))
      {
        int8x16_t *v628 = vextq_s8(*v628, *v628, 8uLL);
        *(unsigned char *)(jj + 316) = 0;
      }
      uint64_t v402 = *(void *)(jj + 912);
      if (*(_DWORD *)(v402 + 212))
      {
        unsigned int v403 = *(_DWORD *)(v402 + 228);
        if (v403)
        {
          BOOL v240 = v403 >= __N;
          int v404 = v403 - __N;
          if (!v240) {
            int v404 = 0;
          }
          *(_DWORD *)(v402 + 228) = v404;
        }
        else
        {
          int v405 = *(unsigned __int8 *)(v402 + 225);
          if (*(unsigned __int8 *)(v402 + 224) != v405)
          {
            *(_DWORD *)(v402 + 228) = *(_DWORD *)(v402 + 220);
            *(unsigned char *)(v402 + 224) = v405;
          }
        }
      }
      if (v645)
      {
        uint64_t v406 = *(void *)(jj + 920);
        unsigned int v407 = *(_DWORD *)(v406 + 344) + v648;
        *(_DWORD *)(v406 + 344) = v407;
        uint64_t v408 = *v252;
        uint64_t v409 = *(void *)(v408 + 616);
        int16x8_t v410 = (float *)(v408 + 1344);
        unsigned int v411 = (float *)(v408 + 1356);
        if (v409)
        {
          unsigned int v411 = (float *)(v409 + 44);
          v412 = (float *)(v409 + 32);
        }
        else
        {
          v412 = v410;
        }
        if (v407 >= *(_DWORD *)(v406 + 16))
        {
          v650 = (covarianceBasedAdaptiveFilter *)(v406 + 456);
          v639 = (uint64_t *)(v406 + 7472);
          long long v413 = (CLiteMatrix *)(v406 + 7560);
          float v414 = *v412 * *v411;
          v653 = (CLiteMatrix *)(v406 + 7720);
          v656 = (CLiteMatrix *)(v406 + 7600);
          v657 = (CLiteMatrix *)(v406 + 8080);
          v652 = (CLiteMatrix *)(v406 + 8200);
          v643 = (const float **)(v406 + 8240);
          uint64_t v415 = (CLiteMatrix *)(v406 + 8496);
          v673 = (vDSP_Length *)(v406 + 3008);
          v664 = (CLiteMatrix *)(v406 + 7072);
          v672 = (vDSP_Length *)(v406 + 3048);
          __Ba = (DSPSplitComplex *)(v406 + 7112);
          v683 = (CLiteMatrix *)(v406 + 7392);
          v680 = (CLiteMatrix *)(v406 + 7432);
          v668 = (CLiteMatrix *)(v406 + 7272);
          v659 = (const CLiteMatrix *)(v406 + 7680);
          v663 = (CLiteMatrix *)(v406 + 7312);
          v658 = (CLiteMatrix *)(v406 + 7920);
          v670 = (CLiteMatrix *)(v406 + 7152);
          v662 = (CLiteMatrix *)(v406 + 7352);
          while (1)
          {
            uint64_t v655 = *(unsigned int *)(v406 + 348);
            *(float *)&__A.UInt32 mNumberBuffers = v414;
            vDSP_vclr(*(float **)(v406 + 360), 1, (uint64_t)(*(void *)(v406 + 368) - *(void *)(v406 + 360)) >> 2);
            int v416 = 0;
            for (uint64_t j = 0; j != 16; j += 4)
            {
              vDSP_mmul((const float *)(*(void *)(v406 + 4336) + j), 4, (const float *)(*(void *)(v406 + 248) + 4 * (*(_DWORD *)(v406 + 392) * v416)), 1, *(float **)(v406 + 296), 1, *(int *)(v406 + 36), *(int *)(v406 + 16), 1uLL);
              vDSP_vadd(*(const float **)(v406 + 296), 1, *(const float **)(v406 + 360), 1, *(float **)(v406 + 360), 1, *(int *)(v406 + 36) * (uint64_t)*(int *)(v406 + 16));
              ++v416;
            }
            uint64_t v418 = *(void *)(v406 + 360);
            if (*(unsigned char *)(v406 + 384) && !*(unsigned char *)(v406 + 212))
            {
              HOA::RotationMatrix::applyLeft(*(void *)(v406 + 416), *(void *)(v406 + 360), (*(void *)(v406 + 368) - v418) >> 2, *(void *)(v406 + 296), (uint64_t)(*(void *)(v406 + 304) - *(void *)(v406 + 296)) >> 2, *(unsigned int *)(v406 + 16));
              uint64_t v418 = *(void *)(v406 + 296);
            }
            uint64_t v419 = *(unint64_t **)(v406 + 432);
            unint64_t v420 = v419[3];
            if (v419[2] * v420 * v419[4] != *(_DWORD *)(v406 + 36) * *(_DWORD *)(v406 + 16))
            {
              int v616 = 59;
              v617 = "fltbAnalysisSerializedVector";
              v618 = "inVectorSize == mnHops * mhopSize * mnInputs";
              goto LABEL_781;
            }
            if (v420)
            {
              LODWORD(v421) = 0;
              do
              {
                uint64_t v422 = v421;
                unint64_t v423 = v419[4];
                if (v423)
                {
                  uint64_t v424 = 0;
                  unint64_t v425 = v419[2];
                  uint64_t v426 = v418 + 4 * v425 * v422;
                  uint64_t v427 = 4 * v420 * v425;
                  do
                  {
                    *(void *)(v419[7] + 8 * v424++) = v426;
                    v426 += v427;
                  }
                  while (v423 > v424);
                }
                afSTFTWrapper::fltbAnalysisOneHop(v419, v422);
                unint64_t v421 = (v422 + 1);
                unint64_t v420 = v419[3];
              }
              while (v420 > v421);
            }
            uint64_t v428 = (CLiteMatrix *)(v406 + 7760);
            if (v639 != (uint64_t *)(v419 + 23)) {
              std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>(v639, v419[23], v419[24], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v419[24] - v419[23]) >> 3));
            }
            if (*(_DWORD *)(v406 + 28))
            {
              uint64_t v429 = 0;
              while (1)
              {
                uint64_t v430 = (void *)CLiteMatrix::Get(v413, 0, 0);
                uint64_t v431 = (const void *)CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7472) + 40 * v429), 0, 0);
                memcpy(v430, v431, 4 * *(int *)(v406 + 32) * (uint64_t)*(int *)(v406 + 36));
                CLiteMatrix::Get(v413, 0, 0);
                uint64_t v433 = v432;
                CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7472) + 40 * v429), 0, 0);
                memcpy(v433, v434, 4 * *(int *)(v406 + 32) * (uint64_t)*(int *)(v406 + 36));
                CLiteMatrix::SetWithConjugateTranposeOfOther(v656, v413);
                uint64_t v435 = (CLiteMatrix *)(v406 + 7680);
                CLiteMatrix::MatrixMultiply((vDSP_Length *)v413, v656, v658, v436);
                ParametricProcessor::covarianceMatrixSmoothing((const float **)v658, (const float **)(v406 + 7960), v437, *(float *)(v406 + 116));
                int v439 = *(_DWORD *)(v406 + 132);
                if (v439 == 3) {
                  break;
                }
                if (v439 == 2 || v439 == 1)
                {
                  uint64_t v440 = (vDSP_Length *)(*(void *)(v406 + 3944) + 40 * v429);
LABEL_604:
                  CLiteMatrix::MatrixMultiply(v440, v413, v659, v438);
                }
                uint64_t v687 = v429;
                if (*(unsigned char *)(v406 + 188))
                {
                  CLiteMatrix::SetWithConjugateTranposeOfOther(v653, v659);
                  CLiteMatrix::MatrixMultiply((vDSP_Length *)v659, v653, v657, v441);
                  ParametricProcessor::covarianceMatrixSmoothing((const float **)v657, (const float **)(v406 + 8120), v442, *(float *)(v406 + 116));
                  float v443 = *(float *)(*(void *)(v406 + 3088) + 4 * v429);
                  float v444 = *(float *)(v406 + 8);
                  if (v443 < v444)
                  {
                    if ((*(_DWORD *)(v406 + 132) - 1) <= 2)
                    {
                      ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v406, v652, v658, v413, v429);
                      ParametricProcessor::covarianceMatrixSmoothing((const float **)v652, v643, v452, *(float *)(v406 + 116));
                    }
                    covarianceBasedAdaptiveFilter::calculateSharpeningFilter(v650, (CLiteMatrix *)(*(void *)(v406 + 8280) + 40 * v429), (const float **)(v406 + 8376), v657, v652, 0, *(float *)(v406 + 120));
                    int16x8_t v453 = (const float **)(v406 + 8416);
                    BOOL v454 = (void *)(v406 + 8304);
                    BOOL v455 = (CLiteMatrix *)(v406 + 8160);
                    BOOL v456 = (CLiteMatrix *)(v406 + 8376);
                    if (*(_DWORD *)(v406 + 40))
                    {
                      unint64_t v457 = 0;
                      do
                      {
                        int v458 = *(_DWORD *)CLiteMatrix::Get(v657, v457, v457);
                        *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v406 + 8160), v457, v457) = v458;
                        ++v457;
                      }
                      while (v457 < *(int *)(v406 + 40));
                      int16x8_t v453 = (const float **)(v406 + 8416);
                      BOOL v454 = (void *)(v406 + 8304);
                      BOOL v455 = (CLiteMatrix *)(v406 + 8160);
                      BOOL v456 = (CLiteMatrix *)(v406 + 8376);
                      uint64_t v415 = (CLiteMatrix *)(v406 + 8496);
                    }
                  }
                  else
                  {
                    if (v443 > *(float *)(v406 + 4))
                    {
                      uint64_t v445 = *(void *)(v406 + 8280);
                      if (*(_DWORD *)(v406 + 60))
                      {
                        unint64_t v446 = 0;
                        do
                        {
                          *(float *)(v406 + 5304) = *(float *)CLiteMatrix::Get(v658, v446, v446)
                                                  + *(float *)(v406 + 5304);
                          ++v446;
                        }
                        while (v446 < *(int *)(v406 + 60));
                      }
                      LODWORD(v447) = *(_DWORD *)(v406 + 40);
                      if (v447)
                      {
                        unint64_t v448 = 0;
                        int16x8_t v449 = (CLiteMatrix *)(v445 + 40 * v687);
                        do
                        {
                          *(float *)(v406 + 5308) = *(float *)CLiteMatrix::Get(v657, v448, v448)
                                                  + *(float *)(v406 + 5308);
                          ++v448;
                          unint64_t v447 = *(int *)(v406 + 40);
                        }
                        while (v448 < v447);
                        uint64_t v435 = (CLiteMatrix *)(v406 + 7680);
                        if (v447)
                        {
                          for (unint64_t k = 0; k < v447; ++k)
                          {
                            float v451 = sqrtf((float)((float)(*(float *)(v406 + 5304)* (float)(1.0 / (float)(*(float *)(v406 + 5308) + 0.00000011921)))* (float)(int)v447)/ (float)*(int *)(v406 + 60));
                            *(float *)CLiteMatrix::Get(v449, k, k) = v451;
                            unint64_t v447 = *(int *)(v406 + 40);
                          }
                          goto LABEL_627;
                        }
LABEL_626:
                        LODWORD(v447) = *(_DWORD *)(v406 + 40);
                      }
                      else
                      {
                        uint64_t v435 = (CLiteMatrix *)(v406 + 7680);
                      }
LABEL_627:
                      if (*(float *)(v406 + 8) <= 0.0)
                      {
                        uint64_t v429 = v687;
                      }
                      else
                      {
                        uint64_t v429 = v687;
                        if (v447)
                        {
                          unint64_t v459 = 0;
                          LODWORD(v460) = *(_DWORD *)(v406 + 32);
                          LODWORD(v461) = v460;
                          do
                          {
                            if (v461)
                            {
                              unint64_t v462 = 1;
                              do
                              {
                                int v463 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v459, (unint64_t)(float)((float)(v462+ *(_DWORD *)(v406 + 184)* (uint64_t)(int)v461)- *(float *)(*(void *)(*(void *)(v406 + 5312) + 24 * v459)+ 4 * (int)v687)));
                                *(_DWORD *)CLiteMatrix::Get(v428, v459, v462 - 1) = v463;
                                CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v459, (unint64_t)(float)((float)(v462+ *(_DWORD *)(v406 + 32)* (uint64_t)*(int *)(v406 + 184))- *(float *)(*(void *)(*(void *)(v406 + 5312) + 24 * v459)+ 4 * (int)v687)));
                                int v465 = *v464;
                                CLiteMatrix::Get(v428, v459, v462 - 1);
                                _DWORD *v466 = v465;
                                unint64_t v461 = *(int *)(v406 + 32);
                                BOOL v240 = v462++ >= v461;
                              }
                              while (!v240);
                              LODWORD(v447) = *(_DWORD *)(v406 + 40);
                              LODWORD(v460) = *(_DWORD *)(v406 + 32);
                              uint64_t v415 = (CLiteMatrix *)(v406 + 8496);
                              uint64_t v435 = (CLiteMatrix *)(v406 + 7680);
                              uint64_t v429 = v687;
                            }
                            ++v459;
                          }
                          while (v459 < (int)v447);
                          if (v447)
                          {
                            unint64_t v467 = 0;
                            int v468 = *(_DWORD *)(v406 + 184);
                            do
                            {
                              if (v460 * v468)
                              {
                                unint64_t v469 = 0;
                                do
                                {
                                  int v470 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v467, v469 + (int)v460);
                                  *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v467, v469) = v470;
                                  CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v467, v469 + *(int *)(v406 + 32));
                                  int v472 = *v471;
                                  CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v467, v469);
                                  *AudioTimeStamp v473 = v472;
                                  ++v469;
                                  int v468 = *(_DWORD *)(v406 + 184);
                                  LODWORD(v460) = *(_DWORD *)(v406 + 32);
                                }
                                while (v469 < (int)v460 * v468);
                                LODWORD(v447) = *(_DWORD *)(v406 + 40);
                                uint64_t v429 = v687;
                              }
                              ++v467;
                            }
                            while (v467 < (int)v447);
                            if (v447)
                            {
                              unint64_t v474 = 0;
                              do
                              {
                                if (v460)
                                {
                                  unint64_t v475 = 0;
                                  do
                                  {
                                    int v476 = *(_DWORD *)CLiteMatrix::Get(v435, v474, v475);
                                    *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v474, v475 + *(int *)(v406 + 32) * (uint64_t)*(int *)(v406 + 184)) = v476;
                                    CLiteMatrix::Get(v435, v474, v475);
                                    int v478 = *v477;
                                    CLiteMatrix::Get((CLiteMatrix *)(v406 + 5336), v474, v475 + *(int *)(v406 + 32) * (uint64_t)*(int *)(v406 + 184));
                                    _DWORD *v479 = v478;
                                    ++v475;
                                    unint64_t v460 = *(int *)(v406 + 32);
                                  }
                                  while (v475 < v460);
                                  LODWORD(v447) = *(_DWORD *)(v406 + 40);
                                  uint64_t v429 = v687;
                                }
                                ++v474;
                              }
                              while (v474 < (int)v447);
                            }
                          }
                        }
                      }
                      uint64_t v480 = *(void *)(v406 + 8280);
                      uint64_t v481 = 5 * v429;
                      uint64_t v482 = *(void *)(v406 + 8328);
                      if (v447)
                      {
                        unint64_t v483 = 0;
                        v675 = (DSPSplitComplex *)(v480 + 8 * v481);
                        uint64_t v484 = (CLiteMatrix *)(v482 + 8 * v481);
                        v661 = (CLiteMatrix *)(*(void *)(v406 + 8304) + 8 * v481);
                        v660 = (CLiteMatrix *)(*(void *)(v406 + 8352) + 8 * v481);
                        uint64_t v665 = v481;
                        do
                        {
                          v485 = *(void **)(v406 + 7008);
                          v486 = (const void *)CLiteMatrix::Get((CLiteMatrix *)v675, v483, 0);
                          memcpy(v485, v486, 4 * *(int *)(v406 + 40));
                          v487 = (void *)(*(void *)(v406 + 7008)
                                        + 4 * ((uint64_t)(*(void *)(v406 + 7016) - *(void *)(v406 + 7008)) >> 3));
                          CLiteMatrix::Get((CLiteMatrix *)v675, v483, 0);
                          memcpy(v487, v488, 4 * *(int *)(v406 + 40));
                          v489 = *(void **)(v406 + 7048);
                          v490 = (const void *)CLiteMatrix::Get(v484, v483, 0);
                          memcpy(v489, v490, 4 * *(int *)(v406 + 40));
                          uint32_t v491 = (void *)(*(void *)(v406 + 7048)
                                        + 4 * ((uint64_t)(*(void *)(v406 + 7056) - *(void *)(v406 + 7048)) >> 3));
                          CLiteMatrix::Get(v484, v483, 0);
                          memcpy(v491, v492, 4 * *(int *)(v406 + 40));
                          if (*(float *)(v406 + 8) >= 0.0)
                          {
                            v494 = *(void **)(v406 + 7208);
                            uint64_t v495 = (const void *)CLiteMatrix::Get(v661, v483, 0);
                            memcpy(v494, v495, 4 * *(int *)(v406 + 40));
                            uint64_t v496 = (void *)(*(void *)(v406 + 7208)
                                          + 4 * ((uint64_t)(*(void *)(v406 + 7216) - *(void *)(v406 + 7208)) >> 3));
                            CLiteMatrix::Get(v661, v483, 0);
                            memcpy(v496, v497, 4 * *(int *)(v406 + 40));
                            uint64_t v498 = *(void **)(v406 + 7248);
                            v499 = (const void *)CLiteMatrix::Get(v660, v483, 0);
                            memcpy(v498, v499, 4 * *(int *)(v406 + 40));
                            uint64_t v500 = (void *)(*(void *)(v406 + 7248)
                                          + 4 * ((uint64_t)(*(void *)(v406 + 7256) - *(void *)(v406 + 7248)) >> 3));
                            CLiteMatrix::Get(v660, v483, 0);
                            memcpy(v500, v501, 4 * *(int *)(v406 + 40));
                          }
                          CLiteMatrix::MatrixMultiply(v673, (const CLiteMatrix *)(v406 + 6992), v664, v493);
                          CLiteMatrix::MatrixMultiply(v672, (const CLiteMatrix *)(v406 + 7032), (const CLiteMatrix *)__Ba, v502);
                          CLiteMatrix::operator+=(v664, __Ba);
                          CLiteMatrix::SetWithTranposeOfOther(v683, v664);
                          CLiteMatrix::ElementwiseMultiply(v683, v435, v680, (CLiteMatrix *)1);
                          CLiteMatrix::SumRows(v680, v670, v503);
                          if (*(float *)(v406 + 8) >= 0.0)
                          {
                            CLiteMatrix::MatrixMultiply(v673, (const CLiteMatrix *)(v406 + 7192), v668, v504);
                            CLiteMatrix::MatrixMultiply(v672, (const CLiteMatrix *)(v406 + 7232), v663, v507);
                            CLiteMatrix::operator+=(v668, v663);
                            CLiteMatrix::SetWithTranposeOfOther(v683, v668);
                            CLiteMatrix::ElementwiseMultiply(v683, (const CLiteMatrix *)(v406 + 7760), v680, (CLiteMatrix *)1);
                            CLiteMatrix::SumRows(v680, v662, v508);
                            if (*(int *)(v406 + 32) >= 1)
                            {
                              int64_t v509 = 0;
                              do
                              {
                                float v510 = *(float *)CLiteMatrix::Get(v670, 0, v509);
                                float v511 = v510 + *(float *)CLiteMatrix::Get(v662, 0, v509);
                                *(float *)CLiteMatrix::Get(v415, v483, v509) = v511;
                                CLiteMatrix::Get(v670, 0, v509);
                                float v513 = *v512;
                                CLiteMatrix::Get(v662, 0, v509);
                                float v515 = v513 + *v514;
                                CLiteMatrix::Get(v415, v483, v509);
                                float *v516 = v515;
                                ++v509;
                              }
                              while (v509 < *(int *)(v406 + 32));
                            }
                          }
                          else
                          {
                            v505 = (void *)CLiteMatrix::Get(v415, v483, 0);
                            memcpy(v505, *(const void **)(v406 + 7168), 4 * *(int *)(v406 + 32));
                            CLiteMatrix::Get(v415, v483, 0);
                            memcpy(v506, (const void *)(*(void *)(v406 + 7168)+ 4 * ((uint64_t)(*(void *)(v406 + 7176) - *(void *)(v406 + 7168)) >> 3)), 4 * *(int *)(v406 + 32));
                          }
                          ++v483;
                          uint64_t v481 = v665;
                        }
                        while (v483 < *(int *)(v406 + 40));
                        uint64_t v482 = *(void *)(v406 + 8328);
                        uint64_t v480 = *(void *)(v406 + 8280);
                        long long v413 = (CLiteMatrix *)(v406 + 7560);
                        uint64_t v428 = (CLiteMatrix *)(v406 + 7760);
                        uint64_t v429 = v687;
                      }
                      CLiteMatrix::SetWithOther(v482 + 8 * v481, (uint64_t *)(v480 + 8 * v481));
                      CLiteMatrix::SetWithOther(*(void *)(v406 + 8352) + 40 * v429, (uint64_t *)(*(void *)(v406 + 8304) + 40 * v429));
                      __C.UInt32 mNumberBuffers = *(_DWORD *)(v406 + 208);
                      vDSP_vsmul(*(const float **)(v406 + 8512), 1, (const float *)&__C.mNumberBuffers, *(float **)(v406 + 8512), 1, (uint64_t)(*(void *)(v406 + 8520) - *(void *)(v406 + 8512)) >> 2);
                      goto LABEL_664;
                    }
                    BOOL v454 = (void *)(v406 + 8280);
                    int16x8_t v453 = (const float **)(v406 + 8376);
                    BOOL v455 = (CLiteMatrix *)(v406 + 8080);
                    BOOL v456 = (CLiteMatrix *)(v406 + 8200);
                    if ((*(_DWORD *)(v406 + 132) - 1) <= 2)
                    {
                      ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v406, v652, v658, v413, v429);
                      ParametricProcessor::covarianceMatrixSmoothing((const float **)v652, v643, v537, *(float *)(v406 + 116));
                      BOOL v454 = (void *)(v406 + 8280);
                      int16x8_t v453 = (const float **)(v406 + 8376);
                      BOOL v455 = (CLiteMatrix *)(v406 + 8080);
                      BOOL v456 = (CLiteMatrix *)(v406 + 8200);
                    }
                  }
                  covarianceBasedAdaptiveFilter::calculateSharpeningFilter(v650, (CLiteMatrix *)(*v454 + 40 * v429), v453, v455, v456, v443 >= v444, *(float *)(v406 + 120));
                  goto LABEL_626;
                }
                ParametricProcessor::estimateTargetCovarianceMatrix((ParametricProcessor *)v406, v652, v658, v413, v429);
                CLiteMatrix::SetWithOther((uint64_t)v415, (uint64_t *)(v406 + 6000));
LABEL_664:
                int v517 = *(_DWORD *)(v406 + 132);
                if ((v517 - 1) >= 2)
                {
                  if (v517 == 3)
                  {
                    int v523 = *(_DWORD *)(v406 + 32);
                    if (v523)
                    {
                      unint64_t v524 = 0;
                      int v525 = *(_DWORD *)(v406 + 40);
                      uint64_t v526 = *(void *)(v406 + 4256);
                      char v527 = *(int **)(v406 + 4248);
                      v528 = v527;
                      do
                      {
                        uint64_t v529 = (v526 - (uint64_t)v528) >> 2;
                        if (v529 + v525)
                        {
                          int v530 = 0;
                          unint64_t v531 = 0;
                          do
                          {
                            if (v529)
                            {
                              while (1)
                              {
                                int v532 = *v528++;
                                if (v531 == v532) {
                                  break;
                                }
                                if (!--v529) {
                                  goto LABEL_674;
                                }
                              }
                              ++v530;
                            }
                            else
                            {
LABEL_674:
                              int v533 = *(_DWORD *)CLiteMatrix::Get(v415, v531 - v530, v524);
                              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * v687), v531, v524) = v533;
                              uint64_t v428 = (CLiteMatrix *)(v406 + 7760);
                              CLiteMatrix::Get(v415, v531 - v530, v524);
                              int v535 = *v534;
                              CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * v687), v531, v524);
                              _DWORD *v536 = v535;
                              int v525 = *(_DWORD *)(v406 + 40);
                              uint64_t v526 = *(void *)(v406 + 4256);
                              char v527 = *(int **)(v406 + 4248);
                            }
                            ++v531;
                            uint64_t v529 = (v526 - (uint64_t)v527) >> 2;
                            v528 = v527;
                          }
                          while (v531 < v529 + v525);
                          int v523 = *(_DWORD *)(v406 + 32);
                          v528 = v527;
                          uint64_t v429 = v687;
                        }
                        ++v524;
                      }
                      while (v524 < v523);
                    }
                  }
                }
                else
                {
                  v518 = (void *)CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * v429), 0, 0);
                  v519 = (const void *)CLiteMatrix::Get(v415, 0, 0);
                  memcpy(v518, v519, 4* *(int *)(v406 + 32)* (*(int *)(v406 + 40) + ((*(void *)(v406 + 4256) - *(void *)(v406 + 4248)) >> 2)));
                  CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * v429), 0, 0);
                  v521 = v520;
                  CLiteMatrix::Get(v415, 0, 0);
                  memcpy(v521, v522, 4* *(int *)(v406 + 32)* (*(int *)(v406 + 40) + ((*(void *)(v406 + 4256) - *(void *)(v406 + 4248)) >> 2)));
                }
                if (++v429 >= (unint64_t)*(int *)(v406 + 28)) {
                  goto LABEL_684;
                }
              }
              uint64_t v440 = *(vDSP_Length **)(v406 + 3944);
              goto LABEL_604;
            }
LABEL_684:
            uint64_t v538 = *(void *)(v406 + 432);
            v539 = *(unint64_t **)(v406 + 7496);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v406 + 7504) - (void)v539) >> 3) != *(_DWORD *)(v538 + 8))
            {
              int v616 = 113;
              v617 = "fltbSynthesisVector";
              v618 = "outputMatrix.size()==mnumBands";
              goto LABEL_781;
            }
            unint64_t v540 = *v539;
            if (*v539 != *(void *)(v538 + 40))
            {
              int v616 = 114;
              v617 = "fltbSynthesisVector";
              v618 = "outputMatrix[0].NumRows()==mnOutputs";
              goto LABEL_781;
            }
            unint64_t v541 = v539[1];
            if (v541 != *(void *)(v538 + 24)) {
              break;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v406 + 280) - *(void *)(v406 + 272)) >> 3) < v540)
            {
              int v616 = 116;
              v617 = "fltbSynthesisVector";
              v618 = "ioTD.size() >= mnOutputs";
LABEL_781:
              __assert_rtn(v617, "afSTFTWrapper.cpp", v616, v618);
            }
            if (v541)
            {
              uint64_t v542 = 0;
              do
              {
                unint64_t v543 = *(void *)(v538 + 40);
                if (v543)
                {
                  uint64_t v544 = 0;
                  uint64_t v545 = 0;
                  uint64_t v546 = v655 + *(void *)(v538 + 16) * v542;
                  do
                  {
                    *(void *)(*(void *)(v538 + 56) + 8 * v545++) = *(void *)(*(void *)(v406 + 272) + v544)
                                                                     + 4 * v546;
                    v544 += 24;
                  }
                  while (v543 != v545);
                }
                uint64_t v666 = v542;
                int v547 = *(_DWORD *)(v538 + 8);
                if (v547)
                {
                  for (unint64_t m = 0; m < v547; ++m)
                  {
                    if (v543)
                    {
                      uint64_t v549 = 0;
                      for (unint64_t n = 0; n < v543; ++n)
                      {
                        v551 = (_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * m), n, (int)v666);
                        uint64_t v552 = *(void *)(v538 + 136);
                        if (n >= (*(void *)(v538 + 144) - v552) >> 4
                          || (*(_DWORD *)(*(void *)(v552 + v549) + 4 * m) = *v551,
                              CLiteMatrix::Get((CLiteMatrix *)(*(void *)(v406 + 7496) + 40 * m), n, (int)v666),
                              uint64_t v554 = *(void *)(v538 + 136),
                              n >= (*(void *)(v538 + 144) - v554) >> 4))
                        {
                          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
                        }
                        *(_DWORD *)(*(void *)(v554 + v549 + 8) + 4 * m) = *v553;
                        unint64_t v543 = *(void *)(v538 + 40);
                        v549 += 16;
                      }
                      int v547 = *(_DWORD *)(v538 + 8);
                    }
                  }
                }
                uint64_t v555 = *(void *)(v538 + 80);
                uint64_t v688 = *(void *)(v538 + 136);
                v676 = *(DSPSplitComplex **)(v538 + 56);
                if (*(_DWORD *)(v555 + 112))
                {
                  uint64_t v556 = *(void *)(v555 + 104);
                  if (*(int *)(v556 + 4) >= 1)
                  {
                    uint64_t v557 = 0;
                    do
                    {
                      uint64_t v558 = v688 + 16 * v557;
                      uint64_t v559 = v558 + 8;
                      char v560 = 1;
                      do
                      {
                        v561 = (float *)(*(void *)v558 + 20);
                        float v562 = *v561;
                        float v563 = *(float *)(*(void *)v558 + 12) + *(float *)(*(void *)v558 + 16);
                        char v564 = v560;
                        *(v561 - 4) = *(float *)(*(void *)v558 + 4) + *(float *)(*(void *)v558 + 8);
                        *(v561 - 3) = v563;
                        float v565 = v561[2] + v561[3];
                        *(v561 - 2) = v562 + v561[1];
                        *(v561 - 1) = v565;
                        memmove(v561, v561 + 4, 4 * *(int *)(v556 + 8) - 16);
                        char v560 = 0;
                        uint64_t v558 = v559;
                      }
                      while ((v564 & 1) != 0);
                      ++v557;
                    }
                    while (v557 < *(int *)(v556 + 4));
                  }
                }
                if (*(int *)(v555 + 4) >= 1)
                {
                  uint64_t v566 = 0;
                  do
                  {
                    int v567 = *(_DWORD *)(v555 + 32);
                    uint64_t v568 = v688 + 16 * v566;
                    uint64_t v569 = *(_DWORD **)v568;
                    v570 = *(_DWORD **)(v555 + 72);
                    _DWORD *v570 = **(_DWORD **)v568;
                    uint64_t v571 = *(int *)(v555 + 12);
                    v570[v571] = v569[v571];
                    v572 = (const void *)(*(void *)(v568 + 8) + 4);
                    memcpy(v570 + 1, v569 + 1, 4 * v571 - 4);
                    memcpy(&v570[v571 + 1], v572, 4 * *(int *)(v555 + 12) - 4);
                    if (*(_DWORD *)(v555 + 24) == 1)
                    {
                      int v573 = *(_DWORD *)(v555 + 12);
                      if (v573 > 1)
                      {
                        uint64_t v574 = 1;
                        do
                        {
                          *(float *)&v570[v574] = -*(float *)&v570[v574];
                          *(float *)&v570[v571 + v574] = -*(float *)&v570[v571 + v574];
                          v574 += 2;
                        }
                        while ((int)v574 < v573);
                      }
                    }
                    vtRunFFT(*(void *)(v555 + 96), -1);
                    vDSP_vclr((float *)(*(void *)(*(void *)(v555 + 80) + 8 * v566) + 4 * *(_DWORD *)(v555 + 12) * v567), 1, *(int *)(v555 + 12));
                    int v575 = *(_DWORD *)(v555 + 36);
                    if (v567 + 1 < v575) {
                      int v576 = v567 + 1;
                    }
                    else {
                      int v576 = 0;
                    }
                    if (v575 >= 1)
                    {
                      int v577 = 0;
                      for (iuint64_t i = 0; ii < v582; ++ii)
                      {
                        int v579 = *(_DWORD *)(v555 + 12);
                        if (v577) {
                          int v581 = *(_DWORD *)(v555 + 12);
                        }
                        else {
                          int v581 = 0;
                        }
                        v577 ^= 1u;
                        v580 = (float *)(*(void *)(*(void *)(v555 + 80) + 8 * v566) + 4 * v579 * v576);
                        vDSP_vma((const float *)(*(void *)(v555 + 48) + 4 * v579 * ii), 1, (const float *)(*(void *)(v555 + 64) + 4 * v581), 1, v580, 1, v580, 1, *(int *)(v555 + 12));
                        int v582 = *(_DWORD *)(v555 + 36);
                        if (v576 + 1 < v582) {
                          ++v576;
                        }
                        else {
                          int v576 = 0;
                        }
                      }
                    }
                    memcpy(*((void **)&v676->realp + v566), (const void *)(*(void *)(*(void *)(v555 + 80) + 8 * v566) + 4* *(_DWORD *)(v555 + 12)* v576), 4 * *(int *)(v555 + 12));
                    ++v566;
                  }
                  while (v566 < *(int *)(v555 + 4));
                }
                int v583 = *(_DWORD *)(v555 + 32);
                if (v583 + 1 < *(_DWORD *)(v555 + 36)) {
                  int v584 = v583 + 1;
                }
                else {
                  int v584 = 0;
                }
                *(_DWORD *)(v555 + 32) = v584;
                uint64_t v542 = v666 + 1;
                long long v413 = (CLiteMatrix *)(v406 + 7560);
                uint64_t v415 = (CLiteMatrix *)(v406 + 8496);
              }
              while (*(void *)(v538 + 24) > (unint64_t)(v666 + 1));
            }
            float v585 = *(float *)(v406 + 388);
            if (v585 == v414 || v585 == 0.0)
            {
              uint64_t v590 = *(void *)(v406 + 272);
              UInt32 mNumberBuffers = LODWORD(v414);
              if (*(void *)(v406 + 280) != v590)
              {
                uint64_t v591 = 0;
                unsigned int v592 = 1;
                do
                {
                  vDSP_vsmul((const float *)(*(void *)(v590 + 24 * v591) + 4 * v655), 1, (const float *)&__A.mNumberBuffers, (float *)(*(void *)(v590 + 24 * v591) + 4 * v655), 1, *(int *)(v406 + 16));
                  uint64_t v591 = v592;
                  uint64_t v590 = *(void *)(v406 + 272);
                  BOOL v274 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v406 + 280) - v590) >> 3) > v592++;
                }
                while (v274);
                UInt32 mNumberBuffers = __A.mNumberBuffers;
              }
            }
            else
            {
              *(float *)&__C.UInt32 mNumberBuffers = (float)(v414 - v585) / (float)*(int *)(v406 + 16);
              uint64_t v586 = *(void *)(v406 + 272);
              if (*(void *)(v406 + 280) != v586)
              {
                uint64_t v587 = 0;
                unsigned int v588 = 1;
                do
                {
                  LODWORD(v697.realp) = *(_DWORD *)(v406 + 388);
                  vDSP_vrampmul((const float *)(*(void *)(v586 + 24 * v587) + 4 * v655), 1, (float *)&v697, (const float *)&__C.mNumberBuffers, (float *)(*(void *)(v586 + 24 * v587) + 4 * v655), 1, *(int *)(v406 + 16));
                  uint64_t v587 = v588;
                  uint64_t v586 = *(void *)(v406 + 272);
                  BOOL v274 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v406 + 280) - v586) >> 3) > v588++;
                }
                while (v274);
              }
              UInt32 mNumberBuffers = LODWORD(v414);
            }
            *(_DWORD *)(v406 + 388) = mNumberBuffers;
            unsigned int v593 = *(_DWORD *)(v406 + 16);
            int v594 = *(_DWORD *)(v406 + 344);
            *(_DWORD *)(v406 + 348) += v593;
            unsigned int v595 = v594 - v593;
            *(_DWORD *)(v406 + 344) = v595;
            if (v595 && *(_DWORD *)(v406 + 44))
            {
              unsigned int v596 = 0;
              do
              {
                memmove((void *)(*(void *)(v406 + 248) + 4 * *(_DWORD *)(v406 + 392) * v596), (const void *)(*(void *)(v406 + 248)+ 4 * (*(_DWORD *)(v406 + 16) + *(_DWORD *)(v406 + 392) * v596)), 4 * *(unsigned int *)(v406 + 344));
                ++v596;
              }
              while (v596 < *(_DWORD *)(v406 + 44));
              unsigned int v595 = *(_DWORD *)(v406 + 344);
              unsigned int v593 = *(_DWORD *)(v406 + 16);
            }
            if (v595 < v593) {
              goto LABEL_747;
            }
          }
          int v616 = 115;
          v617 = "fltbSynthesisVector";
          v618 = "outputMatrix[0].NumCols()==mnHops";
          goto LABEL_781;
        }
LABEL_747:
        uint64_t v597 = *(unsigned int *)(v406 + 352);
        if (v597 >= v648)
        {
          *(_DWORD *)(v406 + 352) = v597 - v648;
          v605 = *(void ***)(a4 + 328);
          v606 = *(void ***)(a4 + 336);
          for (juint64_t j = v647; v605 != v606; ++v605)
          {
            if (*v605) {
              bzero(*v605, 4 * v648);
            }
          }
          *(unsigned char *)(a4 + 376) = 1;
        }
        else
        {
          uint64_t v598 = v648 - v597;
          *(_DWORD *)(v406 + 348) -= v598;
          uint64_t v599 = *(void *)(a4 + 328);
          if (*(void *)(a4 + 336) != v599)
          {
            unint64_t v600 = 0;
            unsigned int v601 = 1;
            do
            {
              *(void *)(*(void *)(a4 + 352) + 8 * v600) = *(void *)(v599 + 8 * v600) + 4 * v597;
              unint64_t v600 = v601;
              uint64_t v599 = *(void *)(a4 + 328);
              ++v601;
            }
            while (v600 < (*(void *)(a4 + 336) - v599) >> 3);
          }
          if (*v641)
          {
            uint64_t v602 = 0;
            unint64_t v603 = 0;
            uint64_t v604 = *(void *)(a4 + 352);
            do
            {
              memcpy(*(void **)(v604 + 8 * v603), *(const void **)(*(void *)(v406 + 272) + v602), 4 * v598);
              memmove(*(void **)(*(void *)(v406 + 272) + v602), (const void *)(*(void *)(*(void *)(v406 + 272) + v602) + 4 * v598), 4 * *(unsigned int *)(v406 + 348));
              ++v603;
              v602 += 24;
            }
            while (v603 < *v641);
          }
          *(_DWORD *)(v406 + 352) = 0;
          juint64_t j = v647;
        }
      }
      v636 += v648;
      unsigned int v68 = v632 - __N;
      if (v632 == __N)
      {
LABEL_763:
        if (*(void *)(jj + 272))
        {
          unsigned __int8 v607 = atomic_load((unsigned __int8 *)(*(void *)(jj + 904) + 162));
          if (v607)
          {
            if (IR::ComplexDataCircBuffer::isInitialized(v634))
            {
              unsigned int v608 = 0;
              uint64_t v609 = *(void *)(a4 + 328);
              while (1)
              {
                SampleDataPtrs = (void *)IR::ComplexDataCircBuffer::getSampleDataPtrs(v634);
                if (v608 >= (unint64_t)((uint64_t)(SampleDataPtrs[1] - *SampleDataPtrs) >> 3)) {
                  break;
                }
                uint64_t v611 = *(void *)(v609 + 8 * v608);
                *(void *)(*(void *)IR::ComplexDataCircBuffer::getSampleDataPtrs(v634) + 8 * v608++) = v611;
              }
              IR::ComplexDataCircBuffer::inverseFFTOverlapAdd(v634);
            }
          }
        }
        v612 = *(uint64_t **)(jj + 248);
        v613 = *(uint64_t **)(jj + 256);
        while (v612 != v613)
        {
          uint64_t v614 = *v612++;
          *(unsigned char *)(v614 + 485) = *(unsigned char *)(v614 + 484);
        }
        return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v694);
      }
    }
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v694);
}

void sub_1BB54F5A0(_Unwind_Exception *a1)
{
}

BOOL AUBeamNF::ShouldBypassEffect(AUBeamNF *this)
{
  return *((_DWORD *)this + 132) != 0;
}

uint64_t AUBeamNF::GetScopeExtended(AUBeamNF *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 576;
  }
  else {
    return 0;
  }
}

uint64_t AUBeamNF::ValidFormat(AUBeamNF *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result = 0;
  BOOL v15 = 0;
  if (a4->mSampleRate >= 8000.0 && a4->mSampleRate <= 96000.0)
  {
    int v7 = *((unsigned __int8 *)this + 552);
    AudioFormatID mFormatID = a4->mFormatID;
    if (v7) {
      BOOL v9 = mFormatID == 1819304813;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9 && (v7 || mFormatID == 1718773105))
    {
      if (v7)
      {
        uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
        if (result) {
          return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
        }
      }
      else
      {
        long long v10 = *(_OWORD *)&a4->mBytesPerPacket;
        v13[0] = *(_OWORD *)&a4->mSampleRate;
        v13[1] = v10;
        uint64_t v14 = *(void *)&a4->mBitsPerChannel;
        DWORD2(v13[0]) = 1819304813;
        int v16 = 0;
        unsigned int v11 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v13, &v16, &v15);
        if (v16 == 4) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = 0;
        }
        if (v15) {
          return 0;
        }
        else {
          return v12;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUBeamNF::SupportedNumChannels(AUBeamNF *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUBeamNF::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUBeamNF::StreamFormatWritable(AUBeamNF *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUBeamNF::SupportsTail(AUBeamNF *this)
{
  return 1;
}

double AUBeamNF::GetTailTime(AUBeamNF *this)
{
  return 0.0;
}

double AUBeamNF::GetLatency(AUBeamNF *this)
{
  return 0.0;
}

uint64_t AUBeamNF::GetParameterValueStrings(AUBeamNF *this, int a2, int a3, const __CFArray **a4)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956430;
  }
  uint64_t result = 0;
  if (!a3)
  {
    if (a4)
    {
      values[0] = @"Front Beam";
      values[1] = @"Back Beam";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)values, 2, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
  }
  return result;
}

uint64_t AUBeamNF::RestoreState(OpaqueAudioComponentInstance **this, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  if (CFDictionaryGetValue((CFDictionaryRef)cf, @"data"))
  {
    uint64_t result = ausdk::AUBase::RestoreState(this, cf);
    if (!result) {
      ++*((_DWORD *)this + 136);
    }
  }
  else
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, @"tuningdata");
    if (result)
    {
      if (*((unsigned char *)this + 17))
      {
        return 4294956447;
      }
      else
      {
        CFArrayRef v6 = this[78];
        if (v6) {
          CFRelease(v6);
        }
        CFDictionaryRef Value = (OpaqueAudioComponentInstance *)CFDictionaryGetValue((CFDictionaryRef)cf, @"tuningdata");
        this[78] = Value;
        CFRetain(Value);
        return 0;
      }
    }
  }
  return result;
}

UInt8 *AUBeamNF::SaveExtendedScopes(AUBeamNF *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUBeamNF::GetParameterInfo(AUBeamNF *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->std::regex_constants::match_flag_type flags = -1073741824;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    uint64_t result = 4294956418;
    switch(a3)
    {
      case 1:
        CFStringRef v8 = @"Front-end Calibration Enable";
        goto LABEL_66;
      case 2:
        CFStringRef v8 = @"Fixed Beamformer Enable";
        goto LABEL_66;
      case 3:
        CFStringRef v12 = @"Adaptive Beamformer Enable";
        goto LABEL_22;
      case 4:
        CFStringRef v12 = @"Electronic Wind Screen Enable";
        goto LABEL_22;
      case 5:
        if (!*((unsigned char *)this + 552)) {
          return result;
        }
        CFStringRef v12 = @"Long-Term Noise Suppression Enable";
LABEL_22:
        buffer->cfNameString = v12;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Boolean;
        goto LABEL_23;
      case 6:
        if (!*((unsigned char *)this + 552)) {
          return result;
        }
        buffer->cfNameString = @"Long-Term Noise Suppression Min Gain";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Long-Term Noise Suppression Min Gain", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v13 = 0x3F8000003EB5C28FLL;
        goto LABEL_58;
      case 7:
        CFStringRef v12 = @"Spatial Noise Suppression Active";
        goto LABEL_22;
      case 8:
        buffer->cfNameString = @"Spatial Noise Suppression Max Attenuation";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Spatial Noise Suppression Max Attenuation", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v13 = 0x3F8000003E000000;
        goto LABEL_58;
      case 9:
        buffer->cfNameString = @"White Noise Gain";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"White Noise Gain", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x40400000C2C80000;
        AudioUnitParameterValue v11 = -100.0;
        goto LABEL_68;
      case 10:
        CFStringRef v15 = @"Beta";
        goto LABEL_54;
      case 11:
        buffer->cfNameString = @"Adaptation End Frequency";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Adaptation End Frequency", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x46BB800000000000;
        AudioUnitParameterValue v11 = 24000.0;
        goto LABEL_68;
      case 13:
        buffer->cfNameString = @"Front End Calibration Gain";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Front End Calibration Gain", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        AudioUnitParameterOptions v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x400000003F000000;
        AudioUnitParameterValue v17 = 1.0;
        goto LABEL_31;
      case 14:
        buffer->cfNameString = @"Mic Status Name";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Mic Status Name", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        AudioUnitParameterOptions v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        *(void *)&buffer->minCFDictionaryRef Value = 0x40A0000000000000;
        AudioUnitParameterValue v17 = 5.0;
LABEL_31:
        buffer->defaultCFDictionaryRef Value = v17;
        buffer->std::regex_constants::match_flag_type flags = v16;
        return result;
      case 15:
        CFStringRef v10 = @"Nominal Mic Programmable Gain";
        goto LABEL_12;
      case 16:
        buffer->cfNameString = @"Bad Mic Hysteresis";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Bad Mic Hysteresis", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x447A000000000000;
        AudioUnitParameterValue v11 = 145.0;
        goto LABEL_68;
      case 17:
        buffer->cfNameString = @"Index for desired EWIND deflection coefficient";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Index for desired EWIND deflection coefficient", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x459C400000000000;
        AudioUnitParameterValue v11 = 12.0;
        goto LABEL_68;
      case 18:
        buffer->cfNameString = @"Time-constant in s for log-spectrum estimation";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Time-constant in s for log-spectrum estimation", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v18 = 0x42C8000000000000;
        goto LABEL_67;
      case 19:
        buffer->cfNameString = @"Threshold for discriminating wind noise and occlusion";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Threshold for discriminating wind noise and occlusion", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x4348000000000000;
        AudioUnitParameterValue v11 = 45.0;
        goto LABEL_68;
      case 20:
        buffer->cfNameString = @"High-frequency threshold for discriminating wind noise and occlusion";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"High-frequency threshold for discriminating wind noise and occlusion", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x4348000000000000;
        AudioUnitParameterValue v11 = 90.0;
        goto LABEL_68;
      case 21:
        CFStringRef v19 = @"Threshold for difference noise envelopes during occlusion detection";
        goto LABEL_40;
      case 22:
        CFStringRef v19 = @"Threshold for difference noise envelopes during wind detection";
LABEL_40:
        buffer->cfNameString = v19;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x461C400000000000;
        AudioUnitParameterValue v11 = 3072.0;
        goto LABEL_68;
      case 23:
        buffer->cfNameString = @"Lower bound for spectral estimators";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Lower bound for spectral estimators", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x3F80000000000000;
        AudioUnitParameterValue v11 = 9.3132e-13;
        goto LABEL_68;
      case 24:
        CFStringRef v20 = @"Difference threshold between microphones";
        goto LABEL_46;
      case 25:
        buffer->cfNameString = @"Maximum absolute level allowed for inactive (failed) microphone";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Maximum absolute level allowed for inactive (failed) microphone", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x46C80000C6C80000;
        AudioUnitParameterValue v11 = -2304.0;
        goto LABEL_68;
      case 26:
        buffer->cfNameString = @"R-statistic threshold relative full scale in Q8";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"R-statistic threshold relative full scale in Q8", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 3323740160;
        AudioUnitParameterValue v11 = -512.0;
        goto LABEL_68;
      case 27:
        CFStringRef v20 = @"Difference threshold beam microphone and beam power";
LABEL_46:
        buffer->cfNameString = v20;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x461C400000000000;
        AudioUnitParameterValue v11 = 768.0;
        goto LABEL_68;
      case 28:
        buffer->cfNameString = @"Frequency for detection statistic of probability of occlusion";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Frequency for detection statistic of probability of occlusion", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x459C400000000000;
        AudioUnitParameterValue v11 = 250.0;
        goto LABEL_68;
      case 29:
        buffer->cfNameString = @"Frequency for detection statistic of probability of occlusion";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Frequency for detection statistic of probability of occlusion", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x459C400000000000;
        AudioUnitParameterValue v11 = 1625.0;
        goto LABEL_68;
      case 30:
        CFStringRef v21 = @"Frequency for detection statistic of probability of failed microphone";
        goto LABEL_51;
      case 31:
        CFStringRef v21 = @"Frequency for detection statistic of probability of occluded noisy microphone";
LABEL_51:
        buffer->cfNameString = v21;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x459C400000000000;
        AudioUnitParameterValue v11 = 800.0;
        goto LABEL_68;
      case 33:
        CFStringRef v22 = @"Default mic for ewind/occlusion";
        goto LABEL_62;
      case 34:
        CFStringRef v15 = @"Ewind cross-fade coefficient";
LABEL_54:
        buffer->cfNameString = v15;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v14 = 0x3F800000BF800000;
        goto LABEL_24;
      case 35:
        buffer->cfNameString = @"Ewind cross-fade start frequency";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Ewind cross-fade start frequency", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Hertz;
        *(void *)&buffer->minCFDictionaryRef Value = 0x46BB800000000000;
        AudioUnitParameterValue v11 = 2500.0;
        goto LABEL_68;
      case 36:
        buffer->cfNameString = @"Ewind cross-fade high thd";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Ewind cross-fade high thd", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        *(void *)&buffer->minCFDictionaryRef Value = 0x3F80000000000000;
        AudioUnitParameterValue v11 = 0.7;
        goto LABEL_68;
      case 37:
        buffer->cfNameString = @"Ewind cross-fade low thd";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Ewind cross-fade low thd", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v13 = 0x3F80000000000000;
LABEL_58:
        *(void *)&buffer->minCFDictionaryRef Value = v13;
        AudioUnitParameterValue v11 = 0.5;
        goto LABEL_68;
      case 38:
        buffer->cfNameString = @"Beta switch frequency";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"Beta switch frequency", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Hertz;
        *(void *)&buffer->minCFDictionaryRef Value = 0x46BB800000000000;
        AudioUnitParameterValue v11 = 750.0;
        goto LABEL_68;
      case 39:
        buffer->cfNameString = @"High-frequency beta";
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(@"High-frequency beta", buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Generic;
        uint64_t v18 = 0x3F800000BF800000;
        goto LABEL_67;
      case 40:
        CFStringRef v22 = @"Mic choice above adaptation end frequency";
LABEL_62:
        buffer->cfNameString = v22;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        uint64_t v14 = 0x4000000000000000;
        goto LABEL_24;
      case 41:
        if (!*((unsigned char *)this + 552)) {
          return result;
        }
        CFStringRef v8 = @"Frequency EQ Enable";
LABEL_66:
        buffer->cfNameString = v8;
        buffer->std::regex_constants::match_flag_type flags = -939524096;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Boolean;
        uint64_t v18 = 0x3F80000000000000;
LABEL_67:
        *(void *)&buffer->minCFDictionaryRef Value = v18;
        AudioUnitParameterValue v11 = 1.0;
        break;
      case 42:
        CFStringRef v8 = @"Use Standard Adaptive Beamformer";
        goto LABEL_66;
      default:
        return result;
    }
    goto LABEL_68;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 == 32)
  {
    buffer->cfNameString = @"Flag to say there is high far-end (echo) activity";
    buffer->std::regex_constants::match_flag_type flags = -939524096;
    CFStringGetCString(@"Flag to say there is high far-end (echo) activity", buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(void *)&buffer->minCFDictionaryRef Value = 0x3F80000000000000;
    AudioUnitParameterOptions v9 = buffer->flags & 0x3FFF7FFF | 0x40008000;
    buffer->defaultCFDictionaryRef Value = 0.0;
    buffer->std::regex_constants::match_flag_type flags = v9;
    return result;
  }
  if (a3 == 12)
  {
    CFStringRef v10 = @"Mic Programmable Gain";
LABEL_12:
    buffer->cfNameString = v10;
    buffer->std::regex_constants::match_flag_type flags = -939524096;
    CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(void *)&buffer->minCFDictionaryRef Value = 0x42200000C2200000;
    AudioUnitParameterValue v11 = 26.0;
LABEL_68:
    buffer->defaultCFDictionaryRef Value = v11;
    return result;
  }
  if (a3) {
    return 4294956418;
  }
  buffer->cfNameString = @"Beam Index";
  buffer->std::regex_constants::match_flag_type flags = -939524096;
  CFStringGetCString(@"Beam Index", buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  AudioUnitParameterUnit v6 = kAudioUnitParameterUnit_Indexed;
LABEL_23:
  buffer->unit = v6;
  uint64_t v14 = 0x3F80000000000000;
LABEL_24:
  *(void *)&buffer->minCFDictionaryRef Value = v14;
  buffer->defaultCFDictionaryRef Value = 0.0;
  return result;
}

uint64_t AUBeamNF::Render(AUBeamNF *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = (AUBeamNF *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  CFStringRef v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    v16[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v13 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 0);
    v15[0] = ausdk::AUIOElement::PrepareBuffer(v13, a4);
    uint64_t v14 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 128), 1u);
    v15[1] = ausdk::AUIOElement::PrepareBuffer(v14, a4);
    return (*(uint64_t (**)(AUBeamNF *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 1, v16, 2, v15);
  }
  return result;
}

uint64_t AUBeamNF::ProcessMultipleBufferLists(AUBeamNF *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4 != 1 || *((_DWORD *)this + 133) != a6) {
    return 4294956428;
  }
  if (*((unsigned char *)this + 552)) {
    return 0;
  }
  if (*((_DWORD *)this + 84) == a3)
  {
    uint64_t v9 = (uint64_t)*a5;
    CFStringRef v10 = (char *)(*a5)->mBuffers[0].mData + 4 * a3;
    *(void *)AudioTimeStamp buf = (*a5)->mBuffers[0].mData;
    *(void *)&buf[8] = v10;
    *(void *)&buf[16] = *(void *)(v9 + 32);
    uint64_t v25 = *(void *)&buf[16] + 4 * a3;
    if (a6)
    {
      uint64_t v11 = a6;
      p_imagp = &v23[0].imagp;
      do
      {
        uint64_t v13 = (uint64_t)*a7++;
        uint64_t v14 = *(float **)(v13 + 16);
        *(p_imagp - 1) = v14;
        *p_imagp = &v14[a3];
        p_imagp += 2;
        --v11;
      }
      while (v11);
    }
    Beamformer_BeamNF::CmhBEAM2NOpt::process(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), (const DSPSplitComplex *)buf, v23);
    uint64_t v15 = *((void *)this + 70);
    float v16 = *(float *)(*(void *)(v15 + 856) + 16);
    int v17 = *(_DWORD *)(v15 + 132);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
    uint64_t Parameter = ausdk::AUElement::GetParameter(Element, 0);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 14, 4, Parameter, 0, (float)v17);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 13, 4, Parameter, 0, v16 * 4.0);
    return 0;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (!AUBeamNFLogScope(void)::scope)
  {
    CFStringRef v21 = MEMORY[0x1E4F14500];
LABEL_17:
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v22 = *((_DWORD *)this + 84);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2351;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      LOWORD(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 2) = v22;
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: inFramesToProcess != GetMaxFramesPerSlice(), inFramesToProcess = %d, GetMaxFramesPerSlice() = %d", buf, 0x1Eu);
    }
    return 4294956418;
  }
  CFStringRef v21 = *(NSObject **)AUBeamNFLogScope(void)::scope;
  if (*(void *)AUBeamNFLogScope(void)::scope) {
    goto LABEL_17;
  }
  return 4294956418;
}

void ___ZL16AUBeamNFLogScopev_block_invoke()
{
}

uint64_t AUBeamNF::ProcessBufferLists(AUBeamNF *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 70)) {
    return 4294956429;
  }
  int v9 = *((_DWORD *)this + 136);
  if (v9 != *((_DWORD *)this + 137))
  {
    AUBeamNF::ApplyParameterValues(this);
    *((_DWORD *)this + 137) = v9;
  }
  if (!*((unsigned char *)this + 552))
  {
    if (*((_DWORD *)this + 84) == a5)
    {
      *(void *)AudioTimeStamp buf = *(void *)&a3[1].mBuffers[0].mNumberChannels;
      *(void *)&buf[8] = *(void *)buf + 4 * a5;
      *(void *)&buf[16] = a3->mBuffers[0].mData;
      uint64_t v22 = *(void *)&buf[16] + 4 * a5;
      v20.realp = (float *)a4->mBuffers[0].mData;
      v20.imagp = &v20.realp[a5];
      Beamformer_BeamNF::CmhBEAM2NOpt::process(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), (const DSPSplitComplex *)buf, &v20);
      goto LABEL_9;
    }
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      uint64_t v18 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope) {
        return 4294956418;
      }
    }
    else
    {
      uint64_t v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *((_DWORD *)this + 84);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2288;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a5;
      LOWORD(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 2) = v19;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: inFramesToProcess != GetMaxFramesPerSlice(), inFramesToProcess = %d, GetMaxFramesPerSlice() = %d", buf, 0x1Eu);
    }
    return 4294956418;
  }
  *(void *)AudioTimeStamp buf = a3;
  v20.realp = (float *)&a4->mNumberBuffers;
  BlockProcessor::Process(*((BlockProcessor **)this + 71), a5, (const AudioBufferList **)buf, (AudioBufferList **)&v20);
LABEL_9:
  uint64_t v11 = *((void *)this + 70);
  uint64_t v12 = 404;
  if (!*((unsigned char *)this + 552)) {
    uint64_t v12 = 132;
  }
  uint64_t v13 = 1128;
  if (!*((unsigned char *)this + 552)) {
    uint64_t v13 = 856;
  }
  float v14 = *(float *)(*(void *)(v11 + v13) + 16);
  int v15 = *(_DWORD *)(v11 + v12);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
  uint64_t Parameter = ausdk::AUElement::GetParameter(Element, 0);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 14, 4, Parameter, 0, (float)v15);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 13, 4, Parameter, 0, v14 * 4.0);
  return 0;
}

void AUBeamNF::ApplyParameterValues(AUBeamNF *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v58 = 136315650;
          unsigned int v59 = "AUBeamNF.cpp";
          __int16 v60 = 1024;
          int v61 = 1853;
          __int16 v62 = 2048;
          uint64_t v63 = this;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::ApplyParameterValues (%p)", (uint8_t *)&v58, 0x1Cu);
        }
      }
    }
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v5 = Parameter;
  unsigned int v58 = Parameter;
  AudioUnitParameterUnit v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
  *(float *)&double v7 = ausdk::AUElement::GetParameter(v6, 0x20u);
  unsigned int v9 = *(float *)&v7;
  CFStringRef v10 = (Beamformer_BeamNF::CmhBEAM *)*((void *)this + 70);
  if (v10)
  {
    if (*((unsigned char *)this + 552))
    {
      Beamformer_BeamNF::CmhBEAM::setParameter(v10, 45, (CmhBEAM2NOpt *)&v58, v7, v8);
    }
    else if (v5 <= 1)
    {
      *((_DWORD *)v10 + 1) = v5;
    }
  }
  (*(void (**)(AUBeamNF *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 32, 0, 0, 0, (float)v9);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), v5);
  float v12 = ausdk::AUElement::GetParameter(v11, 1u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 1, 4, v5, 0, v12);
  float v13 = ausdk::AUElement::GetParameter(v11, 2u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 2, 4, v5, 0, v13);
  float v14 = ausdk::AUElement::GetParameter(v11, 3u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 3, 4, v5, 0, v14);
  float v15 = ausdk::AUElement::GetParameter(v11, 0x2Au);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 42, 4, v5, 0, v15);
  float v16 = ausdk::AUElement::GetParameter(v11, 4u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 4, 4, v5, 0, v16);
  if (*((unsigned char *)this + 552))
  {
    float v17 = ausdk::AUElement::GetParameter(v11, 5u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 5, 4, v5, 0, v17);
    float v18 = ausdk::AUElement::GetParameter(v11, 6u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 6, 4, v5, 0, v18);
    float v19 = ausdk::AUElement::GetParameter(v11, 0x29u);
    (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 41, 4, v5, 0, v19);
  }
  float v20 = ausdk::AUElement::GetParameter(v11, 7u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 7, 4, v5, 0, v20);
  float v21 = ausdk::AUElement::GetParameter(v11, 8u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 8, 4, v5, 0, v21);
  float v22 = ausdk::AUElement::GetParameter(v11, 9u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 9, 4, v5, 0, v22);
  float v23 = ausdk::AUElement::GetParameter(v11, 0xAu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 10, 4, v5, 0, v23);
  float v24 = ausdk::AUElement::GetParameter(v11, 0xBu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 11, 4, v5, 0, v24);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
  float v26 = ausdk::AUElement::GetParameter(v25, 0xCu);
  (*(void (**)(AUBeamNF *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 12, 0, 0, 0, v26);
  float v27 = ausdk::AUElement::GetParameter(v11, 0xFu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 15, 4, v5, 0, v27);
  float v28 = ausdk::AUElement::GetParameter(v11, 0x10u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 16, 4, v5, 0, v28);
  float v29 = ausdk::AUElement::GetParameter(v11, 0x11u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 17, 4, v5, 0, v29);
  float v30 = ausdk::AUElement::GetParameter(v11, 0x12u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 18, 4, v5, 0, v30);
  uint64_t v31 = v58;
  float v32 = ausdk::AUElement::GetParameter(v11, 0x13u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 19, 4, v31, 0, v32);
  float v33 = ausdk::AUElement::GetParameter(v11, 0x14u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 20, 4, v31, 0, v33);
  float v34 = ausdk::AUElement::GetParameter(v11, 0x15u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 21, 4, v31, 0, v34);
  float v35 = ausdk::AUElement::GetParameter(v11, 0x16u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 22, 4, v31, 0, v35);
  float v36 = ausdk::AUElement::GetParameter(v11, 0x17u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 23, 4, v31, 0, v36);
  float v37 = ausdk::AUElement::GetParameter(v11, 0x18u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 24, 4, v31, 0, v37);
  float v38 = ausdk::AUElement::GetParameter(v11, 0x19u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 25, 4, v31, 0, v38);
  float v39 = ausdk::AUElement::GetParameter(v11, 0x1Au);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 26, 4, v31, 0, v39);
  float v40 = ausdk::AUElement::GetParameter(v11, 0x1Bu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 27, 4, v31, 0, v40);
  float v41 = ausdk::AUElement::GetParameter(v11, 0x1Cu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 28, 4, v31, 0, v41);
  uint64_t v42 = v58;
  float v43 = ausdk::AUElement::GetParameter(v11, 0x1Du);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 29, 4, v42, 0, v43);
  float v44 = ausdk::AUElement::GetParameter(v11, 0x1Eu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 30, 4, v42, 0, v44);
  float v45 = ausdk::AUElement::GetParameter(v11, 0x1Fu);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 31, 4, v42, 0, v45);
  float v46 = ausdk::AUElement::GetParameter(v11, 0x21u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 33, 4, v42, 0, v46);
  float v47 = ausdk::AUElement::GetParameter(v11, 0x22u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 34, 4, v42, 0, v47);
  float v48 = ausdk::AUElement::GetParameter(v11, 0x23u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 35, 4, v42, 0, v48);
  float v49 = ausdk::AUElement::GetParameter(v11, 0x24u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 36, 4, v42, 0, v49);
  float v50 = ausdk::AUElement::GetParameter(v11, 0x25u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 37, 4, v42, 0, v50);
  float v51 = ausdk::AUElement::GetParameter(v11, 0x26u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 38, 4, v42, 0, v51);
  float v52 = ausdk::AUElement::GetParameter(v11, 0x27u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 39, 4, v42, 0, v52);
  uint64_t v53 = v58;
  float v54 = ausdk::AUElement::GetParameter(v11, 0x28u);
  (*(void (**)(AUBeamNF *, uint64_t, uint64_t, uint64_t, void, float))(*(void *)this + 152))(this, 40, 4, v53, 0, v54);
  unsigned int v57 = (Beamformer_BeamNF::CmhBEAM *)*((void *)this + 70);
  if (*((unsigned char *)this + 552))
  {
    if (v57) {
      Beamformer_BeamNF::CmhBEAM::setParameter(v57, 51, (AUBeamNF *)((char *)this + 528), v55, v56);
    }
  }
  else if (v57)
  {
    *((_DWORD *)v57 + 38) = *((_DWORD *)this + 132);
    *(_DWORD *)(*((void *)this + 70) + 896) = 0;
    *(_DWORD *)(*((void *)this + 70) + 40) = 1;
    *(_DWORD *)(*((void *)this + 70) + 808) = *((_DWORD *)this + 158);
  }
}

uint64_t AUBeamNF::CanScheduleParameters(AUBeamNF *this)
{
  return 0;
}

uint64_t AUBeamNF::SetParameter(AUBeamNF *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  float v160 = a5;
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      CFStringRef v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136316674;
          *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1048;
          __int16 v162 = 2048;
          uint64_t v163 = this;
          __int16 v164 = 1024;
          unsigned int v165 = a2;
          __int16 v166 = 1024;
          int v167 = a3;
          __int16 v168 = 1024;
          unsigned int v169 = a4;
          __int16 v170 = 2048;
          double v171 = a5;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetParameter (%p): id = %d, scope=%d, element=%d, inCFDictionaryRef Value = %f", buf, 0x38u);
        }
      }
    }
  }
  BOOL v159 = 0;
  if (a3 != 4)
  {
    if (a3) {
      return 4294956430;
    }
    if (a2 == 32)
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
      float v33 = 1.0;
      if (v160 == 0.0) {
        float v33 = 0.0;
      }
      ausdk::AUElement::SetParameter(Element, 0x20u, v33, 0);
      uint64_t v34 = *((void *)this + 70);
      if (v34 && !*((unsigned char *)this + 552))
      {
        uint64_t result = 0;
        *(_DWORD *)(v34 + 120) = v160 != 0.0;
        return result;
      }
    }
    else
    {
      if (a2 != 12)
      {
        if (a2) {
          return 4294956418;
        }
        uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
        float v12 = 1.0;
        if (v160 == 0.0) {
          float v12 = 0.0;
        }
        ausdk::AUElement::SetParameter(v11, 0, v12, 0);
        uint64_t result = 0;
        ++*((_DWORD *)this + 136);
        return result;
      }
      float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v35, 0xCu, v160, 0);
      uint64_t result = *((void *)this + 70);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)result, 67, (CmhBEAM2NOpt *)&v160, v36, v37);
      }
      else
      {
        float v38 = (CmhMicCheck *)(result + 496);
        *(float *)&double v36 = v160;
        *(float *)(result + 532) = v160;
LABEL_42:
        CmhMicCheck::init_check_mics(v38, v36, v37);
      }
    }
    return 0;
  }
  uint64_t result = 4294956418;
  switch(a2)
  {
    case 1u:
      float v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v54, 1u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v55 = v160;
      BOOL v159 = v160 != 0.0;
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 3, (CmhBEAM2NOpt *)&v159, v55, v56);
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(*((void *)this + 70) + 856) + 44) = v160 != 0.0;
      return result;
    case 2u:
      unsigned int v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v57, 2u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v58 = v160;
      BOOL v159 = v160 != 0.0;
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 66, (CmhBEAM2NOpt *)&v159, v58, v59);
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 70) + 240) = v160 != 0.0;
      return result;
    case 3u:
      __int16 v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v60, 3u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v61 = v160;
      BOOL v63 = v160 != 0.0;
      BOOL v159 = v63;
      int v64 = *((_DWORD *)this + 133);
      if (*((unsigned char *)this + 552))
      {
        if (v64 == 1)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 68, (CmhBEAM2NOpt *)&v159, v61, v62);
        }
        else if (v64 == 2)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 4, (CmhBEAM2NOpt *)&v159, v61, v62);
        }
        return 0;
      }
      if (v64 == 1)
      {
        uint64_t result = 0;
        *(_DWORD *)(*((void *)this + 70) + 260) = v63;
      }
      else
      {
        if (v64 != 2) {
          return 0;
        }
        uint64_t result = 0;
        uint64_t v145 = *((void *)this + 70);
        *(_DWORD *)(v145 + 260) = v63;
        *(_DWORD *)(v145 + 264) = v63;
      }
      return result;
    case 4u:
      unsigned int v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v65, 4u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v66 = v160;
      BOOL v159 = v160 != 0.0;
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 5, (CmhBEAM2NOpt *)&v159, v66, v67);
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 70) + 376) = v160 != 0.0;
      return result;
    case 5u:
      unsigned int v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v68, 5u, v160, 0);
      if (!*((void *)this + 70) || !*((unsigned char *)this + 552)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v69 = v160;
      BOOL v159 = v160 != 0.0;
      int v71 = *((_DWORD *)this + 133);
      if (v71 == 1)
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 70, (CmhBEAM2NOpt *)&v159, v69, v70);
      }
      else if (v71 == 2)
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 6, (CmhBEAM2NOpt *)&v159, v69, v70);
      }
      return 0;
    case 6u:
      long long v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v72, 6u, v160, 0);
      if (!*((void *)this + 70) || !*((unsigned char *)this + 552)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      int v75 = *((_DWORD *)this + 133);
      if (v75 == 1)
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 72, (CmhBEAM2NOpt *)&v160, v73, v74);
      }
      else if (v75 == 2)
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 7, (CmhBEAM2NOpt *)&v160, v73, v74);
      }
      return 0;
    case 7u:
      int v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v76, 7u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v77 = v160;
      BOOL v79 = v160 != 0.0;
      BOOL v159 = v79;
      int v80 = *((_DWORD *)this + 133);
      if (*((unsigned char *)this + 552))
      {
        if (v80 == 1)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 74, (CmhBEAM2NOpt *)&v159, v77, v78);
        }
        else if (v80 == 2)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 39, (CmhBEAM2NOpt *)&v159, v77, v78);
        }
        return 0;
      }
      if (v80 == 1)
      {
        uint64_t result = 0;
        uint64_t v155 = *((void *)this + 70);
        int v156 = *(_DWORD *)(v155 + 8);
        if (v156 >= 1) {
          int v156 = 1;
        }
        *(_DWORD *)(*(void *)(v155 + 440) + 136 * v156 - 28) = v79;
        return result;
      }
      if (v80 == 2)
      {
        uint64_t v146 = *((void *)this + 70);
        uint64_t v147 = *(void *)(v146 + 440);
        *(_DWORD *)(v147 + 108) = v79;
        if (*(int *)(v146 + 8) >= 2)
        {
          uint64_t result = 0;
          *(_DWORD *)(v147 + 244) = v79;
          return result;
        }
      }
      return 0;
    case 8u:
      double v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v81, 8u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      int v84 = *((_DWORD *)this + 133);
      if (*((unsigned char *)this + 552))
      {
        if (v84 == 1)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 76, (CmhBEAM2NOpt *)&v160, v82, v83);
        }
        else if (v84 == 2)
        {
          Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 42, (CmhBEAM2NOpt *)&v160, v82, v83);
        }
        return 0;
      }
      if (v84 == 1)
      {
        uint64_t result = 0;
        uint64_t v157 = *((void *)this + 70);
        int v158 = *(_DWORD *)(v157 + 8);
        if (v158 >= 1) {
          int v158 = 1;
        }
        *(float *)(*(void *)(v157 + 440) + 136 * v158 - 24) = v160;
        return result;
      }
      if (v84 == 2)
      {
        uint64_t v148 = *((void *)this + 70);
        float v149 = v160;
        uint64_t v150 = *(void *)(v148 + 440);
        *(float *)(v150 + 112) = v160;
        if (*(int *)(v148 + 8) >= 2)
        {
          uint64_t result = 0;
          *(float *)(v150 + 248) = v149;
          return result;
        }
      }
      return 0;
    case 9u:
      unsigned int v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v85, 9u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      BOOL v88 = (Beamformer_BeamNF::CmhBEAM *)*((void *)this + 70);
      if (*((unsigned char *)this + 552)) {
        Beamformer_BeamNF::CmhBEAM::setParameter(v88, 35, (CmhBEAM2NOpt *)&v160, v86, v87);
      }
      else {
        CmhBEAM2NOpt::setWNG(v88, v160);
      }
      return 0;
    case 0xAu:
    case 0x26u:
    case 0x27u:
      float v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v14, a2, v160, 0);
      if (AUBeamNFLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
      }
      if (AUBeamNFLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
        {
          float v15 = *(NSObject **)AUBeamNFLogScope(void)::scope;
          if (*(void *)AUBeamNFLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1595;
              __int16 v162 = 2048;
              uint64_t v163 = this;
              _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetBetaVector (%p)", buf, 0x1Cu);
            }
          }
        }
      }
      if (!*((void *)this + 70)) {
        return 0;
      }
      float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
      if (ausdk::AUElement::GetParameter(v16, 0) != (float)a4) {
        return 0;
      }
      float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      float Parameter = ausdk::AUElement::GetParameter(v17, 0xAu);
      float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      float v20 = ausdk::AUElement::GetParameter(v19, 0x27u);
      float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      float v22 = ausdk::AUElement::GetParameter(v21, 0x26u);
      uint64_t v23 = *((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        unint64_t v24 = *(unsigned int *)(v23 + 140);
        *(void *)AudioTimeStamp buf = 0;
        *(void *)&buf[8] = 0;
        std::valarray<float>::resize((uint64_t)buf, v24, Parameter);
        uint64_t v25 = ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0);
        double v26 = (float)(2 * v24 - 2);
        double v27 = v22 / *(double *)(v25 + 80) * v26;
        unsigned int v28 = v27;
        float v29 = *(CmhBEAM2NOpt **)buf;
        if (v24 > v27)
        {
          unint64_t v30 = v24 - v28;
          uint64_t v31 = (float *)(*(void *)buf + 4 * v28);
          do
          {
            *v31++ = v20;
            --v30;
          }
          while (v30);
        }
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 46, v29, v27, v26);
      }
      else
      {
        unint64_t v142 = *(unsigned int *)(v23 + 28);
        *(void *)AudioTimeStamp buf = 0;
        *(void *)&buf[8] = 0;
        std::valarray<float>::resize((uint64_t)buf, v142, Parameter);
        double v143 = v22 / *(double *)(ausdk::AUScope::SafeGetElement((AUBeamNF *)((char *)this + 80), 0) + 80);
        if (*((unsigned char *)this + 540))
        {
          unsigned int v144 = *((_DWORD *)this + 134);
        }
        else if (*((unsigned char *)this + 376))
        {
          unsigned int v144 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          unsigned int v144 = 480;
        }
        uint64_t v154 = (v143 * (float)v144);
        float v29 = *(CmhBEAM2NOpt **)buf;
        if (v142 > v154)
        {
          do
            *((float *)v29 + v154++) = v20;
          while (v142 != v154);
          Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(*((void *)this + 70), (float *)v29);
          goto LABEL_259;
        }
        Beamformer_BeamNF::CmhBEAM2NOpt::setABFVector(*((void *)this + 70), *(float **)buf);
      }
      if (!v29) {
        return 0;
      }
LABEL_259:
      operator delete(v29);
      return 0;
    case 0xBu:
      int v89 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v89, 0xBu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v90 = v160;
      int v92 = llroundf(v160);
      BOOL v159 = v92;
      int v93 = (int *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 78, (CmhBEAM2NOpt *)&v159, v90, v91);
        return 0;
      }
      uint64_t result = 0;
      int v151 = (int)(float)((float)((float)v92 / (float)v93[3]) * (float)v93[4]);
      v93[8] = v92;
      int v152 = v93[6] - 1;
      if (v152 >= v151) {
        int v152 = v151;
      }
      v93[64] = v152;
      return result;
    case 0xDu:
      double v94 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v94, 0xDu, v160, 0);
      return 0;
    case 0xEu:
      unint64_t v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v95, 0xEu, v160, 0);
      return 0;
    case 0xFu:
      unint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v96, 0xFu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      double v97 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v97, 83, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v97 + 124);
      *(float *)&double v36 = v160;
      v97[134] = v160;
      goto LABEL_42;
    case 0x10u:
      double v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v98, 0x10u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      long long v99 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v99, 84, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v99 + 124);
      *(float *)&double v36 = v160;
      v99[135] = v160;
      goto LABEL_42;
    case 0x11u:
      long long v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v100, 0x11u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      unsigned int v101 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v101, 85, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v101 + 124);
      *(float *)&double v36 = v160;
      v101[136] = v160;
      goto LABEL_42;
    case 0x12u:
      uint64_t v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v102, 0x12u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v103 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v103, 86, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v103 + 124);
      *(float *)&double v36 = v160;
      v103[137] = v160;
      goto LABEL_42;
    case 0x13u:
      int v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v104, 0x13u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v105 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v105, 87, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v105 + 124);
      *(float *)&double v36 = v160;
      v105[138] = v160;
      goto LABEL_42;
    case 0x14u:
      UInt32 v106 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v106, 0x14u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      AudioChannelLayout v107 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v107, 88, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v107 + 124);
      *(float *)&double v36 = v160;
      v107[139] = v160;
      goto LABEL_42;
    case 0x15u:
      long long v108 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v108, 0x15u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      int v109 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v109, 89, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v109 + 124);
      *(float *)&double v36 = v160;
      v109[140] = v160;
      goto LABEL_42;
    case 0x16u:
      uint64_t v110 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v110, 0x16u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      unsigned __int8 v111 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v111, 90, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v111 + 124);
      *(float *)&double v36 = v160;
      v111[141] = v160;
      goto LABEL_42;
    case 0x17u:
      __int16 v112 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v112, 0x17u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      int v113 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v113, 91, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v113 + 124);
      *(float *)&double v36 = v160;
      v113[142] = v160;
      goto LABEL_42;
    case 0x18u:
      AudioChannelLayout v114 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v114, 0x18u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      unint64_t v115 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v115, 92, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v115 + 124);
      *(float *)&double v36 = v160;
      v115[143] = v160;
      goto LABEL_42;
    case 0x19u:
      uint64_t v116 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v116, 0x19u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v117 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v117, 93, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v117 + 124);
      *(float *)&double v36 = v160;
      v117[144] = v160;
      goto LABEL_42;
    case 0x1Au:
      float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v39, 0x1Au, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      float v40 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v40, 94, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v40 + 124);
      *(float *)&double v36 = v160;
      v40[145] = v160;
      goto LABEL_42;
    case 0x1Bu:
      unint64_t v118 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v118, 0x1Bu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v119 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v119, 95, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v119 + 124);
      *(float *)&double v36 = v160;
      v119[146] = v160;
      goto LABEL_42;
    case 0x1Cu:
      uint64_t v120 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v120, 0x1Cu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      unint64_t v121 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v121, 96, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v121 + 124);
      *(float *)&double v36 = v160;
      v121[147] = v160;
      goto LABEL_42;
    case 0x1Du:
      unsigned int v122 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v122, 0x1Du, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v123 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v123, 97, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v123 + 124);
      *(float *)&double v36 = v160;
      v123[148] = v160;
      goto LABEL_42;
    case 0x1Eu:
      unint64_t v124 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v124, 0x1Eu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v125 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v125, 98, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v125 + 124);
      *(float *)&double v36 = v160;
      v125[149] = v160;
      goto LABEL_42;
    case 0x1Fu:
      unint64_t v126 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v126, 0x1Fu, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      unint64_t v127 = (float *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v127, 99, (CmhBEAM2NOpt *)&v160, v36, v37);
        return 0;
      }
      float v38 = (CmhMicCheck *)(v127 + 124);
      *(float *)&double v36 = v160;
      v127[150] = v160;
      goto LABEL_42;
    case 0x21u:
      float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v41, 0x21u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v36 = v160;
      unsigned int v42 = llroundf(v160);
      BOOL v159 = v42;
      float v43 = (_DWORD *)*((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v43, 81, (CmhBEAM2NOpt *)&v159, v36, v37);
        return 0;
      }
      v43[34] = v42;
      float v38 = (CmhMicCheck *)(v43 + 124);
      v43[151] = v42;
      goto LABEL_42;
    case 0x22u:
      uint64_t v128 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v128, 0x22u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 103, (CmhBEAM2NOpt *)&v160, v129, v130);
        return 0;
      }
      uint64_t result = 0;
      *(float *)(*((void *)this + 70) + 380) = v160;
      return result;
    case 0x23u:
      unint64_t v131 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v131, 0x23u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      uint64_t v134 = *((void *)this + 70);
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 104, (CmhBEAM2NOpt *)&v160, v132, v133);
        return 0;
      }
      uint64_t result = 0;
      int v153 = (int)(float)((float)(v160 / (float)*(int *)(v134 + 12)) * (float)*(int *)(v134 + 16));
      if (*(_DWORD *)(v134 + 24) - 1 < v153) {
        int v153 = *(_DWORD *)(v134 + 24) - 1;
      }
      *(float *)(v134 + 140) = v160;
      *(float *)(v134 + 384) = (float)v153;
      return result;
    case 0x24u:
      uint64_t v135 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v135, 0x24u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 105, (CmhBEAM2NOpt *)&v160, v136, v137);
        return 0;
      }
      uint64_t result = 0;
      *(float *)(*((void *)this + 70) + 388) = v160;
      return result;
    case 0x25u:
      float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v44, 0x25u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 106, (CmhBEAM2NOpt *)&v160, v45, v46);
        return 0;
      }
      uint64_t result = 0;
      *(float *)(*((void *)this + 70) + 392) = v160;
      return result;
    case 0x28u:
      uint64_t v138 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v138, 0x28u, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v139 = v160;
      unsigned int v141 = llroundf(v160);
      BOOL v159 = v141;
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 107, (CmhBEAM2NOpt *)&v159, v139, v140);
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 70) + 144) = v141;
      return result;
    case 0x29u:
      float v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v47, 0x29u, v160, 0);
      if (!*((void *)this + 70) || !*((unsigned char *)this + 552)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      int v50 = *((_DWORD *)this + 133);
      if (v50 == 1 || v50 == 2) {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 101, (CmhBEAM2NOpt *)&v160, v48, v49);
      }
      return 0;
    case 0x2Au:
      float v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 576), a4);
      ausdk::AUElement::SetParameter(v51, 0x2Au, v160, 0);
      if (!*((void *)this + 70)) {
        return 0;
      }
      uint64_t result = AUBeamNF::IsActivePart(this, a4);
      if (!result) {
        return result;
      }
      *(float *)&double v52 = v160;
      BOOL v159 = v160 != 0.0;
      if (*((unsigned char *)this + 552))
      {
        Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 43, (CmhBEAM2NOpt *)&v159, v52, v53);
        return 0;
      }
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 70) + 284) = v160 != 0.0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1BB552C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL AUBeamNF::IsActivePart(AUBeamNF *this, unsigned int a2)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamNF *)((char *)this + 32), 0);
  return ausdk::AUElement::GetParameter(Element, 0) == (float)a2;
}

uint64_t AUBeamNF::SetProperty(AUBeamNF *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 3700:
      if (a6 < 4) {
        goto LABEL_20;
      }
      uint64_t result = 0;
      *((unsigned char *)this + 376) = *a5;
      break;
    case 3701:
      if (*((unsigned char *)this + 552)) {
        goto LABEL_18;
      }
      if (a6 < 4) {
        goto LABEL_20;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 134) = *(_DWORD *)a5;
      *((unsigned char *)this + 540) = 1;
      break;
    case 3702:
    case 3703:
    case 3705:
    case 3706:
    case 3707:
    case 3708:
      if (*((unsigned char *)this + 552)) {
        uint64_t result = 4294956417;
      }
      else {
        uint64_t result = 4294956431;
      }
      break;
    case 3704:
      if (*((unsigned char *)this + 552)) {
        goto LABEL_18;
      }
      if (a6 < 4) {
        goto LABEL_20;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 158) = *(_DWORD *)a5 != 0;
      goto LABEL_22;
    default:
      if (a2 == 21)
      {
        if (a6 < 4)
        {
LABEL_20:
          uint64_t result = 4294956445;
        }
        else
        {
          int v8 = *(_DWORD *)a5;
          int v9 = *(_DWORD *)a5 != 0;
          if (v9 != (*(unsigned int (**)(AUBeamNF *))(*(void *)this + 576))(this)) {
            *((_DWORD *)this + 132) = v8 != 0;
          }
          uint64_t result = 0;
LABEL_22:
          ++*((_DWORD *)this + 136);
        }
      }
      else
      {
LABEL_18:
        uint64_t result = 4294956417;
      }
      break;
  }
  return result;
}

uint64_t AUBeamNF::GetProperty(AUBeamNF *this, int a2, int a3, unsigned int a4, int *__dst)
{
  if (!a3)
  {
    switch(a2)
    {
      case 3700:
        uint64_t v5 = 0;
        int v7 = *((unsigned __int8 *)this + 376);
        goto LABEL_66;
      case 3701:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        if (*((unsigned char *)this + 540))
        {
          int v7 = *((_DWORD *)this + 134);
        }
        else if (*((unsigned char *)this + 376))
        {
          int v7 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          int v7 = 480;
        }
        uint64_t v5 = 0;
        goto LABEL_66;
      case 3702:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v9 = *((void *)this + 70);
        if (!v9) {
          return 4294956429;
        }
        int v10 = *((_DWORD *)this + 133);
        if (v10 == 2)
        {
          uint64_t v30 = *(unsigned int *)(v9 + 8);
          uint64_t v31 = *(void *)(v9 + 440);
          if ((int)v30 < 1)
          {
            int v36 = 0;
          }
          else
          {
            uint64_t v32 = 0;
            int v33 = 0;
            uint64_t v34 = (int *)(v31 + 108);
            do
            {
              int v35 = *v34;
              v34 += 34;
              if (v35 == 1) {
                int v33 = v32;
              }
              ++v32;
            }
            while (v30 != v32);
            int v36 = v33;
          }
          if (!*(_DWORD *)(v31 + 136 * v36 + 108)) {
            return 4294956446;
          }
        }
        else if (v10 == 1)
        {
          int v11 = *(_DWORD *)(v9 + 8);
          if (v11 >= 1) {
            int v11 = 1;
          }
          if (!*(_DWORD *)(*(void *)(v9 + 440) + 136 * v11 - 28)) {
            return 4294956446;
          }
        }
        int v37 = *((unsigned __int8 *)this + 540);
        if (*((unsigned char *)this + 540))
        {
          unsigned int v41 = *((_DWORD *)this + 134);
        }
        else
        {
          if (!*((unsigned char *)this + 376)) {
            goto LABEL_84;
          }
          unsigned int v41 = 2 * *((_DWORD *)this + 84);
        }
        if (v41 < 2) {
          return 0;
        }
LABEL_84:
        uint64_t v39 = *(void *)(v9 + 440);
        int v40 = *(_DWORD *)(v9 + 8);
        if (v40 >= 1) {
          int v40 = 1;
        }
LABEL_86:
        unint64_t v24 = *(const void **)(v39 + 136 * v40 - 16);
        if (v37)
        {
          unsigned int v42 = *((_DWORD *)this + 134);
        }
        else if (*((unsigned char *)this + 376))
        {
          unsigned int v42 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          unsigned int v42 = 480;
        }
        unsigned int v29 = (v42 >> 1) - 1;
LABEL_92:
        memcpy(__dst, v24, 4 * v29);
        return 0;
      case 3703:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v12 = *((void *)this + 70);
        if (!v12) {
          return 4294956429;
        }
        int v13 = *((_DWORD *)this + 133);
        if (v13 == 1) {
          return 4294956417;
        }
        if (v13 == 2)
        {
          uint64_t v14 = *(unsigned int *)(v12 + 8);
          uint64_t v15 = *(void *)(v12 + 440);
          if ((int)v14 < 1)
          {
            int v20 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            int v17 = 0;
            float v18 = (int *)(v15 + 108);
            do
            {
              int v19 = *v18;
              v18 += 34;
              if (v19 == 1) {
                int v17 = v16;
              }
              ++v16;
            }
            while (v14 != v16);
            int v20 = v17;
          }
          if (!*(_DWORD *)(v15 + 136 * v20 + 108)) {
            return 4294956446;
          }
        }
        int v37 = *((unsigned __int8 *)this + 540);
        if (*((unsigned char *)this + 540))
        {
          unsigned int v38 = *((_DWORD *)this + 134);
        }
        else
        {
          if (!*((unsigned char *)this + 376)) {
            goto LABEL_74;
          }
          unsigned int v38 = 2 * *((_DWORD *)this + 84);
        }
        if (v38 < 2) {
          return 0;
        }
LABEL_74:
        uint64_t v39 = *(void *)(v12 + 440);
        int v40 = *(_DWORD *)(v12 + 8);
        if (v40 >= 2) {
          int v40 = 2;
        }
        goto LABEL_86;
      case 3704:
        uint64_t v5 = *((unsigned __int8 *)this + 552);
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        int v7 = *((_DWORD *)this + 158);
LABEL_66:
        char *__dst = v7;
        return v5;
      case 3705:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v21 = *((void *)this + 70);
        if (!v21) {
          return 4294956429;
        }
        float v22 = *(const void ***)(v21 + 816);
        goto LABEL_36;
      case 3706:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v23 = *((void *)this + 70);
        if (!v23) {
          return 4294956429;
        }
        float v22 = *(const void ***)(v23 + 824);
LABEL_36:
        unint64_t v24 = *v22;
        goto LABEL_50;
      case 3707:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v25 = *((void *)this + 70);
        if (!v25) {
          return 4294956429;
        }
        if (*((_DWORD *)this + 133) == 1) {
          return 4294956417;
        }
        uint64_t v26 = *(void *)(v25 + 816);
        goto LABEL_46;
      case 3708:
        if (*((unsigned char *)this + 552)) {
          return 4294956417;
        }
        uint64_t v25 = *((void *)this + 70);
        if (!v25) {
          return 4294956429;
        }
        if (*((_DWORD *)this + 133) == 1) {
          return 4294956417;
        }
        uint64_t v26 = *(void *)(v25 + 824);
LABEL_46:
        int v27 = *(_DWORD *)(v25 + 8);
        if (v27 > 2) {
          int v28 = 1;
        }
        else {
          int v28 = v27 - 1;
        }
        unint64_t v24 = *(const void **)(v26 + 8 * v28);
LABEL_50:
        if (*((unsigned char *)this + 540))
        {
          unsigned int v29 = *((_DWORD *)this + 134);
        }
        else if (*((unsigned char *)this + 376))
        {
          unsigned int v29 = 2 * *((_DWORD *)this + 84);
        }
        else
        {
          unsigned int v29 = 480;
        }
        goto LABEL_92;
      default:
        if (a2 != 21) {
          return 4294956417;
        }
        int v8 = (*(uint64_t (**)(AUBeamNF *))(*(void *)this + 576))(this);
        uint64_t v5 = 0;
        char *__dst = v8;
        return v5;
    }
  }
  return 4294956417;
}

uint64_t AUBeamNF::GetPropertyInfo(AUBeamNF *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 3700:
      goto LABEL_11;
    case 3701:
    case 3704:
      if (*((unsigned char *)this + 552)) {
        return 4294956417;
      }
      goto LABEL_11;
    case 3702:
    case 3703:
      if (*((unsigned char *)this + 552)) {
        return 4294956417;
      }
      if (!*((void *)this + 70)) {
        return 4294956429;
      }
      *a6 = 0;
      if (!*((unsigned char *)this + 540))
      {
        if (!*((unsigned char *)this + 376))
        {
          unsigned int v9 = 480;
          goto LABEL_27;
        }
        int v10 = *((_DWORD *)this + 84);
        if ((v10 & 0x7FFFFFFF) != 0)
        {
          unsigned int v9 = 2 * v10;
          goto LABEL_27;
        }
LABEL_23:
        unsigned int v8 = 0;
        goto LABEL_28;
      }
      unsigned int v9 = *((_DWORD *)this + 134);
      if (v9 <= 1) {
        goto LABEL_23;
      }
LABEL_27:
      unsigned int v8 = ((2 * v9) & 0xFFFFFFFC) - 4;
LABEL_28:
      uint64_t result = 0;
      *a5 = v8;
      return result;
    case 3705:
    case 3706:
    case 3707:
    case 3708:
      if (*((unsigned char *)this + 552)) {
        return 4294956417;
      }
      if (!*((void *)this + 70)) {
        return 4294956429;
      }
      *a6 = 0;
      if (*((unsigned char *)this + 540))
      {
        int v7 = *((_DWORD *)this + 134);
      }
      else if (*((unsigned char *)this + 376))
      {
        int v7 = 2 * *((_DWORD *)this + 84);
      }
      else
      {
        int v7 = 480;
      }
      unsigned int v8 = 4 * v7;
      goto LABEL_28;
    default:
      if (a2 != 21) {
        return 4294956417;
      }
LABEL_11:
      *a6 = 1;
      unsigned int v8 = 4;
      goto LABEL_28;
  }
}

void AUBeamNF::Cleanup(AUBeamNF *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          int v22 = 136315650;
          uint64_t v23 = "AUBeamNF.cpp";
          __int16 v24 = 1024;
          int v25 = 382;
          __int16 v26 = 2048;
          int v27 = this;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::Cleanup (%p)", (uint8_t *)&v22, 0x1Cu);
        }
      }
    }
  }
  unsigned __int8 v3 = (char *)this + 560;
  uint64_t v4 = *((void *)this + 70);
  if (!*((unsigned char *)this + 552))
  {
    if (!v4) {
      return;
    }
    Beamformer_BeamNF::CmhBEAM2NOpt::~CmhBEAM2NOpt(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70));
    goto LABEL_50;
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 124))
    {
      if (*(void *)(v4 + 56))
      {
        int v5 = *(_DWORD *)v4;
        if (*(int *)v4 >= 1)
        {
          uint64_t v6 = 0;
          do
          {
            uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
            if (v7)
            {
              MEMORY[0x1C185D340](v7, 0x1000C8052888210);
              int v5 = *(_DWORD *)v4;
            }
            ++v6;
          }
          while (v6 < v5);
        }
      }
      if (*(void *)(v4 + 64))
      {
        int v8 = *(_DWORD *)(v4 + 8);
        if (v8 >= 1)
        {
          for (uint64_t i = 0; i < v8; ++i)
          {
            uint64_t v10 = *(void *)(*(void *)(v4 + 64) + 8 * i);
            if (v10)
            {
              MEMORY[0x1C185D340](v10, 0x1000C8052888210);
              int v8 = *(_DWORD *)(v4 + 8);
            }
          }
        }
      }
      if (*(void *)(v4 + 72))
      {
        int v11 = *(_DWORD *)(v4 + 4);
        if (v11 >= 1)
        {
          for (uint64_t j = 0; j < v11; ++j)
          {
            uint64_t v13 = *(void *)(*(void *)(v4 + 72) + 8 * j);
            if (v13)
            {
              MEMORY[0x1C185D340](v13, 0x1000C8052888210);
              int v11 = *(_DWORD *)(v4 + 4);
            }
          }
        }
      }
    }
    uint64_t v14 = *(void *)(v4 + 56);
    if (v14) {
      MEMORY[0x1C185D340](v14, 0x80C80B8603338);
    }
    *(void *)(v4 + 56) = 0;
    uint64_t v15 = *(void *)(v4 + 64);
    if (v15) {
      MEMORY[0x1C185D340](v15, 0x80C80B8603338);
    }
    *(void *)(v4 + 64) = 0;
    uint64_t v16 = *(void *)(v4 + 72);
    if (v16) {
      MEMORY[0x1C185D340](v16, 0x80C80B8603338);
    }
    *(void *)(v4 + 72) = 0;
    uint64_t v17 = *(void *)(v4 + 80);
    if (v17) {
      MEMORY[0x1C185D340](v17, 0x1000C8052888210);
    }
    uint64_t v18 = *(void *)(v4 + 32);
    if (v18) {
      MEMORY[0x1C185D340](v18, 0x80C80B8603338);
    }
    uint64_t v19 = *(void *)(v4 + 40);
    if (v19) {
      MEMORY[0x1C185D340](v19, 0x80C80B8603338);
    }
    uint64_t v20 = *(void *)(v4 + 48);
    if (v20) {
      MEMORY[0x1C185D340](v20, 0x80C80B8603338);
    }
    CmhBEAMprocOpt::deallocate_memory((_DWORD *)(v4 + 88));
    LPFilterBank::~LPFilterBank((LPFilterBank *)(v4 + 1512));
    if (*(_DWORD *)(v4 + 1176)) {
      Cns::deallocate_memory(v4 + 1176);
    }
    Beamformer_BeamNF::CmhBEAM2NOpt::~CmhBEAM2NOpt((Beamformer_BeamNF::CmhBEAM2NOpt *)(v4 + 272));
    MEMORY[0x1C185D370](v4, 0x10F0C40FCF92710);
    *(void *)unsigned __int8 v3 = 0;
  }
  uint64_t v21 = *((void *)this + 71);
  if (v21)
  {
    unsigned __int8 v3 = (char *)this + 568;
    BlockBuffer::~BlockBuffer((BlockBuffer *)(v21 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)v21);
LABEL_50:
    MEMORY[0x1C185D370]();
    *(void *)unsigned __int8 v3 = 0;
  }
}

uint64_t AUBeamNF::Initialize(const __CFDictionary **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          int v37 = "AUBeamNF.cpp";
          __int16 v38 = 1024;
          int v39 = 412;
          __int16 v40 = 2048;
          unsigned int v41 = (AUBeamNF *)this;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::Initialize (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  if (!*((unsigned char *)this + 17))
  {
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      uint64_t v4 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
      int16x8_t v7 = *(int16x8_t *)(Element + 96);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(Element + 80);
      *(int16x8_t *)&v28[16] = v7;
      uint64_t v29 = *(void *)(Element + 112);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v28, (char *)buf, *(double *)v28, v7);
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v31 = "AUBeamNF.cpp";
      __int16 v32 = 1024;
      int v33 = 422;
      __int16 v34 = 2080;
      int v35 = buf;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: input stream format: %s", v30, 0x1Cu);
      if (AUBeamNFLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
      }
    }
LABEL_27:
    if (AUBeamNFLogScope(void)::scope)
    {
      int v8 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope) {
        goto LABEL_34;
      }
    }
    else
    {
      int v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
      int16x8_t v10 = *(int16x8_t *)(v9 + 96);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(v9 + 80);
      *(int16x8_t *)&v28[16] = v10;
      uint64_t v29 = *(void *)(v9 + 112);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v28, (char *)buf, *(double *)v28, v10);
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v31 = "AUBeamNF.cpp";
      __int16 v32 = 1024;
      int v33 = 423;
      __int16 v34 = 2080;
      int v35 = buf;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: output stream 0 format: %s", v30, 0x1Cu);
      if (AUBeamNFLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
      }
    }
LABEL_34:
    if (AUBeamNFLogScope(void)::scope)
    {
      int v11 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope)
      {
LABEL_40:
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 108) != 2) {
          return 4294956428;
        }
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 108) != 1) {
          return 4294956428;
        }
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 1u) + 108) != 1) {
          return 4294956428;
        }
        double v14 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 80);
        if (v14 != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 80)) {
          return 4294956428;
        }
        int v15 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 88);
        if (v15 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 88)) {
          return 4294956428;
        }
        *(_DWORD *)uint64_t v30 = 2;
        int v16 = *((_DWORD *)this + 133);
        valuePtr[0] = 20;
        valuePtr[1] = v16;
        CFDictionaryRef v17 = this[78];
        if (v17 && !CFDictionaryGetValue(v17, @"diffr") && CFDictionaryGetValue(this[78], @"mic_spacing"))
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(this[78], @"mic_spacing");
          if (!CFNumberGetValue(Value, kCFNumberIntType, valuePtr))
          {
            if (AUBeamNFLogScope(void)::once != -1) {
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
            }
            if (AUBeamNFLogScope(void)::scope)
            {
              int v22 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(void *)AUBeamNFLogScope(void)::scope) {
                return 4294956421;
              }
            }
            else
            {
              int v22 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v28 = 136315394;
              *(void *)&v28[4] = "AUBeamNF.cpp";
              *(_WORD *)&v28[12] = 1024;
              *(_DWORD *)&v28[14] = 451;
              __int16 v24 = "%25s:%-5d AUBeamNF Error: Converting mic spacing from tuning file";
              int v25 = v22;
              uint32_t v26 = 18;
LABEL_84:
              _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, v24, v28, v26);
            }
            return 4294956421;
          }
          if ((valuePtr[0] - 46) <= 0xFFFFFFDB)
          {
            if (AUBeamNFLogScope(void)::once != -1) {
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
            }
            if (AUBeamNFLogScope(void)::scope)
            {
              uint64_t v21 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(void *)AUBeamNFLogScope(void)::scope) {
                return 4294956421;
              }
            }
            else
            {
              uint64_t v21 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v28 = 136315650;
              *(void *)&v28[4] = "AUBeamNF.cpp";
              *(_WORD *)&v28[12] = 1024;
              *(_DWORD *)&v28[14] = 456;
              *(_WORD *)&v28[18] = 1024;
              *(_DWORD *)&v28[20] = valuePtr[0];
              __int16 v24 = "%25s:%-5d AUBeamNF Error: Invalid mic spacing %d";
              int v25 = v21;
              uint32_t v26 = 24;
              goto LABEL_84;
            }
            return 4294956421;
          }
        }
        int v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 88);
        if (v18 != 1718773105)
        {
          if (v18 == 1819304813 && *((unsigned char *)this + 552)) {
            operator new();
          }
          return 4294956428;
        }
        if (*((unsigned char *)this + 552)) {
          return 4294956428;
        }
        if (*((unsigned char *)this + 376)) {
          operator new();
        }
        if (AUBeamNFLogScope(void)::once != -1) {
          dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
        }
        if (AUBeamNFLogScope(void)::scope)
        {
          uint64_t v23 = *(NSObject **)AUBeamNFLogScope(void)::scope;
          if (!*(void *)AUBeamNFLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v23 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v28 = 136315394;
          *(void *)&v28[4] = "AUBeamNF.cpp";
          *(_WORD *)&v28[12] = 1024;
          *(_DWORD *)&v28[14] = 488;
          _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: AUBeamNFN should have property kAudioUnitProperty_UsesFixedBlockSize set to 1 before initialize", v28, 0x12u);
        }
        return 4294956445;
      }
    }
    else
    {
      int v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 1u);
      int16x8_t v13 = *(int16x8_t *)(v12 + 96);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(v12 + 80);
      *(int16x8_t *)&v28[16] = v13;
      uint64_t v29 = *(void *)(v12 + 112);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v28, (char *)buf, *(double *)v28, v13);
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v31 = "AUBeamNF.cpp";
      __int16 v32 = 1024;
      int v33 = 424;
      __int16 v34 = 2080;
      int v35 = buf;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d \tAUBeamNF: output stream 1 format: %s", v30, 0x1Cu);
    }
    goto LABEL_40;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (!AUBeamNFLogScope(void)::scope)
  {
    unsigned __int8 v3 = MEMORY[0x1E4F14500];
LABEL_20:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v37 = "AUBeamNF.cpp";
      __int16 v38 = 1024;
      int v39 = 416;
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Initialized", buf, 0x12u);
    }
    return 4294956447;
  }
  unsigned __int8 v3 = *(NSObject **)AUBeamNFLogScope(void)::scope;
  if (*(void *)AUBeamNFLogScope(void)::scope) {
    goto LABEL_20;
  }
  return 4294956447;
}

void sub_1BB5543A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, double a3, int16x8_t a4)
{
  CA::StreamDescription::AsString(this, (uint64_t)__p, a4);
  if (v8 >= 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  strlcpy(a2, (const char *)v5, 0x100uLL);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1BB554468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUBeamNF::SetDiffractionFilterAndPostEQ(AUBeamNF *this, double a2, double a3)
{
  v135[1] = *(char **)MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      uint64_t v4 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
          __int16 v131 = 1024;
          int v132 = 1626;
          __int16 v133 = 2048;
          v134[0] = this;
          _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::SetDiffractionFilterAndPostEQ (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  if (!*((unsigned char *)this + 639)) {
    goto LABEL_60;
  }
  int v5 = fopen((const char *)this + 640, "r");
  if (v5)
  {
    if (fgets(buf, 1024, v5))
    {
      v135[0] = 0;
      if (buf[0])
      {
        unint64_t v6 = 0;
        int16x8_t v7 = buf;
        while (1)
        {
          *(float *)&a2 = strtof(v7, v135);
          *(&valuePtr + v6) = LODWORD(a2);
          if (v7 == v135[0]) {
            break;
          }
          unsigned int v8 = v6 + 1;
          if (*v135[0]) {
            BOOL v9 = v6 >= 7;
          }
          else {
            BOOL v9 = 1;
          }
          ++v6;
          int16x8_t v7 = v135[0];
          if (v9) {
            goto LABEL_34;
          }
        }
        unsigned int v8 = v6;
LABEL_34:
        if (v8)
        {
          std::vector<std::valarray<float>>::resize((uint64_t)&v119, v8);
          int16x8_t v13 = v119;
          double v14 = v120;
          if (v120 == v119)
          {
            int16x8_t v13 = v120;
          }
          else
          {
            unint64_t v15 = 0;
            unsigned int v16 = 1;
            do
            {
              std::valarray<float>::resize((uint64_t)&v13[2 * v15], 0x101uLL, 0.0);
              int16x8_t v13 = v119;
              *(_DWORD *)v119[2 * v15] = *(&valuePtr + v15);
              unint64_t v15 = v16;
              double v14 = v120;
              ++v16;
            }
            while (v15 < ((char *)v120 - (char *)v13) >> 4);
          }
          int v36 = *v13;
          if ((unint64_t)(v13[1] - *v13) >= 5)
          {
            unint64_t v37 = 1;
            do
            {
              if (v14 == v13)
              {
                double v14 = v13;
              }
              else
              {
                unint64_t v38 = 0;
                unsigned int v39 = 1;
                do
                {
                  fscanf(v5, "%f", (char *)v13[2 * v38] + 4 * v37);
                  unint64_t v38 = v39;
                  int16x8_t v13 = v119;
                  double v14 = v120;
                  ++v39;
                }
                while (v38 < ((char *)v120 - (char *)v119) >> 4);
                int v36 = *v119;
              }
              unint64_t v37 = (v37 + 1);
            }
            while (v37 < (v13[1] - v36) >> 2);
          }
          fclose(v5);
LABEL_94:
          if (v120 == v119)
          {
            if (AUBeamNFLogScope(void)::once != -1) {
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
            }
            if (AUBeamNFLogScope(void)::scope)
            {
              double v62 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(void *)AUBeamNFLogScope(void)::scope) {
                goto LABEL_116;
              }
            }
            else
            {
              double v62 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
              __int16 v131 = 1024;
              int v132 = 1753;
              _os_log_impl(&dword_1BB0CE000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF: Error no diffraction filter data", buf, 0x12u);
            }
          }
          else
          {
            __int16 v40 = (Beamformer_BeamNF::CmhBEAM *)*((void *)this + 70);
            if (*((unsigned char *)this + 552))
            {
              *(float *)&double v41 = Beamformer_BeamNF::CmhBEAM::setParameter(v40, 15, *v119, a2, a3);
              *(float *)&double v43 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 16, v119[2], v41, v42);
              *(float *)&double v45 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 17, v119[4], v43, v44);
              *(float *)&double v47 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 18, v119[6], v45, v46);
              double v48 = v119[6];
              *(_DWORD *)double v48 = 1058642330;
              *(float *)&double v50 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 34, v48, v47, v49);
              double v52 = (Beamformer_BeamNF::CmhBEAM *)*((void *)this + 70);
              double v53 = v119[8];
              if ((char *)v120 - (char *)v119 == 128)
              {
                *(float *)&double v54 = Beamformer_BeamNF::CmhBEAM::setParameter(v52, 21, v53, v50, v51);
                *(float *)&double v56 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 22, v119[10], v54, v55);
                *(float *)&double v58 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), 23, v119[12], v56, v57);
                __int16 v60 = v119 + 14;
                int v61 = 24;
              }
              else
              {
                *(float *)&double v58 = Beamformer_BeamNF::CmhBEAM::setParameter(v52, 19, v53, v50, v51);
                __int16 v60 = v119 + 10;
                int v61 = 20;
              }
              *(float *)&a2 = Beamformer_BeamNF::CmhBEAM::setParameter(*((Beamformer_BeamNF::CmhBEAM **)this + 70), v61, *v60, v58, v59);
            }
            else
            {
              CmhBEAM2NOpt::setModelSpatialFilterReal(v40, *v119, 0);
              Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v119[2], 0);
              CmhBEAM2NOpt::setModelSpatialFilterReal(*((CmhBEAM2NOpt **)this + 70), v119[4], 1u);
              Beamformer_BeamNF::CmhBEAM2NOpt::setModelSpatialFilterImag(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v119[6], 1u);
              BOOL v63 = v119;
              *(_DWORD *)v119[6] = 1058642330;
              uint64_t v64 = *((void *)this + 70);
              uint64_t v65 = *(unsigned int *)(v64 + 8);
              if ((int)v65 >= 1)
              {
                double v66 = (_DWORD *)(*(void *)(v64 + 440) + 64);
                do
                {
                  *double v66 = 1058642330;
                  v66 += 34;
                  --v65;
                }
                while (v65);
                uint64_t v64 = *((void *)this + 70);
              }
              double v67 = (char *)((char *)v120 - (char *)v63);
              unsigned int v68 = v63[8];
              CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAM2NOpt *)v64, v68, 0);
              if (v67 == (char *)128)
              {
                CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)v119[10], (float *)0x101, **(void **)(*((void *)this + 70) + 104), 93.75, (float *)*(unsigned int *)(*((void *)this + 70) + 28), (float)*(int *)(*((void *)this + 70) + 12) / (float)*(int *)(*((void *)this + 70) + 16));
                *(float *)&double v69 = CmhBEAM2NOpt::setModelFreqCompVector(*((CmhBEAM2NOpt **)this + 70), v119[12], 1u);
                int v71 = v119 + 14;
                int v72 = 22;
              }
              else
              {
                *(float *)&double v69 = CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAM2NOpt *)v64, v68, 1u);
                int v71 = v119 + 10;
                int v72 = 18;
              }
              *(float *)&a2 = Beamformer_BeamNF::CmhBEAM2NOpt::setParameter(*((Beamformer_BeamNF::CmhBEAM2NOpt **)this + 70), v72, *v71, v69, v70);
            }
          }
LABEL_116:
          memset(v123, 0, 24);
          if (!*((unsigned char *)this + 1664)) {
            goto LABEL_159;
          }
          double v73 = fopen((const char *)this + 1665, "r");
          if (v73)
          {
            if (fgets(buf, 1024, v73))
            {
              unsigned int v122 = 0;
              if (buf[0])
              {
                uint64_t v74 = 0;
                int v75 = buf;
                char v76 = 1;
                while (1)
                {
                  uint64_t v77 = v74;
                  *(float *)&a2 = strtof(v75, &v122);
                  *((_DWORD *)v135 + v77) = LODWORD(a2);
                  if (v75 == v122) {
                    break;
                  }
                  char v78 = v76 & (*v122 != 0);
                  uint64_t v74 = 1;
                  int v75 = v122;
                  char v76 = 0;
                  if ((v78 & 1) == 0)
                  {
                    unint64_t v79 = v77 + 1;
                    goto LABEL_189;
                  }
                }
                if (v76) {
                  goto LABEL_138;
                }
                unint64_t v79 = 1;
LABEL_189:
                std::vector<std::valarray<float>>::resize((uint64_t)v123, v79);
                uint64_t v105 = *(void **)v123;
                UInt32 v106 = *(void **)&v123[8];
                if (*(void *)&v123[8] == *(void *)v123)
                {
                  uint64_t v105 = *(void **)&v123[8];
                }
                else
                {
                  unint64_t v107 = 0;
                  unsigned int v108 = 1;
                  do
                  {
                    std::valarray<float>::resize((uint64_t)&v105[2 * v107], 0x101uLL, 0.0);
                    uint64_t v105 = *(void **)v123;
                    **(_DWORD **)(*(void *)v123 + 16 * v107) = *((_DWORD *)v135 + v107);
                    unint64_t v107 = v108;
                    UInt32 v106 = *(void **)&v123[8];
                    ++v108;
                  }
                  while (v107 < (uint64_t)(*(void *)&v123[8] - (void)v105) >> 4);
                }
                uint64_t v109 = *v105;
                if (v105[1] - *v105 >= 5uLL)
                {
                  unint64_t v110 = 1;
                  do
                  {
                    if (v106 == v105)
                    {
                      UInt32 v106 = v105;
                    }
                    else
                    {
                      unint64_t v111 = 0;
                      unsigned int v112 = 1;
                      do
                      {
                        fscanf(v73, "%f", v105[2 * v111] + 4 * v110);
                        unint64_t v111 = v112;
                        uint64_t v105 = *(void **)v123;
                        UInt32 v106 = *(void **)&v123[8];
                        ++v112;
                      }
                      while (v111 < (uint64_t)(*(void *)&v123[8] - *(void *)v123) >> 4);
                      uint64_t v109 = **(void **)v123;
                    }
                    unint64_t v110 = (v110 + 1);
                  }
                  while (v110 < (v105[1] - v109) >> 2);
                }
                fclose(v73);
LABEL_203:
                uint64_t v113 = *(void *)&v123[8] - *(void *)v123;
                if (*(void *)&v123[8] == *(void *)v123)
                {
                  if (AUBeamNFLogScope(void)::once != -1) {
                    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
                  }
                  if (AUBeamNFLogScope(void)::scope)
                  {
                    uint64_t v104 = *(void *)AUBeamNFLogScope(void)::scope;
                    if (!*(void *)AUBeamNFLogScope(void)::scope)
                    {
LABEL_227:
                      *(void *)AudioTimeStamp buf = v123;
                      std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    uint64_t v104 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled((os_log_t)v104, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioTimeStamp buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
                    __int16 v131 = 1024;
                    int v132 = 1846;
                    _os_log_impl(&dword_1BB0CE000, (os_log_t)v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF: Error no post EQ data", buf, 0x12u);
                  }
                }
                else
                {
                  uint64_t v114 = *((void *)this + 70);
                  unint64_t v115 = **(CmhBEAM2NOpt ***)v123;
                  if (*((unsigned char *)this + 552))
                  {
                    if (v113 == 32)
                    {
                      *(float *)&a2 = Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v114, 37, v115, a2, a3);
                      uint64_t v114 = *((void *)this + 70);
                      unint64_t v115 = *(CmhBEAM2NOpt **)(*(void *)v123 + 16);
                      int v116 = 38;
                    }
                    else
                    {
                      int v116 = 36;
                    }
                    Beamformer_BeamNF::CmhBEAM::setParameter((Beamformer_BeamNF::CmhBEAM *)v114, v116, v115, a2, a3);
                  }
                  else
                  {
                    if (v113 == 32)
                    {
                      CmhBEAM2NOpt::interpolateFrequencyVector(**(void **)v123, (float *)0x101, **(void **)(v114 + 112), 93.75, (float *)*(unsigned int *)(v114 + 28), (float)*(int *)(v114 + 12) / (float)*(int *)(v114 + 16));
                      uint64_t v114 = *((void *)this + 70);
                      unint64_t v115 = *(CmhBEAM2NOpt **)(*(void *)v123 + 16);
                      int v117 = 80;
                    }
                    else
                    {
                      int v117 = 78;
                    }
                    Beamformer_BeamNF::CmhBEAM2NOpt::setParameter((Beamformer_BeamNF::CmhBEAM2NOpt *)v114, v117, v115, a2, a3);
                  }
                }
                uint64_t v104 = 0;
                goto LABEL_227;
              }
LABEL_138:
              if (AUBeamNFLogScope(void)::once != -1) {
                dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
              }
              if (AUBeamNFLogScope(void)::scope)
              {
                int v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                if (!*(void *)AUBeamNFLogScope(void)::scope) {
                  goto LABEL_151;
                }
              }
              else
              {
                int v80 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
              {
                unsigned int valuePtr = 136315650;
                uint64_t v125 = "AUBeamNF.cpp";
                __int16 v126 = 1024;
                int v127 = 2539;
                __int16 v128 = 2080;
                double v129 = (char *)this + 1665;
                double v81 = "%25s:%-5d AUBeamNF: Error: Could not read post EQ file %s";
                goto LABEL_149;
              }
            }
            else
            {
              if (AUBeamNFLogScope(void)::once != -1) {
                dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
              }
              if (AUBeamNFLogScope(void)::scope)
              {
                int v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                if (!*(void *)AUBeamNFLogScope(void)::scope) {
                  goto LABEL_151;
                }
              }
              else
              {
                int v80 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
              {
                unsigned int valuePtr = 136315650;
                uint64_t v125 = "AUBeamNF.cpp";
                __int16 v126 = 1024;
                int v127 = 2524;
                __int16 v128 = 2080;
                double v129 = (char *)this + 1665;
                double v81 = "%25s:%-5d AUBeamNF: Error: Could not read post EQ file %s";
LABEL_149:
                p_unsigned int valuePtr = (uint8_t *)&valuePtr;
                goto LABEL_150;
              }
            }
          }
          else
          {
            if (AUBeamNFLogScope(void)::once != -1) {
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
            }
            if (AUBeamNFLogScope(void)::scope)
            {
              int v80 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(void *)AUBeamNFLogScope(void)::scope) {
                goto LABEL_151;
              }
            }
            else
            {
              int v80 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
              __int16 v131 = 1024;
              int v132 = 2513;
              __int16 v133 = 2080;
              v134[0] = (char *)this + 1665;
              double v81 = "%25s:%-5d AUBeamNF: Error: Could not open post EQ file %s";
              p_unsigned int valuePtr = buf;
LABEL_150:
              _os_log_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_ERROR, v81, p_valuePtr, 0x1Cu);
            }
          }
LABEL_151:
          if (AUBeamNFLogScope(void)::once != -1) {
            dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
          }
          if (AUBeamNFLogScope(void)::scope)
          {
            double v83 = *(NSObject **)AUBeamNFLogScope(void)::scope;
            if (!*(void *)AUBeamNFLogScope(void)::scope) {
              goto LABEL_159;
            }
          }
          else
          {
            double v83 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
            __int16 v131 = 1024;
            int v132 = 1766;
            __int16 v133 = 2080;
            v134[0] = (char *)this + 1665;
            _os_log_impl(&dword_1BB0CE000, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error loading post EQ file at %s", buf, 0x1Cu);
          }
LABEL_159:
          CFDictionaryRef v84 = (const __CFDictionary *)*((void *)this + 78);
          if (v84 && CFDictionaryGetValue(v84, @"posteq"))
          {
            std::vector<std::valarray<float>>::resize((uint64_t)v123, 2uLL);
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), @"posteq");
            unsigned int valuePtr = 0;
            CFNumberRef v86 = (const __CFNumber *)CFDictionaryGetValue(Value, @"length");
            if (CFNumberGetValue(v86, kCFNumberIntType, &valuePtr))
            {
              uint64_t v87 = 0;
              CFAllocatorRef v88 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFAllocatorRef v89 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
              char v90 = 1;
              while (1)
              {
                char v91 = v90;
                std::valarray<float>::resize(*(void *)v123 + 16 * v87, valuePtr, 0.0);
                CFStringRef v92 = CFStringCreateWithCStringNoCopy(v88, off_1E6245520[v87], 0, v89);
                CFDataRef v93 = (const __CFData *)CFDictionaryGetValue(Value, v92);
                CFRelease(v92);
                if (v93)
                {
                  int Length = CFDataGetLength(v93);
                  if (Length != 4 * valuePtr)
                  {
                    if (AUBeamNFLogScope(void)::once != -1) {
                      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
                    }
                    if (AUBeamNFLogScope(void)::scope)
                    {
                      long long v100 = *(NSObject **)AUBeamNFLogScope(void)::scope;
                      if (!*(void *)AUBeamNFLogScope(void)::scope)
                      {
LABEL_226:
                        uint64_t v104 = 4294956445;
                        goto LABEL_227;
                      }
                    }
                    else
                    {
                      long long v100 = MEMORY[0x1E4F14500];
                    }
                    if (!os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_226;
                    }
                    *(_DWORD *)AudioTimeStamp buf = 136315906;
                    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
                    __int16 v131 = 1024;
                    int v132 = 1805;
                    __int16 v133 = 1024;
                    LODWORD(v134[0]) = 4 * valuePtr;
                    WORD2(v134[0]) = 1024;
                    *(_DWORD *)((char *)v134 + 6) = Length;
                    unsigned int v101 = "%25s:%-5d AUBeamNF Error: Invalid post eq data vector length from tuning file (expected %d by"
                           "tes, actual %d bytes)";
                    uint64_t v102 = v100;
                    uint32_t v103 = 30;
LABEL_225:
                    _os_log_impl(&dword_1BB0CE000, v102, OS_LOG_TYPE_DEBUG, v101, buf, v103);
                    goto LABEL_226;
                  }
                  BytePtr = CFDataGetBytePtr(v93);
                  uint64_t v96 = valuePtr;
                  if (valuePtr)
                  {
                    double v97 = *(_DWORD **)(*(void *)v123 + 16 * v87);
                    do
                    {
                      unsigned int v98 = *(_DWORD *)BytePtr;
                      BytePtr += 4;
                      *v97++ = bswap32(v98);
                      --v96;
                    }
                    while (v96);
                  }
                }
                char v90 = 0;
                uint64_t v87 = 1;
                if ((v91 & 1) == 0) {
                  goto LABEL_203;
                }
              }
            }
            if (AUBeamNFLogScope(void)::once != -1) {
              dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
            }
            if (AUBeamNFLogScope(void)::scope)
            {
              long long v99 = *(NSObject **)AUBeamNFLogScope(void)::scope;
              if (!*(void *)AUBeamNFLogScope(void)::scope) {
                goto LABEL_226;
              }
            }
            else
            {
              long long v99 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_226;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
            __int16 v131 = 1024;
            int v132 = 1784;
            unsigned int v101 = "%25s:%-5d AUBeamNF Error: Converting eq vectors length from tuning file";
            uint64_t v102 = v99;
            uint32_t v103 = 18;
            goto LABEL_225;
          }
          goto LABEL_203;
        }
      }
      if (AUBeamNFLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
      }
      if (AUBeamNFLogScope(void)::scope)
      {
        int16x8_t v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(void *)AUBeamNFLogScope(void)::scope) {
          goto LABEL_52;
        }
      }
      else
      {
        int16x8_t v10 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v123 = 136315650;
        *(void *)&v123[4] = "AUBeamNF.cpp";
        *(_WORD *)&v123[12] = 1024;
        *(_DWORD *)&v123[14] = 2488;
        *(_WORD *)&v123[18] = 2080;
        *(void *)&v123[20] = (char *)this + 640;
        int v11 = "%25s:%-5d AUBeamNF: Error: Could not read diffraction filter file %s";
LABEL_50:
        uint64_t v12 = v123;
        goto LABEL_51;
      }
    }
    else
    {
      if (AUBeamNFLogScope(void)::once != -1) {
        dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
      }
      if (AUBeamNFLogScope(void)::scope)
      {
        int16x8_t v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
        if (!*(void *)AUBeamNFLogScope(void)::scope) {
          goto LABEL_52;
        }
      }
      else
      {
        int16x8_t v10 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v123 = 136315650;
        *(void *)&v123[4] = "AUBeamNF.cpp";
        *(_WORD *)&v123[12] = 1024;
        *(_DWORD *)&v123[14] = 2473;
        *(_WORD *)&v123[18] = 2080;
        *(void *)&v123[20] = (char *)this + 640;
        int v11 = "%25s:%-5d AUBeamNF: Error: Could not read diffraction filter file %s";
        goto LABEL_50;
      }
    }
  }
  else
  {
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      int16x8_t v10 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope) {
        goto LABEL_52;
      }
    }
    else
    {
      int16x8_t v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
      __int16 v131 = 1024;
      int v132 = 2462;
      __int16 v133 = 2080;
      v134[0] = (char *)this + 640;
      int v11 = "%25s:%-5d AUBeamNF: Error: Could not open diffraction filter file %s";
      uint64_t v12 = buf;
LABEL_51:
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, v11, v12, 0x1Cu);
    }
  }
LABEL_52:
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    CFDictionaryRef v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(void *)AUBeamNFLogScope(void)::scope) {
      goto LABEL_60;
    }
  }
  else
  {
    CFDictionaryRef v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
    __int16 v131 = 1024;
    int v132 = 1641;
    __int16 v133 = 2080;
    v134[0] = (char *)this + 640;
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error loading diffraction filter file at %s", buf, 0x1Cu);
  }
LABEL_60:
  CFDictionaryRef v18 = (const __CFDictionary *)*((void *)this + 78);
  if (!v18 || !CFDictionaryGetValue(v18, @"diffr")) {
    goto LABEL_94;
  }
  std::vector<std::valarray<float>>::resize((uint64_t)&v119, 8uLL);
  CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 78), @"diffr");
  unsigned int valuePtr = 0;
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v19, @"length");
  if (!CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
  {
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      uint64_t v31 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope) {
        goto LABEL_187;
      }
    }
    else
    {
      uint64_t v31 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_187;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
    __int16 v131 = 1024;
    int v132 = 1659;
    int v33 = "%25s:%-5d AUBeamNF Error: Converting diffraction filter vectors length from tuning file";
    __int16 v34 = v31;
    uint32_t v35 = 18;
LABEL_186:
    _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, v33, buf, v35);
    goto LABEL_187;
  }
  uint64_t v21 = 0;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  while (1)
  {
    std::valarray<float>::resize((uint64_t)&v119[2 * v21], valuePtr, 0.0);
    CFStringRef v24 = CFStringCreateWithCStringNoCopy(v22, off_1E62454E0[v21], 0, v23);
    CFDataRef v25 = (const __CFData *)CFDictionaryGetValue(v19, v24);
    CFRelease(v24);
    if (v25) {
      break;
    }
LABEL_69:
    if (++v21 == 8) {
      goto LABEL_94;
    }
  }
  int v26 = CFDataGetLength(v25);
  if (v26 == 4 * valuePtr)
  {
    int v27 = CFDataGetBytePtr(v25);
    uint64_t v28 = valuePtr;
    if (valuePtr)
    {
      uint64_t v29 = v119[2 * v21];
      do
      {
        unsigned int v30 = *(_DWORD *)v27;
        v27 += 4;
        *(_DWORD *)uint64_t v29 = bswap32(v30);
        uint64_t v29 = (CmhBEAM2NOpt *)((char *)v29 + 4);
        --v28;
      }
      while (v28);
    }
    goto LABEL_69;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (!AUBeamNFLogScope(void)::scope)
  {
    __int16 v32 = MEMORY[0x1E4F14500];
    goto LABEL_184;
  }
  __int16 v32 = *(NSObject **)AUBeamNFLogScope(void)::scope;
  if (*(void *)AUBeamNFLogScope(void)::scope)
  {
LABEL_184:
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_187;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "AUBeamNF.cpp";
    __int16 v131 = 1024;
    int v132 = 1686;
    __int16 v133 = 1024;
    LODWORD(v134[0]) = 4 * valuePtr;
    WORD2(v134[0]) = 1024;
    *(_DWORD *)((char *)v134 + 6) = v26;
    int v33 = "%25s:%-5d AUBeamNF Error: Invalid diffraction filter data vector length from tuning file (expected %d bytes, actual %d bytes)";
    __int16 v34 = v32;
    uint32_t v35 = 30;
    goto LABEL_186;
  }
LABEL_187:
  uint64_t v104 = 4294956445;
LABEL_228:
  *(void *)AudioTimeStamp buf = &v119;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v104;
}

void sub_1BB555730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, void ***a19)
{
  a19 = &a15;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a15 = (void **)&a11;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void AUBeamNF::DumpDiffractionFilter(BOOL this)
{
  uint64_t v1 = this;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        this = os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          int v27 = "AUBeamNF.cpp";
          __int16 v28 = 1024;
          int v29 = 2561;
          __int16 v30 = 2048;
          uint64_t v31 = v1;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::DumpDiffractionFilter (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  uint64_t v3 = *(void *)(v1 + 560);
  if (v3)
  {
    uint64_t v4 = 140;
    if (!*(unsigned char *)(v1 + 552)) {
      uint64_t v4 = 28;
    }
    unint64_t v5 = *(int *)(v3 + v4);
    if (v5) {
      goto LABEL_12;
    }
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      CFDictionaryRef v18 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope)
      {
LABEL_12:
        unint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate((CATimeUtilities *)this);
        double v8 = v7;
        ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)buf, *(OpaqueAudioComponentInstance **)(v1 + 8));
        v24[0] = BYTE3(v27);
        v24[1] = BYTE2(v27);
        void v24[2] = BYTE1(v27);
        void v24[3] = (char)v27;
        v24[4] = 0;
        uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v1 + 80), 0);
        snprintf((char *)buf, 0x200uLL, "/tmp/aubeam2-%s-diffr-%dHz-%02d%02d%02d.txt", v24, (int)*(double *)(Element + 80), (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, (int)v8);
        int16x8_t v10 = fopen((const char *)buf, "w");
        if (v10)
        {
          uint64_t v21 = 0;
          CFAllocatorRef v22 = 0;
          uint64_t v23 = 0;
          std::vector<std::valarray<float>>::resize((uint64_t)&v21, 8uLL);
          int v11 = v22;
          if (v22 != v21)
          {
            unint64_t v12 = 0;
            unsigned int v13 = 1;
            int v11 = v21;
            do
            {
              std::valarray<float>::resize((uint64_t)&v11[2 * v12], v5, 0.0);
              unint64_t v12 = v13;
              int v11 = v21;
              ++v13;
            }
            while (v12 < ((char *)v22 - (char *)v21) >> 4);
          }
          double v14 = *v11;
          uint64_t v15 = *(void *)(v1 + 560);
          if (*(unsigned char *)(v1 + 552))
          {
            memcpy(v14, *(const void **)(v15 + 472), 4 * v5);
            memcpy(v21[2], *(const void **)(*(void *)(v1 + 560) + 488), 4 * v5);
            memcpy(v21[4], *(const void **)(*(void *)(v1 + 560) + 480), 4 * v5);
            memcpy(v21[6], *(const void **)(*(void *)(v1 + 560) + 496), 4 * v5);
            memcpy(v21[8], **(const void ***)(*(void *)(v1 + 560) + 368), 4 * v5);
            memcpy(v21[10], **(const void ***)(*(void *)(v1 + 560) + 376), 4 * v5);
            memcpy(v21[12], *(const void **)(*(void *)(*(void *)(v1 + 560) + 368) + 8), 4 * v5);
            uint64_t v16 = *(void *)(v1 + 560) + 376;
          }
          else
          {
            memcpy(v14, *(const void **)(v15 + 200), 4 * v5);
            memcpy(v21[2], *(const void **)(*(void *)(v1 + 560) + 216), 4 * v5);
            memcpy(v21[4], *(const void **)(*(void *)(v1 + 560) + 208), 4 * v5);
            memcpy(v21[6], *(const void **)(*(void *)(v1 + 560) + 224), 4 * v5);
            memcpy(v21[8], **(const void ***)(*(void *)(v1 + 560) + 96), 4 * v5);
            memcpy(v21[10], **(const void ***)(*(void *)(v1 + 560) + 104), 4 * v5);
            memcpy(v21[12], *(const void **)(*(void *)(*(void *)(v1 + 560) + 96) + 8), 4 * v5);
            uint64_t v16 = *(void *)(v1 + 560) + 104;
          }
          memcpy(v21[14], *(const void **)(*(void *)v16 + 8), 4 * v5);
          if ((int)v5 >= 1)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 4 * v5;
            do
            {
              fprintf(v10, "%.8f %.8f %.8f %.8f %.8f %.8f %.8f %.8f\n", *(float *)((char *)*v21 + v19), *(float *)((char *)v21[2] + v19), *(float *)((char *)v21[4] + v19), *(float *)((char *)v21[6] + v19), *(float *)((char *)v21[8] + v19), *(float *)((char *)v21[10] + v19), *(float *)((char *)v21[12] + v19), *(float *)((char *)v21[14] + v19));
              v19 += 4;
            }
            while (v20 != v19);
          }
          fclose(v10);
          CFDataRef v25 = &v21;
          std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
        }
        return;
      }
    }
    else
    {
      CFDictionaryRef v18 = MEMORY[0x1E4F14500];
    }
    this = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (this)
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v27 = "AUBeamNF.cpp";
      __int16 v28 = 1024;
      int v29 = 2576;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Number of unique bands is zero, won't dump diffraction filter", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    CFDictionaryRef v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(void *)AUBeamNFLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    CFDictionaryRef v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    int v27 = "AUBeamNF.cpp";
    __int16 v28 = 1024;
    int v29 = 2564;
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Beam object not initialized, won't dump diffraction filter", buf, 0x12u);
  }
}

void sub_1BB555D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a18;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void AUBeamNF::DumpPostEQ(BOOL this)
{
  uint64_t v1 = this;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        this = os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          int v27 = "AUBeamNF.cpp";
          __int16 v28 = 1024;
          int v29 = 2628;
          __int16 v30 = 2048;
          uint64_t v31 = v1;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::DumpPostEQ (%p)", buf, 0x1Cu);
        }
      }
    }
  }
  uint64_t v3 = *(void *)(v1 + 560);
  if (v3)
  {
    uint64_t v4 = 140;
    if (!*(unsigned char *)(v1 + 552)) {
      uint64_t v4 = 28;
    }
    unint64_t v5 = *(int *)(v3 + v4);
    if (v5) {
      goto LABEL_12;
    }
    if (AUBeamNFLogScope(void)::once != -1) {
      dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
    }
    if (AUBeamNFLogScope(void)::scope)
    {
      CFDictionaryRef v18 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (!*(void *)AUBeamNFLogScope(void)::scope)
      {
LABEL_12:
        unint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate((CATimeUtilities *)this);
        double v8 = v7;
        ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)buf, *(OpaqueAudioComponentInstance **)(v1 + 8));
        v24[0] = BYTE3(v27);
        v24[1] = BYTE2(v27);
        void v24[2] = BYTE1(v27);
        void v24[3] = (char)v27;
        v24[4] = 0;
        uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v1 + 80), 0);
        snprintf((char *)buf, 0x200uLL, "/tmp/aubeam2-%s-eq-%dHz-%02d%02d%02d.txt", v24, (int)*(double *)(Element + 80), (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, (int)v8);
        int16x8_t v10 = fopen((const char *)buf, "w");
        if (v10)
        {
          uint64_t v21 = 0;
          CFAllocatorRef v22 = 0;
          uint64_t v23 = 0;
          std::vector<std::valarray<float>>::resize((uint64_t)&v21, 2uLL);
          int v11 = v22;
          if (v22 != v21)
          {
            unint64_t v12 = 0;
            unsigned int v13 = 1;
            int v11 = v21;
            do
            {
              std::valarray<float>::resize((uint64_t)&v11[2 * v12], v5, 0.0);
              unint64_t v12 = v13;
              int v11 = v21;
              ++v13;
            }
            while (v12 < ((char *)v22 - (char *)v21) >> 4);
          }
          double v14 = *v11;
          uint64_t v15 = *(void *)(v1 + 560);
          if (*(unsigned char *)(v1 + 552))
          {
            memcpy(v14, **(const void ***)(v15 + 384), 4 * v5);
            uint64_t v16 = *(void *)(v1 + 560) + 384;
          }
          else
          {
            memcpy(v14, **(const void ***)(v15 + 112), 4 * v5);
            uint64_t v16 = *(void *)(v1 + 560) + 112;
          }
          memcpy(v21[2], *(const void **)(*(void *)v16 + 8), 4 * v5);
          if ((int)v5 >= 1)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 4 * v5;
            do
            {
              fprintf(v10, "%.8f %.8f\n", *(float *)((char *)*v21 + v19), *(float *)((char *)v21[2] + v19));
              v19 += 4;
            }
            while (v20 != v19);
          }
          fclose(v10);
          CFDataRef v25 = &v21;
          std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
        }
        return;
      }
    }
    else
    {
      CFDictionaryRef v18 = MEMORY[0x1E4F14500];
    }
    this = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (this)
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v27 = "AUBeamNF.cpp";
      __int16 v28 = 1024;
      int v29 = 2643;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Number of unique bands is zero, won't dump post EQ", buf, 0x12u);
    }
    goto LABEL_12;
  }
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    CFDictionaryRef v17 = *(NSObject **)AUBeamNFLogScope(void)::scope;
    if (!*(void *)AUBeamNFLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    CFDictionaryRef v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    int v27 = "AUBeamNF.cpp";
    __int16 v28 = 1024;
    int v29 = 2631;
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamNF: Error: Beam object not initialized, won't dump post EQ", buf, 0x12u);
  }
}

void sub_1BB5561C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a14;
  std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void std::vector<std::valarray<float>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      CFDictionaryRef v17 = &v4[2 * a2];
      while (v3 != v17)
      {
        v3 -= 2;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>((uint64_t)v3);
      }
      *(void *)(a1 + 8) = v17;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *(void *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 4)
    {
      bzero(*(void **)(a1 + 8), 16 * v6);
      *(void *)(a1 + 8) = &v3[2 * v6];
    }
    else
    {
      if (a2 >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v7 - (void)v4;
      uint64_t v9 = v8 >> 3;
      if (v8 >> 3 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v11 = (char *)operator new(16 * v10);
      unint64_t v12 = &v11[16 * v5];
      unsigned int v13 = &v11[16 * v10];
      bzero(v12, 16 * v6);
      double v14 = &v12[16 * v6];
      if (v3 == v4)
      {
        int64x2_t v16 = vdupq_n_s64((unint64_t)v3);
      }
      else
      {
        do
        {
          long long v15 = *((_OWORD *)v3 - 1);
          v3 -= 2;
          *((_OWORD *)v12 - 1) = v15;
          v12 -= 16;
          void *v3 = 0;
          v3[1] = 0;
        }
        while (v3 != v4);
        int64x2_t v16 = *(int64x2_t *)a1;
      }
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v13;
      uint64_t v19 = v16.i64[1];
      CFDictionaryRef v18 = (void *)v16.i64[0];
      while ((void *)v19 != v18)
      {
        v19 -= 16;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(v19);
      }
      if (v18)
      {
        operator delete(v18);
      }
    }
  }
}

void std::vector<std::valarray<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::valarray<float>,0>(uint64_t a1)
{
  unsigned int v2 = *(unsigned char **)a1;
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    if (v3 != v2) {
      *(void *)(a1 + 8) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t AUBeamNF::BlockProcessClassFunc(float ****this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  return 0;
}

void AUBeamNF::BlockProcessFunc(float ****this, unsigned int a2, const AudioBufferList **a3, AudioBufferList **a4, float *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  double v49 = (float *)a4;
  double v50 = a3;
  double v48 = a5;
  MEMORY[0x1F4188790](this);
  unint64_t v10 = (float *)((char *)&v48 - v9);
  if (*(unsigned char *)(v11 + 636))
  {
    uint64_t v12 = v7;
    if (v7)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 4 * v7;
      do
      {
        v10[v13 / 4] = (float)((float)rand() * 4.6566e-10) + -0.5;
        v10[v12 + v13 / 4] = (float)((float)rand() * 4.6566e-10) + -0.5;
        v13 += 4;
      }
      while (v14 != v13);
    }
    double v49 = v10;
    double v50 = (const AudioBufferList **)&v10[v12];
  }
  long long v15 = this[70];
  uint64_t v16 = *((int *)v15 + 29);
  if (*((_DWORD *)v15 + 6))
  {
    CmhBEAM::deinterleave((uint64_t)v15, &v49, v15[4], *(_DWORD *)v15);
    CmhBEAM::deinterleave((uint64_t)v15, &v48, v15[5], *((_DWORD *)v15 + 2));
    CmhBEAM::deinterleave((uint64_t)v15, 0, v15[6], *((_DWORD *)v15 + 1));
  }
  else
  {
    uint64_t v17 = *(unsigned int *)v15;
    if ((int)v17 >= 1)
    {
      unint64_t v18 = 0;
      uint64_t v19 = 8 * v17;
      do
      {
        v15[4][v18 / 8] = (&v49)[v18 / 8];
        v18 += 8;
      }
      while (v19 != v18);
    }
    uint64_t v20 = *((unsigned int *)v15 + 2);
    if ((int)v20 >= 1)
    {
      unint64_t v21 = 0;
      uint64_t v22 = 8 * v20;
      do
      {
        v15[5][v21 / 8] = a5;
        v21 += 8;
      }
      while (v22 != v21);
    }
  }
  uint64_t v23 = *((unsigned int *)v15 + 30);
  if (!v23)
  {
    unsigned int v29 = *((_DWORD *)v15 + 31);
    if (!v29) {
      return;
    }
    uint64_t v30 = *((unsigned int *)v15 + 4);
    if ((int)v30 <= 0)
    {
      unsigned int v34 = *((_DWORD *)v15 + 7);
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = v15[4];
      int v33 = v15[7];
      unsigned int v34 = *((_DWORD *)v15 + 7);
      uint32_t v35 = *v32;
      int v36 = v32[1];
      unint64_t v37 = *v33;
      unint64_t v38 = v33[1];
      int v40 = *((_DWORD *)v15 + 1);
      uint64_t v39 = *((unsigned int *)v15 + 2);
      uint64_t v41 = (int)(v34 * v30);
      do
      {
        uint64_t v42 = v31 + v41;
        v37[v31 + v41] = v35[v31];
        v38[v31 + v41] = v36[v31];
        if ((int)v39 >= 1)
        {
          double v43 = v15[8];
          uint64_t v8 = v15[5];
          uint64_t v44 = v39;
          do
          {
            uint64_t v45 = (uint64_t)*v43++;
            float v46 = *(float *)(v45 + 4 * v42);
            double v47 = *v8++;
            v47[v31] = v46;
            --v44;
          }
          while (v44);
        }
        if (v40 > 0) {
          (*v15[9])[v42] = (*v15[6])[v31];
        }
        ++v31;
      }
      while (v31 != v30);
    }
    *((_DWORD *)v15 + 7) = v34 + 1;
    if (v34 + 1 == v29)
    {
      if (Beamformer_BeamNF::CmhBEAMprocOpt::process((Beamformer_BeamNF::CmhBEAMprocOpt *)(v15 + 11), v15[7], v15[8], v8))return; {
      *((_DWORD *)v15 + 7) = 0;
      }
    }
    goto LABEL_39;
  }
  if ((int)v23 < 1)
  {
LABEL_39:
    if (*((_DWORD *)v15 + 6))
    {
      CmhBEAM::interleave((CmhBEAM *)v15, v15[4], &v49, *(_DWORD *)v15);
      CmhBEAM::interleave((CmhBEAM *)v15, v15[5], &v48, *((_DWORD *)v15 + 2));
      CmhBEAM::interleave((CmhBEAM *)v15, v15[6], 0, *((_DWORD *)v15 + 1));
    }
    return;
  }
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = v24 * v16;
    *v15[7] = &(*v15[4])[v24 * v16];
    v15[7][1] = &v15[4][1][v24 * v16];
    uint64_t v26 = *((unsigned int *)v15 + 2);
    if ((int)v26 >= 1)
    {
      unint64_t v27 = 0;
      uint64_t v28 = 8 * v26;
      do
      {
        v15[8][v27 / 8] = &v15[5][v27 / 8][v25];
        v27 += 8;
      }
      while (v28 != v27);
    }
    if (*((int *)v15 + 1) > 0) {
      *v15[9] = &(*v15[6])[v25];
    }
    if (Beamformer_BeamNF::CmhBEAMprocOpt::process((Beamformer_BeamNF::CmhBEAMprocOpt *)(v15 + 11), v15[7], v15[8], v8))break; {
    if (++v24 == v23)
    }
      goto LABEL_39;
  }
}

const void **AUBeamNF::CreateExtendedElements(AUBeamNF *this)
{
  uint64_t v1 = (AUBeamNF *)((char *)this + 576);
  ausdk::AUScope::Initialize((AUBeamNF *)((char *)this + 576), this, 4, 2);
  uint64_t Element = ausdk::AUScope::GetElement(v1, 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), @"Front Beam Settings");
  uint64_t v3 = (const void **)(ausdk::AUScope::GetElement(v1, 1u) + 72);

  return ausdk::Owned<__CFString const*>::operator=(v3, @"Back Beam Settings");
}

void AUBeamNF::~AUBeamNF(AUBeamNF *this)
{
  AUBeamNF::~AUBeamNF(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  const void *v3;
  unsigned char v4[12];
  __int16 v5;
  int v6;
  __int16 v7;
  AUBeamNF *v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B3698;
  if (AUBeamNFLogScope(void)::once != -1) {
    dispatch_once(&AUBeamNFLogScope(void)::once, &__block_literal_global_12181);
  }
  if (AUBeamNFLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamNFLogScope(void)::scope + 8))
    {
      unsigned int v2 = *(NSObject **)AUBeamNFLogScope(void)::scope;
      if (*(void *)AUBeamNFLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamNFLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v4 = 136315650;
          *(void *)&v4[4] = "AUBeamNF.cpp";
          unint64_t v5 = 1024;
          unint64_t v6 = 372;
          unsigned int v7 = 2048;
          uint64_t v8 = this;
          _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUBeamNF::~AUBeamNF (%p)", v4, 0x1Cu);
        }
      }
    }
  }
  (*(void (**)(AUBeamNF *))(*(void *)this + 64))(this);
  uint64_t v3 = (const void *)*((void *)this + 78);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)uint64_t v4 = (char *)this + 592;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  ausdk::AUBase::~AUBase(this);
}

void sub_1BB556A04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t VoiceProcessorV4::ProcessDownlinkAudio(atomic_uint *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  unsigned int v7 = a5;
  uint64_t v556 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t *)(this + 3138);
  atomic_fetch_add(this + 621, 1u);
  if (this[620])
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)this[3130], 0.0, 0.0, "processdl: tryer failed to acquire lock", a3, a4, a5, a6, a7);
    unint64_t v10 = (CADeprecated::CAMutex *)(this + 644);
    CADeprecated::CAMutex::Lock((CADeprecated::CAMutex *)(this + 644));
LABEL_3:
    ++this[3130];
    CADeprecated::CAMutex::Unlock(v10);
    LOBYTE(v11) = 0;
    unint64_t v12 = 1937006964;
    double v13 = 0.0;
LABEL_896:
    if (*((unsigned char *)v9 + 3409) && *((void *)this + 1579))
    {
      uint64_t v471 = mach_absolute_time();
      int v472 = (int *)*((void *)this + 1579);
      uint64_t v298 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
      if (VPTimestampLogScope(void)::once != -1) {
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      }
      uint64_t v9 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
      double v179 = (double)v471 * 0.0000000416666667 - v13;
      CALegacyLog::log(v472, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1387, "ProcessDownlinkAudio", "DL %f %f %f", v544.mSampleTime, v13, v179);
      unsigned int v473 = this[121];
      double v474 = *((double *)this + 41);
      if (v179 >= (double)v473 / v474)
      {
        uint64_t v203 = *((void *)this + 1579);
        if (VPTimestampLogScope(void)::once != -1) {
          goto LABEL_927;
        }
        goto LABEL_902;
      }
      goto LABEL_903;
    }
    goto LABEL_908;
  }
  v534 = a2;
  int v530 = a3;
  unint64_t v531 = a4;
  if (!*((unsigned char *)this + 477))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)this[3130], 0.0, 0.0, "processdl: not ok to process?!", a3, a4, a5, a6, a7);
    unint64_t v10 = (CADeprecated::CAMutex *)(this + 644);
    CADeprecated::CAMutex::Lock((CADeprecated::CAMutex *)(this + 644));
    goto LABEL_3;
  }
  uint64_t v15 = a6;
  double v13 = 0.0;
  if (*((unsigned char *)this + 15961))
  {
    if (*((void *)this + 1579))
    {
      double v13 = (double)mach_absolute_time() * 0.0000000416666667;
      if (*((double *)this + 1994) == 0.0) {
        *((double *)this + 1994) = v13;
      }
    }
  }
  (*(void (**)(AudioTimeStamp *__return_ptr, atomic_uint *, const AudioTimeStamp *))(*(void *)this + 688))(&buf, this, a7);
  AudioTimeStamp v544 = buf;
  if (*((unsigned char *)v9 + 3409))
  {
    if (*(unsigned char *)v9)
    {
      double v16 = *((double *)this + 1568);
      HIDWORD(v17) = HIDWORD(v544.mSampleTime);
      if (v16 != v544.mSampleTime)
      {
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v16, v544.mSampleTime, 2);
        double v17 = *((double *)this + 1568);
        if (v544.mSampleTime < v17)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          unint64_t v18 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *((void *)this + 1568);
              LODWORD(buf.mSampleTime) = 136316674;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 80;
              WORD1(buf.mRateScalar) = 2048;
              *(void *)((char *)&buf.mRateScalar + 4) = v20;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(void *)&v544.mSampleTime;
              HIWORD(buf.mSMPTETime.mCounter) = 2048;
              *(void *)&buf.mSMPTETime.mType = v544.mHostTime;
              buf.mSMPTETime.mHours = 2048;
              *(Float64 *)&buf.mSMPTETime.mMinutes = v544.mRateScalar;
              HIWORD(buf.mFlags) = 1024;
              buf.mReserved = v544.mFlags;
              _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
            }
          }
          unint64_t v21 = (int *)*((void *)this + 1578);
          if (v21 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v21, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 80, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1568), v544.mSampleTime, v544.mHostTime, v544.mRateScalar, v544.mFlags);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)this[3130], 0.0, 0.0, "sprk sample time jumped backwards");
        }
      }
    }
    else
    {
      *(unsigned char *)uint64_t v9 = 1;
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v544.mSampleTime, 2);
      double v17 = *((double *)this + 215);
      double v22 = v544.mSampleTime - v17;
      double v23 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)this[124])
                                  + (float)this[124])
                          + (float)this[293])
                  + (float)this[294]);
      if (v544.mSampleTime - v17 != v23)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v24 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315906;
            *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 70;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v23;
            WORD2(buf.mWordClockTime) = 2048;
            *(double *)((char *)&buf.mWordClockTime + 6) = v22;
            _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
          }
        }
        uint64_t v26 = (int *)*((void *)this + 1578);
        if (v26 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v26, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 70, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v23, v22);
        }
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)this[3130], 0.0, 0.0, "bad relative mic-ref TS");
      }
    }
    LODWORD(v17) = this[121];
    *((double *)this + 1568) = v544.mSampleTime + (double)*(unint64_t *)&v17;
  }
  uint64_t v542 = (char *)(this + 622);
  char v543 = 0;
  char v543 = (*(uint64_t (**)(void))(*((void *)this + 311) + 16))();
  CADeprecated::CAMutex::Lock((CADeprecated::CAMutex *)(this + 644));
  ++this[3130];
  CADeprecated::CAMutex::Unlock((CADeprecated::CAMutex *)(this + 644));
  UInt32 v27 = this[121];
  UInt32 v541 = v27;
  UInt32 NumberOfSourceFrames = v27;
  int v28 = *((unsigned __int8 *)v9 + 3409);
  if (!*((unsigned char *)v9 + 3409))
  {
    if (v7->mNumberBuffers == this[89])
    {
      float v515 = (const CAStreamBasicDescription *)(this + 82);
      if (!*((unsigned char *)v9 + 3410)) {
        goto LABEL_79;
      }
      goto LABEL_53;
    }
LABEL_895:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v542);
    unint64_t v12 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_896;
  }
  *((unsigned char *)v9 + 385) = 1;
  if (v7->mNumberBuffers != this[89]) {
    goto LABEL_895;
  }
  float v515 = (const CAStreamBasicDescription *)(this + 82);
LABEL_53:
  if (!v534)
  {
    unsigned int v29 = (AudioBufferList *)*((void *)this + 199);
    UInt32 mNumberBuffers = v29->mNumberBuffers;
    v534 = v29;
    if (mNumberBuffers)
    {
      unint64_t v31 = 0;
      p_mData = &v29->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v31;
        p_mData += 2;
      }
      while (v31 < v534->mNumberBuffers);
      int v28 = *((unsigned __int8 *)v9 + 3409);
    }
  }
  if (v28
    && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 1, v15, v534), *((unsigned char *)v9 + 3409))
    || *((unsigned char *)v9 + 3410))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v15, v534, &v544);
  }
  int v33 = v530;
  if (!v530)
  {
    int v33 = (AudioBufferList *)*((void *)this + 200);
    if (v33->mNumberBuffers)
    {
      unint64_t v34 = 0;
      uint32_t v35 = &v33->mBuffers[0].mData;
      do
      {
        int v36 = v33;
        bzero(*v35, *((unsigned int *)v35 - 1));
        int v33 = v36;
        ++v34;
        v35 += 2;
      }
      while (v34 < v36->mNumberBuffers);
    }
  }
  int v530 = v33;
  if (*((unsigned char *)v9 + 3409)
    && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 10, v15, v530), *((unsigned char *)v9 + 3409))
    || *((unsigned char *)v9 + 3410))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v15, v530, &v544);
  }
  unint64_t v37 = v531;
  if (!v531)
  {
    unint64_t v37 = (AudioBufferList *)*((void *)this + 201);
    if (v37->mNumberBuffers)
    {
      unint64_t v38 = 0;
      uint64_t v39 = &v37->mBuffers[0].mData;
      do
      {
        int v40 = v37;
        bzero(*v39, *((unsigned int *)v39 - 1));
        unint64_t v37 = v40;
        ++v38;
        v39 += 2;
      }
      while (v38 < v40->mNumberBuffers);
    }
  }
  unint64_t v531 = v37;
  if (*((unsigned char *)v9 + 3409)
    && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 11, v15, v531), *((unsigned char *)v9 + 3409))
    || *((unsigned char *)v9 + 3410))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v15, v531, &v544);
  }
  UInt32 v27 = this[121];
LABEL_79:
  if (v27 != v15)
  {
    if (*((unsigned char *)v9 + 3331))
    {
      double v51 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
      double v52 = *((double *)this + 1991);
      if (v51 > v52)
      {
        *((double *)this + 1991) = v52 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)this[3130], (float)this[121], (float)v15, "processdownlinkaudio: <block size mismatch>");
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        double v53 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          double v54 = (*v53 ? *v53 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315650;
            *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 171;
            WORD1(buf.mRateScalar) = 2048;
            *(double *)((char *)&buf.mRateScalar + 4) = v51;
            _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
          }
        }
        double v55 = (int *)*((void *)this + 1578);
        if (v55 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v55, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 171, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v51);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        double v56 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          double v57 = (*v56 ? *v56 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            uint64_t v58 = v15;
            UInt32 mDataByteSize = v7->mBuffers[0].mDataByteSize;
            atomic_uint v60 = this[121];
            CAFormatter::CAFormatter((CAFormatter *)&v554, v515);
            atomic_uint v61 = this[3130];
            LODWORD(buf.mSampleTime) = 136316674;
            *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 175;
            WORD1(buf.mRateScalar) = 1024;
            HIDWORD(buf.mRateScalar) = v58;
            LOWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)((char *)&buf.mWordClockTime + 2) = mDataByteSize;
            HIWORD(buf.mWordClockTime) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mSubframes = v60;
            LOWORD(buf.mSMPTETime.mCounter) = 2080;
            *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v554.mSampleTime;
            HIWORD(buf.mSMPTETime.mFlags) = 1024;
            *(_DWORD *)&buf.mSMPTETime.mHours = v61;
            _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
            if (*(void *)&v554.mSampleTime) {
              free(*(void **)&v554.mSampleTime);
            }
            uint64_t v15 = v58;
          }
        }
        double v62 = (int *)*((void *)this + 1578);
        if (v62)
        {
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410))
          {
            uint64_t v63 = v15;
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v64 = VPLogScope(void)::scope;
            UInt32 v65 = v7->mBuffers[0].mDataByteSize;
            atomic_uint v66 = this[121];
            CAFormatter::CAFormatter((CAFormatter *)&buf, v515);
            atomic_uint v67 = this[3130];
            LODWORD(v505) = v66;
            uint64_t v15 = v63;
            CALegacyLog::log(v62, 1, v64, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 175, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v63, v65, v505, *(const char **)&buf.mSampleTime, v67);
LABEL_194:
            if (*(void *)&buf.mSampleTime) {
              free(*(void **)&buf.mSampleTime);
            }
          }
        }
      }
    }
    else
    {
      *((unsigned char *)v9 + 3331) = 1;
      *((void *)this + 1988) = mach_absolute_time();
      *((void *)this + 1991) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)this[3130], (float)this[121], (float)v15, "processdl: <block size mismatch>");
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v75 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        char v76 = (*v75 ? *v75 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 151;
          _os_log_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
        }
      }
      uint64_t v77 = (int *)*((void *)this + 1578);
      if (v77 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v77, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 151, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      char v78 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        unint64_t v79 = (*v78 ? *v78 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = v15;
          UInt32 v81 = v7->mBuffers[0].mDataByteSize;
          atomic_uint v82 = this[121];
          CAFormatter::CAFormatter((CAFormatter *)&v554, v515);
          atomic_uint v83 = this[3130];
          LODWORD(buf.mSampleTime) = 136316674;
          *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 155;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v80;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v81;
          HIWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mSubframes = v82;
          LOWORD(buf.mSMPTETime.mCounter) = 2080;
          *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v554.mSampleTime;
          HIWORD(buf.mSMPTETime.mFlags) = 1024;
          *(_DWORD *)&buf.mSMPTETime.mHours = v83;
          _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
          if (*(void *)&v554.mSampleTime) {
            free(*(void **)&v554.mSampleTime);
          }
          uint64_t v15 = v80;
        }
      }
      CFDictionaryRef v84 = (int *)*((void *)this + 1578);
      if (v84 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
      {
        uint64_t v85 = v15;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v86 = VPLogScope(void)::scope;
        UInt32 v87 = v7->mBuffers[0].mDataByteSize;
        atomic_uint v88 = this[121];
        CAFormatter::CAFormatter((CAFormatter *)&buf, v515);
        atomic_uint v89 = this[3130];
        LODWORD(v505) = v88;
        uint64_t v15 = v85;
        CALegacyLog::log(v84, 2, v86, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 155, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v85, v87, v505, *(const char **)&buf.mSampleTime, v89);
        goto LABEL_194;
      }
    }
    if (*((unsigned char *)v9 + 3409)
      && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 2, v15, v7), *((unsigned char *)v9 + 3409))
      || *((unsigned char *)v9 + 3410))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, v7, &v544);
    }
    uint64_t v74 = *((void *)this + 2003);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12379);
    }
    if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
      goto LABEL_895;
    }
LABEL_203:
    AudioIssueDetectorLibraryLoader(void)::libSym(v74, 68, 0, v7, v15, &v544);
    goto LABEL_895;
  }
  if (v7->mBuffers[0].mDataByteSize != this[88] * v15)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned int v68 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      double v69 = (*v68 ? *v68 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        UInt32 v70 = v7->mBuffers[0].mDataByteSize;
        int v71 = this[88] * v15;
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 189;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v70;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v71;
        _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    int v72 = (int *)*((void *)this + 1578);
    int v73 = *((unsigned __int8 *)v9 + 3409);
    if (v72)
    {
      if (!*((unsigned char *)v9 + 3409) && !*((unsigned char *)v9 + 3410)) {
        goto LABEL_156;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v72, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 189, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", v7->mBuffers[0].mDataByteSize, this[88] * v15);
      int v73 = *((unsigned __int8 *)v9 + 3409);
    }
    if (v73)
    {
      VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 2, v15, v7);
      if (*((unsigned char *)v9 + 3409))
      {
LABEL_157:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, v7, &v544);
LABEL_158:
        uint64_t v74 = *((void *)this + 2003);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12379);
        }
        if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
          goto LABEL_895;
        }
        goto LABEL_203;
      }
    }
LABEL_156:
    if (!*((unsigned char *)v9 + 3410)) {
      goto LABEL_158;
    }
    goto LABEL_157;
  }
  if (!*((unsigned char *)v9 + 3331)) {
    goto LABEL_227;
  }
  *((unsigned char *)v9 + 3331) = 0;
  double v41 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
  VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)this[3130], (float)this[121], (float)v15, "processdownlinkaudio: <block size no longer mismatched>");
  if (v41 <= 1.0)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    char v90 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v90)
    {
      char v91 = v90;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 212;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v41;
        _os_log_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    CFStringRef v92 = (int *)*((void *)this + 1578);
    if (v92 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v92, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 212, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v41);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CFDataRef v93 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
    if (v93)
    {
      double v94 = v93;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        atomic_uint v95 = this[121];
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 213;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v15;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v95;
        _os_log_impl(&dword_1BB0CE000, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    double v48 = (int *)*((void *)this + 1578);
    if (v48 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v49 = 213;
      int v50 = 2;
      goto LABEL_226;
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v42 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v42)
    {
      double v43 = v42;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 207;
        WORD1(buf.mRateScalar) = 2048;
        *(double *)((char *)&buf.mRateScalar + 4) = v41;
        _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
      }
    }
    uint64_t v44 = (int *)*((void *)this + 1578);
    if (v44 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v44, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 207, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v41);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v45 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v45)
    {
      float v46 = v45;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        atomic_uint v47 = this[121];
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 208;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v15;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v47;
        _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    double v48 = (int *)*((void *)this + 1578);
    if (v48 && (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v49 = 208;
      int v50 = 1;
LABEL_226:
      CALegacyLog::log(v48, v50, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", v49, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", v15, this[121]);
    }
  }
LABEL_227:
  uint64_t v96 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 48);
  unsigned int v97 = this[121];
  if (*((void *)this + 47))
  {
    if (v96)
    {
      UInt32 NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v96);
      uint64_t v96 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
LABEL_234:
      unsigned int v97 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v96);
      goto LABEL_235;
    }
    uint64_t v96 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
LABEL_233:
    UInt32 NumberOfSourceFrames = this[121];
    goto LABEL_234;
  }
  if (v96) {
    goto LABEL_233;
  }
LABEL_235:
  unsigned int v98 = (unsigned int *)*((void *)this + 13);
  uint64_t v99 = *v98;
  if ((int)v99 >= 1)
  {
    int v100 = v97 * this[58];
    unsigned int v101 = (int *)(v98 + 3);
    do
    {
      *unsigned int v101 = v100;
      v101 += 4;
      --v99;
    }
    while (v99);
  }
  UInt32 v539 = v97;
  uint64_t v102 = (*(uint64_t (**)(void))(*((void *)this + 12) + 16))();
  unint64_t v103 = v539;
  UInt32 v541 = v539;
  uint64_t v104 = (const AudioBufferList *)*((void *)this + 13);
  if (*((unsigned char *)v9 + 3409)
    && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 0, v539, *((AudioBufferList **)this + 13)), uint64_t v104 = (const AudioBufferList *)*((void *)this + 13), *((unsigned char *)v9 + 3409))|| *((unsigned char *)v9 + 3410))
  {
    uint64_t v102 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v539, v104, &v544);
    uint64_t v104 = (const AudioBufferList *)*((void *)this + 13);
  }
  uint64_t v105 = *((void *)this + 2003);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12379);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    uint64_t v102 = AudioIssueDetectorLibraryLoader(void)::libSym(v105, 51, 0, v104, v539, &v544);
  }
  if (*((unsigned char *)this + 2082) || this[19] == 7 && *((float *)this + 3132) == 0.0)
  {
    vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
    v551.Float64 mSampleTime = buf.mSampleTime;
    *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v551);
    buf.mHostTime = v106;
    *(void *)&v554.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v551);
    v554.mHostTime = v107;
    while (1)
    {
      uint64_t v102 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v554);
      if ((v102 & 1) == 0) {
        break;
      }
      Float64 mSampleTime = buf.mSampleTime;
      unsigned int frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
      vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
    }
  }
  uint64_t v514 = v15;
  atomic_uint v110 = this[55];
  if ((v110 & 0x20) != 0)
  {
    int v113 = this[59];
    if ((v113 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 287;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
      }
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiounint64_t n = &unk_1F14C8B68;
      exception[2] = -50;
    }
    MEMORY[0x1F4188790](v102);
    unsigned int v112 = (int *)((char *)&v507 - v114);
    bzero((char *)&v507 - v114, v115);
  }
  else
  {
    MEMORY[0x1F4188790](v102);
    unsigned int v112 = (int *)&v505;
    uint64_t v505 = 0;
    long long v506 = 0uLL;
    int v113 = 1;
  }
  unint64_t v116 = 0;
  float v510 = this + 4292;
  *unsigned int v112 = v113;
  uint64_t v117 = 2;
  if ((v110 & 0x20) != 0) {
    goto LABEL_258;
  }
LABEL_257:
  for (unint64_t i = 1; v116 < i; unint64_t i = this[59])
  {
    *(_OWORD *)&v112[v117] = *(_OWORD *)(*((void *)this + 13) + v117 * 4);
    ++v116;
    v117 += 4;
    if ((v110 & 0x20) == 0) {
      goto LABEL_257;
    }
LABEL_258:
    ;
  }
  atomic_uint v119 = this[65];
  if ((v119 & 0x20) != 0)
  {
    int v121 = this[69];
    if ((v121 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 293;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
      }
      uint64_t v495 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v495 = &unk_1F14C8B68;
      v495[2] = -50;
    }
    MEMORY[0x1F4188790](v111);
    uint64_t v120 = (AudioBufferList *)((char *)&v507 - v122);
    bzero((char *)&v507 - v122, v123);
  }
  else
  {
    MEMORY[0x1F4188790](v111);
    uint64_t v120 = (AudioBufferList *)&v505;
    uint64_t v505 = 0;
    long long v506 = 0uLL;
    int v121 = 1;
  }
  uint64_t v124 = 0;
  unint64_t v125 = 0;
  v120->UInt32 mNumberBuffers = v121;
  if ((v119 & 0x20) != 0) {
    goto LABEL_268;
  }
LABEL_267:
  for (unint64_t j = 1; v125 < j; unint64_t j = this[69])
  {
    int v127 = (char *)v120 + v124;
    *((void *)v127 + 2) = *(void *)(*((void *)this + 22) + v124 + 16);
    *((_DWORD *)v127 + 2) = 1;
    *((_DWORD *)v127 + 3) = 4 * v103;
    ++v125;
    v124 += 16;
    if ((v119 & 0x20) == 0) {
      goto LABEL_267;
    }
LABEL_268:
    ;
  }
  char v128 = *((unsigned char *)this + 8896);
  float v511 = a7;
  uint64_t v526 = v9;
  if ((v128 & 1) != 0 && (this[2226] & 1) != 0 && *((void *)this + 438))
  {
    unint64_t v129 = atomic_load((unint64_t *)this + 2056);
    if (v129)
    {
      *(void *)&v551.Float64 mSampleTime = this;
      *(void *)&buf.Float64 mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV4::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
      buf.mHostTime = (UInt64)&v551;
      *(void *)&v554.Float64 mSampleTime = &buf;
      caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((caulk::concurrent::details::lf_read_sync_write_impl *)(this + 4092), &v554);
      atomic_fetch_add((atomic_ullong *volatile)this + 2056, -(uint64_t)v129);
    }
    int v130 = this[576];
    if (v130 != this[578]) {
      AudioUnitSetParameter(*((AudioUnit *)this + 438), 0x75696F72u, 0, 0, (float)v130, 0);
    }
    AudioTimeStamp buf = v544;
    LODWORD(v550.mSampleTime) = 512;
    *(void *)&v554.Float64 mSampleTime = v112;
    *(void *)&v551.Float64 mSampleTime = v120;
    LODWORD(v103) = v541;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 438), (AudioUnitRenderActionFlags *)&v550, &buf, v541, 1u, (const AudioBufferList **)&v554, 1u, (AudioBufferList **)&v551);
  }
  else
  {
    *(void *)&v553.UInt32 mNumberBuffers = v120;
    *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v553);
    buf.mHostTime = v151;
    *(void *)&v554.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v553);
    v554.mHostTime = v152;
    while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v554))
    {
      vp::fill(*(float ***)&buf.mSampleTime, v103, 0.0);
      *(void *)&v552.UInt32 mNumberBuffers = v112;
      *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v552);
      v551.mHostTime = v153;
      *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v552);
      v550.mHostTime = v154;
      while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
      {
        data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
        int v156 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
        uint64_t v157 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
        vDSP_vadd(data, 1, v156, 1, v157, 1, v103);
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
      }
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
    }
  }
  if ((this[2224] & 2) != 0 && (this[2226] & 2) != 0)
  {
    uint64_t v131 = *((void *)this + 439);
    if (v131)
    {
      AudioTimeStamp buf = v544;
      LODWORD(v551.mSampleTime) = 512;
      MEMORY[0x1F4188790](v131);
      long long v506 = 0uLL;
      uint64_t v505 = 0;
      long long v506 = *(_OWORD *)(*((void *)this + 22) + 8);
      LODWORD(v505) = 1;
      *(void *)&v554.Float64 mSampleTime = &v505;
      AudioUnitProcessMultiple(v132, (AudioUnitRenderActionFlags *)&v551, &buf, v103, 1u, (const AudioBufferList **)&v554, 0, (AudioBufferList **)&v550);
    }
  }
  __int16 v133 = (CA::AudioSampleRateConverter **)*((void *)this + 47);
  v521 = v7;
  if (v133)
  {
    VoiceProcessor::SampleRateConverter::Convert(v133, &v541, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 23));
    LODWORD(v103) = NumberOfSourceFrames;
    UInt32 v541 = NumberOfSourceFrames;
    uint64_t v120 = (AudioBufferList *)*((void *)this + 23);
  }
  float v135 = VoiceProcessorV2::DetermineNoiseBasedVolume((VoiceProcessorV2 *)this);
  unsigned __int32 v136 = this[130];
  AudioTimeStamp buf = v544;
  if (v136)
  {
    unsigned int v137 = 0;
    unsigned int v138 = 0;
    uint64_t v139 = v103 / v136;
    int v533 = (AudioUnitParameterValue *)(this + 4206);
    do
    {
      if (v120->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v554.mSampleTime) = 136315394;
          *(void *)((char *)&v554.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v554.mHostTime) = 1024;
          *(_DWORD *)((char *)&v554.mHostTime + 6) = 395;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v554, 0x12u);
        }
        uint64_t v482 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v482 = &unk_1F14C8B68;
        v482[2] = -50;
      }
      MEMORY[0x1F4188790](Parameter);
      unsigned int v141 = (AudioBufferList *)((char *)&v507 - v140);
      bzero((char *)&v507 - v140, v142);
      uint64_t v143 = v120->mNumberBuffers;
      v141->UInt32 mNumberBuffers = v143;
      if (v143)
      {
        unsigned int v144 = &v141->mBuffers[0].mData;
        uint64_t v145 = &v120->mBuffers[0].mData;
        do
        {
          *((_DWORD *)v144 - 2) = 1;
          *((_DWORD *)v144 - 1) = 4 * v139;
          uint64_t v146 = (char *)*v145;
          v145 += 2;
          NSObject *v144 = &v146[4 * v138];
          v144 += 2;
          --v143;
        }
        while (v143);
      }
      uint64_t v147 = *((void *)this + 1112);
      if ((v147 & 4) != 0 && (this[2226] & 4) != 0)
      {
        uint64_t Parameter = *((void *)this + 440);
        if (Parameter)
        {
          AudioTimeStamp v554 = buf;
          LODWORD(v551.mSampleTime) = 512;
          uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, (AudioUnitRenderActionFlags *)&v551, &v554, v139, v141);
          if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v139, v141, &v554);
          }
          uint64_t v147 = *((void *)this + 1112);
        }
      }
      if ((v147 & 0x40) != 0 && (this[2226] & 0x40) != 0)
      {
        uint64_t Parameter = *((void *)this + 444);
        if (Parameter)
        {
          AudioTimeStamp v554 = buf;
          *(void *)&v551.Float64 mSampleTime = v141;
          v551.mHostTime = 0;
          *(void *)&v550.Float64 mSampleTime = v141;
          v550.mHostTime = 0;
          v553.UInt32 mNumberBuffers = 512;
          AudioUnitProcessMultiple((AudioUnit)Parameter, &v553.mNumberBuffers, &v554, v139, 2u, (const AudioBufferList **)&v551, 2u, (AudioBufferList **)&v550);
          uint64_t Parameter = AudioUnitGetParameter(*((AudioUnit *)this + 444), 1u, 0, 0, v533);
          uint64_t v147 = *((void *)this + 1112);
        }
      }
      if (v147 & 0x100) != 0 && (*((unsigned char *)this + 8905))
      {
        uint64_t Parameter = *((void *)this + 446);
        if (Parameter)
        {
          AudioTimeStamp v554 = buf;
          AudioUnitSetParameter((AudioUnit)Parameter, 5u, 0, 0, v135, 0);
          LODWORD(v551.mSampleTime) = 512;
          uint64_t Parameter = AudioUnitProcess(*((AudioUnit *)this + 446), (AudioUnitRenderActionFlags *)&v551, &v554, v139, v141);
          if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v139, v141, &v554);
          }
          uint64_t v147 = *((void *)this + 1112);
        }
      }
      if ((v147 & 0x4000) != 0 && (*((unsigned char *)this + 8905) & 0x40) != 0)
      {
        if (*((void *)this + 452))
        {
          uint64_t Parameter = (*(uint64_t (**)(atomic_uint *, AudioBufferList *, uint64_t, AudioTimeStamp *))(*(void *)this + 672))(this, v141, v139, &buf);
          if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v139, v141, &buf);
          }
        }
      }
      v138 += v139;
      buf.Float64 mSampleTime = buf.mSampleTime + (double)v139;
      ++v137;
    }
    while (v137 < this[130]);
  }
  atomic_uint v148 = this[75];
  if ((v148 & 0x20) != 0)
  {
    int v150 = this[79];
    unsigned int v7 = v521;
    uint64_t v9 = v526;
    if ((v150 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v554.mSampleTime) = 136315394;
        *(void *)((char *)&v554.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v554.mHostTime) = 1024;
        *(_DWORD *)((char *)&v554.mHostTime + 6) = 443;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v554, 0x12u);
      }
      uint64_t v496 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v496 = &unk_1F14C8B68;
      v496[2] = -50;
    }
    MEMORY[0x1F4188790](Parameter);
    float v149 = (int *)((char *)&v507 - v158);
    bzero((char *)&v507 - v158, v159);
  }
  else
  {
    MEMORY[0x1F4188790](Parameter);
    float v149 = (int *)&v505;
    uint64_t v505 = 0;
    long long v506 = 0uLL;
    int v150 = 1;
    unsigned int v7 = v521;
    uint64_t v9 = v526;
  }
  int *v149 = v150;
  unint64_t v161 = *((void *)this + 47);
  uint64_t v160 = *((void *)this + 48);
  if (v160)
  {
    if (v161)
    {
      UInt32 NumberOfSourceFrames = this[121];
      uint64_t v160 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v160, &v541, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 24));
      unint64_t v162 = 0;
      atomic_uint v163 = this[75];
      uint64_t v164 = 2;
      __int16 v166 = v530;
      unsigned int v165 = v531;
      int v167 = v534;
      if ((v163 & 0x20) != 0) {
        goto LABEL_331;
      }
LABEL_330:
      for (unint64_t k = 1; v162 < k; unint64_t k = this[79])
      {
        *(_OWORD *)&v149[v164] = *(_OWORD *)(*((void *)this + 24) + v164 * 4);
        ++v162;
        v164 += 4;
        if ((v163 & 0x20) == 0) {
          goto LABEL_330;
        }
LABEL_331:
        ;
      }
    }
    else
    {
      uint64_t v160 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v160, &v541, &NumberOfSourceFrames, v120, *((const AudioBufferList **)this + 24));
      unint64_t v174 = 0;
      atomic_uint v175 = this[75];
      uint64_t v176 = 2;
      __int16 v166 = v530;
      unsigned int v165 = v531;
      int v167 = v534;
      if ((v175 & 0x20) != 0) {
        goto LABEL_344;
      }
LABEL_343:
      for (unint64_t m = 1; v174 < m; unint64_t m = this[79])
      {
        *(_OWORD *)&v149[v176] = *(_OWORD *)(*((void *)this + 24) + v176 * 4);
        ++v174;
        v176 += 4;
        if ((v175 & 0x20) == 0) {
          goto LABEL_343;
        }
LABEL_344:
        ;
      }
    }
    UInt32 v541 = NumberOfSourceFrames;
  }
  else if (v161)
  {
    unint64_t v169 = 0;
    mBuffers = v120->mBuffers;
    double v171 = v149 + 2;
    __int16 v166 = v530;
    unsigned int v165 = v531;
    int v167 = v534;
    if ((v148 & 0x20) != 0) {
      goto LABEL_338;
    }
LABEL_337:
    for (unint64_t n = 1; v169 < n; unint64_t n = this[79])
    {
      long long v173 = (__int128)*mBuffers++;
      *v171++ = v173;
      ++v169;
      if ((v148 & 0x20) == 0) {
        goto LABEL_337;
      }
LABEL_338:
      ;
    }
  }
  else
  {
    unsigned int v383 = v120->mBuffers;
    float v384 = v149 + 2;
    __int16 v166 = v530;
    unsigned int v165 = v531;
    int v167 = v534;
    if ((v148 & 0x20) != 0) {
      goto LABEL_673;
    }
LABEL_672:
    for (iunint64_t i = 1; v161 < ii; iunint64_t i = this[79])
    {
      long long v386 = (__int128)*v383++;
      *v384++ = v386;
      ++v161;
      if ((v148 & 0x20) == 0) {
        goto LABEL_672;
      }
LABEL_673:
      ;
    }
  }
  AudioTimeStamp v554 = v544;
  if (!this[130])
  {
LABEL_612:
    DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::GetDynamicsDSPChannelCount((VoiceProcessorV2 *)this);
    UInt32 v345 = DynamicsDSPChannelCount;
    uint64_t v346 = *((void *)this + 1112);
    if ((v346 & 0x200000000) != 0)
    {
      uint64_t v347 = v514;
      if ((this[2227] & 2) != 0)
      {
        uint64_t v348 = (OpaqueAudioComponentInstance *)*((void *)this + 471);
        if (v348)
        {
          if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_966;
            }
            LODWORD(v551.mSampleTime) = 136315394;
            *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(v551.mHostTime) = 1024;
            *(_DWORD *)((char *)&v551.mHostTime + 6) = 920;
            v497 = MEMORY[0x1E4F14500];
            goto LABEL_965;
          }
          MEMORY[0x1F4188790](DynamicsDSPChannelCount);
          float v350 = (AudioBufferList *)((char *)&v507 - v349);
          bzero((char *)&v507 - v349, v351);
          v350->UInt32 mNumberBuffers = v345;
          memcpy(v350->mBuffers, v7->mBuffers, 16 * v345);
          LODWORD(v551.mSampleTime) = 512;
          DynamicsDSPChannelCFIndex Count = AudioUnitProcess(v348, (AudioUnitRenderActionFlags *)&v551, &v544, this[121], v350);
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v347, v350, &v544);
          }
          uint64_t v346 = *((void *)this + 1112);
        }
      }
    }
    else
    {
      uint64_t v347 = v514;
    }
    if ((v346 & 0x1000000000) == 0) {
      goto LABEL_629;
    }
    if ((this[2227] & 0x10) == 0) {
      goto LABEL_629;
    }
    unsigned int v352 = (OpaqueAudioComponentInstance *)*((void *)this + 474);
    if (!v352) {
      goto LABEL_629;
    }
    if (v345 - 65 > 0xFFFFFFBF)
    {
      MEMORY[0x1F4188790](DynamicsDSPChannelCount);
      uint64_t v354 = (AudioBufferList *)((char *)&v507 - v353);
      bzero((char *)&v507 - v353, v355);
      v354->UInt32 mNumberBuffers = v345;
      memcpy(v354->mBuffers, v7->mBuffers, 16 * v345);
      LODWORD(v551.mSampleTime) = 512;
      DynamicsDSPChannelCFIndex Count = AudioUnitProcess(v352, (AudioUnitRenderActionFlags *)&v551, &v544, this[121], v354);
      if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
        DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x38u, v347, v354, &v544);
      }
      uint64_t v346 = *((void *)this + 1112);
LABEL_629:
      if ((v346 & 0x2000000000) != 0
        && (this[2227] & 0x20) != 0
        && (DynamicsDSPChannelCFIndex Count = *((void *)this + 475)) != 0)
      {
        uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
        if (v345 == v7->mNumberBuffers)
        {
          AudioTimeStamp v551 = v544;
          LODWORD(v550.mSampleTime) = 512;
          DynamicsDSPChannelCFIndex Count = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
        }
        else
        {
          unsigned int v389 = (AudioBufferList *)*((void *)this + 25);
          if (v389->mNumberBuffers)
          {
            unint64_t v390 = 0;
            uint64_t v391 = 16;
            do
            {
              memcpy(*(void **)((char *)&v389->mNumberBuffers + v391), v7->mBuffers[0].mData, v7->mBuffers[0].mDataByteSize);
              ++v390;
              unsigned int v389 = (AudioBufferList *)*((void *)this + 25);
              v391 += 16;
            }
            while (v390 < v389->mNumberBuffers);
            DynamicsDSPChannelCFIndex Count = *((void *)this + 475);
          }
          AudioTimeStamp v551 = v544;
          v538.UInt32 mNumberBuffers = 512;
          DynamicsDSPChannelCFIndex Count = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, &v538.mNumberBuffers, &v551, this[121], v389);
          if ((this[2225] & 0x40) != 0
            && (this[2227] & 0x40) != 0
            && (DynamicsDSPChannelCFIndex Count = *((void *)this + 476)) != 0)
          {
            int v392 = this[576];
            if (v392 != this[578])
            {
              AudioUnitSetParameter((AudioUnit)DynamicsDSPChannelCount, 0, 0, 0, (float)v392, 0);
              DynamicsDSPChannelCFIndex Count = *((void *)this + 476);
            }
            *(void *)&v553.UInt32 mNumberBuffers = *((void *)this + 25);
            *(void *)&v552.UInt32 mNumberBuffers = v7;
            AudioTimeStamp v550 = v544;
            LODWORD(v546) = 512;
            DynamicsDSPChannelCFIndex Count = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v546, &v550, this[121], 1u, (const AudioBufferList **)&v553, 1u, (AudioBufferList **)&v552);
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v347, v7, &v550);
            }
          }
          else if (v7->mNumberBuffers)
          {
            unint64_t v393 = 0;
            float v394 = &v7->mBuffers[0].mData;
            do
            {
              float v395 = (unsigned int *)*((void *)this + 25);
              if (v393 >= *v395) {
                unint64_t v396 = 0;
              }
              else {
                unint64_t v396 = v393;
              }
              DynamicsDSPChannelCFIndex Count = (uint64_t)memcpy(*v394, *(const void **)&v395[4 * v396 + 4], *((unsigned int *)v394 - 1));
              ++v393;
              v394 += 2;
            }
            while (v393 < v7->mNumberBuffers);
          }
        }
      }
      else if ((v346 & 0x20000000000) != 0 {
             && (uint64_t v357 = *((void *)this + 1113), (v357 & 0x20000000000) != 0)
      }
             && *((void *)this + 479))
      {
        if ((v346 & v357 & 0x40000000000) != 0 && *((void *)this + 480))
        {
          if (v345 - 65 <= 0xFFFFFFBF)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v551.mSampleTime) = 136315394;
              *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(v551.mHostTime) = 1024;
              *(_DWORD *)((char *)&v551.mHostTime + 6) = 988;
              _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
            }
            uint32_t v503 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint32_t v503 = &unk_1F14C8B68;
            v503[2] = -50;
          }
          MEMORY[0x1F4188790](DynamicsDSPChannelCount);
          uint64_t v359 = (UInt32 *)((char *)&v507 - v358);
          bzero((char *)&v507 - v358, v360);
          unint64_t v361 = 0;
          *uint64_t v359 = v345;
          uint64_t v362 = *((void *)this + 25);
          uint64_t v363 = 16 * v345;
          do
          {
            uint64_t v364 = memcpy(*(void **)(v362 + v361 + 16), v7->mBuffers[v361 / 0x10].mData, *(unsigned int *)(v362 + v361 + 12));
            uint64_t v362 = *((void *)this + 25);
            *(_OWORD *)&v359[v361 / 4 + 2] = *(_OWORD *)(v362 + v361 + 8);
            v361 += 16;
          }
          while (v363 != v361);
          *(void *)&v550.Float64 mSampleTime = v359;
          uint64_t v365 = this[1075];
          if ((v365 - 65) < 0xFFFFFFC0)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v551.mSampleTime) = 136315394;
              *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(v551.mHostTime) = 1024;
              *(_DWORD *)((char *)&v551.mHostTime + 6) = 1003;
              _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
            }
            uint64_t v504 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v504 = &unk_1F14C8B68;
            v504[2] = -50;
          }
          MEMORY[0x1F4188790](v364);
          uint64_t v367 = (AudioBufferList *)((char *)&v507 - v366);
          bzero((char *)&v507 - v366, v368);
          uint64_t v369 = 0;
          v367->UInt32 mNumberBuffers = v365;
          unsigned __int8 v370 = v7 + 1;
          do
          {
            AudioBuffer v371 = *(AudioBuffer *)&v370->mNumberBuffers;
            unsigned __int8 v370 = (AudioBufferList *)((char *)v370 + 32);
            v367->mBuffers[v369++] = v371;
          }
          while (v365 != v369);
          *(void *)&v553.UInt32 mNumberBuffers = v367;
          if (*((unsigned char *)this + 2245))
          {
            int v372 = this[576];
            if (v372 != this[578]) {
              AudioUnitSetParameter(*((AudioUnit *)this + 480), 0, 0, 0, (float)v372, 0);
            }
          }
          AudioTimeStamp v551 = v544;
          v552.UInt32 mNumberBuffers = 512;
          AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v552.mNumberBuffers, &v551, this[121], 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
          uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v347, v367, &v551);
          }
          unsigned int v373 = &v7->mBuffers[0].mData;
          do
          {
            memcpy(*v373, v373[2], *((unsigned int *)v373 - 1));
            v373 += 4;
            --v365;
          }
          while (v365);
        }
        else
        {
          uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          if (!*((unsigned char *)this + 2244) && v7->mNumberBuffers >= 2)
          {
            unsigned __int8 v387 = (void **)v7[1].mBuffers;
            unint64_t v388 = 1;
            do
            {
              memcpy(*v387, v7->mBuffers[0].mData, *((unsigned int *)v387 - 1));
              ++v388;
              v387 += 2;
            }
            while (v388 < v7->mNumberBuffers);
          }
        }
        AudioTimeStamp v551 = v544;
        LODWORD(v550.mSampleTime) = 512;
        DynamicsDSPChannelCFIndex Count = AudioUnitProcess(*((AudioUnit *)this + 479), (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
      }
      else if ((v346 & 0x2000000000000000) != 0 && (*((unsigned char *)this + 8911) & 0x20) != 0)
      {
        unsigned int v380 = v7->mNumberBuffers;
        uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
        if (v7->mNumberBuffers >= 2)
        {
          if (this[79] == 1)
          {
            DynamicsDSPChannelCFIndex Count = (uint64_t)memcpy(*(void **)&v7[1].mBuffers[0].mNumberChannels, v7->mBuffers[0].mData, v7->mBuffers[0].mDataByteSize);
            unsigned int v380 = v7->mNumberBuffers;
          }
          if (v380 >= 3)
          {
            float v381 = (void **)&v7[2];
            unint64_t v382 = 2;
            do
            {
              bzero(*v381, *((unsigned int *)v381 - 1));
              ++v382;
              v381 += 2;
            }
            while (v382 < v7->mNumberBuffers);
          }
        }
      }
      else
      {
        uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
        if (!*((unsigned char *)this + 2244))
        {
          unsigned int v374 = this[79];
          unint64_t v375 = v374 <= 1 ? 1 : v374;
          if (v375 < v7->mNumberBuffers)
          {
            int v376 = (char *)v7 + 16 * (v375 - 1);
            int v377 = (const void **)(v376 + 16);
            vDSP_Length v378 = (unsigned int *)(v376 + 12);
            uint64_t v379 = 16 * v375 + 16;
            do
            {
              DynamicsDSPChannelCFIndex Count = (uint64_t)memcpy(*(void **)((char *)&v7->mNumberBuffers + v379), *v377, *v378);
              ++v375;
              v379 += 16;
            }
            while (v375 < v7->mNumberBuffers);
          }
        }
      }
      uint64_t v397 = *((void *)this + 1112);
      if ((v397 & 0x100000000000000) == 0
        || (uint64_t v398 = *((void *)this + 1113), (v398 & 0x100000000000000) == 0)
        || !*((void *)this + 494))
      {
        if ((v397 & 0x200000000000000) == 0
          || (uint64_t v398 = *((void *)this + 1113), (v398 & 0x200000000000000) == 0)
          || !*((void *)this + 495))
        {
          if ((v397 & 0x400000000000000) == 0
            || (uint64_t v398 = *((void *)this + 1113), (v398 & 0x400000000000000) == 0)
            || !*((void *)this + 496))
          {
            char v415 = 0;
            goto LABEL_737;
          }
        }
      }
      if ((v397 & v398 & 0x800000000000) != 0)
      {
        DynamicsDSPChannelCFIndex Count = *((void *)this + 485);
        if (DynamicsDSPChannelCount)
        {
          AudioTimeStamp v551 = v544;
          LODWORD(v550.mSampleTime) = 512;
          DynamicsDSPChannelCFIndex Count = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, this[121], v7, &v551);
          }
          uint64_t v397 = *((void *)this + 1112);
        }
      }
      if (v397 & 0x1000000000000) != 0 && (*((unsigned char *)this + 8910))
      {
        char v399 = (OpaqueAudioComponentInstance *)*((void *)this + 486);
        if (v399)
        {
          uint64_t v400 = this[1075];
          if ((v400 - 65) <= 0xFFFFFFBF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_978;
            }
            LODWORD(v551.mSampleTime) = 136315394;
            *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
            WORD2(v551.mHostTime) = 1024;
            *(_DWORD *)((char *)&v551.mHostTime + 6) = 1094;
            v501 = MEMORY[0x1E4F14500];
            goto LABEL_977;
          }
          MEMORY[0x1F4188790](DynamicsDSPChannelCount);
          uint64_t v402 = (AudioBufferList *)((char *)&v507 - v401);
          bzero((char *)&v507 - v401, v403);
          uint64_t v404 = 0;
          v402->UInt32 mNumberBuffers = v400;
          int v405 = v7->mBuffers;
          do
          {
            AudioBuffer v406 = *v405;
            v405 += 2;
            v402->mBuffers[v404++] = v406;
          }
          while (v400 != v404);
          AudioTimeStamp v551 = v544;
          LODWORD(v550.mSampleTime) = 512;
          DynamicsDSPChannelCFIndex Count = AudioUnitProcess(v399, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v402);
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, this[121], v402, &v551);
          }
          uint64_t v397 = *((void *)this + 1112);
        }
      }
      if ((v397 & 0x2000000000000) == 0
        || (*((unsigned char *)this + 8910) & 2) == 0
        || (unsigned int v407 = (OpaqueAudioComponentInstance *)*((void *)this + 487)) == 0)
      {
LABEL_735:
        char v415 = 1;
LABEL_737:
        if ((v397 & 0x10000000000000) != 0 && (*((unsigned char *)this + 8910) & 0x10) != 0)
        {
          DynamicsDSPChannelCFIndex Count = *((void *)this + 490);
          if (DynamicsDSPChannelCount)
          {
            *(void *)&v553.UInt32 mNumberBuffers = v7;
            *(void *)&v552.UInt32 mNumberBuffers = v7;
            AudioTimeStamp v551 = v544;
            v538.UInt32 mNumberBuffers = 512;
            DynamicsDSPChannelCFIndex Count = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, &v538.mNumberBuffers, &v551, this[121], 1u, (const AudioBufferList **)&v553, 1u, (AudioBufferList **)&v552);
            if ((*((unsigned char *)this + 8902) & 0x20) != 0 && (*((unsigned char *)this + 8910) & 0x20) != 0)
            {
              DynamicsDSPChannelCFIndex Count = *((void *)this + 491);
              if (DynamicsDSPChannelCount)
              {
                AudioTimeStamp v550 = v544;
                LODWORD(v546) = 512;
                DynamicsDSPChannelCFIndex Count = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v546, &v550, this[121], v7);
              }
            }
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Cu, this[121], v7, &v551);
            }
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x40000000000000) != 0 && (*((unsigned char *)this + 8910) & 0x40) != 0)
        {
          DynamicsDSPChannelCFIndex Count = *((void *)this + 492);
          if (DynamicsDSPChannelCount)
          {
            AudioTimeStamp v551 = v544;
            LODWORD(v550.mSampleTime) = 512;
            DynamicsDSPChannelCFIndex Count = AudioUnitProcess((AudioUnit)DynamicsDSPChannelCount, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if (v397 & 0x100000000000000) != 0 && (*((unsigned char *)this + 8911))
        {
          DynamicsDSPChannelCFIndex Count = *((void *)this + 494);
          if (DynamicsDSPChannelCount)
          {
            if (this[1130] == 1 && (int v416 = (_DWORD *)*((void *)this + 197)) != 0)
            {
              ABLRingBuffer<float>::ReadFrom(this + 384, this[121], v416);
              DynamicsDSPChannelCFIndex Count = *((void *)this + 494);
              UInt32 v417 = 2;
            }
            else
            {
              UInt32 v417 = 1;
            }
            UInt64 v418 = *((void *)this + 197);
            *(void *)&v550.Float64 mSampleTime = v7;
            v550.mHostTime = v418;
            *(void *)&v553.UInt32 mNumberBuffers = v7;
            AudioTimeStamp v551 = v544;
            v552.UInt32 mNumberBuffers = 512;
            DynamicsDSPChannelCFIndex Count = AudioUnitProcessMultiple((AudioUnit)DynamicsDSPChannelCount, &v552.mNumberBuffers, &v551, this[121], v417, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v347, v7, &v551);
            }
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x200000000000000) != 0 && (*((unsigned char *)this + 8911) & 2) != 0)
        {
          uint64_t v419 = (OpaqueAudioComponentInstance *)*((void *)this + 495);
          if (v419)
          {
            uint64_t v420 = this[1075];
            if ((v420 - 65) <= 0xFFFFFFBF)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                LODWORD(v551.mSampleTime) = 136315394;
                *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
                WORD2(v551.mHostTime) = 1024;
                *(_DWORD *)((char *)&v551.mHostTime + 6) = 1174;
                _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
              }
              v499 = __cxa_allocate_exception(0x10uLL);
              *(void *)v499 = &unk_1F14C8B68;
              v499[2] = -50;
            }
            MEMORY[0x1F4188790](DynamicsDSPChannelCount);
            uint64_t v422 = (AudioBufferList *)((char *)&v507 - v421);
            bzero((char *)&v507 - v421, v423);
            uint64_t v424 = 0;
            v422->UInt32 mNumberBuffers = v420;
            unint64_t v425 = v7->mBuffers;
            do
            {
              AudioBuffer v426 = *v425;
              v425 += 2;
              v422->mBuffers[v424++] = v426;
            }
            while (v420 != v424);
            UInt64 v427 = *((void *)this + 197);
            *(void *)&v550.Float64 mSampleTime = v422;
            v550.mHostTime = v427;
            *(void *)&v553.UInt32 mNumberBuffers = v422;
            AudioTimeStamp v551 = v544;
            v552.UInt32 mNumberBuffers = 512;
            DynamicsDSPChannelCFIndex Count = AudioUnitProcessMultiple(v419, &v552.mNumberBuffers, &v551, this[121], 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v347, v422, &v551);
            }
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x400000000000000) != 0 && (*((unsigned char *)this + 8911) & 4) != 0 && *((void *)this + 496))
        {
          if (this[1130] == 1 && (uint64_t v428 = (_DWORD *)*((void *)this + 197)) != 0)
          {
            DynamicsDSPChannelCFIndex Count = (uint64_t)ABLRingBuffer<float>::ReadFrom(this + 384, this[121], v428);
            UInt32 v429 = 2;
          }
          else
          {
            UInt32 v429 = 1;
          }
          uint64_t v430 = this[1075];
          if ((v430 - 65) <= 0xFFFFFFBF)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v551.mSampleTime) = 136315394;
              *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
              WORD2(v551.mHostTime) = 1024;
              *(_DWORD *)((char *)&v551.mHostTime + 6) = 1199;
              _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
            }
            uint64_t v500 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v500 = &unk_1F14C8B68;
            v500[2] = -50;
          }
          MEMORY[0x1F4188790](DynamicsDSPChannelCount);
          uint64_t v432 = (AudioBufferList *)((char *)&v507 - v431);
          bzero((char *)&v507 - v431, v433);
          uint64_t v434 = 0;
          v432->UInt32 mNumberBuffers = v430;
          uint64_t v435 = v7 + 1;
          do
          {
            AudioBuffer v436 = *(AudioBuffer *)&v435->mNumberBuffers;
            uint64_t v435 = (AudioBufferList *)((char *)v435 + 32);
            v432->mBuffers[v434++] = v436;
          }
          while (v430 != v434);
          UInt64 v437 = *((void *)this + 197);
          *(void *)&v550.Float64 mSampleTime = v432;
          v550.mHostTime = v437;
          *(void *)&v553.UInt32 mNumberBuffers = v432;
          AudioTimeStamp v551 = v544;
          v552.UInt32 mNumberBuffers = 512;
          AudioUnitProcessMultiple(*((AudioUnit *)this + 496), &v552.mNumberBuffers, &v551, this[121], v429, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v347, v432, &v551);
          }
          uint64_t v397 = *((void *)this + 1112);
        }
        if ((v397 & 0x800000000000000) == 0 || (*((unsigned char *)this + 8911) & 8) == 0 && !*((unsigned char *)this + 472)) {
          goto LABEL_821;
        }
        LODWORD(v551.mSampleTime) = 1065353216;
        LODWORD(v550.mSampleTime) = 1065353216;
        if (*((unsigned char *)this + 2083) || *((unsigned char *)this + 472))
        {
          float v438 = *((float *)this + 1133);
          if (v438 != 0.0)
          {
            float v439 = __exp10f(v438 / 20.0);
            *(float *)&v550.Float64 mSampleTime = v439;
            *(float *)&v551.Float64 mSampleTime = v439;
LABEL_808:
            unsigned int v7 = v521;
            goto LABEL_809;
          }
        }
        float v440 = *((float *)this + 1131);
        if (v440 >= -300.0)
        {
          if (v440 == 0.0)
          {
            float v439 = 1.0;
          }
          else
          {
            float v441 = v440 / 20.0;
            BOOL v442 = v440 <= 60.0;
            float v443 = 3.0;
            if (v442) {
              float v443 = v441;
            }
            float v439 = __exp10f(v443);
            *(float *)&v551.Float64 mSampleTime = v439;
            unsigned int v7 = v521;
          }
        }
        else
        {
          LODWORD(v551.mSampleTime) = 0;
          float v439 = 0.0;
        }
        float v444 = *((float *)this + 1132);
        if (v444 >= -300.0)
        {
          if (v444 != 0.0)
          {
            float v445 = v444 / 20.0;
            if (v444 > 60.0) {
              float v445 = 3.0;
            }
            LODWORD(v550.mSampleTime) = __exp10f(v445);
            float v439 = *(float *)&v551.mSampleTime;
            goto LABEL_808;
          }
        }
        else
        {
          LODWORD(v550.mSampleTime) = 0;
        }
LABEL_809:
        if (v439 == 0.0)
        {
          bzero(v7->mBuffers[0].mData, 4 * this[121]);
          uint64_t v347 = v514;
          uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
        }
        else
        {
          uint64_t v347 = v514;
          uint64_t v356 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          if (v439 != 1.0) {
            vDSP_vsmul((const float *)v7->mBuffers[0].mData, 1, (const float *)&v551, (float *)v7->mBuffers[0].mData, 1, this[121]);
          }
        }
        uint64_t v9 = v526;
        if (v7->mNumberBuffers >= 2)
        {
          unint64_t v446 = 1;
          uint64_t v447 = 32;
          do
          {
            if (*(float *)&v550.mSampleTime == 0.0)
            {
              bzero(*(void **)((char *)&v7->mNumberBuffers + v447), 4 * this[121]);
            }
            else if (*(float *)&v550.mSampleTime != 1.0)
            {
              vDSP_vsmul(*(const float **)((char *)&v7->mNumberBuffers + v447), 1, (const float *)&v550, *(float **)((char *)&v7->mNumberBuffers + v447), 1, this[121]);
            }
            ++v446;
            v447 += 16;
          }
          while (v446 < v7->mNumberBuffers);
        }
        uint64_t v397 = *((void *)this + 1112);
LABEL_821:
        if ((v397 & 0x80000000000) != 0 && (*((unsigned char *)this + 8909) & 8) != 0 && *((void *)this + 481))
        {
          unint64_t v448 = *(float **)(*((void *)this + 2145) + 16);
          vDSP_Length v449 = this[121];
          if (*v510)
          {
            uint64_t v450 = this[127];
            AudioUnitParameterValue v451 = 0.0;
            if (v449 > v450) {
              vDSP_vclr(&v448[v450], 1, (v449 - v450));
            }
          }
          else
          {
            AudioUnitParameterValue v451 = 1.0;
            vDSP_vclr(v448, 1, v449);
          }
          AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, v451, 0);
          if (*((unsigned char *)this + 4671) & 1) != 0 && (*((unsigned char *)this + 4687))
          {
            uint64_t v452 = (OpaqueAudioComponentInstance *)*((void *)this + 403);
            if (v452)
            {
              LODWORD(v551.mSampleTime) = 0;
              AudioUnitGetParameter(v452, 9u, 0, 0, (AudioUnitParameterValue *)&v551);
              AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v551.mSampleTime, 0);
            }
          }
          int16x8_t v453 = (OpaqueAudioComponentInstance *)*((void *)this + 481);
          unsigned int v454 = atomic_load(VoiceProcessorV4::mIsOnEar);
          AudioUnitSetParameter(v453, 0x16u, 0, 0, (float)v454, 0);
          BOOL v455 = (const AudioBufferList *)*((void *)this + 2145);
          *(void *)&v550.Float64 mSampleTime = v7;
          v550.mHostTime = (UInt64)v455;
          AudioTimeStamp v551 = v544;
          v552.UInt32 mNumberBuffers = 512;
          *(void *)&v553.UInt32 mNumberBuffers = v7;
          uint64_t v456 = this[129];
          if ((*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410))
            && (VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v456, v7, &v551),
                uint64_t v456 = this[129],
                BOOL v455 = (const AudioBufferList *)*((void *)this + 2145),
                *((unsigned char *)v9 + 3409))
            || *((unsigned char *)v9 + 3410))
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v456, v455, &v551);
          }
          AudioUnitProcessMultiple(*((AudioUnit *)this + 481), &v552.mNumberBuffers, &v551, this[121], 2u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
          if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, this[129], v7, &v551);
          }
          AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, 0.0, 0);
          uint64_t v397 = *((void *)this + 1112);
        }
        if ((v397 & 0x100000000000) != 0 && (*((unsigned char *)this + 8909) & 0x10) != 0)
        {
          unint64_t v457 = (OpaqueAudioComponentInstance *)*((void *)this + 482);
          if (v457)
          {
            long long v458 = *(_OWORD *)&v511->mRateScalar;
            *(_OWORD *)&v551.Float64 mSampleTime = *(_OWORD *)&v511->mSampleTime;
            *(_OWORD *)&v551.mRateScalar = v458;
            long long v459 = *(_OWORD *)&v511->mSMPTETime.mHours;
            *(_OWORD *)&v551.mSMPTETime.mSubframes = *(_OWORD *)&v511->mSMPTETime.mSubframes;
            *(_OWORD *)&v551.mSMPTETime.mHours = v459;
            LODWORD(v550.mSampleTime) = 512;
            AudioUnitProcess(v457, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x200000000000) != 0 && (*((unsigned char *)this + 8909) & 0x20) != 0)
        {
          unint64_t v460 = (OpaqueAudioComponentInstance *)*((void *)this + 483);
          if (v460)
          {
            *(void *)&v550.Float64 mSampleTime = v7;
            *(void *)&v553.UInt32 mNumberBuffers = v7;
            long long v461 = *(_OWORD *)&v511->mRateScalar;
            *(_OWORD *)&v551.Float64 mSampleTime = *(_OWORD *)&v511->mSampleTime;
            *(_OWORD *)&v551.mRateScalar = v461;
            long long v462 = *(_OWORD *)&v511->mSMPTETime.mHours;
            *(_OWORD *)&v551.mSMPTETime.mSubframes = *(_OWORD *)&v511->mSMPTETime.mSubframes;
            *(_OWORD *)&v551.mSMPTETime.mHours = v462;
            v552.UInt32 mNumberBuffers = 512;
            AudioUnitProcessMultiple(v460, &v552.mNumberBuffers, &v551, this[121], 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x1000000000000000) != 0 && (*((unsigned char *)this + 8911) & 0x10) != 0)
        {
          int v463 = (OpaqueAudioComponentInstance *)*((void *)this + 498);
          if (v463)
          {
            AudioTimeStamp v551 = v544;
            LODWORD(v550.mSampleTime) = 512;
            AudioUnitProcess(v463, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x400000000000) != 0 && (*((unsigned char *)this + 8909) & 0x40) != 0)
        {
          uint64_t v464 = (OpaqueAudioComponentInstance *)*((void *)this + 484);
          if (v464)
          {
            AudioTimeStamp v551 = v544;
            LODWORD(v550.mSampleTime) = 512;
            AudioUnitProcess(v464, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x800000000000) != 0) {
          char v465 = v415;
        }
        else {
          char v465 = 1;
        }
        if ((v465 & 1) == 0 && (*((unsigned char *)this + 8909) & 0x80) != 0)
        {
          uint32_t v466 = (OpaqueAudioComponentInstance *)*((void *)this + 485);
          if (v466)
          {
            AudioTimeStamp v551 = v544;
            LODWORD(v550.mSampleTime) = 512;
            AudioUnitProcess(v466, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, this[121], v7, &v551);
            }
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x4000000000000) != 0 && (*((unsigned char *)this + 8910) & 4) != 0)
        {
          unint64_t v467 = (OpaqueAudioComponentInstance *)*((void *)this + 488);
          if (v467)
          {
            AudioTimeStamp v551 = v544;
            LODWORD(v550.mSampleTime) = 512;
            AudioUnitProcess(v467, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
            if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, this[121], v7, &v551);
            }
            uint64_t v397 = *((void *)this + 1112);
          }
        }
        if ((v397 & 0x8000000000000) != 0 && (*((unsigned char *)this + 8910) & 8) != 0)
        {
          int v468 = (OpaqueAudioComponentInstance *)*((void *)this + 489);
          if (v468)
          {
            unsigned int v469 = this[18];
            if (v469 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v469) & 1) != 0)
            {
              AudioTimeStamp v551 = v544;
              LODWORD(v550.mSampleTime) = 512;
              AudioUnitProcess(v468, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v7);
              if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, this[121], v7, &v551);
              }
            }
          }
        }
        if (*((unsigned char *)v9 + 3409)
          && (VoiceProcessorV2::InjectionFilesReadSignal((VoiceProcessorV2 *)this, 2, v347, v7), *((unsigned char *)v9 + 3409))
          || *((unsigned char *)v9 + 3410))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v347, v7, &v544);
        }
        uint64_t v470 = *((void *)this + 2003);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_12379);
        }
        if (v356[26]) {
          ((void (*)(uint64_t, uint64_t, void, AudioBufferList *, uint64_t, AudioTimeStamp *))v356[26])(v470, 68, 0, v7, v347, &v544);
        }
        if (this[1129] == 1 && !*((unsigned char *)v9 + 3688)) {
          VoiceProcessorV2::AppendReferenceSignal((VoiceProcessorV2 *)this, v7, &v544, 0);
        }
        if (*((unsigned char *)v9 + 3409)) {
          VoiceProcessorV2::LoopBackRead((VoiceProcessorV2 *)this, v347, v7);
        }
        goto LABEL_895;
      }
      uint64_t v408 = this[1075];
      if ((v408 - 65) > 0xFFFFFFBF)
      {
        MEMORY[0x1F4188790](DynamicsDSPChannelCount);
        int16x8_t v410 = (AudioBufferList *)((char *)&v507 - v409);
        bzero((char *)&v507 - v409, v411);
        uint64_t v412 = 0;
        v410->UInt32 mNumberBuffers = v408;
        long long v413 = v7 + 1;
        do
        {
          AudioBuffer v414 = *(AudioBuffer *)&v413->mNumberBuffers;
          long long v413 = (AudioBufferList *)((char *)v413 + 32);
          v410->mBuffers[v412++] = v414;
        }
        while (v408 != v412);
        AudioTimeStamp v551 = v544;
        LODWORD(v550.mSampleTime) = 512;
        DynamicsDSPChannelCFIndex Count = AudioUnitProcess(v407, (AudioUnitRenderActionFlags *)&v550, &v551, this[121], v410);
        if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
          DynamicsDSPChannelCFIndex Count = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, this[121], v410, &v551);
        }
        uint64_t v397 = *((void *)this + 1112);
        goto LABEL_735;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_978:
        v502 = __cxa_allocate_exception(0x10uLL);
        *(void *)v502 = &unk_1F14C8B68;
        v502[2] = -50;
      }
      LODWORD(v551.mSampleTime) = 136315394;
      *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
      WORD2(v551.mHostTime) = 1024;
      *(_DWORD *)((char *)&v551.mHostTime + 6) = 1108;
      v501 = MEMORY[0x1E4F14500];
LABEL_977:
      _os_log_impl(&dword_1BB0CE000, v501, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
      goto LABEL_978;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_966:
      uint64_t v498 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v498 = &unk_1F14C8B68;
      v498[2] = -50;
    }
    LODWORD(v551.mSampleTime) = 136315394;
    *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
    WORD2(v551.mHostTime) = 1024;
    *(_DWORD *)((char *)&v551.mHostTime + 6) = 931;
    v497 = MEMORY[0x1E4F14500];
LABEL_965:
    _os_log_impl(&dword_1BB0CE000, v497, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
    goto LABEL_966;
  }
  int v178 = 0;
  LODWORD(v533) = 0;
  int v512 = (vp::Audio_Buffer *)(this + 686);
  double v179 = (float)v514;
  uint64_t v508 = v547;
  p_mHostTime = &v550.mHostTime;
  v519 = &v166->mBuffers[0].mData;
  v520 = (uint64_t *)(v149 + 4);
  int v517 = &v167->mBuffers[0].mData;
  v518 = &v165->mBuffers[0].mData;
  v516 = &v7->mBuffers[0].mData;
  float v513 = -5000.0;
  while (1)
  {
    char v180 = *((unsigned char *)this + 300);
    int v522 = v178;
    if ((v180 & 0x20) != 0)
    {
      int v184 = this[79];
      if ((v184 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v551.mSampleTime) = 136315394;
          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v551.mHostTime) = 1024;
          *(_DWORD *)((char *)&v551.mHostTime + 6) = 491;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
        }
        v493 = __cxa_allocate_exception(0x10uLL);
        *(void *)v493 = &unk_1F14C8B68;
        v493[2] = -50;
      }
      MEMORY[0x1F4188790](v160);
      UInt32 v183 = (int *)((char *)&v507 - v185);
      bzero((char *)&v507 - v185, v186);
      vDSP_Length v182 = v530;
    }
    else
    {
      MEMORY[0x1F4188790](v160);
      UInt32 v183 = (int *)&v505;
      uint64_t v505 = 0;
      long long v506 = 0uLL;
      int v184 = 1;
    }
    *UInt32 v183 = v184;
    if (v182)
    {
      int v187 = v182->mNumberBuffers;
      if (v182->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v551.mSampleTime) = 136315394;
          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v551.mHostTime) = 1024;
          *(_DWORD *)((char *)&v551.mHostTime + 6) = 493;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
        }
        v486 = __cxa_allocate_exception(0x10uLL);
        *(void *)v486 = &unk_1F14C8B68;
        v486[2] = -50;
      }
    }
    else
    {
      int v187 = 1;
    }
    MEMORY[0x1F4188790](v181);
    unsigned __int8 v189 = (int *)((char *)&v507 - v188);
    bzero((char *)&v507 - v188, v190);
    v528 = v189;
    *unsigned __int8 v189 = v187;
    if (v531)
    {
      UInt32 v192 = v531->mNumberBuffers;
      if (v531->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v551.mSampleTime) = 136315394;
          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v551.mHostTime) = 1024;
          *(_DWORD *)((char *)&v551.mHostTime + 6) = 495;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
        }
        uint64_t v488 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v488 = &unk_1F14C8B68;
        v488[2] = -50;
      }
    }
    else
    {
      UInt32 v192 = 1;
    }
    MEMORY[0x1F4188790](v191);
    uint64_t v194 = (UInt32 *)((char *)&v507 - v193);
    bzero((char *)&v507 - v193, v195);
    char v527 = v194;
    *uint64_t v194 = v192;
    if (v534)
    {
      UInt32 v197 = v534->mNumberBuffers;
      if (v534->mNumberBuffers - 65 <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v551.mSampleTime) = 136315394;
          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v551.mHostTime) = 1024;
          *(_DWORD *)((char *)&v551.mHostTime + 6) = 497;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
        }
        v490 = __cxa_allocate_exception(0x10uLL);
        *(void *)v490 = &unk_1F14C8B68;
        v490[2] = -50;
      }
    }
    else
    {
      UInt32 v197 = 1;
    }
    MEMORY[0x1F4188790](v196);
    unint64_t v199 = (UInt32 *)((char *)&v507 - v198);
    bzero((char *)&v507 - v198, v200);
    *unint64_t v199 = v197;
    int v202 = *((unsigned __int8 *)this + 2244);
    uint64_t v203 = *((void *)this + 203);
    int v532 = (unsigned int *)v183;
    if (v202)
    {
      if (!v203) {
        goto LABEL_376;
      }
      if (!*(_DWORD *)v203) {
        goto LABEL_374;
      }
      unint64_t v204 = 0;
      unsigned int v205 = (void **)(v203 + 16);
      do
      {
        bzero(*v205, *((unsigned int *)v205 - 1));
        ++v204;
        v205 += 2;
      }
      while (v204 < *(unsigned int *)v203);
      uint64_t v203 = *((void *)this + 203);
    }
    if (v203)
    {
LABEL_374:
      unsigned int v206 = *(_DWORD *)v203;
      if ((*(_DWORD *)v203 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v551.mSampleTime) = 136315394;
          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
          WORD2(v551.mHostTime) = 1024;
          *(_DWORD *)((char *)&v551.mHostTime + 6) = 503;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
        }
        uint64_t v492 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v492 = &unk_1F14C8B68;
        v492[2] = -50;
      }
      goto LABEL_377;
    }
LABEL_376:
    unsigned int v206 = 1;
LABEL_377:
    MEMORY[0x1F4188790](v201);
    uint64_t v208 = (UInt32 *)((char *)&v507 - v207);
    bzero((char *)&v507 - v207, v209);
    *uint64_t v208 = v206;
    uint64_t v211 = v7->mNumberBuffers;
    if ((v211 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v551.mSampleTime) = 136315394;
        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v551.mHostTime) = 1024;
        *(_DWORD *)((char *)&v551.mHostTime + 6) = 505;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
      }
      unint64_t v483 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v483 = &unk_1F14C8B68;
      v483[2] = -50;
    }
    MEMORY[0x1F4188790](v210);
    uint64_t v11 = (UInt32 *)((char *)&v507 - v212);
    bzero((char *)&v507 - v212, v213);
    UInt32 *v11 = v211;
    uint64_t v214 = *v532;
    if (v214)
    {
      int v215 = 4 * this[129];
      uint64_t v216 = v533;
      vDSP_Length v217 = v532 + 4;
      uint64_t v218 = v520;
      do
      {
        *((_DWORD *)v217 - 2) = 1;
        *((_DWORD *)v217 - 1) = v215;
        uint64_t v219 = *v218;
        v218 += 2;
        *vDSP_Length v217 = v219 + 4 * v216;
        v217 += 2;
        --v214;
      }
      while (v214);
    }
    uint64_t v220 = *v528;
    float v222 = v530;
    CFArrayRef v221 = v531;
    float v223 = v534;
    if (v220)
    {
      int v224 = 4 * this[129];
      uint64_t v225 = v533;
      unint64_t v226 = (uint64_t *)(v528 + 4);
      uint64_t v227 = v519;
      do
      {
        *((_DWORD *)v226 - 2) = 1;
        *((_DWORD *)v226 - 1) = v224;
        if (v222) {
          uint64_t v228 = (uint64_t)*v227 + 4 * v225;
        }
        else {
          uint64_t v228 = 0;
        }
        *unint64_t v226 = v228;
        v226 += 2;
        v227 += 2;
        --v220;
      }
      while (v220);
    }
    uint64_t v229 = *v527;
    if (v229)
    {
      int v230 = 4 * this[129];
      uint64_t v231 = v533;
      char v232 = (uint64_t *)(v527 + 4);
      uint64_t v233 = v518;
      do
      {
        *((_DWORD *)v232 - 2) = 1;
        *((_DWORD *)v232 - 1) = v230;
        if (v221) {
          uint64_t v234 = (uint64_t)*v233 + 4 * v231;
        }
        else {
          uint64_t v234 = 0;
        }
        *char v232 = v234;
        v232 += 2;
        v233 += 2;
        --v229;
      }
      while (v229);
    }
    uint64_t v235 = *v199;
    if (v235)
    {
      int v236 = 4 * this[129];
      uint64_t v237 = v533;
      CFIndex v238 = (uint64_t *)(v199 + 4);
      unsigned int v239 = v517;
      do
      {
        *((_DWORD *)v238 - 2) = 1;
        *((_DWORD *)v238 - 1) = v236;
        if (v223) {
          uint64_t v240 = (uint64_t)*v239 + 4 * v237;
        }
        else {
          uint64_t v240 = 0;
        }
        *CFIndex v238 = v240;
        v238 += 2;
        v239 += 2;
        --v235;
      }
      while (v235);
    }
    if (v211)
    {
      int v241 = 4 * this[129];
      uint64_t v242 = v533;
      unsigned int v243 = (uint64_t *)(v11 + 4);
      uint64_t v244 = v516;
      do
      {
        *((_DWORD *)v243 - 2) = 1;
        *((_DWORD *)v243 - 1) = v241;
        if (v7) {
          uint64_t v245 = (uint64_t)*v244 + 4 * v242;
        }
        else {
          uint64_t v245 = 0;
        }
        *unsigned int v243 = v245;
        v243 += 2;
        v244 += 2;
        --v211;
      }
      while (v211);
    }
    if (v206)
    {
      int v246 = 4 * this[129];
      uint64_t v247 = v533;
      uint64_t v248 = v206;
      uint64_t v249 = (uint64_t *)(v208 + 4);
      vDSP_Length v250 = (void *)(v203 + 16);
      do
      {
        *((_DWORD *)v249 - 2) = 1;
        *((_DWORD *)v249 - 1) = v246;
        if (v203) {
          uint64_t v251 = *v250 + 4 * v247;
        }
        else {
          uint64_t v251 = 0;
        }
        *uint64_t v249 = v251;
        v249 += 2;
        v250 += 2;
        --v248;
      }
      while (v248);
    }
    if (v223 && *((unsigned char *)this + 2244))
    {
      CopyAllBuffersABL(v208, v534);
      float v222 = v530;
    }
    if (v222) {
      Float64 v252 = (AudioBufferList *)v528;
    }
    else {
      Float64 v252 = 0;
    }
    MonoABL = GetMonoABL(v252, &v553, this[129]);
    if (v531) {
      uint64_t v253 = (AudioBufferList *)v527;
    }
    else {
      uint64_t v253 = 0;
    }
    int v523 = GetMonoABL(v253, &v552, this[129]);
    if (v534) {
      unsigned int v254 = (AudioBufferList *)v199;
    }
    else {
      unsigned int v254 = 0;
    }
    int v525 = GetMonoABL(v254, &v538, this[129]);
    unint64_t v12 = (unint64_t)&v551;
    if ((*(unsigned int (**)(atomic_uint *))(*(void *)this + 112))(this) >= 7)
    {
      uint64_t v255 = 0;
      *(void *)&v551.Float64 mSampleTime = 10;
      v551.mHostTime = (UInt64)v532;
      *(void *)&v551.mRateScalar = 11;
      v551.mWordClockTime = (UInt64)v525;
      *(void *)&v551.mSMPTETime.mSubframes = 12;
      *(void *)&v551.mSMPTETime.mType = MonoABL;
      *(void *)&v551.mSMPTETime.mHours = 13;
      *(void *)&v551.mFlags = v523;
      do
      {
        char v256 = (unsigned int *)&v551 + 4 * v255;
        uint64_t v257 = *v256;
        unsigned int v258 = (AudioBufferList *)*((void *)v256 + 1);
        if (!v258)
        {
          unsigned int v258 = (AudioBufferList *)*((void *)this + 202);
          if (v258->mNumberBuffers)
          {
            unint64_t v259 = 0;
            uint64_t v203 = (uint64_t)&v258->mBuffers[0].mData;
            do
            {
              bzero(*(void **)v203, *(unsigned int *)(v203 - 4));
              ++v259;
              v203 += 16;
            }
            while (v259 < v258->mNumberBuffers);
            unsigned int v258 = (AudioBufferList *)*((void *)this + 202);
            unint64_t v12 = (unint64_t)&v551;
          }
        }
        BOOL v260 = VoiceProcessorV2::VPUseAUInProcess((VoiceProcessorV2 *)this, v257, 0);
        if (v258) {
          BOOL v261 = v260;
        }
        else {
          BOOL v261 = 0;
        }
        if (v261)
        {
          AudioTimeStamp v550 = v554;
          LODWORD(v546) = 512;
          AudioUnitProcess(*(AudioUnit *)&this[2 * v257 + 876], (AudioUnitRenderActionFlags *)&v546, &v550, this[129], v258);
        }
        ++v255;
      }
      while (v255 != 4);
    }
    uint64_t v262 = *((void *)this + 1112);
    if ((v262 & 0x40000000) == 0) {
      goto LABEL_438;
    }
    uint64_t v263 = *((void *)this + 1113);
    if ((v263 & 0x40000000) == 0) {
      goto LABEL_438;
    }
    unsigned int v264 = 0;
    if (!*((void *)this + 468) || (v262 & v263 & 0x80000000) == 0) {
      goto LABEL_439;
    }
    if (*((void *)this + 469) && (uint64_t v203 = (uint64_t)v512, vp::Audio_Buffer::get_audio_buffer_list(v512)))
    {
      vp::Audio_Buffer::prepare((uint64_t *)v203, this[129]);
      audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v203);
      if (*audio_buffer_list)
      {
        uint64_t v289 = audio_buffer_list;
        unint64_t v290 = 0;
        int v291 = (void **)(audio_buffer_list + 4);
        do
        {
          bzero(*v291, *((unsigned int *)v291 - 1));
          ++v290;
          v291 += 2;
        }
        while (v290 < *v289);
      }
      unsigned int v264 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v203);
      uint64_t v203 = 512;
      LODWORD(v550.mSampleTime) = 512;
      unint64_t v12 = (unint64_t)&v545;
      AudioTimeStamp v551 = v554;
      AudioUnitSetParameter(*((AudioUnit *)this + 468), 1u, 0, 0, (float)(*((float *)this + 3132) + -1.0) * 24.0, 0);
      AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v264);
      UInt32 v292 = this[129];
      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, this[129], v264, &v554);
        UInt32 v292 = this[129];
      }
      AudioTimeStamp v551 = v554;
      LODWORD(v550.mSampleTime) = 512;
      AudioUnitProcess(*((AudioUnit *)this + 469), (AudioUnitRenderActionFlags *)&v550, &v551, v292, v264);
      if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, this[129], v264, &v551);
        if (*((unsigned char *)v526 + 3409) || *((unsigned char *)v526 + 3410)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, this[129], v264, &v551);
        }
      }
    }
    else
    {
LABEL_438:
      unsigned int v264 = 0;
    }
LABEL_439:
    if (*((unsigned char *)this + 2244)) {
      unsigned int v7 = (AudioBufferList *)v11;
    }
    else {
      unsigned int v7 = (AudioBufferList *)v532;
    }
    if (*((unsigned char *)this + 2244)) {
      uint64_t v265 = (AudioBufferList *)v208;
    }
    else {
      uint64_t v265 = v525;
    }
    if (v265) {
      float v266 = v265;
    }
    else {
      float v266 = v264;
    }
    uint64_t v529 = (AudioBufferList *)v266;
    uint64_t v267 = *((void *)this + 1112);
    if ((v267 & 0x8000000) != 0 && ((*((unsigned char *)this + 8907) & 8) != 0 || *((unsigned char *)this + 472)) && v265)
    {
      float v268 = VoiceProcessorV2::CalculateDownlinkMixGainDB((VoiceProcessorV2 *)this);
      *((float *)this + 1115) = v268;
      LODWORD(v548) = 0;
      LODWORD(v548) = __exp10f(v268 / 20.0);
      unint64_t v12 = (unint64_t)&v545;
      uint64_t v546 = (uint64_t)v265;
      *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v546);
      v551.mHostTime = v269;
      *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v546);
      v550.mHostTime = v270;
      while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
      {
        CFIndex v271 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
        float v272 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
        vDSP_vsmul(v271, 1, (const float *)&v548, v272, 1, this[129]);
        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
      }
      uint64_t v267 = *((void *)this + 1112);
    }
    if ((v267 & 0x10000000) != 0 && (*((unsigned char *)this + 8907) & 0x10) != 0)
    {
      (*(void (**)(atomic_uint *, unsigned int *, UInt32 *))(*(void *)this + 680))(this, v532, v208);
      uint64_t v267 = *((void *)this + 1112);
    }
    if ((v267 & 0x8000) != 0
      && (uint64_t v273 = *((void *)this + 1113), (v273 & 0x8000) != 0)
      && (BOOL v274 = (OpaqueAudioComponentInstance *)*((void *)this + 453)) != 0)
    {
      int v275 = *((unsigned __int8 *)this + 2244);
      AudioTimeStamp v551 = v554;
      LODWORD(v548) = 512;
      UInt64 v276 = (UInt64)v528;
      if (v530 == 0 || v275 == 0) {
        UInt64 v276 = (UInt64)MonoABL;
      }
      *(void *)&v550.Float64 mSampleTime = v532;
      v550.mHostTime = v276;
      Float64 v277 = *(double *)&v527;
      if (v531 == 0 || v275 == 0) {
        Float64 v277 = *(double *)&v523;
      }
      UInt64 v278 = (UInt64)v525;
      if (v534 != 0 && v275 != 0) {
        UInt64 v278 = (UInt64)v208;
      }
      v550.mRateScalar = v277;
      v550.mWordClockTime = v278;
      *(void *)&v550.mSMPTETime.mSubframes = v264;
      if ((v267 & v273 & 2) != 0)
      {
        uint64_t v293 = (OpaqueAudioComponentInstance *)*((void *)this + 439);
        uint64_t v9 = v526;
        unint64_t v12 = (unint64_t)v529;
        if (v293 && (v275 || *((unsigned char *)v526 + 4072)))
        {
          LODWORD(v546) = 0;
          OSStatus v294 = AudioUnitGetParameter(v293, 0x73707062u, 0, 0, (AudioUnitParameterValue *)&v546);
          BOOL v296 = *(float *)&v546 == 1.0 && v294 == 0;
          LODWORD(v536) = v296;
          AudioUnitSetProperty(*((AudioUnit *)this + 453), 0x6164756Bu, 0, 0, &v536, 4u);
          BOOL v274 = (OpaqueAudioComponentInstance *)*((void *)this + 453);
        }
      }
      else
      {
        uint64_t v9 = v526;
        unint64_t v12 = (unint64_t)v529;
      }
      uint64_t v546 = (uint64_t)v7;
      v547[0] = v12;
      AudioUnitProcessMultiple(v274, (AudioUnitRenderActionFlags *)&v548, &v551, this[129], 5u, (const AudioBufferList **)&v550, 2u, (AudioBufferList **)&v546);
      if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, this[129], v7, &v551);
        if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, this[129], (const AudioBufferList *)v12, &v551);
        }
      }
    }
    else
    {
      uint64_t v9 = v526;
      if (MonoABL)
      {
        LODWORD(v536) = 1055175620;
        unint64_t v12 = (unint64_t)&v545;
        *(void *)&v551.Float64 mSampleTime = MonoABL;
        uint64_t v546 = vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
        Float64 v548 = *(double *)&v7;
        *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v548);
        v551.mHostTime = v279;
        *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v548);
        v550.mHostTime = v280;
        while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
        {
          unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v546);
          uint64_t v203 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          double v281 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          vDSP_vsma((const float *)v12, 1, (const float *)&v536, (const float *)v203, 1, v281, 1, this[129]);
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
        }
      }
      if (v523)
      {
        unint64_t v12 = (unint64_t)&v545;
        *(void *)&v551.Float64 mSampleTime = v523;
        uint64_t v546 = vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
        Float64 v548 = *(double *)&v7;
        *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v548);
        v551.mHostTime = v282;
        *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v548);
        v550.mHostTime = v283;
        while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
        {
          unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v546);
          uint64_t v203 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          uint64_t v284 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          vDSP_vadd((const float *)v12, 1, (const float *)v203, 1, v284, 1, this[129]);
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
        }
      }
      if (v264 && v264 != v529)
      {
        unint64_t v12 = (unint64_t)&v545;
        *(void *)&v551.Float64 mSampleTime = v264;
        uint64_t v546 = vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
        vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v551, v529);
        Float64 v548 = v551.mSampleTime;
        *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v548);
        v551.mHostTime = v285;
        *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v548);
        v550.mHostTime = v286;
        while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
        {
          unint64_t v12 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v546);
          uint64_t v203 = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          int v287 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
          vDSP_vadd((const float *)v12, 1, (const float *)v203, 1, v287, 1, this[129]);
          vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
        }
      }
    }
    uint64_t v297 = *((void *)this + 1112);
    if ((v297 & 0x8000) == 0) {
      goto LABEL_514;
    }
    uint64_t v298 = (uint64_t *)v529;
    if ((*((unsigned char *)this + 8905) & 0x80) != 0 && *((void *)this + 453) && *((unsigned char *)this + 2244))
    {
      (*(void (**)(atomic_uint *, AudioBufferList *, AudioTimeStamp *))(*(void *)this + 656))(this, v7, &v554);
      uint64_t v297 = *((void *)this + 1112);
      uint64_t v9 = v526;
LABEL_514:
      uint64_t v298 = (uint64_t *)v529;
    }
    if ((v297 & 0x800000) != 0 && (*((unsigned char *)this + 8906) & 0x80) != 0)
    {
      unsigned __int8 v299 = (OpaqueAudioComponentInstance *)*((void *)this + 461);
      if (v299)
      {
        AudioTimeStamp v551 = v554;
        LODWORD(v550.mSampleTime) = 512;
        AudioUnitProcess(v299, (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v7);
        if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, this[129], v7, &v551);
        }
        uint64_t v297 = *((void *)this + 1112);
      }
    }
    if (v297 & 0x1000000) != 0 && (*((unsigned char *)this + 8907))
    {
      float v300 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
      if (v300)
      {
        int v301 = this[576];
        if (v301 != this[578])
        {
          AudioUnitSetParameter(v300, 1u, 0, 0, (float)v301, 0);
          float v300 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
        }
        AudioTimeStamp v551 = v554;
        LODWORD(v550.mSampleTime) = 512;
        AudioUnitProcess(v300, (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v7);
        uint64_t v297 = *((void *)this + 1112);
      }
    }
    if ((v297 & 0x2000000) != 0 && (*((unsigned char *)this + 8907) & 2) != 0)
    {
      float32x2_t v302 = (OpaqueAudioComponentInstance *)*((void *)this + 463);
      if (v302)
      {
        AudioTimeStamp v551 = v554;
        LODWORD(v550.mSampleTime) = 512;
        AudioUnitProcess(v302, (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v7);
        goto LABEL_569;
      }
    }
    if ((v297 & 0x4000000) != 0 && (*((unsigned char *)this + 8907) & 4) != 0)
    {
      long long v303 = (OpaqueAudioComponentInstance *)*((void *)this + 464);
      if (v303)
      {
        unsigned int v304 = (AudioBufferList *)*((void *)this + 198);
        if (v304->mNumberBuffers)
        {
          unint64_t v12 = 0;
          uint64_t v203 = (this[79] - 1);
          uint64_t v305 = 16;
          do
          {
            if (v203 >= v12) {
              int v306 = v12;
            }
            else {
              int v306 = v203;
            }
            memcpy(*(void **)((char *)&v304->mNumberBuffers + v305), v7->mBuffers[v306].mData, 4 * this[129]);
            ++v12;
            unsigned int v304 = (AudioBufferList *)*((void *)this + 198);
            v305 += 16;
          }
          while (v12 < v304->mNumberBuffers);
          long long v303 = (OpaqueAudioComponentInstance *)*((void *)this + 464);
        }
        AudioTimeStamp v551 = v554;
        LODWORD(v550.mSampleTime) = 512;
        AudioUnitProcess(v303, (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v304);
        unsigned int v7 = (AudioBufferList *)*((void *)this + 198);
        goto LABEL_568;
      }
    }
    if ((v297 & 0x200000) != 0 && (*((unsigned char *)this + 8906) & 0x20) != 0 && *((void *)this + 459)) {
      break;
    }
    LODWORD(v548) = 0;
    float v315 = 1.0;
    if (!*((unsigned char *)this + 2244)) {
      float v315 = *((float *)this + 3135);
    }
    LODWORD(v548) = __exp10f((float)((float)(v315 * 32.0) + -32.0) / 20.0);
    uint64_t v546 = (uint64_t)v7;
    *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v546);
    v551.mHostTime = v316;
    *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v546);
    v550.mHostTime = v317;
    uint64_t v9 = v526;
    uint64_t v298 = (uint64_t *)v529;
    while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
    {
      uint64_t v318 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
      uint64_t v319 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
      vDSP_vsmul(v318, 1, (const float *)&v548, v319, 1, this[129]);
      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
    }
    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, this[129], v7, &v554);
    }
LABEL_569:
    if (!v298
      || (*((unsigned char *)this + 8899) & 0x20) == 0
      || (*((unsigned char *)this + 8907) & 0x20) == 0 && !*((unsigned char *)this + 472))
    {
      if (*((unsigned char *)v9 + 3409))
      {
        float v320 = (int *)*((void *)this + 1579);
        if (v320)
        {
          if (v7->mNumberBuffers != *v11)
          {
            if (VPTimestampLogScope(void)::once != -1) {
              dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
            }
            CALegacyLog::log(v320, 3, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 871, "ProcessDownlinkAudio", "**** compressedVoiceABL->mNumberBuffers != theOutputData.mNumberBuffers in process %d != %d ****", v7->mNumberBuffers, *v11);
          }
        }
      }
      UInt32 v321 = *v11;
      if (*v11 >= v7->mNumberBuffers) {
        UInt32 v321 = v7->mNumberBuffers;
      }
      if (v321)
      {
        unint64_t v322 = 0;
        unint64_t v323 = 0;
        do
        {
          UInt32 v324 = v7->mBuffers[v322 / 0x10].mDataByteSize;
          UInt32 v325 = v11[v322 / 4 + 3];
          if (v324 >= v325) {
            size_t v326 = v325;
          }
          else {
            size_t v326 = v324;
          }
          memcpy(*(void **)&v11[v322 / 4 + 4], v7->mBuffers[v322 / 0x10].mData, v326);
          ++v323;
          LODWORD(v327) = *v11;
          if (*v11 >= v7->mNumberBuffers) {
            unint64_t v327 = v7->mNumberBuffers;
          }
          else {
            unint64_t v327 = v327;
          }
          v322 += 16;
        }
        while (v323 < v327);
      }
      goto LABEL_599;
    }
    if (*((unsigned char *)this + 2244))
    {
      int v328 = this[89];
      UInt32 v329 = v7->mNumberBuffers;
LABEL_593:
      if (v329)
      {
        unint64_t v330 = 0;
        unsigned int v331 = v328 - 1;
        uint64_t v332 = 4;
        do
        {
          if (v331 >= v330) {
            unsigned int v333 = v330;
          }
          else {
            unsigned int v333 = v331;
          }
          vDSP_vadd(*(const float **)((char *)&v7->mNumberBuffers + v332 * 4), 1, (const float *)v298[2 * v333 + 2], 1, *(float **)&v11[v332], 1, this[129]);
          ++v330;
          v332 += 4;
        }
        while (v330 < v7->mNumberBuffers);
      }
      goto LABEL_599;
    }
    UInt32 v329 = v7->mNumberBuffers;
    int v328 = 1;
    int v340 = v7->mNumberBuffers - 1;
    if (v7->mNumberBuffers == 1) {
      goto LABEL_593;
    }
    while ((v340 & 0x80000000) == 0)
    {
      mData = (const float *)v7->mBuffers[v340].mData;
      uint64_t v342 = (const float *)v298[2 * (v340 & (v340 >> 31)) + 2];
      uint64_t v343 = *(float **)&v11[4 * v340-- + 4];
      vDSP_vadd(mData, 1, v342, 1, v343, 1, this[129]);
    }
LABEL_599:
    uint64_t v334 = VoiceProcessorV2::GetDynamicsDSPChannelCount((VoiceProcessorV2 *)this);
    if ((v334 - 65) <= 0xFFFFFFBF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v551.mSampleTime) = 136315394;
        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v4.cpp";
        WORD2(v551.mHostTime) = 1024;
        *(_DWORD *)((char *)&v551.mHostTime + 6) = 892;
        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
      }
      uint64_t v484 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v484 = &unk_1F14C8B68;
      v484[2] = -50;
    }
    UInt32 v335 = v334;
    MEMORY[0x1F4188790](v334);
    unsigned int v337 = (AudioBufferList *)((char *)&v507 - v336);
    bzero((char *)&v507 - v336, v338);
    v337->UInt32 mNumberBuffers = v335;
    uint64_t v160 = (uint64_t)memcpy(v337->mBuffers, v11 + 2, 16 * v335);
    unsigned int v7 = v521;
    if (*((unsigned char *)v9 + 3409) || *((unsigned char *)v9 + 3410)) {
      uint64_t v160 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, this[129], v337, &v554);
    }
    if (this[2225] & 1) != 0 && (this[2227])
    {
      uint64_t v160 = *((void *)this + 470);
      if (v160)
      {
        AudioTimeStamp v551 = v554;
        LODWORD(v550.mSampleTime) = 512;
        uint64_t v160 = AudioUnitProcess((AudioUnit)v160, (AudioUnitRenderActionFlags *)&v550, &v551, this[129], v337);
      }
    }
    unsigned int v339 = this[129];
    v554.Float64 mSampleTime = v554.mSampleTime + (double)v339;
    LODWORD(v533) = v339 + v533;
    int v178 = v522 + 1;
    if (v522 + 1 >= this[130]) {
      goto LABEL_612;
    }
  }
  atomic_uint v537 = 0;
  uint64_t v536 = 0;
  float v307 = *((float *)this + 3133);
  float v308 = *((float *)this + 3134);
  if (*((unsigned char *)v9 + 3409))
  {
    atomic_uint v309 = this[3135];
    LODWORD(v536) = this[3133];
    *((float *)&v536 + 1) = v308;
    atomic_uint v537 = v309;
    VoiceProcessorV2::WriteControlDataToFile((uint64_t)this, (char *)&v536, 0xCu, 0x34u);
  }
  double v310 = *(double *)v515;
  float v311 = (float)(v308 - v307) / (v179 / *(double *)v515);
  float v312 = 2000.0;
  if (v311 <= 2000.0)
  {
    float v312 = v311;
    if (v311 < v513) {
      float v312 = v513;
    }
  }
  unint64_t v12 = this[129];
  AudioUnitSetParameter(*((AudioUnit *)this + 459), 5u, 0, 0, 0.0, 0);
  float v313 = (float)v12 / v310 * v312;
  *((float *)this + 3133) = v307 + (float)((float)v12 * (float)(v313 / (float)v12));
  if ((*((unsigned char *)this + 8898) & 0x40) != 0 && (*((unsigned char *)this + 8906) & 0x40) != 0 && *((void *)this + 460))
  {
    unint64_t v12 = (unint64_t)&v545;
    AudioTimeStamp v551 = v554;
    AudioUnitRenderActionFlags v535 = 512;
    uint64_t v549 = v298;
    *(void *)&v550.Float64 mSampleTime = 1;
    uint64_t v203 = (uint64_t)v508;
    float v314 = p_mHostTime;
    *(AudioBuffer *)p_mHostTime = v7->mBuffers[0];
    v547[1] = 0;
    Float64 v548 = COERCE_DOUBLE(&v550);
    uint64_t v546 = 1;
    v547[0] = 0;
    *(_OWORD *)uint64_t v203 = *(_OWORD *)(*((void *)this + 198) + 8);
    uint64_t v545 = (AudioBufferList *)&v546;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 459), &v535, &v551, this[129], 2u, (const AudioBufferList **)&v548, 1u, &v545);
    AudioTimeStamp v551 = v554;
    AudioUnitRenderActionFlags v535 = 512;
    uint64_t v549 = v298;
    *(void *)&v550.Float64 mSampleTime = 1;
    *(AudioBuffer *)float v314 = v7->mBuffers[this[79] - 1];
    Float64 v548 = COERCE_DOUBLE(&v550);
    *(_OWORD *)uint64_t v203 = *(_OWORD *)(*((void *)this + 198) + 24);
    uint64_t v545 = (AudioBufferList *)&v546;
    uint64_t v546 = 1;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 460), &v535, &v551, this[129], 2u, (const AudioBufferList **)&v548, 1u, &v545);
    unsigned int v7 = (AudioBufferList *)*((void *)this + 198);
    uint64_t v298 = (uint64_t *)v529;
  }
  else
  {
    AudioTimeStamp v551 = v554;
    LODWORD(v548) = 512;
    *(void *)&v550.Float64 mSampleTime = v7;
    v550.mHostTime = (UInt64)v298;
    uint64_t v546 = (uint64_t)v7;
    AudioUnitProcessMultiple(*((AudioUnit *)this + 459), (AudioUnitRenderActionFlags *)&v548, &v551, this[129], 2u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v546);
  }
LABEL_568:
  if (v7) {
    goto LABEL_569;
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_927:
  dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
LABEL_902:
  CALegacyLog::log((int *)v203, 5, v9[84], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1389, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v179);
  unsigned int v473 = this[121];
  double v474 = *((double *)this + 41);
LABEL_903:
  if (v13 - *((double *)this + 1994) > (double)(this[294] + v473) / v474)
  {
    unint64_t v475 = (int *)*((void *)this + 1579);
    if (v298[83] != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    CALegacyLog::log(v475, 5, v9[84], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessDownlink_v4.cpp", 1391, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v13 - *((double *)this + 1994));
  }
  *((double *)this + 1994) = v13;
LABEL_908:
  if (v11)
  {
    if (this[19] != 1)
    {
      if (*((unsigned char *)this + 1648)
        || (uint64_t v476 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), v7, this[410], this[411]),
            *((unsigned char *)this + 1648) = v476,
            this[410] = HIDWORD(v476),
            (_BYTE)v476))
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), v7);
      }
    }
  }
  else
  {
    if (this[20] == 1)
    {
      if (!v7->mNumberBuffers) {
        goto LABEL_925;
      }
      unint64_t v477 = 0;
      int v478 = &v7->mBuffers[0].mData;
      do
      {
        bzero(*v478, *((unsigned int *)v478 - 1));
        ++v477;
        v478 += 2;
      }
      while (v477 < v7->mNumberBuffers);
    }
    else
    {
      this[410] = 0;
      *((unsigned char *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), v7);
    }
    atomic_uint v479 = this[20];
    if (v479 == 2 || v479 == 4) {
      unint64_t v12 = 0;
    }
  }
LABEL_925:
  atomic_fetch_add(this + 621, 0xFFFFFFFF);
  return v12;
}

void sub_1BB55C3F8(_Unwind_Exception *a1)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v1 + 288));
  atomic_fetch_add((atomic_uint *volatile)(v2 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>(caulk::concurrent::details::lf_read_sync_write_impl *a1, void (***a2)(uint64_t, void, void))
{
  uint64_t v4 = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((unsigned char *)a1 + v4 + 8))
  {
    unint64_t v5 = (char *)a1 + 32 * v4;
    if (v5[40]) {
      (**a2)((uint64_t)(*a2 + 1), *((void *)v5 + 2), *((void *)v5 + 3) - *((void *)v5 + 2));
    }
    uint64_t v4 = (uint64_t)a1;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4177B90](v4);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV4::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(void **)a1 + 3504), 0x73706D64u, 0, 0, inData, inDataSize);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_12445()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

BOOL AUMixSwitchNF::ValidFormat(AUMixSwitchNF *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  return a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105 && a4->mChannelsPerFrame == 1;
}

uint64_t AUMixSwitchNF::SupportedNumChannels(AUMixSwitchNF *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMixSwitchNF::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUMixSwitchNF::StreamFormatWritable(AUMixSwitchNF *this, int a2, unsigned int a3)
{
  BOOL v3 = a3 == 0;
  BOOL v4 = a3 < 2;
  if (a2 != 1) {
    BOOL v4 = 0;
  }
  if (a2 != 2) {
    BOOL v3 = v4;
  }
  return !*((unsigned char *)this + 17) && v3;
}

uint64_t AUMixSwitchNF::SupportsTail(AUMixSwitchNF *this)
{
  return 1;
}

double AUMixSwitchNF::GetTailTime(AUMixSwitchNF *this)
{
  return 0.0;
}

uint64_t AUMixSwitchNF::GetParameterValueStrings(AUMixSwitchNF *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3) {
    return 4294956418;
  }
  CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"Mic 1", 5, 0x8000100u, 0);
  if (!v15)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"Mic 4", 5, 0x8000100u, 0))
  {
    unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"Omni", 4, 0x8000100u, 0))
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"+X beam", 7, 0x8000100u, 0))
  {
    unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
  }
  if (!CFStringCreateWithBytes(0, (const UInt8 *)"-X beam", 7, 0x8000100u, 0))
  {
    double v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  v14[0] = &v15;
  v14[1] = 5;
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::StringRef>((uint64_t)v14);
  for (uint64_t i = 32; i != -8; i -= 8)
  {
    uint64_t v8 = *(CFStringRef *)((char *)&v15 + i);
    if (v8) {
      CFRelease(v8);
    }
  }
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

void sub_1BB55CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v15);
  while (v15 != &a11);
  _Unwind_Resume(a1);
}

uint64_t AUMixSwitchNF::GetParameterInfo(AUMixSwitchNF *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  if (a2 == 2)
  {
    buffer->unitName = 0;
    buffer->std::regex_constants::match_flag_type flags = 0x2000;
    int v5 = 1073774592;
    AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Ratio;
    CFStringRef v8 = @"EC delta EIR";
    int v9 = 1148846080;
    AudioUnitParameterValue v6 = 1000.0;
    switch(a3)
    {
      case 0:
        goto LABEL_15;
      case 1:
LABEL_8:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Milliseconds;
        CFStringRef v8 = @"EC main lobe delay";
        int v9 = 1137180672;
        break;
      case 2:
LABEL_11:
        AudioUnitParameterValue v6 = 1.0;
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Boolean;
        CFStringRef v8 = @"EC adaptation state";
        goto LABEL_15;
      case 3:
LABEL_12:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Generic;
        CFStringRef v8 = @"EC time aligned ref signal energy";
        break;
      case 4:
LABEL_14:
        AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Generic;
        AudioUnitParameterValue v6 = 1.0;
        CFStringRef v8 = @"EC mic LEE signal cross-correlation";
        goto LABEL_15;
      default:
        return 4294956418;
    }
    AudioUnitParameterValue v6 = *(float *)&v9;
  }
  else
  {
    if (a2 == 1)
    {
      buffer->unitName = 0;
      buffer->std::regex_constants::match_flag_type flags = 0x2000;
      int v5 = 1073774592;
      AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Ratio;
      CFStringRef v8 = @"EC delta EIR";
      int v9 = 1148846080;
      AudioUnitParameterValue v6 = 1000.0;
      switch(a3)
      {
        case 0:
          goto LABEL_15;
        case 1:
          goto LABEL_8;
        case 2:
          goto LABEL_11;
        case 3:
          goto LABEL_12;
        case 4:
          goto LABEL_14;
        default:
          return 4294956418;
      }
    }
    if (a2) {
      return 4294956430;
    }
    buffer->unitName = 0;
    buffer->std::regex_constants::match_flag_type flags = 0x2000;
    if (a3) {
      return 4294956418;
    }
    int v5 = -1073741824;
    AudioUnitParameterValue v6 = 4.0;
    AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Indexed;
    CFStringRef v8 = @"Beam";
  }
LABEL_15:
  buffer->cfNameString = v8;
  buffer->std::regex_constants::match_flag_type flags = 134225920;
  CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v7;
  buffer->minCFDictionaryRef Value = 0.0;
  buffer->maxCFDictionaryRef Value = v6;
  AudioUnitParameterOptions v11 = buffer->flags | v5;
  buffer->defaultCFDictionaryRef Value = 0.0;
  buffer->std::regex_constants::match_flag_type flags = v11;
  return result;
}

uint64_t AUMixSwitchNF::GetParameterList(AUMixSwitchNF *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 2 || a2 == 1)
  {
    *a4 = 5;
    if (a3)
    {
      uint64_t result = 0;
      *(_OWORD *)a3 = xmmword_1BB8727D0;
      a3[4] = 4;
      return result;
    }
    return 0;
  }
  if (!a2)
  {
    *a4 = 1;
    if (a3)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  *a4 = 0;
  return 4294956430;
}

uint64_t AUMixSwitchNF::ProcessMultipleBufferLists(AUMixSwitchNF *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) >= a3)
  {
    if (a4 == 2)
    {
      if (a6 == 1)
      {
        mData = (const float *)(*a5)->mBuffers[0].mData;
        size_t mDataByteSize = (*a5)->mBuffers[0].mDataByteSize;
        double v13 = (float *)(*a7)->mBuffers[0].mData;
        if (*((unsigned char *)this + 528))
        {
LABEL_5:
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          float Parameter = ausdk::AUElement::GetParameter(Element, 0);
          double v16 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v16, 0, Parameter, 0);
          double v17 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          float v18 = ausdk::AUElement::GetParameter(v17, 1u);
          uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v19, 1u, v18, 0);
          uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          float v21 = ausdk::AUElement::GetParameter(v20, 2u);
          double v22 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v22, 2u, v21, 0);
          double v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          float v24 = ausdk::AUElement::GetParameter(v23, 3u);
          uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v25, 3u, v24, 0);
          uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
          float v27 = ausdk::AUElement::GetParameter(v26, 4u);
          int v28 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
          ausdk::AUElement::SetParameter(v28, 4u, v27, 0);
          unsigned int v29 = v13;
          uint64_t v30 = mData;
          size_t v31 = mDataByteSize;
LABEL_6:
          memcpy(v29, v30, v31);
        }
        else
        {
          int v33 = a5[1];
          unint64_t v34 = (float *)v33->mBuffers[0].mData;
          size_t v35 = v33->mBuffers[0].mDataByteSize;
          int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMixSwitchNF *)((char *)this + 32), 0);
          int v37 = (int)ausdk::AUElement::GetParameter(v36, 0);
          switch(v37)
          {
            case 0:
              goto LABEL_5;
            case 1:
              uint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v75 = ausdk::AUElement::GetParameter(v74, 0);
              char v76 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v76, 0, v75, 0);
              uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v78 = ausdk::AUElement::GetParameter(v77, 1u);
              unint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v79, 1u, v78, 0);
              uint64_t v80 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v81 = ausdk::AUElement::GetParameter(v80, 2u);
              atomic_uint v82 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v82, 2u, v81, 0);
              atomic_uint v83 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v84 = ausdk::AUElement::GetParameter(v83, 3u);
              uint64_t v85 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v85, 3u, v84, 0);
              uint64_t v86 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v87 = ausdk::AUElement::GetParameter(v86, 4u);
              atomic_uint v88 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v88, 4u, v87, 0);
              unsigned int v29 = v13;
              uint64_t v30 = v34;
              size_t v31 = v35;
              goto LABEL_6;
            case 2:
              *(_DWORD *)unint64_t v129 = 1056964608;
              atomic_uint v89 = (AUMixSwitchNF *)((char *)this + 80);
              char v90 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v91 = ausdk::AUElement::GetParameter(v90, 0);
              CFStringRef v92 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v93 = (float)(v91 + ausdk::AUElement::GetParameter(v92, 0)) * 0.5;
              double v94 = (AUMixSwitchNF *)((char *)this + 128);
              atomic_uint v95 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v94, 0);
              ausdk::AUElement::SetParameter(v95, 0, v93, 0);
              uint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 0);
              float v97 = ausdk::AUElement::GetParameter(v96, 1u);
              unsigned int v98 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 1u);
              float v99 = (float)(v97 + ausdk::AUElement::GetParameter(v98, 1u)) * 0.5;
              int v100 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v94, 0);
              ausdk::AUElement::SetParameter(v100, 1u, v99, 0);
              unsigned int v101 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 0);
              float v102 = ausdk::AUElement::GetParameter(v101, 2u);
              unint64_t v103 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 1u);
              float v104 = ausdk::AUElement::GetParameter(v103, 2u);
              BOOL v105 = v102 == 1.0;
              if (v104 != 1.0) {
                BOOL v105 = 0;
              }
              float v106 = (float)v105;
              UInt64 v107 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v94, 0);
              ausdk::AUElement::SetParameter(v107, 2u, v106, 0);
              unsigned int v108 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 0);
              float v109 = ausdk::AUElement::GetParameter(v108, 3u);
              atomic_uint v110 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 1u);
              float v111 = (float)(v109 + ausdk::AUElement::GetParameter(v110, 3u)) * 0.5;
              unsigned int v112 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v94, 0);
              ausdk::AUElement::SetParameter(v112, 3u, v111, 0);
              int v113 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 0);
              float v114 = ausdk::AUElement::GetParameter(v113, 4u);
              size_t v115 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v89, 1u);
              float v116 = (float)(v114 + ausdk::AUElement::GetParameter(v115, 4u)) * 0.5;
              uint64_t v117 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v94, 0);
              ausdk::AUElement::SetParameter(v117, 4u, v116, 0);
              vDSP_vasm(mData, 1, v34, 1, (const float *)v129, v13, 1, 2 * a3);
              break;
            case 3:
            case 4:
              if (v37 == 3) {
                uint64_t v38 = 536;
              }
              else {
                uint64_t v38 = 584;
              }
              uint64_t v39 = *((unsigned int *)this + 159);
              if (v37 == 3) {
                uint64_t v40 = 560;
              }
              else {
                uint64_t v40 = 608;
              }
              float v41 = hypotf(*(float *)(*(void *)((char *)this + v38) + 4 * v39), *(float *)(*(void *)((char *)this + v38) + 4 * (v39 + a3)));
              float v42 = hypotf(*(float *)(*(void *)((char *)this + v40) + 4 * v39), *(float *)(*(void *)((char *)this + v40) + 4 * (v39 + a3)));
              float v43 = v41 + v42;
              float v44 = 0.0;
              float v45 = 1.0;
              if ((float)(v41 + v42) > 0.0)
              {
                float v45 = v41 / v43;
                float v44 = v42 / v43;
              }
              float v46 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v47 = ausdk::AUElement::GetParameter(v46, 0);
              double v48 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v49 = (float)(v44 * ausdk::AUElement::GetParameter(v48, 0)) + (float)(v47 * v45);
              int v50 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v50, 0, v49, 0);
              double v51 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v52 = ausdk::AUElement::GetParameter(v51, 1u);
              double v53 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v54 = (float)(v44 * ausdk::AUElement::GetParameter(v53, 1u)) + (float)(v52 * v45);
              double v55 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v55, 1u, v54, 0);
              double v56 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v57 = ausdk::AUElement::GetParameter(v56, 2u);
              uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v59 = ausdk::AUElement::GetParameter(v58, 2u);
              BOOL v60 = v57 == 1.0;
              if (v59 != 1.0) {
                BOOL v60 = 0;
              }
              float v61 = (float)v60;
              double v62 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v62, 2u, v61, 0);
              uint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v64 = ausdk::AUElement::GetParameter(v63, 3u);
              UInt32 v65 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v66 = (float)(v44 * ausdk::AUElement::GetParameter(v65, 3u)) + (float)(v64 * v45);
              atomic_uint v67 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v67, 3u, v66, 0);
              unsigned int v68 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 0);
              float v69 = ausdk::AUElement::GetParameter(v68, 4u);
              UInt32 v70 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 80), 1u);
              float v71 = (float)(v44 * ausdk::AUElement::GetParameter(v70, 4u)) + (float)(v69 * v45);
              int v72 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMixSwitchNF *)((char *)this + 128), 0);
              ausdk::AUElement::SetParameter(v72, 4u, v71, 0);
              float __A = 0.0;
              *(void *)unint64_t v129 = mData;
              *(void *)&v129[8] = &mData[a3];
              __B.realp = *(float **)((char *)this + v38);
              __B.imagp = &__B.realp[a3];
              __C.realp = v34;
              __C.imagp = &v34[a3];
              int v73 = (float *)(*(void *)((char *)this + v40) + 4 * a3);
              __D.realp = *(float **)((char *)this + v40);
              __D.imagp = v73;
              __E.realp = v13;
              __E.imagp = &v13[a3];
              vDSP_vfill(&__A, v13, 1, 2 * a3);
              vDSP_zvmmaa((const DSPSplitComplex *)v129, 1, &__B, 1, &__C, 1, &__D, 1, &__E, 1, &__E, 1, a3);
              break;
            default:
              return 0;
          }
        }
        return 0;
      }
      if (getAUMixSwitchNFLog(void)::onceToken != -1) {
        dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
      }
      uint64_t v122 = getAUMixSwitchNFLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)unint64_t v129 = 134218496;
      *(void *)&v129[4] = this;
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = a6;
      __int16 v130 = 1024;
      int v131 = 1;
      uint64_t v120 = "[%p] cannot process %u output busses (expected output bus count is %u)";
      int v121 = v122;
    }
    else
    {
      if (getAUMixSwitchNFLog(void)::onceToken != -1) {
        dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
      }
      uint64_t v119 = getAUMixSwitchNFLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)unint64_t v129 = 134218496;
      *(void *)&v129[4] = this;
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = a4;
      __int16 v130 = 1024;
      int v131 = 2;
      uint64_t v120 = "[%p] cannot process %u input busses (expected input bus count is %u)";
      int v121 = v119;
    }
    _os_log_error_impl(&dword_1BB0CE000, v121, OS_LOG_TYPE_ERROR, v120, v129, 0x18u);
    return 4294967246;
  }
  if (getAUMixSwitchNFLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
  }
  unint64_t v118 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    int v123 = *((_DWORD *)this + 84);
    *(_DWORD *)unint64_t v129 = 134218496;
    *(void *)&v129[4] = this;
    *(_WORD *)&v129[12] = 1024;
    *(_DWORD *)&v129[14] = a3;
    __int16 v130 = 1024;
    int v131 = v123;
    _os_log_error_impl(&dword_1BB0CE000, v118, OS_LOG_TYPE_ERROR, "[%p] cannot process %u frames (maximum frame size is %u)", v129, 0x18u);
  }
  return 4294956422;
}

os_log_t ___Z19getAUMixSwitchNFLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUMixSwitchNF");
  getAUMixSwitchNFLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUMixSwitchNF::CanScheduleParameters(AUMixSwitchNF *this)
{
  return 0;
}

uint64_t AUMixSwitchNF::SetProperty(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1831956599)
  {
    if (a2 <= 1832153207)
    {
      if (a2 == 1831956600)
      {
        CFStringRef v8 = (char *)this + 536;
      }
      else
      {
        if (a2 != 1832152440) {
          return result;
        }
        CFStringRef v8 = (char *)this + 608;
      }
      goto LABEL_18;
    }
    if (a2 != 1832153208)
    {
      if (a2 == 1886222438)
      {
        uint64_t result = 0;
        *((_DWORD *)this + 158) = *(_DWORD *)__src;
      }
      return result;
    }
    CFStringRef v8 = (char *)this + 560;
LABEL_18:
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v8, __src, (uint64_t)&__src[4 * (a6 >> 2)], a6 >> 2);
    return 0;
  }
  switch(a2)
  {
    case 21:
      uint64_t result = 0;
      *((unsigned char *)this + 528) = *(_DWORD *)__src != 0;
      return result;
    case 3700:
      uint64_t result = 0;
      *((unsigned char *)this + 376) = __src != 0;
      return result;
    case 1831955832:
      CFStringRef v8 = (char *)this + 584;
      goto LABEL_18;
  }
  return result;
}

uint64_t AUMixSwitchNF::GetProperty(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 1831956599)
  {
    switch(a2)
    {
      case 21:
        uint64_t result = 0;
        int v9 = *((unsigned __int8 *)this + 528);
        break;
      case 3700:
        uint64_t result = 0;
        int v9 = *((unsigned __int8 *)this + 376);
        break;
      case 1831955832:
        AudioUnitParameterUnit v7 = (const void *)*((void *)this + 73);
        uint64_t v8 = *((void *)this + 74);
        goto LABEL_18;
      default:
        return result;
    }
    char *__dst = v9;
  }
  else
  {
    if (a2 <= 1832153207)
    {
      if (a2 == 1831956600)
      {
        AudioUnitParameterUnit v7 = (const void *)*((void *)this + 67);
        uint64_t v8 = *((void *)this + 68);
      }
      else
      {
        if (a2 != 1832152440) {
          return result;
        }
        AudioUnitParameterUnit v7 = (const void *)*((void *)this + 76);
        uint64_t v8 = *((void *)this + 77);
      }
      goto LABEL_18;
    }
    if (a2 == 1832153208)
    {
      AudioUnitParameterUnit v7 = (const void *)*((void *)this + 70);
      uint64_t v8 = *((void *)this + 71);
LABEL_18:
      memcpy(__dst, v7, v8 - (void)v7);
      return 0;
    }
    if (a2 == 1886222438)
    {
      uint64_t result = 0;
      char *__dst = *((_DWORD *)this + 158);
    }
  }
  return result;
}

uint64_t AUMixSwitchNF::GetPropertyInfo(AUMixSwitchNF *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 1831956599)
  {
    if (a2 == 21)
    {
      char v9 = 1;
      goto LABEL_17;
    }
    if (a2 != 3700)
    {
      int v8 = 1831955832;
LABEL_10:
      if (a2 != v8) {
        return result;
      }
      goto LABEL_15;
    }
LABEL_14:
    char v9 = *((unsigned char *)this + 17) ^ 1;
LABEL_17:
    *a6 = v9;
    int v10 = 4;
    goto LABEL_18;
  }
  if (a2 <= 1832153207)
  {
    if (a2 != 1831956600)
    {
      int v8 = 1832152440;
      goto LABEL_10;
    }
LABEL_15:
    *a6 = 1;
    int v10 = 8 * *((_DWORD *)this + 84);
LABEL_18:
    uint64_t result = 0;
    *a5 = v10;
    return result;
  }
  if (a2 == 1832153208) {
    goto LABEL_15;
  }
  if (a2 == 1886222438) {
    goto LABEL_14;
  }
  return result;
}

uint64_t AUMixSwitchNF::Initialize(AUMixSwitchNF *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (getAUMixSwitchNFLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
  }
  uint64_t v2 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", (uint8_t *)&buf, 0xCu);
  }
  if (!*((unsigned char *)this + 376))
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
    }
    int v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - cannot operate in variable block size mode";
    goto LABEL_37;
  }
  (*(void (**)(long long *__return_ptr, AUMixSwitchNF *, uint64_t, void))(*(void *)this + 392))(&buf, this, 1, 0);
  double v3 = *(double *)&buf;
  (*(void (**)(long long *__return_ptr, AUMixSwitchNF *, uint64_t, uint64_t))(*(void *)this + 392))(&buf, this, 1, 1);
  double v4 = *(double *)&buf;
  (*(void (**)(long long *__return_ptr, AUMixSwitchNF *, uint64_t, void))(*(void *)this + 392))(&buf, this, 2, 0);
  if (v3 != *(double *)&buf)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
    }
    int v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - sample rates of M1 input bus and main output bus must be equal";
LABEL_37:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&buf, 0xCu);
    return 4294956421;
  }
  if (v4 != *(double *)&buf)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
    }
    int v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - sample rates of M4 input bus and main output bus must be equal";
    goto LABEL_37;
  }
  float v7 = *((float *)this + 158);
  if (v7 < 0.0)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
    }
    int v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - parameter mix frequency must be positive";
    goto LABEL_37;
  }
  if (*(double *)&buf <= v7)
  {
    if (getAUMixSwitchNFLog(void)::onceToken != -1) {
      dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
    }
    int v5 = getAUMixSwitchNFLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    AudioUnitParameterValue v6 = "[%p] failed to initialize - parameter mix frequency must not exceed Nyquist frequency";
    goto LABEL_37;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *((unsigned int *)this + 84);
  *((_DWORD *)this + 159) = vcvtmd_u64_f64((float)(v7 * (float)v9) / *(double *)&buf);
  *(void *)&long long buf = (char *)this + 536;
  *((void *)&buf + 1) = (char *)this + 560;
  double v17 = (char *)this + 584;
  float v18 = (char *)this + 608;
  do
  {
    int v10 = (void **)*((void *)&buf + v8);
    std::vector<float>::reserve(v10, 2 * v9);
    int v14 = 1056964608;
    CFStringRef v15 = v10;
    uint64_t v11 = v9;
    if (v9)
    {
      do
      {
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v15, &v14);
        --v11;
      }
      while (v11);
      int v14 = 0;
      CFStringRef v15 = v10;
      uint64_t v12 = v9;
      do
      {
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v15, &v14);
        --v12;
      }
      while (v12);
    }
    ++v8;
  }
  while (v8 != 4);
  (*(void (**)(AUMixSwitchNF *, void, void))(*(void *)this + 72))(this, 0, 0);
  return 0;
}

void AUMixSwitchNF::~AUMixSwitchNF(AUMixSwitchNF *this)
{
  AUMixSwitchNF::~AUMixSwitchNF(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  AUMixSwitchNF *v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B3930;
  if (getAUMixSwitchNFLog(void)::onceToken != -1) {
    dispatch_once(&getAUMixSwitchNFLog(void)::onceToken, &__block_literal_global_12544);
  }
  uint64_t v2 = getAUMixSwitchNFLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUMixSwitchNFLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    float v7 = 134217984;
    uint64_t v8 = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", (uint8_t *)&v7, 0xCu);
  }
  double v3 = (void *)*((void *)this + 76);
  if (v3)
  {
    *((void *)this + 77) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 73);
  if (v4)
  {
    *((void *)this + 74) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 70);
  if (v5)
  {
    *((void *)this + 71) = v5;
    operator delete(v5);
  }
  AudioUnitParameterValue v6 = (void *)*((void *)this + 67);
  if (v6)
  {
    *((void *)this + 68) = v6;
    operator delete(v6);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUEarPlug::SupportedNumChannels(AUEarPlug *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEarPlug::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 4;
}

BOOL AUEarPlug::StreamFormatWritable(AUEarPlug *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEarPlug::SupportsTail(AUEarPlug *this)
{
  return 1;
}

double AUEarPlug::GetTailTime(AUEarPlug *this)
{
  return 0.0;
}

double AUEarPlug::GetLatency(AUEarPlug *this)
{
  return 0.0;
}

uint64_t AUEarPlug::GetParameterInfo(AUEarPlug *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956418;
  }
  buffer->std::regex_constants::match_flag_type flags = 0;
  buffer->unitName = 0;
  if (!a3)
  {
    uint64_t v6 = 0x412000003C23D70ALL;
    int v7 = -1073741824;
    AudioUnitParameterValue v8 = 5.0;
    CFStringRef v9 = @"Ramp Time";
    goto LABEL_7;
  }
  if (a3 <= 4)
  {
    uint64_t v6 = 3270508544;
    int v7 = 1073774592;
    AudioUnitParameterValue v8 = 0.0;
    CFStringRef v9 = @"Initial Level (dB)";
LABEL_7:
    buffer->cfNameString = v9;
    buffer->std::regex_constants::match_flag_type flags = 0x8000000;
    CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = kAudioUnitParameterUnit_Generic;
    *(void *)&buffer->minCFDictionaryRef Value = v6;
    buffer->defaultCFDictionaryRef Value = v8;
    buffer->flags |= v7;
    return result;
  }
  return 4294956418;
}

uint64_t AUEarPlug::GetParameterList(AUEarPlug *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    LODWORD(i) = 0;
    uint64_t result = 4294956418;
  }
  else
  {
    for (uint64_t i = 0; i != 5; ++i)
    {
      if (a3) {
        a3[i] = i;
      }
    }
    uint64_t result = 0;
  }
  *a4 = i;
  return result;
}

uint64_t AUEarPlug::Render(AUEarPlug *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  AudioUnitParameterValue v8 = (AUEarPlug *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUEarPlug *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  int v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0);
    uint64_t v15 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
    double v16 = *(uint64_t (**)(AUEarPlug *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176);
    return v16(this, a2, BufferList, v15, a4);
  }
  return result;
}

uint64_t AUEarPlug::ProcessBufferLists(AUEarPlug *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unsigned int v5 = __N;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 536))
  {
    LODWORD(mNumberBuffers) = *((_DWORD *)this + 133);
    goto LABEL_3;
  }
  *((unsigned char *)this + 536) = 1;
  double v22 = (double)mach_absolute_time() * 0.0000000416666667;
  unint64_t mNumberBuffers = *((unsigned int *)this + 133);
  if (mNumberBuffers || (uint64_t v23 = sHostTimeToBeRamped, v22 >= *(double *)&sHostTimeToBeRamped))
  {
    if (mNumberBuffers)
    {
      int v33 = (void *)*((void *)this + 74);
      uint64_t v34 = 4 * mNumberBuffers;
      memcpy(__dst, v33, 4 * mNumberBuffers);
      uint64_t v26 = sPreviousGainToRestore;
      uint64_t v25 = (int *)v33;
      size_t v24 = v34;
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t mNumberBuffers = a3->mNumberBuffers;
    *((_DWORD *)this + 133) = mNumberBuffers;
    *((void *)this + 73) = v23;
    *((void *)this + 72) = sHostInitTime;
    if (mNumberBuffers)
    {
      size_t v24 = 4 * mNumberBuffers;
      uint64_t v25 = sPreviousGainToRestore;
      uint64_t v26 = (int *)__dst;
LABEL_29:
      memcpy(v26, v25, v24);
      unint64_t v35 = 0;
      int v36 = (float *)((char *)this + 540);
      do
      {
        if (v22 < *((double *)this + 73) && v22 >= *((double *)this + 72))
        {
          v36[4] = __dst[v35];
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEarPlug *)((char *)this + 32), 0);
          float Parameter = ausdk::AUElement::GetParameter(Element, 0);
          float v40 = 0.0;
          if (Parameter > 0.0)
          {
            double v41 = (float)(1.0 - v36[4]);
            double v42 = *(double *)(ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0) + 80);
            float v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEarPlug *)((char *)this + 32), 0);
            float v44 = v41 / (v42 * ausdk::AUElement::GetParameter(v43, 0));
            float v40 = fabsf(v44);
          }
          *int v36 = v40;
          double v45 = v22 - *((double *)this + 72);
          uint64_t v46 = ausdk::AUScope::SafeGetElement((AUEarPlug *)((char *)this + 128), 0);
          float v47 = *v36;
          float v48 = v36[4] + v45 * *(double *)(v46 + 80) * *v36;
          v36[4] = v48;
          if (v47 > 0.0) {
            goto LABEL_34;
          }
          int v37 = (float *)((char *)this + 4 * v35 + 540);
          v36[4] = 1.0;
        }
        else
        {
          v36[4] = 1.0;
          int v37 = v36;
        }
        float *v37 = 0.0;
LABEL_34:
        ++v35;
        unint64_t mNumberBuffers = *((unsigned int *)this + 133);
        ++v36;
      }
      while (v35 < mNumberBuffers);
    }
  }
LABEL_3:
  if (mNumberBuffers)
  {
    unint64_t v10 = a3->mNumberBuffers;
    if (!*((_DWORD *)this + 132))
    {
      if (a3->mNumberBuffers)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        vDSP_Length v13 = v5;
        uint64_t v14 = v5 - 1;
        uint64_t v15 = (char *)this + 556;
        uint64_t v16 = 16;
        do
        {
          float v17 = *(float *)&v15[v11 * 4];
          if (v17 == 1.0)
          {
            size_t mDataByteSize = a3->mBuffers[v11].mDataByteSize;
            if (mDataByteSize == a4->mBuffers[v11].mDataByteSize)
            {
              uint64_t v19 = *(const void **)((char *)&a3->mNumberBuffers + v16);
              uint64_t v20 = *(void **)((char *)&a4->mNumberBuffers + v16);
              if (v19 != v20)
              {
                memcpy(v20, v19, mDataByteSize);
                sPreviousGainToRestore[v11] = 1065353216;
              }
            }
          }
          else
          {
            float __C = 1.0;
            __dst[0] = 0.0;
            float __A = v17;
            float __B = *(float *)&v15[v11 * 4 - 16];
            vDSP_vramp(&__A, &__B, *((float **)this + 75), 1, v13);
            vDSP_vclip(*((const float **)this + 75), 1, __dst, &__C, *((float **)this + 75), 1, v13);
            vDSP_vmul(*(const float **)((char *)&a3->mNumberBuffers + v16), 1, *((const float **)this + 75), 1, *(float **)((char *)&a4->mNumberBuffers + v16), 1, v13);
            int v21 = *(_DWORD *)(*((void *)this + 75) + 4 * v14);
            *(_DWORD *)&v15[v11 * 4] = v21;
            sPreviousGainToRestore[v11] = v21;
          }
          ++v12;
          ++v11;
          v16 += 16;
        }
        while (v12 < a3->mNumberBuffers);
      }
      return 0;
    }
  }
  else
  {
    unint64_t v10 = a3->mNumberBuffers;
  }
  if (v10 == a4->mNumberBuffers && v10)
  {
    uint64_t v27 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      size_t v29 = a3->mBuffers[v27].mDataByteSize;
      if (v29 == a4->mBuffers[v27].mDataByteSize)
      {
        mData = a3->mBuffers[v27].mData;
        size_t v31 = a4->mBuffers[v27].mData;
        if (mData != v31)
        {
          memcpy(v31, mData, v29);
          unint64_t v10 = a3->mNumberBuffers;
        }
      }
      ++v27;
    }
  }
  return 0;
}

uint64_t AUEarPlug::CanScheduleParameters(AUEarPlug *this)
{
  return 0;
}

uint64_t AUEarPlug::SetParameter(AUEarPlug *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEarPlug *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUEarPlug::SetProperty(void **this, int a2, int a3, unsigned int a4, _DWORD *a5, size_t size)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64002)
  {
    unsigned int v9 = size;
    if (size)
    {
      unint64_t v10 = this + 74;
      CADeprecated::CAAutoFree<float>::allocBytes(this + 74, size);
      uint64_t result = (uint64_t)this[74];
      if (result)
      {
        memcpy((void *)result, a5, v9);
        if (v9 >> 2 >= 4) {
          uint64_t v11 = 4;
        }
        else {
          uint64_t v11 = v9 >> 2;
        }
        if (v11)
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
            ausdk::AUElement::SetParameter(Element, i + 1, *(float *)(*v10 + 4 * i), 0);
            float v14 = __exp10f(*(float *)(*v10 + 4 * i) / 20.0);
            *(float *)(*v10 + 4 * i) = v14;
            sPreviousGainToRestore[i] = v14;
          }
        }
        *((_DWORD *)this + 133) = v11;
        double v15 = (double)mach_absolute_time() * 0.0000000416666667;
        *(double *)&sHostInitTime = v15;
        uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
        float Parameter = ausdk::AUElement::GetParameter(v16, 0);
        uint64_t result = 0;
        *(double *)&sHostTimeToBeRamped = v15 + Parameter;
        if (*(double *)&sHostTimeToBeRamped < *(double *)&sHostInitTime)
        {
          uint64_t result = 0;
          sHostTimeToBeRamped = sHostInitTime;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else if (a2 == 21)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 132) = *a5;
  }
  else
  {
    return 4294956417;
  }
  return result;
}

void *CADeprecated::CAAutoFree<float>::allocBytes(void **a1, size_t size)
{
  double v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (size && !result)
  {
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t AUEarPlug::GetProperty(const void **this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (!a3)
  {
    if (a2 == 64002)
    {
      uint64_t v7 = *((unsigned int *)this + 133);
      if (v7)
      {
        memcpy(__dst, this[74], 4 * v7);
        return 0;
      }
    }
    else if (a2 == 21)
    {
      uint64_t result = 0;
      char *__dst = *((_DWORD *)this + 132);
      return result;
    }
  }
  return 4294956417;
}

uint64_t AUEarPlug::GetPropertyInfo(AUEarPlug *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64002)
  {
    *a6 = 1;
    int v7 = 4 * *((_DWORD *)this + 133);
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    *a6 = 1;
    int v7 = 4;
  }
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUEarPlug::Initialize(void **this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  long long v15 = *(_OWORD *)(Element + 80);
  long long v16 = v3;
  uint64_t v17 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v14.Float64 mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v14.mBytesPerPacket = v5;
  *(void *)&v14.mBitsPerChannel = *(void *)(v4 + 112);
  BOOL IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v15, &v14, v6);
  uint64_t result = 4294956428;
  if (IsEquivalent && HIDWORD(v16) <= 4)
  {
    (*((void (**)(void **, void, void))*this + 9))(this, 0, 0);
    CADeprecated::CAAutoFree<float>::allocBytes(this + 75, 4 * *((unsigned int *)this + 84));
    *((unsigned char *)this + 536) = 0;
    double v9 = (double)mach_absolute_time() * 0.0000000416666667;
    *((double *)this + 72) = v9;
    unint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
    float Parameter = ausdk::AUElement::GetParameter(v10, 0);
    uint64_t result = 0;
    double v12 = v9 + Parameter;
    *((double *)this + 73) = v12;
    double v13 = *((double *)this + 72);
    if (v12 < v13)
    {
      uint64_t result = 0;
      *((double *)this + 73) = v13;
    }
  }
  return result;
}

void AUEarPlug::~AUEarPlug(AUEarPlug *this)
{
  AUEarPlug::~AUEarPlug(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B3BA0;
  uint64_t v2 = (void *)*((void *)this + 75);
  if (v2)
  {
    free(v2);
    *((void *)this + 75) = 0;
  }
  long long v3 = (void *)*((void *)this + 74);
  if (v3)
  {
    free(v3);
    *((void *)this + 74) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

os_log_t ___Z19getMatrixUtilityLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AudioDSPMatrixUtility");
  getMatrixUtilityLog(void)::gLog = (uint64_t)result;
  return result;
}

void InverseWithHRLS::update(uint64_t a1, const void *a2, float a3, float a4)
{
  float v50 = 1.0 / a4;
  float v51 = 1.0 / sqrtf(a3);
  float v49 = 1.0 / sqrtf(a4);
  memcpy(*(void **)(a1 + 120), a2, 4 * (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vclr(*(float **)(a1 + 48), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vneg((const float *)(*(void *)a1 + 4 * *(unsigned int *)(a1 + 204)), 1, *(float **)(a1 + 168), 1, *(unsigned int *)(a1 + 204));
  if (*(_DWORD *)(a1 + 192))
  {
    unsigned int v5 = 0;
    do
    {
      unsigned int v6 = 0;
      unsigned int v7 = *(_DWORD *)(a1 + 196) * v5;
      uint64_t v8 = *(void *)(a1 + 48);
      double v9 = (float *)(v8 + 4 * v7);
      unint64_t v10 = (float *)(v8 + 4 * (*(_DWORD *)(a1 + 208) + v7));
      __D.realp = v9;
      __D.imagp = v10;
      do
      {
        int v11 = *(_DWORD *)(a1 + 208);
        vDSP_Length __N = *(unsigned int *)(a1 + 196);
        unsigned int v13 = v11 * v6 + __N * v5;
        AudioStreamBasicDescription v14 = (float *)(*(void *)a1 + 4 * v13);
        long long v15 = (float *)(*(void *)(a1 + 168) + 4 * v13);
        __A.realp = v14;
        __A.imagp = v15;
        uint64_t v16 = *(void *)(a1 + 120);
        __B.realp = (float *)(v16 + 4 * __N * v6);
        __B.imagp = (float *)(v16 + 4 * (__N * v6 + v11));
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
        ++v6;
        unsigned int v17 = *(_DWORD *)(a1 + 192);
      }
      while (v6 < v17);
      ++v5;
    }
    while (v5 < v17);
  }
  vDSP_vsmul(*(const float **)(a1 + 48), 1, &v51, *(float **)(a1 + 48), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vclr(*(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 196));
  if (*(_DWORD *)(a1 + 192))
  {
    unsigned int v18 = 0;
    do
    {
      vDSP_Length v19 = *(unsigned int *)(a1 + 196);
      uint64_t v20 = *(void *)(a1 + 48);
      int v21 = (float *)(v20 + 4 * (*(_DWORD *)(a1 + 208) + v19 * v18));
      __D.realp = (float *)(v20 + 4 * v19 * v18);
      __D.imagp = v21;
      vDSP_zvmgsa(&__D, 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 72), 1, v19);
      ++v18;
    }
    while (v18 < *(_DWORD *)(a1 + 192));
  }
  vDSP_vsadd(*(const float **)(a1 + 72), 1, &v50, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 196));
  int v45 = *(_DWORD *)(a1 + 196);
  vvsqrtf(*(float **)(a1 + 72), *(const float **)(a1 + 72), &v45);
  vDSP_vclr(*(float **)(a1 + 96), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vmul(*(const float **)(a1 + 72), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  float v44 = 1.0;
  vDSP_svdiv(&v44, *(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  if (*(_DWORD *)(a1 + 192))
  {
    unsigned int v22 = 0;
    do
    {
      unsigned int v23 = 0;
      unsigned int v24 = *(_DWORD *)(a1 + 196) * v22;
      uint64_t v25 = *(void *)(a1 + 96);
      uint64_t v26 = (float *)(v25 + 4 * v24);
      uint64_t v27 = (float *)(v25 + 4 * (*(_DWORD *)(a1 + 208) + v24));
      __D.realp = v26;
      __D.imagp = v27;
      do
      {
        vDSP_Length v28 = *(unsigned int *)(a1 + 196);
        int v29 = *(_DWORD *)(a1 + 208);
        unsigned int v30 = v28 * v23 + v29 * v22;
        size_t v31 = (float *)(*(void *)a1 + 4 * (v30 + *(_DWORD *)(a1 + 204)));
        __A.realp = (float *)(*(void *)a1 + 4 * v30);
        __A.imagp = v31;
        uint64_t v32 = *(void *)(a1 + 48);
        __B.realp = (float *)(v32 + 4 * v28 * v23);
        __B.imagp = (float *)(v32 + 4 * (v28 * v23 + v29));
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, v28);
        ++v23;
      }
      while (v23 < *(_DWORD *)(a1 + 192));
      vDSP_zrvmul(&__D, 1, *(const float **)(a1 + 144), 1, &__D, 1, *(unsigned int *)(a1 + 196));
      ++v22;
    }
    while (v22 < *(_DWORD *)(a1 + 192));
  }
  vDSP_vsmul(*(const float **)(a1 + 96), 1, &v51, *(float **)(a1 + 96), 1, (2 * *(_DWORD *)(a1 + 208)));
  vDSP_vsmul(*(const float **)a1, 1, &v51, *(float **)a1, 1, (2 * *(_DWORD *)(a1 + 204)));
  vDSP_vsadd(*(const float **)(a1 + 72), 1, &v49, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vdiv(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vneg(*(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(unsigned int *)(a1 + 196));
  vDSP_vneg((const float *)(*(void *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 208)), 1, (float *)(*(void *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 208)), 1, *(unsigned int *)(a1 + 208));
  if (*(_DWORD *)(a1 + 192))
  {
    unsigned int v33 = 0;
    do
    {
      vDSP_Length v34 = *(unsigned int *)(a1 + 196);
      uint64_t v35 = *(void *)(a1 + 96);
      int v36 = (float *)(v35 + 4 * (*(_DWORD *)(a1 + 208) + v34 * v33));
      __D.realp = (float *)(v35 + 4 * v34 * v33);
      __D.imagp = v36;
      vDSP_zrvmul(&__D, 1, *(const float **)(a1 + 144), 1, &__D, 1, v34);
      if (!*(_DWORD *)(a1 + 192)) {
        break;
      }
      unsigned int v37 = 0;
      do
      {
        vDSP_Length v38 = *(unsigned int *)(a1 + 196);
        int v39 = *(_DWORD *)(a1 + 208);
        unsigned int v40 = v38 * v37 + v39 * v33;
        double v41 = (float *)(*(void *)a1 + 4 * (v40 + *(_DWORD *)(a1 + 204)));
        __A.realp = (float *)(*(void *)a1 + 4 * v40);
        __A.imagp = v41;
        uint64_t v42 = *(void *)(a1 + 48);
        __B.realp = (float *)(v42 + 4 * v38 * v37);
        __B.imagp = (float *)(v42 + 4 * (v38 * v37 + v39));
        vDSP_zvma(&__D, 1, &__B, 1, &__A, 1, &__A, 1, v38);
        ++v37;
        unsigned int v43 = *(_DWORD *)(a1 + 192);
      }
      while (v37 < v43);
      ++v33;
    }
    while (v33 < v43);
  }
}

void std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100](vDSP_DFT_SetupStruct **a1, vDSP_DFT_SetupStruct *a2)
{
  long long v3 = *a1;
  *a1 = a2;
  if (v3) {
    vDSP_DFT_DestroySetup(v3);
  }
}

char *ecRMDF::ec_state_reset(ecRMDF *this)
{
  *((unsigned char *)this + 128) = *((unsigned char *)this + 129);
  int v2 = *(_DWORD *)this;
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 31) = v2;
  *((_DWORD *)this + 36) = 1065353216;
  unint64_t v3 = *((unsigned int *)this + 9);
  LOBYTE(__u) = 1;
  std::vector<BOOL>::assign((uint64_t)this + 368, v3, &__u);
  unint64_t v4 = *((unsigned int *)this + 8);
  LOBYTE(__u) = 1;
  std::vector<BOOL>::assign((uint64_t)this + 392, v4, &__u);
  unint64_t v5 = (2 * *((_DWORD *)this + 13));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 52, v5, &__u);
  unint64_t v6 = (2 * *((_DWORD *)this + 13));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 55, v6, &__u);
  unint64_t v7 = (2 * *((_DWORD *)this + 13));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 58, v7, &__u);
  unint64_t v8 = *((unsigned int *)this + 13);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 61, v8, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 67, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 70, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 73, *((_DWORD *)this + 8), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 76, *((_DWORD *)this + 8), 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 79, *((_DWORD *)this + 9), *((_DWORD *)this + 12), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 656, *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 680, *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 704, *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 728, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), *((float *)this + 5));
  ecutils::fcn_vector_init<float>((uint64_t)this + 800, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 824, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, *((_DWORD *)this + 13), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 752, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 776, *((_DWORD *)this + 8), *((_DWORD *)this + 9), *(_DWORD *)this, 2 * *((_DWORD *)this + 10), 0.0);
  std::vector<unsigned int>::size_type v9 = *(unsigned int *)this;
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 848), v9, &__u);
  unint64_t v10 = *((unsigned int *)this + 13);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 31, v10, &__u);
  unint64_t v11 = *((unsigned int *)this + 13);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 34, v11, &__u);
  unint64_t v12 = *((unsigned int *)this + 9);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 37, v12, &__u);
  unint64_t v13 = *((unsigned int *)this + 12);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 40, v13, &__u);
  unint64_t v14 = (2 * *((_DWORD *)this + 13));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 43, v14, &__u);
  unint64_t v15 = *((unsigned int *)this + 8);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 25, v15, &__u);
  unint64_t v16 = *((unsigned int *)this + 8);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 28, v16, &__u);
  unint64_t v17 = *((unsigned int *)this + 8);
  if (*((float *)this + 40) >= 1.0) {
    std::vector<unsigned int>::value_type __u = *((_DWORD *)this + 29);
  }
  else {
    std::vector<unsigned int>::value_type __u = 1065353216;
  }
  os_log_t result = std::vector<float>::assign((char **)this + 22, v17, &__u);
  LODWORD(v19) = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    unint64_t v20 = 0;
    uint64_t v21 = *((void *)this + 106);
    int v22 = -1;
    do
    {
      *(_DWORD *)(v21 + 4 * v20++) = v19 + v22;
      unint64_t v19 = *(unsigned int *)this;
      --v22;
    }
    while (v20 < v19);
  }
  return result;
}

void ecRMDF::fcnGetError(uint64_t a1, unsigned int a2, DSPComplex **a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = 3 * a2;
  vDSP_vclr(*(float **)(*(void *)(a1 + 608) + 24 * a2), 1, *(unsigned int *)(a1 + 64));
  unint64_t v7 = *(float **)(*(void *)(a1 + 608) + 8 * v6);
  unint64_t v8 = &v7[*(unsigned int *)(a1 + 52)];
  __D.realp = v7;
  __D.imagp = v8;
  unint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9)
  {
    unint64_t v10 = 0;
    LODWORD(v11) = *(_DWORD *)(a1 + 124);
    do
    {
      unint64_t v12 = *(unsigned int *)(a1 + 120);
      if (v12 < v11)
      {
        uint64_t v13 = 24 * v12;
        do
        {
          __A.realp = 0;
          __A.imagp = 0;
          vDSP_Length __N = *(unsigned int *)(a1 + 52);
          __A.realp = *(float **)(*(void *)(*(void *)(a1 + 656) + 24 * v10)
                                + 24 * *(unsigned int *)(*(void *)(a1 + 848) + 4 * v12));
          __A.imagp = &__A.realp[__N];
          __B.realp = 0;
          __B.imagp = 0;
          __B.realp = *(float **)(*(void *)(*(void *)(*(void *)(a1 + 800) + 24 * v5) + 24 * v10) + v13);
          __B.imagp = *(float **)(*(void *)(*(void *)(*(void *)(a1 + 824) + 24 * v5) + 24 * v10) + v13);
          vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
          ++v12;
          unint64_t v11 = *(unsigned int *)(a1 + 124);
          v13 += 24;
        }
        while (v12 < v11);
        unint64_t v9 = *(unsigned int *)(a1 + 36);
      }
      ++v10;
    }
    while (v10 < v9);
    unint64_t v7 = *(float **)(*(void *)(a1 + 608) + 24 * v5);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  unint64_t v16 = *(const vDSP_DFT_SetupStruct **)(a1 + 880);
  unint64_t v17 = &v7[(v15 + 1)];
  float *v17 = v7[v15];
  __A.realp = v7;
  __A.imagp = v17;
  vDSP_DFT_Execute(v16, v7, v17, v7, v17);
  vDSP_ztoc(&__A, 1, *a3, 2, *(unsigned int *)(a1 + 72));
  vDSP_vsmul((const float *)*a3, 1, (const float *)(a1 + 56), (float *)*a3, 1, *(unsigned int *)(a1 + 48));
  vDSP_vclr((float *)*a3, 1, *(unsigned int *)(a1 + 40));
  uint64_t v18 = 3 * v5;
  vDSP_vadd((const float *)(*(void *)(*(void *)(a1 + 536) + 8 * v18) + 4 * *(unsigned int *)(a1 + 40)), 1, (const float *)*a3 + *(unsigned int *)(a1 + 40), 1, (float *)*a3 + *(unsigned int *)(a1 + 40), 1, *(unsigned int *)(a1 + 40));
  ecRMDF::fcnOlsAnaly(a1, *(const vDSP_DFT_SetupStruct **)(a1 + 872), *a3, (float **)(*(void *)(a1 + 608) + 8 * v18));
}

float ecRMDF::fcnUpdateFilter(ecRMDF *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = 24 * a2;
  vDSP_Length __N = *((unsigned int *)this + 13);
  unint64_t v7 = (float *)(*(void *)(*((void *)this + 76) + v5) + 4 * __N);
  __B.realp = *(float **)(*((void *)this + 76) + v5);
  __B.imagp = v7;
  uint64_t v8 = 24 * a3;
  uint64_t v9 = 24 * a4;
  unint64_t v10 = (float *)(*(void *)(*(void *)(*((void *)this + 88) + v8) + v9) + 4 * __N);
  __A.realp = *(float **)(*(void *)(*((void *)this + 88) + v8) + v9);
  __A.imagp = v10;
  __D.realp = *(float **)(*(void *)(*(void *)(*((void *)this + 100) + v5) + v8) + v9);
  __D.imagp = *(float **)(*(void *)(*(void *)(*((void *)this + 103) + v5) + v8) + v9);
  vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
  **(_DWORD **)(*(void *)(*(void *)(*((void *)this + 103) + v5) + v8) + v9) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(*((void *)this + 100) + v5) + v8) + v9)
                                                                                              + 4
                                                                                              * *((unsigned int *)this
                                                                                                + 18));
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 110), __D.realp, __D.imagp, __D.realp, __D.imagp);
  vDSP_vclr(&__D.realp[*((unsigned int *)this + 19)], 1, *((unsigned int *)this + 19));
  vDSP_vclr(&__D.imagp[*((unsigned int *)this + 19)], 1, *((unsigned int *)this + 19));
  memcpy(*(void **)(*(void *)(*(void *)(*((void *)this + 94) + v5) + v8) + v9), __D.realp, 4 * *((unsigned int *)this + 19));
  memcpy((void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 94) + v5) + v8) + v9)+ 4 * *((unsigned int *)this + 19)), __D.imagp, 4 * *((unsigned int *)this + 19));
  vDSP_vsmul(__D.realp, 1, (const float *)this + 20, __D.realp, 1, *((unsigned int *)this + 19));
  vDSP_vsmul(__D.imagp, 1, (const float *)this + 20, __D.imagp, 1, *((unsigned int *)this + 19));
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 109), __D.realp, __D.imagp, __D.realp, __D.imagp);
  unint64_t v11 = *(float **)(*(void *)(*(void *)(*((void *)this + 103) + v5) + v8) + v9);
  float result = *v11;
  *(float *)(*(void *)(*(void *)(*(void *)(*((void *)this + 100) + v5) + v8) + v9)
           + 4 * *((unsigned int *)this + 18)) = *v11;
  float *v11 = 0.0;
  return result;
}

void ecRMDF::fcnOlsAnaly(uint64_t a1, const vDSP_DFT_SetupStruct *a2, DSPComplex *__C, float **a4)
{
  vDSP_Length v7 = *(unsigned int *)(a1 + 72);
  uint64_t v8 = &(*a4)[(v7 + 1)];
  v11.realp = *a4;
  v11.imagp = v8;
  vDSP_ctoz(__C, 2, &v11, 1, v7);
  vDSP_DFT_Execute(a2, v11.realp, v11.imagp, v11.realp, v11.imagp);
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  unint64_t v10 = *a4;
  (*a4)[v9] = (*a4)[(v9 + 1)];
  v10[(v9 + 1)] = 0.0;
  LODWORD(v9) = *(_DWORD *)(a1 + 48);
  v10[(v9 + 1)] = 0.0;
  vDSP_vsmul(v10, 1, (const float *)(a1 + 60), v10, 1, (v9 + 2));
}

double CResidualSuppressorV4::speex_preprocess_state_res_initV4(CResidualSuppressorV4 *this)
{
  uint64_t v1 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
  if (!v1)
  {
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_alloc::bad_alloc(exception);
  }
  *((_DWORD *)v1 + 7) = 0;
  double result = 4.42172753e-75;
  *(_OWORD *)(v1 + 12) = xmmword_1BB87B570;
  *((_DWORD *)v1 + 2) = 0;
  *(void *)uint64_t v1 = 0;
  return result;
}

void CResidualSuppressorV4::speex_preprocess_run_res_estimator(uint64_t a1, const float **a2, uint64_t a3)
{
  vDSP_Length v6 = *(unsigned int *)(a1 + 8);
  vDSP_Length v7 = (v6 + *(_DWORD *)(a1 + 16));
  uint64_t v8 = *(const void **)(a1 + 104);
  uint64_t v9 = *a2;
  unint64_t v10 = *(float **)(a1 + 624);
  float v22 = 1.0e-20;
  float __B = 32768.0;
  vDSP_vsmul(v9, 1, &__B, v10, 1, v6);
  DSPSplitComplex v11 = a2[1];
  unint64_t v12 = *(float **)(a1 + 632);
  float __B = 32768.0;
  vDSP_vsmul(v11, 1, &__B, v12, 1, v6);
  int v13 = *(_DWORD *)(a1 + 328);
  if (v13 + 1 < (int)(float)((float)((float)*(int *)(a1 + 12) * 30.0) / (float)v6)) {
    int v14 = v13 + 1;
  }
  else {
    int v14 = (int)(float)((float)((float)*(int *)(a1 + 12) * 30.0) / (float)v6);
  }
  *(_DWORD *)(a1 + 328) = v14;
  ++*(_DWORD *)(a1 + 332);
  CResidualSuppressorV3::preprocess_analysis_freq(a1, *(void *)(a1 + 624), *(const void **)(a1 + 632));
  vDSP_vclr(*(float **)(a1 + 136), 1, v7);
  if (*(int *)a1 > 2)
  {
    unint64_t v19 = *(float **)(a1 + 104);
    unint64_t v20 = *(float **)(a1 + 648);
  }
  else
  {
    uint64_t v15 = *(float **)(a1 + 256);
    if (*v15 < 0.0 || *v15 >= (float)((float)v6 * 1000000000.0)) {
      vDSP_vclr(v15, 1, v6);
    }
    if (*(unsigned char *)(a1 + 736))
    {
      vDSP_vsmul(*(const float **)(a1 + 104), 1, (const float *)(a1 + 740), *(float **)(a1 + 744), 1, v6);
      unint64_t v17 = *(float **)(a1 + 256);
      uint64_t v18 = *(const float **)(a1 + 744);
    }
    else
    {
      unint64_t v17 = *(float **)(a1 + 256);
      uint64_t v18 = *(const float **)(a1 + 104);
    }
    vDSP_vmin(v17, 1, v18, 1, v17, 1, v6);
    memcpy(*(void **)(a1 + 640), *(const void **)(a1 + 256), 4 * v6);
    vDSP_vsadd(*(const float **)(a1 + 640), 1, &v22, *(float **)(a1 + 640), 1, v6);
    vDSP_vsub(*(const float **)(a1 + 256), 1, *(const float **)(a1 + 104), 1, *(float **)(a1 + 648), 1, v6);
    unint64_t v19 = *(float **)(a1 + 648);
    unint64_t v20 = v19;
    if (*(unsigned char *)(a1 + 736))
    {
      vDSP_vthr(v19, 1, &v22, v19, 1, v6);
      goto LABEL_17;
    }
  }
  vDSP_vsadd(v19, 1, &v22, v20, 1, v6);
LABEL_17:
  if (*(_DWORD *)(a1 + 540) != 1 && !*(_DWORD *)a1) {
    goto LABEL_24;
  }
  CResidualSuppressorV3::EstimateNoise(a1, *(const float **)(a1 + 648));
  if (*(_DWORD *)(a3 + 8) == 1 && *(void *)a3) {
    vDSP_vmin(*(const float **)(a1 + 136), 1, *(const float **)a3, 1, *(float **)(a1 + 136), 1, v6);
  }
  if (!*(_DWORD *)a1
    || (CFilterBank::filterbank_compute_bank32(*(void *)(a1 + 24), *(const float **)(a1 + 136), (float *)(*(void *)(a1 + 136) + 4 * v6)), int v21 = *(_DWORD *)a1, *(int *)a1 < 2))
  {
LABEL_24:
    if (*(_DWORD *)(a1 + 496) == 1) {
      CResidualSuppressorV3::AdjustResidual(a1);
    }
    if (!*(unsigned char *)(a1 + 736))
    {
      vDSP_vsub(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 104), 1, *(float **)(a1 + 744), 1, v6);
      vDSP_vmin(*(const float **)(a1 + 744), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v6);
      vDSP_vmax(*(const float **)(a1 + 256), 1, *(const float **)(a1 + 640), 1, *(float **)(a1 + 256), 1, v6);
    }
    int v21 = *(_DWORD *)a1;
  }
  if (v21 <= 2)
  {
    float __B = 0.6;
    vDSP_vsmul(*(const float **)(a1 + 248), 1, &__B, *(float **)(a1 + 248), 1, v6);
    vDSP_vmax(*(const float **)(a1 + 248), 1, *(const float **)(a1 + 256), 1, *(float **)(a1 + 248), 1, v6);
    CFilterBank::filterbank_compute_bank32(*(void *)(a1 + 24), *(const float **)(a1 + 248), (float *)(*(void *)(a1 + 248) + 4 * v6));
  }
  if (*(_DWORD *)(a1 + 328) == 1) {
    memcpy(*(void **)(a1 + 152), v8, 4 * v7);
  }
}

void *CResidualSuppressorV4::speex_preprocess_run_freq(uint64_t a1, float **a2, float **a3, float **a4, uint64_t a5, float *a6, uint64_t a7)
{
  unsigned int v13 = *(_DWORD *)a1;
  if (*(int *)a1 < 1
    || (*(_DWORD *)(a1 + 572) = 0, v13 == 1)
    || (*(_DWORD *)(a1 + 496) = 0, *(_DWORD *)(a1 + 540) = 0, v13 <= 2))
  {
    CResidualSuppressorV4::GetLeakageForSuppressor(a1, *a2, a2[1], *a3, a3[1], a6);
    CResidualSuppressorV3::GetResidualForSuppressor(a1, a4);
  }
  *(void *)(a1 + 304) = a5;
  *(void *)a6 = a7;
  CResidualSuppressorV4::speex_preprocess_run_res_estimator(a1, (const float **)a2, (uint64_t)a6);

  return CResidualSuppressorV3::speex_preprocess_run_res_suppressor(a1);
}

void CResidualSuppressorV4::GetLeakageForSuppressor(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  uint64_t v74 = a6;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  float v85 = 0.001;
  uint64_t v12 = *(void *)(a1 + 408);
  DSPSplitComplex v11 = *(VPEchoGateV3 **)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 432);
  uint64_t v77 = *(float **)(a1 + 424);
  float v78 = v11;
  int v14 = *(float **)(a1 + 448);
  float v15 = *(float *)(a1 + 400);
  vDSP_Length v16 = *(int *)(a1 + 4);
  unint64_t v17 = (float *)*(unsigned int *)(a1 + 460);
  unint64_t v79 = *(VPEchoGateV3 **)(a1 + 440);
  uint64_t v80 = v17;
  float v18 = *(float *)(a1 + 368);
  float v19 = *(float *)(a1 + 372);
  uint64_t __C = 0;
  uint64_t __B = 0;
  unint64_t v20 = *(const float **)(a1 + 480);
  __A.realp = a2;
  __A.imagp = a3;
  vDSP_zvmags(&__A, 1, (float *)v12, 1, v16);
  *(float *)uint64_t v12 = *a2 * *a2;
  *(float *)(v12 + 4 * v16) = *a3 * *a3;
  __A.realp = a4;
  __A.imagp = a5;
  vDSP_zvmags(&__A, 1, (float *)v13, 1, v16);
  *(float *)uint64_t v13 = *a4 * *a4;
  *(float *)(v13 + 4 * v16) = *a5 * *a5;
  vDSP_sve((const float *)(v12 + 4), 1, (float *)&__C + 1, v16 - 1);
  vDSP_sve((const float *)(v13 + 4), 1, (float *)&__C, v16 - 1);
  *((float *)&__C + 1) = (float)(*(float *)v12 + (float)(*((float *)&__C + 1) * 2.0)) + *(float *)(v12 + 4 * v16);
  *(float *)&uint64_t __C = (float)(*(float *)v13 + (float)(*(float *)&__C * 2.0)) + *(float *)(v13 + 4 * v16);
  *(_DWORD *)(a1 + 560) = __C;
  vDSP_Length v21 = (int)v80;
  float v22 = (const float *)v12;
  unsigned int v23 = v77;
  vDSP_vmul(v22, 1, v20, 1, v77, 1, (int)v80);
  vDSP_vmul((const float *)v13, 1, v20, 1, v14, 1, (int)v80);
  float v75 = &v68;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (float *)((char *)&v68 - ((v25 + 15) & 0x7FFFFFFF0));
  MEMORY[0x1F4188790](v27);
  int v29 = (float *)((char *)&v68 - v28);
  char v76 = v14;
  vDSP_vsub((const float *)v79, 1, v14, 1, v26, 1, v21);
  vDSP_vsub((const float *)v78, 1, v23, 1, v29, 1, v21);
  unsigned int v30 = v26;
  vDSP_vmul(v26, 1, v29, 1, v29, 1, v21);
  LODWORD(__A.realp) = 813694978;
  vDSP_Length v31 = *(unsigned int *)(a1 + 584);
  uint64_t v82 = 0;
  uint64_t v80 = *(float **)(a1 + 608);
  uint64_t v32 = *(float **)(a1 + 600);
  vDSP_Length v34 = *(float **)(a1 + 376);
  unsigned int v33 = *(float **)(a1 + 384);
  uint64_t v35 = *(float **)(a1 + 392);
  uint64_t v72 = a1;
  int v36 = *(_DWORD **)(a1 + 592);
  unint64_t v81 = 0;
  int v73 = v36;
  if (v31 == 1)
  {
    vDSP_svesq(v30, 1, (float *)&v82 + 1, v21);
    vDSP_sve(v29, 1, (float *)&v82, v21);
    *(float *)&uint64_t v82 = *(float *)&v82 + 8.6736e-19;
    float v37 = *(float *)&v82;
    *((float *)&v82 + 1) = *((float *)&v82 + 1) + 8.6736e-19;
    float v38 = sqrtf(*((float *)&v82 + 1));
    int v39 = v80;
    *uint64_t v80 = v38;
    float v40 = v37 / v38;
    *uint64_t v32 = v37 / v38;
    vDSP_Length v41 = v31;
  }
  else
  {
    float v69 = v34;
    UInt32 v70 = v33;
    vDSP_Length v71 = v21;
    int v42 = v36[1];
    HIDWORD(v81) = 0;
    vDSP_svesq(v30, 1, (float *)&v81 + 1, (v42 + 1));
    vDSP_sve(v29, 1, (float *)&v81, (v42 + 1));
    uint64_t v43 = 0;
    vDSP_Length v68 = v31;
    uint64_t v44 = (v31 - 1);
    float v46 = *((float *)&v81 + 1);
    float v45 = *(float *)&v81;
    do
    {
      int v47 = v36[(v43 + 2)];
      vDSP_Length v48 = (v47 - v42);
      int v49 = v42 + 1;
      vDSP_svesq(&v30[v49], 1, (float *)&v81 + 1, v48);
      vDSP_sve(&v29[v49], 1, (float *)&v81, v48);
      unint64_t v50 = v81;
      float v51 = (float)(v45 + *(float *)&v81) + 8.6736e-19;
      *(float *)&uint64_t v82 = v51;
      *((float *)&v82 + 1) = (float)(v46 + *((float *)&v81 + 1)) + 8.6736e-19;
      float v52 = sqrtf(*((float *)&v82 + 1));
      v80[v43] = v52;
      v32[v43++] = v51 / v52;
      LODWORD(v46) = HIDWORD(v50);
      LODWORD(v45) = v50;
      int v42 = v47;
    }
    while (v44 != v43);
    vDSP_Length v41 = v68;
    int v39 = v80;
    v80[v44] = v80[(v68 - 2)];
    v32[v44] = v32[(v41 - 2)];
    float v40 = *v32;
    vDSP_Length v21 = v71;
    unsigned int v33 = v70;
    vDSP_Length v34 = v69;
  }
  float v53 = v18 * *(float *)&__C;
  float v54 = *((float *)&__C + 1);
  if ((float)(v18 * *(float *)&__C) > (float)(v19 * *((float *)&__C + 1))) {
    float v53 = v19 * *((float *)&__C + 1);
  }
  float v55 = v53 / *((float *)&__C + 1);
  if (*((float *)&__C + 1) >= 9.3132e-19) {
    float v56 = v55;
  }
  else {
    float v56 = v19;
  }
  *(float *)&uint64_t __B = 1.0 - v56;
  *((float *)&__B + 1) = v56;
  float v57 = v74;
  float v58 = v74[4];
  float v59 = (float)(v40 * v56) + (float)((float)(1.0 - v56) * v74[3]);
  v74[3] = v59;
  float v60 = fmaxf((float)(v56 * *v39) + (float)((float)(1.0 - v56) * v58), 9.3132e-10);
  if (v59 <= (float)(v85 * v60)) {
    float v59 = v85 * v60;
  }
  if (v59 >= v60) {
    float v59 = v60;
  }
  v57[3] = v59;
  v57[4] = v60;
  if ((float)(v59 / v60) < v57[5] && *(float *)(v72 + 556) < v57[6])
  {
    float v61 = v55 / 30.0;
    if (v54 >= 9.3132e-19) {
      float v62 = v61;
    }
    else {
      float v62 = v19;
    }
    *((float *)&__B + 1) = v62;
    *(float *)&uint64_t __B = 1.0 - v62;
  }
  vDSP_vsmul(v32, 1, (const float *)&__B + 1, v32, 1, v41);
  vDSP_vsma(v34, 1, (const float *)&__B, v32, 1, v34, 1, v41);
  vDSP_vsmul(v39, 1, (const float *)&__B + 1, v39, 1, v41);
  vDSP_vsma(v33, 1, (const float *)&__B, v39, 1, v33, 1, v41);
  vDSP_vthr(v33, 1, (const float *)&__A, v33, 1, v41);
  vDSP_vsmul(v33, 1, &v85, v30, 1, v41);
  vDSP_vmax(v30, 1, v34, 1, v34, 1, v41);
  vDSP_vmin(v34, 1, v33, 1, v34, 1, v41);
  uint64_t v63 = v73;
  if (v41)
  {
    uint64_t v64 = 0;
    unsigned int v65 = *v73;
    do
    {
      if (v64)
      {
        float v66 = v34[v64] / v33[v64];
        if (v66 <= *v35) {
          float v66 = *v35;
        }
      }
      else
      {
        float v66 = *v34 / *v33;
      }
      unsigned int v67 = v63[++v64];
      while (v65 <= v67)
        v35[v65++] = v66;
      unsigned int v65 = v67;
    }
    while (v64 != v41);
  }
  VPEchoGateV3::GatesmoothPowerSpectrum(v78, v77, (const float *)v21, v15);
  VPEchoGateV3::GatesmoothPowerSpectrum(v79, v76, (const float *)v21, v15);
}

void CResidualSuppressorV4::speex_preprocess_run(uint64_t a1, char *a2, float **a3, float **a4, uint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  v18.realp = (float *)((char *)&v17 - v15);
  v18.imagp = (float *)((char *)&v17 + 4 * v14 - v15);
  if (v16)
  {
    CResidualSuppressorV3::speex_analysis(a1, a2, &v18);
    CResidualSuppressorV4::speex_preprocess_run_freq(a1, &v18.realp, a3, a4, a5, a6, a7);
    CResidualSuppressorV3::speex_synthesis(a1, (float *)a2);
  }
  else
  {
    CResidualSuppressorV4::speex_preprocess_run_freq(a1, &v18.realp, a3, a4, a5, a6, a7);
  }
}

uint64_t AUECSUMO::ValidFormat(AUECSUMO *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9) {
    return 0;
  }
  else {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
}

uint64_t AUECSUMO::SupportedNumChannels(AUECSUMO *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUECSUMO::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 8;
}

BOOL AUECSUMO::StreamFormatWritable(AUECSUMO *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUECSUMO::SupportsTail(AUECSUMO *this)
{
  return 1;
}

double AUECSUMO::GetTailTime(AUECSUMO *this)
{
  return 0.0;
}

double AUECSUMO::GetLatency(AUECSUMO *this)
{
  return *((float *)this + 172);
}

uint64_t AUECSUMO::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUECSUMO::GetParameterInfo(AUECSUMO *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->std::regex_constants::match_flag_type flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x1F)
  {
    CFStringRef v6 = *(&off_1E623E808 + a3);
    AudioUnitParameterUnit v7 = dword_1BB89991C[a3];
    AudioUnitParameterValue v8 = flt_1BB89999C[a3];
    AudioUnitParameterValue v9 = flt_1BB899A1C[a3];
    AudioUnitParameterValue v10 = flt_1BB899A9C[a3];
    int v11 = dword_1BB899B1C[a3];
    buffer->cfNameString = v6;
    buffer->std::regex_constants::match_flag_type flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFDictionaryRef Value = v8;
    buffer->maxCFDictionaryRef Value = v9;
    buffer->defaultCFDictionaryRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECSUMO::GetParameterList(AUECSUMO *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((_OWORD *)a3 + 7) = xmmword_1BB87A9E0;
  }
  uint64_t result = 0;
  *a4 = 32;
  return result;
}

BOOL AUECSUMO::BusCountWritable(AUECSUMO *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECSUMO::Render(AUECSUMO *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUECSUMO *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AUECSUMO::ProcessMultipleBufferLists(AUECSUMO *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 77) = *((double *)this + 77) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECSUMOLogScope(void)::once != -1) {
      dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
    }
    if (AUECSUMOLogScope(void)::scope)
    {
      uint64_t v28 = *(NSObject **)AUECSUMOLogScope(void)::scope;
      if (!*(void *)AUECSUMOLogScope(void)::scope) {
        return 4294956422;
      }
    }
    else
    {
      uint64_t v28 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v29 = *((_DWORD *)this + 84);
      *(float *)long long buf = 4.8153e-34;
      char v128 = "AUECSUMO.cpp";
      __int16 v129 = 1024;
      int v130 = 1169;
      __int16 v131 = 1024;
      BOOL v132 = a3;
      __int16 v133 = 1024;
      int v134 = v29;
      _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", buf, 0x1Eu);
    }
    return 4294956422;
  }
  uint64_t result = 4294956428;
  if (a4 == 3 && a6 == 4)
  {
    uint64_t v11 = *a5;
    uint64_t v12 = *a7;
    uint64_t v13 = a7[1];
    uint64_t v14 = a7[3];
    if (*((unsigned char *)this + 528))
    {
      if (v12 != v11 && *((_DWORD *)this + 138))
      {
        unint64_t v15 = 0;
        p_mData = (const void **)&v11->mBuffers[0].mData;
        uint64_t v17 = &v14->mBuffers[0].mData;
        DSPSplitComplex v18 = &v13->mBuffers[0].mData;
        uint64_t v19 = &v12->mBuffers[0].mData;
        do
        {
          vDSP_Length v21 = *v19;
          v19 += 2;
          unint64_t v20 = v21;
          unsigned int v23 = (float *)*v18;
          v18 += 2;
          float v22 = v23;
          uint64_t v25 = *v17;
          v17 += 2;
          uint64_t v24 = v25;
          uint64_t v26 = *p_mData;
          p_mData += 2;
          memcpy(v20, v26, 4 * *((unsigned int *)this + 137));
          memcpy(v24, v26, 4 * *((unsigned int *)this + 137));
          vDSP_vclr(v22, 1, *((unsigned int *)this + 137));
          ++v15;
        }
        while (v15 < *((unsigned int *)this + 138));
      }
LABEL_111:
      uint64_t result = 0;
      *((void *)this + 76) = 0;
      return result;
    }
    unsigned int v30 = a5[1];
    vDSP_Length v31 = a5[2];
    uint64_t v32 = a7[2];
    int v33 = *((_DWORD *)this + 133);
    if (v33 != *((_DWORD *)this + 134))
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, 1u);
      *((float *)this + 179) = Parameter;
      unint64_t v125 = v12;
      int v36 = v13;
      float v37 = v32;
      uint64_t v38 = *((void *)this + 95);
      *(float *)(v38 + 36) = __exp10f(Parameter / 10.0);
      *((_DWORD *)this + 134) = v33;
      int v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      float v40 = ausdk::AUElement::GetParameter(v39, 0x1Au);
      vDSP_Length v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      if (v40 == 0.0) {
        unsigned int v42 = 6;
      }
      else {
        unsigned int v42 = 27;
      }
      if (v40 == 0.0) {
        int v43 = 11;
      }
      else {
        int v43 = 28;
      }
      *((float *)this + 184) = ausdk::AUElement::GetParameter(v41, v42);
      uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      unsigned int v45 = v43;
      uint64_t v32 = v37;
      uint64_t v13 = v36;
      uint64_t v12 = v125;
      float v46 = ausdk::AUElement::GetParameter(v44, v45);
      *((_DWORD *)this + 187) = v46;
      ecSUMO::fcn_set_gamma(*((ecSUMO **)this + 95), *((float *)this + 184), v46);
    }
    ecSUMO::ec_proc(*((ecSUMO **)this + 95), v11, v30, v31, v12, v13, v32, v14);
    int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    float v48 = ausdk::AUElement::GetParameter(v47, 0xFu);
    int v49 = 0;
    uint64_t v50 = *((void *)this + 95);
    int v51 = *(unsigned __int8 *)(v50 + 128);
    if (!*(unsigned char *)(v50 + 128))
    {
      float v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 150) = ausdk::AUElement::GetParameter(v52, 0x13u);
      float v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 151) = ausdk::AUElement::GetParameter(v53, 0x14u);
      if (v11->mNumberBuffers)
      {
        unint64_t v54 = 0;
        unsigned int v55 = *((_DWORD *)this + 137);
        float v56 = 0.0;
        uint64_t v57 = 16;
        float v58 = 0.0;
        do
        {
          *(float *)long long buf = 0.0;
          vDSP_svesq(*(const float **)((char *)&v11->mNumberBuffers + v57), 1, (float *)buf, v55);
          unsigned int v55 = *((_DWORD *)this + 137);
          float v59 = log10f((float)(*(float *)buf / (float)v55) + 1.0e-20) * 10.0;
          if (!v54)
          {
            float v58 = v59;
            float v59 = -0.0;
          }
          float v56 = v56 + v59;
          ++v54;
          unint64_t mNumberBuffers = v11->mNumberBuffers;
          v57 += 16;
        }
        while (v54 < mNumberBuffers);
        if (mNumberBuffers > 2) {
          float v56 = v56 / (float)(mNumberBuffers - 1);
        }
      }
      else
      {
        float v58 = 0.0;
        float v56 = 0.0;
      }
      if (v56 >= *((float *)this + 150) || (float)(v58 - v56) <= *((float *)this + 151))
      {
        int v49 = 0;
      }
      else
      {
        if (*((double *)this + 72) > 0.0)
        {
          float v61 = (caulk::concurrent::messenger *)*((void *)this + 105);
          if (v61)
          {
            uint64_t v62 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 24, 8);
            *(_DWORD *)(v62 + 16) = 0;
            *(void *)uint64_t v62 = &unk_1F14B4120;
            *(void *)(v62 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v61, (caulk::concurrent::message *)v62);
          }
        }
        int v49 = 1;
      }
    }
    BOOL v63 = v51 != 0;
    if (v51) {
      float v64 = 1.0;
    }
    else {
      float v64 = 0.0;
    }
    BOOL v65 = v48 != 0.0;
    if (v48 == 0.0) {
      BOOL v63 = 1;
    }
    int v66 = *(unsigned __int8 *)(*((void *)this + 95) + 150);
    int v67 = v63 | v49;
    if (v51) {
      BOOL v65 = 1;
    }
    int v68 = v65 | v49;
    if (v67) {
      float v69 = 1.0;
    }
    else {
      float v69 = 0.0;
    }
    if (v68) {
      float v70 = 1.0;
    }
    else {
      float v70 = 0.0;
    }
    vDSP_Length v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v71, 0x10u, v64, 0);
    uint64_t v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v72, 0x11u, v69, 0);
    int v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v73, 0x16u, v70, 0);
    uint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    if (v66) {
      float v75 = 1.0;
    }
    else {
      float v75 = 0.0;
    }
    ausdk::AUElement::SetParameter(v74, 0x1Fu, v75, 0);
    BOOL v76 = ecSUMO::fcn_isfinite_state(*((ecSUMO **)this + 95));
    uint64_t v77 = *((void *)this + 95);
    unint64_t v78 = *(unsigned int *)(v77 + 80);
    if (v78)
    {
      unint64_t v79 = *(_DWORD **)(v77 + 248);
      if ((*v79 & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        int v83 = ecSUMO::fcn_isfinite_output((ecSUMO *)v77);
LABEL_70:
        int v84 = 0;
LABEL_71:
        if (AUECSUMOLogScope(void)::once != -1) {
          dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
        }
        if (AUECSUMOLogScope(void)::scope)
        {
          float v85 = *(NSObject **)AUECSUMOLogScope(void)::scope;
          if (!*(void *)AUECSUMOLogScope(void)::scope) {
            goto LABEL_79;
          }
        }
        else
        {
          float v85 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(float *)long long buf = 4.8154e-34;
          char v128 = "AUECSUMO.cpp";
          __int16 v129 = 1024;
          int v130 = 1298;
          __int16 v131 = 1024;
          BOOL v132 = v76;
          __int16 v133 = 1024;
          int v134 = v84;
          __int16 v135 = 1024;
          int v136 = v83;
          _os_log_impl(&dword_1BB0CE000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECSUMO: ********* Reset begins *********\nAUECSUMO: state variables have finite values (1 if True): %u\nAUECSUMO: ref-signal buffers have finite values (1 if True): %u\nAUECSUMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x24u);
        }
LABEL_79:
        std::mutex::lock((std::mutex *)((char *)this + 624));
        AUECSUMO::DoCoreECInit(this);
      }
      unint64_t v80 = 0;
      unint64_t v81 = v79 + 1;
      do
      {
        if (v78 - 1 == v80) {
          goto LABEL_66;
        }
        int v82 = v81[v80++] & 0x7FFFFFFF;
      }
      while (v82 < 2139095040);
      int v83 = ecSUMO::fcn_isfinite_output((ecSUMO *)v77);
      if (v80 < v78) {
        goto LABEL_70;
      }
    }
    else
    {
LABEL_66:
      int v83 = ecSUMO::fcn_isfinite_output((ecSUMO *)v77);
    }
    if ((v76 & v83 & 1) == 0)
    {
      int v84 = 1;
      goto LABEL_71;
    }
    uint64_t v86 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
    float v87 = ausdk::AUElement::GetParameter(v86, 9u);
    uint64_t result = 0;
    *((double *)this + 72) = v87;
    LODWORD(v88) = *((_DWORD *)this + 137);
    LODWORD(v89) = *((_DWORD *)this + 136);
    double v90 = *((double *)this + 76) + (double)v88 / (double)v89;
    if (v90 < 0.0) {
      double v90 = 0.0;
    }
    *((double *)this + 76) = v90;
    if (v87 > 0.0 && v90 > v87)
    {
      float v91 = (caulk::concurrent::messenger *)*((void *)this + 105);
      if (!v91) {
        return 0;
      }
      BOOL v92 = ecSUMO::fcn_isfinite_state(*((ecSUMO **)this + 95));
      uint64_t v93 = *((void *)this + 95);
      unint64_t v94 = *(unsigned int *)(v93 + 80);
      if (v94)
      {
        atomic_uint v95 = *(_DWORD **)(v93 + 248);
        if ((*v95 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          BOOL v99 = 0;
        }
        else
        {
          unint64_t v96 = 0;
          float v97 = v95 + 1;
          while (v94 - 1 != v96)
          {
            int v98 = v97[v96++] & 0x7FFFFFFF;
            if (v98 >= 2139095040) {
              goto LABEL_95;
            }
          }
          unint64_t v96 = *(unsigned int *)(v93 + 80);
LABEL_95:
          BOOL v99 = v96 >= v94;
        }
      }
      else
      {
        BOOL v99 = 1;
      }
      char v100 = ecSUMO::fcn_isfinite_output((ecSUMO *)v93);
      unsigned int v101 = (void *)MEMORY[0x1E4FB7E90];
      uint64_t v102 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(void *)(v102 + 8) = 0;
      *(_DWORD *)(v102 + 16) = 0;
      *(_OWORD *)(v102 + 24) = *((_OWORD *)this + 38);
      *(unsigned char *)(v102 + 40) = v92;
      *(unsigned char *)(v102 + 41) = v99;
      *(unsigned char *)(v102 + 42) = v100;
      *(void *)uint64_t v102 = &unk_1F14B4080;
      caulk::concurrent::messenger::enqueue(v91, (caulk::concurrent::message *)v102);
      if (*((_DWORD *)this + 138))
      {
        unint64_t v103 = 0;
        do
        {
          float v104 = (caulk::concurrent::messenger *)*((void *)this + 105);
          uint64_t v105 = *((void *)this + 95);
          float __C = 0.0;
          *(float *)long long buf = 0.0;
          float v106 = 0.0;
          if (*(_DWORD *)(v105 + 56))
          {
            uint64_t v107 = 0;
            unint64_t v108 = 0;
            float v109 = 0.0;
            float v110 = 0.0;
            do
            {
              vDSP_svesq(*(const float **)(*(void *)(*(void *)(v105 + 752) + 24 * v103) + v107), 1, (float *)buf, *(unsigned int *)(v105 + 72));
              vDSP_distancesq(*(const float **)(*(void *)(*(void *)(v105 + 776) + 24 * v103) + v107), 1, *(const float **)(*(void *)(*(void *)(v105 + 752) + 24 * v103) + v107), 1, &__C, *(unsigned int *)(v105 + 72));
              float v110 = v110 + *(float *)buf;
              float v109 = v109 + __C;
              ++v108;
              v107 += 24;
            }
            while (v108 < *(unsigned int *)(v105 + 56));
            uint64_t v111 = *((void *)this + 95);
            int v112 = *(_DWORD *)(v111 + 56);
          }
          else
          {
            int v112 = 0;
            uint64_t v111 = v105;
            float v110 = 0.0;
            float v109 = 0.0;
          }
          float v113 = log10f((float)(v110 + *(float *)(v105 + 108)) / (float)(v109 + *(float *)(v105 + 108)));
          float __C = 0.0;
          *(float *)long long buf = 0.0;
          float v114 = 0.0;
          if (v112)
          {
            uint64_t v115 = 0;
            unint64_t v116 = 0;
            float v106 = 0.0;
            do
            {
              vDSP_svesq(*(const float **)(*(void *)(*(void *)(v111 + 752) + 24 * v103) + v115), 1, (float *)buf, *(unsigned int *)(v111 + 72));
              vDSP_svesq(*(const float **)(*(void *)(*(void *)(v111 + 776) + 24 * v103) + v115), 1, &__C, *(unsigned int *)(v111 + 72));
              float v106 = v106 + *(float *)buf;
              float v114 = v114 + __C;
              ++v116;
              v115 += 24;
            }
            while (v116 < *(unsigned int *)(v111 + 56));
          }
          float v117 = log10f((float)(v106 + *(float *)(v111 + 108)) / (float)(v114 + *(float *)(v111 + 108))) * 10.0;
          uint64_t v118 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v101 + 16))(*v101, 40, 8);
          *(_DWORD *)(v118 + 16) = 0;
          *(_DWORD *)(v118 + 24) = v103;
          *(float *)(v118 + 28) = v113 * 10.0;
          *(float *)(v118 + 32) = v117;
          *(void *)uint64_t v118 = &unk_1F14B40A8;
          *(void *)(v118 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v104, (caulk::concurrent::message *)v118);
          ++v103;
        }
        while (v103 < *((unsigned int *)this + 138));
      }
      if (*((_DWORD *)this + 139))
      {
        unint64_t v119 = 0;
        do
        {
          uint64_t v120 = (caulk::concurrent::messenger *)*((void *)this + 105);
          float v121 = log10f(*(float *)(*(void *)(*((void *)this + 95) + 248) + 4 * v119)) * 10.0;
          uint64_t v122 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v101 + 16))(*v101, 32, 8);
          *(_DWORD *)(v122 + 16) = 0;
          *(_DWORD *)(v122 + 24) = v119;
          *(float *)(v122 + 28) = v121;
          *(void *)uint64_t v122 = &unk_1F14B40D0;
          *(void *)(v122 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v120, (caulk::concurrent::message *)v122);
          ++v119;
        }
        while (v119 < *((unsigned int *)this + 139));
      }
      int v123 = (caulk::concurrent::messenger *)*((void *)this + 105);
      uint64_t v124 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v101 + 16))(*v101, 24, 8);
      *(_DWORD *)(v124 + 16) = 0;
      *(void *)uint64_t v124 = &unk_1F14B40F8;
      *(void *)(v124 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v123, (caulk::concurrent::message *)v124);
      goto LABEL_111;
    }
  }
  return result;
}

void sub_1BB561540(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL ecSUMO::fcn_isfinite_state(ecSUMO *this)
{
  float __C = 0.0;
  unint64_t v1 = *((unsigned int *)this + 15);
  if (v1)
  {
    unint64_t v3 = 0;
    BOOL v4 = 1;
    do
    {
      if (*((_DWORD *)this + 14))
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          vDSP_sve(*(const float **)(*(void *)(*((void *)this + 94) + 24 * v3) + v5), 1, &__C, *((unsigned int *)this + 18));
          BOOL v4 = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
          if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
            break;
          }
          ++v6;
          v5 += 24;
        }
        while (v6 < *((unsigned int *)this + 14));
        unint64_t v1 = *((unsigned int *)this + 15);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t ecSUMO::fcn_isfinite_output(ecSUMO *this)
{
  float __C = 0.0;
  unint64_t v1 = *((unsigned int *)this + 15);
  if (v1)
  {
    unint64_t v3 = 0;
    char v4 = 1;
    do
    {
      if (*((_DWORD *)this + 14))
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          vDSP_sve(*(const float **)(*(void *)(*((void *)this + 94) + 24 * v3) + v5), 1, &__C, *((unsigned int *)this + 18));
          if ((v4 & 1) == 0 || (LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
            break;
          }
          ++v6;
          v5 += 24;
          char v4 = 1;
          if (v6 >= *((unsigned int *)this + 14)) {
            goto LABEL_10;
          }
        }
        char v4 = 0;
LABEL_10:
        unint64_t v1 = *((unsigned int *)this + 15);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    unint64_t v3 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
    }
  }
  else
  {
    unint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315906;
    AudioUnitParameterUnit v7 = "AUECSUMO.cpp";
    __int16 v8 = 1024;
    int v9 = 1365;
    __int16 v10 = 1024;
    int v11 = v1;
    __int16 v12 = 2048;
    double v13 = v2;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v5 = "AUECSUMO.cpp";
    __int16 v6 = 1024;
    int v7 = 1370;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __int16 v6 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  float v3 = *(float *)(a1 + 32);
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    char v4 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
    }
  }
  else
  {
    char v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316162;
    uint64_t v8 = "AUECSUMO.cpp";
    __int16 v9 = 1024;
    int v10 = 1357;
    __int16 v11 = 1024;
    int v12 = v1;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    double v16 = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (caulk::concurrent::message *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 41);
  int v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    __int16 v6 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
    }
  }
  else
  {
    __int16 v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316674;
    int v10 = "AUECSUMO.cpp";
    __int16 v11 = 1024;
    int v12 = 1349;
    __int16 v13 = 2048;
    uint64_t v14 = v2;
    __int16 v15 = 2048;
    uint64_t v16 = v1;
    __int16 v17 = 1024;
    int v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Logging begins *********\nAUECSUMO: logging (period, timestamp): (%f, %f) (s)\nAUECSUMO: state variables have finite values (1 if True): %u\nAUECSUMO: ref-signal buffers have finite values (1 if True): %u\nAUECSUMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void AUECSUMO::DoCoreECInit(AUECSUMO *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 95)) {
    std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
  }
  operator new();
}

uint64_t *std::unique_ptr<ecSUMO>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    int v3 = *(vDSP_DFT_SetupStruct **)(v2 + 1352);
    if (v3) {
      vDSP_DFT_DestroySetup(v3);
    }
    int v4 = *(vDSP_DFT_SetupStruct **)(v2 + 1360);
    if (v4) {
      vDSP_DFT_DestroySetup(v4);
    }
    uint64_t v24 = (void **)(v2 + 1328);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1304);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1280);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1256);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1232);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1208);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1184);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1160);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1136);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1112);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1088);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1064);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1040);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 1016);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 992);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 968);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 944);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 920);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 896);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 872);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 848);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 824);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 800);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 776);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 752);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 728);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 704);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 680);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 656);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    int v5 = *(void **)(v2 + 632);
    if (v5)
    {
      *(void *)(v2 + 640) = v5;
      operator delete(v5);
    }
    __int16 v6 = *(void **)(v2 + 608);
    if (v6)
    {
      *(void *)(v2 + 616) = v6;
      operator delete(v6);
    }
    int v7 = *(void **)(v2 + 584);
    if (v7)
    {
      *(void *)(v2 + 592) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(v2 + 560);
    if (v8)
    {
      *(void *)(v2 + 568) = v8;
      operator delete(v8);
    }
    __int16 v9 = *(void **)(v2 + 536);
    if (v9)
    {
      *(void *)(v2 + 544) = v9;
      operator delete(v9);
    }
    int v10 = *(void **)(v2 + 512);
    if (v10)
    {
      *(void *)(v2 + 520) = v10;
      operator delete(v10);
    }
    __int16 v11 = *(void **)(v2 + 488);
    if (v11)
    {
      *(void *)(v2 + 496) = v11;
      operator delete(v11);
    }
    int v12 = *(void **)(v2 + 464);
    if (v12)
    {
      *(void *)(v2 + 472) = v12;
      operator delete(v12);
    }
    __int16 v13 = *(void **)(v2 + 440);
    if (v13)
    {
      *(void *)(v2 + 448) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v2 + 416);
    if (v14)
    {
      *(void *)(v2 + 424) = v14;
      operator delete(v14);
    }
    __int16 v15 = *(void **)(v2 + 392);
    if (v15)
    {
      *(void *)(v2 + 400) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v2 + 368);
    if (v16)
    {
      *(void *)(v2 + 376) = v16;
      operator delete(v16);
    }
    __int16 v17 = *(void **)(v2 + 344);
    if (v17)
    {
      *(void *)(v2 + 352) = v17;
      operator delete(v17);
    }
    int v18 = *(void **)(v2 + 320);
    if (v18)
    {
      *(void *)(v2 + 328) = v18;
      operator delete(v18);
    }
    uint64_t v24 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    uint64_t v24 = (void **)(v2 + 272);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v24);
    __int16 v19 = *(void **)(v2 + 248);
    if (v19)
    {
      *(void *)(v2 + 256) = v19;
      operator delete(v19);
    }
    int v20 = *(void **)(v2 + 224);
    if (v20)
    {
      *(void *)(v2 + 232) = v20;
      operator delete(v20);
    }
    __int16 v21 = *(void **)(v2 + 200);
    if (v21)
    {
      *(void *)(v2 + 208) = v21;
      operator delete(v21);
    }
    int v22 = *(void **)(v2 + 176);
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = *(void **)(v2 + 152);
    if (v23)
    {
      *(void *)(v2 + 160) = v23;
      operator delete(v23);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t ecSUMO::fcn_tragic_window(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a5)
  {
    if (a4)
    {
      unsigned int v5 = 0;
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (a3)
        {
          uint64_t v7 = *(void *)(result + 200);
          uint64_t v8 = *(float **)(a2 + 24 * (~i + a4));
          unsigned int v9 = v5;
          uint64_t v10 = a3;
          do
          {
            *v8++ = *(float *)(v7 + 4 * v9++) * *(float *)(result + 104);
            --v10;
          }
          while (v10);
        }
        v5 += a3;
      }
    }
  }
  else if (a4)
  {
    uint64_t v11 = 0;
    int v12 = a4 * a3 - 1;
    do
    {
      if (a3)
      {
        uint64_t v13 = *(void *)(result + 200);
        uint64_t v14 = *(float **)(a2 + 24 * (~v11 + a4));
        unsigned int v15 = v12;
        uint64_t v16 = a3;
        do
        {
          *v14++ = *(float *)(v13 + 4 * v15--) * *(float *)(result + 100);
          --v16;
        }
        while (v16);
      }
      ++v11;
      v12 -= a3;
    }
    while (v11 != a4);
  }
  return result;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    uint64_t v1 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v5 = "AUECSUMO.cpp";
    __int16 v6 = 1024;
    int v7 = 1440;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECSUMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void ___ZL16AUECSUMOLogScopev_block_invoke()
{
}

uint64_t AUECSUMO::CanScheduleParameters(AUECSUMO *this)
{
  return 0;
}

uint64_t AUECSUMO::SetParameter(AUECSUMO *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  ++*((_DWORD *)this + 133);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUECSUMO::SetProperty(AUECSUMO *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, int a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 == 803800)
  {
    if (*((unsigned char *)this + 17)) {
      return 4294956447;
    }
    if (a6 == 8)
    {
      CFDictionaryRef v8 = *a5;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a5, @"wolalatency");
      CFNumberGetValue(Value, kCFNumberFloat32Type, (char *)this + 688);
      CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(v8, @"window");
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v13, v10);
      if (v15)
      {
        uint64_t v11 = v13;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 816, v13, v14, (v14 - (uint64_t)v13) >> 2);
        *((unsigned char *)this + 756) = 1;
        if (AUECSUMOLogScope(void)::once != -1) {
          dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
        }
        if (AUECSUMOLogScope(void)::scope)
        {
          int v12 = *(NSObject **)AUECSUMOLogScope(void)::scope;
          if (!*(void *)AUECSUMOLogScope(void)::scope) {
            goto LABEL_24;
          }
        }
        else
        {
          int v12 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          __int16 v17 = "AUECSUMO.cpp";
          __int16 v18 = 1024;
          int v19 = 1136;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: ********* Window Initialized *********\n", buf, 0x12u);
        }
        goto LABEL_24;
      }
    }
    return 4294956445;
  }
  if (a2 == 603800)
  {
    if (*((unsigned char *)this + 17)) {
      return 4294956447;
    }
    if (a6 == 8)
    {
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v13, *a5);
      if (v15)
      {
        uint64_t v11 = v13;
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 792, v13, v14, (v14 - (uint64_t)v13) >> 2);
        *((unsigned char *)this + 757) = 1;
LABEL_24:
        if (v11) {
          operator delete(v11);
        }
        return 0;
      }
    }
    return 4294956445;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *((unsigned char *)this + 528) = *(_DWORD *)a5 != 0;
  return result;
}

void sub_1BB56337C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUECSUMO::GetProperty(AUECSUMO *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 103799)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
LABEL_22:
          int v12 = (std::mutex *)((char *)this + 624);
          std::mutex::lock((std::mutex *)((char *)this + 624));
          if (a2 == 103800)
          {
            CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)this + 96);
            goto LABEL_34;
          }
          int v19 = (const void *)*((void *)this + 96);
          unsigned int v20 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142);
          goto LABEL_48;
        default:
          return result;
      }
LABEL_46:
      *a5 = v9;
      return result;
    }
    if (a2 > 6698)
    {
      if (a2 == 6699)
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
        unsigned int v11 = 16;
LABEL_43:
        float Parameter = ausdk::AUElement::GetParameter(Element, v11);
        uint64_t result = 0;
        unsigned int v9 = Parameter;
        goto LABEL_46;
      }
      if (a2 != 7699) {
        return result;
      }
      uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      float v15 = ausdk::AUElement::GetParameter(v14, 0x11u);
      uint64_t result = 0;
      BOOL v16 = v15 == 0.0;
    }
    else
    {
      if (a2 != 4699)
      {
        if (a2 != 5699) {
          return result;
        }
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
        unsigned int v11 = 22;
        goto LABEL_43;
      }
      __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      float v18 = ausdk::AUElement::GetParameter(v17, 0x11u);
      uint64_t result = 0;
      BOOL v16 = v18 == 1.0;
    }
    unsigned int v9 = v16;
    goto LABEL_46;
  }
  if (a2 <= 503799)
  {
    if (a2 > 303799)
    {
      if (a2 == 303800)
      {
        uint64_t result = 0;
        unsigned int v9 = *((_DWORD *)this + 139);
      }
      else
      {
        if (a2 != 403800) {
          return result;
        }
        uint64_t result = 0;
        unsigned int v9 = *((_DWORD *)this + 142);
      }
      goto LABEL_46;
    }
    if (a2 != 103800)
    {
      if (a2 != 203800) {
        return result;
      }
      uint64_t result = 0;
      unsigned int v9 = *((_DWORD *)this + 138);
      goto LABEL_46;
    }
    goto LABEL_22;
  }
  if (a2 > 703799)
  {
    if (a2 == 703800 || a2 == 803800)
    {
      int v12 = (std::mutex *)((char *)this + 624);
      std::mutex::lock((std::mutex *)((char *)this + 624));
      memcpy(*((void **)this + 102), *(const void **)(*((void *)this + 95) + 200), 4* *(unsigned int *)(*((void *)this + 95) + 56)* (unint64_t)*(unsigned int *)(*((void *)this + 95) + 72));
      if (a2 == 803800)
      {
        CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)this + 102);
        goto LABEL_34;
      }
      int v19 = (const void *)*((void *)this + 102);
      unsigned int v20 = *((_DWORD *)this + 137) * *((_DWORD *)this + 147);
      goto LABEL_48;
    }
  }
  else if (a2 == 503800 || a2 == 603800)
  {
    int v12 = (std::mutex *)((char *)this + 624);
    std::mutex::lock((std::mutex *)((char *)this + 624));
    if (a2 == 603800)
    {
      CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)this + 99);
LABEL_34:
      *(void *)a5 = CFArray;
LABEL_49:
      std::mutex::unlock(v12);
      return 0;
    }
    int v19 = (const void *)*((void *)this + 99);
    unsigned int v20 = 2
        * (*((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146)
         + *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137));
LABEL_48:
    memcpy(a5, v19, 4 * v20);
    goto LABEL_49;
  }
  return result;
}

void sub_1BB5636BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECSUMO::GetPropertyInfo(AUECSUMO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 103799)
  {
    if (a2 <= 503799)
    {
      if (a2 <= 303799)
      {
        if (a2 != 103800)
        {
          int v8 = 203800;
          goto LABEL_23;
        }
        *a6 = 0;
LABEL_31:
        int v14 = 8;
        goto LABEL_36;
      }
      if (a2 != 303800)
      {
        int v8 = 403800;
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    if (a2 <= 703799)
    {
      if (a2 == 503800)
      {
        *a6 = 0;
        int v15 = *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146);
        int v14 = 8 * (v15 + v15 * *((_DWORD *)this + 137));
        goto LABEL_36;
      }
      int v9 = 603800;
      goto LABEL_28;
    }
    if (a2 != 703800)
    {
      int v9 = 803800;
LABEL_28:
      if (a2 != v9) {
        return result;
      }
      *a6 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_31;
    }
    *a6 = 0;
    int v13 = *((_DWORD *)this + 147);
    int v12 = *((_DWORD *)this + 137);
LABEL_35:
    int v14 = 4 * v13 * v12;
    goto LABEL_36;
  }
  if (a2 <= 4698)
  {
    if (a2 == 21)
    {
      *a6 = 1;
      goto LABEL_25;
    }
    if (a2 == 3700) {
      goto LABEL_24;
    }
    if (a2 != 3800) {
      return result;
    }
    *a6 = 0;
    int v10 = *((_DWORD *)this + 138);
    int v11 = *((_DWORD *)this + 139);
    int v12 = *((_DWORD *)this + 142);
    int v13 = v10 * v11;
    goto LABEL_35;
  }
  if (a2 > 6698)
  {
    if (a2 != 6699)
    {
      int v8 = 7699;
LABEL_23:
      if (a2 != v8) {
        return result;
      }
    }
  }
  else if (a2 != 4699)
  {
    int v8 = 5699;
    goto LABEL_23;
  }
LABEL_24:
  *a6 = 0;
LABEL_25:
  int v14 = 4;
LABEL_36:
  uint64_t result = 0;
  *a5 = v14;
  return result;
}

uint64_t AUECSUMO::Reset(AUECSUMO *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    unsigned int v5 = "AUECSUMO.cpp";
    __int16 v6 = 1024;
    int v7 = 478;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 17)) {
    AUECSUMO::DoCoreECInit(this);
  }
  return 0;
}

uint64_t *AUECSUMO::Cleanup(AUECSUMO *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      return std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    unsigned int v5 = "AUECSUMO.cpp";
    __int16 v6 = 1024;
    int v7 = 413;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
  return std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
}

uint64_t AUECSUMO::Initialize(AUECSUMO *this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (AUECSUMOLogScope(void)::once != -1) {
    dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
  }
  if (AUECSUMOLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECSUMOLogScope(void)::scope;
    if (!*(void *)AUECSUMOLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUECSUMO.cpp";
    __int16 v63 = 1024;
    int v64 = 221;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Initialize.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 1u);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 80), 2u);
  uint64_t v6 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 0);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 1u);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 2u);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((AUECSUMO *)((char *)this + 128), 3u);
  int v10 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v10;
  int v11 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v11;
  *((_DWORD *)this + 140) = *(_DWORD *)(v5 + 108);
  double v12 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v12;
  if (v12 != *(double *)(v4 + 80)) {
    return 4294956428;
  }
  uint64_t v14 = v9;
  double v15 = *(double *)(v6 + 80);
  uint64_t result = 4294956428;
  if (v15 == v12 && v15 == *(double *)(v8 + 80) && v15 == *(double *)(v7 + 80))
  {
    int v16 = *(_DWORD *)(v6 + 108);
    if (v16 == v10 && v16 == *(_DWORD *)(v7 + 108) && v11 == *(_DWORD *)(v8 + 108) && *(_DWORD *)(v14 + 108) == v10)
    {
      __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v17, 0);
      float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 179) = ausdk::AUElement::GetParameter(v18, 1u);
      int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 180) = ausdk::AUElement::GetParameter(v19, 2u);
      unsigned int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 181) = ausdk::AUElement::GetParameter(v20, 3u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      __int16 v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 182) = ausdk::AUElement::GetParameter(v21, 4u);
      int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 183) = ausdk::AUElement::GetParameter(v22, 5u);
      uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 184) = ausdk::AUElement::GetParameter(v23, 6u);
      uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 185) = ausdk::AUElement::GetParameter(v24, 7u);
      uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 186) = ausdk::AUElement::GetParameter(v25, 0xAu);
      uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((unsigned char *)this + 692) = ausdk::AUElement::GetParameter(v26, 0x15u) != 0.0;
      uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((unsigned char *)this + 693) = ausdk::AUElement::GetParameter(v27, 0x17u) != 0.0;
      uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v28, 0x18u);
      int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 175) = ausdk::AUElement::GetParameter(v29, 0x19u);
      unsigned int v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((unsigned char *)this + 712) = ausdk::AUElement::GetParameter(v30, 0x1Du) != 0.0;
      vDSP_Length v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((unsigned char *)this + 713) = ausdk::AUElement::GetParameter(v31, 0x1Eu) != 0.0;
      LODWORD(v32) = *((_DWORD *)this + 139);
      unsigned int v33 = (exp2((double)v32) + -1.0);
      unsigned int v34 = *((_DWORD *)this + 186);
      if (v34 > v33)
      {
        *((_DWORD *)this + 186) = v34 & v33;
        uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v35, 0xAu, (float)*((unsigned int *)this + 186), 0);
      }
      int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 187) = ausdk::AUElement::GetParameter(v36, 0xBu);
      float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(v37, 0xCu);
      *((_DWORD *)this + 147) = Parameter;
      if (Parameter <= 1)
      {
        *((_DWORD *)this + 147) = 2;
        int v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v39, 0xCu, (float)*((unsigned int *)this + 147), 0);
      }
      float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 188) = ausdk::AUElement::GetParameter(v40, 0xDu);
      vDSP_Length v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v41, 0xEu);
      unsigned int v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(v42, 0x12u);
      int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 150) = ausdk::AUElement::GetParameter(v43, 0x13u);
      uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((float *)this + 151) = ausdk::AUElement::GetParameter(v44, 0x14u);
      unsigned int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      unsigned int v46 = ausdk::AUElement::GetParameter(v45, 8u);
      *((_DWORD *)this + 143) = v46;
      unsigned int v47 = *((_DWORD *)this + 137);
      float v48 = (float)*((unsigned int *)this + 136);
      float v49 = (float)v47;
      unsigned int v50 = v47
          * vcvtps_u32_f32((float)(float)((float)(v48 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v47);
      *((_DWORD *)this + 141) = v50;
      if (v50 <= v47)
      {
        unsigned int v50 = 2 * v47;
        *((_DWORD *)this + 141) = 2 * v47;
        *((_DWORD *)this + 135) = (float)((float)((float)(2 * v47) / v48) * 1000.0);
      }
      unsigned int v51 = v47 * vcvtps_u32_f32((float)(float)((float)(v48 * (float)v46) / 1000.0) / v49);
      *((_DWORD *)this + 142) = v51;
      if (v51 <= v47)
      {
        unsigned int v51 = 2 * v47;
        *((_DWORD *)this + 142) = 2 * v47;
        *((_DWORD *)this + 143) = (float)((float)((float)(2 * v47) / v48) * 1000.0);
      }
      if (v51 <= v50)
      {
        float v52 = (float)v50;
      }
      else
      {
        *((_DWORD *)this + 142) = v50;
        float v52 = (float)v50;
        *((_DWORD *)this + 143) = (float)((float)((float)v50 / v48) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v52 / v49);
      unsigned int v53 = v47
          * vcvtps_u32_f32((float)(float)((float)(v48 * (float)*((unsigned int *)this + 175)) / 1000.0) / v49);
      *((_DWORD *)this + 176) = v53;
      if (v53 <= v47)
      {
        *((_DWORD *)this + 176) = v47;
        *((_DWORD *)this + 175) = (float)((float)(v49 / v48) * 1000.0);
        float v54 = (float)v47;
      }
      else
      {
        float v54 = (float)v53;
      }
      *((_DWORD *)this + 177) = vcvtps_u32_f32(v54 / v49);
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      unsigned int v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v55, 9u);
      *((_OWORD *)this + 38) = 0u;
      BOOL v61 = 0;
      AppFloatCFNumberRef Value = CACFPreferencesGetAppFloatValue(@"ecsumo_log_period_in_seconds", @"com.apple.coreaudio", &v61);
      if (v61)
      {
        float v58 = AppFloatValue;
        if (v58 > 0.0)
        {
          *((double *)this + 72) = v58;
          float v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECSUMO *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v59, 9u, v58, 0);
          if (AUECSUMOLogScope(void)::once != -1) {
            dispatch_once(&AUECSUMOLogScope(void)::once, &__block_literal_global_12796);
          }
          if (AUECSUMOLogScope(void)::scope)
          {
            float v60 = *(NSObject **)AUECSUMOLogScope(void)::scope;
            if (!*(void *)AUECSUMOLogScope(void)::scope) {
              goto LABEL_43;
            }
          }
          else
          {
            float v60 = MEMORY[0x1E4F14500];
          }
          BOOL v56 = os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
          if (v56)
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "AUECSUMO.cpp";
            __int16 v63 = 1024;
            int v64 = 336;
            __int16 v65 = 2048;
            double v66 = v58;
            _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECSUMO: Using logPeriod of (%g)s as specified in defaults write ecsumo_log_period_in_seconds.\n", (uint8_t *)buf, 0x1Cu);
          }
        }
      }
LABEL_43:
      if (!*((void *)this + 105) && *((double *)this + 72) > 0.0)
      {
        caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v56);
        std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>();
      }
      AUECSUMO::DoCoreECInit(this);
    }
  }
  return result;
}

void AUECSUMO::~AUECSUMO(AUECSUMO *this)
{
  AUECSUMO::~AUECSUMO(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14B3E10;
  AUECSUMO::Cleanup(this);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 105, 0);
  uint64_t v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    *((void *)this + 103) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 99);
  if (v3)
  {
    *((void *)this + 100) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 96);
  if (v4)
  {
    *((void *)this + 97) = v4;
    operator delete(v4);
  }
  std::unique_ptr<ecSUMO>::reset[abi:ne180100]((uint64_t *)this + 95, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 624));

  ausdk::AUBase::~AUBase(this);
}

void ScottySTFTUpmixer::ProcessUpmixer(Crossover2f **this, float **a2, float **a3)
{
  int v3 = a2;
  uint64_t v4 = (ScottySTFTUpmixer *)this;
  uint64_t v303 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8) && *((unsigned char *)this + 9))
  {
    long long v301 = 0u;
    long long v302 = 0u;
    *(_OWORD *)unsigned __int8 v299 = 0u;
    long long v300 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    *(_OWORD *)float v295 = 0u;
    long long v296 = 0u;
    long long v293 = 0u;
    long long v294 = 0u;
    *(_OWORD *)int v291 = 0u;
    long long v292 = 0u;
    uint64_t v5 = this[6];
    int v275 = v4;
    if (v5
      && (Crossover2f::IsLowCrossoverEnabled(v5) || Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v4 + 6))))
    {
      if (*((_DWORD *)v4 + 81))
      {
        unint64_t v6 = 0;
        do
        {
          v299[v6] = (float *)(*((void *)v4 + 93) + 4 * (*((_DWORD *)v4 + 86) * v6));
          if (Crossover2f::IsLowCrossoverEnabled(*((Crossover2f **)v4 + 6))) {
            uint64_t v7 = (float *)(*((void *)v4 + 96) + 4 * (*((_DWORD *)v4 + 86) * v6));
          }
          else {
            uint64_t v7 = 0;
          }
          v295[v6] = v7;
          if (Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v4 + 6))) {
            uint64_t v8 = (float *)(*((void *)v4 + 99) + 4 * (*((_DWORD *)v4 + 86) * v6));
          }
          else {
            uint64_t v8 = 0;
          }
          v291[v6++] = v8;
          unint64_t v9 = *((unsigned int *)v4 + 81);
        }
        while (v6 < v9);
      }
      else
      {
        LODWORD(v9) = 0;
      }
      Crossover2f::Process(*((void *)v4 + 6), v3, v295, v291, v299, v9, *((unsigned int *)v4 + 86), *((unsigned __int8 *)v4 + 32), (float *const *)__E);
      uint64_t v257 = (_DWORD *)((char *)v4 + 352);
      float v18 = (unsigned int *)((char *)v4 + 340);
      uint64_t v273 = (unsigned int *)((char *)v4 + 344);
      if (!*((_DWORD *)v4 + 88)) {
        goto LABEL_32;
      }
      unint64_t v259 = (char *)v4 + 340;
      int v16 = *((_DWORD *)v4 + 85);
      uint64_t v17 = *((unsigned int *)v4 + 86);
    }
    else
    {
      uint64_t v11 = *((unsigned int *)v4 + 88);
      if (!v11)
      {
        float v18 = (unsigned int *)((char *)v4 + 340);
        uint64_t v273 = (unsigned int *)((char *)v4 + 344);
        uint64_t v257 = (_DWORD *)((char *)v4 + 352);
        goto LABEL_32;
      }
      double v12 = v291;
      int v13 = v295;
      uint64_t v14 = v299;
      do
      {
        double v15 = *v3++;
        *v14++ = v15;
        *v13++ = 0;
        *v12++ = 0;
        --v11;
      }
      while (v11);
      unint64_t v259 = (char *)v4 + 340;
      int v16 = *((_DWORD *)v4 + 85);
      uint64_t v273 = (unsigned int *)((char *)v4 + 344);
      uint64_t v17 = *((unsigned int *)v4 + 86);
      uint64_t v257 = (_DWORD *)((char *)v4 + 352);
    }
    int v19 = v4;
    unsigned int v20 = 0;
    unint64_t v21 = 0;
    int v22 = v16 - v17;
    __uint64_t n = 4 * (v16 - v17);
    size_t v23 = 4 * v17;
    uint64_t v24 = (DSPSplitComplex *)((char *)v19 + 1928);
    uint64_t v25 = (char *)v19 + 912;
    do
    {
      uint64_t v26 = v17;
      memcpy((void *)(*((void *)v19 + 81) + 4 * v20), (const void *)(*((void *)v19 + 81) + 4 * (v17 + v20)), __n);
      memcpy((void *)(*((void *)v19 + 81) + 4 * (v22 + v20)), v299[v21], v23);
      vDSP_vmul((const float *)(*((void *)v19 + 81) + 4 * (*((_DWORD *)v19 + 85) * v21)), 1, *((const float **)v19 + 226), 1, *((float **)v19 + 118), 1, *((unsigned int *)v19 + 85));
      vDSP_ctoz(*((const DSPComplex **)v19 + 118), 2, v24, 1, *((unsigned int *)v19 + 84));
      uint64_t v28 = (MultiRadixRealFFT *)*((void *)v19 + 80);
      if (v28) {
        MultiRadixRealFFT::RealInPlaceTransform(v28, v24, 1, v27);
      }
      *(float *)&unsigned long long __B = 1.0 / (float)(2 * v16);
      int v19 = v275;
      vDSP_vsmul(v24->realp, 1, (const float *)&__B, v24->realp, 1, *((unsigned int *)v275 + 84));
      vDSP_vsmul(v24->imagp, 1, (const float *)&__B, v24->imagp, 1, *((unsigned int *)v275 + 84));
      imagp = v24->imagp;
      *(float *)&v25[4 * v21] = *imagp;
      float *imagp = 0.0;
      ++v21;
      v20 += v16;
      ++v24;
      uint64_t v17 = v26;
    }
    while (v21 < *((unsigned int *)v275 + 88));
    float v18 = (unsigned int *)v259;
    uint64_t v4 = v275;
LABEL_32:
    BOOL v260 = v18;
    if (*((unsigned char *)v4 + 2440))
    {
      *((_DWORD *)v4 + 146) = *((_DWORD *)v4 + 113);
      long long v30 = *(_OWORD *)((char *)v4 + 436);
      *(_OWORD *)((char *)v4 + 552) = *(_OWORD *)((char *)v4 + 420);
      *(_OWORD *)((char *)v4 + 568) = v30;
      long long v31 = *(_OWORD *)((char *)v4 + 372);
      *(_OWORD *)((char *)v4 + 488) = *(_OWORD *)((char *)v4 + 356);
      *(_OWORD *)((char *)v4 + 504) = v31;
      long long v32 = *(_OWORD *)((char *)v4 + 404);
      *(_OWORD *)((char *)v4 + 520) = *(_OWORD *)((char *)v4 + 388);
      *(_OWORD *)((char *)v4 + 536) = v32;
      long long v33 = *(_OWORD *)((char *)v4 + 340);
      *(_OWORD *)((char *)v4 + 456) = *(_OWORD *)((char *)v4 + 324);
      *(_OWORD *)((char *)v4 + 472) = v33;
      ScottySTFTUpmixer::calculate_pan_tables(v4);
      ScottySTFTUpmixer::calculate_smoothing_windows(v4, *((float *)v4 + 138), *((float *)v4 + 103), *((float *)v4 + 104), 0);
      *((unsigned char *)v4 + 2440) = 0;
      goto LABEL_100;
    }
    float v34 = *((float *)v4 + 148);
    float v35 = *((float *)v4 + 90);
    float v36 = *((float *)v4 + 123);
    if (v36 != v35)
    {
      float v37 = (float)((float)(1.0 - v34) * v35) + (float)(v34 * v36);
      if (vabds_f32(v37, v35) >= (float)((float)(fabsf(v35) * 0.01) + 0.001)) {
        float v35 = v37;
      }
      *((float *)v4 + 123) = v35;
    }
    float v38 = *((float *)v4 + 98);
    float v39 = *((float *)v4 + 131);
    if (v39 != v38)
    {
      float v40 = (float)((float)(1.0 - v34) * v38) + (float)(v34 * v39);
      if (vabds_f32(v40, v38) >= (float)((float)(fabsf(v38) * 0.01) + 0.001)) {
        float v38 = v40;
      }
      *((float *)v4 + 131) = v38;
    }
    float v41 = *((float *)v4 + 96);
    float v42 = *((float *)v4 + 129);
    if (v42 != v41)
    {
      float v43 = (float)((float)(1.0 - v34) * v41) + (float)(v34 * v42);
      if (vabds_f32(v43, v41) >= (float)((float)(fabsf(v41) * 0.01) + 0.001)) {
        float v41 = v43;
      }
      *((float *)v4 + 129) = v41;
    }
    float v44 = *((float *)v4 + 97);
    float v45 = *((float *)v4 + 130);
    if (v45 != v44)
    {
      float v46 = (float)((float)(1.0 - v34) * v44) + (float)(v34 * v45);
      if (vabds_f32(v46, v44) >= (float)((float)(fabsf(v44) * 0.01) + 0.001)) {
        float v44 = v46;
      }
      *((float *)v4 + 130) = v44;
    }
    float v47 = *((float *)v4 + 95);
    float v48 = *((float *)v4 + 128);
    if (v48 != v47)
    {
      float v49 = (float)((float)(1.0 - v34) * v47) + (float)(v34 * v48);
      if (vabds_f32(v49, v47) >= (float)((float)(fabsf(v47) * 0.01) + 0.001)) {
        float v47 = v49;
      }
      *((float *)v4 + 128) = v47;
    }
    float v50 = *((float *)v4 + 83);
    float v51 = *((float *)v4 + 116);
    if (v51 != v50)
    {
      float v52 = (float)((float)(1.0 - v34) * v50) + (float)(v34 * v51);
      if (vabds_f32(v52, v50) >= (float)((float)(fabsf(v50) * 0.01) + 0.001)) {
        float v50 = v52;
      }
      *((float *)v4 + 116) = v50;
    }
    float v53 = *((float *)v4 + 93);
    float v54 = *((float *)v4 + 126);
    if (v54 != v53)
    {
      float v55 = (float)((float)(1.0 - v34) * v53) + (float)(v34 * v54);
      if (vabds_f32(v55, v53) < (float)((float)(fabsf(v53) * 0.01) + 0.001)) {
        float v55 = *((float *)v4 + 93);
      }
      *((float *)v4 + 126) = v55;
    }
    float v56 = *((float *)v4 + 94);
    float v57 = *((float *)v4 + 127);
    if (v57 != v56)
    {
      float v58 = (float)((float)(1.0 - v34) * v56) + (float)(v34 * v57);
      if (vabds_f32(v58, v56) < (float)((float)(fabsf(v56) * 0.01) + 0.001)) {
        float v58 = *((float *)v4 + 94);
      }
      *((float *)v4 + 127) = v58;
    }
    int v59 = v54 != v53;
    if (v57 != v56) {
      int v59 = 1;
    }
    float v60 = *((float *)v4 + 106);
    float v61 = *((float *)v4 + 139);
    if (v61 != v60)
    {
      float v62 = (float)((float)(1.0 - v34) * v60) + (float)(v34 * v61);
      if (vabds_f32(v62, v60) < (float)((float)(fabsf(v60) * 0.01) + 0.001)) {
        float v62 = *((float *)v4 + 106);
      }
      *((float *)v4 + 139) = v62;
    }
    if (v61 != v60) {
      int v59 = 1;
    }
    float v63 = *((float *)v4 + 107);
    float v64 = *((float *)v4 + 140);
    if (v64 != v63)
    {
      float v65 = (float)((float)(1.0 - v34) * v63) + (float)(v34 * v64);
      if (vabds_f32(v65, v63) < (float)((float)(fabsf(v63) * 0.01) + 0.001)) {
        float v65 = *((float *)v4 + 107);
      }
      *((float *)v4 + 140) = v65;
    }
    if (v64 != v63) {
      int v59 = 1;
    }
    float v66 = *((float *)v4 + 108);
    float v67 = *((float *)v4 + 141);
    if (v67 != v66)
    {
      float v68 = (float)((float)(1.0 - v34) * v66) + (float)(v34 * v67);
      if (vabds_f32(v68, v66) < (float)((float)(fabsf(v66) * 0.01) + 0.001)) {
        float v68 = *((float *)v4 + 108);
      }
      *((float *)v4 + 141) = v68;
    }
    if (v67 != v66) {
      int v59 = 1;
    }
    float v69 = *((float *)v4 + 109);
    float v70 = *((float *)v4 + 142);
    if (v70 != v69)
    {
      float v71 = (float)((float)(1.0 - v34) * v69) + (float)(v34 * v70);
      if (vabds_f32(v71, v69) < (float)((float)(fabsf(v69) * 0.01) + 0.001)) {
        float v71 = *((float *)v4 + 109);
      }
      *((float *)v4 + 142) = v71;
    }
    float v72 = *((float *)v4 + 110);
    float v73 = *((float *)v4 + 143);
    if (v73 == v72)
    {
      if (((v70 == v69) & ~v59) != 0) {
        goto LABEL_96;
      }
    }
    else
    {
      float v74 = (float)((float)(1.0 - v34) * v72) + (float)(v34 * v73);
      if (vabds_f32(v74, v72) < (float)((float)(fabsf(v72) * 0.01) + 0.001)) {
        float v74 = *((float *)v4 + 110);
      }
      *((float *)v4 + 143) = v74;
    }
    ScottySTFTUpmixer::calculate_pan_tables(v4);
LABEL_96:
    float v75 = *((float *)v4 + 105);
    float v76 = *((float *)v4 + 138);
    if (v76 != v75)
    {
      float v77 = (float)((float)(1.0 - v34) * v75) + (float)(v34 * v76);
      if (vabds_f32(v77, v75) >= (float)((float)(fabsf(v75) * 0.01) + 0.001)) {
        float v75 = v77;
      }
      *((float *)v4 + 138) = v75;
      ScottySTFTUpmixer::calculate_smoothing_windows(v4, v75, *((float *)v4 + 103), *((float *)v4 + 104), 0);
    }
LABEL_100:
    unsigned int v78 = atomic_load((unsigned int *)v4 + 147);
    if (v78 != *((_DWORD *)v4 + 113))
    {
      *((_DWORD *)v4 + 113) = v78;
      uint64_t v79 = *((void *)v4 + 5);
      if (v79)
      {
        unsigned int v80 = atomic_load((unsigned int *)(v79 + 36));
        *((_DWORD *)v4 + 103) = v80;
        float v81 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)v4 + 5) + 40)));
        *((float *)v4 + 104) = v81;
        ScottySTFTUpmixer::calculate_smoothing_windows(v4, *((float *)v4 + 138), *((float *)v4 + 103), v81, 0);
        unsigned int v82 = atomic_load((unsigned int *)(*((void *)v4 + 5) + 60));
        *((_DWORD *)v4 + 99) = v82;
        unsigned int v83 = atomic_load((unsigned int *)(*((void *)v4 + 5) + 64));
        *((_DWORD *)v4 + 100) = v83;
        unsigned int v84 = atomic_load((unsigned int *)(*((void *)v4 + 5) + 68));
        *((_DWORD *)v4 + 101) = v84;
        unsigned int v85 = atomic_load((unsigned int *)(*((void *)v4 + 5) + 72));
        *((_DWORD *)v4 + 102) = v85;
        ScottySTFTUpmixer::calculate_tc_vectors(v4);
      }
    }
    BOOL v261 = (DSPSplitComplex *)((char *)v4 + 1944);
    DSPSplitComplex __A = (DSPSplitComplex *)((char *)v4 + 1928);
    __na = (DSPSplitComplex *)((char *)v4 + 2056);
    uint64_t v86 = (DSPSplitComplex *)((char *)v4 + 2088);
    unsigned int v258 = (DSPSplitComplex *)((char *)v4 + 2104);
    if (*((unsigned char *)v4 + 448) && *((_DWORD *)v4 + 4) == 2) {
      goto LABEL_252;
    }
    vDSP_Length v87 = *((unsigned int *)v4 + 84);
    float __C = 1.0;
    float v288 = -1.0;
    vDSP_Length __N = (float *)*((void *)v4 + 124);
    DSPSplitComplex __D = (float *)*((void *)v4 + 121);
    unint64_t v88 = (float *)*((void *)v4 + 130);
    uint64_t v255 = (float *)*((void *)v4 + 127);
    *(void *)&unsigned long long __B = v255;
    *((void *)&__B + 1) = v88;
    Float64 v252 = (DSPSplitComplex *)((char *)v4 + 2088);
    uint64_t v253 = (DSPSplitComplex *)v88;
    vDSP_Length v250 = (float *)*((void *)v4 + 160);
    unint64_t v89 = (float *)*((void *)v4 + 187);
    double v90 = (const float *)*((void *)v4 + 223);
    vDSP_vsmsa(v90, 1, &v288, &__C, v89, 1, v87);
    float v91 = (const float *)*((void *)v4 + 190);
    BOOL v92 = (float *)*((void *)v4 + 196);
    uint64_t v93 = (float *)*((void *)v4 + 184);
    v290.realp = (float *)*((void *)v4 + 193);
    v290.imagp = v93;
    vDSP_zvcmul(__A, 1, __A, 1, &v290, 1, v87);
    unint64_t v94 = *((unsigned int *)v4 + 84);
    if (v94)
    {
      unint64_t v95 = 0;
      realp = v290.realp;
      float v97 = (float *)v91;
      do
      {
        vDSP_Length v98 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v95);
        if (v98 > 1)
        {
          vDSP_dotpr(&realp[*(unsigned int *)(*((void *)v275 + 217) + 4 * v95)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v95)), 1, v97, v98);
          unint64_t v94 = *((unsigned int *)v275 + 84);
        }
        else
        {
          *float v97 = realp[v95];
        }
        ++v95;
        ++v97;
      }
      while (v95 < v94);
    }
    vDSP_vmma(v89, 1, v91, 1, v90, 1, __D, 1, __D, 1, v87);
    BOOL v99 = (float *)*((void *)v275 + 184);
    v283.realp = v92;
    v283.imagp = v99;
    vDSP_zvcmul(v261, 1, v261, 1, &v283, 1, v87);
    unint64_t v100 = *((unsigned int *)v275 + 84);
    if (v100)
    {
      unint64_t v101 = 0;
      uint64_t v102 = v283.realp;
      unint64_t v103 = (float *)v91;
      do
      {
        vDSP_Length v104 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v101);
        if (v104 > 1)
        {
          vDSP_dotpr(&v102[*(unsigned int *)(*((void *)v275 + 217) + 4 * v101)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v101)), 1, v103, v104);
          unint64_t v100 = *((unsigned int *)v275 + 84);
        }
        else
        {
          *unint64_t v103 = v102[v101];
        }
        ++v101;
        ++v103;
      }
      while (v101 < v100);
    }
    vDSP_vmma(v89, 1, v91, 1, v90, 1, __N, 1, __N, 1, v87);
    uint64_t v105 = (float *)*((void *)v275 + 184);
    v282.realp = (float *)*((void *)v275 + 181);
    v282.imagp = v105;
    vDSP_zvcmul(__A, 1, v261, 1, &v282, 1, v87);
    unint64_t v106 = *((unsigned int *)v275 + 84);
    if (v106)
    {
      unint64_t v107 = 0;
      unint64_t v108 = v282.realp;
      float v109 = (float *)v91;
      do
      {
        vDSP_Length v110 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v107);
        if (v110 > 1)
        {
          vDSP_dotpr(&v108[*(unsigned int *)(*((void *)v275 + 217) + 4 * v107)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v107)), 1, v109, v110);
          unint64_t v106 = *((unsigned int *)v275 + 84);
        }
        else
        {
          float *v109 = v108[v107];
        }
        ++v107;
        ++v109;
      }
      while (v107 < v106);
    }
    vDSP_vmma(v89, 1, v91, 1, v90, 1, v255, 1, v255, 1, v87);
    unint64_t v111 = *((unsigned int *)v275 + 84);
    if (v111)
    {
      unint64_t v112 = 0;
      float v113 = v282.imagp;
      float v114 = (float *)v91;
      do
      {
        vDSP_Length v115 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v112);
        if (v115 > 1)
        {
          vDSP_dotpr(&v113[*(unsigned int *)(*((void *)v275 + 217) + 4 * v112)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v112)), 1, v114, v115);
          unint64_t v111 = *((unsigned int *)v275 + 84);
        }
        else
        {
          float *v114 = v113[v112];
        }
        ++v112;
        ++v114;
      }
      while (v112 < v111);
    }
    vDSP_vmma(v89, 1, v91, 1, v90, 1, (const float *)v253, 1, (float *)v253, 1, v87);
    vDSP_zvphas((const DSPSplitComplex *)&__B, 1, *((float **)v275 + 157), 1, v87);
    float v287 = 4.0;
    int v286 = 1065353216;
    float v285 = 0.5;
    float v284 = 0.0;
    int v281 = v87;
    unint64_t v116 = (float *)*((void *)v275 + 181);
    vDSP_zvmags((const DSPSplitComplex *)&__B, 1, v116, 1, v87);
    float v117 = (float *)*((void *)v275 + 184);
    vDSP_vsub(__N, 1, __D, 1, v117, 1, v87);
    vDSP_vsq(v117, 1, v117, 1, v87);
    uint64_t v118 = (float *)*((void *)v275 + 187);
    vDSP_vsma(v116, 1, &v287, v117, 1, v118, 1, v87);
    vvsqrtf(v118, v118, &v281);
    unint64_t v119 = (float *)*((void *)v275 + 181);
    vDSP_vadd(__D, 1, __N, 1, v119, 1, v87);
    vDSP_vsbsm(v119, 1, v118, 1, &v285, v119, 1, v87);
    vDSP_vthr(v119, 1, &v284, v119, 1, v87);
    if ((*((unsigned char *)v275 + 596) & 0xC0) != 0 && *((float *)v275 + 129) > 0.0)
    {
      uint64_t v120 = (float *)*((void *)v275 + 184);
      vDSP_vmsa(__D, 1, __N, 1, &kEPS, v120, 1, v87);
      vvsqrtf(v120, v120, &v281);
      float v121 = (float *)*((void *)v275 + 187);
      vDSP_vdiv(v120, 1, (const float *)__B, 1, v121, 1, v87);
      uint64_t v122 = (float *)*((void *)v275 + 190);
      vDSP_vdiv(v120, 1, *((const float **)&__B + 1), 1, v122, 1, v87);
      v280.realp = v121;
      v280.imagp = v122;
      int v123 = (float *)*((void *)v275 + 193);
      vDSP_zvmags(&v280, 1, v123, 1, v87);
      float v279 = *((float *)v275 + 130);
      float v278 = (float)(v279 * v279) + (float)(v279 * -2.0);
      uint64_t v124 = (float *)*((void *)v275 + 193);
      vDSP_vsmsa(v123, 1, &v278, (const float *)&v286, v124, 1, v87);
      vDSP_vmsa(__D, 1, v124, 1, &kEPS, *((float **)v275 + 139), 1, v87);
      unint64_t v125 = (const float **)((char *)v275 + 1112);
      vDSP_vdiv(*((const float **)v275 + 139), 1, v119, 1, *((float **)v275 + 139), 1, v87);
      vDSP_vthr(*v125, 1, &v284, (float *)*v125, 1, v87);
      vvsqrtf((float *)*v125, *v125, &v281);
      vDSP_vmsa(__N, 1, v124, 1, &kEPS, *((float **)v275 + 148), 1, v87);
      __int16 v126 = (const float **)((char *)v275 + 1184);
      vDSP_vdiv(*((const float **)v275 + 148), 1, v119, 1, *((float **)v275 + 148), 1, v87);
      vDSP_vthr(*v126, 1, &v284, (float *)*v126, 1, v87);
      vvsqrtf((float *)*v126, *v126, &v281);
      vDSP_vsmul(v122, 1, &v279, v122, 1, v87);
      float v279 = -v279;
      vDSP_vsmul(v121, 1, &v279, v121, 1, v87);
      vDSP_vmul(*((const float **)v275 + 148), 1, v121, 1, *((float **)v275 + 142), 1, v87);
      vDSP_vmul(*((const float **)v275 + 148), 1, v122, 1, *((float **)v275 + 145), 1, v87);
      vDSP_vneg(v122, 1, v122, 1, v87);
      vDSP_vmul(*((const float **)v275 + 139), 1, v121, 1, *((float **)v275 + 151), 1, v87);
      vDSP_vmul(*((const float **)v275 + 139), 1, v122, 1, *((float **)v275 + 154), 1, v87);
    }
    else
    {
      vDSP_vclr(*((float **)v275 + 139), 1, (uint64_t)(*((void *)v275 + 140) - *((void *)v275 + 139)) >> 2);
      vDSP_vclr(*((float **)v275 + 142), 1, (uint64_t)(*((void *)v275 + 143) - *((void *)v275 + 142)) >> 2);
      vDSP_vclr(*((float **)v275 + 145), 1, (uint64_t)(*((void *)v275 + 146) - *((void *)v275 + 145)) >> 2);
      vDSP_vclr(*((float **)v275 + 151), 1, (uint64_t)(*((void *)v275 + 152) - *((void *)v275 + 151)) >> 2);
      vDSP_vclr(*((float **)v275 + 154), 1, (uint64_t)(*((void *)v275 + 155) - *((void *)v275 + 154)) >> 2);
    }
    if (*((float *)v275 + 126) <= 0.0 && *((float *)v275 + 127) <= 0.0 && *((float *)v275 + 129) <= 0.0)
    {
      vDSP_vfill((const float *)&v286, *((float **)v275 + 133), 1, v87);
      vDSP_vfill((const float *)&v286, *((float **)v275 + 136), 1, v87);
    }
    else
    {
      int v127 = (float *)*((void *)v275 + 184);
      vDSP_vsub(v119, 1, __D, 1, v127, 1, v87);
      vDSP_vthr(v127, 1, &v284, v127, 1, v87);
      char v128 = (float *)*((void *)v275 + 187);
      vDSP_vsub(v119, 1, __N, 1, v128, 1, v87);
      vDSP_vthr(v128, 1, &v284, v128, 1, v87);
      if (*((float *)v275 + 126) > 0.0 || *((float *)v275 + 127) > 0.0)
      {
        LODWORD(v280.realp) = *((_DWORD *)v275 + 131);
        float v279 = 1.0 - *(float *)&v280.realp;
        __int16 v129 = (float *)*((void *)v275 + 190);
        vDSP_vsmsa(v127, 1, &v279, &kEPS, v129, 1, v87);
        vDSP_vsma(__D, 1, (const float *)&v280, v129, 1, v129, 1, v87);
        int v130 = (float *)*((void *)v275 + 193);
        vDSP_vsmsa(v128, 1, &v279, &kEPS, v130, 1, v87);
        vDSP_vsma(__N, 1, (const float *)&v280, v130, 1, v130, 1, v87);
        vDSP_vdiv(v129, 1, v130, 1, v250, 1, v87);
      }
      vDSP_vsadd(__D, 1, &kEPS, __D, 1, v87);
      vDSP_vdiv(__D, 1, v127, 1, *((float **)v275 + 133), 1, v87);
      vvsqrtf(*((float **)v275 + 133), *((const float **)v275 + 133), &v281);
      vDSP_vsadd(__N, 1, &kEPS, __N, 1, v87);
      vDSP_vdiv(__N, 1, v128, 1, *((float **)v275 + 136), 1, v87);
      vvsqrtf(*((float **)v275 + 136), *((const float **)v275 + 136), &v281);
    }
    __int16 v131 = v275;
    unsigned int v254 = (DSPSplitComplex *)((char *)v275 + 2072);
    vDSP_Length v132 = *((unsigned int *)v275 + 84);
    __int16 v133 = (const float *)*((void *)v275 + 160);
    int v134 = (const float *)*((void *)v275 + 157);
    __int16 v135 = (float *)*((void *)v275 + 163);
    uint64_t v248 = (float *)*((void *)v275 + 169);
    uint64_t v249 = (float *)*((void *)v275 + 172);
    uint64_t v251 = (float *)*((void *)v275 + 166);
    int v136 = (float *)*((void *)v275 + 175);
    uint64_t v137 = (float *)*((void *)v275 + 178);
    LODWORD(v290.realp) = 1065353216;
    LODWORD(v283.realp) = 1056964608;
    LODWORD(v282.realp) = 0;
    LODWORD(v280.realp) = -1082130432;
    float __C = *((float *)v275 + 129) * *((float *)v275 + 129);
    float v288 = 1.0 - __C;
    float v287 = __C + -1.0;
    int v286 = v132;
    unsigned int v138 = (float *)*((void *)v275 + 184);
    uint64_t v139 = (float *)*((void *)v275 + 187);
    __Na = (float *)*((void *)v275 + 181);
    __Da = (float *)*((void *)v275 + 190);
    uint64_t v140 = (float *)*((void *)v275 + 193);
    unsigned int v141 = (float *)*((void *)v275 + 196);
    if (*((float *)v275 + 126) <= 0.0 && (float v142 = *((float *)v275 + 127), v142 <= 0.0))
    {
      if (*((void *)v275 + 257) && *((void *)v275 + 258))
      {
        vDSP_vsq(*((const float **)v275 + 133), 1, *((float **)v275 + 193), 1, v132);
        vDSP_vsmsa(v140, 1, &__C, &v288, v140, 1, v132);
        vvsqrtf(v140, v140, &v286);
        vDSP_zrvmul(__A, 1, v140, 1, __na, 1, v132);
      }
      if (*((void *)v275 + 259) && *((void *)v275 + 260))
      {
        vDSP_vsq(*((const float **)v275 + 136), 1, v140, 1, v132);
        vDSP_vsmsa(v140, 1, &__C, &v288, v140, 1, v132);
        vvsqrtf(v140, v140, &v286);
        vDSP_zrvmul(v261, 1, v140, 1, v254, 1, v132);
      }
      int v156 = (float *)*((void *)v275 + 261);
      if (v156 && *((void *)v275 + 262))
      {
        vDSP_vclr(v156, 1, v132);
        vDSP_vclr(*((float **)v275 + 262), 1, v132);
      }
      uint64_t v157 = (float *)*((void *)v275 + 263);
      if (v157 && *((void *)v275 + 264) && *((_DWORD *)v275 + 4) == 1)
      {
        vDSP_vclr(v157, 1, v132);
        vDSP_vclr(*((float **)v275 + 264), 1, v132);
      }
      uint64_t v158 = (float *)*((void *)v275 + 265);
      if (v158 && *((void *)v275 + 266))
      {
        vDSP_vclr(v158, 1, v132);
        vDSP_vclr(*((float **)v275 + 266), 1, v132);
      }
      size_t v159 = (float *)*((void *)v275 + 267);
      if (v159 && *((void *)v275 + 268)) {
        goto LABEL_236;
      }
    }
    else
    {
      int v246 = v137;
      uint64_t v247 = v136;
      vDSP_vdbcon(v133, 1, (const float *)&v290, v139, 1, v132, 0);
      LODWORD(__B) = 1011666125;
      vDSP_vsmsa(v139, 1, (const float *)&__B, (const float *)&v283, v139, 1, v132);
      vDSP_vclip(v139, 1, (const float *)&v282, (const float *)&v290, v139, 1, v132);
      vDSP_vsmsa(v139, 1, (const float *)&v280, (const float *)&v290, __Na, 1, v132);
      vDSP_vclip(__Na, 1, (const float *)&v282, (const float *)&v290, __Na, 1, v132);
      vDSP_vabs(v134, 1, v138, 1, v132);
      vDSP_vsmsa(v138, 1, &std::numbers::inv_pi_v<float>, (const float *)&v282, v138, 1, v132);
      vDSP_vclip(v138, 1, (const float *)&v282, (const float *)&v290, v138, 1, v132);
      char v256 = (float *)*((void *)v275 + 208);
      vDSP_vsmsa(v256, 1, (const float *)&v280, (const float *)&v290, __Da, 1, v132);
      if (*((unsigned char *)v275 + 596))
      {
        PV_Apply_LUT2D<81u,91u>(__Na, v138, v140, v132, *((const float **)v275 + 199), v141);
        vDSP_vsq(*((const float **)v275 + 133), 1, v141, 1, v132);
        vDSP_vmul(v140, 1, v141, 1, v140, 1, v132);
        vDSP_vsmsa(v141, 1, &v287, &v288, v141, 1, v132);
        vDSP_vadd(v140, 1, v141, 1, v140, 1, v132);
        vvsqrtf(v141, v140, &v286);
        unint64_t v143 = *((unsigned int *)v275 + 84);
        if (v143)
        {
          unint64_t v144 = 0;
          uint64_t v145 = v140;
          do
          {
            vDSP_Length v146 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v144);
            if (v146 > 1)
            {
              vDSP_dotpr(&v141[*(unsigned int *)(*((void *)v275 + 217) + 4 * v144)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v144)), 1, v145, v146);
              unint64_t v143 = *((unsigned int *)v275 + 84);
            }
            else
            {
              *uint64_t v145 = v141[v144];
            }
            ++v144;
            ++v145;
          }
          while (v144 < v143);
        }
        vDSP_vmma(__Da, 1, v140, 1, v256, 1, v135, 1, v135, 1, v132);
        __int16 v131 = v275;
        if (*((void *)v275 + 257) && *((void *)v275 + 258)) {
          vDSP_zrvmul(__A, 1, v135, 1, __na, 1, v132);
        }
      }
      if ((*((unsigned char *)v131 + 596) & 2) != 0)
      {
        PV_Apply_LUT2D<81u,91u>(v139, v138, v140, v132, *((const float **)v131 + 199), v141);
        vDSP_vsq(*((const float **)v131 + 136), 1, v141, 1, v132);
        vDSP_vmul(v140, 1, v141, 1, v140, 1, v132);
        vDSP_vsmsa(v141, 1, &v287, &v288, v141, 1, v132);
        vDSP_vadd(v140, 1, v141, 1, v140, 1, v132);
        vvsqrtf(v141, v140, &v286);
        unint64_t v147 = *((unsigned int *)v131 + 84);
        if (v147)
        {
          unint64_t v148 = 0;
          float v149 = v140;
          do
          {
            vDSP_Length v150 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v148);
            if (v150 > 1)
            {
              vDSP_dotpr(&v141[*(unsigned int *)(*((void *)v275 + 217) + 4 * v148)], 1, *(const float **)(*((void *)v275 + 211) + 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v148)), 1, v149, v150);
              unint64_t v147 = *((unsigned int *)v275 + 84);
            }
            else
            {
              float *v149 = v141[v148];
            }
            ++v148;
            ++v149;
          }
          while (v148 < v147);
        }
        vDSP_vmma(__Da, 1, v140, 1, v256, 1, v251, 1, v251, 1, v132);
        __int16 v131 = v275;
        if (*((void *)v275 + 259) && *((void *)v275 + 260)) {
          vDSP_zrvmul(v261, 1, v251, 1, v254, 1, v132);
        }
      }
      if ((*((unsigned char *)v131 + 596) & 0xC) != 0)
      {
        float v142 = *((float *)v131 + 126);
        if (v142 <= 0.0)
        {
          uint64_t v160 = (float *)*((void *)v131 + 261);
          if (v160 && *((void *)v131 + 262))
          {
            vDSP_vclr(v160, 1, v132);
            vDSP_vclr(*((float **)v131 + 262), 1, v132);
          }
          unint64_t v161 = (float *)*((void *)v131 + 263);
          if (v161 && *((void *)v131 + 264) && *((_DWORD *)v131 + 4) == 1)
          {
            vDSP_vclr(v161, 1, v132);
            vDSP_vclr(*((float **)v131 + 264), 1, v132);
          }
        }
        else
        {
          PV_Apply_LUT2D<81u,91u>(v139, v138, v141, v132, *((const float **)v131 + 202), v141);
          unint64_t v151 = *((unsigned int *)v131 + 84);
          if (v151)
          {
            unint64_t v152 = 0;
            UInt64 v153 = v140;
            do
            {
              vDSP_Length v154 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v152);
              if (v154 > 1)
              {
                vDSP_dotpr(&v141[*(unsigned int *)(*((void *)v275 + 217) + 4 * v152)], 1, *(const float **)(*((void *)v275 + 211)+ 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v152)), 1, v153, v154);
                unint64_t v151 = *((unsigned int *)v275 + 84);
              }
              else
              {
                float *v153 = v141[v152];
              }
              ++v152;
              ++v153;
            }
            while (v152 < v151);
          }
          uint64_t v155 = v275;
          vDSP_vsmul(v140, 1, (const float *)v275 + 123, v140, 1, v132);
          float v285 = 1.0 - *((float *)v275 + 131);
          vDSP_vsmsa(*((const float **)v155 + 133), 1, &v285, (const float *)v155 + 131, v141, 1, v132);
          vDSP_vmul(v140, 1, v141, 1, v141, 1, v132);
          vDSP_vmma(__Da, 1, v141, 1, v256, 1, v248, 1, v248, 1, v132);
          vDSP_vsmsa(*((const float **)v155 + 136), 1, &v285, (const float *)v155 + 131, v141, 1, v132);
          vDSP_vmul(v140, 1, v141, 1, v141, 1, v132);
          vDSP_vmma(__Da, 1, v141, 1, v256, 1, v249, 1, v249, 1, v132);
          if (*((_DWORD *)v275 + 91) == 1 || !*((_DWORD *)v275 + 4))
          {
            if (*((void *)v275 + 261))
            {
              if (*((void *)v275 + 262))
              {
                vDSP_zrvmul(__A, 1, v248, 1, v252, 1, v132);
                unint64_t v162 = (const float **)v275;
                vDSP_vma(*((const float **)v275 + 243), 1, v249, 1, *((const float **)v275 + 261), 1, *((float **)v275 + 261), 1, v132);
                vDSP_vma(v162[244], 1, v249, 1, v162[262], 1, (float *)v162[262], 1, v132);
                float v284 = 0.70711;
                vDSP_vsmul(v162[261], 1, &v284, (float *)v162[261], 1, v132);
                vDSP_vsmul(v162[262], 1, &v284, (float *)v162[262], 1, v132);
                atomic_uint v163 = (void *)*((void *)v275 + 263);
                if (v163)
                {
                  if (*((void *)v275 + 264) && *((_DWORD *)v275 + 4) == 1)
                  {
                    memcpy(v163, *((const void **)v275 + 261), 4 * v132);
                    memcpy(*((void **)v275 + 264), *((const void **)v275 + 262), 4 * v132);
                  }
                }
              }
            }
          }
          else
          {
            if (*((void *)v275 + 261) && *((void *)v275 + 262)) {
              vDSP_zrvmul(__A, 1, v248, 1, v252, 1, v132);
            }
            if (*((void *)v275 + 263) && *((void *)v275 + 264)) {
              vDSP_zrvmul(v261, 1, v249, 1, v258, 1, v132);
            }
          }
          __int16 v131 = v275;
        }
      }
      if ((*((unsigned char *)v131 + 596) & 0x30) != 0)
      {
        float v142 = *((float *)v275 + 127);
        if (v142 > 0.0)
        {
          PV_Apply_LUT2D<81u,91u>(__Na, v138, v140, v132, *((const float **)v275 + 205), v141);
          float v285 = 1.0 - *((float *)v275 + 131);
          vDSP_vsmsa(*((const float **)v275 + 133), 1, &v285, (const float *)v275 + 131, v141, 1, v132);
          vDSP_vmul(v140, 1, v141, 1, v141, 1, v132);
          unint64_t v164 = *((unsigned int *)v275 + 84);
          if (v164)
          {
            unint64_t v165 = 0;
            __int16 v166 = v140;
            do
            {
              vDSP_Length v167 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v165);
              if (v167 > 1)
              {
                vDSP_dotpr(&v141[*(unsigned int *)(*((void *)v275 + 217) + 4 * v165)], 1, *(const float **)(*((void *)v275 + 211)+ 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v165)), 1, v166, v167);
                unint64_t v164 = *((unsigned int *)v275 + 84);
              }
              else
              {
                *__int16 v166 = v141[v165];
              }
              ++v165;
              ++v166;
            }
            while (v165 < v164);
          }
          vDSP_vmma(__Da, 1, v140, 1, v256, 1, v247, 1, v247, 1, v132);
          if (*((void *)v275 + 265) && *((void *)v275 + 266)) {
            vDSP_zrvmul(__A, 1, v247, 1, (const DSPSplitComplex *)((char *)v275 + 2120), 1, v132);
          }
          PV_Apply_LUT2D<81u,91u>(v139, v138, v140, v132, *((const float **)v275 + 205), v141);
          vDSP_vsmsa(*((const float **)v275 + 136), 1, &v285, (const float *)v275 + 131, v141, 1, v132);
          vDSP_vmul(v140, 1, v141, 1, v141, 1, v132);
          unint64_t v168 = *((unsigned int *)v275 + 84);
          if (v168)
          {
            unint64_t v169 = 0;
            __int16 v170 = v140;
            do
            {
              vDSP_Length v171 = *(unsigned int *)(*((void *)v275 + 220) + 4 * v169);
              if (v171 > 1)
              {
                vDSP_dotpr(&v141[*(unsigned int *)(*((void *)v275 + 217) + 4 * v169)], 1, *(const float **)(*((void *)v275 + 211)+ 24 * *(unsigned int *)(*((void *)v275 + 214) + 4 * v169)), 1, v170, v171);
                unint64_t v168 = *((unsigned int *)v275 + 84);
              }
              else
              {
                *__int16 v170 = v141[v169];
              }
              ++v169;
              ++v170;
            }
            while (v169 < v168);
          }
          vDSP_vmma(__Da, 1, v140, 1, v256, 1, v246, 1, v246, 1, v132);
          if (*((void *)v275 + 267) && *((void *)v275 + 268)) {
            vDSP_zrvmul(v261, 1, v246, 1, (const DSPSplitComplex *)((char *)v275 + 2136), 1, v132);
          }
          goto LABEL_237;
        }
        uint64_t v172 = (float *)*((void *)v275 + 265);
        if (v172 && *((void *)v275 + 266))
        {
          vDSP_vclr(v172, 1, v132);
          vDSP_vclr(*((float **)v275 + 266), 1, v132);
        }
        size_t v159 = (float *)*((void *)v275 + 267);
        if (v159)
        {
          if (*((void *)v275 + 268))
          {
LABEL_236:
            vDSP_vclr(v159, 1, v132);
            vDSP_vclr(*((float **)v275 + 268), 1, v132);
          }
        }
      }
    }
LABEL_237:
    long long v173 = v275;
    unint64_t v174 = (const float *)((char *)v275 + 516);
    if ((*((unsigned char *)v275 + 596) & 0x40) != 0)
    {
      atomic_uint v175 = (float *)*((void *)v275 + 269);
      if (v175)
      {
        if (*((void *)v275 + 270))
        {
          if (*v174 <= 0.0)
          {
            vDSP_vclr(v175, 1, v132);
            long long v173 = v275;
            vDSP_vclr(*((float **)v275 + 270), 1, v132);
          }
          else
          {
            long long v173 = v275;
            uint64_t v176 = (float *)*((void *)v275 + 145);
            *(void *)&unsigned long long __B = *((void *)v275 + 142);
            *((void *)&__B + 1) = v176;
            vDSP_zvmul((const DSPSplitComplex *)&__B, 1, v261, 1, (const DSPSplitComplex *)((char *)v275 + 2152), 1, v132, 1);
            vDSP_vma(*((const float **)v173 + 139), 1, *((const float **)v173 + 241), 1, *((const float **)v173 + 269), 1, *((float **)v173 + 269), 1, v132);
            vDSP_vma(*((const float **)v173 + 139), 1, *((const float **)v173 + 242), 1, *((const float **)v173 + 270), 1, *((float **)v173 + 270), 1, v132);
            vDSP_vsmul(*((const float **)v173 + 269), 1, v174, *((float **)v173 + 269), 1, v132);
            vDSP_vsmul(*((const float **)v173 + 270), 1, v174, *((float **)v173 + 270), 1, v132);
          }
        }
      }
    }
    if ((*((unsigned char *)v173 + 596) & 0x80) != 0)
    {
      __n128 v177 = (float *)*((void *)v173 + 271);
      if (v177)
      {
        if (*((void *)v173 + 272))
        {
          if (*v174 <= 0.0)
          {
            vDSP_vclr(v177, 1, v132);
            long long v173 = v275;
            vDSP_vclr(*((float **)v275 + 272), 1, v132);
          }
          else
          {
            long long v173 = v275;
            int v178 = (float *)*((void *)v275 + 154);
            *(void *)&unsigned long long __B = *((void *)v275 + 151);
            *((void *)&__B + 1) = v178;
            vDSP_zvmul((const DSPSplitComplex *)&__B, 1, __A, 1, (const DSPSplitComplex *)((char *)v275 + 2168), 1, v132, 1);
            vDSP_vma(*((const float **)v173 + 148), 1, *((const float **)v173 + 243), 1, *((const float **)v173 + 271), 1, *((float **)v173 + 271), 1, v132);
            vDSP_vma(*((const float **)v173 + 148), 1, *((const float **)v173 + 244), 1, *((const float **)v173 + 272), 1, *((float **)v173 + 272), 1, v132);
            vDSP_vsmul(*((const float **)v173 + 271), 1, v174, *((float **)v173 + 271), 1, v132);
            vDSP_vsmul(*((const float **)v173 + 272), 1, v174, *((float **)v173 + 272), 1, v132);
          }
        }
      }
    }
    uint64_t v4 = v173;
    if (!*((unsigned char *)v173 + 448)) {
      goto LABEL_254;
    }
    uint64_t v86 = v252;
    if (*((_DWORD *)v173 + 4) != 2)
    {
      ScottySTFTUpmixer::enhanced_center_extraction((float *)v173, __na, v254, v252, v258);
LABEL_254:
      uint64_t v179 = 0;
      char v180 = __na;
      do
      {
        if ((*((_DWORD *)v4 + 149) >> v179))
        {
          uint64_t v181 = a3[v179];
          uint64_t v182 = *v260;
          uint64_t v183 = *v273;
          LODWORD(__B) = 0x40000000;
          if (v179 <= 8)
          {
            int v184 = *((_DWORD *)v4 + v179 + 150);
            if (v184 != -1)
            {
              if (v179 <= 1)
              {
                float v142 = *((float *)v4 + v179 + 228);
                *v180->imagp = v142;
              }
              uint64_t v185 = (MultiRadixRealFFT *)*((void *)v4 + 80);
              if (v185)
              {
                size_t v186 = v180;
                MultiRadixRealFFT::RealInPlaceTransform(v185, v180, -1, v142);
                char v180 = v186;
              }
              size_t __nc = (size_t)v180;
              vDSP_ztoc(v180, 1, *((DSPComplex **)v4 + 118), 2, *((unsigned int *)v4 + 84));
              int v187 = (const float **)((char *)v4 + 944);
              vDSP_vsmul(*((const float **)v4 + 118), 1, (const float *)&__B, *((float **)v4 + 118), 1, *((unsigned int *)v4 + 85));
              vDSP_vmul(*v187, 1, *((const float **)v4 + 226), 1, (float *)*v187, 1, *((unsigned int *)v4 + 85));
              vDSP_vadd(*v187, 1, (const float *)(*((void *)v4 + 84) + 4 * (v183 + *((_DWORD *)v4 + 85) * v184)), 1, (float *)*v187, 1, (v182 - v183));
              memcpy((void *)(*((void *)v4 + 84) + 4 * (*((_DWORD *)v4 + 85) * v184)), *((const void **)v4 + 118), 4 * v182);
              memcpy(v181, (const void *)(*((void *)v4 + 84) + 4 * (*((_DWORD *)v4 + 85) * v184)), 4 * v183);
              char v180 = (DSPSplitComplex *)__nc;
            }
          }
        }
        ++v179;
        ++v180;
      }
      while (v179 != 8);
      if (*((_DWORD *)v4 + 4)) {
        int __Db = 0;
      }
      else {
        int __Db = (*((unsigned __int8 *)v4 + 596) >> 3) & 1;
      }
      vDSP_Length __Nb = *((unsigned int *)v4 + 86);
      vDSP_Length v188 = *((unsigned int *)v4 + 89);
      if (Crossover2f::IsLowCrossoverEnabled(*((Crossover2f **)v4 + 6))
        || Crossover2f::IsHighCrossoverEnabled(*((Crossover2f **)v275 + 6)))
      {
        if (*v257 == 1) {
          goto LABEL_295;
        }
        BOOL v189 = __Db && *((unsigned char *)v275 + 328) && v295[0] != 0;
        uint64_t v190 = 0;
        uint64_t v191 = (const float **)(a3 + 3);
        vDSP_Length v192 = (__Nb - v188);
        uint64_t __nb = 4 * v188;
        char v193 = 1;
        while (1)
        {
          char v194 = v193;
          size_t v195 = v295[v190];
          if (v195)
          {
            uint64_t v196 = a3 + 3;
            if (v189) {
              goto LABEL_279;
            }
            if ((*((_DWORD *)v275 + 149) >> v190)) {
              break;
            }
          }
LABEL_283:
          if ((*((_DWORD *)v275 + 149) >> v190))
          {
            uint64_t v198 = v291[v190];
            if (v198)
            {
              if (v188)
              {
                vDSP_vadd(a3[v190], 1, (const float *)(*((void *)v275 + 90) + 4 * v190 * *((unsigned int *)v275 + 89)), 1, a3[v190], 1, v188);
                memcpy((void *)(*((void *)v275 + 90) + 4 * v190 * *((unsigned int *)v275 + 89)), &v291[v190][v192], __nb);
                uint64_t v198 = v291[v190];
              }
              unint64_t v199 = &a3[v190][v188];
              vDSP_vadd(v199, 1, v198, 1, v199, 1, v192);
            }
          }
          char v193 = 0;
          uint64_t v190 = 1;
          if ((v194 & 1) == 0)
          {
            if (__Db)
            {
              if (v189)
              {
                *(float *)&unsigned long long __B = *((float *)v275 + 116) * 0.31623;
                vDSP_vsmul(*v191, 1, (const float *)&__B, (float *)*v191, 1, __Nb);
              }
              else
              {
                vDSP_vclr((float *)*v191, 1, __Nb);
              }
            }
            goto LABEL_295;
          }
        }
        uint64_t v196 = &a3[v190];
LABEL_279:
        UInt32 v197 = *v196;
        if (*v196)
        {
          if (v188)
          {
            vDSP_vadd(v197, 1, (const float *)(*((void *)v275 + 87) + 4 * v190 * *((unsigned int *)v275 + 89)), 1, v197, 1, v188);
            memcpy((void *)(*((void *)v275 + 87) + 4 * v190 * *((unsigned int *)v275 + 89)), &v295[v190][v192], __nb);
            size_t v195 = v295[v190];
          }
          vDSP_vadd(&v197[v188], 1, v195, 1, &v197[v188], 1, v192);
        }
        goto LABEL_283;
      }
      if (__Db) {
        vDSP_vclr(a3[3], 1, __Nb);
      }
LABEL_295:
      size_t v200 = v275;
      switch(*((_DWORD *)v275 + 111))
      {
        case 1:
          int v201 = *((_DWORD *)v275 + 86);
          DWORD2(__B) = 1;
          HIDWORD(__B) = 4 * v201;
          DWORD2(v277) = 1;
          HIDWORD(v277) = 4 * v201;
          uint64_t v202 = *((void *)v275 + 273);
          if (!v202) {
            goto LABEL_375;
          }
          int v203 = *((_DWORD *)v275 + 149);
          if ((v203 & 0x10) != 0)
          {
            *(void *)&long long v277 = a3[4];
            unsigned int v204 = 1;
            if ((v203 & 0x40) == 0)
            {
LABEL_374:
              LODWORD(__B) = v204;
              (*(void (**)(uint64_t))(*(void *)v202 + 32))(v202);
              size_t v200 = v275;
LABEL_375:
              uint64_t v231 = *((void *)v200 + 274);
              if (!v231) {
                goto LABEL_382;
              }
              int v232 = *((_DWORD *)v200 + 149);
              if ((v232 & 0x20) != 0)
              {
                *(void *)&long long v277 = a3[5];
                unsigned int v233 = 1;
                if ((v232 & 0x80) == 0)
                {
LABEL_381:
                  LODWORD(__B) = v233;
                  (*(void (**)(uint64_t, void, unsigned long long *, unsigned long long *))(*(void *)v231 + 32))(v231, *v273, &__B, &__B);
                  size_t v200 = v275;
LABEL_382:
                  unsigned long long __B = 0u;
                  long long v277 = 0u;
                  int v235 = *((_DWORD *)v200 + 149);
                  if ((v235 & 0x10) != 0)
                  {
                    *(void *)&unsigned long long __B = a3[4];
                    unsigned int v236 = 1;
                    if ((v235 & 0x20) == 0) {
                      goto LABEL_387;
                    }
                  }
                  else
                  {
                    unsigned int v236 = 0;
                    if ((v235 & 0x20) == 0)
                    {
LABEL_387:
                      if ((v235 & 0x40) != 0)
                      {
                        *((void *)&__B + v236++) = a3[6];
                        if ((v235 & 0x80) == 0) {
                          goto LABEL_390;
                        }
                      }
                      else if ((v235 & 0x80) == 0)
                      {
LABEL_390:
                        vDSP_Length v238 = *((unsigned int *)v200 + 86);
                        v290.realp = (float *)((char *)v200 + 56);
                        char v239 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)v200 + 56);
                        LOBYTE(v290.imagp) = v239;
                        if (v238) {
                          char v240 = v239 ^ 1;
                        }
                        else {
                          char v240 = 1;
                        }
                        if ((v240 & 1) == 0 && *((void *)v200 + 11) && *((void *)v200 + 10))
                        {
                          float v241 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)v200 + 5) + 96)));
                          float v242 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)v200 + 5) + 100)));
                          if (v241 > 0.01)
                          {
                            uint64_t v243 = *((void *)v200 + 11);
                            if (v243) {
                              ParametricFilters::process(v243, (float *const *)&__B, 0, v238, 0);
                            }
                          }
                          if (fabsf(v242) > 0.01)
                          {
                            uint64_t v244 = *((void *)v200 + 10);
                            if (v244) {
                              ParametricFilters::process(v244, (float *const *)&__B, 0, v238, 0);
                            }
                          }
                        }
                        std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v290);
                        return;
                      }
                      *((void *)&__B + v236) = a3[7];
                      goto LABEL_390;
                    }
                  }
                  uint64_t v237 = v236++;
                  *(void *)((unint64_t)&__B | (8 * v237)) = a3[5];
                  goto LABEL_387;
                }
              }
              else
              {
                if ((v232 & 0x80) == 0) {
                  goto LABEL_382;
                }
                unsigned int v233 = 0;
              }
              uint64_t v234 = (DSPSplitComplex *)(&__B + v233++);
              v234[1].realp = a3[7];
              goto LABEL_381;
            }
          }
          else
          {
            if ((v203 & 0x40) == 0) {
              goto LABEL_375;
            }
            unsigned int v204 = 0;
          }
          int v230 = (DSPSplitComplex *)(&__B + v204++);
          v230[1].realp = a3[6];
          goto LABEL_374;
        case 2:
          unsigned int v205 = (IR::FFTFilter *)*((void *)v275 + 275);
          if (v205 && (*((unsigned char *)v275 + 596) & 0x10) != 0) {
            IR::FFTFilter::process(v205, a3[4], a3 + 4);
          }
          unsigned int v206 = (IR::FFTFilter *)*((void *)v275 + 276);
          if (v206 && (*((unsigned char *)v275 + 596) & 0x20) != 0) {
            IR::FFTFilter::process(v206, a3[5], a3 + 5);
          }
          uint64_t v207 = (IR::FFTFilter *)*((void *)v275 + 278);
          if (v207 && (*((unsigned char *)v275 + 596) & 0x40) != 0) {
            IR::FFTFilter::process(v207, a3[6], a3 + 6);
          }
          uint64_t v208 = (IR::FFTFilter *)*((void *)v275 + 277);
          if (v208 && (*((unsigned char *)v275 + 596) & 0x80) != 0) {
            goto LABEL_311;
          }
          goto LABEL_382;
        case 3:
          size_t v209 = (IR::FFTFilter *)*((void *)v275 + 275);
          if (v209 && (*((unsigned char *)v275 + 596) & 0x10) != 0) {
            IR::FFTFilter::process(v209, a3[4], a3 + 4);
          }
          uint64_t v210 = (IR::FFTFilter *)*((void *)v275 + 279);
          if (v210 && (*((unsigned char *)v275 + 596) & 0x20) != 0) {
            IR::FFTFilter::process(v210, a3[5], a3 + 5);
          }
          uint64_t v211 = (IR::FFTFilter *)*((void *)v275 + 278);
          if (v211 && (*((unsigned char *)v275 + 596) & 0x40) != 0) {
            IR::FFTFilter::process(v211, a3[6], a3 + 6);
          }
          uint64_t v208 = (IR::FFTFilter *)*((void *)v275 + 280);
          if (v208 && (*((unsigned char *)v275 + 596) & 0x80) != 0) {
LABEL_311:
          }
            IR::FFTFilter::process(v208, a3[7], a3 + 7);
          goto LABEL_382;
        case 4:
          int v212 = *((_DWORD *)v275 + 149);
          if ((v212 & 0x10) != 0)
          {
            for (uint64_t i = 0; i != 24; i += 8)
            {
              uint64_t v214 = *(void **)((char *)v275 + i + 2296);
              if (v214) {
                AllPassComb::process(v214, a3[4], a3[4], *v273);
              }
            }
            int v212 = *((_DWORD *)v275 + 149);
          }
          if ((v212 & 0x20) != 0)
          {
            for (uint64_t j = 0; j != 24; j += 8)
            {
              uint64_t v216 = *(void **)((char *)v275 + j + 2320);
              if (v216) {
                AllPassComb::process(v216, a3[5], a3[5], *v273);
              }
            }
            int v212 = *((_DWORD *)v275 + 149);
          }
          if ((v212 & 0x40) != 0)
          {
            for (uint64_t k = 0; k != 24; k += 8)
            {
              uint64_t v218 = *(void **)((char *)v275 + k + 2344);
              if (v218) {
                AllPassComb::process(v218, a3[6], a3[6], *v273);
              }
            }
            int v212 = *((_DWORD *)v275 + 149);
          }
          if ((v212 & 0x80) != 0)
          {
            for (uint64_t m = 0; m != 24; m += 8)
            {
              uint64_t v220 = *(void **)((char *)v275 + m + 2368);
              if (v220) {
                AllPassComb::process(v220, a3[7], a3[7], *v273);
              }
            }
          }
          goto LABEL_382;
        case 5:
          int v221 = *((_DWORD *)v275 + 149);
          if ((v221 & 0x10) != 0)
          {
            for (uint64_t n = 0; n != 24; n += 8)
            {
              float v223 = *(void **)((char *)v275 + n + 2296);
              if (v223) {
                AllPassComb::process(v223, a3[4], a3[4], *v273);
              }
            }
            int v221 = *((_DWORD *)v275 + 149);
          }
          if ((v221 & 0x20) != 0)
          {
            for (iuint64_t i = 0; ii != 24; ii += 8)
            {
              uint64_t v225 = *(void **)((char *)v275 + ii + 2392);
              if (v225) {
                AllPassComb::process(v225, a3[5], a3[5], *v273);
              }
            }
            int v221 = *((_DWORD *)v275 + 149);
          }
          if ((v221 & 0x40) != 0)
          {
            for (juint64_t j = 0; jj != 24; jj += 8)
            {
              uint64_t v227 = *(void **)((char *)v275 + jj + 2344);
              if (v227) {
                AllPassComb::process(v227, a3[6], a3[6], *v273);
              }
            }
            int v221 = *((_DWORD *)v275 + 149);
          }
          if ((v221 & 0x80) != 0)
          {
            for (kuint64_t k = 0; kk != 24; kk += 8)
            {
              uint64_t v229 = *(void **)((char *)v275 + kk + 2416);
              if (v229) {
                AllPassComb::process(v229, a3[7], a3[7], *v273);
              }
            }
          }
          goto LABEL_382;
        default:
          goto LABEL_382;
      }
    }
LABEL_252:
    ScottySTFTUpmixer::enhanced_center_extraction((float *)v4, __A, v261, v86, v258);
    goto LABEL_254;
  }
  vDSP_Length v10 = *((unsigned int *)this + 86);

  ScottyUpmixer::ProcessBypass((ScottyUpmixer *)a2, (const float **)a3, v10);
}

void sub_1BB5670E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

float *ScottySTFTUpmixer::enhanced_center_extraction(float *this, DSPSplitComplex *__A, DSPSplitComplex *a3, DSPSplitComplex *__C, DSPSplitComplex *a5)
{
  if (*((_DWORD *)this + 91))
  {
    uint64_t v5 = this;
    if (((_BYTE)this[149] & 4) != 0)
    {
      vDSP_Length v10 = *((unsigned int *)this + 84);
      uint64_t v11 = (float *)*((void *)this + 184);
      __Aa.realp = (float *)*((void *)this + 181);
      __Aa.imagp = v11;
      double v12 = (float *)*((void *)this + 190);
      __Ca.realp = (float *)*((void *)this + 187);
      __Ca.imagp = v12;
      int v13 = (float *)*((void *)this + 193);
      uint64_t v14 = (float *)*((void *)this + 196);
      vDSP_zvadd(__A, 1, a3, 1, __C, 1, v10);
      vDSP_zvmul(__C, 1, __C, 1, &__Ca, 1, v10, 1);
      float __B = -2.2204e-16;
      vDSP_viclip(__Ca.realp, 1, &__B, &kEPS, __Ca.realp, 1, v10);
      vDSP_zvmul(__A, 1, a3, 1, &__Aa, 1, v10, 1);
      vDSP_zvdiv(&__Ca, 1, &__Aa, 1, &__Aa, 1, v10);
      vDSP_zvneg(&__Aa, 1, &__Aa, 1, v10);
      float v17 = 0.25;
      vDSP_vsadd(__Aa.realp, 1, &v17, __Aa.realp, 1, v10);
      ScottySTFTUpmixer::complexSquareRootDouble((const float **)&__Aa.realp, &__Ca.realp, v10, (double **)v5 + 229);
      float v16 = 0.5;
      vDSP_vsadd(__Ca.realp, 1, &v16, __Aa.realp, 1, v10);
      vDSP_zvabs(&__Aa, 1, v13, 1, v10);
      vDSP_zvneg(&__Ca, 1, &__Aa, 1, v10);
      vDSP_vsadd(__Aa.realp, 1, &v16, __Aa.realp, 1, v10);
      vDSP_zvabs(&__Aa, 1, v14, 1, v10);
      vDSP_vmin(v13, 1, v14, 1, v13, 1, v10);
      float v15 = v5[128] / 100.0;
      ScottySTFTUpmixer::inphaseICC(__A, a3, (DSPSplitComplex *)__Aa.imagp, __Aa.realp, (float *)v10);
      vDSP_vmul(v13, 1, __Aa.realp, 1, v13, 1, v10);
      vDSP_vsmul(v13, 1, &v15, v13, 1, v10);
      vDSP_zrvmul(__C, 1, v13, 1, __C, 1, v10);
      vDSP_zvsub(__A, 1, __C, 1, __A, 1, v10);
      vDSP_zvsub(a3, 1, __C, 1, a3, 1, v10);
      float v15 = v5[123] * 1.4142;
      vDSP_vsmul(__C->realp, 1, &v15, __C->realp, 1, v10);
      vDSP_vsmul(__C->imagp, 1, &v15, __C->imagp, 1, v10);
      this = a5->realp;
      if (a5->realp)
      {
        if (a5->imagp)
        {
          if (*((_DWORD *)v5 + 4) == 1)
          {
            memcpy(this, __C->realp, 4 * v10);
            return (float *)memcpy(a5->imagp, __C->imagp, 4 * v10);
          }
        }
      }
    }
  }
  return this;
}

void ScottySTFTUpmixer::complexSquareRootDouble(const float **a1, float **a2, int a3, double **a4)
{
  LODWORD(__N) = a3;
  unint64_t v6 = a4[3];
  __A.realp = *a4;
  __A.imagp = v6;
  uint64_t v7 = a4[6];
  uint64_t v8 = a4[9];
  double __B = 0.0;
  vDSP_Length v9 = a3;
  vDSP_vspdp(*a1, 1, __A.realp, 1, a3);
  vDSP_vspdp(a1[1], 1, v6, 1, v9);
  vDSP_zvabsD(&__A, 1, v7, 1, v9);
  vDSP_vsubD(__A.realp, 1, v7, 1, v8, 1, v9);
  vDSP_vthrD(v8, 1, &__B, v8, 1, v9);
  vvsqrt(v8, v8, (const int *)&__N);
  vvcopysign(__A.imagp, v8, __A.imagp, (const int *)&__N);
  vDSP_vaddD(v7, 1, __A.realp, 1, __A.realp, 1, (int)__N);
  vDSP_vthrD(__A.realp, 1, &__B, __A.realp, 1, (int)__N);
  vvsqrt(__A.realp, __A.realp, (const int *)&__N);
  vDSP_vdpsp(__A.realp, 1, *a2, 1, (int)__N);
  vDSP_vdpsp(__A.imagp, 1, a2[1], 1, (int)__N);
  float v10 = 0.70711;
  vDSP_vsmul(*a2, 1, &v10, *a2, 1, (int)__N);
  vDSP_vsmul(a2[1], 1, &v10, a2[1], 1, (int)__N);
}

void ScottySTFTUpmixer::inphaseICC(const DSPSplitComplex *this, const DSPSplitComplex *a2, DSPSplitComplex *a3, float *a4, float *a5)
{
  LODWORD(__N) = a5;
  vDSP_Length v9 = (int)a5;
  vDSP_zvmags(this, 1, (float *)a3, 1, (int)a5);
  vDSP_zvmags(a2, 1, a4, 1, v9);
  vDSP_vmul((const float *)a3, 1, a4, 1, (float *)a3, 1, v9);
  vvsqrtf((float *)a3, (const float *)a3, (const int *)&__N);
  vDSP_vthr((const float *)a3, 1, &kEPS, (float *)a3, 1, (int)__N);
  vDSP_vmul(this->realp, 1, a2->realp, 1, a4, 1, (int)__N);
  vDSP_vma(this->imagp, 1, a2->imagp, 1, a4, 1, a4, 1, (int)__N);
  vDSP_vdiv((const float *)a3, 1, a4, 1, (float *)a3, 1, (int)__N);
  float __C = 0.5;
  vDSP_vsmsa((const float *)a3, 1, &__C, &__C, a4, 1, (int)__N);
}

void PV_Apply_LUT2D<81u,91u>(const float *a1, const float *__A, float *a3, vDSP_Length __N, const float *a5, float *__C)
{
  float __B = 90.0;
  float v17 = 80.0;
  float v14 = 7370.0;
  float v15 = 81.0;
  float v12 = 0.0;
  float __Ca = 0.5;
  vDSP_Length v10 = __N;
  int v11 = __N;
  vDSP_vsmul(__A, 1, &__B, __C, 1, __N);
  vvnintf(__C, __C, &v11);
  vDSP_vsmsa(__C, 1, &v15, &__Ca, __C, 1, v10);
  vDSP_vsma(a1, 1, &v17, __C, 1, __C, 1, v10);
  vDSP_vclip(__C, 1, &v12, &v14, __C, 1, v10);
  vDSP_vindex(a5, __C, 1, a3, 1, v10);
}

void ScottySTFTUpmixer::calculate_smoothing_windows(ScottySTFTUpmixer *this, float a2, float a3, float a4, int a5)
{
  float v8 = 1.0;
  if (a2 <= 1.0) {
    float v8 = a2;
  }
  if (a2 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  unint64_t v10 = *((unsigned int *)this + 84);
  if ((float)((float)((float)(16000.0 / *((float *)this + 80)) * (float)v10) + 0.5) <= 2) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = (float)((float)((float)(16000.0 / *((float *)this + 80)) * (float)v10) + 0.5);
  }
  uint64_t v12 = *((void *)this + 181);
  int v13 = (float *)*((void *)this + 184);
  float v14 = (_DWORD *)*((void *)this + 187);
  _DWORD *v14 = 1065353216;
  if (v10 >= 2)
  {
    unint64_t v15 = 0;
    uint64x2_t v81 = (uint64x2_t)vdupq_n_s64(v10 - 2);
    uint32x2_t v16 = (uint32x2_t)0x200000001;
    do
    {
      int32x2_t v90 = vmovn_s64((int64x2_t)vcgeq_u64(v81, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v15), (int8x16_t)xmmword_1BB872720)));
      float32x2_t v17 = vcvt_f32_u32(v16);
      float32x2_t v18 = vadd_f32(v17, (float32x2_t)0x3F0000003F000000);
      float v85 = v18.f32[0];
      float v87 = logf(v18.f32[1]);
      v19.f32[0] = logf(v85);
      v19.f32[1] = v87;
      float32x2_t v88 = v19;
      float32x2_t v20 = vadd_f32(v17, (float32x2_t)0xBF000000BF000000);
      float v83 = v20.f32[0];
      float v86 = logf(v20.f32[1]);
      v21.f32[0] = logf(v83);
      v21.f32[1] = v86;
      float32x2_t v22 = vsub_f32(v88, v21);
      if (v90.i8[0]) {
        v14[v15 + 1] = v22.i32[0];
      }
      if (v90.i8[4]) {
        v14[v15 + 2] = v22.i32[1];
      }
      v15 += 2;
      uint32x2_t v16 = (uint32x2_t)vadd_s32((int32x2_t)v16, (int32x2_t)0x200000002);
    }
    while ((v10 & 0xFFFFFFFE) != v15);
  }
  uint64_t v79 = (uint64_t *)((char *)this + 1688);
  if (*((void *)this + 212) == *((void *)this + 211))
  {
    size_t v23 = (char *)operator new(4uLL);
    AudioStreamBasicDescription __p = v23;
    *(_DWORD *)size_t v23 = 1065353216;
    unint64_t v95 = v23 + 4;
    unint64_t v96 = v23 + 4;
    std::vector<std::vector<float>>::push_back[abi:ne180100](v79, (uint64_t)&__p);
    if (__p) {
      operator delete(__p);
    }
    **((_DWORD **)this + 217) = 0;
    **((_DWORD **)this + 214) = 0;
    **((_DWORD **)this + 220) = 1;
    LODWORD(v10) = *((_DWORD *)this + 84);
  }
  float v77 = a4;
  float *v13 = 1.0;
  float v24 = exp2f(v9 * -0.5);
  float v25 = exp2f(v9 * 0.5);
  if (v10 >= 2)
  {
    if (v25 >= (float)((float)(v11 + 1) / (float)v11)) {
      unint64_t v26 = v11;
    }
    else {
      unint64_t v26 = 0;
    }
    float v27 = (float)v26;
    float v89 = -(float)(v27 - (float)(v24 * v27));
    float v28 = -(float)(v27 - (float)(v25 * v27));
    unsigned int v78 = (void *)((char *)this + 1704);
    unint64_t v29 = 1;
    unsigned int v91 = 1;
    unint64_t v84 = v26;
    float v82 = v25;
    while (1)
    {
      float v30 = (float)v29;
      float v31 = v29 >= v26 ? v28 + (float)v29 : v25 * (float)v29;
      if (v29 <= v26 || v31 >= (float)v10) {
        break;
      }
      uint64_t v32 = 4 * v29 - 4;
      *(_DWORD *)(*((void *)this + 217) + 4 * v29) = *(_DWORD *)(*((void *)this + 217) + v32) + 1;
      *(_DWORD *)(*((void *)this + 214) + 4 * v29) = *(_DWORD *)(*((void *)this + 214) + v32);
      *(_DWORD *)(*((void *)this + 220) + 4 * v29) = *(_DWORD *)(*((void *)this + 220) + v32);
      v13[v29] = *(float *)((char *)v13 + v32);
LABEL_68:
      ++v29;
      unint64_t v10 = *((unsigned int *)this + 84);
      if (v29 >= v10) {
        goto LABEL_71;
      }
    }
    float v33 = v24;
    if (v29 >= v26) {
      float v34 = v89 + v30;
    }
    else {
      float v34 = v24 * v30;
    }
    float v35 = logf(v34);
    unsigned int v36 = vcvtps_u32_f32(v34);
    unsigned int v37 = vcvtms_u32_f32(v31);
    if ((int)v10 - 1 >= v37) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = v10 - 1;
    }
    if (v38 >= v36)
    {
      float v39 = v35;
      float v40 = (float)(logf(v31) - v35) + 2.2204e-16;
      unsigned int v41 = v36;
      do
      {
        float v42 = logf((float)v41);
        float v43 = *(float *)&v14[v41];
        *(float *)(v12 + 4 * v41++) = (float)((float)(cosf((float)((float)(v42 - v39) / v40) * 6.2832) * -0.5) + 0.5)
                                      * v43;
      }
      while (v41 <= v38);
    }
    float __C = 0.0;
    vDSP_maxv((const float *)(v12 + 4 * v36), 1, &__C, v38 - v36 + 1);
    float v44 = __C * 0.15;
    do
    {
      unsigned int v45 = v36;
      float v46 = *(float *)(v12 + 4 * v36++);
    }
    while (v46 < v44);
    do
    {
      unsigned int v47 = v38;
      float v48 = *(float *)(v12 + 4 * v38--);
    }
    while (v48 < v44);
    float v49 = (float)(v47 - v45 + 1);
    float __B = 0.0;
    unint64_t v50 = (unint64_t)v49;
    vDSP_sve((const float *)(v12 + 4 * v45), 1, &__B, (unint64_t)v49);
    float __B = 1.0 / __B;
    vDSP_vsmul((const float *)(v12 + 4 * v45), 1, &__B, (float *)(v12 + 4 * v45), 1, (unint64_t)v49);
    v13[v29] = __B * __C;
    float v51 = (void *)*((void *)this + 212);
    uint64_t v52 = *((void *)this + 211);
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - v52) >> 3);
    if (v53 <= v91)
    {
      if (!a5)
      {
        unint64_t v60 = v29 - 1;
        BOOL v61 = (unint64_t)*((unsigned int *)this + 84)
            - ((uint64_t)(*(void *)(v52 + 24 * (v29 - 1) + 8) - *(void *)(v52 + 24 * (v29 - 1))) >> 2) > v29;
        uint64_t v62 = *((void *)this + 217);
        int v63 = *(_DWORD *)(v62 + 4 * (v29 - 1));
        if (v61) {
          ++v63;
        }
        *(_DWORD *)(v62 + 4 * v29) = v63;
        *(_DWORD *)(*((void *)this + 214) + 4 * v29) = *(_DWORD *)(*((void *)this + 214) + 4 * v60);
        *(_DWORD *)(*((void *)this + 220) + 4 * v29) = *(_DWORD *)(*((void *)this + 220) + 4 * v60);
        v13[v29] = v13[v60];
        goto LABEL_67;
      }
      if ((unint64_t)v51 >= *v78)
      {
        if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((*v78 - v52) >> 3);
        uint64_t v65 = 2 * v64;
        if (2 * v64 <= v53 + 1) {
          uint64_t v65 = v53 + 1;
        }
        if (v64 >= 0x555555555555555) {
          unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v66 = v65;
        }
        vDSP_Length v98 = (char *)this + 1704;
        if (v66) {
          float v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)v78, v66);
        }
        else {
          float v67 = 0;
        }
        AudioStreamBasicDescription __p = v67;
        unint64_t v95 = &v67[24 * v53];
        unint64_t v96 = v95;
        float v97 = &v67[24 * v66];
        std::vector<float>::vector(v95, v50);
        v96 += 24;
        std::vector<std::vector<float>>::__swap_out_circular_buffer(v79, &__p);
        float v57 = (void *)*((void *)this + 212);
        std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        std::vector<float>::vector(v51, v50);
        float v57 = v51 + 3;
        *((void *)this + 212) = v51 + 3;
      }
      *((void *)this + 212) = v57;
      uint64_t v55 = *((void *)this + 211);
      uint64_t v56 = 24 * v91;
    }
    else
    {
      float v54 = (void **)(v52 + 24 * v91);
      if (!a5)
      {
        float v58 = *v54;
        uint64_t v59 = (uint64_t)(*(void *)(v52 + 24 * v91 + 8) - (void)v58) >> 2;
        if (v49 > (float)(unint64_t)v59) {
          float v49 = (float)(unint64_t)v59;
        }
        goto LABEL_66;
      }
      LODWORD(__p) = 0;
      std::vector<float>::resize((uint64_t)v54, v50, &__p);
      uint64_t v55 = *v79;
      uint64_t v56 = 24 * v91;
    }
    float v58 = *(void **)(v55 + v56);
LABEL_66:
    memcpy(v58, (const void *)(v12 + 4 * v45), vcvts_n_u32_f32(v49, 2uLL));
    *(_DWORD *)(*((void *)this + 217) + 4 * v29) = v45;
    *(_DWORD *)(*((void *)this + 214) + 4 * v29) = v91;
    *(_DWORD *)(*((void *)this + 220) + 4 * v29) = v49;
    ++v91;
LABEL_67:
    float v24 = v33;
    unint64_t v26 = v84;
    float v25 = v82;
    goto LABEL_68;
  }
  unsigned int v91 = 1;
LABEL_71:
  if (a5)
  {
    std::vector<std::vector<float>>::resize(v79, v91);
    LODWORD(v10) = *((_DWORD *)this + 84);
  }
  float v68 = *((float *)this + 80);
  float v69 = (float)*((unsigned int *)this + 86);
  float v70 = expf(-1.0 / (float)((float)(v68 * a3) / v69));
  float v71 = expf(-1.0 / (float)((float)(v68 * v77) / v69));
  if (v10)
  {
    float v72 = v71;
    float v73 = (float *)*((void *)this + 223);
    uint64_t v74 = v10;
    do
    {
      float v75 = *v13++;
      float v76 = powf(v70, 1.0 / v75);
      if (v76 < v72) {
        float v76 = v72;
      }
      *v73++ = v76;
      --v74;
    }
    while (v74);
  }
}

void sub_1BB567FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ScottySTFTUpmixer::calculate_tc_vectors(ScottySTFTUpmixer *this)
{
  float v2 = *((float *)this + 80);
  float v3 = (float)*((unsigned int *)this + 85);
  float v4 = (float)(*((float *)this + 101) / v2) * v3;
  uint64_t v5 = *((unsigned int *)this + 84);
  float v6 = (float)(v5 - 1);
  if (v4 <= v6) {
    float v6 = (float)(*((float *)this + 101) / v2) * v3;
  }
  if (v4 >= 0.0) {
    float v7 = v6;
  }
  else {
    float v7 = 0.0;
  }
  float v8 = *((float *)this + 102) / v2;
  float v9 = (float)*((unsigned int *)this + 86);
  float v10 = expf(-1.0 / (float)((float)(v2 * *((float *)this + 99)) / v9));
  uint64_t v11 = *((void *)this + 208);
  unsigned int v12 = v7 + 1;
  if (v12 > 1) {
    uint64_t v13 = v7 + 1;
  }
  else {
    uint64_t v13 = 1;
  }
  float v14 = (float *)*((void *)this + 208);
  do
  {
    *v14++ = v10;
    --v13;
  }
  while (v13);
  float v15 = v8 * v3;
  if ((float)(v8 * v3) > (float)v5) {
    float v15 = (float)v5;
  }
  unsigned int v16 = vcvtps_u32_f32(v15);
  if (v12 < v16)
  {
    float v17 = v15 - v7;
    float32x2_t v18 = (float *)(v11 + 4 * v12);
    do
    {
      *v18++ = expf(-1.0/ (float)((float)(*((float *)this + 80)* (float)((float)((float)((float)((float)v12 - v7) / v17) * *((float *)this + 100))+ (float)((float)(1.0 - (float)((float)((float)v12 - v7) / v17))* *((float *)this + 99))))/ v9));
      ++v12;
    }
    while (v16 != v12);
  }
  float v19 = expf(-1.0 / (float)((float)(*((float *)this + 100) * *((float *)this + 80)) / v9));
  if (v5 > v16)
  {
    uint64_t v20 = v5 - v16;
    float32x2_t v21 = (float *)(v11 + 4 * v16);
    do
    {
      *v21++ = v19;
      --v20;
    }
    while (v20);
  }
}

void ScottySTFTUpmixer::calculate_pan_tables(ScottySTFTUpmixer *this)
{
  float v2 = __exp10f(-2.0);
  float v3 = *((float *)this + 141);
  float v4 = *((float *)this + 140);
  float v5 = *((float *)this + 142);
  float v28 = *((float *)this + 139);
  float v29 = v2;
  int v27 = 7371;
  float v6 = sqrtf(1.0 - v2);
  float v7 = __exp10f(*((float *)this + 143) * 0.05);
  if (v6 >= v7) {
    float v8 = v7;
  }
  else {
    float v8 = v6;
  }
  if (*((float *)this + 126) <= 0.0)
  {
    float v18 = *((float *)this + 127);
    if (v18 <= 0.0) {
      return;
    }
    float v17 = (const float *)((char *)this + 508);
    float __A = 1.0 - v18;
    vDSP_vsmsa(ScottySTFT_init::pan_table_ll2D, 1, (const float *)this + 127, &__A, *((float **)this + 199), 1, 0x1CCBuLL);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    float v25 = 1.0;
    float __A = 0.0;
    float __B = 2.0;
    float v23 = -1.0 / (float)(v5 + v5);
    float v11 = -1.0 / (float)(v4 + v4);
    do
    {
      float v12 = __exp10f((float)((float)((float)((float)((float)v10 + (float)v10) / 80.0) + -1.0) * 40.0)/ 20.0);
      float v13 = asinf((float)(v12 + -1.0) / (float)(v12 + 1.0));
      float v14 = powf(fabsf(v13), v3);
      vDSP_vramp(&__A, &__B, (float *)(*((void *)this + 202) + v9), 81, 0x5BuLL);
      float __C = v11 * v14;
      vDSP_vsmsa((const float *)(*((void *)this + 202) + v9), 81, &v23, &__C, (float *)(*((void *)this + 202) + v9), 81, 0x5BuLL);
      ++v10;
      v9 += 4;
    }
    while (v10 != 81);
    vvexpf(*((float **)this + 202), *((const float **)this + 202), &v27);
    float v15 = *((float *)this + 126);
    float v21 = (float)(v6 - v8) * v15;
    float __C = v8 * v15;
    vDSP_vsmsa(*((const float **)this + 202), 1, &v21, &__C, *((float **)this + 202), 1, 0x1CCBuLL);
    vDSP_vfill(&v28, *((float **)this + 205), 1, (uint64_t)(*((void *)this + 206) - *((void *)this + 205)) >> 2);
    vvpowf(*((float **)this + 199), *((const float **)this + 205), *((const float **)this + 202), &v27);
    vDSP_vneg(*((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
    vDSP_vsadd(*((const float **)this + 199), 1, &v25, *((float **)this + 199), 1, 0x1CCBuLL);
    float v20 = 1.0 / v28;
    vDSP_vfill(&v20, *((float **)this + 205), 1, (uint64_t)(*((void *)this + 206) - *((void *)this + 205)) >> 2);
    vvpowf(*((float **)this + 199), *((const float **)this + 205), *((const float **)this + 199), &v27);
    float v16 = *((float *)this + 127);
    if (v16 <= 0.0) {
      goto LABEL_12;
    }
    float v17 = (const float *)((char *)this + 508);
    float v19 = 1.0 - v16;
    vDSP_vsmsa(ScottySTFT_init::pan_table_ll2D, 1, (const float *)this + 127, &v19, *((float **)this + 205), 1, 0x1CCBuLL);
    vDSP_vmul(*((const float **)this + 205), 1, *((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
  }
  vDSP_vsmul(ScottySTFT_init::pan_table_ls2D, 1, v17, *((float **)this + 205), 1, 0x1CCBuLL);
LABEL_12:
  vDSP_vthr(*((const float **)this + 199), 1, &v29, *((float **)this + 199), 1, 0x1CCBuLL);
  vDSP_vsq(*((const float **)this + 199), 1, *((float **)this + 199), 1, 0x1CCBuLL);
}

uint64_t ScottySTFTUpmixer::IsOutputEnabled(ScottySTFTUpmixer *this, char a2)
{
  return (*((_DWORD *)this + 149) >> a2) & 1;
}

BOOL ScottySTFTUpmixer::IsInputEnabled(ScottySTFTUpmixer *this, unsigned int a2)
{
  return a2 < 2;
}

uint64_t ScottySTFTUpmixer::DisableOutputChannel(ScottySTFTUpmixer *this, char a2)
{
  if (*((unsigned char *)this + 8)) {
    return 4294944292;
  }
  *((_DWORD *)this + 149) &= ~(1 << a2);
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  return 0;
}

_DWORD *ScottySTFTUpmixer::UpdateBufferAssignments(_DWORD *this)
{
  unsigned int v1 = this[149];
  if (this[4] == 2)
  {
    unsigned int v1 = this[149] & 4;
    this[149] = v1;
  }
  uint64_t v2 = 0;
  int v3 = 0;
  this[158] = 0;
  do
  {
    if ((v1 >> v2))
    {
      ++this[158];
      int v4 = v3++;
    }
    else
    {
      int v4 = -1;
    }
    this[v2++ + 150] = v4;
  }
  while (v2 != 8);
  return this;
}

uint64_t ScottySTFTUpmixer::EnableOutputChannel(ScottySTFTUpmixer *this, unsigned int a2)
{
  if (*((unsigned char *)this + 8)) {
    return 4294944292;
  }
  if (a2 > 7) {
    return 4294944293;
  }
  *((_DWORD *)this + 149) |= 1 << a2;
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  return 0;
}

uint64_t ScottySTFTUpmixer::SetOutputChannelMask(ScottySTFTUpmixer *this, int a2)
{
  if (*((unsigned char *)this + 8)) {
    return 4294944292;
  }
  *((_DWORD *)this + 149) = a2;
  ScottySTFTUpmixer::UpdateBufferAssignments(this);
  ScottyUpmixer::SetOutputChannelMask(this);
  return 0;
}

uint64_t ScottySTFTUpmixer::GetNumActiveOutputChannels(ScottySTFTUpmixer *this)
{
  unsigned int v1 = (const float *)((char *)this + 596);
  uint32x4_t v2 = (uint32x4_t)vld1q_dup_f32(v1);
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  return vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v2, (uint32x4_t)xmmword_1BB87B5D0), v3), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v2, (uint32x4_t)xmmword_1BB87B5C0), v3)));
}

uint64_t ScottySTFTUpmixer::GetNumActiveInputChannels(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t ScottySTFTUpmixer::GetLatencySamples(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 89);
}

uint64_t ScottySTFTUpmixer::GetNativeFrameSize(ScottySTFTUpmixer *this)
{
  return *((unsigned int *)this + 86);
}

void ScottySTFTUpmixer::SetParameterChangeTimeConstant(ScottySTFTUpmixer *this, float a2)
{
  *((float *)this + 148) = expf(-1.0 / (float)((float)(*((float *)this + 80) * a2) / (float)*((unsigned int *)this + 86)));
}

void ScottySTFTUpmixer::UpdateParameters(ScottySTFTUpmixer *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1)
  {
    float v3 = COERCE_FLOAT(atomic_load((unsigned int *)(v1 + 4)));
    *((float *)this + 90) = __exp10f(v3 / 20.0);
    unsigned int v4 = atomic_load((unsigned int *)(*((void *)this + 5) + 120));
    *((_DWORD *)this + 95) = v4;
    unsigned int v5 = atomic_load((unsigned int *)(*((void *)this + 5) + 44));
    *((_DWORD *)this + 98) = v5;
    unsigned int v6 = atomic_load((unsigned int *)(*((void *)this + 5) + 48));
    *((_DWORD *)this + 96) = v6;
    unsigned int v7 = atomic_load((unsigned int *)(*((void *)this + 5) + 52));
    *((_DWORD *)this + 97) = v7;
    float v8 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 56)));
    *((_DWORD *)this + 111) = v8;
    unsigned int v9 = atomic_load((unsigned int *)(*((void *)this + 5) + 116));
    *((unsigned char *)this + 448) = (v9 & 0x7FFFFFFF) != 0;
    unsigned int v10 = atomic_load((unsigned int *)(*((void *)this + 5) + 128));
    *((unsigned char *)this + 328) = (v10 & 0x7FFFFFFF) != 0;
    float v11 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 132)));
    *((float *)this + 83) = __exp10f(v11 / 20.0);
    float v12 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 8)));
    unsigned int v13 = v12;
    *((_DWORD *)this + 91) = v13;
    float v14 = 0.0;
    float v15 = 0.0;
    if (v13 && !*((unsigned char *)this + 448)) {
      float v15 = 1.0;
    }
    *((float *)this + 93) = v15;
    float v16 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 12)));
    unsigned int v17 = v16;
    *((_DWORD *)this + 92) = v17;
    if (v17) {
      float v14 = 1.0;
    }
    *((float *)this + 94) = v14;
    unsigned int v18 = atomic_load((unsigned int *)(*((void *)this + 5) + 76));
    *((_DWORD *)this + 106) = v18;
    unsigned int v19 = atomic_load((unsigned int *)(*((void *)this + 5) + 80));
    *((_DWORD *)this + 107) = v19;
    unsigned int v20 = atomic_load((unsigned int *)(*((void *)this + 5) + 84));
    *((_DWORD *)this + 108) = v20;
    unsigned int v21 = atomic_load((unsigned int *)(*((void *)this + 5) + 88));
    *((_DWORD *)this + 109) = v21;
    unsigned int v22 = atomic_load((unsigned int *)(*((void *)this + 5) + 92));
    *((_DWORD *)this + 110) = v22;
    unsigned int v23 = atomic_load((unsigned int *)(*((void *)this + 5) + 32));
    *((_DWORD *)this + 105) = v23;
    float v24 = *((float *)this + 103);
    float v25 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 36)));
    if (v24 != v25) {
      goto LABEL_13;
    }
    float v26 = *((float *)this + 104);
    float v27 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 40)));
    if (v26 != v27) {
      goto LABEL_13;
    }
    float v28 = *((float *)this + 99);
    float v29 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 60)));
    if (v28 != v29
      || (float v30 = *((float *)this + 100),
          float v31 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 64))),
          v30 != v31)
      || (float v32 = *((float *)this + 101),
          float v33 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 68))),
          v32 != v33)
      || (float v34 = *((float *)this + 102),
          float v35 = COERCE_FLOAT(atomic_load((unsigned int *)(*((void *)this + 5) + 72))),
          v34 != v35))
    {
LABEL_13:
      atomic_fetch_add((atomic_uint *volatile)this + 147, 1u);
    }
  }
}

uint64_t ScottySTFTUpmixer::SetOutputLayout(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    return 4294944292;
  }
  if (a2 > 2) {
    return 4294944291;
  }
  *(_DWORD *)(a1 + 596) = dword_1BB8A8214[a2];
  *(_DWORD *)(a1 + 16) = a2;
  ScottySTFTUpmixer::UpdateBufferAssignments((_DWORD *)a1);
  return 0;
}

uint64_t ScottySTFTUpmixer::SetInputLayout(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    return 4294944292;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 352) = 2;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void ScottySTFTUpmixer::Reset(float **this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  uint32x4_t v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    float v3 = this + 306;
    if (*((char *)this + 2471) < 0) {
      float v3 = (void *)*v3;
    }
    int v34 = 136315394;
    float v35 = v3;
    __int16 v36 = 2080;
    unsigned int v37 = "Reset";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting STFTUpmixer", (uint8_t *)&v34, 0x16u);
  }
  if (*((unsigned char *)this + 8))
  {
    ScottyUpmixer::Reset((ScottyUpmixer *)this);
    vDSP_vclr(this[81], 1, this[82] - this[81]);
    vDSP_vclr(this[84], 1, this[85] - this[84]);
    vDSP_vclr(this[87], 1, this[88] - this[87]);
    vDSP_vclr(this[90], 1, this[91] - this[90]);
    vDSP_vclr(this[93], 1, this[94] - this[93]);
    vDSP_vclr(this[96], 1, this[97] - this[96]);
    vDSP_vclr(this[99], 1, this[100] - this[99]);
    vDSP_vclr(this[102], 1, this[103] - this[102]);
    vDSP_vclr(this[105], 1, this[106] - this[105]);
    vDSP_vclr(this[108], 1, this[109] - this[108]);
    vDSP_vclr(this[111], 1, this[112] - this[111]);
    vDSP_vclr(this[118], 1, this[119] - this[118]);
    vDSP_Length v4 = (unint64_t)(float)*((unsigned int *)this + 84);
    vDSP_vclr(this[121], 1, v4);
    vDSP_vclr(this[124], 1, v4);
    vDSP_vclr(this[127], 1, v4);
    vDSP_vclr(this[130], 1, v4);
    vDSP_vclr(this[160], 1, v4);
    int v34 = 1065353216;
    vDSP_vfill((const float *)&v34, this[166], 1, v4);
    vDSP_vfill((const float *)&v34, this[163], 1, v4);
    vDSP_vclr(this[169], 1, v4);
    vDSP_vclr(this[172], 1, v4);
    vDSP_vclr(this[175], 1, v4);
    vDSP_vclr(this[178], 1, v4);
    vDSP_vclr(this[139], 1, v4);
    vDSP_vclr(this[142], 1, v4);
    vDSP_vclr(this[145], 1, v4);
    vDSP_vclr(this[151], 1, v4);
    vDSP_vclr(this[154], 1, v4);
    vDSP_vclr(this[133], 1, v4);
    vDSP_vclr(this[136], 1, v4);
    vDSP_vclr(this[157], 1, v4);
    for (uint64_t i = 0; i != 18; i += 3)
      vDSP_vclr(this[i + 181], 1, v4);
    unsigned int v6 = this[273];
    if (v6) {
      (*(void (**)(float *))(*(void *)v6 + 24))(v6);
    }
    unsigned int v7 = this[274];
    if (v7) {
      (*(void (**)(float *))(*(void *)v7 + 24))(v7);
    }
    float v8 = (IR::FFTFilter *)this[275];
    if (v8) {
      IR::FFTFilter::reset(v8);
    }
    unsigned int v9 = (IR::FFTFilter *)this[276];
    if (v9) {
      IR::FFTFilter::reset(v9);
    }
    unsigned int v10 = (IR::FFTFilter *)this[278];
    if (v10) {
      IR::FFTFilter::reset(v10);
    }
    float v11 = (IR::FFTFilter *)this[277];
    if (v11) {
      IR::FFTFilter::reset(v11);
    }
    float v12 = (IR::FFTFilter *)this[279];
    if (v12) {
      IR::FFTFilter::reset(v12);
    }
    unsigned int v13 = (IR::FFTFilter *)this[280];
    if (v13) {
      IR::FFTFilter::reset(v13);
    }
    uint64_t v14 = 0;
    float v15 = (char *)(this + 287);
    do
    {
      uint64_t v16 = *(void *)&v15[v14];
      unsigned int v17 = *(void **)(v16 + 8);
      uint64_t v18 = *(void *)(v16 + 16) - (void)v17;
      if (v18 >= 1) {
        bzero(v17, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
      }
      *(_DWORD *)(v16 + 56) = 0;
      uint64_t v19 = *(void *)&v15[v14 + 24];
      unsigned int v20 = *(void **)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 16) - (void)v20;
      if (v21 >= 1) {
        bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
      }
      *(_DWORD *)(v19 + 56) = 0;
      uint64_t v22 = *(void *)&v15[v14 + 48];
      unsigned int v23 = *(void **)(v22 + 8);
      uint64_t v24 = *(void *)(v22 + 16) - (void)v23;
      if (v24 >= 1) {
        bzero(v23, 4 * (((unint64_t)v24 >> 2) - ((unint64_t)v24 > 3)) + 4);
      }
      *(_DWORD *)(v22 + 56) = 0;
      uint64_t v25 = *(void *)&v15[v14 + 72];
      float v26 = *(void **)(v25 + 8);
      uint64_t v27 = *(void *)(v25 + 16) - (void)v26;
      if (v27 >= 1) {
        bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
      }
      *(_DWORD *)(v25 + 56) = 0;
      uint64_t v28 = *(void *)&v15[v14 + 96];
      float v29 = *(void **)(v28 + 8);
      uint64_t v30 = *(void *)(v28 + 16) - (void)v29;
      if (v30 >= 1) {
        bzero(v29, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
      }
      *(_DWORD *)(v28 + 56) = 0;
      uint64_t v31 = *(void *)&v15[v14 + 120];
      float v32 = *(void **)(v31 + 8);
      uint64_t v33 = *(void *)(v31 + 16) - (void)v32;
      if (v33 >= 1) {
        bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
      }
      *(_DWORD *)(v31 + 56) = 0;
      v14 += 8;
    }
    while (v14 != 24);
    *((unsigned char *)this + 2440) = 1;
  }
}

void ScottySTFTUpmixer::UnInitialize(ScottySTFTUpmixer *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  uint32x4_t v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    float v3 = (void *)((char *)this + 2448);
    if (*((char *)this + 2471) < 0) {
      float v3 = (void *)*v3;
    }
    int v28 = 136315394;
    float v29 = v3;
    __int16 v30 = 2080;
    uint64_t v31 = "UnInitialize";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Uninitializing STFTUpmixer", (uint8_t *)&v28, 0x16u);
  }
  *((_WORD *)this + 4) = 0;
  uint64_t v4 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v4) {
    MultiRadixFFT_Dispose(v4);
  }
  std::vector<float>::resize((uint64_t)this + 648, 0);
  std::vector<float>::resize((uint64_t)this + 672, 0);
  std::vector<float>::resize((uint64_t)this + 696, 0);
  std::vector<float>::resize((uint64_t)this + 720, 0);
  std::vector<float>::resize((uint64_t)this + 968, 0);
  std::vector<float>::resize((uint64_t)this + 992, 0);
  std::vector<float>::resize((uint64_t)this + 1016, 0);
  std::vector<float>::resize((uint64_t)this + 1040, 0);
  std::vector<float>::resize((uint64_t)this + 1064, 0);
  std::vector<float>::resize((uint64_t)this + 1088, 0);
  std::vector<float>::resize((uint64_t)this + 1112, 0);
  std::vector<float>::resize((uint64_t)this + 1136, 0);
  std::vector<float>::resize((uint64_t)this + 1160, 0);
  std::vector<float>::resize((uint64_t)this + 1184, 0);
  std::vector<float>::resize((uint64_t)this + 1208, 0);
  std::vector<float>::resize((uint64_t)this + 1232, 0);
  std::vector<float>::resize((uint64_t)this + 1256, 0);
  std::vector<float>::resize((uint64_t)this + 1280, 0);
  std::vector<float>::resize((uint64_t)this + 1304, 0);
  std::vector<float>::resize((uint64_t)this + 1328, 0);
  std::vector<float>::resize((uint64_t)this + 1352, 0);
  std::vector<float>::resize((uint64_t)this + 1376, 0);
  std::vector<float>::resize((uint64_t)this + 1400, 0);
  std::vector<float>::resize((uint64_t)this + 1424, 0);
  std::vector<float>::resize((uint64_t)this + 744, 0);
  std::vector<float>::resize((uint64_t)this + 768, 0);
  std::vector<float>::resize((uint64_t)this + 792, 0);
  std::vector<float>::resize((uint64_t)this + 816, 0);
  std::vector<float>::resize((uint64_t)this + 840, 0);
  std::vector<float>::resize((uint64_t)this + 864, 0);
  std::vector<float>::resize((uint64_t)this + 888, 0);
  std::vector<float>::resize((uint64_t)this + 944, 0);
  for (uint64_t i = 0; i != 144; i += 24)
    std::vector<float>::resize((uint64_t)this + i + 1448, 0);
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  std::vector<float>::resize((uint64_t)this + 1592, 0);
  std::vector<float>::resize((uint64_t)this + 1616, 0);
  std::vector<float>::resize((uint64_t)this + 1640, 0);
  std::vector<float>::resize((uint64_t)this + 1784, 0);
  std::vector<float>::resize((uint64_t)this + 1664, 0);
  uint64_t v6 = *((void *)this + 211);
  if (*((void *)this + 212) != v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      std::vector<float>::resize(v6 + 24 * v7, 0);
      uint64_t v7 = v8;
      uint64_t v6 = *((void *)this + 211);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 212) - v6) >> 3) > v8++);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 211, 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1712), 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1736), 0);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 1760), 0);
  std::vector<float>::resize((uint64_t)this + 1808, 0);
  uint64_t v10 = *((void *)this + 273);
  *((void *)this + 273) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 274);
  *((void *)this + 274) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 275);
  *((void *)this + 275) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 276);
  *((void *)this + 276) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 278);
  *((void *)this + 278) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 277);
  *((void *)this + 277) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 279);
  *((void *)this + 279) = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = *((void *)this + 279);
    *((void *)this + 279) = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = (char *)this + 2296;
  do
  {
    unsigned int v20 = *(void **)&v19[v18];
    *(void *)&v19[v18] = 0;
    if (v20) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v20);
    }
    uint64_t v21 = &v19[v18];
    uint64_t v22 = *(void **)&v19[v18 + 24];
    *(void *)&v19[v18 + 24] = 0;
    if (v22) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v22);
    }
    unsigned int v23 = (void *)*((void *)v21 + 6);
    *((void *)v21 + 6) = 0;
    if (v23) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v23);
    }
    uint64_t v24 = &v19[v18];
    uint64_t v25 = *(void **)&v19[v18 + 72];
    *(void *)&v19[v18 + 72] = 0;
    if (v25) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v25);
    }
    float v26 = (void *)*((void *)v24 + 12);
    *((void *)v24 + 12) = 0;
    if (v26) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v26);
    }
    uint64_t v27 = *(void **)&v19[v18 + 120];
    *(void *)&v19[v18 + 120] = 0;
    if (v27) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v27);
    }
    v18 += 8;
  }
  while (v18 != 24);
}

uint64_t ScottySTFTUpmixer::Initialize(ScottySTFTUpmixer *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (getScottyLog(void)::onceToken != -1) {
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
  }
  uint32x4_t v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    float v3 = (void *)((char *)this + 2448);
    if (*((char *)this + 2471) < 0) {
      float v3 = (void *)*v3;
    }
    buf[0] = 136315394;
    *(void *)&buf[1] = v3;
    __int16 v42 = 2080;
    float v43 = "Initialize";
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing STFTUpmixer", (uint8_t *)buf, 0x16u);
  }
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v4 = ScottyUpmixer::Initialize(this);
    if (v4) {
      return v4;
    }
    if (!*((void *)this + 5)) {
      return 4294944294;
    }
    ScottySTFTUpmixer::UpdateParameters(this);
    *((_WORD *)this + 4) = 1;
    if (*((float *)this + 80) == 0.0)
    {
      if (getScottyLog(void)::onceToken != -1) {
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
      }
      unsigned int v5 = getScottyLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        float v26 = (void *)((char *)this + 2448);
        if (*((char *)this + 2471) < 0) {
          float v26 = (void *)*v26;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = v26;
        __int16 v42 = 2080;
        float v43 = "Initialize";
        _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "[%s|%s] Sample rate is zero", (uint8_t *)buf, 0x16u);
      }
LABEL_42:
      ScottySTFTUpmixer::UnInitialize(this);
      return 4294944291;
    }
    unint64_t v6 = *((unsigned int *)this + 85);
    if ((int)v6 > 2047)
    {
      if (v6 != 2048 && v6 != 4096 && v6 != 0x2000) {
        goto LABEL_39;
      }
    }
    else if (v6 != 256 && v6 != 512 && v6 != 1024)
    {
LABEL_39:
      if (getScottyLog(void)::onceToken != -1) {
        dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
      }
      uint64_t v24 = getScottyLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        __int16 v30 = (void *)((char *)this + 2448);
        if (*((char *)this + 2471) < 0) {
          __int16 v30 = (void *)*v30;
        }
        int v31 = *((_DWORD *)this + 85);
        buf[0] = 136315650;
        *(void *)&buf[1] = v30;
        __int16 v42 = 2080;
        float v43 = "Initialize";
        __int16 v44 = 1024;
        int v45 = v31;
        _os_log_error_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid FFT size %u", (uint8_t *)buf, 0x1Cu);
      }
      goto LABEL_42;
    }
    if (*((_DWORD *)this + 86) == v6 >> 1)
    {
      buf[0] = 0;
      std::vector<float>::resize((uint64_t)this + 1808, v6, buf);
      uint64_t v7 = *((void *)this + 226);
      if (v7)
      {
        uint64_t v8 = *((unsigned int *)this + 85);
        if (v8)
        {
          uint64_t v9 = 0;
          int64x2_t v35 = vdupq_n_s64(2uLL);
          uint64x2_t v36 = (uint64x2_t)vdupq_n_s64(v8 - 1);
          uint64x2_t v10 = (uint64x2_t)xmmword_1BB872720;
          double v34 = 6.28318531 / (double)v8;
          uint64_t v11 = (v8 + 1) & 0x1FFFFFFFELL;
          __asm
          {
            FMOV            V1.2D, #-0.5
            FMOV            V0.2D, #0.5
          }
          float64x2_t v32 = _Q0;
          float64x2_t v33 = _Q1;
          do
          {
            int32x2_t v39 = vmovn_s64((int64x2_t)vcgeq_u64(v36, v10));
            int64x2_t v40 = (int64x2_t)v10;
            v18.i64[0] = v9;
            v18.i64[1] = (v9 + 1);
            float64x2_t __x = vmulq_n_f64(vcvtq_f64_u64(v18), v34);
            long double v38 = cos(__x.f64[1]);
            v19.f64[0] = cos(__x.f64[0]);
            v19.f64[1] = v38;
            float64x2_t v20 = vsqrtq_f64(vmlaq_f64(v32, v33, v19));
            if (v39.i8[0])
            {
              float v21 = v20.f64[0];
              *(float *)(v7 + 4 * v9) = v21;
            }
            if (v39.i8[4])
            {
              float v22 = v20.f64[1];
              *(float *)(v7 + 4 * v9 + 4) = v22;
            }
            v9 += 2;
            uint64x2_t v10 = (uint64x2_t)vaddq_s64(v40, v35);
          }
          while (v11 != v9);
        }
      }
      ScottySTFTUpmixer::UpdateBufferAssignments(this);
      *((_DWORD *)this + 81) = *((_DWORD *)this + 88);
      MultiRadixRealFFT_Create();
    }
    if (getScottyLog(void)::onceToken != -1) {
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_33998);
    }
    unsigned int v23 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (void *)((char *)this + 2448);
      if (*((char *)this + 2471) < 0) {
        uint64_t v27 = (void *)*v27;
      }
      int v28 = *((_DWORD *)this + 86);
      int v29 = *((_DWORD *)this + 85);
      buf[0] = 136315906;
      *(void *)&buf[1] = v27;
      __int16 v42 = 2080;
      float v43 = "Initialize";
      __int16 v44 = 1024;
      int v45 = v28;
      __int16 v46 = 1024;
      int v47 = v29;
      _os_log_error_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "[%s|%s] Frame size %u is not half of FFT size %u", (uint8_t *)buf, 0x22u);
    }
    goto LABEL_42;
  }
  return 0;
}

void sub_1BB56A888(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C4044AB9347);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::FFTFilter>()
{
}

void sub_1BB56A90C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void *ScottySTFTUpmixer::new_allpass_filter(void *this, double a2, double a3, double a4, uint64_t a5)
{
  double v6 = *(float *)(a5 + 320) * 0.5;
  if (v6 >= a2)
  {
    if (v6 >= a3) {
      double v6 = a3;
    }
    log(v6 / a2);
    operator new[]();
  }
  *this = 0;
  return this;
}

void sub_1BB56AB80(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  MEMORY[0x1C185D340](v2, 0x1000C800A747E1ELL);
  _Unwind_Resume(a1);
}

void ScottySTFTUpmixer::~ScottySTFTUpmixer(void **this)
{
  ScottySTFTUpmixer::~ScottySTFTUpmixer(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t j;
  void *v20;
  uint64_t v21;
  uint64_t vars8;

  if (*((char *)this + 2471) < 0) {
    operator delete(this[306]);
  }
  for (uint64_t i = 304; i != 301; --i)
  {
    uint64_t v3 = this[i];
    this[i] = 0;
    if (v3) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v3);
    }
  }
  do
  {
    uint64_t v4 = this[i];
    this[i] = 0;
    if (v4) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v4);
    }
    --i;
  }
  while (i != 298);
  do
  {
    unsigned int v5 = this[i];
    this[i] = 0;
    if (v5) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v5);
    }
    --i;
  }
  while (i != 295);
  do
  {
    double v6 = this[i];
    this[i] = 0;
    if (v6) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v6);
    }
    --i;
  }
  while (i != 292);
  do
  {
    uint64_t v7 = this[i];
    this[i] = 0;
    if (v7) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v7);
    }
    --i;
  }
  while (i != 289);
  do
  {
    uint64_t v8 = this[i];
    this[i] = 0;
    if (v8) {
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v8);
    }
    --i;
  }
  while (i != 286);
  uint64_t v9 = this[284];
  if (v9)
  {
    this[285] = v9;
    operator delete(v9);
  }
  uint64x2_t v10 = this[281];
  if (v10)
  {
    this[282] = v10;
    operator delete(v10);
  }
  uint64_t v11 = this[280];
  this[280] = 0;
  if (v11) {
    (*(void (**)(void *))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = this[279];
  this[279] = 0;
  if (v12) {
    (*(void (**)(void *))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = this[278];
  this[278] = 0;
  if (v13) {
    (*(void (**)(void *))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = this[277];
  this[277] = 0;
  if (v14) {
    (*(void (**)(void *))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = this[276];
  this[276] = 0;
  if (v15) {
    (*(void (**)(void *))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = this[275];
  this[275] = 0;
  if (v16) {
    (*(void (**)(void *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = this[274];
  this[274] = 0;
  if (v17) {
    (*(void (**)(void *))(*(void *)v17 + 8))(v17);
  }
  uint64x2_t v18 = this[273];
  this[273] = 0;
  if (v18) {
    (*(void (**)(void *))(*(void *)v18 + 8))(v18);
  }
  for (uint64_t j = 0; j != -12; j -= 3)
  {
    float64x2_t v20 = this[j + 238];
    if (v20)
    {
      this[j + 239] = v20;
      operator delete(v20);
    }
  }
  ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t((ScottySTFTUpmixer::STFT_tables_t *)(this + 199));
  ScottySTFTUpmixer::STFT_state_t::~STFT_state_t((ScottySTFTUpmixer::STFT_state_t *)(this + 81));
  float v21 = (uint64_t)this[80];
  this[80] = 0;
  if (v21) {
    MultiRadixFFT_Dispose(v21);
  }

  ScottyUpmixer::~ScottyUpmixer((ScottyUpmixer *)this);
}

void ScottySTFTUpmixer::STFT_tables_t::~STFT_tables_t(ScottySTFTUpmixer::STFT_tables_t *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  uint64_t v11 = (void **)((char *)this + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
  uint64x2_t v10 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v10;
    operator delete(v10);
  }
}

void ScottySTFTUpmixer::STFT_state_t::~STFT_state_t(ScottySTFTUpmixer::STFT_state_t *this)
{
  for (uint64_t i = 0; i != -144; i -= 24)
  {
    uint64_t v3 = *(void **)((char *)this + i + 920);
    if (v3)
    {
      *(void *)((char *)this + i + 928) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 97);
  if (v4)
  {
    *((void *)this + 98) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 94);
  if (v5)
  {
    *((void *)this + 95) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 91);
  if (v6)
  {
    *((void *)this + 92) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 88);
  if (v7)
  {
    *((void *)this + 89) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 85);
  if (v8)
  {
    *((void *)this + 86) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 82);
  if (v9)
  {
    *((void *)this + 83) = v9;
    operator delete(v9);
  }
  uint64x2_t v10 = (void *)*((void *)this + 79);
  if (v10)
  {
    *((void *)this + 80) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 76);
  if (v11)
  {
    *((void *)this + 77) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 73);
  if (v12)
  {
    *((void *)this + 74) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 70);
  if (v13)
  {
    *((void *)this + 71) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 67);
  if (v14)
  {
    *((void *)this + 68) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 64);
  if (v15)
  {
    *((void *)this + 65) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 61);
  if (v16)
  {
    *((void *)this + 62) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 58);
  if (v17)
  {
    *((void *)this + 59) = v17;
    operator delete(v17);
  }
  uint64x2_t v18 = (void *)*((void *)this + 55);
  if (v18)
  {
    *((void *)this + 56) = v18;
    operator delete(v18);
  }
  float64x2_t v19 = (void *)*((void *)this + 52);
  if (v19)
  {
    *((void *)this + 53) = v19;
    operator delete(v19);
  }
  float64x2_t v20 = (void *)*((void *)this + 49);
  if (v20)
  {
    *((void *)this + 50) = v20;
    operator delete(v20);
  }
  float v21 = (void *)*((void *)this + 46);
  if (v21)
  {
    *((void *)this + 47) = v21;
    operator delete(v21);
  }
  float v22 = (void *)*((void *)this + 43);
  if (v22)
  {
    *((void *)this + 44) = v22;
    operator delete(v22);
  }
  unsigned int v23 = (void *)*((void *)this + 40);
  if (v23)
  {
    *((void *)this + 41) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 37);
  if (v24)
  {
    *((void *)this + 38) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 30);
  if (v25)
  {
    *((void *)this + 31) = v25;
    operator delete(v25);
  }
  float v26 = (void *)*((void *)this + 27);
  if (v26)
  {
    *((void *)this + 28) = v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)*((void *)this + 24);
  if (v27)
  {
    *((void *)this + 25) = v27;
    operator delete(v27);
  }
  int v28 = (void *)*((void *)this + 21);
  if (v28)
  {
    *((void *)this + 22) = v28;
    operator delete(v28);
  }
  int v29 = (void *)*((void *)this + 18);
  if (v29)
  {
    *((void *)this + 19) = v29;
    operator delete(v29);
  }
  __int16 v30 = (void *)*((void *)this + 15);
  if (v30)
  {
    *((void *)this + 16) = v30;
    operator delete(v30);
  }
  int v31 = (void *)*((void *)this + 12);
  if (v31)
  {
    *((void *)this + 13) = v31;
    operator delete(v31);
  }
  float64x2_t v32 = (void *)*((void *)this + 9);
  if (v32)
  {
    *((void *)this + 10) = v32;
    operator delete(v32);
  }
  float64x2_t v33 = (void *)*((void *)this + 6);
  if (v33)
  {
    *((void *)this + 7) = v33;
    operator delete(v33);
  }
  double v34 = (void *)*((void *)this + 3);
  if (v34)
  {
    *((void *)this + 4) = v34;
    operator delete(v34);
  }
  int64x2_t v35 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v35;
    operator delete(v35);
  }
}

uint64_t AUBeamIt::GetScopeExtended(AUBeamIt *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 584;
  }
  else {
    return 0;
  }
}

uint64_t AUBeamIt::ChangeStreamFormat(AUBeamIt *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6 = a3;
  int v7 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  uint64_t v9 = 0;
  if (v7 == 1 && !v6)
  {
    uint64_t v10 = *((void *)this + 15);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v11 >= 2 && ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 80), 1u))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 1u);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)Element + 56))(Element, a5);
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        uint64_t v13 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          return v9;
        }
      }
      else
      {
        uint64_t v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315394;
        uint64_t v16 = "AUBeamIt.cpp";
        __int16 v17 = 1024;
        int v18 = 1507;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v15, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void ___ZL18AUBeamItFDLogScopev_block_invoke()
{
}

uint64_t AUBeamIt::ValidFormat(AUBeamIt *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if (*((unsigned char *)this + 633)) {
    int v4 = 32;
  }
  else {
    int v4 = 64;
  }
  if (*((unsigned char *)this + 633)) {
    int v5 = 1819304813;
  }
  else {
    int v5 = 1718773105;
  }
  if (a4->mBitsPerChannel == v4 && a4->mFormatID == v5) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    if (mChannelsPerFrame == 1) {
      unsigned int v9 = result;
    }
    else {
      unsigned int v9 = 0;
    }
    if (mChannelsPerFrame < 0x121) {
      unsigned int v10 = result;
    }
    else {
      unsigned int v10 = 0;
    }
    if ((a3 & 0xFFFFFFFE) == 2) {
      return v10;
    }
    else {
      return v9;
    }
  }
  else if (a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUBeamIt::SupportedNumChannels(AUBeamIt *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUBeamIt::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUBeamIt::StreamFormatWritable(AUBeamIt *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUBeamIt::SupportsTail(AUBeamIt *this)
{
  return 1;
}

double AUBeamIt::GetTailTime(AUBeamIt *this)
{
  return 0.05;
}

double AUBeamIt::GetLatency(AUBeamIt *this)
{
  return *((double *)this + 142);
}

uint64_t AUBeamIt::GetParameterValueStrings(AUBeamIt *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 == 3)
  {
    long long v8 = xmmword_1E623E948;
    *(void *)&long long v9 = @"LSDD.";
    CFIndex v6 = 3;
    goto LABEL_11;
  }
  if (a3 == 2)
  {
    long long v8 = xmmword_1E623E938;
    CFIndex v6 = 2;
    goto LABEL_11;
  }
  if (a3 != 1) {
    return 0;
  }
  long long v8 = xmmword_1E623E908;
  long long v9 = *(_OWORD *)&off_1E623E918;
  long long v10 = xmmword_1E623E928;
  CFIndex v6 = 6;
LABEL_11:
  CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t AUBeamIt::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

UInt8 *AUBeamIt::SaveExtendedScopes(AUBeamIt *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUBeamIt::GetParameterInfo(AUBeamIt *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 'd':
        buffer->cfNameString = @"EC Delta EIR.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Delta EIR.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v5 = 0x501502F900000000;
        goto LABEL_14;
      case 'e':
        buffer->cfNameString = @"EC IR Delay.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC IR Delay.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v5 = 0x43C8000000000000;
        goto LABEL_14;
      case 'f':
        CFStringRef v7 = @"EC Adapted flag.";
        goto LABEL_13;
      case 'g':
        buffer->cfNameString = @"EC Time aligned ref signal energy.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Time aligned ref signal energy.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v5 = 0x447A000000000000;
        goto LABEL_14;
      case 'h':
        CFStringRef v7 = @"EC Mic-Eclee cross correlation.";
LABEL_13:
        buffer->cfNameString = v7;
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v5 = 0x3F80000000000000;
LABEL_14:
        *(void *)&buffer->minCFNumberRef Value = v5;
        AudioUnitParameterOptions flags = buffer->flags;
        int v9 = 1073774592;
        goto LABEL_80;
      default:
        return 4294956418;
    }
  }
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Bypass mode mic index.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Bypass mode mic index.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 0;
      goto LABEL_50;
    case 1:
      buffer->cfNameString = @"Beam selection mode.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Beam selection mode.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v10 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x40A0000000000000;
      goto LABEL_18;
    case 2:
      buffer->cfNameString = @"EQ for beam selection.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"EQ for beam selection.", buffer->name, 52, 0x8000100u);
      int v12 = 1;
      goto LABEL_35;
    case 3:
      buffer->cfNameString = @"Beam selection algorithm.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Beam selection algorithm.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v10 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v11 = 0x4000000000000000;
LABEL_18:
      *(void *)&buffer->minCFNumberRef Value = v11;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_36;
    case 4:
      CFStringRef v13 = @"Select beams from (Auto)/Beam choice (Fixed).";
      goto LABEL_21;
    case 5:
      CFStringRef v13 = @"Select beams to.";
LABEL_21:
      buffer->cfNameString = v13;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      UInt32 v14 = 1;
      goto LABEL_38;
    case 6:
      buffer->cfNameString = @"Start frequency (Fmin).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Start frequency (Fmin).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 1000.0;
      uint64_t v15 = 0x453B800043160000;
      goto LABEL_70;
    case 7:
      buffer->cfNameString = @"End frequency (Fmax).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"End frequency (Fmax).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 5000.0;
      uint64_t v15 = 0x463B8000447A0000;
      goto LABEL_70;
    case 8:
      buffer->cfNameString = @"Energy smoothing time constant.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Energy smoothing time constant.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v16 = 0.3;
      goto LABEL_69;
    case 9:
      buffer->cfNameString = @"Energy threshold (dBFS)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Energy threshold (dBFS)", buffer->name, 52, 0x8000100u);
      UInt32 v17 = 1;
      goto LABEL_43;
    case 10:
      buffer->cfNameString = @"Selected beam.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Selected beam.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v19 = 0x438F800000000000;
      goto LABEL_31;
    case 11:
      buffer->cfNameString = @"Selected beam distance (m).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Selected beam distance (m).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      buffer->defaultCFNumberRef Value = 1.0;
      goto LABEL_45;
    case 12:
      CFStringRef v20 = @"Selected beam azimuth (deg) (X->Y).";
      goto LABEL_30;
    case 13:
      CFStringRef v20 = @"Selected beam elevation (deg) (Z->XY).";
LABEL_30:
      buffer->cfNameString = v20;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      uint64_t v19 = 0x43B4000000000000;
LABEL_31:
      *(void *)&buffer->minCFNumberRef Value = v19;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_45;
    case 14:
      CFStringRef v21 = @"Mix EC Parameters?";
      goto LABEL_34;
    case 15:
      CFStringRef v21 = @"Switch beams in echo?";
LABEL_34:
      buffer->cfNameString = v21;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
      int v12 = 2;
LABEL_35:
      buffer->clumpID = v12;
      AudioUnitParameterOptions v10 = buffer->flags;
      buffer->unit = v12;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      buffer->defaultCFNumberRef Value = 1.0;
LABEL_36:
      AudioUnitParameterOptions v22 = v10 | 0xC0100000;
      goto LABEL_81;
    case 16:
      buffer->cfNameString = @"Best beam in echo.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Best beam in echo.", buffer->name, 52, 0x8000100u);
      UInt32 v14 = 2;
LABEL_38:
      buffer->clumpID = v14;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v23 = 0x438F800000000000;
      goto LABEL_78;
    case 17:
      buffer->cfNameString = @"Echo-to-local voice threshold.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Echo-to-local voice threshold.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = -3.0;
      uint64_t v15 = 0x41400000C1400000;
      goto LABEL_70;
    case 18:
      CFStringRef v24 = @"Echo level threshold.";
      goto LABEL_42;
    case 19:
      CFStringRef v24 = @"Local voice level threshold.";
LABEL_42:
      buffer->cfNameString = v24;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v24, buffer->name, 52, 0x8000100u);
      UInt32 v17 = 2;
LABEL_43:
      buffer->clumpID = v17;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = -60.0;
      uint64_t v15 = 3267887104;
      goto LABEL_70;
    case 20:
      buffer->cfNameString = @"Echo active flag.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Echo active flag.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v18 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      buffer->defaultCFNumberRef Value = 0.0;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
LABEL_45:
      AudioUnitParameterOptions v22 = v18 | 0x40108000;
      goto LABEL_81;
    case 21:
      CFStringRef v25 = @"Mean Normalize Selection Beams.";
      goto LABEL_76;
    case 22:
      CFStringRef v25 = @"Use mic power averaging.";
      goto LABEL_76;
    case 23:
      buffer->cfNameString = @"Limit wind boost?";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limit wind boost?", buffer->name, 52, 0x8000100u);
      UInt32 v26 = 3;
      goto LABEL_77;
    case 24:
      buffer->cfNameString = @"Reference mic index.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Reference mic index.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
LABEL_50:
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v23 = 0x4170000000000000;
      goto LABEL_78;
    case 25:
      buffer->cfNameString = @"Cutoff frequency for wind boost limiting.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Cutoff frequency for wind boost limiting.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 500.0;
      uint64_t v15 = 0x457A000000000000;
      goto LABEL_70;
    case 26:
      buffer->cfNameString = @"Wind boost detection threshold (dB).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wind boost detection threshold (dB).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = 6.0;
      goto LABEL_54;
    case 27:
      buffer->cfNameString = @"Max wind boost allowed (dB).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Max wind boost allowed (dB).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = 0.0;
LABEL_54:
      uint64_t v15 = 0x4140000000000000;
      goto LABEL_70;
    case 28:
      buffer->cfNameString = @"Current Crossover Frequency (MAX).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Current Crossover Frequency (MAX).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      buffer->defaultCFNumberRef Value = 20.0;
      *(void *)&buffer->minCFNumberRef Value = 0x469C400041A00000;
      int v9 = 1079017472;
      break;
    case 29:
      buffer->cfNameString = @"Scale Cutoff.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Scale Cutoff.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = -100.0;
      uint64_t v27 = 0x42C80000C2C80000;
      goto LABEL_74;
    case 30:
      buffer->cfNameString = @"Raw Scale Smoothing.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Raw Scale Smoothing.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v28 = 0.03;
      goto LABEL_73;
    case 31:
      buffer->cfNameString = @"Omni Blend Scale Thres.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Omni Blend Scale Thres.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = -12.0;
      uint64_t v15 = 0x42C80000C2C80000;
      goto LABEL_70;
    case 32:
      buffer->cfNameString = @"Crossover Max Frequency.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Crossover Max Frequency.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      AudioUnitParameterValue v29 = 1250.0;
      goto LABEL_66;
    case 33:
      buffer->cfNameString = @"Crossover Index Attack.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Crossover Index Attack.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v30 = 0.1;
      goto LABEL_63;
    case 34:
      buffer->cfNameString = @"Crossover Index Release.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Crossover Index Release.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v30 = 1.0;
      goto LABEL_63;
    case 35:
      buffer->cfNameString = @"Crossover Index Hold.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Crossover Index Hold.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v30 = 1.5;
LABEL_63:
      buffer->defaultCFNumberRef Value = v30;
      uint64_t v15 = 0x4120000000000000;
      goto LABEL_70;
    case 36:
      buffer->cfNameString = @"Crossover Index Smoothing.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Crossover Index Smoothing.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v28 = 0.4;
      goto LABEL_73;
    case 37:
      buffer->cfNameString = @"Min Omni Blend Crossover Frequency.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Min Omni Blend Crossover Frequency.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      AudioUnitParameterValue v29 = 250.0;
LABEL_66:
      buffer->defaultCFNumberRef Value = v29;
      uint64_t v15 = 0x469C400000000000;
      goto LABEL_70;
    case 38:
      buffer->cfNameString = @"Min Omni Blend Abs. Energy Trigger.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Min Omni Blend Abs. Energy Trigger.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      buffer->defaultCFNumberRef Value = -90.0;
      uint64_t v15 = 0x43480000C3480000;
      goto LABEL_70;
    case 39:
      buffer->cfNameString = @"Wind / Scratch Detect Trigger Attack.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wind / Scratch Detect Trigger Attack.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      AudioUnitParameterValue v16 = 0.25;
LABEL_69:
      buffer->defaultCFNumberRef Value = v16;
      uint64_t v15 = 0x3F80000000000000;
LABEL_70:
      *(void *)&buffer->minCFNumberRef Value = v15;
      goto LABEL_79;
    case 40:
      buffer->cfNameString = @"Wind / Scratch Detect Trigger Release.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wind / Scratch Detect Trigger Release.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      buffer->defaultCFNumberRef Value = 0.25;
      uint64_t v27 = 0x3F80000000000000;
      goto LABEL_74;
    case 41:
      buffer->cfNameString = @"Cross Fade Length Ramp Slope.";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Cross Fade Length Ramp Slope.", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      AudioUnitParameterValue v28 = 0.75;
LABEL_73:
      buffer->defaultCFNumberRef Value = v28;
      uint64_t v27 = 0x4120000000000000;
LABEL_74:
      *(void *)&buffer->minCFNumberRef Value = v27;
      int v9 = -1005584384;
      break;
    case 42:
      CFStringRef v25 = @"Use beam crossfade for the uplink beam.";
LABEL_76:
      buffer->cfNameString = v25;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      UInt32 v26 = 1;
LABEL_77:
      buffer->clumpID = v26;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      uint64_t v23 = 0x3F80000000000000;
LABEL_78:
      *(void *)&buffer->minCFNumberRef Value = v23;
      buffer->defaultCFNumberRef Value = 0.0;
      goto LABEL_79;
    case 43:
      buffer->cfNameString = @"Enable beam switching for Auto mode (e.g., external VAD).";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Enable beam switching for Auto mode (e.g., external VAD).", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      buffer->defaultCFNumberRef Value = 1.0;
LABEL_79:
      int v9 = -1072693248;
      break;
    default:
      return 4294956418;
  }
LABEL_80:
  AudioUnitParameterOptions v22 = flags | v9;
LABEL_81:
  uint64_t result = 0;
  buffer->AudioUnitParameterOptions flags = v22;
  return result;
}

uint64_t AUBeamIt::GetParameterList(AUBeamIt *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    if (a2 != 4) {
      return 4294956430;
    }
    if (!a3)
    {
      unsigned int v4 = 5;
      goto LABEL_11;
    }
    unsigned int v4 = 5;
    *a3 = 100;
    unsigned int v5 = 104;
    unsigned int v6 = 103;
    unsigned int v7 = 102;
    unsigned int v8 = 101;
    uint64_t v9 = 4;
    uint64_t v10 = 3;
    uint64_t v11 = 2;
    uint64_t v12 = 1;
  }
  else
  {
    if (!a3)
    {
      unsigned int v4 = 44;
      goto LABEL_11;
    }
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB87B5F0;
    *((_OWORD *)a3 + 3) = xmmword_1BB87B600;
    *((_OWORD *)a3 + 4) = xmmword_1BB87B610;
    *((_OWORD *)a3 + 5) = xmmword_1BB87B620;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((_OWORD *)a3 + 7) = xmmword_1BB87A9E0;
    unsigned int v4 = 44;
    uint64_t v9 = 43;
    uint64_t v10 = 42;
    uint64_t v11 = 41;
    uint64_t v12 = 40;
    unsigned int v8 = 40;
    unsigned int v7 = 41;
    unsigned int v6 = 42;
    unsigned int v5 = 43;
    *((_OWORD *)a3 + 8) = xmmword_1BB87A9F0;
    *((_OWORD *)a3 + 9) = xmmword_1BB87B630;
  }
  a3[v12] = v8;
  a3[v11] = v7;
  a3[v10] = v6;
  a3[v9] = v5;
LABEL_11:
  uint64_t result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUBeamIt::SetBusCount(AUBeamIt *this, int a2, unsigned int a3)
{
  if (a2 == 1 && a3 - 1 <= 1)
  {
    uint64_t v3 = (AUBeamIt *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, a3);
    return 0;
  }
  uint64_t v4 = 4294956445;
  if (a2 == 2 && a3 <= 4)
  {
    uint64_t v3 = (AUBeamIt *)((char *)this + 128);
    goto LABEL_7;
  }
  return v4;
}

BOOL AUBeamIt::BusCountWritable(AUBeamIt *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUBeamIt::Render(AUBeamIt *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (AUBeamIt *)((char *)this + 80);
  while (1)
  {
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v9 >= v12) {
      break;
    }
    uint64_t Element = ausdk::AUScope::GetElement(v10, v9);
    if (Element && *(_DWORD *)(Element + 172))
    {
      UInt32 v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v9, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v8 = 1;
    }
    uint64_t v9 = (v9 + 1);
  }
  unint64_t v16 = 0;
  memset(v33, 0, sizeof(v33));
  do
  {
    uint64_t v17 = *((void *)this + 21);
    if (v17) {
      LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v16 >= v18)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v19 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), v16);
      uint64_t v20 = ausdk::AUIOElement::PrepareBuffer(v19, a4);
    }
    *((void *)v33 + v16++) = v20;
  }
  while (v16 != 4);
  if (v8) {
    return 0;
  }
  unint64_t v21 = 0;
  v32[0] = 0;
  v32[1] = 0;
  char v22 = 1;
  do
  {
    char v23 = v22;
    uint64_t v24 = *((void *)this + 15);
    if (v24) {
      LODWORD(v25) = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
    }
    else {
      uint64_t v25 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v21 >= v25)
    {
      uint64_t BufferList = 0;
    }
    else
    {
      uint64_t v26 = ausdk::AUScope::SafeGetElement(v10, v21);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v26 + 144));
    }
    char v22 = 0;
    v32[v21] = BufferList;
    unint64_t v21 = 1;
  }
  while ((v23 & 1) != 0);
  uint64_t v28 = *((void *)this + 15);
  if (v28) {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  else {
    uint64_t v29 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v30 = *((void *)this + 21);
  if (v30) {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  else {
    uint64_t v31 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  return (*(uint64_t (**)(AUBeamIt *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, _OWORD *))(*(void *)this + 184))(this, a2, a4, v29, v32, v31, v33);
}

uint64_t AUBeamIt::ProcessMultipleBufferLists(AUBeamIt *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *((void *)this + 66);
  if (*((void *)this + 67) != v13)
  {
    AUBeamIt::UpdateState(this);
    *((void *)this + 67) = v13;
  }
  uint64_t v14 = *((void *)this + 68);
  if (*((void *)this + 69) != v14)
  {
    if (*(_DWORD *)(*((void *)this + 80) + 8))
    {
      unint64_t v15 = 0;
      unint64_t v16 = (float *)((char *)this + 828);
      do
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), v15);
        *(v16 - 4) = ausdk::AUElement::GetParameter(Element, 0x64u);
        uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), v15);
        *(v16 - 3) = ausdk::AUElement::GetParameter(v18, 0x65u);
        uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), v15);
        *(v16 - 2) = ausdk::AUElement::GetParameter(v19, 0x66u);
        uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), v15);
        *(v16 - 1) = ausdk::AUElement::GetParameter(v20, 0x67u);
        unint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), v15);
        *unint64_t v16 = ausdk::AUElement::GetParameter(v21, 0x68u);
        v16 += 5;
        ++v15;
      }
      while (v15 < *(unsigned int *)(*((void *)this + 80) + 8));
    }
    *((void *)this + 69) = v14;
  }
  uint64_t v22 = *((void *)this + 70);
  if (*((void *)this + 71) != v22)
  {
    char v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 32), 0);
    *((unsigned char *)this + 753) = ausdk::AUElement::GetParameter(v23, 0x2Bu) != 0.0;
    *((void *)this + 71) = v22;
  }
  uint64_t v24 = (unsigned int *)((char *)this + 648);
  memcpy((void *)(*((void *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  unint64_t v26 = 0;
  float v89 = 0;
  int32x2_t v90 = 0;
  char v27 = 1;
  do
  {
    char v28 = v27;
    if (v26 >= a4) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = a5[v26];
    }
    char v27 = 0;
    *(&v89 + v26) = (AudioBufferList *)v29;
    unint64_t v26 = 1;
  }
  while ((v28 & 1) != 0);
  unint64_t v30 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  do
  {
    if (v30 >= a6) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = a7[v30];
    }
    *((void *)&v87 + v30++) = v31;
  }
  while (v30 != 4);
  float64x2_t v32 = v89;
  if (!v89) {
    return 4294956420;
  }
  UInt32 mNumberBuffers = v89->mNumberBuffers;
  uint64_t v34 = *((void *)this + 80);
  if (v89->mNumberBuffers != *(_DWORD *)(v34 + 8)) {
    return 4294956428;
  }
  int64x2_t v35 = v90;
  if (v90)
  {
    if (v90->mNumberBuffers != mNumberBuffers) {
      return 4294956428;
    }
  }
  uint64_t v36 = v87;
  if ((void)v87)
  {
    if (*(_DWORD *)v87 != 1) {
      return 4294956428;
    }
  }
  uint64_t v37 = *((void *)&v87 + 1);
  if (*((void *)&v87 + 1))
  {
    if (**((_DWORD **)&v87 + 1) != 1) {
      return 4294956428;
    }
  }
  long double v38 = (AudioBufferList *)v88;
  if ((void)v88)
  {
    if (*(_DWORD *)v88 > *(_DWORD *)(v34 + 12)) {
      return 4294956428;
    }
  }
  int32x2_t v39 = (AudioBufferList *)*((void *)&v88 + 1);
  if (*((void *)&v88 + 1))
  {
    if (**((_DWORD **)&v88 + 1) > *(_DWORD *)(v34 + 12)) {
      return 4294956428;
    }
  }
  BOOL v41 = v90 == 0;
  *(_DWORD *)&v86[2] = 0;
  *(_WORD *)float v86 = 0;
  __int16 v42 = (AudioDSP::Utility *)(a3 << (*((unsigned char *)this + 633) == 0));
  *(double *)&v82.UInt32 mNumberBuffers = (double)*(double *)(v34 + 24);
  v82.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v83 = 4;
  UInt32 v84 = mNumberBuffers;
  uint64_t v85 = 32;
  AudioDSP::Utility::DetectNonFinites(v42, v89, &v82, (const AudioStreamBasicDescription *)&v86[5], v25);
  if (!v41) {
    AudioDSP::Utility::DetectNonFinites(v42, v35, &v82, (const AudioStreamBasicDescription *)&v86[4], v43);
  }
  if (!*((unsigned char *)this + 576) && (!(v86[5] | v86[4]) || !*((unsigned char *)this + 634)))
  {
    BeamformerBase::ProcessBufferLists(*((BeamformerBase **)this + 80), v32, v35, (AudioBufferList *)v36, (AudioBufferList *)v37, v38, v39);
    memcpy((char *)this + 648, (const void *)(*((void *)this + 80) + 64), 0x1E8uLL);
    uint64_t v79 = (AUBeamIt *)((char *)this + 32);
    int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 32), 0);
    float v48 = 0.0;
    if (*((unsigned char *)this + 732)) {
      float v48 = 1.0;
    }
    ausdk::AUElement::SetParameter(v47, 0x14u, v48, 0);
    float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
    ausdk::AUElement::SetParameter(v49, 0xAu, (float)*((unsigned int *)this + 173), 0);
    unint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
    ausdk::AUElement::SetParameter(v50, 0xBu, *((float *)this + 175), 0);
    float v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
    ausdk::AUElement::SetParameter(v51, 0xCu, *((float *)this + 176), 0);
    uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
    ausdk::AUElement::SetParameter(v52, 0xDu, *((float *)this + 177), 0);
    unint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
    ausdk::AUElement::SetParameter(v53, 0x1Cu, *((float *)this + 189), 0);
    *(double *)&v80.UInt32 mNumberBuffers = (double)*(double *)(*((void *)this + 80) + 24);
    v80.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
    long long v81 = xmmword_1BB8727C0;
    if (v36) {
      AudioDSP::Utility::DetectNonFinites(v42, (_DWORD *)v36, &v80, (const AudioStreamBasicDescription *)&v86[3], v54);
    }
    if (v37) {
      AudioDSP::Utility::DetectNonFinites(v42, (_DWORD *)v37, &v80, (const AudioStreamBasicDescription *)&v86[2], v54);
    }
    if (v38)
    {
      UInt32 v55 = v38->mNumberBuffers;
      *(double *)&v86[6] = (double)*(double *)(*((void *)this + 80) + 24);
      *(_OWORD *)&v86[14] = xmmword_1BB8727B0;
      *(_DWORD *)&v86[30] = 4;
      *(_DWORD *)&v86[34] = v55;
      *(void *)&v86[38] = 32;
      AudioDSP::Utility::DetectNonFinites(v42, v38, (const AudioBufferList *)&v86[6], (const AudioStreamBasicDescription *)&v86[1], v54);
    }
    if (v39)
    {
      UInt32 v56 = v39->mNumberBuffers;
      *(double *)&v86[6] = (double)*(double *)(*((void *)this + 80) + 24);
      *(_OWORD *)&v86[14] = xmmword_1BB8727B0;
      *(_DWORD *)&v86[30] = 4;
      *(_DWORD *)&v86[34] = v56;
      *(void *)&v86[38] = 32;
      AudioDSP::Utility::DetectNonFinites(v42, v39, (const AudioBufferList *)&v86[6], (const AudioStreamBasicDescription *)v86, v54);
    }
    if (!*((unsigned char *)this + 634) || !*(_DWORD *)v86) {
      goto LABEL_137;
    }
    if (*((unsigned char *)this + 633))
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_195);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        float v57 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (!*(void *)AUBeamItTDLogScope(void)::scope) {
          goto LABEL_113;
        }
      }
      else
      {
        float v57 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v86[6] = 136316418;
        *(void *)&v86[10] = "AUBeamIt.cpp";
        *(_WORD *)&v86[18] = 1024;
        *(_DWORD *)&v86[20] = 1785;
        *(_WORD *)&v86[24] = 1024;
        *(_DWORD *)&v86[26] = v86[3];
        *(_WORD *)&v86[30] = 1024;
        *(_DWORD *)&v86[32] = v86[2];
        *(_WORD *)&v86[36] = 1024;
        *(_DWORD *)&v86[38] = v86[1];
        *(_WORD *)&v86[42] = 1024;
        *(_DWORD *)&v86[44] = v86[0];
        uint64_t v65 = "%25s:%-5d AUBeamItTD: (BFMicOut, BFLeeOut, AllUplinkBeams, AllSelectionBeams) is NOT finite: (%u, %u, %u, %u)";
LABEL_112:
        _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_ERROR, v65, &v86[6], 0x2Au);
      }
    }
    else
    {
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        float v57 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          goto LABEL_113;
        }
      }
      else
      {
        float v57 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v86[6] = 136316418;
        *(void *)&v86[10] = "AUBeamIt.cpp";
        *(_WORD *)&v86[18] = 1024;
        *(_DWORD *)&v86[20] = 1789;
        *(_WORD *)&v86[24] = 1024;
        *(_DWORD *)&v86[26] = v86[3];
        *(_WORD *)&v86[30] = 1024;
        *(_DWORD *)&v86[32] = v86[2];
        *(_WORD *)&v86[36] = 1024;
        *(_DWORD *)&v86[38] = v86[1];
        *(_WORD *)&v86[42] = 1024;
        *(_DWORD *)&v86[44] = v86[0];
        uint64_t v65 = "%25s:%-5d AUBeamItFD: (BFMicOut, BFLeeOut, AllUplinkBeams, AllSelectionBeams) is NOT finite: (%u, %u, %u, %u)";
        goto LABEL_112;
      }
    }
LABEL_113:
    (*(void (**)(void, void, double))(**((void **)this + 80) + 16))(*((void *)this + 80), *((unsigned int *)this + 84), (double)*(double *)(*((void *)this + 80) + 24));
    if (*((_DWORD *)this + 162) >= *(_DWORD *)(*((void *)this + 80) + 8))
    {
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
        {
          unint64_t v66 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (*(void *)AUBeamItFDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)&v86[6] = 136315394;
              *(void *)&v86[10] = "AUBeamIt.cpp";
              *(_WORD *)&v86[18] = 1024;
              *(_DWORD *)&v86[20] = 1797;
              _os_log_impl(&dword_1BB0CE000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", &v86[6], 0x12u);
            }
          }
        }
      }
      *((_DWORD *)this + 162) = *(_DWORD *)(*((void *)this + 80) + 8) - 1;
      float v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v79, 0);
      ausdk::AUElement::SetParameter(v67, 0, (float)*((unsigned int *)this + 162), 0);
    }
    if (v36) {
      memcpy(*(void **)(v36 + 16), v32->mBuffers[*v24].mData, v32->mBuffers[*v24].mDataByteSize);
    }
    if (v37)
    {
      float v68 = *(void **)(v37 + 16);
      if (v35) {
        memcpy(v68, v35->mBuffers[*v24].mData, v35->mBuffers[*v24].mDataByteSize);
      }
      else {
        bzero(v68, *(unsigned int *)(v37 + 12));
      }
    }
    if (v38 && v38->mNumberBuffers)
    {
      unint64_t v69 = 0;
      p_mData = &v38->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v69;
        p_mData += 2;
      }
      while (v69 < v38->mNumberBuffers);
    }
    if (v39 && v39->mNumberBuffers)
    {
      unint64_t v71 = 0;
      float v72 = &v39->mBuffers[0].mData;
      do
      {
        bzero(*v72, *((unsigned int *)v72 - 1));
        ++v71;
        v72 += 2;
      }
      while (v71 < v39->mNumberBuffers);
    }
    float v73 = (char *)this + 20 * *((unsigned int *)this + 162) + 812;
    *((_DWORD *)this + 207) = *((_DWORD *)v73 + 4);
    *(_OWORD *)((char *)this + 812) = *(_OWORD *)v73;
    memcpy((void *)(*((void *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
    goto LABEL_137;
  }
  if (*((_DWORD *)this + 162) >= *(_DWORD *)(*((void *)this + 80) + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        __int16 v44 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)&v86[6] = 136315394;
            *(void *)&v86[10] = "AUBeamIt.cpp";
            *(_WORD *)&v86[18] = 1024;
            *(_DWORD *)&v86[20] = 1684;
            _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", &v86[6], 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 162) = *(_DWORD *)(*((void *)this + 80) + 8) - 1;
    int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v45, 0, (float)*((unsigned int *)this + 162), 0);
  }
  if (v36) {
    memcpy(*(void **)(v36 + 16), v32->mBuffers[*v24].mData, v32->mBuffers[*v24].mDataByteSize);
  }
  if (v37)
  {
    __int16 v46 = *(void **)(v37 + 16);
    if (v35) {
      memcpy(v46, v35->mBuffers[*v24].mData, v35->mBuffers[*v24].mDataByteSize);
    }
    else {
      bzero(v46, *(unsigned int *)(v37 + 12));
    }
  }
  if (v38 && v38->mNumberBuffers)
  {
    unint64_t v58 = 0;
    uint64_t v59 = &v38->mBuffers[0].mData;
    do
    {
      bzero(*v59, *((unsigned int *)v59 - 1));
      ++v58;
      v59 += 2;
    }
    while (v58 < v38->mNumberBuffers);
  }
  if (v39 && v39->mNumberBuffers)
  {
    unint64_t v60 = 0;
    BOOL v61 = &v39->mBuffers[0].mData;
    do
    {
      bzero(*v61, *((unsigned int *)v61 - 1));
      ++v60;
      v61 += 2;
    }
    while (v60 < v39->mNumberBuffers);
  }
  uint64_t v62 = (char *)this + 20 * *((unsigned int *)this + 162) + 812;
  *((_DWORD *)this + 207) = *((_DWORD *)v62 + 4);
  *(_OWORD *)((char *)this + 812) = *(_OWORD *)v62;
  memcpy((void *)(*((void *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
  if (!(v86[5] | v86[4])) {
    goto LABEL_137;
  }
  if (*((unsigned char *)this + 633))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_195);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      int v63 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (!*(void *)AUBeamItTDLogScope(void)::scope) {
        goto LABEL_137;
      }
    }
    else
    {
      int v63 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v86[6] = 136315906;
      *(void *)&v86[10] = "AUBeamIt.cpp";
      *(_WORD *)&v86[18] = 1024;
      *(_DWORD *)&v86[20] = 1724;
      *(_WORD *)&v86[24] = 1024;
      *(_DWORD *)&v86[26] = v86[5];
      *(_WORD *)&v86[30] = 1024;
      *(_DWORD *)&v86[32] = v86[4];
      unint64_t v64 = "%25s:%-5d AUBeamItTD: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)";
LABEL_100:
      _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_ERROR, v64, &v86[6], 0x1Eu);
    }
  }
  else
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      int v63 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
      if (!*(void *)AUBeamItFDLogScope(void)::scope) {
        goto LABEL_137;
      }
    }
    else
    {
      int v63 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v86[6] = 136315906;
      *(void *)&v86[10] = "AUBeamIt.cpp";
      *(_WORD *)&v86[18] = 1024;
      *(_DWORD *)&v86[20] = 1728;
      *(_WORD *)&v86[24] = 1024;
      *(_DWORD *)&v86[26] = v86[5];
      *(_WORD *)&v86[30] = 1024;
      *(_DWORD *)&v86[32] = v86[4];
      unint64_t v64 = "%25s:%-5d AUBeamItFD: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)";
      goto LABEL_100;
    }
  }
LABEL_137:
  uint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), 0);
  ausdk::AUElement::SetParameter(v74, 0x64u, *((float *)this + 203), 0);
  float v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), 0);
  ausdk::AUElement::SetParameter(v75, 0x65u, *((float *)this + 204), 0);
  float v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), 0);
  ausdk::AUElement::SetParameter(v76, 0x66u, *((float *)this + 205), 0);
  float v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), 0);
  ausdk::AUElement::SetParameter(v77, 0x67u, *((float *)this + 206), 0);
  unsigned int v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), 0);
  ausdk::AUElement::SetParameter(v78, 0x68u, *((float *)this + 207), 0);
  return 0;
}

void AUBeamIt::UpdateState(AUBeamIt *this)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AUBeamIt *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 32), 0);
  *((_DWORD *)this + 162) = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v4, 1u);
  unsigned int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 164) = ausdk::AUElement::GetParameter(v5, 2u);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 165) = (int)ausdk::AUElement::GetParameter(v6, 3u);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 166) = ausdk::AUElement::GetParameter(v7, 4u);
  char v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 167) = ausdk::AUElement::GetParameter(v8, 5u);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 168) = ausdk::AUElement::GetParameter(v9, 6u);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v10, 7u);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 170) = ausdk::AUElement::GetParameter(v11, 8u);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v12, 9u);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 688) = ausdk::AUElement::GetParameter(v13, 0x15u) != 0.0;
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 689) = ausdk::AUElement::GetParameter(v14, 0x16u) != 0.0;
  unint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 173) = ausdk::AUElement::GetParameter(v15, 0xAu);
  unint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 175) = (float)ausdk::AUElement::GetParameter(v16, 0xBu);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 176) = (float)ausdk::AUElement::GetParameter(v17, 0xCu);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 177) = (float)ausdk::AUElement::GetParameter(v18, 0xDu);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 712) = ausdk::AUElement::GetParameter(v19, 0xEu) != 0.0;
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 713) = ausdk::AUElement::GetParameter(v20, 0xFu) != 0.0;
  unint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 179) = ausdk::AUElement::GetParameter(v21, 0x10u);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v22, 0x11u);
  char v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v23, 0x12u);
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 182) = ausdk::AUElement::GetParameter(v24, 0x13u);
  uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 732) = ausdk::AUElement::GetParameter(v25, 0x14u) != 0.0;
  unint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 733) = ausdk::AUElement::GetParameter(v26, 0x17u) != 0.0;
  char v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 184) = ausdk::AUElement::GetParameter(v27, 0x18u);
  char v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 185) = ausdk::AUElement::GetParameter(v28, 0x19u);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 186) = ausdk::AUElement::GetParameter(v29, 0x1Au);
  unint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 187) = ausdk::AUElement::GetParameter(v30, 0x1Bu);
  uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 189) = ausdk::AUElement::GetParameter(v31, 0x1Cu);
  float64x2_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 190) = ausdk::AUElement::GetParameter(v32, 0x1Du);
  float64x2_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 191) = ausdk::AUElement::GetParameter(v33, 0x1Eu);
  uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 192) = ausdk::AUElement::GetParameter(v34, 0x1Fu);
  int64x2_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 193) = ausdk::AUElement::GetParameter(v35, 0x20u);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 194) = ausdk::AUElement::GetParameter(v36, 0x21u);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 195) = ausdk::AUElement::GetParameter(v37, 0x22u);
  long double v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 196) = ausdk::AUElement::GetParameter(v38, 0x23u);
  int32x2_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 197) = ausdk::AUElement::GetParameter(v39, 0x24u);
  int64x2_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 198) = ausdk::AUElement::GetParameter(v40, 0x25u);
  BOOL v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 199) = ausdk::AUElement::GetParameter(v41, 0x26u);
  __int16 v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 200) = ausdk::AUElement::GetParameter(v42, 0x27u);
  float v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 201) = ausdk::AUElement::GetParameter(v43, 0x28u);
  __int16 v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 202) = ausdk::AUElement::GetParameter(v44, 0x29u);
  int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 752) = ausdk::AUElement::GetParameter(v45, 0x2Au) != 0.0;
  __int16 v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 753) = ausdk::AUElement::GetParameter(v46, 0x2Bu) != 0.0;
  float v47 = *(double *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 0) + 80);
  float v48 = v47 * 0.5;
  if (*((float *)this + 168) > (float)(v47 * 0.5))
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        float v49 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1908;
            _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmin must be < (samplingRate/2). Setting Fmiuint64_t n = samplingRate/2.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((float *)this + 168) = v48;
    unint64_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v50, 6u, *((float *)this + 168), 0);
  }
  float v51 = *((float *)this + 169);
  if (v51 > v48)
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        uint64_t v52 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1913;
            _os_log_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmax must be < (samplingRate/2). Setting Fmax = samplingRate/2.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((float *)this + 169) = v48;
    unint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v53, 7u, *((float *)this + 169), 0);
    float v51 = *((float *)this + 169);
  }
  if (*((float *)this + 168) > v51)
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        float v54 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1918;
            _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fmin must be <= Fmax. Setting Fmiuint64_t n = Fmax.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 168) = *((_DWORD *)this + 169);
    UInt32 v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v55, 6u, *((float *)this + 168), 0);
  }
  uint64_t v56 = *((void *)this + 80);
  if (*((_DWORD *)this + 162) >= *(_DWORD *)(v56 + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        float v57 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1923;
            _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d BypassMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 162) = *(_DWORD *)(*((void *)this + 80) + 8) - 1;
    unint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v58, 0, (float)*((unsigned int *)this + 162), 0);
    uint64_t v56 = *((void *)this + 80);
  }
  unsigned int v59 = *(_DWORD *)(v56 + 12);
  if (*((_DWORD *)this + 166) >= v59)
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        unint64_t v60 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1928;
            _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsFrom set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 166) = *(_DWORD *)(*((void *)this + 80) + 12) - 1;
    BOOL v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v61, 4u, (float)*((unsigned int *)this + 166), 0);
    unsigned int v59 = *(_DWORD *)(*((void *)this + 80) + 12);
  }
  if (*((_DWORD *)this + 167) >= v59)
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        uint64_t v62 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1933;
            _os_log_impl(&dword_1BB0CE000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsTo set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 167) = *(_DWORD *)(*((void *)this + 80) + 12) - 1;
    int v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v63, 5u, (float)*((unsigned int *)this + 167), 0);
  }
  if (*((_DWORD *)this + 163) == 2)
  {
    if (*((_DWORD *)this + 167) == *((_DWORD *)this + 166)) {
      goto LABEL_75;
    }
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        unint64_t v64 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1939;
            _os_log_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fixed beam selection mode is chosen. Setting SelectBeamsTo = SelectBeamsFrom.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 167) = *((_DWORD *)this + 166);
    uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    float v66 = (float)*((unsigned int *)this + 167);
    unsigned int v67 = 5;
  }
  else
  {
    if (*((_DWORD *)this + 166) <= *((_DWORD *)this + 167)) {
      goto LABEL_75;
    }
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        float v68 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1946;
            _os_log_impl(&dword_1BB0CE000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d SelectBeamsFrom set to a value greater than SelectBeamsTo. Setting it to SelectBeamsTo.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 166) = *((_DWORD *)this + 167);
    uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    float v66 = (float)*((unsigned int *)this + 166);
    unsigned int v67 = 4;
  }
  ausdk::AUElement::SetParameter(v65, v67, v66, 0);
LABEL_75:
  if (*((_DWORD *)this + 179) >= *(_DWORD *)(*((void *)this + 80) + 12))
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        unint64_t v69 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1952;
            _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d BestBeamInEcho set to a value greater than number of beams. Setting it to mNumBeams-1.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 179) = *(_DWORD *)(*((void *)this + 80) + 12) - 1;
    float v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v70, 0x10u, (float)*((unsigned int *)this + 179), 0);
  }
  if (*((float *)this + 185) > v48)
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        unint64_t v71 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1958;
            _os_log_impl(&dword_1BB0CE000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d FcLimitWindBoost must be < (samplingRate/2). Setting FcLimitWindBoost = samplingRate/2.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((float *)this + 185) = v48;
    float v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v72, 0x19u, *((float *)this + 185), 0);
  }
  if (*((_DWORD *)this + 184) >= *(_DWORD *)(*((void *)this + 80) + 8))
  {
    if (AUBeamItFDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItFDLogScope(void)::scope + 8))
      {
        float v73 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (*(void *)AUBeamItFDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItFDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v75 = 136315394;
            float v76 = "AUBeamIt.cpp";
            __int16 v77 = 1024;
            int v78 = 1963;
            _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d RefMicIndex set to a value greater than number of input mics. Setting it to mNumMics-1.\n", (uint8_t *)&v75, 0x12u);
          }
        }
      }
    }
    *((_DWORD *)this + 184) = *(_DWORD *)(*((void *)this + 80) + 8) - 1;
    uint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v74, 0x18u, (float)*((unsigned int *)this + 184), 0);
  }
}

void ___ZL18AUBeamItTDLogScopev_block_invoke()
{
}

uint64_t AUBeamIt::CanScheduleParameters(AUBeamIt *this)
{
  return 0;
}

uint64_t AUBeamIt::SetParameter(AUBeamIt *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBeamIt *)((char *)this + 584), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    uint64_t v9 = (char *)this + 544;
LABEL_7:
    uint64_t result = 0;
    ++*(void *)v9;
    return result;
  }
  if (!a3)
  {
    char v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    uint64_t v9 = (char *)this + 528;
    if (a2 == 43) {
      uint64_t v9 = (char *)this + 560;
    }
    goto LABEL_7;
  }
  return 4294956418;
}

uint64_t AUBeamIt::SetProperty(AUBeamIt *this, int a2, int a3, unsigned int a4, const __CFNumber **a5, unsigned int a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 4629)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 576) = *(_DWORD *)a5 != 0;
    }
    else if (a2 == 3700)
    {
      uint64_t result = 4294956445;
      if (a6 >= 4)
      {
        if (*(unsigned char *)a5) {
          return 0;
        }
        else {
          return 4294956445;
        }
      }
    }
    return result;
  }
  switch(a2)
  {
    case 4630:
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        uint64_t v13 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v23 = 136315650;
        uint64_t v24 = "AUBeamIt.cpp";
        __int16 v25 = 1024;
        int v26 = 564;
        __int16 v27 = 1024;
        int v28 = 4630;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property BeamformerCoeffs (prop id: %d).", (uint8_t *)&v23, 0x18u);
      }
LABEL_25:
      if (!a5)
      {
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          uint64_t v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v17 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315394;
          uint64_t v24 = "AUBeamIt.cpp";
          __int16 v25 = 1024;
          int v26 = 567;
          uint64_t v19 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.";
          uint64_t v20 = v17;
          uint32_t v21 = 18;
          goto LABEL_64;
        }
        return 4294956445;
      }
      if ((*(unsigned int (**)(void, const __CFNumber *))(**((void **)this + 80) + 40))(*((void *)this + 80), *a5))
      {
LABEL_27:
        if (a6 == 4)
        {
          if (*((void *)this + 80))
          {
            int v14 = *(_DWORD *)a5;
            if (AUBeamItFDLogScope(void)::once != -1) {
              dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
            }
            if (AUBeamItFDLogScope(void)::scope)
            {
              unint64_t v15 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
              if (!*(void *)AUBeamItFDLogScope(void)::scope) {
                return (*(uint64_t (**)(void, BOOL))(**((void **)this + 80) + 56))(*((void *)this + 80), v14 != 0);
              }
            }
            else
            {
              unint64_t v15 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              int v23 = 136315906;
              uint64_t v24 = "AUBeamIt.cpp";
              __int16 v25 = 1024;
              int v26 = 593;
              __int16 v27 = 1024;
              int v28 = v14 != 0;
              __int16 v29 = 1024;
              int v30 = 4631;
              _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property EnableSubbandDOACalculation to %d (prop id: %d).", (uint8_t *)&v23, 0x1Eu);
            }
            return (*(uint64_t (**)(void, BOOL))(**((void **)this + 80) + 56))(*((void *)this + 80), v14 != 0);
          }
          if (AUBeamItFDLogScope(void)::once != -1) {
            dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
          }
          if (AUBeamItFDLogScope(void)::scope)
          {
            uint64_t v18 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
            if (!*(void *)AUBeamItFDLogScope(void)::scope) {
              return 4294956429;
            }
          }
          else
          {
            uint64_t v18 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            int v23 = 136315650;
            uint64_t v24 = "AUBeamIt.cpp";
            __int16 v25 = 1024;
            int v26 = 596;
            __int16 v27 = 1024;
            int v28 = 4631;
            _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Setting property EnableSubbandDOACalculation failed (prop id: %d).", (uint8_t *)&v23, 0x18u);
          }
          return 4294956429;
        }
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          unint64_t v16 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          unint64_t v16 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315906;
          uint64_t v24 = "AUBeamIt.cpp";
          __int16 v25 = 1024;
          int v26 = 586;
          __int16 v27 = 1024;
          int v28 = 4631;
          __int16 v29 = 1024;
          int v30 = a6;
          uint64_t v19 = "%25s:%-5d Setting property EnableSubbandDOACalculation failed (prop id: %d). *inData should be UInt32. P"
                "rovided inDataSize = %u.\n";
          uint64_t v20 = v16;
          uint32_t v21 = 30;
LABEL_64:
          _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
          return 4294956445;
        }
        return 4294956445;
      }
      *((unsigned char *)this + 632) = 1;
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        uint64_t v22 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        uint64_t v22 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      int v23 = 136315394;
      uint64_t v24 = "AUBeamIt.cpp";
      __int16 v25 = 1024;
      int v26 = 576;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_INFO, "%25s:%-5d BeamformerCoeffs successfully set.", (uint8_t *)&v23, 0x12u);
      return 0;
    case 4631:
      goto LABEL_27;
    case 4633:
      CFBooleanRef v10 = applesauce::CF::convert_as<double,0>(*a5);
      if (v11)
      {
        CFBooleanRef v12 = v10;
        uint64_t result = 0;
        *((void *)this + 142) = v12;
        return result;
      }
      return 4294956445;
  }
  return result;
}

uint64_t AUBeamIt::GetProperty(AUBeamIt *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 4630)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v9 = *((unsigned __int8 *)this + 576);
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v9 = *((unsigned __int8 *)this + 376);
    }
LABEL_22:
    char *__dst = v9;
    return result;
  }
  switch(a2)
  {
    case 4631:
      uint64_t v8 = *((void *)this + 80);
      if (v8)
      {
        int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
        uint64_t result = 0;
        goto LABEL_22;
      }
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        uint64_t v19 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          return 4294956429;
        }
      }
      else
      {
        uint64_t v19 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        return 4294956429;
      }
      *(_DWORD *)uint64_t v22 = 136315650;
      *(void *)&uint64_t v22[4] = "AUBeamIt.cpp";
      __int16 v23 = 1024;
      int v24 = 489;
      __int16 v25 = 1024;
      int v26 = 4631;
      uint64_t v20 = "%25s:%-5d Getting property EnableSubbandDOACalculation failed (prop id: %d).";
      goto LABEL_52;
    case 4632:
      uint64_t v14 = *((void *)this + 80);
      if (!v14 || !(*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14))
      {
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          uint64_t v18 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope)
          {
LABEL_44:
            bzero(__dst, 4 * (2 * *((_DWORD *)this + 84) + 2));
            return 0;
          }
        }
        else
        {
          uint64_t v18 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v22 = 136315650;
          *(void *)&uint64_t v22[4] = "AUBeamIt.cpp";
          __int16 v23 = 1024;
          int v24 = 501;
          __int16 v25 = 1024;
          int v26 = 4632;
          _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Possibly no initialization for SubbandDOA(prop id: %d).", v22, 0x18u);
        }
        goto LABEL_44;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 80) + 72))(*((void *)this + 80));
      CFBooleanRef v12 = *(const void **)(v15 + 8);
      size_t v13 = *(void *)(v15 + 16) - (void)v12;
LABEL_18:
      memcpy(__dst, v12, v13);
      return 0;
    case 4633:
      *(void *)uint64_t v22 = *((void *)this + 142);
      CFNumberRef CFArray = CFNumberCreate(0, kCFNumberDoubleType, v22);
      if (!CFArray)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      goto LABEL_20;
    case 4634:
    case 4635:
    case 4636:
    case 4637:
    case 4638:
    case 4639:
      return result;
    case 4640:
      uint64_t v11 = *((void *)this + 80);
      CFBooleanRef v12 = *(const void **)(v11 + 19152);
      size_t v13 = 4 * *(unsigned int *)(v11 + 12);
      goto LABEL_18;
    default:
      if (a2 != 104632)
      {
        if (a2 == 104640)
        {
          CFNumberRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)(*((void *)this + 80) + 19152));
LABEL_20:
          uint64_t result = 0;
          *(void *)__dst = CFArray;
        }
        return result;
      }
      uint64_t v16 = *((void *)this + 80);
      if (v16 && (*(uint64_t (**)(uint64_t))(*(void *)v16 + 72))(v16))
      {
        uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 80) + 72))(*((void *)this + 80));
        *(void *)uint64_t v22 = 0;
        *(void *)__dst = applesauce::CF::details::make_CFArrayRef<float>((void *)(v17 + 8));
        applesauce::CF::ArrayRef::~ArrayRef((const void **)v22);
        return 0;
      }
      if (AUBeamItFDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
      }
      if (AUBeamItFDLogScope(void)::scope)
      {
        uint64_t v19 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
        if (!*(void *)AUBeamItFDLogScope(void)::scope) {
          return 4294956429;
        }
      }
      else
      {
        uint64_t v19 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v22 = 136315650;
        *(void *)&uint64_t v22[4] = "AUBeamIt.cpp";
        __int16 v23 = 1024;
        int v24 = 514;
        __int16 v25 = 1024;
        int v26 = 104632;
        uint64_t v20 = "%25s:%-5d Getting property SubbandDOA_CF failed (prop id: %d).";
LABEL_52:
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, v20, v22, 0x18u);
      }
      return 4294956429;
  }
}

void sub_1BB56EF88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUBeamIt::GetPropertyInfo(AUBeamIt *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 4630)
  {
    switch(a2)
    {
      case 4631:
        uint64_t result = 0;
        *a5 = 4;
        *a6 = 1;
        return result;
      case 4632:
        uint64_t v11 = *((void *)this + 80);
        if (v11 && (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11))
        {
          uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 80) + 72))(*((void *)this + 80));
          uint64_t result = 0;
          int v13 = *(_DWORD *)(v12 + 16) - *(_DWORD *)(v12 + 8);
          goto LABEL_17;
        }
        *a5 = 8 * *((_DWORD *)this + 84) + 8;
        *a6 = 0;
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          uint64_t v15 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          uint64_t v15 = MEMORY[0x1E4F14500];
        }
        BOOL v17 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v17) {
          return result;
        }
        int v18 = 136315650;
        uint64_t v19 = "AUBeamIt.cpp";
        __int16 v20 = 1024;
        int v21 = 430;
        __int16 v22 = 1024;
        int v23 = 4632;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Possibly no initialization for Subband DOA (prop id: %d).", (uint8_t *)&v18, 0x18u);
        return 0;
      case 4633:
        uint64_t result = 0;
        *a6 = *((unsigned char *)this + 17) ^ 1;
        goto LABEL_21;
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
        return result;
      case 4640:
        uint64_t result = 0;
        int v13 = 4 * *(_DWORD *)(*((void *)this + 80) + 12);
LABEL_17:
        *a5 = v13;
        *a6 = 0;
        return result;
      default:
        if (a2 != 104632)
        {
          if (a2 != 104640) {
            return result;
          }
          goto LABEL_20;
        }
        uint64_t v14 = *((void *)this + 80);
        if (v14 && (*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14))
        {
LABEL_20:
          uint64_t result = 0;
          *a6 = 0;
LABEL_21:
          unsigned int v10 = 8;
          goto LABEL_22;
        }
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          uint64_t v16 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope) {
            return 4294956429;
          }
        }
        else
        {
          uint64_t v16 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315650;
          uint64_t v19 = "AUBeamIt.cpp";
          __int16 v20 = 1024;
          int v21 = 442;
          __int16 v22 = 1024;
          int v23 = 104632;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Getting property info for SubbandDOA_CF failed (prop id: %d).", (uint8_t *)&v18, 0x18u);
        }
        return 4294956429;
    }
  }
  if (a2 == 21 || a2 == 3700)
  {
    uint64_t result = 0;
    *a6 = 1;
    unsigned int v10 = 4;
LABEL_22:
    *a5 = v10;
  }
  return result;
}

uint64_t AUBeamIt::Reset(AUBeamIt *this)
{
  return 0;
}

uint64_t AUBeamIt::Cleanup(AUBeamIt *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUBeamItFDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
  }
  if (AUBeamItFDLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(void *)AUBeamItFDLogScope(void)::scope) {
      return (*(uint64_t (**)(void))(**((void **)this + 80) + 32))(*((void *)this + 80));
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    unsigned int v5 = "AUBeamIt.cpp";
    __int16 v6 = 1024;
    int v7 = 255;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 80) + 32))(*((void *)this + 80));
}

uint64_t AUBeamIt::Initialize(AUBeamIt *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (AUBeamItFDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
  }
  if (AUBeamItFDLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(void *)AUBeamItFDLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = 136315394;
    float64x2_t v32 = "AUBeamIt.cpp";
    __int16 v33 = 1024;
    int v34 = 178;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Initialize.\n", (uint8_t *)&v31, 0x12u);
    uint64_t v3 = AUBeamItFDLogScope(void)::once;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v3 = -1;
LABEL_10:
  if (!*((unsigned char *)this + 632))
  {
    if (v3 != -1) {
      dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
    }
    if (AUBeamItFDLogScope(void)::scope)
    {
      unsigned int v5 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
      if (!*(void *)AUBeamItFDLogScope(void)::scope)
      {
LABEL_50:
        *((unsigned char *)this + 576) = 1;
        *(_DWORD *)(*((void *)this + 80) + 8) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), 0)+ 108);
        uint64_t v20 = *((void *)this + 21);
        if (v20) {
          LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
        }
        else {
          uint64_t v21 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
        }
        if (v21 < 3) {
          *(_DWORD *)(*((void *)this + 80) + 12) = 288;
        }
        else {
          *(_DWORD *)(*((void *)this + 80) + 12) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), 2u)+ 108);
        }
LABEL_56:
        if (AUBeamItFDLogScope(void)::once != -1) {
          dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
        }
        if (AUBeamItFDLogScope(void)::scope)
        {
          __int16 v22 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
          if (!*(void *)AUBeamItFDLogScope(void)::scope) {
            return 0;
          }
        }
        else
        {
          __int16 v22 = MEMORY[0x1E4F14500];
        }
        BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v23) {
          return result;
        }
        int v31 = 136315394;
        float64x2_t v32 = "AUBeamIt.cpp";
        __int16 v33 = 1024;
        int v34 = 245;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUBeamIt: Successfully initialized.\n", (uint8_t *)&v31, 0x12u);
        return 0;
      }
    }
    else
    {
      unsigned int v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 136315394;
      float64x2_t v32 = "AUBeamIt.cpp";
      __int16 v33 = 1024;
      int v34 = 185;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting BeamFormerCoeffs plist! Setting AU in Bypass mode.\n", (uint8_t *)&v31, 0x12u);
    }
    goto LABEL_50;
  }
  if (v3 != -1) {
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
  }
  if (AUBeamItFDLogScope(void)::scope)
  {
    int v4 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(void *)AUBeamItFDLogScope(void)::scope) {
      goto LABEL_24;
    }
  }
  else
  {
    int v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = 136315394;
    float64x2_t v32 = "AUBeamIt.cpp";
    __int16 v33 = 1024;
    int v34 = 203;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called with properly set BeamFormerCoeffs plist.\n", (uint8_t *)&v31, 0x12u);
  }
LABEL_24:
  unsigned int v6 = 0;
  double v7 = 0.0;
  while (1)
  {
    uint64_t v8 = *((void *)this + 15);
    if (v8) {
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
    else {
      uint64_t v9 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v6 >= v9)
    {
      for (unsigned int i = 0; ; ++i)
      {
        uint64_t v13 = *((void *)this + 21);
        if (v13) {
          LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
        }
        else {
          uint64_t v14 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
        }
        if (i >= v14)
        {
          unsigned int v18 = *(_DWORD *)(*((void *)this + 80) + 8);
          Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, v18);
          AUBeamIt::UpdateState(this);
          *((void *)this + 67) = *((void *)this + 66);
          memcpy((void *)(*((void *)this + 80) + 64), (char *)this + 648, 0x1E8uLL);
          (*(void (**)(void, void, double))(**((void **)this + 80) + 16))(*((void *)this + 80), *((unsigned int *)this + 84), v7);
          (*(void (**)(AUBeamIt *, void, void))(*(void *)this + 72))(this, 0, 0);
          goto LABEL_56;
        }
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 128), i);
        double v7 = *(double *)(Element + 80);
        unsigned int v16 = *(_DWORD *)(Element + 108);
        if (i > 1)
        {
          if (v16 > *(_DWORD *)(*((void *)this + 80) + 12))
          {
            if (AUBeamItFDLogScope(void)::once != -1) {
              dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
            }
            if (AUBeamItFDLogScope(void)::scope)
            {
              BOOL v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
              if (!*(void *)AUBeamItFDLogScope(void)::scope) {
                return 4294956421;
              }
            }
            else
            {
              BOOL v17 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              int v30 = *(_DWORD *)(*((void *)this + 80) + 12);
              int v31 = 136315906;
              float64x2_t v32 = "AUBeamIt.cpp";
              __int16 v33 = 1024;
              int v34 = 222;
              __int16 v35 = 1024;
              unsigned int v36 = v16;
              __int16 v37 = 1024;
              int v38 = v30;
              int v26 = "%25s:%-5d The number of channels in the output format (%u) is larger than the number of uplink/selec"
                    "tion beams (%u).\n";
              goto LABEL_84;
            }
            return 4294956421;
          }
        }
        else if (v16 != 1)
        {
          if (AUBeamItFDLogScope(void)::once != -1) {
            dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
          }
          if (AUBeamItFDLogScope(void)::scope)
          {
            uint64_t v27 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
            if (!*(void *)AUBeamItFDLogScope(void)::scope) {
              return 4294956421;
            }
          }
          else
          {
            uint64_t v27 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            int v31 = 136315650;
            float64x2_t v32 = "AUBeamIt.cpp";
            __int16 v33 = 1024;
            int v34 = 216;
            __int16 v35 = 1024;
            unsigned int v36 = v16;
            int v26 = "%25s:%-5d The number of channels in the output format (%u) not equal to 1.\n";
            int v28 = v27;
            uint32_t v29 = 24;
            goto LABEL_85;
          }
          return 4294956421;
        }
      }
    }
    uint64_t v10 = ausdk::AUScope::SafeGetElement((AUBeamIt *)((char *)this + 80), v6);
    unsigned int v11 = *(_DWORD *)(v10 + 108);
    if (v11 != *(_DWORD *)(*((void *)this + 80) + 8)) {
      break;
    }
    double v7 = *(double *)(v10 + 80);
    ++v6;
  }
  if (AUBeamItFDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItFDLogScope(void)::once, &__block_literal_global_12895);
  }
  if (AUBeamItFDLogScope(void)::scope)
  {
    BOOL v17 = *(NSObject **)AUBeamItFDLogScope(void)::scope;
    if (!*(void *)AUBeamItFDLogScope(void)::scope) {
      return 4294956421;
    }
  }
  else
  {
    BOOL v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    int v25 = *(_DWORD *)(*((void *)this + 80) + 8);
    int v31 = 136315906;
    float64x2_t v32 = "AUBeamIt.cpp";
    __int16 v33 = 1024;
    int v34 = 208;
    __int16 v35 = 1024;
    unsigned int v36 = v11;
    __int16 v37 = 1024;
    int v38 = v25;
    int v26 = "%25s:%-5d The number of channels in the input format (%u) is not equal to the number of mics the beamformer expects (%u).\n";
LABEL_84:
    int v28 = v17;
    uint32_t v29 = 30;
LABEL_85:
    _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&v31, v29);
  }
  return 4294956421;
}

void AUBeamIt::CreateExtendedElements(AUBeamIt *this)
{
  uint64_t v1 = (AUBeamIt *)((char *)this + 584);
  ausdk::AUScope::Initialize((AUBeamIt *)((char *)this + 584), this, 4, 16);
  for (unsigned int i = 0; i != 16; ++i)
  {
    std::to_string(&v8, i);
    uint64_t v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)AudioStreamBasicDescription __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      unsigned int v5 = __p;
    }
    else {
      unsigned int v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB56FD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUBeamIt::~AUBeamIt(AUBeamIt *this)
{
  AUBeamIt::~AUBeamIt(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B41F0;
  AUBeamIt::Cleanup(this);
  uint64_t v2 = *((void *)this + 80);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 80) = 0;
  }
  uint64_t v3 = (void **)((char *)this + 600);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECMicRef::ValidFormat(AUECMicRef *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9) {
    return 0;
  }
  else {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
}

uint64_t AUECMicRef::SupportedNumChannels(AUECMicRef *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUECMicRef::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 8;
}

BOOL AUECMicRef::StreamFormatWritable(AUECMicRef *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUECMicRef::SupportsTail(AUECMicRef *this)
{
  return 1;
}

double AUECMicRef::GetTailTime(AUECMicRef *this)
{
  return 0.0;
}

double AUECMicRef::GetLatency(AUECMicRef *this)
{
  return 0.0;
}

uint64_t AUECMicRef::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUECMicRef::GetParameterInfo(AUECMicRef *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x16)
  {
    CFStringRef v6 = *(&off_1E623E9C0 + a3);
    AudioUnitParameterUnit v7 = dword_1BB8A8280[a3];
    AudioUnitParameterValue v8 = flt_1BB8A82DC[a3];
    AudioUnitParameterValue v9 = flt_1BB8A8338[a3];
    AudioUnitParameterValue v10 = flt_1BB8A8394[a3];
    int v11 = dword_1BB8A83F0[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECMicRef::GetParameterList(AUECMicRef *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((void *)a3 + 10) = 0x1500000014;
    a3[22] = 22;
  }
  uint64_t result = 0;
  *a4 = 23;
  return result;
}

BOOL AUECMicRef::BusCountWritable(AUECMicRef *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECMicRef::Render(AUECMicRef *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUECMicRef *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AUECMicRef::ProcessMultipleBufferLists(AUECMicRef *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 76) = *((double *)this + 76) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECMicRefLogScope(void)::once != -1) {
      dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
    }
    if (AUECMicRefLogScope(void)::scope)
    {
      uint64_t v20 = *(NSObject **)AUECMicRefLogScope(void)::scope;
      if (!*(void *)AUECMicRefLogScope(void)::scope) {
        return 4294956422;
      }
    }
    else
    {
      uint64_t v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = *((_DWORD *)this + 84);
      float v82 = 4.8153e-34;
      int v83 = "AUECMicRef.cpp";
      __int16 v84 = 1024;
      int v85 = 936;
      __int16 v86 = 1024;
      int v87 = a3;
      __int16 v88 = 1024;
      int v89 = v21;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMicRef::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)&v82, 0x1Eu);
    }
    return 4294956422;
  }
  uint64_t result = 4294956428;
  if (a4 == 3 && a6 == 3)
  {
    uint64_t v11 = *a5;
    uint64_t v12 = (uint64_t)*a7;
    if (*((unsigned char *)this + 528))
    {
      if ((_DWORD *)v12 != v11 && *((_DWORD *)this + 138))
      {
        unint64_t v13 = 0;
        uint64_t v14 = (const void **)(v11 + 4);
        uint64_t v15 = (void **)(v12 + 16);
        do
        {
          BOOL v17 = *v15;
          v15 += 2;
          unsigned int v16 = v17;
          unsigned int v18 = *v14;
          v14 += 2;
          memcpy(v16, v18, 4 * *((unsigned int *)this + 137));
          ++v13;
        }
        while (v13 < *((unsigned int *)this + 138));
      }
LABEL_73:
      uint64_t result = 0;
      *((void *)this + 75) = 0;
      return result;
    }
    __int16 v22 = a5[1];
    BOOL v23 = a5[2];
    int v25 = a7[1];
    uint64_t v24 = a7[2];
    int v26 = *((_DWORD *)this + 133);
    if (v26 != *((_DWORD *)this + 134))
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 170) = ausdk::AUElement::GetParameter(Element, 1u);
      int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(v28, 2u);
      *((float *)this + 171) = Parameter;
      (*(void (**)(void, float, float))(**((void **)this + 91) + 136))(*((void *)this + 91), *((float *)this + 170), Parameter);
      *((_DWORD *)this + 134) = v26;
    }
    int v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    BOOL v31 = ausdk::AUElement::GetParameter(v30, 0x12u) != 0.0;
    (*(void (**)(void, _DWORD *, const AudioBufferList *, const AudioBufferList *, uint64_t, AudioBufferList *, AudioBufferList *, BOOL))(**((void **)this + 91) + 40))(*((void *)this + 91), v11, v22, v23, v12, v25, v24, v31);
    float64x2_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    float v33 = ausdk::AUElement::GetParameter(v32, 0xFu);
    unsigned int v34 = (*(uint64_t (**)(void))(**((void **)this + 91) + 144))(*((void *)this + 91));
    int v35 = 0;
    if ((v34 & 1) == 0)
    {
      unsigned int v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v36, 0x14u);
      __int16 v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 149) = ausdk::AUElement::GetParameter(v37, 0x15u);
      if (*v11)
      {
        unint64_t v38 = 0;
        unsigned int v39 = *((_DWORD *)this + 137);
        float v40 = 0.0;
        uint64_t v41 = 4;
        float v42 = 0.0;
        do
        {
          float v82 = 0.0;
          vDSP_svesq(*(const float **)&v11[v41], 1, &v82, v39);
          unsigned int v39 = *((_DWORD *)this + 137);
          float v43 = log10f((float)(v82 / (float)v39) + 1.0e-20) * 10.0;
          if (!v38)
          {
            float v42 = v43;
            float v43 = -0.0;
          }
          float v40 = v40 + v43;
          ++v38;
          unint64_t v44 = *v11;
          v41 += 4;
        }
        while (v38 < v44);
        if (v44 > 2) {
          float v40 = v40 / (float)(v44 - 1);
        }
      }
      else
      {
        float v42 = 0.0;
        float v40 = 0.0;
      }
      if (v40 >= *((float *)this + 148) || (float)(v42 - v40) <= *((float *)this + 149))
      {
        int v35 = 0;
      }
      else
      {
        if (*((double *)this + 72) > 0.0)
        {
          int v45 = (caulk::concurrent::messenger *)*((void *)this + 99);
          if (v45)
          {
            uint64_t v46 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 24, 8);
            *(_DWORD *)(v46 + 16) = 0;
            *(void *)uint64_t v46 = &unk_1F14B4790;
            *(void *)(v46 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v45, (caulk::concurrent::message *)v46);
          }
        }
        int v35 = 1;
      }
    }
    if (v33 == 0.0) {
      int v47 = 1;
    }
    else {
      int v47 = v34;
    }
    int v48 = v47 | v35;
    if (v33 == 0.0) {
      int v49 = v34;
    }
    else {
      int v49 = 1;
    }
    if (v48) {
      float v50 = 1.0;
    }
    else {
      float v50 = 0.0;
    }
    if (v49 | v35) {
      float v51 = 1.0;
    }
    else {
      float v51 = 0.0;
    }
    uint64_t v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v52, 0x10u, (float)v34, 0);
    unint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v53, 0x11u, v50, 0);
    float v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v54, 0x16u, v51, 0);
    int v55 = (*(uint64_t (**)(void))(**((void **)this + 91) + 72))(*((void *)this + 91));
    int v56 = (*(uint64_t (**)(void))(**((void **)this + 91) + 88))(*((void *)this + 91));
    int v57 = (*(uint64_t (**)(void))(**((void **)this + 91) + 80))(*((void *)this + 91));
    int v58 = v57;
    if (!v55 || !v56 || (v57 & 1) == 0)
    {
      if (AUECMicRefLogScope(void)::once != -1) {
        dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
      }
      if (AUECMicRefLogScope(void)::scope)
      {
        unsigned int v59 = *(NSObject **)AUECMicRefLogScope(void)::scope;
        if (!*(void *)AUECMicRefLogScope(void)::scope) {
          goto LABEL_60;
        }
      }
      else
      {
        unsigned int v59 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        float v82 = 4.8154e-34;
        int v83 = "AUECMicRef.cpp";
        __int16 v84 = 1024;
        int v85 = 1046;
        __int16 v86 = 1024;
        int v87 = v55;
        __int16 v88 = 1024;
        int v89 = v56;
        __int16 v90 = 1024;
        int v91 = v58;
        _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMicRef: ********* Reset begins *********\nAUECMicRef: state variables have finite values (1 if True): %u\nAUECMicRef: ref-signal buffers have finite values (1 if True): %u\nAUECMicRef: EC output buffers have valid values (1 if True): %u\n", (uint8_t *)&v82, 0x24u);
      }
LABEL_60:
      std::mutex::lock((std::mutex *)((char *)this + 616));
      AUECMicRef::DoCoreECInit(this);
    }
    unint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    float v61 = ausdk::AUElement::GetParameter(v60, 0xEu);
    uint64_t result = 0;
    *((double *)this + 72) = v61;
    LODWORD(v62) = *((_DWORD *)this + 137);
    LODWORD(v63) = *((_DWORD *)this + 136);
    double v64 = *((double *)this + 75) + (double)v62 / (double)v63;
    if (v64 < 0.0) {
      double v64 = 0.0;
    }
    *((double *)this + 75) = v64;
    if (v61 > 0.0 && v64 > v61)
    {
      uint64_t v65 = (caulk::concurrent::messenger *)*((void *)this + 99);
      if (!v65) {
        return 0;
      }
      char v66 = (*(uint64_t (**)(void))(**((void **)this + 91) + 72))(*((void *)this + 91));
      char v67 = (*(uint64_t (**)(void))(**((void **)this + 91) + 88))(*((void *)this + 91));
      char v68 = (*(uint64_t (**)(void))(**((void **)this + 91) + 80))(*((void *)this + 91));
      unint64_t v69 = (void *)MEMORY[0x1E4FB7E90];
      uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(void *)(v70 + 8) = 0;
      *(_DWORD *)(v70 + 16) = 0;
      *(_OWORD *)(v70 + 24) = *(_OWORD *)((char *)this + 600);
      *(unsigned char *)(v70 + 40) = v66;
      *(unsigned char *)(v70 + 41) = v67;
      *(unsigned char *)(v70 + 42) = v68;
      *(void *)uint64_t v70 = &unk_1F14B46F0;
      caulk::concurrent::messenger::enqueue(v65, (caulk::concurrent::message *)v70);
      if (*((_DWORD *)this + 138))
      {
        uint64_t v71 = 0;
        do
        {
          float v72 = (caulk::concurrent::messenger *)*((void *)this + 99);
          float v73 = (*(float (**)(void, uint64_t))(**((void **)this + 91) + 96))(*((void *)this + 91), v71);
          float v74 = (*(float (**)(void, uint64_t))(**((void **)this + 91) + 104))(*((void *)this + 91), v71);
          uint64_t v75 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v69 + 16))(*v69, 40, 8);
          *(_DWORD *)(v75 + 16) = 0;
          *(_DWORD *)(v75 + 24) = v71;
          *(float *)(v75 + 28) = v73;
          *(float *)(v75 + 32) = v74;
          *(void *)uint64_t v75 = &unk_1F14B4718;
          *(void *)(v75 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v72, (caulk::concurrent::message *)v75);
          uint64_t v71 = (v71 + 1);
        }
        while (v71 < *((_DWORD *)this + 138));
      }
      if (*((_DWORD *)this + 139))
      {
        uint64_t v76 = 0;
        do
        {
          __int16 v77 = (caulk::concurrent::messenger *)*((void *)this + 99);
          float v78 = (*(float (**)(void, uint64_t))(**((void **)this + 91) + 112))(*((void *)this + 91), v76);
          uint64_t v79 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v69 + 16))(*v69, 32, 8);
          *(_DWORD *)(v79 + 16) = 0;
          *(_DWORD *)(v79 + 24) = v76;
          *(float *)(v79 + 28) = v78;
          *(void *)uint64_t v79 = &unk_1F14B4740;
          *(void *)(v79 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v77, (caulk::concurrent::message *)v79);
          uint64_t v76 = (v76 + 1);
        }
        while (v76 < *((_DWORD *)this + 139));
      }
      AudioBufferList v80 = (caulk::concurrent::messenger *)*((void *)this + 99);
      uint64_t v81 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v69 + 16))(*v69, 24, 8);
      *(_DWORD *)(v81 + 16) = 0;
      *(void *)uint64_t v81 = &unk_1F14B4768;
      *(void *)(v81 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v80, (caulk::concurrent::message *)v81);
      goto LABEL_73;
    }
  }
  return result;
}

void sub_1BB570C0C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    uint64_t v3 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315906;
    AudioUnitParameterUnit v7 = "AUECMicRef.cpp";
    __int16 v8 = 1024;
    int v9 = 1112;
    __int16 v10 = 1024;
    int v11 = v1;
    __int16 v12 = 2048;
    double v13 = v2;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v5 = "AUECMicRef.cpp";
    __int16 v6 = 1024;
    int v7 = 1117;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __int16 v6 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  float v3 = *(float *)(a1 + 32);
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    long long v4 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
    }
  }
  else
  {
    long long v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316162;
    uint64_t v8 = "AUECMicRef.cpp";
    __int16 v9 = 1024;
    int v10 = 1104;
    __int16 v11 = 1024;
    int v12 = v1;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    double v16 = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (caulk::concurrent::message *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 41);
  int v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    __int16 v6 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
    }
  }
  else
  {
    __int16 v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316674;
    int v10 = "AUECMicRef.cpp";
    __int16 v11 = 1024;
    int v12 = 1096;
    __int16 v13 = 2048;
    uint64_t v14 = v2;
    __int16 v15 = 2048;
    uint64_t v16 = v1;
    __int16 v17 = 1024;
    int v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v5;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: ********* Logging begins *********\nAUECMicRef: logging (period, timestamp): (%f, %f) (s)\nAUECMicRef: state variables have finite values (1 if True): %u\nAUECMicRef: ref-signal buffers have finite values (1 if True): %u\nAUECMicRef: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void AUECMicRef::DoCoreECInit(AUECMicRef *this)
{
  uint64_t v2 = *((void *)this + 91);
  if (v2)
  {
    *((void *)this + 91) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator new();
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    uint64_t v1 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    int v5 = "AUECMicRef.cpp";
    __int16 v6 = 1024;
    int v7 = 1185;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMicRef::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void ___ZL18AUECMicRefLogScopev_block_invoke()
{
}

uint64_t AUECMicRef::CanScheduleParameters(AUECMicRef *this)
{
  return 0;
}

uint64_t AUECMicRef::SetParameter(AUECMicRef *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  ++*((_DWORD *)this + 133);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUECMicRef::SetProperty(AUECMicRef *this, int a2, int a3, unsigned int a4, const __CFArray **a5, int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 != 103800)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 528) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  if (a6 != 8) {
    return 4294956445;
  }
  applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v9, *a5);
  if (!v11) {
    return 4294956445;
  }
  uint64_t v8 = v9;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 736, v9, v10, (v10 - (uint64_t)v9) >> 2);
  *((unsigned char *)this + 784) = 1;
  if (v8) {
    operator delete(v8);
  }
  return 0;
}

void sub_1BB571894(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUECMicRef::GetProperty(AUECMicRef *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          uint64_t result = 0;
          unsigned int v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
LABEL_26:
          int v12 = (std::mutex *)((char *)this + 616);
          std::mutex::lock((std::mutex *)((char *)this + 616));
          (*(void (**)(void, char *))(**((void **)this + 91) + 48))(*((void *)this + 91), (char *)this + 736);
          if (a2 == 103800)
          {
            CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)this + 92);
            goto LABEL_28;
          }
          int v20 = (const void *)*((void *)this + 92);
          unsigned int v21 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 142);
LABEL_42:
          memcpy(a5, v20, 4 * v21);
          goto LABEL_43;
        default:
          return result;
      }
LABEL_39:
      *a5 = v9;
      return result;
    }
    if (a2 != 4699)
    {
      if (a2 == 5699)
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
        unsigned int v11 = 22;
      }
      else
      {
        if (a2 != 6699) {
          return result;
        }
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
        unsigned int v11 = 16;
      }
      float Parameter = ausdk::AUElement::GetParameter(Element, v11);
      uint64_t result = 0;
      unsigned int v9 = Parameter;
      goto LABEL_39;
    }
    __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    float v18 = ausdk::AUElement::GetParameter(v17, 0x11u);
    uint64_t result = 0;
    BOOL v16 = v18 == 1.0;
LABEL_34:
    unsigned int v9 = v16;
    goto LABEL_39;
  }
  if (a2 <= 303799)
  {
    if (a2 != 7699)
    {
      if (a2 != 103800)
      {
        if (a2 != 203800) {
          return result;
        }
        uint64_t result = 0;
        unsigned int v9 = *((_DWORD *)this + 138);
        goto LABEL_39;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
    float v15 = ausdk::AUElement::GetParameter(v14, 0x11u);
    uint64_t result = 0;
    BOOL v16 = v15 == 0.0;
    goto LABEL_34;
  }
  if (a2 <= 503799)
  {
    if (a2 == 303800)
    {
      uint64_t result = 0;
      unsigned int v9 = *((_DWORD *)this + 139);
    }
    else
    {
      if (a2 != 403800) {
        return result;
      }
      uint64_t result = 0;
      unsigned int v9 = *((_DWORD *)this + 142);
    }
    goto LABEL_39;
  }
  if (a2 == 503800 || a2 == 603800)
  {
    int v12 = (std::mutex *)((char *)this + 616);
    std::mutex::lock((std::mutex *)((char *)this + 616));
    (*(void (**)(void, char *))(**((void **)this + 91) + 64))(*((void *)this + 91), (char *)this + 760);
    if (a2 == 603800)
    {
      CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((void *)this + 95);
LABEL_28:
      *(void *)a5 = CFArray;
LABEL_43:
      std::mutex::unlock(v12);
      return 0;
    }
    int v20 = (const void *)*((void *)this + 95);
    unsigned int v21 = 2 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_42;
  }
  return result;
}

void sub_1BB571BA0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUECMicRef::GetPropertyInfo(AUECMicRef *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_21;
      }
      if (a2 != 3700)
      {
        if (a2 != 3800) {
          return result;
        }
        *a6 = 0;
        int v9 = 4 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 142);
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (a2 == 4699 || a2 == 5699) {
      goto LABEL_20;
    }
    int v8 = 6699;
    goto LABEL_19;
  }
  if (a2 <= 303799)
  {
    if (a2 == 7699) {
      goto LABEL_20;
    }
    if (a2 == 103800)
    {
      *a6 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_29;
    }
    int v8 = 203800;
LABEL_19:
    if (a2 != v8) {
      return result;
    }
    goto LABEL_20;
  }
  if (a2 <= 503799)
  {
    if (a2 != 303800)
    {
      int v8 = 403800;
      goto LABEL_19;
    }
LABEL_20:
    *a6 = 0;
LABEL_21:
    int v9 = 4;
LABEL_22:
    uint64_t result = 0;
    *a5 = v9;
    return result;
  }
  if (a2 == 503800)
  {
    *a6 = 0;
    int v9 = 8 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_22;
  }
  if (a2 == 603800)
  {
    *a6 = 0;
LABEL_29:
    int v9 = 8;
    goto LABEL_22;
  }
  return result;
}

uint64_t AUECMicRef::Reset(AUECMicRef *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "AUECMicRef.cpp";
    __int16 v6 = 1024;
    int v7 = 382;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 17)) {
    AUECMicRef::DoCoreECInit(this);
  }
  return 0;
}

uint64_t AUECMicRef::Cleanup(AUECMicRef *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    int v5 = "AUECMicRef.cpp";
    __int16 v6 = 1024;
    int v7 = 334;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  uint64_t result = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t AUECMicRef::Initialize(AUECMicRef *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (AUECMicRefLogScope(void)::once != -1) {
    dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
  }
  if (AUECMicRefLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUECMicRefLogScope(void)::scope;
    if (!*(void *)AUECMicRefLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUECMicRef.cpp";
    __int16 v48 = 1024;
    int v49 = 181;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Initialize.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 0);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 1u);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 80), 2u);
  uint64_t v6 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 0);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 1u);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((AUECMicRef *)((char *)this + 128), 2u);
  int v9 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v9;
  int v10 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v10;
  *((_DWORD *)this + 140) = *(_DWORD *)(v5 + 108);
  double v11 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v11;
  if (v11 != *(double *)(v4 + 80)) {
    return 4294956428;
  }
  uint64_t v13 = v8;
  double v14 = *(double *)(v6 + 80);
  uint64_t result = 4294956428;
  if (v14 == v11 && v14 == *(double *)(v13 + 80) && v14 == *(double *)(v7 + 80))
  {
    int v15 = *(_DWORD *)(v6 + 108);
    if (v15 == v9 && v15 == *(_DWORD *)(v7 + 108) && v10 == *(_DWORD *)(v13 + 108))
    {
      BOOL v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v16, 0);
      __int16 v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 170) = ausdk::AUElement::GetParameter(v17, 1u);
      float v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 171) = ausdk::AUElement::GetParameter(v18, 2u);
      __int16 v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 172) = ausdk::AUElement::GetParameter(v19, 3u);
      int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 173) = ausdk::AUElement::GetParameter(v20, 4u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      unsigned int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 174) = ausdk::AUElement::GetParameter(v21, 5u);
      int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 175) = ausdk::AUElement::GetParameter(v22, 6u);
      uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 176) = ausdk::AUElement::GetParameter(v23, 7u);
      uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 177) = ausdk::AUElement::GetParameter(v24, 8u);
      int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 178) = ausdk::AUElement::GetParameter(v25, 9u);
      int v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 179) = ausdk::AUElement::GetParameter(v26, 0xAu);
      uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 180) = ausdk::AUElement::GetParameter(v27, 0xBu);
      int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 181) = ausdk::AUElement::GetParameter(v28, 0xCu);
      uint32_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      unsigned int Parameter = ausdk::AUElement::GetParameter(v29, 0xDu);
      *((_DWORD *)this + 143) = Parameter;
      unsigned int v31 = *((_DWORD *)this + 137);
      float v32 = (float)*((unsigned int *)this + 136);
      float v33 = (float)v31;
      unsigned int v34 = v31
          * vcvtps_u32_f32((float)(float)((float)(v32 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v31);
      *((_DWORD *)this + 141) = v34;
      if (v34 <= v31)
      {
        *((_DWORD *)this + 141) = v31;
        *((_DWORD *)this + 135) = (float)((float)(v33 / v32) * 1000.0);
        unsigned int v34 = v31;
      }
      unsigned int v35 = v31 * vcvtps_u32_f32((float)(float)((float)(v32 * (float)Parameter) / 1000.0) / v33);
      *((_DWORD *)this + 142) = v35;
      if (v35 <= v31)
      {
        *((_DWORD *)this + 142) = v31;
        *((_DWORD *)this + 143) = (float)((float)(v33 / v32) * 1000.0);
        unsigned int v35 = v31;
      }
      if (v35 <= v34)
      {
        float v36 = (float)v34;
      }
      else
      {
        *((_DWORD *)this + 142) = v34;
        float v36 = (float)v34;
        *((_DWORD *)this + 143) = (float)((float)((float)v34 / v32) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v36 / v33);
      __int16 v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((_DWORD *)this + 147) = ausdk::AUElement::GetParameter(v37, 0x13u);
      unint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v38, 0x14u);
      unsigned int v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((float *)this + 149) = ausdk::AUElement::GetParameter(v39, 0x15u);
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v40, 0xEu);
      *(_OWORD *)((char *)this + 600) = 0u;
      BOOL v46 = 0;
      AppFloatCFNumberRef Value = CACFPreferencesGetAppFloatValue(@"ecmicref_log_period_in_seconds", @"com.apple.coreaudio", &v46);
      if (v46)
      {
        float v43 = AppFloatValue;
        if (v43 > 0.0)
        {
          *((double *)this + 72) = v43;
          unint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMicRef *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v44, 0xEu, v43, 0);
          if (AUECMicRefLogScope(void)::once != -1) {
            dispatch_once(&AUECMicRefLogScope(void)::once, &__block_literal_global_13248);
          }
          if (AUECMicRefLogScope(void)::scope)
          {
            int v45 = *(NSObject **)AUECMicRefLogScope(void)::scope;
            if (!*(void *)AUECMicRefLogScope(void)::scope) {
              goto LABEL_35;
            }
          }
          else
          {
            int v45 = MEMORY[0x1E4F14500];
          }
          BOOL v41 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v41)
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "AUECMicRef.cpp";
            __int16 v48 = 1024;
            int v49 = 267;
            __int16 v50 = 2048;
            double v51 = v43;
            _os_log_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMicRef: Using logPeriod of (%g)s as specified in defaults write ecmicref_log_period_in_seconds.\n", (uint8_t *)buf, 0x1Cu);
          }
        }
      }
LABEL_35:
      if (!*((void *)this + 99) && *((double *)this + 72) > 0.0)
      {
        caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v41);
        std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>();
      }
      AUECMicRef::DoCoreECInit(this);
    }
  }
  return result;
}

void AUECMicRef::~AUECMicRef(AUECMicRef *this)
{
  AUECMicRef::~AUECMicRef(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14B4480;
  AUECMicRef::Cleanup(this);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 99, 0);
  uint64_t v2 = (void *)*((void *)this + 95);
  if (v2)
  {
    *((void *)this + 96) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 92);
  if (v3)
  {
    *((void *)this + 93) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 616));

  ausdk::AUBase::~AUBase(this);
}

uint64_t ABHelperIsABTestModeOn()
{
  {
    isABTestModeOn(void)::sIsABTestModeOuint64_t n = CFPreferencesGetAppBooleanValue(@"abtest_mode", @"com.apple.coreaudio", 0) != 0;
  }
  return isABTestModeOn(void)::sIsABTestModeOn;
}

void sub_1BB5727D8(_Unwind_Exception *a1)
{
}

uint64_t ABHelperCreateDescriptionFromAudioUnit(OpaqueAudioComponentInstance *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t ABHelperCreateDescriptionFromDSPGraphBox(DSPGraph::Box *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

void ABHelperWriteJSONFileFromDescription(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = 0;
  uint64_t v4 = [MEMORY[0x1E4F28D90] dataWithJSONObject:a1 options:1 error:&v10];
  id v5 = v10;
  uint64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = [MEMORY[0x1E4F28E78] stringWithFormat:@"/tmp/"];
    [v7 appendString:v3];
    [v7 appendString:@".json"];
    uint64_t v8 = (void *)[[NSString alloc] initWithData:v4 encoding:4];
    int v9 = [NSString stringWithString:v7];
    [v8 writeToFile:v9 atomically:1 encoding:4 error:0];
  }
  else
  {
    uint64_t v7 = [v5 debugDescription];
    NSLog(&cfstr_Error.isa, v7);
  }
}

void sub_1BB572954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ABHelperCreateDescriptionFromDSPGraph(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA60] dictionary];
  for (unsigned int i = *(uint64_t ***)(a1 + 24); i; unsigned int i = (uint64_t **)*i)
  {
    uint64_t v4 = createNSDescriptionFromDSPGraphBox((DSPGraph::Box *)i[2]);
    id v5 = i[2];
    uint64_t v6 = v5 + 4;
    if (*((char *)v5 + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s", v6);
    [v2 setObject:v4 forKey:v7];
  }

  return v2;
}

void sub_1BB572A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUSoundIsolation::ValidFormat(AUSoundIsolation *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if (a2 != 2 && a2 != 1) {
    return 0;
  }
  if (a3) {
    return 0;
  }
  long long v4 = *(_OWORD *)&a4->mBytesPerPacket;
  v6[0] = *(_OWORD *)&a4->mSampleRate;
  v6[1] = v4;
  uint64_t v7 = *(void *)&a4->mBitsPerChannel;
  if (DWORD2(v6[0]) != 1819304813) {
    return 0;
  }
  int v8 = 0;
  LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v6, &v8, 0);
  if (v8 == 1) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUSoundIsolation::SupportedNumChannels(AUSoundIsolation *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSoundIsolation::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUSoundIsolation::StreamFormatWritable(AUSoundIsolation *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSoundIsolation::SupportsTail(AUSoundIsolation *this)
{
  return 1;
}

void AUSoundIsolation::GetTailTime(AUSoundIsolation *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315394;
    long long v4 = "AUSoundIsolation.mm";
    __int16 v5 = 1024;
    int v6 = 456;
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%s:%i Use processing graph latency as an estimate of the tail time", (uint8_t *)&v3, 0x12u);
  }
  AUSoundIsolation::GetProcessingLatency(this);
}

void AUSoundIsolation::GetProcessingLatency(AUSoundIsolation *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  ProcessingGraphOutput = (DSPGraph::Box *)AUSoundIsolation::GetProcessingGraphOutput(this);
  if (ProcessingGraphOutput)
  {
    uint64_t v2 = ProcessingGraphOutput;
    unsigned int v3 = DSPGraph::Box::totalLatencyInSamples(ProcessingGraphOutput);
    uint64_t v4 = *((void *)v2 + 8);
    if (*((void *)v2 + 9) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v14, "in");
      int v12 = (void *)((char *)v2 + 32);
      if (*((char *)v2 + 55) < 0) {
        int v12 = (void *)*v12;
      }
      DSPGraph::strprintf(v13, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*((void *)v2 + 9) - *((void *)v2 + 8)) >> 5, 0);
      DSPGraph::ThrowException();
      __break(1u);
    }
    else
    {
      double v5 = (double)v3;
      double v6 = (double)**(double **)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120);
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      double v7 = v5 / v6;
      int v8 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315906;
        BOOL v16 = "AUSoundIsolation.mm";
        __int16 v17 = 1024;
        int v18 = 429;
        __int16 v19 = 2048;
        double v20 = v7;
        __int16 v21 = 1024;
        int v22 = DSPGraph::Box::totalLatencyInSamples(v2);
        _os_log_debug_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%s:%i processing latency is %f seconds (%u samples)", buf, 0x22u);
      }

      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v9 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        BOOL v16 = "AUSoundIsolation.mm";
        __int16 v17 = 1024;
        int v18 = 430;
        __int16 v19 = 2048;
        double v20 = v7;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, "%s:%i total latency is %f seconds", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    id v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      BOOL v16 = "AUSoundIsolation.mm";
      __int16 v17 = 1024;
      int v18 = 434;
      _os_log_error_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%s:%i The host requested latency before the real value is available!", buf, 0x12u);
    }
  }
}

void sub_1BB572F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSoundIsolation::GetProcessingGraphOutput(AUSoundIsolation *this)
{
  uint64_t v2 = (DSPGraph::Graph *)*((void *)this + 76);
  if (!v2 || !DSPGraph::Graph::out(v2)) {
    return 0;
  }
  unsigned int v3 = (DSPGraph::Graph *)*((void *)this + 76);

  return DSPGraph::Graph::out(v3);
}

uint64_t ___Z22getAUSoundIsolationLogv_block_invoke()
{
  getAUSoundIsolationLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "AUSoundIsolation");

  return MEMORY[0x1F41817F8]();
}

void AUSoundIsolation::GetLatency(AUSoundIsolation *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315394;
    uint64_t v4 = "AUSoundIsolation.mm";
    __int16 v5 = 1024;
    int v6 = 447;
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%s:%i AU latency is equal to the processing graph latency", (uint8_t *)&v3, 0x12u);
  }
  AUSoundIsolation::GetProcessingLatency(this);
}

uint64_t AUSoundIsolation::GetParameterValueStrings(AUSoundIsolation *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 == 95783)
  {
    uint64_t v7 = &xmmword_1E623EA88;
    goto LABEL_11;
  }
  if (a3 != 1) {
    return 0;
  }
  if (!_os_feature_enabled_impl() || !*((unsigned char *)this + 564))
  {
    *(void *)&long long v10 = @"Voice";
    CFIndex v8 = 1;
    goto LABEL_13;
  }
  uint64_t v7 = &xmmword_1E623EA78;
LABEL_11:
  long long v10 = *v7;
  CFIndex v8 = 2;
LABEL_13:
  CFArrayRef v9 = CFArrayCreate(0, (const void **)&v10, v8, 0);
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

uint64_t AUSoundIsolation::RestoreState(OpaqueAudioComponentInstance **this, CFTypeRef cf)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 4294956445;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  uint64_t v5 = ausdk::AUBase::RestoreState(this, cf);
  if (v5)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v6 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315650;
      CFArrayRef v9 = "AUSoundIsolation.mm";
      __int16 v10 = 1024;
      int v11 = 889;
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%s:%i error %i while restoring state", (uint8_t *)&v8, 0x18u);
    }
  }
  this[74] = (OpaqueAudioComponentInstance *)((char *)this[74] + 1);
  return v5;
}

uint64_t AUSoundIsolation::SaveState(AUSoundIsolation *this, ausdk **a2)
{
  return 0;
}

uint64_t AUSoundIsolation::GetParameterInfo(AUSoundIsolation *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956430;
  }
  uint64_t result = 4294956418;
  if (a3 <= 95781)
  {
    if (a3)
    {
      if (a3 != 1) {
        return result;
      }
      buffer->cfNameString = @"Sound to Isolate";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Sound to Isolate", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&buffer->maxCFNumberRef Value = _D0;
      if (!_os_feature_enabled_impl() || !*((unsigned char *)this + 564))
      {
        int v14 = -1056964608;
        buffer->minCFNumberRef Value = 1.0;
        goto LABEL_18;
      }
      buffer->minCFNumberRef Value = 0.0;
    }
    else
    {
      buffer->cfNameString = @"Wet/Dry Mix";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wet/Dry Mix", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Percent;
      *(void *)&buffer->minCFNumberRef Value = 0x42C80000C2C80000;
      buffer->defaultCFNumberRef Value = 100.0;
    }
    int v14 = -1073741824;
LABEL_18:
    uint64_t result = 0;
    buffer->flags |= v14;
    return result;
  }
  if (a3 == 95782)
  {
    buffer->cfNameString = @"Use Tuning Mode";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CString = (_anonymous_namespace_ *)CFStringGetCString(@"Use Tuning Mode", buffer->name, 52, 0x8000100u);
    AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Boolean;
  }
  else
  {
    if (a3 != 95783) {
      return result;
    }
    buffer->cfNameString = @"Tuning Mode";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CString = (_anonymous_namespace_ *)CFStringGetCString(@"Tuning Mode", buffer->name, 52, 0x8000100u);
    AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Indexed;
  }
  buffer->unit = v13;
  *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
  AudioUnitParameterOptions v15 = buffer->flags | 0xC1000000;
  buffer->defaultCFNumberRef Value = 0.0;
  buffer->AudioUnitParameterOptions flags = v15;
  uint64_t result = 0;
  if ((IsInternalBuild & 1) == 0)
  {
    int v14 = 0x2000;
    goto LABEL_18;
  }
  return result;
}

uint64_t anonymous namespace'::IsInternalBuild(_anonymous_namespace_ *this)
{
  {
  }
}

void sub_1BB5735C4(_Unwind_Exception *a1)
{
}

uint64_t AUSoundIsolation::GetParameterList(AUSoundIsolation *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3) {
    *(void *)a3 = 0x100000000;
  }
  unsigned int v8 = 2;
  {
    if (*((unsigned char *)this + 752)) {
      unsigned int v8 = 4;
    }
    else {
      unsigned int v8 = 2;
    }
    if (a3)
    {
      if (*((unsigned char *)this + 752))
      {
        *((void *)a3 + 1) = 0x1762700017626;
        unsigned int v8 = 4;
      }
    }
  }
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUSoundIsolation::Render(AUSoundIsolation *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v8 = (AUSoundIsolation *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSoundIsolation *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUSoundIsolation::ProcessMultipleBufferLists(AUSoundIsolation *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (a4 != 1 || a6 != 1)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    unsigned int v34 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1183;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = a6;
      _os_log_error_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_ERROR, "%s:%i a single input ABL and a single output ABL is expected, receiver (%u, %u)!", buf, 0x1Eu);
    }
    return 4294956428;
  }
  uint64_t v13 = *((void *)this + 74);
  if (*((void *)this + 75) != v13)
  {
    AUSoundIsolation::UpdateLocalParamState(this);
    *((void *)this + 75) = v13;
  }
  if (*((float *)this + 136) != *((float *)this + 143) && !*((_DWORD *)this + 139))
  {
    uint64_t BypassWithLatencyGraphOutput = AUSoundIsolation::GetBypassWithLatencyGraphOutput(this);
    uint64_t v15 = *(void *)(BypassWithLatencyGraphOutput + 64);
    if (*(void *)(BypassWithLatencyGraphOutput + 72) == v15)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v76, "in");
      char v66 = (void *)(BypassWithLatencyGraphOutput + 32);
      if (*(char *)(BypassWithLatencyGraphOutput + 55) < 0) {
        char v66 = (void *)*v66;
      }
      DSPGraph::strprintf((uint64_t *)v84, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v65, v66, (uint64_t)(*(void *)(BypassWithLatencyGraphOutput + 72) - *(void *)(BypassWithLatencyGraphOutput + 64)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_81;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
    float v17 = expf(-1.0 / (float)((float)(*((float *)this + 135) * (float)**(double **)(v16 + 120)) / (float)a3));
    float32_t v18 = *((float *)this + 137) * v17;
    float v19 = *((float *)this + 143);
    float32_t v20 = (float)(v19 * (float)(1.0 - v17)) + (float)(v17 * *((float *)this + 136));
    v21.f32[0] = v20 - v19;
    v21.f32[1] = v18;
    int8x8_t v22 = (int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3DCCCCCDu), vabs_f32(v21));
    v21.f32[0] = v20;
    int8x8_t v23 = vbsl_s8(v22, (int8x8_t)LODWORD(v19), (int8x8_t)v21);
    *((int8x8_t *)this + 68) = v23;
    if (*((void *)this + 77))
    {
      float v24 = *(float *)v23.i32 / 100.0;
      float v25 = 1.0 - (float)(*(float *)v23.i32 / 100.0);
      if (v24 <= 0.0) {
        float v26 = 1.0;
      }
      else {
        float v26 = v25;
      }
      uint64_t v27 = DSPGraph::Graph::box();
      (*(void (**)(uint64_t, void, void, void, void, float))(*(void *)v27 + 80))(v27, 0, 0, 0, 0, v26);
      (*(void (**)(uint64_t, void, void, uint64_t, void, float))(*(void *)v27 + 80))(v27, 0, 0, 1, 0, v24);
    }
  }
  if (*((unsigned char *)this + 528) && *((float *)this + 137) <= 0.0)
  {
    float v36 = (unsigned int *)*a5;
    uint64_t v37 = (uint64_t)*a7;
    unint64_t mNumberBuffers = (*a5)->mNumberBuffers;
    if (mNumberBuffers == (*a7)->mNumberBuffers && mNumberBuffers != 0)
    {
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      do
      {
        size_t v42 = v36[v40 + 3];
        if (v42 == *(_DWORD *)(v37 + v40 * 4 + 12))
        {
          float v43 = *(const void **)&v36[v40 + 4];
          unint64_t v44 = *(void **)(v37 + v40 * 4 + 16);
          if (v43 != v44)
          {
            memcpy(v44, v43, v42);
            unint64_t mNumberBuffers = *v36;
          }
        }
        ++v41;
        v40 += 4;
      }
      while (v41 < mNumberBuffers);
    }
  }
  else if (*((unsigned char *)this + 529) || *((_DWORD *)this + 139))
  {
    if (!*((void *)this + 81))
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v56 = getAUSoundIsolationLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956429;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1227;
      int v57 = "%s:%i bypass graph not initialized";
      goto LABEL_60;
    }
    long long v28 = *((_OWORD *)this + 18);
    *(_OWORD *)&buf[8] = *((_OWORD *)this + 17);
    *(_OWORD *)&unsigned char buf[24] = v28;
    long long v29 = *((_OWORD *)this + 20);
    long long v31 = *((_OWORD *)this + 17);
    long long v30 = *((_OWORD *)this + 18);
    *(_OWORD *)&buf[40] = *((_OWORD *)this + 19);
    *(_OWORD *)&buf[56] = v29;
    *(_OWORD *)&v76[8] = v31;
    *(_OWORD *)&v76[24] = v30;
    *(_DWORD *)long long buf = a3;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&buf[72] = *a5;
    *(void *)uint64_t v76 = a3;
    *(_OWORD *)&v76[40] = *(_OWORD *)&buf[40];
    *(_OWORD *)&v76[56] = *((_OWORD *)this + 20);
    *(void *)&v76[72] = *a7;
    uint64_t v32 = AUSoundIsolation::GetBypassWithLatencyGraphOutput(this);
    uint64_t v33 = *(void *)(v32 + 64);
    if (*(void *)(v32 + 72) == v33)
    {
      std::string::basic_string[abi:ne180100]<0>(v84, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v69, "in");
      double v64 = (void *)(v32 + 32);
      if (*(char *)(v32 + 55) < 0) {
        double v64 = (void *)*v64;
      }
      DSPGraph::strprintf((uint64_t *)&v75, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(v32 + 72) - *(void *)(v32 + 64)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_81;
    }
    (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
    DSPGraph::Graph::preflight();
    if (*(_DWORD *)v76 != a3)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v58 = getAUSoundIsolationLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956422;
      }
      *(_DWORD *)__int16 v84 = 136315394;
      *(void *)&v84[4] = "AUSoundIsolation.mm";
      *(_WORD *)&v84[12] = 1024;
      *(_DWORD *)&v84[14] = 1252;
      unsigned int v59 = "%s:%i bypass preflight gave invalid number of frames to process!";
      unint64_t v60 = v84;
LABEL_66:
      _os_log_error_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_ERROR, v59, v60, 0x12u);
      return 4294956422;
    }
    DSPGraph::Graph::processMultiple();
  }
  if ((*((unsigned char *)this + 528) || *((unsigned char *)this + 529)) && *((float *)this + 137) <= 0.0 && !*((_DWORD *)this + 139)) {
    return 0;
  }
  if (!*((void *)this + 76))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v56 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956429;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1278;
    int v57 = "%s:%i processing graph not initialized";
    goto LABEL_60;
  }
  if (!*((void *)this + 77))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v56 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956429;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1283;
    int v57 = "%s:%i blending graph not initialized";
LABEL_60:
    _os_log_error_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_ERROR, v57, buf, 0x12u);
    return 4294956429;
  }
  *(void *)uint64_t v76 = a3;
  long long v45 = *((_OWORD *)this + 18);
  *(_OWORD *)&v76[8] = *((_OWORD *)this + 17);
  *(_OWORD *)&v76[24] = v45;
  long long v46 = *((_OWORD *)this + 20);
  *(_OWORD *)&v76[40] = *((_OWORD *)this + 19);
  *(_OWORD *)&v76[56] = v46;
  *(void *)&v76[72] = *a5;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  long long v48 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v75.Float64 mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v75.mBytesPerPacket = v48;
  *(void *)&v75.mBitsPerChannel = *(void *)(Element + 112);
  ausdk::AUBufferList::PrepareBuffer((AUSoundIsolation *)((char *)this + 656), &v75, a3);
  *(void *)&v84[72] = 0;
  *(void *)__int16 v84 = a3;
  long long v49 = *((_OWORD *)this + 18);
  *(_OWORD *)&v84[8] = *((_OWORD *)this + 17);
  *(_OWORD *)&v84[24] = v49;
  long long v50 = *((_OWORD *)this + 20);
  *(_OWORD *)&v84[40] = *((_OWORD *)this + 19);
  *(_OWORD *)&v84[56] = v50;
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((AUSoundIsolation *)((char *)this + 656));
  long long v52 = *((_OWORD *)this + 18);
  long long v70 = *((_OWORD *)this + 17);
  long long v71 = v52;
  long long v53 = *((_OWORD *)this + 20);
  long long v72 = *((_OWORD *)this + 19);
  *(void *)&v84[72] = BufferList;
  uint64_t v69 = a3;
  long long v73 = v53;
  uint64_t v74 = (uint64_t)*a7;
  uint64_t ProcessingGraphOutput = AUSoundIsolation::GetProcessingGraphOutput(this);
  uint64_t v55 = *(void *)(ProcessingGraphOutput + 64);
  if (*(void *)(ProcessingGraphOutput + 72) != v55)
  {
    (*(void (**)(uint64_t))(*(void *)v55 + 40))(v55);
    DSPGraph::Graph::preflight();
    if (v69 == a3)
    {
      DSPGraph::Graph::processMultiple();
      *(_OWORD *)&unsigned char buf[32] = *(_OWORD *)&v76[32];
      *(_OWORD *)&uint8_t buf[48] = *(_OWORD *)&v76[48];
      *(_OWORD *)long long buf = *(_OWORD *)v76;
      *(_OWORD *)&buf[16] = *(_OWORD *)&v76[16];
      long long v80 = *(_OWORD *)&v84[16];
      long long v81 = *(_OWORD *)&v84[32];
      long long v82 = *(_OWORD *)&v84[48];
      long long v83 = *(_OWORD *)&v84[64];
      *(_OWORD *)&buf[64] = *(_OWORD *)&v76[64];
      long long v79 = *(_OWORD *)v84;
      DSPGraph::Graph::preflight();
      DSPGraph::Graph::processMultiple();
      int v61 = *((_DWORD *)this + 139);
      if (v61)
      {
        uint64_t v35 = 0;
        *((_DWORD *)this + 139) = v61 - 1;
        return v35;
      }
      return 0;
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v58 = getAUSoundIsolationLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956422;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1319;
    unsigned int v59 = "%s:%i processing preflight gave invalid number of frames to process!";
    unint64_t v60 = buf;
    goto LABEL_66;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v85, "in");
  char v68 = (void *)(ProcessingGraphOutput + 32);
  if (*(char *)(ProcessingGraphOutput + 55) < 0) {
    char v68 = (void *)*v68;
  }
  DSPGraph::strprintf(v77, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v67, v68, (uint64_t)(*(void *)(ProcessingGraphOutput + 72) - *(void *)(ProcessingGraphOutput + 64)) >> 5, 0);
  uint64_t result = DSPGraph::ThrowException();
LABEL_81:
  __break(1u);
  return result;
}

void sub_1BB574210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *buf,int a54,__int16 a55,__int16 a56,__int16 a57,__int16 a58,__int16 a59,char a60,char a61)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (a61 < 0) {
    operator delete(buf);
  }
  _Unwind_Resume(exception_object);
}

void AUSoundIsolation::UpdateLocalParamState(AUSoundIsolation *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AUSoundIsolation *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSoundIsolation *)((char *)this + 32), 0);
  *((float *)this + 143) = ausdk::AUElement::GetParameter(Element, 0);
  CFTypeID v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v4, 1u);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 580) = ausdk::AUElement::GetParameter(v5, 0x17626u) != 0.0;
  int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  int Parameter = (int)ausdk::AUElement::GetParameter(v6, 0x17627u);
  if (*((_DWORD *)this + 134))
  {
    if (*((unsigned char *)this + 580)) {
      int v8 = Parameter;
    }
    else {
      int v8 = 1;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    CFArrayRef v9 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      float32_t v20 = "AUSoundIsolation.mm";
      __int16 v21 = 1024;
      int v22 = 1110;
      _os_log_debug_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%s:%i Denoise is Disabled - tuning mode reverts to Single Channel", buf, 0x12u);
    }
    int v8 = 0;
  }
  if (*((void *)this + 76))
  {
    if (v8 != *((_DWORD *)this + 146) || *((_DWORD *)this + 144) != *((_DWORD *)this + 142))
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      __int16 v10 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        int v11 = *((_DWORD *)this + 146);
        int v12 = *((_DWORD *)this + 142);
        int v13 = *((_DWORD *)this + 144);
        *(_DWORD *)long long buf = 136316418;
        float32_t v20 = "AUSoundIsolation.mm";
        __int16 v21 = 1024;
        int v22 = 1123;
        __int16 v23 = 1024;
        int v24 = v11;
        __int16 v25 = 1024;
        int v26 = v8;
        __int16 v27 = 1024;
        int v28 = v12;
        __int16 v29 = 1024;
        int v30 = v13;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_INFO, "%s:%i processing graphs already created and tuning mode/Sound to Isolate mode changed from %u/%u to %u/%u ", buf, 0x2Au);
        if (getAUSoundIsolationLog(void)::onceToken != -1) {
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
        }
      }
      int v14 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        float32_t v20 = "AUSoundIsolation.mm";
        __int16 v21 = 1024;
        int v22 = 1124;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_INFO, "%s:%i processing graphs need to be re-created", buf, 0x12u);
      }
      *((_DWORD *)this + 146) = v8;
      *((_DWORD *)this + 142) = *((_DWORD *)this + 144);
      AUSoundIsolation::CreateProcessingGraphs(this);
    }
  }
  else
  {
    *((_DWORD *)this + 146) = v8;
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v15 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *((_DWORD *)this + 146);
      *(_DWORD *)long long buf = 136315650;
      float32_t v20 = "AUSoundIsolation.mm";
      __int16 v21 = 1024;
      int v22 = 1119;
      __int16 v23 = 1024;
      int v24 = v17;
      _os_log_debug_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%s:%i tuning mode set to %u", buf, 0x18u);
    }
  }
  buf[0] = 0;
  LOBYTE(v20) = 0;
  BYTE4(v20) = 0;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  int v36 = *((_DWORD *)this + 143);
  char v37 = 1;
  int v38 = *((_DWORD *)this + 144);
  char v39 = 1;
  __int16 v40 = *((unsigned __int8 *)this + 580) | 0x100;
  int v41 = Parameter;
  char v42 = 1;
  int v43 = v8;
  char v44 = 1;
  uint64_t v16 = (uint64_t *)*((void *)this + 92);
  int v18 = 4;
  AU::SoundIsolation::MetricsReporter::reportAsync(v16, buf, &v18);
}

uint64_t AUSoundIsolation::GetBypassWithLatencyGraphOutput(AUSoundIsolation *this)
{
  uint64_t v2 = (DSPGraph::Graph *)*((void *)this + 81);
  if (!v2 || !DSPGraph::Graph::out(v2)) {
    return 0;
  }
  int v3 = (DSPGraph::Graph *)*((void *)this + 81);

  return DSPGraph::Graph::out(v3);
}

id getAUSoundIsolationLog(void)
{
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v0 = (void *)getAUSoundIsolationLog(void)::gLog;

  return v0;
}

void anonymous namespace'::convertExceptionToString(void *a1, const std::error_code *a2)
{
  v30[0] = 0;
  char v31 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  v21.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(const std::error_code *))(*(void *)&a2->__val_ + 16))(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v28, &v21.__r_.__value_.__l.__data_);
  CFTypeID v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "what");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)CFTypeID v4 = v28[0];
  v28[0] = v5;
  int v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v29;
  __int16 v29 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
  int v8 = a2 + 1;
  val = (uint64_t *)a2[1].__val_;
  v26[0] = 5;
  __int16 v27 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  CFArrayRef v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  __int16 v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v9, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  unsigned __int8 v11 = *(unsigned char *)v10;
  *(unsigned char *)__int16 v10 = v26[0];
  v26[0] = v11;
  int v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v27;
  __int16 v27 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  v21.__r_.__value_.__r.__words[0] = ((uint64_t (*)(const std::error_category *))a2[1].__cat_->name)(a2[1].__cat_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v24, &v21.__r_.__value_.__l.__data_);
  int v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  int v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v13, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)int v14 = v24[0];
  v24[0] = v15;
  uint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v25;
  __int16 v25 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  std::error_code::message(&v21, v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v22, (uint64_t)&v21);
  int v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "code");
  int v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v17, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  char v19 = *(unsigned char *)v18;
  *(unsigned char *)int v18 = v22[0];
  v22[0] = v19;
  float32_t v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v23;
  __int16 v23 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v30, 4, 0x20u, 0, 0, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
}

uint64_t AUSoundIsolation::CreateProcessingGraphs(AUSoundIsolation *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  int v46 = *(_DWORD *)(Element + 92);
  if ((v46 & 0x20) != 0) {
    unsigned int v3 = *(_DWORD *)(Element + 108);
  }
  else {
    unsigned int v3 = 1;
  }
  if ((v46 & 0x20) != 0) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = *(_DWORD *)(Element + 108);
  }
  if (v3 <= v4) {
    unsigned int v3 = v4;
  }
  unsigned int v45 = v3;
  AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)&v49, (uint64_t)this, 0);
  if (!v49)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    char v15 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1377;
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%s:%i failed to load nnet plist", buf, 0x12u);
    }
    goto LABEL_94;
  }
  CFNumberRef v5 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>((const __CFDictionary *)v49, "SampleRate");
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find item");
  }
  applesauce::CF::convert_to<int,0>(v5);
  if (!v49)
  {
    int v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    goto LABEL_101;
  }
  CFNumberRef v6 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v49, "BlockSize");
  if (!v6)
  {
    int v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not find item");
LABEL_101:
  }
  applesauce::CF::convert_to<int,0>(v6);
  if (!v49)
  {
    char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    goto LABEL_104;
  }
  CFNumberRef v7 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>((const __CFDictionary *)v49, "NumberOfInputChannels");
  if (!v7)
  {
    char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not find item");
LABEL_104:
  }
  int v8 = applesauce::CF::convert_to<int,0>(v7);
  if (!v49)
  {
    int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    goto LABEL_107;
  }
  CFNumberRef v9 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>((const __CFDictionary *)v49, "NumberOfOutputChannels");
  if (!v9)
  {
    int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not find item");
LABEL_107:
  }
  int v10 = applesauce::CF::convert_to<int,0>(v9);
  unsigned __int8 v11 = (id)v49;
  char v44 = (__CFDictionary *)[v11 mutableCopy];

  CFMutableDictionaryRef theDict = v44;
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  int v12 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1393;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s:%i Loading batch size from plist.", buf, 0x12u);
  }

  if (!v49)
  {
    char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
  }
  if (!applesauce::CF::details::has_key<char const(&)[17]>((BOOL)v49, "DynamicBatchSize")) {
    goto LABEL_41;
  }
  if (!v49)
  {
    int v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
  }
  CFBooleanRef v13 = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[17]>((const __CFDictionary *)v49, "DynamicBatchSize");
  if (v13)
  {
    LOWORD(v13) = applesauce::CF::convert_as<BOOL,0>(v13);
    int v14 = BYTE1(v13);
  }
  else
  {
    int v14 = 0;
  }
  unsigned int v16 = v13 | (v14 << 8);
  if (v16 <= 0x100) {
    LOBYTE(v16) = 0;
  }
  if (!(_BYTE)v16)
  {
LABEL_41:
    if (!v49)
    {
      __int16 v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    if (!applesauce::CF::details::has_key<char const(&)[10]>((const __CFDictionary *)v49, "BatchSize"))
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v22 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1403;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_INFO, "%s:%i Failed to retrieve batch size, default to 1.", buf, 0x12u);
      }

      int v19 = 1;
      goto LABEL_55;
    }
    if (v49)
    {
      CFNumberRef v20 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v49, "BatchSize");
      if (v20)
      {
        int v19 = applesauce::CF::convert_to<unsigned int,0>(v20);
        if (getAUSoundIsolationLog(void)::onceToken != -1) {
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
        }
        std::string v21 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1401;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v19;
          _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_INFO, "%s:%i Successfully retrieved batch size (%u).", buf, 0x18u);
        }

        goto LABEL_55;
      }
      char v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Could not find item");
    }
    else
    {
      char v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Could not construct");
    }
  }
  *(_DWORD *)long long buf = v45;
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, buf);
  *(void *)uint64_t v61 = v17;
  if (!v17)
  {
    int v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "Could not construct");
  }
  CFDictionarySetValue(theDict, @"BatchSize", v17);
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  int v18 = (id)getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1410;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v45;
    _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_INFO, "%s:%i Set up Dynamic Batch Size (batch std::string::size_type size = %u)", buf, 0x18u);
  }

  CFRelease(v17);
  int v19 = v45;
LABEL_55:
  if (v8 == v10)
  {
    AUSoundIsolation::GetTuningDictionaryRef((applesauce::CF::DictionaryRef *)&cf, (uint64_t)this, 3);
    if (*((_DWORD *)this + 133) != 1 || cf == 0)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v24 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1434;
        __int16 v25 = "%s:%i drev preset is empty and/or dereverb disabled, derverberation disabled";
        goto LABEL_93;
      }
    }
    else
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      int v24 = (id)getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1431;
        __int16 v25 = "%s:%i drev preset exists and dereverb enabled, derverberation enabled";
LABEL_93:
        _os_log_debug_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, v25, buf, 0x12u);
      }
    }

    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    __int16 v27 = (id)getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1437;
      _os_log_debug_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "%s:%i create processing graph", buf, 0x12u);
    }

    *(void *)&buf[8] = 0;
    *(void *)long long buf = &buf[8];
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(void *)&buf[16] = 0;
    uint64_t v55 = 0;
    std::string::basic_string[abi:ne180100]<0>(v56, "mixer");
    std::string::basic_string[abi:ne180100]<0>(&v57, "MWF");
    std::string::basic_string[abi:ne180100]<0>(&__s, "DREV");
    std::string::basic_string[abi:ne180100]<0>(&v59, "inputDelayForMWF");
    std::string::basic_string[abi:ne180100]<0>(&v60, "bypassDelay");
    if (v8 == 1)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_36729);
      }
      uint64_t v28 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v61 = 136315394;
        *(void *)&v61[4] = "SoundIsolationGraphAdapter.cpp";
        __int16 v62 = 1024;
        int v63 = 337;
        __int16 v29 = "%s:%i single channel input & output model will be used";
        int v30 = v28;
        uint32_t v31 = 18;
        goto LABEL_87;
      }
    }
    else
    {
      if (v19 != 1 || v8 != v45) {
        __assert_rtn("CreateProcessingGraph", "SoundIsolationGraphAdapter.cpp", 335, "(numInternalIOChannels == 1 || (numInternalIOChannels == numIOChannels && internalBatchSize == 1)) && \"internal format must be one channel or the same number of IO channels (when internal batch std::string::size_type size = 1)\"");
      }
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_36729);
      }
      uint64_t v32 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v61 = 136315906;
        *(void *)&v61[4] = "SoundIsolationGraphAdapter.cpp";
        __int16 v62 = 1024;
        int v63 = 340;
        __int16 v64 = 1024;
        unsigned int v65 = v45;
        __int16 v66 = 1024;
        unsigned int v67 = v45;
        __int16 v29 = "%s:%i multi channel input (%u) & output (%u) model will be used";
        int v30 = v32;
        uint32_t v31 = 30;
LABEL_87:
        _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, v29, v61, v31);
        if (getAUSoundIsolationLog(void)::onceToken != -1) {
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_36729);
        }
      }
    }
    char v33 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v61 = 136315394;
      *(void *)&v61[4] = "SoundIsolationGraphAdapter.cpp";
      __int16 v62 = 1024;
      int v63 = 347;
      _os_log_debug_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEBUG, "%s:%i create graph", v61, 0x12u);
    }
    operator new();
  }
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  int v26 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1414;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v8;
    LOWORD(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 2) = v10;
    _os_log_error_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "%s:%i Number of input channels in the plist (%u) is different from the number of output channels in the plist (%u)", buf, 0x1Eu);
  }

LABEL_94:
  if (v49) {
    CFRelease(v49);
  }
  return 4294956421;
}

void sub_1BB57AA7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x248]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x340]);
  int v71 = a2;
  switch(a2)
  {
    case 5:
      long long v72 = __cxa_begin_catch(a1);
      long long v73 = getAUSoundIsolationLog();
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      float v78 = a68 >= 0 ? &a63 : (void **)a63;
      *(_DWORD *)(v68 - 256) = 136315650;
      STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
      *(_WORD *)(v68 - 244) = 1024;
      LODWORD(STACK[0x39E]) = 1584;
      *(_WORD *)(v68 - 238) = 2080;
      STACK[0x3A4] = (unint64_t)v78;
      _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught DSPGraph::Exception: %s", (uint8_t *)(v68 - 256), 0x1Cu);
      if ((a68 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      break;
    case 4:
      __cxa_begin_catch(a1);
      long long v73 = getAUSoundIsolationLog();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v68 - 256) = 136315394;
        STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
        *(_WORD *)(v68 - 244) = 1024;
        LODWORD(STACK[0x39E]) = 1587;
        _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught CAXException", (uint8_t *)(v68 - 256), 0x12u);
      }
      goto LABEL_13;
    case 3:
      uint64_t v74 = (const std::error_code *)__cxa_begin_catch(a1);
      long long v73 = getAUSoundIsolationLog();
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      long long v79 = a68 >= 0 ? &a63 : (void **)a63;
      *(_DWORD *)(v68 - 256) = 136315650;
      STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
      *(_WORD *)(v68 - 244) = 1024;
      LODWORD(STACK[0x39E]) = 1590;
      *(_WORD *)(v68 - 238) = 2080;
      STACK[0x3A4] = (unint64_t)v79;
      _os_log_error_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught std::system_error: %s", (uint8_t *)(v68 - 256), 0x1Cu);
      if ((a68 & 0x80000000) == 0)
      {
LABEL_13:

        __cxa_end_catch();
        goto LABEL_36;
      }
      break;
    default:
      AudioStreamBasicDescription v75 = __cxa_begin_catch(a1);
      uint64_t v76 = getAUSoundIsolationLog();
      BOOL v77 = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
      if (v71 == 2)
      {
        if (v77)
        {
          long long v80 = a68 >= 0 ? &a63 : (void **)a63;
          *(_DWORD *)(v68 - 256) = 136315650;
          STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
          *(_WORD *)(v68 - 244) = 1024;
          LODWORD(STACK[0x39E]) = 1593;
          *(_WORD *)(v68 - 238) = 2080;
          STACK[0x3A4] = (unint64_t)v80;
          _os_log_error_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught std::exception: %s", (uint8_t *)(v68 - 256), 0x1Cu);
          if (a68 < 0) {
            operator delete(a63);
          }
        }
      }
      else if (v77)
      {
        *(_DWORD *)(v68 - 256) = 136315394;
        STACK[0x394] = (unint64_t)"AUSoundIsolation.mm";
        *(_WORD *)(v68 - 244) = 1024;
        LODWORD(STACK[0x39E]) = 1596;
        _os_log_error_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_ERROR, "%s:%i processing graph setup failed, caught unknown exception", (uint8_t *)(v68 - 256), 0x12u);
      }

      __cxa_end_catch();
LABEL_36:
      JUMPOUT(0x1BB579494);
  }
  operator delete(a63);
  goto LABEL_13;
}

void AUSoundIsolation::GetTuningDictionaryRef(applesauce::CF::DictionaryRef *a1, uint64_t a2, int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a3 != 4)
  {
    if (a3 != 3 || *(_DWORD *)(a2 + 532)) {
      goto LABEL_4;
    }
LABEL_32:
    *(void *)a1 = 0;
    return;
  }
  if (!*(_DWORD *)(a2 + 536)) {
    goto LABEL_32;
  }
LABEL_4:
  CFNumberRef v6 = *(uint64_t **)(a2 + 688);
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = a2 + 688;
  uint64_t v8 = *(void *)(a2 + 688);
  do
  {
    int v9 = *(_DWORD *)(v8 + 32);
    BOOL v10 = v9 < a3;
    if (v9 >= a3) {
      unsigned __int8 v11 = (uint64_t *)v8;
    }
    else {
      unsigned __int8 v11 = (uint64_t *)(v8 + 8);
    }
    if (!v10) {
      uint64_t v7 = v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v7 == a2 + 688 || *(_DWORD *)(v7 + 32) > a3 || !*(void *)(v7 + 40))
  {
LABEL_21:
    int v13 = *(_DWORD *)(a2 + 584);
    int v14 = *(_DWORD *)(a2 + 576);
    char v15 = (char *)operator new(0x38uLL);
    strcpy(v15, "/System/Library/Audio/Tunings/Generic/AU/SoundIsolation");
    if ((v43 & 0x80u) == 0) {
      size_t v16 = v43;
    }
    else {
      size_t v16 = (size_t)v42[1];
    }
    if (v16)
    {
      CFNumberRef v17 = &v41;
      std::string::basic_string[abi:ne180100]((uint64_t)&v41, v16 + 55);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFNumberRef v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v43 & 0x80u) == 0) {
        int v18 = v42;
      }
      else {
        int v18 = (void **)v42[0];
      }
      memmove(v17, v18, v16);
      int v19 = (char *)v17 + v16;
      memmove(v19, v15, 0x37uLL);
      v19[55] = 0;
    }
    else
    {
      std::string::__init_copy_ctor_external(&v41, v15, 0x37uLL);
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    CFNumberRef v20 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      char v33 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v33 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1769;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v33;
      _os_log_debug_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEBUG, "%s:%i tuning dir path: %s", buf, 0x1Cu);
    }
    if (v13 == 1)
    {
      switch(a3)
      {
        case 0:
          if (!_os_feature_enabled_impl())
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v41.__r_.__value_.__l.__size_;
            }
            int v36 = buf;
            std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 32);
            if ((buf[23] & 0x80u) != 0) {
              int v36 = *(uint8_t **)buf;
            }
            if (size)
            {
              if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v38 = &v41;
              }
              else {
                int v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
              }
              memmove(v36, v38, size);
            }
            goto LABEL_133;
          }
          if (!*(unsigned char *)(a2 + 564)) {
            break;
          }
          if (!v14) {
            goto LABEL_147;
          }
          if (v14 != 1) {
            goto LABEL_53;
          }
          break;
        case 1:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v25 = v41.__r_.__value_.__l.__size_;
          }
          int v26 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 29);
          if ((buf[23] & 0x80u) != 0) {
            int v26 = *(uint8_t **)buf;
          }
          if (v25)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v28 = &v41;
            }
            else {
              uint64_t v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            memmove(v26, v28, v25);
          }
          goto LABEL_79;
        case 3:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v22 = v41.__r_.__value_.__l.__size_;
          }
          __int16 v23 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v22 + 29);
          if ((buf[23] & 0x80u) != 0) {
            __int16 v23 = *(uint8_t **)buf;
          }
          if (v22)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v29 = &v41;
            }
            else {
              __int16 v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            memmove(v23, v29, v22);
          }
          goto LABEL_68;
        case 4:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v30 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v30 = v41.__r_.__value_.__l.__size_;
          }
          uint32_t v31 = buf;
          std::string::basic_string[abi:ne180100]((uint64_t)buf, v30 + 29);
          if ((buf[23] & 0x80u) != 0) {
            uint32_t v31 = *(uint8_t **)buf;
          }
          if (v30)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v32 = &v41;
            }
            else {
              uint64_t v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            memmove(v31, v32, v30);
          }
          strcpy((char *)&v31[v30], "/aufx-vois-appl-dnos.aupreset");
          goto LABEL_148;
        default:
          goto LABEL_53;
      }
    }
    else
    {
      if (v13) {
        goto LABEL_53;
      }
      if (a3 == 3)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v22 = v41.__r_.__value_.__l.__size_;
        }
        __int16 v23 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v22 + 29);
        if ((buf[23] & 0x80u) != 0) {
          __int16 v23 = *(uint8_t **)buf;
        }
        if (v22)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v24 = &v41;
          }
          else {
            int v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          memmove(v23, v24, v22);
        }
LABEL_68:
        strcpy((char *)&v23[v22], "/aufx-vois-appl-drev.aupreset");
        goto LABEL_148;
      }
      if (a3 == 1)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v25 = v41.__r_.__value_.__l.__size_;
        }
        int v26 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v25 + 29);
        if ((buf[23] & 0x80u) != 0) {
          int v26 = *(uint8_t **)buf;
        }
        if (v25)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v27 = &v41;
          }
          else {
            __int16 v27 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          memmove(v26, v27, v25);
        }
LABEL_79:
        strcpy((char *)&v26[v25], "/aufx-vois-appl-nnet.aupreset");
        goto LABEL_148;
      }
      if (a3) {
        goto LABEL_53;
      }
      if (!_os_feature_enabled_impl())
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v41.__r_.__value_.__l.__size_;
        }
        int v36 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 32);
        if ((buf[23] & 0x80u) != 0) {
          int v36 = *(uint8_t **)buf;
        }
        if (size)
        {
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v37 = &v41;
          }
          else {
            char v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          memmove(v36, v37, size);
        }
LABEL_133:
        strcpy((char *)&v36[size], "/aufx-vois-appl-nnet-vi-v0.plist");
        goto LABEL_148;
      }
      if (*(unsigned char *)(a2 + 564))
      {
        if (!v14)
        {
LABEL_147:
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&v41.__r_.__value_.__l.__data_, "/aufx-vois-appl-nnet-vi-high-quality-voice.plist");
LABEL_148:
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          goto LABEL_150;
        }
        if (v14 != 1)
        {
LABEL_53:
          *(void *)a1 = 0;
LABEL_150:
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          if ((char)v43 < 0) {
            operator delete(v42[0]);
          }
          char v34 = v15;
          goto LABEL_155;
        }
      }
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)buf, (const void **)&v41.__r_.__value_.__l.__data_, "/aufx-vois-appl-nnet-vi-voice.plist");
    goto LABEL_148;
  }
  while (1)
  {
    while (1)
    {
      int v12 = *((_DWORD *)v6 + 8);
      if (v12 <= a3) {
        break;
      }
      CFNumberRef v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_20;
      }
    }
    if (v12 >= a3) {
      break;
    }
    CFNumberRef v6 = (uint64_t *)v6[1];
    if (!v6) {
LABEL_20:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  CFStringRef v21 = (const __CFString *)v6[5];
  if (!v21)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::convert_to<std::string,0>(v21, (uint64_t)buf);
  if ((char)buf[23] < 0)
  {
    if (*(void *)&buf[8])
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
LABEL_118:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_121;
    }
  }
  else if (buf[23])
  {
    std::string __p = *(std::string *)buf;
    goto LABEL_118;
  }
  *(void *)a1 = 0;
LABEL_121:
  if (((char)buf[23] & 0x80000000) == 0) {
    return;
  }
  char v34 = *(char **)buf;
LABEL_155:
  operator delete(v34);
}

void sub_1BB57C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  operator delete(v33);
  _Unwind_Resume(a1);
}

void anonymous namespace'::getSimulatorRoot(_anonymous_namespace_ *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getenv("SIMULATOR_ROOT");
  if (v2) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(this, v3);
  if (*((char *)this + 23) >= 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v4 = *((void *)this + 1);
  }
  if (v4)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)this + 23) >= 0) {
        CFNumberRef v6 = this;
      }
      else {
        CFNumberRef v6 = *(_anonymous_namespace_ **)this;
      }
      int v11 = 136315650;
      int v12 = "AUSoundIsolation.mm";
      __int16 v13 = 1024;
      int v14 = 228;
      __int16 v15 = 2080;
      size_t v16 = v6;
      uint64_t v7 = "%s:%i SIMULATOR_ROOT: %s";
      uint64_t v8 = v5;
      uint32_t v9 = 28;
      goto LABEL_20;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315394;
      int v12 = "AUSoundIsolation.mm";
      __int16 v13 = 1024;
      int v14 = 226;
      uint64_t v7 = "%s:%i SIMULATOR_ROOT is empty";
      uint64_t v8 = v10;
      uint32_t v9 = 18;
LABEL_20:
      _os_log_debug_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v11, v9);
    }
  }
}

uint64_t **std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  CFNumberRef v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = operator new(0x30uLL);
    v12[1] = v6;
    unsigned __int8 v10[8] = *a3;
    *((void *)v10 + 5) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t applesauce::CF::details::find_at_key<int,char const(&)[14]>(const __CFDictionary *a1)
{
  CFNumberRef v1 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(a1, "LookaheadSize");
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }

  return applesauce::CF::convert_to<int,0>(v1);
}

void sub_1BB57CA58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SoundIsolationGraphAdapter::~SoundIsolationGraphAdapter(SoundIsolationGraphAdapter *this)
{
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  uint64_t v2 = (void **)((char *)this + 72);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((char **)this + 1));
}

void std::unique_ptr<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  CFNumberRef v1 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>(v1[5]);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

const void *applesauce::CF::details::at_key<char const(&)[22]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFNumberRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BB57CC64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void anonymous namespace'::loadDictionaryRef(applesauce::CF::DictionaryRef *a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v4 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v6 = a2;
    if (a2[23] < 0) {
      CFStringRef v6 = *(const char **)a2;
    }
    *(_DWORD *)long long buf = 136315650;
    int v9 = "AUSoundIsolation.mm";
    __int16 v10 = 1024;
    int v11 = 185;
    __int16 v12 = 2080;
    char v13 = v6;
    _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%s:%i load dictionary from %s", buf, 0x1Cu);
  }
  CFTypeRef cf = applesauce::CF::details::make_CFTypeRef(a2);
  if (!cf)
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    CFIndex v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] < 0) {
        a2 = *(const char **)a2;
      }
      *(_DWORD *)long long buf = 136315650;
      int v9 = "AUSoundIsolation.mm";
      __int16 v10 = 1024;
      int v11 = 198;
      __int16 v12 = 2080;
      char v13 = a2;
      _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "%s:%i loading from %s failed", buf, 0x1Cu);
    }
  }
  applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&cf, a1);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB57CEA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSoundIsolation::CanScheduleParameters(AUSoundIsolation *this)
{
  return 0;
}

uint64_t AUSoundIsolation::SetParameter(AUSoundIsolation *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956430;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSoundIsolation *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((void *)this + 74);
  return result;
}

uint64_t AUSoundIsolation::GetParameter(AUSoundIsolation *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    __int16 v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSoundIsolation *)((char *)this + 32), 0);
    *a5 = ausdk::AUElement::GetParameter(v12, a2);
  }
  return 0;
}

uint64_t AUSoundIsolation::SetProperty(uint64_t **this, int a2, int a3, unsigned int a4, CFTypeRef *a5, unsigned int a6)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 30000)
  {
    if (a2 > 3699)
    {
      if (a2 > 6999)
      {
        if (a2 != 7000)
        {
          if (a2 == 30000)
          {
            if (a6 == 8)
            {
              if (!*((unsigned char *)this + 17))
              {
                if (a5)
                {
                  applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
                  int v24 = this + 85;
                  LODWORD(__p[0]) = 0;
                  size_t v25 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v24, 0, __p);
                  int v26 = v25[5];
                  v25[5] = *(uint64_t **)buf;
                  *(void *)long long buf = v26;
                  applesauce::CF::StringRef::~StringRef((const void **)buf);
                  __int16 v12 = getAUSoundIsolationLog();
                  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
                  {
                    LODWORD(v83[0]) = 0;
                    __int16 v27 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v24, 0, v83);
                    applesauce::CF::convert_to<std::string,0>((const __CFString *)v27[5], (uint64_t)__p);
                    uint64_t v28 = v90 >= 0 ? __p : (void **)__p[0];
                    *(_DWORD *)long long buf = 136315650;
                    *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 731;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v28;
                    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPlistPath is overriden to %s", buf, 0x1Cu);
                    if (SHIBYTE(v90) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  goto LABEL_100;
                }
                *(void *)long long buf = 0;
                LODWORD(__p[0]) = 0;
                long long v72 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 0, __p);
                long long v73 = v72[5];
                v72[5] = *(uint64_t **)buf;
                *(void *)long long buf = v73;
                applesauce::CF::StringRef::~StringRef((const void **)buf);
                uint64_t v74 = getAUSoundIsolationLog();
                if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 136315394;
                  *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 734;
                  _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPlistPathOverride is set to null and thus removed", buf, 0x12u);
                }
                goto LABEL_158;
              }
              return 4294956447;
            }
            return 4294956445;
          }
          return result;
        }
        float v42 = *(float *)a5;
        unsigned __int8 v43 = this[92];
        std::mutex::lock((std::mutex *)v43 + 1);
        v43[19] = (uint64_t)v42;
        std::mutex::unlock((std::mutex *)v43 + 1);
        if (getAUSoundIsolationLog(void)::onceToken != -1) {
          dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
        }
        char v44 = getAUSoundIsolationLog(void)::gLog;
        uint64_t result = os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO);
        if (!result) {
          return result;
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 710;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(double *)&buf[20] = v42;
        _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_INFO, "%s:%i set CoreAudio reporter time period - %f", buf, 0x1Cu);
        return 0;
      }
      if (a2 == 3700)
      {
        if (a6 == 4)
        {
          if (!*((unsigned char *)this + 17))
          {
            uint64_t result = 0;
            *((unsigned char *)this + 376) = *(_DWORD *)a5 != 0;
            return result;
          }
          return 4294956447;
        }
        return 4294956445;
      }
      if (a2 != 6000) {
        return result;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v90 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(__p, a5, (uint64_t)&a5[a6 >> 3], a6 >> 3);
      v87[0] = 2;
      *(void **)long long buf = __p[0];
      v83[0] = __p[1];
      __int16 v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((uint64_t **)buf, (uint64_t **)v83);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
      uint64_t v15 = (uint64_t)this[92];
      *(_OWORD *)int v85 = *(_OWORD *)__p;
      uint64_t v86 = v90;
      __p[1] = 0;
      uint64_t v90 = 0;
      __p[0] = 0;
      AU::SoundIsolation::MetricsReporter::setCAReporterIDs(v15, (uint64_t)v85);
      if (v85[0]) {
        operator delete(v85[0]);
      }
      if (getAUSoundIsolationLog(void)::onceToken == -1) {
        goto LABEL_26;
      }
      goto LABEL_170;
    }
    switch(a2)
    {
      case 21:
        int v62 = *(_DWORD *)a5 != 0;
        if (*((unsigned __int8 *)this + 528) != v62)
        {
          *((unsigned char *)this + 528) = v62;
          *((_DWORD *)this + 137) = *((_DWORD *)this + 135);
          *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
          float v65 = *((float *)this + 143);
          if (*((unsigned char *)this + 529))
          {
            *((_DWORD *)this + 140) = v65;
            float v66 = 0.0;
          }
          else
          {
            float v66 = (float)*((unsigned int *)this + 140);
            if (v65 != 0.0 && v65 != v66)
            {
              *((_DWORD *)this + 140) = v65;
              float v66 = (float)v65;
            }
          }
          *((float *)this + 143) = v66;
          int v19 = getAUSoundIsolationLog();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            int v71 = *((unsigned __int8 *)this + 528);
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 663;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v71;
            _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i BypassEffect state changed to: %d", buf, 0x18u);
          }
          goto LABEL_143;
        }
        __int16 v23 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 665;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v62;
          _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_INFO, "%s:%i BypassEffect state unchanged: %d", buf, 0x18u);
        }
        break;
      case 56:
        this = (uint64_t **)this[1];
        __p[0] = 0;
        __p[1] = __p;
        uint64_t v90 = 0x2020000000;
        uint64_t v45 = (uint64_t (*)(uint64_t **, CFTypeRef *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        int v91 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
        {
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E623EAA0;
          uint64_t v93 = __p;
          ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke((uint64_t)buf);
          uint64_t v45 = (uint64_t (*)(uint64_t **, CFTypeRef *))*((void *)__p[1] + 3);
        }
        _Block_object_dispose(__p, 8);
        if (v45) {
          return v45(this, a5);
        }
        dlerror();
        abort_report_np();
        __break(1u);
LABEL_170:
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
LABEL_26:
        size_t v16 = (id)getAUSoundIsolationLog(void)::gLog;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v87, -1, 0x20u, 0, 0, v83);
          uint64_t v17 = v84 >= 0 ? v83 : (void **)v83[0];
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 701;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v17;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_INFO, "%s:%i set CoreAudio reporter IDs - %s", buf, 0x1Cu);
          if (v84 < 0) {
            operator delete(v83[0]);
          }
        }

        AUSoundIsolation::TearDownInternalReporterID((AUSoundIsolation *)this);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v88, v87[0]);
        int v18 = __p[0];
        if (!__p[0]) {
          return 0;
        }
        __p[1] = __p[0];
LABEL_34:
        operator delete(v18);
        return 0;
      case 2121:
        float v21 = *(float *)a5;
        int v22 = *(_DWORD *)a5 != 0;
        if (*((unsigned __int8 *)this + 529) != v22)
        {
          *((unsigned char *)this + 529) = v22;
          *((_DWORD *)this + 137) = *((_DWORD *)this + 135);
          *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
          float v63 = *((float *)this + 143);
          if (v21 == 0.0)
          {
            float v64 = (float)*((unsigned int *)this + 140);
            if (v63 != 0.0 && v63 != v64)
            {
              *((_DWORD *)this + 140) = v63;
              float v64 = (float)v63;
            }
          }
          else
          {
            *((_DWORD *)this + 140) = v63;
            float v64 = 0.0;
          }
          *((float *)this + 143) = v64;
          int v19 = getAUSoundIsolationLog();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            int v69 = *((unsigned __int8 *)this + 529);
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 688;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v69;
            _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i BypassEffectWithLatency state changed to: %d", buf, 0x18u);
          }
          goto LABEL_143;
        }
        __int16 v23 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 690;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_INFO, "%s:%i BypassEffectWithLatency state unchanged: %d", buf, 0x18u);
        }
        break;
      default:
        return result;
    }

    return 0;
  }
  if (a2 > 69999)
  {
    if (a2 > 89999)
    {
      if (a2 == 90000)
      {
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        float v67 = *(float *)a5;
        *((_DWORD *)this + 135) = *(_DWORD *)a5;
        *((float *)this + 137) = v67;
        int v19 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          double v68 = *((float *)this + 135);
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 856;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(double *)&buf[20] = v68;
          _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i Time Constant (seconds) set to: %f", buf, 0x1Cu);
        }
      }
      else
      {
        if (a2 != 90001) {
          return result;
        }
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        float v40 = *(float *)a5;
        *((_DWORD *)this + 139) = *(_DWORD *)a5;
        *((float *)this + 138) = v40;
        int v19 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int v41 = *((_DWORD *)this + 138);
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 868;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v41;
          _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i Transition Wait Time (frames) set to: %u", buf, 0x18u);
        }
      }
    }
    else if (a2 == 70000)
    {
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      *((_DWORD *)this + 133) = *(_DWORD *)a5;
      int v19 = getAUSoundIsolationLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        int v51 = *((_DWORD *)this + 133);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 844;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v51;
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i DereverbEnable set to: %u", buf, 0x18u);
      }
    }
    else
    {
      if (a2 != 80000) {
        return result;
      }
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      *((_DWORD *)this + 134) = *(_DWORD *)a5;
      int v19 = getAUSoundIsolationLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        int v20 = *((_DWORD *)this + 134);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 834;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v20;
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_INFO, "%s:%i DenoiseEnable set to: %u", buf, 0x18u);
      }
    }
LABEL_143:

    return 0;
  }
  if (a2 > 49999)
  {
    if (a2 != 50000)
    {
      if (a2 != 60000) {
        return result;
      }
      if (a6 != 8) {
        return 4294956445;
      }
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a5)
      {
        *(void *)long long buf = 0;
        LODWORD(__p[0]) = 4;
        BOOL v77 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 4, __p);
        float v78 = v77[5];
        v77[5] = *(uint64_t **)buf;
        *(void *)long long buf = v78;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        uint64_t v74 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 824;
          _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_INFO, "%s:%i DenoisePresetPathOverride is set to null and thus removed", buf, 0x12u);
        }
        goto LABEL_158;
      }
      applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
      __int16 v29 = this + 85;
      LODWORD(__p[0]) = 4;
      size_t v30 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v29, 4, __p);
      uint32_t v31 = v30[5];
      void v30[5] = *(uint64_t **)buf;
      *(void *)long long buf = v31;
      applesauce::CF::StringRef::~StringRef((const void **)buf);
      *(_DWORD *)long long buf = 4;
      uint64_t v32 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v29, 4, buf);
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v32[5], (uint64_t)__p);
      if (v90 >= 0) {
        char v33 = (void *)HIBYTE(v90);
      }
      else {
        char v33 = __p[1];
      }
      char v34 = getAUSoundIsolationLog();
      BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_INFO);
      if (v33)
      {
        if (v35)
        {
          int v36 = __p;
          if (v90 < 0) {
            int v36 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 820;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v36;
          char v37 = "%s:%i DenoisePresetPath is overridden to %s";
          int v38 = v34;
          uint32_t v39 = 28;
          goto LABEL_161;
        }
      }
      else if (v35)
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 818;
        char v37 = "%s:%i DenoisePresetPath is overridden with an empty string.";
        int v38 = v34;
        uint32_t v39 = 18;
LABEL_161:
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_INFO, v37, buf, v39);
      }
LABEL_166:

      if ((SHIBYTE(v90) & 0x80000000) == 0) {
        return 0;
      }
      int v18 = __p[0];
      goto LABEL_34;
    }
    if (a6 != 8) {
      return 4294956445;
    }
    if (*((unsigned char *)this + 17)) {
      return 4294956447;
    }
    if (!a5)
    {
      *(void *)long long buf = 0;
      LODWORD(__p[0]) = 3;
      long long v81 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 3, __p);
      long long v82 = v81[5];
      v81[5] = *(uint64_t **)buf;
      *(void *)long long buf = v82;
      applesauce::CF::StringRef::~StringRef((const void **)buf);
      uint64_t v74 = getAUSoundIsolationLog();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 799;
        _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_INFO, "%s:%i DereverbPresetPathOverride is set to null and thus removed", buf, 0x12u);
      }
      goto LABEL_158;
    }
    applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
    long long v52 = this + 85;
    LODWORD(__p[0]) = 3;
    long long v53 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v52, 3, __p);
    long long v54 = v53[5];
    v53[5] = *(uint64_t **)buf;
    *(void *)long long buf = v54;
    applesauce::CF::StringRef::~StringRef((const void **)buf);
    *(_DWORD *)long long buf = 3;
    uint64_t v55 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v52, 3, buf);
    applesauce::CF::convert_to<std::string,0>((const __CFString *)v55[5], (uint64_t)__p);
    if (v90 >= 0) {
      int v56 = (void *)HIBYTE(v90);
    }
    else {
      int v56 = __p[1];
    }
    char v34 = getAUSoundIsolationLog();
    BOOL v57 = os_log_type_enabled(v34, OS_LOG_TYPE_INFO);
    if (v56)
    {
      if (!v57) {
        goto LABEL_166;
      }
      int v58 = __p;
      if (v90 < 0) {
        int v58 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 795;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v58;
      unsigned int v59 = "%s:%i DereverbPresetPath is overriden to %s";
      uint64_t v60 = v34;
      uint32_t v61 = 28;
    }
    else
    {
      if (!v57) {
        goto LABEL_166;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 793;
      unsigned int v59 = "%s:%i DereverbPresetPath is overriden with an empty string.";
      uint64_t v60 = v34;
      uint32_t v61 = 18;
    }
    _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_INFO, v59, buf, v61);
    goto LABEL_166;
  }
  if (a2 == 30001)
  {
    if (a6 == 8)
    {
      if (!*((unsigned char *)this + 17))
      {
        if (a5)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          int v46 = this + 85;
          LODWORD(__p[0]) = 1;
          int v47 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v46, 1, __p);
          long long v48 = v47[5];
          v47[5] = *(uint64_t **)buf;
          *(void *)long long buf = v48;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          __int16 v12 = getAUSoundIsolationLog();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            LODWORD(v83[0]) = 1;
            CFTypeRef v49 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v46, 1, v83);
            applesauce::CF::convert_to<std::string,0>((const __CFString *)v49[5], (uint64_t)__p);
            long long v50 = v90 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 751;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v50;
            _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPresetPath is overriden to %s", buf, 0x1Cu);
            if (SHIBYTE(v90) < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_100;
        }
        *(void *)long long buf = 0;
        LODWORD(__p[0]) = 1;
        long long v79 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 1, __p);
        long long v80 = v79[5];
        v79[5] = *(uint64_t **)buf;
        *(void *)long long buf = v80;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        uint64_t v74 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 754;
          _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetPresetPathOverride is set to null and thus removed", buf, 0x12u);
        }
LABEL_158:

        return 0;
      }
      return 4294956447;
    }
    return 4294956445;
  }
  if (a2 == 40000)
  {
    if (a6 == 8)
    {
      if (!*((unsigned char *)this + 17))
      {
        if (a5)
        {
          applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)buf, *a5);
          int v9 = this + 85;
          LODWORD(__p[0]) = 2;
          __int16 v10 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v9, 2, __p);
          int v11 = v10[5];
          v10[5] = *(uint64_t **)buf;
          *(void *)long long buf = v11;
          applesauce::CF::StringRef::~StringRef((const void **)buf);
          __int16 v12 = getAUSoundIsolationLog();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            LODWORD(v83[0]) = 2;
            char v13 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(v9, 2, v83);
            applesauce::CF::convert_to<std::string,0>((const __CFString *)v13[5], (uint64_t)__p);
            if (v90 >= 0) {
              uint64_t v14 = __p;
            }
            else {
              uint64_t v14 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 771;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v14;
            _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s:%i NeuralNetModelNetPathBase is overriden to %s", buf, 0x1Cu);
            if (SHIBYTE(v90) < 0) {
              operator delete(__p[0]);
            }
          }
LABEL_100:

          return 0;
        }
        *(void *)long long buf = 0;
        LODWORD(__p[0]) = 2;
        AudioStreamBasicDescription v75 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>(this + 85, 2, __p);
        uint64_t v76 = v75[5];
        v75[5] = *(uint64_t **)buf;
        *(void *)long long buf = v76;
        applesauce::CF::StringRef::~StringRef((const void **)buf);
        uint64_t v74 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUSoundIsolation.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 774;
          _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_INFO, "%s:%i NeuralNetModelNetPathBaseOverride is set to null and thus removed", buf, 0x12u);
        }
        goto LABEL_158;
      }
      return 4294956447;
    }
    return 4294956445;
  }
  return result;
}

void sub_1BB57E530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  applesauce::CF::StringRef::~StringRef((const void **)(v20 - 96));
  _Unwind_Resume(a1);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFStringRef v6 = result;
    uint64_t result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB57E650(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUSoundIsolation::TearDownInternalReporterID(AUSoundIsolation *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 712))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v2 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      uint64_t v7 = "AUSoundIsolation.mm";
      __int16 v8 = 1024;
      int v9 = 1925;
      _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%s:%i will teardown the internal CAReporterID", (uint8_t *)&v6, 0x12u);
    }
    uint64_t v3 = *((void *)this + 88);
    if (AudioStatisticsLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_135);
    }
    if (AudioStatisticsLibraryLoader(void)::libSym)
    {
      AudioStatisticsLibraryLoader(void)::libSym(v3);
      uint64_t v4 = *((void *)this + 88);
      if (AudioStatisticsLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_135);
      }
    }
    else
    {
      uint64_t v4 = *((void *)this + 88);
    }
    if (AudioStatisticsLibraryLoader(void)::libSym) {
      AudioStatisticsLibraryLoader(void)::libSym(v4);
    }
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    CFIndex v5 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      uint64_t v7 = "AUSoundIsolation.mm";
      __int16 v8 = 1024;
      int v9 = 1928;
      _os_log_debug_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%s:%i internal CAReporterID destroyed", (uint8_t *)&v6, 0x12u);
    }
  }
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E623EAC0;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_13539()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void))dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

uint64_t AUSoundIsolation::GetProperty(AUSoundIsolation *this, int a2, int a3, unsigned int a4, uint64_t **a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 30000)
  {
    if (a2 <= 59999)
    {
      switch(a2)
      {
        case 30001:
          LODWORD(v14) = 1;
          int v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 1, &v14);
          uint64_t v10 = v9[5];
          if (v10) {
            goto LABEL_36;
          }
          break;
        case 40000:
          LODWORD(v14) = 2;
          int v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 2, &v14);
          uint64_t v10 = v9[5];
          if (v10) {
            goto LABEL_36;
          }
          break;
        case 50000:
          LODWORD(v14) = 3;
          int v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 3, &v14);
          uint64_t v10 = v9[5];
          if (v10) {
            goto LABEL_36;
          }
          break;
        default:
          return result;
      }
      goto LABEL_37;
    }
    switch(a2)
    {
      case 60000:
        LODWORD(v14) = 4;
        int v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 4, &v14);
        uint64_t v10 = v9[5];
        if (v10) {
LABEL_36:
        }
          CFRetain(v9[5]);
LABEL_37:
        uint64_t result = 0;
        *a5 = v10;
        return result;
      case 70000:
        uint64_t result = 0;
        int v8 = *((_DWORD *)this + 133);
        goto LABEL_39;
      case 80000:
        uint64_t result = 0;
        int v8 = *((_DWORD *)this + 134);
        goto LABEL_39;
    }
  }
  else
  {
    if (a2 <= 5999)
    {
      switch(a2)
      {
        case 21:
          uint64_t result = 0;
          int v8 = *((unsigned __int8 *)this + 528);
          goto LABEL_39;
        case 2121:
          uint64_t result = 0;
          int v8 = *((unsigned __int8 *)this + 529);
          goto LABEL_39;
        case 3700:
          uint64_t result = 0;
          int v8 = *((unsigned __int8 *)this + 376);
LABEL_39:
          *(_DWORD *)a5 = v8;
          return result;
      }
      return result;
    }
    switch(a2)
    {
      case 6000:
        AU::SoundIsolation::MetricsReporter::getCAReporterIDs((AU::SoundIsolation::MetricsReporter *)&v14, *((void *)this + 92));
        int v11 = v14;
        memcpy(a5, v14, v15 - v14);
        if (v11)
        {
          uint64_t v15 = v11;
          operator delete(v11);
        }
        return 0;
      case 7000:
        uint64_t v12 = *((void *)this + 92);
        std::mutex::lock((std::mutex *)(v12 + 64));
        float v13 = (float)*(uint64_t *)(v12 + 152);
        std::mutex::unlock((std::mutex *)(v12 + 64));
        uint64_t result = 0;
        *(float *)a5 = v13;
        return result;
      case 30000:
        LODWORD(v14) = 0;
        int v9 = std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::__emplace_unique_key_args<AUSoundIsolation::BoxTuningType,std::piecewise_construct_t const&,std::tuple<AUSoundIsolation::BoxTuningType&&>,std::tuple<>>((uint64_t **)this + 85, 0, &v14);
        uint64_t v10 = v9[5];
        if (v10) {
          goto LABEL_36;
        }
        goto LABEL_37;
    }
  }
  return result;
}

uint64_t AUSoundIsolation::GetPropertyInfo(AUSoundIsolation *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t result = 4294956417;
  if (a2 > 30000)
  {
    if (a2 <= 69999)
    {
      if (a2 <= 49999)
      {
        if (a2 != 30001)
        {
          int v12 = 40000;
          goto LABEL_25;
        }
LABEL_26:
        unsigned int v15 = 8;
LABEL_31:
        *a5 = v15;
LABEL_32:
        uint64_t result = 0;
        *a6 = 1;
        return result;
      }
      if (a2 == 50000) {
        goto LABEL_26;
      }
      int v12 = 60000;
LABEL_25:
      if (a2 != v12) {
        return result;
      }
      goto LABEL_26;
    }
    if (a2 > 89999)
    {
      if (a2 != 90000)
      {
        unsigned __int16 v14 = 24465;
LABEL_29:
        if (a2 != (v14 | 0x10000)) {
          return result;
        }
      }
    }
    else if (a2 != 70000)
    {
      unsigned __int16 v14 = 14464;
      goto LABEL_29;
    }
LABEL_30:
    unsigned int v15 = 4;
    goto LABEL_31;
  }
  if (a2 > 3699)
  {
    if (a2 > 6999)
    {
      if (a2 != 7000)
      {
        int v12 = 30000;
        goto LABEL_25;
      }
    }
    else if (a2 != 3700)
    {
      if (a2 != 6000) {
        return result;
      }
      AU::SoundIsolation::MetricsReporter::getCAReporterIDs((AU::SoundIsolation::MetricsReporter *)&__p, *((void *)this + 92));
      float v13 = __p;
      *a5 = (v17 - __p) & 0xFFFFFFF8;
      if (v13)
      {
        uint64_t v17 = v13;
        operator delete(v13);
      }
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  switch(a2)
  {
    case 21:
      goto LABEL_30;
    case 56:
      goto LABEL_26;
    case 2121:
      goto LABEL_30;
  }
  return result;
}

uint64_t AUSoundIsolation::Reset(AUSoundIsolation *this)
{
  uint64_t v2 = (DSPGraph::Graph *)*((void *)this + 76);
  if (v2 && *((unsigned char *)v2 + 762)) {
    DSPGraph::Graph::reset(v2);
  }
  uint64_t v3 = (DSPGraph::Graph *)*((void *)this + 77);
  if (v3 && *((unsigned char *)v3 + 762)) {
    DSPGraph::Graph::reset(v3);
  }
  uint64_t v4 = (DSPGraph::Graph *)*((void *)this + 81);
  if (v4 && *((unsigned char *)v4 + 762)) {
    DSPGraph::Graph::reset(v4);
  }
  if (*((_DWORD *)this + 169))
  {
    uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
    ausdk::AUBufferList::PrepareBuffer((AUSoundIsolation *)((char *)this + 656), Element + 2, *((_DWORD *)this + 84));
    uint64_t BufferList = (_DWORD *)ausdk::AUBufferList::GetBufferList((AUSoundIsolation *)((char *)this + 656));
    if (*BufferList)
    {
      uint64_t v7 = BufferList;
      unsigned int v8 = 0;
      int v9 = (void **)(BufferList + 4);
      do
      {
        bzero(*v9, *((unsigned int *)v9 - 1));
        ++v8;
        v9 += 2;
      }
      while (v8 < *v7);
    }
  }
  return 0;
}

uint64_t AUSoundIsolation::Cleanup(AUSoundIsolation *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v2 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    uint64_t v7 = "AUSoundIsolation.mm";
    __int16 v8 = 1024;
    int v9 = 295;
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%s:%i cleanup", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v3 = *((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = *((void *)this + 81);
  *((void *)this + 81) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*((_DWORD *)this + 169))
  {
    if (*((void *)this + 83))
    {
      uint64_t result = (*((uint64_t (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
      *((void *)this + 83) = 0;
    }
    *((void *)this + 84) = 0;
    *((_DWORD *)this + 164) = 0;
  }
  return result;
}

uint64_t AUSoundIsolation::Initialize(AUSoundIsolation *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  LOBYTE(v28) = 0;
  char v29 = 0;
  LOBYTE(v30.mSampleRate) = 0;
  char v31 = 0;
  LOBYTE(v32) = 0;
  char v35 = 0;
  LOBYTE(v36) = 0;
  char v37 = 0;
  char v38 = 0;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  __int16 v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v3 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AUSoundIsolation.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 312;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%s:%i will try to initialize", (uint8_t *)&buf, 0x12u);
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
  }
  uint64_t v4 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AUSoundIsolation.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 315;
    _os_log_debug_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%s:%i check input and output formats", (uint8_t *)&buf, 0x12u);
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 80), 0);
  long long v6 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&buf.Float64 mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf.mBytesPerPacket = v6;
  *(void *)&buf.mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((AUSoundIsolation *)((char *)this + 128), 0);
  long long v8 = *(_OWORD *)(v7 + 96);
  long long v26 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)__int16 v27 = v8;
  *(void *)&v27[16] = *(void *)(v7 + 112);
  AudioStreamBasicDescription v30 = buf;
  char v31 = 1;
  long long v32 = v26;
  long long v33 = v8;
  uint64_t v34 = *(void *)&v27[16];
  char v35 = 1;
  if (*(double *)&v26 == buf.mSampleRate
    && DWORD2(v26) == buf.mFormatID
    && *(void *)v27 == *(void *)&buf.mBytesPerPacket
    && *(void *)&v27[12] == *(void *)&buf.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v26, &buf, 0, 0))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v9 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int v47 = 136315394;
      long long v48 = "AUSoundIsolation.mm";
      __int16 v49 = 1024;
      int v50 = 334;
      _os_log_debug_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%s:%i initialize base", v47, 0x12u);
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
    }
    uint64_t v10 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int v47 = 136315394;
      long long v48 = "AUSoundIsolation.mm";
      __int16 v49 = 1024;
      int v50 = 348;
      _os_log_debug_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%s:%i update local parameter state before creating the processing graph", v47, 0x12u);
    }
    AUSoundIsolation::UpdateLocalParamState(this);
    *((void *)this + 75) = *((void *)this + 74);
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    int v11 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int v47 = 136315394;
      long long v48 = "AUSoundIsolation.mm";
      __int16 v49 = 1024;
      int v50 = 352;
      _os_log_debug_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%s:%i initialize processing graphs", v47, 0x12u);
    }
    uint64_t ProcessingGraphs = AUSoundIsolation::CreateProcessingGraphs(this);
    if (ProcessingGraphs)
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      float v13 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v47 = 136315394;
        long long v48 = "AUSoundIsolation.mm";
        __int16 v49 = 1024;
        int v50 = 355;
        _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%s:%i InitializeProcessingGraphs failed", v47, 0x12u);
      }
      int v28 = ProcessingGraphs;
      char v29 = 1;
      unsigned __int16 v14 = (uint64_t *)*((void *)this + 92);
      *(_DWORD *)int v47 = 2;
      AU::SoundIsolation::MetricsReporter::reportAsync(v14, &v28, (int *)v47);
    }
    else
    {
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      uint64_t v18 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v47 = 136315394;
        long long v48 = "AUSoundIsolation.mm";
        __int16 v49 = 1024;
        int v50 = 366;
        _os_log_debug_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%s:%i allocate temporary ABL", v47, 0x12u);
      }
      ausdk::AUBufferList::Allocate((AUSoundIsolation *)((char *)this + 656), &buf, *((_DWORD *)this + 84));
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      uint64_t v19 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v47 = 136315394;
        long long v48 = "AUSoundIsolation.mm";
        __int16 v49 = 1024;
        int v50 = 371;
        _os_log_debug_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%s:%i update local parameter state after initializing the processing graph", v47, 0x12u);
      }
      AUSoundIsolation::UpdateLocalParamState(this);
      *((void *)this + 75) = *((void *)this + 74);
      *((_DWORD *)this + 140) = *((float *)this + 143);
      if (*((_DWORD *)this + 138) && *((float *)this + 135) > 0.0 && !*((unsigned char *)this + 529) && !*((unsigned char *)this + 528))
      {
        uint64_t v20 = getAUSoundIsolationLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v47 = 136315394;
          long long v48 = "AUSoundIsolation.mm";
          __int16 v49 = 1024;
          int v50 = 377;
          _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i Not bypassed at initialization - activate smooth transition", v47, 0x12u);
        }

        *((_DWORD *)this + 139) = *((_DWORD *)this + 138);
        *((_DWORD *)this + 136) = 0;
      }
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      float v21 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v47 = 136315394;
        long long v48 = "AUSoundIsolation.mm";
        __int16 v49 = 1024;
        int v50 = 382;
        _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s:%i initialized", v47, 0x12u);
      }
      uint64_t v22 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v2.__d_.__rep_)
                              * (__int128)0x431BDE82D7B634DBLL) >> 64;
      if (getAUSoundIsolationLog(void)::onceToken != -1) {
        dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
      }
      uint64_t v23 = (v22 >> 18) + ((unint64_t)v22 >> 63);
      int v24 = getAUSoundIsolationLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int v47 = 136315650;
        long long v48 = "AUSoundIsolation.mm";
        __int16 v49 = 1024;
        int v50 = 387;
        __int16 v51 = 2048;
        uint64_t v52 = v23;
        _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_INFO, "%s:%i initialization duration %lld ms", v47, 0x1Cu);
      }
      int v28 = 0;
      char v29 = 1;
      char v37 = 1;
      uint64_t v36 = v23;
      size_t v25 = (uint64_t *)*((void *)this + 92);
      *(_DWORD *)int v47 = 3;
      AU::SoundIsolation::MetricsReporter::reportAsync(v25, &v28, (int *)v47);
      return 0;
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    unsigned int v15 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v47 = 136315394;
      long long v48 = "AUSoundIsolation.mm";
      __int16 v49 = 1024;
      int v50 = 323;
      _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%s:%i input and output formats must match", v47, 0x12u);
    }
    int v28 = -10868;
    char v29 = 1;
    size_t v16 = (uint64_t *)*((void *)this + 92);
    *(_DWORD *)int v47 = 0;
    AU::SoundIsolation::MetricsReporter::reportAsync(v16, &v28, (int *)v47);
    return 4294956428;
  }
  return ProcessingGraphs;
}

void AUSoundIsolation::~AUSoundIsolation(void **this)
{
  AUSoundIsolation::~AUSoundIsolation(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  long long v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void v17[5];
  std::__shared_weak_count *v18;
  uint64_t vars8;

  *this = &unk_1F14B47B8;
  AUSoundIsolation::TearDownInternalReporterID((AUSoundIsolation *)this);
  std::chrono::steady_clock::time_point v2 = (std::__shared_weak_count *)this[93];
  uint64_t v3 = 0uLL;
  *((_OWORD *)this + 46) = 0u;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    uint64_t v3 = 0uLL;
  }
  uint64_t v4 = this[90];
  CFIndex v5 = (std::__shared_weak_count *)this[91];
  *((_OWORD *)this + 45) = v3;
  long long v6 = dispatch_get_global_queue(21, 0);
  uint64_t v7 = v6;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  v17[2] = ___ZN16AUSoundIsolation17TearDownMessengerEv_block_invoke;
  uint64_t v17[3] = &__block_descriptor_48_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE_e5_v8__0l;
  int v17[4] = v4;
  uint64_t v18 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v6, v17);

  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v8 = (std::__shared_weak_count *)this[93];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v9 = (std::__shared_weak_count *)this[91];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(this[86]);
  float v13 = this[83];
  if (v13)
  {
    (*((void (**)(_UNKNOWN **, void *, uint64_t, uint64_t, uint64_t))ausdk::BufferAllocator::instance(void)::global
     + 3))(&ausdk::BufferAllocator::instance(void)::global, v13, v10, v11, v12);
    this[83] = 0;
  }
  this[84] = 0;
  *((_DWORD *)this + 164) = 0;
  unsigned __int16 v14 = this[81];
  this[81] = 0;
  if (v14) {
    (*(void (**)(void *))(*(void *)v14 + 8))(v14);
  }
  if (*((char *)this + 647) < 0) {
    operator delete(this[78]);
  }
  unsigned int v15 = this[77];
  this[77] = 0;
  if (v15) {
    (*(void (**)(void *))(*(void *)v15 + 8))(v15);
  }
  size_t v16 = this[76];
  this[76] = 0;
  if (v16) {
    (*(void (**)(void *))(*(void *)v16 + 8))(v16);
  }

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

void std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(*a1);
    std::__tree<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::__map_value_compare<AUSoundIsolation::BoxTuningType,std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>,std::less<AUSoundIsolation::BoxTuningType>,true>,std::allocator<std::__value_type<AUSoundIsolation::BoxTuningType,applesauce::CF::StringRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<AUSoundIsolation::BoxTuningType const,applesauce::CF::StringRef>,0>((const void *)a1[5]);
    operator delete(a1);
  }
}

uint64_t ___ZN16AUSoundIsolation17TearDownMessengerEv_block_invoke(uint64_t a1)
{
  return caulk::concurrent::messenger::drain(*(caulk::concurrent::messenger **)(a1 + 32));
}

void sub_1BB57FE54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int v9 = getAUSoundIsolationLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "AUSoundIsolation.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1884;
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s:%i failed to flush logs due to exception", (uint8_t *)&a9, 0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB57FE28);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c56_ZTSNSt3__110shared_ptrIN5caulk10concurrent9messengerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::operator()(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_135);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    AudioStatisticsLibraryLoader(void)::libSym(v3, v4, 1, 0);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BB57FF88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14B4AB8;
}

void *std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F14B4AB8;
  return result;
}

void std::__function::__func<AUSoundIsolation::SetUpMetricsReporter(void)::$_0,std::allocator<AUSoundIsolation::SetUpMetricsReporter(void)::$_0>,void ()(long long,applesauce::CF::DictionaryRef)>::~__func()
{
}

void ___ZN12_GLOBAL__N_119registerInternalAUsEv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (getAUSoundIsolationLog(void)::onceToken != -1) {
    dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v0 = getAUSoundIsolationLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v5.componentType = 136315394;
    *(void *)&v5.componentSubType = "AUSoundIsolation.mm";
    LOWORD(v5.componentFlags) = 1024;
    *(UInt32 *)((char *)&v5.componentFlags + 2) = 136;
    _os_log_debug_impl(&dword_1BB0CE000, v0, OS_LOG_TYPE_DEBUG, "%s:%i will try to register internal AUs", (uint8_t *)&v5, 0x12u);
  }
  *(_OWORD *)&v5.componentType = xmmword_1BB87B650;
  v5.componentFlagsMasuint64_t k = 0;
  if (AudioComponentRegister(&v5, &stru_1F14C9790, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNeuralNet>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v1 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v5.componentType = 136315394;
      *(void *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 158;
      _os_log_debug_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEBUG, "%s:%i registration successful", (uint8_t *)&v5, 0x12u);
    }
  }
  else
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v2 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(void *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 160;
      _os_log_error_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%s:%i AUNeuralNet registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
  *(_OWORD *)&v5.componentType = xmmword_1BB87B660;
  v5.componentFlagsMasuint64_t k = 0;
  if (!AudioComponentRegister(&v5, &stru_1F14C9790, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDenoise>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v3 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(void *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 169;
      _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "%s:%i AUDenoise registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
  *(_OWORD *)&v5.componentType = xmmword_1BB87B670;
  v5.componentFlagsMasuint64_t k = 0;
  if (!AudioComponentRegister(&v5, &stru_1F14C9790, 0x10600u, (AudioComponentFactoryFunction)ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUDereverb>::Factory))
  {
    if (getAUSoundIsolationLog(void)::onceToken != -1) {
      dispatch_once(&getAUSoundIsolationLog(void)::onceToken, &__block_literal_global_48);
    }
    uint64_t v4 = getAUSoundIsolationLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSoundIsolationLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v5.componentType = 136315394;
      *(void *)&v5.componentSubType = "AUSoundIsolation.mm";
      LOWORD(v5.componentFlags) = 1024;
      *(UInt32 *)((char *)&v5.componentFlags + 2) = 178;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%s:%i AUDereverb registration failed", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t ___ZN8DSPGraph6getLogEv_block_invoke()
{
  DSPGraph::getLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "DSPGraph");

  return MEMORY[0x1F41817F8]();
}

void std::__tree<std::__value_type<unsigned int,ProcessingChainInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,ProcessingChainInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,ProcessingChainInfo>>>::__emplace_unique_impl<int,ProcessingChainInfo>(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = operator new(0xB8uLL);
  v6[7] = a2;
  long long v7 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v6 + 9) = v7;
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a3 + 128);
  v6[44] = *(_DWORD *)(a3 + 144);
  long long v8 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v6 + 5) = v8;
  long long v9 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v6 + 7) = v9;
  long long v10 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 3) = v10;
  int v11 = a1 + 1;
  int v12 = a1[1];
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        float v13 = (uint64_t **)v12;
        unsigned int v14 = *((_DWORD *)v12 + 7);
        if (v14 <= a2) {
          break;
        }
        int v12 = *v13;
        int v11 = v13;
        if (!*v13) {
          goto LABEL_9;
        }
      }
      if (v14 >= a2) {
        break;
      }
      int v12 = v13[1];
      if (!v12)
      {
        int v11 = v13 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v6);
  }
  else
  {
    float v13 = a1 + 1;
LABEL_9:
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v13, v11, (uint64_t *)v6);
  }
}

uint64_t MetadataDNNVAD::Uninitialize(DSPGraph::Graph **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DSPGraph::Graph::uninitialize(v2);
    DSPGraph::Graph::unconfigure(*this);
    uint64_t v3 = (std::__shared_weak_count *)this[1];
    *this = 0;
    this[1] = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = this[2];
    this[2] = 0;
    if (v4) {
      (*(void (**)(DSPGraph::Graph *))(*(void *)v4 + 8))(v4);
    }
  }
  return 0;
}

void sub_1BB5805C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, long long a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v18 = (unsigned int *)__cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      caulk::string_from_4cc((caulk *)v18[2], 1, (std::string *)&__p);
      if (a15 < 0) {
        p_p = __p;
      }
      uint64_t v26 = (*(uint64_t (**)(unsigned int *))(*(void *)v18 + 16))(v18);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "Uninitialize";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 97;
      WORD1(a17) = 2080;
      *(void *)((char *)&a17 + 4) = p_p;
      WORD6(a17) = 2080;
      *(void *)((char *)&a17 + 14) = v26;
      _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "MetadataDNNVAD:%s:%d: couldn't uninitialize due to DSPG exception %s: %s", (uint8_t *)&buf, 0x26u);
      if (a15 < 0) {
        operator delete(__p);
      }
    }
LABEL_9:
    __cxa_end_catch();
    JUMPOUT(0x1BB580544);
  }
  uint64_t v19 = __cxa_begin_catch(a1);
  BOOL v20 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (!v20) {
      goto LABEL_9;
    }
    uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "Uninitialize";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 100;
    WORD1(a17) = 2080;
    *(void *)((char *)&a17 + 4) = v21;
    uint64_t v22 = MEMORY[0x1E4F14500];
    uint64_t v23 = "MetadataDNNVAD:%s:%d: couldn't uninitialize due to exception: %s";
    uint32_t v24 = 28;
  }
  else
  {
    if (!v20) {
      goto LABEL_9;
    }
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "Uninitialize";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 103;
    uint64_t v22 = MEMORY[0x1E4F14500];
    uint64_t v23 = "MetadataDNNVAD:%s:%d: unknown exception";
    uint32_t v24 = 18;
  }
  _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v24);
  goto LABEL_9;
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1BB580830(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MetadataDNNVAD_LoadPropertyList(NSString *a1)
{
  uint64_t v1 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:a1];
  uint64_t v4 = 100;
  uint64_t v2 = [MEMORY[0x1E4F28F98] propertyListWithData:v1 options:0 format:&v4 error:0];

  return v2;
}

void sub_1BB5808B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CFilterBank::filterbank_compute_bank32(uint64_t a1, const float *a2, float *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  MEMORY[0x1F4188790](a1);
  long long v9 = (float *)((char *)&v17 - ((v8 + 15) & 0x7FFFFFFF0));
  HIDWORD(v17) = 0;
  vDSP_vmul(*(const float **)(v10 + 16), 1, a2, 1, v9, 1, v11);
  if (*(int *)(a1 + 40) >= 1)
  {
    uint64_t v12 = 0;
    float v13 = a3;
    do
    {
      vDSP_sve(&v9[*(int *)(v7 + 4 * v12)], 1, v13, *(int *)(v6 + 4 * v12));
      ++v12;
      ++v13;
    }
    while (v12 < *(int *)(a1 + 40));
  }
  vDSP_vmul(*(const float **)(a1 + 24), 1, a2, 1, v9, 1, *(int *)(a1 + 44));
  if (*(int *)(a1 + 40) > 1)
  {
    uint64_t v15 = 0;
    size_t v16 = a3 + 1;
    do
    {
      vDSP_sve(&v9[*(int *)(v7 + 4 * v15)], 1, (float *)&v17 + 1, *(int *)(v6 + 4 * v15));
      float result = *((float *)&v17 + 1) + v16[v15];
      v16[v15++] = result;
    }
    while (v15 < *(int *)(a1 + 40) - 1);
  }
  return result;
}

float CFilterBank::filterbank_compute_psd16(int **a1, uint64_t a2, float *a3)
{
  uint64_t v3 = *((unsigned int *)a1 + 11);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    uint64_t v7 = a1[3];
    do
    {
      uint64_t v9 = *v4++;
      uint64_t v8 = v9;
      uint64_t v11 = *v5++;
      uint64_t v10 = v11;
      LODWORD(v11) = *v6++;
      float v12 = *(float *)(a2 + 4 * v8) * *(float *)&v11;
      LODWORD(v11) = *v7++;
      float result = v12 + (float)(*(float *)(a2 + 4 * v10) * *(float *)&v11);
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void CFilterBank::filterbank_destroy(void **a1)
{
  free(*a1);
  free(a1[1]);
  free(a1[2]);
  free(a1[3]);
  free(a1[6]);
  free(a1[7]);
  free(a1[4]);

  free(a1);
}

_OWORD *CFilterBank::filterbank_new(CFilterBank *this, int a2, float a3)
{
  int v5 = (int)this;
  float v6 = a3 * 0.5;
  float v7 = atanf((float)(a3 * 0.5) * 0.00074);
  float v8 = atanf((float)(v6 * v6) * 0.0000000185);
  uint64_t v9 = malloc_type_malloc(0x40uLL, 0x90BE0547uLL);
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  *((_DWORD *)v9 + 10) = v5;
  *((_DWORD *)v9 + 11) = a2;
  uint64_t v10 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v10, 4 * a2);
  *(void *)uint64_t v9 = v10;
  uint64_t v11 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v11, 4 * a2);
  *((void *)v9 + 1) = v11;
  float v12 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v12, 4 * a2);
  *((void *)v9 + 2) = v12;
  float v13 = malloc_type_malloc(4 * a2, 0x90BE0547uLL);
  bzero(v13, 4 * a2);
  *((void *)v9 + 3) = v13;
  unsigned int v14 = malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v14, 4 * v5);
  *((void *)v9 + 6) = v14;
  uint64_t v15 = malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v15, 4 * v5);
  *((void *)v9 + 7) = v15;
  size_t v16 = (float *)malloc_type_malloc(4 * v5, 0x90BE0547uLL);
  bzero(v16, 4 * v5);
  *((void *)v9 + 4) = v16;
  if (a2 >= 1)
  {
    uint64_t v17 = 0;
    float v18 = a3 / (float)(2 * a2);
    float v19 = (float)((float)(v8 * 2.24) + (float)(v7 * 13.1)) + (float)(v6 * 0.0001);
    float v20 = v19 / (float)(v5 - 1);
    int v21 = v5 - 2;
    do
    {
      float v22 = v18 * (float)(int)v17;
      float v23 = atanf(v22 * 0.00074);
      float v24 = (float)((float)(atanf((float)(v22 * v22) * 0.0000000185) * 2.24) + (float)(v23 * 13.1))
          + (float)(v22 * 0.0001);
      if (v24 > v19) {
        break;
      }
      int v25 = vcvtms_s32_f32(v24 / v20);
      float v26 = 1.0;
      int v27 = v21;
      if (v21 >= v25)
      {
        float v26 = (float)(v24 - (float)((float)v25 * v20)) / v20;
        int v27 = v25;
      }
      uint64_t v28 = *((void *)v9 + 1);
      *(_DWORD *)(*(void *)v9 + 4 * v17) = v27;
      uint64_t v29 = *((void *)v9 + 3);
      *(float *)(*((void *)v9 + 2) + 4 * v17) = 1.0 - v26;
      *(_DWORD *)(v28 + 4 * v17) = v27 + 1;
      *(float *)(v29 + 4 * v17++) = v26;
    }
    while (a2 != v17);
  }
  uint64_t v30 = *((unsigned int *)v9 + 10);
  if ((int)v30 >= 1) {
    bzero(v16, 4 * v30);
  }
  uint64_t v31 = *((unsigned int *)v9 + 11);
  if ((int)v31 >= 1)
  {
    long long v32 = *(int **)v9;
    long long v33 = (int *)*((void *)v9 + 1);
    uint64_t v34 = (_DWORD *)*((void *)v9 + 2);
    char v35 = (_DWORD *)*((void *)v9 + 3);
    do
    {
      uint64_t v37 = *v32++;
      uint64_t v36 = v37;
      LODWORD(v37) = *v34++;
      v16[v36] = *(float *)&v37 + v16[v36];
      uint64_t v39 = *v33++;
      uint64_t v38 = v39;
      LODWORD(v39) = *v35++;
      v16[v38] = *(float *)&v39 + v16[v38];
      --v31;
    }
    while (v31);
  }
  if ((int)v30 >= 1)
  {
    do
    {
      *size_t v16 = 1.0 / *v16;
      ++v16;
      --v30;
    }
    while (v30);
  }
  char v40 = (_DWORD *)*((void *)v9 + 6);
  char v41 = (_DWORD *)*((void *)v9 + 7);
  *char v40 = 0;
  *char v41 = 0;
  if (a2 >= 1)
  {
    uint64_t v42 = 0;
    LODWORD(v43) = 0;
    int v44 = 0;
    uint64_t v45 = *(void *)v9;
    do
    {
      if (*(_DWORD *)(v45 + 4 * v42) == v44)
      {
        ++v41[(int)v43];
      }
      else
      {
        uint64_t v43 = (int)v43 + 1;
        ++v44;
        v40[v43] = v42;
        v41[v43] = 1;
      }
      ++v42;
    }
    while (a2 != v42);
  }
  return v9;
}

uint64_t AUMultiChannelAGC::ValidFormat(AUMultiChannelAGC *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  LODWORD(result) = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (a4->mChannelsPerFrame) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUMultiChannelAGC::SupportedNumChannels(AUMultiChannelAGC *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMultiChannelAGC::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

uint64_t AUMultiChannelAGC::SupportsTail(AUMultiChannelAGC *this)
{
  return 1;
}

double AUMultiChannelAGC::GetTailTime(AUMultiChannelAGC *this)
{
  return 0.0;
}

double AUMultiChannelAGC::GetLatency(AUMultiChannelAGC *this)
{
  return 0.0;
}

uint64_t AUMultiChannelAGC::GetParameterValueStrings(AudioUnit *this, int a2, AudioUnitElement inElement, const __CFArray **outData)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956417;
  }
  if (!outData) {
    return 0;
  }
  if (inElement <= 0x40)
  {
    LODWORD(v7) = 8;
    return AudioUnitGetProperty(this[74], 0x10u, 0, inElement, outData, (UInt32 *)&v7);
  }
  if (inElement != 65) {
    return 4294956417;
  }
  long long v7 = xmmword_1E623EAD8;
  CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  uint64_t result = 0;
  *outData = v6;
  return result;
}

uint64_t AUMultiChannelAGC::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 172);
  }
  return result;
}

double AUMultiChannelAGC::GetParameterInfo(AudioUnit *this, int a2, AudioUnitElement inElement, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (!a2)
  {
    if (inElement > 0x40)
    {
      if (inElement == 65)
      {
        buffer->cfNameString = @"Channel Combination Mode";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"Channel Combination Mode", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Indexed;
        double result = 0.0078125;
        *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
        AudioUnitParameterOptions v7 = buffer->flags | 0xC0000000;
        buffer->defaultCFNumberRef Value = 0.0;
        buffer->AudioUnitParameterOptions flags = v7;
      }
    }
    else
    {
      UInt32 ioDataSize = 104;
      if (!AudioUnitGetProperty(this[74], 4u, 0, inElement, buffer, &ioDataSize) && inElement == 50) {
        buffer->maxCFNumberRef Value = 49.0;
      }
    }
  }
  return result;
}

uint64_t AUMultiChannelAGC::ProcessBufferLists(AUMultiChannelAGC *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, float *a5)
{
  uint64_t mNumberBuffers = a3->mNumberBuffers;
  if ((*(unsigned int (**)(AUMultiChannelAGC *))(*(void *)this + 592))(this))
  {
    if (mNumberBuffers)
    {
      p_mData = &a4->mBuffers[0].mData;
      float v12 = &a3->mBuffers[0].mData;
      do
      {
        if (a5) {
          memmove(*p_mData, *v12, 4 * a5);
        }
        p_mData += 2;
        v12 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    return 0;
  }
  else
  {
    char v35 = a4;
    int v14 = *((_DWORD *)this + 172);
    if (v14 == *((_DWORD *)this + 173))
    {
LABEL_17:
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChannelAGC *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(Element, 0x41u);
      if (a5) {
        memmove(*((void **)this + 87), a3->mBuffers[0].mData, 4 * a5);
      }
      unsigned int v21 = Parameter;
      if (mNumberBuffers >= 2)
      {
        uint64_t v22 = mNumberBuffers - 1;
        mBuffers = (const float **)a3[1].mBuffers;
        do
        {
          float v24 = *mBuffers;
          if (v21 == 1)
          {
            vDSP_vadd(*((const float **)this + 87), 1, v24, 1, *((float **)this + 87), 1, a5);
          }
          else if (!v21)
          {
            vDSP_vmax(*((const float **)this + 87), 1, v24, 1, *((float **)this + 87), 1, a5);
          }
          mBuffers += 2;
          --v22;
        }
        while (v22);
      }
      if (v21 == 1)
      {
        *(float *)&__B.Float64 mSampleRate = 1.0 / (float)mNumberBuffers;
        vDSP_vsmul(*((const float **)this + 87), 1, (const float *)&__B, *((float **)this + 87), 1, a5);
      }
      __B.Float64 mSampleRate = *(Float64 *)(ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0) + 80);
      *(_OWORD *)&__B.AudioFormatID mFormatID = xmmword_1BB8727B0;
      *(_OWORD *)&__B.mBytesPerFrame = xmmword_1BB8727C0;
      ausdk::AUBufferList::PrepareBuffer((AUMultiChannelAGC *)((char *)this + 664), &__B, a5);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((AUMultiChannelAGC *)((char *)this + 664));
      float v26 = (AudioBufferList *)BufferList;
      if (a5) {
        memmove(*(void **)(BufferList + 16), *((const void **)this + 87), 4 * a5);
      }
      uint64_t result = AudioUnitProcess(*((AudioUnit *)this + 74), a2, (const AudioTimeStamp *)((char *)this + 600), (UInt32)a5, v26);
      if (!result)
      {
        *((double *)this + 75) = *((double *)this + 75) + (double)a5;
        *(void *)uint64_t v38 = 0;
        *(void *)outCFNumberRef Value = 0;
        AudioUnitParameterValue v37 = 0.0;
        uint64_t result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x3Eu, 0, 0, &outValue[1]);
        if (!result)
        {
          uint64_t result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 1u, 0, 0, outValue);
          if (!result)
          {
            uint64_t result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x1Bu, 0, 0, &v38[1]);
            if (!result)
            {
              uint64_t result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x28u, 0, 0, v38);
              if (!result)
              {
                uint64_t result = AudioUnitGetParameter(*((AudioUnit *)this + 74), 0x29u, 0, 0, &v37);
                if (!result)
                {
                  float v27 = exp(outValue[1] * 0.115129255);
                  float v36 = v27;
                  if (mNumberBuffers)
                  {
                    for (uint64_t i = 0; i != mNumberBuffers; ++i)
                    {
                      mData = (float *)v35->mBuffers[i].mData;
                      vDSP_vsmul((const float *)a3->mBuffers[i].mData, 1, &v36, mData, 1, a5);
                      float v30 = v38[1];
                      if (v37 == 0.0)
                      {
                        AUMultiChannelAGC::ApplyRampedGain((AUMultiChannelAGC *)mData, mData, a5, v38[1] + *((float *)this + 180), v38[1] + outValue[0]);
                        if (v38[0] != 0.0) {
                          AUMultiChannelAGC::SoftClip(mData, a5);
                        }
                      }
                      else
                      {
                        double v31 = exp((float)((float)(v38[1] - v38[1]) / (float)a5) * 0.115129255);
                        if (a5)
                        {
                          float v32 = v31;
                          float v33 = exp(v30 * 0.115129255);
                          uint64_t v34 = a5;
                          do
                          {
                            float v33 = v33 * v32;
                            float *mData = v33 * *mData;
                            ++mData;
                            --v34;
                          }
                          while (v34);
                        }
                      }
                    }
                  }
                  *((AudioUnitParameterValue *)this + 180) = outValue[0];
                  return AUMultiChannelAGC::displayAGCV2Status((AudioUnit *)this);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      unsigned int v15 = 0;
      *((_DWORD *)this + 173) = v14;
      while (1)
      {
        size_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMultiChannelAGC *)((char *)this + 32), 0);
        float v17 = ausdk::AUElement::GetParameter(v16, v15);
        if (v17 > 49.0 && v15 == 50) {
          float v17 = 49.0;
        }
        uint64_t result = AudioUnitSetParameter(*((AudioUnit *)this + 74), v15, 0, 0, v17, 0);
        if (result) {
          break;
        }
        if (++v15 == 65) {
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

uint64_t AUMultiChannelAGC::displayAGCV2Status(AudioUnit *this)
{
  outCFNumberRef Value = 0.0;
  OSStatus Parameter = AudioUnitGetParameter(this[74], 0, 0, 0, &outValue);
  if (!Parameter) {
    OSStatus Parameter = (*((uint64_t (**)(AudioUnit *, void, void, void, void, AudioUnitParameterValue))*this
  }
                 + 19))(this, 0, 0, 0, 0, outValue);
  OSStatus v16 = Parameter;
  outCFNumberRef Value = 0.0;
  OSStatus v3 = AudioUnitGetParameter(this[74], 1u, 0, 0, &outValue);
  if (!v3) {
    OSStatus v3 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 1, 0, 0, 0, outValue);
  }
  OSStatus v15 = v3;
  outCFNumberRef Value = 0.0;
  OSStatus v4 = AudioUnitGetParameter(this[74], 0xEu, 0, 0, &outValue);
  if (!v4) {
    OSStatus v4 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 14, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v5 = AudioUnitGetParameter(this[74], 0x12u, 0, 0, &outValue);
  if (!v5) {
    OSStatus v5 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 18, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v6 = AudioUnitGetParameter(this[74], 0x13u, 0, 0, &outValue);
  if (!v6) {
    OSStatus v6 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 19, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v7 = AudioUnitGetParameter(this[74], 0x23u, 0, 0, &outValue);
  if (!v7) {
    OSStatus v7 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 35, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v8 = AudioUnitGetParameter(this[74], 0x25u, 0, 0, &outValue);
  if (!v8) {
    OSStatus v8 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 37, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v9 = AudioUnitGetParameter(this[74], 0x2Au, 0, 0, &outValue);
  if (!v9) {
    OSStatus v9 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 42, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v10 = AudioUnitGetParameter(this[74], 0x2Du, 0, 0, &outValue);
  if (!v10) {
    OSStatus v10 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 45, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v11 = AudioUnitGetParameter(this[74], 0x3Cu, 0, 0, &outValue);
  if (!v11) {
    OSStatus v11 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 60, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v12 = AudioUnitGetParameter(this[74], 0x3Du, 0, 0, &outValue);
  if (!v12) {
    OSStatus v12 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 61, 0, 0, 0, outValue);
  }
  outCFNumberRef Value = 0.0;
  OSStatus v13 = AudioUnitGetParameter(this[74], 0x40u, 0, 0, &outValue);
  if (!v13) {
    OSStatus v13 = (*((uint64_t (**)(AudioUnit *, uint64_t, void, void, void, AudioUnitParameterValue))*this + 19))(this, 64, 0, 0, 0, outValue);
  }
  return v15 | v16 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13;
}

void AUMultiChannelAGC::ApplyRampedGain(AUMultiChannelAGC *this, float *a2, float *a3, float a4, float a5)
{
  unsigned int v5 = a3;
  double v9 = exp((float)((float)(a5 - a4) / (float)a3) * 0.115129255);
  if (v5)
  {
    float v10 = v9;
    float v11 = exp(a4 * 0.115129255);
    uint64_t v12 = v5;
    do
    {
      float v11 = v11 * v10;
      float v13 = *(float *)this;
      this = (AUMultiChannelAGC *)((char *)this + 4);
      *a2++ = v11 * v13;
      --v12;
    }
    while (v12);
  }
}

float *AUMultiChannelAGC::SoftClip(float *this, float *a2)
{
  if (a2)
  {
    for (uint64_t i = a2; i; --i)
    {
      float v3 = *this;
      if (fabsf(*this) > 0.95)
      {
        if (v3 > 0.95 && v3 < 5.0)
        {
          float v5 = (float)((float)(v3 + -0.95) * 0.0123) + 0.95;
        }
        else if (v3 <= -5.0 || v3 >= -0.95)
        {
          float v5 = 0.9999;
          if (v3 < 5.0)
          {
            float v5 = -0.9999;
            if (v3 > -5.0) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          float v5 = (float)((float)(v3 + 0.95) * 0.0123) + -0.95;
        }
        *this = v5;
      }
LABEL_15:
      ++this;
    }
  }
  return this;
}

uint64_t AUMultiChannelAGC::SetParameter(AudioUnit *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, UInt32 a6)
{
  if (a5 > 49.0 && a2 == 50) {
    float v12 = 49.0;
  }
  else {
    float v12 = a5;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, v12, 0);
  if (a2 > 0x40) {
    return 0;
  }
  uint64_t result = AudioUnitSetParameter(this[74], a2, a3, a4, v12, a6);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t AUMultiChannelAGC::GetProperty(AUMultiChannelAGC *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 == 3700 && !a3)
  {
    uint64_t result = 0;
    int v7 = *((unsigned __int8 *)this + 376);
LABEL_4:
    *a5 = v7;
    return result;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 554);
      goto LABEL_4;
    }
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 552);
      goto LABEL_4;
    }
  }
  return 4294956417;
}

uint64_t AUMultiChannelAGC::GetPropertyInfo(AUMultiChannelAGC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 3700 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D) {
      return 4294956417;
    }
    BOOL v6 = 1;
  }
  else
  {
    BOOL v6 = 0;
  }
  uint64_t result = 0;
  *a6 = v6;
  *a5 = 4;
  return result;
}

uint64_t AUMultiChannelAGC::Reset(AudioUnit *this, AudioUnitScope a2, AudioUnitElement a3)
{
  uint64_t result = AudioUnitReset(this[74], a2, a3);
  if (!result)
  {
    this[75] = 0;
    *((_DWORD *)this + 180) = 0;
    float v5 = this[66];
    AudioUnit v6 = this[67];
    while (v5 != (void *)v6)
    {
      if (*v5) {
        (*(void (**)(void))(*(void *)*v5 + 16))(*v5);
      }
      ++v5;
    }
    return 0;
  }
  return result;
}

OpaqueAudioComponentInstance *AUMultiChannelAGC::Cleanup(AUMultiChannelAGC *this)
{
  uint64_t result = (OpaqueAudioComponentInstance *)*((void *)this + 74);
  if (result) {
    return (OpaqueAudioComponentInstance *)AudioUnitUninitialize(result);
  }
  return result;
}

double AUMultiChannelAGC::Initialize(AUMultiChannelAGC *this)
{
  if (!ausdk::AUEffectBase::Initialize(this))
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 80), 0);
    uint64_t v4 = ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0);
    if (*(_DWORD *)(Element + 88) == 1819304813)
    {
      double result = *(double *)(Element + 80);
      if (result == *(double *)(v4 + 80))
      {
        unint64_t v5 = *((unsigned int *)this + 84);
        LODWORD(inData) = 0;
        std::vector<float>::assign((char **)this + 87, v5, &inData);
        v7.Float64 mSampleRate = *(Float64 *)(Element + 80);
        *(_OWORD *)&v7.AudioFormatID mFormatID = xmmword_1BB8727B0;
        *(_OWORD *)&v7.mBytesPerFrame = xmmword_1BB8727C0;
        ausdk::AUBufferList::Allocate((AUMultiChannelAGC *)((char *)this + 664), &v7, v5);
        AudioUnit v6 = (OpaqueAudioComponentInstance *)*((void *)this + 74);
        if (!v6 || !AudioUnitUninitialize(v6))
        {
          uint64_t inData = *(void *)(ausdk::AUScope::SafeGetElement((AUMultiChannelAGC *)((char *)this + 128), 0) + 80);
          long long v10 = xmmword_1BB8727B0;
          long long v11 = xmmword_1BB8727C0;
          if (!AudioUnitSetProperty(*((AudioUnit *)this + 74), 8u, 1u, 0, &inData, 0x28u)
            && !AudioUnitSetProperty(*((AudioUnit *)this + 74), 8u, 2u, 0, &inData, 0x28u))
          {
            int v8 = *((_DWORD *)this + 84);
            if (!AudioUnitSetProperty(*((AudioUnit *)this + 74), 0xEu, 0, 0, &v8, 4u)
              && !AudioUnitInitialize(*((AudioUnit *)this + 74)))
            {
              double result = 0.0;
              *(_OWORD *)((char *)this + 632) = 0u;
              *(_OWORD *)((char *)this + 648) = 0u;
              *(_OWORD *)((char *)this + 600) = 0u;
              *(_OWORD *)((char *)this + 616) = 0u;
              *((_DWORD *)this + 164) = 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void AUMultiChannelAGC::~AUMultiChannelAGC(AUMultiChannelAGC *this)
{
  AUMultiChannelAGC::~AUMultiChannelAGC(this);

  JUMPOUT(0x1C185D370);
}

{
  OpaqueAudioComponentInstance *v2;
  OpaqueAudioComponentInstance *v3;
  void *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1F14B4B00;
  uint64_t v2 = (OpaqueAudioComponentInstance *)*((void *)this + 74);
  if (v2)
  {
    AudioUnitUninitialize(v2);
    float v3 = (OpaqueAudioComponentInstance *)*((void *)this + 74);
    if (v3)
    {
      if (!AudioComponentInstanceDispose(v3)) {
        *((void *)this + 74) = 0;
      }
    }
  }
  uint64_t v4 = (void *)*((void *)this + 87);
  if (v4)
  {
    *((void *)this + 88) = v4;
    operator delete(v4);
  }
  if (*((void *)this + 84))
  {
    (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
    *((void *)this + 84) = 0;
  }
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 166) = 0;
  *(void *)this = &unk_1F14C8258;
  unint64_t v5 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v5);

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUBiquad::ChangeStreamFormat(AUBiquad *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mSampleRate != a5->mSampleRate) {
    *((unsigned char *)this + 664) = 1;
  }
  return 0;
}

uint64_t AUBiquad::ValidFormat(AUBiquad *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  BOOL v10 = 0;
  long long v5 = *(_OWORD *)&a4->mBytesPerPacket;
  v8[0] = *(_OWORD *)&a4->mSampleRate;
  v8[1] = v5;
  uint64_t v9 = *(void *)&a4->mBitsPerChannel;
  int v11 = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v11, &v10) && v11 == 3
    || (int v11 = 0, CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v11, &v10)) && v11 == 2)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    uint64_t result = mChannelsPerFrame - 1 < 2;
  }
  else
  {
    uint64_t result = 0;
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  }
  if (mChannelsPerFrame == 2)
  {
    if (v10) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUBiquad::SupportedNumChannels(AUBiquad *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUBiquad::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

uint64_t AUBiquad::SupportsTail(AUBiquad *this)
{
  return 1;
}

double AUBiquad::GetTailTime(AUBiquad *this)
{
  return 0.02;
}

double AUBiquad::GetLatency(AUBiquad *this)
{
  return 0.0;
}

uint64_t AUBiquad::GetParameterValueStrings(AUBiquad *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294956417;
  if (!a2 && a3 == 1651602544)
  {
    if (a4)
    {
      long long v7 = xmmword_1E623EAE8;
      int v8 = @"Parametric";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUBiquad::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  *((unsigned char *)this + 664) = 1;
  return result;
}

uint64_t AUBiquad::GetParameterInfo(AUBiquad *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  uint64_t result = 4294956418;
  if (a3 > 1718773104)
  {
    if (a3 == 1718773105)
    {
      buffer->cfNameString = @"frequency";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"frequency", buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 0x40A0000000000008;
      *(double *)&int32x2_t v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 128), 0) + 80)
                     * 0.49000001;
      float v9 = *(double *)v8.i32;
      v8.i32[0] = 1148846080;
      int32x2_t v7 = vdup_lane_s32(v8, 0);
      *(float *)v7.i32 = v9;
    }
    else
    {
      if (a3 != 1734437230) {
        return result;
      }
      buffer->cfNameString = @"gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"gain", buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 0xC2C000000000000DLL;
      int32x2_t v7 = (int32x2_t)1103101952;
    }
  }
  else if (a3 == 1650751348)
  {
    buffer->cfNameString = @"bandwidth";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(@"bandwidth", buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 0x3A83126F00000015;
    int32x2_t v7 = (int32x2_t)0x3F80000040E00000;
  }
  else
  {
    if (a3 != 1651602544) {
      return result;
    }
    buffer->cfNameString = @"type";
    buffer->AudioUnitParameterOptions flags = 0x8000000;
    CFStringGetCString(@"type", buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 1;
    int32x2_t v7 = (int32x2_t)0x4000000040000000;
  }
  uint64_t result = 0;
  *(int32x2_t *)&buffer->maxCFNumberRef Value = v7;
  buffer->flags |= 0xC0000000;
  return result;
}

uint64_t AUBiquad::ProcessBufferLists(int32x4_t *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if (this[41].i8[8])
  {
    this[41].i8[8] = 0;
    float v9 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 80);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[2], 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 0x66726571u);
    float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[2], 0);
    float v13 = ausdk::AUElement::GetParameter(v12, 0x62717470u);
    if (v9 <= 0.0) {
      goto LABEL_7;
    }
    if (Parameter <= 0.0 || Parameter > (float)(v9 * 0.49)) {
      goto LABEL_7;
    }
    unsigned int v20 = v13;
    double v21 = Parameter * 6.28318531 / v9;
    if (v13 == 2)
    {
      float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[2], 0);
      float v28 = ausdk::AUElement::GetParameter(v27, 0x6761696Eu);
      uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[2], 0);
      float v30 = ausdk::AUElement::GetParameter(v29, 0x62647774u);
      __double2 v31 = __sincos_stret(v21);
      double v32 = sqrt(__exp10(v28 / 20.0));
      long double v33 = v31.__sinval * sinh(v21 * (v30 * 0.34657359) / v31.__sinval);
      long double v34 = 1.0 / (v33 / v32 + 1.0);
      v35.f64[0] = (v33 * v32 + 1.0) * v34;
      v36.f64[0] = v31.__cosval * -2.0 * v34;
      v35.f64[1] = v36.f64[0];
      v36.f64[1] = (1.0 - v33 / v32) * v34;
      this[37] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_f64(v36, (float64x2_t)vdupq_n_s64(0xC170000000000000))), (int32x4_t)vcvtq_n_s64_f64(v35, 0x18uLL));
      unsigned int v15 = vcvtd_n_s64_f64((1.0 - v33 * v32) * v34, 0x18uLL);
      goto LABEL_8;
    }
    if (v20 == 1)
    {
      long double v37 = tan(v21 * 0.5);
      long double v38 = v37 * v37;
      long double v39 = v37 * 1.41421356;
      double v25 = 1.0 / (v38 + v39 + 1.0);
      v40.f64[0] = v38 + -1.0 + v38 + -1.0;
      v40.f64[1] = v38 + 1.0 - v39;
      *(int32x2_t *)this[37].i8 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(vmulq_n_f64(v40, v25), (float64x2_t)vdupq_n_s64(0xC170000000000000))));
      float64x2_t v26 = (float64x2_t)xmmword_1BB87B690;
    }
    else
    {
      if (v20)
      {
LABEL_7:
        unsigned int v15 = 0;
        this[37] = (int32x4_t)xmmword_1BB87B680;
LABEL_8:
        this[38].i32[0] = v15;
        goto LABEL_9;
      }
      long double v22 = 1.0 / tan(v21 * 0.5);
      long double v23 = v22 * v22;
      long double v24 = v22 * 1.41421356;
      double v25 = 1.0 / (v23 + v24 + 1.0);
      this[37].i32[0] = (int)((1.0 - v23 + 1.0 - v23) * v25 * -16777216.0);
      this[37].i32[1] = (int)((v23 + 1.0 - v24) * v25 * -16777216.0);
      float64x2_t v26 = (float64x2_t)xmmword_1BB87B6A0;
    }
    int32x2_t v41 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(v26, v25)));
    this[37].u64[1] = (unint64_t)v41;
    unsigned int v15 = v41.i32[0];
    goto LABEL_8;
  }
LABEL_9:
  mData = a3->mBuffers[0].mData;
  float v17 = a4->mBuffers[0].mData;
  if ((*(uint64_t (**)(int32x4_t *, unsigned int *))(this->i64[0] + 592))(this, a2))
  {
    if (v17 != mData)
    {
      uint64_t v18 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0);
      memcpy(v17, mData, (*(_DWORD *)(v18 + 104) * a5));
    }
  }
  else
  {
    ((void (*)(void *, void *, uint64_t, int32x4_t *))this[41].i64[0])(mData, v17, a5, (int32x4_t *)this[37].i8);
  }
  return 0;
}

uint64_t AUBiquad::SetParameter(AUBiquad *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  *((unsigned char *)this + 664) = 1;
  return 0;
}

uint64_t AUBiquad::Reset(AUBiquad *this)
{
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_OWORD *)((char *)this + 612) = 0u;
  uint64_t v1 = (void *)*((void *)this + 66);
  uint64_t v2 = (void *)*((void *)this + 67);
  while (v1 != v2)
  {
    if (*v1) {
      (*(void (**)(void))(*(void *)*v1 + 16))(*v1);
    }
    ++v1;
  }
  return 0;
}

uint64_t AUBiquad::Initialize(AUBiquad *this)
{
  uint64_t result = ausdk::AUEffectBase::Initialize(this);
  if (!result)
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 80), 0);
    long long v4 = *(_OWORD *)(Element + 96);
    v12[0] = *(_OWORD *)(Element + 80);
    v12[1] = v4;
    uint64_t v13 = *(void *)(Element + 112);
    uint64_t v5 = ausdk::AUScope::SafeGetElement((AUBiquad *)((char *)this + 128), 0);
    long long v6 = *(_OWORD *)(v5 + 96);
    *(_OWORD *)&v11.Float64 mSampleRate = *(_OWORD *)(v5 + 80);
    *(_OWORD *)&v11.mBytesPerPacket = v6;
    *(void *)&v11.mBitsPerChannel = *(void *)(v5 + 112);
    if (CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v12, &v11, v7)
      && (uint64_t ProcessProcForFormats = Biquad_8dot24::CreateProcessProcForFormats((Biquad_8dot24 *)v12, (const CAStreamBasicDescription *)&v11, v8), *((void *)this + 81) = ProcessProcForFormats, *((void *)this + 82) = v10, ProcessProcForFormats == 1))
    {
      uint64_t result = 0;
      *(_OWORD *)((char *)this + 628) = 0u;
      *(_OWORD *)((char *)this + 612) = 0u;
    }
    else
    {
      return 4294956428;
    }
  }
  return result;
}

void AUBiquad::~AUBiquad(AUBiquad *this)
{
  *(void *)this = &unk_1F14C8258;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14C8258;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUClipDetector::GetScopeExtended(AUClipDetector *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 528;
  }
  else {
    return 0;
  }
}

uint64_t AUClipDetector::ValidFormat(AUClipDetector *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  AudioFormatFlags mFormatFlags = a4->mFormatFlags;
  UInt32 mBytesPerPacket = a4->mBytesPerPacket;
  UInt32 mBytesPerFrame = a4->mBytesPerFrame;
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  UInt32 mBitsPerChannel = a4->mBitsPerChannel;
  int v9 = mFormatFlags & 0x20;
  BOOL v10 = a4->mFormatID == 1819304813 && a4->mFramesPerPacket == 1;
  if (!v10 || mBytesPerFrame != mBytesPerPacket || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0) {
    goto LABEL_32;
  }
  if ((mFormatFlags & 0x20) == 0)
  {
    BOOL v10 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame;
    mBytesPerPacket /= mChannelsPerFrame;
    if (!v10)
    {
      int v9 = 0;
LABEL_32:
      BOOL v19 = 0;
      int v20 = 0;
      goto LABEL_33;
    }
  }
  int v14 = 8 * mBytesPerPacket;
  BOOL v15 = mBytesPerPacket == 4 && (mFormatFlags & 0x1F84) == 0;
  if (v14 != mBitsPerChannel || (mFormatFlags & 1) == 0)
  {
    BOOL v15 = 0;
    BOOL v17 = 1;
  }
  else
  {
    BOOL v17 = (mFormatFlags & 0x1F84) == 0;
  }
  BOOL v18 = (mFormatFlags & 2) == 0;
  BOOL v19 = (mFormatFlags & 2) == 0 && v15;
  int v20 = !v18 || v17;
LABEL_33:
  unsigned int v21 = v19 & v20;
  if (v9) {
    return v21;
  }
  else {
    return 0;
  }
}

uint64_t AUClipDetector::SupportedNumChannels(AUClipDetector *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUClipDetector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUClipDetector::StreamFormatWritable(AUClipDetector *this, unsigned int a2, int a3)
{
  return (a3 | *((unsigned __int8 *)this + 17)) == 0;
}

uint64_t AUClipDetector::SupportsTail(AUClipDetector *this)
{
  return 1;
}

double AUClipDetector::GetTailTime(AUClipDetector *this)
{
  return 0.0;
}

double AUClipDetector::GetLatency(AUClipDetector *this)
{
  return 0.0;
}

uint64_t AUClipDetector::GetParameterInfo(AUClipDetector *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2 != 4) {
    return 4294956430;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a3 > 2) {
    return 4294956418;
  }
  CFStringRef v5 = off_1E623EB20[a3];
  AudioUnitParameterUnit v6 = dword_1BB8A8474[a3];
  AudioUnitParameterValue v7 = flt_1BB8A8480[a3];
  AudioUnitParameterValue v8 = flt_1BB8A848C[a3];
  AudioUnitParameterValue v9 = flt_1BB8A8498[a3];
  int v10 = dword_1BB8A84A4[a3];
  buffer->cfNameString = v5;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v6;
  buffer->minCFNumberRef Value = v7;
  buffer->maxCFNumberRef Value = v8;
  buffer->defaultCFNumberRef Value = v9;
  buffer->flags |= v10;
  return result;
}

uint64_t AUClipDetector::GetParameterList(AUClipDetector *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    *a4 = 3;
    uint64_t result = 0;
    if (a3)
    {
      *(void *)a3 = 0x100000000;
      a3[2] = 2;
    }
  }
  else
  {
    *a4 = 0;
    return 4294956430;
  }
  return result;
}

uint64_t AUClipDetector::ProcessMultipleBufferLists(AUClipDetector *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) >= a3)
  {
    if (a4 == 1)
    {
      if (a6 == 1)
      {
        AudioStreamBasicDescription v11 = (int *)*a5;
        (*(void (**)(float *__return_ptr, AUClipDetector *, uint64_t, void))(*(void *)this + 392))(&v35, this, 1, 0);
        if ((v37[0] & 0x20) != 0) {
          int v12 = v40;
        }
        else {
          int v12 = 1;
        }
        if (*v11 == v12)
        {
          uint64_t v13 = (unsigned int *)*a7;
          (*(void (**)(float *__return_ptr, AUClipDetector *, uint64_t, void))(*(void *)this + 392))(&v35, this, 2, 0);
          int v14 = *v13;
          if ((v37[0] & 0x20) != 0) {
            int v15 = v40;
          }
          else {
            int v15 = 1;
          }
          if (v14 == v15)
          {
            if (*((unsigned char *)this + 576))
            {
              if (v14)
              {
                unint64_t v16 = 0;
                BOOL v17 = (void **)(v13 + 4);
                do
                {
                  bzero(*v17, *((unsigned int *)v17 - 1));
                  AUClipDetector::SetParameter((uint64_t)this, 1u, v16, 0.0);
                  AUClipDetector::SetParameter((uint64_t)this, 2u, v16++, -96.0);
                  v17 += 2;
                }
                while (v16 < *v13);
              }
            }
            else if (v14)
            {
              unint64_t v18 = 0;
              uint64_t v19 = 4;
              do
              {
                int v20 = *(const float **)&v11[v19];
                unsigned int v21 = *(void **)&v13[v19];
                uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUClipDetector *)((char *)this + 528), v18);
                float Parameter = ausdk::AUElement::GetParameter(Element, 0);
                float v35 = 0.0;
                vDSP_maxmgv(v20, 1, &v35, a3);
                if (v35 <= Parameter) {
                  bzero(v21, 4 * a3);
                }
                else {
                  memcpy(v21, v20, 4 * a3);
                }
                if (v35 <= Parameter) {
                  float v24 = 0.0;
                }
                else {
                  float v24 = 1.0;
                }
                AUClipDetector::SetParameter((uint64_t)this, 1u, v18, v24);
                float v25 = log10f(v35 / Parameter);
                AUClipDetector::SetParameter((uint64_t)this, 2u, v18++, v25 * 20.0);
                v19 += 4;
              }
              while (v18 < *v13);
            }
            return 0;
          }
          if (getAUClipDetectorLog(void)::onceToken != -1) {
            dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
          }
          uint64_t v31 = getAUClipDetectorLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            return 4294956428;
          }
          int v33 = *v13;
          float v35 = 3.8522e-34;
          float64x2_t v36 = this;
          v37[0] = 1024;
          *(_DWORD *)&v37[1] = v33;
          __int16 v38 = 1024;
          int v39 = v15;
          uint64_t v29 = "[%p] cannot process %u output channel streams (expected channel stream count is %u)";
        }
        else
        {
          if (getAUClipDetectorLog(void)::onceToken != -1) {
            dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
          }
          uint64_t v31 = getAUClipDetectorLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
            return 4294956428;
          }
          int v32 = *v11;
          float v35 = 3.8522e-34;
          float64x2_t v36 = this;
          v37[0] = 1024;
          *(_DWORD *)&v37[1] = v32;
          __int16 v38 = 1024;
          int v39 = v12;
          uint64_t v29 = "[%p] cannot process %u input channel streams (expected channel stream count is %u)";
        }
      }
      else
      {
        if (getAUClipDetectorLog(void)::onceToken != -1) {
          dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
        }
        uint64_t v31 = getAUClipDetectorLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
          return 4294956428;
        }
        float v35 = 3.8522e-34;
        float64x2_t v36 = this;
        v37[0] = 1024;
        *(_DWORD *)&v37[1] = a6;
        __int16 v38 = 1024;
        int v39 = 1;
        uint64_t v29 = "[%p] cannot process %u output busses (expected output bus count is %u)";
      }
      float v30 = v31;
    }
    else
    {
      if (getAUClipDetectorLog(void)::onceToken != -1) {
        dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
      }
      uint64_t v28 = getAUClipDetectorLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return 4294956428;
      }
      float v35 = 3.8522e-34;
      float64x2_t v36 = this;
      v37[0] = 1024;
      *(_DWORD *)&v37[1] = a3;
      __int16 v38 = 1024;
      int v39 = 1;
      uint64_t v29 = "[%p] cannot process %u input busses (expected input bus count is %u)";
      float v30 = v28;
    }
    _os_log_error_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v35, 0x18u);
    return 4294956428;
  }
  if (getAUClipDetectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
  }
  float v27 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    int v34 = *((_DWORD *)this + 84);
    float v35 = 3.8522e-34;
    float64x2_t v36 = this;
    v37[0] = 1024;
    *(_DWORD *)&v37[1] = a3;
    __int16 v38 = 1024;
    int v39 = v34;
    _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "[%p] cannot process %u frames (maximum frame size is %u)", (uint8_t *)&v35, 0x18u);
  }
  return 4294956422;
}

void sub_1BB5830F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AUClipDetector::SetParameter(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 528), a3);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
}

os_log_t ___Z20getAUClipDetectorLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AUClipDetector");
  getAUClipDetectorLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t AUClipDetector::CanScheduleParameters(AUClipDetector *this)
{
  return 0;
}

uint64_t AUClipDetector::SetProperty(AUClipDetector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 376) = *a5 != 0;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 576) = *a5 != 0;
  }
  return result;
}

uint64_t AUClipDetector::GetProperty(AUClipDetector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    AudioUnitParameterUnit v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    AudioUnitParameterUnit v6 = (unsigned __int8 *)this + 576;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUClipDetector::GetPropertyInfo(AUClipDetector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    char v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    char v7 = *((unsigned char *)this + 17) ^ 1;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUClipDetector::Initialize(AUClipDetector *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (getAUClipDetectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
  }
  uint64_t v2 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioUnitParameterValue v8 = 134217984;
    *(void *)&v8[4] = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] initialize", v8, 0xCu);
  }
  (*(void (**)(unsigned char *__return_ptr, AUClipDetector *, uint64_t, void))(*(void *)this + 392))(v8, this, 1, 0);
  double v3 = *(double *)v8;
  int v4 = v9;
  (*(void (**)(unsigned char *__return_ptr, AUClipDetector *, uint64_t, void))(*(void *)this + 392))(v8, this, 2, 0);
  if (v3 != *(double *)v8)
  {
    if (getAUClipDetectorLog(void)::onceToken != -1) {
      dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
    }
    CFStringRef v5 = getAUClipDetectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return 4294956421;
    }
    *(_DWORD *)AudioUnitParameterValue v8 = 134217984;
    *(void *)&v8[4] = this;
    AudioUnitParameterUnit v6 = "[%p] failed to initialize - I/O sample rates must be equal";
    goto LABEL_16;
  }
  if (v4 == v9)
  {
    (*(void (**)(AUClipDetector *, void, void))(*(void *)this + 72))(this, 0, 0);
    return 0;
  }
  if (getAUClipDetectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
  }
  CFStringRef v5 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioUnitParameterValue v8 = 134217984;
    *(void *)&v8[4] = this;
    AudioUnitParameterUnit v6 = "[%p] failed to initialize - I/O channel counts must be equal";
LABEL_16:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, v8, 0xCu);
  }
  return 4294956421;
}

uint64_t AUClipDetector::CreateExtendedElements(AUClipDetector *this)
{
  return ausdk::AUScope::Initialize((AUClipDetector *)((char *)this + 528), this, 4, 1);
}

void AUClipDetector::~AUClipDetector(AUClipDetector *this)
{
  AUClipDetector::~AUClipDetector(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  unsigned char v3[24];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B4FD0;
  if (getAUClipDetectorLog(void)::onceToken != -1) {
    dispatch_once(&getAUClipDetectorLog(void)::onceToken, &__block_literal_global_13839);
  }
  uint64_t v2 = getAUClipDetectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUClipDetectorLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)double v3 = 134217984;
    *(void *)&v3[4] = this;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "[%p] destroyed", v3, 0xCu);
  }
  *(void *)double v3 = (char *)this + 544;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUClipDetector::SetDefaultParameters(AUClipDetector *this)
{
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v3 = *((void *)this + 71);
    uint64_t result = v3
           ? (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3)
           : (*((void *)this + 69) - *((void *)this + 68)) >> 3;
    if (i >= result) {
      break;
    }
    AUClipDetector::SetParameter((uint64_t)this, 0, i, 1.0);
    AUClipDetector::SetParameter((uint64_t)this, 1u, i, 0.0);
    AUClipDetector::SetParameter((uint64_t)this, 2u, i, -96.0);
  }
  return result;
}

uint64_t AUClipDetector::AUClipDetector(OpaqueAudioComponentInstance *)::$_0::__invoke<OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int>(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 8)
  {
    uint64_t v3 = (void *)result;
    int v4 = (ausdk::AUScope *)(result + 80);
    unsigned int v5 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(result + 80), 0) + 108);
    uint64_t result = ausdk::AUScope::SafeGetElement(v4, 0);
    if (v5 == *(_DWORD *)(result + 108))
    {
      uint64_t v6 = v3[71];
      uint64_t result = v6 ? (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6) : (v3[69] - v3[68]) >> 3;
      if (v5 != result)
      {
        ausdk::AUScope::SetNumberOfElements((ausdk::AUScope *)(v3 + 66), v5);
        if (v5)
        {
          for (unsigned int i = 0; v5 != i; ++i)
          {
            std::to_string(&v16, i);
            AudioUnitParameterValue v8 = std::string::insert(&v16, 0, "Ch ", 3uLL);
            long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
            int64_t v18 = v8->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v9;
            v8->__r_.__value_.__l.__size_ = 0;
            v8->__r_.__value_.__r.__words[2] = 0;
            v8->__r_.__value_.__r.__words[0] = 0;
            if (v18 >= 0) {
              uint64_t v10 = __p;
            }
            else {
              uint64_t v10 = (void **)__p[0];
            }
            if (v10)
            {
              if (v18 >= 0) {
                CFIndex v11 = HIBYTE(v18);
              }
              else {
                CFIndex v11 = (CFIndex)__p[1];
              }
              CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
              if (!v12)
              {
                exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
              }
              if ((v18 & 0x8000000000000000) == 0) {
                goto LABEL_19;
              }
            }
            else
            {
              CFStringRef v12 = 0;
              if ((v18 & 0x8000000000000000) == 0) {
                goto LABEL_19;
              }
            }
            operator delete(__p[0]);
LABEL_19:
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
            uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(v3 + 66), i);
            ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v12);
            uint64_t v14 = ausdk::AUScope::GetElement((ausdk::AUScope *)(v3 + 66), i);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 40))(v14, 3);
            if (v12) {
              CFRelease(v12);
            }
          }
        }
        return AUClipDetector::SetDefaultParameters((AUClipDetector *)v3);
      }
    }
  }
  return result;
}

void sub_1BB583908(void *a1)
{
}

void AUSM::TuningManager::PopulateReservedGlobalAPACPropertyList(AUSM::TuningManager *this)
{
  uint64_t v1 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)this + 40, vcvtps_u32_f32(6.0 / *((float *)this + 18)));
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xAu, 10);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0x1Au, 26);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0x3EDu, 1005);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xCC3u, 3267);
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xC1Cu, 3100);

  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>((uint64_t)v1, 0xC24u, 3108);
}

void AUSM::TuningManager::ResizeBuffers(AUSM::TuningManager *this, unsigned int a2)
{
  unsigned int v5 = (uint64_t *)((char *)this + 120);
  uint64_t v6 = *((void *)this + 18);
  if (v6 < a2)
  {
    char v7 = (void *)((char *)this + 136);
    unint64_t v8 = *((void *)this + 16);
    uint64_t v9 = *((void *)this + 18);
    while (1)
    {
      if (v8)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v6;
          if (v8 <= v6) {
            unint64_t v2 = v6 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v6;
        }
        CFIndex v11 = *(uint64_t ***)(*v5 + 8 * v2);
        if (v11)
        {
          for (unsigned int i = *v11; i; unsigned int i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v6)
            {
              if (*((_DWORD *)i + 4) == v6) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v8) {
                  v13 %= v8;
                }
              }
              else
              {
                v13 &= v8 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x18uLL);
      void *v14 = 0;
      v14[1] = v6;
      *((_DWORD *)v14 + 4) = v6;
      *((_DWORD *)v14 + 5) = 1112014848;
      float v15 = (float)(unint64_t)(v9 + 1);
      float v16 = *((float *)this + 38);
      if (!v8 || (float)(v16 * (float)v8) < v15)
      {
        BOOL v17 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v8);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)v5, v20);
        unint64_t v8 = *((void *)this + 16);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v6) {
            unint64_t v2 = v6 % v8;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v6;
        }
      }
      uint64_t v21 = *v5;
      long double v22 = *(void **)(*v5 + 8 * v2);
      if (v22)
      {
        void *v14 = *v22;
      }
      else
      {
        void *v14 = *v7;
        void *v7 = v14;
        *(void *)(v21 + 8 * v2) = v7;
        if (!*v14) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(*v14 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v23 >= v8) {
            v23 %= v8;
          }
        }
        else
        {
          v23 &= v8 - 1;
        }
        long double v22 = (void *)(*v5 + 8 * v23);
      }
      *long double v22 = v14;
LABEL_40:
      uint64_t v9 = *((void *)this + 18) + 1;
      *((void *)this + 18) = v9;
LABEL_41:
      LODWORD(v6) = v6 + 1;
      if (v6 == a2) {
        return;
      }
    }
  }
  if (v6 > a2)
  {
    float v24 = (char *)this + 136;
    uint64_t v25 = *((void *)this + 18);
    unint64_t v26 = a2;
    do
    {
      int8x8_t v27 = *(int8x8_t *)((char *)this + 128);
      if (v27)
      {
        uint8x8_t v28 = (uint8x8_t)vcnt_s8(v27);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          unint64_t v29 = v26;
          if (*(void *)&v27 <= v26) {
            unint64_t v29 = v26 % *(void *)&v27;
          }
        }
        else
        {
          unint64_t v29 = (*(void *)&v27 + 0xFFFFFFFFLL) & v26;
        }
        uint64_t v30 = *v5;
        uint64_t v31 = *(char ***)(*v5 + 8 * v29);
        if (v31)
        {
          int v32 = *v31;
          if (*v31)
          {
            uint64_t v33 = *(void *)&v27 - 1;
            do
            {
              unint64_t v34 = *((void *)v32 + 1);
              if (v34 == v26)
              {
                if (v26 == *((_DWORD *)v32 + 4))
                {
                  if (v28.u32[0] > 1uLL)
                  {
                    unint64_t v35 = v26;
                    if (v26 >= *(void *)&v27) {
                      unint64_t v35 = v26 % *(void *)&v27;
                    }
                  }
                  else
                  {
                    unint64_t v35 = v33 & v26;
                  }
                  float64x2_t v36 = *(char **)(v30 + 8 * v35);
                  do
                  {
                    long double v37 = v36;
                    float64x2_t v36 = *(char **)v36;
                  }
                  while (v36 != v32);
                  if (v37 == v24) {
                    goto LABEL_80;
                  }
                  unint64_t v38 = *((void *)v37 + 1);
                  if (v28.u32[0] > 1uLL)
                  {
                    if (v38 >= *(void *)&v27) {
                      v38 %= *(void *)&v27;
                    }
                  }
                  else
                  {
                    v38 &= v33;
                  }
                  if (v38 != v35)
                  {
LABEL_80:
                    if (!*(void *)v32) {
                      goto LABEL_81;
                    }
                    unint64_t v39 = *(void *)(*(void *)v32 + 8);
                    if (v28.u32[0] > 1uLL)
                    {
                      if (v39 >= *(void *)&v27) {
                        v39 %= *(void *)&v27;
                      }
                    }
                    else
                    {
                      v39 &= v33;
                    }
                    if (v39 != v35) {
LABEL_81:
                    }
                      *(void *)(v30 + 8 * v35) = 0;
                  }
                  uint64_t v40 = *(void *)v32;
                  if (*(void *)v32)
                  {
                    unint64_t v41 = *(void *)(v40 + 8);
                    if (v28.u32[0] > 1uLL)
                    {
                      if (v41 >= *(void *)&v27) {
                        v41 %= *(void *)&v27;
                      }
                    }
                    else
                    {
                      v41 &= v33;
                    }
                    if (v41 != v35)
                    {
                      *(void *)(*v5 + 8 * v41) = v37;
                      uint64_t v40 = *(void *)v32;
                    }
                  }
                  *(void *)long double v37 = v40;
                  --*((void *)this + 18);
                  operator delete(v32);
                  break;
                }
              }
              else
              {
                if (v28.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&v27) {
                    v34 %= *(void *)&v27;
                  }
                }
                else
                {
                  v34 &= v33;
                }
                if (v34 != v29) {
                  break;
                }
              }
              int v32 = *(char **)v32;
            }
            while (v32);
          }
        }
      }
      ++v26;
    }
    while (v26 != v25);
  }
}

void sub_1BB583DBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,BOOL>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  CFStringRef v12 = operator new(0x18uLL);
  *CFStringRef v12 = 0;
  v12[1] = v6;
  _OWORD v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *CFStringRef v12 = *v20;
LABEL_38:
    *size_t v20 = v12;
    goto LABEL_39;
  }
  *CFStringRef v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BB583FC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AUSM::TuningManager::SetPostProceReverbBlend(AUSM::TuningManager *this, int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((a2 - 2) < 2)
  {
LABEL_4:
    if (!*((_DWORD *)this + 40) && (unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)this + 3446)), (v5 & 1) != 0))
    {
      int v10 = 0;
      float v7 = 0.0;
    }
    else
    {
      uint64_t v6 = *(void *)(*(void *)this + 544);
      float v7 = -1.0;
      if (v6)
      {
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v6 + 97));
        if (v8)
        {
          int v10 = 1;
        }
        else
        {
          unsigned __int8 v9 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)this + 544) + 96));
          int v10 = v9 & 1;
        }
      }
      else
      {
        int v10 = 0;
      }
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    int v10 = 0;
    float v7 = 50.0;
  }
  else
  {
    if (!a2) {
      goto LABEL_4;
    }
    int v10 = 0;
    float v7 = -1.0;
  }
LABEL_14:
  if (a3 == -1)
  {
    uint64_t v12 = *(void *)this;
    uint64_t v13 = *(void *)(*(void *)this + 120);
    if (v13)
    {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
      if (!v11) {
        return;
      }
    }
    else
    {
      uint64_t v11 = (*(void *)(v12 + 104) - *(void *)(v12 + 96)) >> 3;
      if (!v11) {
        return;
      }
    }
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v11) = a3 + 1;
  }
  unint64_t v14 = *((void *)this + 18);
  BOOL v15 = (char *)this + 8;
  while (1)
  {
    int v24 = v3;
    if (v14 <= v3) {
      break;
    }
    if (v7 < 0.0) {
      int v16 = 1;
    }
    else {
      int v16 = v10;
    }
    if (v16 == 1) {
      float v7 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 120, v3, &v24)+ 5);
    }
    float v23 = 0.0;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, float *))(**(void **)this + 144))(*(void *)this, 35, 1, v3, &v23))
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v17 = (id)getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      unint64_t v21 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        unint64_t v21 = *(char **)v15;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      unint64_t v26 = v21;
      __int16 v27 = 2080;
      uint8x8_t v28 = "SetPostProceReverbBlend";
      __int16 v29 = 1024;
      int v30 = v3;
      uint64_t v19 = v17;
      size_t v20 = "[%s|%s] Could not get current post-processing reverb blend for input bus %u";
      goto LABEL_46;
    }
    if (vabds_f32(v23, v7) <= 0.00000011921
      || !(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, void, float))(**(void **)this + 152))(*(void *)this, 35, 2001, v3, 0, v7))
    {
      goto LABEL_41;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v17 = (id)getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      size_t v18 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        size_t v18 = *(char **)v15;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      unint64_t v26 = v18;
      __int16 v27 = 2080;
      uint8x8_t v28 = "SetPostProceReverbBlend";
      __int16 v29 = 1024;
      int v30 = v3;
      uint64_t v19 = v17;
      size_t v20 = "[%s|%s] Could not set reverb blend for input bus %u";
LABEL_46:
      _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x1Cu);
    }
LABEL_32:

LABEL_41:
    uint64_t v3 = (v3 + 1);
    if (v11 == v3) {
      return;
    }
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  long double v22 = (id)getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)this + 31) < 0) {
      BOOL v15 = *(char **)v15;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    unint64_t v26 = v15;
    __int16 v27 = 2080;
    uint8x8_t v28 = "SetPostProceReverbBlend";
    __int16 v29 = 1024;
    int v30 = v14;
    _os_log_error_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "[%s|%s] Buffer size_t size = %u is not large enough.", buf, 0x1Cu);
  }
}

uint64_t AUSM::TuningManager::SetPropertyFromNSObject(AUSM::TuningManager *this, uint64_t a2, uint64_t a3, uint64_t a4, objc_object *a5)
{
  unsigned __int8 v9 = a5;
  uint64_t v19 = v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, objc_object **, uint64_t))(**(void **)this
                                                                                                  + 96))(*(void *)this, a4, a2, a3, &v19, 8);
      unsigned __int8 v9 = v19;
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v15 = *(void *)this;
        unsigned __int8 v9 = v9;
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 96))(v15, a4, a2, a3, [(objc_object *)v9 bytes], [(objc_object *)v9 length]);
      }
      else
      {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
    }
    goto LABEL_17;
  }
  int v10 = v9;
  unsigned __int8 v9 = v10;
  if (v10) {
    CFRetain(v10);
  }
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&number, v9);

  CFNumberType Type = CFNumberGetType(number);
  uint64_t v12 = 0xFFFFFFFFLL;
  if ((unint64_t)Type <= kCFNumberFloatType)
  {
    if (((1 << Type) & 0x218) != 0)
    {
      int v17 = [(objc_object *)v9 intValue];
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)this + 96))(*(void *)this, a4, a2, a3, &v17, 4);
    }
    else
    {
      if (((1 << Type) & 0x1060) == 0) {
        goto LABEL_14;
      }
      [(objc_object *)v9 floatValue];
      int v17 = v13;
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**(void **)this + 96))(*(void *)this, a4, a2, a3, &v17, 4);
    }
    uint64_t v12 = v14;
  }
LABEL_14:
  if (number) {
    CFRelease(number);
  }
LABEL_17:

  return v12;
}

void sub_1BB584694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::NumberRef::~NumberRef((const void **)va);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned __int8 v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1BB5848CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AUSM::TuningManager::ResetReservedGlobalAPACPropertyList(AUSM::TuningManager *this)
{
  if (*((unsigned char *)this + 32))
  {
    if (*((void *)this + 8))
    {
      unint64_t v2 = (void *)*((void *)this + 7);
      if (v2)
      {
        do
        {
          unint64_t v3 = (void *)*v2;
          operator delete(v2);
          unint64_t v2 = v3;
        }
        while (v3);
      }
      *((void *)this + 7) = 0;
      uint64_t v4 = *((void *)this + 6);
      if (v4)
      {
        for (uint64_t i = 0; i != v4; ++i)
          *(void *)(*((void *)this + 5) + 8 * i) = 0;
      }
      *((void *)this + 8) = 0;
    }
    AUSM::TuningManager::PopulateReservedGlobalAPACPropertyList(this);
  }
}

uint64_t AUEndpointVAD::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 620) = a2;
  return this;
}

uint64_t AUEndpointVAD::ShouldBypassEffect(AUEndpointVAD *this)
{
  return *((unsigned __int8 *)this + 620);
}

BOOL AUEndpointVAD::ValidFormat(AUEndpointVAD *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD::SupportedNumChannels(AUEndpointVAD *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEndpointVAD::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUEndpointVAD::StreamFormatWritable(AUEndpointVAD *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEndpointVAD::SupportsTail(AUEndpointVAD *this)
{
  return 1;
}

double AUEndpointVAD::GetTailTime(AUEndpointVAD *this)
{
  return 0.0;
}

double AUEndpointVAD::GetLatency(AUEndpointVAD *this)
{
  return 0.0;
}

uint64_t AUEndpointVAD::GetParameterInfo(AUEndpointVAD *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"number of VAD results";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"number of VAD results", buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 0;
      buffer->maxCFNumberRef Value = (float)*((unsigned int *)this + 84);
      goto LABEL_9;
    case 1:
      CFStringRef v7 = @"latest VAD status";
      goto LABEL_8;
    case 2:
      buffer->cfNameString = @"latest VAD sample time";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"latest VAD sample time", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      goto LABEL_9;
    case 3:
      CFStringRef v7 = @"VAD status changed";
LABEL_8:
      buffer->cfNameString = v7;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
LABEL_9:
      uint64_t result = 0;
      AudioUnitParameterOptions v8 = buffer->flags | 0x8000;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v8;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUEndpointVAD::Render(AUEndpointVAD *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a4) {
    return 4294956422;
  }
  unsigned __int8 v9 = (AUEndpointVAD *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUEndpointVAD *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 128), 0);
  float v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v13 = ausdk::AUScope::SafeGetElement(v9, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    return (*(uint64_t (**)(AUEndpointVAD *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD::ProcessMultipleBufferLists(AUEndpointVAD *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a3) {
    return 4294956422;
  }
  if (((*(uint64_t (**)(AUEndpointVAD *, unsigned int *))(*(void *)this + 576))(this, a2) & 1) == 0)
  {
    uint64_t v12 = *((void *)this + 66);
    uint64_t v13 = (uint64_t)*a5;
    float v14 = *((double *)this + 34);
    unsigned int v15 = vcvtms_u32_f32(*(float *)(v12 + 36) * v14);
    int v62 = a3;
    *(double *)(v12 + 128) = (double)v15;
    uint64_t v16 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(*(void *)(v12 + 200) + 16);
    unsigned int v61 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 48) + 144))(*(void *)(v12 + 48), a3);
    (*(void (**)(void, uint64_t, void, uint64_t, void, int *, unsigned int *, uint64_t, uint64_t))(**(void **)(v12 + 48) + 32))(*(void *)(v12 + 48), v16, 0, v17, 0, &v62, &v61, 1, 1);
    unsigned int v18 = v61;
    *(_DWORD *)(v12 + 208) = v61;
    float v63 = *(AudioBufferList **)(v12 + 200);
    *(void *)AudioStreamBasicDescription buf = v63;
    *(_DWORD *)(v12 + 32) = 0;
    uint64_t v7 = BlockProcessor::Process((BlockProcessor *)(v12 + 56), v18, (const AudioBufferList **)buf, &v63);
    uint64_t v20 = *((void *)this + 66);
    unint64_t v21 = (_DWORD *)*((void *)this + 74);
    uint64_t v22 = *(void *)(v20 + 224);
    uint64_t v23 = *(unsigned int *)(v20 + 212);
    int v24 = *(_DWORD *)(v22 + 152);
    *((_DWORD *)this + 146) = 0;
    if (v24 < 0
      || *(_DWORD *)(v22 + 152) < v23
      || (EndpointVADRTViterbi::decodeStateSequence((char **)v22, *(_DWORD *)(v22 + 148), v23),
          int v25 = *(_DWORD *)(v22 + 152) - v23,
          *((_DWORD *)this + 146) = v25 + 1,
          v25 == -1))
    {
      LODWORD(v26) = 0;
    }
    else
    {
      uint64_t v51 = *(void *)(v22 + 24) + 4 * v23;
      uint64_t v52 = (int *)v51;
      do
      {
        int v53 = *v52++;
        *v21++ = v53;
        uint64_t v26 = *((unsigned int *)this + 146);
      }
      while (v52 != (int *)(v51 + 4 * v26));
    }
    *(_DWORD *)(v20 + 212) += v26;
    __int16 v27 = (unsigned int *)*((void *)this + 67);
    uint8x8_t v28 = (int *)*((void *)this + 74);
    if (v27[1] >= v26)
    {
      *((unsigned char *)v27 + 64) = 0;
      int v30 = v27 + 16;
      if (!v26) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
    if (EndpointVADLogScope(void)::once != -1) {
      dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_26698);
    }
    if (EndpointVADLogScope(void)::scope)
    {
      __int16 v29 = *(NSObject **)EndpointVADLogScope(void)::scope;
      if (!*(void *)EndpointVADLogScope(void)::scope)
      {
LABEL_21:
        *((unsigned char *)v27 + 64) = 0;
        int v30 = v27 + 16;
LABEL_22:
        uint64_t v31 = v26;
        double v32 = *((double *)v27 + 3);
        do
        {
          uint64_t v33 = *v28++;
          LODWORD(v19) = v33;
          *((double *)&v19 + 1) = v32;
          uint64_t v34 = *((void *)v27 + 2);
          uint64_t v35 = *(int *)(v34 + 12);
          uint64_t v36 = *(void *)(*(void *)v34 + 16 * ((int)v35 % *(_DWORD *)(v34 + 8)));
          *(_OWORD *)(*(void *)v34 + 16 * v35) = v19;
          *(_DWORD *)(v34 + 12) = (*(_DWORD *)(v34 + 12) + 1) % *(_DWORD *)(v34 + 8);
          uint64_t v37 = *((void *)v27 + 5);
          ++*(_DWORD *)(v37 + 4 * v33);
          unsigned int v38 = v27[2];
          if (v38 == v27[1]) {
            --*(_DWORD *)(v37 + 4 * (int)v36);
          }
          else {
            v27[2] = v38 + 1;
          }
          double v32 = *((double *)v27 + 3) + 1.0;
          *((double *)v27 + 3) = v32;
          --v31;
        }
        while (v31);
LABEL_27:
        uint64_t v39 = *v27;
        if (!v39)
        {
LABEL_52:
          *int v30 = v39;
          uint64_t v54 = *((void *)this + 67);
          int v55 = *(unsigned __int8 *)(v54 + 64);
          int v56 = *(_DWORD *)(v54 + 48);
          uint64_t v57 = *(void *)(v54 + 56);
          *((_DWORD *)this + 154) = v55;
          if (v55)
          {
            *((_DWORD *)this + 150) = v56;
            *((void *)this + 76) = v57;
          }
          AUEndpointVAD::UpdateParameters(this);
          goto LABEL_55;
        }
        uint64_t v40 = 0;
        unsigned int v41 = 0;
        int v42 = -1;
        do
        {
          unsigned int v43 = *(_DWORD *)(*((void *)v27 + 5) + 4 * v40);
          if (v43 >= *(_DWORD *)(*((void *)v27 + 4) + 4 * v40) && v43 > v41)
          {
            int v42 = v40;
            unsigned int v41 = *(_DWORD *)(*((void *)v27 + 5) + 4 * v40);
          }
          ++v40;
        }
        while (v39 != v40);
        if (v42 < 0 || v42 == v27[12])
        {
          LOBYTE(v39) = 0;
          goto LABEL_52;
        }
        v27[12] = v42;
        unsigned int v45 = v27[1];
        unsigned int v44 = v27[2];
        if (v45 - v44 < v45)
        {
          uint64_t v46 = *((void *)v27 + 2);
          int v47 = -v44;
          while (v42 != MRRingBuffer<StateEvent>::GetSample(v46, v45 + v47))
          {
            if (__CFADD__(v47++, 1)) {
              goto LABEL_40;
            }
          }
          *((void *)v27 + 7) = v48;
          goto LABEL_51;
        }
LABEL_40:
        if (EndpointVADLogScope(void)::once != -1) {
          dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_26698);
        }
        if (EndpointVADLogScope(void)::scope)
        {
          int v50 = *(NSObject **)EndpointVADLogScope(void)::scope;
          if (!*(void *)EndpointVADLogScope(void)::scope)
          {
LABEL_51:
            v27[2] = 0;
            bzero(*((void **)v27 + 5), 4 * *v27);
            LOBYTE(v39) = 1;
            goto LABEL_52;
          }
        }
        else
        {
          int v50 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "EndpointVADSegmentHeuristics.cpp";
          __int16 v65 = 1024;
          int v66 = 163;
          _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EndpointVADSegmentHeuristics: Transition state value not found in the history buffer!", buf, 0x12u);
        }
        goto LABEL_51;
      }
    }
    else
    {
      __int16 v29 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "EndpointVADSegmentHeuristics.cpp";
      __int16 v65 = 1024;
      int v66 = 75;
      _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EndpointVADSegmentHeuristics: Input VAD sequence exceeded the internal history size.", buf, 0x12u);
    }
    goto LABEL_21;
  }
  uint64_t v7 = 0;
LABEL_55:
  mData = (*a5)->mBuffers[0].mData;
  unsigned int v59 = (*a7)->mBuffers[0].mData;
  if (mData != v59) {
    memcpy(v59, mData, (*a5)->mBuffers[0].mDataByteSize);
  }
  return v7;
}

void AUEndpointVAD::UpdateParameters(AUEndpointVAD *this)
{
  unint64_t v2 = (AUEndpointVAD *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEndpointVAD *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, (float)*((unsigned int *)this + 146), 0);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v4, 1u, (float)*((unsigned int *)this + 150), 0);
  BOOL v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v6 = *((double *)this + 76);
  ausdk::AUElement::SetParameter(v5, 2u, v6, 0);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v8 = (float)*((unsigned int *)this + 154);

  ausdk::AUElement::SetParameter(v7, 3u, v8, 0);
}

uint64_t AUEndpointVAD::CanScheduleParameters(AUEndpointVAD *this)
{
  return 0;
}

uint64_t AUEndpointVAD::SetProperty(AUEndpointVAD *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956431;
  switch(a2)
  {
    case 64001:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a6) {
        return 4294956445;
      }
      unsigned __int8 v9 = (const void *)*((void *)this + 70);
      if (v9)
      {
        CFRelease(v9);
        *((void *)this + 70) = 0;
      }
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
      uint64_t result = 0;
      *((void *)this + 70) = Copy;
      return result;
    case 64002:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a6) {
        return 4294956445;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 142) = *(_DWORD *)theDict;
      return result;
    case 64003:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      uint64_t result = 4294956445;
      if (a6)
      {
        float v13 = *(float *)theDict;
        *((_DWORD *)this + 143) = *(_DWORD *)theDict;
        if (v13 >= 0.0) {
          return 0;
        }
        else {
          return 4294956445;
        }
      }
      return result;
    case 64004:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      uint64_t result = 4294956445;
      if (a6)
      {
        float v14 = *(float *)theDict;
        *((_DWORD *)this + 144) = *(_DWORD *)theDict;
        if (v14 <= 0.0) {
          return 4294956445;
        }
        else {
          return 0;
        }
      }
      return result;
    case 64005:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      uint64_t result = 4294956445;
      if (a6)
      {
        float v15 = *(float *)theDict;
        *((_DWORD *)this + 145) = *(_DWORD *)theDict;
        if (v15 <= 1.0 && v15 > 0.0) {
          return 0;
        }
        else {
          return 4294956445;
        }
      }
      return result;
    case 64006:
    case 64007:
      return result;
    case 64008:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a6) {
        return 4294956445;
      }
      uint64_t v17 = (const void *)*((void *)this + 68);
      if (v17)
      {
        CFRelease(v17);
        *((void *)this + 68) = 0;
      }
      CFDictionaryRef v18 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
      uint64_t result = 0;
      *((void *)this + 68) = v18;
      return result;
    case 64009:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      if (!a6) {
        return 4294956445;
      }
      long long v19 = (const void *)*((void *)this + 69);
      if (v19)
      {
        CFRelease(v19);
        *((void *)this + 69) = 0;
      }
      CFDictionaryRef v20 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
      uint64_t result = 0;
      *((void *)this + 69) = v20;
      return result;
    default:
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 376) = *(unsigned char *)theDict;
          return result;
        }
        return 4294956445;
      }
      if (a2 != 21) {
        return 4294956417;
      }
      if (a6 < 4) {
        return 4294956445;
      }
      int v11 = *(_DWORD *)theDict;
      int v12 = *(_DWORD *)theDict != 0;
      if (v12 != (*(unsigned int (**)(AUEndpointVAD *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUEndpointVAD *, BOOL))(*(void *)this + 584))(this, v11 != 0);
      }
      return 0;
  }
}

uint64_t AUEndpointVAD::GetProperty(AUEndpointVAD *this, int a2, int a3, unsigned int a4, char *__dst)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v9 = (const __CFDictionary *)*((void *)this + 70);
      goto LABEL_17;
    case 64002:
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 142);
      goto LABEL_12;
    case 64003:
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 143);
      goto LABEL_12;
    case 64004:
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 144);
      goto LABEL_12;
    case 64005:
      uint64_t result = 0;
      int v11 = *((_DWORD *)this + 145);
LABEL_12:
      *(_DWORD *)__dst = v11;
      return result;
    case 64006:
      uint64_t result = 0;
      *(void *)__dst = 0x4054D555524B8E39;
      *(_OWORD *)(__dst + 8) = xmmword_1BB8727B0;
      *(_OWORD *)(__dst + 24) = xmmword_1BB8727C0;
      return result;
    case 64007:
      memcpy(__dst, *((const void **)this + 74), 4 * *((unsigned int *)this + 146));
      return 0;
    case 64008:
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v9 = (const __CFDictionary *)*((void *)this + 68);
      goto LABEL_17;
    case 64009:
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v9 = (const __CFDictionary *)*((void *)this + 69);
LABEL_17:
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, v9);
      uint64_t result = 0;
      *(void *)__dst = Copy;
      return result;
    default:
      if (a2 == 3700)
      {
        uint64_t result = 0;
        int v10 = *((unsigned __int8 *)this + 376);
        goto LABEL_19;
      }
      if (a2 == 21)
      {
        int v10 = (*(uint64_t (**)(AUEndpointVAD *))(*(void *)this + 576))(this);
        uint64_t result = 0;
LABEL_19:
        *(_DWORD *)__dst = v10;
        return result;
      }
      return 4294956417;
  }
}

uint64_t AUEndpointVAD::GetPropertyInfo(AUEndpointVAD *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
    case 64008:
    case 64009:
      *a6 = *((unsigned char *)this + 17) ^ 1;
      int v8 = 8;
      goto LABEL_12;
    case 64002:
    case 64003:
    case 64004:
    case 64005:
      goto LABEL_4;
    case 64006:
      *a6 = *((unsigned char *)this + 17) ^ 1;
      int v8 = 40;
      goto LABEL_12;
    case 64007:
      *a6 = 0;
      int v8 = 4 * *((_DWORD *)this + 146);
      goto LABEL_12;
    default:
      if (a2 == 3700)
      {
LABEL_4:
        char v7 = *((unsigned char *)this + 17) ^ 1;
      }
      else
      {
        if (a2 != 21) {
          return 4294956417;
        }
        char v7 = 1;
      }
      *a6 = v7;
      int v8 = 4;
LABEL_12:
      uint64_t result = 0;
      *a5 = v8;
      break;
  }
  return result;
}

EndpointVAD *AUEndpointVAD::Cleanup(AUEndpointVAD *this)
{
  uint64_t result = (EndpointVAD *)*((void *)this + 66);
  if (result) {
    uint64_t result = (EndpointVAD *)EndpointVAD::Uninitialize(result);
  }
  if (*((unsigned char *)this + 17))
  {
    std::unique_ptr<EndpointVAD>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
    std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100]((void *)this + 67, 0);
    unint64_t v3 = (const void *)*((void *)this + 70);
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 70) = 0;
    }
    uint64_t v4 = (const void *)*((void *)this + 68);
    if (v4)
    {
      CFRelease(v4);
      *((void *)this + 68) = 0;
    }
    BOOL v5 = (const void *)*((void *)this + 69);
    if (v5)
    {
      CFRelease(v5);
      *((void *)this + 69) = 0;
    }
    uint64_t result = (EndpointVAD *)*((void *)this + 74);
    if (result)
    {
      uint64_t result = (EndpointVAD *)MEMORY[0x1C185D370](result, 0x1000C4052888210);
      *((void *)this + 74) = 0;
    }
  }
  return result;
}

uint64_t *std::unique_ptr<EndpointVAD>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    EndpointVAD::Uninitialize((EndpointVAD *)v2);
    std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100]((unsigned char *)(v2 + 56));
    uint64_t v3 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      if (*v3) {
        MEMORY[0x1C185D340](*v3, 0x1000C80F7F8B94BLL);
      }
      MEMORY[0x1C185D370](v3, 0x1020C40EDED9539);
    }
    uint64_t v4 = v2[4];
    if (v4) {
      MEMORY[0x1C185D370](v4, 0x1000C4052888210);
    }
    uint64_t v5 = v2[5];
    if (v5) {
      MEMORY[0x1C185D370](v5, 0x1000C4052888210);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUEndpointVAD::Initialize(AUEndpointVAD *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AUEndpointVAD *)((char *)this + 80);
  (*(void (**)(AUEndpointVAD *))(*(void *)this + 64))(this);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v3 == *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD *)((char *)this + 128), 0) + 80))
  {
    if (*((void *)this + 70)) {
      goto LABEL_4;
    }
    if (EndpointVADLogScope(void)::once != -1) {
      dispatch_once(&EndpointVADLogScope(void)::once, &__block_literal_global_26698);
    }
    if (EndpointVADLogScope(void)::scope)
    {
      uint64_t v5 = *(NSObject **)EndpointVADLogScope(void)::scope;
      if (!*(void *)EndpointVADLogScope(void)::scope) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      inDesc.componentCFNumberType Type = 136315394;
      *(void *)&inDesc.componentSubCFNumberType Type = "AUEndpointVAD.cpp";
      LOWORD(inDesc.componentFlags) = 1024;
      *(UInt32 *)((char *)&inDesc.componentFlags + 2) = 96;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD: The model dictionary property is unset (required).", (uint8_t *)&inDesc, 0x12u);
    }
LABEL_4:
    operator new();
  }
  return 4294956421;
}

void sub_1BB5871BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t ****__p,uint64_t ****a35,uint64_t a36,uint64_t ***a37,uint64_t a38,uint64_t a39,uint64_t **a40,uint64_t a41,uint64_t a42,uint64_t *a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p)
  {
    a35 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a37 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a40 = &a43;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a43 = &a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  uint64_t v48 = *(void **)(v46 - 256);
  if (v48)
  {
    *(void *)(v46 - 248) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void AUEndpointVAD::~AUEndpointVAD(AUEndpointVAD *this)
{
  AUEndpointVAD::~AUEndpointVAD(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14B5240;
  AUEndpointVAD::Cleanup(this);
  std::unique_ptr<EndpointVADSegmentHeuristics>::reset[abi:ne180100]((void *)this + 67, 0);
  std::unique_ptr<EndpointVAD>::reset[abi:ne180100]((uint64_t *)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

void AUMeisterStueck::newDspLibAlgorithm(AUMeisterStueck *this)
{
}

void sub_1BB5874F0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C406EC3043BLL);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::deleteAlgorithms(AUMeisterStueck *this)
{
  return 0;
}

uint64_t AUMeisterStueck::deletePhaseCompensators(AUMeisterStueck *this)
{
  uint64_t v2 = (AUMeisterStueck *)((char *)this + 1824);
  caulk::pooled_semaphore_mutex::_lock((AUMeisterStueck *)((char *)this + 1824));
  uint64_t v3 = 0;
  uint64_t v4 = (char *)this + 2168;
  do
  {
    uint64_t v5 = *(void *)&v4[v3];
    if (v5)
    {
      *(void *)&v4[v3] = 0;
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    v3 += 8;
  }
  while (v3 != 2448);
  return caulk::pooled_semaphore_mutex::_unlock(v2);
}

uint64_t AUMeisterStueck::createAlgorithms(AUMeisterStueck *this)
{
  if (*((_DWORD *)this + 397) == 1)
  {
    unsigned int v2 = 0;
    uint64_t v3 = (_DWORD *)*((void *)this + 268);
    uint64_t v4 = (_DWORD *)*((void *)this + 269);
    while (1)
    {
      unsigned int v5 = v3 == v4 ? 0 : *v3;
      if (v2 >= v5) {
        break;
      }
      for (unsigned int i = 0; ; ++i)
      {
        unsigned int v7 = v3 == v4 ? 0 : *v3;
        if (i >= v7) {
          break;
        }
        PhaseCompensatorRef = AUMeisterStueck::getPhaseCompensatorRef(this, i, v2);
        if (PhaseCompensatorRef)
        {
          if (!*(void *)PhaseCompensatorRef) {
            operator new();
          }
        }
        uint64_t v3 = (_DWORD *)*((void *)this + 268);
        uint64_t v4 = (_DWORD *)*((void *)this + 269);
      }
      ++v2;
    }
    unint64_t v9 = 0;
    for (uint64_t j = 544; ; j += 56)
    {
      unint64_t v11 = v3 == v4 ? 0 : *v3;
      if (v9 >= v11) {
        break;
      }
      AUMeisterStueck::setPhaseCompensatorParameters((char *)this, v9++, *(float **)((char *)this + j));
      uint64_t v3 = (_DWORD *)*((void *)this + 268);
      uint64_t v4 = (_DWORD *)*((void *)this + 269);
    }
    *((unsigned char *)this + 4616) = AUMeisterStueck::needPhaseCompensator(this);
  }
  AUDspLib::createAlgorithms(this);
  return 0;
}

void sub_1BB58773C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C406EC3043BLL);
  _Unwind_Resume(a1);
}

BOOL AUMeisterStueck::needPhaseCompensator(AUMeisterStueck *this)
{
  uint64_t v1 = this;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0x6800000066;
  int v11 = 106;
  unsigned int v2 = (char *)this + 528;
  unint64_t v3 = 1;
LABEL_2:
  uint64_t v4 = (unsigned int *)*((void *)v1 + 268);
  if (v4 == *((unsigned int **)v1 + 269)) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *v4;
  }
  if (v3 < v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = &v2[56 * v3 + 16];
    while (1)
    {
      LOBYTE(this) = DspLib::isEqual(this, *(float *)(*((void *)v1 + 68) + 4 * dword_1BB8A84B4[v6]), *(float *)(*(void *)v7 + 4 * dword_1BB8A84B4[v6]), 0.5);
      if ((this & 1) == 0) {
        break;
      }
      if (++v6 == 7)
      {
        uint64_t v8 = 0;
        while (vcvtas_u32_f32(*(float *)(*((void *)v1 + 68) + 4 * *(unsigned int *)((char *)&v10 + v8)) * 0.5) == vcvtas_u32_f32(*(float *)(*(void *)v7 + 4 * *(unsigned int *)((char *)&v10 + v8)) * 0.5))
        {
          v8 += 4;
          if (v8 == 12)
          {
            ++v3;
            goto LABEL_2;
          }
        }
        return v3 < v5;
      }
    }
  }
  return v3 < v5;
}

char *AUMeisterStueck::setPhaseCompensatorParameters(char *this, unsigned int a2, float *a3)
{
  uint64_t v5 = (uint64_t)this;
  for (unsigned int i = 0; ; ++i)
  {
    unsigned int v7 = *(_DWORD **)(v5 + 2144);
    unsigned int v8 = v7 == *(_DWORD **)(v5 + 2152) ? 0 : *v7;
    if (i >= v8) {
      break;
    }
    this = AUMeisterStueck::getPhaseCompensatorRef((AUMeisterStueck *)v5, i, a2);
    if (this)
    {
      uint64_t v10 = this;
      this = *(char **)this;
      if (this)
      {
        LODWORD(v9) = *(_DWORD *)(v5 + 1812);
        (*(void (**)(char *, uint64_t, double))(*(void *)this + 16))(this, 1, (double)v9);
        this = (char *)(*(uint64_t (**)(void, float *, uint64_t))(**(void **)v10 + 128))(*(void *)v10, a3, 135);
      }
    }
  }
  return this;
}

char *AUMeisterStueck::getPhaseCompensatorRef(AUMeisterStueck *this, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3)
  {
    if (a2 <= a3) {
      return 0;
    }
    unint64_t v3 = (char *)this + 2168;
    uint64_t v6 = (_DWORD *)*((void *)this + 268);
    if (v6 == *((_DWORD **)this + 269)) {
      int v7 = -1;
    }
    else {
      int v7 = *v6 - 1;
    }
    unsigned int v9 = a3 + v7 * a2;
  }
  else
  {
    unint64_t v3 = (char *)this + 2168;
    uint64_t v4 = (_DWORD *)*((void *)this + 268);
    if (v4 == *((_DWORD **)this + 269)) {
      int v5 = -1;
    }
    else {
      int v5 = *v4 - 1;
    }
    unsigned int v9 = a3 + v5 * a2 - 1;
  }
  return &v3[8 * v9];
}

uint64_t AUMeisterStueck::Version(AUMeisterStueck *this)
{
  return 131328;
}

uint64_t AUMeisterStueck::ProcessBufferLists(AUMeisterStueck *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if (a3 != a4)
  {
    unint64_t v9 = 0;
    p_mData = &a3->mBuffers[0].mData;
    for (unsigned int i = &a4->mBuffers[0].mData; ; i += 2)
    {
      uint64_t v12 = (unsigned int *)*((void *)this + 268);
      unint64_t v13 = v12 == *((unsigned int **)this + 269) ? 0 : *v12;
      if (v9 >= v13) {
        break;
      }
      if (*p_mData != *i) {
        memcpy(*i, *p_mData, 4 * a5);
      }
      ++v9;
      p_mData += 2;
    }
  }
  if (!*((unsigned char *)this + 2113) && *((_DWORD *)this + 397) == 1)
  {
    int v30 = (AudioBufferList *)((char *)this + 1824);
    int v14 = caulk::pooled_semaphore_mutex::try_lock((AUMeisterStueck *)((char *)this + 1824));
    char v31 = v14;
    if (v14)
    {
      unint64_t v15 = 0;
      char v16 = 0;
      for (uint64_t j = (_DWORD *)((char *)this + 572); ; j += 14)
      {
        CFDictionaryRef v18 = (unsigned int *)*((void *)this + 268);
        unint64_t v19 = v18 == *((unsigned int **)this + 269) ? 0 : *v18;
        if (v15 >= v19) {
          break;
        }
        if (*(j - 1) != *j)
        {
          AUMeisterStueck::setPhaseCompensatorParameters((char *)this, v15, *(float **)(j - 7));
          char v16 = 1;
        }
        ++v15;
      }
      if (v16)
      {
        BOOL v20 = AUMeisterStueck::needPhaseCompensator(this);
        *((unsigned char *)this + 4616) = v20;
        if (!v20) {
          goto LABEL_39;
        }
LABEL_25:
        unint64_t v21 = 0;
        int v22 = 0;
        uint64_t v23 = (_DWORD *)*((void *)this + 268);
        int v24 = (_DWORD *)*((void *)this + 269);
        while (1)
        {
          unint64_t v25 = v23 == v24 ? 0 : *v23;
          if (v21 >= v25) {
            break;
          }
          for (unsigned int k = 0; ; ++k)
          {
            int v27 = v23 == v24 ? 0 : *v23;
            if (k >= v27 - 1) {
              break;
            }
            uint64_t v28 = *((void *)this + v22 + k + 271);
            if (v28)
            {
              (*(void (**)(uint64_t, void *, void))(*(void *)v28 + 168))(v28, a4->mBuffers[v21].mData, a5);
              uint64_t v23 = (_DWORD *)*((void *)this + 268);
              int v24 = (_DWORD *)*((void *)this + 269);
            }
          }
          ++v21;
          v22 += k;
        }
        goto LABEL_39;
      }
      if (*((unsigned char *)this + 4616)) {
        goto LABEL_25;
      }
    }
LABEL_39:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
  }
  int v30 = a4;
  double v32 = a4;
  return (*(uint64_t (**)(AUMeisterStueck *, unsigned int *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))(*(void *)this + 184))(this, a2, a5, 1, &v30, 1, &v32);
}

void sub_1BB587C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUMeisterStueck::Reset(AUMeisterStueck *this)
{
  if (*((unsigned char *)this + 17))
  {
    for (uint64_t i = 0; i != 2448; i += 8)
    {
      caulk::pooled_semaphore_mutex::_lock((AUMeisterStueck *)((char *)this + 1824));
      uint64_t v3 = *(void *)((char *)this + i + 2168);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 136))(v3);
      }
      caulk::pooled_semaphore_mutex::_unlock((AUMeisterStueck *)((char *)this + 1824));
    }
  }
  AUDspLib::Reset(this);
  return 0;
}

void sub_1BB587D38(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void AUMeisterStueck::Cleanup(AUMeisterStueck *this)
{
  AUMeisterStueck::deletePhaseCompensators(this);

  AUDspLib::Cleanup(this);
}

void AUMeisterStueck::~AUMeisterStueck(AUMeisterStueck *this)
{
  AUMeisterStueck::~AUMeisterStueck(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t i;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B54A0;
  AUMeisterStueck::deletePhaseCompensators(this);
  AUDspLib::Cleanup(this);
  for (uint64_t i = 4608; i != 2160; i -= 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    *(void *)((char *)this + i) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  AUDspLib::~AUDspLib(this);
}

uint64_t AUJBase::WantsToHandlePresetSetsExplicitly(AUJBase *this)
{
  return 0;
}

uint64_t AUJBase::HasCustomViewInDSPAUBundle(AUJBase *this)
{
  return 0;
}

uint64_t AULoudnessWarrior::PresetWasSet(uint64_t this)
{
  return this;
}

uint64_t AUJBase::SetBypass(AUJBase *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(AUJBase *))(*(void *)this + 600))(this);
  if (result) {
    *((unsigned char *)this + 552) = a2;
  }
  return result;
}

uint64_t AULoudnessWarrior::CanBypass(AULoudnessWarrior *this)
{
  return 1;
}

_OWORD *AULoudnessWarrior::GetValidChannelCounts@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x10uLL);
  *a1 = v3;
  _OWORD *v3 = xmmword_1BB87B6B0;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t AULoudnessWarrior::Version(AULoudnessWarrior *this)
{
  return 0x10000;
}

BOOL AULoudnessWarrior::ValidFormat(AULoudnessWarrior *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mSampleRate < 8000.0) {
    return 0;
  }
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  return result;
}

BOOL AULoudnessWarrior::StreamFormatWritable(AULoudnessWarrior *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AULoudnessWarrior::SupportsTail(AULoudnessWarrior *this)
{
  return 1;
}

double AULoudnessWarrior::GetTailTime(AULoudnessWarrior *this)
{
  return 0.2;
}

double AULoudnessWarrior::GetLatency(AULoudnessWarrior *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 348));
}

uint64_t AULoudnessWarrior::NewFactoryPresetSet(AULoudnessWarrior *this, const AUPreset *a2)
{
  if (a2->presetNumber) {
    return 4294956445;
  }
  for (uint64_t i = 0; i != 41; ++i)
    (*(void (**)(AULoudnessWarrior *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, i, 0, 0, 0, kPresetParamVals[i]);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, &kAuPresets);
  return 0;
}

uint64_t AULoudnessWarrior::GetPresets(AULoudnessWarrior *this, const __CFArray **a2)
{
  if (a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 1, 0);
    CFArrayAppendValue(Mutable, &kAuPresets);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AULoudnessWarrior::CopyClumpName(AULoudnessWarrior *this, int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if (a3 > 3) {
    return 4294956418;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, off_1E623F0E0[a3], 0x8000100u);
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AULoudnessWarrior::GetParameterValueStrings(AULoudnessWarrior *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x28)
  {
    if (((1 << a3) & 0x80100200) != 0)
    {
      if (a4)
      {
        long long v8 = xmmword_1E623F090;
        long long v9 = *(_OWORD *)&off_1E623F0A0;
        long long v10 = xmmword_1E623F0B0;
        int v11 = @"High-pass RMS";
        CFIndex v6 = 7;
        goto LABEL_9;
      }
    }
    else
    {
      if (((1 << a3) & 0x10020040000) == 0) {
        return result;
      }
      if (a4)
      {
        long long v8 = xmmword_1E623F0C8;
        *(void *)&long long v9 = @"Correct Both";
        CFIndex v6 = 3;
LABEL_9:
        CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
        uint64_t result = 0;
        *a4 = v7;
        return result;
      }
    }
    return 0;
  }
  return result;
}

__n128 AULoudnessWarrior::GetParameterInfo(AULoudnessWarrior *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  if (!a2)
  {
    uint64_t v4 = &gLWParams;
    uint64_t v5 = 4592;
    while (*v4 != a3)
    {
      v4 += 28;
      v5 -= 112;
      if (!v5) {
        return result;
      }
    }
    long long v6 = *(_OWORD *)(v4 + 2);
    long long v7 = *(_OWORD *)(v4 + 10);
    *(_OWORD *)&a4->name[16] = *(_OWORD *)(v4 + 6);
    *(_OWORD *)&a4->name[32] = v7;
    *(_OWORD *)a4->name = v6;
    __n128 result = *(__n128 *)(v4 + 14);
    long long v9 = *(_OWORD *)(v4 + 18);
    long long v10 = *(_OWORD *)(v4 + 22);
    *(void *)&a4->AudioUnitParameterOptions flags = *((void *)v4 + 13);
    *(_OWORD *)&a4->clumpID = v9;
    *(_OWORD *)&a4->unit = v10;
    *(__n128 *)&a4->name[48] = result;
  }
  return result;
}