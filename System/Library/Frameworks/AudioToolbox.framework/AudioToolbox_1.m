BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **>(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6;
  BOOL result;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

BOOL zcmp(ZoneState *a1, ZoneState *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 184);
  unsigned int v3 = *((unsigned __int8 *)a2 + 184);
  if (v2 < v3) {
    return 1;
  }
  if (v2 == v3)
  {
    unsigned int v4 = *((unsigned __int8 *)a1 + 185);
    unsigned int v5 = *((unsigned __int8 *)a2 + 185);
    if (v4 < v5) {
      return 1;
    }
    if (v4 > v5) {
      return 0;
    }
  }
  else if (v2 > v3)
  {
    return 0;
  }
  unsigned int v6 = *((unsigned __int8 *)a1 + 186);
  unsigned int v7 = *((unsigned __int8 *)a2 + 186);
  if (v6 < v7) {
    return 1;
  }
  if (v6 == v7)
  {
    unsigned int v9 = *((unsigned __int8 *)a1 + 187);
    unsigned int v10 = *((unsigned __int8 *)a2 + 187);
    if (v9 < v10) {
      return 1;
    }
    if (v9 > v10) {
      return 0;
    }
  }
  else if (v6 > v7)
  {
    return 0;
  }
  return *((unsigned __int8 *)a1 + 188) < *((unsigned __int8 *)a2 + 188);
}

void CHECK_RANGE<int>(int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 <= *a1) {
    int v5 = *a1;
  }
  else {
    int v5 = a2;
  }
  if (v5 >= a3) {
    int v6 = a3;
  }
  else {
    int v6 = v5;
  }
  if (v6 != *a1 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315906;
    unsigned int v9 = "SamplerUtils.h";
    __int16 v10 = 1024;
    int v11 = 57;
    __int16 v12 = 2080;
    uint64_t v13 = a4;
    __int16 v14 = 2080;
    v15 = "value constrained to limits";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s:  %s", (uint8_t *)&v8, 0x26u);
  }
  *a1 = v6;
}

uint64_t LayerState::Save(LayerState *this, CACFDictionary *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "LayerState.cpp";
    __int16 v47 = 1024;
    int v48 = 1437;
    __int16 v49 = 2048;
    v50 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::Save(this=%p)", buf, 0x1Cu);
  }
  CACFDictionary::AddUInt32(a2, @"ID");
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(LayerState *))(*(void *)this + 80))(this);
  CACFDictionary::AddString(a2, @"name", v4);
  if (!*((unsigned char *)this + 48)) {
    CACFDictionary::AddBool(a2, @"enabled");
  }
  if (*((unsigned char *)this + 88) || *((unsigned char *)this + 89) != 127)
  {
    CACFDictionary::AddUInt32(a2, @"min key");
    CACFDictionary::AddUInt32(a2, @"max key");
  }
  if (*((unsigned char *)this + 90) || *((unsigned char *)this + 91) != 127)
  {
    CACFDictionary::AddUInt32(a2, @"min vel");
    CACFDictionary::AddUInt32(a2, @"max vel");
  }
  if (*((unsigned char *)this + 152)) {
    CACFDictionary::AddSInt32(a2, @"key offset");
  }
  if (*((unsigned char *)this + 153)) {
    CACFDictionary::AddSInt32(a2, @"vel offset");
  }
  if (*((_DWORD *)this + 39) != -1) {
    CACFDictionary::AddUInt32(a2, @"output");
  }
  if (*((_DWORD *)this + 24)) {
    CACFDictionary::AddSInt32(a2, @"coarse tune");
  }
  float v5 = *((float *)this + 25);
  if (v5 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"fine tune", v5);
  }
  float v6 = *((float *)this + 26);
  if (v6 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"gain", v6);
  }
  float v7 = *((float *)this + 27) * 200.0;
  if (v7 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"pan", v7);
  }
  if (((*(uint64_t (**)(LayerState *))(*(void *)this + 56))(this) & 1) == 0) {
    CACFDictionary::AddBool(a2, @"enabled");
  }
  if (*((_DWORD *)this + 33) != 30) {
    CACFDictionary::AddUInt32(a2, @"zone select");
  }
  if (*((unsigned char *)this + 136)) {
    CACFDictionary::AddUInt32(a2, @"zone vel xfade");
  }
  if (*((_DWORD *)this + 28)) {
    CACFDictionary::AddUInt32(a2, @"sel ctrlr");
  }
  if (*((unsigned char *)this + 92) || *((unsigned char *)this + 93) != 127)
  {
    CACFDictionary::AddUInt32(a2, @"sel ctrlr min val");
    CACFDictionary::AddUInt32(a2, @"sel ctrlr max val");
  }
  if (*((_DWORD *)this + 35) != 10) {
    CACFDictionary::AddUInt32(a2, @"trigger mode");
  }
  if (*((_DWORD *)this + 36) != 5) {
    CACFDictionary::AddUInt32(a2, @"voice alloc method");
  }
  if (*((_DWORD *)this + 37) != -1) {
    CACFDictionary::AddUInt32(a2, @"voice count");
  }
  if (!*((unsigned char *)this + 154)) {
    CACFDictionary::AddBool(a2, @"self exclusive");
  }
  *(void *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(void, unsigned char *))(**((void **)this + 22) + 40))(*((void *)this + 22), buf);
  CACFDictionary::AddDictionary(a2, @"Oscillator", *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(void *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(void, unsigned char *))(**((void **)this + 23) + 40))(*((void *)this + 23), buf);
  CACFDictionary::AddDictionary(a2, @"Filters", *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(void *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(void, unsigned char *))(**((void **)this + 24) + 40))(*((void *)this + 24), buf);
  CACFDictionary::AddDictionary(a2, @"Amplifier", *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  unint64_t v8 = *((void *)this + 63) - *((void *)this + 62);
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, (v8 >> 3), MEMORY[0x263EFFF70]);
    *(void *)buf = Mutable;
    *(_WORD *)&buf[8] = 256;
    uint64_t v10 = *((void *)this + 62);
    uint64_t v11 = *((void *)this + 63);
    if (v10 == v11)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v12 = v10 + 8;
      uint64_t v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      __int16 v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      do
      {
        uint64_t v15 = *(void *)(v12 - 8);
        v44 = CFDictionaryCreateMutable(0, 0, v13, v14);
        __int16 v45 = 256;
        uint64_t v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v15 + 40))(v15, &v44);
        CACFArray::AppendDictionary((CACFArray *)buf, v44);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v12 == v11;
        }
        v12 += 8;
      }
      while (!v17);
      CFArrayRef Mutable = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, @"LFOs", Mutable);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  else
  {
    uint64_t v16 = 0;
  }
  unint64_t v18 = *((void *)this + 60) - *((void *)this + 59);
  if ((v18 & 0x7FFFFFFF8) != 0)
  {
    CFArrayRef v19 = CFArrayCreateMutable(0, (v18 >> 3), MEMORY[0x263EFFF70]);
    *(void *)buf = v19;
    *(_WORD *)&buf[8] = 256;
    uint64_t v20 = *((void *)this + 59);
    uint64_t v21 = *((void *)this + 60);
    if (v20 != v21)
    {
      uint64_t v22 = v20 + 8;
      v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      do
      {
        uint64_t v25 = *(void *)(v22 - 8);
        v44 = CFDictionaryCreateMutable(0, 0, v23, v24);
        __int16 v45 = 256;
        uint64_t v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v25 + 40))(v25, &v44);
        CACFArray::AppendDictionary((CACFArray *)buf, v44);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
        if (v16) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v22 == v21;
        }
        v22 += 8;
      }
      while (!v26);
      CFArrayRef v19 = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, @"Envelopes", v19);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  CFArrayRef v27 = CFArrayCreateMutable(0, ((*((void *)this + 57) - *((void *)this + 56)) >> 3), MEMORY[0x263EFFF70]);
  *(void *)buf = v27;
  *(_WORD *)&buf[8] = 256;
  uint64_t v28 = *((void *)this + 56);
  uint64_t v29 = *((void *)this + 57);
  if (v28 != v29)
  {
    uint64_t v30 = v28 + 8;
    v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    v32 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      uint64_t v33 = *(void *)(v30 - 8);
      v44 = CFDictionaryCreateMutable(0, 0, v31, v32);
      __int16 v45 = 256;
      uint64_t v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v33 + 40))(v33, &v44);
      CACFArray::AppendDictionary((CACFArray *)buf, v44);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
      if (v16) {
        BOOL v34 = 1;
      }
      else {
        BOOL v34 = v30 == v29;
      }
      v30 += 8;
    }
    while (!v34);
    CFArrayRef v27 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, @"Zones", v27);
  CACFArray::~CACFArray((CACFArray *)buf);
  CFArrayRef v35 = CFArrayCreateMutable(0, ((*((void *)this + 66) - *((void *)this + 65)) >> 3), MEMORY[0x263EFFF70]);
  *(void *)buf = v35;
  *(_WORD *)&buf[8] = 256;
  uint64_t v36 = *((void *)this + 65);
  uint64_t v37 = *((void *)this + 66);
  if (v36 != v37)
  {
    uint64_t v38 = v36 + 8;
    v39 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    v40 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      uint64_t v41 = *(void *)(v38 - 8);
      v44 = CFDictionaryCreateMutable(0, 0, v39, v40);
      __int16 v45 = 256;
      uint64_t v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v41 + 40))(v41, &v44);
      CACFArray::AppendDictionary((CACFArray *)buf, v44);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
      if (v16) {
        BOOL v42 = 1;
      }
      else {
        BOOL v42 = v38 == v37;
      }
      v38 += 8;
    }
    while (!v42);
    CFArrayRef v35 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, @"Connections", v35);
  CACFArray::~CACFArray((CACFArray *)buf);
  return v16;
}

void sub_21BA3C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

unsigned int (***LayerState::FindState(LayerState *this, int a2, int a3))(void)
{
  switch(a3)
  {
    case 1879048192:
      goto LABEL_4;
    case 536870912:
LABEL_9:
      unsigned int v9 = (void *)*((void *)this + 59);
      uint64_t v10 = (void *)*((void *)this + 60);
      while (v9 != v10)
      {
        unint64_t v8 = (unsigned int (***)(void))*v9;
        if ((**(unsigned int (***)(void))*v9)(*v9) == a2) {
          return v8;
        }
        ++v9;
      }
      break;
    case 0:
LABEL_4:
      float v6 = (void *)*((void *)this + 56);
      float v7 = (void *)*((void *)this + 57);
      while (v6 != v7)
      {
        unint64_t v8 = (unsigned int (***)(void))*v6;
        if ((**(unsigned int (***)(void))*v6)(*v6) == a2) {
          return v8;
        }
        ++v6;
      }
      if ((a3 | 0x20000000) == 0x20000000) {
        goto LABEL_9;
      }
      break;
  }
  unint64_t v8 = 0;
  HIDWORD(v12) = a3;
  LODWORD(v12) = a3;
  int v11 = v12 >> 28;
  switch(v11)
  {
    case 0:
    case 1:
      uint64_t v13 = (void *)*((void *)this + 62);
      __int16 v14 = (void *)*((void *)this + 63);
      while (2)
      {
        if (v13 == v14)
        {
          unint64_t v8 = 0;
          switch(v11)
          {
            case 0:
            case 5:
              goto LABEL_19;
            case 3:
              goto LABEL_27;
            case 4:
              goto LABEL_23;
            case 6:
              goto LABEL_31;
            default:
              return v8;
          }
        }
        else
        {
          unint64_t v8 = (unsigned int (***)(void))*v13;
          if ((**(unsigned int (***)(void))*v13)(*v13) != a2)
          {
            ++v13;
            continue;
          }
        }
        return v8;
      }
    case 3:
      goto LABEL_27;
    case 4:
      goto LABEL_23;
    case 5:
LABEL_19:
      uint64_t v15 = (char *)this + 192;
      if ((***((unsigned int (****)(void))this + 24))(*((void *)this + 24)) == a2) {
        return *(unsigned int (****)(void))v15;
      }
      if (v11 == 4) {
        goto LABEL_23;
      }
      if (v11 == 3) {
        goto LABEL_27;
      }
      if (v11) {
        return 0;
      }
LABEL_23:
      uint64_t v15 = (char *)this + 184;
      if ((***((unsigned int (****)(void))this + 23))(*((void *)this + 23)) == a2) {
        return *(unsigned int (****)(void))v15;
      }
      if (!a3) {
        goto LABEL_27;
      }
      if (a3 == 1610612736) {
        goto LABEL_31;
      }
      if (a3 != 805306368) {
        return 0;
      }
LABEL_27:
      uint64_t v15 = (char *)this + 176;
      if ((***((unsigned int (****)(void))this + 22))(*((void *)this + 22)) == a2) {
        return *(unsigned int (****)(void))v15;
      }
      if (a3 != 1610612736 && a3) {
        return 0;
      }
LABEL_31:
      uint64_t v16 = (void *)*((void *)this + 65);
      BOOL v17 = (void *)*((void *)this + 66);
      break;
    case 6:
      goto LABEL_31;
    default:
      return v8;
  }
  while (v16 != v17)
  {
    unint64_t v8 = (unsigned int (***)(void))*v16;
    if ((**(unsigned int (***)(void))*v16)(*v16) == a2) {
      return v8;
    }
    ++v16;
  }
  return 0;
}

uint64_t LayerState::SetProperty(LayerState *this, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      uint64_t v25 = "LayerState.cpp";
      __int16 v26 = 1024;
      int v27 = 1246;
      __int16 v28 = 2080;
      *(void *)uint64_t v29 = v23;
      *(_WORD *)&v29[8] = 2080;
      uint64_t v30 = "LayerState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::SetProperty: NULL property value", -10851);
  }
  uint64_t v6 = 0;
  if (a2 <= 4220)
  {
    switch(a2)
    {
      case 4120:
        uint64_t v6 = 1;
        (*(void (**)(LayerState *, void, uint64_t))(*(void *)this + 72))(this, *(void *)a3, 1);
        return v6;
      case 4121:
        (*(void (**)(LayerState *, BOOL))(*(void *)this + 64))(this, *a3 != 0);
        return 1;
      case 4122:
        LayerState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        LayerState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        LayerState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        LayerState::SetGain((float *)this, *(float *)a3);
        return 1;
      case 4126:
        LayerState::SetPan(this, *(float *)a3 * 0.005);
        return 1;
      case 4127:
        LayerState::SetKeyOffset(this, *a3);
        return 1;
      case 4128:
        CheckDataSize(a4, 2u);
        LayerState::SetKeyRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4129:
        CheckDataSize(a4, 2u);
        LayerState::SetVelRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4130:
        LayerState::SetSelfExclusive((uint64_t)this, *a3 != 0);
        return 1;
      case 4131:
        LayerState::SetVoiceCount(this, *a3);
        return 1;
      case 4133:
        CheckDataSize(a4, 0x48u);
        uint64_t v11 = *a3;
        switch(((v11 & 0xF0000000) - 0x10000000) >> 28)
        {
          case 0u:
            LayerState::CopyLFO((char **)this, v11);
          case 1u:
            LayerState::CopyEnvelope((char **)this, v11);
          case 2u:
          case 3u:
          case 4u:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              uint64_t v25 = "LayerState.cpp";
              __int16 v26 = 1024;
              int v27 = 1351;
              __int16 v28 = 2080;
              *(void *)uint64_t v29 = v23;
              *(_WORD *)&v29[8] = 2080;
              uint64_t v30 = "LayerState::SetProperty: Item of this type cannot be copied";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            uint64_t v20 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v20, "LayerState::SetProperty: Item of this type cannot be copied", -10851);
          case 5u:
            LayerState::CopyConnection((char **)this, v11);
          case 6u:
            LayerState::CopyZone((char **)this, v11);
          default:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              uint64_t v25 = "LayerState.cpp";
              __int16 v26 = 1024;
              int v27 = 1354;
              __int16 v28 = 2080;
              *(void *)uint64_t v29 = v23;
              *(_WORD *)&v29[8] = 2080;
              uint64_t v30 = "LayerState::SetProperty: No item matching that element ID";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            uint64_t v22 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v22, "LayerState::SetProperty: No item matching that element ID", -10851);
        }
      case 4134:
        CheckDataSize(a4, 4u);
        uint64_t v10 = *a3;
        switch(((v10 & 0xF0000000) - 0x10000000) >> 28)
        {
          case 0u:
            LayerState::RemoveLFO((uint64_t **)this, v10);
            break;
          case 1u:
            LayerState::RemoveEnvelope((uint64_t **)this, v10);
            break;
          case 2u:
          case 3u:
          case 4u:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              uint64_t v25 = "LayerState.cpp";
              __int16 v26 = 1024;
              int v27 = 1380;
              __int16 v28 = 2080;
              *(void *)uint64_t v29 = v23;
              *(_WORD *)&v29[8] = 2080;
              uint64_t v30 = "LayerState::SetProperty: Item of this type cannot be removed";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            CFArrayRef v19 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v19, "LayerState::SetProperty: Item of this type cannot be removed", -10851);
          case 5u:
            if ((LayerState::RemoveConnection(this, v10) & 1) == 0)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
                *(float *)buf = 4.8153e-34;
                uint64_t v25 = "LayerState.cpp";
                __int16 v26 = 1024;
                int v27 = 1372;
                __int16 v28 = 2080;
                *(void *)uint64_t v29 = v23;
                *(_WORD *)&v29[8] = 2080;
                uint64_t v30 = "LayerState::SetProperty: No connection matching that element ID";
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              uint64_t v15 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v15, "LayerState::SetProperty: No connection matching that element ID", -10851);
            }
            return result;
          case 6u:
            LayerState::RemoveZone((LayerState **)this, v10);
            break;
          default:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              uint64_t v25 = "LayerState.cpp";
              __int16 v26 = 1024;
              int v27 = 1383;
              __int16 v28 = 2080;
              *(void *)uint64_t v29 = v23;
              *(_WORD *)&v29[8] = 2080;
              uint64_t v30 = "LayerState::SetProperty: No item matching that element ID";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            uint64_t v21 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v21, "LayerState::SetProperty: No item matching that element ID", -10851);
        }
        return 1;
      case 4135:
        (*(void (**)(LayerState *, BOOL))(*(void *)this + 8))(this, *a3 != 0);
        return 1;
      case 4136:
        LayerState::SetVelocityOffset(this, *a3);
        return 1;
      case 4150:
        LayerState::SetVoiceAllocationMethod(this, *a3);
        return 1;
      case 4151:
        LayerState::SetGateMode(this, *a3);
        return 1;
      case 4152:
        LayerState::SetZoneSelectMethod(this, *a3);
        return 1;
      case 4153:
        LayerState::SetZoneVelocityXFade(this, *a3);
        return 1;
      case 4154:
        LayerState::SetSelectionController((uint64_t)this, *a3);
        return 1;
      case 4155:
        CheckDataSize(a4, 2u);
        LayerState::SetSelectionControllerRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      default:
        return v6;
    }
  }
  if (a2 <= 4280)
  {
    switch(a2)
    {
      case 4221:
        CheckDataSize(a4, 0x48u);
        LayerState::AddEnvelope((char **)this);
      case 4231:
        CheckDataSize(a4, 0x48u);
        int NextAvailable = GetNextAvailableIndex<ZoneState>(*((char **)this + 62), *((char **)this + 63));
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v14 = (**(uint64_t (***)(LayerState *))this)(this);
          *(float *)buf = 4.8153e-34;
          uint64_t v25 = "LayerState.cpp";
          __int16 v26 = 1024;
          int v27 = 551;
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = v14;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = NextAvailable;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddLFO: layer %u adding ID 0x%x", buf, 0x1Eu);
        }
        operator new();
      case 4271:
        CheckDataSize(a4, 0x48u);
        unint64_t v8 = *(float **)a3;
        if (LayerState::VerifyConnection((uint64_t)this, *(int **)a3)) {
          LayerState::AddConnection((uint64_t)this, v8);
        }
        a3[16] = 0;
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD59D);
          *(float *)buf = 4.8153e-34;
          uint64_t v25 = "LayerState.cpp";
          __int16 v26 = 1024;
          int v27 = 1409;
          __int16 v28 = 2080;
          *(void *)uint64_t v29 = v23;
          *(_WORD *)&v29[8] = 2080;
          uint64_t v30 = "Invalid Connection";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        unint64_t v18 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v18, "Invalid Connection", -10851);
    }
  }
  else if (a2 > 4402)
  {
    if (a2 == 4403)
    {
      *(float *)buf = *(float *)a3;
      CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope decay factor limit", 1.0, 100000.0);
      v12.n128_u32[0] = *(_DWORD *)buf;
      if (*(float *)buf != *((float *)this + 41))
      {
        *((float *)this + 41) = *(float *)buf;
        (*(void (**)(LayerState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4403, 0, v12);
      }
      return 1;
    }
    if (a2 == 4404)
    {
      *(float *)buf = *(float *)a3;
      CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope release factor limit", 1.0, 100000.0);
      v9.n128_u32[0] = *(_DWORD *)buf;
      if (*(float *)buf != *((float *)this + 42))
      {
        *((float *)this + 42) = *(float *)buf;
        (*(void (**)(LayerState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4404, 0, v9);
      }
      return 1;
    }
  }
  else
  {
    if (a2 == 4281)
    {
      CheckDataSize(a4, 0x48u);
      LayerState::AddZone((char **)this);
    }
    if (a2 == 4402)
    {
      *(float *)buf = *(float *)a3;
      CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope attack factor limit", 1.0, 100000.0);
      v7.n128_u32[0] = *(_DWORD *)buf;
      if (*(float *)buf != *((float *)this + 40))
      {
        *((float *)this + 40) = *(float *)buf;
        (*(void (**)(LayerState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4402, 0, v7);
      }
      return 1;
    }
  }
  return v6;
}

void sub_21BA3D770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::CopyLFO(char **this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 0x10000000))
  {
    int NextAvailable = GetNextAvailableIndex<ZoneState>(this[62], this[63]);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (*(uint64_t (**)(char **))*this)(this);
      *(_DWORD *)buf = 136315906;
      unint64_t v8 = "LayerState.cpp";
      __int16 v9 = 1024;
      int v10 = 588;
      __int16 v11 = 1024;
      *(_DWORD *)__n128 v12 = v4;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = NextAvailable;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyLFO: layer %u adding ID 0x%x", buf, 0x1Eu);
    }
    operator new();
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
    *(_DWORD *)buf = 136315906;
    unint64_t v8 = "LayerState.cpp";
    __int16 v9 = 1024;
    int v10 = 586;
    __int16 v11 = 2080;
    *(void *)__n128 v12 = v6;
    *(_WORD *)&v12[8] = 2080;
    uint64_t v13 = "LayerState::CopyLFO: No LFO matching that element ID";
    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
  }
  exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
  CAXException::CAXException(exception, "LayerState::CopyLFO: No LFO matching that element ID", -10851);
}

void sub_21BA3DC04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::CopyEnvelope(char **this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 0x20000000))
  {
    int NextAvailable = GetNextAvailableIndex<ZoneState>(this[59], this[60]);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (*(uint64_t (**)(char **))*this)(this);
      *(_DWORD *)buf = 136315906;
      unint64_t v8 = "LayerState.cpp";
      __int16 v9 = 1024;
      int v10 = 575;
      __int16 v11 = 1024;
      *(_DWORD *)__n128 v12 = v4;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = NextAvailable;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyEnvelope: layer %u adding ID 0x%x", buf, 0x1Eu);
    }
    operator new();
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
    *(_DWORD *)buf = 136315906;
    unint64_t v8 = "LayerState.cpp";
    __int16 v9 = 1024;
    int v10 = 573;
    __int16 v11 = 2080;
    *(void *)__n128 v12 = v6;
    *(_WORD *)&v12[8] = 2080;
    uint64_t v13 = "LayerState::CopyEnvelope: No envelope matching that element ID";
    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
  }
  exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
  CAXException::CAXException(exception, "LayerState::CopyEnvelope: No envelope matching that element ID", -10851);
}

void sub_21BA3DF8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::CopyConnection(char **this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 1610612736))
  {
    int NextAvailable = GetNextAvailableIndex<ZoneState>(this[65], this[66]);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (*(uint64_t (**)(char **))*this)(this);
      *(_DWORD *)buf = 136315906;
      unint64_t v8 = "LayerState.cpp";
      __int16 v9 = 1024;
      int v10 = 614;
      __int16 v11 = 1024;
      *(_DWORD *)__n128 v12 = v4;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = NextAvailable;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyConnection: layer %u adding ID 0x%x", buf, 0x1Eu);
    }
    operator new();
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
    *(_DWORD *)buf = 136315906;
    unint64_t v8 = "LayerState.cpp";
    __int16 v9 = 1024;
    int v10 = 612;
    __int16 v11 = 2080;
    *(void *)__n128 v12 = v6;
    *(_WORD *)&v12[8] = 2080;
    uint64_t v13 = "LayerState::CopyConnection: No connection matching that element ID";
    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
  }
  exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
  CAXException::CAXException(exception, "LayerState::CopyConnection: No connection matching that element ID", -10851);
}

void sub_21BA3E2D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::CopyZone(char **this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 1879048192))
  {
    int NextAvailable = GetNextAvailableIndex<ZoneState>(this[56], this[57]);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (*(uint64_t (**)(char **))*this)(this);
      *(_DWORD *)buf = 136315906;
      unint64_t v8 = "LayerState.cpp";
      __int16 v9 = 1024;
      int v10 = 601;
      __int16 v11 = 1024;
      *(_DWORD *)__n128 v12 = v4;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = NextAvailable;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyZone: layer %u adding ID 0x%x", buf, 0x1Eu);
    }
    operator new();
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
    *(_DWORD *)buf = 136315906;
    unint64_t v8 = "LayerState.cpp";
    __int16 v9 = 1024;
    int v10 = 599;
    __int16 v11 = 2080;
    *(void *)__n128 v12 = v6;
    *(_WORD *)&v12[8] = 2080;
    uint64_t v13 = "LayerState::CopyZone: No zone matching that element ID";
    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
  }
  exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
  CAXException::CAXException(exception, "LayerState::CopyZone: No zone matching that element ID", -10851);
}

void sub_21BA3E70C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::RemoveLFO(uint64_t **this, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = ((uint64_t (*)(uint64_t **))**this)(this);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "LayerState.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 641;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveLFO: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  uint64_t v5 = ((uint64_t (*)(uint64_t **, uint64_t, uint64_t))(*this)[4])(this, a2, 0x10000000);
  uint64_t v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "LayerState.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 643;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2080;
      BOOL v17 = "LayerState::RemoveLFO: No LFO matching that element ID";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveLFO: No LFO matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, 0);
  memset(buf, 0, 24);
  int v7 = (**(uint64_t (***)(_DWORD *))v6)(v6);
  LayerState::FindConnectionsUsingID(this[65], this[66], v7, (void **)buf);
  unint64_t v8 = *(uint64_t (*****)(void))&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    __int16 v9 = *(uint64_t (*****)(void))buf;
    do
    {
      int v10 = (***v9)();
      LayerState::RemoveConnection((LayerState *)this, v10);
      ++v9;
    }
    while (v9 != v8);
  }
  ((void (*)(uint64_t **, uint64_t, uint64_t))(*this)[14])(this, 4230, 1);
  __int16 v11 = this[63];
  __n128 v12 = this[62];
  if (v12 != v11)
  {
    while ((_DWORD *)*v12 != v6)
    {
      if (++v12 == v11)
      {
        __n128 v12 = this[63];
        break;
      }
    }
  }
  if (v12 != v11)
  {
    uint64_t v13 = v12 + 1;
    if (v12 + 1 != v11)
    {
      do
      {
        if ((_DWORD *)*v13 != v6) {
          *v12++ = *v13;
        }
        ++v13;
      }
      while (v13 != v11);
      __int16 v11 = this[63];
    }
  }
  if (v11 != v12) {
    this[63] = v12;
  }
  SamplerState::Unref(v6);
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
}

void sub_21BA3EAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void LayerState::RemoveEnvelope(uint64_t **this, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = ((uint64_t (*)(uint64_t **))**this)(this);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "LayerState.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 625;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveEnvelope: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  uint64_t v5 = ((uint64_t (*)(uint64_t **, uint64_t, void))(*this)[4])(this, a2, 0);
  uint64_t v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "LayerState.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 627;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2080;
      BOOL v17 = "LayerState::RemoveEnvelope: No envelope matching that element ID";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveEnvelope: No envelope matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, 0);
  memset(buf, 0, 24);
  int v7 = (**(uint64_t (***)(_DWORD *))v6)(v6);
  LayerState::FindConnectionsUsingID(this[65], this[66], v7, (void **)buf);
  unint64_t v8 = *(uint64_t (*****)(void))&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    __int16 v9 = *(uint64_t (*****)(void))buf;
    do
    {
      int v10 = (***v9)();
      LayerState::RemoveConnection((LayerState *)this, v10);
      ++v9;
    }
    while (v9 != v8);
  }
  ((void (*)(uint64_t **, uint64_t, uint64_t))(*this)[14])(this, 4220, 1);
  __int16 v11 = this[60];
  __n128 v12 = this[59];
  if (v12 != v11)
  {
    while ((_DWORD *)*v12 != v6)
    {
      if (++v12 == v11)
      {
        __n128 v12 = this[60];
        break;
      }
    }
  }
  if (v12 != v11)
  {
    uint64_t v13 = v12 + 1;
    if (v12 + 1 != v11)
    {
      do
      {
        if ((_DWORD *)*v13 != v6) {
          *v12++ = *v13;
        }
        ++v13;
      }
      while (v13 != v11);
      __int16 v11 = this[60];
    }
  }
  if (v11 != v12) {
    this[60] = v12;
  }
  SamplerState::Unref(v6);
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
}

void sub_21BA3EEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t LayerState::RemoveConnection(LayerState *this, int a2)
{
  unsigned int v2 = (unsigned int **)*((void *)this + 65);
  unsigned int v3 = (unsigned int **)*((void *)this + 66);
  if (v2 == v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = *v2;
    if ((**(unsigned int (***)(unsigned int *))*v2)(*v2) == a2) {
      break;
    }
    if (++v2 == v3) {
      return 0;
    }
  }
  (*(void (**)(unsigned int *, void))(*(void *)v6 + 64))(v6, 0);
  uint64_t v8 = *((void *)this + 3);
  __int16 v9 = *(uint64_t **)(v8 + 88);
  int v10 = *(uint64_t **)(v8 + 96);
  if (v9 != v10)
  {
    uint64_t v11 = v6[23];
    do
    {
      uint64_t v12 = *v9++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 152))(v12, v11);
    }
    while (v9 != v10);
  }
  uint64_t v13 = (LayerState *)*((void *)this + 65);
  uint64_t v14 = (LayerState *)*((void *)this + 66);
  uint64_t v15 = v13;
  if (v13 != v14)
  {
    while (*(unsigned int **)v15 != v6)
    {
      uint64_t v15 = (LayerState *)((char *)v15 + 8);
      if (v15 == v14)
      {
        uint64_t v15 = (LayerState *)*((void *)this + 66);
        break;
      }
    }
  }
  if (v15 != v14)
  {
    uint64_t v16 = (LayerState *)((char *)v15 + 8);
    if ((LayerState *)((char *)v15 + 8) != v14)
    {
      do
      {
        if (*(unsigned int **)v16 != v6)
        {
          *(void *)uint64_t v15 = *(void *)v16;
          uint64_t v15 = (LayerState *)((char *)v15 + 8);
        }
        uint64_t v16 = (LayerState *)((char *)v16 + 8);
      }
      while (v16 != v14);
      uint64_t v14 = (LayerState *)*((void *)this + 66);
      uint64_t v13 = (LayerState *)*((void *)this + 65);
    }
  }
  if (v14 != v15)
  {
    *((void *)this + 66) = v15;
    uint64_t v14 = v15;
  }
  LayerState::SortConnections(v13, v14);
  uint64_t v7 = 1;
  (*(void (**)(LayerState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 4270, 1);
  SamplerState::Unref(v6);
  return v7;
}

uint64_t LayerState::RemoveZone(LayerState **this, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = (*(uint64_t (**)(LayerState **))*this)(this);
    *(_DWORD *)buf = 136315906;
    uint64_t v14 = "LayerState.cpp";
    __int16 v15 = 1024;
    int v16 = 657;
    __int16 v17 = 1024;
    *(_DWORD *)uint64_t v18 = v4;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveZone: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  uint64_t v5 = (*((uint64_t (**)(LayerState **, uint64_t, uint64_t))*this + 4))(this, a2, 1879048192);
  uint64_t v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      uint64_t v14 = "LayerState.cpp";
      __int16 v15 = 1024;
      int v16 = 659;
      __int16 v17 = 2080;
      *(void *)uint64_t v18 = v12;
      *(_WORD *)&v18[8] = 2080;
      CFArrayRef v19 = "LayerState::RemoveZone: No zone matching that element ID";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveZone: No zone matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, 0);
  (*((void (**)(LayerState **, uint64_t, uint64_t))*this + 14))(this, 4280, 1);
  uint64_t v7 = this[57];
  uint64_t v8 = this[56];
  if (v8 != v7)
  {
    while (*(_DWORD **)v8 != v6)
    {
      uint64_t v8 = (LayerState *)((char *)v8 + 8);
      if (v8 == v7)
      {
        uint64_t v8 = this[57];
        break;
      }
    }
  }
  if (v8 != v7)
  {
    __int16 v9 = (LayerState *)((char *)v8 + 8);
    if ((LayerState *)((char *)v8 + 8) != v7)
    {
      do
      {
        if (*(_DWORD **)v9 != v6)
        {
          *(void *)uint64_t v8 = *(void *)v9;
          uint64_t v8 = (LayerState *)((char *)v8 + 8);
        }
        __int16 v9 = (LayerState *)((char *)v9 + 8);
      }
      while (v9 != v7);
      uint64_t v7 = this[57];
    }
  }
  if (v7 != v8) {
    this[57] = v8;
  }
  SamplerState::Unref(v6);
  return LayerState::SortZones(this[56], this[57]);
}

void sub_21BA3F3BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::AddEnvelope(char **this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int NextAvailable = GetNextAvailableIndex<ZoneState>(this[59], this[60]);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v3 = (*(uint64_t (**)(char **))*this)(this);
    int v4 = 136315906;
    uint64_t v5 = "LayerState.cpp";
    __int16 v6 = 1024;
    int v7 = 540;
    __int16 v8 = 1024;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = NextAvailable;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddEnvelope: layer %u adding ID 0x%x", (uint8_t *)&v4, 0x1Eu);
  }
  operator new();
}

void sub_21BA3F638(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40D6EAEC2ALL);
  _Unwind_Resume(a1);
}

uint64_t LayerState::VerifyConnection(uint64_t a1, int *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  unsigned int v5 = v4 & 0xF0000000;
  if ((v4 & 0xF0000000) == 0)
  {
    if ((v4 - 1000) < 0xFFFFFD6A) {
      goto LABEL_10;
    }
LABEL_6:
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    int v22 = 136315394;
    v23 = "LayerState.cpp";
    __int16 v24 = 1024;
    int v25 = 715;
    int v9 = &_os_log_internal;
    __int16 v10 = "%25s:%-5d  Invalid connection source type or index";
LABEL_38:
    _os_log_impl(&dword_21B9BB000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v22, 0x12u);
    return 0;
  }
  if (v5 == 0x20000000)
  {
    __int16 v6 = *(uint64_t (**)(void))(*(void *)a1 + 32);
  }
  else
  {
    if (v5 != 0x10000000)
    {
      BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v14) {
        return result;
      }
      int v22 = 136315394;
      v23 = "LayerState.cpp";
      __int16 v24 = 1024;
      int v25 = 711;
      int v9 = &_os_log_internal;
      __int16 v10 = "%25s:%-5d  Invalid connection source";
      goto LABEL_38;
    }
    __int16 v6 = *(uint64_t (**)(void))(*(void *)a1 + 32);
  }
  if (!v6()) {
    goto LABEL_6;
  }
LABEL_10:
  int v11 = a2[6];
  unsigned int v12 = v11 & 0xF0000000;
  if ((v11 & 0xF0000000) == 0x20000000 || v12 == 0x10000000)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
    {
LABEL_14:
      BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      int v22 = 136315394;
      v23 = "LayerState.cpp";
      __int16 v24 = 1024;
      int v25 = 734;
      int v9 = &_os_log_internal;
      __int16 v10 = "%25s:%-5d  Invalid connection control source index";
      goto LABEL_38;
    }
  }
  else
  {
    if (v12)
    {
      BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v17) {
        return result;
      }
      int v22 = 136315394;
      v23 = "LayerState.cpp";
      __int16 v24 = 1024;
      int v25 = 730;
      int v9 = &_os_log_internal;
      __int16 v10 = "%25s:%-5d  Invalid connection control source";
      goto LABEL_38;
    }
    if ((v11 - 1000) >= 0xFFFFFD6A) {
      goto LABEL_14;
    }
  }
  int v15 = a2[1];
  uint64_t v16 = v15 & 0xF00FFFFF;
  switch(((v15 & 0xF0000000) - 0x10000000) >> 28)
  {
    case 0u:
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v16, 0x10000000);
      goto LABEL_29;
    case 1u:
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v16, 0x20000000);
      goto LABEL_29;
    case 2u:
    case 3u:
    case 4u:
      if (!a2[1]) {
        goto LABEL_30;
      }
      goto LABEL_36;
    case 5u:
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v16, 1610612736);
LABEL_29:
      if (v18) {
        goto LABEL_30;
      }
LABEL_36:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v21) {
        return result;
      }
      int v22 = 136315394;
      v23 = "LayerState.cpp";
      __int16 v24 = 1024;
      int v25 = 759;
      int v9 = &_os_log_internal;
      __int16 v10 = "%25s:%-5d  Invalid connection destination index";
      goto LABEL_38;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 136315394;
        v23 = "LayerState.cpp";
        __int16 v24 = 1024;
        int v25 = 756;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Invalid connection destination component", (uint8_t *)&v22, 0x12u);
      }
LABEL_30:
      unsigned int v19 = a2[1] & 0xFF00000;
      uint64_t result = 1;
      if (v19 > 0x20FFFFF)
      {
        if ((a2[1] & 0xFF00000u) <= 0x29FFFFF)
        {
          if ((a2[1] & 0xFF00000u) <= 0x22FFFFF)
          {
            if (v19 == 34603008) {
              return result;
            }
            int v20 = 35651584;
          }
          else
          {
            if (v19 == 36700160 || v19 == 37748736) {
              return result;
            }
            int v20 = 42991616;
          }
        }
        else if ((a2[1] & 0xFF00000u) > 0x3EFFFFF)
        {
          if (v19 == 66060288 || v19 == 0x4000000) {
            return result;
          }
          int v20 = 68157440;
        }
        else
        {
          if (v19 == 44040192 || v19 == 63963136) {
            return result;
          }
          int v20 = 65011712;
        }
LABEL_64:
        if (v19 == v20) {
          return result;
        }
        goto LABEL_65;
      }
      if ((a2[1] & 0xFF00000u) >= 0xD00000)
      {
        if ((a2[1] & 0xFF00000u) <= 0x15FFFFF)
        {
          if (v19 == 13631488) {
            return result;
          }
          int v20 = 22020096;
        }
        else
        {
          if (v19 == 23068672 || v19 == 32505856) {
            return result;
          }
          int v20 = 0x2000000;
        }
        goto LABEL_64;
      }
      if ((a2[1] & 0xFF00000u) < 0x300000)
      {
        if (v19 == 0x100000 || v19 == 0x200000) {
          return result;
        }
      }
      else if (v19 == 3145728 || v19 == 11534336 || v19 == 12582912)
      {
        return result;
      }
LABEL_65:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 136315394;
        v23 = "LayerState.cpp";
        __int16 v24 = 1024;
        int v25 = 789;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Invalid connection destination property", (uint8_t *)&v22, 0x12u);
      }
      return 1;
  }
}

void LayerState::AddConnection(uint64_t a1, float *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  GetNextAvailableIndex<ZoneState>(*(char **)(a1 + 520), *(char **)(a1 + 528));
  if ((*((_DWORD *)a2 + 4) - 1) < 5)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      float v3 = *a2;
      int v4 = *((_DWORD *)a2 + 1);
      double v5 = a2[2];
      double v6 = a2[3];
      int v8 = 136316418;
      int v9 = "LayerState.cpp";
      __int16 v10 = 1024;
      int v11 = 823;
      __int16 v12 = 1024;
      *(float *)BOOL v13 = v3;
      *(_WORD *)&v13[4] = 1024;
      *(_DWORD *)&v13[6] = v4;
      *(_WORD *)BOOL v14 = 2048;
      *(double *)&v14[2] = v5;
      __int16 v15 = 2048;
      double v16 = v6;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddConnection: src 0x%x dst 0x%x min %f max %f", (uint8_t *)&v8, 0x32u);
    }
    if (*((_DWORD *)a2 + 9)) {
      operator new();
    }
    operator new();
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v17, 0xFFFFD581);
    int v8 = 136315906;
    int v9 = "LayerState.cpp";
    __int16 v10 = 1024;
    int v11 = 819;
    __int16 v12 = 2080;
    *(void *)BOOL v13 = v17;
    *(_WORD *)&v13[8] = 2080;
    *(void *)BOOL v14 = "LayerState::AddConnection: Invalid connection transform";
    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&v8, 0x26u);
  }
  exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
  CAXException::CAXException(exception, "LayerState::AddConnection: Invalid connection transform", -10879);
}

void sub_21BA3FFF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::AddZone(char **this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int NextAvailable = GetNextAvailableIndex<ZoneState>(this[56], this[57]);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v3 = (*(uint64_t (**)(char **))*this)(this);
    int v4 = 136315906;
    double v5 = "LayerState.cpp";
    __int16 v6 = 1024;
    int v7 = 562;
    __int16 v8 = 1024;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = NextAvailable;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddZone: layer %u adding ID 0x%x", (uint8_t *)&v4, 0x1Eu);
  }
  operator new();
}

void sub_21BA40298(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40A72B6B85);
  _Unwind_Resume(a1);
}

unint64_t GetNextAvailableIndex<ZoneState>(char *a1, char *a2)
{
  unint64_t v2 = (unint64_t)(a2 - a1) >> 3;
  if (a2 != a1)
  {
    int v4 = a1;
    do
    {
      double v5 = *(unsigned __int8 (****)(void))v4;
      if (v2 <= (***(unsigned __int8 (****)(void))v4)(*(void *)v4)) {
        unint64_t v2 = (**v5)(v5) + 1;
      }
      v4 += 8;
    }
    while (v4 != a2);
  }
  return v2;
}

void LayerState::FindConnectionsUsingID(uint64_t *a1, uint64_t *a2, int a3, void **a4)
{
  if (a1 != a2)
  {
    int v7 = a1;
    do
    {
      uint64_t v8 = *v7;
      if (*(_DWORD *)(*v7 + 92) == a3 || (*(_DWORD *)(v8 + 96) & 0xF00FFFFF) == a3 || *(_DWORD *)(v8 + 116) == a3)
      {
        __int16 v10 = a4[1];
        unint64_t v9 = (unint64_t)a4[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = ((char *)v10 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v9 - (void)*a4;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          BOOL v17 = (void *)(v15 + 8 * v12);
          *BOOL v17 = v8;
          int v11 = v17 + 1;
          unsigned int v19 = (char *)*a4;
          uint64_t v18 = (char *)a4[1];
          if (v18 != *a4)
          {
            do
            {
              uint64_t v20 = *((void *)v18 - 1);
              v18 -= 8;
              *--BOOL v17 = v20;
            }
            while (v18 != v19);
            uint64_t v18 = (char *)*a4;
          }
          *a4 = v17;
          a4[1] = v11;
          a4[2] = (void *)(v15 + 8 * v16);
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *__int16 v10 = v8;
          int v11 = v10 + 1;
        }
        a4[1] = v11;
      }
      ++v7;
    }
    while (v7 != a2);
  }
}

uint64_t LayerState::GetProperty(LayerState *this, int a2, unsigned char *a3)
{
  uint64_t result = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2 <= 4219)
  {
    switch(a2)
    {
      case 4120:
        __int16 v6 = (const void *)(*(uint64_t (**)(LayerState *))(*(void *)this + 80))(this);
        int v7 = v6;
        if (v6) {
          CFRetain(v6);
        }
        *(void *)a3 = v7;
        return 1;
      case 4121:
        int v13 = *((unsigned __int8 *)this + 48);
        goto LABEL_54;
      case 4122:
        int v13 = *((_DWORD *)this + 39);
        goto LABEL_54;
      case 4123:
        int v13 = *((_DWORD *)this + 24);
        goto LABEL_54;
      case 4124:
        float v14 = *((float *)this + 25);
        goto LABEL_33;
      case 4125:
        float v14 = *((float *)this + 26);
        goto LABEL_33;
      case 4126:
        float v14 = *((float *)this + 27) * 200.0;
LABEL_33:
        *(float *)a3 = v14;
        return 1;
      case 4127:
        int v13 = *((char *)this + 152);
        goto LABEL_54;
      case 4128:
        *a3 = *((unsigned char *)this + 88);
        char v15 = *((unsigned char *)this + 89);
        goto LABEL_46;
      case 4129:
        *a3 = *((unsigned char *)this + 90);
        char v15 = *((unsigned char *)this + 91);
        goto LABEL_46;
      case 4130:
        int v13 = *((unsigned __int8 *)this + 154);
        goto LABEL_54;
      case 4131:
        int v13 = *((_DWORD *)this + 37);
        goto LABEL_54;
      case 4136:
        int v13 = *((char *)this + 153);
        goto LABEL_54;
      case 4150:
        int v13 = *((_DWORD *)this + 36);
        goto LABEL_54;
      case 4151:
        int v13 = *((_DWORD *)this + 35);
        goto LABEL_54;
      case 4152:
        int v13 = *((_DWORD *)this + 33);
        goto LABEL_54;
      case 4153:
        int v13 = *((unsigned __int8 *)this + 136);
        goto LABEL_54;
      case 4154:
        int v13 = *((_DWORD *)this + 28);
        goto LABEL_54;
      case 4155:
        *a3 = *((unsigned char *)this + 92);
        char v15 = *((unsigned char *)this + 93);
LABEL_46:
        a3[1] = v15;
        return 1;
      default:
        return result;
    }
  }
  if (a2 > 4249)
  {
    if (a2 > 4269)
    {
      if (a2 == 4270)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v18 = (**(uint64_t (***)(LayerState *))this)(this);
          uint64_t v19 = (*((void *)this + 66) - *((void *)this + 65)) >> 3;
          int v22 = 136315906;
          v23 = "LayerState.cpp";
          __int16 v24 = 1024;
          int v25 = 1220;
          __int16 v26 = 1024;
          int v27 = v18;
          __int16 v28 = 1024;
          int v29 = v19;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::GetProperty: layer %u returning %u total connections", (uint8_t *)&v22, 0x1Eu);
        }
        uint64_t v20 = *((void *)this + 65);
        if (((*((void *)this + 66) - v20) & 0x7FFFFFFF8) == 0) {
          return 1;
        }
        unint64_t v21 = 0;
        do
        {
          *(_DWORD *)&a3[4 * v21] = (***(uint64_t (****)(void))(v20 + 8 * v21))(*(void *)(v20 + 8 * v21));
          ++v21;
          uint64_t v20 = *((void *)this + 65);
          uint64_t result = 1;
        }
        while (v21 < ((unint64_t)(*((void *)this + 66) - v20) >> 3));
      }
      else
      {
        if (a2 != 4280) {
          return result;
        }
        uint64_t v11 = *((void *)this + 56);
        if (((*((void *)this + 57) - v11) & 0x7FFFFFFF8) == 0) {
          return 1;
        }
        unint64_t v12 = 0;
        do
        {
          *(_DWORD *)&a3[4 * v12] = (***(uint64_t (****)(void))(v11 + 8 * v12))(*(void *)(v11 + 8 * v12));
          ++v12;
          uint64_t v11 = *((void *)this + 56);
          uint64_t result = 1;
        }
        while (v12 < ((unint64_t)(*((void *)this + 57) - v11) >> 3));
      }
      return result;
    }
    if (a2 == 4250)
    {
      __int16 v10 = (uint64_t (***)(void))*((void *)this + 22);
    }
    else
    {
      if (a2 != 4260) {
        return result;
      }
      __int16 v10 = (uint64_t (***)(void))*((void *)this + 24);
    }
LABEL_52:
    *(_DWORD *)a3 = (**v10)(v10);
    return 1;
  }
  if (a2 > 4232)
  {
    if (a2 == 4233)
    {
      int v13 = 7;
LABEL_54:
      *(_DWORD *)a3 = v13;
      return 1;
    }
    if (a2 != 4240) {
      return result;
    }
    __int16 v10 = (uint64_t (***)(void))*((void *)this + 23);
    goto LABEL_52;
  }
  if (a2 != 4220)
  {
    if (a2 != 4230) {
      return result;
    }
    uint64_t v8 = *((void *)this + 62);
    if (((*((void *)this + 63) - v8) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v9 = 0;
      do
      {
        *(_DWORD *)&a3[4 * v9] = (***(uint64_t (****)(void))(v8 + 8 * v9))(*(void *)(v8 + 8 * v9));
        ++v9;
        uint64_t v8 = *((void *)this + 62);
        uint64_t result = 1;
      }
      while (v9 < ((unint64_t)(*((void *)this + 63) - v8) >> 3));
      return result;
    }
    return 1;
  }
  uint64_t v16 = *((void *)this + 59);
  if (((*((void *)this + 60) - v16) & 0x7FFFFFFF8) == 0) {
    return 1;
  }
  unint64_t v17 = 0;
  do
  {
    *(_DWORD *)&a3[4 * v17] = (***(uint64_t (****)(void))(v16 + 8 * v17))(*(void *)(v16 + 8 * v17));
    ++v17;
    uint64_t v16 = *((void *)this + 59);
    uint64_t result = 1;
  }
  while (v17 < ((unint64_t)(*((void *)this + 60) - v16) >> 3));
  return result;
}

void *LayerState::ResetToDefaults(LayerState *this, int a2)
{
  *((unsigned char *)this + 48) = 1;
  (*(void (**)(LayerState *, __CFString *, uint64_t))(*(void *)this + 72))(this, &stru_26CBB4BA8, 1);
  *((_DWORD *)this + 22) = 2130738944;
  *((_WORD *)this + 46) = 32512;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 130) = -1;
  *((_DWORD *)this + 33) = 30;
  *(void *)((char *)this + 140) = 0x50000000ALL;
  *((_DWORD *)this + 37) = -1;
  *((unsigned char *)this + 152) = 0;
  *((unsigned char *)this + 154) = 1;
  *((int32x2_t *)this + 20) = vdup_n_s32(0x47C35000u);
  *((_DWORD *)this + 42) = 1203982336;
  if (a2)
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 22) + 8))(*((void *)this + 22), 1);
    (*(void (**)(void, uint64_t))(**((void **)this + 23) + 8))(*((void *)this + 23), 1);
    (*(void (**)(void, uint64_t))(**((void **)this + 24) + 8))(*((void *)this + 24), 1);
    int v4 = (uint64_t *)*((void *)this + 56);
    double v5 = (uint64_t *)*((void *)this + 57);
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 8))(v6, 1);
    }
    int v7 = (uint64_t *)*((void *)this + 59);
    uint64_t v8 = (uint64_t *)*((void *)this + 60);
    while (v7 != v8)
    {
      uint64_t v9 = *v7++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 8))(v9, 1);
    }
    __int16 v10 = (uint64_t *)*((void *)this + 62);
    uint64_t v11 = (uint64_t *)*((void *)this + 63);
    while (v10 != v11)
    {
      uint64_t v12 = *v10++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 8))(v12, 1);
    }
  }
  *((_WORD *)this + 100) = 0;
  LayerState::UnregisterConnections(this);
  int v13 = (_DWORD **)*((void *)this + 65);
  float v14 = (_DWORD **)*((void *)this + 66);
  if (v13 != v14)
  {
    do
    {
      if (*v13) {
        SamplerState::Unref(*v13);
      }
      ++v13;
    }
    while (v13 != v14);
    int v13 = (_DWORD **)*((void *)this + 65);
  }
  *((void *)this + 66) = v13;
  LayerState::CreateDefaultConnections((uint64_t)this, sDefaultConnections);

  return LayerState::RegisterConnections(this);
}

uint64_t LayerState::CreateDefaultConnections(uint64_t a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "LayerState.cpp";
    __int16 v17 = 1024;
    int v18 = 252;
    __int16 v19 = 1024;
    int v20 = v4;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CreateDefaultConnections (layer %u)", buf, 0x18u);
  }
  (**(void (***)(uint64_t))a1)(a1);
  double v5 = *(LayerState **)(a1 + 528);
  if (v5 != *(LayerState **)(a1 + 520))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v16 = "LayerState.cpp";
      __int16 v17 = 1024;
      int v18 = 259;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: connection list not empty", buf, 0x12u);
    }
    __break(1u);
  }
  int v6 = *a2;
  if (*a2)
  {
    int v7 = a2 + 8;
    uint64_t v8 = (void *)(a1 + 496);
    if ((v6 & 0xF0000000) != 0x10000000)
    {
      if ((v6 & 0xF0000000) != 0x20000000) {
        goto LABEL_9;
      }
      uint64_t v8 = (void *)(a1 + 472);
    }
    uint64_t v9 = *(void (****)(void))(*v8 + 8 * *a2);
    (**v9)(v9);
LABEL_9:
    int v10 = a2[6];
    uint64_t v11 = (void *)(a1 + 496);
    if ((v10 & 0xF0000000) != 0x10000000)
    {
      if ((v10 & 0xF0000000) != 0x20000000) {
        goto LABEL_13;
      }
      uint64_t v11 = (void *)(a1 + 472);
    }
    uint64_t v12 = *(void (****)(void))(*v11 + 8 * v10);
    (**v12)(v12);
LABEL_13:
    unsigned int v13 = *(v7 - 7) & 0xF0000000;
    switch(v13)
    {
      case 0x30000000u:
        (***(void (****)(void))(a1 + 176))(*(void *)(a1 + 176));
        break;
      case 0x40000000u:
        (***(void (****)(void))(a1 + 184))(*(void *)(a1 + 184));
        break;
      case 0x50000000u:
        (***(void (****)(void))(a1 + 192))(*(void *)(a1 + 192));
        break;
    }
    operator new();
  }
  return LayerState::SortConnections(*(LayerState **)(a1 + 528), v5);
}

void sub_21BA41034(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40BE464577);
  _Unwind_Resume(a1);
}

void LayerState::LayerState(LayerState *this, int a2, SamplerState *a3)
{
  SamplerState::SamplerState(this, 6, a2, a3, 0x20u);
  *(void *)uint64_t v3 = &unk_26CBA7878;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0xFFFFFFFF00000000;
  *(void *)(v3 + 120) = 0;
  *(_WORD *)(v3 + 128) = 1;
  *(unsigned char *)(v3 + 130) = -1;
  *(_DWORD *)(v3 + 132) = 30;
  *(unsigned char *)(v3 + 136) = 0;
  *(void *)(v3 + 140) = 0x50000000ALL;
  *(_DWORD *)(v3 + 148) = -1;
  *(_WORD *)(v3 + 152) = 0;
  *(unsigned char *)(v3 + 154) = 1;
  *(_DWORD *)(v3 + 156) = -1;
  *(int32x2_t *)(v3 + 160) = vdup_n_s32(0x47C35000u);
  *(_DWORD *)(v3 + 168) = 1203982336;
  operator new();
}

void sub_21BA415E8(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v2, 0x10E1C402E53C1ECLL);
  double v5 = (void *)*((void *)v1 + 65);
  if (v5)
  {
    *((void *)v1 + 66) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)v1 + 62);
  if (v6)
  {
    *((void *)v1 + 63) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)v1 + 59);
  if (v7)
  {
    *((void *)v1 + 60) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    *((void *)v1 + 57) = v8;
    operator delete(v8);
  }
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

uint64_t LayerState::NotifyConnectionChange(LayerState *this, int a2, uint64_t a3, uint64_t a4)
{
  if ((a2 | 2) == 0x10CE)
  {
    uint64_t v5 = *((void *)this + 3);
    int v6 = *(uint64_t **)(v5 + 88);
    int v7 = *(uint64_t **)(v5 + 96);
    if (v6 != v7)
    {
      do
      {
        uint64_t v10 = *v6++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 152))(v10, a3);
      }
      while (v6 != v7);
      uint64_t v11 = *((void *)this + 3);
      uint64_t v12 = *(uint64_t **)(v11 + 88);
      unsigned int v13 = *(uint64_t **)(v11 + 96);
      while (v12 != v13)
      {
        uint64_t v14 = *v12++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 144))(v14, a4);
      }
    }
  }
  char v15 = (LayerState *)*((void *)this + 65);
  uint64_t v16 = (LayerState *)*((void *)this + 66);

  return LayerState::SortConnections(v15, v16);
}

uint64_t LayerState::GetPropertyInfo(LayerState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  int v4 = (int)this;
  uint64_t result = 0;
  int v6 = 8;
  switch(v4)
  {
    case 4120:
      goto LABEL_5;
    case 4121:
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4130:
    case 4131:
    case 4134:
    case 4135:
    case 4136:
    case 4150:
    case 4151:
    case 4152:
    case 4153:
    case 4154:
      int v6 = 4;
      goto LABEL_5;
    case 4128:
    case 4129:
    case 4155:
      int v6 = 2;
      goto LABEL_5;
    case 4133:
      int v6 = 72;
LABEL_5:
      *a2 = v6;
      *(unsigned char *)a3 = 1;
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void LayerState::AddZoneFromRegion(LayerState *this, const DlsRegion *a2)
{
}

void sub_21BA41BBC(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40A72B6B85);
  _Unwind_Resume(a1);
}

void LayerState::SetSelectionLayerIndex(LayerState *this, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v5 = a2;
  if (a2 == -1)
  {
    unsigned int v3 = -1;
  }
  else
  {
    CHECK_RANGE<unsigned int>(&v5, 0, 0xFFFu, (uint64_t)"Invalid selection layer index");
    unsigned int v3 = v5;
  }
  if (v3 != *((_DWORD *)this + 29))
  {
    *((_DWORD *)this + 29) = v3;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (**(uint64_t (***)(LayerState *))this)(this);
      *(_DWORD *)buf = 136315906;
      int v7 = "LayerState.cpp";
      __int16 v8 = 1024;
      int v9 = 2187;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 1024;
      unsigned int v13 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionLayerIndex: Layer %u index %u", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, void))(*(void *)this + 112))(this, 4156, 0);
  }
}

void LayerState::SetSelectionKeyNum(LayerState *this, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v5 = a2;
  CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"Invalid selection key number");
  unsigned int v3 = v5;
  if (v5 != *((unsigned __int8 *)this + 130))
  {
    *((unsigned char *)this + 130) = v5;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (**(uint64_t (***)(LayerState *))this)(this);
      *(_DWORD *)buf = 136315906;
      int v7 = "LayerState.cpp";
      __int16 v8 = 1024;
      int v9 = 2200;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 1024;
      unsigned int v13 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionKeyNum: Layer %u key %d", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, void))(*(void *)this + 112))(this, 4157, 0);
  }
}

uint64_t GlobalState::DoNotify(GlobalState *this)
{
  uint64_t result = *((void *)this + 14);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 432))();
  }
  return result;
}

uint64_t *GlobalState::Notify(GlobalState *this, uint64_t a2, uint64_t a3)
{
  v11[4] = *MEMORY[0x263EF8340];
  if ((int)a2 <= 4121)
  {
    if (a2 && a2 != 2) {
      goto LABEL_13;
    }
LABEL_3:
    int v6 = (uint64_t *)*((void *)this + 11);
    int v7 = (uint64_t *)*((void *)this + 12);
    while (v6 != v7)
    {
      uint64_t v8 = *v6++;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, a2, a3);
    }
    goto LABEL_13;
  }
  if ((a2 - 4122) < 5) {
    goto LABEL_3;
  }
  if (a2 == 4142)
  {
    int v9 = (ausdk::AUScope *)(*((void *)this + 14) + 176);
    v11[0] = &unk_26CBB35C8;
    v11[3] = v11;
    SamplerBase::DoForGroupElements(v9, (uint64_t)v11);
    std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](v11);
    goto LABEL_13;
  }
  if (a2 == 4131) {
    goto LABEL_3;
  }
LABEL_13:

  return SamplerState::Notify(this, a2, a3);
}

void sub_21BA4203C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void GlobalState::~GlobalState(GlobalState *this)
{
  GlobalState::~GlobalState(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  GlobalState *v8;
  uint64_t v9;

  int v9 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26CBA8018;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v3 = 136315650;
    int v4 = "GlobalState.cpp";
    unsigned int v5 = 1024;
    int v6 = 60;
    int v7 = 2048;
    uint64_t v8 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::~GlobalState(%p)", (uint8_t *)&v3, 0x1Cu);
  }
  *((void *)this + 14) = 0;
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((void **)this + 19));
  std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(*((void **)this + 16));
  *((void *)this + 15) = (char *)this + 128;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  SamplerState::~SamplerState(this);
}

_DWORD *GlobalState::Disconnect(_DWORD *this)
{
  uint64_t v1 = (_DWORD **)*((void *)this + 11);
  uint64_t v2 = (_DWORD **)*((void *)this + 12);
  while (v1 != v2)
  {
    this = *v1;
    if (*v1) {
      this = SamplerState::Unref(this);
    }
    ++v1;
  }
  return this;
}

uint64_t GlobalState::Restore(GlobalState *this, const CACFDictionary *a2)
{
  uint64_t v4 = GlobalState::RestoreWithoutGlobalState(this, a2);
  if (!v4)
  {
    if (CACFDictionary::GetUInt32(a2, @"output", &v6)) {
      GlobalState::SetOutputScope(this, v6);
    }
    if (CACFDictionary::GetUInt32(a2, @"voice count", &v6)) {
      GlobalState::SetVoiceCount(this, v6);
    }
    if (CACFDictionary::GetSInt32(a2, @"coarse tune", (int *)&v6)) {
      GlobalState::SetCoarseTuning(this, v6);
    }
    if (CACFDictionary::GetFloat32(a2, @"fine tune", (float *)&v6)) {
      GlobalState::SetFineTuning((float *)this, *(float *)&v6);
    }
    if (CACFDictionary::GetFloat32(a2, @"pan", (float *)&v6)) {
      GlobalState::SetPan((float *)this, *(float *)&v6 * 0.005);
    }
  }
  return v4;
}

uint64_t GlobalState::RestoreWithoutGlobalState(GlobalState *this, const CACFDictionary *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v2 = (InstrumentManager ***)*((void *)this + 11);
  if (*((InstrumentManager ****)this + 12) == v2) {
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v5 = *v2;
  float v35 = 0.0;
  if (CACFDictionary::GetFloat32(a2, @"AU version", &v35))
  {
    unsigned int v6 = v35;
    unsigned int v7 = (float)((float)(v35 - (float)v35) * 10.0);
    if (v35 >= 2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315906;
        *(void *)&buf[1] = "GlobalState.cpp";
        __int16 v41 = 1024;
        int v42 = 424;
        __int16 v43 = 1024;
        *(_DWORD *)v44 = v6;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v7;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot parse version %u.%u preset instrument", (uint8_t *)buf, 0x1Eu);
      }
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buffer, 0xFFFFD589);
        buf[0] = 136315906;
        *(void *)&buf[1] = "GlobalState.cpp";
        __int16 v41 = 1024;
        int v42 = 425;
        __int16 v43 = 2080;
        *(void *)v44 = buffer;
        *(_WORD *)&v44[8] = 2080;
        *(void *)__int16 v45 = "Unsupported instrument version";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Unsupported instrument version", -10871);
    }
  }
  else
  {
    unsigned int v7 = 0;
    unsigned int v6 = 1;
  }
  *((_DWORD *)this + 42) = v6;
  *((_DWORD *)this + 43) = v7;
  InstrumentManager::ClearFileReferences(v5[14]);
  CFDictionaryRef theDict = 0;
  if (!CACFDictionary::GetDictionary(a2, @"file-references", &theDict))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    buf[0] = 136315394;
    *(void *)&buf[1] = "InstrumentManager.cpp";
    __int16 v41 = 1024;
    int v42 = 86;
    int v9 = &_os_log_internal;
    __int16 v10 = "%25s:%-5d InstrumentManager::LoadFileReferences: No ext file refs dictionary";
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_17;
  }
  if (CFDictionaryGetCount(theDict)) {
    operator new[]();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "InstrumentManager.cpp";
    __int16 v41 = 1024;
    int v42 = 81;
    int v9 = &_os_log_internal;
    __int16 v10 = "%25s:%-5d InstrumentManager::LoadFileReferences: No file references in document";
    os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
LABEL_17:
    _os_log_impl(&dword_21B9BB000, v9, v11, v10, (uint8_t *)buf, 0x12u);
  }
LABEL_18:
  BOOL v34 = 0;
  if (CACFDictionary::GetDictionary(a2, @"Instrument", &v34))
  {
    v32 = (__CFString *)v34;
    __int16 v33 = 0;
    *(void *)buffer = 0;
    LOWORD(v38) = 0;
    CACFDictionary::GetCACFDictionary((CACFDictionary *)&v32, @"Banks", (CACFDictionary *)buffer);
    if (*(void *)buffer)
    {
      CACFDictionary::Size((CACFDictionary *)buffer);
      operator new[]();
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "InstrumentManager.cpp";
      __int16 v41 = 1024;
      int v42 = 232;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: no dictionary for banks", (uint8_t *)buf, 0x12u);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)buffer);
    unsigned int v29 = (*((uint64_t (**)(InstrumentManager **, __CFString **))*v5 + 6))(v5, &v32);
    if (!v29)
    {
      unsigned int v13 = (uint64_t *)*((void *)this + 11);
      if (*((uint64_t **)this + 12) == v13) {
        std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v31 = *v13;
      unint64_t v14 = *(void *)(v31 + 240) - *(void *)(v31 + 232);
      if ((v14 & 0x7FFFFFFF8) != 0)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (char *)this + 120;
        __int16 v17 = &_os_log_internal;
        uint64_t v30 = (v14 >> 3);
        while (1)
        {
          uint64_t v18 = *(void *)(*(void *)(v31 + 232) + 8 * v15);
          unint64_t v19 = *(void *)(v18 + 528) - *(void *)(v18 + 520);
          if ((v19 & 0x7FFFFFFF8) != 0) {
            break;
          }
LABEL_48:
          if (++v15 == v30) {
            goto LABEL_49;
          }
        }
        uint64_t v20 = 0;
        uint64_t v21 = (v19 >> 3);
        while (1)
        {
          uint64_t v22 = *(void *)(*(void *)(v18 + 520) + 8 * v20);
          int v23 = *(_DWORD *)(v22 + 92);
          if ((v23 & 0xFFFFFFF8) == 0x3E8) {
            break;
          }
          if (v21 == ++v20) {
            goto LABEL_48;
          }
        }
        float v25 = *(float *)(v22 + 100);
        float v24 = *(float *)(v22 + 104);
        int v26 = *(_DWORD *)(v22 + 124);
        if (*(unsigned char *)(v22 + 108))
        {
          if (v25 == (float)-v24)
          {
            if (v26 == 1)
            {
LABEL_35:
              float v27 = *(float *)(v22 + 104);
              float v24 = *(float *)(v22 + 100);
              goto LABEL_44;
            }
          }
          else if (v26 != 2)
          {
            goto LABEL_35;
          }
          float v27 = *(float *)(v22 + 104);
          float v24 = *(float *)(v22 + 100);
          goto LABEL_43;
        }
        if (v25 == (float)-v24)
        {
          if (v26 == 1)
          {
LABEL_38:
            float v27 = *(float *)(v22 + 100);
            goto LABEL_44;
          }
        }
        else if (v26 != 2)
        {
          goto LABEL_38;
        }
        float v27 = *(float *)(v22 + 100);
LABEL_43:
        float v25 = 0.0;
LABEL_44:
        int v28 = *(_DWORD *)(v22 + 96);
        *(_DWORD *)buffer = v28;
        *(float *)&buffer[4] = v27;
        float v38 = v24;
        float v39 = v25;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136316674;
          *(void *)&buf[1] = "GlobalState.cpp";
          __int16 v41 = 1024;
          int v42 = 535;
          __int16 v43 = 1024;
          *(_DWORD *)v44 = v23;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v28;
          *(_WORD *)__int16 v45 = 2048;
          *(double *)&v45[2] = v27;
          __int16 v46 = 2048;
          double v47 = v24;
          __int16 v48 = 2048;
          double v49 = v25;
          _os_log_impl(&dword_21B9BB000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::RestoreParameterMappings: Restoring mapped param for ID %u -> prop 0x%x min %f max %f default %f", (uint8_t *)buf, 0x3Cu);
        }
        ParameterMapManager::AddMapping((uint64_t)v16, v23, (uint64_t)buffer);
      }
    }
LABEL_49:
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v32);
    return v29;
  }
  else
  {
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "GlobalState.cpp";
      __int16 v41 = 1024;
      int v42 = 451;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::Restore: No instrument dictionary", (uint8_t *)buf, 0x12u);
      return 0;
    }
  }
  return result;
}

void sub_21BA43180(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21BA43190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_21BA431A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  if (a2)
  {
    Smart<__CFURL const*>::~Smart(&a33);
    __cxa_begin_catch(a1);
    MEMORY[0x21D497F60](v33, 0x60C8044C4A2DFLL);
    MEMORY[0x21D497F60](v34, 0x60C8044C4A2DFLL);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_21BA4323C(_Unwind_Exception *a1)
{
}

void sub_21BA43248(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21BA43258()
{
}

void sub_21BA4326C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

_DWORD *GlobalState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  unsigned int v5 = a2;
  if (this[50] != a2)
  {
    uint64_t v2 = this;
    if (a2 == -1)
    {
      unsigned int v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v5, 0, 0x10u, (uint64_t)"Invalid output scope");
      unsigned int v3 = v5;
    }
    v2[50] = v3;
    uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112);
    return (_DWORD *)v4(v2, 4122, 0);
  }
  return this;
}

_DWORD *GlobalState::SetVoiceCount(_DWORD *this, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2;
  if (this[49] != a2)
  {
    uint64_t v2 = this;
    if (a2 == -1)
    {
      unsigned int v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 1u, 0x40u, (uint64_t)"GlobalState::SetVoiceCount: Invalid count");
      unsigned int v3 = v4;
    }
    v2[49] = v3;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v6 = "GlobalState.cpp";
      __int16 v7 = 1024;
      int v8 = 607;
      __int16 v9 = 1024;
      unsigned int v10 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SetVoiceCount: count %u", buf, 0x18u);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112))(v2, 4131, 0);
  }
  return this;
}

_DWORD *GlobalState::SetCoarseTuning(_DWORD *this, int a2)
{
  int v4 = a2;
  if (this[46] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<int>(&v4, -24, 24, (uint64_t)"Invalid coarse tuning");
    v2[46] = v4;
    unsigned int v3 = *(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112);
    return (_DWORD *)v3(v2, 4123, 0);
  }
  return this;
}

float *GlobalState::SetFineTuning(float *this, float a2)
{
  float v4 = a2;
  if (this[47] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid fine tuning", -99.0, 99.0);
    v2[47] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4124, 0);
  }
  return this;
}

float *GlobalState::SetPan(float *this, float a2)
{
  float v4 = a2;
  if (this[48] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[48] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4126, 0);
  }
  return this;
}

uint64_t GlobalState::Save(GlobalState *this, CACFDictionary *a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  CACFDictionary::AddFloat32(a2, @"AU version", 1.0);
  CACFDictionary::AddUInt32(a2, @"output");
  if (*((_DWORD *)this + 49) != -1) {
    CACFDictionary::AddUInt32(a2, @"voice count");
  }
  CACFDictionary::AddSInt32(a2, @"coarse tune");
  CACFDictionary::AddFloat32(a2, @"fine tune", *((float *)this + 47));
  CACFDictionary::AddFloat32(a2, @"pan", *((float *)this + 48) * 200.0);
  CACFDictionary::AddFloat32(a2, @"gain", *((float *)this + 45));
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "GlobalState.cpp";
    __int16 v53 = 1024;
    int v54 = 378;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SaveState: Saving instrument data", buf, 0x12u);
  }
  float v4 = (void **)*((void *)this + 11);
  if (*((void ***)this + 12) == v4) {
    goto LABEL_55;
  }
  unsigned int v5 = *v4;
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  __int16 v46 = 256;
  unsigned int v43 = (*(uint64_t (**)(void *, __CFDictionary **))(*v5 + 40))(v5, &Mutable);
  v44 = a2;
  double v47 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  __int16 v48 = 256;
  Instance = (void *)DLSBankManager::GetInstance(v47);
  uint64_t v7 = Instance[3];
  CFStringRef v59 = (const __CFString *)(Instance + 3);
  char v60 = (*(uint64_t (**)(void))(v7 + 16))();
  int v8 = (CFURLRef **)*Instance;
  if (*Instance != Instance[1])
  {
    __int16 v9 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    unsigned int v10 = &_os_log_internal;
    do
    {
      uint64_t v11 = *v8;
      unint64_t v12 = (*v8)[7] - (*v8)[6];
      CFIndex v13 = (v12 >> 2);
      CFTypeRef cf = CFArrayCreateMutable(0, v13, v9);
      __int16 v51 = 256;
      if ((v12 & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v14 = 0;
        do
        {
          CACFArray::AppendUInt32((CACFArray *)&cf);
          ++v14;
        }
        while (v13 != v14);
      }
      CFStringRef PathComponent = CFURLCopyLastPathComponent(*v11);
      CFStringRef v49 = PathComponent;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "DLSBankManager.cpp";
        __int16 v53 = 1024;
        int v54 = 240;
        __int16 v55 = 2112;
        v56 = (const __CFString **)PathComponent;
        _os_log_impl(&dword_21B9BB000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::StoreSampleIDs: adding entry for bank '%@'", buf, 0x1Cu);
        CFStringRef PathComponent = v49;
      }
      CACFDictionary::AddArray((CACFDictionary *)&v47, PathComponent, (const __CFArray *)cf);
      Smart<__CFString const*>::~Smart((const void **)&v49);
      CACFArray::~CACFArray((CACFArray *)&cf);
      ++v8;
    }
    while (v8 != (CFURLRef **)Instance[1]);
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v59);
  if (CACFDictionary::Size((CACFDictionary *)&v47)) {
    CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, @"Banks", v47);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v47);
  CACFDictionary::AddDictionary(v44, @"Instrument", Mutable);
  uint64_t v16 = (void *)v5[14];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
    __int16 v53 = 1024;
    int v54 = 147;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::StoreFileReferences: Saving ext file refs", buf, 0x12u);
  }
  __int16 v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef cf = v17;
  __int16 v51 = 257;
  uint64_t v20 = (void *)*v16;
  unint64_t v19 = v16 + 1;
  uint64_t v18 = v20;
  uint64_t v21 = (const __CFAllocator **)MEMORY[0x263EFFB08];
  if (v20 != v19)
  {
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      if (*((_DWORD *)v18 + 8) <= 0xFFFFFFEF)
      {
        int v23 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v17);
        unint64_t v24 = v18[5];
        uint64_t v25 = SampleManager::SearchForSample(v23, v24);
        if (!v25)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "SampleManager.cpp";
            __int16 v53 = 1024;
            int v54 = 558;
            __int16 v55 = 2048;
            v56 = (const __CFString **)v24;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSampleURL: Sample with ID %llu not found", buf, 0x1Cu);
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v59, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "SampleManager.cpp";
            __int16 v53 = 1024;
            int v54 = 559;
            __int16 v55 = 2080;
            v56 = &v59;
            __int16 v57 = 2080;
            v58 = "No sample found for that ID";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "No sample found for that ID", -10851);
        }
        CFURLRef v26 = *(const __CFURL **)(v25 + 32);
        if (!v26)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
            __int16 v53 = 1024;
            int v54 = 158;
            v40 = &_os_log_internal;
            __int16 v41 = "%25s:%-5d  Unable to retrieve sample's URL";
            goto LABEL_54;
          }
LABEL_56:
          __break(1u);
        }
        CFStringRef v27 = CFURLCopyFileSystemPath(v26, kCFURLPOSIXPathStyle);
        CFStringRef v59 = v27;
        if (!v27)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            goto LABEL_56;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
          __int16 v53 = 1024;
          int v54 = 160;
          v40 = &_os_log_internal;
          __int16 v41 = "%25s:%-5d  Unable to convert sample URL into string ref";
LABEL_54:
          _os_log_impl(&dword_21B9BB000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
          __break(1u);
LABEL_55:
          std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
        }
        if (!CFStringHasSuffix(v27, @".dls")
          && !CFStringHasSuffix(v59, @".sf2")
          && !CFStringHasSuffix(v59, @".DLS")
          && !CFStringHasSuffix(v59, @".SF2"))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            int v28 = *((_DWORD *)v18 + 8);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
            __int16 v53 = 1024;
            int v54 = 167;
            __int16 v55 = 2112;
            v56 = (const __CFString **)v59;
            __int16 v57 = 1024;
            LODWORD(v58) = v28;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::StoreFileReferences: Adding '%@', ID 0x%x to dictionary", buf, 0x22u);
          }
          *(void *)buf = CFStringCreateWithFormat(v22, 0, @"Sample:%u", *((unsigned int *)v18 + 8));
          CACFDictionary::AddString((CACFDictionary *)&cf, *(const __CFString **)buf, v59);
          Smart<__CFString const*>::~Smart((const void **)buf);
        }
        __int16 v17 = Smart<__CFString const*>::~Smart((const void **)&v59);
      }
      unsigned int v29 = (void *)v18[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          unsigned int v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (void *)v18[2];
          BOOL v31 = *v30 == (void)v18;
          uint64_t v18 = v30;
        }
        while (!v31);
      }
      uint64_t v18 = v30;
    }
    while (v30 != v19);
  }
  uint64_t v32 = DLSBankManager::GetInstance((DLSBankManager *)v17);
  uint64_t v33 = *(void *)(v32 + 24);
  CFStringRef v59 = (const __CFString *)(v32 + 24);
  char v60 = (*(uint64_t (**)(void))(v33 + 16))();
  uint64_t v34 = *(CFURLRef ***)v32;
  if (*(void *)v32 != *(void *)(v32 + 8))
  {
    uint64_t v35 = 0;
    CFAllocatorRef v36 = *v21;
    while (1)
    {
      CFStringRef v37 = CFURLGetString(**v34);
      if (!v37) {
        break;
      }
      *(void *)buf = CFStringCreateWithFormat(v36, 0, @"Bank:%u", v35);
      CACFDictionary::AddString((CACFDictionary *)&cf, *(const __CFString **)buf, v37);
      Smart<__CFString const*>::~Smart((const void **)buf);
      uint64_t v35 = (v35 + 1);
      if (++v34 == *(CFURLRef ***)(v32 + 8)) {
        goto LABEL_42;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DLSBankManager.cpp";
      __int16 v53 = 1024;
      int v54 = 252;
      v40 = &_os_log_internal;
      __int16 v41 = "%25s:%-5d  Unable to convert bank path into string ref";
      goto LABEL_54;
    }
    goto LABEL_56;
  }
LABEL_42:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v59);
  CFDictionaryRef v38 = (const __CFDictionary *)cf;
  CFRetain(cf);
  CACFDictionary::AddDictionary(v44, @"file-references", v38);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v43;
}

void sub_21BA43F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  Smart<__CFString const*>::~Smart((const void **)va2);
  Smart<__CFString const*>::~Smart((const void **)(v8 - 112));
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

unsigned int (***GlobalState::FindState(GlobalState *this, int a2, int a3))(void)
{
  if (a3) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 11);
  uint64_t v7 = *((void *)this + 12);
  if (v7 == v6) {
    return 0;
  }
  unint64_t v9 = 0;
  for (unsigned int i = 1; ; ++i)
  {
    if (v9 >= (v7 - v6) >> 3) {
      std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
    }
    unsigned int v3 = *(unsigned int (****)(void))(v6 + 8 * v9);
    if ((**v3)(v3) == a2) {
      break;
    }
    unint64_t v9 = i;
    uint64_t v6 = *((void *)this + 11);
    uint64_t v7 = *((void *)this + 12);
    if (v9 >= (v7 - v6) >> 3) {
      return 0;
    }
  }
  return v3;
}

uint64_t GlobalState::SetProperty(GlobalState *this, signed int a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v86, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      v72 = "GlobalState.cpp";
      __int16 v73 = 1024;
      int v74 = 301;
      __int16 v75 = 2080;
      *(void *)v76 = &v86;
      *(_WORD *)&v76[8] = 2080;
      *(void *)&v76[10] = "GlobalState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "GlobalState::SetProperty: NULL property value", -10851);
  }
  uint64_t v7 = 0;
  if (a2 <= 4130)
  {
    switch(a2)
    {
      case 4103:
        unsigned int v8 = *a3;
        if (*((_DWORD *)this + 51) != *a3)
        {
          if (v8 >= 2)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v86, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v72 = "GlobalState.cpp";
              __int16 v73 = 1024;
              int v74 = 594;
              __int16 v75 = 2080;
              *(void *)v76 = &v86;
              *(_WORD *)&v76[8] = 2080;
              *(void *)&v76[10] = "GlobalState::SetMIDIMode:  invalid mode";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v69 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v69, "GlobalState::SetMIDIMode:  invalid mode", -10851);
          }
          *((_DWORD *)this + 51) = v8;
          (*(void (**)(GlobalState *, uint64_t, void))(*(void *)this + 112))(this, 4103, 0);
        }
        return 1;
      case 4104:
      case 4105:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
        return v7;
      case 4106:
      case 4109:
        v64 = CADefaultLog();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v86, a2);
          *(float *)buf = 4.8153e-34;
          v72 = "GlobalState.cpp";
          __int16 v73 = 1024;
          int v74 = 337;
          __int16 v75 = 1024;
          *(_DWORD *)v76 = -10865;
          *(_WORD *)&v76[4] = 2080;
          *(void *)&v76[6] = &v86;
          _os_log_impl(&dword_21B9BB000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"property %s not writable\"", buf, 0x22u);
        }
        v65 = __cxa_allocate_exception(0x10uLL);
        *(void *)v65 = MEMORY[0x263F8B550] + 40;
        v65[2] = -10865;
      case 4107:
        if (a4 <= 0x17)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v86, 0xFFFFD581);
            *(float *)buf = 4.8153e-34;
            v72 = "GlobalState.cpp";
            __int16 v73 = 1024;
            int v74 = 329;
            __int16 v75 = 2080;
            *(void *)v76 = &v86;
            *(_WORD *)&v76[8] = 2080;
            *(void *)&v76[10] = "GlobalState::SetProperty: Invalid mapping data size";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v66 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v66, "GlobalState::SetProperty: Invalid mapping data size", -10879);
        }
        unint64_t v9 = (uint64_t *)*((void *)this + 11);
        if (*((uint64_t **)this + 12) == v9) {
          std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v10 = *v9;
        uint64_t v11 = *(void **)(*v9 + 232);
        uint64_t v12 = *(void **)(*v9 + 240);
        if (v11 == v12) {
          goto LABEL_19;
        }
        int v13 = (a3[1] >> 8) & 0xFFF;
        while (1)
        {
          uint64_t v14 = (unsigned int (***)(void))*v11;
          if ((**(unsigned int (***)(void))*v11)(*v11) == v13) {
            break;
          }
          if (++v11 == v12)
          {
LABEL_19:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v86, 0xFFFFD581);
              *(float *)buf = 4.8153e-34;
              v72 = "GlobalState.cpp";
              __int16 v73 = 1024;
              int v74 = 618;
              __int16 v75 = 2080;
              *(void *)v76 = &v86;
              *(_WORD *)&v76[8] = 2080;
              *(void *)&v76[10] = "GlobalState::AddParameterMapping: Invalid map target layer";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            uint64_t v15 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v15, "GlobalState::AddParameterMapping: Invalid map target layer", -10879);
          }
        }
        float v17 = *((float *)a3 + 2);
        float v16 = *((float *)a3 + 3);
        float v18 = -v16;
        BOOL v19 = v17 != 0.0;
        if (v16 >= v17) {
          BOOL v19 = 0;
        }
        if (v17 == v18 || v19) {
          BOOL v21 = v19;
        }
        else {
          BOOL v21 = v16 == 0.0;
        }
        if (v17 < 0.0 || v16 < 0.0)
        {
          if (v17 >= 0.0 || v16 >= 0.0)
          {
            if (v17 < v18) {
              float v25 = *((float *)a3 + 2);
            }
            else {
              float v25 = *((float *)a3 + 3);
            }
            if (v17 >= v18) {
              float v26 = *((float *)a3 + 2);
            }
            else {
              float v26 = *((float *)a3 + 3);
            }
            if (v16 < (float)-v17) {
              float v27 = *((float *)a3 + 3);
            }
            else {
              float v27 = *((float *)a3 + 2);
            }
            if (v16 < (float)-v17) {
              float v16 = *((float *)a3 + 2);
            }
            if (v17 < 0.0) {
              float v22 = v27;
            }
            else {
              float v22 = v25;
            }
            if (v17 < 0.0) {
              float v24 = v16;
            }
            else {
              float v24 = v26;
            }
LABEL_68:
            uint64_t v86 = *(void *)a3;
            float v87 = v22;
            float v88 = v24;
            int v89 = 1;
            BOOL v90 = v21;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            uint64_t v93 = 1065353216;
            if (!LayerState::VerifyConnection((uint64_t)v14, (int *)&v86))
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&v83, 0xFFFFD581);
                *(float *)buf = 4.8153e-34;
                v72 = "GlobalState.cpp";
                __int16 v73 = 1024;
                int v74 = 633;
                __int16 v75 = 2080;
                *(void *)v76 = &v83;
                *(_WORD *)&v76[8] = 2080;
                *(void *)&v76[10] = "GlobalState::AddParameterMapping: Invalid map connection";
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v67 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v67, "GlobalState::AddParameterMapping: Invalid map connection", -10879);
            }
            uint64_t v28 = *(void *)(v10 + 232);
            unint64_t v29 = *(void *)(v10 + 240) - v28;
            if ((v29 & 0x7FFFFFFF8) == 0) {
              goto LABEL_117;
            }
            uint64_t v30 = 0;
            if (((v29 >> 3) & 0xFFFFFFFE) != 0) {
              uint64_t v31 = (v29 >> 3);
            }
            else {
              uint64_t v31 = 1;
            }
            while (1)
            {
              uint64_t v32 = *(void *)(v28 + 8 * v30);
              uint64_t v33 = *(uint64_t **)(v32 + 520);
              uint64_t v34 = *(uint64_t **)(v32 + 528);
              while (v33 != v34)
              {
                uint64_t v35 = *v33;
                if (*(_DWORD *)(*v33 + 92) == *a3)
                {
                  int v36 = a3[1];
                  int v37 = *(_DWORD *)(v35 + 96);
                  BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
                  if (v36 == v37)
                  {
                    if (v38)
                    {
                      *(float *)buf = 4.8151e-34;
                      v72 = "GlobalState.cpp";
                      __int16 v73 = 1024;
                      int v74 = 651;
                      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modifying existing mapping -- editing current connection", buf, 0x12u);
                    }
                    float v39 = (char *)*((void *)this + 16);
                    if (v39)
                    {
                      unsigned int v40 = *a3;
                      __int16 v41 = (float *)((char *)this + 128);
                      float v42 = *((float *)a3 + 2);
                      float v43 = *((float *)a3 + 3);
                      do
                      {
                        unsigned int v44 = *((_DWORD *)v39 + 8);
                        BOOL v45 = v44 >= v40;
                        if (v44 >= v40) {
                          __int16 v46 = (char **)v39;
                        }
                        else {
                          __int16 v46 = (char **)(v39 + 8);
                        }
                        if (v45) {
                          __int16 v41 = (float *)v39;
                        }
                        float v39 = *v46;
                      }
                      while (*v46);
                      if (v41 != (float *)((char *)this + 128) && *((_DWORD *)v41 + 8) <= v40)
                      {
                        v41[11] = v42;
                        v41[12] = v43;
                        BOOL v47 = v42 != 0.0 && v43 == 0.0;
                        float v48 = 1.0;
                        if (!v47) {
                          float v48 = 0.0;
                        }
                        if (v43 != (float)-v42 || v43 == 0.0) {
                          float v50 = v48;
                        }
                        else {
                          float v50 = 0.5;
                        }
                        *(float *)(*((void *)v41 + 7) + 164) = v50;
                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                        {
                          *(float *)buf = 4.8155e-34;
                          v72 = "ParameterMapManager.cpp";
                          __int16 v73 = 1024;
                          int v74 = 83;
                          __int16 v75 = 1024;
                          *(_DWORD *)v76 = v40;
                          *(_WORD *)&v76[4] = 2048;
                          *(double *)&v76[6] = v42;
                          *(_WORD *)&v76[14] = 2048;
                          *(double *)&v76[16] = v43;
                          __int16 v77 = 2048;
                          double v78 = v50;
                          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ParameterMapManager::SetMappingRange(id %u, min %f, max %f): connection default value set to %f", buf, 0x36u);
                        }
                      }
                    }
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                    {
                      *(float *)buf = 4.8154e-34;
                      v72 = "GlobalState.cpp";
                      __int16 v73 = 1024;
                      int v74 = 655;
                      __int16 v75 = 2048;
                      *(double *)v76 = v22;
                      *(_WORD *)&v76[8] = 2048;
                      *(double *)&v76[10] = v24;
                      *(_WORD *)&v76[18] = 1024;
                      *(_DWORD *)&v76[20] = v21;
                      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: set connection min: %f max: %f inverse: %d", buf, 0x2Cu);
                    }
                    ConnectionState::SetMinValue((float *)v35, v22);
                    ConnectionState::SetMaxValue((float *)v35, v24);
                    ConnectionState::SetInverse((unsigned char *)v35, v21);
                    uint64_t v51 = *((void *)a3 + 2);
                    if (v51) {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 72))(v35, v51, 1);
                    }
                    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 4, 1);
                    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 4106, 1);
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                    {
                      double v52 = *((float *)a3 + 2);
                      double v53 = *((float *)a3 + 3);
                      *(double *)&int v54 = COERCE_DOUBLE("");
                      unsigned int v55 = *a3;
                      int v56 = a3[1];
                      if (v21) {
                        *(double *)&int v54 = COERCE_DOUBLE("inverted");
                      }
                      *(float *)buf = 4.8156e-34;
                      v72 = "GlobalState.cpp";
                      __int16 v73 = 1024;
                      int v74 = 667;
                      __int16 v75 = 1024;
                      *(_DWORD *)v76 = v55;
                      *(_WORD *)&v76[4] = 2048;
                      *(double *)&v76[6] = v52;
                      *(_WORD *)&v76[14] = 2048;
                      *(double *)&v76[16] = v53;
                      __int16 v77 = 2080;
                      double v78 = *(double *)&v54;
                      __int16 v79 = 1024;
                      LODWORD(v80) = v56;
                      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modified: param %u ==> ([%f - %f] %s) ==> prop 0x%x", buf, 0x3Cu);
                    }
                    return 1;
                  }
                  if (v38)
                  {
                    *(float *)buf = 4.8151e-34;
                    v72 = "GlobalState.cpp";
                    __int16 v73 = 1024;
                    int v74 = 646;
                    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modifying existing mapping -- but destination changing", buf, 0x12u);
                  }
                  GlobalState::RemoveParameterMapping(this, *a3, 0);
LABEL_117:
                  if (v17 == v18) {
                    float v22 = 0.0;
                  }
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                  {
                    double v57 = *((float *)a3 + 2);
                    double v58 = *((float *)a3 + 3);
                    CFStringRef v59 = "";
                    unsigned int v60 = *a3;
                    int v61 = a3[1];
                    if (v21) {
                      CFStringRef v59 = "inverted";
                    }
                    *(float *)buf = 4.8158e-34;
                    v72 = "GlobalState.cpp";
                    __int16 v73 = 1024;
                    int v74 = 678;
                    __int16 v75 = 1024;
                    *(_DWORD *)v76 = v60;
                    *(_WORD *)&v76[4] = 2048;
                    *(double *)&v76[6] = v57;
                    *(_WORD *)&v76[14] = 2048;
                    *(double *)&v76[16] = v58;
                    __int16 v77 = 2048;
                    double v78 = v22;
                    __int16 v79 = 2080;
                    v80 = v59;
                    __int16 v81 = 1024;
                    int v82 = v61;
                    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: adding: param %u ==> ([%f - %f] default: %f %s) ==> prop 0x%x", buf, 0x46u);
                  }
                  int v83 = a3[1];
                  uint64_t v84 = *((void *)a3 + 1);
                  float v85 = v22;
                  if (LayerState::VerifyConnection((uint64_t)v14, (int *)&v86)) {
                    ParameterMapManager::AddMapping((uint64_t)this + 120, *a3, (uint64_t)&v83);
                  }
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)v70, 0xFFFFD581);
                    *(float *)buf = 4.8153e-34;
                    v72 = "GlobalState.cpp";
                    __int16 v73 = 1024;
                    int v74 = 681;
                    __int16 v75 = 2080;
                    *(void *)v76 = v70;
                    *(_WORD *)&v76[8] = 2080;
                    *(void *)&v76[10] = "GlobalState::AddParameterMapping: Invalid map connection";
                    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                  }
                  v68 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                  CAXException::CAXException(v68, "GlobalState::AddParameterMapping: Invalid map connection", -10879);
                }
                ++v33;
              }
              if (++v30 == v31) {
                goto LABEL_117;
              }
            }
          }
          BOOL v23 = v16 < v17;
          if (v16 <= v17) {
            float v22 = *((float *)a3 + 2);
          }
          else {
            float v22 = *((float *)a3 + 3);
          }
        }
        else
        {
          if (v16 >= v17) {
            float v22 = *((float *)a3 + 2);
          }
          else {
            float v22 = *((float *)a3 + 3);
          }
          BOOL v23 = v17 < v16;
        }
        if (v23) {
          float v24 = *((float *)a3 + 3);
        }
        else {
          float v24 = *((float *)a3 + 2);
        }
        goto LABEL_68;
      case 4108:
        uint64_t v7 = 1;
        GlobalState::RemoveParameterMapping(this, *a3, 1);
        return v7;
      case 4122:
        GlobalState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        GlobalState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        GlobalState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        *(float *)buf = *(float *)a3;
        if (*((float *)this + 45) != *(float *)buf)
        {
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid volume", -96.0, 12.0);
          *((float *)this + 45) = *(float *)buf;
          (*(void (**)(GlobalState *, uint64_t, void))(*(void *)this + 112))(this, 4125, 0);
        }
        return 1;
      case 4126:
        GlobalState::SetPan((float *)this, *(float *)a3 * 0.005);
        return 1;
      default:
        if (a2 != 2) {
          return v7;
        }
        (*(void (**)(GlobalState *, uint64_t, void))(*(void *)this + 112))(this, 2, 0);
        return 1;
    }
  }
  if (a2 == 4131)
  {
    GlobalState::SetVoiceCount(this, *a3);
    return 1;
  }
  if (a2 == 4135)
  {
    (*(void (**)(GlobalState *, BOOL))(*(void *)this + 8))(this, *a3 != 0);
    return 1;
  }
  return v7;
}

void sub_21BA4503C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    ParameterMapManager::RemoveMapping(v3, *v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x21BA4509CLL);
}

void sub_21BA45060()
{
}

void sub_21BA4506C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21BA4509CLL);
}

void sub_21BA45088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void GlobalState::RemoveParameterMapping(GlobalState *this, unsigned int a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v22 = 136315650;
    BOOL v23 = "GlobalState.cpp";
    __int16 v24 = 1024;
    int v25 = 701;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::RemoveParameterMapping: param %u", (uint8_t *)&v22, 0x18u);
  }
  uint64_t v6 = *((void *)this + 16);
  if (!v6) {
    goto LABEL_37;
  }
  uint64_t v7 = (_DWORD *)((char *)this + 128);
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = (_DWORD *)v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == (_DWORD *)((char *)this + 128) || v7[8] > a2)
  {
LABEL_37:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 136315650;
      BOOL v23 = "GlobalState.cpp";
      __int16 v24 = 1024;
      int v25 = 723;
      __int16 v26 = 1024;
      unsigned int v27 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d GlobalState::RemoveParameterMapping: no map found for param id %u", (uint8_t *)&v22, 0x18u);
    }
    return;
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 11);
  if (*((uint64_t **)this + 12) == v11) {
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v12 = *v11;
  int v13 = *(LayerState ***)(v12 + 232);
  uint64_t v14 = *(LayerState ***)(v12 + 240);
  if (v13 == v14)
  {
LABEL_22:
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v22 = 136315394;
    BOOL v23 = "GlobalState.cpp";
    __int16 v24 = 1024;
    int v25 = 707;
    float v17 = &_os_log_internal;
    float v18 = "%25s:%-5d RemoveParameterMapping: Invalid map target property";
    uint32_t v19 = 18;
  }
  else
  {
    int v15 = (v7[10] >> 8) & 0xFFF;
    while (1)
    {
      float v16 = *v13;
      if ((**(unsigned int (***)(LayerState *))*v13)(*v13) == v15) {
        break;
      }
      if (++v13 == v14) {
        goto LABEL_22;
      }
    }
    for (unsigned int i = (void *)*((void *)v16 + 65); i != *((void **)v16 + 66); ++i)
    {
      if (*(_DWORD *)(*i + 92) == a2)
      {
        int v21 = (**(uint64_t (***)(void))*i)(*i);
        LayerState::RemoveConnection(v16, v21);
        goto LABEL_31;
      }
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v22 = 136315650;
    BOOL v23 = "GlobalState.cpp";
    __int16 v24 = 1024;
    int v25 = 714;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    float v17 = &_os_log_internal;
    float v18 = "%25s:%-5d RemoveParameterMapping: no connection found for mapped param id %u";
    uint32_t v19 = 24;
  }
  _os_log_impl(&dword_21B9BB000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v22, v19);
LABEL_31:
  if (ParameterMapManager::RemoveMapping((GlobalState *)((char *)this + 120), a2))
  {
    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 3, a3);
    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 4106, a3);
  }
}

uint64_t GlobalState::GetProperty(GlobalState *this, int a2, _DWORD *a3)
{
  uint64_t v4 = 0;
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (a2 > 4108)
  {
    switch(a2)
    {
      case 4122:
        int v15 = *((_DWORD *)this + 50);
        if (v15 == -1) {
          int v15 = 0;
        }
        goto LABEL_59;
      case 4123:
        int v15 = *((_DWORD *)this + 46);
        goto LABEL_59;
      case 4124:
        float v29 = *((float *)this + 47);
        goto LABEL_57;
      case 4125:
        float v29 = *((float *)this + 45);
        goto LABEL_57;
      case 4126:
        float v29 = *((float *)this + 48) * 200.0;
LABEL_57:
        *(float *)a3 = v29;
        return 1;
      case 4127:
      case 4128:
      case 4129:
      case 4130:
        return v4;
      case 4131:
        int v15 = *((_DWORD *)this + 49);
        goto LABEL_59;
      default:
        if (a2 == 4109)
        {
          a3[1] = 0;
          *((void *)a3 + 1) = 0x3F80000000000000;
          *((void *)a3 + 2) = 0;
          unsigned int v31 = *a3;
          uint64_t v32 = (char *)*((void *)this + 16);
          if (!v32) {
            goto LABEL_105;
          }
          uint64_t v33 = (char *)this + 128;
          do
          {
            unsigned int v34 = *((_DWORD *)v32 + 8);
            BOOL v35 = v34 >= v31;
            if (v34 >= v31) {
              int v36 = (char **)v32;
            }
            else {
              int v36 = (char **)(v32 + 8);
            }
            if (v35) {
              uint64_t v33 = v32;
            }
            uint64_t v32 = *v36;
          }
          while (*v36);
          if (v33 == (char *)this + 128 || *((_DWORD *)v33 + 8) > v31)
          {
LABEL_105:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              CFStringRef v59 = "GlobalState.cpp";
              __int16 v60 = 1024;
              int v61 = 279;
              __int16 v62 = 1024;
              LODWORD(v63) = v31;
              _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d GetProperty: no mapping for parameter %u found", buf, 0x18u);
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              CFStringRef v59 = "GlobalState.cpp";
              __int16 v60 = 1024;
              int v61 = 280;
              __int16 v62 = 2080;
              v63 = v57;
              __int16 v64 = 2080;
              v65 = "GlobalState::GetProperty: parameter is not mapped";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "GlobalState::GetProperty: parameter is not mapped", -10851);
          }
          int v37 = (uint64_t *)*((void *)this + 11);
          if (*((uint64_t **)this + 12) == v37) {
            std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v38 = *v37;
          float v39 = *(void **)(v38 + 232);
          unsigned int v40 = *(void **)(v38 + 240);
          if (v39 == v40)
          {
LABEL_78:
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 1;
            }
            *(_DWORD *)buf = 136315394;
            CFStringRef v59 = "GlobalState.cpp";
            __int16 v60 = 1024;
            int v61 = 263;
            unsigned int v44 = &_os_log_internal;
            BOOL v45 = "%25s:%-5d GetProperty: Invalid map destination property";
          }
          else
          {
            unsigned int v41 = *((_DWORD *)v33 + 10);
            uint64_t v42 = *(void *)(v33 + 44);
            while (1)
            {
              float v43 = (unsigned int (***)(void))*v39;
              if ((**(unsigned int (***)(void))*v39)(*v39) == ((v41 >> 8) & 0xFFF)) {
                break;
              }
              if (++v39 == v40) {
                goto LABEL_78;
              }
            }
            float v48 = v43[65];
            CFStringRef v49 = v43[66];
            if (v48 != v49)
            {
              while (1)
              {
                float v50 = *v48;
                if (*((_DWORD *)*v48 + 23) == *a3) {
                  break;
                }
                if (++v48 == v49) {
                  goto LABEL_86;
                }
              }
              a3[1] = v41;
              *((void *)a3 + 1) = v42;
              uint64_t v51 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)v50 + 80))(v50);
              *((void *)a3 + 2) = v51;
              if (v51) {
                CFRetain(v51);
              }
              return 1;
            }
LABEL_86:
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
              return 1;
            }
            *(_DWORD *)buf = 136315394;
            CFStringRef v59 = "GlobalState.cpp";
            __int16 v60 = 1024;
            int v61 = 266;
            unsigned int v44 = &_os_log_internal;
            BOOL v45 = "%25s:%-5d GetProperty: Did not find connection state associated with mapped parameter";
          }
          _os_log_impl(&dword_21B9BB000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 0x12u);
          return 1;
        }
        if (a2 != 4113) {
          return v4;
        }
        if ((ParameterMapManager::GetConnectionInfo((uint64_t)a3) & 1) == 0)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            CFStringRef v59 = "GlobalState.cpp";
            __int16 v60 = 1024;
            int v61 = 288;
            __int16 v62 = 2080;
            v63 = v57;
            __int16 v64 = 2080;
            v65 = "GlobalState::GetProperty: bad connection IDs";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          int v22 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v22, "GlobalState::GetProperty: bad connection IDs", -10851);
        }
        return result;
    }
    return 1;
  }
  if (a2 > 4102)
  {
    if (a2 == 4103)
    {
      int v15 = *((_DWORD *)this + 51);
LABEL_59:
      *a3 = v15;
      return 1;
    }
    if (a2 == 4106)
    {
      float v16 = (char *)*((void *)this + 15);
      float v17 = (char *)this + 128;
      if (v16 != (char *)this + 128)
      {
        int v18 = 0;
        do
        {
          a3[v18] = (*(uint64_t (**)(void))(**((void **)v16 + 7) + 72))(*((void *)v16 + 7));
          uint32_t v19 = (char *)*((void *)v16 + 1);
          if (v19)
          {
            do
            {
              uint64_t v20 = v19;
              uint32_t v19 = *(char **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = (char *)*((void *)v16 + 2);
              BOOL v21 = *(void *)v20 == (void)v16;
              float v16 = v20;
            }
            while (!v21);
          }
          ++v18;
          float v16 = v20;
        }
        while (v20 != v17);
      }
      return 1;
    }
  }
  else
  {
    if (a2 == 33)
    {
      BOOL v23 = (char *)*((void *)this + 16);
      if (v23)
      {
        unsigned int v24 = *a3;
        int v25 = (char *)this + 128;
        do
        {
          unsigned int v26 = *((_DWORD *)v23 + 8);
          BOOL v27 = v26 >= v24;
          if (v26 >= v24) {
            uint64_t v28 = (char **)v23;
          }
          else {
            uint64_t v28 = (char **)(v23 + 8);
          }
          if (v27) {
            int v25 = v23;
          }
          BOOL v23 = *v28;
        }
        while (*v28);
        if (v25 != (char *)this + 128 && *((_DWORD *)v25 + 8) <= v24)
        {
          float32x2_t v46 = *(float32x2_t *)(v25 + 44);
          *(_DWORD *)buf = 0;
          BOOL v47 = (float *)*((void *)a3 + 1);
          if (!v47)
          {
            float32x2_t v56 = v46;
            GlobalState::GetPerformanceParameter(this, v24, (float *)buf);
            BOOL v47 = (float *)buf;
            float32x2_t v46 = v56;
          }
          snprintf(GlobalState::GetProperty(unsigned int,void *)const::str, 0x20uLL, "%2.1f", vmlas_n_f32(v46.f32[0], *v47, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), v46).f32[0]));
          *((void *)a3 + 2) = CFStringCreateWithCString(0, GlobalState::GetProperty(unsigned int,void *)const::str, 0x600u);
          return 1;
        }
      }
      return 0;
    }
    if (a2 == 38)
    {
      CFStringRef v5 = (const __CFString *)*((void *)a3 + 1);
      if (!v5)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          CFStringRef v59 = "GlobalState.cpp";
          __int16 v60 = 1024;
          int v61 = 203;
          __int16 v62 = 2080;
          v63 = v57;
          __int16 v64 = 2080;
          v65 = "GlobalState::GetProperty: Null name string";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        double v53 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v53, "GlobalState::GetProperty: Null name string", -10851);
      }
      unsigned int v8 = (char *)*((void *)this + 16);
      uint64_t v6 = (char *)this + 128;
      uint64_t v7 = v8;
      if (v8)
      {
        unsigned int v9 = *a3;
        uint64_t v10 = v6;
        do
        {
          unsigned int v11 = *((_DWORD *)v7 + 8);
          BOOL v12 = v11 >= v9;
          if (v11 >= v9) {
            int v13 = (char **)v7;
          }
          else {
            int v13 = (char **)(v7 + 8);
          }
          if (v12) {
            uint64_t v10 = v7;
          }
          uint64_t v7 = *v13;
        }
        while (*v13);
        if (v10 != v6 && *((_DWORD *)v10 + 8) <= v9)
        {
          float32x2_t v55 = *(float32x2_t *)(v10 + 44);
          if (!CFStringGetCString(v5, GlobalState::GetProperty(unsigned int,void *)const::str, 32, 0x600u))
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              CFStringRef v59 = "GlobalState.cpp";
              __int16 v60 = 1024;
              int v61 = 209;
              __int16 v62 = 2080;
              v63 = v57;
              __int16 v64 = 2080;
              v65 = "GlobalState::GetProperty: Unable to read name string";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            int v54 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v54, "GlobalState::GetProperty: Unable to read name string", -10851);
          }
          float v14 = (atof(GlobalState::GetProperty(unsigned int,void *)const::str) - v55.f32[0])
              / vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v55).f32[0];
          *((float *)a3 + 4) = v14;
          return 1;
        }
      }
      return 0;
    }
  }
  return v4;
}

void sub_21BA45D50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void GlobalState::GetPerformanceParameter(GlobalState *this, unsigned int a2, float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v11 = a2;
  CFStringRef v5 = (char *)*((void *)this + 16);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (char *)this + 128;
  do
  {
    unsigned int v7 = *((_DWORD *)v5 + 8);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unsigned int v9 = (char **)v5;
    }
    else {
      unsigned int v9 = (char **)(v5 + 8);
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    CFStringRef v5 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 128 && *((_DWORD *)v6 + 8) <= a2)
  {
    *a3 = *(float *)(*((void *)v6 + 7) + 164);
  }
  else
  {
LABEL_12:
    float v10 = *((float *)std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 18, a2, &v11)+ 8);
    *a3 = v10;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v13 = "GlobalState.cpp";
      __int16 v14 = 1024;
      int v15 = 743;
      __int16 v16 = 1024;
      unsigned int v17 = a2;
      __int16 v18 = 2048;
      double v19 = v10;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::GetPerformanceParameter: param %u value %f", buf, 0x22u);
    }
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  CFStringRef v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        CFStringRef v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      CFStringRef v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *unsigned int v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    float v10 = (uint64_t *)**a1;
    unsigned int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unsigned int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t GlobalState::ResetToDefaults(uint64_t this, int a2)
{
  *(void *)(this + 168) = 1;
  *(void *)(this + 188) = 0;
  *(void *)(this + 180) = 0;
  *(void *)(this + 196) = 64;
  *(_DWORD *)(this + 204) = 1;
  if (a2)
  {
    uint64_t v2 = *(uint64_t **)(this + 88);
    unsigned int v3 = *(uint64_t **)(this + 96);
    while (v2 != v3)
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 8))(v4, 1);
    }
  }
  return this;
}

void GlobalState::CreateInstrument(GlobalState *this)
{
}

void sub_21BA4618C(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C4007E2654BLL);
  _Unwind_Resume(a1);
}

const void **GlobalState::LoadInstrumentFromDLSCollection(GlobalState *this, InstrumentState *a2, CFURLRef url, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  CFStringRef PathComponent = (__CFString *)CFURLCopyLastPathComponent(url);
  Instance = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)PathComponent);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    BOOL v90 = "GlobalState.cpp";
    __int16 v91 = 1024;
    int v92 = 474;
    __int16 v93 = 1024;
    *(_DWORD *)uint64_t v94 = a4;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = a5;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::LoadInstrumentFromDLSCollection: bank 0x%x, patch %u", buf, 0x1Eu);
  }
  DLSBankManager::AddBank(Instance, url);
  BOOL v12 = DLSBankManager::AcquireBank(Instance, PathComponent);
  int v13 = (void **)(v12 + 3);
  __int16 v14 = (CFURLRef *)std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>((uint64_t)(v12 + 3), a5 | (unint64_t)(a4 << 32));
  int v15 = (uint64_t **)(v12 + 4);
  if (v12 + 4 != v14)
  {
    uint64_t Instrument = (uint64_t)v14[5];
    if (Instrument)
    {
      uint64_t v17 = *(void *)(Instrument + 64);
      uint64_t v18 = *(void *)(Instrument + 72) - v17;
      unint64_t v19 = (unint64_t)v18 >> 3;
      if ((int)((unint64_t)v18 >> 3) >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (int)(v18 >> 3);
        do
        {
          uint64_t v22 = *(void *)(v17 + 8 * v20);
          if (!*(void *)(v22 + 504))
          {
            uint64_t v23 = *(void *)(*(void *)(*(void *)(v22 + 56) + 56) + 96);
            uint64_t v24 = *(void *)(*(void *)(*(void *)(v22 + 56) + 56) + 104);
            uint64_t v25 = v24 - v23;
            if (v24 == v23) {
              goto LABEL_46;
            }
            uint64_t v26 = 0;
            int v27 = *(_DWORD *)(v22 + 160);
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
            unsigned int v29 = 1;
            while (*(_DWORD *)(v23 + 24 * v26 + 16) != v27)
            {
              uint64_t v26 = v29;
              BOOL v30 = v28 > v29++;
              if (!v30) {
                goto LABEL_46;
              }
            }
            if (!*(void *)(v23 + 24 * v26))
            {
LABEL_46:
              DlsInstrument::ReferenceInstrument(Instrument);
              goto LABEL_48;
            }
          }
          ++v20;
        }
        while (v20 < v21);
        if ((int)v19 >= 1)
        {
          uint64_t v31 = 0;
          if (v21 <= 1) {
            uint64_t v21 = 1;
          }
          do
          {
            uint64_t v32 = *(void *)(v17 + 8 * v31);
            if (!*(void *)(v32 + 472))
            {
              uint64_t v33 = *(void *)(*(void *)(*(void *)(v32 + 56) + 56) + 96);
              uint64_t v34 = *(void *)(*(void *)(*(void *)(v32 + 56) + 56) + 104);
              uint64_t v35 = v34 - v33;
              if (v34 != v33)
              {
                uint64_t v36 = 0;
                int v37 = *(_DWORD *)(v32 + 160);
                unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
                unsigned int v39 = 1;
                while (*(_DWORD *)(v33 + 24 * v36 + 16) != v37)
                {
                  uint64_t v36 = v39;
                  BOOL v30 = v38 > v39++;
                  if (!v30) {
                    goto LABEL_19;
                  }
                }
                ++*(_DWORD *)(v33 + 24 * v36 + 20);
              }
            }
LABEL_19:
            ++v31;
          }
          while (v31 != v21);
        }
      }
      goto LABEL_48;
    }
  }
  uint64_t Instrument = DlsCollection::GetInstrument(*((DlsCollection **)v12[1] + 19), *((void *)v12[1] + 20), a5, a4);
  if (Instrument) {
    BOOL v40 = 1;
  }
  else {
    BOOL v40 = a6 == 0;
  }
  if (!v40)
  {
    if (!(_BYTE)a4)
    {
      if (a5 && a4 == 30720)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316162;
          BOOL v90 = "DLSBankManager.cpp";
          __int16 v91 = 1024;
          int v92 = 94;
          __int16 v93 = 1024;
          *(_DWORD *)uint64_t v94 = a5;
          *(_WORD *)&v94[4] = 1024;
          *(_DWORD *)&v94[6] = 120;
          LOWORD(v95) = 1024;
          *(_DWORD *)((char *)&v95 + 2) = 0;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u in bank 0x%x/%u -- using (percussion) preset 0", buf, 0x24u);
        }
        CFURLRef v78 = v12[1];
        __int16 v79 = (uint64_t **)*((void *)v78 + 19);
        unint64_t v80 = *((void *)v78 + 20);
        if ((unint64_t)v79 < v80)
        {
          while (1)
          {
            __int16 v81 = *v79;
            if (*((_DWORD *)*v79 + 256) == 30720) {
              break;
            }
            if ((unint64_t)++v79 >= v80) {
              goto LABEL_108;
            }
          }
          uint64_t Instrument = *v81;
          if (*v81) {
            goto LABEL_36;
          }
        }
      }
LABEL_108:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        BOOL v90 = "DLSBankManager.cpp";
        __int16 v91 = 1024;
        int v92 = 99;
        __int16 v93 = 1024;
        *(_DWORD *)uint64_t v94 = a5;
        *(_WORD *)&v94[4] = 1024;
        *(_DWORD *)&v94[6] = BYTE1(a4);
        LOWORD(v95) = 1024;
        *(_DWORD *)((char *)&v95 + 2) = a4;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u bank 0x%x/%u", buf, 0x24u);
      }
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v96, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        BOOL v90 = "DLSBankManager.cpp";
        __int16 v91 = 1024;
        int v92 = 100;
        __int16 v93 = 2080;
        *(void *)uint64_t v94 = &v96;
        *(_WORD *)&v94[8] = 2080;
        v95 = "LoadInstrument: Failed to load patch from bank";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "LoadInstrument: Failed to load patch from bank", -10851);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      BOOL v90 = "DLSBankManager.cpp";
      __int16 v91 = 1024;
      int v92 = 88;
      __int16 v93 = 1024;
      *(_DWORD *)uint64_t v94 = a5;
      *(_WORD *)&v94[4] = 1024;
      *(_DWORD *)&v94[6] = BYTE1(a4);
      LOWORD(v95) = 1024;
      *(_DWORD *)((char *)&v95 + 2) = a4;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u in bank 0x%x/%u -- checking bank 0", buf, 0x24u);
    }
    uint64_t Instrument = DlsCollection::GetInstrument(*((DlsCollection **)v12[1] + 19), *((void *)v12[1] + 20), a5, (unsigned __int16)a4 & 0xFF00);
  }
  if (!Instrument) {
    goto LABEL_108;
  }
LABEL_36:
  DlsInstrument::ReferenceInstrument(Instrument);
  unsigned int v41 = (uint64_t *)operator new(0x30uLL);
  uint64_t v42 = v41;
  v41[4] = a5 | (unint64_t)(a4 << 32);
  v41[5] = Instrument;
  float v43 = *v15;
  unsigned int v44 = (uint64_t **)(v12 + 4);
  if (*v15)
  {
    unsigned int v45 = a5 | (a4 << 8);
    while (1)
    {
      while (1)
      {
        int v15 = (uint64_t **)v43;
        unsigned int v46 = ((unint64_t)v43[4] >> 24) & 0xFFFFFF00 | v43[4];
        if (v45 >= v46) {
          break;
        }
        float v43 = (uint64_t *)*v43;
        unsigned int v44 = v15;
        if (!*v15) {
          goto LABEL_43;
        }
      }
      if (v46 >= v45) {
        break;
      }
      unsigned int v44 = (uint64_t **)(v43 + 1);
      float v43 = (uint64_t *)v43[1];
      if (!v43) {
        goto LABEL_43;
      }
    }
    operator delete(v41);
  }
  else
  {
LABEL_43:
    *unsigned int v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    NSObject *v44 = v41;
    BOOL v47 = (void *)**v13;
    if (v47)
    {
      *int v13 = v47;
      uint64_t v42 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v12[4], v42);
    v12[5] = (CFURLRef)((char *)v12[5] + 1);
  }
LABEL_48:
  InstrumentState::Cleanup(a2);
  CFStringRef v48 = CFURLCopyLastPathComponent(*v12);
  InstrumentState::SetCurrentBankName(a2, v48);
  CFRelease(v48);
  *((_DWORD *)a2 + 42) = *(_DWORD *)(Instrument + 88);
  *((_DWORD *)a2 + 43) = *(_DWORD *)(Instrument + 92);
  (*(void (**)(InstrumentState *, void))(*(void *)a2 + 8))(a2, 0);
  (*(void (**)(InstrumentState *, void))(*(void *)a2 + 64))(a2, 0);
  CFStringRef v49 = (_DWORD **)*((void *)a2 + 26);
  float v50 = (_DWORD **)*((void *)a2 + 27);
  if (v49 != v50)
  {
    do
    {
      if (*v49) {
        SamplerState::Unref(*v49);
      }
      ++v49;
    }
    while (v49 != v50);
    CFStringRef v49 = (_DWORD **)*((void *)a2 + 26);
  }
  *((void *)a2 + 27) = v49;
  uint64_t v51 = (_DWORD **)*((void *)a2 + 29);
  double v52 = (_DWORD **)*((void *)a2 + 30);
  if (v51 != v52)
  {
    do
    {
      if (*v51) {
        SamplerState::Unref(*v51);
      }
      ++v51;
    }
    while (v51 != v52);
    uint64_t v51 = (_DWORD **)*((void *)a2 + 29);
  }
  *((void *)a2 + 30) = v51;
  *(void *)float v87 = 0;
  v88[0] = 0;
  DlsObject::GetName(*(DlsObject **)(Instrument + 8), *(TString **)(Instrument + 16), (void **)v87);
  double v53 = v88;
  if (*(void *)v87) {
    double v53 = *(unsigned char **)v87;
  }
  if (*v53)
  {
    if (*(void *)v87) {
      int v54 = (const char *)(*(void *)v87 + 1);
    }
    else {
      int v54 = (char *)v88 + 1;
    }
    CFStringRef v55 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v54, 0x600u);
    *(void *)&long long v96 = v55;
    if (!v55)
    {
      uint64_t result = (const void **)os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136315394;
        BOOL v90 = "InstrumentState.cpp";
        __int16 v91 = 1024;
        int v92 = 384;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  NULL instrument name from DLS instrument", buf, 0x12u);
        __break(1u);
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      __break(1u);
      return result;
    }
    (*(void (**)(InstrumentState *, CFStringRef, uint64_t))(*(void *)a2 + 72))(a2, v55, 1);
    Smart<__CFString const*>::~Smart((const void **)&v96);
  }
  uint64_t v84 = a2;
  float32x2_t v56 = &_os_log_internal;
  uint64_t v58 = *(void *)(Instrument + 64);
  uint64_t v57 = *(void *)(Instrument + 72);
  if ((int)((unint64_t)(v57 - v58) >> 3) > 0)
  {
    uint64_t v59 = 0;
    do
    {
      uint64_t v60 = *(void *)(v58 + 8 * v59);
      if (!v60) {
        break;
      }
      if (*(unsigned char *)(v60 + 164))
      {
        uint64_t Wave = DlsRegion::GetWave(*(DlsRegion **)(v58 + 8 * v59));
        if (!*(unsigned char *)(Wave + 57))
        {
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            goto LABEL_124;
          }
          int v62 = *(_DWORD *)(v60 + 160);
          *(_DWORD *)buf = 136315650;
          BOOL v90 = "InstrumentState.cpp";
          __int16 v91 = 1024;
          int v92 = 398;
          __int16 v93 = 1024;
          *(_DWORD *)uint64_t v94 = v62;
          _os_log_impl(&dword_21B9BB000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d LoadDlsInstrument: Sample with wave ID %u is corrupt", buf, 0x18u);
          if (!*(unsigned char *)(Wave + 57))
          {
LABEL_124:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v96, 0xFFFFD589);
              *(_DWORD *)buf = 136315906;
              BOOL v90 = "InstrumentState.cpp";
              __int16 v91 = 1024;
              int v92 = 399;
              __int16 v93 = 2080;
              *(void *)uint64_t v94 = &v96;
              *(_WORD *)&v94[8] = 2080;
              v95 = "LoadDlsInstrument: Corrupt sample";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            int v83 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v83, "LoadDlsInstrument: Corrupt sample", -10871);
          }
        }
        unsigned int v85 = InstrumentManager::AddSample(*((InstrumentManager **)v84 + 14), (DlsObject **)Wave, *v12, *(unsigned char *)(*((void *)v84 + 3) + 176), *(_DWORD *)(v60 + 160));
        CFURLRef v63 = v12[6];
        __int16 v64 = (unsigned int *)v12[7];
        unint64_t v65 = ((char *)v64 - (char *)v63) >> 2;
        if (v64 == (unsigned int *)v63)
        {
LABEL_81:
          CFURLRef v68 = v12[8];
          if (v64 >= (unsigned int *)v68)
          {
            unint64_t v70 = v65 + 1;
            if ((v65 + 1) >> 62) {
              std::vector<void const*>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v71 = v68 - v63;
            if (v71 >> 1 > v70) {
              unint64_t v70 = v71 >> 1;
            }
            BOOL v72 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v72) {
              unint64_t v73 = v70;
            }
            if (v73)
            {
              unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v73);
              CFURLRef v63 = v12[6];
              __int16 v64 = (unsigned int *)v12[7];
            }
            else
            {
              uint64_t v74 = 0;
            }
            __int16 v75 = (unsigned int *)(v73 + 4 * v65);
            *__int16 v75 = v85;
            CFURLRef v69 = (const __CFURL *)(v75 + 1);
            while (v64 != (unsigned int *)v63)
            {
              unsigned int v76 = *--v64;
              *--__int16 v75 = v76;
            }
            v12[6] = (CFURLRef)v75;
            v12[7] = v69;
            v12[8] = (CFURLRef)(v73 + 4 * v74);
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            unsigned int *v64 = v85;
            CFURLRef v69 = (const __CFURL *)(v64 + 1);
          }
          v12[7] = v69;
        }
        else
        {
          uint64_t v66 = 0;
          unsigned int v67 = 1;
          while (*((_DWORD *)v63 + v66) != v85)
          {
            uint64_t v66 = v67;
            BOOL v30 = v65 > v67++;
            if (!v30) {
              goto LABEL_81;
            }
          }
        }
        operator new();
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v90 = "InstrumentState.cpp";
        __int16 v91 = 1024;
        int v92 = 391;
        _os_log_impl(&dword_21B9BB000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadDlsInstrument: skipping invalid region", buf, 0x12u);
        uint64_t v58 = *(void *)(Instrument + 64);
        uint64_t v57 = *(void *)(Instrument + 72);
      }
      ++v59;
    }
    while ((int)v59 < (int)((unint64_t)(v57 - v58) >> 3));
  }
  (*(void (**)(SamplerState *, uint64_t))(*(void *)v84 + 64))(v84, 1);
  if (*(void *)v87) {
    free(*(void **)v87);
  }
  return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
}

void sub_21BA490A4()
{
}

void sub_21BA490B8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x21BA490C0);
  }
  __clang_call_terminate(a1);
}

uint64_t GlobalState::LoadEXS24Instrument(InstrumentState **this, InstrumentState **a2, const __CFURL *a3)
{
  if (a2 == this) {
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v4 = *this;
  InstrumentManager::ClearFileReferences(*((InstrumentManager **)*this + 14));
  return InstrumentState::LoadEXS24Instrument(v4, a3);
}

void sub_21BA49148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "GlobalState.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 500;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d GlobalState::LoadEXS24Instrument: Load failed", (uint8_t *)&a9, 0x12u);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void GlobalState::SetPerformanceParameter(GlobalState *this, unsigned int a2, float a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v11 = a2;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    int v13 = "GlobalState.cpp";
    __int16 v14 = 1024;
    int v15 = 729;
    __int16 v16 = 1024;
    unsigned int v17 = a2;
    __int16 v18 = 2048;
    double v19 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SetPerformanceParameter: param %u value %f", buf, 0x22u);
  }
  uint64_t v6 = (char *)*((void *)this + 16);
  if (!v6) {
    goto LABEL_14;
  }
  unsigned int v7 = (char *)this + 128;
  do
  {
    unsigned int v8 = *((_DWORD *)v6 + 8);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      float v10 = (char **)v6;
    }
    else {
      float v10 = (char **)(v6 + 8);
    }
    if (v9) {
      unsigned int v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != (char *)this + 128 && *((_DWORD *)v7 + 8) <= a2) {
    *(float *)(*((void *)v7 + 7) + 164) = fminf(fmaxf(a3, 0.0), 1.0);
  }
  else {
LABEL_14:
  }
    *((float *)std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 18, a2, &v11)+ 8) = a3;
}

void DlsInstrument::~DlsInstrument(DlsInstrument *this)
{
  DlsInstrument::~DlsInstrument(this);

  JUMPOUT(0x21D497F90);
}

{
  unint64_t v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26CBA9DD0;
  unsigned int v3 = (void *)*((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if ((unint64_t)v3 < v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        uint64_t v2 = *((void *)this + 9);
      }
      ++v3;
    }
    while ((unint64_t)v3 < v2);
    unsigned int v3 = (void *)*((void *)this + 8);
  }
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 8);
  std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void DlsInstrument::SetLocale(DlsInstrument *this, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 22) = a2;
  *((_DWORD *)this + 23) = a3;
  *((_DWORD *)this + 99) = a2 + (a3 << 8);
  uint64_t Bank = BankManager::GetBank((BankManager *)(*((void *)this + 7) + 152), a3, 1);
  if (Bank)
  {
    uint64_t v5 = *((unsigned int *)this + 22);
    if (v5 >= 0x80)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136316162;
        unsigned int v7 = "BankManagement.cpp";
        __int16 v8 = 1024;
        int v9 = 71;
        __int16 v10 = 2080;
        unsigned int v11 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/PublicAudioUnits/DlsSynth/BankManagement.cpp";
        __int16 v12 = 1024;
        int v13 = 71;
        __int16 v14 = 2080;
        int v15 = "isGood";
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v6, 0x2Cu);
      }
    }
    else
    {
      *(void *)(Bank + 8 * v5) = this;
    }
  }
}

uint64_t DlsInstrument::ReferenceInstrument(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 64);
  if ((int)((unint64_t)(*(void *)(this + 72) - v1) >> 3) >= 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3);
      uint64_t v5 = *(void *)(v4 + 472);
      if (v5)
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
        if ((this & 1) == 0)
        {
          (*(void (**)(void, void))(**(void **)(v4 + 472) + 104))(*(void *)(v4 + 472), 0);
          uint64_t v6 = *(int *)(v4 + 500);
          int v7 = (4094 * (_WORD)v6 * *(_WORD *)(v4 + 492) - *(_WORD *)(v4 + 488)) & 0xFFF | (49152 * v6);
          unint64_t v8 = v7 / (unint64_t)(2 * v6);
          *(_DWORD *)(v4 + 512) = v8;
          *(_DWORD *)(DlsRegion::GetWave((DlsRegion *)v4) + 140) = v8;
          int v9 = malloc_type_malloc(v7 + 16, 0x7C51E058uLL);
          if (!v9)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            int v27 = std::bad_alloc::bad_alloc(exception);
          }
          *(void *)(v4 + 504) = v9;
          int v10 = (*(uint64_t (**)(void, void *, void))(**(void **)(v4 + 472) + 16))(*(void *)(v4 + 472), v9, v7);
          this = printf("allocBytes = %d : bytesRead = %d\n", v7, v10);
        }
      }
      else
      {
        uint64_t v11 = *(void *)(*(void *)(*(void *)(v4 + 56) + 56) + 96);
        uint64_t v12 = *(void *)(*(void *)(*(void *)(v4 + 56) + 56) + 104);
        uint64_t v13 = v12 - v11;
        if (v12 != v11)
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
          unsigned int v16 = 1;
          while (*(_DWORD *)(v11 + 24 * v14 + 16) != *(_DWORD *)(v4 + 160))
          {
            uint64_t v14 = v16;
            if (v15 <= v16++) {
              goto LABEL_13;
            }
          }
          ++*(_DWORD *)(v11 + 24 * v14 + 20);
        }
LABEL_13:
        this = DlsRegion::GetWave((DlsRegion *)v4);
        if (this)
        {
          if (!*(void *)(v4 + 472))
          {
            uint64_t v18 = this;
            this = DlsRegion::GetWave((DlsRegion *)v4);
            if (!*(unsigned char *)(this + 116))
            {
              if (*(unsigned char *)(v18 + 57))
              {
                unint64_t v19 = (*(void *)(DlsRegion::GetWave((DlsRegion *)v4) + 80) + 15) & 0xFFFFFFFFFFFFFFF0;
                this = DlsRegion::GetFrameLength((DlsRegion *)v4);
                uint64_t v20 = *(int *)(v4 + 144);
                if (*(_DWORD *)(v4 + 148) + (int)v20 >= (int)this) {
                  int v21 = this;
                }
                else {
                  int v21 = *(_DWORD *)(v4 + 148) + v20;
                }
                if (v21 <= (int)v20)
                {
                  uint64_t v25 = (_OWORD *)(v19 + 4 * (int)this);
                  v25[6] = 0u;
                  v25[7] = 0u;
                  v25[4] = 0u;
                  v25[5] = 0u;
                  v25[2] = 0u;
                  v25[3] = 0u;
                  *uint64_t v25 = 0u;
                  v25[1] = 0u;
                }
                else
                {
                  uint64_t v22 = 0;
                  unint64_t v23 = v19 + 4 * v21;
                  unint64_t v24 = v19 + 4 * v20;
                  do
                  {
                    *(_DWORD *)(v23 + v22) = *(_DWORD *)(v24 + v22);
                    v22 += 4;
                  }
                  while (v22 != 128);
                }
              }
            }
          }
        }
      }
      ++v3;
      uint64_t v1 = *(void *)(v2 + 64);
    }
    while (v3 < (int)((unint64_t)(*(void *)(v2 + 72) - v1) >> 3));
  }
  return this;
}

void DlsInstrument::AddNewRegion(void **this)
{
  if (this[9] == this[8] && !*((unsigned char *)this + 392))
  {
    std::vector<DlsInstrument *>::reserve(this + 8, 0x10uLL);
    *((unsigned char *)this + 392) = 1;
  }
  operator new();
}

void sub_21BA49A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 480);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x21D497F90](v2, 0x10B1C4051E5FC0CLL);
  _Unwind_Resume(a1);
}

BOOL CAAudioChannelLayout::AreLayoutsEquivalent(const AudioChannelLayout *this, const AudioChannelLayout *a2, const AudioChannelLayout *a3)
{
  inSpecifier[2] = *MEMORY[0x263EF8340];
  if (this == a2) {
    return 1;
  }
  if (!a2) {
    return 0;
  }
  UInt32 v5 = 4;
  int outPropertyData = 0;
  inSpecifier[0] = this;
  inSpecifier[1] = a2;
  if (AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &v5, &outPropertyData)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = outPropertyData == 0;
  }
  return !v3;
}

void ConditionalChunk::ConditionalChunk(ConditionalChunk *this, RIFFChunkHeader *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *(void *)this = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  *((void *)this + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)((char *)a2 + 28);
  long long v5 = *((_OWORD *)a2 + 1);
  *((void *)this + 7) = 0;
  uint64_t v6 = (void **)((char *)this + 56);
  *((_OWORD *)this + 1) = v5;
  *(_OWORD *)((char *)this + 28) = v4;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (*(_DWORD *)((char *)this + 18) == 543974499 || !os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(_DWORD *)buf = 136316162;
    unsigned int v45 = "DlsFile.cpp";
    __int16 v46 = 1024;
    int v47 = 1276;
    __int16 v48 = 2080;
    CFStringRef v49 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    __int16 v50 = 1024;
    int v51 = 1276;
    __int16 v52 = 2080;
    double v53 = "GetHeader().GetType() == ChunkType(kChunkType_Conditional)";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
    uint64_t v7 = *((void *)this + 9);
    unint64_t v8 = (unsigned char *)*((void *)this + 7);
  }
  if ((unint64_t)(v7 - (void)v8) <= 0x7F)
  {
    int v9 = (unsigned char *)*((void *)this + 8);
    int v10 = (char *)operator new(0x80uLL);
    uint64_t v11 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v12 = v11;
    if (v9 != v8)
    {
      uint64_t v12 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        int v13 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v9 != v8);
    }
    *((void *)this + 7) = v12;
    *((void *)this + 8) = v11;
    *((void *)this + 9) = v10 + 128;
    if (v8) {
      operator delete(v8);
    }
  }
  uint64_t v14 = &_os_log_internal;
  while (!RIFFChunkHeader::IsDone(this))
  {
    unint64_t v15 = *(TStream **)this;
    unsigned int v16 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int Little16 = TStream::ReadLittle16(v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if ((unsigned __int16)(Little16 - 17) <= 1u)
    {
      uint64_t v18 = *(TStream **)this;
      unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 1);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      DLSID::DLSID((DLSID *)buf, v18);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
LABEL_30:
      int v23 = Little16 - 15;
      uint64_t v24 = *((void *)this + 8);
      int v25 = *(_DWORD *)(v24 - 4);
      if ((Little16 - 15) > 3)
      {
        int v27 = *(_DWORD *)(v24 - 8);
        *((void *)this + 8) = v24 - 8;
        switch(Little16)
        {
          case 1:
            int Little32 = v27 & v25;
            break;
          case 2:
            int Little32 = v27 | v25;
            break;
          case 3:
            int Little32 = v27 ^ v25;
            break;
          case 4:
            int Little32 = v27 + v25;
            break;
          case 5:
            int Little32 = v25 - v27;
            break;
          case 6:
            int Little32 = v27 * v25;
            break;
          case 7:
            int Little32 = v25 / v27;
            break;
          case 8:
            if (v25) {
              BOOL v29 = v27 == 0;
            }
            else {
              BOOL v29 = 1;
            }
            int v30 = !v29;
            int Little32 = v30 << 31 >> 31;
            break;
          case 9:
            if (v25 | v27) {
              int Little32 = -1;
            }
            else {
              int Little32 = 0;
            }
            break;
          case 10:
            if (v25 >= v27) {
              int Little32 = 0;
            }
            else {
              int Little32 = -1;
            }
            break;
          case 11:
            if (v25 > v27) {
              int Little32 = 0;
            }
            else {
              int Little32 = -1;
            }
            break;
          case 12:
            if (v25 <= v27) {
              int Little32 = 0;
            }
            else {
              int Little32 = -1;
            }
            break;
          case 13:
            if (v25 < v27) {
              int Little32 = 0;
            }
            else {
              int Little32 = -1;
            }
            break;
          case 14:
            BOOL v26 = v25 == v27;
LABEL_63:
            if (v26) {
              int Little32 = -1;
            }
            else {
              int Little32 = 0;
            }
            break;
          default:
            goto LABEL_40;
        }
      }
      else
      {
        int Little32 = 0;
        *((void *)this + 8) = v24 - 4;
        switch(v23)
        {
          case 0:
            BOOL v26 = v25 == 0;
            goto LABEL_63;
          case 2:
            int Little32 = 0;
            if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_66;
            }
            *(_DWORD *)buf = 136316162;
            unsigned int v45 = "DlsFile.cpp";
            __int16 v46 = 1024;
            int v47 = 1529;
            __int16 v48 = 2080;
            CFStringRef v49 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
            __int16 v50 = 1024;
            int v51 = 1529;
            __int16 v52 = 2080;
            double v53 = "0";
            unint64_t v28 = v14;
            break;
          case 3:
            int Little32 = 0;
            if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_66;
            }
            *(_DWORD *)buf = 136316162;
            unsigned int v45 = "DlsFile.cpp";
            __int16 v46 = 1024;
            int v47 = 1491;
            __int16 v48 = 2080;
            CFStringRef v49 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
            __int16 v50 = 1024;
            int v51 = 1491;
            __int16 v52 = 2080;
            double v53 = "0";
            unint64_t v28 = v14;
            break;
          default:
            goto LABEL_66;
        }
        _os_log_impl(&dword_21B9BB000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
LABEL_40:
        int Little32 = 0;
      }
      goto LABEL_66;
    }
    if (Little16 != 16) {
      goto LABEL_30;
    }
    uint64_t v20 = *(TStream **)this;
    int v21 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int Little32 = TStream::ReadLittle32(v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    *((void *)this + 8) -= 4;
LABEL_66:
    uint64_t v32 = (int *)*((void *)this + 8);
    unint64_t v31 = *((void *)this + 9);
    if ((unint64_t)v32 >= v31)
    {
      uint64_t v34 = (int *)*v6;
      uint64_t v35 = ((char *)v32 - (unsigned char *)*v6) >> 2;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62) {
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v31 - (void)v34;
      if (v37 >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v38);
        uint64_t v34 = (int *)*((void *)this + 7);
        uint64_t v32 = (int *)*((void *)this + 8);
      }
      else
      {
        uint64_t v39 = 0;
      }
      BOOL v40 = (int *)(v38 + 4 * v35);
      int *v40 = Little32;
      uint64_t v33 = v40 + 1;
      while (v32 != v34)
      {
        int v41 = *--v32;
        *--BOOL v40 = v41;
      }
      *((void *)this + 7) = v40;
      *((void *)this + 8) = v33;
      *((void *)this + 9) = v38 + 4 * v39;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      int *v32 = Little32;
      uint64_t v33 = v32 + 1;
    }
    *((void *)this + 8) = v33;
  }
  uint64_t v42 = *((void *)this + 8);
  int v43 = *(_DWORD *)(v42 - 4);
  *((void *)this + 8) = v42 - 4;
  *((unsigned char *)this + 48) = v43 != 0;
}

void sub_21BA4A050(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void DLSID::DLSID(DLSID *this, TStream *a2)
{
  *(_DWORD *)this = TStream::ReadLittle32(a2);
  *((_WORD *)this + 2) = TStream::ReadLittle16(a2);
  *((_WORD *)this + 3) = TStream::ReadLittle16(a2);
  (*(void (**)(TStream *, char *, uint64_t))(*(void *)a2 + 16))(a2, (char *)this + 8, 8);
}

uint64_t PoolCue::GetOffset(PoolCue *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136316162;
    long long v4 = "DlsPoolTable.h";
    __int16 v5 = 1024;
    int v6 = 83;
    __int16 v7 = 2080;
    unint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsPoolTable.h";
    __int16 v9 = 1024;
    int v10 = 83;
    __int16 v11 = 2080;
    uint64_t v12 = "HasOffset()";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v3, 0x2Cu);
  }
  return *((unsigned int *)this + 3);
}

void ArticulationList::ArticulationList(ArticulationList *this, RIFFChunkHeader *a2, Articulations *a3)
{
  long long v4 = this;
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(void *)this = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  *((void *)this + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)((char *)a2 + 28);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 28) = v6;
  if (!*((unsigned char *)this + 17) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "DlsFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1185;
    *(_WORD *)unint64_t v36 = 2080;
    *(void *)&v36[2] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    __int16 v37 = 1024;
    int v38 = 1185;
    __int16 v39 = 2080;
    BOOL v40 = "GetHeader().IsListType()";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  unsigned int v7 = bswap32(*((_DWORD *)v4 + 10));
  if (v7 != 1818325554 && v7 != 1818325620 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "DlsFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1187;
    *(_WORD *)unint64_t v36 = 2080;
    *(void *)&v36[2] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    __int16 v37 = 1024;
    int v38 = 1187;
    __int16 v39 = 2080;
    BOOL v40 = "GetHeader().GetSubType() == ChunkType(kChunkType_ArticulationList2) || GetHeader().GetSubType() == ChunkType(k"
          "ChunkType_ArticulationList)";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (*((unsigned char *)v4 + 16))
  {
    *(void *)&long long v9 = 0x101010101010101;
    *((void *)&v9 + 1) = 0x101010101010101;
    *(_OWORD *)((char *)a3 + 8) = v9;
    int v10 = (char *)a3 + 8;
    __int16 v11 = &_os_log_internal;
    *((void *)a3 + 7) = 0x101010101010101;
    *(_OWORD *)((char *)a3 + 24) = v9;
    *(_OWORD *)((char *)a3 + 40) = v9;
    while (1)
    {
      if (RIFFChunkHeader::IsDone(v4)) {
        return;
      }
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      *(_DWORD *)unint64_t v36 = 1061109567;
      HIDWORD(v40) = 1061109567;
      uint64_t v12 = v4;
      RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)buf, *(RIFFChunkHeader **)v4, *((void *)v4 + 1));
      uint64_t v14 = *(TStream **)buf;
      uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      }
      int v15 = buf[16];
      if (bswap32(*(unsigned int *)v36) - 1634890801 >= 2 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v41 = 136316162;
        *(void *)&v41[4] = "DlsFile.cpp";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 1217;
        __int16 v42 = 2080;
        int v43 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
        __int16 v44 = 1024;
        int v45 = 1217;
        __int16 v46 = 2080;
        int v47 = "GetHeader().GetType() == ChunkType(kChunkType_Articulation2) || GetHeader().GetType() == ChunkType(kChunkT"
              "ype_Articulation1)";
        _os_log_impl(&dword_21B9BB000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v41, 0x2Cu);
      }
      if (v15)
      {
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int Little32 = TStream::ReadLittle32(v14);
        if (v13)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v17 = TStream::ReadLittle32(v14);
        if (v13)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          if (Little32 >= 9)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_61:
            (*(void (**)(TStream *, void))(*(void *)v14 + 64))(v14, Little32 - 8);
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
        else if (Little32 > 8)
        {
          goto LABEL_61;
        }
        if (v17)
        {
          for (int i = 0; i != v17; ++i)
          {
            if (v13)
            {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              BOOL v26 = v13;
            }
            else
            {
              BOOL v26 = 0;
            }
            *(void *)int v41 = v14;
            *(void *)&v41[8] = v26;
            ConnectionBlockChunk::ConnectionBlockChunk((TStream **)v41, (uint64_t)&v31, 1);
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            uint64_t DefaultArticulations = GetDefaultArticulations();
            uint64_t v28 = 0;
            BOOL v29 = (unsigned __int16 *)(DefaultArticulations + 300);
            while ((unsigned __int16)v31 != *(v29 - 2)
                 || __PAIR64__(WORD2(v31), WORD1(v31)) != __PAIR64__(*v29, *(v29 - 1)))
            {
              ++v28;
              v29 += 6;
              if (v28 == 56) {
                goto LABEL_74;
              }
            }
            if (v28 != -1) {
              Articulations::SetParameterValue(a3, v28, v32[0]);
            }
LABEL_74:
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
        goto LABEL_80;
      }
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v14);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      int v18 = 0;
      for (uint64_t j = 8; j != 64; ++j)
      {
        if (!*((unsigned char *)a3 + j)) {
          ++v18;
        }
      }
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v14);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (!v18) {
        goto LABEL_80;
      }
      for (int k = 0; k != v18; ++k)
      {
        uint64_t v21 = 0;
        int v22 = 0;
        while (v10[v21])
        {
LABEL_45:
          if (++v21 == 56)
          {
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int v41 = 136316162;
              *(void *)&v41[4] = "Articulations.cpp";
              *(_WORD *)&v41[12] = 1024;
              *(_DWORD *)&v41[14] = 578;
              __int16 v42 = 2080;
              int v43 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/PublicAudioUnits/DlsSynth/"
                    "Articulations.cpp";
              __int16 v44 = 1024;
              int v45 = 578;
              __int16 v46 = 2080;
              int v47 = "0";
              _os_log_impl(&dword_21B9BB000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v41, 0x2Cu);
              if (!v13) {
                goto LABEL_53;
              }
LABEL_51:
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v24 = v13;
              goto LABEL_54;
            }
            goto LABEL_50;
          }
        }
        if (v22 != k)
        {
          ++v22;
          goto LABEL_45;
        }
        uint64_t v23 = GetDefaultArticulations() + 12 * v21;
        uint64_t v33 = *(void *)(v23 + 296);
        int v34 = *(_DWORD *)(v23 + 304);
        if (!v10[v21])
        {
          int v34 = *((_DWORD *)a3 + v21 + 16);
          if (v13) {
            goto LABEL_51;
          }
          goto LABEL_53;
        }
LABEL_50:
        if (v13) {
          goto LABEL_51;
        }
LABEL_53:
        uint64_t v24 = 0;
LABEL_54:
        unint64_t v31 = v14;
        *(void *)uint64_t v32 = v24;
        ConnectionBlockChunk::ConnectionBlockChunk(&v31, (uint64_t)&v33, 0);
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
LABEL_80:
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      long long v4 = v12;
    }
  }
}

void sub_21BA4A898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ConnectionBlockChunk::ConnectionBlockChunk(TStream **a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  if (a3)
  {
    *(_WORD *)a2 = TStream::ReadLittle16(v5);
    *(_WORD *)(a2 + 2) = TStream::ReadLittle16(*a1);
    *(_WORD *)(a2 + 4) = TStream::ReadLittle16(*a1);
    *(_WORD *)(a2 + 6) = TStream::ReadLittle16(*a1);
    uint64_t result = TStream::ReadLittle32(*a1);
    *(_DWORD *)(a2 + 8) = result;
  }
  else
  {
    TStream::WriteLittle16(v5);
    TStream::WriteLittle16(*a1);
    TStream::WriteLittle16(*a1);
    TStream::WriteLittle16(*a1);
    unsigned int v7 = *a1;
    return TStream::WriteLittle32(v7);
  }
  return result;
}

void ConditionalChunk::~ConditionalChunk(ConditionalChunk *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t WaveSampleChunk::WaveSampleChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = (unsigned char *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = v7;
  if (*(_DWORD *)(a1 + 18) != 1886221175 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v54 = 136316162;
    CFStringRef v55 = "DlsFile.cpp";
    __int16 v56 = 1024;
    int v57 = 650;
    __int16 v58 = 2080;
    uint64_t v59 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    __int16 v60 = 1024;
    int v61 = 650;
    __int16 v62 = 2080;
    CFURLRef v63 = "GetHeader().GetType() == ChunkType(kChunkType_WaveSampleChunk)";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v54, 0x2Cu);
  }
  if (*v6)
  {
    unint64_t v8 = *(TStream **)a1;
    long long v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::ReadLittle32(v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    int v10 = *(TStream **)a1;
    __int16 v11 = *(std::__shared_weak_count **)(a1 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 Little16 = TStream::ReadLittle16(v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v13 = *(TStream **)a1;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 8);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v15 = TStream::ReadLittle16(v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v16 = *(TStream **)a1;
    int v17 = *(std::__shared_weak_count **)(a1 + 8);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int Little32 = TStream::ReadLittle32(v16);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    unint64_t v19 = *(TStream **)a1;
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 8);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = TStream::ReadLittle32(v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    int v22 = *(TStream **)a1;
    uint64_t v23 = *(std::__shared_weak_count **)(a1 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v24 = TStream::ReadLittle32(v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    *(_WORD *)a3 = Little16;
    *(_WORD *)(a3 + 2) = v15;
    *(_DWORD *)(a3 + 4) = Little32;
    *(_DWORD *)(a3 + 8) = v21;
    if (v24)
    {
      BOOL v26 = *(TStream **)a1;
      int v25 = *(std::__shared_weak_count **)(a1 + 8);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::ReadLittle32(v26);
      unsigned int v27 = TStream::ReadLittle32(v26);
      unsigned int v28 = TStream::ReadLittle32(v26);
      int v29 = TStream::ReadLittle32(v26);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v24 >= 2)
      {
        int v30 = *(TStream **)a1;
        unint64_t v31 = *(std::__shared_weak_count **)(a1 + 8);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(TStream *, uint64_t))(*(void *)v30 + 64))(v30, 16 * (v24 - 1));
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
      }
      *(void *)(a3 + 12) = __PAIR64__(v28, v27);
      *(_DWORD *)(a3 + 20) = v29;
    }
    else
    {
      *(void *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 12) = 0;
    }
  }
  else
  {
    int v32 = *(_DWORD *)(a3 + 20);
    uint64_t v33 = *(TStream **)a1;
    int v34 = *(std::__shared_weak_count **)(a1 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle32(v33);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    uint64_t v35 = *(TStream **)a1;
    unint64_t v36 = *(std::__shared_weak_count **)(a1 + 8);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle16(v35);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    __int16 v37 = *(TStream **)a1;
    int v38 = *(std::__shared_weak_count **)(a1 + 8);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle16(v37);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    __int16 v39 = *(TStream **)a1;
    BOOL v40 = *(std::__shared_weak_count **)(a1 + 8);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle32(v39);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    int v41 = *(TStream **)a1;
    __int16 v42 = *(std::__shared_weak_count **)(a1 + 8);
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle32(v41);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    int v43 = *(TStream **)a1;
    __int16 v44 = *(std::__shared_weak_count **)(a1 + 8);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TStream::WriteLittle32(v43);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v32)
    {
      int v45 = *(TStream **)a1;
      __int16 v46 = *(std::__shared_weak_count **)(a1 + 8);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v45);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      int v47 = *(TStream **)a1;
      uint64_t v48 = *(std::__shared_weak_count **)(a1 + 8);
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v47);
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      CFStringRef v49 = *(TStream **)a1;
      __int16 v50 = *(std::__shared_weak_count **)(a1 + 8);
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v49);
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      int v51 = *(TStream **)a1;
      __int16 v52 = *(std::__shared_weak_count **)(a1 + 8);
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      TStream::WriteLittle32(v51);
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
    }
  }
  return a1;
}

void sub_21BA4AEE4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void ConnectionState::~ConnectionState(ConnectionState *this)
{
  ConnectionState::~ConnectionState(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBAB6F8;
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    MEMORY[0x21D497F90](v2, 0x1000C403E1C8BA9);
  }

  SamplerState::~SamplerState(this);
}

uint64_t ConnectionState::Restore(ConnectionState *this, const CACFDictionary *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = ComponentState::Restore(this, a2);
  if (!*(void *)a2) {
    return v4;
  }
  if ((CACFDictionary::GetUInt32(a2, @"source", (unsigned int *)v21) & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      uint64_t v23 = "ConnectionState.cpp";
      __int16 v24 = 1024;
      int v25 = 269;
      __int16 v26 = 2080;
      *(void *)unsigned int v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      unsigned int v28 = "ConnectionState::Restore: Connection must include source ID";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::Restore: Connection must include source ID", -10851);
  }
  *((_DWORD *)this + 23) = *(_DWORD *)v21;
  if ((CACFDictionary::GetUInt32(a2, @"destination", (unsigned int *)v21) & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      uint64_t v23 = "ConnectionState.cpp";
      __int16 v24 = 1024;
      int v25 = 272;
      __int16 v26 = 2080;
      *(void *)unsigned int v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      unsigned int v28 = "ConnectionState::Restore: Connection must include destination ID";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    unint64_t v19 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v19, "ConnectionState::Restore: Connection must include destination ID", -10851);
  }
  *((_DWORD *)this + 24) = *(_DWORD *)v21;
  if (CACFDictionary::GetFloat32(a2, @"scale", (float *)v21))
  {
    ConnectionState::SetMaxValue((float *)this, *(float *)v21);
    int Bool = CACFDictionary::GetBool(a2, @"bipolar", v21);
    if (v21[0]) {
      int v6 = Bool;
    }
    else {
      int v6 = 0;
    }
    float v7 = 0.0;
    if (v6 == 1) {
      float v7 = -*((float *)this + 26);
    }
    ConnectionState::SetMinValue((float *)this, v7);
    goto LABEL_13;
  }
  *(_DWORD *)int v21 = 0;
  char Float32 = CACFDictionary::GetFloat32(a2, @"min value", (float *)v21);
  *((_DWORD *)this + 25) = *(_DWORD *)v21;
  *(_DWORD *)int v21 = 0;
  if ((Float32 & 1) == 0)
  {
    *((_DWORD *)this + 26) = 0;
LABEL_31:
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      uint64_t v23 = "ConnectionState.cpp";
      __int16 v24 = 1024;
      int v25 = 294;
      __int16 v26 = 2080;
      *(void *)unsigned int v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      unsigned int v28 = "ConnectionState::Restore: Connection must include min/max or scale value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    uint64_t v20 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v20, "ConnectionState::Restore: Connection must include min/max or scale value", -10851);
  }
  char v9 = CACFDictionary::GetFloat32(a2, @"max value", (float *)v21);
  *((_DWORD *)this + 26) = *(_DWORD *)v21;
  if ((v9 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_13:
  if (CACFDictionary::GetBool(a2, @"inverse", v21)) {
    ConnectionState::SetInverse(this, v21[0]);
  }
  if (CACFDictionary::GetUInt32(a2, @"transform", (unsigned int *)v21)) {
    ConnectionState::SetTransformType(this, *(int *)v21);
  }
  if (CACFDictionary::GetUInt32(a2, @"control", (unsigned int *)v21)) {
    *((_DWORD *)this + 29) = *(_DWORD *)v21;
  }
  if (CACFDictionary::GetUInt32(a2, @"control inverse", (unsigned int *)v21)) {
    *((unsigned char *)this + 120) = *(_DWORD *)v21 != 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (**(uint64_t (***)(ConnectionState *))this)(this);
    int v11 = *((_DWORD *)this + 23);
    int v12 = *((_DWORD *)this + 24);
    double v13 = *((float *)this + 25);
    double v14 = *((float *)this + 26);
    int v15 = *((unsigned __int8 *)this + 108);
    int v16 = *((_DWORD *)this + 28);
    *(_DWORD *)buf = 136317186;
    uint64_t v23 = "ConnectionState.cpp";
    __int16 v24 = 1024;
    int v25 = 304;
    __int16 v26 = 1024;
    *(_DWORD *)unsigned int v27 = v10;
    *(_WORD *)&v27[4] = 1024;
    *(_DWORD *)&v27[6] = v11;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = v12;
    HIWORD(v28) = 2048;
    double v29 = v13;
    __int16 v30 = 2048;
    double v31 = v14;
    __int16 v32 = 1024;
    int v33 = v15;
    __int16 v34 = 1024;
    int v35 = v16;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::Restore: id 0x%x src 0x%x dst 0x%x min %f max %f inv %d trn 0x%x", buf, 0x44u);
  }
  return v4;
}

void sub_21BA4B524(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float *ConnectionState::SetMaxValue(float *this, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (this[26] != a2)
  {
    int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315906;
      uint64_t v5 = "ConnectionState.cpp";
      __int16 v6 = 1024;
      int v7 = 348;
      __int16 v8 = 2048;
      char v9 = v3;
      __int16 v10 = 2048;
      double v11 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetMaxValue(%p, %g)", (uint8_t *)&v4, 0x26u);
    }
    v3[26] = a2;
    return (float *)(*(uint64_t (**)(float *, uint64_t, void))(*(void *)v3 + 112))(v3, 4307, 0);
  }
  return this;
}

float *ConnectionState::SetMinValue(float *this, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (this[25] != a2)
  {
    int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315906;
      uint64_t v5 = "ConnectionState.cpp";
      __int16 v6 = 1024;
      int v7 = 339;
      __int16 v8 = 2048;
      char v9 = v3;
      __int16 v10 = 2048;
      double v11 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetMinValue(%p, %g)", (uint8_t *)&v4, 0x26u);
    }
    v3[25] = a2;
    return (float *)(*(uint64_t (**)(float *, uint64_t, void))(*(void *)v3 + 112))(v3, 4306, 0);
  }
  return this;
}

unsigned char *ConnectionState::SetInverse(unsigned char *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (this[108] != a2)
  {
    int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315906;
      uint64_t v5 = "ConnectionState.cpp";
      __int16 v6 = 1024;
      int v7 = 357;
      __int16 v8 = 2048;
      char v9 = v3;
      __int16 v10 = 1024;
      int v11 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetInverse(%p, %d)", (uint8_t *)&v4, 0x22u);
    }
    v3[108] = a2;
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, void))(*(void *)v3 + 112))(v3, 4304, 0);
  }
  return this;
}

_DWORD *ConnectionState::SetTransformType(_DWORD *this, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v2 = a2 - 1;
  if ((a2 - 1) >= 4)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      __int16 v8 = "ConnectionState.cpp";
      __int16 v9 = 1024;
      int v10 = 380;
      __int16 v11 = 2080;
      uint64_t v12 = v6;
      __int16 v13 = 2080;
      double v14 = "ConnectionState::SetTransformType: Invalid connection transform type";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::SetTransformType: Invalid connection transform type", -10851);
  }
  int v3 = this;
  if (this[28] != v2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v8 = "ConnectionState.cpp";
      __int16 v9 = 1024;
      int v10 = 383;
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      __int16 v13 = 1024;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetTransformType(%p, %d)", buf, 0x22u);
    }
    v3[28] = v2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v3 + 112))(v3, 4303, 0);
  }
  return this;
}

void sub_21BA4BA7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ConnectionState::Save(ConnectionState *this, CACFDictionary *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315650;
    __int16 v8 = "ConnectionState.cpp";
    __int16 v9 = 1024;
    int v10 = 227;
    __int16 v11 = 2048;
    uint64_t v12 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::Save(this=%p)", (uint8_t *)&v7, 0x1Cu);
  }
  ComponentState::Save((const __CFString **)this, a2);
  CACFDictionary::AddUInt32(a2, @"source");
  CACFDictionary::AddUInt32(a2, @"destination");
  float v4 = *((float *)this + 25);
  if (v4 == 0.0)
  {
    CFStringRef v5 = @"scale";
  }
  else
  {
    CACFDictionary::AddFloat32(a2, @"min value", v4);
    CFStringRef v5 = @"max value";
  }
  CACFDictionary::AddFloat32(a2, v5, *((float *)this + 26));
  CACFDictionary::AddBool(a2, @"inverse");
  CACFDictionary::AddUInt32(a2, @"transform");
  CACFDictionary::AddUInt32(a2, @"control");
  if (*((unsigned char *)this + 120)) {
    CACFDictionary::AddBool(a2, @"control inverse");
  }
  return 0;
}

uint64_t ConnectionState::SetProperty(LayerState **this, int a2, int *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      double v14 = "ConnectionState.cpp";
      __int16 v15 = 1024;
      int v16 = 192;
      __int16 v17 = 2080;
      int v18 = (LayerState **)v12;
      __int16 v19 = 2080;
      uint64_t v20 = "ConnectionState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4300:
      uint64_t v4 = *a3;
      uint64_t v5 = *((unsigned int *)this + 23);
      if (v5 != v4)
      {
        LayerState::NotifyConnectionChange(this[3], 4300, v5, v4);
        *((_DWORD *)this + 23) = v4;
        (*((void (**)(LayerState **, uint64_t, void))*this + 14))(this, 4300, 0);
      }
      goto LABEL_18;
    case 4301:
      int v8 = *a3;
      if (*((_DWORD *)this + 24) != *a3)
      {
        LayerState::SortConnections(*((LayerState **)this[3] + 65), *((LayerState **)this[3] + 66));
        *((_DWORD *)this + 24) = v8;
        (*((void (**)(LayerState **, uint64_t, void))*this + 14))(this, 4301, 0);
      }
      goto LABEL_18;
    case 4302:
      uint64_t v6 = *a3;
      uint64_t v7 = *((unsigned int *)this + 29);
      if (v7 != v6)
      {
        LayerState::NotifyConnectionChange(this[3], 4302, v7, v6);
        *((_DWORD *)this + 29) = v6;
        (*((void (**)(LayerState **, uint64_t, void))*this + 14))(this, 4302, 0);
      }
      goto LABEL_18;
    case 4303:
      ConnectionState::SetTransformType(this, *a3);
      goto LABEL_18;
    case 4304:
      ConnectionState::SetInverse(this, *a3 != 0);
      goto LABEL_18;
    case 4305:
      int v9 = *a3 != 0;
      if (*((unsigned __int8 *)this + 120) != v9)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          double v14 = "ConnectionState.cpp";
          __int16 v15 = 1024;
          int v16 = 392;
          __int16 v17 = 2048;
          int v18 = this;
          __int16 v19 = 1024;
          LODWORD(v20) = v9;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetControlInverse(%p, %d)", buf, 0x22u);
        }
        *((unsigned char *)this + 120) = v9;
        (*((void (**)(LayerState **, uint64_t, void))*this + 14))(this, 4305, 0);
      }
      goto LABEL_18;
    case 4306:
      ConnectionState::SetMinValue((float *)this, *(float *)a3);
      goto LABEL_18;
    case 4307:
      ConnectionState::SetMaxValue((float *)this, *(float *)a3);
LABEL_18:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = ComponentState::SetProperty((ComponentState *)this, a2, a3);
      break;
  }
  return result;
}

void sub_21BA4BFBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ConnectionState::GetProperty(ConnectionState *this, int a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 4300:
      int v5 = *((_DWORD *)this + 23);
      goto LABEL_11;
    case 4301:
      int v5 = *((_DWORD *)this + 24);
      goto LABEL_11;
    case 4302:
      int v5 = *((_DWORD *)this + 29);
      goto LABEL_11;
    case 4303:
      unsigned int v6 = *((_DWORD *)this + 28);
      if (v6 < 5) {
        int v5 = v6 + 1;
      }
      else {
        int v5 = -1;
      }
      goto LABEL_11;
    case 4304:
      int v5 = *((unsigned __int8 *)this + 108);
      goto LABEL_11;
    case 4305:
      int v5 = *((unsigned __int8 *)this + 120);
LABEL_11:
      *a3 = v5;
      return 1;
    case 4306:
      int v7 = *((_DWORD *)this + 25);
      goto LABEL_13;
    case 4307:
      int v7 = *((_DWORD *)this + 26);
LABEL_13:
      *a3 = v7;
      return 1;
    case 4308:
      Function = Transform::GetFunction(*((_DWORD *)this + 28));
      uint64_t v10 = 0;
      __int16 v11 = &_os_log_internal;
      v12.n128_u32[1] = 0;
      break;
    default:
      return ComponentState::GetProperty(this, a2, a3);
  }
  do
  {
    v12.n128_u32[0] = a3[v10];
    if (v12.n128_f32[0] == -1.0) {
      break;
    }
    if (v12.n128_f32[0] < 0.0 || v12.n128_f32[0] > 1.0)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v22, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        __int16 v24 = "ConnectionState.cpp";
        __int16 v25 = 1024;
        int v26 = 435;
        __int16 v27 = 2080;
        double v28 = COERCE_DOUBLE(v22);
        __int16 v29 = 2080;
        double v30 = COERCE_DOUBLE("Illegal curve location value");
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Illegal curve location value", -10851);
    }
    int v14 = *((_DWORD *)this + 31);
    if (*((unsigned char *)this + 108)) {
      v12.n128_f32[0] = 1.0 - v12.n128_f32[0];
    }
    if (*((float *)this + 25) == (float)-*((float *)this + 26))
    {
      if (v14 != 1) {
        goto LABEL_28;
      }
    }
    else if (v14 == 2)
    {
LABEL_28:
      if ((*((_DWORD *)this + 28) - 1) > 1)
      {
        float v15 = (float)(((float (*)(__n128))Function)(v12) * 2.0) + -1.0;
      }
      else
      {
        float v16 = (float)(v12.n128_f32[0] * 2.0) + -1.0;
        BOOL v17 = v16 < 0.0;
        v12.n128_f32[0] = -v16;
        if (v16 >= 0.0) {
          v12.n128_f32[0] = v16;
        }
        float v18 = ((float (*)(__n128))Function)(v12);
        if (v17) {
          float v15 = -v18;
        }
        else {
          float v15 = v18;
        }
      }
      goto LABEL_35;
    }
    float v15 = ((float (*)(__n128))Function)(v12);
LABEL_35:
    *(float *)&a3[v10 + 1] = v15;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      double v19 = *(float *)&a3[v10];
      *(_DWORD *)buf = 136315906;
      __int16 v24 = "ConnectionState.cpp";
      __int16 v25 = 1024;
      int v26 = 438;
      __int16 v27 = 2048;
      double v28 = v19;
      __int16 v29 = 2048;
      double v30 = v15;
      _os_log_impl(&dword_21B9BB000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::GetCurveValues: loc %.2f\tval %.2f", buf, 0x26u);
    }
    v10 += 2;
  }
  while ((v10 * 4) != 0x2000);
  return 1;
}

void sub_21BA4C380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ConnectionState::ResetToDefaults(uint64_t this)
{
  *(unsigned char *)(this + 48) = 1;
  return this;
}

double ConnectionState::ConnectionState(SamplerState *a1, SamplerState *a2)
{
  SamplerState::SamplerState(a1, 7, 0, a2, 0x20u);
  *(void *)uint64_t v2 = &unk_26CBAB6F8;
  *(void *)(v2 + 88) = 1610612736;
  *(_DWORD *)(v2 + 96) = 0;
  double result = 0.0078125;
  *(void *)(v2 + 100) = 0x3F80000000000000;
  *(unsigned char *)(v2 + 108) = 0;
  *(_DWORD *)(v2 + 124) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 120) = 0;
  return result;
}

uint64_t ConnectionState::GetPropertyInfo(ConnectionState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  char v4 = 0;
  int v5 = 4;
  switch((int)this)
  {
    case 4300:
    case 4302:
      goto LABEL_3;
    case 4301:
    case 4303:
    case 4304:
    case 4305:
    case 4306:
    case 4307:
      goto LABEL_2;
    case 4308:
      char v4 = 0;
      int v5 = 0x2000;
      goto LABEL_3;
    default:
      if (this == 4120)
      {
        int v5 = 8;
      }
      else
      {
        uint64_t v6 = 0;
        if (this != 4121) {
          return v6;
        }
        int v5 = 4;
      }
LABEL_2:
      char v4 = 1;
LABEL_3:
      *a2 = v5;
      *(unsigned char *)a3 = v4;
      return 1;
  }
}

void *std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>(uint64_t a1, unint64_t a2)
{
  char v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = (a2 >> 24) & 0xFFFFFF00 | a2;
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = (v3[4] >> 24) & 0xFFFFFF00 | v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      int v9 = v3;
    }
    else {
      int v9 = v3 + 1;
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    int v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < ((v6[4] >> 24) & 0xFFFFFF00 | v6[4])) {
    return v2;
  }
  return v6;
}

uint64_t DLSBankManager::GetInstance(DLSBankManager *this)
{
  if (!DLSBankManager::sManagerInstance) {
    operator new();
  }
  return DLSBankManager::sManagerInstance;
}

void sub_21BA4C5B8(_Unwind_Exception *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x21D497F90](v1, 0x10F0C401840559CLL);
  _Unwind_Resume(a1);
}

void DLSBankManager::Destroy(DLSBankManager *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = DLSBankManager::sManagerInstance;
  if (DLSBankManager::sManagerInstance)
  {
    if (*(void *)DLSBankManager::sManagerInstance == *(void *)(DLSBankManager::sManagerInstance + 8))
    {
      MEMORY[0x21D497390](DLSBankManager::sManagerInstance + 24);
      uint64_t v2 = *(void **)v1;
      if (*(void *)v1)
      {
        *(void *)(v1 + 8) = v2;
        operator delete(v2);
      }
      MEMORY[0x21D497F90](v1, 0x10F0C401840559CLL);
      DLSBankManager::sManagerInstance = 0;
    }
    else
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v3 = 136315394;
        char v4 = "DLSBankManager.cpp";
        __int16 v5 = 1024;
        int v6 = 137;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERT FAILURE: Bank manager destroyed with active banks", (uint8_t *)&v3, 0x12u);
      }
      __break(1u);
    }
  }
}

const void **DLSBankManager::AddBank(DLSBankManager *this, CFURLRef url)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CFStringRef PathComponent = (__CFString *)CFURLCopyLastPathComponent(url);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v10 = (char *)this + 24;
  char v11 = (*(uint64_t (**)(void))(v4 + 16))();
  if (!DLSBankManager::FindBankEntry((CFURLRef ***)this, PathComponent))
  {
    int v6 = SampleManager::SearchForResource((glob_t *)url, v5);
    CFTypeRef cf = v6;
    if (v6)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        float v15 = "DLSBankManager.cpp";
        __int16 v16 = 1024;
        int v17 = 155;
        __int16 v18 = 2112;
        double v19 = v6;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AddBank: creating new collection for bank '%@'", buf, 0x1Cu);
      }
      operator new();
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v13, 0xFFFFFFD5);
      *(_DWORD *)buf = 136315906;
      float v15 = "DLSBankManager.cpp";
      __int16 v16 = 1024;
      int v17 = 153;
      __int16 v18 = 2080;
      double v19 = v13;
      __int16 v20 = 2080;
      uint64_t v21 = "Unable to locate bank file";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Unable to locate bank file", -43);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    float v15 = "DLSBankManager.cpp";
    __int16 v16 = 1024;
    int v17 = 149;
    __int16 v18 = 2112;
    double v19 = PathComponent;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AddBank: bank '%@' already added.", buf, 0x1Cu);
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v10);
  return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
}

void sub_21BA4CAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, uint64_t a11, const void *a12)
{
}

void sub_21BA4CAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  __cxa_free_exception(v9);
  Smart<__CFURL const*>::~Smart(&a9);
  JUMPOUT(0x21BA4CBDCLL);
}

void sub_21BA4CAD4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf)
{
  if (a2)
  {
    __int16 v18 = *v16;
    if (*v16)
    {
      *(void *)(v15 + 56) = v18;
      operator delete(v18);
    }
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*(void **)(v15 + 32));
    MEMORY[0x21D497F90](v15, 0x1070C40FE9556B8);
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "DLSBankManager.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 161;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d DLSBankManager::AddBank: Bank load failed", (uint8_t *)&buf, 0x12u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x21BA4CBF4);
}

void sub_21BA4CBB4()
{
}

void sub_21BA4CBC8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x21BA4CBF4);
}

CFURLRef *DLSBankManager::FindBankEntry(CFURLRef ***this, const __CFString *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((CADeprecated::CAMutex::IsOwnedByCurrentThread((CADeprecated::CAMutex *)(this + 3)) & 1) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)&v7[4] = "DLSBankManager.cpp";
      __int16 v8 = 1024;
      int v9 = 216;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERT FAILURE: FindBankEntry called while unlocked!", v7, 0x12u);
    }
    __break(1u);
  }
  for (int i = *this; ; ++i)
  {
    if (i == this[1]) {
      return 0;
    }
    *(void *)uint64_t v7 = CFURLCopyLastPathComponent(**i);
    if (CFEqual(*(CFStringRef *)v7, a2)) {
      break;
    }
    Smart<__CFString const*>::~Smart((const void **)v7);
  }
  CFURLRef v5 = *i;
  Smart<__CFString const*>::~Smart((const void **)v7);
  return v5;
}

void sub_21BA4CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

CFURLRef *DLSBankManager::AcquireBank(DLSBankManager *this, __CFString *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 3);
  uint64_t v10 = (char *)this + 24;
  char v11 = (*(uint64_t (**)(char *))(v4 + 16))((char *)this + 24);
  BankEntry = DLSBankManager::FindBankEntry((CFURLRef ***)this, a2);
  int v6 = BankEntry;
  if (!BankEntry)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      int v14 = "DLSBankManager.cpp";
      __int16 v15 = 1024;
      int v16 = 176;
      __int16 v17 = 2080;
      __int16 v18 = v12;
      __int16 v19 = 2080;
      __int16 v20 = "DLSBankManager::AcquireBank: No such bank";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "DLSBankManager::AcquireBank: No such bank", -10851);
  }
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)BankEntry + 4, 1u, memory_order_relaxed);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    int v14 = "DLSBankManager.cpp";
    __int16 v15 = 1024;
    int v16 = 173;
    __int16 v17 = 2112;
    __int16 v18 = (uint8_t *)a2;
    __int16 v19 = 1024;
    LODWORD(v20) = add_explicit + 1;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AcquireBank: bank '%@' refcount %d", buf, 0x22u);
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v10);
  return v6;
}

void sub_21BA4CF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DLSBankManager::ReleaseBank(DLSBankManager *this, const __CFString *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 3);
  __int16 v18 = (char *)this + 24;
  char v19 = (*(uint64_t (**)(void))(v4 + 16))();
  CFURLRef v5 = *(CFURLRef ***)this;
  if (*(void *)this != *((void *)this + 1))
  {
    int v6 = &_os_log_internal;
    uint64_t v7 = "DLSBankManager.cpp";
    while (1)
    {
      CFStringRef PathComponent = CFURLCopyLastPathComponent(**v5);
      if (CFEqual(PathComponent, a2))
      {
        __int16 v8 = *v5;
        int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)*v5 + 4, 0xFFFFFFFF, memory_order_relaxed);
        if (add_explicit == 1)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v7;
            __int16 v21 = 1024;
            int v22 = 39;
            _os_log_impl(&dword_21B9BB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::Unreference: deleting bank", buf, 0x12u);
          }
          uint64_t v10 = v7;
          std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(v8[4]);
          v8[3] = (CFURLRef)(v8 + 4);
          v8[4] = 0;
          v8[5] = 0;
          char v11 = v8[1];
          if (v11)
          {
            DlsCollection::Cleanup(v11);
            __n128 v12 = (std::__shared_weak_count *)v11[23];
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            BankManager::~BankManager((BankManager *)(v11 + 19));
            PoolTable::~PoolTable((PoolTable *)(v11 + 10));
            uint64_t v13 = (void *)v11[7];
            if (v13)
            {
              v11[8] = v13;
              operator delete(v13);
            }
            *(void *)buf = v11;
            std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            MEMORY[0x21D497F90](v11, 0x10B0C40BE9E4BC0);
          }
          v8[1] = 0;
          uint64_t v7 = v10;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = v7;
          __int16 v21 = 1024;
          int v22 = 189;
          __int16 v23 = 2112;
          CFStringRef v24 = a2;
          __int16 v25 = 1024;
          int v26 = add_explicit - 1;
          _os_log_impl(&dword_21B9BB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::ReleaseBank: bank '%@' refcount now %d", buf, 0x22u);
        }
        if (add_explicit <= 1) {
          break;
        }
      }
      Smart<__CFString const*>::~Smart((const void **)&PathComponent);
      if (++v5 == *((CFURLRef ***)this + 1)) {
        goto LABEL_28;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v21 = 1024;
      int v22 = 193;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::ReleaseBank: destroying entry", buf, 0x12u);
    }
    int v14 = (CFURLRef **)*((void *)this + 1);
    int64_t v15 = (char *)v14 - (char *)(v5 + 1);
    if (v14 != v5 + 1) {
      memmove(v5, v5 + 1, (char *)v14 - (char *)(v5 + 1));
    }
    *((void *)this + 1) = (char *)v5 + v15;
    if (v8)
    {
      CFRelease(*v8);
      CFURLRef v16 = v8[6];
      if (v16)
      {
        v8[7] = v16;
        operator delete(v16);
      }
      std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(v8[4]);
      MEMORY[0x21D497F90](v8, 0x1070C40FE9556B8);
    }
    Smart<__CFString const*>::~Smart((const void **)&PathComponent);
  }
LABEL_28:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v18);
}

void sub_21BA4D29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double AUNewTimePitch::GetChannelLayoutTags@<D0>(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if ((a1 - 3) <= 0xFFFFFFFD) {
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  }
  if (a2) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CFURLRef v5 = operator new(0x30uLL);
  a3[1] = v5 + 3;
  a3[2] = v5 + 3;
  *CFURLRef v5 = xmmword_21BABD1D0;
  v5[1] = unk_21BABD1E0;
  double result = 4.98418446e-306;
  v5[2] = xmmword_21BABD1F0;
  *a3 = v5;
  return result;
}

uint64_t AUNewTimePitch::RemoveAudioChannelLayout(AUNewTimePitch *this, int a2, int a3)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  CAAudioChannelLayout::Clear((AUNewTimePitch *)((char *)this + 816));
  return 0;
}

uint64_t AUNewTimePitch::SetAudioChannelLayout(AUNewTimePitch *this, int a2, int a3, AudioChannelLayout *a4)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  (*(void (**)(void **__return_ptr))(*(void *)this + 392))(outPropertyData);
  int v7 = v14;
  if (v7 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v8)
    || a4->mChannelLayoutTag == 0x10000)
  {
    return 4294956445;
  }
  if (!a4->mChannelLayoutTag)
  {
    CAAudioChannelLayout::operator=();
    return 0;
  }
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a4, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  outPropertyData[0] = 0;
  CADeprecated::CAAutoFree<AudioChannelLayout>::allocBytes(outPropertyData, outPropertyDataSize, 1);
  char v11 = (AudioChannelLayout *)outPropertyData[0];
  uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, a4, &outPropertyDataSize, outPropertyData[0]);
  if (!Property) {
    CAAudioChannelLayout::Set((AUNewTimePitch *)((char *)this + 816), v11);
  }
  if (v11) {
    free(v11);
  }
  if (!Property) {
    return 0;
  }
  return Property;
}

void sub_21BA4D4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUNewTimePitch::GetAudioChannelLayout(AUNewTimePitch *this, const AudioChannelLayout *a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  *a5 = 1;
  uint64_t v5 = *((void *)this + 102);
  if (!v5) {
    return 0;
  }
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), a2)) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 102);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 12);
  if (a4 && v9) {
    memcpy(a4, (const void *)(v8 + 16), *(unsigned int *)(v8 + 12));
  }
  return v9;
}

uint64_t AUNewTimePitch::ChangeStreamFormat(AUNewTimePitch *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  if (__s1->mChannelsPerFrame != __s2->mChannelsPerFrame) {
    (*(void (**)(AUNewTimePitch *, uint64_t, uint64_t))(*(void *)this + 544))(this, a2, a3);
  }
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, __s2, __s1);
  return 0;
}

uint64_t AUNewTimePitch::SupportedNumChannels(AUNewTimePitch *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNewTimePitch_sChannels;
  }
  return 1;
}

BOOL AUNewTimePitch::StreamFormatWritable(AUNewTimePitch *this)
{
  return *((unsigned char *)this + 17) == 0;
}

double AUNewTimePitch::GetLatency(AUNewTimePitch *this)
{
  double v1 = 0.0;
  if (*((void *)this + 67))
  {
    AUNewTimePitch::UpdatePhaseVocoderState(this);
    uint64_t v3 = *((void *)this + 67);
    if (!*(unsigned char *)(v3 + 2777)) {
      return (1.0 / *(double *)(v3 + 2216) + 1.0) * (double)*(int *)(v3 + 2196) / *(double *)(v3 + 2176);
    }
  }
  return v1;
}

uint64_t AUNewTimePitch::UpdatePhaseVocoderState(AUNewTimePitch *this)
{
  float v15 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 4, 0, 0, &v15))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 248, "noErr == GetParameter(kNewTimePitchParam_Smoothness, kAudioUnitScope_Global, 0, smoothness)");
  }
  float v2 = v15;
  if (v15 >= 3.0)
  {
    if (v15 > 32.0)
    {
      float v15 = 32.0;
      float v2 = 32.0;
    }
  }
  else
  {
    float v15 = 3.0;
    float v2 = 3.0;
  }
  *(float *)(*((void *)this + 67) + 2224) = v2;
  float v14 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, void, void, void, float *))(*(void *)this + 144))(this, 0, 0, 0, &v14))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 254, "noErr == GetParameter(kNewTimePitchParam_Rate, kAudioUnitScope_Global, 0, rate)");
  }
  float v3 = v14;
  if (v14 >= 0.03125)
  {
    if (v14 > 32.0)
    {
      float v14 = 32.0;
      float v3 = 32.0;
    }
  }
  else
  {
    float v14 = 0.03125;
    float v3 = 0.03125;
  }
  *(double *)(*((void *)this + 67) + 2216) = v3;
  float v13 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 1, 0, 0, &v13))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 260, "noErr == GetParameter(kNewTimePitchParam_Pitch, kAudioUnitScope_Global, 0, pitchCents)");
  }
  float v4 = v13;
  *(float *)&int v5 = -2400.0;
  if (v13 < -2400.0 || (*(float *)&int v5 = 2400.0, v13 > 2400.0))
  {
    float v13 = *(float *)&v5;
    float v4 = *(float *)&v5;
  }
  float v6 = exp2(v4 / 1200.0);
  *(float *)(*((void *)this + 67) + 2184) = v6;
  float v12 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 6, 0, 0, &v12))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 269, "noErr == GetParameter( kNewTimePitchParam_EnableSpectralCoherence, kAudioUnitScope_Global, 0, spectralCoherence)");
  }
  v7.n128_f32[0] = v12;
  *(unsigned char *)(*((void *)this + 67) + 2554) = v12 != 0.0;
  float v11 = 0.0;
  uint64_t result = (*(uint64_t (**)(AUNewTimePitch *, uint64_t, void, void, float *, __n128))(*(void *)this
                                                                                                 + 144))(this, 7, 0, 0, &v11, v7);
  if (result) {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 274, "noErr == GetParameter( kNewTimePitchParam_EnableTransientPreservation, kAudioUnitScope_Global, 0, keepTransients)");
  }
  float v9 = v11;
  if (v12 == 0.0 && v11 != 0.0)
  {
    float v9 = 0.0;
    uint64_t result = (*(uint64_t (**)(AUNewTimePitch *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 7, 0, 0, 0, 0.0);
  }
  uint64_t v10 = *((void *)this + 67);
  *(unsigned char *)(v10 + 2555) = v9 != 0.0;
  *(unsigned char *)(v10 + 2553) = *((unsigned char *)this + 828);
  *(_DWORD *)(v10 + 2236) = *((_DWORD *)this + 206);
  return result;
}

uint64_t AUNewTimePitch::GetParameterInfo(AUNewTimePitch *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = -1073741824;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 7 && ((0xD3u >> a3) & 1) != 0)
  {
    CFStringRef v6 = off_2643B9418[a3];
    AudioUnitParameterUnit v7 = dword_21BAB8CB0[a3];
    AudioUnitParameterValue v8 = flt_21BAB8CD0[a3];
    AudioUnitParameterValue v9 = flt_21BAB8CF0[a3];
    AudioUnitParameterValue v10 = flt_21BAB8D10[a3];
    int v11 = dword_21BAB8D30[a3];
    buffer->cfNameString = v6;
    buffer->flags = -939524096;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags += v11;
  }
  return result;
}

uint64_t AUNewTimePitch::Render(AUNewTimePitch *this, unsigned int *a2, AudioTimeStamp *a3, unsigned int a4)
{
  double mSampleTime = a3->mSampleTime;
  double v9 = *((double *)this + 122);
  if (a3->mSampleTime != v9)
  {
    double v10 = mSampleTime - v9;
    uint64_t v11 = *((void *)this + 67);
    double v12 = *(double *)(v11 + 2264) + mSampleTime - v9;
    *(double *)(v11 + 2264) = v12;
    double v13 = *(double *)(v11 + 2248) + v10;
    *(double *)(v11 + 2248) = v13;
    uint64_t v14 = *(void *)(v11 + 2784);
    if (**(void **)(v14 + 104))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(*(void *)(v14 + 96) + 8), v12);
      *(void *)(v11 + 2256) = v15;
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(*(void *)(*(void *)(v11 + 2784) + 96) + 8), *(double *)(v11 + 2248));
      double v17 = v16;
      *(double *)(v11 + 2240) = v16;
      double v13 = *(double *)(v11 + 2248);
      double mSampleTime = a3->mSampleTime;
    }
    else
    {
      double v18 = *(double *)(v11 + 2216);
      *(double *)(v11 + 2256) = *(double *)(v11 + 2256) + v10 * v18;
      double v17 = *(double *)(v11 + 2240) + v10 * v18;
      *(double *)(v11 + 2240) = v17;
    }
    *(double *)(v11 + 2360) = v17;
    *(double *)(v11 + 2376) = v13;
  }
  double v19 = (double)a4;
  *((double *)this + 122) = mSampleTime + (double)a4;
  *((_DWORD *)this + 136) = *a2;
  if (**((void **)this + 121))
  {
    *((unsigned char *)this + 936) = 0;
    RampList::Reader::AdvanceOutputTime((AUNewTimePitch *)((char *)this + 960), mSampleTime);
  }
  AUNewTimePitch::UpdatePhaseVocoderState(this);
  Element = (double *)ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0);
  ausdk::AUIOElement::PrepareBuffer((ausdk::AUIOElement *)Element, a4);
  double v21 = 1.0;
  if (!*((unsigned char *)this + 828)) {
    double v21 = 1.0 / *(double *)(*((void *)this + 67) + 2216);
  }
  AUTimestampGenerator::State::AddOutputTime((uint64_t)this + 552, (uint64_t)this + 552, (long long *)a3, (double)a4, Element[10], v21);
  BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 18));
  uint64_t v23 = *((void *)this + 67);
  double v24 = a3->mSampleTime;
  if (*(unsigned char *)(v23 + 2778))
  {
    uint64_t v25 = *(void *)(v23 + 2784);
    if (**(void **)(v25 + 104))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(*(void *)(v25 + 96) + 8), a3->mSampleTime);
      *(void *)(v23 + 2360) = v26;
      *(double *)(v23 + 2376) = v24;
    }
  }
  *(unsigned char *)(v23 + 2778) = 0;
  if (*(unsigned char *)(v23 + 2553) || !*(unsigned char *)(v23 + 2552))
  {
    uint64_t v27 = PhaseVocoderTwo::RenderBypass((PhaseVocoderTwo *)v23, a4, BufferList, v24);
LABEL_15:
    uint64_t v28 = v27;
  }
  else
  {
    double v52 = v24;
    if (*(unsigned char *)(v23 + 2557)) {
      PhaseVocoderTwo::ResetPhases((PhaseVocoderTwo *)v23);
    }
    unsigned int v51 = a4;
    *(_DWORD *)(v23 + 2440) = 0;
    PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v23, &v51, BufferList, &v52);
    unsigned int v33 = v51;
    if (v51)
    {
      unsigned int v34 = PhaseVocoderTwo::InputFramesForOutputFrames((PhaseVocoderTwo *)v23, v51, v52, v32);
      unsigned int v50 = v34;
      int v36 = *(unsigned __int8 *)(v23 + 2554);
      if (!*(unsigned char *)(v23 + 2554)) {
        PhaseVocoderTwo::MakeBinMap(v23, v35);
      }
      do
      {
        if (v33)
        {
          int v37 = *(_DWORD *)(v23 + 2384) - *(_DWORD *)(v23 + 2392);
          int v38 = *(_DWORD *)(v23 + 2192);
          BOOL v39 = __OFSUB__(v38, v37);
          int v40 = v38 - v37;
          if ((v40 < 0) ^ v39 | (v40 == 0)) {
            BOOL v41 = 0;
          }
          else {
            BOOL v41 = v34 == 0;
          }
          if (v41) {
            unsigned int v50 = v40;
          }
          uint64_t v27 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v23, &v50);
          if (v27) {
            goto LABEL_15;
          }
          do
          {
            if (*(_DWORD *)(v23 + 2192) > *(_DWORD *)(v23 + 2384) - *(_DWORD *)(v23 + 2392)) {
              break;
            }
            PhaseVocoderTwo::ProcessBlock((PhaseVocoderTwo *)v23, v36 != 0, v42);
            double v42 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v23, &v51, BufferList, &v52);
            unsigned int v33 = v51;
          }
          while (v51);
        }
        else
        {
          uint64_t v27 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v23, &v50);
          if (v27) {
            goto LABEL_15;
          }
          unsigned int v33 = 0;
        }
        unsigned int v34 = v50;
      }
      while (v33 | v50);
    }
    uint64_t v28 = 0;
  }
  if (*((void *)this + 105))
  {
    if (**((void **)this + 121))
    {
      double v29 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime);
      double v30 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime + v19 + -1.0);
      double v31 = fmax(v29, 0.0);
      (*((void (**)(void, AudioTimeStamp *, double, double))this + 105))(*((void *)this + 106), a3, v31, fmax(v30 - v31, 0.0));
    }
    else
    {
      if (*((unsigned char *)this + 829))
      {
        *((unsigned char *)this + 829) = 0;
        *((double *)this + 104) = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime);
      }
      double v43 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime + v19 + -1.0);
      double v44 = *((double *)this + 104);
      v45.n128_f64[0] = v43 - v44;
      v46.n128_u64[0] = 0;
      v47.n128_u64[0] = 0;
      if (v43 - v44 >= 0.0)
      {
        v47.n128_f64[0] = v44 + 1.0;
        if (v44 + 1.0 >= 0.0)
        {
          v46.n128_f64[0] = v43 - v44;
        }
        else
        {
          double v48 = v45.n128_f64[0] + v47.n128_f64[0];
          v47.n128_u64[0] = 0;
          v46.n128_f64[0] = fmax(v48, 0.0);
        }
      }
      (*((void (**)(void, AudioTimeStamp *, __n128, __n128, __n128))this + 105))(*((void *)this + 106), a3, v47, v46, v45);
      *((double *)this + 104) = v43;
    }
  }
  return v28;
}

uint64_t AUNewTimePitch::CanScheduleParameters(AUNewTimePitch *this)
{
  return 0;
}

uint64_t AUNewTimePitch::SetProperty(AUNewTimePitch *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 48)
  {
    switch(a2)
    {
      case 21:
        if (a6 >= 4)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 828) = *(_DWORD *)__src != 0;
          return result;
        }
        break;
      case 26:
        int v12 = *(_DWORD *)__src;
        if (*(_DWORD *)__src > 0x7Fu) {
          return 4294967246;
        }
        int v16 = *((_DWORD *)this + 206);
        *((_DWORD *)this + 206) = v12;
        if (v16 != v12) {
          (*(void (**)(AUNewTimePitch *, uint64_t, void))(*(void *)this + 432))(this, 26, 0);
        }
        return 0;
      case 37:
        if (a6 >= 4)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 528) = *(_DWORD *)__src != 0;
          return result;
        }
        break;
      default:
        return result;
    }
    return 4294956445;
  }
  if (a2 > 3802)
  {
    if (a2 == 3803)
    {
      if (*((unsigned char *)this + 17))
      {
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 80), 0);
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0);
      }
      RampList::Writer::AddRamps();
    }
    else
    {
      if (a2 != 3804) {
        return result;
      }
      double v10 = *(double *)__src;
      if (a6 == 16)
      {
        double v11 = *(double *)__src;
        double v10 = *((double *)__src + 1);
      }
      else
      {
        double v11 = 0.0;
        if (!*((unsigned char *)this + 768)) {
          double v11 = *(double *)__src;
        }
      }
      *((double *)this + 122) = v10;
      RampList::Writer::SetOrigin((AUNewTimePitch *)((char *)this + 944), v11, v10);
      uint64_t v13 = *((void *)this + 67);
      if (v13)
      {
        *(unsigned char *)(v13 + 2288) = 1;
        uint64_t v14 = *(void *)(v13 + 2784);
        uint64_t v15 = *(void *)(v14 + 40);
        *(void *)(v13 + 2256) = v15;
        *(double *)(v13 + 2264) = *(double *)(v14 + 48)
                                - (double)(*(_DWORD *)(v13 + 2384) - *(_DWORD *)(v13 + 2392))
                                + (double)*(int *)(v13 + 2196);
        if (*(double *)(v13 + 2360) == 0.0)
        {
          uint64_t result = 0;
          *(void *)(v13 + 2360) = v15;
          return result;
        }
      }
    }
    return 0;
  }
  if (a2 == 49)
  {
    if (a6 >= 0x10)
    {
      uint64_t result = 0;
      *(_OWORD *)((char *)this + 840) = *(_OWORD *)__src;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 3801)
  {
    char v8 = __src[217];
    int v19 = *(_DWORD *)(__src + 218);
    __int16 v20 = *((_WORD *)__src + 111);
    uint64_t v9 = *((void *)__src + 28);
    long long v17 = *(_OWORD *)(__src + 232);
    uint64_t v18 = *((void *)__src + 31);
    memmove((char *)this + 552, __src, 0xD9uLL);
    uint64_t result = 0;
    *((unsigned char *)this + 769) = v8;
    *(_DWORD *)((char *)this + 770) = v19;
    *((_WORD *)this + 387) = v20;
    *((void *)this + 97) = v9;
    *((_OWORD *)this + 49) = v17;
    *((unsigned char *)this + 800) = v18;
    *((unsigned char *)this + 808) = 0;
  }
  return result;
}

uint64_t AUNewTimePitch::GetProperty(AUNewTimePitch *this, int a2, int a3, int a4, void *__dst)
{
  if (a3) {
    return 4294956417;
  }
  CFStringRef v6 = __dst;
  uint64_t result = 4294956417;
  if (a2 <= 48)
  {
    if (a2 > 36)
    {
      if (a2 != 37)
      {
        if (a2 == 45 && a4 == 6)
        {
          uint64_t result = 0;
          *__dst = 0x700000000;
        }
        return result;
      }
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 528);
    }
    else if (a2 == 21)
    {
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 828);
    }
    else
    {
      if (a2 != 26) {
        return result;
      }
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 206);
    }
    *(_DWORD *)__dst = v8;
    return result;
  }
  if (a2 <= 3800)
  {
    if (a2 == 49)
    {
      uint64_t result = 0;
      *(_OWORD *)__dst = *(_OWORD *)((char *)this + 840);
      return result;
    }
    if (a2 == 57)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *((void *)this + 1);
      do
      {
        int v11 = overviewParameterIDs[v9];
        *CFStringRef v6 = v10;
        *((_DWORD *)v6 + 3) = 0;
        *((_DWORD *)v6 + 4) = 0;
        *((_DWORD *)v6 + 2) = v11;
        ++v9;
        v6 += 3;
      }
      while (v9 != 2);
      return 0;
    }
  }
  else
  {
    if (a2 == 3801)
    {
      char v12 = *((unsigned char *)this + 769);
      int v19 = *(_DWORD *)((char *)this + 770);
      __int16 v20 = *((_WORD *)this + 387);
      uint64_t v13 = *((void *)this + 97);
      long long v17 = *((_OWORD *)this + 49);
      LOBYTE(v18) = *((unsigned char *)this + 800);
      memmove(__dst, (char *)this + 552, 0xD9uLL);
      uint64_t result = 0;
      *((unsigned char *)v6 + 217) = v12;
      *(_DWORD *)((char *)v6 + 218) = v19;
      *((_WORD *)v6 + 111) = v20;
      v6[28] = v13;
      *(_OWORD *)(v6 + 29) = v17;
      v6[31] = v18;
      return result;
    }
    if (a2 != 3802)
    {
      if (a2 != 3803) {
        return result;
      }
      if (*((unsigned char *)this + 17))
      {
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 80), 0);
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0);
      }
      RampList::Writer::GetRamps();
      return 0;
    }
    if (*((unsigned char *)this + 17))
    {
      AUNewTimePitch::UpdatePhaseVocoderState(this);
      double v15 = *((double *)this + 94);
      if (*(void *)(*((void *)this + 119) + 8) && *((unsigned char *)this + 936)) {
        double v15 = *((double *)this + 114);
      }
      int v16 = PhaseVocoderTwo::InputFramesForOutputFrames(*((PhaseVocoderTwo **)this + 67), *(_DWORD *)v6, v15, v14);
      uint64_t result = 0;
      *((_DWORD *)v6 + 1) = v16;
    }
    else
    {
      return 4294956429;
    }
  }
  return result;
}

uint64_t AUNewTimePitch::GetPropertyInfo(AUNewTimePitch *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 48)
  {
    switch(a2)
    {
      case 3801:
        uint64_t result = 0;
        int v8 = 256;
        goto LABEL_23;
      case 3802:
        uint64_t result = 0;
        unsigned int v9 = 8;
        goto LABEL_21;
      case 3803:
        uint64_t result = 0;
        int v8 = 48 * *(_DWORD *)(*((void *)this + 119) + 24);
        goto LABEL_23;
      case 3804:
        goto LABEL_19;
      default:
        if (a2 == 49)
        {
LABEL_19:
          uint64_t result = 0;
          int v8 = 16;
          goto LABEL_23;
        }
        if (a2 == 57)
        {
          uint64_t result = 0;
          unsigned int v9 = 48;
LABEL_21:
          *a5 = v9;
          *a6 = 0;
        }
        break;
    }
  }
  else
  {
    if (a2 > 36)
    {
      if (a2 != 37)
      {
        if (a2 == 45 && a4 == 6)
        {
          uint64_t result = 0;
          *a6 = 0;
          *a5 = 8;
        }
        return result;
      }
    }
    else if (a2 != 21 && a2 != 26)
    {
      return result;
    }
    uint64_t result = 0;
    int v8 = 4;
LABEL_23:
    *a5 = v8;
    *a6 = 1;
  }
  return result;
}

uint64_t AUNewTimePitch::Reset(AUNewTimePitch *this)
{
  float v2 = (const float **)*((void *)this + 67);
  if (v2) {
    PhaseVocoderTwo::Reset(v2);
  }
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((void *)this + 99) = 0x3FF0000000000000;
  *((unsigned char *)this + 808) = 1;
  *((unsigned char *)this + 829) = 1;
  *((void *)this + 104) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *((unsigned char *)this + 936) = 1;
  RampList::Writer::clear((AUNewTimePitch *)((char *)this + 944));
  *((void *)this + 122) = 0;
  return 0;
}

uint64_t AUNewTimePitch::Cleanup(AUNewTimePitch *this)
{
  uint64_t result = *((void *)this + 67);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 67) = 0;
  return result;
}

uint64_t AUNewTimePitch::Initialize(AUNewTimePitch *this)
{
  float v2 = (AUNewTimePitch *)((char *)this + 128);
  int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 80), 0) + 108) == v3)
  {
    if ((uint64_t v5 = *((void *)this + 102)) == 0
      || !CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), v4)
      || ((uint64_t v7 = *((void *)this + 102)) == 0
        ? (int v8 = 0)
        : (int v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6)),
          v8 == v3))
    {
      double v9 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
      v10.n128_u64[0] = 0x40C0000000000000;
      v11.n128_u64[0] = 0x40D0000000000000;
      v12.n128_u64[0] = 0x40E0000000000000;
      if (v9 >= 65536.0) {
        int v13 = 0x2000;
      }
      else {
        int v13 = 4096;
      }
      if (v9 >= 32768.0) {
        int v14 = v13;
      }
      else {
        int v14 = 2048;
      }
      if (v9 >= 16384.0) {
        int v15 = v14;
      }
      else {
        int v15 = 1024;
      }
      if (v9 >= 8192.0) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = 512;
      }
      *((_DWORD *)this + 214) = v16 >> (*((_DWORD *)this + 206) < 0x21u);
      int v21 = 0;
      (*(void (**)(AUNewTimePitch *, void, void, void, int *, __n128, __n128, __n128))(*(void *)this + 144))(this, 0, 0, 0, &v21, v10, v11, v12);
      int v20 = 0;
      (*(void (**)(AUNewTimePitch *, uint64_t, void, void, int *))(*(void *)this + 144))(this, 4, 0, 0, &v20);
      uint64_t v18 = *((void *)this + 102);
      if (v18) {
        CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v18 + 16), v17);
      }
      operator new();
    }
  }
  return 4294956428;
}

void sub_21BA4E824(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10F1C40CF7E226ELL);
  _Unwind_Resume(a1);
}

uint64_t AUNewTimePitch::PullForInputCallback(AUNewTimePitch *this, void *a2, const AudioBufferList **a3, void *a4, double *a5)
{
  double v9 = (ausdk::AUScope *)(a3 + 10);
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 10), 0);
  v11.n128_f64[0] = (double)this;
  AUTimestampGenerator::State::GenerateInputTime((__n128 *)(a3 + 69), 1, v11, *(double *)(Element + 80));
  long long v13 = v12[3];
  long long v15 = *v12;
  long long v14 = v12[1];
  *(_OWORD *)&v20.mSMPTETime.mSubframes = v12[2];
  *(_OWORD *)&v20.mSMPTETime.mHours = v13;
  *(_OWORD *)&v20.double mSampleTime = v15;
  *(_OWORD *)&v20.mRateScalar = v14;
  *a4 = v15;
  unsigned int v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  uint64_t v17 = ausdk::AUInputElement::PullInput(v16, (unsigned int *)a3 + 136, &v20, 0, (uint64_t)this);
  if (!v17)
  {
    uint64_t v18 = ausdk::AUScope::SafeGetElement(v9, 0);
    *a2 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
  }
  return v17;
}

void AUNewTimePitch::~AUNewTimePitch(AUNewTimePitch *this)
{
  AUNewTimePitch::~AUNewTimePitch(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBAA540;
  float v2 = *((void *)this + 67);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 67) = 0;
  RampList::~RampList((AUNewTimePitch *)((char *)this + 864));
  MEMORY[0x21D497690]((char *)this + 816);

  ausdk::AUBase::~AUBase(this);
}

void *AUNewTimePitchFactory()
{
  uint64_t result = malloc_type_malloc(0x418uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUNewTimePitch>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUNewTimePitch>::Destruct;
  return result;
}

void AmplifierState::~AmplifierState(AmplifierState *this)
{
  *(void *)this = &unk_26CBAACD8;
  SamplerState::~SamplerState(this);

  JUMPOUT(0x21D497F90);
}

{
  *(void *)this = &unk_26CBAACD8;
  SamplerState::~SamplerState(this);
}

uint64_t AmplifierState::Restore(AmplifierState *this, const CACFDictionary *a2)
{
  LODWORD(result) = ComponentState::Restore(this, a2);
  if (*(void *)a2) {
    return result;
  }
  else {
    return 4294956445;
  }
}

uint64_t AmplifierState::Save(const __CFString **this, CACFDictionary *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315650;
    CFStringRef v6 = "AmplifierState.cpp";
    __int16 v7 = 1024;
    int v8 = 95;
    __int16 v9 = 2048;
    __n128 v10 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d AmplifierState::Save(this=%p)", (uint8_t *)&v5, 0x1Cu);
  }
  ComponentState::Save(this, a2);
  return 0;
}

uint64_t AmplifierState::SetProperty(AmplifierState *this, int a2, float *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v7, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      __int16 v9 = "AmplifierState.cpp";
      __int16 v10 = 1024;
      int v11 = 75;
      __int16 v12 = 2080;
      long long v13 = (AmplifierState *)v7;
      __int16 v14 = 2080;
      long long v15 = "AmplifierState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "AmplifierState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4190:
      int v4 = *(_DWORD *)a3 != 0;
      if (*((unsigned __int8 *)this + 100) != v4)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(float *)buf = 4.8153e-34;
          __int16 v9 = "AmplifierState.cpp";
          __int16 v10 = 1024;
          int v11 = 140;
          __int16 v12 = 2048;
          long long v13 = this;
          __int16 v14 = 1024;
          LODWORD(v15) = v4;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d AmplifierState::SetRampMode(this=%p, mode=%d)", buf, 0x22u);
        }
        *((unsigned char *)this + 100) = v4;
      }
      return 1;
    case 4126:
      *(float *)buf = *a3 * 0.005;
      if (*((float *)this + 24) != *(float *)buf)
      {
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pan", -0.5, 0.5);
        *((float *)this + 24) = *(float *)buf;
        (*(void (**)(AmplifierState *, uint64_t, void))(*(void *)this + 112))(this, 4126, 0);
      }
      return 1;
    case 4125:
      *(float *)buf = *a3;
      if (*((float *)this + 23) != *(float *)buf)
      {
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid gain", -96.0, 12.0);
        *((float *)this + 23) = *(float *)buf;
        (*(void (**)(AmplifierState *, uint64_t, void))(*(void *)this + 112))(this, 4125, 0);
      }
      return 1;
  }

  return ComponentState::SetProperty(this, a2, a3);
}

void sub_21BA4EEBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AmplifierState::GetProperty(AmplifierState *this, int a2, float *a3)
{
  if (a2 == 4126)
  {
    float v3 = *((float *)this + 24) * 200.0;
    goto LABEL_5;
  }
  if (a2 == 4125)
  {
    float v3 = *((float *)this + 23);
LABEL_5:
    *a3 = v3;
    return 1;
  }
  return ComponentState::GetProperty(this, a2, a3);
}

uint64_t AmplifierState::ResetToDefaults(uint64_t this)
{
  *(unsigned char *)(this + 48) = 1;
  *(void *)(this + 92) = 0;
  *(unsigned char *)(this + 100) = 0;
  return this;
}

double TRandom::Seed(TRandom *this, int a2)
{
  uint64_t v2 = 0;
  *((_DWORD *)this + 54) = a2;
  int v3 = 1;
  do
  {
    *((_DWORD *)this
    + (unsigned __int16)(21 * v2
                       - 55
                       * ((((unsigned __int16)(21 * v2 - ((10725 * (unsigned __int16)(21 * v2)) >> 16)) >> 1)
                         + ((10725 * (unsigned __int16)(21 * v2)) >> 16)) >> 5))) = v3;
    int v4 = a2 - v3;
    ++v2;
    a2 = v3;
    int v3 = v4;
  }
  while (v2 != 54);
  for (int i = 0; i != 4; ++i)
  {
    for (unint64_t j = 0; j != 55; ++j)
    {
      if (j >= 0x18) {
        uint64_t v7 = -24;
      }
      else {
        uint64_t v7 = 31;
      }
      *((_DWORD *)this + j) -= *((_DWORD *)this + v7 + j);
    }
  }
  double result = 0.0;
  *((_OWORD *)this + 14) = xmmword_21BAB6E60;
  return result;
}

uint64_t InstrumentState::LoadEXS24Instrument(InstrumentState *this, CFURLRef url)
{
  CFURLRef v2 = url;
  uint64_t v150 = *MEMORY[0x263EF8340];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = buffer;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad path: \"%s\"", buf, 0x1Cu);
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v148, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 92;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v148;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&unsigned char buf[30] = "Bad EXS file path";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Bad EXS file path", -10851);
  }
  unsigned int v3 = AccessURLAsset(v2);
  if (v3)
  {
    if (v3 == -43)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_345;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 101;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = buffer;
      v110 = &_os_log_internal;
      v111 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: EXS file \"%s\" not found";
    }
    else
    {
      if (v3 != -54)
      {
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          goto LABEL_345;
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v3;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = buffer;
        v110 = &_os_log_internal;
        v111 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: error %d while trying to read EXS file \"%s\"";
        uint32_t v113 = 34;
LABEL_344:
        _os_log_impl(&dword_21B9BB000, v110, OS_LOG_TYPE_ERROR, v111, buf, v113);
LABEL_345:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v148, v3);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 107;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v148;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&unsigned char buf[30] = "Unable to read EXS file";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v114 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v114, "Unable to read EXS file", v3);
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_345;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 98;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = buffer;
      v110 = &_os_log_internal;
      v111 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: permission denied for EXS file \"%s\"";
    }
    uint32_t v113 = 28;
    goto LABEL_344;
  }
  int __fd = open((const char *)buffer, 0);
  if (__fd < 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = buffer;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: EXS file \"%s\" not found", buf, 0x1Cu);
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v148, 0xFFFFFFD5);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 113;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v148;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&unsigned char buf[30] = "EXS file not found";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v115 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v115, "EXS file not found", -43);
  }
  (*(void (**)(InstrumentState *, void))(*(void *)this + 8))(this, 0);
  (*(void (**)(InstrumentState *, void))(*(void *)this + 64))(this, 0);
  int v4 = (_DWORD **)*((void *)this + 26);
  int v5 = (_DWORD **)*((void *)this + 27);
  if (v4 == v5)
  {
    CFStringRef v6 = this;
  }
  else
  {
    do
    {
      if (*v4) {
        SamplerState::Unref(*v4);
      }
      ++v4;
    }
    while (v4 != v5);
    CFStringRef v6 = this;
    int v4 = (_DWORD **)*((void *)this + 26);
  }
  *((void *)v6 + 27) = v4;
  uint64_t v7 = (_DWORD **)*((void *)v6 + 29);
  int v8 = (_DWORD **)*((void *)v6 + 30);
  if (v7 == v8)
  {
    __int16 v9 = this;
  }
  else
  {
    do
    {
      if (*v7) {
        SamplerState::Unref(*v7);
      }
      ++v7;
    }
    while (v7 != v8);
    __int16 v9 = this;
    uint64_t v7 = (_DWORD **)*((void *)this + 29);
  }
  *((void *)v9 + 30) = v7;
LABEL_17:
  CFURLRef urla = v2;
  v135.int st_size = 0;
  fstat(__fd, &v135);
  int v126 = 0;
  int v10 = 0;
  char v11 = 0;
  char v12 = 0;
  int v13 = 0;
  unsigned int v124 = 0;
  int v134 = 0;
  CFURLRef v2 = (const __CFURL *)&v139;
  memset(v148, 0, 304);
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  int st_size = v135.st_size;
  int v117 = 1;
  int v125 = 0;
  do
  {
    char v121 = v12;
    int v122 = v10;
    int v119 = v13;
    char v120 = v13 | v12 ^ 1 | v11 ^ 1;
    unsigned int v14 = v124;
    char v127 = v11;
    while (2)
    {
      if (st_size - v14 >= 0x54)
      {
        if (pread(__fd, &__buf, 0x54uLL, (int)v14) != 84)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 168;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad read on file\n", buf, 0x12u);
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 169;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v143;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&unsigned char buf[30] = "Invalid EXS file";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v99 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v99, "Invalid EXS file", -10871);
        }
        int v15 = v146;
        if (v146 > 1397703251)
        {
          if (v146 == 1397703252)
          {
            int v16 = 0;
            goto LABEL_31;
          }
          if (v146 != 1413631827)
          {
LABEL_316:
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 195;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v15;
              *(_WORD *)&buf[24] = 1040;
              *(_DWORD *)&buf[26] = 4;
              *(_WORD *)&unsigned char buf[30] = 2080;
              *(void *)&buf[32] = &v146;
              _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: unknown magic number 0x%x ('%.4s')", buf, 0x28u);
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 196;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v143;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&unsigned char buf[30] = "Invalid EXS file";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v106 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v106, "Invalid EXS file", -10871);
          }
          swapChunk((unsigned int *)&__buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::swap, 0x54u);
        }
        else
        {
          if (v146 != 1245859667)
          {
            if (v146 != 1397703242) {
              goto LABEL_316;
            }
            int v16 = 0;
            BYTE3(__buf) &= ~0x80u;
            HIDWORD(__buf) = WORD2(__buf) & 0x7FFF;
LABEL_31:
            unsigned __int8 v17 = BYTE1(__buf);
            if (SBYTE1(__buf) >= 2)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 203;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v17;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = 1;
                _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: header.version > SAMPLER_FILE_VERSION (%d > %d)\n", buf, 0x1Eu);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 204;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v143;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&unsigned char buf[30] = "Invalid EXS file";
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v100 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v100, "Invalid EXS file", -10871);
            }
            int v18 = BYTE3(__buf) & 0x3F;
            BYTE3(__buf) &= 0x3Fu;
            if (v18)
            {
              if (!v14)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 223;
                  _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: missing instrument chunk!", buf, 0x12u);
                }
                if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                {
                  CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 224;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v143;
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&unsigned char buf[30] = "Invalid EXS file";
                  _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                }
                v103 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                CAXException::CAXException(v103, "Invalid EXS file", -10871);
              }
            }
            else if (v14)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 217;
                _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: multiple instrument chunks not allowed!\n", buf, 0x12u);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 218;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v143;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&unsigned char buf[30] = "Invalid EXS file";
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v105 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v105, "Invalid EXS file", -10871);
            }
            unsigned int v19 = HIDWORD(__buf);
            if ((uint64_t)__buf <= 0)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 231;
                _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad chunk size!", buf, 0x12u);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 232;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v143;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&unsigned char buf[30] = "Invalid EXS file";
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v101 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v101, "Invalid EXS file", -10871);
            }
            signed int v20 = v14 + 84;
            switch(v18)
            {
              case 0:
                memset(v143, 0, sizeof(v143));
                if (HIDWORD(__buf) >= 0x28) {
                  size_t v21 = 40;
                }
                else {
                  size_t v21 = HIDWORD(__buf);
                }
                int v22 = pread(__fd, v143, v21, v20);
                if (v16) {
                  swapChunk((unsigned int *)v143, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x28u);
                }
                int v126 = *(_DWORD *)&v143[8];
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136316418;
                  *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 252;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v147;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&unsigned char buf[30] = *(_DWORD *)&v143[4];
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v126;
                  *(_WORD *)&buf[40] = 1024;
                  *(_DWORD *)&buf[42] = *(_DWORD *)&v143[12];
                  _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: inst: '%s', %d zones, %d groups, %d files\n", buf, 0x2Eu);
                }
                *(void *)v133 = CFStringCreateWithCString(alloc, v147, 0x600u);
                if (*(void *)v133)
                {
                  v125 |= v126 == 0;
                  Smart<__CFString const*>::~Smart((const void **)v133);
                  goto LABEL_223;
                }
                if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_353;
                }
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 254;
                v107 = &_os_log_internal;
                v108 = "%25s:%-5d  ASSERTION FAILED: unable to create name string from header name";
                goto LABEL_325;
              case 1:
                if (v120) {
                  goto LABEL_61;
                }
                uint64_t v142 = 0;
                long long v140 = 0u;
                long long v141 = 0u;
                long long v138 = 0u;
                long long v139 = 0u;
                *(_OWORD *)&buf[32] = 0u;
                long long v137 = 0u;
                if (HIDWORD(__buf) >= 0x88) {
                  size_t v21 = 136;
                }
                else {
                  size_t v21 = HIDWORD(__buf);
                }
                memset(buf, 0, 32);
                int v22 = pread(__fd, buf, v21, v20);
                if (v16) {
                  swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x88u);
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v143 = 136315906;
                  *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&v143[12] = 1024;
                  *(_DWORD *)&v143[14] = 278;
                  *(_WORD *)&v143[18] = 2080;
                  *(void *)&v143[20] = v147;
                  *(_WORD *)&v143[28] = 1024;
                  *(_DWORD *)&v143[30] = DWORD2(v139);
                  _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone '%s': group index %d\n", v143, 0x22u);
                }
                if (HIDWORD(v139) != -1)
                {
                  if (DWORD2(v139) == -1)
                  {
                    BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
                    if (v126 < 1)
                    {
                      if (v66)
                      {
                        *(_DWORD *)v143 = 136315394;
                        *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                        *(_WORD *)&v143[12] = 1024;
                        *(_DWORD *)&v143[14] = 297;
                        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone is ungrouped and no groups defined -- using default layer", v143, 0x12u);
                      }
                      int v67 = 0;
                    }
                    else
                    {
                      if (v66)
                      {
                        *(_DWORD *)v143 = 136315394;
                        *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                        *(_WORD *)&v143[12] = 1024;
                        *(_DWORD *)&v143[14] = 290;
                        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone is ungrouped -- creating its own layer", v143, 0x12u);
                      }
                      int v67 = -1;
                    }
                    CFURLRef v68 = (char ***)*((void *)this + 29);
                    CFURLRef v69 = (char ***)*((void *)this + 30);
                    while (1)
                    {
                      if (v68 == v69) {
                        InstrumentState::AddLayer((char **)this, v67);
                      }
                      uint64_t v64 = *v68;
                      if ((*(unsigned int (**)(char **))**v68)(*v68) == v67) {
                        break;
                      }
                      ++v68;
                    }
                  }
                  else
                  {
                    uint64_t v64 = *(char ***)(*((void *)this + 29) + 8 * DWORD2(v139));
                    if (!v64) {
                      goto LABEL_327;
                    }
                  }
                  LayerState::AddZone(v64);
                }
                unint64_t v65 = &_os_log_internal;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v143 = 136315394;
                  *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&v143[12] = 1024;
                  *(_DWORD *)&v143[14] = 282;
                  _os_log_impl(&dword_21B9BB000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone has no sample -- ignoring", v143, 0x12u);
                }
                goto LABEL_223;
              case 2:
                if (v121 & 1 | ((v127 & 1) == 0))
                {
LABEL_61:
                  unsigned int v25 = v124;
                  if (v124 - 1 >= v14) {
                    unsigned int v25 = v14;
                  }
                  unsigned int v124 = v25;
                  goto LABEL_225;
                }
                LODWORD(v142) = 0;
                long long v140 = 0u;
                long long v141 = 0u;
                long long v138 = 0u;
                long long v139 = 0u;
                *(_OWORD *)&buf[32] = 0u;
                long long v137 = 0u;
                if (HIDWORD(__buf) >= 0x84) {
                  size_t v23 = 132;
                }
                else {
                  size_t v23 = HIDWORD(__buf);
                }
                memset(buf, 0, 32);
                pread(__fd, buf, v23, v20);
                if (v16) {
                  swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x84u);
                }
                unsigned int v24 = v145;
                if (v145 < 0x1000) {
                  InstrumentState::AddLayer((char **)this, -1);
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v143 = 136315906;
                  *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)&v143[12] = 1024;
                  *(_DWORD *)&v143[14] = 343;
                  *(_WORD *)&v143[18] = 1024;
                  *(_DWORD *)&v143[20] = v24;
                  *(_WORD *)&v143[24] = 1024;
                  *(_DWORD *)&v143[26] = 4095;
                  _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d EXS24 group index (%d) > max (%u) -- skipping", v143, 0x1Eu);
                }
                goto LABEL_224;
              case 3:
                if (v11) {
                  goto LABEL_225;
                }
                bzero(buf, 0x250uLL);
                if (v19 >= 0x250) {
                  size_t v21 = 592;
                }
                else {
                  size_t v21 = v19;
                }
                int v22 = pread(__fd, buf, v21, v20);
                if (v16) {
                  swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x250u);
                }
                while (1)
                {
                  __int16 v58 = strchr((char *)&v139, 58);
                  if (!v58) {
                    break;
                  }
                  char *v58 = 47;
                }
                BOOL v60 = v139 != 1414748499 || WORD2(v139) != 19781;
                CFStringRef v61 = CFStringCreateWithCString(alloc, v147, 0x600u);
                if (v60) {
                  __int16 v62 = (const char *)&v139;
                }
                else {
                  __int16 v62 = (char *)&v139 + 6;
                }
                *(void *)v143 = v61;
                CFIndex v63 = strlen(v62);
                *(void *)v133 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v62, v63, 1u);
                v132 = (glob_t *)MEMORY[0x21D496E30](0, *(void *)v143, 0, 0, *(void *)v133);
                InstrumentManager::AddSample(*((InstrumentManager **)this + 14), v132, *(unsigned char *)(*((void *)this + 3) + 176), v122++ | 0x10000000u, 1);
                Smart<__CFURL const*>::~Smart((const void **)&v132);
                Smart<__CFURL const*>::~Smart((const void **)v133);
                Smart<__CFString const*>::~Smart((const void **)v143);
                goto LABEL_223;
              case 4:
                if (v127)
                {
                  char v127 = 1;
LABEL_225:
                  unsigned int v14 = v19 + v20;
                  continue;
                }
                if (HIDWORD(__buf) >= 0x130) {
                  size_t v21 = 304;
                }
                else {
                  size_t v21 = HIDWORD(__buf);
                }
                int v22 = pread(__fd, v148, v21, v20);
                int v27 = v148[0];
                if (v16)
                {
                  uint64_t v28 = 0;
                  int v27 = bswap32(v148[0]);
                  v148[0] = v27;
                  do
                  {
                    *(_WORD *)((char *)&v148[26] + v28) = bswap32(*(unsigned __int16 *)((char *)&v148[26] + v28)) >> 16;
                    v28 += 2;
                  }
                  while (v28 != 200);
                }
                if (v27 < 1)
                {
                  char v127 = 1;
                  goto LABEL_223;
                }
                int v118 = v21;
                uint64_t v29 = 0;
                char v30 = 0;
                char v31 = 0;
                break;
              default:
                goto LABEL_225;
            }
            while (1)
            {
              int v32 = *((__int16 *)&v148[26] + v29);
              unsigned int v33 = *((unsigned __int8 *)&v148[1] + v29);
              if (v33 > 0xB9)
              {
                unsigned int v35 = v33 - 186;
                BOOL v36 = v35 > 0x2B;
                uint64_t v37 = (1 << v35) & 0xC30C30C30C3;
                BOOL v38 = v36 || v37 == 0;
                if (!v38)
                {
LABEL_83:
                  if (!((v32 != -11) | v30 & 1)) {
                    goto LABEL_93;
                  }
                  if (!((v32 != -10) | v31 & 1)) {
                    InstrumentState::AddLFO(this, 241);
                  }
                }
                goto LABEL_95;
              }
              if (*((unsigned __int8 *)&v148[1] + v29) <= 0x3Eu)
              {
                if (*((unsigned __int8 *)&v148[1] + v29) > 0x13u)
                {
                  if (v33 - 47 >= 3)
                  {
                    if (v33 == 20)
                    {
                      if (v32 >= 0x80)
                      {
                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315394;
                          *(void *)&uint8_t buf[4] = "EXS24_Utils.h";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 86;
                          v107 = &_os_log_internal;
                          v108 = "%25s:%-5d  Exp4SmallParamToFactor called with large param!";
LABEL_325:
                          for (int i = buf; ; int i = v143)
                          {
                            _os_log_impl(&dword_21B9BB000, v107, OS_LOG_TYPE_ERROR, v108, i, 0x12u);
                            __break(1u);
LABEL_327:
                            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                              break;
                            }
                            *(_DWORD *)v143 = 136315394;
                            *(void *)&v143[4] = "InstrumentState_EXS24.cpp";
                            *(_WORD *)&v143[12] = 1024;
                            *(_DWORD *)&v143[14] = 308;
                            v107 = &_os_log_internal;
                            v108 = "%25s:%-5d  ASSERTION FAILED:  NULL parent for zone with valid group index";
                          }
                        }
LABEL_353:
                        __break(1u);
LABEL_354:
                        {
                          byte_267C606DB = 1;
                          word_267C606DD = 32512;
                          unk_267C60730 = 32512;
                        }
                        goto LABEL_17;
                      }
                      if (*((_WORD *)&v148[26] + v29)) {
                        float v41 = powf((float)v32 / 127.0, 4.0);
                      }
                      else {
                        float v41 = 0.0;
                      }
                      InstrumentState::SetPortamentoTime(this, v41 * 5.0);
                    }
                    else if (v33 == 45)
                    {
                      InstrumentState::SetKeyOffset(this, *((__int16 *)&v148[26] + v29));
                    }
                  }
                  else if (!((v32 != 1) | v30 & 1))
                  {
LABEL_93:
                    InstrumentState::AddLFO(this, 240);
                  }
                }
                else
                {
                  switch(*((unsigned char *)&v148[1] + v29))
                  {
                    case 5:
                      if (*((_WORD *)&v148[26] + v29)) {
                        InstrumentState::SetVoiceCount(this, *((__int16 *)&v148[26] + v29));
                      }
                      break;
                    case 7:
                      InstrumentState::SetGain((float *)this, (float)v32);
                      break;
                    case 0xA:
                      if (v32 != 2)
                      {
                        if (v32 != 1 || *((_DWORD *)this + 31) == 76) {
                          break;
                        }
                        int v40 = 76;
                        goto LABEL_145;
                      }
                      if (*((_DWORD *)this + 31) != 77)
                      {
                        int v40 = 77;
LABEL_145:
                        *((_DWORD *)this + 31) = v40;
                        (*(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112))(this, 4142, 0);
                        break;
                      }
                      break;
                    case 0xE:
                      InstrumentState::SetCoarseTuning(this, *((__int16 *)&v148[26] + v29));
                      break;
                    case 0xF:
                      InstrumentState::SetFineTuning((float *)this, (float)v32);
                      break;
                    default:
                      break;
                  }
                }
              }
              else
              {
                if (*((unsigned __int8 *)&v148[1] + v29) > 0x64u)
                {
                  switch(*((unsigned char *)&v148[1] + v29))
                  {
                    case 0xA6:
                      *(_DWORD *)buf = *((__int16 *)&v148[26] + v29);
                      if (v32 == -1)
                      {
                        char v34 = -1;
                      }
                      else
                      {
                        CHECK_RANGE<unsigned int>((unsigned int *)buf, 0, 0x7Fu, (uint64_t)"InstrumentState::SetRemoteReferenceKey: Invalid key");
                        char v34 = buf[0];
                        if (*(_DWORD *)buf == *((unsigned __int8 *)this + 200)) {
                          goto LABEL_95;
                        }
                      }
                      *((unsigned char *)this + 200) = v34;
                      goto LABEL_95;
                    case 0xA7:
                      if ((v32 != 34) | v31 & 1)
                      {
                        if ((v31 & 1) == 0) {
                          InstrumentState::AddLFO(this, 241);
                        }
                        if (v32 == 34)
                        {
                          CFStringRef v49 = (void *)*((void *)this + 26);
                          unsigned int v50 = (void *)*((void *)this + 27);
                          while (v49 != v50)
                          {
                            unsigned int v51 = (unsigned int (***)(void))*v49;
                            if ((**(unsigned int (***)(void))*v49)(*v49) == 268435697) {
                              goto LABEL_168;
                            }
                            ++v49;
                          }
                          unsigned int v51 = 0;
LABEL_168:
                          ((void (*)(unsigned int (***)(void), void))(*v51)[8])(v51, 0);
                        }
                        else
                        {
                          if (v32 > 33)
                          {
                            LOWORD(v26) = lfoHzTab[*((__int16 *)&v148[26] + v29) - 34];
                            float v42 = (double)v26 * 0.001;
                          }
                          else
                          {
                            float v42 = 768.0 / (float)((float)tabBeatRate[*((__int16 *)&v148[26] + v29)] * 4.0);
                          }
                          CFStringRef v55 = (float **)*((void *)this + 26);
                          __int16 v56 = (float **)*((void *)this + 27);
                          while (v55 != v56)
                          {
                            int v57 = *v55;
                            if ((**(unsigned int (***)(float *))*v55)(*v55) == 268435697) {
                              goto LABEL_175;
                            }
                            ++v55;
                          }
                          int v57 = 0;
LABEL_175:
                          LFOState::SetRate(v57, v42);
                        }
                        char v31 = 1;
                        goto LABEL_95;
                      }
                      char v31 = 0;
                      break;
                    case 0xA8:
                    case 0xA9:
                    case 0xAA:
                    case 0xAC:
                    case 0xAD:
                    case 0xB0:
                    case 0xB1:
                    case 0xB2:
                    case 0xB3:
                      goto LABEL_95;
                    case 0xAB:
                      *((unsigned char *)this + 185) = v32 == 1;
                      goto LABEL_95;
                    case 0xAE:
                    case 0xAF:
                    case 0xB4:
                    case 0xB5:
                      goto LABEL_83;
                    default:
                      if (v33 == 101) {
                        InstrumentState::SetOutputScope(this, *((__int16 *)&v148[26] + v29));
                      }
                      goto LABEL_95;
                  }
                  goto LABEL_95;
                }
                if (v33 == 63)
                {
                  if (!((v32 != 34) | v30 & 1))
                  {
                    char v30 = 0;
                    goto LABEL_95;
                  }
                  if ((v30 & 1) == 0) {
                    InstrumentState::AddLFO(this, 240);
                  }
                  if (v32 == 34)
                  {
                    __n128 v46 = (void *)*((void *)this + 26);
                    __n128 v47 = (void *)*((void *)this + 27);
                    while (v46 != v47)
                    {
                      double v48 = (unsigned int (***)(void))*v46;
                      if ((**(unsigned int (***)(void))*v46)(*v46) == 268435696) {
                        goto LABEL_155;
                      }
                      ++v46;
                    }
                    double v48 = 0;
LABEL_155:
                    ((void (*)(unsigned int (***)(void), void))(*v48)[8])(v48, 0);
                  }
                  else
                  {
                    if (v32 > 33)
                    {
                      LOWORD(v26) = lfoHzTab[*((__int16 *)&v148[26] + v29) - 34];
                      float v39 = (double)v26 * 0.001;
                    }
                    else
                    {
                      float v39 = 768.0 / (float)((float)tabBeatRate[*((__int16 *)&v148[26] + v29)] * 4.0);
                    }
                    double v52 = (float **)*((void *)this + 26);
                    double v53 = (float **)*((void *)this + 27);
                    while (v52 != v53)
                    {
                      int v54 = *v52;
                      if ((**(unsigned int (***)(float *))*v52)(*v52) == 268435696) {
                        goto LABEL_166;
                      }
                      ++v52;
                    }
                    int v54 = 0;
LABEL_166:
                    LFOState::SetRate(v54, v39);
                  }
                  goto LABEL_94;
                }
                if (v33 != 64)
                {
                  if (v33 == 95) {
                    InstrumentState::SetVelocityOffset(this, *((__int16 *)&v148[26] + v29));
                  }
                  goto LABEL_95;
                }
                if (*((_WORD *)&v148[26] + v29))
                {
                  if ((v30 & 1) == 0) {
                    InstrumentState::AddLFO(this, 240);
                  }
                  v143[0] = 0;
                  v133[0] = 0;
                  if (v32 > 2)
                  {
                    unsigned int v128 = ParamToLFOWaveform(v32, (BOOL *)v143, v133);
                    double v43 = (void *)*((void *)this + 26);
                    double v44 = (void *)*((void *)this + 27);
                    while (v43 != v44)
                    {
                      __n128 v45 = (_DWORD *)*v43;
                      if ((**(unsigned int (***)(void))*v43)(*v43) == 268435696) {
                        goto LABEL_153;
                      }
                      ++v43;
                    }
                    __n128 v45 = 0;
LABEL_153:
                    LFOState::SetWaveform(v45, v128);
                  }
                  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 647;
                    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Saw waveforms not supported on global LFO", buf, 0x12u);
                  }
LABEL_94:
                  char v30 = 1;
                }
              }
LABEL_95:
              if (++v29 >= (int)v148[0])
              {
                char v127 = 1;
                LODWORD(v21) = v118;
LABEL_223:
                if (v21 != v22)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 412;
                    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: Error reading from file", buf, 0x12u);
                  }
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)v143, 0xFFFFD589);
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 413;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v143;
                    *(_WORD *)&buf[28] = 2080;
                    *(void *)&unsigned char buf[30] = "Invalid EXS file";
                    _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                  }
                  v104 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                  CAXException::CAXException(v104, "Invalid EXS file", -10871);
                }
LABEL_224:
                unsigned int v19 = HIDWORD(__buf);
                goto LABEL_225;
              }
            }
          }
          swapChunk((unsigned int *)&__buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::swap, 0x54u);
          BYTE3(__buf) &= ~0x80u;
          HIDWORD(__buf) = WORD2(__buf) & 0x7FFF;
        }
        int v16 = 1;
        goto LABEL_31;
      }
      break;
    }
    unint64_t v70 = &_os_log_internal;
    if ((v127 & 1) == 0 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 429;
      _os_log_impl(&dword_21B9BB000, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: no default settings present", buf, 0x12u);
    }
    char v12 = v125;
    int v13 = v119;
    int v10 = v122;
    if (v119 & v125) {
      goto LABEL_234;
    }
    char v11 = 1;
    BOOL v38 = v117++ == 3;
  }
  while (!v38);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 438;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: no zones and/or groups present!", buf, 0x12u);
  }
LABEL_234:
  CFStringRef __buf = CFURLCopyLastPathComponent(urla);
  *(void *)v143 = CFURLCreateStringByReplacingPercentEscapes(0, __buf, &stru_26CBB4BA8);
  (*(void (**)(InstrumentState *))(*(void *)this + 72))(this);
  uint64_t v71 = (LayerState **)*((void *)this + 29);
  BOOL v72 = (LayerState **)*((void *)this + 30);
  if (v71 != v72)
  {
    while (HasZones(*v71))
    {
      ++v71;
LABEL_237:
      if (v71 == v72) {
        goto LABEL_244;
      }
    }
    unint64_t v73 = v72 - 1;
    while (v73 != v71)
    {
      BOOL v72 = v73;
      __int16 v75 = *v73--;
      uint64_t v74 = v75;
      if (HasZones(v75))
      {
        unsigned int v76 = *v71;
        *v71++ = v74;
        const char *v72 = v76;
        goto LABEL_237;
      }
    }
  }
  BOOL v72 = v71;
LABEL_244:
  if (*((LayerState ***)this + 30) != v72)
  {
    __int16 v77 = v72;
    do
      SamplerState::Unref(*v77++);
    while (v77 != *((LayerState ***)this + 30));
    if (v77 != v72) {
      *((void *)this + 30) = v72;
    }
  }
  if (v134)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 466;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: portamento replaced by pitcher", buf, 0x12u);
    }
    InstrumentState::SetPortamentoTime(this, 0.0);
  }
  uint64_t v78 = *((void *)this + 24);
  if (v78) {
    MEMORY[0x21D497F90](v78, 0x1000C40451B5BE8);
  }
  *((void *)this + 24) = 0;
  __int16 v79 = (uint64_t *)*((void *)this + 29);
  if (v79 == *((uint64_t **)this + 30))
  {
    char v80 = 0;
  }
  else
  {
    char v80 = 0;
    __int16 v81 = &_os_log_internal;
    do
    {
      uint64_t v82 = *v79;
      uint64_t v83 = *(unsigned int *)(*v79 + 116);
      if (v83 == -1)
      {
        *(unsigned char *)(v82 + 128) = 1;
      }
      else
      {
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          int v84 = (**(uint64_t (***)(uint64_t))v82)(v82);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 481;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v84;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v83;
          _os_log_impl(&dword_21B9BB000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: layer %u is selected by layer at index %u", buf, 0x1Eu);
        }
        uint64_t v85 = *(void *)(*((void *)this + 29) + 8 * v83);
        int v86 = -10;
        float v87 = (uint64_t (***)(void))v82;
        do
        {
          uint64_t v88 = v85;
          *(void *)(v85 + 120) = v87;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
          {
            int v89 = (**(uint64_t (***)(uint64_t))v88)(v88);
            int v90 = (**v87)(v87);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 489;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v89;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v90;
            _os_log_impl(&dword_21B9BB000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: recursing: layer %u selects layer %u", buf, 0x1Eu);
          }
          uint64_t v91 = *(unsigned int *)(v88 + 116);
          if (v91 == -1) {
            break;
          }
          if (!v86) {
            break;
          }
          uint64_t v85 = *(void *)(*((void *)this + 29) + 8 * v91);
          ++v86;
          float v87 = (uint64_t (***)(void))v88;
        }
        while (v85);
        *(void *)(v82 + 120) = v88;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          int v92 = (**(uint64_t (***)(uint64_t))v82)(v82);
          int v93 = (**(uint64_t (***)(uint64_t))v88)(v88);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 498;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v92;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v93;
          _os_log_impl(&dword_21B9BB000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: chain end: layer %u selects layer %u", buf, 0x1Eu);
        }
        *(unsigned char *)(v82 + 128) = *(void *)(*((void *)this + 29) + 8 * *(unsigned int *)(v82 + 116)) == v82;
        char v80 = 1;
      }
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        int v94 = (**(uint64_t (***)(uint64_t))v82)(v82);
        v95 = " ";
        if (!*(unsigned char *)(v82 + 128)) {
          v95 = " not ";
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 505;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v94;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = v95;
        _os_log_impl(&dword_21B9BB000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: layer %u is%senabled\n", buf, 0x22u);
      }
      unint64_t v96 = *(unsigned __int8 *)(v82 + 130);
      if (v96 != 255)
      {
        uint64_t v97 = *((void *)this + 24);
        if (!v97) {
          operator new();
        }
        if ((v96 & 0x80) != 0) {
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        }
        *(void *)(v97 + ((v96 >> 3) & 0x18)) |= 1 << v96;
      }
      ++v79;
    }
    while (v79 != *((uint64_t **)this + 30));
  }
  *((unsigned char *)this + 184) = v80 & 1;
  if (st_size != v14 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "InstrumentState_EXS24.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 534;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v14;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = st_size;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: fileOffset != fileSize (%d != %d)\n", buf, 0x1Eu);
  }
  (*(void (**)(InstrumentState *, uint64_t))(*(void *)this + 64))(this, 1);
  Smart<__CFString const*>::~Smart((const void **)v143);
  Smart<__CFString const*>::~Smart((const void **)&__buf);
  return close(__fd);
}

void sub_21BA52008(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *swapChunk(unsigned int *result, const int *a2, unsigned int a3)
{
  int v3 = *a2;
  if (*a2)
  {
    int v4 = a2 + 1;
    int v5 = result;
    do
    {
      if (v3 == 4)
      {
        *int v5 = bswap32(*v5);
        uint64_t v6 = 4;
      }
      else if (v3 == 2)
      {
        *(_WORD *)int v5 = bswap32(*(unsigned __int16 *)v5) >> 16;
        uint64_t v6 = 2;
      }
      else
      {
        if ((v3 & 0x80000000) == 0) {
          return result;
        }
        uint64_t v6 = -v3;
      }
      int v5 = (unsigned int *)((char *)v5 + v6);
      int v7 = *v4++;
      int v3 = v7;
      if (v7) {
        BOOL v8 = (int)v5 - (int)result >= a3;
      }
      else {
        BOOL v8 = 1;
      }
    }
    while (!v8);
  }
  return result;
}

BOOL HasZones(LayerState *a1)
{
  return ((*((void *)a1 + 57) - *((void *)a1 + 56)) & 0x7FFFFFFF8) != 0;
}

void InstrumentState::UpdateLayers(InstrumentState *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 184))
  {
    CFURLRef v2 = (uint64_t *)*((void *)this + 29);
    int v3 = (uint64_t *)*((void *)this + 30);
    if (v2 != v3)
    {
      int v4 = (uint64_t *)*((void *)this + 29);
      do
      {
        uint64_t v5 = *v4++;
        *(unsigned char *)(v5 + 129) = 0;
      }
      while (v4 != v3);
      uint64_t v6 = &_os_log_internal;
      do
      {
        uint64_t v7 = *v2;
        uint64_t v8 = *(void *)(*v2 + 120);
        if (*(unsigned char *)(*v2 + 128)) {
          BOOL v9 = v8 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9 && !*(unsigned char *)(v7 + 129))
        {
          *(unsigned char *)(v7 + 128) = 0;
          *(unsigned char *)(v8 + 128) ^= 1u;
          *(unsigned char *)(v8 + 129) = 1;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            int v10 = (**(uint64_t (***)(uint64_t))v7)(v7);
            int v11 = (**(uint64_t (***)(uint64_t))v8)(v8);
            char v12 = "enabled";
            if (!*(unsigned char *)(v8 + 128)) {
              char v12 = "disabled";
            }
            *(_DWORD *)buf = 136316162;
            unsigned int v14 = "InstrumentState_EXS24.cpp";
            __int16 v15 = 1024;
            int v16 = 558;
            __int16 v17 = 1024;
            int v18 = v10;
            __int16 v19 = 1024;
            int v20 = v11;
            __int16 v21 = 2080;
            int v22 = v12;
            _os_log_impl(&dword_21B9BB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::UpdateLayers: layer %u now disabled, next layer %u now %s\n", buf, 0x28u);
            int v3 = (uint64_t *)*((void *)this + 30);
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
  }
}

float MidiControls::GetPitchBend(MidiControls *this)
{
  return *((float *)this + 71) * *((float *)this + 70);
}

uint64_t MidiControls::SetSysex(MidiControls *this, void *a2)
{
  return 0;
}

uint64_t MidiControls::SetController(MidiControls *this, unsigned int a2, char a3)
{
  if ((a2 & 0x80) == 0) {
    *((unsigned char *)this + a2 + 8) = a3;
  }
  return (a2 >> 7) ^ 1;
}

uint64_t MidiControls::SetPolyPressure(MidiControls *this, unsigned int a2, char a3)
{
  *((unsigned char *)this + a2 + 136) = a3;
  return 1;
}

uint64_t MidiControls::SetChannelPressure(MidiControls *this, char a2)
{
  *((unsigned char *)this + 264) = a2;
  return 1;
}

uint64_t MidiControls::SetPitchWheel(MidiControls *this, __int16 a2)
{
  *((_WORD *)this + 133) = a2;
  float v2 = (double)(a2 - 0x2000) * 0.000122070312;
  *((float *)this + 71) = v2;
  return 1;
}

uint64_t MidiControls::SetProgramChange(MidiControls *this, char a2)
{
  *((unsigned char *)this + 265) = a2;
  return 1;
}

double MidiControls::Reset(MidiControls *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v1 = (char *)this + 8;
  *(_OWORD *)(v1 + 252) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_WORD *)v1 + 5) = 32576;
  *((_WORD *)v1 + 134) = 3072;
  *(void *)&double result = 1103101952;
  *((void *)v1 + 34) = 1103101952;
  return result;
}

void MidiControls::~MidiControls(MidiControls *this)
{
}

uint64_t SynthGroupElement::SetGroupID(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 248) != -1) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *(_DWORD *)(this + 248) = a2;
  return this;
}

uint64_t SynthGroupElement::Reset(SynthGroupElement *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 29) + 16))(*((void *)this + 29));
  for (uint64_t i = 96; i != 240; i += 24)
  {
    int v4 = (void *)((char *)this + i);
    *int v4 = 0;
    v4[1] = 0;
  }
  return result;
}

uint64_t SynthGroupElement::ResetAllControllers(SynthGroupElement *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 29) + 16))();
}

uint64_t SynthGroupElement::AllNotesOff(uint64_t this, uint64_t a2)
{
  uint64_t v20 = this;
  uint64_t v3 = 0;
  char v4 = 1;
  uint64_t v5 = 4;
  do
  {
    char v6 = v4;
    uint64_t v7 = v20 + 24 * v3;
    uint64_t v10 = *(void *)(v7 + 96);
    BOOL v9 = (void *)(v7 + 96);
    uint64_t v8 = v10;
    if (v10)
    {
      uint64_t v11 = v20 + 88 + 24 * v3 + 16;
      char v12 = (_DWORD *)(v20 + 88 + 24 * v5);
      int v13 = (uint64_t *)(v12 + 2);
      do
      {
        uint64_t v14 = *(void *)(v8 + 8);
        uint64_t v15 = *(void *)(v8 + 16);
        if (v14)
        {
          *(void *)(v14 + 16) = v15;
          uint64_t v16 = *(void *)(v8 + 16);
        }
        else
        {
          *BOOL v9 = v15;
          uint64_t v16 = v15;
        }
        if (v16) {
          __int16 v17 = (void *)(v16 + 8);
        }
        else {
          __int16 v17 = (void *)v11;
        }
        *__int16 v17 = v14;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 56))(v8, a2);
        *(_DWORD *)(v8 + 44) = *v12;
        uint64_t v18 = *v13;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = v18;
        if (v18) {
          __int16 v19 = (void *)(v18 + 8);
        }
        else {
          __int16 v19 = v12 + 4;
        }
        *__int16 v19 = v8;
        *int v13 = v8;
        uint64_t v8 = v15;
      }
      while (v15);
    }
    char v4 = 0;
    uint64_t v5 = 2;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) != 0);
  return this;
}

uint64_t SynthGroupElement::ChannelMessage(SynthGroupElement *this, unsigned int a2, uint64_t a3)
{
  if (a2 <= 0x65 && (a2 & 0xFFFD) != 0x40) {
    return (*(uint64_t (**)(void, void, void))(**((void **)this + 29) + 56))(*((void *)this + 29), a2, a3);
  }
  HIDWORD(v4) = a2;
  LODWORD(v4) = a2 - 160;
  switch((v4 >> 4))
  {
    case 0u:
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 29) + 48))(*((void *)this + 29), (a3 >> 7), a3 & 0x7F);
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 29) + 24))(*((void *)this + 29), a3);
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 29) + 40))(*((void *)this + 29), a3);
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 29) + 32))(*((void *)this + 29), a3);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t SynthGroupElement::NoteOff(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(this + 24 * v4 + 96);
    if (v5) {
      break;
    }
LABEL_5:
    if (++v4 == *(unsigned __int8 *)(this + 241) + 1) {
      return this;
    }
  }
  while (*(_DWORD *)(v5 + 40) != a2)
  {
    uint64_t v5 = *(void *)(v5 + 16);
    if (!v5) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  char v6 = (void *)(v5 + 8);
  if (v4)
  {
    if (v7)
    {
      *(void *)(v7 + 16) = v8;
      uint64_t v8 = *(void *)(v5 + 16);
    }
    else
    {
      *(void *)(this + 120) = v8;
    }
    BOOL v9 = (void *)(this + 128);
    if (v8) {
      BOOL v9 = (void *)(v8 + 8);
    }
    *BOOL v9 = v7;
    *char v6 = 0;
    *(void *)(v5 + 16) = 0;
    uint64_t v11 = (void *)(this + 144);
    uint64_t v10 = *(void *)(this + 144);
    *(_DWORD *)(v5 + 44) = *(_DWORD *)(this + 136);
    *(void *)(v5 + 16) = v10;
  }
  else
  {
    if (v7)
    {
      *(void *)(v7 + 16) = v8;
      uint64_t v8 = *(void *)(v5 + 16);
    }
    else
    {
      *(void *)(this + 96) = v8;
    }
    char v12 = (void *)(this + 104);
    if (v8) {
      char v12 = (void *)(v8 + 8);
    }
    *char v12 = v7;
    *char v6 = 0;
    *(void *)(v5 + 16) = 0;
    if (*(unsigned char *)(this + 240))
    {
      uint64_t v11 = (void *)(this + 168);
      uint64_t v10 = *(void *)(this + 168);
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, a3);
      uint64_t v13 = *(void *)(v3 + 192);
      uint64_t v11 = (void *)(v3 + 192);
      uint64_t v10 = v13;
    }
    *(_DWORD *)(v5 + 44) = *((_DWORD *)v11 - 2);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = v10;
  }
  if (v10) {
    uint64_t v14 = (void *)(v10 + 8);
  }
  else {
    uint64_t v14 = v11 + 1;
  }
  *uint64_t v14 = v5;
  *uint64_t v11 = v5;
  return this;
}

void SynthPartElement::~SynthPartElement(const void **this)
{
  ausdk::AUElement::~AUElement(this);

  JUMPOUT(0x21D497F90);
}

uint64_t SynthGroupElement::NoteFastReleased(uint64_t this, SynthNote *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)a2 + 11);
  if (v2 > 4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      BOOL v9 = "SynthElement.cpp";
      __int16 v10 = 1024;
      int v11 = 199;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  Attempting to fast-release non-active note", (uint8_t *)&v8, 0x12u);
    }
    __break(1u);
  }
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)a2 + 2);
  if (v3)
  {
    *(void *)(v3 + 16) = v4;
    uint64_t v4 = *((void *)a2 + 2);
  }
  else
  {
    *(void *)(this + 24 * v2 + 96) = v4;
  }
  uint64_t v5 = (void *)(this + 24 * v2 + 104);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 8);
  }
  *uint64_t v5 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  --*(_DWORD *)(*(void *)(this + 8) + 580);
  *((_DWORD *)a2 + 11) = *(_DWORD *)(this + 208);
  uint64_t v6 = *(void *)(this + 216);
  *((void *)a2 + 2) = v6;
  if (v6) {
    uint64_t v7 = (void *)(v6 + 8);
  }
  else {
    uint64_t v7 = (void *)(this + 224);
  }
  *uint64_t v7 = a2;
  *(void *)(this + 216) = a2;
  return this;
}

_DWORD *SynthGroupElement::SostenutoOn(_DWORD *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 241))
  {
    uint64_t v3 = (uint64_t)this;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 29) + 56))(*((void *)this + 29), 66, 127);
    *(unsigned char *)(v3 + 241) = 1;
    return SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 112), v3 + 88, a2);
  }
  return this;
}

_DWORD *SynthNoteList::TransferAllFrom(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    int v6 = *result;
    int v8 = (void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    if (*result == 4)
    {
      if (v7)
      {
        do
        {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 56))(v7, a3);
          *(_DWORD *)(v7 + 44) = *v5;
          uint64_t v7 = *(void *)(v7 + 16);
        }
        while (v7);
        uint64_t v3 = *(void *)(a2 + 16);
      }
    }
    else
    {
      for (; v7; uint64_t v7 = *(void *)(v7 + 16))
        *(_DWORD *)(v7 + 44) = v6;
    }
    uint64_t v10 = *((void *)v5 + 1);
    *(void *)(v3 + 16) = v10;
    if (v10) {
      int v11 = (void *)(v10 + 8);
    }
    else {
      int v11 = v5 + 4;
    }
    *int v11 = v3;
    *((void *)v5 + 1) = *v8;
    *int v8 = 0;
    v8[1] = 0;
  }
  return result;
}

_DWORD *SynthGroupElement::SostenutoOff(_DWORD *this, uint64_t a2)
{
  if (*((unsigned char *)this + 241))
  {
    uint64_t v3 = (uint64_t)this;
    (*(void (**)(void, uint64_t, void))(**((void **)this + 29) + 56))(*((void *)this + 29), 66, 0);
    *(unsigned char *)(v3 + 241) = 0;
    SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 88), v3 + 112, a2);
    if (*(unsigned char *)(v3 + 240)) {
      uint64_t v4 = (_DWORD *)(v3 + 160);
    }
    else {
      uint64_t v4 = (_DWORD *)(v3 + 184);
    }
    return SynthNoteList::TransferAllFrom(v4, v3 + 136, a2);
  }
  return this;
}

_DWORD *SynthGroupElement::SustainOff(_DWORD *this, uint64_t a2)
{
  if (*((unsigned char *)this + 240))
  {
    uint64_t v3 = (uint64_t)this;
    (*(void (**)(void, uint64_t, void))(**((void **)this + 29) + 56))(*((void *)this + 29), 64, 0);
    *(unsigned char *)(v3 + 240) = 0;
    return SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 184), v3 + 160, a2);
  }
  return this;
}

uint64_t non-virtual thunk to'CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((void *)this - 9);
}

void non-virtual thunk to'IPCAUServer::~IPCAUServer(IPCAUServer *this)
{
  IPCAUServer::~IPCAUServer((IPCAUServer *)((char *)this - 80));

  JUMPOUT(0x21D497F90);
}

{
  IPCAUServer::~IPCAUServer((IPCAUServer *)((char *)this - 80));
}

void IPCAUServer::~IPCAUServer(IPCAUServer *this)
{
  *(void *)this = &unk_26CBA80A8;
  int v2 = (IPCAUServer *)((char *)this + 80);
  *((void *)this + 10) = &unk_26CBA80F0;
  {
    CASIsDarwinOS(void)::global = os_variant_is_darwinos();
  }
  if (!CASIsDarwinOS(void)::global)
  {
    AudioSessionCreatePrimarySession_Priv();
    AudioSessionRemovePropertyListener_Priv();
  }
  uint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 33);
  if (v4)
  {
    *((void *)this + 34) = v4;
    operator delete(v4);
  }
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector((uint64_t)this + 232);
  uint64_t v5 = *((void *)this + 28);
  if (v5) {
    dispatch_release(v5);
  }
  *(void *)this = MEMORY[0x263F8B568] + 16;
  *((void *)this + 10) = MEMORY[0x263F8B568] + 88;
  int v6 = (void *)*((void *)this + 25);
  if (v6)
  {
    *((void *)this + 26) = v6;
    operator delete(v6);
  }
  MEMORY[0x21D497390]((char *)this + 112);
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
}

{
  uint64_t vars8;

  IPCAUServer::~IPCAUServer(this);

  JUMPOUT(0x21D497F90);
}

void sub_21BA52FD8(void *a1)
{
}

uint64_t OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(uint64_t a1)
{
  *(void *)a1 = &unk_26CBAADE0;
  OwnedPtrVector<PublishedAU_Host *>::erase((void *)a1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void *OwnedPtrVector<PublishedAU_Host *>::erase(void *result, uint64_t *__dst, uint64_t *__src)
{
  if (__dst != __src)
  {
    uint64_t v5 = result;
    int v6 = __dst;
    do
    {
      uint64_t result = (void *)*v6;
      if (*v6) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      ++v6;
    }
    while (v6 != __src);
    uint64_t v7 = (uint64_t *)v5[2];
    int64_t v8 = (char *)v7 - (char *)__src;
    if (v7 != __src) {
      uint64_t result = memmove(__dst, __src, (char *)v7 - (char *)__src);
    }
    v5[2] = (char *)__dst + v8;
  }
  return result;
}

void OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(uint64_t a1)
{
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(a1);

  JUMPOUT(0x21D497F90);
}

void ServerDiedCallback(void *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  if (a1)
  {
    uint64_t v4 = a1[28];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN11IPCAUServer10ServerDiedEv_block_invoke;
    block[3] = &__block_descriptor_tmp_3694;
    block[4] = a1;
    dispatch_sync(v4, block);
  }
}

void *___ZN11IPCAUServer10ServerDiedEv_block_invoke(uint64_t a1)
{
  return OwnedPtrVector<PublishedAU_Host *>::erase((void *)(*(void *)(a1 + 32) + 232), *(uint64_t **)(*(void *)(a1 + 32) + 240), *(uint64_t **)(*(void *)(a1 + 32) + 248));
}

uint64_t CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((void *)this + 1);
}

uint64_t IPCAUServer::ClientDied(char **this, CADeprecated::XMachServer::Client *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (kLocalInterAppAudioScope)
  {
    uint64_t v4 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = &_os_log_internal;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    uint64_t v10 = "IPCAUServer.cpp";
    __int16 v11 = 1024;
    int v12 = 195;
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    _os_log_impl(&dword_21B9BB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: client %p died", (uint8_t *)&v9, 0x1Cu);
  }
LABEL_7:
  uint64_t result = SearchableVector<AUServerInstanceBase *>::remove(this + 33, (uint64_t)a2);
  if (result)
  {
LABEL_16:
    if (a2) {
      return (*(uint64_t (**)(CADeprecated::XMachServer::Client *))(*(void *)a2 + 8))(a2);
    }
    return result;
  }
  uint64_t v7 = (CADeprecated::XMachServer::Client **)this[36];
  int v6 = (CADeprecated::XMachServer::Client **)this[37];
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6) {
        return result;
      }
    }
  }
  if (v7 != v6)
  {
    int64_t v8 = (char *)v6 - (char *)(v7 + 1);
    if (v6 != v7 + 1) {
      uint64_t result = (uint64_t)memmove(v7, v7 + 1, (char *)v6 - (char *)(v7 + 1));
    }
    this[37] = (char *)v7 + v8;
    goto LABEL_16;
  }
  return result;
}

uint64_t SearchableVector<AUServerInstanceBase *>::remove(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3) {
        return 0;
      }
    }
  }
  if (v4 == v3) {
    return 0;
  }
  int64_t v5 = v3 - (v4 + 8);
  if (v3 != v4 + 8) {
    memmove(v4, v4 + 8, v3 - (v4 + 8));
  }
  a1[1] = &v4[v5];
  return 1;
}

uint64_t AUWrappedOutputUnit::AURemovePropertyListener(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUWrappedOutputUnit::AUAddPropertyListener(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUWrappedOutputUnit::AURender(uint64_t a1, mach_port_name_t name, _DWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (name)
  {
    unint64_t v11 = atomic_load((unint64_t *)(a1 + 224));
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      caulk::mach::os_workgroup_managed::make();
      if (v38 < 0) {
        operator delete(__p[0]);
      }
      if (*(unsigned char *)(v11 + 72))
      {
        audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v11);
        *(unsigned char *)(v11 + 72) = 0;
      }
      *(void *)unint64_t v11 = MEMORY[0x263F88698] + 16;
      *(void *)(v11 + 8) = caulk::mach::details::retain_os_object((caulk::mach::details *)v42.mHostTime, v12);
      long long v13 = *(_OWORD *)((char *)&v42.mSMPTETime.mType + 1);
      long long v14 = *(_OWORD *)&v42.mSMPTETime.mSubframes;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&v42.mRateScalar;
      *(_OWORD *)(v11 + 32) = v14;
      *(_OWORD *)(v11 + 41) = v13;
      *(_DWORD *)(v11 + 64) = caulk::mach::os_workgroup_managed::join((caulk::mach::os_workgroup_managed *)v11);
      *(unsigned char *)(v11 + 72) = 1;
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v42);
    }
    mach_port_deallocate(*MEMORY[0x263EF8960], name);
  }
  if (!*(_DWORD *)(a1 + 64)) {
    return 4294956421;
  }
  uint64_t v15 = (AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUSharedMemoryBase *)(a1 + 72), *(_DWORD *)(a1 + 60), a6);
  if (!v15) {
    return 4294956421;
  }
  uint64_t v16 = v15;
  if (*(_DWORD *)(a1 + 60)) {
    __int16 v17 = (const AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUSharedMemoryBase *)(a1 + 72), 0, a6);
  }
  else {
    __int16 v17 = 0;
  }
  *(void *)&v42.mFlags = 0;
  memset(&v42.mWordClockTime, 0, 32);
  v42.double mSampleTime = (double)*(uint64_t *)a4;
  v42.mHostTime = *(void *)(a4 + 8);
  v42.mRateScalar = *(Float64 *)(a4 + 16);
  v42.mFlags = *(_DWORD *)(a4 + 24);
  uint64_t v18 = AUServerInstanceBase::DoControlMessages((AUServerInstanceBase *)a1);
  if (!v18)
  {
    int v19 = *(_DWORD *)(a1 + 256);
    uint64_t v20 = *(void *)(a1 + 96);
    if (v20) {
      __int16 v21 = (_OWORD *)(v20 + *(unsigned int *)(a1 + 168) + 2104);
    }
    else {
      __int16 v21 = 0;
    }
    ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)__p, v19);
    if (v41)
    {
      uint64_t v22 = *(void *)(v41 + 16);
      int v23 = 1;
      if (*(unsigned char *)(v22 + 558))
      {
        int v24 = *(_DWORD *)(v22 + 616);
        unsigned int v25 = (const char *)*(unsigned int *)(v22 + 1012);
        int v36 = 0;
        long long v26 = v21[1];
        *(_OWORD *)(v22 + 1080) = *v21;
        *(_OWORD *)(v22 + 1096) = v26;
        long long v27 = v21[2];
        long long v28 = v21[3];
        long long v29 = v21[5];
        *(_OWORD *)(v22 + 1144) = v21[4];
        *(_OWORD *)(v22 + 1160) = v29;
        *(_OWORD *)(v22 + 1112) = v27;
        *(_OWORD *)(v22 + 1128) = v28;
        long long v30 = v21[6];
        long long v31 = v21[7];
        long long v32 = v21[9];
        *(_OWORD *)(v22 + 1208) = v21[8];
        *(_OWORD *)(v22 + 1224) = v32;
        *(_OWORD *)(v22 + 1176) = v30;
        *(_OWORD *)(v22 + 1192) = v31;
        *(unsigned char *)(v22 + 1072) = 1;
        AUConverterRTMutex::lock((atomic_ullong *)(v22 + 528));
        if (v25 & 1) == 0 && (v24)
        {
          unsigned int v33 = *(IPCAUSharedMemoryBase **)(v22 + 760);
          if (v33) {
            __int16 v17 = (const AudioBufferList *)IPCAUSharedMemoryBase::immutableAudioBufferList(v33, 0, *(_DWORD *)(v22 + 1296));
          }
          else {
            __int16 v17 = 0;
          }
          unsigned int v25 = (const char *)(v25 | 1);
        }
        AURemoteIO::PerformIO((AURemoteIO *)v22, v25, a6, a6, &v42, &v42, v17, v16, &v36);
        int v23 = v36;
        int v34 = *(_DWORD *)(v22 + 1096);
        if (((*(_DWORD *)(v22 + 1240) ^ v34) & 0xF) != 0)
        {
          *(_DWORD *)(v22 + 1240) = v34;
          CADeprecated::RealtimeMessenger::PerformAsync();
        }
        AUConverterRTMutex::unlock((atomic_ullong *)(v22 + 528));
      }
    }
    else
    {
      int v23 = 1;
    }
    if (v40 && v39) {
      atomic_fetch_add(v39, 0xFFFFFFFF);
    }
    if (v23) {
      *a3 |= 0x10u;
    }
  }
  return v18;
}

void sub_21BA53760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15, char a16)
{
  if (a2)
  {
    AUConverterRTMutex::unlock(v16);
    if (a16 && a15) {
      atomic_fetch_add(a15, 0xFFFFFFFF);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x21BA53710);
  }
  _Unwind_Resume(exception_object);
}

void *IPCAUSharedMemoryBase::mutableAudioBufferList(IPCAUSharedMemoryBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 9) - v3) >> 3) <= (unint64_t)a2) {
    return 0;
  }
  int64_t v5 = (unsigned int *)IPCAUSharedMemoryBase::immutableAudioBufferList(this, a2, a3);
  int v6 = (void *)(*(void *)(v3 + 56 * a2 + 48) + 24);
  memcpy(v6, v5, (16 * *v5) | 8);
  return v6;
}

uint64_t AUServerInstanceBase::DoControlMessages(AUServerInstanceBase *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 12);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (!v2) {
    return 0;
  }
  _DWORD *v1 = 0;
  uint64_t v4 = (float *)(v1 + 1);
  int64_t v5 = (unsigned __int8 *)v4 + v2;
  while (1)
  {
    int v6 = *(unsigned __int8 *)v4;
    if (v6 == 2)
    {
      uint64_t v7 = (unsigned __int8 *)(v4 + 4);
      (*(void (**)(AUServerInstanceBase *, void, void, void, void, float))(*(void *)this + 96))(this, *((unsigned int *)v4 + 1), *((unsigned __int8 *)v4 + 1), *((unsigned __int16 *)v4 + 1), *((unsigned int *)v4 + 3), v4[2]);
      goto LABEL_10;
    }
    if (v6 == 1)
    {
      uint64_t v7 = (unsigned __int8 *)(v4 + 1);
      (*(void (**)(AUServerInstanceBase *, unsigned __int8 *, void))(*(void *)this + 104))(this, (unsigned __int8 *)v4 + 4, *((unsigned __int16 *)v4 + 1));
      goto LABEL_10;
    }
    if (*(unsigned char *)v4) {
      return 4294967246;
    }
    uint64_t v7 = (unsigned __int8 *)(v4 + 2);
    (*(void (**)(AUServerInstanceBase *, void, void, void, void))(*(void *)this + 112))(this, *((unsigned __int8 *)v4 + 1), *((unsigned __int8 *)v4 + 2), *((unsigned __int8 *)v4 + 3), *((unsigned int *)v4 + 1));
LABEL_10:
    uint64_t v4 = (float *)v7;
    if (v7 >= v5) {
      return 0;
    }
  }
}

void audioipc::os_workgroup_joiner::~os_workgroup_joiner(audioipc::os_workgroup_joiner *this)
{
  if (!*((_DWORD *)this + 16)) {
    caulk::mach::os_workgroup_managed::leave(this);
  }

  caulk::mach::os_workgroup_managed::~os_workgroup_managed(this);
}

uint64_t AUWrappedOutputUnit::ConnectInput(AUWrappedOutputUnit *this, unsigned int a2, unsigned __int8 a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mFormatID)
  {
    long long v4 = *(_OWORD *)&a4->mSampleRate;
    long long v5 = *(_OWORD *)&a4->mBytesPerPacket;
    *((void *)this + 37) = *(void *)&a4->mBitsPerChannel;
    *(_OWORD *)((char *)this + 264) = v4;
    *(_OWORD *)((char *)this + 280) = v5;
  }
  return 0;
}

uint64_t AUWrappedOutputUnit::AUMIDIEvent(AUWrappedOutputUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v13, *((_DWORD *)this + 64));
  if (v16
    && (uint64_t v9 = *(void *)(v16 + 16),
        (uint64_t v10 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 1056)) != 0))
  {
    v10(*(void *)(v9 + 1048), a2, a3, a4, a5);
    char v11 = 0;
  }
  else
  {
    char v11 = 1;
  }
  if (v15 && v14) {
    atomic_fetch_add(v14, 0xFFFFFFFF);
  }
  if (v11) {
    return 4294967246;
  }
  else {
    return 0;
  }
}

void sub_21BA53AA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15 && a14) {
    atomic_fetch_add(a14, 0xFFFFFFFF);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21BA53A80);
}

uint64_t AUWrappedOutputUnit::AUMIDISysEx(AUWrappedOutputUnit *this, const unsigned __int8 *a2, uint64_t a3)
{
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v9, *((_DWORD *)this + 64));
  if (v12
    && (uint64_t v5 = *(void *)(v12 + 16),
        (int v6 = *(void (**)(void, const unsigned __int8 *, uint64_t))(v5 + 1064)) != 0))
  {
    v6(*(void *)(v5 + 1048), a2, a3);
    char v7 = 0;
  }
  else
  {
    char v7 = 1;
  }
  if (v11 && v10) {
    atomic_fetch_add(v10, 0xFFFFFFFF);
  }
  if (v7) {
    return 4294967246;
  }
  else {
    return 0;
  }
}

void sub_21BA53B58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15 && a14) {
    atomic_fetch_add(a14, 0xFFFFFFFF);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21BA53B3CLL);
}

uint64_t AUWrappedOutputUnit::AUSetParameter(AUWrappedOutputUnit *this, float a2)
{
  return 4294956418;
}

uint64_t AUWrappedOutputUnit::AUGetParameter(AUWrappedOutputUnit *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  return 4294956418;
}

uint64_t AUWrappedOutputUnit::AUSetProperty(AUWrappedOutputUnit *this, int a2, int a3, int a4, _OWORD *a5)
{
  if (a2 == 14) {
    return 0;
  }
  if (a2 != 8) {
    return 4294956417;
  }
  if (a4) {
    return 4294956419;
  }
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if (*((_DWORD *)this + 15))
      {
        uint64_t result = 0;
        long long v7 = *a5;
        long long v8 = a5[1];
        *((void *)this + 37) = *((void *)a5 + 4);
        *(_OWORD *)((char *)this + 264) = v7;
        *(_OWORD *)((char *)this + 280) = v8;
        return result;
      }
      return 4294956430;
    }
LABEL_12:
    uint64_t result = 0;
    long long v9 = *a5;
    long long v10 = a5[1];
    *((void *)this + 42) = *((void *)a5 + 4);
    *((_OWORD *)this + 19) = v9;
    *((_OWORD *)this + 20) = v10;
    return result;
  }
  if (*((_DWORD *)this + 16)) {
    goto LABEL_12;
  }
  return 4294956430;
}

uint64_t AUWrappedOutputUnit::AUGetProperty(AUWrappedOutputUnit *this, int a2, int a3, int a4, void *a5, unsigned int *a6)
{
  if (a2 == 14)
  {
    uint64_t result = 0;
    *(_DWORD *)a5 = 4096;
    return result;
  }
  if (a2 != 8) {
    return 4294956417;
  }
  if (a4) {
    return 4294956419;
  }
  if (a3 == 2)
  {
    if (!*((_DWORD *)this + 16)) {
      return 4294956430;
    }
LABEL_12:
    uint64_t result = 0;
    long long v8 = *((_OWORD *)this + 19);
    long long v9 = *((_OWORD *)this + 20);
    uint64_t v10 = *((void *)this + 42);
    goto LABEL_13;
  }
  if (a3 != 1) {
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 15))
  {
    uint64_t result = 0;
    long long v8 = *(_OWORD *)((char *)this + 264);
    long long v9 = *(_OWORD *)((char *)this + 280);
    uint64_t v10 = *((void *)this + 37);
LABEL_13:
    a5[4] = v10;
    *(_OWORD *)a5 = v8;
    *((_OWORD *)a5 + 1) = v9;
    return result;
  }
  return 4294956430;
}

uint64_t AUWrappedOutputUnit::AUGetPropertyInfo(AUWrappedOutputUnit *this, int a2, int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  if (a2 == 14)
  {
    unsigned int v7 = 4;
  }
  else
  {
    if (a2 != 8) {
      return 4294956417;
    }
    if (a4) {
      return 4294956419;
    }
    if (a3 == 2)
    {
      if (!*((_DWORD *)this + 16)) {
        return 4294956430;
      }
    }
    else if (a3 == 1 && !*((_DWORD *)this + 15))
    {
      return 4294956430;
    }
    unsigned int v7 = 40;
  }
  uint64_t result = 0;
  *a5 = v7;
  *a6 = 1;
  return result;
}

uint64_t AUWrappedOutputUnit::AUReset(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUWrappedOutputUnit::AUUninitialize(atomic_uint *this)
{
  mach_msg_return_t v8;
  mach_msg_return_t v9;
  int v10;
  mach_port_t v11;
  mach_msg_return_t v12;
  mach_msg_return_t v13;
  _DWORD msg[11];

  if (*((unsigned char *)this + 57))
  {
    uint64_t v2 = (CADeprecated::XMachReceivePort *)(this + 10);
    unsigned int explicit = atomic_load_explicit(this + 10, memory_order_acquire);
    atomic_uint v4 = this[2];
    memset(&msg[5], 0, 24);
    *(_OWORD *)&msg[1] = 0u;
    uint64_t v5 = (void *)MEMORY[0x263EF80C8];
    *(void *)&msg[6] = *MEMORY[0x263EF80C8];
    msg[8] = v4;
    mach_port_t reply_port = mig_get_reply_port();
    msg[2] = explicit;
    msg[3] = reply_port;
    msg[0] = 5395;
    *(void *)&msg[4] = 0x1606900000000;
    uint64_t v7 = MEMORY[0x263EF8B00];
    if (MEMORY[0x263EF8B00])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_t reply_port = msg[3];
    }
    long long v8 = mach_msg((mach_msg_header_t *)msg, 275, 0x24u, 0x2Cu, reply_port, 0x7FFFFFFFu, 0);
    long long v9 = v8;
    if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg[3]);
    }
    else
    {
      if (!v8)
      {
        if (msg[5] == 90317 && (msg[0] & 0x80000000) == 0 && msg[1] == 36 && !msg[2] && !msg[8])
        {
LABEL_19:
          *((void *)this + 6) = 0;
          CADeprecated::XMachReceivePort::SetMachPort(v2);
          IPCAUSharedMemoryBase::Free((IPCAUSharedMemoryBase *)(this + 18));
          uint64_t v10 = AURegistrationServerConnection_ServerPort();
          memset(&msg[1], 0, 40);
          *(void *)&msg[6] = *v5;
          *(void *)&msg[8] = this;
          char v11 = mig_get_reply_port();
          msg[2] = v10;
          msg[3] = v11;
          msg[0] = 5395;
          *(void *)&msg[4] = 0x15F9500000000;
          if (v7)
          {
            voucher_mach_msg_set((mach_msg_header_t *)msg);
            char v11 = msg[3];
          }
          uint64_t v12 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, v11, *MEMORY[0x263EFC0D0], 0);
          long long v13 = v12;
          if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
          {
            mig_put_reply_port(msg[3]);
          }
          else
          {
            if (!v12)
            {
              if (msg[5] == 90105 && (msg[0] & 0x80000000) == 0 && msg[1] == 36 && !msg[2] && !msg[8]) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }
            mig_dealloc_reply_port(msg[3]);
          }
          if (v13 != 268435460)
          {
LABEL_36:
            AURemoteIO::IPC_Uninitialize((AURemoteIO *)this[64]);
            *((unsigned char *)this + 57) = 0;
            return 0;
          }
          if ((msg[0] & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x263EF8960], msg[3]);
          }
LABEL_35:
          mach_msg_destroy((mach_msg_header_t *)msg);
          goto LABEL_36;
        }
LABEL_18:
        mach_msg_destroy((mach_msg_header_t *)msg);
        goto LABEL_19;
      }
      mig_dealloc_reply_port(msg[3]);
    }
    if (v9 != 268435460) {
      goto LABEL_19;
    }
    if ((msg[0] & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x263EF8960], msg[3]);
    }
    goto LABEL_18;
  }
  return 0;
}

void std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v3);
  }
}

uint64_t AUWrappedOutputUnit::AUInitialize(AUWrappedOutputUnit *this, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, AudioStreamBasicDescription *a6, unsigned int *a7, SharableMemoryBlock::MachServerToken *a8, unsigned int *a9)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 57)) {
    return 4294956447;
  }
  *a7 = 0;
  if ((*((_DWORD *)this + 15) == 0) == (*((_DWORD *)this + 73) != 0)
    || (*((_DWORD *)this + 16) == 0) == (*((_DWORD *)this + 83) != 0))
  {
    return 4294956421;
  }
  CFUUIDRef v17 = CFUUIDCreateFromUUIDBytes(0, *((CFUUIDBytes *)this + 15));
  if (v17)
  {
    CFUUIDRef v18 = v17;
    CFStringRef v19 = CFUUIDCreateString(0, v17);
    if (v19)
    {
      uint64_t MachPort = (uint64_t)v19;
      CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"com-apple-audiounit:%@/%c", v19, 72);
      if (v20)
      {
        CFStringRef v21 = v20;
        CFURLRef cf = CFURLCreateWithString(0, v20, 0);
        CFRelease(v21);
      }
      else
      {
        CFURLRef cf = 0;
      }
      CFRelease((CFTypeRef)MachPort);
    }
    else
    {
      CFURLRef cf = 0;
    }
    CFRelease(v18);
  }
  else
  {
    CFURLRef cf = 0;
  }
  *a3 = 0;
  int v23 = *((_DWORD *)this + 64);
  uint64_t v24 = *((void *)this + 2);
  uint64_t v25 = *((void *)this + 4);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN19AUWrappedOutputUnit12AUInitializeEjRjS0_S0_P27AudioStreamBasicDescriptionS0_RN19SharableMemoryBlock15MachServerTokenES0__block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6;
  aBlock[4] = this;
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)&msg, v23);
  uint64_t v56 = *(void *)&v74[4];
  if (*(void *)&v74[4])
  {
    uint64_t v53 = v25;
    uint64_t v54 = v24;
    uint64_t v26 = *(void *)(*(void *)&v74[4] + 16);
    uint64_t v27 = *(void *)(v26 + 472);
    if (v27) {
      (*(void (**)(void))(*(void *)v27 + 16))(*(void *)(v26 + 472));
    }
    uint64_t v55 = v27;
    int v28 = (*((_DWORD *)this + 73) != 0) | (2 * (*((_DWORD *)this + 83) != 0));
    int v29 = *(_DWORD *)(v26 + 612);
    if ((v28 & ~v29) == 0)
    {
      *a3 = *(_DWORD *)(v26 + 336);
      if (*(unsigned char *)(v26 + 558)) {
        (*(void (**)(uint64_t))(*(void *)v26 + 448))(v26);
      }
      ausdk::AUBase::DoCleanup((ausdk::AUBase *)v26);
      *(_DWORD *)(v26 + 1012) = v28;
      long long v30 = *(_OWORD *)(v54 + 80);
      *(_DWORD *)(v26 + 1032) = *(_DWORD *)(v54 + 96);
      *(_OWORD *)(v26 + 1016) = v30;
      *(void *)(v26 + 1040) = cf;
      CFRetain(cf);
      int v65 = 0;
      v62[1] = 0;
      v62[0] = &unk_26CBB18C8;
      int v63 = 0;
      char v64 = 1;
      v59[1] = 0;
      v59[0] = &unk_26CBB18C8;
      int v60 = 0;
      char v61 = 1;
      int v31 = *(_DWORD *)(v26 + 1012);
      if ((v31 & 2) != 0) {
        long long v32 = (AudioStreamBasicDescription *)((char *)this + 304);
      }
      else {
        long long v32 = 0;
      }
      if (v31) {
        unsigned int v33 = (AudioStreamBasicDescription *)((char *)this + 264);
      }
      else {
        unsigned int v33 = 0;
      }
      uint64_t MachPort = AURemoteIO::ChangeHardwareFormats((unsigned char *)v26, v32, v33, 0, 0, &v65, (uint64_t)v62, (uint64_t)v59);
      if (!MachPort)
      {
        uint64_t MachPort = ausdk::AUBase::DoInitialize((ausdk::AUBase *)v26);
        if (!MachPort)
        {
          *(void *)(v26 + 1248) = v53;
          *(_DWORD *)(v26 + 1256) = a2;
          *(void *)(v26 + 1264) = _Block_copy(aBlock);
          *(_DWORD *)(v26 + 1240) = 0;
          operator new();
        }
      }
      AURemoteIO::IPC_Uninitialize((AURemoteIO *)v26);
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v26 + 432))(v26, 101, 0, 0);
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)v59);
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)v62);
      goto LABEL_39;
    }
    if (kRIOClientSubsystem)
    {
      int v34 = *(NSObject **)kRIOClientSubsystem;
      if (!*(void *)kRIOClientSubsystem)
      {
LABEL_38:
        uint64_t MachPort = 4294956421;
LABEL_39:
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
        }
        goto LABEL_41;
      }
    }
    else
    {
      int v34 = &_os_log_internal;
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      unsigned int v35 = gIOEnableStrings[v28];
      int v36 = gIOEnableStrings[v29 & 3];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AURemoteIO.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2130;
      *(_WORD *)&unsigned char buf[18] = 2080;
      int v67 = v35;
      __int16 v68 = 2080;
      CFURLRef v69 = v36;
      _os_log_impl(&dword_21B9BB000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d remote requires %s, local has %s", buf, 0x26u);
    }
    goto LABEL_38;
  }
LABEL_41:
  if ((_BYTE)v73 && *(void *)&v72[4]) {
    atomic_fetch_add(*(atomic_uint *volatile *)&v72[4], 0xFFFFFFFF);
  }
  if (!v56)
  {
    CFRelease(cf);
    return 4294967246;
  }
  CFRelease(cf);
  if (!MachPort)
  {
    *a4 = *((_DWORD *)this + 15);
    unsigned int v37 = *((_DWORD *)this + 16);
    *a5 = v37;
    if (*a4)
    {
      unsigned int v38 = (*a7)++;
      float v39 = &a6[v38];
      long long v40 = *(_OWORD *)((char *)this + 264);
      long long v41 = *(_OWORD *)((char *)this + 280);
      *(void *)&v39->mBitsPerChannel = *((void *)this + 37);
      *(_OWORD *)&v39->mSampleRate = v40;
      *(_OWORD *)&v39->mBytesPerPacket = v41;
      unsigned int v37 = *a5;
    }
    if (v37)
    {
      unsigned int v42 = (*a7)++;
      uint64_t v43 = &a6[v42];
      long long v44 = *((_OWORD *)this + 19);
      long long v45 = *((_OWORD *)this + 20);
      *(void *)&v43->mBitsPerChannel = *((void *)this + 42);
      *(_OWORD *)&v43->mSampleRate = v44;
      *(_OWORD *)&v43->mBytesPerPacket = v45;
    }
    int v46 = *a3;
    uint64_t v47 = *a7;
    uint64_t MachPort = CADeprecated::XMachReceivePort::CreateMachPort((AUWrappedOutputUnit *)((char *)this + 40));
    if (MachPort) {
      goto LABEL_90;
    }
    *(void *)buf = &unk_26CBB18C8;
    *(void *)&buf[8] = 0;
    *(_DWORD *)&buf[16] = 0;
    LOBYTE(v67) = 1;
    mach_port_t v48 = AURegistrationServerConnection_ServerPort();
    *(void *)BOOL v72 = a6;
    int v71 = 1;
    *(_DWORD *)&v72[8] = 16777472;
    *(void *)uint64_t v74 = *MEMORY[0x263EF80C8];
    int v73 = 40 * v47;
    *(_DWORD *)&v74[8] = v47;
    int v75 = v46;
    unsigned int v76 = this;
    mach_port_t reply_port = mig_get_reply_port();
    *(void *)&msg.msgh_bits = 2147489043;
    msg.msgh_remote_port = v48;
    msg.msgh_local_port = reply_port;
    *(void *)&msg.msgh_voucher_port = 0x15F9400000000;
    if (MEMORY[0x263EF8B00])
    {
      voucher_mach_msg_set(&msg);
      mach_port_t reply_port = msg.msgh_local_port;
    }
    uint64_t v50 = mach_msg(&msg, 275, 0x44u, 0x30u, reply_port, *MEMORY[0x263EFC0D0], 0);
    uint64_t MachPort = v50;
    if ((v50 - 268435458) <= 0xE && ((1 << (v50 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg.msgh_local_port);
    }
    else
    {
      if (!v50)
      {
        if (msg.msgh_id == 71)
        {
          uint64_t v51 = 4294966988;
        }
        else if (msg.msgh_id == 90104)
        {
          if ((msg.msgh_bits & 0x80000000) == 0)
          {
            if (msg.msgh_size == 36)
            {
              uint64_t v51 = 4294966996;
              if (*(_DWORD *)&v72[4])
              {
                if (msg.msgh_remote_port) {
                  uint64_t v51 = 4294966996;
                }
                else {
                  uint64_t v51 = *(unsigned int *)&v72[4];
                }
              }
            }
            else
            {
              uint64_t v51 = 4294966996;
            }
            goto LABEL_88;
          }
          uint64_t v51 = 4294966996;
          if (v71 == 1
            && msg.msgh_size == 40
            && !msg.msgh_remote_port
            && *(unsigned __int16 *)&v72[10] << 16 == 1114112)
          {
            *(_DWORD *)&buf[16] = *(_DWORD *)v72;
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v51 = 4294966995;
        }
LABEL_88:
        mach_msg_destroy(&msg);
        uint64_t MachPort = v51;
        goto LABEL_89;
      }
      mig_dealloc_reply_port(msg.msgh_local_port);
    }
    uint64_t v51 = 268435460;
    if (MachPort == 268435460)
    {
      if ((msg.msgh_bits & 0x1F00) == 0x1100) {
        mach_port_deallocate(*MEMORY[0x263EF8960], msg.msgh_local_port);
      }
      goto LABEL_88;
    }
    if (MachPort)
    {
LABEL_89:
      CADeprecated::XMachReceivePort::SetMachPort((AUWrappedOutputUnit *)((char *)this + 40));
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)buf);
      goto LABEL_90;
    }
LABEL_71:
    uint64_t MachPort = IPCAUSharedMemoryBase::InitClient((uint64_t)this + 72, (long long *)a6, v47, v46, (uint64_t)buf);
    if (!MachPort)
    {
      *((unsigned char *)this + 56) = 0;
      operator new();
    }
    CADeprecated::XMachReceivePort::SetMachPort((AUWrappedOutputUnit *)((char *)this + 40));
    if (kLocalInterAppAudioScope)
    {
      double v52 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(void *)kLocalInterAppAudioScope)
      {
LABEL_81:
        SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)buf);
LABEL_90:
        AURemoteIO::IPC_Uninitialize((AURemoteIO *)*((unsigned int *)this + 64));
        return MachPort;
      }
    }
    else
    {
      double v52 = &_os_log_internal;
    }
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      msg.msgh_bits = 136315394;
      *(void *)&msg.msgh_size = "IPCAUServer.cpp";
      LOWORD(msg.msgh_local_port) = 1024;
      *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 462;
      _os_log_impl(&dword_21B9BB000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't connect to shared buffer", (uint8_t *)&msg, 0x12u);
    }
    goto LABEL_81;
  }
  return MachPort;
}

void ___ZN19AUWrappedOutputUnit12AUInitializeEjRjS0_S0_P27AudioStreamBasicDescriptionS0_RN19SharableMemoryBlock15MachServerTokenES0__block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  int v4 = AURegistrationServerConnection_ServerPort();
  IPCAURegClient_SetProcessWakeState(v4, v3[6], 0, &v8);
  mach_port_t v5 = v3[3];
  int v6 = v3[7];
  uint64_t v10 = *MEMORY[0x263EF80C8];
  int v11 = v6;
  int v12 = a2;
  *(void *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 90102;
  msg.msgh_remote_port = v5;
  msg.msgh_local_port = 0;
  if (MEMORY[0x263EF8B00]) {
    voucher_mach_msg_set(&msg);
  }
  if (mach_msg(&msg, 17, 0x28u, 0, 0, *MEMORY[0x263EFC0D0], 0) == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x263EF8960], msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
  int v7 = AURegistrationServerConnection_ServerPort();
  IPCAURegClient_SetProcessWakeState(v7, v3[6], 1, &v8);
}

uint64_t AUServerInstanceBase::IOThread::Entry(AUServerInstanceBase::IOThread *this, void *a2)
{
  mach_msg_return_t v6;
  mach_msg_return_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  mach_msg_return_t v24;
  uint8_t buf[4];
  const char *v26;
  long long v27;
  unsigned char v28[72];
  char v29;
  uint64_t v30;

  long long v30 = *MEMORY[0x263EF8340];
  v28[0] = 0;
  int v29 = 0;
  atomic_store((unint64_t)v28, (unint64_t *)(*((void *)this + 16) + 224));
  if (!kLocalInterAppAudioScope)
  {
    uint64_t v3 = &_os_log_internal;
LABEL_5:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *((void *)this + 16);
      *(_DWORD *)buf = 136315650;
      uint64_t v26 = "IPCAUServer.cpp";
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = 505;
      WORD3(v27) = 2048;
      *((void *)&v27 + 1) = v4;
      _os_log_impl(&dword_21B9BB000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUServerInstanceBase@%p: IOThread starting", buf, 0x1Cu);
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(void *)kLocalInterAppAudioScope) {
    goto LABEL_5;
  }
LABEL_7:
  mach_port_name_t explicit = atomic_load_explicit((atomic_uint *volatile)(*((void *)this + 16) + 40), memory_order_acquire);
  while (1)
  {
    if (*(unsigned char *)(*((void *)this + 16) + 56)) {
      goto LABEL_13;
    }
    *(_DWORD *)buf = 0;
    HIDWORD(v26) = 0;
    LODWORD(v27) = explicit;
    *(void *)((char *)&v27 + 4) = 0;
    int v6 = mach_msg((mach_msg_header_t *)buf, 117440514, 0, 0x154u, explicit, 0, 0);
    int v7 = v6;
    if (v6) {
      break;
    }
    MSHMIGDispatchMessage();
  }
  if (v6 == 268451846 || (int v8 = *((void *)this + 16), *(unsigned char *)(v8 + 56)))
  {
LABEL_13:
    if (kLocalInterAppAudioScope)
    {
      long long v9 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(void *)kLocalInterAppAudioScope) {
        goto LABEL_20;
      }
    }
    else
    {
      long long v9 = &_os_log_internal;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *((void *)this + 16);
      CFUUIDRef v17 = 136315650;
      CFUUIDRef v18 = "IPCAUServer.cpp";
      CFStringRef v19 = 1024;
      CFStringRef v20 = 530;
      CFStringRef v21 = 2048;
      uint64_t v22 = v10;
      int v11 = "%25s:%-5d AUServerInstanceBase@%p: IOThread exiting";
      int v12 = v9;
      long long v13 = OS_LOG_TYPE_DEBUG;
      long long v14 = 28;
LABEL_19:
      _os_log_impl(&dword_21B9BB000, v12, v13, v11, (uint8_t *)&v17, v14);
    }
  }
  else
  {
    if (kLocalInterAppAudioScope)
    {
      uint64_t v16 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(void *)kLocalInterAppAudioScope) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v16 = &_os_log_internal;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      CFUUIDRef v17 = 136315906;
      CFUUIDRef v18 = "IPCAUServer.cpp";
      CFStringRef v19 = 1024;
      CFStringRef v20 = 528;
      CFStringRef v21 = 2048;
      uint64_t v22 = v8;
      int v23 = 1024;
      uint64_t v24 = v7;
      int v11 = "%25s:%-5d AUServerInstanceBase@%p: IOThread exiting with error 0x%x";
      int v12 = v16;
      long long v13 = OS_LOG_TYPE_ERROR;
      long long v14 = 34;
      goto LABEL_19;
    }
  }
LABEL_20:
  atomic_store(0, (unint64_t *)(*((void *)this + 16) + 224));
  if (v29) {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v28);
  }
  return 0;
}

void sub_21BA54F5C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 64)) {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

void AUServerInstanceBase::IOThread::~IOThread(AUServerInstanceBase::IOThread *this)
{
  CADeprecated::CAPThread::~CAPThread(this);

  JUMPOUT(0x21D497F90);
}

BOOL SharableMemoryBlock::MachClientToken::IsValid(SharableMemoryBlock::MachClientToken *this)
{
  return *((_DWORD *)this + 4) != 0;
}

uint64_t AUWrappedOutputUnit::GetAudioUnit(AUWrappedOutputUnit *this)
{
  return *((void *)this + 29);
}

uint64_t TOpaqueObject<AUServerInstanceBase,unsigned int,CADeprecated::XMachServer::Client>::isa(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x263F8B538];
  return a2 == &TOpaqueRTTI<AUServerInstanceBase>::sRTTI || v3;
}

void AUWrappedOutputUnit::~AUWrappedOutputUnit(atomic_uint *this)
{
  AUWrappedOutputUnit::~AUWrappedOutputUnit(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBAD848;
  AUWrappedOutputUnit::AUUninitialize(this);

  AUServerInstanceBase::~AUServerInstanceBase((AUServerInstanceBase *)this);
}

void AUServerInstanceBase::~AUServerInstanceBase(AUServerInstanceBase *this)
{
  *(void *)this = &unk_26CBAD950;
  --*(_DWORD *)(*((void *)this + 2) + 112);
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  *((void *)this + 9) = &unk_26CBADDE0;
  mach_port_t v5 = (void **)((char *)this + 136);
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v5);
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this + 9);
  MEMORY[0x21D497250]((char *)this + 40);
  *(void *)this = &unk_26CBB17E0;
  MEMORY[0x21D4972E0]((char *)this + 12);

  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    mach_port_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v4);
      }
      while ((void *)v4 != v2);
      mach_port_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void SharableMemoryBlock::~SharableMemoryBlock(xpc_object_t *this)
{
  *this = (xpc_object_t)(MEMORY[0x263F8B560] + 16);
  (*(void (**)(void))(MEMORY[0x263F8B560] + 32))();
  xpc_release(this[6]);
  this[6] = 0;
}

BOOL TOpaqueObject<CADeprecated::XMachServer::Client,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x263F8B538];
}

void CADeprecated::XMachServer::Client::~Client(CADeprecated::XMachServer::Client *this)
{
  *(void *)this = &unk_26CBB17E0;
  MEMORY[0x21D4972E0]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBB17E0;
  MEMORY[0x21D4972E0]((char *)this + 12);

  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void IPCAUSharedMemoryBase::~IPCAUSharedMemoryBase(xpc_object_t *this)
{
  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);

  SharableMemoryBlock::~SharableMemoryBlock(this);
}

void PublishedAU_Host::~PublishedAU_Host(CFTypeRef *this)
{
  PublishedAU::~PublishedAU(this);

  JUMPOUT(0x21D497F90);
}

void PublishedAU::~PublishedAU(CFTypeRef *this)
{
  *this = &unk_26CBA8120;
  CFRelease(this[6]);
  CFRelease(this[2]);
}

{
  uint64_t vars8;

  PublishedAU::~PublishedAU(this);

  JUMPOUT(0x21D497F90);
}

void IPCAUSharedMemory::~IPCAUSharedMemory(xpc_object_t *this)
{
  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);

  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);

  JUMPOUT(0x21D497F90);
}

void TOpaqueObject<AUServerInstanceBase,unsigned int,CADeprecated::XMachServer::Client>::~TOpaqueObject(BaseOpaqueObject *a1)
{
  *(void *)a1 = &unk_26CBB17E0;
  MEMORY[0x21D4972E0]((char *)a1 + 12);

  BaseOpaqueObject::~BaseOpaqueObject(a1);
}

uint64_t IPCAUSharedMemory::RecomputeHeaderSize(uint64_t this, int a2)
{
  int v2 = 4 * a2 + 2275;
  if (!a2) {
    int v2 = 2279;
  }
  *(_DWORD *)(this + 56) = (v2 + *(_DWORD *)(this + 96)) & 0xFFFFFFF0;
  return this;
}

uint64_t IPCAUServer::FindAU(IPCAUServer *this, const audit_token_t *a2)
{
  int v2 = (int)a2;
  uint64_t v21 = *MEMORY[0x263EF8340];
  pid_t pidp = 0;
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)atoken.val = *(_OWORD *)this;
  *(_OWORD *)&atoken.val[4] = v3;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  uint64_t v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == pidp) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (kLocalInterAppAudioScope)
  {
    if (*(unsigned char *)(kLocalInterAppAudioScope + 8))
    {
      int v6 = *(NSObject **)kLocalInterAppAudioScope;
      if (*(void *)kLocalInterAppAudioScope)
      {
        if (os_log_type_enabled(*(os_log_t *)kLocalInterAppAudioScope, OS_LOG_TYPE_DEBUG))
        {
          if (v5) {
            uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
          }
          else {
            uint64_t v7 = 0;
          }
          *(_DWORD *)buf = 136316162;
          int v12 = "IPCAUServer.cpp";
          __int16 v13 = 1024;
          int v14 = 399;
          __int16 v15 = 1024;
          int v16 = v2;
          __int16 v17 = 2048;
          uint64_t v18 = v5;
          __int16 v19 = 2048;
          uint64_t v20 = v7;
          _os_log_impl(&dword_21B9BB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::FindAU: 0x%x -> ausi %p, AU %p", buf, 0x2Cu);
        }
      }
    }
  }
  return v5;
}

uint64_t CADeprecated::TSingleton<IPCAUServer>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<IPCAUServer>::sOnce, memory_order_acquire) != -1)
  {
    long long v3 = &v1;
    int v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<IPCAUServer>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUServer>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAUServer>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUServer>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_21BA55B14(_Unwind_Exception *a1)
{
  uint64_t v7 = (void *)*((void *)v1 + 36);
  if (v7)
  {
    *((void *)v1 + 37) = v7;
    operator delete(v7);
  }
  int v8 = *v5;
  if (*v5)
  {
    *((void *)v1 + 34) = v8;
    operator delete(v8);
  }
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(v4);
  if (*v3) {
    dispatch_release(*v3);
  }
  *(void *)char v1 = MEMORY[0x263F8B568] + 16;
  *((void *)v1 + 10) = MEMORY[0x263F8B568] + 88;
  long long v9 = (void *)*((void *)v1 + 25);
  if (v9)
  {
    *((void *)v1 + 26) = v9;
    operator delete(v9);
  }
  MEMORY[0x21D497390]((char *)v1 + 112);
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(v1);
  MEMORY[0x21D497F90](v1, 0x10F1C40A72BA4E9);
  _Unwind_Resume(a1);
}

uint64_t AudioOutputUnitPublish_Impl(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = 4294967246;
  if (a2 && a1 && a4)
  {
    if (_CFMZEnabled())
    {
      if (kLocalInterAppAudioScope)
      {
        uint64_t v4 = *(void *)kLocalInterAppAudioScope;
        if (!*(void *)kLocalInterAppAudioScope) {
          return v4;
        }
      }
      else
      {
        uint64_t v4 = &_os_log_internal;
      }
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        int v14 = "IPCAUServer.cpp";
        __int16 v15 = 1024;
        int v16 = 982;
        _os_log_impl(&dword_21B9BB000, (os_log_t)v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioOutputUnitPublish: returning noErr without publishing.", buf, 0x12u);
      }
      return 0;
    }
    else
    {
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 0x40000000;
      v11[2] = __AudioOutputUnitPublish_Impl_block_invoke;
      v11[3] = &__block_descriptor_tmp_9;
      v11[4] = a1;
      void v11[5] = a2;
      int v12 = a3;
      v11[6] = a4;
      uint64_t v4 = IPCAUServer::PerformBlockOnServerQueue((uint64_t)v11);
      if (v4)
      {
        if (kLocalInterAppAudioScope)
        {
          long long v9 = *(NSObject **)kLocalInterAppAudioScope;
          if (!*(void *)kLocalInterAppAudioScope) {
            return v4;
          }
        }
        else
        {
          long long v9 = &_os_log_internal;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          int v14 = "IPCAUServer.cpp";
          __int16 v15 = 1024;
          int v16 = 990;
          __int16 v17 = 1024;
          int v18 = v4;
          _os_log_impl(&dword_21B9BB000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioOutputUnitPublish: error %d", buf, 0x18u);
        }
      }
    }
  }
  return v4;
}

void sub_21BA56438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x21D497450](va);
  _Unwind_Resume(a1);
}

uint64_t IPCAUServer::PerformBlockOnServerQueue(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  int v2 = *(NSObject **)(CADeprecated::TSingleton<IPCAUServer>::instance() + 224);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11IPCAUServer25PerformBlockOnServerQueueEU13block_pointerFivE_block_invoke;
  v5[3] = &unk_2643B94C0;
  v5[4] = a1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_21BA5652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11IPCAUServer25PerformBlockOnServerQueueEU13block_pointerFivE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t IPCAUServer_Open(_OWORD *a1, int a2, int a3, const AudioComponentDescription *a4, const void *a5, int a6, int a7, int a8, _DWORD *a9)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v34 = a5;
  pid_t pidp = 0;
  int v33 = a6;
  long long v13 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v13;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  v25[0] = &unk_26CBADE10;
  v25[1] = 0;
  BOOL v26 = a5 != 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = &v34;
  long long v30 = &v33;
  CFTypeRef cf = 0;
  CADeserializer::CADeserializer((CADeserializer *)v23, a5);
  operator>>();
  uint64_t v14 = CADeprecated::TSingleton<IPCAUServer>::instance();
  pid_t v15 = pidp;
  if (kLocalInterAppAudioScope)
  {
    int v16 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_8;
    }
  }
  else
  {
    int v16 = &_os_log_internal;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    MEMORY[0x21D4971E0](&outData, a4);
    *(_DWORD *)buf = 136316418;
    unsigned int v37 = "IPCAUServer.cpp";
    __int16 v38 = 1024;
    int v39 = 325;
    __int16 v40 = 2080;
    long long v41 = outData;
    __int16 v42 = 1024;
    pid_t v43 = v15;
    __int16 v44 = 1024;
    int v45 = a2;
    v46[0] = 1024;
    *(_DWORD *)&v46[1] = a3;
    _os_log_impl(&dword_21B9BB000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::AUOpen: desc %s from pid %d, port 0x%x, clientRef 0x%x", buf, 0x2Eu);
    if (outData) {
      free(outData);
    }
  }
LABEL_8:
  *a9 = 0;
  int v18 = *(uint64_t **)(v14 + 240);
  __int16 v17 = *(uint64_t **)(v14 + 248);
  if (v18 == v17) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v19 = *v18;
    if (CAComponentDescription::Matches((CAComponentDescription *)(*v18 + 24), a4)) {
      break;
    }
    if (++v18 == v17) {
      goto LABEL_11;
    }
  }
  uint64_t v20 = 4294900546;
  if (*(int *)(v19 + 112) <= 0)
  {
    if (*(void *)(v19 + 72))
    {
      uint64_t v20 = 4294967292;
      goto LABEL_17;
    }
    if (*(void *)(v19 + 104)) {
      operator new();
    }
LABEL_11:
    uint64_t v20 = 4294967246;
  }
LABEL_17:
  if (kLocalInterAppAudioScope)
  {
    uint64_t v21 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v21 = &_os_log_internal;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v37 = "IPCAUServer.cpp";
    __int16 v38 = 1024;
    int v39 = 1031;
    __int16 v40 = 1024;
    LODWORD(v41) = v20;
    _os_log_impl(&dword_21B9BB000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IPCAUServer_Open: error %d", buf, 0x18u);
  }
LABEL_23:
  BOOL v26 = 0;
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x21D497570](v23);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v25);
  return v20;
}

void sub_21BA56D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  int v23 = (void *)*((void *)v18 + 25);
  if (v23)
  {
    *((void *)v18 + 26) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v19;
  if (*v19)
  {
    *((void *)v18 + 23) = v24;
    operator delete(v24);
  }
  IPCAUSharedMemory::~IPCAUSharedMemory(v21);
  MEMORY[0x21D497250](v20);
  TOpaqueObject<AUServerInstanceBase,unsigned int,CADeprecated::XMachServer::Client>::~TOpaqueObject(v18);
  MEMORY[0x21D497F90](v18, 0x10E1C407F57F55ELL);
  MEMORY[0x21D497570](&a12);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a18);
  _Unwind_Resume(a1);
}

void SharableMemoryBlock::MachServerToken::~MachServerToken(SharableMemoryBlock::MachServerToken *this)
{
}

uint64_t MIGVariableLengthRefs::Write(MIGVariableLengthRefs *this, const void *a2, vm_size_t size)
{
  uint64_t v6 = (_DWORD *)*((void *)this + 4);
  if (v6 && *((void *)this + 1) >= size)
  {
    *uint64_t v6 = size;
    goto LABEL_8;
  }
  uint64_t v7 = (vm_address_t *)*((void *)this + 5);
  vm_address_t address = 0;
  uint64_t result = vm_allocate(*MEMORY[0x263EF8960], &address, size, 1);
  vm_address_t v9 = address;
  if (result) {
    vm_address_t v9 = 0;
  }
  *uint64_t v7 = v9;
  if (!result)
  {
    **((_DWORD **)this + 6) = size;
    *((unsigned char *)this + 16) = 1;
LABEL_8:
    uint64_t v10 = (void **)*((void *)this + 5);
    if (!*v10) {
      uint64_t v10 = (void **)((char *)this + 24);
    }
    memcpy(*v10, a2, size);
    return 0;
  }
  return result;
}

uint64_t AudioUnitPropertyMarshaller::InvalidPropertySizeError(AudioUnitPropertyMarshaller *this)
{
  return 4294956445;
}

uint64_t AudioUnitPropertyMarshaller::UnknownPropertyError(AudioUnitPropertyMarshaller *this)
{
  return 4294956417;
}

uint64_t AudioUnitPropertyMarshaller::GetMarshaller(AudioUnitPropertyMarshaller *this, uint64_t a2)
{
  return MEMORY[0x270EE24D0](a2);
}

void AudioUnitPropertyMarshaller::~AudioUnitPropertyMarshaller(AudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);

  JUMPOUT(0x21D497F90);
}

uint64_t IPCAUServer_SetProperty(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, const void *a8, int a9)
{
  int v20 = a7;
  uint64_t v19 = a8;
  if (IPCAUServer::FindAU(a1, a2))
  {
    v13[6] = &unk_26CBADE10;
    v13[7] = 256;
    BOOL v14 = a8 != 0;
    pid_t v15 = a6;
    int v16 = &v20;
    __int16 v17 = &v19;
    int v18 = &a9;
    if (a8) {
      int v11 = a8;
    }
    else {
      int v11 = a6;
    }
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v13, v11);
  }
  return 4294967246;
}

void sub_21BA570C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

uint64_t IPCAUServer_Render(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _opaque_pthread_t *a7, uint64_t a8)
{
  uint64_t AU = IPCAUServer::FindAU(a1, a2);
  if (!AU) {
    return 4294967246;
  }
  uint64_t v15 = AU;
  if ((a7 - 1) <= 0x5E)
  {
    int v16 = (CADeprecated::CAPThread *)pthread_self();
    CADeprecated::CAPThread::SetPriority(v16, a7);
  }
  __int16 v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 128);

  return v17(v15, a8, a3, a4, a5, a6);
}

uint64_t IPCAUServer_SysEx(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a3;
  int v15 = a4;
  uint64_t AU = IPCAUServer::FindAU(a1, a2);
  if (!AU) {
    return 4294967246;
  }
  v9[0] = &unk_26CBADE10;
  v9[1] = 0;
  BOOL v10 = a3 != 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  long long v13 = &v16;
  BOOL v14 = &v15;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)AU + 104))(AU, a3, a4);
  if (v7) {
    BOOL v10 = 0;
  }
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v9);
  return v7;
}

void sub_21BA57284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

void FileSample::GetMoreFrames(FileSample *this, SInt64 a2, uint64_t a3, void *a4)
{
}

void FileSample::ReadFromFile(FileSample *this, SInt64 a2, unint64_t a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(FileSample *))(*(void *)this + 24))(this))
  {
    unsigned int v8 = *((_DWORD *)this + 42);
    if (!v8)
    {
      UInt32 v9 = *((_DWORD *)this + 43);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mNumberChannels = v9;
LABEL_11:
      ioData.mBuffers[0].mDataByteSize = v9 * a3 * v8;
      ioData.mBuffers[0].mData = a4;
      UInt32 ioNumberFrames = a3;
      uint64_t v11 = *((void *)this + 26);
      BOOL v14 = (char *)this + 208;
      char v15 = (*(uint64_t (**)(char *))(v11 + 16))((char *)this + 208);
      ExtAudioFileSeek(*((ExtAudioFileRef *)this + 25), a2);
      ExtAudioFileRead(*((ExtAudioFileRef *)this + 25), &ioNumberFrames, &ioData);
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v14);
      return;
    }
    UInt32 v9 = *((_DWORD *)this + 43);
    if ((*((unsigned char *)this + 156) & 0x20) != 0)
    {
      if (0x7FFFFFFF / (v9 * v8) > a3)
      {
        unsigned int v10 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      if (!v9)
      {
        unsigned int v8 = 0;
        ioData.mNumberBuffers = 1;
        ioData.mBuffers[0].mNumberChannels = 0;
        goto LABEL_11;
      }
      if (0x7FFFFFFF / (v8 / v9 * v9) > a3)
      {
        unsigned int v10 = *((_DWORD *)this + 43);
LABEL_10:
        ioData.mNumberBuffers = 1;
        ioData.mBuffers[0].mNumberChannels = v9;
        v8 /= v10;
        goto LABEL_11;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ioData.mNumberBuffers = 136315394;
      *(void *)(&ioData.mNumberBuffers + 1) = "FileSample.cpp";
      LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 333;
      uint64_t v12 = &_os_log_internal;
      long long v13 = "%25s:%-5d  ASSERTION FAILED: attempt to read more than INT_MAX bytes";
      goto LABEL_17;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ioData.mNumberBuffers = 136315394;
    *(void *)(&ioData.mNumberBuffers + 1) = "FileSample.cpp";
    LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
    *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 332;
    uint64_t v12 = &_os_log_internal;
    long long v13 = "%25s:%-5d  ASSERTION FAILED: attempt to read from unloaded FileSample";
LABEL_17:
    _os_log_impl(&dword_21B9BB000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&ioData, 0x12u);
  }
  __break(1u);
}

void sub_21BA574F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

void FileSample::Unload(OpaqueExtAudioFile **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315650;
    uint64_t v6 = "FileSample.cpp";
    __int16 v7 = 1024;
    int v8 = 354;
    __int16 v9 = 2048;
    unsigned int v10 = (FileSample *)this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::Unload(this=%p):  Freeing stream cache", (uint8_t *)&v5, 0x1Cu);
  }
  int v2 = this[17];
  if (v2) {
    MEMORY[0x21D497F60](v2, 0x1000C8077774924);
  }
  this[17] = 0;
  uint64_t v3 = this[25];
  if (v3)
  {
    ExtAudioFileDispose(v3);
    this[25] = 0;
  }
  uint64_t v4 = this[4];
  if (v4) {
    CFRelease(v4);
  }
  this[4] = 0;
}

void FileSample::SetFrameOffsetHint(FileSample *this, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(FileSample *))(*(void *)this + 24))(this)
    && *((unsigned char *)this + 196)
    && *((void *)this + 14) != a2)
  {
    unint64_t v4 = *((void *)this + 23);
    unint64_t v5 = v4 - 1;
    BOOL v6 = v4 > a2;
    unint64_t v7 = v4 - a2;
    if (v6 && *((void *)this + 15) < v5)
    {
      *((void *)this + 14) = a2;
      if (*((void *)this + 16) >= v7) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = *((void *)this + 16);
      }
      FileSample::ReadFromFile(this, a2, v9, *((void **)this + 17));
      unint64_t v11 = v10;
      if (v10 < v9 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 136315394;
        long long v13 = "FileSample.cpp";
        __int16 v14 = 1024;
        int v15 = 311;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::FillCache:  Incomplete read from sample file", (uint8_t *)&v12, 0x12u);
      }
      *((void *)this + 15) = v11 + *((void *)this + 14) - 1;
    }
  }
}

void sub_21BA5775C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21BA5771CLL);
  }
  _Unwind_Resume(a1);
}

void FileSample::~FileSample(OpaqueExtAudioFile **this)
{
  FileSample::~FileSample(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *this = (OpaqueExtAudioFile *)&unk_26CBA7830;
  FileSample::Unload(this);
  MEMORY[0x21D497390](this + 26);

  Sample::~Sample((Sample *)this);
}

BOOL FileSample::LoadFromURL(FileSample *this, const __CFURL *a2, int a3)
{
  uint64_t v166 = *MEMORY[0x263EF8340];
  UInt32 ioPropertyDataSize = 0;
  AudioFileID outPropertyData = 0;
  BOOL v6 = (ExtAudioFileRef *)((char *)this + 200);
  (*(void (**)(FileSample *))(*(void *)this + 40))(this);
  uint64_t v142 = v6;
  OSStatus v7 = ExtAudioFileOpenURL(a2, v6);
  if (v7)
  {
    unsigned int v128 = v7;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v128);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 52;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "FileSample::LoadFromURL: ExtAudioFileOpenURL";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FileSample::LoadFromURL: ExtAudioFileOpenURL", v128);
  }
  Sample::SetURL(this, a2);
  UInt32 ioPropertyDataSize = 8;
  ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x6166696Cu, &ioPropertyDataSize, &outPropertyData);
  UInt32 ioDataSize = 4;
  int v8 = (int *)((char *)this + 192);
  if (AudioFileGetProperty(outPropertyData, 0x61746374u, &ioDataSize, (char *)this + 192)) {
    *int v8 = 1;
  }
  if (!AudioFileGetPropertyInfo(outPropertyData, 0x696E666Fu, &ioPropertyDataSize, 0))
  {
    *(void *)buf = 0;
    if (!AudioFileGetProperty(outPropertyData, 0x696E666Fu, &ioPropertyDataSize, buf))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)buf, @"title");
      if (Value)
      {
        CACFString::operator=((uint64_t)this + 40, Value);
      }
      else
      {
        CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
        CFStringRef v11 = CFURLCreateStringByReplacingPercentEscapes(0, PathComponent, &stru_26CBB4BA8);
        CACFString::operator=((uint64_t)this + 40, v11);
        CFRelease(PathComponent);
        CFRelease(v11);
      }
      int v12 = CFDictionaryGetValue(*(CFDictionaryRef *)buf, @"copyright");
      CACFString::operator=((uint64_t)this + 56, v12);
      CFRelease(*(CFTypeRef *)buf);
    }
  }
  int v13 = *v8;
  if (*v8 >= 2)
  {
    LODWORD(outUserDataSize.__loc_.__locale_) = 0;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      __int16 v161 = 1024;
      *(_DWORD *)v162 = v13;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::LoadFromURL:  File has %d tracks -- using first for now", buf, 0x18u);
    }
    UInt32 ioPropertyDataSize = 4;
    OSStatus Property = AudioFileGetProperty(outPropertyData, 0x7561746Bu, &ioPropertyDataSize, &outUserDataSize);
    if (Property)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, Property);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 94;
        __int16 v161 = 2080;
        *(void *)v162 = outUserData;
        *(_WORD *)&v162[8] = 2080;
        *(void *)v163 = "FileSample::LoadFromURL: AudioFileSetProperty for kAudioFilePropertyUseAudioTrack failed";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      long long v137 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v137, "FileSample::LoadFromURL: AudioFileSetProperty for kAudioFilePropertyUseAudioTrack failed", Property);
    }
  }
  UInt32 ioPropertyDataSize = 40;
  OSStatus v15 = ExtAudioFileGetProperty(*v142, 0x66666D74u, &ioPropertyDataSize, v150);
  if (v15)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v15);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 100;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v130 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v130, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v15);
  }
  int v16 = v151;
  if (v151 >= 2) {
    int v16 = 2;
  }
  inPropertyData[0] = v150[0];
  inPropertyData[1] = 0x96C70636DLL;
  int v145 = 4 * v16;
  int v146 = 1;
  int v147 = 4 * v16;
  int v148 = v16;
  int v149 = 32;
  OSStatus v17 = ExtAudioFileSetProperty(*v142, 0x63666D74u, 0x28u, inPropertyData);
  if (v17)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v17);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 108;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "FileSample::LoadFromURL: ExtAudioFileSetProperty failed";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v131 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v131, "FileSample::LoadFromURL: ExtAudioFileSetProperty failed", v17);
  }
  UInt32 ioPropertyDataSize = 40;
  OSStatus v18 = ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x63666D74u, &ioPropertyDataSize, (char *)this + 144);
  if (v18)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v18);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v132 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v132, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v18);
  }
  unsigned int v19 = *((_DWORD *)this + 42);
  if (!v19)
  {
LABEL_263:
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, 0xFFFFD589);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "Illegal audio format";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    char v127 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v127, "Illegal audio format", -10871);
  }
  if ((*((unsigned char *)this + 156) & 0x20) != 0)
  {
    unsigned int v20 = 1;
  }
  else
  {
    unsigned int v20 = *((_DWORD *)this + 43);
    if (!v20) {
      goto LABEL_263;
    }
  }
  if (v20 > v19 || !*((_DWORD *)this + 43)) {
    goto LABEL_263;
  }
  UInt32 ioPropertyDataSize = 8;
  OSStatus v21 = ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x2366726Du, &ioPropertyDataSize, (char *)this + 184);
  if (v21)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v21);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 119;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v133 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v133, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v21);
  }
  if (a3) {
    BOOL v22 = *((void *)this + 23) > 0x8000uLL;
  }
  else {
    BOOL v22 = 0;
  }
  *((unsigned char *)this + 196) = v22;
  int v143 = 0;
  UInt32 ioPropertyDataSize = 4;
  if (AudioFileGetProperty(outPropertyData, 0x66666D74u, &ioPropertyDataSize, &v143)) {
    goto LABEL_202;
  }
  *((unsigned char *)this + 72) = -1;
  if (v143 != 1095321155 && v143 != 1095321158)
  {
    if (v143 == 1463899717)
    {
      int v23 = outPropertyData;
      LODWORD(outUserDataSize.__loc_.__locale_) = 0;
      if (!AudioFileGetUserDataSize(outPropertyData, 0x696E7374u, 0, (UInt32 *)&outUserDataSize)
        && LODWORD(outUserDataSize.__loc_.__locale_) == 16)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 735;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: Found inst chunk", buf, 0x12u);
        }
        if (!AudioFileGetUserData(v23, 0x696E7374u, 0, (UInt32 *)&outUserDataSize, outUserData))
        {
          int v25 = outUserData[8];
          *((unsigned char *)this + 72) = outUserData[8];
          int v26 = outUserData[10];
          *((float *)this + 20) = (float)outUserData[9];
          *((float *)this + 21) = (float)v26;
          v24.i32[0] = *(_DWORD *)&outUserData[11];
          uint8x8_t v139 = v24;
          *(_DWORD *)((char *)this + 73) = *(_DWORD *)&outUserData[11];
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            unsigned __int32 v27 = vmovl_u8(v139).u32[0];
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = "FileSample.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 747;
            __int16 v161 = 1024;
            *(_DWORD *)v162 = (unsigned __int16)v27;
            *(_WORD *)&v162[4] = 1024;
            *(_DWORD *)&v162[6] = HIWORD(v27);
            *(_WORD *)v163 = 1024;
            *(_DWORD *)&v163[2] = v25;
            *(_WORD *)&v163[6] = 2048;
            *(double *)&v163[8] = (double)v26;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
          }
        }
      }
      if (!AudioFileGetUserDataSize(v23, 0x736D706Cu, 0, (UInt32 *)&outUserDataSize)
        && LODWORD(outUserDataSize.__loc_.__locale_) >= 0x2C)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 780;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: Found smpl chunk", buf, 0x12u);
        }
        if (!AudioFileGetUserData(v23, 0x736D706Cu, 0, (UInt32 *)&outUserDataSize, buf))
        {
          int v28 = *(_DWORD *)&buf[4];
          if (*(int *)&buf[4] >= SLODWORD(outUserDataSize.__loc_.__locale_))
          {
            *((unsigned char *)this + 72) = v162[0];
            *((float *)this + 20) = (float)((float)*(int *)&v162[4] * 4.6566e-10) * 100.0;
            *((_DWORD *)this + 21) = 0;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)outUserData = 136315650;
              *(void *)&outUserData[4] = "FileSample.cpp";
              *(_WORD *)&outUserData[12] = 1024;
              *(_DWORD *)&outUserData[14] = 793;
              *(_WORD *)&outUserData[18] = 1024;
              *(_DWORD *)&outUserData[20] = *(_DWORD *)&v163[6];
              _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: %d sample loop(s)", outUserData, 0x18u);
            }
            uint64_t v89 = *(unsigned int *)&v163[6];
            if (*(int *)&v163[6] >= 1)
            {
              int v90 = &v164;
              uint64_t v91 = &_os_log_internal;
              do
              {
                uint64_t v92 = *((unsigned int *)v90 - 2);
                if (v92 >= 3)
                {
                  BOOL v94 = os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT);
                  int v93 = 0;
                  if (v94)
                  {
                    *(_DWORD *)outUserData = 136315650;
                    *(void *)&outUserData[4] = "FileSample.cpp";
                    *(_WORD *)&outUserData[12] = 1024;
                    *(_DWORD *)&outUserData[14] = 809;
                    *(_WORD *)&outUserData[18] = 1024;
                    *(_DWORD *)&outUserData[20] = v92;
                    _os_log_impl(&dword_21B9BB000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FileSample::ReadWAVSampleInfo: Unsupported WAV loop type: %d\n", outUserData, 0x18u);
                    int v93 = 0;
                  }
                }
                else
                {
                  int v93 = *(_DWORD *)&aG[4 * v92];
                }
                *((_DWORD *)this + 22) = v93;
                uint64_t v96 = *((int *)v90 - 1);
                uint64_t v95 = *(int *)v90;
                *((void *)this + 12) = v96;
                *((void *)this + 13) = v95;
                if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)outUserData = 136315906;
                  *(void *)&outUserData[4] = "FileSample.cpp";
                  *(_WORD *)&outUserData[12] = 1024;
                  *(_DWORD *)&outUserData[14] = 816;
                  *(_WORD *)&outUserData[18] = 2048;
                  *(void *)&outUserData[20] = v96;
                  *(_WORD *)&outUserData[28] = 2048;
                  *(void *)&outUserData[30] = v95;
                  _os_log_impl(&dword_21B9BB000, v91, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: loop start %llu, loop end %llu", outUserData, 0x26u);
                }
                v90 += 3;
                --v89;
              }
              while (v89);
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)outUserData = 136315650;
            *(void *)&outUserData[4] = "FileSample.cpp";
            *(_WORD *)&outUserData[12] = 1024;
            *(_DWORD *)&outUserData[14] = 786;
            *(_WORD *)&outUserData[18] = 1024;
            *(_DWORD *)&outUserData[20] = v28;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo:  bad internal smpl chunk size: %d -- ignoring chunk\n", outUserData, 0x18u);
          }
        }
      }
      goto LABEL_201;
    }
    unsigned int v37 = outPropertyData;
    outDataSize[0] = 0;
    if (AudioFileGetPropertyInfo(outPropertyData, 0x72676C73u, outDataSize, 0) || !outDataSize[0])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 444;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: File has no region list", buf, 0x12u);
      }
      uint64_t v50 = 0;
    }
    else
    {
      __int16 v38 = (int *)malloc_type_malloc(outDataSize[0], 0x481F3FA8uLL);
      if (!AudioFileGetProperty(v37, 0x72676C73u, outDataSize, v38))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v40 = *v38;
          int v39 = v38[1];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 418;
          __int16 v161 = 1024;
          *(_DWORD *)v162 = v39;
          *(_WORD *)&v162[4] = 1024;
          *(_DWORD *)&v162[6] = v40;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: %d regions; SMPTE time type %d",
            buf,
            0x1Eu);
        }
        if (v38[1])
        {
          unsigned int v41 = 0;
          __int16 v42 = v38 + 2;
          pid_t v43 = &_os_log_internal;
          do
          {
            CFStringRef v44 = (const __CFString *)*((void *)v42 + 1);
            if (v44)
            {
              CFStringGetCString(v44, buf, 512, 0x8000100u);
              CFRelease(*((CFTypeRef *)v42 + 1));
              *((void *)v42 + 1) = 0;
            }
            else
            {
              buf[0] = 0;
            }
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              int v45 = *v42;
              int v46 = v42[4];
              *(_DWORD *)outUserData = 136316162;
              *(void *)&outUserData[4] = "FileSample.cpp";
              *(_WORD *)&outUserData[12] = 1024;
              *(_DWORD *)&outUserData[14] = 431;
              *(_WORD *)&outUserData[18] = 1024;
              *(_DWORD *)&outUserData[20] = v45;
              *(_WORD *)&outUserData[24] = 2080;
              *(void *)&outUserData[26] = buf;
              *(_WORD *)&outUserData[34] = 1024;
              *(_DWORD *)&outUserData[36] = v46;
              _os_log_impl(&dword_21B9BB000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: region %d, \"%s\", flags %08X\n", outUserData, 0x28u);
            }
            unint64_t v47 = v42[5];
            if (v47)
            {
              unint64_t v48 = 0;
              CFStringRef v49 = (CFTypeRef *)(v42 + 8);
              do
              {
                if (*v49)
                {
                  CFRelease(*v49);
                  *CFStringRef v49 = 0;
                  unint64_t v47 = v42[5];
                }
                ++v48;
                v49 += 5;
              }
              while (v48 < v47);
            }
            else
            {
              unint64_t v47 = 0;
            }
            v42 += 10 * v47 + 6;
            ++v41;
          }
          while (v41 < v38[1]);
        }
      }
      uint64_t v50 = v38;
    }
    if (AudioFileGetPropertyInfo(v37, 0x6D6B6C73u, outDataSize, 0) || !outDataSize[0])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 461;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: No markers", buf, 0x12u);
      }
      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v51 = (double *)malloc_type_malloc(outDataSize[0], 0xAF099459uLL);
      if (!AudioFileGetProperty(v37, 0x6D6B6C73u, outDataSize, v51)
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        int v53 = *(_DWORD *)v51;
        int v52 = *((_DWORD *)v51 + 1);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 452;
        __int16 v161 = 1024;
        *(_DWORD *)v162 = v52;
        *(_WORD *)&v162[4] = 1024;
        *(_DWORD *)&v162[6] = v53;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: %d markers; SMPTE time type %d\n",
          buf,
          0x1Eu);
      }
      if (*((_DWORD *)v51 + 1))
      {
        unint64_t v54 = 0;
        uint64_t v55 = 2;
        do
        {
          CFRelease(*(CFTypeRef *)&v51[v55]);
          v51[v55] = 0.0;
          ++v54;
          v55 += 5;
        }
        while (v54 < *((unsigned int *)v51 + 1));
      }
    }
    outDataSize[0] = 28;
    if (AudioFileGetUserData(v37, 0x696E7374u, 0, outDataSize, outUserData) || outDataSize[0] < 0x1C)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 558;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: No instrument chunk found in sample file", buf, 0x12u);
      }
      if (v51)
      {
        if (*((_DWORD *)v51 + 1) == 2)
        {
          double v74 = v51[6];
          double v75 = v51[1];
          if (v74 > v75)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "FileSample.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 561;
              _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Using marker list to set loop points", buf, 0x12u);
              double v75 = v51[1];
              double v74 = v51[6];
            }
            *((_DWORD *)this + 22) = 71;
            unint64_t v76 = *((void *)this + 23) - 1;
            if (v76 >= (unint64_t)v74) {
              unint64_t v76 = (unint64_t)v74;
            }
            *((void *)this + 12) = (unint64_t)v75;
            *((void *)this + 13) = v76;
          }
        }
      }
      goto LABEL_192;
    }
    float v56 = *(float *)outUserData;
    float v57 = COERCE_FLOAT(bswap32(*(unsigned int *)outUserData));
    int8x16_t v58 = vrev32q_s8(*(int8x16_t *)&outUserData[8]);
    *(int8x16_t *)&outUserData[8] = v58;
    *(float *)outUserData = v57;
    *(_DWORD *)&outUserData[24] = bswap32(*(unsigned int *)&outUserData[24]);
    unsigned int v59 = outUserData[4];
    *((unsigned char *)this + 73) = outUserData[4];
    unsigned int v60 = outUserData[5];
    *((unsigned char *)this + 74) = outUserData[5];
    unsigned int v61 = outUserData[6];
    *((unsigned char *)this + 75) = outUserData[6];
    unsigned int v62 = outUserData[7];
    *((unsigned char *)this + 76) = outUserData[7];
    if (v60 < v59) {
      *((unsigned char *)this + 74) = v59;
    }
    float v63 = v57;
    if (v62 < v61) {
      *((unsigned char *)this + 76) = v61;
    }
    if (v57 < 0.0 || v57 > 127.0 || v57 > 0.0 && v57 < 1.0)
    {
      *(float *)outUserData = v56;
      float v63 = v56;
    }
    if (v63 >= 0.0 && v63 <= 127.0)
    {
      *((unsigned char *)this + 72) = (int)v63;
      *((float *)this + 20) = (float)(v63 - (float)(int)v63) * 100.0;
    }
    *((float *)this + 21) = fminf(fmaxf(*(float *)v58.i32, -96.0), 12.0);
    float v140 = *(float *)v58.i32;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 484;
      __int16 v161 = 1024;
      *(_DWORD *)v162 = v59;
      *(_WORD *)&v162[4] = 1024;
      *(_DWORD *)&v162[6] = v60;
      *(_WORD *)v163 = 1024;
      *(_DWORD *)&v163[2] = v63;
      *(_WORD *)&v163[6] = 2048;
      *(double *)&v163[8] = v140;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
    }
    if (!v50)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 554;
        BOOL v72 = &_os_log_internal;
        int v73 = "%25s:%-5d FileSample::ReadCAFSampleInfo: No region list found in sample file";
        goto LABEL_190;
      }
LABEL_192:
      LODWORD(outUserDataSize.__loc_.__locale_) = 0;
      if (!AudioFileCountUserData(v37, 0x75756964u, (UInt32 *)&outUserDataSize)
        || LODWORD(outUserDataSize.__loc_.__locale_))
      {
        CFUUIDRef v98 = CFUUIDGetConstantUUIDWithBytes(0, 0x29u, 0x81u, 0x92u, 0x73u, 0xB5u, 0xBFu, 0x4Au, 0xEFu, 0xB7u, 0x8Du, 0x62u, 0xD1u, 0xEFu, 0x90u, 0xBBu, 0x2Cu);
        *(CFUUIDBytes *)outUserData = CFUUIDGetUUIDBytes(v98);
        if (LODWORD(outUserDataSize.__loc_.__locale_))
        {
          if (!AudioFileGetUserDataSize(v37, 0x75756964u, 0, outDataSize)) {
            operator new[]();
          }
        }
      }
      if (v50) {
        free(v50);
      }
      if (v51) {
        free(v51);
      }
      goto LABEL_201;
    }
    int v64 = *(_DWORD *)&outUserData[12];
    if (*(_DWORD *)&outUserData[12] && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 492;
      __int16 v161 = 1024;
      *(_DWORD *)v162 = v64;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has start region id %u", buf, 0x18u);
    }
    int v65 = *(_DWORD *)&outUserData[16];
    if (!*(_DWORD *)&outUserData[16]) {
      goto LABEL_131;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 496;
      __int16 v161 = 1024;
      *(_DWORD *)v162 = v65;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has sustain region id %u", buf, 0x18u);
      int v65 = *(_DWORD *)&outUserData[16];
    }
    int v66 = v50[1];
    if (v66)
    {
      int v67 = v50 + 2;
      while (*v67 != v65)
      {
        v67 += 10 * v67[5] + 6;
        if (!--v66) {
          goto LABEL_131;
        }
      }
      uint64_t v108 = v67[5];
      if (v108)
      {
        CFURLRef v69 = 0;
        __int16 v68 = 0;
        v109 = v67 + 13;
        do
        {
          v110 = (double *)(v109 - 7);
          int v112 = *v109;
          v109 += 10;
          int v111 = v112;
          if (v112 == 1936482919) {
            uint32_t v113 = v110;
          }
          else {
            uint32_t v113 = v68;
          }
          if (v111 == 1936483694) {
            CFURLRef v69 = v110;
          }
          else {
            __int16 v68 = v113;
          }
          --v108;
        }
        while (v108);
LABEL_133:
        int v70 = *(_DWORD *)&outUserData[20];
        if (*(_DWORD *)&outUserData[20] && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 514;
          __int16 v161 = 1024;
          *(_DWORD *)v162 = v70;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has release region id %u", buf, 0x18u);
        }
        if (v67)
        {
          int v71 = v67[4];
          if (v71)
          {
            if (v71)
            {
              if ((~v71 & 6) != 0)
              {
                if ((v71 & 2) != 0)
                {
                  int v114 = 71;
                }
                else
                {
                  if ((v71 & 4) == 0)
                  {
                    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                    {
                      CAX4CCString::CAX4CCString((CAX4CCString *)&outUserDataSize, 0xFFFFD589);
                      *(_DWORD *)buf = 136315906;
                      *(void *)&uint8_t buf[4] = "FileSample.cpp";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 536;
                      __int16 v161 = 2080;
                      *(void *)v162 = &outUserDataSize;
                      *(_WORD *)&v162[8] = 2080;
                      *(void *)v163 = "FileSample::ReadCAFSampleInfo: Unsupported loop type";
                      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                    }
                    long long v138 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                    CAXException::CAXException(v138, "FileSample::ReadCAFSampleInfo: Unsupported loop type", -10871);
                  }
                  int v114 = 72;
                }
              }
              else
              {
                int v114 = 73;
              }
              *((_DWORD *)this + 22) = v114;
              if (v68) {
                unint64_t v125 = (unint64_t)*v68;
              }
              else {
                unint64_t v125 = 0;
              }
              *((void *)this + 12) = v125;
              unint64_t v126 = *((void *)this + 23) - 1;
              if (v69 && v126 >= (unint64_t)*v69) {
                unint64_t v126 = (unint64_t)*v69;
              }
              *((void *)this + 13) = v126;
              if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_192;
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "FileSample.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 543;
              __int16 v161 = 2048;
              *(void *)v162 = v125;
              *(_WORD *)&v162[8] = 2048;
              *(void *)v163 = v126;
              BOOL v72 = &_os_log_internal;
              int v73 = "%25s:%-5d FileSample::ReadCAFSampleInfo: found loop start %llu, loop end %llu";
              uint32_t v97 = 38;
              goto LABEL_191;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "FileSample.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 546;
              BOOL v72 = &_os_log_internal;
              int v73 = "%25s:%-5d FileSample::ReadCAFSampleInfo: Region's loop not enabled";
LABEL_190:
              uint32_t v97 = 18;
LABEL_191:
              _os_log_impl(&dword_21B9BB000, v72, OS_LOG_TYPE_DEBUG, v73, buf, v97);
              goto LABEL_192;
            }
          }
          else
          {
            *((_DWORD *)this + 22) = 0;
            *((void *)this + 12) = 0;
            *((void *)this + 13) = 0;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "FileSample.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 523;
              BOOL v72 = &_os_log_internal;
              int v73 = "%25s:%-5d FileSample::ReadCAFSampleInfo: Region has no loop";
              goto LABEL_190;
            }
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 550;
          BOOL v72 = &_os_log_internal;
          int v73 = "%25s:%-5d FileSample::ReadCAFSampleInfo: No sustain region found in inst chunk";
          goto LABEL_190;
        }
        goto LABEL_192;
      }
    }
    else
    {
LABEL_131:
      int v67 = 0;
    }
    __int16 v68 = 0;
    CFURLRef v69 = 0;
    goto LABEL_133;
  }
  int v29 = outPropertyData;
  LODWORD(outUserDataSize.__loc_.__locale_) = 0;
  if (!AudioFileGetUserDataSize(outPropertyData, 0x494E5354u, 0, (UInt32 *)&outUserDataSize)
    && LODWORD(outUserDataSize.__loc_.__locale_) == 20)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 884;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Found INST chunk", buf, 0x12u);
    }
    if (!AudioFileGetUserData(v29, 0x494E5354u, 0, (UInt32 *)&outUserDataSize, outUserData))
    {
      int v77 = outUserData[0];
      *((unsigned char *)this + 72) = outUserData[0];
      v30.i8[0] = outUserData[1];
      unsigned int v78 = *(unsigned __int16 *)&outUserData[6];
      unsigned int v79 = __rev16(*(unsigned __int16 *)&outUserData[6]);
      *((float *)this + 20) = (float)v30.u32[0];
      *((float *)this + 21) = (float)v79;
      v30.i32[0] = *(_DWORD *)&outUserData[2];
      uint8x8_t v141 = v30;
      *(_DWORD *)((char *)this + 73) = *(_DWORD *)&outUserData[2];
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        unsigned __int32 v80 = vmovl_u8(v141).u32[0];
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 896;
        __int16 v161 = 1024;
        *(_DWORD *)v162 = (unsigned __int16)v80;
        *(_WORD *)&v162[4] = 1024;
        *(_DWORD *)&v162[6] = HIWORD(v80);
        *(_WORD *)v163 = 1024;
        *(_DWORD *)&v163[2] = v77;
        *(_WORD *)&v163[6] = 2048;
        *(double *)&v163[8] = (double)v78;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
      }
      int v81 = *(unsigned __int16 *)&outUserData[8];
      if (!*(_WORD *)&outUserData[8])
      {
        *((_DWORD *)this + 22) = 0;
        goto LABEL_54;
      }
      if (AudioFileGetPropertyInfo(v29, 0x6D6B6C73u, (UInt32 *)&outUserDataSize, 0)
        || !LODWORD(outUserDataSize.__loc_.__locale_))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "FileSample.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 938;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: No markers", buf, 0x12u);
        }
        goto LABEL_54;
      }
      uint64_t v82 = (int *)malloc_type_malloc(LODWORD(outUserDataSize.__loc_.__locale_), 0x9E20023AuLL);
      if (!AudioFileGetProperty(v29, 0x6D6B6C73u, (UInt32 *)&outUserDataSize, v82)
        && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        int v84 = *v82;
        int v83 = v82[1];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        __int16 v161 = 1024;
        *(_DWORD *)v162 = v83;
        *(_WORD *)&v162[4] = 1024;
        *(_DWORD *)&v162[6] = v84;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: %d markers; SMPTE time type %d\n",
          buf,
          0x1Eu);
      }
      if (!v82[1]) {
        goto LABEL_253;
      }
      unint64_t v85 = 0;
      int v86 = (CFTypeRef *)(v82 + 4);
      do
      {
        CFRelease(*v86);
        *int v86 = 0;
        v86 += 5;
        ++v85;
        unint64_t v87 = v82[1];
      }
      while (v85 < v87);
      if (v87 <= 1)
      {
LABEL_253:
        free(v82);
        goto LABEL_54;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "FileSample.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 920;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Using marker list to set loop points", buf, 0x12u);
        unint64_t v87 = v82[1];
        if (v81 == 256) {
          int v88 = 71;
        }
        else {
          int v88 = 73;
        }
        *((_DWORD *)this + 22) = v88;
        if (!v87)
        {
LABEL_251:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v123 = *((void *)this + 12);
            uint64_t v124 = *((void *)this + 13);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "FileSample.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 933;
            __int16 v161 = 2048;
            *(void *)v162 = v123;
            *(_WORD *)&v162[8] = 2048;
            *(void *)v163 = v124;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: loop start %llu, loop end %llu", buf, 0x26u);
          }
          goto LABEL_253;
        }
      }
      else
      {
        if (v81 == 256) {
          int v115 = 71;
        }
        else {
          int v115 = 73;
        }
        *((_DWORD *)this + 22) = v115;
      }
      unsigned int v116 = bswap32(*(unsigned __int16 *)&outUserData[10]) >> 16;
      unsigned int v117 = bswap32(*(unsigned __int16 *)&outUserData[12]) >> 16;
      int v118 = (double *)(v82 + 6);
      int v119 = (double *)(v82 + 6);
      do
      {
        int v121 = *(_DWORD *)v119;
        v119 += 5;
        int v120 = v121;
        if (v121 == v116)
        {
          *((void *)this + 12) = (unint64_t)*(v118 - 2);
        }
        else if (v120 == v117)
        {
          unint64_t v122 = (unint64_t)*(v118 - 2);
          if (*((void *)this + 23) - 1 < v122) {
            unint64_t v122 = *((void *)this + 23) - 1;
          }
          *((void *)this + 13) = v122;
        }
        int v118 = v119;
        --v87;
      }
      while (v87);
      goto LABEL_251;
    }
  }
LABEL_54:
  if (!AudioFileGetUserDataSize(v29, 0x62617363u, 0, (UInt32 *)&outUserDataSize)
    && LODWORD(outUserDataSize.__loc_.__locale_) >= 0x54)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 945;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Found Apple Loops Tagging chunk", buf, 0x12u);
    }
    if (!AudioFileGetUserData(v29, 0x62617363u, 0, (UInt32 *)&outUserDataSize, buf))
    {
      *(int8x8_t *)buf = vrev32_s8(*(int8x8_t *)buf);
      *(int8x8_t *)&buf[8] = vrev16_s8(*(int8x8_t *)&buf[8]);
      unsigned int v31 = bswap32(*(unsigned __int16 *)&buf[16]);
      unsigned int v32 = HIWORD(v31);
      *(_WORD *)&buf[16] = HIWORD(v31);
      unsigned __int16 v33 = *(_WORD *)&buf[8];
      if ((unsigned __int16)(*(_WORD *)&buf[8] - 48) <= 0xBu)
      {
        *((unsigned char *)this + 72) = buf[8];
        *((unsigned char *)this + 73) = v33 - 6;
        *((unsigned char *)this + 74) = v33 + 5;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)outUserData = 136316162;
          *(void *)&outUserData[4] = "FileSample.cpp";
          *(_WORD *)&outUserData[12] = 1024;
          *(_DWORD *)&outUserData[14] = 956;
          *(_WORD *)&outUserData[18] = 1024;
          *(_DWORD *)&outUserData[20] = (v33 - 6);
          *(_WORD *)&outUserData[24] = 1024;
          *(_DWORD *)&outUserData[26] = (v33 + 5);
          *(_WORD *)&outUserData[30] = 1024;
          *(_DWORD *)&outUserData[32] = v33;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Apple Loop keyrange %u-%u, unity %u", outUserData, 0x24u);
          unsigned int v32 = *(unsigned __int16 *)&buf[16];
        }
      }
      if (v32 == 1)
      {
        *((_DWORD *)this + 22) = 71;
        uint64_t v34 = *((void *)this + 23) - 1;
        *((void *)this + 12) = 0;
        *((void *)this + 13) = v34;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v35 = "off";
        int v36 = *((_DWORD *)this + 22);
        *(void *)&outUserData[4] = "FileSample.cpp";
        *(_DWORD *)outUserData = 136315650;
        if (v36 == 71) {
          unsigned int v35 = "on";
        }
        *(_WORD *)&outUserData[12] = 1024;
        *(_DWORD *)&outUserData[14] = 964;
        *(_WORD *)&outUserData[18] = 2080;
        *(void *)&outUserData[20] = v35;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Apple Loop looping is %s", outUserData, 0x1Cu);
      }
    }
  }
LABEL_201:
  if (*((unsigned __int8 *)this + 72) == 255)
  {
    CFStringRef v105 = CFURLCopyLastPathComponent(*((CFURLRef *)this + 4));
    CFStringRef v106 = v105;
    if (v105)
    {
      CStringPtr = (char *)CFStringGetCStringPtr(v105, 0x600u);
      if (CStringPtr) {
        goto LABEL_221;
      }
      if (CFStringGetCString(v106, buf, 1024, 0x600u))
      {
        CStringPtr = buf;
LABEL_221:
        std::string::basic_string[abi:ne180100]<0>(outDataSize, CStringPtr);
        CFRelease(v106);
        std::regex_traits<char>::regex_traits(&outUserDataSize);
        uint64_t v159 = 0;
        long long v158 = 0u;
        long long v157 = 0u;
        std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)outUserData = 136315394;
        *(void *)&outUserData[4] = "FileSample.cpp";
        *(_WORD *)&outUserData[12] = 1024;
        *(_DWORD *)&outUserData[14] = 236;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetUnityNoteFromFilename: could not get filename as string", outUserData, 0x12u);
      }
    }
  }
LABEL_202:
  if (!*((void *)this + 17))
  {
    *((void *)this + 14) = 0;
    unint64_t v99 = *((void *)this + 23);
    uint64_t v100 = 20000;
    if (v99 < 0x4E20) {
      uint64_t v100 = *((void *)this + 23);
    }
    if (*((unsigned char *)this + 196)) {
      uint64_t v101 = v100;
    }
    else {
      uint64_t v101 = v99 + 1;
    }
    *((void *)this + 16) = v101;
    unsigned int v102 = *((_DWORD *)this + 42);
    if (v102)
    {
      if ((*((unsigned char *)this + 156) & 0x20) != 0)
      {
        unsigned int v103 = 1;
      }
      else
      {
        unsigned int v103 = *((_DWORD *)this + 43);
        if (!v103)
        {
          unsigned int v102 = 0;
          goto LABEL_214;
        }
      }
      v102 /= v103;
    }
LABEL_214:
    uint64_t v104 = v101 * *((_DWORD *)this + 43) * v102;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 160;
      __int16 v161 = 2048;
      *(void *)v162 = this;
      *(_WORD *)&v162[8] = 2048;
      *(void *)v163 = v101;
      *(_WORD *)&v163[8] = 2048;
      *(void *)&v163[10] = v104;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::LoadFromURL(this=%p):  Creating waveform cache for %llu frames, size %llu bytes", buf, 0x30u);
    }
    operator new[]();
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "FileSample.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 144;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: stream cache should be nullptr at start of load", buf, 0x12u);
    __break(1u);
    uint64_t v135 = *((void *)this + 17);
    if (v135) {
      MEMORY[0x21D497F60](v135, 0x1000C8077774924);
    }
    *((void *)this + 17) = 0;
    ExtAudioFileDispose(*((ExtAudioFileRef *)this + 25));
    *uint64_t v142 = 0;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, 0xFFFFD589);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "FileSample.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 170;
      __int16 v161 = 2080;
      *(void *)v162 = outUserData;
      *(_WORD *)&v162[8] = 2080;
      *(void *)v163 = "File read returned zero frames";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v136 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v136, "File read returned zero frames", -10871);
  }
  __break(1u);
  return result;
}

void sub_21BA5AA30(_Unwind_Exception *a1)
{
}

void sub_21BA5AA3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  long long v157 = &a3[-a2];
  if (!*(_DWORD *)(a1 + 28))
  {
    long long v159 = 0u;
    int64x2_t v160 = 0u;
    *(_OWORD *)long long v158 = 0u;
    uint64_t v73 = *(void *)(a1 + 40);
    if (v73)
    {
      *(_DWORD *)__int16 v161 = 0;
      memset(&v161[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v163, 0, 21);
      std::deque<std::__state<char>>::push_back(v158, (uint64_t)v161);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      v144 = a4;
      if (*(void *)&v161[32]) {
        operator delete(*(void **)&v161[32]);
      }
      double v74 = v158[1];
      unint64_t v75 = v160.i64[1] + v160.i64[0] - 1;
      unint64_t v76 = v75 / 0x2A;
      uint64_t v77 = *((void *)v158[1] + v75 / 0x2A);
      unint64_t v78 = 3 * (v75 % 0x2A);
      uint64_t v79 = v77 + 32 * v78;
      *(_DWORD *)uint64_t v79 = 0;
      *(void *)(v79 + 8) = v10;
      *(void *)(v74[v76] + 32 * v78 + 16) = v10;
      *(void *)(v74[v76] + 32 * v78 + 24) = a3;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v74[v76] + 32 * v78 + 56), *(unsigned int *)(a1 + 32));
      char v152 = 0;
      unsigned int v80 = 0;
      uint64_t v81 = v160.i64[1];
      uint64_t v82 = v158[1];
      unint64_t v83 = v160.i64[1] + v160.i64[0] - 1;
      unint64_t v84 = v83 / 0x2A;
      unint64_t v85 = 3 * (v83 % 0x2A);
      *(void *)(*((void *)v158[1] + v84) + 32 * v85 + 80) = v73;
      uint64_t v86 = v82[v84] + 32 * v85;
      *(_DWORD *)(v86 + 88) = v7;
      *(unsigned char *)(v86 + 92) = a6;
      uint64_t v150 = 0;
      while (2)
      {
        if ((++v80 & 0xFFF) == 0 && (int)(v80 >> 12) >= (int)v157) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        }
        unint64_t v88 = v81 + v160.i64[0] - 1;
        uint64_t v89 = *((void *)v158[1] + v88 / 0x2A);
        unint64_t v90 = v88 % 0x2A;
        uint64_t v91 = v89 + 96 * (v88 % 0x2A);
        int v93 = (void *)(v91 + 80);
        uint64_t v92 = *(void *)(v91 + 80);
        if (v92) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v92 + 16))(v92, v89 + 96 * v90);
        }
        switch(*(_DWORD *)v91)
        {
          case 0xFFFFFC18:
            uint64_t v94 = *(void *)(v89 + 96 * v90 + 16);
            if ((v7 & 0x20) != 0 && v94 == v10) {
              goto LABEL_188;
            }
            uint64_t v95 = v94 - *(void *)(v89 + 96 * v90 + 8);
            uint64_t v96 = v150;
            if ((v152 & ((uint64_t)v150 >= v95)) == 0) {
              uint64_t v96 = (const char *)v95;
            }
            if (v96 != v157)
            {
              uint64_t v150 = v96;
              std::deque<std::__state<char>>::pop_back(v158);
              char v152 = 1;
              goto LABEL_189;
            }
            uint32_t v97 = (void **)v158[1];
            CFUUIDRef v98 = (unsigned char *)v159;
            if ((void *)v159 == v158[1])
            {
              CFUUIDRef v98 = v158[1];
            }
            else
            {
              unint64_t v99 = (char *)v158[1] + 8 * (v160.i64[0] / 0x2AuLL);
              uint64_t v100 = (void *)(*v99 + 96 * (v160.i64[0] % 0x2AuLL));
              unint64_t v101 = *((void *)v158[1] + (v160.i64[1] + v160.i64[0]) / 0x2AuLL)
                   + 96 * ((v160.i64[1] + v160.i64[0]) % 0x2AuLL);
              if (v100 != (void *)v101)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v100);
                  v100 += 12;
                  if ((void *)((char *)v100 - *v99) == (void *)4032)
                  {
                    unsigned int v102 = (void *)v99[1];
                    ++v99;
                    uint64_t v100 = v102;
                  }
                }
                while (v100 != (void *)v101);
                uint32_t v97 = (void **)v158[1];
                CFUUIDRef v98 = (unsigned char *)v159;
              }
            }
            v160.i64[1] = 0;
            unint64_t v133 = v98 - (unsigned char *)v97;
            if (v133 >= 0x11)
            {
              do
              {
                operator delete(*v97);
                uint32_t v97 = (void **)((char *)v158[1] + 8);
                v158[1] = v97;
                unint64_t v133 = v159 - (void)v97;
              }
              while ((void)v159 - (void)v97 > 0x10uLL);
            }
            if (v133 >> 3 == 1)
            {
              uint64_t v134 = 21;
            }
            else
            {
              if (v133 >> 3 != 2) {
                goto LABEL_176;
              }
              uint64_t v134 = 42;
            }
            v160.i64[0] = v134;
LABEL_176:
            char v152 = 1;
            uint64_t v150 = v157;
LABEL_189:
            uint64_t v81 = v160.i64[1];
            if (v160.i64[1]) {
              continue;
            }
            if ((v152 & 1) == 0) {
              goto LABEL_192;
            }
            uint64_t v142 = *v144;
            *(void *)uint64_t v142 = v10;
            *(void *)(v142 + 8) = &v150[v10];
            uint64_t v12 = 1;
            *(unsigned char *)(v142 + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_189;
          case 0xFFFFFC1D:
            unint64_t v103 = v160.i64[0];
            uint64_t v104 = (char *)v158[1];
            CFStringRef v105 = (char *)v159;
            if (!v160.i64[0])
            {
              unint64_t v108 = (uint64_t)(v159 - (unint64_t)v158[1]) >> 3;
              uint64_t v109 = 42 * v108 - 1;
              if ((void *)v159 == v158[1]) {
                uint64_t v109 = 0;
              }
              if ((unint64_t)(v109 - v160.i64[1]) < 0x2A)
              {
                if (v108 >= (uint64_t)(*((void *)&v159 + 1) - (unint64_t)v158[0]) >> 3)
                {
                  if (*((void **)&v159 + 1) == v158[0]) {
                    unint64_t v110 = 1;
                  }
                  else {
                    unint64_t v110 = (uint64_t)(*((void *)&v159 + 1) - (unint64_t)v158[0]) >> 2;
                  }
                  *(void *)&v161[32] = (char *)&v159 + 8;
                  *(void *)__int16 v161 = std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v110);
                  *(void *)&v161[8] = *(void *)v161;
                  *(void *)&v161[16] = *(void *)v161;
                  *(void *)&v161[24] = *(void *)v161 + 8 * v111;
                  int v156 = v7;
                  uint64_t v154 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v161, &__x);
                  int v112 = (uint64_t *)v158[1];
                  for (uint64_t i = *(char **)&v161[16]; v112 != (uint64_t *)v159; *(void *)&v161[16] += 8)
                  {
                    if (i == *(char **)&v161[24])
                    {
                      int v114 = *(char **)&v161[8];
                      int v115 = *(void **)v161;
                      if (*(void *)&v161[8] <= *(void *)v161)
                      {
                        if (i == *(char **)v161) {
                          unint64_t v122 = 1;
                        }
                        else {
                          unint64_t v122 = (uint64_t)&i[-*(void *)v161] >> 2;
                        }
                        uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v122);
                        uint64_t v126 = i - v114;
                        BOOL v125 = i == v114;
                        uint64_t i = &v123[8 * (v122 >> 2)];
                        if (!v125)
                        {
                          uint64_t i = &v123[8 * (v122 >> 2) + (v126 & 0xFFFFFFFFFFFFFFF8)];
                          uint64_t v127 = 8 * (v126 >> 3);
                          unsigned int v128 = &v123[8 * (v122 >> 2)];
                          do
                          {
                            uint64_t v129 = *(void *)v114;
                            v114 += 8;
                            *(void *)unsigned int v128 = v129;
                            v128 += 8;
                            v127 -= 8;
                          }
                          while (v127);
                        }
                        *(void *)__int16 v161 = v123;
                        *(void *)&v161[8] = &v123[8 * (v122 >> 2)];
                        *(void *)&v161[16] = i;
                        *(void *)&v161[24] = &v123[8 * v124];
                        if (v115) {
                          operator delete(v115);
                        }
                      }
                      else
                      {
                        uint64_t v116 = (uint64_t)(*(void *)&v161[8] - *(void *)v161) >> 3;
                        if (v116 >= -1) {
                          uint64_t v117 = v116 + 1;
                        }
                        else {
                          uint64_t v117 = v116 + 2;
                        }
                        uint64_t v118 = *(void *)&v161[8] - 8 * (v117 >> 1);
                        size_t v119 = (size_t)&i[-*(void *)&v161[8]];
                        if (i != *(char **)&v161[8])
                        {
                          int v120 = (void *)(*(void *)&v161[8] - 8 * (v117 >> 1));
                          memmove(v120, *(const void **)&v161[8], v119);
                          uint64_t v118 = (uint64_t)v120;
                          uint64_t i = v114;
                        }
                        int v121 = &i[-8 * (v117 >> 1)];
                        uint64_t i = (char *)(v118 + v119);
                        *(void *)&v161[8] = v121;
                        *(void *)&v161[16] = v118 + v119;
                      }
                    }
                    uint64_t v130 = *v112++;
                    *(void *)uint64_t i = v130;
                    uint64_t i = (char *)(*(void *)&v161[16] + 8);
                  }
                  v131 = v158[0];
                  *(_OWORD *)long long v158 = *(_OWORD *)v161;
                  *(void *)&long long v159 = i;
                  *((void *)&v159 + 1) = *(void *)&v161[24];
                  uint64_t v132 = 21;
                  if (&i[-*(void *)&v161[8]] != (char *)8) {
                    uint64_t v132 = v160.i64[0] + 42;
                  }
                  v160.i64[0] = v132;
                  uint64_t v10 = v154;
                  int v7 = v156;
                  if (v131) {
                    operator delete(v131);
                  }
                }
                else
                {
                  if (v158[1] == v158[0])
                  {
                    *(void *)__int16 v161 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v158, v161);
                    *(void *)__int16 v161 = *(void *)(v159 - 8);
                    *(void *)&long long v159 = v159 - 8;
                  }
                  else
                  {
                    *(void *)__int16 v161 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v158, v161);
                  uint64_t v135 = 21;
                  if ((void)v159 - (unint64_t)v158[1] != 8) {
                    uint64_t v135 = v160.i64[0] + 42;
                  }
                  v160.i64[0] = v135;
                }
              }
              else
              {
                v160.i64[0] = 42;
                *(void *)__int16 v161 = *(void *)(v159 - 8);
                *(void *)&long long v159 = v159 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v158, v161);
              }
              unint64_t v103 = v160.i64[0];
              uint64_t v104 = (char *)v158[1];
              CFStringRef v105 = (char *)v159;
            }
            v136 = &v104[8 * (v103 / 0x2A)];
            unint64_t v137 = *(void *)v136 + 96 * (v103 % 0x2A);
            if (v105 == v104) {
              uint64_t v138 = 0;
            }
            else {
              uint64_t v138 = v137;
            }
            if (v138 == *(void *)v136) {
              uint64_t v138 = *((void *)v136 - 1) + 4032;
            }
            long long v139 = *(_OWORD *)(v91 + 16);
            *(_OWORD *)(v138 - 96) = *(_OWORD *)v91;
            *(_OWORD *)(v138 - 80) = v139;
            uint64_t v140 = v89 + 96 * v90;
            *(void *)(v138 - 56) = 0;
            *(void *)(v138 - 48) = 0;
            *(void *)(v138 - 64) = 0;
            *(_OWORD *)(v138 - 64) = *(_OWORD *)(v140 + 32);
            *(void *)(v138 - 48) = *(void *)(v140 + 48);
            *(void *)(v140 + 32) = 0;
            *(void *)(v140 + 40) = 0;
            *(void *)(v140 + 48) = 0;
            *(void *)(v138 - 40) = 0;
            *(void *)(v138 - 32) = 0;
            *(void *)(v138 - 24) = 0;
            *(_OWORD *)(v138 - 40) = *(_OWORD *)(v140 + 56);
            *(void *)(v138 - 24) = *(void *)(v140 + 72);
            *(void *)(v140 + 56) = 0;
            *(void *)(v140 + 64) = 0;
            *(void *)(v140 + 72) = 0;
            uint64_t v141 = *v93;
            *(void *)(v138 - 11) = *(void *)(v91 + 85);
            *(void *)(v138 - 16) = v141;
            int64x2_t v160 = vaddq_s64(v160, (int64x2_t)xmmword_21BAB6E70);
            goto LABEL_188;
          case 0xFFFFFC1F:
LABEL_188:
            std::deque<std::__state<char>>::pop_back(v158);
            goto LABEL_189;
          case 0xFFFFFC20:
            long long v106 = *(_OWORD *)(v91 + 16);
            *(_OWORD *)__int16 v161 = *(_OWORD *)v91;
            *(_OWORD *)&v161[16] = v106;
            memset(&v161[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v161[32], *(long long **)(v89 + 96 * v90 + 32), *(long long **)(v89 + 96 * v90 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v89 + 96 * v90 + 40) - *(void *)(v89 + 96 * v90 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v163[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v89 + 96 * v90 + 56), *(long long **)(v89 + 96 * v90 + 64), (uint64_t)(*(void *)(v89 + 96 * v90 + 64) - *(void *)(v89 + 96 * v90 + 56)) >> 4);
            uint64_t v107 = *v93;
            *(void *)((char *)&v163[1] + 5) = *(void *)(v91 + 85);
            v163[1] = v107;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v93 + 24))(*v93, 1, v91);
            (*(void (**)(void, void, unsigned char *))(*(void *)v163[1] + 24))(v163[1], 0, v161);
            std::deque<std::__state<char>>::push_back(v158, (uint64_t)v161);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(void *)&v161[32])
            {
              *(void *)&v161[40] = *(void *)&v161[32];
              operator delete(*(void **)&v161[32]);
            }
            goto LABEL_189;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    else
    {
LABEL_192:
      uint64_t v12 = 0;
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v158);
    return v12;
  }
  v158[0] = 0;
  v158[1] = 0;
  *(void *)&long long v159 = 0;
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12) {
    goto LABEL_199;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)__int16 v161 = 0;
  memset(&v161[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v163, 0, 21);
  v158[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v158, (uint64_t)v161);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)&v161[32]) {
    operator delete(*(void **)&v161[32]);
  }
  int v143 = a4;
  int v13 = v158[1];
  *((_DWORD *)v158[1] - 24) = 0;
  *(v13 - 11) = v10;
  *(v13 - 10) = v10;
  uint64_t v153 = v10;
  *(v13 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v158[1] - 40), *(unsigned int *)(a1 + 32));
  __int16 v14 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  int v149 = 0;
  unsigned int v151 = 0;
  int v146 = 0;
  OSStatus v15 = 0;
  char v16 = 0;
  unsigned int v17 = 0;
  OSStatus v18 = v158[1];
  *((void *)v158[1] - 2) = v12;
  char v155 = v7;
  *(v18 - 2) = v7;
  *((unsigned char *)v18 - 4) = a6;
  while (2)
  {
    BOOL v19 = (++v17 & 0xFFF) != 0 || (int)(v17 >> 12) < (int)v157;
    if (!v19) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    OSStatus v21 = v18 - 4;
    uint64_t v20 = *((void *)v18 - 2);
    BOOL v22 = v18 - 24;
    if (v20) {
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v20 + 16))(v20, v18 - 24);
    }
    switch(*(_DWORD *)v22)
    {
      case 0xFFFFFC18:
        uint64_t v23 = *((void *)v18 - 10);
        if ((v155 & 0x20) != 0 && v23 == v153) {
          goto LABEL_19;
        }
        uint8x8_t v30 = (const char *)(v23 - *((void *)v18 - 11));
        if ((v16 & ((uint64_t)v15 >= (uint64_t)v30)) != 0) {
          goto LABEL_87;
        }
        unsigned int v31 = (long long *)*((void *)v18 - 8);
        unsigned int v32 = (long long *)*((void *)v18 - 7);
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v148 - (uint64_t)v149) >> 3) < v33)
        {
          if (v149)
          {
            operator delete(v149);
            uint64_t v148 = 0;
          }
          if (v33 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_204;
          }
          unint64_t v34 = 0x5555555555555556 * (v148 >> 3);
          if (v34 <= v33) {
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3);
          }
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v148 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v34;
          if (v35 > 0xAAAAAAAAAAAAAAALL) {
LABEL_204:
          }
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v35);
          __int16 v14 = v36;
          __int16 v38 = v36;
          while (v31 != v32)
          {
            long long v39 = *v31;
            *((void *)v38 + 2) = *((void *)v31 + 2);
            *(_OWORD *)__int16 v38 = v39;
            v38 += 24;
            unsigned int v31 = (long long *)((char *)v31 + 24);
          }
          uint64_t v148 = (uint64_t)&v36[24 * v37];
          int v149 = v36;
          goto LABEL_54;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v14 - v149) >> 3) >= v33)
        {
          if (v31 == v32)
          {
            __int16 v14 = v149;
            __int16 v38 = v149;
          }
          else
          {
            __int16 v14 = v149;
            __int16 v38 = v149;
            do
            {
              *(_OWORD *)__int16 v38 = *v31;
              v38[16] = *((unsigned char *)v31 + 16);
              v38 += 24;
              unsigned int v31 = (long long *)((char *)v31 + 24);
            }
            while (v31 != v32);
          }
LABEL_54:
          uint64_t v44 = v38 - v14;
          goto LABEL_55;
        }
        int v40 = (long long *)((char *)v31 + 8 * ((v14 - v149) >> 3));
        if (v14 != v149)
        {
          unsigned int v41 = v149;
          do
          {
            *(_OWORD *)unsigned int v41 = *v31;
            v41[16] = *((unsigned char *)v31 + 16);
            unsigned int v31 = (long long *)((char *)v31 + 24);
            v41 += 24;
          }
          while (v31 != v40);
        }
        __int16 v42 = v14;
        while (v40 != v32)
        {
          long long v43 = *v40;
          *((void *)v42 + 2) = *((void *)v40 + 2);
          *(_OWORD *)__int16 v42 = v43;
          v42 += 24;
          int v40 = (long long *)((char *)v40 + 24);
        }
        uint64_t v44 = v42 - v14;
LABEL_55:
        uint64_t v145 = v44;
        int v45 = (long long *)*((void *)v18 - 5);
        int v46 = (char *)*((void *)v18 - 4);
        unint64_t v47 = (v46 - (char *)v45) >> 4;
        if (v47 > (v147 - (uint64_t)v151) >> 4)
        {
          if (v151)
          {
            operator delete(v151);
            uint64_t v147 = 0;
          }
          if (v46 - (char *)v45 < 0) {
            goto LABEL_203;
          }
          uint64_t v48 = v147 >> 3;
          if (v147 >> 3 <= v47) {
            uint64_t v48 = (v46 - (char *)v45) >> 4;
          }
          unint64_t v49 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v48;
          if (v49 >> 60) {
LABEL_203:
          }
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v49);
          int v52 = v50;
          while (v45 != (long long *)v46)
          {
            long long v53 = *v45++;
            *(_OWORD *)int v52 = v53;
            v52 += 16;
          }
          uint64_t v147 = (uint64_t)&v50[16 * v51];
          unsigned int v60 = (char *)(v52 - v50);
          unsigned int v151 = v50;
          goto LABEL_85;
        }
        unint64_t v54 = (v146 - v151) >> 4;
        if (v54 >= v47)
        {
          if (v45 == (long long *)v46)
          {
            unsigned int v62 = v151;
            unsigned int v61 = v151;
          }
          else
          {
            unsigned int v61 = v151;
            do
            {
              *(void *)unsigned int v61 = *(void *)v45;
              *((void *)v61 + 1) = *((void *)v45 + 1);
              v61 += 16;
              ++v45;
            }
            while (v45 != (long long *)v46);
            unsigned int v62 = v151;
          }
          unsigned int v60 = (char *)(v61 - v62);
          uint64_t v50 = v62;
LABEL_85:
          uint64_t v57 = v145;
          goto LABEL_86;
        }
        uint64_t v55 = &v45[v54];
        if (v146 != v151)
        {
          float v56 = v151;
          do
          {
            *(void *)float v56 = *(void *)v45;
            *((void *)v56 + 1) = *((void *)v45++ + 1);
            v56 += 16;
          }
          while (v45 != v55);
        }
        if (v55 == (long long *)v46)
        {
          uint64_t v57 = v145;
          uint64_t v50 = v146;
          int8x16_t v58 = v146;
        }
        else
        {
          uint64_t v57 = v145;
          uint64_t v50 = v146;
          int8x16_t v58 = v146;
          do
          {
            long long v59 = *v55++;
            *(_OWORD *)int8x16_t v58 = v59;
            v58 += 16;
          }
          while (v55 != (long long *)v46);
        }
        unsigned int v60 = (char *)(v58 - v50);
LABEL_86:
        v14 += v57;
        int v146 = &v60[(void)v50];
        OSStatus v15 = v30;
LABEL_87:
        float v63 = v158[1];
        if (v15 == v157)
        {
          int v64 = v158[0];
          while (v63 != v64)
          {
            v63 -= 12;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v63);
          }
          v158[1] = v64;
          char v16 = 1;
          OSStatus v15 = v157;
        }
        else
        {
          int v65 = (char *)v158[1] - 96;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v158[1] - 12);
          v158[1] = v65;
          char v16 = 1;
        }
LABEL_93:
        OSStatus v18 = v158[1];
        if (v158[0] != v158[1]) {
          continue;
        }
        if (v16)
        {
          uint64_t v66 = *v143;
          *(void *)uint64_t v66 = v153;
          *(void *)(v66 + 8) = &v15[v153];
          *(unsigned char *)(v66 + 16) = 1;
          int v67 = v149;
          if (v14 != v149)
          {
            __int16 v68 = v149 + 16;
            unsigned int v69 = 1;
            do
            {
              uint64_t v70 = v66 + 24 * v69;
              *(_OWORD *)uint64_t v70 = *((_OWORD *)v68 - 1);
              char v71 = *v68;
              v68 += 24;
              *(unsigned char *)(v70 + 16) = v71;
              BOOL v19 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v149) >> 3) > v69++;
            }
            while (v19);
          }
          uint64_t v12 = 1;
        }
        else
        {
          uint64_t v12 = 0;
          int v67 = v149;
        }
        if (v151) {
          operator delete(v151);
        }
        if (v67) {
          operator delete(v67);
        }
LABEL_199:
        *(void *)__int16 v161 = v158;
        std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
        return v12;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_93;
      case 0xFFFFFC1F:
LABEL_19:
        uint8x8_t v24 = (char *)v158[1] - 96;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v158[1] - 12);
        v158[1] = v24;
        goto LABEL_93;
      case 0xFFFFFC20:
        long long v25 = *((_OWORD *)v18 - 5);
        *(_OWORD *)__int16 v161 = *v22;
        *(_OWORD *)&v161[16] = v25;
        memset(&v161[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v161[32], *((long long **)v18 - 8), *((long long **)v18 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v18 - 7) - *((void *)v18 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v163[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v18 - 5), *((long long **)v18 - 4), (uint64_t)(*((void *)v18 - 4) - *((void *)v18 - 5)) >> 4);
        uint64_t v26 = *v21;
        *(void *)((char *)&v163[1] + 5) = *(void *)((char *)v18 - 11);
        v163[1] = v26;
        (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v21 + 24))(*v21, 1, v18 - 24);
        (*(void (**)(void, void, unsigned char *))(*(void *)v163[1] + 24))(v163[1], 0, v161);
        unsigned __int32 v27 = (char *)v158[1];
        if (v158[1] >= (void *)v159)
        {
          v158[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v158, (uint64_t)v161);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v28 = *(_OWORD *)&v161[16];
          *(_OWORD *)v158[1] = *(_OWORD *)v161;
          *((_OWORD *)v27 + 1) = v28;
          *((void *)v27 + 4) = 0;
          *((void *)v27 + 5) = 0;
          *((void *)v27 + 6) = 0;
          *((void *)v27 + 7) = 0;
          *((_OWORD *)v27 + 2) = *(_OWORD *)&v161[32];
          *((void *)v27 + 6) = *(void *)&v161[48];
          memset(&v161[32], 0, 24);
          *((void *)v27 + 8) = 0;
          *((void *)v27 + 9) = 0;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
          *((void *)v27 + 9) = v163[0];
          __p[0] = 0;
          __p[1] = 0;
          v163[0] = 0;
          uint64_t v29 = v163[1];
          *(void *)(v27 + 85) = *(void *)((char *)&v163[1] + 5);
          *((void *)v27 + 10) = v29;
          v158[1] = v27 + 96;
        }
        if (*(void *)&v161[32])
        {
          *(void *)&v161[40] = *(void *)&v161[32];
          operator delete(*(void **)&v161[32]);
        }
        goto LABEL_93;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_21BA5BA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      OSStatus v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      BOOL v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  __int16 v42 = 0;
  long long v43 = 0;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)__int16 v38 = 0;
    memset(&v38[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v40, 0, 21);
    long long v43 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v38[32]) {
      operator delete(*(void **)&v38[32]);
    }
    uint64_t v37 = a4;
    std::vector<std::csub_match>::size_type v13 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v43 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    unsigned int v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)a3 - (int)a2)
      {
        std::vector<std::csub_match>::size_type v17 = v14 - 16;
        uint64_t v16 = *((void *)v14 - 2);
        OSStatus v18 = v14 - 96;
        if (v16) {
          (*(void (**)(uint64_t, char *))(*(void *)v16 + 16))(v16, v14 - 96);
        }
        switch(*(_DWORD *)v18)
        {
          case 0xFFFFFC18:
            uint64_t v19 = *((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v19 == a2) {
              goto LABEL_14;
            }
            uint64_t v28 = *v37;
            *(void *)uint64_t v28 = a2;
            *(void *)(v28 + 8) = v19;
            *(unsigned char *)(v28 + 16) = 1;
            uint64_t v29 = *((void *)v14 - 8);
            uint64_t v30 = *((void *)v14 - 7) - v29;
            if (v30)
            {
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 >> 3);
              unsigned int v32 = (unsigned char *)(v29 + 16);
              unsigned int v33 = 1;
              do
              {
                uint64_t v34 = v28 + 24 * v33;
                *(_OWORD *)uint64_t v34 = *((_OWORD *)v32 - 1);
                char v35 = *v32;
                v32 += 24;
                *(unsigned char *)(v34 + 16) = v35;
              }
              while (v31 > v33++);
            }
            uint64_t v26 = 1;
            goto LABEL_23;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_21;
          case 0xFFFFFC1F:
LABEL_14:
            std::vector<std::csub_match>::size_type v20 = v43 - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v43 - 12);
            long long v43 = v20;
            goto LABEL_21;
          case 0xFFFFFC20:
            long long v21 = *((_OWORD *)v14 - 5);
            *(_OWORD *)__int16 v38 = *(_OWORD *)v18;
            *(_OWORD *)&v38[16] = v21;
            memset(&v38[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v38[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v40[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v22 = *(void *)v17;
            *(void *)((char *)&v40[1] + 5) = *(void *)(v14 - 11);
            v40[1] = v22;
            (*(void (**)(void, uint64_t, char *))(**(void **)v17 + 24))(*(void *)v17, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v40[1] + 24))(v40[1], 0, v38);
            uint64_t v23 = v43;
            if ((unint64_t)v43 >= v44)
            {
              long long v43 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v24 = *(_OWORD *)&v38[16];
              *(_OWORD *)long long v43 = *(_OWORD *)v38;
              *((_OWORD *)v23 + 1) = v24;
              *((void *)v23 + 4) = 0;
              *((void *)v23 + 5) = 0;
              *((void *)v23 + 6) = 0;
              *((void *)v23 + 7) = 0;
              *((_OWORD *)v23 + 2) = *(_OWORD *)&v38[32];
              *((void *)v23 + 6) = *(void *)&v38[48];
              memset(&v38[32], 0, 24);
              *((void *)v23 + 8) = 0;
              *((void *)v23 + 9) = 0;
              *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
              *((void *)v23 + 9) = v40[0];
              __p[0] = 0;
              __p[1] = 0;
              v40[0] = 0;
              uint64_t v25 = v40[1];
              *(void *)(v23 + 85) = *(void *)((char *)&v40[1] + 5);
              *((void *)v23 + 10) = v25;
              long long v43 = v23 + 96;
            }
            if (*(void *)&v38[32])
            {
              *(void *)&v38[40] = *(void *)&v38[32];
              operator delete(*(void **)&v38[32]);
            }
LABEL_21:
            std::pair<const char *, const char *> v14 = v43;
            ++v15;
            if (v42 == v43) {
              goto LABEL_22;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_22:
  uint64_t v26 = 0;
LABEL_23:
  *(void *)__int16 v38 = &v42;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  return v26;
}

void sub_21BA5C18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      OSStatus v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unsigned int v15 = (char *)*a1;
    long long v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      uint64_t v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      OSStatus v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *OSStatus v18 = v20;
        OSStatus v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      long long v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      uint64_t v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        uint64_t v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    OSStatus v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    OSStatus v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 12);
}

void sub_21BA5C6A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    BOOL result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21BA5C7BC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    BOOL result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21BA5C830(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 16);
}

void sub_21BA5C890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        unint64_t v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        uint64_t v29 = (char *)*((void *)&v85 + 1);
        uint64_t v28 = (char *)v85;
        unint64_t v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              __int16 v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v37);
              int v40 = v38;
              uint64_t v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                long long v43 = v29;
                unint64_t v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)long long v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              unint64_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              uint64_t v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              uint64_t v34 = &v30[8 * (v33 >> 1)];
              uint64_t v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        unint64_t v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      unsigned int v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      unsigned int v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          uint64_t v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            unsigned int v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          BOOL v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v77);
        int v52 = &v51[8 * (v77 >> 2)];
        unint64_t v54 = &v51[8 * v78];
        uint64_t v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          uint64_t v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)uint64_t v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        unsigned int v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            long long v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            long long v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          BOOL v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v50);
        int v52 = &v51[8 * (v50 >> 2)];
        unint64_t v54 = &v51[8 * v53];
        uint64_t v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          int8x16_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)int8x16_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_21BA5CDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          std::vector<std::pair<unsigned long, const char *>>::size_type v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        std::vector<std::csub_match>::size_type v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)std::vector<std::csub_match>::size_type v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      long long v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v16);
      std::vector<std::csub_match>::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x21D497EF0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_21BA5D2B4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_21BA5D700(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 17);
}

void sub_21BA5D7A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    BOOL v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      BOOL v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  BOOL v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    BOOL v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 14);
}

void sub_21BA5DAB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CBB2520;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x21D497F90);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21D497F90);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 15);
}

void sub_21BA5DEFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!this->__open_count_) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_32:
      int64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v19 = this->__marked_count_;
        ++this->__open_count_;
        uint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
        if (v20 == a3 || (uint64_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v19);
        --this->__open_count_;
        uint64_t v15 = v21 + 1;
      }
      int64_t v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  int64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v22);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 6);
}

void sub_21BA5E3AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    uint64_t v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_21BA5E890(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 8);
}

void sub_21BA5E9A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 7);
}

void sub_21BA5EA00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unsigned int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unsigned int v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *uint64_t v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *uint64_t v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_249;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_249;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_249;
    }
    uint64_t v83 = (char **)(v7 + 88);
    uint64_t v84 = v7 + 16;
    long long v85 = a3 - 4;
    while (1)
    {
      BOOL v8 = (char *)v5;
      uint64_t v9 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_152;
      }
      int v10 = *(unsigned __int8 *)v5;
      uint64_t v9 = (char *)v5;
      if (v10 == 93) {
        goto LABEL_152;
      }
      int v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      int v93 = 0;
      int v12 = 0;
      uint64_t v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        int v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            int v12 = (void *)HIBYTE(v93);
            int v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_248;
            }
            for (unint64_t i = 0; ; ++i)
            {
              uint64_t v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
                break;
              }
              if (&v85[-v5] == (char *)i) {
                goto LABEL_248;
              }
            }
            if (v15 == a3) {
LABEL_248:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v98, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v98.__end_);
            if (SHIBYTE(v98.__end_) >= 0) {
              first = &v98;
            }
            else {
              first = v98.__first_;
            }
            if (SHIBYTE(v98.__end_) < 0) {
              std::__split_buffer<std::string>::pointer end_high = v98.__begin_;
            }
            (*(void (**)(void, void *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), first, (char *)end_high + (void)first);
            if (SHIBYTE(v98.__end_) >= 0) {
              std::vector<std::csub_match>::pointer v23 = (const char *)&v98;
            }
            else {
              std::vector<std::csub_match>::pointer v23 = (const char *)v98.__first_;
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v98.__end_) < 0) {
              operator delete(v98.__first_);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_148;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_248;
            }
            for (unint64_t j = 0; ; ++j)
            {
              uint64_t v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93) {
                break;
              }
              if (&v85[-v5] == j) {
                goto LABEL_248;
              }
            }
            if (v15 == a3) {
              goto LABEL_248;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v96, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v97) < 0)
            {
              unint64_t v26 = *((void *)&v96 + 1);
              if (!*((void *)&v96 + 1)) {
LABEL_250:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              int v27 = (char *)v96;
            }
            else
            {
              unint64_t v26 = HIBYTE(v97);
              if (!HIBYTE(v97)) {
                goto LABEL_250;
              }
              int v27 = (char *)&v96;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v98, v27, &v27[v26], v26);
            (*(void (**)(std::string::size_type *__return_ptr))(**(void **)(a1 + 16) + 32))(__sz);
            std::string::size_type v29 = HIBYTE(v95);
            if (v95 < 0) {
              std::string::size_type v29 = __sz[1];
            }
            if (v29 != 1)
            {
              if (v29 == 12)
              {
                uint64_t v30 = __sz;
                if (v95 < 0) {
                  uint64_t v30 = (std::string::size_type *)__sz[0];
                }
                *((unsigned char *)v30 + 11) = *((unsigned char *)v30 + 3);
              }
              else if (SHIBYTE(v95) < 0)
              {
                *(unsigned char *)__sz[0] = 0;
                __sz[1] = 0;
              }
              else
              {
                LOBYTE(__sz[0]) = 0;
                HIBYTE(v95) = 0;
              }
            }
            if (SHIBYTE(v98.__end_) < 0) {
              operator delete(v98.__first_);
            }
            std::string::size_type v36 = HIBYTE(v95);
            int v37 = SHIBYTE(v95);
            std::string::size_type v38 = __sz[1];
            if (v95 < 0) {
              std::string::size_type v36 = __sz[1];
            }
            if (v36)
            {
              unint64_t v40 = *(void *)(v7 + 144);
              unint64_t v39 = *(void *)(v7 + 152);
              if (v40 >= v39)
              {
                uint64_t v44 = *(void *)(v7 + 136);
                unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v44) >> 3);
                unint64_t v46 = v45 + 1;
                if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<void const*>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v44) >> 3);
                if (2 * v47 > v46) {
                  unint64_t v46 = 2 * v47;
                }
                if (v47 >= 0x555555555555555) {
                  unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v48 = v46;
                }
                v98.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
                if (v48)
                {
                  if (v48 > 0xAAAAAAAAAAAAAAALL) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  long long v49 = (std::string *)operator new(24 * v48);
                }
                else
                {
                  long long v49 = 0;
                }
                std::__split_buffer<std::string>::pointer begin = v49 + v45;
                v98.__first_ = v49;
                v98.__begin_ = begin;
                v98.__end_ = begin;
                v98.__end_cap_.__value_ = &v49[v48];
                if (v37 < 0)
                {
                  std::string::__init_copy_ctor_external(begin, (const std::string::value_type *)__sz[0], v38);
                  std::__split_buffer<std::string>::pointer begin = v98.__begin_;
                  std::__split_buffer<std::string>::pointer end = v98.__end_;
                }
                else
                {
                  *(_OWORD *)&begin->__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                  begin->__r_.__value_.__r.__words[2] = v95;
                  std::__split_buffer<std::string>::pointer end = v49 + v45;
                }
                std::__split_buffer<std::string>::pointer v51 = end + 1;
                v98.__end_ = end + 1;
                uint64_t v55 = *(void *)(v7 + 136);
                unint64_t v54 = *(void *)(v7 + 144);
                if (v54 == v55)
                {
                  int64x2_t v57 = vdupq_n_s64(v54);
                }
                else
                {
                  do
                  {
                    long long v56 = *(_OWORD *)(v54 - 24);
                    begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v54 - 8);
                    *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v56;
                    --begin;
                    *(void *)(v54 - 16) = 0;
                    *(void *)(v54 - 8) = 0;
                    *(void *)(v54 - 24) = 0;
                    v54 -= 24;
                  }
                  while (v54 != v55);
                  int64x2_t v57 = *(int64x2_t *)(v7 + 136);
                  std::__split_buffer<std::string>::pointer v51 = v98.__end_;
                }
                *(void *)(v7 + 136) = begin;
                *(void *)(v7 + 144) = v51;
                *(int64x2_t *)&v98.__begin_ = v57;
                int8x16_t v58 = *(std::string **)(v7 + 152);
                *(void *)(v7 + 152) = v98.__end_cap_.__value_;
                v98.__end_cap_.__value_ = v58;
                v98.__first_ = (std::__split_buffer<std::string>::pointer)v57.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v98);
              }
              else
              {
                if (SHIBYTE(v95) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), (const std::string::value_type *)__sz[0], __sz[1]);
                }
                else
                {
                  long long v41 = *(_OWORD *)__sz;
                  *(void *)(v40 + 16) = v95;
                  *(_OWORD *)unint64_t v40 = v41;
                }
                std::__split_buffer<std::string>::pointer v51 = (std::__split_buffer<std::string>::pointer)(v40 + 24);
                *(void *)(v7 + 144) = v40 + 24;
              }
              *(void *)(v7 + 144) = v51;
            }
            else
            {
              uint64_t v42 = HIBYTE(v97);
              if (SHIBYTE(v97) < 0) {
                uint64_t v42 = *((void *)&v96 + 1);
              }
              if (v42 == 2)
              {
                unint64_t v50 = (char *)&v96;
                if (SHIBYTE(v97) < 0) {
                  unint64_t v50 = (char *)v96;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *v50, v50[1]);
              }
              else
              {
                if (v42 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                long long v43 = (char *)&v96;
                if (SHIBYTE(v97) < 0) {
                  long long v43 = (char *)v96;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *v43);
              }
            }
            if (SHIBYTE(v95) < 0) {
              operator delete((void *)__sz[0]);
            }
            if (SHIBYTE(v97) < 0) {
              operator delete((void *)v96);
            }
            char v25 = 0;
LABEL_148:
            uint64_t v5 = (uint64_t)(v15 + 2);
            uint64_t v34 = v8;
            goto LABEL_149;
          default:
            int v11 = 0;
            int v12 = 0;
            uint64_t v9 = (char *)v5;
            break;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0) {
        int v11 = v12;
      }
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v17 = *v9;
          if (v17 == 92)
          {
            size_t v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
              BOOL v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            }
            else {
              BOOL v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            }
            uint64_t v9 = v19;
            goto LABEL_76;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          uint64_t v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v93) = 1;
          uint64_t v28 = __p;
        }
        *(unsigned char *)uint64_t v28 = v17;
        *((unsigned char *)v28 + 1) = 0;
        ++v9;
      }
LABEL_76:
      if (v9 != a3)
      {
        int v31 = *v9;
        if (v31 != 93)
        {
          unint64_t v33 = v9 + 1;
          if (v9 + 1 != a3 && v31 == 45 && *v33 != 93)
          {
            v90[0] = 0;
            v90[1] = 0;
            uint64_t v91 = 0;
            uint64_t v34 = v9 + 2;
            if (v9 + 2 != a3 && *v33 == 91 && *v34 == 46)
            {
              BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v90);
              goto LABEL_156;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v33) = *v33;
              if (v33 == 92)
              {
                if (v5) {
                  BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v90);
                }
                else {
                  BOOL v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v90, v7);
                }
LABEL_156:
                uint64_t v34 = v35;
LABEL_157:
                *(_OWORD *)unint64_t v88 = *(_OWORD *)__p;
                uint64_t v89 = v93;
                __p[1] = 0;
                int v93 = 0;
                *(_OWORD *)long long v86 = *(_OWORD *)v90;
                int64_t v87 = v91;
                v90[0] = 0;
                v90[1] = 0;
                uint64_t v91 = 0;
                __p[0] = 0;
                if (*(unsigned char *)(v7 + 170))
                {
                  if (*(unsigned char *)(v7 + 169))
                  {
                    for (int k = 0; ; ++k)
                    {
                      if (SHIBYTE(v89) < 0)
                      {
                        if (k >= v88[1])
                        {
LABEL_169:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v87) < 0)
                            {
                              if (m >= v86[1]) {
                                goto LABEL_215;
                              }
                              uint64_t v64 = (void **)v86[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v87)) {
                                goto LABEL_215;
                              }
                              uint64_t v64 = v86;
                            }
                            char v65 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), m[(void)v64]);
                            if (v87 >= 0) {
                              uint64_t v66 = v86;
                            }
                            else {
                              uint64_t v66 = (void **)v86[0];
                            }
                            m[(void)v66] = v65;
                          }
                        }
                        unsigned int v60 = (void **)v88[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v89)) {
                          goto LABEL_169;
                        }
                        unsigned int v60 = v88;
                      }
                      char v61 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), k[(void)v60]);
                      if (SHIBYTE(v89) >= 0) {
                        unsigned int v62 = v88;
                      }
                      else {
                        unsigned int v62 = (void **)v88[0];
                      }
                      k[(void)v62] = v61;
                    }
                  }
                  uint64_t v76 = 0;
                  if ((HIBYTE(v89) & 0x80) != 0) {
                    goto LABEL_206;
                  }
                  while ((unint64_t)v76 < HIBYTE(v89))
                  {
                    while (1)
                    {
                      ++v76;
                      if ((HIBYTE(v89) & 0x80) == 0) {
                        break;
                      }
LABEL_206:
                      if (v76 >= v88[1]) {
                        goto LABEL_209;
                      }
                    }
                  }
LABEL_209:
                  unint64_t v77 = 0;
                  if (v87 < 0) {
                    goto LABEL_212;
                  }
                  while ((unint64_t)v77 < HIBYTE(v87))
                  {
                    while (1)
                    {
                      ++v77;
                      if ((v87 & 0x8000000000000000) == 0) {
                        break;
                      }
LABEL_212:
                      if (v77 >= v86[1]) {
                        goto LABEL_215;
                      }
                    }
                  }
LABEL_215:
                  uint64_t v78 = (char *)HIBYTE(v89);
                  if (SHIBYTE(v89) >= 0) {
                    uint64_t v79 = (char *)v88;
                  }
                  else {
                    uint64_t v79 = (char *)v88[0];
                  }
                  if (SHIBYTE(v89) < 0) {
                    uint64_t v78 = (char *)v88[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v96, v84, v79, &v78[(void)v79]);
                  uint64_t v80 = (char *)HIBYTE(v87);
                  if (v87 >= 0) {
                    uint64_t v81 = (char *)v86;
                  }
                  else {
                    uint64_t v81 = (char *)v86[0];
                  }
                  if (v87 < 0) {
                    uint64_t v80 = (char *)v86[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__sz, v84, v81, &v80[(void)v81]);
                  *(_OWORD *)&v98.__first_ = v96;
                  v98.__end_ = v97;
                  uint32_t v97 = 0;
                  long long v96 = 0uLL;
                  v98.__end_cap_ = *(std::__compressed_pair<std::string *> *)__sz;
                  int64_t v99 = v95;
                  __sz[0] = 0;
                  __sz[1] = 0;
                  int64_t v95 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v83, (long long *)&v98);
                  if (SHIBYTE(v99) < 0) {
                    operator delete(v98.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v98.__end_) < 0) {
                    operator delete(v98.__first_);
                  }
                  if (SHIBYTE(v95) < 0) {
                    operator delete((void *)__sz[0]);
                  }
                  if (SHIBYTE(v97) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v75 = (std::__split_buffer<std::string>::pointer)v96;
LABEL_233:
                    operator delete(v75);
                  }
                }
                else
                {
                  uint64_t v67 = (void *)HIBYTE(v89);
                  if (SHIBYTE(v89) < 0) {
                    uint64_t v67 = v88[1];
                  }
                  if (v67 != (void *)1) {
                    goto LABEL_252;
                  }
                  uint64_t v68 = (void *)HIBYTE(v87);
                  if (v87 < 0) {
                    uint64_t v68 = v86[1];
                  }
                  if (v68 != (void *)1) {
LABEL_252:
                  }
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(unsigned char *)(v7 + 169))
                  {
                    if (SHIBYTE(v89) >= 0) {
                      uint64_t v69 = v88;
                    }
                    else {
                      uint64_t v69 = (void **)v88[0];
                    }
                    char v70 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v69);
                    if (SHIBYTE(v89) >= 0) {
                      int64_t v71 = v88;
                    }
                    else {
                      int64_t v71 = (void **)v88[0];
                    }
                    *(unsigned char *)int64_t v71 = v70;
                    if (v87 >= 0) {
                      BOOL v72 = v86;
                    }
                    else {
                      BOOL v72 = (void **)v86[0];
                    }
                    char v73 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v72);
                    if (v87 >= 0) {
                      long long v74 = v86;
                    }
                    else {
                      long long v74 = (void **)v86[0];
                    }
                    *(unsigned char *)long long v74 = v73;
                  }
                  *(_OWORD *)&v98.__first_ = *(_OWORD *)v88;
                  v98.__end_ = v89;
                  v88[0] = 0;
                  v88[1] = 0;
                  uint64_t v89 = 0;
                  v98.__end_cap_ = *(std::__compressed_pair<std::string *> *)v86;
                  int64_t v99 = v87;
                  v86[0] = 0;
                  v86[1] = 0;
                  int64_t v87 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v83, (long long *)&v98);
                  if (SHIBYTE(v99) < 0) {
                    operator delete(v98.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v98.__end_) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v75 = v98.__first_;
                    goto LABEL_233;
                  }
                }
                if (SHIBYTE(v87) < 0) {
                  operator delete(v86[0]);
                }
                if (SHIBYTE(v89) < 0) {
                  operator delete(v88[0]);
                }
                if (SHIBYTE(v91) < 0) {
                  operator delete(v90[0]);
                }
                char v25 = 1;
LABEL_149:
                if (SHIBYTE(v93) < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v9 = v34;
                if ((v25 & 1) == 0) {
                  goto LABEL_153;
                }
                goto LABEL_152;
              }
            }
            else
            {
              LOBYTE(v33) = *v33;
            }
            HIBYTE(v91) = 1;
            LOWORD(v90[0]) = v33;
            goto LABEL_157;
          }
        }
      }
      if (SHIBYTE(v93) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            uint64_t v32 = (void **)__p[0];
LABEL_85:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v32);
LABEL_96:
            char v25 = 1;
            uint64_t v34 = v9;
            goto LABEL_149;
          }
          uint64_t v32 = (void **)__p[0];
LABEL_95:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v32, *((char *)v32 + 1));
          goto LABEL_96;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v93))
      {
        uint64_t v32 = __p;
        if (HIBYTE(v93) == 1) {
          goto LABEL_85;
        }
        goto LABEL_95;
      }
LABEL_152:
      uint64_t v5 = (uint64_t)v9;
LABEL_153:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_249:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_21BA5FCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 144) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 5);
}

void sub_21BA5FE64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_21BA60000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *int v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x21D497F90](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v7[(void)v11];
        int v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          uint64_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          uint64_t v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v24[(void)v11];
        int v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          uint64_t v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *uint64_t v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  size_t v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v19 = &v14[(void)v11];
  int v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    uint64_t v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; ; ++i)
  {
    unint64_t v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93) {
      break;
    }
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = (char)*a2;
  if (v7 > 97)
  {
    if (v7 > 114)
    {
      if (v7 != 115)
      {
        if (v7 == 119)
        {
          *(_DWORD *)(a5 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
          return a2 + 1;
        }
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v7 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v7 != 100) {
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v7 == 68)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
      *(_DWORD *)(a5 + 164) = v8;
      return a2 + 1;
    }
    goto LABEL_27;
  }
  if (v7 == 83)
  {
    int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_24;
  }
  if (v7 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      unint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *unint64_t v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_62:
        *(void *)(a5 + 72) = v14;
        return a2 + 1;
      }
      unint64_t v24 = *(void *)(a5 + 64);
      uint64_t v25 = &v13[-v24];
      uint64_t v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        unint64_t v27 = v12 - v24;
        if (2 * v27 > v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          char v29 = operator new(v28);
        }
        else {
          char v29 = 0;
        }
        char v31 = &v29[v28];
        v25[(void)v29] = v11;
        uint64_t v14 = (uint64_t)&v25[(void)v29 + 1];
        if (v13 == (unsigned char *)v24)
        {
          char v29 = &v25[(void)v29];
        }
        else
        {
          uint64_t v32 = &v13[~v24];
          do
          {
            char v33 = *--v13;
            (v32--)[(void)v29] = v33;
          }
          while (v13 != (unsigned char *)v24);
          unint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v29;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v31;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_62;
      }
LABEL_87:
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = *(unsigned char **)(a5 + 72);
    unint64_t v16 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        unint64_t v18 = *(void *)(a5 + 64);
        BOOL v19 = &v17[-v18];
        uint64_t v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0) {
          goto LABEL_87;
        }
        unint64_t v21 = v16 - v18;
        if (2 * v21 > v20) {
          uint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v22 = v20;
        }
        if (v22) {
          unint64_t v23 = operator new(v22);
        }
        else {
          unint64_t v23 = 0;
        }
        unint64_t v39 = &v19[(void)v23];
        unint64_t v40 = (char *)v23 + v22;
        v19[(void)v23] = 95;
        uint64_t v30 = (uint64_t)&v19[(void)v23 + 1];
        if (v17 != (unsigned char *)v18)
        {
          long long v41 = &v17[~v18];
          do
          {
            char v42 = *--v17;
            (v41--)[(void)v23] = v42;
          }
          while (v17 != (unsigned char *)v18);
LABEL_80:
          size_t v17 = *(unsigned char **)(a5 + 64);
          goto LABEL_82;
        }
        goto LABEL_81;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      unint64_t v34 = *(void *)(a5 + 64);
      BOOL v35 = &v17[-v34];
      uint64_t v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0) {
        goto LABEL_87;
      }
      unint64_t v37 = v16 - v34;
      if (2 * v37 > v36) {
        uint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v38 = v36;
      }
      if (v38) {
        unint64_t v23 = operator new(v38);
      }
      else {
        unint64_t v23 = 0;
      }
      unint64_t v39 = &v35[(void)v23];
      unint64_t v40 = (char *)v23 + v38;
      v35[(void)v23] = 95;
      uint64_t v30 = (uint64_t)&v35[(void)v23 + 1];
      if (v17 != (unsigned char *)v34)
      {
        long long v43 = &v17[~v34];
        do
        {
          char v44 = *--v17;
          (v43--)[(void)v23] = v44;
        }
        while (v17 != (unsigned char *)v34);
        goto LABEL_80;
      }
LABEL_81:
      unint64_t v23 = v39;
LABEL_82:
      *(void *)(a5 + 64) = v23;
      *(void *)(a5 + 72) = v30;
      *(void *)(a5 + 80) = v40;
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_84;
    }
    *size_t v17 = 95;
    uint64_t v30 = (uint64_t)(v17 + 1);
LABEL_84:
    *(void *)(a5 + 72) = v30;
    return a2 + 1;
  }
LABEL_27:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *std::basic_regex<char>::value_type v8 = v6;
    unint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  unint64_t v24 = v25 + 1;
  size_t v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21BA60DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    uint64_t v17 = *a1;
    unint64_t v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64(v16);
      uint64_t v18 = &v13[48 * v9];
    }
    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *(_OWORD *)(v16 - 48);
        *((void *)v18 - 4) = *(void *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(void *)(v16 - 40) = 0;
        *(void *)(v16 - 32) = 0;
        *(void *)(v16 - 48) = 0;
        long long v20 = *(_OWORD *)(v16 - 24);
        *((void *)v18 - 1) = *(void *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - 8) = 0;
        *(void *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    unsigned __int8 v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    uint64_t v23 = v21.i64[1];
    uint64_t v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *(void *)(v4 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unsigned __int8 v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 9);
}

void sub_21BA61034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *long long v7 = result;
    long long v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)long long v7 = v10;
    long long v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)long long v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 3);
}

void sub_21BA61188(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_21BA61310(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  unint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x21D497F90](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB2668;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21D497F90);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB2668;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB25D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21D497F90);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB25D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_21BA61D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 1);
}

void sub_21BA61E00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 2);
}

void sub_21BA61E58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (void **)**a1;
  if (v2)
  {
    std::__split_buffer<std::string>::pointer v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_170;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_35;
  }
  char v6 = *current;
  LOBYTE(v85) = *current;
  char v7 = current[1];
  HIBYTE(v85) = v7;
  if (this->__icase_)
  {
    LOBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v85;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v86, (const char *)&__s);
  std::string __p = v86;
  std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v86.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v86);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v86;
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v86.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_113;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_113:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_17;
    }
LABEL_35:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_36;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_35;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v85 != *(p_second - 1) || HIBYTE(v85) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_167;
  }
LABEL_26:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
    std::vector<std::pair<std::string, std::string>>::pointer v17 = this->__ranges_.__begin_;
    uint64_t v18 = (char *)this->__ranges_.__end_ - (char *)v17;
    if (v18)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v17->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v19;
        ++v17;
        if (v19 >= v20) {
          goto LABEL_33;
        }
      }
      BOOL negate = 1;
      int v21 = 5;
    }
    else
    {
LABEL_33:
      BOOL negate = 0;
      int v21 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (negate) {
      goto LABEL_145;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_149:
    if ((char)v85 < 0)
    {
      neg_masint k = this->__neg_mask_;
    }
    else
    {
      masint k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v75 = tab[v85];
      if (((v75 & mask) != 0 || v85 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v85) & 0x80000000) == 0
        && ((tab[HIBYTE(v85)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v85) == 95))
      {
        goto LABEL_167;
      }
      neg_masint k = this->__neg_mask_;
      if ((v75 & neg_mask) != 0 || v85 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_166:
        int v77 = negate;
LABEL_168:
        BOOL negate = v77;
        goto LABEL_169;
      }
    }
    if ((SHIBYTE(v85) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v85)] & neg_mask) == 0)
      {
        int v77 = 1;
        if (HIBYTE(v85) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_168;
        }
      }
      goto LABEL_166;
    }
LABEL_167:
    int v77 = 1;
    goto LABEL_168;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
  std::vector<std::string>::pointer v57 = this->__equivalences_.__begin_;
  uint64_t v58 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v59 = (char *)this->__equivalences_.__end_ - (char *)v57;
  if (!v59)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  uint64_t v60 = 0;
  unint64_t v61 = v59 / 24;
  long long v62 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = __s.__r_.__value_.__l.__size_;
  }
  if (v61 <= 1) {
    uint64_t v64 = 1;
  }
  else {
    uint64_t v64 = v59 / 24;
  }
  BOOL v65 = 1;
  while (1)
  {
    uint64_t v66 = &v57[v60];
    std::string::size_type v67 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
    int v68 = (char)v67;
    if ((v67 & 0x80u) != 0) {
      std::string::size_type v67 = v66->__r_.__value_.__l.__size_;
    }
    if (v63 != v67) {
      goto LABEL_140;
    }
    uint64_t v69 = v68 >= 0 ? &v57[v60] : (std::string *)v66->__r_.__value_.__r.__words[0];
    if ((v58 & 0x80) == 0) {
      break;
    }
    unint64_t v82 = v61;
    uint64_t v83 = v58;
    int v72 = memcmp((const void *)v62, v69, *((size_t *)&v62 + 1));
    unint64_t v61 = v82;
    uint64_t v58 = v83;
    if (!v72)
    {
      int v21 = 5;
      BOOL negate = 1;
      goto LABEL_143;
    }
LABEL_140:
    BOOL v65 = ++v60 < v61;
    if (v60 == v64)
    {
      int v21 = 0;
      goto LABEL_142;
    }
  }
  if (!v58)
  {
    BOOL negate = 1;
    if (v65) {
      goto LABEL_169;
    }
    goto LABEL_149;
  }
  p_s = &__s;
  uint64_t v71 = v58;
  do
  {
    if (p_s->__r_.__value_.__s.__data_[0] != v69->__r_.__value_.__s.__data_[0]) {
      goto LABEL_140;
    }
    p_s = (std::string *)((char *)p_s + 1);
    uint64_t v69 = (std::string *)((char *)v69 + 1);
    --v71;
  }
  while (v71);
  BOOL negate = 1;
  int v21 = 5;
LABEL_142:
  if ((v58 & 0x80) != 0) {
LABEL_143:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v65) {
    goto LABEL_149;
  }
LABEL_145:
  if (v21)
  {
LABEL_169:
    uint64_t v8 = 2;
    goto LABEL_170;
  }
  uint64_t v8 = 2;
LABEL_36:
  unsigned __int8 v23 = *a2->__current_;
  v86.__r_.__value_.__s.__data_[0] = v23;
  if (this->__icase_)
  {
    unsigned __int8 v23 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v23);
    v86.__r_.__value_.__s.__data_[0] = v23;
  }
  std::vector<char>::pointer v24 = this->__chars_.__begin_;
  unint64_t v25 = this->__chars_.__end_ - v24;
  if (v25)
  {
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    while (1)
    {
      int v26 = *v24++;
      if (v26 == v23) {
        break;
      }
      if (!--v25) {
        goto LABEL_43;
      }
    }
LABEL_103:
    BOOL negate = 1;
    goto LABEL_170;
  }
LABEL_43:
  std::regex_traits<char>::char_class_type v27 = this->__neg_mask_;
  if (v27 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v23 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v23] & v27) == 0) {
      int v28 = (v23 == 95) & (v27 >> 7);
    }
    else {
      LOBYTE(v28) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v30 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v23, end - this->__neg_chars_.__begin_);
    uint64_t v31 = v30 ? v30 : end;
    if ((v28 & 1) == 0 && v31 == end) {
      goto LABEL_103;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
  if (v33 != v32)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v23;
    }
    uint64_t v34 = (char *)v32 - (char *)v33;
    if (v34)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v33->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v35;
        ++v33;
        if (v35 >= v36) {
          goto LABEL_64;
        }
      }
      char v37 = 1;
      BOOL negate = 1;
    }
    else
    {
LABEL_64:
      char v37 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v37) {
      goto LABEL_170;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_98;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v38 = this->__equivalences_.__begin_;
  uint64_t v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v40 = (char *)this->__equivalences_.__end_ - (char *)v38;
  if (!v40)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_98;
  }
  uint64_t v41 = 0;
  unint64_t v42 = v40 / 24;
  long long v43 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = __s.__r_.__value_.__l.__size_;
  }
  if (v42 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v40 / 24;
  }
  BOOL v46 = 1;
  while (2)
  {
    uint64_t v47 = &v38[v41];
    std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
    }
    if (v44 != v48)
    {
LABEL_91:
      BOOL v46 = ++v41 < v42;
      if (v41 == v45)
      {
LABEL_92:
        if ((v39 & 0x80) == 0) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      continue;
    }
    break;
  }
  if (v49 >= 0) {
    unint64_t v50 = &v38[v41];
  }
  else {
    unint64_t v50 = (std::string *)v47->__r_.__value_.__r.__words[0];
  }
  if ((v39 & 0x80) != 0)
  {
    BOOL v81 = negate;
    std::string::size_type v53 = v44;
    uint64_t v80 = v38;
    int v54 = memcmp((const void *)v43, v50, *((size_t *)&v43 + 1));
    std::vector<std::string>::pointer v38 = v80;
    std::string::size_type v44 = v53;
    BOOL negate = v81;
    if (!v54)
    {
      BOOL negate = 1;
LABEL_93:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  if (v39)
  {
    std::__split_buffer<std::string>::pointer v51 = &__s;
    uint64_t v52 = v39;
    while (v51->__r_.__value_.__s.__data_[0] == v50->__r_.__value_.__s.__data_[0])
    {
      std::__split_buffer<std::string>::pointer v51 = (std::string *)((char *)v51 + 1);
      unint64_t v50 = (std::string *)((char *)v50 + 1);
      if (!--v52)
      {
        BOOL negate = 1;
        goto LABEL_92;
      }
    }
    goto LABEL_91;
  }
  BOOL negate = 1;
LABEL_94:
  if (!v46)
  {
LABEL_98:
    if (v86.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_170;
    }
    std::regex_traits<char>::char_class_type v55 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v86.__r_.__value_.__s.__data_[0]] & v55) == 0)
    {
      int v56 = (v55 >> 7) & 1;
      if (v86.__r_.__value_.__s.__data_[0] != 95) {
        int v56 = 0;
      }
      if (v56 != 1) {
        goto LABEL_170;
      }
    }
    goto LABEL_103;
  }
LABEL_170:
  if (negate == this->__negate_)
  {
    first = 0;
    int v79 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v79 = -995;
  }
  a2->__do_ = v79;
  a2->__node_ = first;
}

void sub_21BA628C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21BA629A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21BA62B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x21D497F90);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  int v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  int v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  size_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  size_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  size_t v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  size_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  size_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 4);
}

void sub_21BA62E5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        __n128 result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (__n128 result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    size_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB25A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21D497F90);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB25A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB24C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21D497F90);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB24C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = a2 + 1;
    int v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46) {
        operator new();
      }
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          std::basic_regex<char>::value_type v15 = (unsigned __int8 *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((unsigned __int8 *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v15 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v17 = 2;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v11 = &v3[v17];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3) {
        return (char *)a3;
      }
      size_t v18 = a1->__marked_count_ + 1;
      int v19 = *v9;
      if (v19 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v19 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v29 = 0;
      unint64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v29);
      if (v20 == v9 + 2) {
LABEL_45:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v20 != a3)
      {
        int v21 = v20 + 1;
        int v22 = *v20;
        if (v22 == 44)
        {
          int v28 = -1;
          unsigned __int8 v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20 + 1, a3, &v28);
          if (v23 != a3 && v23 + 1 != a3 && *v23 == 92 && v23[1] == 125)
          {
            size_t v25 = v28;
            size_t v24 = v29;
            if (v28 == -1)
            {
              size_t v25 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_45;
            }
            uint64_t v3 = (char *)&v23[2 * (v23[1] == 125)];
            int v26 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v26, v24, v25, end, marked_count + 1, v18, 1);
            return v3;
          }
        }
        else if (v21 != a3 && v22 == 92 && *v21 == 125)
        {
          uint64_t v3 = (char *)(v20 + 2);
          size_t v24 = v29;
          int v26 = a1;
          size_t v25 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_31;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  int v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    uint64_t v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int marked_count = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
LABEL_30:
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44.__traits_.__loc_);
        __n128 result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2) {
          return result;
        }
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int v14 = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    int v7 = *a2;
  }
LABEL_32:
  std::vector<char>::pointer end = this->__end_;
  unsigned int v20 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    __n128 result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          int v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v22 == a3) {
            goto LABEL_98;
          }
          unsigned __int8 v23 = v22;
          if (*v22 != 41) {
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int v29 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          std::vector<char>::pointer v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v30 == a3 || (unsigned __int8 v23 = v30, *v30 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v29);
        }
        --*p_open_count;
        size_t v25 = (unsigned __int8 *)(v23 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_65;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          size_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_65;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      if (v7 != 92) {
        return a2;
      }
      int v26 = a2 + 1;
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v27 = *v26;
      unsigned int v28 = v27 - 48;
      if (v27 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
LABEL_97:
        size_t v25 = a2 + 2;
        goto LABEL_61;
      }
      if ((v27 - 49) <= 8)
      {
        size_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          size_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v32 = *v25;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v28 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v25;
            unsigned int v28 = v32 + 10 * v28 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              size_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v28) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v28 > v20) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v28);
        if (v25 != v26)
        {
LABEL_57:
          __n128 result = a2;
          if (v25 == a2) {
            return result;
          }
          goto LABEL_61;
        }
      }
      int v33 = (char)*v26;
      if (v33 > 99)
      {
        if (v33 == 119)
        {
          uint64_t v34 = this;
          BOOL v35 = 0;
          goto LABEL_89;
        }
        if (v33 == 115)
        {
          unint64_t v42 = this;
          BOOL v43 = 0;
LABEL_95:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
          int v39 = started->__mask_ | 0x4000;
          goto LABEL_96;
        }
        if (v33 != 100)
        {
LABEL_90:
          uint64_t v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
          if (v41 == v26) {
            size_t v25 = a2;
          }
          else {
            size_t v25 = v41;
          }
          goto LABEL_57;
        }
        unint64_t v36 = this;
        BOOL v37 = 0;
      }
      else
      {
        if (v33 != 68)
        {
          if (v33 != 83)
          {
            if (v33 == 87)
            {
              uint64_t v34 = this;
              BOOL v35 = 1;
LABEL_89:
              int64_t v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
              v40->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          unint64_t v42 = this;
          BOOL v43 = 1;
          goto LABEL_95;
        }
        unint64_t v36 = this;
        BOOL v37 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
      int v39 = started->__mask_ | 0x400;
LABEL_96:
      started->__mask_ = v39;
      goto LABEL_97;
    }
    if (v24 == 31) {
LABEL_65:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_60:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
  size_t v25 = a2 + 1;
LABEL_61:
  size_t v31 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v25, (unsigned __int8 *)a3, end, v20 + 1, v31);
}

void sub_21BA63F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D497D80](exception, 11);
}

void sub_21BA63F9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(void *)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    std::basic_regex<char>::value_type v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:

  operator delete(begin);
}

void sub_21BA64398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CBB23D0;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26CBB23D0;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB2490;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21D497F90);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26CBB2490;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21D497F90);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__end_state<char>::~__end_state()
{
}

void PoolTable::~PoolTable(PoolTable *this)
{
  uint64_t v3 = (atomic_uint **)*((void *)this + 2);
  for (unint64_t i = *((void *)this + 3); (unint64_t)v3 < i; v3 += 3)
  {
    std::vector<std::csub_match>::size_type v4 = *v3;
    if (*v3)
    {
      if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      }
      *uint64_t v3 = 0;
      unint64_t i = *((void *)this + 3);
    }
  }
  int v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
}

uint64_t PoolTable::GetWave(PoolTable *this, unsigned int a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = v3 - v2;
  if (v3 == v2) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  unsigned int v7 = 1;
  while (*(_DWORD *)(v2 + 24 * v5 + 16) != a2)
  {
    uint64_t v5 = v7;
    BOOL v31 = v6 > v7++;
    if (!v31) {
      return 0;
    }
  }
  int v10 = (PoolCue *)(v2 + 24 * v5);
  int v11 = (uint64_t *)*((void *)this + 1);
  if (v11)
  {
    uint64_t v8 = *(void *)v10;
    if (!*(void *)v10)
    {
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v65 = 0x2B1100000AC44;
      *(_DWORD *)buf = 65537;
      int v66 = 2097153;
      std::string::size_type v67 = 0;
      int v68 = 0;
      uint64_t v12 = v11[29];
      if (0xAAAAAAAAAAAAAAABLL * ((v11[30] - v12) >> 4) <= a2)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          int v54 = 136316162;
          std::regex_traits<char>::char_class_type v55 = "SoundFontsFile.cpp";
          __int16 v56 = 1024;
          int v57 = 1123;
          __int16 v58 = 2080;
          int64_t v59 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/SoundFontsFile.cpp";
          __int16 v60 = 1024;
          int v61 = 1123;
          __int16 v62 = 2080;
          std::string::size_type v63 = "isIDGood";
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v54, 0x2Cu);
        }
      }
      else
      {
        uint64_t v13 = v12 + 48 * a2;
        unsigned int v16 = *(_DWORD *)(v13 + 32);
        int v14 = *(_DWORD *)(v13 + 36);
        std::basic_regex<char>::value_type v15 = (unsigned int *)(v13 + 32);
        LODWORD(v65) = v14;
        HIDWORD(v65) = 4 * v14;
        unsigned int v17 = *(v15 - 2);
        if (v16 > v17)
        {
          unsigned int *v15 = v17;
          unsigned int v16 = v17;
        }
        uint64_t v18 = v12 + 48 * a2;
        unsigned int v21 = *(_DWORD *)(v18 + 20);
        uint64_t v20 = (unsigned int *)(v18 + 20);
        unsigned int v19 = v21;
        unsigned int v22 = v17 - v21;
        unsigned int v23 = v20[2];
        unint64_t v24 = v23 - v21;
        unint64_t v25 = v16 - v21;
        int v26 = v23 | v16;
        BOOL v28 = ((v24 | v25) & 0x80000000) != 0 || v26 == 0;
        uint64_t v29 = *v11;
        if (*(unsigned char *)(v11[4] + 200)) {
          BOOL v30 = v29 == 0;
        }
        else {
          BOOL v30 = 1;
        }
        BOOL v31 = !v30 && v22 > 0x6000;
        int v32 = v31;
        unsigned int v53 = v32;
        char v69 = v32;
        uint64_t v33 = v11[1];
        if (v33)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          unsigned int v19 = *v20;
        }
        uint64_t v70 = v29;
        uint64_t v71 = v33;
        uint64_t v34 = (RIFFChunkHeader *)v11[35];
        char v74 = 0;
        BOOL v35 = !v28;
        if (v28) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = v24;
        }
        if (v35) {
          unint64_t v37 = v25;
        }
        else {
          unint64_t v37 = 0;
        }
        unint64_t v51 = v37;
        unint64_t v52 = v36;
        RIFFChunkHeader::SeekToOffset(v34, 2 * v19);
        if (v29)
        {
          int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 56))(v29);
          int v72 = v38;
        }
        if (v53)
        {
          unsigned int v41 = (-v38 | 0xFFFFF000) + 49152;
          unsigned int v73 = v41 >> 1;
          unsigned int v42 = v41;
        }
        else
        {
          unsigned int v41 = 4 * v22 + 192;
          unsigned int v42 = 2 * v22 + 64;
        }
        BOOL v43 = malloc_type_malloc((int)(2 * v22 + 64), 0x450E6B75uLL);
        if (!v43) {
          goto LABEL_73;
        }
        size_t v44 = v41;
        uint64_t v45 = malloc_type_malloc(v41, 0x113DC8D1uLL);
        BOOL v46 = (char *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v46)
        {
          uint64_t v47 = *(void *)v34;
          std::string::size_type v48 = (std::__shared_weak_count *)*((void *)v34 + 1);
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void *, void))(*(void *)v47 + 16))(v47, v43, v42);
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          if (v53)
          {
            memcpy(v46, v43, v44);
          }
          else
          {
            NativeInt16ToFloat32Scaled_ARM();
            if (v51 <= v52)
            {
              for (uint64_t i = 0; i != 32; ++i)
                *(_DWORD *)&v46[4 * v22 + 4 * i] = 0;
            }
            else
            {
              for (uint64_t j = 0; j != 128; j += 4)
                *(_DWORD *)&v46[4 * v51 + j] = *(_DWORD *)&v46[4 * v52 + j];
            }
          }
        }
        free(v43);
        if (!v45)
        {
LABEL_73:
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
          {
            int v54 = 136316162;
            std::regex_traits<char>::char_class_type v55 = "SoundFontsFile.cpp";
            __int16 v56 = 1024;
            int v57 = 732;
            __int16 v58 = 2080;
            int64_t v59 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/SoundFontsFile.cpp";
            __int16 v60 = 1024;
            int v61 = 732;
            __int16 v62 = 2080;
            std::string::size_type v63 = "fpStorage";
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v54, 0x2Cu);
          }
          uint64_t v45 = 0;
        }
        std::string::size_type v67 = v45;
        if (v53)
        {
          int v68 = 2 * v22;
          HIWORD(v66) = 16;
        }
        else
        {
          int v68 = 4 * v22;
        }
      }
      operator new();
    }
    return v8;
  }
  uint64_t v8 = *(void *)v10;
  if (*(void *)v10) {
    return v8;
  }
  int v39 = *(RIFFChunkHeader **)this;
  if (!*(void *)this || !*(unsigned char *)(v2 + 24 * v5 + 8)) {
    return 0;
  }
  unsigned int Offset = PoolCue::GetOffset(v10);
  if (*((_DWORD *)v39 + 6) > Offset)
  {
    RIFFChunkHeader::SeekToOffset(v39, Offset + 4);
    operator new();
  }
  uint64_t v8 = 0;
  *(void *)int v10 = 0;
  return v8;
}

void sub_21BA65D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (a2)
  {
    unint64_t v51 = *(std::__shared_weak_count **)(v49 - 192);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (a24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a24);
    }
    if (a30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a30);
    }
    __cxa_begin_catch(exception_object);
    if (atomic_fetch_add(v48 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v48 + 16))(v48);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_21BA65F6C()
{
}

uint64_t std::vector<PoolCue>::__push_back_slow_path<PoolCue>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::basic_regex<char>::value_type v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  std::vector<std::csub_match> __p = (void *)v7;
  uint64_t v12 = v7 + 24 * v2;
  unint64_t v14 = v7 + 24 * v8;
  PoolCue::PoolCue(v12, a2);
  uint64_t v13 = v12 + 24;
  std::vector<PoolCue>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v9 = a1[1];
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_21BA66084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PoolTable::AddSoundFontWave(PoolTable *this, uint64_t a2, SFCollection *a3)
{
  uint64_t v9 = 0;
  char v10 = 0;
  int v11 = 0;
  int v12 = a2;
  int v13 = 0;
  unint64_t v5 = *((void *)this + 3);
  if (v5 >= *((void *)this + 4))
  {
    uint64_t v6 = std::vector<PoolCue>::__push_back_slow_path<PoolCue>((uint64_t *)this + 2, (uint64_t)&v9);
  }
  else
  {
    PoolCue::PoolCue(*((void *)this + 3), (uint64_t)&v9);
    uint64_t v6 = v5 + 24;
    *((void *)this + 3) = v5 + 24;
  }
  *((void *)this + 3) = v6;
  uint64_t v7 = *((void *)this + 5);
  if (*((void *)this + 6) - v7 > (unint64_t)a2) {
    *(unsigned char *)(v7 + a2) = 0;
  }
  return a2;
}

void sub_21BA66130(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void SamplerPartElement::~SamplerPartElement(const void **this)
{
  ausdk::AUElement::~AUElement(this);

  JUMPOUT(0x21D497F90);
}

uint64_t VPEncoderWrapper::GetPropertyInfo(AudioCodec *this, AudioCodecPropertyID a2, unsigned int *a3, unsigned __int8 *a4)
{
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v9, (uint64_t)(this + 25), 0);
  if (*this) {
    uint64_t result = AudioCodecGetPropertyInfo(*this, a2, a3, a4);
  }
  else {
    uint64_t result = 561214580;
  }
  atomic_fetch_add((atomic_uint *volatile)(v9 + 4), 0xFFFFFFFF);
  return result;
}

void sub_21BA661F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t VPEncoderWrapper::GetProperty(AudioCodec *this, AudioCodecPropertyID a2, void *a3, unsigned int *a4, unsigned int *a5)
{
  if (a3)
  {
    CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v10, (uint64_t)(this + 25), 0);
    if (*this) {
      uint64_t result = AudioCodecGetProperty(*this, a2, a4, a3);
    }
    else {
      uint64_t result = 561214580;
    }
    atomic_fetch_add((atomic_uint *volatile)(v10 + 4), 0xFFFFFFFF);
  }
  else
  {
    unsigned __int8 v11 = 0;
    return VPEncoderWrapper::GetPropertyInfo(this, a2, a4, &v11);
  }
  return result;
}

void sub_21BA662A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t VPEncoderWrapper::SetProperty(VPEncoderWrapper *this, AudioCodecPropertyID a2, const void *a3, UInt32 a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v9 = (atomic_uint *)((char *)this + 112);
  uint64_t v8 = *((void *)this + 14);
  std::basic_regex<char>::value_type v15 = (char *)this + 112;
  char v16 = (*(uint64_t (**)(char *))(v8 + 16))((char *)this + 112);
  atomic_fetch_add(v9 + 22, 1u);
  if (v9[23])
  {
    do
      usleep(0x1F4u);
    while (*((_DWORD *)this + 51));
  }
  uint64_t v10 = *(OpaqueAudioComponentInstance **)this;
  if (!*(void *)this)
  {
    uint64_t Property = 561214580;
    goto LABEL_17;
  }
  int outPropertyData = 0;
  if (HIBYTE(a2) == 94) {
    goto LABEL_5;
  }
  UInt32 ioPropertyDataSize = 4;
  uint64_t Property = AudioCodecGetProperty(v10, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
  if (!Property)
  {
    uint64_t v10 = *(OpaqueAudioComponentInstance **)this;
    if (outPropertyData)
    {
      AudioCodecUninitialize(v10);
      uint64_t v10 = *(OpaqueAudioComponentInstance **)this;
    }
LABEL_5:
    uint64_t Property = AudioCodecSetProperty(v10, a2, a4, a3);
    if (Property)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v20 = "VPEncoderWrapper.cpp";
        __int16 v21 = 1024;
        int v22 = 274;
        int v12 = &_os_log_internal;
        int v13 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not set codec property";
LABEL_16:
        _os_log_impl(&dword_21B9BB000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
        goto LABEL_17;
      }
    }
    else
    {
      if (!outPropertyData)
      {
        uint64_t Property = 0;
        goto LABEL_17;
      }
      uint64_t Property = AudioCodecInitialize(*(AudioCodec *)this, 0, 0, 0, 0);
      if (Property && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v20 = "VPEncoderWrapper.cpp";
        __int16 v21 = 1024;
        int v22 = 280;
        int v12 = &_os_log_internal;
        int v13 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not intialize codec";
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v20 = "VPEncoderWrapper.cpp";
    __int16 v21 = 1024;
    int v22 = 266;
    int v12 = &_os_log_internal;
    int v13 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not get codec property";
    goto LABEL_16;
  }
LABEL_17:
  atomic_fetch_add((atomic_uint *volatile)this + 50, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v15);
  return Property;
}

void sub_21BA66558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 200), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

void FilterState::~FilterState(FilterState *this)
{
  *(void *)this = &unk_26CBA7F88;
  SamplerState::~SamplerState(this);

  JUMPOUT(0x21D497F90);
}

{
  *(void *)this = &unk_26CBA7F88;
  SamplerState::~SamplerState(this);
}

uint64_t FilterState::Restore(FilterState *this, const CACFDictionary *a2)
{
  uint64_t v4 = ComponentState::Restore(this, a2);
  if (*(void *)a2)
  {
    if (CACFDictionary::GetUInt32(a2, @"type", (unsigned int *)&v6)) {
      FilterState::SetFilterType(this, v6);
    }
    if (CACFDictionary::GetFloat32(a2, @"cutoff", (float *)&v6)) {
      FilterState::SetCutoffFreq((uint64_t)this, *(float *)&v6);
    }
    if (CACFDictionary::GetFloat32(a2, @"resonance", (float *)&v6)) {
      FilterState::SetResonance((uint64_t)this, *(float *)&v6);
    }
  }
  return v4;
}

_DWORD *FilterState::SetFilterType(_DWORD *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((a2 - 47) <= 0xFFFFFFF8)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v4, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      int v6 = "FilterState.cpp";
      __int16 v7 = 1024;
      int v8 = 171;
      __int16 v9 = 2080;
      uint64_t v10 = v4;
      __int16 v11 = 2080;
      int v12 = "FilterState::SetFilterType: Invalid filter type";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FilterState::SetFilterType: Invalid filter type", -10851);
  }
  if (this[23] != a2)
  {
    this[23] = a2;
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)this + 112);
    return (_DWORD *)v2();
  }
  return this;
}

void sub_21BA6683C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FilterState::SetCutoffFreq(uint64_t this, float a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(float *)(this + 96) != a2)
  {
    uint64_t v2 = this;
    float v3 = fminf(fmaxf(a2, 20.0), 20000.0);
    *(float *)(this + 96) = v3;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315650;
      unint64_t v5 = "FilterState.cpp";
      __int16 v6 = 1024;
      int v7 = 182;
      __int16 v8 = 2048;
      double v9 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::SetCutoffFreq: %f", (uint8_t *)&v4, 0x1Cu);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 112))(v2, 4161, 0);
  }
  return this;
}

uint64_t FilterState::SetResonance(uint64_t this, float a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(float *)(this + 100) != a2)
  {
    uint64_t v2 = this;
    float v3 = fminf(fmaxf(a2, -3.0), 40.0);
    *(float *)(this + 100) = v3;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315650;
      unint64_t v5 = "FilterState.cpp";
      __int16 v6 = 1024;
      int v7 = 191;
      __int16 v8 = 2048;
      double v9 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::SetResonance:  %f", (uint8_t *)&v4, 0x1Cu);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 112))(v2, 4162, 0);
  }
  return this;
}

uint64_t FilterState::Save(FilterState *this, CACFDictionary *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315650;
    __int16 v6 = "FilterState.cpp";
    __int16 v7 = 1024;
    int v8 = 113;
    __int16 v9 = 2048;
    uint64_t v10 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::Save(this=%p)", (uint8_t *)&v5, 0x1Cu);
  }
  ComponentState::Save((const __CFString **)this, a2);
  if (*((_DWORD *)this + 23) != 40) {
    CACFDictionary::AddUInt32(a2, @"type");
  }
  CACFDictionary::AddFloat32(a2, @"cutoff", *((float *)this + 24));
  CACFDictionary::AddFloat32(a2, @"resonance", *((float *)this + 25));
  return 0;
}

uint64_t FilterState::SetProperty(FilterState *this, int a2, float *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      __int16 v7 = "FilterState.cpp";
      __int16 v8 = 1024;
      int v9 = 93;
      __int16 v10 = 2080;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      uint64_t v13 = "FilterState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FilterState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4162:
      FilterState::SetResonance((uint64_t)this, *a3);
      return 1;
    case 4161:
      FilterState::SetCutoffFreq((uint64_t)this, *a3);
      return 1;
    case 4160:
      FilterState::SetFilterType(this, *(_DWORD *)a3);
      return 1;
  }

  return ComponentState::SetProperty(this, a2, a3);
}

void sub_21BA66D58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FilterState::GetProperty(FilterState *this, int a2, _DWORD *a3)
{
  switch(a2)
  {
    case 4162:
      int v3 = *((_DWORD *)this + 25);
LABEL_7:
      *a3 = v3;
      return 1;
    case 4161:
      int v3 = *((_DWORD *)this + 24);
      goto LABEL_7;
    case 4160:
      *a3 = *((_DWORD *)this + 23);
      return 1;
  }
  return ComponentState::GetProperty(this, a2, a3);
}

double FilterState::ResetToDefaults(FilterState *this)
{
  *((unsigned char *)this + 48) = 1;
  *((_DWORD *)this + 23) = 40;
  double result = -32.0000084;
  *((void *)this + 12) = 0xC0400000469C4000;
  return result;
}

void LayerState::LoadFromEXS24GroupAndDefaults()
{
}

void sub_21BA6AEE4(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C402E53C1ECLL);
  _Unwind_Resume(a1);
}

void ParamValueToScale(int a1, int a2)
{
  switch(a1)
  {
    case 4:
      if (a2 != -1000 && a2 && a2 != 1000) {
        powf((float)a2 / 1000.0, 3.0);
      }
      break;
    case 6:
      double v2 = (double)-a2;
      if (a2 >= 0) {
        double v2 = (double)a2;
      }
      float v3 = v2 / 1000.0;
      powf(v3, 4.0);
      break;
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
      if (a2 != -1000 && a2 && a2 != 1000) {
        powf((float)a2 / 1000.0, 4.0);
      }
      break;
    default:
      return;
  }
}

uint64_t AURemoteIO::RemoveAudioChannelLayout(AURemoteIO *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(AURemoteIO *, uint64_t, uint64_t, void))(*(void *)this + 536))(this, a2, a3, 0);
}

uint64_t AURemoteIO::SetAudioChannelLayout(AURemoteIO *this, const AudioChannelLayout *a2, uint64_t a3, AudioChannelLayout *a4)
{
  int v6 = (int)a2;
  if (a4) {
    int v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, a2);
  }
  else {
    int v8 = 0;
  }
  if ((v6 - 3) <= 0xFFFFFFFD) {
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  }
  if (a3 >= 2 || v6 == 2 && !a3 || v6 == 1 && a3 == 1) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  if (a3)
  {
    int v9 = (AURemoteIO *)((char *)this + 128);
    unsigned int v10 = 1;
  }
  else
  {
    int v9 = (AURemoteIO *)((char *)this + 80);
    unsigned int v10 = 0;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement(v9, v10);
  if (!a4)
  {
    ausdk::AUScope::SafeGetElement((AURemoteIO *)((char *)this + 80), a3);
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v13);
    CAAudioChannelLayout::operator=();
    MEMORY[0x21D497690](v13);
    return (*(uint64_t (**)(AURemoteIO *, uint64_t, void))(*(void *)this + 576))(this, a3, 0);
  }
  if (*(_DWORD *)(Element + 108) == v8)
  {
    ausdk::AUScope::SafeGetElement((AURemoteIO *)((char *)this + 80), a3);
    CAAudioChannelLayout::operator=();
    return (*(uint64_t (**)(AURemoteIO *, uint64_t, void))(*(void *)this + 576))(this, a3, 0);
  }
  return 4294956445;
}

uint64_t *std::unique_ptr<AURemoteIO::Stop(void)::$_0,std::default_delete<AURemoteIO::Stop(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    float v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x21D497F90](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<AURemoteIO::Stop(void)::$_0>(dispatch_queue_s *,AURemoteIO::Stop(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = a1;
  return std::unique_ptr<AURemoteIO::Stop(void)::$_0,std::default_delete<AURemoteIO::Stop(void)::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void AudioIssueDetectorClientReset(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    uint64_t v2 = (void (*)(uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;
    v2(a1);
  }
}

uint64_t AudioIssueDetectorClientSetNodeFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  }
  if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
    return 0xFFFFFFFFLL;
  }
  int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;

  return v8(a1, a2, a3, a4, 4096);
}

void AudioIssueDetectorClientInitialize(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    uint64_t v2 = (void (*)(uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;
    v2(a1);
  }
}

uint64_t AQMEAudioCapturer(uint64_t a1, int a2)
{
  if ((a2 - 1) > 2) {
    uint64_t v3 = 290;
  }
  else {
    uint64_t v3 = qword_21BAB9078[a2 - 1];
  }
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_243);
  }
  int v4 = (uint64_t (*)(uint64_t, const char *, const char *, uint64_t, void, uint64_t))NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction;
  if (!NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
    return 0;
  }

  return v4(v3, "AudioCapture/AudioToolbox", "aurio", 1667327590, 0, a1);
}

uint64_t AudioIssueDetectorClientUpdateReportingSessions(uint64_t a1, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  }
  if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
    return 0xFFFFFFFFLL;
  }
  int v4 = (uint64_t (*)(uint64_t, uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;

  return v4(a1, a2);
}

void *std::vector<long long>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    size_t v6 = 8 * a3;
    __int16 v7 = (char *)operator new(8 * a3);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[8 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_21BA6BAEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  double result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    double result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,AURemoteIO::IOThread::IOThread(AURemoteIO&,caulk::thread::attributes const&,caulk::mach::os_workgroup_managed const&)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 24) && *(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x21D497F90);
  }
  return result;
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (caulk::thread *)(a1 + 14);
  caulk::thread::join((caulk::thread *)(a1 + 14));
  caulk::thread::~thread(v2);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(a1 + 6));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2850;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  double result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    double result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction = result;
    }
  }
  return result;
}

float GetMeterValues(int a1, PowerMeter *this, PowerMeter *a3, uint64_t a4, float result)
{
  if (this != a3)
  {
    __int16 v7 = (double *)this;
    do
    {
      double v9 = v7[14];
      if (a1 == 1892)
      {
        PowerMeter::LinearToDB((PowerMeter *)v7, v9);
        *(float *)&double v10 = v10;
        *(_DWORD *)a4 = LODWORD(v10);
        PowerMeter::LinearToDB((PowerMeter *)v7, v7[15]);
      }
      else
      {
        float v12 = v9;
        *(float *)a4 = v12;
        double v11 = v7[15];
      }
      double result = v11;
      *(float *)(a4 + 4) = result;
      a4 += 8;
      v7 += 16;
    }
    while (v7 != (double *)a3);
  }
  return result;
}

void MIGVariableLengthVars::~MIGVariableLengthVars(MIGVariableLengthVars *this)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(this);

  JUMPOUT(0x21D497F90);
}

void AURemoteIO::Cleanup(atomic_ullong *this)
{
  mach_msg_return_t v8;
  mach_msg_return_t v9;
  NSObject *v10;
  void v11[8];

  void v11[7] = *MEMORY[0x263EF8340];
  if (kRIOClientSubsystem)
  {
    uint64_t v2 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = &_os_log_internal;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v11[0]) = 136315650;
    *(void *)((char *)v11 + 4) = "AURemoteIO.cpp";
    WORD2(v11[1]) = 1024;
    *(_DWORD *)((char *)&v11[1] + 6) = 1255;
    WORD1(v11[2]) = 2048;
    *(void *)((char *)&v11[2] + 4) = this;
    _os_log_impl(&dword_21B9BB000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->AURemoteIO(%p)::Cleanup", (uint8_t *)v11, 0x1Cu);
  }
LABEL_7:
  (*(void (**)(atomic_ullong *))(*this + 448))(this);
  AUConverterBase::CloseConverters(this);
  atomic_ullong v3 = this[94];
  if (v3)
  {
    (*(void (**)(atomic_ullong))(*(void *)v3 + 8))(v3);
    this[94] = 0;
  }
  atomic_ullong v4 = this[95];
  if (v4)
  {
    (*(void (**)(atomic_ullong))(*(void *)v4 + 8))(v4);
    this[95] = 0;
  }
  RIOServer::GetServerPort((const char **)gRIOServer);
  unsigned int ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
  int v6 = *((_DWORD *)this + 178);
  *(void *)((char *)&v11[4] + 4) = 0;
  memset((char *)v11 + 4, 0, 32);
  v11[3] = *MEMORY[0x263EF80C8];
  LODWORD(v11[4]) = v6;
  mach_port_t reply_port = mig_get_reply_port();
  v11[1] = __PAIR64__(reply_port, ServerPort);
  LODWORD(v11[0]) = 5395;
  v11[2] = 0x157C400000000;
  if (MEMORY[0x263EF8B00])
  {
    voucher_mach_msg_set((mach_msg_header_t *)v11);
    mach_port_t reply_port = HIDWORD(v11[1]);
  }
  int v8 = mach_msg((mach_msg_header_t *)v11, 275, 0x24u, 0x2Cu, reply_port, *MEMORY[0x263EFC0D0], 0);
  double v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(HIDWORD(v11[1]));
LABEL_23:
    if (v9 != 268435460) {
      goto LABEL_27;
    }
    if ((v11[0] & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x263EF8960], HIDWORD(v11[1]));
    }
    goto LABEL_26;
  }
  if (v8)
  {
    mig_dealloc_reply_port(HIDWORD(v11[1]));
    goto LABEL_23;
  }
  if (HIDWORD(v11[2]) != 88104 || (v11[0] & 0x80000000) != 0 || *(void *)((char *)v11 + 4) != 36 || LODWORD(v11[4])) {
LABEL_26:
  }
    mach_msg_destroy((mach_msg_header_t *)v11);
LABEL_27:
  _CheckRPCError("Cleanup");
  if (kRIOClientSubsystem)
  {
    double v10 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      return;
    }
  }
  else
  {
    double v10 = &_os_log_internal;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v11[0]) = 136315394;
    *(void *)((char *)v11 + 4) = "AURemoteIO.cpp";
    WORD2(v11[1]) = 1024;
    *(_DWORD *)((char *)&v11[1] + 6) = 1263;
    _os_log_impl(&dword_21B9BB000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-AURemoteIO::Cleanup", (uint8_t *)v11, 0x12u);
  }
}

void SharedAudioBuffer::~SharedAudioBuffer(xpc_object_t *this)
{
  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_26CBADDE0;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);

  SharableMemoryBlock::~SharableMemoryBlock(this);
}

void MIGVariableLengthVars2<unsigned char [1024]>::~MIGVariableLengthVars2(MIGVariableLengthRefs *a1)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t ___ZN11IPCAUServer19UnpublishOutputUnitEP28OpaqueAudioComponentInstance_block_invoke(uint64_t a1)
{
  mach_msg_return_t v32;
  mach_msg_return_t v33;
  char *v35;
  int64_t v36;
  void *v38[2];
  UInt32 componentFlagsMask;
  unsigned char buf[12];
  unsigned char rcv_name[20];
  long long v42;
  UInt32 v43;
  uint64_t v44;

  size_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = CADeprecated::TSingleton<IPCAUServer>::instance();
  uint64_t v3 = *(void *)(a1 + 32);
  if (kLocalInterAppAudioScope)
  {
    atomic_ullong v4 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    atomic_ullong v4 = &_os_log_internal;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "IPCAUServer.cpp";
    *(_WORD *)rcv_name = 1024;
    *(_DWORD *)&rcv_name[2] = 306;
    *(_WORD *)&rcv_name[6] = 2048;
    *(void *)&rcv_name[8] = v3;
    _os_log_impl(&dword_21B9BB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: unpublishing output unit %p", buf, 0x1Cu);
  }
LABEL_7:
  int v5 = *(uint64_t **)(v2 + 240);
  int v6 = *(uint64_t **)(v2 + 248);
  if (v5 == v6) {
    return 0;
  }
  __int16 v7 = 0;
  int v8 = 0;
  double v9 = 0;
  do
  {
    uint64_t v10 = *v5;
    if (*(void *)(*v5 + 104) == v3)
    {
      double v11 = (long long *)(v10 + 24);
      if (v8 >= v9)
      {
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v7) >> 2) + 1;
        if (v13 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * (((char *)v9 - (char *)v7) >> 2) > v13) {
          unint64_t v13 = 0x999999999999999ALL * (((char *)v9 - (char *)v7) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v7) >> 2) >= 0x666666666666666) {
          unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          if (v14 > 0xCCCCCCCCCCCCCCCLL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::basic_regex<char>::value_type v15 = (char *)operator new(20 * v14);
        }
        else
        {
          std::basic_regex<char>::value_type v15 = 0;
        }
        long long v16 = *v11;
        unsigned int v17 = (AudioComponentDescription *)&v15[4 * (((char *)v8 - (char *)v7) >> 2)];
        v17->componentFlagsMasint k = *((_DWORD *)v11 + 4);
        *(_OWORD *)&v17->componentType = v16;
        if (v8 == v7)
        {
          uint64_t v20 = &v15[4 * (((char *)v8 - (char *)v7) >> 2)];
        }
        else
        {
          uint64_t v18 = &v15[4 * (((char *)v8 - (char *)v7) >> 2)];
          do
          {
            long long v19 = *(_OWORD *)&v8[-1].componentType;
            uint64_t v20 = v18 - 20;
            *((_DWORD *)v18 - 1) = v8[-1].componentFlagsMask;
            *(_OWORD *)(v18 - 20) = v19;
            --v8;
            v18 -= 20;
          }
          while (v8 != v7);
        }
        double v9 = (AudioComponentDescription *)&v15[20 * v14];
        int v8 = v17 + 1;
        if (v7) {
          operator delete(v7);
        }
        __int16 v7 = (AudioComponentDescription *)v20;
      }
      else
      {
        long long v12 = *v11;
        v8->componentFlagsMasint k = *(_DWORD *)(v10 + 40);
        *(_OWORD *)&v8->componentType = v12;
        ++v8;
      }
    }
    ++v5;
  }
  while (v5 != v6);
  if (v7 != v8)
  {
    LODWORD(v21) = 0;
    int v22 = v7;
    while (kLocalInterAppAudioScope)
    {
      uint64_t v23 = *(NSObject **)kLocalInterAppAudioScope;
      if (*(void *)kLocalInterAppAudioScope) {
        goto LABEL_37;
      }
LABEL_40:
      unint64_t v24 = *(char **)(v2 + 240);
      unint64_t v25 = *(char **)(v2 + 248);
      while (1)
      {
        if (v24 == v25)
        {
          unsigned int v27 = -50;
LABEL_47:
          char v28 = 1;
          goto LABEL_48;
        }
        uint64_t v26 = *(void *)v24;
        if (CAComponentDescription::Matches((CAComponentDescription *)(*(void *)v24 + 24), v22)) {
          break;
        }
        v24 += 8;
      }
      if (*(int *)(v26 + 112) > 0)
      {
        unsigned int v27 = -66750;
        goto LABEL_47;
      }
      int v29 = AURegistrationServerConnection_ServerPort();
      long long v30 = *(_OWORD *)&v22->componentType;
      componentFlagsMasint k = v22->componentFlagsMask;
      *(_OWORD *)int v38 = v30;
      *(void *)&rcv_name[12] = *MEMORY[0x263EF80C8];
      unsigned int v42 = v30;
      BOOL v43 = componentFlagsMask;
      mach_port_t reply_port = mig_get_reply_port();
      *(void *)buf = 5395;
      *(_DWORD *)&buf[8] = v29;
      *(_DWORD *)rcv_name = reply_port;
      *(void *)&rcv_name[4] = 0x15F9300000000;
      if (MEMORY[0x263EF8B00])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        mach_port_t reply_port = *(_DWORD *)rcv_name;
      }
      int v32 = mach_msg((mach_msg_header_t *)buf, 275, 0x34u, 0x2Cu, reply_port, *MEMORY[0x263EFC0D0], 0);
      uint64_t v33 = v32;
      if ((v32 - 268435458) <= 0xE && ((1 << (v32 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)rcv_name);
LABEL_68:
        if (v33 != 268435460) {
          goto LABEL_72;
        }
        if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
          mach_port_deallocate(*MEMORY[0x263EF8960], *(mach_port_name_t *)rcv_name);
        }
LABEL_71:
        mach_msg_destroy((mach_msg_header_t *)buf);
        goto LABEL_72;
      }
      if (v32)
      {
        mig_dealloc_reply_port(*(mach_port_t *)rcv_name);
        goto LABEL_68;
      }
      if (*(_DWORD *)&rcv_name[8] != 90103
        || (*(_DWORD *)buf & 0x80000000) != 0
        || *(_DWORD *)&buf[4] != 36
        || *(_DWORD *)&buf[8]
        || v42)
      {
        goto LABEL_71;
      }
LABEL_72:
      if (*(void *)(v26 + 72)) {
        AudioComponentRelease();
      }
      if (*(void *)v24) {
        (*(void (**)(void))(**(void **)v24 + 8))(*(void *)v24);
      }
      BOOL v35 = *(char **)(v2 + 248);
      unint64_t v36 = v35 - (v24 + 8);
      if (v35 != v24 + 8) {
        memmove(v24, v24 + 8, v35 - (v24 + 8));
      }
      char v28 = 0;
      unsigned int v27 = 0;
      *(void *)(v2 + 248) = &v24[v36];
LABEL_48:
      if (((v21 == 0) & v28) != 0) {
        uint64_t v21 = v27;
      }
      else {
        uint64_t v21 = v21;
      }
      if (++v22 == v8) {
        goto LABEL_81;
      }
    }
    uint64_t v23 = &_os_log_internal;
LABEL_37:
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      MEMORY[0x21D4971E0](v38, v22);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAUServer.cpp";
      *(_WORD *)rcv_name = 1024;
      *(_DWORD *)&rcv_name[2] = 279;
      *(_WORD *)&rcv_name[6] = 2080;
      *(void **)&rcv_name[8] = v38[0];
      _os_log_impl(&dword_21B9BB000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: unpublishing AU %s", buf, 0x1Cu);
      if (v38[0]) {
        free(v38[0]);
      }
    }
    goto LABEL_40;
  }
  uint64_t v21 = 0;
LABEL_81:
  if (v7) {
    operator delete(v7);
  }
  return v21;
}

void sub_21BA6CA74(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUAudioTapIO::RemovePropertyValue(AUAudioTapIO *this, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 2222)
  {
    uint64_t v5 = *((void *)this + 163);
    if (!v5) {
      return 0;
    }
    if (!*((unsigned char *)this + 17))
    {
      *((void *)this + 163) = 0;
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      v8[6] = 0;
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v8, 0);
    }
    return 4294956447;
  }
  else
  {
    return AUConverterBase::RemovePropertyValue(this, a2, a3, a4);
  }
}

void sub_21BA6CC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  _Unwind_Resume(a1);
}

uint64_t AUAudioTapIO::SetProperty(AUAudioTapIO *this, int a2, uint64_t a3, uint64_t a4, const int *a5, uint64_t a6)
{
  if (a2 == 2222)
  {
    if (!*((unsigned char *)this + 17))
    {
      uint64_t v11 = *((void *)this + 163);
      *((void *)this + 163) = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      operator new();
    }
    return 4294956447;
  }
  if (a2 != 2003) {
    return AURemoteIO::SetProperty(this, a2, a3, a4, a5, a6);
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  uint64_t v7 = 4294956419;
  if (a3 == 1 && a4 == 1)
  {
    int v8 = *((_DWORD *)this + 153);
    unsigned int v9 = v8 & 0xFFFFFFFE | (*a5 != 0);
    if (v9 != v8)
    {
      *((_DWORD *)this + 153) = v9;
      (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t))(*(void *)this + 432))(this, 2003, 1, 1);
    }
    return 0;
  }
  return v7;
}

void sub_21BA6D098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16)
{
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a9);
  applesauce::CF::DataRef::~DataRef(&a16);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t AUAudioTapIO::GetProperty(AUAudioTapIO *this, int a2, int a3, unsigned int a4, int *a5, float a6)
{
  switch(a2)
  {
    case 2222:
      int v8 = (AT::AudioTapClient *)*((void *)this + 163);
      uint64_t v6 = 4294956445;
      if (v8)
      {
        if (AT::AudioTapClient::GetObjC(v8, a5)) {
          return 0;
        }
        else {
          return 4294956445;
        }
      }
      return v6;
    case 2006:
      uint64_t v6 = 4294956419;
      if (a3 != 1 || a4 != 1) {
        return v6;
      }
      uint64_t v6 = 0;
      int v7 = *((void *)this + 163) != 0;
      goto LABEL_14;
    case 2003:
      uint64_t v6 = 4294956419;
      if (a3 != 1 || a4 != 1) {
        return v6;
      }
      uint64_t v6 = 0;
      int v7 = *((_DWORD *)this + 153) & 1;
LABEL_14:
      *a5 = v7;
      return v6;
  }

  return AURemoteIO::GetProperty(this, a2, a3, a4, a5, a6);
}

uint64_t AUAudioTapIO::GetPropertyInfo(AUAudioTapIO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  switch(a2)
  {
    case 2222:
      uint64_t result = 0;
      *a6 = 1;
      unsigned int v7 = 8;
LABEL_12:
      *a5 = v7;
      return result;
    case 2006:
      uint64_t result = 4294956419;
      if (a3 == 1 && a4 == 1)
      {
        uint64_t result = 0;
        *a6 = 0;
        goto LABEL_11;
      }
      break;
    case 2003:
      uint64_t result = 4294956419;
      if (a3 == 1 && a4 == 1)
      {
        uint64_t result = 0;
        *a6 = 1;
LABEL_11:
        unsigned int v7 = 4;
        goto LABEL_12;
      }
      break;
    default:
      return AURemoteIO::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  return result;
}

void AUAudioTapIO::~AUAudioTapIO(AUAudioTapIO *this)
{
  AUAudioTapIO::~AUAudioTapIO(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBA8710;
  uint64_t v2 = *((void *)this + 163);
  *((void *)this + 163) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  AURemoteIO::~AURemoteIO(this);
}

uint64_t AURemoteIO::HostStateChange::RealtimeMessenger_Perform(AURemoteIO::HostStateChange *this)
{
  uint64_t result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v4, *((_DWORD *)this + 5));
  if (v7)
  {
    uint64_t v2 = *(void **)(v7 + 16);
    uint64_t v3 = v2[59];
    if (v3) {
      (*(void (**)(void))(*(void *)v3 + 16))(v2[59]);
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void))(*v2 + 432))(v2, 2013, 0, 0);
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
  }
  if (v6)
  {
    if (v5) {
      atomic_fetch_add(v5, 0xFFFFFFFF);
    }
  }
  return result;
}

void sub_21BA6D440(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15 && a14) {
    atomic_fetch_add(a14, 0xFFFFFFFF);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21BA6D430);
}

void AURemoteIO::HostStateChange::~HostStateChange(AURemoteIO::HostStateChange *this)
{
}

uint64_t AUVoiceIO::Version(AUVoiceIO *this)
{
  return 65792;
}

uint64_t AUVoiceIO::DoProcessEncoderAndMetadata(AUVoiceIO *this, unsigned int *a2, const AudioBufferList *a3, AudioTimeStamp *a4)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  int v121 = 0;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u);
  uint64_t v10 = *((unsigned int *)this + 516);
  double mRateScalar = 1.0;
  if ((a4->mFlags & 4) != 0) {
    double mRateScalar = a4->mRateScalar;
  }
  double v12 = *(double *)(Element + 80);
  int v13 = *(_DWORD *)(Element + 92);
  int v119 = *(_DWORD *)(Element + 104);
  uint64_t v14 = *(unsigned int *)(Element + 112);
  double mSampleTime = a4->mSampleTime;
  if (*((unsigned char *)this + 2152))
  {
    *((double *)this + 265) = mSampleTime;
    *((void *)this + 268) = a4->mHostTime;
    *((unsigned char *)this + 2152) = 0;
    *((_DWORD *)this + 535) = 0;
    unsigned int v16 = *a2;
    *((_DWORD *)this + 534) = *a2;
    double v17 = (double)v16;
    double v18 = mSampleTime - (double)v16;
    *((double *)this + 266) = v18;
  }
  else
  {
    double v18 = *((double *)this + 266);
    LODWORD(v9) = *((_DWORD *)this + 534);
    double v17 = (double)v9;
  }
  double v19 = mSampleTime - v18;
  if (!v10)
  {
    if (v19 > v17)
    {
      *((void *)this + 268) = a4->mHostTime;
      double v27 = *((double *)this + 265);
    }
    else
    {
      if (mSampleTime >= v18)
      {
        double v56 = *((double *)this + 265);
        goto LABEL_122;
      }
      double v27 = floor(v12 * (double)(a4->mHostTime - *((void *)this + 268)) / (mRateScalar * 24000000.0));
      double v19 = *((double *)this + 265);
    }
    double v56 = v19 + v27;
    *((_DWORD *)this + 534) = 0;
    double v17 = 0.0;
LABEL_122:
    uint64_t result = 0;
    *((double *)this + 266) = mSampleTime;
    *((double *)this + 265) = v56 + v17;
    a4->double mSampleTime = v56 + v17;
    *((_DWORD *)this + 534) = *a2;
    return result;
  }
  double v20 = (double)(20 * v10);
  if (v19 <= v17 || v19 > v20)
  {
    if (v19 <= v20)
    {
      if (mSampleTime >= v18) {
        goto LABEL_58;
      }
      int v57 = *((_DWORD *)this + 520);
      if (v57)
      {
        *((_DWORD *)this + 520) = 0;
        unsigned int v58 = *((_DWORD *)this + 521) + v57;
        *((_DWORD *)this + 521) = v58;
        unsigned int v59 = *((_DWORD *)this + 518);
        BOOL v25 = v58 >= v59;
        unsigned int v60 = v58 - v59;
        if (v25) {
          *((_DWORD *)this + 521) = v60;
        }
      }
      UInt64 mHostTime = a4->mHostTime;
      *((double *)this + 265) = *((double *)this + 265)
                              + floor(v12 * (double)(mHostTime - *((void *)this + 268)) / (mRateScalar * 24000000.0));
      *((void *)this + 268) = mHostTime;
    }
    else
    {
      int v22 = *((_DWORD *)this + 520);
      if (v22)
      {
        *((_DWORD *)this + 520) = 0;
        unsigned int v23 = *((_DWORD *)this + 521) + v22;
        *((_DWORD *)this + 521) = v23;
        unsigned int v24 = *((_DWORD *)this + 518);
        BOOL v25 = v23 >= v24;
        unsigned int v26 = v23 - v24;
        if (v25) {
          *((_DWORD *)this + 521) = v26;
        }
      }
      *((void *)this + 268) = a4->mHostTime;
      *((double *)this + 265) = v19 + *((double *)this + 265);
    }
    *((_DWORD *)this + 535) = 0;
    goto LABEL_58;
  }
  int v28 = *((_DWORD *)this + 520);
  unsigned int v29 = v28 + (v19 - v17);
  if (v28)
  {
    *((_DWORD *)this + 520) = 0;
    unsigned int v30 = *((_DWORD *)this + 521) + v28;
    *((_DWORD *)this + 521) = v30;
    unsigned int v31 = *((_DWORD *)this + 518);
    BOOL v25 = v30 >= v31;
    unsigned int v32 = v30 - v31;
    if (v25) {
      *((_DWORD *)this + 521) = v32;
    }
  }
  unsigned int v33 = v29 % v10;
  *((_DWORD *)this + 535) = 0;
  if (v29 % v10)
  {
    unsigned int v120 = v14;
    uint64_t v117 = &v112;
    MEMORY[0x270FA5388](Element);
    *(void *)buf = 0;
    UInt32 mNumberBuffers = a3->mNumberBuffers;
    UInt32 mNumberChannels = a3->mBuffers[0].mNumberChannels;
    *(_DWORD *)buf = mNumberBuffers;
    *(_DWORD *)&buf[8] = mNumberChannels;
    *(_DWORD *)uint64_t v123 = 4 * v10;
    *(void *)&v123[4] = (((unint64_t)&v112 - ((v34 + 31) & 0x7FFFFFFF0)) & 0xFFFFFFFFFFFFFFF3) + 16;
    if (mNumberBuffers)
    {
      unint64_t v37 = (void **)&v123[4];
      UInt32 v38 = mNumberBuffers;
      do
      {
        bzero(*v37, *((unsigned int *)v37 - 1));
        v37 += 2;
        --v38;
      }
      while (v38);
    }
    if (mNumberBuffers == *((_DWORD *)this + 519))
    {
      int v39 = *((_DWORD *)this + 518);
      unsigned int v40 = v39 - *((_DWORD *)this + 520);
      if (v40)
      {
        LODWORD(v118) = v13;
        if (v40 >= v33) {
          unsigned int v41 = v33;
        }
        else {
          unsigned int v41 = v40;
        }
        unsigned int v42 = v39 - *((_DWORD *)this + 522);
        LODWORD(v116) = v41;
        if (v42 >= v41) {
          uint64_t v43 = v41;
        }
        else {
          uint64_t v43 = v42;
        }
        if (mNumberBuffers)
        {
          unsigned int v115 = v42;
          unint64_t v44 = 0;
          uint64_t v45 = (const void **)&v123[4];
          do
          {
            BOOL v46 = *v45;
            v45 += 2;
            memcpy((void *)(*((void *)this + 262)+ 4 * (*((_DWORD *)this + 522) + *((_DWORD *)this + 518) * v44++)), v46, 4 * v43);
            unint64_t v47 = *((unsigned int *)this + 519);
          }
          while (v44 < v47);
          if (v116 > v115 && v47)
          {
            unint64_t v48 = 0;
            size_t v49 = 4 * (v116 - v43);
            unint64_t v50 = (uint64_t *)&v123[4];
            do
            {
              uint64_t v51 = *v50;
              v50 += 2;
              memcpy((void *)(*((void *)this + 262) + 4 * (*((_DWORD *)this + 518) * v48++)), (const void *)(v51 + 4 * v43), v49);
            }
            while (v48 < *((unsigned int *)this + 519));
          }
        }
        int v52 = (int)v116;
        *((_DWORD *)this + 520) += v116;
        unsigned int v53 = *((_DWORD *)this + 522) + v52;
        *((_DWORD *)this + 522) = v53;
        unsigned int v54 = *((_DWORD *)this + 518);
        BOOL v25 = v53 >= v54;
        unsigned int v55 = v53 - v54;
        int v13 = (int)v118;
        if (v25) {
          *((_DWORD *)this + 522) = v55;
        }
      }
    }
    double mSampleTime = a4->mSampleTime;
    uint64_t v14 = v120;
  }
  *((void *)this + 268) = a4->mHostTime - (unint64_t)(mRateScalar * ((double)v33 * 24000000.0) / v12);
  *((double *)this + 265) = mSampleTime - (double)v33;
LABEL_58:
  *((double *)this + 266) = mSampleTime;
  *((_DWORD *)this + 534) = *a2;
  UInt32 v62 = a3->mNumberBuffers;
  int v63 = *((_DWORD *)this + 519);
  uint32_t v113 = a2;
  if (v62 == v63)
  {
    unsigned int v64 = *a2;
    if (*a2)
    {
      int v65 = *((_DWORD *)this + 518);
      unsigned int v66 = v65 - *((_DWORD *)this + 520);
      if (v66)
      {
        LODWORD(v118) = v13;
        unsigned int v120 = v14;
        if (v66 >= v64) {
          unsigned int v67 = v64;
        }
        else {
          unsigned int v67 = v66;
        }
        unsigned int v68 = v65 - *((_DWORD *)this + 522);
        if (v68 >= v67) {
          uint64_t v69 = v67;
        }
        else {
          uint64_t v69 = v68;
        }
        if (v62)
        {
          unint64_t v70 = 0;
          p_mData = &a3->mBuffers[0].mData;
          do
          {
            int v72 = *p_mData;
            p_mData += 2;
            memcpy((void *)(*((void *)this + 262)+ 4 * (*((_DWORD *)this + 522) + *((_DWORD *)this + 518) * v70++)), v72, 4 * v69);
            unint64_t v73 = *((unsigned int *)this + 519);
          }
          while (v70 < v73);
          a2 = v113;
          if (v67 > v68)
          {
            if (v73)
            {
              unint64_t v74 = 0;
              uint64_t v75 = &a3->mBuffers[0].mData;
              do
              {
                uint64_t v76 = (char *)*v75;
                v75 += 2;
                memcpy((void *)(*((void *)this + 262) + 4 * (*((_DWORD *)this + 518) * v74++)), &v76[4 * v69], 4 * (v67 - v69));
              }
              while (v74 < *((unsigned int *)this + 519));
            }
          }
        }
        *((_DWORD *)this + 520) += v67;
        unsigned int v77 = *((_DWORD *)this + 522) + v67;
        *((_DWORD *)this + 522) = v77;
        unsigned int v78 = *((_DWORD *)this + 518);
        BOOL v25 = v77 >= v78;
        unsigned int v79 = v77 - v78;
        uint64_t v14 = v120;
        int v13 = (int)v118;
        if (v25) {
          *((_DWORD *)this + 522) = v79;
        }
      }
    }
  }
  *a2 = 0;
  uint64_t v80 = *((void *)this + 264);
  *(_DWORD *)(v80 + 36) = 0;
  unsigned int v81 = v13 & 0xFFFFFFDF;
  if ((v13 & 0xFFFFFFDF) == 0xC) {
    *(_DWORD *)(*((void *)this + 218) + 36) = 0;
  }
  if (*((unsigned char *)this + 1303)) {
    *((_DWORD *)this + 448) = 0;
  }
  unsigned int v82 = *((_DWORD *)this + 520);
  if (v82 >= v10)
  {
    unsigned int v87 = 0;
    LODWORD(mSampleTime) = *((_DWORD *)this + 535);
    double v88 = (double)*(unint64_t *)&mSampleTime;
    Float64 v89 = *((double *)this + 265) + v88;
    *((Float64 *)this + 265) = v89;
    UInt64 v90 = *((void *)this + 268) + (unint64_t)(mRateScalar * (v88 * 24000000.0) / v12);
    *((void *)this + 268) = v90;
    a4->double mSampleTime = v89;
    a4->UInt64 mHostTime = v90;
    uint64_t v91 = *(void *)(v80 + 40);
    uint64_t v116 = (void **)(v80 + 40);
    uint64_t v112 = v91;
    uint64_t v118 = (AUVoiceIO *)((char *)this + 1872);
    int v114 = v10 * v119;
    unsigned int v115 = 4 * v10;
    LODWORD(v117) = v81;
    while (1)
    {
      int v92 = *(_DWORD *)(v80 + 24);
      if (v92 == *((_DWORD *)this + 519))
      {
        unsigned int v120 = v87;
        uint64_t v93 = v14;
        if (v82 >= v10) {
          unsigned int v94 = v10;
        }
        else {
          unsigned int v94 = v82;
        }
        unsigned int v95 = *((_DWORD *)this + 518) - *((_DWORD *)this + 521);
        if (v95 >= v94) {
          uint64_t v96 = v94;
        }
        else {
          uint64_t v96 = v95;
        }
        if (v92)
        {
          unint64_t v97 = 0;
          std::__split_buffer<std::string> v98 = v116;
          do
          {
            int64_t v99 = *v98;
            v98 += 2;
            memcpy(v99, (const void *)(*((void *)this + 262)+ 4 * (*((_DWORD *)this + 521) + *((_DWORD *)this + 518) * v97++)), 4 * v96);
            unint64_t v100 = *((unsigned int *)this + 519);
          }
          while (v97 < v100);
          a2 = v113;
          if (v94 > v95)
          {
            if (v100)
            {
              unint64_t v101 = 0;
              unsigned int v102 = (uint64_t *)v116;
              do
              {
                uint64_t v103 = *v102;
                v102 += 2;
                memcpy((void *)(v103 + 4 * v96), (const void *)(*((void *)this + 262) + 4 * (*((_DWORD *)this + 518) * v101++)), 4 * (v94 - v96));
              }
              while (v101 < *((unsigned int *)this + 519));
            }
          }
        }
        *((_DWORD *)this + 520) -= v94;
        unsigned int v104 = *((_DWORD *)this + 521) + v94;
        *((_DWORD *)this + 521) = v104;
        unsigned int v105 = *((_DWORD *)this + 518);
        BOOL v25 = v104 >= v105;
        unsigned int v106 = v104 - v105;
        if (v25) {
          *((_DWORD *)this + 521) = v106;
        }
        uint64_t v14 = v93;
        unsigned int v81 = v117;
        unsigned int v87 = v120;
      }
      else
      {
        unsigned int v94 = 0;
      }
      if (v94 != v10) {
        break;
      }
      unsigned int v107 = *a2 + v10;
      *a2 = v107;
      *((_DWORD *)this + 535) = v107;
      if (*((unsigned char *)this + 1303))
      {
        *(_DWORD *)buf = 0;
        int v121 = (void *)(*((void *)this + 221) + *((unsigned int *)this + 448));
        unint64_t v108 = v118;
        MetadataHandler::Process<float>((uint64_t)v118, *(const float **)(*((void *)this + 264) + 40), v10);
        MetadataHandler::GetMetadata(v108, &v121, (unsigned int *)buf);
        *((_DWORD *)this + 448) += *(_DWORD *)buf;
      }
      if (v81 == 12)
      {
        uint64_t v109 = *((void *)this + 218);
        switch(v14)
        {
          case 0x20:
            Float32ToNativeInt32Scaled_ARM();
            break;
          case 0x18:
            Float32ToNativeInt24_Portable();
            break;
          case 0x10:
            Float32ToNativeInt16Scaled_ARM();
            break;
        }
        v87 += v114;
        *(_DWORD *)(v109 + 36) = *a2 * v119;
      }
      else
      {
        *(void *)(v80 + 40) += 4 * v10;
        *(_DWORD *)(v80 + 36) += v115;
      }
      unsigned int v82 = *((_DWORD *)this + 520);
      if (v82 < v10)
      {
        uint64_t v84 = v112;
        __int16 v85 = v116;
        goto LABEL_117;
      }
    }
    if (kRIOClientSubsystem)
    {
      uint64_t v111 = *(NSObject **)kRIOClientSubsystem;
      if (!*(void *)kRIOClientSubsystem) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v111 = &_os_log_internal;
    }
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AURemoteIO.cpp";
      *(_WORD *)uint64_t v123 = 1024;
      *(_DWORD *)&v123[2] = 3424;
      *(_WORD *)&v123[6] = 1024;
      *(_DWORD *)&v123[8] = v10;
      _os_log_impl(&dword_21B9BB000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::DoProcessEncoderAndMetadata: could not read expected blocksiz %d", buf, 0x18u);
    }
    return 0xFFFFFFFFLL;
  }
  UInt64 v83 = *((void *)this + 268);
  a4->double mSampleTime = *((Float64 *)this + 265);
  a4->UInt64 mHostTime = v83;
  uint64_t v86 = *(void *)(v80 + 40);
  __int16 v85 = (void *)(v80 + 40);
  uint64_t v84 = v86;
LABEL_117:
  uint64_t result = 0;
  *__int16 v85 = v84;
  return result;
}

uint64_t AUVoiceIO::InitializeEncoderAndMetadata(AUVoiceIO *this, const CAStreamBasicDescription *a2, const __CFString *a3, double *a4)
{
  unsigned int v4 = a3;
  uint64_t v95 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 2152) = 1;
  double v7 = *(double *)a2;
  *((_DWORD *)this + 516) = 0;
  *(void *)&buf.componentType = 0;
  if (!GetVoiceIOPreferredHWBlockSizeInSeconds(*((_DWORD *)this + 329), (double *)&buf.componentType, a3, a4))*((_DWORD *)this + 516) = vcvtpd_s64_f64(*(double *)&buf.componentType * v7); {
  if (kRIOClientSubsystem)
  }
  {
    int v8 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_9;
    }
  }
  else
  {
    int v8 = &_os_log_internal;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *(double *)a2;
    int v10 = *((_DWORD *)this + 516);
    buf.componentType = 136315906;
    *(void *)&buf.componentSubType = "AURemoteIO.cpp";
    LOWORD(buf.componentFlags) = 1024;
    *(UInt32 *)((char *)&buf.componentFlags + 2) = 3154;
    HIWORD(buf.componentFlagsMask) = 2048;
    *(double *)uint64_t v93 = v9;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)unsigned int v94 = v10;
    _os_log_impl(&dword_21B9BB000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::inputBusFormat.mSampleRate = %f, InitializeEncoderAndMetadata:force voiceio block size to: %d", (uint8_t *)&buf, 0x22u);
  }
LABEL_9:
  if (!*((unsigned char *)this + 1352))
  {
    *((_DWORD *)this + 438) = *((_DWORD *)a2 + 4);
    int v15 = *((_DWORD *)this + 516);
    if (!v15) {
      goto LABEL_34;
    }
    int v16 = v15 + v15 * *((_DWORD *)this + 517);
    int v17 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 518) = v16;
    *((_DWORD *)this + 519) = v17;
    *((_DWORD *)this + 522) = 0;
    *((void *)this + 260) = 0;
    double v18 = (void *)*((void *)this + 262);
    uint64_t v19 = *((void *)this + 263) - (void)v18;
    uint64_t v20 = (v16 * v17);
    if (v20 == v19 >> 2)
    {
      if (v19 >= 1)
      {
        unint64_t v21 = (unint64_t)v19 >> 2;
        uint64_t v22 = ((unint64_t)v19 >> 2) + 1;
        bzero(*((void **)this + 262), 4 * (v22 - ((unint64_t)v19 > 3)));
LABEL_32:
        bzero(v18, 4 * (v22 - (v21 != 0)));
      }
    }
    else
    {
      std::valarray<float>::resize((uint64_t)this + 2096, v20);
      double v18 = (void *)*((void *)this + 262);
      uint64_t v29 = *((void *)this + 263) - (void)v18;
      if (v29 >= 1)
      {
        unint64_t v21 = (unint64_t)v29 >> 2;
        uint64_t v22 = ((unint64_t)v29 >> 2) + 1;
        goto LABEL_32;
      }
    }
    *((_DWORD *)this + 520) = 0;
    *((_DWORD *)this + 522) = 0;
    unsigned int v30 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 343), (const CAStreamBasicDescription *)*((unsigned int *)this + 347));
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 264, v30);
    CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 264));
LABEL_34:
    if (kRIOClientSubsystem)
    {
      unsigned int v31 = *(NSObject **)kRIOClientSubsystem;
      if (!*(void *)kRIOClientSubsystem)
      {
LABEL_42:
        uint64_t v34 = (const char *)*((unsigned int *)a2 + 3);
        int v35 = v4;
        if ((v34 & 0xFFFFFFDF) == 0xC)
        {
          unint64_t v36 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", v34, (const CAStreamBasicDescription *)*((unsigned int *)a2 + 7));
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 218, v36);
          CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 218));
          int v35 = v4;
        }
LABEL_87:
        if (!*((unsigned char *)this + 1303)) {
          return 0;
        }
        *((_DWORD *)this + 448) = 0;
        *((_DWORD *)this + 440) = 0;
        *((void *)this + 256) = 0;
        *((unsigned char *)this + 2056) = 0;
        if (*((unsigned char *)this + 1352))
        {
          int v55 = 0;
          unsigned int v56 = *((_DWORD *)a2 + 5);
          *((_DWORD *)this + 512) = v56;
          *((_DWORD *)this + 452) = v56 * v35;
        }
        else
        {
          int v57 = (unsigned int *)((char *)this + 2048);
          unsigned int v56 = *((_DWORD *)this + 516);
          if (v56)
          {
            if (v56 - 4097 >= 0xFFFFF01F)
            {
              uint64_t v58 = 0;
              while (1)
              {
                unsigned int v59 = vpMetadataSupportedBlockSizeLookupTable[v58];
                if (v59 == v56)
                {
                  int v55 = 0;
                  goto LABEL_108;
                }
                if (v59 > v56) {
                  break;
                }
                if (++v58 == 23)
                {
                  unsigned int v56 = 0;
                  int v55 = 0;
                  goto LABEL_109;
                }
              }
              int v55 = 0;
              unsigned int v56 = vpMetadataSupportedBlockSizeLookupTable[(v58 - 1)];
            }
            else
            {
              int v55 = -1;
            }
LABEL_108:
            *int v57 = v56;
LABEL_109:
            int v35 = *((_DWORD *)this + 517);
          }
          else
          {
            if (v4 - 4097 >= 0xFFFFF01F)
            {
              uint64_t v60 = 0;
              while (1)
              {
                unsigned int v61 = vpMetadataSupportedBlockSizeLookupTable[v60];
                if (v61 == v4)
                {
                  int v55 = 0;
                  goto LABEL_112;
                }
                if (v61 > v4) {
                  break;
                }
                if (++v60 == 23)
                {
                  unsigned int v56 = 0;
                  int v55 = 0;
                  goto LABEL_114;
                }
              }
              int v55 = 0;
              unsigned int v56 = vpMetadataSupportedBlockSizeLookupTable[(v60 - 1)];
            }
            else
            {
              int v55 = -1;
LABEL_112:
              unsigned int v56 = v4;
            }
            *int v57 = v56;
LABEL_114:
            *((_DWORD *)this + 452) = 2 * v4;
            int v35 = 2;
          }
        }
        if (kRIOClientSubsystem)
        {
          int v65 = *(NSObject **)kRIOClientSubsystem;
          if (!*(void *)kRIOClientSubsystem) {
            goto LABEL_121;
          }
        }
        else
        {
          int v65 = &_os_log_internal;
        }
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          buf.componentType = 136315650;
          *(void *)&buf.componentSubType = "AURemoteIO.cpp";
          LOWORD(buf.componentFlags) = 1024;
          *(UInt32 *)((char *)&buf.componentFlags + 2) = 3240;
          HIWORD(buf.componentFlagsMask) = 1024;
          *(_DWORD *)uint64_t v93 = v56;
          _os_log_impl(&dword_21B9BB000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: metadata block std::string::size_type size = %d\n", (uint8_t *)&buf, 0x18u);
        }
LABEL_121:
        if (v55)
        {
          if (kRIOClientSubsystem)
          {
            unsigned int v66 = *(NSObject **)kRIOClientSubsystem;
            if (!*(void *)kRIOClientSubsystem) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            unsigned int v66 = &_os_log_internal;
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            buf.componentType = 136315394;
            *(void *)&buf.componentSubType = "AURemoteIO.cpp";
            LOWORD(buf.componentFlags) = 1024;
            *(UInt32 *)((char *)&buf.componentFlags + 2) = 3244;
            _os_log_impl(&dword_21B9BB000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::Initialize metadata handler failed", (uint8_t *)&buf, 0x12u);
          }
          return 0xFFFFFFFFLL;
        }
        double v67 = *(double *)a2;
        unsigned int v68 = *((_DWORD *)this + 512);
        PowerMeter::SetSampleRate((AUVoiceIO *)((char *)this + 1872), *(double *)a2);
        PowerMeter::Reset((AUVoiceIO *)((char *)this + 1872));
        if (v67 <= 48000.0)
        {
          int v69 = 1;
          if (v68 >= 0x401)
          {
            unsigned int v70 = v68;
            do
            {
              ++v69;
              BOOL v71 = v70 > 0x801;
              v70 >>= 1;
            }
            while (v71);
          }
          *((_DWORD *)this + 509) = v69;
          operator new();
        }
        *((_DWORD *)this + 510) = -1;
        *((_DWORD *)this + 440) = 24 * v35;
        if (*((_DWORD *)this + 516))
        {
LABEL_143:
          uint64_t v80 = (CADeprecated::CABufferList *)CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 343), (const CAStreamBasicDescription *)*((unsigned int *)this + 347));
          unsigned int v81 = (void *)*((void *)this + 225);
          *((void *)this + 225) = v80;
          if (v81)
          {
            std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v81);
            uint64_t v80 = (CADeprecated::CABufferList *)*((void *)this + 225);
          }
          CADeprecated::CABufferList::AllocateBuffers(v80);
          unint64_t v82 = (*((_DWORD *)this + 440) * v35);
          uint64_t v83 = *((void *)this + 221);
          unint64_t v84 = *((void *)this + 222) - v83;
          if (v82 <= v84)
          {
            if (v82 < v84) {
              *((void *)this + 222) = v83 + v82;
            }
          }
          else
          {
            std::vector<unsigned char>::__append((unint64_t *)this + 221, v82 - v84);
          }
          uint64_t Property = 0;
          *((_DWORD *)this + 464) = 1;
          *((unsigned char *)this + 2056) = 1;
          return Property;
        }
        int v72 = *((_DWORD *)this + 452);
        int v73 = *((_DWORD *)a2 + 7);
        *((_DWORD *)this + 454) = v72;
        *((_DWORD *)this + 455) = v73;
        *((_DWORD *)this + 458) = 0;
        *((void *)this + 228) = 0;
        unint64_t v74 = (void *)*((void *)this + 230);
        uint64_t v75 = *((void *)this + 231) - (void)v74;
        uint64_t v76 = (v73 * v72);
        if (v76 == v75 >> 2)
        {
          if (v75 >= 1)
          {
            unint64_t v77 = (unint64_t)v75 >> 2;
            uint64_t v78 = ((unint64_t)v75 >> 2) + 1;
            bzero(*((void **)this + 230), 4 * (v78 - ((unint64_t)v75 > 3)));
LABEL_141:
            bzero(v74, 4 * (v78 - (v77 != 0)));
          }
        }
        else
        {
          std::valarray<float>::resize((uint64_t)this + 1840, v76);
          unint64_t v74 = (void *)*((void *)this + 230);
          uint64_t v79 = *((void *)this + 231) - (void)v74;
          if (v79 >= 1)
          {
            unint64_t v77 = (unint64_t)v79 >> 2;
            uint64_t v78 = ((unint64_t)v79 >> 2) + 1;
            goto LABEL_141;
          }
        }
        *((_DWORD *)this + 456) = 0;
        *((_DWORD *)this + 458) = 0;
        goto LABEL_143;
      }
    }
    else
    {
      unsigned int v31 = &_os_log_internal;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v32 = *((_DWORD *)this + 516);
      if (!v32) {
        unsigned int v32 = v4;
      }
      int v33 = *((_DWORD *)a2 + 4);
      buf.componentType = 136316162;
      *(void *)&buf.componentSubType = "AURemoteIO.cpp";
      LOWORD(buf.componentFlags) = 1024;
      *(UInt32 *)((char *)&buf.componentFlags + 2) = 3198;
      HIWORD(buf.componentFlagsMask) = 1024;
      *(_DWORD *)uint64_t v93 = v4;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v32;
      *(_WORD *)unsigned int v94 = 1024;
      *(_DWORD *)&v94[2] = v33;
      _os_log_impl(&dword_21B9BB000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: input bus output is pcm, max # of output frames from vp = %d, max # of output frames from VoiceIO = %d, max # of output frame byte std::string::size_type size = %d\n", (uint8_t *)&buf, 0x24u);
    }
    goto LABEL_42;
  }
  *((unsigned char *)this + 1728) = 0;
  unsigned int v87 = (char *)this + 1512;
  char v88 = (*(uint64_t (**)(void))(*((void *)this + 189) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 400, 1u);
  while (*((_DWORD *)this + 401))
    usleep(0x1F4u);
  *(void *)&buf.componentFlags = 0;
  if (*((_DWORD *)this + 404) != 1819304813 || *((_DWORD *)this + 414) == 1819304813)
  {
    uint64_t Property = 560226676;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    v89[0] = 136315394;
    *(void *)&v89[1] = "VPEncoderWrapper.cpp";
    __int16 v90 = 1024;
    int v91 = 63;
    int v13 = &_os_log_internal;
    uint64_t v14 = "%25s:%-5d  vpencoderwrapper::initialize: input or output bad fmt";
LABEL_55:
    _os_log_impl(&dword_21B9BB000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)v89, 0x12u);
    goto LABEL_56;
  }
  long long v23 = *((_OWORD *)this + 104);
  *(_OWORD *)((char *)this + 1416) = *((_OWORD *)this + 103);
  *(_OWORD *)((char *)this + 1432) = v23;
  long long v24 = *(_OWORD *)((char *)this + 1624);
  *((_OWORD *)this + 91) = *(_OWORD *)((char *)this + 1608);
  BOOL v25 = (AudioCodec *)((char *)this + 1400);
  *((unsigned char *)this + 1412) = 0;
  *((void *)this + 181) = *((void *)this + 210);
  *((_OWORD *)this + 92) = v24;
  *((void *)this + 186) = *((void *)this + 205);
  *((_DWORD *)this + 352) = v4;
  unsigned int v26 = (OpaqueAudioComponentInstance *)*((void *)this + 175);
  if (v26)
  {
    AudioComponentInstanceDispose(v26);
    *BOOL v25 = 0;
  }
  OSType v27 = *((_DWORD *)this + 356);
  buf.componentType = 1634037347;
  buf.componentSubType = v27;
  buf.componentManufacturer = 1634758764;
  Next = AudioComponentFindNext(0, &buf);
  if (Next)
  {
    uint64_t Property = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 175);
    if (Property)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      v89[0] = 136315394;
      *(void *)&v89[1] = "VPEncoderWrapper.cpp";
      __int16 v90 = 1024;
      int v91 = 85;
      int v13 = &_os_log_internal;
      uint64_t v14 = "%25s:%-5d  vpencoderwrapper::initialize: could not create encoder instance";
      goto LABEL_55;
    }
    int v37 = *((_DWORD *)this + 367);
    if ((v37 & 0x20) != 0) {
      *((_DWORD *)this + 367) = v37 & 0xFFFFFFDF;
    }
    uint64_t Property = AudioCodecInitialize(*v25, (const AudioStreamBasicDescription *)((char *)this + 1456), (const AudioStreamBasicDescription *)((char *)this + 1416), 0, 0);
    if (Property)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      v89[0] = 136315394;
      *(void *)&v89[1] = "VPEncoderWrapper.cpp";
      __int16 v90 = 1024;
      int v91 = 93;
      int v13 = &_os_log_internal;
      uint64_t v14 = "%25s:%-5d  vpencoderwrapper::initialize: could not initialize codec instance";
      goto LABEL_55;
    }
    UInt32 ioPropertyDataSize = 4;
    uint64_t Property = AudioCodecGetProperty(*((AudioCodec *)this + 175), 0x70616B62u, &ioPropertyDataSize, (char *)this + 1504);
    if (Property)
    {
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      v89[0] = 136315394;
      *(void *)&v89[1] = "VPEncoderWrapper.cpp";
      __int16 v90 = 1024;
      int v91 = 98;
      int v13 = &_os_log_internal;
      uint64_t v14 = "%25s:%-5d  vpencoderwrapper::initialize: could not get codec max output pkt byte size property";
      goto LABEL_55;
    }
    unsigned int v62 = *((_DWORD *)this + 359);
    unsigned int v63 = vcvtps_u32_f32((float)*((unsigned int *)this + 352) / (float)v62);
    int v64 = v62 * v63;
    v63 += 3;
    *((_DWORD *)this + 375) = v63;
    *((_DWORD *)this + 374) = v64;
    *((_DWORD *)this + 422) = v63;
    *((_DWORD *)this + 423) = *((_DWORD *)this + 376);
    *((_DWORD *)this + 425) = v64;
    *((unsigned char *)this + 1412) = 1;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      v89[0] = 136315394;
      *(void *)&v89[1] = "VPEncoderWrapper.cpp";
      __int16 v90 = 1024;
      int v91 = 82;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::initialize: could not find matching codec", (uint8_t *)v89, 0x12u);
    }
    uint64_t Property = 4294957891;
  }
LABEL_56:
  atomic_fetch_add((atomic_uint *volatile)this + 400, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v87);
  int v35 = *((_DWORD *)this + 422);
  int v38 = *((_DWORD *)this + 423);
  if (kRIOClientSubsystem)
  {
    int v39 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_62;
    }
  }
  else
  {
    int v39 = &_os_log_internal;
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    buf.componentType = 136315906;
    *(void *)&buf.componentSubType = "AURemoteIO.cpp";
    LOWORD(buf.componentFlags) = 1024;
    *(UInt32 *)((char *)&buf.componentFlags + 2) = 3168;
    HIWORD(buf.componentFlagsMask) = 1024;
    *(_DWORD *)uint64_t v93 = v35;
    *(_WORD *)&v93[4] = 1024;
    *(_DWORD *)&v93[6] = v38;
    _os_log_impl(&dword_21B9BB000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: input bus output is compressed, max # of output packets = %d, max # of output packet byte std::string::size_type size = %d\n", (uint8_t *)&buf, 0x1Eu);
  }
LABEL_62:
  if (!Property)
  {
    unint64_t v41 = *((unsigned int *)this + 422);
    unsigned int v42 = (char *)*((void *)this + 214);
    uint64_t v43 = (unsigned char *)*((void *)this + 213);
    unint64_t v44 = (v42 - v43) >> 4;
    if (v41 <= v44)
    {
      if (v41 >= v44)
      {
LABEL_86:
        unsigned int v54 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 415), (const CAStreamBasicDescription *)*((unsigned int *)this + 419));
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 217, v54);
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 217));
        *((unsigned char *)this + 1728) = 1;
        goto LABEL_87;
      }
      unsigned int v53 = &v43[16 * v41];
    }
    else
    {
      unint64_t v45 = v41 - v44;
      uint64_t v46 = *((void *)this + 215);
      if (v41 - v44 > (v46 - (uint64_t)v42) >> 4)
      {
        uint64_t v47 = v46 - (void)v43;
        if (v47 >> 3 > v41) {
          unint64_t v41 = v47 >> 3;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v41;
        }
        if (v48 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        size_t v49 = (char *)operator new(16 * v48);
        unint64_t v50 = &v49[16 * v44];
        uint64_t v51 = &v49[16 * v48];
        bzero(v50, 16 * v45);
        int v52 = &v50[16 * v45];
        if (v42 != v43)
        {
          do
          {
            *((_OWORD *)v50 - 1) = *((_OWORD *)v42 - 1);
            v50 -= 16;
            v42 -= 16;
          }
          while (v42 != v43);
          unsigned int v42 = (char *)*((void *)this + 213);
        }
        *((void *)this + 213) = v50;
        *((void *)this + 214) = v52;
        *((void *)this + 215) = v51;
        if (v42) {
          operator delete(v42);
        }
        goto LABEL_86;
      }
      bzero(*((void **)this + 214), 16 * v45);
      unsigned int v53 = &v42[16 * v45];
    }
    *((void *)this + 214) = v53;
    goto LABEL_86;
  }
  if (kRIOClientSubsystem)
  {
    unsigned int v40 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      return Property;
    }
  }
  else
  {
    unsigned int v40 = &_os_log_internal;
  }
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    buf.componentType = 136315394;
    *(void *)&buf.componentSubType = "AURemoteIO.cpp";
    LOWORD(buf.componentFlags) = 1024;
    *(UInt32 *)((char *)&buf.componentFlags + 2) = 3172;
    _os_log_impl(&dword_21B9BB000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::Initialize encoder failed", (uint8_t *)&buf, 0x12u);
  }
  return Property;
}

void sub_21BA6F654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  atomic_fetch_add((atomic_uint *volatile)(v49 + 1600), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a49);
  _Unwind_Resume(a1);
}

uint64_t AUVoiceIO::VPFormatConvert(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a2 + 5);
  *(unsigned char *)(a1 + 1352) = v4 != 1;
  uint64_t v5 = (const CAStreamBasicDescription *)(a1 + 1360);
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(a1 + 1392) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 1376) = v7;
  *(_OWORD *)(a1 + 1360) = v6;
  int v8 = *((_DWORD *)a2 + 7);
  *(void *)(a1 + 1360) = *(void *)a2;
  *(_OWORD *)(a1 + 1368) = xmmword_21BAB6C50;
  *(_DWORD *)(a1 + 1384) = 4;
  *(_DWORD *)(a1 + 1388) = v8;
  *(void *)(a1 + 1392) = 32;
  if (v8 == 1) {
    *(_DWORD *)(a1 + 1372) = 9;
  }
  if (v4 != 1)
  {
    long long v9 = *(_OWORD *)(a1 + 1376);
    *(_OWORD *)(a1 + 1608) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 1624) = v9;
    *(void *)(a1 + 1640) = *(void *)(a1 + 1392);
    long long v11 = *a2;
    long long v10 = a2[1];
    *(void *)(a1 + 1680) = *((void *)a2 + 4);
    *(_OWORD *)(a1 + 1648) = v11;
    *(_OWORD *)(a1 + 1664) = v10;
  }
  long long v12 = *(_OWORD *)v5;
  long long v13 = *(_OWORD *)(a1 + 1376);
  *(void *)(a3 + 32) = *(void *)(a1 + 1392);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  if (kRIOClientSubsystem)
  {
    uint64_t v14 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = &_os_log_internal;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 1352)) {
      int v15 = "compressed";
    }
    else {
      int v15 = "pcm";
    }
    CAFormatter::CAFormatter((CAFormatter *)&v17, v5);
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    uint64_t v19 = "AURemoteIO.cpp";
    __int16 v20 = 1024;
    int v21 = 3128;
    __int16 v22 = 2080;
    long long v23 = v15;
    __int16 v24 = 2080;
    BOOL v25 = v17;
    _os_log_impl(&dword_21B9BB000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::VPFormatConvert: client output format is %s, vp uplink output format is %s\n", buf, 0x26u);
    if (v17) {
      free(v17);
    }
  }
  return 0;
}

BOOL AUVoiceIO::ValidFormat(AUVoiceIO *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if (a2 == 2 && a3 == 1) {
    return 1;
  }
  int v6 = gLinkedBeforeApex;
  if (gLinkedBeforeApex < 0)
  {
    int v6 = NSVersionOfLinkTimeLibrary("AudioToolbox") < 19398656;
    gLinkedBeforeApex = v6;
  }
  return v6 || a4->mFramesPerPacket == 1;
}

uint64_t AUVoiceIO::ComplexRender(AUVoiceIO *this, unsigned int *a2, const AudioTimeStamp *a3, int a4, unsigned int a5, unsigned int *a6, AudioStreamPacketDescription *a7, AudioBufferList *a8, void *__dst, unsigned int *a10)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  if (a4 != 1) {
    return 4294956419;
  }
  uint64_t v111 = 0;
  if (*((unsigned char *)this + 1303))
  {
    int v15 = (void *)*((void *)this + 221);
    uint64_t v111 = v15;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u);
  int v110 = *(_DWORD *)(Element + 92);
  int v18 = *(_DWORD *)(Element + 112);
  uint64_t v19 = IPCAUSharedMemoryBase::immutableAudioBufferList(*((IPCAUSharedMemoryBase **)this + 95), 0, a5);
  int v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 != a8->mNumberBuffers) {
    return 4294967246;
  }
  uint64_t v21 = v19;
  LODWORD(v22) = *(_DWORD *)(v19 + 12);
  if (*((_DWORD *)this + 516))
  {
    long long v23 = 0;
LABEL_9:
    if (a8->mNumberBuffers)
    {
      unint64_t v24 = 0;
      unsigned int v25 = v110 & 0xFFFFFFDF;
      uint64_t v26 = v21 + 16;
      uint64_t v27 = 40;
      do
      {
        int v28 = *(void **)((char *)&a8[-1].mNumberBuffers + v27);
        if (!v28)
        {
          if (*((unsigned char *)this + 1352))
          {
            unsigned int v32 = (void *)(*((void *)this + 217) + v27);
            LODWORD(v22) = *((_DWORD *)v32 - 1);
            uint64_t v33 = *v32;
          }
          else
          {
            if (v25 == 12)
            {
              uint64_t v35 = *((void *)this + 218);
            }
            else
            {
              if (!*((_DWORD *)this + 516))
              {
                uint64_t v33 = *(void *)(v26 + v27 - 40);
                goto LABEL_29;
              }
              uint64_t v35 = *((void *)this + 264);
            }
            uint64_t v33 = *(void *)(v35 + v27);
          }
LABEL_29:
          *(void *)((char *)&a8[-1].mNumberBuffers + v27) = v33;
          goto LABEL_30;
        }
        if (*((unsigned char *)this + 1352))
        {
          uint64_t v29 = (const void **)(*((void *)this + 217) + v27);
          LODWORD(v22) = *((_DWORD *)v29 - 1);
          unsigned int v30 = *v29;
          size_t v31 = v22;
        }
        else
        {
          if (v25 == 12)
          {
            uint64_t v34 = *((void *)this + 218);
            if (*((_DWORD *)this + 516)) {
              size_t v22 = *(unsigned int *)(v34 + 36);
            }
            else {
              size_t v22 = v22;
            }
            goto LABEL_25;
          }
          if (*((_DWORD *)this + 516))
          {
            uint64_t v34 = *((void *)this + 264);
            size_t v22 = *(unsigned int *)(v34 + 36);
LABEL_25:
            memcpy(v28, *(const void **)(v34 + v27), v22);
            goto LABEL_30;
          }
          unsigned int v30 = *(const void **)(v26 + v27 - 40);
          size_t v31 = v22;
        }
        memcpy(v28, v30, v31);
LABEL_30:
        *(_DWORD *)((char *)&a8[-1] + v27 - 4) = v22;
        ++v24;
        v27 += 16;
      }
      while (v24 < a8->mNumberBuffers);
    }
    if (*((unsigned char *)this + 1303))
    {
      int v37 = (char *)*((void *)this + 221);
      uint64_t v111 = v37;
      long long v23 = (_DWORD *)((char *)this + 1792);
    }
    else
    {
      int v37 = (char *)v111;
    }
    uint64_t appended = 0;
    if (a10 && __dst && v37)
    {
      if (v23)
      {
        if (*a10 >= *v23) {
          size_t v54 = *v23;
        }
        else {
          size_t v54 = *a10;
        }
        *a10 = v54;
        memcpy(__dst, v37, v54);
        if (v54 >= *v23)
        {
          return 0;
        }
        else
        {
          memmove(v37, &v37[v54], (*v23 - v54));
          uint64_t appended = 0;
          *v23 -= v54;
        }
      }
      else
      {
        uint64_t appended = 0;
        *a10 = 0;
      }
    }
    return appended;
  }
  int v108 = v18;
  if (!*((unsigned char *)this + 1303)) {
    goto LABEL_75;
  }
  if (*((unsigned char *)this + 1352))
  {
    if (v20 == *((_DWORD *)this + 455))
    {
      long long v23 = 0;
      if (a5)
      {
        int v38 = *((_DWORD *)this + 454);
        unsigned int v39 = v38 - *((_DWORD *)this + 456);
        if (v39)
        {
          uint64_t v95 = a7;
          uint64_t v103 = v19;
          if (v39 >= a5) {
            unsigned int v40 = a5;
          }
          else {
            unsigned int v40 = v38 - *((_DWORD *)this + 456);
          }
          unsigned int v41 = v38 - *((_DWORD *)this + 458);
          if (v41 >= v40) {
            uint64_t v42 = v40;
          }
          else {
            uint64_t v42 = v41;
          }
          if (v20)
          {
            unint64_t v43 = 0;
            unint64_t v44 = (const void **)(v19 + 16);
            do
            {
              unint64_t v45 = *v44;
              v44 += 2;
              memcpy((void *)(*((void *)this + 230)+ 4 * (*((_DWORD *)this + 458) + *((_DWORD *)this + 454) * v43++)), v45, 4 * v42);
              unint64_t v46 = *((unsigned int *)this + 455);
            }
            while (v43 < v46);
            if (v40 > v41 && v46)
            {
              unint64_t v47 = 0;
              unint64_t v48 = (uint64_t *)(v103 + 16);
              do
              {
                uint64_t v49 = *v48;
                v48 += 2;
                memcpy((void *)(*((void *)this + 230) + 4 * (*((_DWORD *)this + 454) * v47++)), (const void *)(v49 + 4 * v42), 4 * (v40 - v42));
              }
              while (v47 < *((unsigned int *)this + 455));
            }
          }
          *((_DWORD *)this + 456) += v40;
          unsigned int v50 = *((_DWORD *)this + 458) + v40;
          *((_DWORD *)this + 458) = v50;
          unsigned int v51 = *((_DWORD *)this + 454);
          long long v23 = 0;
          BOOL v52 = v50 >= v51;
          unsigned int v53 = v50 - v51;
          if (v52) {
            *((_DWORD *)this + 458) = v53;
          }
          uint64_t v21 = v103;
          a7 = v95;
        }
      }
      goto LABEL_76;
    }
LABEL_75:
    long long v23 = 0;
    goto LABEL_76;
  }
  if (!v15) {
    goto LABEL_75;
  }
  uint64_t v104 = v19;
  if (*((_DWORD *)this + 512) == a5)
  {
    *((_DWORD *)this + 448) = 0;
    MetadataHandler::Process<float>((uint64_t)this + 1872, *(const float **)(v19 + 16), a5);
    MetadataHandler::GetMetadata((AUVoiceIO *)((char *)this + 1872), &v111, (unsigned int *)this + 448);
  }
  else
  {
    ABLRingBuffer<float>::WriteInto((unsigned int *)this + 454, a5, (_DWORD *)v19);
    unsigned int v75 = *((_DWORD *)this + 513) + a5;
    *((_DWORD *)this + 513) = v75;
    unsigned int v76 = *((_DWORD *)this + 512);
    if (v75 > v76)
    {
      unint64_t v77 = (unsigned int *)((char *)this + 1792);
      unsigned int v107 = (AUVoiceIO *)((char *)this + 1872);
      unint64_t v97 = a7;
      int64_t v99 = a6;
      do
      {
        unsigned int v78 = 0;
        if (v76)
        {
          uint64_t v79 = *((void *)this + 225);
          int v80 = *(_DWORD *)(v79 + 24);
          if (v80 == *((_DWORD *)this + 455))
          {
            unsigned int v81 = *((_DWORD *)this + 456);
            if (v81)
            {
              if (v81 >= v76) {
                unsigned int v78 = v76;
              }
              else {
                unsigned int v78 = *((_DWORD *)this + 456);
              }
              unsigned int v82 = *((_DWORD *)this + 454) - *((_DWORD *)this + 457);
              if (v82 >= v78) {
                uint64_t v83 = v78;
              }
              else {
                uint64_t v83 = v82;
              }
              if (v80)
              {
                unsigned int v102 = *((_DWORD *)this + 454) - *((_DWORD *)this + 457);
                unint64_t v84 = 0;
                __int16 v85 = (uint64_t *)(v79 + 40);
                uint64_t v86 = (void **)(v79 + 40);
                do
                {
                  unsigned int v87 = *v86;
                  v86 += 2;
                  memcpy(v87, (const void *)(*((void *)this + 230)+ 4 * (*((_DWORD *)this + 457) + *((_DWORD *)this + 454) * v84++)), 4 * v83);
                  unint64_t v88 = *((unsigned int *)this + 455);
                }
                while (v84 < v88);
                a7 = v97;
                if (v78 > v102)
                {
                  if (v88)
                  {
                    unint64_t v89 = 0;
                    do
                    {
                      uint64_t v90 = *v85;
                      v85 += 2;
                      memcpy((void *)(v90 + 4 * v83), (const void *)(*((void *)this + 230) + 4 * (*((_DWORD *)this + 454) * v89++)), 4 * (v78 - v83));
                    }
                    while (v89 < *((unsigned int *)this + 455));
                  }
                }
              }
              *((_DWORD *)this + 456) -= v78;
              unsigned int v91 = *((_DWORD *)this + 457) + v78;
              *((_DWORD *)this + 457) = v91;
              unsigned int v92 = *((_DWORD *)this + 454);
              BOOL v52 = v91 >= v92;
              unsigned int v93 = v91 - v92;
              unint64_t v77 = (unsigned int *)((char *)this + 1792);
              if (v52) {
                *((_DWORD *)this + 457) = v93;
              }
              a6 = v99;
            }
            else
            {
              unsigned int v78 = 0;
            }
          }
        }
        if (v78 != *((_DWORD *)this + 512)) {
          break;
        }
        *((_DWORD *)this + 448) = 0;
        MetadataHandler::Process<float>((uint64_t)v107, *(const float **)(*((void *)this + 225) + 40), v78);
        MetadataHandler::GetMetadata(v107, &v111, v77);
        unsigned int v94 = *((_DWORD *)this + 513) - v78;
        *((_DWORD *)this + 513) = v94;
        unsigned int v76 = *((_DWORD *)this + 512);
      }
      while (v94 > v76);
    }
  }
  long long v23 = (_DWORD *)((char *)this + 1792);
  uint64_t v21 = v104;
LABEL_76:
  if (!*((unsigned char *)this + 1352))
  {
    if ((v110 & 0xFFFFFFDF) == 0xC)
    {
      switch(v108)
      {
        case 32:
          Float32ToNativeInt32Scaled_ARM();
          break;
        case 24:
          Float32ToNativeInt24_Portable();
          LODWORD(v22) = 3 * a5;
          break;
        case 16:
          Float32ToNativeInt16Scaled_ARM();
          LODWORD(v22) = 2 * a5;
          break;
      }
    }
    goto LABEL_9;
  }
  *(void *)unsigned int v106 = v23;
  uint64_t v55 = *((void *)this + 217);
  unsigned int v56 = (AudioStreamPacketDescription *)*((void *)this + 213);
  atomic_fetch_add((atomic_uint *volatile)this + 401, 1u);
  *((_DWORD *)this + 424) = 0;
  if (*((_DWORD *)this + 400))
  {
    int v57 = CADefaultLog();
    uint64_t v58 = v57;
    long long v23 = *(_DWORD **)v106;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      uint64_t v117 = "VPEncoderWrapper.cpp";
      __int16 v118 = 1024;
      int v119 = 126;
      _os_log_impl(&dword_21B9BB000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d vpencoderwrapper: process: tryer acquire failed", buf, 0x12u);
    }
    goto LABEL_114;
  }
  uint64_t v96 = a7;
  std::__split_buffer<std::string> v98 = a6;
  unsigned int v59 = *((_DWORD *)this + 368) * a5;
  uint64_t v105 = v21;
  uint64_t v109 = v55;
  if (!v59)
  {
    int v61 = 0;
    int v60 = 0;
    goto LABEL_113;
  }
  int v60 = 0;
  int v61 = 0;
  unsigned int v62 = *(char **)(v55 + 40);
  unsigned int v63 = *(char **)(v21 + 16);
  int v64 = v56;
LABEL_88:
  *(void *)ioNumberPackets = 0;
  UInt32 v65 = 4 * *((_DWORD *)this + 359);
  unsigned int v100 = v59;
  if (v65 >= v59) {
    UInt32 v65 = v59;
  }
  UInt32 ioInputDataByteSize = v65;
  unsigned int v66 = v63;
  uint64_t appended = AudioCodecAppendInputData(*((AudioCodec *)this + 175), v63, &ioInputDataByteSize, &ioNumberPackets[1], 0);
  if (!appended)
  {
    unsigned int v63 = &v66[ioInputDataByteSize];
    unsigned int v101 = v100 - ioInputDataByteSize;
    while (1)
    {
      double v67 = v63;
      UInt32 v68 = *((_DWORD *)this + 376);
      UInt32 v112 = 1;
      UInt32 ioOutputDataByteSize = v68;
      uint64_t appended = AudioCodecProduceOutputPackets(*((AudioCodec *)this + 175), v62, &ioOutputDataByteSize, &v112, v64, ioNumberPackets);
      UInt32 v69 = ioNumberPackets[0];
      if (appended || ioNumberPackets[0] == 1) {
        break;
      }
      UInt32 v71 = v112;
      if (v112)
      {
        unsigned int v63 = v67;
        if (v56)
        {
          if (v64 != v56) {
            v64->mStartunsigned int Offset = (SInt64)&v62[-*(void *)(v109 + 40)];
          }
          ++v64;
        }
        v60 += ioOutputDataByteSize;
        v62 += ioOutputDataByteSize;
        v61 += v71;
      }
      else
      {
        unsigned int v63 = v67;
      }
      if (v69 != 3)
      {
        unsigned int v59 = v101;
        if (!v101)
        {
LABEL_113:
          long long v23 = *(_DWORD **)v106;
          *(_DWORD *)(v109 + 36) = v60;
          *((_DWORD *)this + 424) = v61;
          uint64_t v21 = v105;
          a7 = v96;
          a6 = v98;
          goto LABEL_114;
        }
        goto LABEL_88;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      uint64_t v117 = "VPEncoderWrapper.cpp";
      __int16 v118 = 1024;
      int v119 = 161;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::process: Error producing output packets", buf, 0x12u);
    }
    uint64_t v21 = v105;
    long long v23 = *(_DWORD **)v106;
    a7 = v96;
    a6 = v98;
    if (appended) {
      goto LABEL_109;
    }
LABEL_114:
    atomic_fetch_add((atomic_uint *volatile)this + 401, 0xFFFFFFFF);
    unsigned int v73 = *((_DWORD *)this + 424);
    if (v73 && *((unsigned char *)this + 1303))
    {
      if (v111)
      {
        unsigned int v74 = ABLRingBuffer<float>::ReadFrom((uint64_t)this + 1816, *((_DWORD *)this + 417), (_DWORD *)(*((void *)this + 225) + 24));
        if (v74 == *((_DWORD *)this + 417))
        {
          *((_DWORD *)this + 448) = 0;
          MetadataHandler::Process<float>((uint64_t)this + 1872, *(const float **)(*((void *)this + 225) + 40), v74);
          MetadataHandler::GetMetadata((AUVoiceIO *)((char *)this + 1872), &v111, (unsigned int *)this + 448);
        }
      }
      long long v23 = (_DWORD *)((char *)this + 1792);
      unsigned int v73 = *((_DWORD *)this + 424);
    }
    *a6 = v73;
    if (a7) {
      memcpy(a7, *((const void **)this + 213), 16 * *((unsigned int *)this + 424));
    }
    goto LABEL_9;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315394;
    uint64_t v117 = "VPEncoderWrapper.cpp";
    __int16 v118 = 1024;
    int v119 = 147;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::process: Error appending input data", buf, 0x12u);
  }
LABEL_109:
  *(_DWORD *)(v109 + 36) = 0;
  *((_DWORD *)this + 424) = 0;
  atomic_fetch_add((atomic_uint *volatile)this + 401, 0xFFFFFFFF);
  if (kRIOClientSubsystem)
  {
    int v72 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      return appended;
    }
  }
  else
  {
    int v72 = &_os_log_internal;
  }
  if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315394;
    uint64_t v117 = "AURemoteIO.cpp";
    __int16 v118 = 1024;
    int v119 = 2521;
    _os_log_impl(&dword_21B9BB000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::ComplexRender: Failed to process encoder", buf, 0x12u);
  }
  return appended;
}

void sub_21BA70304(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 1604), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

unsigned int *ABLRingBuffer<float>::WriteInto(unsigned int *result, unsigned int a2, _DWORD *a3)
{
  if (*a3 == result[1])
  {
    if (a2)
    {
      uint64_t v3 = result;
      unsigned int v4 = *result - result[2];
      if (v4)
      {
        if (v4 >= a2) {
          unsigned int v5 = a2;
        }
        else {
          unsigned int v5 = *result - result[2];
        }
        unsigned int v6 = *result - result[4];
        if (v6 >= v5) {
          uint64_t v7 = v5;
        }
        else {
          uint64_t v7 = v6;
        }
        if (*a3)
        {
          unint64_t v9 = 0;
          long long v10 = (const void **)(a3 + 4);
          do
          {
            long long v11 = *v10;
            v10 += 2;
            uint64_t result = (unsigned int *)memcpy((void *)(*((void *)v3 + 3) + 4 * (v3[4] + *v3 * v9++)), v11, 4 * v7);
            unint64_t v12 = v3[1];
          }
          while (v9 < v12);
          if (v5 > v6 && v12)
          {
            unint64_t v13 = 0;
            uint64_t v14 = (uint64_t *)(a3 + 4);
            do
            {
              uint64_t v15 = *v14;
              v14 += 2;
              uint64_t result = (unsigned int *)memcpy((void *)(*((void *)v3 + 3) + 4 * *v3 * v13++), (const void *)(v15 + 4 * v7), 4 * (v5 - v7));
            }
            while (v13 < v3[1]);
          }
        }
        v3[2] += v5;
        unsigned int v16 = v3[4] + v5;
        v3[4] = v16;
        BOOL v17 = v16 >= *v3;
        unsigned int v18 = v16 - *v3;
        if (v17) {
          v3[4] = v18;
        }
      }
    }
  }
  return result;
}

uint64_t ABLRingBuffer<float>::ReadFrom(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  if (a2 && *a3 == *(_DWORD *)(a1 + 4))
  {
    unsigned int v6 = *(_DWORD *)(a1 + 8);
    if (v6)
    {
      if (v6 >= a2) {
        uint64_t v3 = a2;
      }
      else {
        uint64_t v3 = v6;
      }
      unsigned int v7 = *(_DWORD *)a1 - *(_DWORD *)(a1 + 12);
      if (v7 >= v3) {
        uint64_t v8 = v3;
      }
      else {
        uint64_t v8 = v7;
      }
      if (*a3)
      {
        unint64_t v9 = 0;
        long long v10 = (void **)(a3 + 4);
        do
        {
          long long v11 = *v10;
          v10 += 2;
          memcpy(v11, (const void *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 12) + *(_DWORD *)a1 * v9++)), 4 * v8);
          unint64_t v12 = *(unsigned int *)(a1 + 4);
        }
        while (v9 < v12);
        if (v3 > v7 && v12)
        {
          unint64_t v13 = 0;
          uint64_t v14 = (uint64_t *)(a3 + 4);
          do
          {
            uint64_t v15 = *v14;
            v14 += 2;
            memcpy((void *)(v15 + 4 * v8), (const void *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)a1 * v13++)), 4 * (v3 - v8));
          }
          while (v13 < *(unsigned int *)(a1 + 4));
        }
      }
      unsigned int v16 = *(_DWORD *)(a1 + 12) + v3;
      *(_DWORD *)(a1 + 8) -= v3;
      *(_DWORD *)(a1 + 12) = v16;
      if (v16 >= *(_DWORD *)a1) {
        *(_DWORD *)(a1 + 12) = v16 - *(_DWORD *)a1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t AUVoiceIO::SetParameter(AUVoiceIO *this, int a2, float a3)
{
  if (a2 == 1584488812)
  {
    int v7 = (int)a3;
    uint64_t v3 = (AUVoiceIO *)((char *)this + 1400);
    unsigned int v4 = (unsigned int *)&v7;
    AudioCodecPropertyID v5 = 1584488812;
    return VPEncoderWrapper::SetProperty(v3, v5, v4, 4u);
  }
  if (a2 == 1651663220)
  {
    unsigned int v8 = a3;
    uint64_t v3 = (AUVoiceIO *)((char *)this + 1400);
    unsigned int v4 = &v8;
    AudioCodecPropertyID v5 = 1651663220;
    return VPEncoderWrapper::SetProperty(v3, v5, v4, 4u);
  }
  return 2003332927;
}

uint64_t AUVoiceIO::SetProperty(AUVoiceIO *this, AudioCodecPropertyID a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (AURemoteIO::OnIOThread(this)) {
    return 4294956433;
  }
  if (!kRIOClientSubsystem)
  {
    unint64_t v13 = &_os_log_internal;
    goto LABEL_7;
  }
  unint64_t v13 = *(NSObject **)kRIOClientSubsystem;
  if (*(void *)kRIOClientSubsystem)
  {
LABEL_7:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      MEMORY[0x21D4971C0](&v17, a5, a6);
      *(_DWORD *)AudioComponentDescription buf = 136316930;
      uint64_t v19 = "AURemoteIO.cpp";
      __int16 v20 = 1024;
      int v21 = 2915;
      __int16 v22 = 2048;
      long long v23 = this;
      __int16 v24 = 1024;
      int v25 = a3;
      __int16 v26 = 1024;
      int v27 = a4;
      __int16 v28 = 1024;
      AudioCodecPropertyID v29 = a2;
      __int16 v30 = 1024;
      int v31 = a6;
      __int16 v32 = 2080;
      uint64_t v33 = v17;
      _os_log_impl(&dword_21B9BB000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO(%p)::SetProperty scope %d, elem %d, prop %d, %d bytes: %s", buf, 0x3Eu);
      if (v17) {
        free(v17);
      }
    }
  }
  uint64_t result = 0;
  switch(a2)
  {
    case 0x834u:
      *((unsigned char *)this + 1301) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x8000u, a6, a5);
    case 0x835u:
      AUVoiceIO::SetVoiceProperty(this, 0x8001u, a6, a5);
    case 0x836u:
      uint64_t result = 0;
      *((unsigned char *)this + 1302) = *a5 != 0;
      return result;
    case 0x837u:
      uint64_t result = 0;
      *((_DWORD *)this + 327) = *a5;
      return result;
    case 0x838u:
      AUVoiceIO::SetVoiceProperty(this, 0x8004u, a6, a5);
    case 0x839u:
    case 0x84Cu:
      return result;
    case 0x83Au:
      uint64_t v14 = (const void *)*((void *)this + 161);
      if (v14)
      {
        _Block_release(v14);
        *((void *)this + 161) = 0;
      }
      uint64_t v15 = *(const void **)a5;
      if (v15) {
        *((void *)this + 161) = _Block_copy(v15);
      }
      *(_DWORD *)AudioComponentDescription buf = v15 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x6D736165u, 4u, buf);
    case 0x83Cu:
      *((void *)this + 168) = *(void *)a5;
      AUVoiceIO::SetVoiceProperty(this, 0x6F616463u, a6, a5);
    case 0x841u:
      if (*((unsigned char *)this + 17)) {
        goto LABEL_31;
      }
      uint64_t result = 0;
      int v16 = *a5;
      *((unsigned char *)this + 1303) = *a5 != 0;
      *((_DWORD *)this + 464) = v16;
      break;
    case 0x844u:
      uint64_t result = 0;
      *((_DWORD *)this + 328) = *a5;
      return result;
    case 0x846u:
      if (!*((unsigned char *)this + 17))
      {
        *((_DWORD *)this + 329) = *a5;
        AUVoiceIO::SetVoiceProperty(this, 0x8013u, a6, a5);
      }
LABEL_31:
      uint64_t result = 4294956447;
      break;
    case 0x847u:
    case 0x849u:
    case 0x84Fu:
      *((_DWORD *)this + 330) = *a5;
      AUVoiceIO::SetVoiceProperty(this, 0x74766374u, a6, a5);
    case 0x848u:
    case 0x84Au:
    case 0x850u:
      *((void *)this + 166) = *(void *)a5;
      AUVoiceIO::SetVoiceProperty(this, 0x74766372u, a6, a5);
    case 0x84Bu:
      *((unsigned char *)this + 1304) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x801Au, a6, a5);
    case 0x84Du:
    case 0x84Eu:
      uint64_t result = 4294956431;
      break;
    case 0x852u:
      AUVoiceIO::SetVoiceProperty(this, 0x73706D64u, a6, a5);
    case 0x853u:
      *((_DWORD *)this + 334) = *a5;
      AUVoiceIO::SetVoiceProperty(this, 0x6D656463u, a6, a5);
    case 0x854u:
      *((unsigned char *)this + 1340) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x73706163u, a6, a5);
    case 0x857u:
      *((unsigned char *)this + 1341) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x6D706564u, a6, a5);
    default:
      if (a2 < 0x10000) {
        uint64_t result = AURemoteIO::SetProperty(this, a2, a3, a4, a5, a6);
      }
      else {
        uint64_t result = VPEncoderWrapper::SetProperty((AUVoiceIO *)((char *)this + 1400), a2, a5, a6);
      }
      break;
  }
  return result;
}

void AUVoiceIO::SetVoiceProperty(AUVoiceIO *this, unsigned int a2, unsigned int a3, const void *a4)
{
  PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v4, 0);
}

void sub_21BA70C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUVoiceIO::GetProperty(AUVoiceIO *this, AudioCodecPropertyID a2, int a3, unsigned int a4, void *a5)
{
  if (AURemoteIO::OnIOThread(this))
  {
    return 4294956433;
  }
  else
  {
    uint64_t VoiceIOPreferredHWSampleRate = 0;
    switch(a2)
    {
      case 0x834u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1301);
        goto LABEL_44;
      case 0x835u:
        int v16 = this;
        int v17 = 32769;
        goto LABEL_33;
      case 0x836u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1302);
        goto LABEL_44;
      case 0x837u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 327);
        goto LABEL_44;
      case 0x838u:
        AUVoiceIO::GetVoiceProperty(this, 32772, a5);
        return 0;
      case 0x839u:
        return VoiceIOPreferredHWSampleRate;
      case 0x83Au:
        return 4294956417;
      case 0x83Cu:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        *a5 = *((void *)this + 168);
        return VoiceIOPreferredHWSampleRate;
      case 0x83Eu:
        if (!*((unsigned char *)this + 1352)) {
          return 4294956429;
        }
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 422);
LABEL_44:
        *(_DWORD *)a5 = v14;
        return VoiceIOPreferredHWSampleRate;
      case 0x83Fu:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        if (*((unsigned char *)this + 1352)) {
          int v14 = *((_DWORD *)this + 423);
        }
        else {
          int v14 = *((_DWORD *)this + 438);
        }
        goto LABEL_44;
      case 0x840u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 440);
        goto LABEL_44;
      case 0x841u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1303);
        goto LABEL_44;
      case 0x844u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 328);
        goto LABEL_44;
      case 0x846u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 329);
        goto LABEL_44;
      case 0x847u:
      case 0x849u:
      case 0x84Fu:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 330);
        goto LABEL_44;
      case 0x848u:
      case 0x84Au:
      case 0x850u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        uint64_t v15 = *((void *)this + 166);
        goto LABEL_6;
      case 0x84Bu:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1304);
        goto LABEL_44;
      case 0x84Cu:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        *(_DWORD *)a5 = 0;
        return VoiceIOPreferredHWSampleRate;
      case 0x84Du:
        uint64_t VoiceIOPreferredHWSampleRate = GetVoiceIOPreferredHWSampleRate(*((_DWORD *)this + 329), (double *)a5, v10, v11);
        if (*(double *)a5 != -1.0) {
          return VoiceIOPreferredHWSampleRate;
        }
        uint64_t v15 = *(void *)(ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u) + 80);
LABEL_6:
        *a5 = v15;
        return VoiceIOPreferredHWSampleRate;
      case 0x84Eu:
        unsigned int v20 = *((_DWORD *)this + 329);
        return GetVoiceIOPreferredHWBlockSizeInSeconds(v20, (double *)a5, v10, v11);
      case 0x852u:
        int v16 = this;
        int v17 = 1936747876;
LABEL_33:
        return AUVoiceIO::GetVoiceProperty(v16, v17, a5);
      case 0x853u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((_DWORD *)this + 334);
        goto LABEL_44;
      case 0x854u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1340);
        goto LABEL_44;
      case 0x857u:
        uint64_t VoiceIOPreferredHWSampleRate = 0;
        int v14 = *((unsigned __int8 *)this + 1341);
        goto LABEL_44;
      default:
        if (a2 >= 0x10000)
        {
          unsigned int v23 = 0;
          unsigned __int8 v22 = 0;
          unsigned int v18 = (AudioCodec *)((char *)this + 1400);
          uint64_t VoiceIOPreferredHWSampleRate = VPEncoderWrapper::GetPropertyInfo(v18, a2, &v23, &v22);
          if (!VoiceIOPreferredHWSampleRate) {
            return VPEncoderWrapper::GetProperty(v18, a2, a5, &v23, v19);
          }
          return VoiceIOPreferredHWSampleRate;
        }
        uint64_t result = AURemoteIO::GetProperty(this, a2, a3, a4, a5, v12);
        break;
    }
  }
  return result;
}

uint64_t AUVoiceIO::GetVoiceProperty(AUVoiceIO *this, int a2, void *a3)
{
  unsigned __int8 v22 = a3;
  char v15 = 1;
  v14[0] = &unk_26CBADE30;
  v14[1] = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  unsigned int v18 = (const void **)&v20;
  uint64_t v19 = &v21;
  uint64_t v20 = 0;
  int v21 = 0;
  RIOServer::GetServerPort((const char **)gRIOServer);
  int ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
  AUIOClient_GetProperty(ServerPort, *((_DWORD *)this + 178), 0, a2, &v20, &v21);
  uint64_t v6 = _CheckRPCError("GetVoiceProperty");
  if (!v6)
  {
    int v7 = *v18;
    unsigned int v8 = &v19;
    BOOL v9 = *v18 == 0;
    if (!*v18) {
      unsigned int v8 = (int **)&v17;
    }
    int v13 = **v8;
    if (v9) {
      CFStringRef v10 = v16;
    }
    else {
      CFStringRef v10 = v7;
    }
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v12, v10);
  }
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v14);
  return v6;
}

void sub_21BA710C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va1);
  _Unwind_Resume(a1);
}

uint64_t AUVoiceIO::GetPropertyInfo(AUVoiceIO *this, AudioCodecPropertyID a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  mach_msg_return_t v16;
  mach_msg_return_t v17;
  BOOL v19;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned char msg[36];
  long long v23;
  uint64_t vars8;

  switch(a2)
  {
    case 0x834u:
    case 0x835u:
    case 0x836u:
    case 0x837u:
    case 0x838u:
    case 0x841u:
    case 0x844u:
    case 0x846u:
    case 0x847u:
    case 0x849u:
    case 0x84Bu:
    case 0x84Cu:
    case 0x853u:
    case 0x854u:
    case 0x857u:
      uint64_t result = 0;
      unsigned int v10 = 4;
      goto LABEL_4;
    case 0x839u:
      uint64_t result = 0;
      unsigned int v10 = 132;
      goto LABEL_4;
    case 0x83Au:
    case 0x83Cu:
    case 0x848u:
    case 0x84Au:
    case 0x850u:
      uint64_t result = 0;
      unsigned int v10 = 8;
LABEL_4:
      *a5 = v10;
      BOOL v11 = 1;
      goto LABEL_5;
    case 0x83Eu:
    case 0x83Fu:
    case 0x840u:
      uint64_t result = 0;
      unsigned int v12 = 4;
      goto LABEL_9;
    case 0x84Du:
    case 0x84Eu:
      uint64_t result = 0;
      unsigned int v12 = 8;
LABEL_9:
      *a5 = v12;
      *a6 = 0;
      return result;
    case 0x852u:
      RIOServer::GetServerPort((const char **)gRIOServer);
      int ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
      int v14 = *((_DWORD *)this + 178);
      *(_OWORD *)&msg[20] = 0u;
      unsigned int v23 = 0u;
      *(_OWORD *)&msg[4] = 0u;
      *(void *)&msg[24] = *MEMORY[0x263EF80C8];
      *(_DWORD *)&msg[32] = v14;
      DWORD1(v23) = 1936747876;
      mach_port_t reply_port = mig_get_reply_port();
      *(_DWORD *)&msg[8] = ServerPort;
      *(_DWORD *)&msg[12] = reply_port;
      *(_DWORD *)mach_msg_header_t msg = 5395;
      *(void *)&msg[16] = 0x157CD00000000;
      if (MEMORY[0x263EF8B00])
      {
        voucher_mach_msg_set((mach_msg_header_t *)msg);
        mach_port_t reply_port = *(_DWORD *)&msg[12];
      }
      int v16 = mach_msg((mach_msg_header_t *)msg, 275, 0x2Cu, 0x34u, reply_port, *MEMORY[0x263EFC0D0], 0);
      uint64_t v17 = v16;
      if ((v16 - 268435458) <= 0xE && ((1 << (v16 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&msg[12]);
        goto LABEL_30;
      }
      if (v16)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_30:
        if (v17 == 268435460)
        {
          if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x263EF8960], *(mach_port_name_t *)&msg[12]);
          }
          mach_msg_destroy((mach_msg_header_t *)msg);
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          goto LABEL_38;
        }
LABEL_37:
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        goto LABEL_38;
      }
      if (*(_DWORD *)&msg[20] != 88113
        || (*(_DWORD *)msg & 0x80000000) != 0
        || *(_DWORD *)&msg[4] != 44
        || *(_DWORD *)&msg[8]
        || *(_DWORD *)&msg[32])
      {
        mach_msg_destroy((mach_msg_header_t *)msg);
        goto LABEL_37;
      }
      uint64_t v20 = v23;
      uint64_t v19 = DWORD1(v23) != 0;
LABEL_38:
      uint64_t result = _CheckRPCError("GetVoicePropertyInfo");
      *a6 = v19;
      *a5 = v20;
      return result;
    default:
      if (a2 < 0x10000)
      {
        return AURemoteIO::GetPropertyInfo(this, a2, a3, a4, a5, a6);
      }
      else
      {
        *(_DWORD *)mach_msg_header_t msg = 0;
        int v21 = 0;
        uint64_t result = VPEncoderWrapper::GetPropertyInfo((AudioCodec *)this + 175, a2, (unsigned int *)msg, &v21);
        if (!result)
        {
          *a5 = *(_DWORD *)msg;
          BOOL v11 = v21 != 0;
LABEL_5:
          *a6 = v11;
        }
      }
      return result;
  }
}

void AUVoiceIO::~AUVoiceIO(AUVoiceIO *this)
{
  *(void *)this = &unk_26CBB0B58;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 264, 0);
  uint64_t v2 = (unsigned char *)*((void *)this + 262);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)*((void *)this + 263);
    if (v3 != v2) {
      *((void *)this + 263) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *((void *)this + 262) = 0;
    *((void *)this + 263) = 0;
  }
  MetaDataBlockInfo::~MetaDataBlockInfo((AUVoiceIO *)((char *)this + 1760));
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 218, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 217, 0);
  EncoderBlockInfo::~EncoderBlockInfo((AUVoiceIO *)((char *)this + 1400));
  AURemoteIO::~AURemoteIO(this);

  JUMPOUT(0x21D497F90);
}

{
  unsigned char *v2;
  unsigned char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CBB0B58;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 264, 0);
  uint64_t v2 = (unsigned char *)*((void *)this + 262);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)*((void *)this + 263);
    if (v3 != v2) {
      *((void *)this + 263) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *((void *)this + 262) = 0;
    *((void *)this + 263) = 0;
  }
  MetaDataBlockInfo::~MetaDataBlockInfo((AUVoiceIO *)((char *)this + 1760));
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 218, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 217, 0);
  EncoderBlockInfo::~EncoderBlockInfo((AUVoiceIO *)((char *)this + 1400));

  AURemoteIO::~AURemoteIO(this);
}

void MetaDataBlockInfo::~MetaDataBlockInfo(MetaDataBlockInfo *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)this = 0;
  *((void *)this + 36) = 0;
  *((unsigned char *)this + 296) = 0;
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 30) = &unk_26CBAE070;
  *((void *)this + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned char *)*((void *)this + 10);
  if (v3)
  {
    unsigned int v4 = (unsigned char *)*((void *)this + 11);
    if (v4 != v3) {
      *((void *)this + 11) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v3);
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

void TOpaqueRef<AURemoteIO>::~TOpaqueRef(BaseOpaqueObject *a1)
{
  BaseOpaqueObject::~BaseOpaqueObject(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t AURemoteIO::HostCallback_GetTransportState2(AURemoteIO *this, BOOL *a2, BOOL *a3, unsigned __int8 *a4, unsigned __int8 *a5, double *a6, unsigned __int8 *a7, double *a8, double *a9)
{
  if (!*((unsigned char *)this + 1072)) {
    return 4294956433;
  }
  if ((*((_DWORD *)this + 274) & 0x400) == 0) {
    return 4294956446;
  }
  if (a2) {
    *a2 = (*((_DWORD *)this + 274) & 2) != 0;
  }
  if (a3) {
    *a3 = (*((unsigned char *)this + 1096) & 4) != 0;
  }
  if (a4) {
    *a4 = *((unsigned char *)this + 1096) & 1;
  }
  if (a5) {
    *(void *)a5 = *((void *)this + 140);
  }
  if (a6) {
    *(unsigned char *)a6 = (*((unsigned char *)this + 1096) & 8) != 0;
  }
  if (a7) {
    *(void *)a7 = *((void *)this + 141);
  }
  uint64_t v9 = 0;
  if (a8) {
    *a8 = *((double *)this + 142);
  }
  return v9;
}

uint64_t AURemoteIO::HostCallback_GetTransportState(AURemoteIO *this, BOOL *a2, unsigned __int8 *a3, unsigned __int8 *a4, double *a5, unsigned __int8 *a6, double *a7, double *a8)
{
  if (!*((unsigned char *)this + 1072)) {
    return 4294956433;
  }
  if ((*((_DWORD *)this + 274) & 0x400) == 0) {
    return 4294956446;
  }
  if (a2) {
    *a2 = (*((_DWORD *)this + 274) & 2) != 0;
  }
  if (a3) {
    *a3 = *((unsigned char *)this + 1096) & 1;
  }
  if (a4) {
    *(void *)a4 = *((void *)this + 140);
  }
  if (a5) {
    *(unsigned char *)a5 = (*((unsigned char *)this + 1096) & 8) != 0;
  }
  if (a6) {
    *(void *)a6 = *((void *)this + 141);
  }
  uint64_t v8 = 0;
  if (a7) {
    *a7 = *((double *)this + 142);
  }
  return v8;
}

uint64_t AURemoteIO::HostCallback_GetMusicalTimeLocation(AURemoteIO *this, _DWORD *a2, unsigned int *a3, float *a4, unsigned int *a5, double *a6)
{
  if (!*((unsigned char *)this + 1072)) {
    return 4294956433;
  }
  if ((*((unsigned char *)this + 1097) & 2) == 0) {
    return 4294956446;
  }
  if (a2) {
    *a2 = *((_DWORD *)this + 275);
  }
  if (a3) {
    *a3 = *((_DWORD *)this + 276);
  }
  if (a4) {
    *a4 = *((float *)this + 277);
  }
  uint64_t v6 = 0;
  if (a5) {
    *(void *)a5 = *((void *)this + 139);
  }
  return v6;
}

double AURemoteIO::HostCallback_GetBeatAndTempo(AURemoteIO *this, double *a2, double *a3, double *a4)
{
  if (*((unsigned char *)this + 1072) && (*((unsigned char *)this + 1097) & 1) != 0)
  {
    if (a2)
    {
      double result = *((double *)this + 135);
      *a2 = result;
    }
    if (a3)
    {
      double result = *((double *)this + 136);
      *a3 = result;
    }
  }
  return result;
}

void Init(void)
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_21BA71C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v7 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);

  operator delete(a1);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26CBB2250;
  a2[1] = v2;
  return std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_26CBB2250;
  v2[1] = v3;
  std::__function::__value_func<void ()(long long)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_21BA71F84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_26CBB2250;
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x21D497F90);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_26CBB2250;
  std::__function::__value_func<void ()(long long)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::operator()(uint64_t result, void *a2)
{
  **(_DWORD **)(result + 8) = *a2;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CBB22E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26CBB22E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::~__func()
{
}

BOOL ausdk::AUMutex::try_lock(ausdk::AUMutex *this)
{
  return std::recursive_mutex::try_lock((std::recursive_mutex *)((char *)this + 8));
}

void ausdk::AUMutex::~AUMutex(ausdk::AUMutex *this)
{
  *(void *)this = &unk_26CBB2030;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 8));

  JUMPOUT(0x21D497F90);
}

{
  *(void *)this = &unk_26CBB2030;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 8));
}

void RIOServer::ServerPortDied(RIOServer *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (kRIOClientSubsystem)
  {
    uint64_t v4 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = &_os_log_internal;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v9 = 136315650;
    *(void *)&v9[4] = "AURemoteIO.cpp";
    __int16 v10 = 1024;
    int v11 = 177;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl(&dword_21B9BB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d RIOServer::ServerPortDied: PID %d", v9, 0x18u);
  }
LABEL_7:
  uint64_t v5 = gRIOMutex;
  if (gRIOMutex) {
    (*(void (**)(uint64_t))(*(void *)gRIOMutex + 16))(gRIOMutex);
  }
  uint64_t v6 = *((void *)this + 10);
  *(void *)uint64_t v9 = (char *)this + 80;
  v9[8] = (*(uint64_t (**)(char *))(v6 + 16))((char *)this + 80);
  uint64_t v8 = (void *)*((void *)this + 21);
  char v7 = (void *)*((void *)this + 22);
  while (v8 != v7)
  {
    if (*(_DWORD *)(*v8 + 600) == a2)
    {
      (*(void (**)(void))(*(void *)*v8 + 64))(*v8);
      char v7 = (void *)*((void *)this + 22);
    }
    ++v8;
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v9);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
}

void sub_21BA72374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::XRemoteMachServer::GetDebugName(CADeprecated::XRemoteMachServer *this)
{
  return *((void *)this + 4);
}

void RIOServer::~RIOServer(RIOServer *this)
{
  *(void *)this = &unk_26CBB1670;
  uint64_t v2 = *((void *)this + 25);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);

  JUMPOUT(0x21D497F90);
}

{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1670;
  uint64_t v2 = *((void *)this + 25);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }

  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

_DWORD *MeterBufferList(_DWORD *result, void *a2, uint64_t a3)
{
  int v4 = result[3];
  unsigned int v5 = result[6];
  if (!v5) {
    goto LABEL_4;
  }
  if ((v4 & 0x20) != 0)
  {
    unsigned int v6 = 1;
  }
  else
  {
    unsigned int v6 = result[7];
    if (!v6)
    {
LABEL_4:
      int v7 = 0;
      goto LABEL_7;
    }
  }
  int v7 = v5 / v6;
LABEL_7:
  uint64_t v8 = (int)result[7];
  unint64_t v9 = a2[1] - *a2;
  unint64_t v10 = v9 >> 7;
  if ((int)v8 >= (int)(v9 >> 7)) {
    int v11 = v9 >> 7;
  }
  else {
    int v11 = result[7];
  }
  if (v11 >= 1)
  {
    uint64_t v12 = (int)((uint64_t)v9 >> 7);
    if (v8 >= (int)v10) {
      uint64_t v8 = v12;
    }
    uint64_t v13 = v8 + 1;
    uint64_t v14 = (v8 << 7) - 128;
    char v15 = (const int **)(a3 + 16 * v8);
    uint64_t v16 = (v8 - 1) * v7;
    do
    {
      if ((v4 & 0x20) != 0)
      {
        uint64_t v17 = *v15;
        if ((v4 & 1) == 0)
        {
LABEL_18:
          if (v7 == 4)
          {
            double result = (_DWORD *)PowerMeter::Process_Int32((PowerMeter *)(*a2 + v14), v17);
          }
          else if (v7 == 2)
          {
            double result = (_DWORD *)PowerMeter::Process_Int16((PowerMeter *)(*a2 + v14), (const __int16 *)v17);
          }
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v17 = (const int *)(*(void *)(a3 + 16) + v16);
        if ((v4 & 1) == 0) {
          goto LABEL_18;
        }
      }
      double result = (_DWORD *)PowerMeter::Process((PowerMeter *)(*a2 + v14), (const float *)v17);
LABEL_22:
      --v13;
      v14 -= 128;
      v15 -= 2;
      v16 -= v7;
    }
    while (v13 > 1);
  }
  return result;
}

uint64_t ___ZL20IPCPropertiesChangedj_block_invoke(uint64_t a1)
{
  uint64_t result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v4, *(_DWORD *)(a1 + 32));
  if (v7)
  {
    uint64_t v2 = *(void **)(v7 + 16);
    uint64_t v3 = v2[59];
    if (v3) {
      (*(void (**)(void))(*(void *)v3 + 16))(v2[59]);
    }
    (*(void (**)(void *, uint64_t, void, void))(*v2 + 432))(v2, 101, 0, 0);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void))(*v2 + 432))(v2, 2014, 0, 0);
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
  }
  if (v6)
  {
    if (v5) {
      atomic_fetch_add(v5, 0xFFFFFFFF);
    }
  }
  return result;
}

void sub_21BA727B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15)
  {
    if (a14) {
      atomic_fetch_add(a14, 0xFFFFFFFF);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AURemoteIO::IPC_Uninitialize(AURemoteIO *this)
{
  uint64_t v2 = *((void *)this + 59);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 16))(*((void *)this + 59));
  }
  if (*((_DWORD *)this + 253))
  {
    *(void *)((char *)this + 1012) = 0;
    *(void *)((char *)this + 1020) = 0;
    *(void *)((char *)this + 1028) = 0;
    uint64_t v3 = (const void *)*((void *)this + 130);
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 130) = 0;
    }
    if (*((unsigned char *)this + 558)) {
      (*(void (**)(AURemoteIO *))(*(void *)this + 448))(this);
    }
    ausdk::AUBase::DoCleanup(this);
    *((unsigned char *)this + 1072) = 0;
    int v4 = *((_DWORD *)this + 144);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZL20IPCPropertiesChangedj_block_invoke;
    block[3] = &__block_descriptor_tmp_262;
    int v8 = v4;
    dispatch_async(MEMORY[0x263EF83A0], block);
  }
  *((void *)this + 156) = 0;
  _Block_release(*((const void **)this + 158));
  *((void *)this + 158) = 0;
  uint64_t v5 = *((void *)this + 160);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)this + 160) = 0;
  }
  uint64_t result = CADeprecated::CAAutoDelete<CADeprecated::RealtimeMessenger>::set((uint64_t *)this + 159, 0);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return result;
}

{
  uint64_t result;
  unsigned char v2[32];
  atomic_uint *v3;
  char v4;
  uint64_t v5;

  uint64_t result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v2, (int)this);
  if (v5) {
    uint64_t result = AURemoteIO::IPC_Uninitialize(*(AURemoteIO **)(v5 + 16));
  }
  if (v4)
  {
    if (v3) {
      atomic_fetch_add(v3, 0xFFFFFFFF);
    }
  }
  return result;
}

void sub_21BA729A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21BA72A30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (a15 && a14) {
    atomic_fetch_add(a14, 0xFFFFFFFF);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21BA72A24);
}

void sub_21BA73430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AUConverterRTMutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void (*a22)(uint64_t),uint64_t a23,void (*a24)(void),char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a20) {
    free(a20);
  }
  if (v45) {
    a22(v45);
  }
  if (a23) {
    a24();
  }
  AUConverterRTMutex::unlock((atomic_ullong *)a10);
  SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&a25);
  SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&a28);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a43);
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
  }
  if (a17 && a16) {
    atomic_fetch_add(a16, 0xFFFFFFFF);
  }
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
  }
  _Unwind_Resume(a1);
}

void sub_21BA73844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, char a15)
{
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (a15)
  {
    if (a14) {
      atomic_fetch_add(a14, 0xFFFFFFFF);
    }
  }
  _Unwind_Resume(exception_object);
}

float non-virtual thunk to'SamplerNote::Amplitude(SamplerNote *this)
{
  float result = 0.0;
  if (*((int *)this + 11) <= 4) {
    return *((float *)this + 36);
  }
  return result;
}

uint64_t non-virtual thunk to'SamplerNote::FastRelease(SamplerNote *this, int a2)
{
  return SamplerNote::FastRelease((uint64_t)this - 8, a2);
}

uint64_t SamplerNote::FastRelease(uint64_t this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(int *)(this + 52) >= 5)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "SamplerNote.cpp";
      __int16 v8 = 1024;
      int v9 = 172;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note should be active when FastRelease called", (uint8_t *)&v6, 0x12u);
    }
    __break(1u);
  }
  uint64_t v2 = this;
  if (*(_DWORD *)(this + 148) == -1)
  {
    uint64_t v4 = this + 88;
    for (uint64_t i = *(void *)(this + 96); i != v4; uint64_t i = *(void *)(i + 8))
      this = VoiceZone::FastRelease(*(void *)(i + 16));
    *(_DWORD *)(v2 + 68) = a2;
  }
  else
  {
    *(unsigned char *)(this + 158) |= 2u;
  }
  return this;
}

uint64_t non-virtual thunk to'SamplerNote::Release(SamplerNote *this, int a2)
{
  return SamplerNote::Release((uint64_t)this - 8, a2);
}

uint64_t SamplerNote::Release(uint64_t this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*(int *)(this + 52) >= 6)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "SamplerNote.cpp";
      __int16 v5 = 1024;
      int v6 = 155;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note should be sounding when Release called", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
  if (*(_DWORD *)(this + 148) == -1)
  {
    for (uint64_t i = *(void *)(this + 96); i != this + 88; uint64_t i = *(void *)(i + 8))
      *(_DWORD *)(*(void *)(i + 16) + 236) = a2;
    *(_DWORD *)(this + 68) = a2;
  }
  return this;
}

uint64_t non-virtual thunk to'SamplerNote::Kill(SamplerNote *this, int a2)
{
  return SamplerNote::Kill((uint64_t)this - 8, a2);
}

uint64_t SamplerNote::Kill(uint64_t this, int a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)(this + 148) == -1)
  {
    uint64_t v4 = this + 88;
    for (uint64_t i = *(void *)(this + 96); i != v4; uint64_t i = *(void *)(i + 8))
      this = VoiceZone::Kill(*(void *)(i + 16));
    *(_DWORD *)(v2 + 72) = a2;
  }
  else
  {
    *(unsigned char *)(this + 158) |= 2u;
  }
  return this;
}

BOOL SamplerNote::Reconfigure(SamplerNote *this, const MusicDeviceNoteParams *a2)
{
  uint64_t v2 = this;
  uint64_t v103 = *MEMORY[0x263EF8340];
  float v3 = *((float *)this + 19);
  float v4 = *((float *)this + 20);
  *((unsigned char *)this + 157) = 0;
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = *(void *)(v5 + 232);
  if (((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) & ~((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) >> 31)) >= 0x7F) {
    LOWORD(v7) = 127;
  }
  else {
    int v7 = (*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) & ~((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) >> 31);
  }
  int v8 = (int)v4;
  double v9 = (*(double (**)(void))(*((void *)this + 1) + 96))();
  int v11 = (char *)v2 + 112;
  uint64_t v10 = *((void *)v2 + 14);
  __int16 v12 = *(char *)(v10 + 148);
  __int16 v82 = v8;
  __int16 v83 = v7;
  memset(v102, 0, 512);
  unsigned int v13 = (__int16)(v7 + v12) & ~((__int16)(v7 + v12) >> 31);
  if (v13 >= 0x7F) {
    LOBYTE(v13) = 127;
  }
  unsigned int v14 = (*(char *)(v10 + 149) + v8) & ~((*(char *)(v10 + 149) + v8) >> 31);
  if (v14 >= 0x7F) {
    LOBYTE(v14) = 127;
  }
  buf[0] = v13;
  buf[1] = v14;
  *(void *)&buf[8] = v6;
  InstrumentState::GetMatchingLayers((void *)v10, buf, (uint64_t)v102);
  int v86 = *(_DWORD *)(*(void *)v11 + 124);
  int v16 = *(unsigned __int8 *)(*(void *)v11 + 185);
  unsigned int v17 = *(_DWORD *)(*(void *)v11 + 144);
  if (*(_DWORD *)(*(void *)(*(void *)v11 + 24) + 196) < v17) {
    unsigned int v17 = *(_DWORD *)(*(void *)(*(void *)v11 + 24) + 196);
  }
  if (v17 >= 8) {
    unsigned int v18 = 8;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = (ZoneState *)*((unsigned int *)v2 + 16);
  std::__split_buffer<std::string> v98 = (caulk::rt_safe_memory_resource *)&v98;
  int64_t v99 = (caulk::rt_safe_memory_resource *)&v98;
  uint64_t v100 = 0;
  if (!v15)
  {
    LOBYTE(v90) = 0;
    goto LABEL_97;
  }
  uint64_t v20 = 0;
  int v90 = 0;
  float v21 = v9;
  unsigned __int8 v22 = (uint64_t *)((char *)v2 + 88);
  uint64_t v81 = v15;
  unsigned int v89 = v18;
  unint64_t v88 = v2;
  int v80 = v16;
  do
  {
    uint64_t v23 = *((void *)v102 + v20);
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    int v24 = *(unsigned __int8 *)(v23 + 136);
    uint64_t v25 = *(void *)(v23 + 24);
    int v26 = *(char *)(v25 + 148) + *(char *)(v23 + 152);
    if (v26 <= -64) {
      int v26 = -64;
    }
    if (v26 >= 64) {
      LOWORD(v26) = 64;
    }
    unsigned int v27 = (__int16)(v26 + v83) & ~((__int16)(v26 + v83) >> 31);
    if (v27 >= 0x7F) {
      LOBYTE(v27) = 127;
    }
    int v28 = *(char *)(v25 + 149) + *(char *)(v23 + 153);
    if (v28 <= -127) {
      int v28 = -127;
    }
    if (v28 >= 127) {
      LOWORD(v28) = 127;
    }
    unsigned int v29 = (__int16)(v28 + v82) & ~((__int16)(v28 + v82) >> 31);
    unsigned __int8 v92 = v27;
    if (v29 >= 0x7F) {
      char v30 = 127;
    }
    else {
      char v30 = v29;
    }
    unsigned __int8 v93 = v30;
    *(_DWORD *)unsigned int v87 = v24;
    char v94 = v24;
    uint64_t v84 = v20;
    if (!LayerState::GetMatchingZones(v23, &v92, (unsigned __int8 ***)&v95))
    {
LABEL_84:
      int v63 = 0;
      goto LABEL_88;
    }
    unsigned int v31 = (**(uint64_t (***)(uint64_t))v23)(v23);
    __int16 v32 = (caulk::rt_safe_memory_resource *)v95;
    __int16 v85 = v96;
    unsigned int v33 = *(_DWORD *)v87;
    if (v95 == v96)
    {
      int v63 = 0;
      if (v95) {
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    unsigned int v34 = v31;
    while (1)
    {
      uint64_t v35 = *(void *)v32;
      if (!v33) {
        break;
      }
      float ZoneXFadeGain = GetZoneXFadeGain((ZoneState *)*(unsigned __int8 *)(v35 + 186), *(unsigned char *)(v35 + 187), v33, v93);
      if (ZoneXFadeGain != 0.0)
      {
        float v37 = ZoneXFadeGain;
        goto LABEL_35;
      }
LABEL_83:
      __int16 v32 = (caulk::rt_safe_memory_resource *)((char *)v32 + 8);
      unsigned int v33 = *(_DWORD *)v87;
      if (v32 == v85) {
        goto LABEL_84;
      }
    }
    float v37 = 1.0;
LABEL_35:
    if (*(_WORD *)(v35 + 220)) {
      float v37 = v37
    }
          * (float)((float)(1.0
                          - (float)((float)(v92 - *(unsigned __int8 *)(v35 + 184))
                                  / (float)(*(unsigned __int8 *)(v35 + 185) - *(unsigned __int8 *)(v35 + 184))))
                  * (float)*(__int16 *)(v35 + 220));
    int v38 = (uint64_t *)*((void *)v2 + 12);
    if (v38 != v22)
    {
      char v39 = 0;
      do
      {
        while (1)
        {
          uint64_t v40 = v38[2];
          uint64_t v91 = v40;
          if (!v40) {
            break;
          }
          if (*(void *)(v40 + 168) != v35) {
            break;
          }
          char v41 = *(unsigned char *)(v40 + 224);
          if ((v41 & 2) == 0) {
            break;
          }
          *(float *)(v40 + 228) = v21;
          *(_DWORD *)(v40 + 232) = v19;
          *(unsigned char *)(v40 + 224) = v41 & 0xC1;
          uint64_t v42 = *(void *)(v40 + 160);
          uint64_t v43 = *(void *)(v35 + 24);
          uint64_t v44 = *(void *)(v43 + 24);
          int v45 = *(char *)(v44 + 148) + *(char *)(v43 + 152);
          if (v45 <= -64) {
            int v45 = -64;
          }
          if (v45 >= 64) {
            LOWORD(v45) = 64;
          }
          unsigned int v46 = (__int16)(v45 + (int)*(float *)(v42 + 76)) & ~((__int16)(v45 + (int)*(float *)(v42 + 76)) >> 31);
          if (v46 >= 0x7F) {
            LOBYTE(v46) = 127;
          }
          *(unsigned char *)(*(void *)(v40 + 176) + 20) = v46;
          int v47 = (int)*(float *)(v42 + 80);
          int v48 = *(char *)(v44 + 149) + *(char *)(v43 + 153);
          if (v48 <= -127) {
            int v48 = -127;
          }
          if (v48 >= 127) {
            LOWORD(v48) = 127;
          }
          unsigned int v49 = (__int16)(v48 + v47) & ~((__int16)(v48 + v47) >> 31);
          if (v49 >= 0x7F) {
            LOBYTE(v49) = 127;
          }
          *(unsigned char *)(*(void *)(v40 + 184) + 20) = v49;
          VoiceZone::HandlePortamento((VoiceZone *)v40);
          float LinearTuning = VoiceZone::GetLinearTuning((VoiceZone *)v40, *(float *)(*(void *)(v40 + 160) + 76)- (float)(int)*(float *)(*(void *)(v40 + 160) + 76));
          Oscillator::SetFixedPitchFactor(v40 + 256, LinearTuning);
          uint64_t v51 = *(void *)(v40 + 168);
          *(float *)(v40 + 1060) = __exp10f((float)(*(float *)(*(void *)(v51 + 104) + 84)+ (float)(*(float *)(v51 + 200)+ (float)(*(float *)(*(void *)(v51 + 24) + 104)+ (float)(*(float *)(*(void *)(*(void *)(v51 + 24) + 24)+ 128)+ *(float *)(*(void *)(*(void *)(*(void *)(v51 + 24) + 24)+ 24)+ 180)))))* 0.05)* v37;
          if (!*(unsigned char *)(*(void *)(v40 + 168) + 189))
          {
            uint64_t v52 = *(void *)(v40 + 200);
            if (v52) {
              (*(void (**)(uint64_t, void))(*(void *)v52 + 40))(v52, 0);
            }
          }
          if (v86 == 76)
          {
            if (*(_DWORD *)(v40 + 244) != 12)
            {
              unsigned int v53 = *(void **)(v40 + 56);
              if (v53 != (void *)(v40 + 64))
              {
                do
                {
                  VoiceEnvelope::SetGate((VoiceEnvelope *)v53[5], 1, (int)v19);
                  size_t v54 = (void *)v53[1];
                  if (v54)
                  {
                    do
                    {
                      uint64_t v55 = v54;
                      size_t v54 = (void *)*v54;
                    }
                    while (v54);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v55 = (void *)v53[2];
                      BOOL v56 = *v55 == (void)v53;
                      unsigned int v53 = v55;
                    }
                    while (!v56);
                  }
                  unsigned int v53 = v55;
                }
                while (v55 != (void *)(v40 + 64));
              }
            }
            int v57 = *(void **)(v40 + 80);
            if (v57 != (void *)(v40 + 88))
            {
              do
              {
                VoiceLFO::Start(v57[5], (int)v19);
                uint64_t v58 = (void *)v57[1];
                if (v58)
                {
                  do
                  {
                    unsigned int v59 = v58;
                    uint64_t v58 = (void *)*v58;
                  }
                  while (v58);
                }
                else
                {
                  do
                  {
                    unsigned int v59 = (void *)v57[2];
                    BOOL v56 = *v59 == (void)v57;
                    int v57 = v59;
                  }
                  while (!v56);
                }
                int v57 = v59;
              }
              while (v59 != (void *)(v40 + 88));
            }
          }
          *(unsigned char *)(v40 + 224) |= 2u;
          std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, &v91);
          uint64_t v60 = *v38;
          uint64_t v61 = v38[1];
          *(void *)(v60 + 8) = v61;
          *(void *)v38[1] = v60;
          uint64_t v2 = v88;
          --*((void *)v88 + 13);
          std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](v38);
          ++v90;
          int v38 = *(uint64_t **)(v61 + 8);
          char v39 = 1;
          unsigned int v18 = v89;
          if (v38 == v22) {
            goto LABEL_83;
          }
        }
        int v38 = (uint64_t *)v38[1];
      }
      while (v38 != v22);
      uint64_t v2 = v88;
      if (v39) {
        goto LABEL_83;
      }
    }
    unsigned int v62 = 0;
    while (1)
    {
      uint64_t v91 = VoiceZone::NewVoiceZone(v2, (SamplerNote *)v35, v19, v37, v21);
      if (!v91) {
        break;
      }
      std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, &v91);
      SamplerBaseElement::IncrementActiveLayerVoiceCount((SamplerBaseElement *)v5, v34, 1);
      ++*(_DWORD *)(v5 + 264);
      ++v62;
      if (!v80 || v62 >= v18)
      {
        v90 += v62;
        goto LABEL_83;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "SamplerNote.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 620;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerNote::Reconfigure: Hit max total zone limit!", buf, 0x12u);
    }
    v90 += v62;
    int v63 = 34;
LABEL_88:
    __int16 v32 = (caulk::rt_safe_memory_resource *)v95;
    if (v95)
    {
LABEL_89:
      uint64_t v96 = v32;
      std::allocator_traits<caulk::rt_allocator<ZoneState *>>::deallocate[abi:ne180100](v32, (v97 - (uint64_t)v32) >> 3);
    }
LABEL_90:
    if (v63) {
      break;
    }
    uint64_t v20 = v84 + 1;
    unsigned int v18 = v89;
  }
  while (v84 + 1 != v81);
LABEL_97:
  int v64 = (caulk::rt_safe_memory_resource **)((char *)v2 + 88);
  UInt32 v65 = (caulk::rt_safe_memory_resource **)*((void *)v2 + 12);
  if (v65 == (caulk::rt_safe_memory_resource **)((char *)v2 + 88))
  {
    unsigned int v70 = (caulk::rt_safe_memory_resource **)((char *)v2 + 88);
    char v66 = v90;
  }
  else
  {
    char v66 = v90;
    do
    {
      double v67 = v65[2];
      *(void *)AudioComponentDescription buf = v67;
      if ((*((unsigned char *)v67 + 224) & 2) != 0)
      {
        VoiceZone::FastRelease((uint64_t)v67);
        std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, buf);
        ++v66;
      }
      else
      {
        (*(void (**)(caulk::rt_safe_memory_resource *))(*(void *)v67 + 8))(v67);
      }
      UInt32 v68 = *v65;
      UInt32 v69 = (caulk::rt_safe_memory_resource **)v65[1];
      *((void *)v68 + 1) = v69;
      *(void *)v65[1] = v68;
      --*((void *)v2 + 13);
      std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](v65);
      UInt32 v65 = v69;
    }
    while (v69 != v64);
    unsigned int v70 = (caulk::rt_safe_memory_resource **)*((void *)v2 + 12);
  }
  UInt32 v71 = v99;
  if (v99 != (caulk::rt_safe_memory_resource *)&v98)
  {
    int v72 = v98;
    if (v64 != &v98)
    {
      if (v98 == v99)
      {
        uint64_t v75 = 1;
      }
      else
      {
        uint64_t v73 = -1;
        unsigned int v74 = v99;
        do
        {
          unsigned int v74 = (caulk::rt_safe_memory_resource *)*((void *)v74 + 1);
          ++v73;
        }
        while (v74 != v98);
        uint64_t v75 = v73 + 2;
      }
      v100 -= v75;
      *((void *)v2 + 13) += v75;
    }
    uint64_t v76 = *(void *)v71;
    *(void *)(v76 + 8) = *((void *)v72 + 1);
    **((void **)v72 + 1) = v76;
    unint64_t v77 = *v70;
    *((void *)v77 + 1) = v71;
    *(void *)UInt32 v71 = v77;
    *unsigned int v70 = v72;
    *((void *)v72 + 1) = v70;
  }
  *((unsigned char *)v2 + 157) = v66;
  *((unsigned char *)v2 + 156) = v66;
  BOOL v78 = v66 != 0;
  if (!v66)
  {
    SamplerNote::Cleanup(v2, 0);
    (*(void (**)(SamplerNote *, void))(*(void *)v2 + 80))(v2, 0);
    BOOL v78 = 0;
  }
  std::__list_imp<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::clear(&v98);
  return v78;
}

void sub_21BA744D4()
{
}

float GetZoneXFadeGain(ZoneState *a1, unsigned __int8 a2, unsigned int a3, unsigned int a4)
{
  if (a4 >= a1)
  {
    float result = 1.0;
    if (a4 <= a2) {
      return result;
    }
    unsigned int v7 = a3 + a2;
    if (v7 >= 0x7F) {
      unsigned int v7 = 127;
    }
    int v5 = v7 - a4;
  }
  else
  {
    unsigned int v4 = (a1 - a3) & ~((int)(a1 - a3) >> 31);
    if (v4 >= 0x7F) {
      unsigned int v4 = 127;
    }
    int v5 = a4 - v4;
  }
  return (float)v5 / (float)a3;
}

uint64_t std::__shared_ptr_pointer<RandomValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,RandomValueControlSource>,std::allocator<RandomValueControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<RandomValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,RandomValueControlSource>,std::allocator<RandomValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t std::__shared_ptr_pointer<MaxValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,MaxValueControlSource>,std::allocator<MaxValueControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MaxValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,MaxValueControlSource>,std::allocator<MaxValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t virtual thunk to'MaxValueControlSource::GetRunFrameCount(MaxValueControlSource *this, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void virtual thunk to'MaxValueControlSource::~MaxValueControlSource(MaxValueControlSource *this)
{
  MaxValueControlSource::~MaxValueControlSource((MaxValueControlSource *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
}

{
  void *v1;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  FixedValueControlSource::~FixedValueControlSource((FixedValueControlSource *)(v1 + 1), (uint64_t *)&off_26CBA6A08);
  v1[4] = &unk_26CBA4AD8;
  void *v1 = &unk_26CBA4B40;
  v1[1] = &unk_26CBA4BA0;
}

void MaxValueControlSource::~MaxValueControlSource(MaxValueControlSource *this)
{
  *((void *)this + 4) = &unk_26CBA4AD8;
  *(void *)this = &unk_26CBA4B40;
  *((void *)this + 1) = &unk_26CBA4BA0;
  MemAllocator::FreeMem(this, (void *)0xB8);
}

{
  FixedValueControlSource::~FixedValueControlSource((MaxValueControlSource *)((char *)this + 8), (uint64_t *)&off_26CBA6A08);
  *((void *)this + 4) = &unk_26CBA4AD8;
  *(void *)this = &unk_26CBA4B40;
  *((void *)this + 1) = &unk_26CBA4BA0;
}

void virtual thunk to'MaxValueControlSource::~MaxValueControlSource(void *a1)
{
}

{
  void *v1;

  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  FixedValueControlSource::~FixedValueControlSource((FixedValueControlSource *)(v1 + 1), (uint64_t *)&off_26CBA6A08);
  v1[4] = &unk_26CBA4AD8;
  void *v1 = &unk_26CBA4B40;
  v1[1] = &unk_26CBA4BA0;
}

uint64_t MaxValueControlSource::GetRunFrameCount(MaxValueControlSource *this, uint64_t a2)
{
  return a2;
}

void std::__shared_ptr_pointer<FixedValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,FixedValueControlSource>,std::allocator<FixedValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t SamplerNote::KillPaused(SamplerNote *this)
{
  uint64_t v2 = (char *)this + 88;
  for (uint64_t i = *((void *)this + 12); (char *)i != v2; uint64_t i = *(void *)(i + 8))
    VoiceZone::Kill(*(void *)(i + 16));
  SamplerNote::Cleanup(this, 1);
  unsigned int v4 = *(uint64_t (**)(SamplerNote *, void))(*(void *)this + 80);

  return v4(this, 0);
}

void non-virtual thunk to'SamplerNote::~SamplerNote(SamplerNote *this)
{
  SamplerNote::~SamplerNote((SamplerNote *)((char *)this - 8));

  JUMPOUT(0x21D497F90);
}

{
  SamplerNote::~SamplerNote((SamplerNote *)((char *)this - 8));
}

void SamplerNote::~SamplerNote(SamplerNote *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26CBA8510;
  *((void *)this + 1) = &unk_26CBA8578;
  if (*((_DWORD *)this + 18) == -1 && *((void *)this + 17))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      int v5 = "SamplerNote.cpp";
      __int16 v6 = 1024;
      int v7 = 43;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note destroyed without clearing map", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  else
  {
    if (*((int *)this + 13) <= 5)
    {
      uint64_t v2 = (char *)this + 88;
      for (uint64_t i = *((void *)this + 12); (char *)i != v2; uint64_t i = *(void *)(i + 8))
        VoiceZone::Kill(*(void *)(i + 16));
    }
    SamplerNote::Cleanup(this, 0);
    std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::destroy((SamplerNote *)((char *)this + 120), *((void **)this + 16));
    std::__list_imp<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::clear((void *)this + 11);
  }
}

{
  uint64_t vars8;

  SamplerNote::~SamplerNote(this);

  JUMPOUT(0x21D497F90);
}

void sub_21BA74B78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

float SamplerNote::Amplitude(SamplerNote *this)
{
  float result = 0.0;
  if (*((int *)this + 13) <= 4) {
    return *((float *)this + 38);
  }
  return result;
}

uint64_t SamplerNote::Update(uint64_t this, int a2)
{
  if (a2 == 2) {
    *(unsigned char *)(this + 158) |= 1u;
  }
  return this;
}

void ausdk::AUEffectBase::NewKernel(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AUHipass::Version(AUHipass *this)
{
  return 0x10000;
}

void AUHipass::NewKernel(AUHipass *this)
{
}

double *AUHipass::HipassKernel::Process(AUHipass::HipassKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  int v9 = *(_DWORD *)(*((void *)this + 12) + 592);
  if (*((_DWORD *)this + 26) != v9)
  {
    *((_DWORD *)this + 26) = v9;
    AUHipass::HipassKernel::CalculateCoefficients(this, (AUHipass::HipassKernel *)((char *)this + 24));
  }

  return Biquad::Process((double *)this + 3, a2, a3, a4);
}

BiquadCoefficients *AUHipass::HipassKernel::CalculateCoefficients(AUHipass::HipassKernel *this, Biquad *a2)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  if (Parameter <= 10.0) {
    float Parameter = 10.0;
  }
  double v6 = Parameter;
  float v7 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0) + 80);
  double v8 = (v6 + v6) / v7;
  int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 1u);
  double v11 = __exp10(v10 * 0.05);
  double v12 = 3.11017673;
  if (v8 <= 0.99) {
    double v12 = v8 * 3.14159265;
  }

  return BiquadCoefficients::SetQ(a2, 2, v12, v11, 0.0);
}

double AUHipass::HipassKernel::Reset(AUHipass::HipassKernel *this)
{
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

void AUHipass::HipassKernel::~HipassKernel(AUHipass::HipassKernel *this)
{
}

BOOL AUHipass::StreamFormatWritable(AUHipass *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUHipass::SupportsTail(AUHipass *this)
{
  return 1;
}

double AUHipass::GetTailTime(AUHipass *this)
{
  return 0.001;
}

uint64_t AUHipass::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUHipass::GetParameterInfo(AUHipass *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  v11[2] = *(CFStringRef **)MEMORY[0x263EF8340];
  buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = -1073741824;
  if (!a2)
  {
    v11[0] = (CFStringRef *)&kCutoffFreq_Name;
    v11[1] = (CFStringRef *)&kResonance_Name;
    if (!LocalizeAUParameterStringsForClass<AUHipass>(std::initializer_list<__CFString const**>)::sLocalized) {
      LocalizeAUParameterStringsForClass<AUHipass>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v11, 2);
    }
    if (a3 == 1)
    {
      CFStringRef v10 = (const __CFString *)kResonance_Name;
      buffer->cfNameString = (CFStringRef)kResonance_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      double result = 3.43597632e10;
      *(void *)&buffer->minValue = 0x42200000C1A00000;
      buffer->defaultValue = 0.0;
    }
    else if (!a3)
    {
      CFStringRef v8 = (const __CFString *)kCutoffFreq_Name;
      buffer->cfNameString = (CFStringRef)kCutoffFreq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 0x4120000000000008;
      double result = *(double *)(ausdk::AUScope::SafeGetElement((AUHipass *)((char *)this + 128), 0) + 80) * 0.5;
      *(float *)&double result = result;
      buffer->maxValue = *(AudioUnitParameterValue *)&result;
      AudioUnitParameterOptions v9 = buffer->flags + 12582912;
      buffer->defaultValue = 6900.0;
      buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = v9;
    }
  }
  return result;
}

uint64_t AUHipass::SetParameter(AUHipass *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUHipass::GetProperty(AUHipass *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  CFStringRef v10 = a5;
  uint64_t result = 4294956417;
  if (a2 > 51)
  {
    if (a2 == 52)
    {
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      (*(void (**)(long long *__return_ptr, AUHipass *, uint64_t, void))(*(void *)this + 392))(&v22, this, 2, 0);
      double v16 = *(double *)&v22;
      long long v22 = 0uLL;
      uint64_t v24 = 0;
      long long v23 = 0x3FF0000000000000uLL;
      unsigned int v17 = (AUHipass::HipassKernel **)*((void *)this + 66);
      if (*((AUHipass::HipassKernel ***)this + 67) == v17) {
        unsigned int v18 = 0;
      }
      else {
        unsigned int v18 = *v17;
      }
      AUHipass::HipassKernel::CalculateCoefficients(v18, (Biquad *)&v22);
      v20[0] = v22;
      v20[1] = v23;
      uint64_t v21 = v24;
      GetFrequencyResponse((uint64_t)v10, (AudioUnitFrequencyResponseBin *)1, (uint64_t)v20, v19, v16);
    }
    else
    {
      if (a2 != 57) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = *((void *)this + 1);
      do
      {
        int v15 = overviewParameterIDs[v13];
        *(void *)CFStringRef v10 = v14;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = v15;
        ++v13;
        v10 += 6;
      }
      while (v13 != 2);
    }
    return 0;
  }
  else
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v12 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29) {
        return result;
      }
      uint64_t result = 0;
      int v12 = *((unsigned __int8 *)this + 554);
    }
    *a5 = v12;
  }
  return result;
}

uint64_t AUHipass::GetPropertyInfo(AUHipass *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 51)
    {
      if (a2 == 52)
      {
        uint64_t result = 0;
        unsigned int v7 = 0x4000;
      }
      else
      {
        if (a2 != 57)
        {
          if (a2 == 56)
          {
            uint64_t result = 0;
            *a5 = 8;
            *a6 = 1;
          }
          return result;
        }
        uint64_t result = 0;
        unsigned int v7 = 48;
      }
      *a5 = v7;
      *a6 = 0;
      return result;
    }
    if (a2 == 21 || a2 == 29)
    {
      uint64_t result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  return result;
}

void AUHipass::~AUHipass(AUHipass *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void *AUHipassFactory()
{
  uint64_t result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHipass>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHipass>::Destruct;
  return result;
}

uint64_t AUSimpleTime::Version(AUSimpleTime *this)
{
  return 0x10000;
}

BOOL AUSimpleTime::ValidFormat(AUSimpleTime *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v8 = 0;
  BOOL v7 = 0;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v8, &v7);
  BOOL result = 0;
  if ((v8 & 0xFFFFFFFD) == 1)
  {
    BOOL result = 1;
    if (v7 && (v8 == 1 || a4->mChannelsPerFrame != 2)) {
      return 0;
    }
  }
  return result;
}

uint64_t AUSimpleTime::SupportedNumChannels(AUSimpleTime *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 1;
}

BOOL AUSimpleTime::StreamFormatWritable(AUSimpleTime *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSimpleTime::SupportsTail(AUSimpleTime *this)
{
  return 1;
}

double AUSimpleTime::GetTailTime(AUSimpleTime *this)
{
  return 0.0;
}

uint64_t AUSimpleTime::GetParameterValueStrings(AUSimpleTime *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3 | a2) {
    return 4294956417;
  }
  if (!a4) {
    return 0;
  }
  v7[0] = xmmword_2643B95E8;
  v7[1] = *(_OWORD *)&off_2643B95F8;
  v7[2] = xmmword_2643B9608;
  int v8 = @"Very Fast";
  CFArrayRef v6 = CFArrayCreate(0, (const void **)v7, 7, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

double AUSimpleTime::GetParameterInfo(AUSimpleTime *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = -1073741824;
  if (!(a3 | a2))
  {
    CFStringRef v5 = (const __CFString *)kRate_Name;
    buffer->cfNameString = (CFStringRef)kRate_Name;
    buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = -939524096;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Rate;
    double result = 2.00000047;
    *(void *)&buffer->minValue = 0x400000003F000000;
    buffer->defaultValue = 1.0;
  }
  return result;
}

uint64_t AUSimpleTime::GetParameterList(AUSimpleTime *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    a3 = a4;
LABEL_4:
    *a3 = 0;
    return 0;
  }
  *a4 = 1;
  if (a3) {
    goto LABEL_4;
  }
  return 0;
}

uint64_t AUSimpleTime::Render(AUSimpleTime *this, unsigned int *a2, AudioTimeStamp *a3, unsigned int a4)
{
  CFStringRef v5 = this;
  v222 = (AUSimpleTime *)((char *)this + 128);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0);
  uint64_t v217 = (uint64_t)v5 + 528;
  v218 = (float *)((char *)v5 + 940);
  AUTimestampGenerator::State::AddOutputTime((uint64_t)v5 + 528, (uint64_t)v5 + 528, (long long *)a3, 0.0, *(double *)(Element + 80), 1.0 / *((float *)v5 + 235));
  int v8 = *((_DWORD *)v5 + 233);
  if (v8 != *((_DWORD *)v5 + 234) && !*((_DWORD *)v5 + 231))
  {
    *((_DWORD *)v5 + 234) = v8;
    AUSimpleTime::RateChanged((_DWORD *)v5 + 230, (uint64_t)v5 + 896, v218, (_DWORD *)v5 + 231, (unsigned char *)v5 + 928, v8, *((_DWORD *)v5 + 223));
  }
  int v9 = *((_DWORD *)v5 + 222);
  if (v9 != *((_DWORD *)v5 + 223) && !*((_DWORD *)v5 + 231))
  {
    *((_DWORD *)v5 + 223) = v9;
    AUSimpleTime::RateChanged((_DWORD *)v5 + 230, (uint64_t)v5 + 896, v218, (_DWORD *)v5 + 231, (unsigned char *)v5 + 928, *((_DWORD *)v5 + 234), v9);
  }
  if (!a4)
  {
LABEL_174:
    v7.n128_u64[0] = *((void *)v5 + 107);
    double v211 = v7.n128_f64[0] + (float)(*((float *)v5 + 235) * (float)a4);
    *((double *)v5 + 107) = v211;
    v212 = (void (*)(void, AudioTimeStamp *, __n128, double))*((void *)v5 + 109);
    if (v212)
    {
      double v213 = *((double *)v5 + 108);
      if (v7.n128_f64[0] < v213) {
        v7.n128_u64[0] = *((void *)v5 + 108);
      }
      if (v211 < v213) {
        double v211 = *((double *)v5 + 108);
      }
      v212(*((void *)v5 + 110), a3, v7, v211 - v7.n128_f64[0]);
    }
    return 0;
  }
  unsigned int v10 = 0;
  v214 = (AUSimpleTime *)((char *)v5 + 80);
  uint64_t v224 = a4;
  v221 = a3;
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v5 + 245);
    if (v11)
    {
      if (v11 >= v224) {
        uint64_t v12 = v224;
      }
      else {
        uint64_t v12 = v11;
      }
      long long v13 = *(_OWORD *)&a3->mRateScalar;
      *(_OWORD *)v238 = *(_OWORD *)&a3->mSampleTime;
      long long v239 = v13;
      long long v14 = *(_OWORD *)&a3->mSMPTETime.mHours;
      long long v240 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      long long v241 = v14;
      uint64_t v15 = ausdk::AUScope::SafeGetElement(v222, 0);
      double v16 = *(double *)(v15 + 80);
      int v17 = *(_DWORD *)(v15 + 108);
      int v18 = *(_DWORD *)(v15 + 92);
      *(double *)v238 = *(double *)v238 + (double)v10;
      AUTimestampGenerator::State::AddOutputTime(v217, v217, (long long *)v238, (double)v12, v16, 1.0 / *v218);
      unsigned int v225 = v10;
      if ((v18 & 0x20) != 0)
      {
        if (v17)
        {
          int v30 = 0;
          unsigned int v31 = (ausdk::AUBufferList *)(v15 + 144);
          v231 = (ausdk::AUBufferList *)(v15 + 144);
          uint64_t v32 = 40;
          uint64_t v33 = v225;
          int v227 = v17;
          do
          {
            uint64_t BufferList = ausdk::AUBufferList::GetBufferList(v31);
            if ((*(unsigned char *)(v15 + 92) & 0x20) != 0) {
              uint64_t v35 = *(void *)(BufferList + 16 * v30 + 16);
            }
            else {
              uint64_t v35 = *(void *)(BufferList + 16) + 4 * v30;
            }
            unint64_t v36 = *(char **)(*((void *)v5 + 120) + v32);
            uint64_t v37 = *((unsigned int *)v5 + 243);
            unint64_t v38 = *((unsigned int *)v5 + 242);
            char v39 = (char *)(v35 + 4 * v33);
            if (v37 + v12 <= v38)
            {
              int v47 = &v36[4 * v37];
              unsigned int v46 = (char *)(v35 + 4 * v33);
              size_t v45 = 4 * v12;
            }
            else
            {
              uint64_t v40 = v38 - v37;
              uint64_t v41 = v33;
              uint64_t v42 = v5;
              uint64_t v43 = v15;
              uint64_t v44 = v12 - (v38 - v37);
              memcpy(v39, &v36[4 * v37], 4 * (v38 - v37));
              size_t v45 = 4 * v44;
              uint64_t v15 = v43;
              CFStringRef v5 = v42;
              uint64_t v33 = v41;
              unsigned int v46 = &v39[4 * v40];
              int v17 = v227;
              unsigned int v31 = v231;
              int v47 = v36;
            }
            memcpy(v46, v47, v45);
            ++v30;
            v32 += 16;
          }
          while (v17 != v30);
        }
      }
      else
      {
        uint64_t v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
        uint64_t v20 = *(char **)(*((void *)v5 + 120) + 40);
        uint64_t v21 = (2 * *((_DWORD *)v5 + 243));
        unint64_t v22 = (2 * *((_DWORD *)v5 + 242));
        uint64_t v23 = *(void *)(v19 + 16) + 8 * v10;
        uint64_t v24 = (2 * v12);
        if (v21 + v24 <= v22)
        {
          size_t v27 = 4 * v24;
          unsigned int v29 = &v20[4 * v21];
          uint64_t v28 = (void *)(*(void *)(v19 + 16) + 8 * v10);
        }
        else
        {
          uint64_t v25 = v22 - v21;
          uint64_t v26 = v24 - (v22 - v21);
          memcpy((void *)(*(void *)(v19 + 16) + 8 * v10), &v20[4 * v21], 4 * (v22 - v21));
          size_t v27 = 4 * v26;
          uint64_t v28 = (void *)(v23 + 4 * v25);
          unsigned int v29 = v20;
        }
        memcpy(v28, v29, v27);
      }
      unsigned int v48 = *((_DWORD *)v5 + 243) + v12;
      *((_DWORD *)v5 + 243) = v48;
      unsigned int v49 = *((_DWORD *)v5 + 242);
      BOOL v50 = v48 >= v49;
      unsigned int v51 = v48 - v49;
      if (v50) {
        *((_DWORD *)v5 + 243) = v51;
      }
      unsigned int v52 = *((_DWORD *)v5 + 245);
      BOOL v50 = v52 >= v12;
      int v53 = v52 - v12;
      if (!v50) {
        return 4294956422;
      }
      *((_DWORD *)v5 + 245) = v53;
      a3 = (AudioTimeStamp *)v221;
      if (v224 == v12) {
        goto LABEL_174;
      }
      uint64_t v224 = (v224 - v12);
      unsigned int v10 = v12 + v225;
    }
    int v54 = *((_DWORD *)v5 + 234);
    if (!v54)
    {
      long long v234 = *(_OWORD *)&a3->mSampleTime;
      long long v235 = *(_OWORD *)&a3->mRateScalar;
      long long v236 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      long long v237 = *(_OWORD *)&a3->mSMPTETime.mHours;
      uint64_t result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v224);
      if (result) {
        return result;
      }
      uint64_t v199 = ausdk::AUScope::SafeGetElement(v222, 0);
      double v200 = *(double *)(v199 + 80);
      v238[1] = *((void *)&v234 + 1);
      long long v239 = v235;
      long long v240 = v236;
      long long v241 = v237;
      *(double *)v238 = *(double *)&v234 + (double)v10;
      AUTimestampGenerator::State::AddOutputTime(v217, v217, (long long *)v238, (double)v224, v200, 1.0 / *v218);
      uint64_t v201 = ausdk::AUScope::SafeGetElement(v214, 0);
      uint64_t v202 = v201;
      int v203 = *(_DWORD *)(v201 + 108);
      if ((*(unsigned char *)(v201 + 92) & 0x20) != 0)
      {
        if (v203)
        {
          for (int i = 0; i != v203; ++i)
          {
            uint64_t v207 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v202 + 144));
            if ((*(unsigned char *)(v202 + 92) & 0x20) != 0) {
              v208 = *(const void **)(v207 + 16 * i + 16);
            }
            else {
              v208 = (const void *)(*(void *)(v207 + 16) + 4 * i);
            }
            uint64_t v209 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v199 + 144));
            if ((*(unsigned char *)(v199 + 92) & 0x20) != 0) {
              uint64_t v210 = *(void *)(v209 + 16 * i + 16);
            }
            else {
              uint64_t v210 = *(void *)(v209 + 16) + 4 * i;
            }
            memcpy((void *)(v210 + 4 * v10), v208, 4 * v224);
          }
          a3 = (AudioTimeStamp *)v221;
        }
      }
      else
      {
        v204 = *(const void **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v201 + 144)) + 16);
        uint64_t v205 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v199 + 144));
        memcpy((void *)(*(void *)(v205 + 16) + 4 * v203 * v10), v204, 4 * (v203 * v224));
      }
      goto LABEL_174;
    }
    unsigned int v226 = v10;
    if (!*((unsigned char *)v5 + 928)) {
      goto LABEL_63;
    }
    unsigned int v55 = *((_DWORD *)v5 + 236) >> (v54 > 0);
    uint64_t v56 = ausdk::AUScope::SafeGetElement(v214, 0);
    int v57 = *(_DWORD *)(v56 + 108);
    unsigned int v58 = *((_DWORD *)v5 + 84);
    if (v57 != 2 || (*(_DWORD *)(v56 + 92) & 0x20) != 0)
    {
      if (v55)
      {
        unsigned int v60 = 0;
        unsigned int v232 = v55;
        unsigned int __n = *((_DWORD *)v5 + 84);
        while (1)
        {
          uint64_t v61 = v58 >= v55 - v60 ? v55 - v60 : v58;
          uint64_t result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v61);
          if (result) {
            return result;
          }
          if (v57)
          {
            int v63 = 0;
            uint64_t v64 = 40;
            do
            {
              uint64_t v65 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v56 + 144));
              if ((*(unsigned char *)(v56 + 92) & 0x20) != 0) {
                char v66 = *(const void **)(v65 + 16 * v63 + 16);
              }
              else {
                char v66 = (const void *)(*(void *)(v65 + 16) + 4 * v63);
              }
              memcpy((void *)(*(void *)(*((void *)v5 + 119) + v64) + 4 * v60), v66, 4 * v61);
              ++v63;
              v64 += 16;
            }
            while (v57 != v63);
          }
          v60 += v61;
          unsigned int v55 = v232;
          unsigned int v58 = __n;
          if (v60 >= v232) {
            goto LABEL_62;
          }
        }
      }
      goto LABEL_62;
    }
    if (v55) {
      break;
    }
LABEL_62:
    *((unsigned char *)v5 + 928) = 0;
LABEL_63:
    uint64_t v70 = ausdk::AUScope::SafeGetElement(v222, 0);
    uint64_t v71 = *(unsigned int *)(v70 + 108);
    int v72 = *(_DWORD *)(v70 + 92);
    uint64_t v73 = *((unsigned int *)v5 + 231);
    int v74 = *((_DWORD *)v5 + v73 + 224);
    if ((v73 + 1) < *((_DWORD *)v5 + 230)) {
      int v75 = v73 + 1;
    }
    else {
      int v75 = 0;
    }
    *((_DWORD *)v5 + 231) = v75;
    uint64_t v76 = *((unsigned int *)v5 + 244);
    signed int v77 = *((_DWORD *)v5 + 234);
    unint64_t v78 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
    char v220 = v74;
    int v79 = v74 & 3;
    uint64_t v233 = v76;
    if ((v79 - 1) >= 2)
    {
      if (!v79)
      {
        if ((v72 & 0x20) != 0)
        {
          if (v71)
          {
            uint64_t v141 = 0;
            uint64_t v142 = 16 * v71;
            unint64_t v143 = v76 + v78;
            do
            {
              v144 = *(char **)(*((void *)v5 + 120) + v141 + 40);
              unint64_t v145 = *((unsigned int *)v5 + 242);
              uint64_t v146 = *(void *)(*((void *)v5 + 119) + v141 + 40);
              if (v143 <= v145)
              {
                unsigned int v151 = &v144[4 * v76];
                uint64_t v150 = *(const void **)(*((void *)v5 + 119) + v141 + 40);
                size_t v149 = 4 * v78;
              }
              else
              {
                uint64_t v147 = v145 - v76;
                unint64_t v148 = v78 - (v145 - v76);
                memcpy(&v144[4 * v76], *(const void **)(*((void *)v5 + 119) + v141 + 40), 4 * (v145 - v76));
                size_t v149 = 4 * v148;
                uint64_t v150 = (const void *)(v146 + 4 * v147);
                unsigned int v151 = v144;
              }
              memcpy(v151, v150, v149);
              v141 += 16;
              uint64_t v76 = v233;
            }
            while (v142 != v141);
          }
        }
        else
        {
          uint64_t v96 = *(char **)(*((void *)v5 + 120) + 40);
          uint64_t v97 = (v76 * v71);
          unint64_t v98 = (*((_DWORD *)v5 + 242) * v71);
          uint64_t v99 = *(void *)(*((void *)v5 + 119) + 40);
          uint64_t v100 = (v78 * v71);
          if (v100 + v97 <= v98)
          {
            size_t v103 = 4 * v100;
            uint64_t v105 = &v96[4 * v97];
            uint64_t v104 = *(const void **)(*((void *)v5 + 119) + 40);
          }
          else
          {
            uint64_t v101 = v98 - v97;
            uint64_t v102 = v100 - (v98 - v97);
            memcpy(&v96[4 * v97], *(const void **)(*((void *)v5 + 119) + 40), 4 * (v98 - v97));
            size_t v103 = 4 * v102;
            uint64_t v104 = (const void *)(v99 + 4 * v101);
            uint64_t v105 = v96;
          }
          memcpy(v105, v104, v103);
        }
      }
      goto LABEL_153;
    }
    int v80 = v79 == 2;
    uint64_t v81 = v77 >> 31;
    if ((v72 & 1) == 0)
    {
      if (v71 != 2)
      {
        if (v71)
        {
          uint64_t v125 = 0;
          if (v79 == 2) {
            unint64_t v126 = -(uint64_t)(0x100000000 / v78);
          }
          else {
            unint64_t v126 = 0x100000000 / v78;
          }
          unint64_t v228 = (unint64_t)(v79 == 2) << 32;
          size_t __na = v126;
          unint64_t v127 = v76 + v78;
          uint64_t v128 = 16 * v71;
          BOOL v216 = v79 == 2;
          uint64_t v215 = 16 * v71;
          do
          {
            uint64_t v129 = *(_DWORD **)(*((void *)v5 + 120) + v125 + 40);
            unint64_t v130 = *((unsigned int *)v5 + 242);
            v131 = *(int **)(*((void *)v5 + 119) + v125 + 40);
            v238[0] = v228;
            uint64_t v132 = &v129[v76];
            if (v127 <= v130)
            {
              char v140 = v81 == v80;
              unint64_t v137 = v131;
              uint64_t v138 = v78;
              uint64_t v139 = __na;
            }
            else
            {
              char v133 = v81 == v80;
              unint64_t v134 = v127;
              uint64_t v135 = v81;
              uint64_t v136 = v130 - v76;
              uint64_t v223 = v78 - (v130 - v76);
              FadeToRingMonoLoop_I(v132, v131, v130 - v76, v238, __na, v133);
              unint64_t v137 = &v131[v136];
              uint64_t v81 = v135;
              unint64_t v127 = v134;
              uint64_t v128 = v215;
              uint64_t v132 = v129;
              uint64_t v138 = v223;
              uint64_t v139 = __na;
              char v140 = v133;
              int v80 = v216;
            }
            FadeToRingMonoLoop_I(v132, v137, v138, v238, v139, v140);
            v125 += 16;
            uint64_t v76 = v233;
          }
          while (v128 != v125);
        }
        goto LABEL_153;
      }
      unint64_t v82 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
      uint64_t v83 = *((void *)v5 + 120);
      uint64_t v84 = *(_DWORD **)(v83 + 40);
      if ((v72 & 0x20) != 0)
      {
        v179 = *(int **)(v83 + 56);
        unint64_t v180 = *((unsigned int *)v5 + 242);
        uint64_t v181 = *((void *)v5 + 119);
        v182 = *(int **)(v181 + 40);
        v183 = *(int **)(v181 + 56);
        if (v79 == 2) {
          unint64_t v184 = -(uint64_t)(0x100000000 / v82);
        }
        else {
          unint64_t v184 = 0x100000000 / v82;
        }
        v238[0] = (unint64_t)(v79 == 2) << 32;
        v185 = &v84[v76];
        v186 = &v179[v76];
        if (v76 + (unint64_t)v82 <= v180)
        {
          char v194 = v81 == v80;
          v190 = v182;
          v191 = v183;
          uint64_t v192 = v82;
          uint64_t v193 = v184;
        }
        else
        {
          char v187 = v81 == v80;
          uint64_t v188 = v180 - v76;
          uint64_t v189 = v82 - (v180 - v76);
          FadeToRingStereoNonInterleavedLoop_I(v185, v186, v182, v183, v180 - v76, v238, v184, v187);
          v190 = &v182[v188];
          v191 = &v183[v188];
          v185 = v84;
          v186 = v179;
          uint64_t v192 = v189;
          uint64_t v193 = v184;
          char v194 = v187;
        }
        FadeToRingStereoNonInterleavedLoop_I(v185, v186, v190, v191, v192, v238, v193, v194);
      }
      else
      {
        unint64_t v85 = *((unsigned int *)v5 + 242);
        int v86 = *(int **)(*((void *)v5 + 119) + 40);
        if (v79 == 2) {
          unint64_t v87 = -(uint64_t)(0x100000000 / v82);
        }
        else {
          unint64_t v87 = 0x100000000 / v82;
        }
        v238[0] = (unint64_t)(v79 == 2) << 32;
        uint64_t v88 = (uint64_t)&v84[2 * v76];
        if (v76 + (unint64_t)v82 <= v85)
        {
          char v95 = v81 == v80;
          unsigned __int8 v92 = v86;
          uint64_t v93 = v82;
          uint64_t v94 = v87;
        }
        else
        {
          char v89 = v81 == v80;
          uint64_t v90 = v85 - v76;
          uint64_t v91 = v82 - (v85 - v76);
          FadeToRingStereoInterleavedLoop_I(v88, v86, v85 - v76, v238, v87, v89);
          unsigned __int8 v92 = &v86[2 * v90];
          uint64_t v88 = (uint64_t)v84;
          uint64_t v93 = v91;
          uint64_t v94 = v87;
          char v95 = v89;
        }
        FadeToRingStereoInterleavedLoop_I(v88, v92, v93, v238, v94, v95);
      }
      goto LABEL_152;
    }
    if (v71 == 2)
    {
      uint64_t v106 = *((void *)v5 + 120);
      unsigned int v107 = *(float **)(v106 + 40);
      unint64_t v82 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
      int v108 = *(float **)(v106 + 56);
      unint64_t v109 = *((unsigned int *)v5 + 242);
      uint64_t v110 = *((void *)v5 + 119);
      uint64_t v111 = *(float **)(v110 + 40);
      UInt32 v112 = *(float **)(v110 + 56);
      if (v79 == 2) {
        float v113 = 1.0;
      }
      else {
        float v113 = 0.0;
      }
      if (v79 == 2) {
        float v114 = -(float)(1.0 / (float)v82);
      }
      else {
        float v114 = 1.0 / (float)v82;
      }
      *(float *)v238 = v113;
      unsigned int v115 = &v107[v76];
      uint64_t v116 = &v108[v76];
      if (v76 + (unint64_t)v82 <= v109)
      {
        char v124 = v81 == v80;
        uint64_t v120 = v111;
        int v121 = v112;
        uint64_t v122 = v82;
        float v123 = v114;
      }
      else
      {
        char v117 = v81 == v80;
        uint64_t v118 = v109 - v76;
        uint64_t v119 = v82 - (v109 - v76);
        FadeToRingStereoNonInterleavedLoop_F(v115, v116, v111, v112, v109 - v76, (float *)v238, v114, v117);
        uint64_t v120 = &v111[v118];
        int v121 = &v112[v118];
        unsigned int v115 = v107;
        uint64_t v116 = v108;
        uint64_t v122 = v119;
        float v123 = v114;
        char v124 = v117;
      }
      FadeToRingStereoNonInterleavedLoop_F(v115, v116, v120, v121, v122, (float *)v238, v123, v124);
LABEL_152:
      LODWORD(v78) = v82;
      goto LABEL_153;
    }
    if (v71)
    {
      uint64_t v152 = 0;
      uint64_t v153 = *((void *)v5 + 120);
      unint64_t v154 = *((unsigned int *)v5 + 242);
      uint64_t v155 = *((void *)v5 + 119);
      float v156 = 1.0 / (float)v78;
      if (v79 == 2) {
        float v157 = 1.0;
      }
      else {
        float v157 = 0.0;
      }
      if (v79 == 2) {
        float v156 = -v156;
      }
      uint64_t v158 = v154 - v76;
      do
      {
        long long v159 = *(float **)(v153 + 16 * v152 + 40);
        int64x2_t v160 = *(float **)(v155 + 16 * v152 + 40);
        __int16 v161 = &v159[v76];
        if (v76 + (unint64_t)v78 <= v154)
        {
          if (v81 == v80)
          {
            if (v78)
            {
              unint64_t v166 = v78;
              float v167 = v157;
              do
              {
                float v168 = *v160++;
                *__int16 v161 = *v161 + (float)(v168 * v167);
                ++v161;
                float v167 = v156 + v167;
                --v166;
              }
              while (v166);
            }
          }
          else
          {
            unint64_t v173 = v78;
            float v174 = v157;
            if (v78)
            {
              do
              {
                float v175 = *v160++;
                *v161++ = v174 * v175;
                float v174 = v156 + v174;
                --v173;
              }
              while (v173);
            }
          }
          goto LABEL_137;
        }
        v162 = *(float **)(v155 + 16 * v152 + 40);
        uint64_t v163 = v154 - v76;
        float v164 = v157;
        if (v81 == v80)
        {
          if (v154 == v76)
          {
            float v164 = v157;
            goto LABEL_127;
          }
          do
          {
            float v165 = *v162++;
            *__int16 v161 = *v161 + (float)(v165 * v164);
            ++v161;
            float v164 = v156 + v164;
            --v163;
          }
          while (v163);
        }
        else
        {
          if (v154 == v76)
          {
            float v164 = v157;
LABEL_134:
            if (v78 != v158)
            {
              v176 = &v160[v158];
              unint64_t v177 = v78 - (v154 - v76);
              do
              {
                float v178 = *v176++;
                *v159++ = v164 * v178;
                float v164 = v156 + v164;
                --v177;
              }
              while (v177);
            }
            goto LABEL_137;
          }
          do
          {
            float v169 = *v162++;
            *v161++ = v164 * v169;
            float v164 = v156 + v164;
            --v163;
          }
          while (v163);
        }
        if (v81 != v80) {
          goto LABEL_134;
        }
LABEL_127:
        if (v78 != v158)
        {
          v170 = &v160[v158];
          unint64_t v171 = v78 - (v154 - v76);
          do
          {
            float v172 = *v170++;
            *long long v159 = *v159 + (float)(v172 * v164);
            ++v159;
            float v164 = v156 + v164;
            --v171;
          }
          while (v171);
        }
LABEL_137:
        ++v152;
      }
      while (v152 != v71);
    }
LABEL_153:
    if ((v220 & 4) != 0) {
      *((unsigned char *)v5 + 928) = 1;
    }
    a3 = (AudioTimeStamp *)v221;
    unsigned int v10 = v226;
    if ((v220 & 8) != 0)
    {
      unsigned int v195 = *((_DWORD *)v5 + 244) + v78;
      *((_DWORD *)v5 + 244) = v195;
      unsigned int v196 = *((_DWORD *)v5 + 242);
      BOOL v50 = v195 >= v196;
      unsigned int v197 = v195 - v196;
      if (v50) {
        *((_DWORD *)v5 + 244) = v197;
      }
      unsigned int v198 = *((_DWORD *)v5 + 245) + v78;
      *((_DWORD *)v5 + 245) = v198;
      if (v196 < v198) {
        return 4294956422;
      }
    }
  }
  unsigned int v67 = 0;
  while (1)
  {
    uint64_t v68 = v58 >= v55 - v67 ? v55 - v67 : v58;
    uint64_t result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v68);
    if (result) {
      return result;
    }
    uint64_t v69 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v56 + 144));
    memcpy((void *)(*(void *)(*((void *)v5 + 119) + 40) + 8 * v67), *(const void **)(v69 + 16), 4 * (2 * v68));
    v67 += v68;
    if (v67 >= v55) {
      goto LABEL_62;
    }
  }
}

_DWORD *AUSimpleTime::RateChanged(_DWORD *result, uint64_t a2, float *a3, _DWORD *a4, unsigned char *a5, int a6, int a7)
{
  if (a7) {
    a6 = 0;
  }
  switch(a6)
  {
    case -3:
      *uint64_t result = 3;
      *(void *)a2 = 0x500000008;
      *(_DWORD *)(a2 + 8) = 10;
      float v8 = 0.5;
      goto LABEL_12;
    case -2:
      *uint64_t result = 4;
      *(_OWORD *)a2 = xmmword_21BAB6EF0;
      float v8 = 0.66667;
      goto LABEL_12;
    case -1:
      *uint64_t result = 6;
      *(_OWORD *)a2 = xmmword_21BAB6EE0;
      float v8 = 0.8;
      *(void *)(a2 + 16) = 0xA00000005;
      goto LABEL_12;
    case 0:
      *uint64_t result = 1;
      *(_DWORD *)a2 = 12;
      float v8 = 1.0;
      goto LABEL_12;
    case 1:
      *uint64_t result = 5;
      *(_OWORD *)a2 = xmmword_21BAB6ED0;
      *(_DWORD *)(a2 + 16) = 13;
      float v8 = 1.25;
      goto LABEL_12;
    case 2:
      *uint64_t result = 3;
      *(void *)a2 = 0x60000000CLL;
      *(_DWORD *)(a2 + 8) = 13;
      float v8 = 1.5;
      goto LABEL_12;
    case 3:
      *uint64_t result = 2;
      *(void *)a2 = 0xD00000006;
      float v8 = 2.0;
LABEL_12:
      *a3 = v8;
      break;
    default:
      break;
  }
  *a4 = 0;
  *a5 = 1;
  return result;
}

float *FadeToRingStereoNonInterleavedLoop_F(float *result, float *a2, float *a3, float *a4, uint64_t a5, float *a6, float a7, char a8)
{
  float v8 = *a6;
  if (a8)
  {
    for (; a5; --a5)
    {
      float v9 = *a3++;
      *uint64_t result = *result + (float)(v9 * v8);
      ++result;
      float v10 = *a4++;
      *a2 = *a2 + (float)(v10 * v8);
      ++a2;
      float v8 = v8 + a7;
    }
  }
  else
  {
    for (; a5; --a5)
    {
      float v11 = *a3++;
      *result++ = v8 * v11;
      float v12 = *a4++;
      *a2++ = v8 * v12;
      float v8 = v8 + a7;
    }
  }
  *a6 = v8;
  return result;
}

uint64_t FadeToRingStereoInterleavedLoop_I(uint64_t result, int *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v6 = *a4;
  if (a6)
  {
    if (a3)
    {
      uint64_t v7 = v6 << 16;
      float v8 = (_DWORD *)(result + 4);
      float v9 = a2 + 1;
      v6 += a5 * a3;
      do
      {
        *(v8 - 1) += (unint64_t)(SHIDWORD(v7) * (uint64_t)*(v9 - 1)) >> 16;
        *v8 += (unint64_t)(SHIDWORD(v7) * (uint64_t)*v9) >> 16;
        v8 += 2;
        v7 += a5 << 16;
        v9 += 2;
        --a3;
      }
      while (a3);
    }
  }
  else if (a3)
  {
    uint64_t v10 = v6 << 16;
    float v11 = (_DWORD *)(result + 4);
    float v12 = a2 + 1;
    v6 += a5 * a3;
    do
    {
      *(v11 - 1) = (unint64_t)(SHIDWORD(v10) * (uint64_t)*(v12 - 1)) >> 16;
      *float v11 = (unint64_t)(SHIDWORD(v10) * (uint64_t)*v12) >> 16;
      v11 += 2;
      v10 += a5 << 16;
      v12 += 2;
      --a3;
    }
    while (a3);
  }
  *a4 = v6;
  return result;
}

_DWORD *FadeToRingStereoNonInterleavedLoop_I(_DWORD *result, int *a2, int *a3, int *a4, uint64_t a5, uint64_t *a6, uint64_t a7, char a8)
{
  uint64_t v8 = *a6;
  if (a8)
  {
    if (a5)
    {
      uint64_t v9 = v8 << 16;
      v8 += a7 * a5;
      do
      {
        int v10 = *a3++;
        *result++ += (unint64_t)(SHIDWORD(v9) * (uint64_t)v10) >> 16;
        int v11 = *a4++;
        *a2++ += (unint64_t)(SHIDWORD(v9) * (uint64_t)v11) >> 16;
        v9 += a7 << 16;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v12 = v8 << 16;
    v8 += a7 * a5;
    do
    {
      int v13 = *a3++;
      *result++ = (unint64_t)(SHIDWORD(v12) * (uint64_t)v13) >> 16;
      int v14 = *a4++;
      *a2++ = (unint64_t)(SHIDWORD(v12) * (uint64_t)v14) >> 16;
      v12 += a7 << 16;
      --a5;
    }
    while (a5);
  }
  *a6 = v8;
  return result;
}

_DWORD *FadeToRingMonoLoop_I(_DWORD *result, int *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v6 = *a4;
  if (a6)
  {
    if (a3)
    {
      uint64_t v7 = v6 << 16;
      v6 += a5 * a3;
      do
      {
        int v8 = *a2++;
        *result++ += (unint64_t)(SHIDWORD(v7) * (uint64_t)v8) >> 16;
        v7 += a5 << 16;
        --a3;
      }
      while (a3);
    }
  }
  else if (a3)
  {
    uint64_t v9 = v6 << 16;
    v6 += a5 * a3;
    do
    {
      int v10 = *a2++;
      *result++ = (unint64_t)(SHIDWORD(v9) * (uint64_t)v10) >> 16;
      v9 += a5 << 16;
      --a3;
    }
    while (a3);
  }
  *a4 = v6;
  return result;
}

uint64_t AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(AUSimpleTime *this, uint64_t a2)
{
  int v4 = (AUSimpleTime *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 80), 0);
  v6.n128_u64[0] = 0;
  AUTimestampGenerator::State::GenerateInputTime((__n128 *)this + 33, 0, v6, *(double *)(Element + 80));
  long long v9 = *v7;
  long long v8 = v7[1];
  long long v10 = v7[3];
  *(_OWORD *)((char *)this + 824) = v7[2];
  *(_OWORD *)((char *)this + 840) = v10;
  *(_OWORD *)((char *)this + 792) = v9;
  *(_OWORD *)((char *)this + 808) = v8;
  *((_DWORD *)this + 212) &= ~2u;
  if (*((double *)this + 107) < 0.0) {
    *((void *)this + 107) = *((void *)this + 99);
  }
  if (*((double *)this + 108) < 0.0) {
    *((void *)this + 108) = *((void *)this + 99);
  }
  unsigned int v15 = 0;
  int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  uint64_t v12 = ausdk::AUInputElement::PullInput(v11, &v15, (const AudioTimeStamp *)((char *)this + 792), 0, a2);
  uint64_t v13 = __udivti3();
  *((double *)this + 99) = *((double *)this + 99) + (double)a2;
  *((void *)this + 100) += v13;
  *((double *)this + 90) = *((double *)this + 66) + (double)a2;
  return v12;
}

uint64_t AUSimpleTime::CanScheduleParameters(AUSimpleTime *this)
{
  return 0;
}

uint64_t AUSimpleTime::SetParameter(AUSimpleTime *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  float v7 = 0.0;
  if (!(a3 | a2))
  {
    if (a5 >= 0.58333)
    {
      if (a5 >= 0.73333)
      {
        if (a5 >= 0.9)
        {
          if (a5 >= 1.125)
          {
            if (a5 >= 1.375)
            {
              if (a5 >= 1.75)
              {
                *((_DWORD *)this + 233) = 3;
                float v7 = 2.0;
              }
              else
              {
                *((_DWORD *)this + 233) = 2;
                float v7 = 1.5;
              }
            }
            else
            {
              *((_DWORD *)this + 233) = 1;
              float v7 = 1.25;
            }
          }
          else
          {
            *((_DWORD *)this + 233) = 0;
            float v7 = 1.0;
          }
        }
        else
        {
          *((_DWORD *)this + 233) = -1;
          float v7 = 0.8;
        }
      }
      else
      {
        *((_DWORD *)this + 233) = -2;
        float v7 = 0.66667;
      }
    }
    else
    {
      *((_DWORD *)this + 233) = -3;
      float v7 = 0.5;
    }
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, v7, 0);
  return 0;
}

uint64_t AUSimpleTime::SetProperty(AUSimpleTime *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 3801:
      char v8 = __src[217];
      int v12 = *(_DWORD *)(__src + 218);
      __int16 v13 = *((_WORD *)__src + 111);
      uint64_t v9 = *((void *)__src + 28);
      long long v10 = *(_OWORD *)(__src + 232);
      uint64_t v11 = *((void *)__src + 31);
      memmove((char *)this + 528, __src, 0xD9uLL);
      uint64_t result = 0;
      *((unsigned char *)this + 745) = v8;
      *(_DWORD *)((char *)this + 746) = v12;
      *((_WORD *)this + 375) = v13;
      *((void *)this + 94) = v9;
      *(_OWORD *)((char *)this + 760) = v10;
      *((unsigned char *)this + 776) = v11;
      *((unsigned char *)this + 784) = 0;
      return result;
    case 49:
      if (a6 < 0x10) {
        return 4294956445;
      }
      uint64_t result = 0;
      *(_OWORD *)((char *)this + 872) = *(_OWORD *)__src;
      break;
    case 21:
      if (a6 >= 4)
      {
        uint64_t result = 0;
        *((_DWORD *)this + 222) = *(_DWORD *)__src;
        return result;
      }
      return 4294956445;
    default:
      return 4294956417;
  }
  return result;
}

uint64_t AUSimpleTime::GetProperty(AUSimpleTime *this, int a2, int a3, unsigned int a4, char *__dst)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 3800)
  {
    if (a2 == 3801)
    {
      char v19 = *((unsigned char *)this + 745);
      int v27 = *(_DWORD *)((char *)this + 746);
      __int16 v28 = *((_WORD *)this + 375);
      uint64_t v20 = *((void *)this + 94);
      long long v29 = *(_OWORD *)((char *)this + 760);
      LOBYTE(v30) = *((unsigned char *)this + 776);
      memmove(__dst, (char *)this + 528, 0xD9uLL);
      uint64_t result = 0;
      __dst[217] = v19;
      *(_DWORD *)(__dst + 218) = v27;
      *((_WORD *)__dst + 111) = v28;
      *((void *)__dst + 28) = v20;
      *(_OWORD *)(__dst + 232) = v29;
      *((void *)__dst + 31) = v30;
    }
    else if (a2 == 3802)
    {
      if (*((unsigned char *)this + 17))
      {
        unsigned int v8 = *(_DWORD *)__dst;
        int v27 = 0;
        (*(void (**)(AUSimpleTime *, void, void, void, int *))(*(void *)this + 144))(this, 0, 0, 0, &v27);
        int v9 = *((_DWORD *)this + 222);
        long long v29 = *((_OWORD *)this + 56);
        uint64_t v30 = *((void *)this + 114);
        unsigned int v10 = *((_DWORD *)this + 230);
        int v11 = *((_DWORD *)this + 231);
        unsigned int v12 = *((_DWORD *)this + 245);
        int v13 = *((_DWORD *)this + 223);
        int v14 = *((unsigned __int8 *)this + 928);
        int v15 = *((_DWORD *)this + 233);
        if (v15 == *((_DWORD *)this + 234) || v11)
        {
          unsigned int v17 = *((_DWORD *)this + 231);
          int v15 = *((_DWORD *)this + 234);
        }
        else
        {
          if (v13) {
            int v16 = 0;
          }
          else {
            int v16 = *((_DWORD *)this + 233);
          }
          switch(v16)
          {
            case -3:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0x500000008;
              int v18 = 10;
              goto LABEL_38;
            case -2:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6EF0;
              int v14 = 1;
              unsigned int v10 = 4;
              break;
            case -1:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6EE0;
              uint64_t v30 = 0xA00000005;
              int v14 = 1;
              unsigned int v10 = 6;
              break;
            case 0:
              unsigned int v17 = 0;
              LODWORD(v29) = 12;
              unsigned int v10 = 1;
              goto LABEL_36;
            case 1:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6ED0;
              LODWORD(v30) = 13;
              int v14 = 1;
              unsigned int v10 = 5;
              break;
            case 2:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0x60000000CLL;
              int v18 = 13;
LABEL_38:
              DWORD2(v29) = v18;
              int v14 = 1;
              unsigned int v10 = 3;
              break;
            case 3:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0xD00000006;
              int v14 = 1;
              unsigned int v10 = 2;
              break;
            default:
              unsigned int v17 = 0;
LABEL_36:
              int v14 = 1;
              break;
          }
        }
        if (v9 != v13 && !v11)
        {
          if (v9) {
            int v21 = 0;
          }
          else {
            int v21 = v15;
          }
          switch(v21)
          {
            case -3:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0x500000008;
              int v22 = 10;
              goto LABEL_45;
            case -2:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6EF0;
              int v14 = 1;
              unsigned int v10 = 4;
              break;
            case -1:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6EE0;
              uint64_t v30 = 0xA00000005;
              int v14 = 1;
              unsigned int v10 = 6;
              break;
            case 0:
              unsigned int v17 = 0;
              LODWORD(v29) = 12;
              unsigned int v10 = 1;
              goto LABEL_43;
            case 1:
              unsigned int v17 = 0;
              long long v29 = xmmword_21BAB6ED0;
              LODWORD(v30) = 13;
              int v14 = 1;
              unsigned int v10 = 5;
              break;
            case 2:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0x60000000CLL;
              int v22 = 13;
LABEL_45:
              DWORD2(v29) = v22;
              int v14 = 1;
              unsigned int v10 = 3;
              break;
            case 3:
              unsigned int v17 = 0;
              *(void *)&long long v29 = 0xD00000006;
              int v14 = 1;
              unsigned int v10 = 2;
              break;
            default:
              unsigned int v17 = 0;
LABEL_43:
              int v14 = 1;
              break;
          }
        }
        unsigned int v23 = 0;
        if (v8)
        {
          if (!v12) {
            goto LABEL_54;
          }
LABEL_49:
          int v24 = v12 >= v8 ? v8 : v12;
          v8 -= v24;
          if (v8)
          {
            v12 -= v24;
LABEL_54:
            while (v15)
            {
              if (v14) {
                int v25 = *((_DWORD *)this + 236) >> (v15 > 0);
              }
              else {
                int v25 = 0;
              }
              v23 += v25;
              unsigned int v26 = *((_DWORD *)&v29 + v17);
              if (v17 + 1 < v10) {
                ++v17;
              }
              else {
                unsigned int v17 = 0;
              }
              int v14 = (v26 >> 2) & 1;
              v12 += (*((_DWORD *)this + 236) >> (v15 > 0)) & ((int)(v26 << 28) >> 31);
              if (v12) {
                goto LABEL_49;
              }
            }
            unsigned int v23 = v8;
          }
        }
        uint64_t result = 0;
        *((_DWORD *)__dst + 1) = v23;
      }
      else
      {
        return 4294956429;
      }
    }
  }
  else if (a2 == 21)
  {
    uint64_t result = 0;
    *(_DWORD *)__dst = *((_DWORD *)this + 222);
  }
  else if (a2 == 49)
  {
    uint64_t result = 0;
    *(_OWORD *)__dst = *(_OWORD *)((char *)this + 872);
  }
  return result;
}

uint64_t AUSimpleTime::GetPropertyInfo(AUSimpleTime *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 3800)
    {
      if (a2 == 3801)
      {
        BOOL v7 = 1;
        unsigned int v8 = 256;
      }
      else
      {
        if (a2 != 3802) {
          return result;
        }
        BOOL v7 = 0;
        unsigned int v8 = 8;
      }
    }
    else if (a2 == 21)
    {
      BOOL v7 = 1;
      unsigned int v8 = 4;
    }
    else
    {
      if (a2 != 49) {
        return result;
      }
      BOOL v7 = 1;
      unsigned int v8 = 16;
    }
    uint64_t result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

uint64_t AUSimpleTime::Reset(AUSimpleTime *this)
{
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((void *)this + 96) = 0x3FF0000000000000;
  *((unsigned char *)this + 784) = 1;
  *((void *)this + 107) = 0xBFF0000000000000;
  *((void *)this + 108) = 0xBFF0000000000000;
  *((_DWORD *)this + 243) = 0;
  *((void *)this + 122) = 0;
  AUSimpleTime::RateChanged((_DWORD *)this + 230, (uint64_t)this + 896, (float *)this + 235, (_DWORD *)this + 231, (unsigned char *)this + 928, *((_DWORD *)this + 234), *((_DWORD *)this + 223));
  return 0;
}

void AUSimpleTime::Cleanup(AUSimpleTime *this)
{
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 119, 0);

  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 120, 0);
}

uint64_t AUSimpleTime::Initialize(AUSimpleTime *this)
{
  uint64_t v2 = (AUSimpleTime *)((char *)this + 80);
  float v3 = (CADeprecated::CABufferList *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 80), 0)+ 108);
  if (v3 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 108)) {
    return 4294956428;
  }
  int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 92) & 1;
  if (v4 != (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 92) & 1)) {
    return 4294956428;
  }
  double v5 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v5 != *(double *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 80)) {
    return 4294956428;
  }
  int v9 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 92);
  if ((v9 & 0x20) == 0 && v3 != 2 && !v4) {
    return 4294956428;
  }
  double v11 = v5 * *((float *)this + 237) / 1000.0;
  *((_DWORD *)this + 236) = v11;
  *((_DWORD *)this + 242) = 2 * v11;
  if ((v9 & 0x20) != 0)
  {
    unsigned int v12 = CADeprecated::CABufferList::New(v3, v6, v7, v8);
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 119, v12);
    int v16 = CADeprecated::CABufferList::New(v3, v13, v14, v15);
  }
  else
  {
    unsigned int v17 = operator new(0x30uLL);
    *unsigned int v17 = "";
    v17[1] = 0;
    *((_DWORD *)v17 + 4) = 0;
    *((_DWORD *)v17 + 6) = 1;
    *((_DWORD *)v17 + 8) = v3;
    *((_DWORD *)v17 + 9) = 0;
    v17[5] = 0;
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 119, v17);
    int v16 = operator new(0x30uLL);
    *int v16 = "";
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    *((_DWORD *)v16 + 6) = 1;
    *((_DWORD *)v16 + 8) = v3;
    *((_DWORD *)v16 + 9) = 0;
    v16[5] = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 120, v16);
  CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 119));
  CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 120));
  int v18 = *(uint64_t (**)(AUSimpleTime *, void, void))(*(void *)this + 72);

  return v18(this, 0, 0);
}

void *CADeprecated::CABufferList::New(CADeprecated::CABufferList *this, unsigned int a2, unsigned int a3, const char *a4)
{
  int v4 = (int)this;
  uint64_t result = operator new(16 * this + 32);
  *uint64_t result = "";
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    unsigned int v6 = result + 4;
    do
    {
      *unsigned int v6 = 1;
      v6[1] = 0;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void AUSimpleTime::~AUSimpleTime(AUSimpleTime *this)
{
  *(void *)this = &unk_26CBA8E70;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 120, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 119, 0);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBA8E70;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 120, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 119, 0);

  ausdk::AUBase::~AUBase(this);
}

void *AUSimpleTimeFactory()
{
  uint64_t result = malloc_type_malloc(0x418uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUSimpleTime>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUSimpleTime>::Destruct;
  return result;
}

void virtual thunk to'Connection::~Connection(void *a1)
{
}

{
  Connection::~Connection((Connection *)((char *)a1 + *(void *)(*a1 - 24)));
}

void non-virtual thunk to'Connection::RegisterInput(Connection *this, int a2)
{
}

float ControlInputInstance<Connection,&Connection::HandleScaleInput>::Set(uint64_t a1, float a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      unsigned int v6 = "Connection.cpp";
      __int16 v7 = 1024;
      int v8 = 133;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: Connection scaling input must be normalized!", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 298)) {
    a2 = 1.0 - a2;
  }
  float result = *(float *)(v3 + 276) * a2;
  *(float *)(v3 + 276) = result;
  *(unsigned char *)(v3 + 248) = 1;
  return result;
}

uint64_t ControlInputInstance<Connection,&Connection::HandleScaleInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

uint64_t non-virtual thunk to'Connection::GetRunFrameCount(Connection *this, uint64_t a2)
{
  return a2;
}

void non-virtual thunk to'Connection::~Connection(Connection *this)
{
}

{
  Connection::~Connection((Connection *)((char *)this - 152));
}

uint64_t Connection::GetRunFrameCount(Connection *this, uint64_t a2)
{
  return a2;
}

float Connection::Update(Connection *this, int a2, float result)
{
  if ((a2 - 4300) >= 3)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 32) + 56))(*((void *)this + 32));
    (*(void (**)(Connection *, uint64_t))(*(void *)this + 40))(this, v4);
    unsigned int v5 = *(_DWORD *)(*((void *)this + 32) + 112);
    *((_DWORD *)this + 70) = v5;
    *((void *)this + 36) = Transform::GetFunction(v5);
    uint64_t v6 = *((void *)this + 32);
    *((unsigned char *)this + 296) = *(unsigned char *)(v6 + 108);
    float v8 = *(float *)(v6 + 100);
    float v7 = *(float *)(v6 + 104);
    int v9 = *(_DWORD *)(v6 + 124);
    if (v8 == (float)-v7)
    {
      if (v9 == 1)
      {
        *((unsigned char *)this + 297) = 0;
        *((unsigned char *)this + 298) = *(unsigned char *)(v6 + 120);
LABEL_9:
        *((float *)this + 67) = v8;
        float result = v7 - v8;
        *((float *)this + 68) = result;
        return result;
      }
      *((unsigned char *)this + 297) = 1;
      *((unsigned char *)this + 298) = *(unsigned char *)(v6 + 120);
    }
    else
    {
      *((unsigned char *)this + 298) = *(unsigned char *)(v6 + 120);
      *((unsigned char *)this + 297) = v9 == 2;
      if (v9 != 2) {
        goto LABEL_9;
      }
    }
    float v8 = 0.0;
    goto LABEL_9;
  }
  return result;
}

void CustomTransform(float a1)
{
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v1 = 136315394;
    uint64_t v2 = "Transform.cpp";
    __int16 v3 = 1024;
    int v4 = 43;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  Custom Transform Not Implemented!", (uint8_t *)&v1, 0x12u);
  }
  __break(1u);
}

float SwitchTransform(float a1)
{
  BOOL v1 = a1 < 0.5;
  float result = 1.0;
  if (v1) {
    return 0.0;
  }
  return result;
}

float ConvexTransform(float a1)
{
  float v1 = 0.0;
  if (a1 != 0.0) {
    float v1 = (float)(log10f(a1) * 0.41667) + 1.0;
  }
  float v2 = 1.0;
  if (v1 <= 1.0) {
    float v2 = v1;
  }
  return fmaxf(v2, 0.0);
}

void CustomTransform::doTransform(CustomTransform *this, float a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == 3)
  {
    if (a2 != 0.0) {
      log10f(a2);
    }
  }
  else if (v2 == 2)
  {
    if (a2 != 1.0) {
      log10f(1.0 - a2);
    }
  }
  else if (v2 != 1)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "Transform.cpp";
      __int16 v5 = 1024;
      int v6 = 77;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  Custom transform type not supported!", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
}

void std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[8];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void ParameterMapManager::AddMapping(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  float v5 = *(float *)(a3 + 4);
  float v4 = *(float *)(a3 + 8);
  BOOL v6 = v5 != 0.0 && v4 == 0.0;
  float v7 = 1.0;
  if (!v6) {
    float v7 = 0.0;
  }
  if (v4 != (float)-v5 || v4 == 0.0) {
    float v9 = v7;
  }
  else {
    float v9 = 0.5;
  }
  unsigned int v10 = (ParameterControlSource *)operator new(0xB0uLL);
  ParameterControlSource::ParameterControlSource(v10, a2, 0.0, 1.0, v9);
  operator new();
}

void sub_21BA77AC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ParameterControlSource *,std::shared_ptr<ParameterControlSource>::__shared_ptr_default_delete<ParameterControlSource,ParameterControlSource>,std::allocator<ParameterControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ParameterControlSource *,std::shared_ptr<ParameterControlSource>::__shared_ptr_default_delete<ParameterControlSource,ParameterControlSource>,std::allocator<ParameterControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t ParameterMapManager::RemoveMapping(ParameterMapManager *this, unsigned int a2)
{
  float v4 = (char *)this + 8;
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    float v5 = v4;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *(_DWORD *)(v6 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        float v9 = (uint64_t *)v6;
      }
      else {
        float v9 = (uint64_t *)(v6 + 8);
      }
      if (v8) {
        float v5 = (char *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || *((_DWORD *)v5 + 8) > a2)
    {
      return 0;
    }
    else
    {
      unsigned int v10 = (char *)*((void *)v5 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unsigned int v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        unsigned int v12 = v5;
        do
        {
          uint64_t v11 = (char *)*((void *)v12 + 2);
          BOOL v13 = *(void *)v11 == (void)v12;
          unsigned int v12 = v11;
        }
        while (!v13);
      }
      if (*(char **)this == v5) {
        *(void *)this = v11;
      }
      --*((void *)this + 2);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)result, (uint64_t *)v5);
      unsigned int v14 = (std::__shared_weak_count *)*((void *)v5 + 8);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      operator delete(v5);
      return 1;
    }
  }
  return result;
}

uint64_t ParameterMapManager::GetConnectionInfo(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  v33[0] = 38666240000;
  v33[1] = 0;
  long long v34 = xmmword_21BAB6F00;
  uint64_t v35 = 0xD00100000;
  uint64_t v36 = 0;
  long long v37 = xmmword_21BAB6F10;
  uint64_t v38 = 0x1200200000;
  uint64_t v39 = 0;
  long long v40 = xmmword_21BAB6F20;
  uint64_t v41 = 0x1800C00000;
  uint64_t v42 = 0;
  long long v43 = xmmword_21BAB6F30;
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  uint64_t v47 = 1065353216;
  int v44 = 13631488;
  int v48 = 0;
  uint64_t v49 = 0x1A01F00000;
  BOOL v50 = @"Time Octaves";
  long long v51 = xmmword_21BAB6F40;
  uint64_t v52 = 0x1A02000000;
  int v53 = @"Time Octaves";
  long long v54 = xmmword_21BAB6F40;
  uint64_t v55 = 0x1A02100000;
  uint64_t v56 = @"Time Octaves";
  long long v57 = xmmword_21BAB6F40;
  uint64_t v58 = 0x1A02200000;
  unsigned int v59 = @"Time Octaves";
  long long v60 = xmmword_21BAB6F40;
  uint64_t v61 = 0x1A02300000;
  unsigned int v62 = @"Time Octaves";
  long long v63 = xmmword_21BAB6F40;
  int v64 = 37748736;
  uint64_t v66 = 0;
  uint64_t v65 = 0;
  int v67 = 1065353216;
  uint64_t v68 = 0x3F80000000000000;
  uint64_t v69 = 0x1A02900000;
  uint64_t v70 = @"Time Octaves";
  long long v71 = xmmword_21BAB6F40;
  uint64_t v72 = 0x1502A00000;
  uint64_t v73 = 0;
  long long v74 = xmmword_21BAB6F50;
  uint64_t v75 = 0x901500000;
  uint64_t v76 = 0;
  long long v77 = xmmword_21BAB6F00;
  uint64_t v78 = 0xD01600000;
  uint64_t v79 = 0;
  long long v80 = xmmword_21BAB6F60;
  uint64_t v81 = 63963136;
  uint64_t v82 = 0;
  long long v83 = xmmword_21BAB6F70;
  uint64_t v84 = 65011712;
  uint64_t v85 = 0;
  long long v86 = xmmword_21BAB6F70;
  uint64_t v87 = 66060288;
  uint64_t v88 = 0;
  long long v89 = xmmword_21BAB6F70;
  uint64_t v90 = 0x4000000;
  uint64_t v91 = 0;
  long long v92 = xmmword_21BAB6F70;
  uint64_t v93 = 68157440;
  uint64_t v94 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v95 = xmmword_21BAB6F70;
  if ((*(_DWORD *)a1 & 0xF0000000) != 0) {
    signed int v2 = *(_DWORD *)a1 & 0xF0000000;
  }
  else {
    signed int v2 = *(_DWORD *)a1;
  }
  int v3 = *(_DWORD *)(a1 + 4) & 0xFF00000;
  int v4 = v33[0];
  float v5 = v33;
  while (v4 != v3)
  {
    int v6 = *((_DWORD *)v5 + 8);
    v5 += 4;
    int v4 = v6;
    if (!v6)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315906;
        int v16 = "ParameterMapManager.cpp";
        __int16 v17 = 1024;
        int v18 = 311;
        __int16 v19 = 1024;
        signed int v20 = v2;
        __int16 v21 = 1024;
        int v22 = v3;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_INFO, "%25s:%-5d GetConnectionInfo: Invalid input: inSourceID 0x%x, inDestID 0x%x\n", (uint8_t *)&v15, 0x1Eu);
      }
      uint64_t v7 = 0;
      *(_OWORD *)(a1 + 8) = xmmword_21BAB7010;
      return v7;
    }
  }
  int v9 = *((_DWORD *)v5 + 1);
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v5[1];
  if ((v2 & 0xFFFFFFF8) == 0x3E8) {
    goto LABEL_12;
  }
  if (v3 < 11534336)
  {
    if (v3 == 0x100000)
    {
      if (v2 == 224 || v2 == 0x10000000 || v2 == 300)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6FF0;
        float v12 = -12.0;
        float v13 = 12.0;
        float v11 = 12.0;
        float v10 = -12.0;
        goto LABEL_43;
      }
      *(_OWORD *)(a1 + 8) = xmmword_21BAB7000;
      float v13 = 0.0;
      float v12 = -96.0;
      float v11 = 0.0;
      goto LABEL_37;
    }
    if (v3 == 0x200000)
    {
      if (v2 != 10)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6FD0;
        float v12 = -0.5;
        float v13 = 0.5;
        float v11 = 0.5;
        float v10 = -0.5;
        goto LABEL_43;
      }
      *(_OWORD *)(a1 + 8) = xmmword_21BAB6FE0;
      float v12 = -0.508;
      float v13 = 0.508;
      goto LABEL_30;
    }
LABEL_12:
    float v10 = *((float *)v5 + 4);
    float v11 = *((float *)v5 + 5);
    *(float *)(a1 + 8) = v10;
    *(float *)(a1 + 12) = v11;
    float v12 = *((float *)v5 + 6);
    float v13 = *((float *)v5 + 7);
    *(float *)(a1 + 16) = v12;
    *(float *)(a1 + 20) = v13;
    goto LABEL_43;
  }
  if (v3 == 11534336)
  {
    if (v2 > 299)
    {
      if (v2 == 0x10000000)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6F80;
        float v10 = -4800.0;
        float v11 = 4800.0;
        float v12 = -100.0;
        int v14 = 1120403456;
        goto LABEL_42;
      }
      if (v2 == 300)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6FB0;
        float v12 = 0.0;
        float v13 = 12800.0;
        float v11 = 12800.0;
        float v10 = 0.0;
        goto LABEL_43;
      }
    }
    else
    {
      if (v2 == 224)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6FA0;
        float v10 = -12800.0;
        float v11 = 12800.0;
        float v12 = -200.0;
        int v14 = 1128792064;
        goto LABEL_42;
      }
      if (v2 == 242)
      {
        *(_OWORD *)(a1 + 8) = xmmword_21BAB6F90;
        float v12 = -100.0;
        float v13 = 100.0;
LABEL_30:
        float v11 = v13;
LABEL_37:
        float v10 = v12;
        goto LABEL_43;
      }
    }
    *(_OWORD *)(a1 + 8) = xmmword_21BAB6FC0;
    float v10 = -12800.0;
    float v11 = 12800.0;
    float v12 = -4800.0;
LABEL_41:
    int v14 = 1167458304;
    goto LABEL_42;
  }
  if (v3 != 22020096) {
    goto LABEL_12;
  }
  float v10 = *((float *)v5 + 4);
  float v11 = *((float *)v5 + 5);
  *(float *)(a1 + 8) = v10;
  *(float *)(a1 + 12) = v11;
  if (v2 != 300)
  {
    *(void *)(a1 + 16) = 0x4596000000000000;
    float v12 = 0.0;
    goto LABEL_41;
  }
  *(void *)(a1 + 16) = 0x4648000000000000;
  float v12 = 0.0;
  int v14 = 1179123712;
LABEL_42:
  float v13 = *(float *)&v14;
LABEL_43:
  uint64_t v7 = 1;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    int v15 = 136317186;
    int v16 = "ParameterMapManager.cpp";
    __int16 v17 = 1024;
    int v18 = 306;
    __int16 v19 = 1024;
    signed int v20 = v2;
    __int16 v21 = 1024;
    int v22 = v3;
    __int16 v23 = 2048;
    double v24 = v10;
    __int16 v25 = 2048;
    double v26 = v11;
    __int16 v27 = 2048;
    double v28 = v12;
    __int16 v29 = 2048;
    double v30 = v13;
    __int16 v31 = 1024;
    int v32 = v9;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_INFO, "%25s:%-5d GetConnectionInfo: inSourceID 0x%x, inDestID 0x%x, min: %f max: %f default: %f - %f unit: %u", (uint8_t *)&v15, 0x4Cu);
  }
  return v7;
}

void VoiceZone::Update(VoiceZone *this, int a2)
{
  if ((*((unsigned char *)this + 224) & 2) != 0)
  {
    if (a2 <= 4199)
    {
      switch(a2)
      {
        case 4121:
          if ((((*(unsigned int (**)(void))(**((void **)this + 21) + 56))(*((void *)this + 21)) ^ ((*((unsigned char *)this + 224) & 1) == 0)) & 1) == 0)
          {
            *((unsigned char *)this + 224) = *((unsigned char *)this + 224) & 0xFE | (*(uint64_t (**)(void))(**((void **)this + 21) + 56))(*((void *)this + 21));
            if (((*(uint64_t (**)(void))(**((void **)this + 21) + 56))(*((void *)this + 21)) & 1) == 0)
            {
              uint64_t v3 = *((void *)this + 19) | 0x400;
              goto LABEL_40;
            }
          }
          break;
        case 4122:
          uint64_t v6 = *((void *)this + 21);
          int v7 = *(_DWORD *)(v6 + 176);
          if (v7 == -1)
          {
            uint64_t v8 = *(void *)(v6 + 24);
            int v7 = *(_DWORD *)(v8 + 156);
            if (v7 == -1)
            {
              uint64_t v9 = *(void *)(v8 + 24);
              int v7 = *(_DWORD *)(v9 + 156);
              if (v7 == -1)
              {
                int v7 = *(_DWORD *)(*(void *)(v9 + 24) + 200);
                if (v7 == -1) {
                  int v7 = 0;
                }
              }
            }
          }
          *((_DWORD *)this + 62) = v7;
          break;
        case 4123:
        case 4124:
LABEL_18:
          float LinearTuning = VoiceZone::GetLinearTuning(this, *(float *)(*((void *)this + 20) + 76)- (float)(int)*(float *)(*((void *)this + 20) + 76));
          Oscillator::SetFixedPitchFactor((uint64_t)this + 256, LinearTuning);
          break;
        case 4125:
          uint64_t v10 = *((void *)this + 21);
          *((float *)this + 265) = __exp10f((float)(*(float *)(*(void *)(v10 + 104) + 84)+ (float)(*(float *)(v10 + 200)+ (float)(*(float *)(*(void *)(v10 + 24) + 104)+ (float)(*(float *)(*(void *)(*(void *)(v10 + 24) + 24)+ 128)+ *(float *)(*(void *)(*(void *)(*(void *)(v10 + 24) + 24)+ 24)+ 180)))))* 0.05);
          break;
        case 4126:
          float v11 = *(float *)(*((void *)this + 21) + 204)
              + (float)(*(float *)(*(void *)(*((void *)this + 21) + 24) + 108)
                      + (float)(*(float *)(*(void *)(*(void *)(*((void *)this + 21) + 24) + 24) + 140)
                              + *(float *)(*(void *)(*(void *)(*(void *)(*((void *)this + 21) + 24) + 24)
                                                     + 24)
                                         + 192)));
          *((float *)this + 266) = v11;
          float v12 = (float)(*((float *)this + 268) + v11) + *((float *)this + 271);
          float v13 = fmaxf(v12 + v12, -1.0);
          if (v13 >= 1.0) {
            float v14 = 1.0;
          }
          else {
            float v14 = (float)(v13 + 1.0) * 0.5;
          }
          float v15 = v14 * 1.57079633;
          __float2 v16 = __sincosf_stret(v15);
          *((_DWORD *)this + 274) = LODWORD(v16.__cosval);
          *((_DWORD *)this + 275) = LODWORD(v16.__sinval);
          break;
        default:
          if (!a2)
          {
            uint64_t v3 = *((void *)this + 19) | 0x800;
            goto LABEL_40;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 4200:
          uint64_t v3 = *((void *)this + 19) | 0x200;
          break;
        case 4201:
        case 4203:
        case 4213:
        case 4214:
        case 4215:
        case 4216:
        case 4217:
        case 4218:
        case 4219:
        case 4222:
        case 4223:
        case 4224:
        case 4225:
        case 4226:
        case 4227:
        case 4228:
        case 4229:
          return;
        case 4202:
          goto LABEL_18;
        case 4204:
          uint64_t v4 = *((void *)this + 25);
          if (v4) {
            (*(void (**)(uint64_t, void))(*(void *)v4 + 40))(v4, *(unsigned __int8 *)(*((void *)this + 21) + 189));
          }
          goto LABEL_18;
        case 4205:
        case 4206:
          uint64_t v3 = *((void *)this + 19) | 4;
          break;
        case 4207:
        case 4208:
        case 4209:
        case 4210:
        case 4211:
        case 4212:
          uint64_t v3 = *((void *)this + 19) | 2;
          break;
        case 4220:
          if (*((void *)this + 9) <= (unint64_t)((*(void *)(*(void *)(*((void *)this + 21)
                                                                                                + 24)
                                                                                    + 480)
                                                                        - *(void *)(*(void *)(*((void *)this + 21)
                                                                                                + 24)
                                                                                    + 472)) >> 3))
            return;
          uint64_t v3 = *((void *)this + 19) | 0x100;
          break;
        case 4221:
          uint64_t v3 = *((void *)this + 19) | 0x80;
          break;
        case 4230:
          if (*((void *)this + 12) <= (unint64_t)((*(void *)(*(void *)(*((void *)this + 21)
                                                                                                 + 24)
                                                                                     + 504)
                                                                         - *(void *)(*(void *)(*((void *)this + 21)
                                                                                                 + 24)
                                                                                     + 496)) >> 3))
            return;
          uint64_t v3 = *((void *)this + 19) | 0x40;
          break;
        case 4231:
          uint64_t v3 = *((void *)this + 19) | 0x20;
          break;
        default:
          if (a2 == 4270)
          {
            if (*((void *)this + 18) <= (unint64_t)((*(void *)(*(void *)(*((void *)this + 21) + 24)
                                                                                       + 528)
                                                                           - *(void *)(*(void *)(*((void *)this + 21) + 24)
                                                                                       + 520)) >> 3))
              return;
            uint64_t v3 = *((void *)this + 19) | 0x10;
          }
          else
          {
            if (a2 != 4271) {
              return;
            }
            uint64_t v3 = *((void *)this + 19) | 8;
          }
          break;
      }
LABEL_40:
      *((void *)this + 19) = v3;
    }
  }
}

void VoiceZone::InitializeAllocationPool(VoiceZone *this)
{
  if (!atomic_fetch_add_explicit(VoiceZone::sAllocationPoolRefCount, 1u, memory_order_relaxed)) {
    operator new();
  }
}

void sub_21BA787BC(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10A1C4038DC4EEELL);
  _Unwind_Resume(a1);
}

void AllocationPool<VoiceZone>::~AllocationPool(uint64_t a1)
{
  *(void *)a1 = &unk_26CBAACB8;
  if (*(unsigned char *)(a1 + 36))
  {
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }

  JUMPOUT(0x21D497F90);
}

uint64_t AllocationPool<VoiceZone>::~AllocationPool(uint64_t a1)
{
  *(void *)a1 = &unk_26CBAACB8;
  if (*(unsigned char *)(a1 + 36))
  {
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void VoiceZone::ShutdownAllocationPool(VoiceZone *this)
{
  if (atomic_fetch_add_explicit(VoiceZone::sAllocationPoolRefCount, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    if (VoiceZone::sVoiceZoneNewPool) {
      (*(void (**)(uint64_t))(*(void *)VoiceZone::sVoiceZoneNewPool + 8))(VoiceZone::sVoiceZoneNewPool);
    }
    VoiceZone::sVoiceZoneNewPool = 0;
    if (VoiceZone::sMutex) {
      (*(void (**)(uint64_t))(*(void *)VoiceZone::sMutex + 8))(VoiceZone::sMutex);
    }
    VoiceZone::sMutex = 0;
  }
}

uint64_t VoiceZone::Kill(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 224);
  if ((v1 & 0x20) == 0)
  {
    signed int v2 = *(void **)(this + 56);
    if (v2 != (void *)(this + 64))
    {
      do
      {
        uint64_t v3 = v2[5];
        *(unsigned char *)(v3 + 852) = 0;
        *(void *)(v3 + 840) = 0x7FFFFFFFFLL;
        uint64_t v4 = (void *)v2[1];
        if (v4)
        {
          do
          {
            float v5 = v4;
            uint64_t v4 = (void *)*v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            float v5 = (void *)v2[2];
            BOOL v6 = *v5 == (void)v2;
            signed int v2 = v5;
          }
          while (!v6);
        }
        signed int v2 = v5;
      }
      while (v5 != (void *)(this + 64));
      char v1 = *(unsigned char *)(this + 224);
    }
    if ((v1 & 2) != 0) {
      *(unsigned char *)(this + 224) = v1 | 0x20;
    }
    *(_DWORD *)(this + 236) = -1;
  }
  return this;
}

uint64_t VoiceZone::DestroyInternals(VoiceZone *this)
{
  SamplerState::RemoveView(*((void *)this + 21), this);
  *((void *)this + 21) = 0;

  return VoiceZone::Clean(this);
}

void *std::vector<VoiceComponent *,caulk::rt_allocator<VoiceComponent *>>::insert(void *result, char *__src, void *a3)
{
  uint64_t v4 = __src;
  float v5 = (char **)result;
  BOOL v6 = (char *)result[1];
  uint64_t v8 = result + 2;
  unint64_t v7 = result[2];
  if ((unint64_t)v6 >= v7)
  {
    float v13 = (char *)*result;
    unint64_t v14 = ((uint64_t)&v6[-*result] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v46 = v8;
    if (v18) {
      unint64_t v18 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    signed int v20 = (void *)(v18 + 8 * v16);
    unint64_t v43 = v18;
    *(void *)&long long v44 = v20;
    *((void *)&v44 + 1) = v20;
    unint64_t v45 = v18 + 8 * v19;
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v50 = v8;
        unint64_t v23 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v22);
        __int16 v25 = (uint64_t *)v44;
        uint64_t v26 = *((void *)&v44 + 1) - v44;
        if (*((void *)&v44 + 1) == (void)v44)
        {
          int64x2_t v32 = vdupq_n_s64(v44);
          unint64_t v28 = v23 + 8 * (v22 >> 2);
        }
        else
        {
          uint64_t v27 = v26 >> 3;
          unint64_t v28 = v23 + 8 * (v22 >> 2) + (v26 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v29 = 8 * v27;
          double v30 = (void *)(v23 + 8 * (v22 >> 2));
          do
          {
            uint64_t v31 = *v25++;
            *v30++ = v31;
            v29 -= 8;
          }
          while (v29);
          int64x2_t v32 = (int64x2_t)v44;
        }
        unint64_t v33 = v45;
        unint64_t v47 = v43;
        unint64_t v43 = v23;
        *(void *)&long long v44 = v23 + 8 * (v22 >> 2);
        int64x2_t v48 = v32;
        *((void *)&v44 + 1) = v28;
        unint64_t v45 = v23 + 8 * v24;
        unint64_t v49 = v33;
        std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer((uint64_t)&v47);
        signed int v20 = (void *)*((void *)&v44 + 1);
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= v21 >> 1;
        *(void *)&long long v44 = v20;
        *((void *)&v44 + 1) = v20;
      }
    }
    *signed int v20 = *a3;
    long long v34 = (char *)v44;
    uint64_t v35 = (char *)(*((void *)&v44 + 1) + 8);
    *((void *)&v44 + 1) += 8;
    uint64_t v36 = *v5;
    if (*v5 != v4)
    {
      long long v37 = v4;
      do
      {
        uint64_t v38 = *((void *)v37 - 1);
        v37 -= 8;
        *((void *)v34 - 1) = v38;
        v34 -= 8;
      }
      while (v37 != v36);
      uint64_t v35 = (char *)*((void *)&v44 + 1);
    }
    *(void *)&long long v44 = v34;
    uint64_t v39 = v5[1];
    int64_t v40 = v39 - v4;
    if (v39 != v4)
    {
      memmove(v35, v4, v39 - v4);
      long long v34 = (char *)v44;
      uint64_t v4 = v5[1];
    }
    uint64_t v41 = *v5;
    *float v5 = v34;
    v5[1] = &v35[v40];
    unint64_t v42 = (unint64_t)v5[2];
    v5[2] = (char *)v45;
    *((void *)&v44 + 1) = v4;
    unint64_t v45 = v42;
    unint64_t v43 = (unint64_t)v41;
    *(void *)&long long v44 = v41;
    return (void *)std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer((uint64_t)&v43);
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    result[1] = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    float v11 = (void *)result[1];
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    result[1] = v11;
    if (v6 != v9) {
      uint64_t result = memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    *(void *)uint64_t v4 = *a3;
  }
  return result;
}

void sub_21BA78CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'KeyControlSource::~KeyControlSource(KeyControlSource *this)
{
}

{
  void *v1;

  KeyControlSource::~KeyControlSource((KeyControlSource *)((char *)this + *(void *)(*(void *)this - 24)));
  v1[3] = &unk_26CBA4898;
  std::__shared_weak_count *v1 = &unk_26CBA4928;
}

uint64_t VoiceZone::FastRelease(uint64_t this)
{
  if ((*(unsigned char *)(this + 224) & 0x10) == 0)
  {
    if ((*(unsigned char *)(this + 224) & 4) != 0)
    {
      *(unsigned char *)(this + 224) |= 0x10u;
      char v1 = *(void **)(this + 56);
      if (v1 != (void *)(this + 64))
      {
        do
        {
          uint64_t v2 = v1[5];
          if (*(_DWORD *)(v2 + 844) <= 5u)
          {
            *(_DWORD *)(v2 + 828) = *(_DWORD *)(v2 + 624);
            *(unsigned char *)(v2 + 852) = 0;
            *(void *)(v2 + 840) = 0x6FFFFFFFFLL;
          }
          uint64_t v3 = (void *)v1[1];
          if (v3)
          {
            do
            {
              uint64_t v4 = v3;
              uint64_t v3 = (void *)*v3;
            }
            while (v3);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v1[2];
              BOOL v5 = *v4 == (void)v1;
              char v1 = v4;
            }
            while (!v5);
          }
          char v1 = v4;
        }
        while (v4 != (void *)(this + 64));
      }
    }
    else
    {
      return VoiceZone::Kill(this);
    }
  }
  return this;
}

uint64_t AUHighShelfFilter::Version(AUHighShelfFilter *this)
{
  return 0x10000;
}

void AUHighShelfFilter::NewKernel(AUHighShelfFilter *this)
{
}

double *HighShelfKernel::Process(HighShelfKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  int v9 = *(_DWORD *)(*((void *)this + 13) + 592);
  if (*((_DWORD *)this + 24) != v9)
  {
    *((_DWORD *)this + 24) = v9;
    HighShelfKernel::CalculateCoefficients(this, (HighShelfKernel *)((char *)this + 24));
  }

  return Biquad::Process((double *)this + 3, a2, a3, a4);
}

BiquadCoefficients *HighShelfKernel::CalculateCoefficients(HighShelfKernel *this, Biquad *a2)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  double Parameter = ausdk::AUElement::GetParameter(Element, 0);
  BOOL v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v7 = ausdk::AUElement::GetParameter(v6, 1u);
  double v8 = (Parameter + Parameter)
     / *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0) + 80);
  if (v8 > 0.999) {
    double v8 = 0.999;
  }

  return Biquad::GetHighShelfParams(a2, v8, v7);
}

double HighShelfKernel::Reset(HighShelfKernel *this)
{
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

void HighShelfKernel::~HighShelfKernel(HighShelfKernel *this)
{
}

BOOL AUHighShelfFilter::StreamFormatWritable(AUHighShelfFilter *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUHighShelfFilter::SupportsTail(AUHighShelfFilter *this)
{
  return 1;
}

double AUHighShelfFilter::GetTailTime(AUHighShelfFilter *this)
{
  return 0.001;
}

uint64_t AUHighShelfFilter::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUHighShelfFilter::GetParameterInfo(AUHighShelfFilter *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  v11[2] = *(CFStringRef **)MEMORY[0x263EF8340];
  buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = -1073741824;
  if (!a2)
  {
    v11[0] = (CFStringRef *)&kCutoffFreq_Name;
    v11[1] = (CFStringRef *)&kGain_Name;
    if (!LocalizeAUParameterStringsForClass<AUHighShelfFilter>(std::initializer_list<__CFString const**>)::sLocalized) {
      LocalizeAUParameterStringsForClass<AUHighShelfFilter>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v11, 2);
    }
    if (a3 == 1)
    {
      CFStringRef v10 = (const __CFString *)kGain_Name;
      buffer->cfNameString = (CFStringRef)kGain_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      double result = 3.43597632e10;
      *(void *)&buffer->minValue = 0x42200000C2200000;
      buffer->defaultValue = 0.0;
    }
    else if (!a3)
    {
      CFStringRef v8 = (const __CFString *)kCutoffFreq_Name;
      buffer->cfNameString = (CFStringRef)kCutoffFreq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 0x461C400000000008;
      double result = *(double *)(ausdk::AUScope::SafeGetElement((AUHighShelfFilter *)((char *)this + 128), 0) + 80) * 0.5;
      *(float *)&double result = result;
      buffer->maxValue = *(AudioUnitParameterValue *)&result;
      AudioUnitParameterOptions v9 = buffer->flags + 0x400000;
      buffer->defaultValue = 10000.0;
      buffer->std::basic_regex<_CharT, _Traits>::flag_type flags = v9;
    }
  }
  return result;
}

uint64_t AUHighShelfFilter::SetParameter(AUHighShelfFilter *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUHighShelfFilter::GetProperty(AUHighShelfFilter *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  CFStringRef v10 = a5;
  uint64_t result = 4294956417;
  if (a2 > 51)
  {
    if (a2 == 52)
    {
      if (!*((unsigned char *)this + 17)) {
        return 4294956429;
      }
      (*(void (**)(long long *__return_ptr, AUHighShelfFilter *, uint64_t, void))(*(void *)this + 392))(&v22, this, 2, 0);
      double v16 = *(double *)&v22;
      long long v22 = 0uLL;
      uint64_t v24 = 0;
      long long v23 = 0x3FF0000000000000uLL;
      uint64_t v17 = (HighShelfKernel **)*((void *)this + 66);
      if (*((HighShelfKernel ***)this + 67) == v17) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = *v17;
      }
      HighShelfKernel::CalculateCoefficients(v18, (Biquad *)&v22);
      v20[0] = v22;
      v20[1] = v23;
      uint64_t v21 = v24;
      GetFrequencyResponse((uint64_t)v10, (AudioUnitFrequencyResponseBin *)1, (uint64_t)v20, v19, v16);
    }
    else
    {
      if (a2 != 57) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = *((void *)this + 1);
      do
      {
        int v15 = overviewParameterIDs[v13];
        *(void *)CFStringRef v10 = v14;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = v15;
        ++v13;
        v10 += 6;
      }
      while (v13 != 2);
    }
    return 0;
  }
  else
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v12 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29) {
        return result;
      }
      uint64_t result = 0;
      int v12 = *((unsigned __int8 *)this + 554);
    }
    *a5 = v12;
  }
  return result;
}

uint64_t AUHighShelfFilter::GetPropertyInfo(AUHighShelfFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 51)
    {
      if (a2 == 52)
      {
        uint64_t result = 0;
        unsigned int v7 = 0x4000;
      }
      else
      {
        if (a2 != 57)
        {
          if (a2 == 56)
          {
            uint64_t result = 0;
            *a5 = 8;
            *a6 = 1;
          }
          return result;
        }
        uint64_t result = 0;
        unsigned int v7 = 48;
      }
      *a5 = v7;
      *a6 = 0;
      return result;
    }
    if (a2 == 21 || a2 == 29)
    {
      uint64_t result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  return result;
}

void AUHighShelfFilter::~AUHighShelfFilter(AUHighShelfFilter *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void *AUHighShelfFilterFactory()
{
  uint64_t result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHighShelfFilter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHighShelfFilter>::Destruct;
  return result;
}

uint64_t AUNBandEQ::Version(AUNBandEQ *this)
{
  return 0x10000;
}

uint64_t AUNBandEQ::ChangeStreamFormat(atomic_uint *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat((ausdk::AUBase *)this, a2, a3, a4, a5);
  double mSampleRate = a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    atomic_fetch_add(this + 134, 1u);
    (*(void (**)(atomic_uint *, uint64_t, void, void, double))(*(void *)this + 432))(this, 3, 0, 0, mSampleRate);
  }
  return 0;
}

uint64_t AUNBandEQ::SupportedNumChannels(AUNBandEQ *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUNBandEQ::StreamFormatWritable(AUNBandEQ *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNBandEQ::SupportsTail(AUNBandEQ *this)
{
  return 1;
}

double AUNBandEQ::GetTailTime(AUNBandEQ *this)
{
  return 0.05;
}

double AUNBandEQ::GetLatency(AUNBandEQ *this)
{
  return 0.0;
}

uint64_t AUNBandEQ::GetParameterValueStrings(AUNBandEQ *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = 4294956418;
  if (!a2 && a3 >= 0x3E8 && a3 % 0x3E8 < *((_DWORD *)this + 132) && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      long long v14 = xmmword_2643B96A0;
      long long v15 = *(_OWORD *)off_2643B96B0;
      double v16 = &kAUNBandEQFilterTypeName_ResonantHighShelf;
      long long v10 = xmmword_2643B9660;
      unsigned long long v11 = *(_OWORD *)&off_2643B9670;
      long long v12 = xmmword_2643B9680;
      long long v13 = *(_OWORD *)&off_2643B9690;
      long long v8 = xmmword_2643B9640;
      long long v9 = *(_OWORD *)&off_2643B9650;
      if (!LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized) {
        LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)&v8, 17);
      }
      *(void *)&long long v8 = kAUNBandEQFilterTypeName_Parametric;
      *((void *)&v8 + 1) = kAUNBandEQFilterTypeName_2ndOrderButterworthLowPass;
      *(void *)&long long v9 = kAUNBandEQFilterTypeName_2ndOrderButterworthHighPass;
      *((void *)&v9 + 1) = kAUNBandEQFilterTypeName_ResonantLowPass;
      *(void *)&long long v10 = kAUNBandEQFilterTypeName_ResonantHighPass;
      *((void *)&v10 + 1) = kAUNBandEQFilterTypeName_BandPass;
      unsigned long long v11 = __PAIR128__(kAUNBandEQFilterTypeName_LowShelf, kAUNBandEQFilterTypeName_BandStop);
      *(void *)&long long v12 = kAUNBandEQFilterTypeName_HighShelf;
      *((void *)&v12 + 1) = kAUNBandEQFilterTypeName_ResonantLowShelf;
      *(void *)&long long v13 = kAUNBandEQFilterTypeName_ResonantHighShelf;
      CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, 11, 0);
      uint64_t result = 0;
      *a4 = v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUNBandEQ::RestoreState(AUNBandEQ *this, __CFDictionary *a2)
{
  unsigned int v20 = 0;
  if (GetNumFromDictionary(a2, @"numberOfBands", (int *)&v20)
    || (uint64_t result = AUNBandEQ::SetNumBands(this, v20), !result))
  {
    uint64_t result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
    atomic_fetch_add((atomic_uint *volatile)this + 134, 1u);
    if (!result)
    {
      uint64_t result = GetNumFromDictionary(a2, @"ParametricType", (int *)&v20);
      if (result)
      {
        if (*((_DWORD *)this + 132))
        {
          unsigned int v5 = 3000;
          do
          {
            uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNBandEQ *)((char *)this + 32), 0);
            if (!ausdk::AUElement::GetParameter(Element, v5 - 1000))
            {
              CFArrayRef v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNBandEQ *)((char *)this + 32), 0);
              float Parameter = ausdk::AUElement::GetParameter(v7, v5);
              long long v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNBandEQ *)((char *)this + 32), 0);
              float v10 = ausdk::AUElement::GetParameter(v9, v5 + 1000);
              unsigned long long v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNBandEQ *)((char *)this + 32), 0);
              float v12 = ausdk::AUElement::GetParameter(v11, v5 + 2000);
              long double v13 = Parameter
                  * 6.28318531
                  / *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80);
              double v14 = __exp10(v10 * 0.5 * 0.05);
              long double v15 = v12 * 0.34657359 * v13;
              double v16 = sin(v13);
              long double v17 = sinh(v15 / v16);
              *(float *)&long double v13 = (v16 + v16) * asinh(0.5 / (1.0 / (v17 + v17) / v14)) / (v13 * 0.693147181);
              unint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUNBandEQ *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(v18, v5 + 2000, *(float *)&v13, 0);
            }
            unsigned int v19 = v5 - 2999;
            ++v5;
          }
          while (v19 < *((_DWORD *)this + 132));
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t GetNumFromDictionary(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 4294956445;
  }
  CFNumberGetValue(Value, kCFNumberSInt32Type, a3);
  return 0;
}

uint64_t AUNBandEQ::SetNumBands(AUNBandEQ *this, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)this + 132);
  if (v2 == a2) {
    return 0;
  }
  if (a2 - 1 >= *((_DWORD *)this + 133)) {
    return 4294956445;
  }
  if (v2 < a2)
  {
    uint64_t v6 = 48 * v2;
    uint64_t v7 = 40 * v2;
    uint64_t v8 = 56 * v2;
    do
    {
      AUNBandEQ::SetDefaultParametersForBand(this, v2);
      long long v9 = (void *)(*((void *)this + 71) + v7);
      *long long v9 = 0;
      v9[1] = 0;
      v9[3] = 0;
      v9[4] = 0;
      void v9[2] = 0x3FF0000000000000;
      uint64_t v10 = *((void *)this + 68) + v7;
      long long v11 = *(_OWORD *)v9;
      long long v12 = *((_OWORD *)v9 + 1);
      *(void *)(v10 + 32) = 0;
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      long double v13 = (_OWORD *)(*((void *)this + 77) + v6);
      *long double v13 = 0u;
      v13[1] = 0u;
      *(_OWORD *)((char *)v13 + 25) = 0u;
      double v14 = (long long *)(*((void *)this + 74) + v6);
      *(long long *)((char *)v14 + 25) = 0u;
      *double v14 = 0u;
      v14[1] = 0u;
      uint64_t v15 = *((void *)this + 80) + v8;
      if (*(unsigned char *)(v15 + 48))
      {
        *(_OWORD *)(v15 + 25) = 0uLL;
        *(_OWORD *)uint64_t v15 = 0uLL;
        *(_OWORD *)(v15 + 16) = 0uLL;
      }
      else
      {
        long long v16 = *v14;
        long long v17 = v14[2];
        *(_OWORD *)(v15 + 16) = v14[1];
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)uint64_t v15 = v16;
        *(unsigned char *)(v15 + 48) = 1;
      }
      LODWORD(v2) = v2 + 1;
      v8 += 56;
      v6 += 48;
      v7 += 40;
    }
    while (a2 != v2);
  }
  *((_DWORD *)this + 132) = a2;
  (*(void (**)(AUNBandEQ *, uint64_t, void, void))(*(void *)this + 432))(this, 3, 0, 0);
  (*(void (**)(AUNBandEQ *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
  uint64_t result = 0;
  atomic_fetch_add((atomic_uint *volatile)this + 134, 1u);
  return result;
}

void AUNBandEQ::SetDefaultParametersForBand(AUNBandEQ *this, unsigned int a2)
{
  uint64_t v4 = (AUNBandEQ *)((char *)this + 32);
  double v5 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * 0.5;
  double v6 = v5 / 40.0;
  BOOL v7 = v5 < 10000.0;
  double v8 = 250.0;
  if (v7) {
    double v8 = v6;
  }
  long double v9 = pow(v8, (double)a2 / (double)(*((_DWORD *)this + 133) - 1)) * 40.0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(Element, a2 + 1000, 1.0, 0);
  long long v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v11, a2 + 2000, 0.0, 0);
  long long v12 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  *(float *)&long double v9 = v9;
  ausdk::AUElement::SetParameter(v12, a2 + 3000, *(float *)&v9, 0);
  long double v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v13, a2 + 4000, 0.0, 0);
  double v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);

  ausdk::AUElement::SetParameter(v14, a2 + 5000, 0.5, 0);
}

uint64_t AUNBandEQ::SaveState(AUNBandEQ *this, __CFDictionary **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  uint64_t v4 = *a2;
  AddNumToDictionary(v4, @"numberOfBands", *((_DWORD *)this + 132));
  AddNumToDictionary(v4, @"ParametricType", 11);
  return 0;
}

void AddNumToDictionary(__CFDictionary *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t AUNBandEQ::GetParameterInfo(AUNBandEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956430;
  }
  unsigned int v6 = a3;
  v23[6] = xmmword_2643B96A0;
  v23[7] = *(_OWORD *)off_2643B96B0;
  uint64_t v24 = &kAUNBandEQFilterTypeName_ResonantHighShelf;
  v23[2] = xmmword_2643B9660;
  v23[3] = *(_OWORD *)&off_2643B9670;
  v23[4] = xmmword_2643B9680;
  v23[5] = *(_OWORD *)&off_2643B9690;
  v23[0] = xmmword_2643B9640;
  v23[1] = *(_OWORD *)&off_2643B9650;
  if (LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized)
  {
    if (a3) {
      goto LABEL_5;
    }
LABEL_8:
    CFStringRef v9 = (const __CFString *)kAUNBandEQParamName_GlobalGain;
    buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_GlobalGain;
    buffer->flags |= 0x8000000u;
    CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    *(void *)&buffer->minCFNumberRef Value = 0x41C00000C2C00000;
    AudioUnitParameterOptions v10 = buffer->flags | 0xC0000000;
    buffer->defaultCFNumberRef Value = 0.0;
    buffer->AudioUnitParameterOptions flags = v10;
    return result;
  }
  LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v23, 17);
  if (!v6) {
    goto LABEL_8;
  }
LABEL_5:
  if (v6 >= 0x3E8)
  {
    unsigned int v8 = v6 % 0x3E8;
    if (v6 % 0x3E8 >= *((_DWORD *)this + 132)) {
      return 4294956418;
    }
    unsigned int v6 = 1000 * (v6 / 0x3E8);
  }
  else
  {
    unsigned int v8 = 0;
  }
  LODWORD(v23[0]) = 0;
  if ((*(unsigned int (**)(AUNBandEQ *, void, void, void, _OWORD *))(*(void *)this + 144))(this, v8 + 2000, 0, 0, v23))
  {
    return 4294956418;
  }
  uint64_t v11 = *(float *)v23;
  if (v11 > 0xA) {
    return 4294956418;
  }
  UInt32 v12 = v8 + 1;
  uint64_t result = 4294956418;
  if ((int)v6 <= 2999)
  {
    if (v6 == 1000)
    {
      CFStringRef v22 = (const __CFString *)kAUNBandEQParamName_BypassBand;
      buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_BypassBand;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
      buffer->clumpID = v12;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v15 = 1.0;
      goto LABEL_28;
    }
    if (v6 == 2000)
    {
      CFStringRef v16 = (const __CFString *)kAUNBandEQParamName_FilterType;
      buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_FilterType;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->clumpID = v12;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x4120000000000000;
      buffer->defaultCFNumberRef Value = 0.0;
      int v17 = -804257792;
LABEL_30:
      AudioUnitParameterOptions v20 = flags | v17;
      goto LABEL_31;
    }
  }
  else
  {
    switch(v6)
    {
      case 0xBB8u:
        CFStringRef v18 = (const __CFString *)kAUNBandEQParamName_Frequency;
        buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Frequency;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
        buffer->clumpID = v12;
        buffer->flags |= 0x100000u;
        *(void *)&buffer->unit = 0x4120000000000008;
        AudioUnitParameterValue v19 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * 0.49;
        buffer->maxCFNumberRef Value = v19;
        buffer->defaultCFNumberRef Value = 1000.0;
        AudioUnitParameterOptions v20 = buffer->flags | 0xC0000000;
LABEL_31:
        uint64_t result = 0;
        buffer->AudioUnitParameterOptions flags = v20;
        return result;
      case 0xFA0u:
        if ((unint64_t)(v11 - 1) >= 6)
        {
          CFStringRef v21 = (const __CFString *)kAUNBandEQParamName_Gain;
          buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Gain;
          buffer->flags |= 0x8000000u;
          CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
          buffer->clumpID = v12;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 0x41C00000C2C00000;
          buffer->defaultCFNumberRef Value = 0.0;
LABEL_29:
          int v17 = -1072693248;
          goto LABEL_30;
        }
        return 4294956418;
      case 0x1388u:
        if (((0x186uLL >> v11) & 1) == 0)
        {
          CFStringRef v13 = (const __CFString *)kAUNBandEQParamName_Bandwidth;
          buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Bandwidth;
          buffer->flags |= 0x8000000u;
          CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
          buffer->clumpID = v12;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Octaves;
          *(void *)&buffer->minCFNumberRef Value = 0x40A000003D4CCCCDLL;
          AudioUnitParameterValue v15 = 0.5;
LABEL_28:
          buffer->defaultCFNumberRef Value = v15;
          goto LABEL_29;
        }
        return 4294956418;
    }
  }
  return result;
}

uint64_t AUNBandEQ::GetParameterList(AUNBandEQ *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  if (a3) {
    *a3 = 0;
  }
  if (*((_DWORD *)this + 132))
  {
    int v10 = 0;
    int v11 = 1;
    unsigned int v12 = 3000;
    do
    {
      if (a3)
      {
        a3[v11] = v12 - 2000;
        uint64_t v13 = v12 - 1000;
        a3[v11 + 1] = v13;
        a3[v11 + 2] = v12;
      }
      else
      {
        uint64_t v13 = (v10 + 2000);
      }
      unsigned int v14 = v11 + 3;
      float v17 = 0.0;
      if (!(*(unsigned int (**)(AUNBandEQ *, uint64_t, void, void, float *))(*(void *)this + 144))(this, v13, 0, 0, &v17))
      {
        uint64_t v15 = v17;
        if (v15 <= 0xA)
        {
          if ((unint64_t)(v15 - 1) >= 6)
          {
            if (a3) {
              a3[v14] = v12 + 1000;
            }
            unsigned int v14 = v11 + 4;
          }
          if (((0x186uLL >> v15) & 1) == 0)
          {
            if (a3) {
              a3[v14] = v12 + 2000;
            }
            ++v14;
          }
        }
      }
      ++v10;
      unsigned int v16 = v12 - 2999;
      ++v12;
      int v11 = v14;
    }
    while (v16 < *((_DWORD *)this + 132));
  }
  else
  {
    unsigned int v14 = 1;
  }
  uint64_t result = 0;
  *a4 = v14;
  return result;
}

uint64_t AUNBandEQ::Render(AUNBandEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v8 = (AUNBandEQ *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUNBandEQ *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUNBandEQ::ProcessBufferLists(AUNBandEQ *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  unsigned int v9 = atomic_load((unsigned int *)this + 134);
  if (*((_DWORD *)this + 135) != v9)
  {
    *((_DWORD *)this + 135) = v9;
    double v10 = COERCE_DOUBLE(atomic_load((unint64_t *)this + 90));
    double v11 = v10;
    double v12 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * v10;
    if (v12 >= 2.22507386e-308) {
      double v13 = -6.90775528 / v12;
    }
    else {
      double v13 = -INFINITY;
    }
    double v14 = exp(v13);
    if (v13 < -708.4) {
      double v14 = 0.0;
    }
    *((double *)this + 91) = v14;
    *((long double *)this + 92) = pow(v14, 4.0);
    uint64_t v15 = llround(*(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * v11);
    LODWORD(v15) = v15 & ~(v15 >> 63);
    *((_DWORD *)this + 186) = v15;
    if (v15)
    {
      AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)this + 142);
      float v17 = (double *)*((void *)this + 72);
      uint64_t v18 = (double *)*((void *)this + 71);
      uint64_t v19 = *((void *)this + 68);
      if ((char *)v17 - (char *)v18 == *((void *)this + 69) - v19)
      {
        if (v18 == v17)
        {
LABEL_19:
          (*(void (**)(void, void))(**((void **)this + 83) + 16))(*((void *)this + 83), *((unsigned int *)this + 132));
          *((_DWORD *)this + 186) = 0;
          goto LABEL_31;
        }
        AudioUnitParameterOptions v20 = (double *)(v19 + 16);
        unint64_t v16 = -1.0;
        while (1)
        {
          double v21 = v18[1];
          double v23 = v18[2];
          double v22 = v18[3];
          double v24 = v18[4];
          double v25 = *(v20 - 2);
          if ((fabs(*v18) + fabs(v21) + fabs(v22) + fabs(v24) + fabs(v23 + -1.0) >= 1.0e-15
             || fabs(v25) + fabs(*(v20 - 1)) + fabs(v20[1]) + fabs(v20[2]) + fabs(*v20 + -1.0) >= 1.0e-15)
            && (*v18 != v25 || v21 != *(v20 - 1) || v23 != *v20 || v22 != v20[1] || v24 != v20[2]))
          {
            break;
          }
          v20 += 5;
          v18 += 5;
          if (v18 == v17) {
            goto LABEL_19;
          }
        }
      }
      if (*((_DWORD *)this + 132))
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          uint64_t v29 = (char *)(*((void *)this + 74) + v26);
          uint64_t v30 = *((void *)this + 77) + v26;
          uint64_t v31 = *(void *)(v30 + 32);
          int v32 = *(unsigned __int8 *)(v30 + 40);
          if (*((void *)v29 + 4) == v31 && v29[40] == v32)
          {
            char v34 = *v29;
            long long v36 = *(_OWORD *)(v29 + 17);
            long long v117 = *(_OWORD *)(v29 + 1);
            *(_OWORD *)uint64_t v118 = v36;
            *(_OWORD *)&v118[15] = *((_OWORD *)v29 + 2);
            char v35 = 1;
          }
          else
          {
            char v34 = 0;
            char v35 = 0;
          }
          uint64_t v37 = *((void *)this + 80) + v27;
          long long v38 = *(_OWORD *)v118;
          *(_OWORD *)(v37 + 1) = v117;
          *(unsigned char *)uint64_t v37 = v34;
          *(_OWORD *)(v37 + 17) = v38;
          HIDWORD(v16) = *(_DWORD *)&v118[19];
          *(_OWORD *)(v37 + 32) = *(_OWORD *)&v118[15];
          *(unsigned char *)(v37 + 48) = v35;
          ++v28;
          v27 += 56;
          v26 += 48;
        }
        while (v28 < *((unsigned int *)this + 132));
      }
      LODWORD(v16) = *((_DWORD *)this + 186);
      *((double *)this + 94) = 1.0 / (double)v16;
    }
    else
    {
      AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)this + 136);
      (*(void (**)(void, void, void))(**((void **)this + 83) + 16))(*((void *)this + 83), *((unsigned int *)this + 132), *((void *)this + 68));
    }
  }
LABEL_31:
  if (*((_DWORD *)this + 204))
  {
    uint64_t v39 = *((void *)this + 97);
    uint64_t v40 = *((void *)this + 96);
    if (a3->mNumberBuffers != (v39 - v40) >> 7) {
      return 4294967246;
    }
    if (v39 != v40)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      p_mData = &a3->mBuffers[0].mData;
      do
      {
        long long v44 = (const float *)*p_mData;
        p_mData += 2;
        PowerMeter::Process((PowerMeter *)(v40 + v41), v44);
        ++v42;
        uint64_t v40 = *((void *)this + 96);
        v41 += 128;
      }
      while (v42 < (*((void *)this + 97) - v40) >> 7);
    }
  }
  unsigned int v45 = atomic_load((unsigned int *)this + 190);
  if (*((_DWORD *)this + 186)) {
    BOOL v46 = v45 == 0;
  }
  else {
    BOOL v46 = 0;
  }
  if (v46)
  {
    if (a5)
    {
      unsigned int v51 = 0;
      uint64_t v111 = &a4->mBuffers[0].mData;
      UInt32 v112 = &a3->mBuffers[0].mData;
      int v110 = a5;
      int v108 = a3;
      unint64_t v109 = a4;
      do
      {
        uint64_t v52 = a5 - v51;
        if (v52 >= 4) {
          uint64_t v53 = 4;
        }
        else {
          uint64_t v53 = v52;
        }
        unsigned int v54 = *((_DWORD *)this + 186);
        BOOL v55 = v54 >= v53;
        unsigned int v56 = v54 - v53;
        if (v55) {
          unsigned int v57 = v56;
        }
        else {
          unsigned int v57 = 0;
        }
        *((_DWORD *)this + 186) = v57;
        if (v56 != 0 && v55)
        {
          if (v52 <= 3) {
            double v58 = pow(*((long double *)this + 91), (double)v53);
          }
          else {
            double v58 = *((double *)this + 92);
          }
          if (*((_DWORD *)this + 132))
          {
            unsigned int v113 = v53;
            unsigned int v114 = v51;
            uint64_t v59 = 0;
            unint64_t v60 = 0;
            double v61 = 1.0 - (double)v57 * *((double *)this + 94);
            float64x2_t v115 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v61, 0);
            double v116 = v61;
            uint64_t v62 = 24;
            uint64_t v63 = 32;
            do
            {
              uint64_t v64 = *((void *)this + 68);
              uint64_t v65 = v64 + v63 - 32;
              uint64_t v66 = *((void *)this + 71);
              int v67 = (double *)(v66 + v63 - 32);
              uint64_t v68 = *((void *)this + 74);
              uint64_t v69 = (double *)(v68 + v62 - 24);
              uint64_t v70 = *((void *)this + 77);
              long long v71 = (double *)(v70 + v62 - 24);
              if (*(unsigned char *)(v68 + v62 + 16)) {
                BOOL v72 = *(unsigned char *)(v70 + v62 + 16) == 0;
              }
              else {
                BOOL v72 = 1;
              }
              if (v72)
              {
                uint64_t v73 = *((void *)this + 80);
                if (*(unsigned char *)(v73 + v59 + 48))
                {
                  double v74 = *(double *)(v73 + v59);
                  if (v74 == 0.0)
                  {
                    double v76 = 0.0;
                  }
                  else
                  {
                    long double v75 = pow(*v71 / v74, v61);
                    double v61 = v116;
                    double v76 = v74 * v75;
                  }
                  double *v69 = v76;
                  long long v77 = (double *)(v68 + v62);
                  *((float64x2_t *)v77 - 1) = vmlaq_f64(*(float64x2_t *)(v73 + v59 + 8), v115, vsubq_f64(*(float64x2_t *)(v70 + v62 - 16), *(float64x2_t *)(v73 + v59 + 8)));
                  *long long v77 = *(double *)(v73 + v59 + 24) + (*(double *)(v70 + v62) - *(double *)(v73 + v59 + 24)) * v61;
                  AUNBandEQ::CalculateCoefficients((BiquadCoefficients *)&v117, v68 + v62 - 24);
                  double v61 = v116;
                  long long v78 = *(_OWORD *)v118;
                  *(_OWORD *)uint64_t v65 = v117;
                  *(_OWORD *)(v65 + 16) = v78;
                  *(void *)(v65 + 32) = *(void *)&v118[16];
                }
                else
                {
                  *(double *)uint64_t v65 = *v67 + (*(double *)v65 - *v67) * v58;
                  long long v83 = (double *)(v64 + v63);
                  uint64_t v84 = (double *)(v66 + v63);
                  double v85 = *(v83 - 2);
                  *(v83 - 3) = *(v84 - 3) + (*(v83 - 3) - *(v84 - 3)) * v58;
                  *(v83 - 2) = *(v84 - 2) + (v85 - *(v84 - 2)) * v58;
                  *(v83 - 1) = *(v84 - 1) + (*(v83 - 1) - *(v84 - 1)) * v58;
                  *long long v83 = *v84 + (*v83 - *v84) * v58;
                }
              }
              else
              {
                long long v79 = *(_OWORD *)v67;
                long long v80 = *(_OWORD *)(v66 + v63 - 16);
                *(void *)(v64 + v63) = *(void *)(v66 + v63);
                *(_OWORD *)uint64_t v65 = v79;
                *(_OWORD *)(v64 + v63 - 16) = v80;
                long long v81 = *(_OWORD *)v71;
                long long v82 = *(_OWORD *)(v70 + v62 - 8);
                *(_OWORD *)(v68 + v62 + 1) = *(_OWORD *)(v70 + v62 + 1);
                *(_OWORD *)uint64_t v69 = v81;
                *(_OWORD *)(v68 + v62 - 8) = v82;
              }
              ++v60;
              v63 += 40;
              v62 += 48;
              v59 += 56;
            }
            while (v60 < *((unsigned int *)this + 132));
            uint64_t v52 = v113;
            unsigned int v51 = v114;
            LODWORD(a5) = v110;
            a3 = v108;
            a4 = v109;
          }
          else
          {
            uint64_t v52 = v53;
          }
        }
        else
        {
          long long v96 = (unsigned char *)*((void *)this + 71);
          long long v97 = (unsigned char *)*((void *)this + 72);
          if (v97 != v96) {
            memmove(*((void **)this + 68), v96, v97 - v96);
          }
          uint64_t v98 = (const void *)*((void *)this + 77);
          uint64_t v99 = *((void *)this + 78) - (void)v98;
          if (v99) {
            memmove(*((void **)this + 74), v98, v99 - 7);
          }
        }
        (*(void (**)(void, void, void))(**((void **)this + 83) + 16))(*((void *)this + 83), *((unsigned int *)this + 132), *((void *)this + 68));
        int v86 = 4 * v52;
        uint64_t mNumberBuffers = a3->mNumberBuffers;
        if (mNumberBuffers)
        {
          uint64_t v88 = (void *)(*((void *)this + 84) + 16);
          long long v89 = v112;
          do
          {
            uint64_t v90 = (char *)*v89;
            v89 += 2;
            *uint64_t v88 = &v90[4 * v51];
            *((_DWORD *)v88 - 1) = v86;
            v88 += 2;
            --mNumberBuffers;
          }
          while (mNumberBuffers);
        }
        uint64_t v91 = a4->mNumberBuffers;
        uint64_t v92 = *((void *)this + 87);
        if (v91)
        {
          uint64_t v93 = (void *)(v92 + 16);
          uint64_t v94 = v111;
          do
          {
            long long v95 = (char *)*v94;
            v94 += 2;
            *uint64_t v93 = &v95[4 * v51];
            *((_DWORD *)v93 - 1) = v86;
            v93 += 2;
            --v91;
          }
          while (v91);
        }
        (*(void (**)(void, uint64_t, void, uint64_t))(**((void **)this + 83) + 32))(*((void *)this + 83), v52, *((void *)this + 84), v92);
        v51 += v52;
      }
      while (v51 < a5);
    }
  }
  else if (v45 || (uint64_t v100 = (_DWORD *)*((void *)this + 83), !v100[4]))
  {
    unint64_t v47 = a3->mNumberBuffers;
    if (v47 == a4->mNumberBuffers && a3->mNumberBuffers)
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      do
      {
        size_t mDataByteSize = a3->mBuffers[v48].mDataByteSize;
        if (mDataByteSize == a4->mBuffers[v48].mDataByteSize)
        {
          memcpy(a4->mBuffers[v48].mData, a3->mBuffers[v48].mData, mDataByteSize);
          unint64_t v47 = a3->mNumberBuffers;
        }
        ++v49;
        ++v48;
      }
      while (v49 < v47);
    }
  }
  else
  {
    (*(void (**)(_DWORD *, uint64_t, const AudioBufferList *, AudioBufferList *))(*(void *)v100 + 32))(v100, a5, a3, a4);
  }
  if (!*((_DWORD *)this + 205)) {
    return 0;
  }
  uint64_t v101 = *((void *)this + 100);
  uint64_t v102 = *((void *)this + 99);
  if (a4->mNumberBuffers == (v101 - v102) >> 7)
  {
    if (v101 != v102)
    {
      uint64_t v103 = 0;
      unint64_t v104 = 0;
      uint64_t v105 = &a4->mBuffers[0].mData;
      do
      {
        uint64_t v106 = (const float *)*v105;
        v105 += 2;
        PowerMeter::Process((PowerMeter *)(v102 + v103), v106);
        ++v104;
        uint64_t v102 = *((void *)this + 99);
        v103 += 128;
      }
      while (v104 < (*((void *)this + 100) - v102) >> 7);
    }
    return 0;
  }
  return 4294967246;
}

void AUNBandEQ::CalculateCoefficients(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  if (v2 < a1[132]) {
    __assert_rtn("CalculateCoefficients", "AUNBandEQ.cpp", 1085, "coefs.size() >= mNumBands");
  }
  if (v2 > a1[133]) {
    __assert_rtn("CalculateCoefficients", "AUNBandEQ.cpp", 1086, "coefs.size() <= mMaxBands");
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 32), 0);
  if (a1 + 136 == a2)
  {
    unsigned int v8 = a1 + 148;
  }
  else if (a1 + 142 == a2)
  {
    unsigned int v8 = a1 + 154;
  }
  else
  {
    unsigned int v8 = 0;
  }
  unsigned int v9 = (float64x2_t *)*((void *)a2 + 1);
  if (v9 == *(float64x2_t **)a2)
  {
    double v29 = Parameter;
LABEL_24:
    double v30 = __exp10(v29 * 0.05);
    v9[1] = vmulq_n_f64(v9[1], v30);
    v9[2].f64[0] = v30 * v9[2].f64[0];
    if (v8) {
      *(double *)(*(void *)v8 + 24) = v29;
    }
    return;
  }
  unint64_t v10 = 0;
  int v11 = 0;
  double v12 = *(double *)(v7 + 80);
  double v31 = Parameter;
  unsigned int v13 = 3000;
  do
  {
    memset((char *)v35 + 8, 0, 17);
    double v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
    double v15 = ausdk::AUElement::GetParameter(v14, v13);
    double v16 = v15 * 6.28318531 / v12;
    *(double *)&long long v34 = v16;
    float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
    float v18 = ausdk::AUElement::GetParameter(v17, v13 + 2000);
    double v19 = sin(v16);
    if (v19 == 0.0)
    {
      double v21 = 0.0;
    }
    else
    {
      long double v20 = sinh(v18 * 0.34657359 * v16 / v19);
      double v21 = 1.0 / (v20 + v20);
    }
    *((double *)&v34 + 1) = v21;
    double v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
    *(double *)char v35 = ausdk::AUElement::GetParameter(v22, v13 + 1000);
    double v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
    *(void *)&v35[1] = (uint64_t)ausdk::AUElement::GetParameter(v23, v13 - 1000);
    double v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 8), 0);
    if (ausdk::AUElement::GetParameter(v24, v13 - 2000) == 0.0 && v12 * 0.49 >= v15)
    {
      BYTE8(v35[1]) = v13 - 3000 >= a1[132];
      if (((v11 | BYTE8(v35[1])) & 1) == 0)
      {
        *((double *)v35 + 1) = v31;
        int v11 = 1;
      }
    }
    else
    {
      BYTE8(v35[1]) = 1;
    }
    AUNBandEQ::CalculateCoefficients((BiquadCoefficients *)v32, (uint64_t)&v34);
    uint64_t v25 = *(void *)a2 + 40 * v10;
    long long v26 = v32[1];
    *(_OWORD *)uint64_t v25 = v32[0];
    *(_OWORD *)(v25 + 16) = v26;
    *(void *)(v25 + 32) = v33;
    if (v8)
    {
      uint64_t v27 = (_OWORD *)(*(void *)v8 + 48 * v10);
      long long v28 = v35[0];
      *uint64_t v27 = v34;
      v27[1] = v28;
      *(_OWORD *)((char *)v27 + 25) = *(_OWORD *)((char *)v35 + 9);
    }
    unint64_t v10 = v13 - 2999;
    unsigned int v9 = *(float64x2_t **)a2;
    ++v13;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) > v10);
  double v29 = v31;
  if ((v11 & 1) == 0) {
    goto LABEL_24;
  }
}

double AUNBandEQ::CalculateCoefficients(BiquadCoefficients *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0x3FF0000000000000;
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_2:
    *((void *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    switch(*(void *)(a2 + 32))
    {
      case 0:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = *(double *)(a2 + 16);
        int v7 = 11;
        goto LABEL_23;
      case 1:
        double v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0) {
          goto LABEL_2;
        }
        if (v8 > 3.11017673) {
          double v8 = 3.11017673;
        }
        double v9 = 0.0;
        int v10 = 1;
        goto LABEL_28;
      case 2:
        double v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0) {
          goto LABEL_2;
        }
        if (v8 > 3.11017673) {
          double v8 = 3.11017673;
        }
        double v9 = 0.0;
        int v10 = 2;
        goto LABEL_28;
      case 3:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = 0.0;
        int v7 = 1;
        goto LABEL_23;
      case 4:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = 0.0;
        int v7 = 2;
        goto LABEL_23;
      case 5:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = 0.0;
        int v7 = 3;
        goto LABEL_23;
      case 6:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = 0.0;
        int v7 = 4;
        goto LABEL_23;
      case 7:
        double v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0) {
          goto LABEL_2;
        }
        double v9 = *(double *)(a2 + 16);
        if (v8 > 3.11017673) {
          double v8 = 3.11017673;
        }
        int v10 = 7;
        goto LABEL_28;
      case 8:
        double v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0) {
          goto LABEL_2;
        }
        double v9 = *(double *)(a2 + 16);
        if (v8 > 3.11017673) {
          double v8 = 3.11017673;
        }
        int v10 = 8;
LABEL_28:
        BiquadCoefficients::SetPriv(this, v10, v8, 0.707106781, v9);
        break;
      case 9:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = *(double *)(a2 + 16);
        int v7 = 7;
        goto LABEL_23;
      case 0xALL:
        long double v4 = *(double *)a2;
        double v5 = *(double *)(a2 + 8);
        double v6 = *(double *)(a2 + 16);
        int v7 = 8;
LABEL_23:
        BiquadCoefficients::SetQ(this, v7, v4, v5, v6);
        break;
      default:
        goto LABEL_2;
    }
  }
  float v11 = *(double *)(a2 + 24);
  double v12 = __exp10(v11 * 0.05);
  *((float64x2_t *)this + 1) = vmulq_n_f64(*((float64x2_t *)this + 1), v12);
  double result = v12 * *((double *)this + 4);
  *((double *)this + 4) = result;
  return result;
}

uint64_t AUNBandEQ::CanScheduleParameters(AUNBandEQ *this)
{
  return 0;
}

uint64_t AUNBandEQ::SetParameter(AUNBandEQ *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (a2 < 0x3E8) {
    goto LABEL_2;
  }
  if (a2 % 0x3E8 >= *((_DWORD *)this + 132)) {
    return 4294956418;
  }
  if (a2 - a2 % 0x3E8 != 2000 || *((unsigned char *)this + 764))
  {
LABEL_2:
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
LABEL_3:
    uint64_t result = 0;
    atomic_fetch_add((atomic_uint *volatile)this + 134, 1u);
    return result;
  }
  float v18 = 0.0;
  uint64_t result = (*(uint64_t (**)(AUNBandEQ *, uint64_t, uint64_t, uint64_t, float *))(*(void *)this + 144))(this, a2, a3, a4, &v18);
  if (!result)
  {
    float v13 = v18;
    ausdk::AUBase::SetParameter(this, a2, a3, a4, a5);
    uint64_t result = (*(uint64_t (**)(AUNBandEQ *, uint64_t, uint64_t, uint64_t, float *))(*(void *)this + 144))(this, a2, a3, a4, &v18);
    if (!result)
    {
      unsigned int v14 = v13;
      unsigned int v15 = v18;
      BOOL v17 = v13 > 0xA || v15 == v14 || v15 > 0xA;
      if (!v17 && kFilterParamBits[v15] != kFilterParamBits[v14])
      {
        (*(void (**)(AUNBandEQ *, uint64_t, void, void))(*(void *)this + 432))(this, 3, 0, 0);
        (*(void (**)(AUNBandEQ *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
      }
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t AUNBandEQ::GetParameter(AUNBandEQ *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a2 >= 0x3E8 && a2 % 0x3E8 >= *((_DWORD *)this + 132)) {
    return 4294956418;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  uint64_t result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUNBandEQ::SetProperty(AUNBandEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, unsigned int a6)
{
  if (a2 != 3007)
  {
    uint64_t result = 4294956417;
    if (a3) {
      return result;
    }
    if (a2 <= 2199)
    {
      if (a2 == 21)
      {
        uint64_t result = 0;
        atomic_store(*a5, (unsigned int *)this + 190);
      }
      else if (a2 == 56)
      {
        uint64_t v11 = *((void *)this + 1);
        uint64_t v27 = 0;
        long long v28 = &v27;
        uint64_t v29 = 0x2000000000;
        double v12 = (uint64_t (*)(uint64_t, unsigned int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        double v30 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
        {
          v26[0] = MEMORY[0x263EF8330];
          v26[1] = 0x40000000;
          v26[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_4933;
          v26[3] = &unk_2643B96D0;
          v26[4] = &v27;
          ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_4933((uint64_t)v26);
          double v12 = (uint64_t (*)(uint64_t, unsigned int *))v28[3];
        }
        _Block_object_dispose(&v27, 8);
        if (!v12)
        {
          dlerror();
          uint64_t v25 = (_Unwind_Exception *)abort_report_np();
          _Block_object_dispose(&v27, 8);
          _Unwind_Resume(v25);
        }
        return v12(v11, a5);
      }
      return result;
    }
    switch(a2)
    {
      case 2200:
        if (a6 != 4) {
          return 4294956445;
        }
        unsigned int v20 = *a5;
        break;
      case 2201:
        if (*((unsigned char *)this + 17)) {
          return 4294956447;
        }
        unint64_t v24 = *a5;
        if ((v24 - 1001) < 0xFFFFFC18) {
          return 4294956445;
        }
        *((_DWORD *)this + 133) = v24;
        std::vector<BiquadCoefficients>::resize((void **)this + 68, v24);
        std::vector<BiquadCoefficients>::resize((void **)this + 71, *((unsigned int *)this + 133));
        std::vector<AUNBandEQ::PolarDesc>::resize((char **)this + 74, *((unsigned int *)this + 133));
        std::vector<AUNBandEQ::PolarDesc>::resize((char **)this + 77, *((unsigned int *)this + 133));
        std::vector<std::optional<AUNBandEQ::PolarDesc>>::resize((void *)this + 80, *((unsigned int *)this + 133));
        if (*((_DWORD *)this + 133) >= *((_DWORD *)this + 132)) {
          unsigned int v20 = *((_DWORD *)this + 132);
        }
        else {
          unsigned int v20 = *((_DWORD *)this + 133);
        }
        break;
      case 3098:
        if (*(double *)a5 >= 0.0)
        {
          uint64_t result = 0;
          atomic_store(*(void *)a5, (unint64_t *)this + 90);
          return result;
        }
        return 4294956445;
      default:
        return result;
    }
    return AUNBandEQ::SetNumBands(this, v20);
  }
  if (a6 < 4) {
    return 4294967246;
  }
  if (a3 == 2)
  {
    unsigned int v9 = *a5;
    unsigned int v10 = *((_DWORD *)this + 204);
  }
  else if (a3 == 1)
  {
    unsigned int v9 = *((_DWORD *)this + 205);
    unsigned int v10 = *a5;
  }
  else
  {
    if (a3) {
      return 4294956430;
    }
    unsigned int v9 = *a5;
    unsigned int v10 = *a5;
  }
  if (v10 && !*((_DWORD *)this + 204))
  {
    float v13 = (PowerMeter *)*((void *)this + 97);
    unsigned int v14 = (PowerMeter *)*((void *)this + 96);
    if (v13 == v14)
    {
      std::vector<PowerMeter>::resize((void **)this + 96, *((unsigned int *)this + 213));
    }
    else
    {
      do
      {
        PowerMeter::Reset(v14);
        unsigned int v14 = (PowerMeter *)((char *)v14 + 128);
      }
      while (v14 != v13);
    }
    unsigned int v15 = (PowerMeter *)*((void *)this + 96);
    double v16 = (PowerMeter *)*((void *)this + 97);
    if (v15 != v16)
    {
      double v17 = *((double *)this + 103);
      do
      {
        PowerMeter::SetSampleRate(v15, v17);
        unsigned int v15 = (PowerMeter *)((char *)v15 + 128);
      }
      while (v15 != v16);
    }
  }
  if (v9 && !*((_DWORD *)this + 205))
  {
    float v18 = (PowerMeter *)*((void *)this + 100);
    double v19 = (PowerMeter *)*((void *)this + 99);
    if (v18 == v19)
    {
      std::vector<PowerMeter>::resize((void **)this + 99, *((unsigned int *)this + 223));
    }
    else
    {
      do
      {
        PowerMeter::Reset(v19);
        double v19 = (PowerMeter *)((char *)v19 + 128);
      }
      while (v19 != v18);
    }
    double v21 = (PowerMeter *)*((void *)this + 99);
    double v22 = (PowerMeter *)*((void *)this + 100);
    if (v21 != v22)
    {
      double v23 = *((double *)this + 108);
      do
      {
        PowerMeter::SetSampleRate(v21, v23);
        double v21 = (PowerMeter *)((char *)v21 + 128);
      }
      while (v21 != v22);
    }
  }
  uint64_t result = 0;
  __dmb(0xBu);
  *((_DWORD *)this + 204) = v10;
  *((_DWORD *)this + 205) = v9;
  return result;
}

void std::vector<BiquadCoefficients>::resize(void **a1, unint64_t a2)
{
  double v5 = (char *)*a1;
  long double v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[40 * a2];
    }
  }
  else
  {
    double v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      double v22 = &v4[40 * v7];
      do
      {
        *(void *)long double v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 2) = 0x3FF0000000000000;
        v4 += 40;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        unint64_t v11 = 0x666666666666666;
      }
      else {
        unint64_t v11 = v10;
      }
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(v11);
      unsigned int v14 = &v12[40 * v6];
      unsigned int v15 = &v12[40 * a2];
      double v16 = v14;
      do
      {
        *(void *)double v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 3) = 0;
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 2) = 0x3FF0000000000000;
        v16 += 40;
      }
      while (v16 != v15);
      double v17 = &v12[40 * v13];
      double v19 = (char *)*a1;
      float v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 40);
          long long v21 = *(_OWORD *)(v18 - 24);
          *((void *)v14 - 1) = *((void *)v18 - 1);
          *(_OWORD *)(v14 - 24) = v21;
          *(_OWORD *)(v14 - 40) = v20;
          v14 -= 40;
          v18 -= 40;
        }
        while (v18 != v19);
        float v18 = (char *)*a1;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v17;
      if (v18)
      {
        operator delete(v18);
      }
    }
  }
}

void std::vector<AUNBandEQ::PolarDesc>::resize(char **a1, unint64_t a2)
{
  long double v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    double v19 = &v4[48 * a2];
    goto LABEL_20;
  }
  unint64_t v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4) >= v6)
  {
    bzero(a1[1], 48 * ((48 * v6 - 48) / 0x30) + 48);
    double v19 = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
LABEL_20:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x555555555555555) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > 0x555555555555555) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v11 = 3 * v10;
  double v12 = (char *)operator new(48 * v10);
  uint64_t v13 = &v12[48 * v5];
  unsigned int v14 = &v12[16 * v11];
  size_t v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v13, v15);
  double v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      long long v17 = *((_OWORD *)v3 - 3);
      long long v18 = *((_OWORD *)v3 - 2);
      *(_OWORD *)(v13 - 23) = *(_OWORD *)(v3 - 23);
      *((_OWORD *)v13 - 3) = v17;
      *((_OWORD *)v13 - 2) = v18;
      v13 -= 48;
      v3 -= 48;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
  {
    operator delete(v3);
  }
}

void std::vector<std::optional<AUNBandEQ::PolarDesc>>::resize(void *a1, unint64_t a2)
{
  long double v4 = (unsigned char *)*a1;
  unint64_t v5 = (unsigned char *)a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v5[-*a1] >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    long long v20 = &v4[56 * a2];
    goto LABEL_23;
  }
  uint64_t v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    long long v20 = &v5[56 * v7];
    do
    {
      *unint64_t v5 = 0;
      v5[48] = 0;
      v5 += 56;
    }
    while (v5 != v20);
LABEL_23:
    a1[1] = v20;
    return;
  }
  if (a2 > 0x492492492492492) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v11 = 0x492492492492492;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  double v12 = (char *)operator new(56 * v11);
  uint64_t v13 = &v12[56 * v6];
  unsigned int v14 = &v12[56 * a2];
  size_t v15 = v13;
  do
  {
    char *v15 = 0;
    v15[48] = 0;
    v15 += 56;
  }
  while (v15 != v14);
  double v16 = (unsigned char *)*a1;
  if (v5 != (unsigned char *)*a1)
  {
    do
    {
      long long v17 = *(_OWORD *)(v5 - 56);
      long long v18 = *(_OWORD *)(v5 - 40);
      long long v19 = *(_OWORD *)(v5 - 24);
      *(v13 - 8) = *(v5 - 8);
      *(_OWORD *)(v13 - 24) = v19;
      *(_OWORD *)(v13 - 40) = v18;
      *(_OWORD *)(v13 - 56) = v17;
      v13 -= 56;
      v5 -= 56;
    }
    while (v5 != v16);
    unint64_t v5 = (unsigned char *)*a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[56 * v11];
  if (v5)
  {
    operator delete(v5);
  }
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_4933(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_4937;
    v5[4] = &__block_descriptor_tmp_21_4938;
    v5[5] = v5;
    long long v6 = xmmword_2643B96F0;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_4937()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t AUNBandEQ::GetProperty(AUNBandEQ *this, int a2, unsigned int a3, unsigned int a4, void *a5)
{
  if (a2 == 3099)
  {
    if (a3 > 1 || (uint64_t v10 = (PowerMeter *)*((void *)this + 96), v11 = (PowerMeter *)*((void *)this + 97), v10 == v11))
    {
      double v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
    }
    else
    {
      double v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        unint64_t Value = PowerMeter::GetValue(v10);
        unint64_t v17 = Value;
        unint64_t v18 = v16;
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v19 = ((char *)v13 - (char *)v12) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v14 - (void)v12) >> 3 > v20) {
            unint64_t v20 = (uint64_t)(v14 - (void)v12) >> 3;
          }
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v21);
          }
          else {
            uint64_t v22 = 0;
          }
          double v23 = (unint64_t *)(v21 + 16 * v19);
          unint64_t *v23 = v17;
          v23[1] = v18;
          if (v13 == v12)
          {
            uint64_t v25 = (unint64_t *)(v21 + 16 * v19);
          }
          else
          {
            unint64_t v24 = v21 + 16 * v19;
            do
            {
              uint64_t v25 = (unint64_t *)(v24 - 16);
              *(_OWORD *)(v24 - 16) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v24 -= 16;
            }
            while (v13 != v12);
          }
          unint64_t v14 = v21 + 16 * v22;
          uint64_t v13 = v23 + 2;
          if (v12) {
            operator delete(v12);
          }
          double v12 = v25;
        }
        else
        {
          *uint64_t v13 = Value;
          v13[1] = v16;
          v13 += 2;
        }
        PowerMeter::ClearClipping(v10);
        uint64_t v10 = (PowerMeter *)((char *)v10 + 128);
      }
      while (v10 != v11);
    }
    if ((a3 & 0xFFFFFFFD) == 0)
    {
      long long v26 = (PowerMeter *)*((void *)this + 99);
      for (i = (PowerMeter *)*((void *)this + 100); v26 != i; long long v26 = (PowerMeter *)((char *)v26 + 128))
      {
        unint64_t v28 = PowerMeter::GetValue(v26);
        unint64_t v30 = v28;
        unint64_t v31 = v29;
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v32 = ((char *)v13 - (char *)v12) >> 4;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60) {
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v14 - (void)v12) >> 3 > v33) {
            unint64_t v33 = (uint64_t)(v14 - (void)v12) >> 3;
          }
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          long long v36 = (unint64_t *)(v34 + 16 * v32);
          *long long v36 = v30;
          v36[1] = v31;
          if (v13 == v12)
          {
            long long v38 = (unint64_t *)(v34 + 16 * v32);
          }
          else
          {
            unint64_t v37 = v34 + 16 * v32;
            do
            {
              long long v38 = (unint64_t *)(v37 - 16);
              *(_OWORD *)(v37 - 16) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v37 -= 16;
            }
            while (v13 != v12);
          }
          unint64_t v14 = v34 + 16 * v35;
          uint64_t v13 = v36 + 2;
          if (v12) {
            operator delete(v12);
          }
          double v12 = v38;
        }
        else
        {
          *uint64_t v13 = v28;
          v13[1] = v29;
          v13 += 2;
        }
        PowerMeter::ClearClipping(v26);
      }
    }
    memcpy(a5, v12, (char *)v13 - (char *)v12);
    if (!v12) {
      return 0;
    }
    goto LABEL_61;
  }
  if (a2 != 3007)
  {
    uint64_t result = 4294956417;
    if (a3) {
      return result;
    }
    if (a2 > 2199)
    {
      switch(a2)
      {
        case 2200:
          uint64_t result = 0;
          unsigned int v8 = *((_DWORD *)this + 132);
          goto LABEL_66;
        case 2201:
          uint64_t result = 0;
          unsigned int v8 = *((_DWORD *)this + 133);
          goto LABEL_66;
        case 2202:
          return result;
        case 2203:
          if (!*((unsigned char *)this + 17)) {
            return 4294956429;
          }
          std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
          AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)&v55);
          uint64_t v43 = *((unsigned int *)this + 132);
          uint64_t v39 = v55;
          if (!v43) {
            goto LABEL_90;
          }
          uint64_t v44 = 0;
          uint64_t v45 = 5 * v43;
          BOOL v46 = v55 + 2;
          do
          {
            a5[v44] = *(v46 - 2);
            a5[(v44 + 1)] = *(v46 - 1);
            a5[(v44 + 2)] = *v46;
            a5[(v44 + 3)] = v46[1];
            a5[(v44 + 4)] = v46[2];
            v44 += 5;
            v46 += 5;
          }
          while (v45 != v44);
          goto LABEL_91;
        case 2204:
          uint64_t result = 0;
          unsigned int v8 = 11;
          goto LABEL_66;
        case 2205:
          if (!*((unsigned char *)this + 17)) {
            return 4294956429;
          }
          std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
          AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)&v55);
          std::vector<double>::vector(&bytes, (5 * *((_DWORD *)this + 132)));
          uint64_t v47 = *((unsigned int *)this + 132);
          uint64_t v48 = bytes;
          if (v47)
          {
            uint64_t v49 = 0;
            uint64_t v50 = 5 * v47;
            unsigned int v51 = v55 + 2;
            do
            {
              *(void *)&v48[8 * v49] = *(v51 - 2);
              *(void *)&v48[8 * (v49 + 1)] = *(v51 - 1);
              *(void *)&v48[8 * (v49 + 2)] = *v51;
              *(void *)&v48[8 * (v49 + 3)] = v51[1];
              *(void *)&v48[8 * (v49 + 4)] = v51[2];
              v49 += 5;
              v51 += 5;
            }
            while (v50 != v49);
          }
          *a5 = CFDataCreate(0, v48, v54 - v48);
          if (bytes)
          {
            unsigned int v54 = bytes;
            operator delete(bytes);
          }
          uint64_t v39 = v55;
LABEL_90:
          if (!v39) {
            return 0;
          }
LABEL_91:
          unsigned int v56 = v39;
          break;
        default:
          if (a2 == 3098)
          {
            uint64_t result = 0;
            unint64_t v42 = atomic_load((unint64_t *)this + 90);
            *a5 = v42;
          }
          return result;
      }
      goto LABEL_62;
    }
    if (a2 == 21)
    {
      uint64_t result = 0;
      unsigned int v8 = atomic_load((unsigned int *)this + 190);
      goto LABEL_66;
    }
    if (a2 != 52) {
      return result;
    }
    if (!*((unsigned char *)this + 17)) {
      return 4294956429;
    }
    (*(void (**)(unint64_t **__return_ptr, AUNBandEQ *, uint64_t, void))(*(void *)this + 392))(&v55, this, 2, 0);
    double v40 = *(double *)&v55;
    std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
    AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)&v55);
    double v12 = v55;
    GetFrequencyResponse((uint64_t)a5, (AudioUnitFrequencyResponseBin *)(0xCCCCCCCCCCCCCCCDLL * (v56 - v55)), (uint64_t)v55, v41, v40);
    if (!v12) {
      return 0;
    }
    unsigned int v56 = v12;
LABEL_61:
    uint64_t v39 = v12;
LABEL_62:
    operator delete(v39);
    return 0;
  }
  switch(a3)
  {
    case 2u:
      uint64_t result = 0;
      unsigned int v8 = *((_DWORD *)this + 205);
      goto LABEL_66;
    case 1u:
      uint64_t result = 0;
      unsigned int v8 = *((_DWORD *)this + 204);
LABEL_66:
      *(_DWORD *)a5 = v8;
      return result;
    case 0u:
      unsigned int v8 = *((_DWORD *)this + 204);
      if (v8) {
        unsigned int v8 = *((_DWORD *)this + 205) != 0;
      }
      uint64_t result = 0;
      goto LABEL_66;
  }
  return 4294956430;
}

void sub_21BA7C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BiquadCoefficients>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    long double v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[5 * v5];
    long long v6 = &v4[5 * a2];
    do
    {
      *long double v4 = 0;
      v4[1] = 0;
      void v4[3] = 0;
      v4[4] = 0;
      v4[2] = 0x3FF0000000000000;
      v4 += 5;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_21BA7C560(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    long double v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21BA7C5D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

unint64_t PowerMeter::GetValue(PowerMeter *this)
{
  PowerMeter::LinearToDB(this, *((double *)this + 14));
  *(float *)&unsigned int v3 = v2;
  PowerMeter::LinearToDB(this, *((double *)this + 15));
  *(float *)&double v4 = v4;
  return v3 | ((unint64_t)LODWORD(v4) << 32);
}

uint64_t AUNBandEQ::GetPropertyInfo(AUNBandEQ *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 3007)
  {
    char v8 = 1;
    unsigned int v9 = 4;
LABEL_12:
    uint64_t result = 0;
    *a5 = v9;
LABEL_13:
    *a6 = v8;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (uint64_t)(*((void *)this + 97) - *((void *)this + 96)) >> 7;
    }
    if ((a3 & 0xFFFFFFFD) == 0) {
      v7 += (uint64_t)(*((void *)this + 100) - *((void *)this + 99)) >> 7;
    }
    char v8 = 0;
    unsigned int v9 = 16 * v7;
    goto LABEL_12;
  }
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 <= 2199)
    {
      switch(a2)
      {
        case 21:
          uint64_t result = 0;
          *a6 = 1;
          *a5 = 4;
          break;
        case 52:
          uint64_t result = 0;
          int v12 = 0x4000;
LABEL_30:
          *a5 = v12;
          *a6 = 0;
          break;
        case 56:
          uint64_t result = 0;
LABEL_22:
          unsigned int v11 = 8;
LABEL_23:
          *a5 = v11;
          char v8 = 1;
          goto LABEL_13;
      }
    }
    else
    {
      switch(a2)
      {
        case 2200:
          uint64_t result = 0;
          unsigned int v11 = 4;
          goto LABEL_23;
        case 2201:
          uint64_t result = 0;
          *a5 = 4;
          char v8 = *((unsigned char *)this + 17) ^ 1;
          goto LABEL_13;
        case 2202:
          return result;
        case 2203:
          uint64_t result = 0;
          int v12 = 40 * *((_DWORD *)this + 132);
          goto LABEL_30;
        case 2204:
          uint64_t result = 0;
          int v12 = 4;
          goto LABEL_30;
        case 2205:
          uint64_t result = 0;
          int v12 = 8;
          goto LABEL_30;
        default:
          if (a2 == 3098) {
            goto LABEL_22;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t AUNBandEQ::Reset(AUNBandEQ *this)
{
  uint64_t v2 = *((void *)this + 83);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)this + 136);
    (*(void (**)(void, void, void))(**((void **)this + 83) + 16))(*((void *)this + 83), *((unsigned int *)this + 132), *((void *)this + 68));
    unsigned int v3 = atomic_load((unsigned int *)this + 134);
    *((_DWORD *)this + 135) = v3;
    double v4 = (unsigned char *)*((void *)this + 68);
    uint64_t v5 = (unsigned char *)*((void *)this + 69);
    if (v5 != v4) {
      memmove(*((void **)this + 71), v4, v5 - v4);
    }
    uint64_t v6 = *((void *)this + 74);
    if (*((void *)this + 75) != v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (long long *)(v6 + v7);
        unsigned int v11 = (long long *)(*((void *)this + 77) + v7);
        long long v12 = *(_OWORD *)(v6 + v7);
        long long v13 = *(_OWORD *)(v6 + v7 + 16);
        *(long long *)((char *)v11 + 25) = *(_OWORD *)(v6 + v7 + 25);
        *unsigned int v11 = v12;
        v11[1] = v13;
        uint64_t v14 = *((void *)this + 80) + v8;
        if (*(unsigned char *)(v14 + 48))
        {
          long long v15 = *v10;
          long long v16 = v10[1];
          uint64_t v17 = *((void *)v10 + 4);
          *(unsigned char *)(v14 + 40) = *((unsigned char *)v10 + 40);
          *(void *)(v14 + 32) = v17;
          *(_OWORD *)uint64_t v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
        }
        else
        {
          long long v18 = *v11;
          long long v19 = v11[2];
          *(_OWORD *)(v14 + 16) = v11[1];
          *(_OWORD *)(v14 + 32) = v19;
          *(_OWORD *)uint64_t v14 = v18;
          *(unsigned char *)(v14 + 48) = 1;
        }
        ++v9;
        uint64_t v6 = *((void *)this + 74);
        v8 += 56;
        v7 += 48;
      }
      while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 75) - v6) >> 4));
    }
  }
  if (*((_DWORD *)this + 204))
  {
    unint64_t v20 = (PowerMeter *)*((void *)this + 96);
    unint64_t v21 = (PowerMeter *)*((void *)this + 97);
    while (v20 != v21)
    {
      PowerMeter::Reset(v20);
      unint64_t v20 = (PowerMeter *)((char *)v20 + 128);
    }
  }
  if (*((_DWORD *)this + 205))
  {
    uint64_t v22 = (PowerMeter *)*((void *)this + 99);
    double v23 = (PowerMeter *)*((void *)this + 100);
    while (v22 != v23)
    {
      PowerMeter::Reset(v22);
      uint64_t v22 = (PowerMeter *)((char *)v22 + 128);
    }
  }
  return 0;
}

uint64_t AUNBandEQ::Cleanup(AUNBandEQ *this)
{
  uint64_t result = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 97) = *((void *)this + 96);
  *((void *)this + 100) = *((void *)this + 99);
  return result;
}

uint64_t AUNBandEQ::Initialize(AUNBandEQ *this)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v45.double mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v45.mBytesPerPacket = v3;
  *(void *)&v45.mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v44.double mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v44.mBytesPerPacket = v5;
  *(void *)&v44.mBitsPerChannel = *(void *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v45, &v44, v6)) {
    return 4294956428;
  }
  uint64_t v7 = NewIIRFilter(&v45, &v44);
  uint64_t v8 = *((void *)this + 83);
  *((void *)this + 83) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v7 = *((void *)this + 83);
  }
  if (!v7) {
    return 4294956428;
  }
  unint64_t v9 = (_DWORD **)((char *)this + 672);
  if ((v45.mFormatFlags & 0x20) != 0) {
    uint64_t mChannelsPerFrame = v45.mChannelsPerFrame;
  }
  else {
    uint64_t mChannelsPerFrame = 1;
  }
  unint64_t v11 = (16 * mChannelsPerFrame) | 8;
  __x[0] = 0;
  long long v12 = (_DWORD *)*((void *)this + 84);
  unint64_t v13 = *((void *)this + 85) - (void)v12;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      *((void *)this + 85) = (char *)v12 + v11;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 28, v11 - v13, __x);
    long long v12 = *v9;
  }
  *long long v12 = mChannelsPerFrame;
  if ((v44.mFormatFlags & 0x20) != 0) {
    uint64_t v15 = v44.mChannelsPerFrame;
  }
  else {
    uint64_t v15 = 1;
  }
  unint64_t v16 = (16 * v15) | 8;
  __x[0] = 0;
  uint64_t v17 = (_DWORD *)*((void *)this + 87);
  unint64_t v18 = *((void *)this + 88) - (void)v17;
  if (v16 <= v18)
  {
    if (v16 < v18) {
      *((void *)this + 88) = (char *)v17 + v16;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 29, v16 - v18, __x);
    uint64_t v17 = (_DWORD *)*((void *)this + 87);
    long long v12 = *v9;
  }
  *uint64_t v17 = v15;
  uint64_t v19 = *((void *)this + 85) - (void)v12 - 8;
  if (*((void *)this + 85) - (void)v12 != 8)
  {
    unint64_t v20 = v12 + 2;
    do
    {
      *unint64_t v20 = 1;
      v20 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  uint64_t v21 = *((void *)this + 88) - (void)v17 - 8;
  if (*((void *)this + 88) - (void)v17 != 8)
  {
    uint64_t v22 = v17 + 2;
    do
    {
      *uint64_t v22 = 1;
      v22 += 4;
      v21 -= 16;
    }
    while (v21);
  }
  (*(void (**)(AUNBandEQ *, void, void))(*(void *)this + 72))(this, 0, 0);
  long long v23 = *(_OWORD *)&v45.mBytesPerPacket;
  *(_OWORD *)((char *)this + 824) = *(_OWORD *)&v45.mSampleRate;
  *(_OWORD *)((char *)this + 840) = v23;
  *((void *)this + 107) = *(void *)&v45.mBitsPerChannel;
  long long v24 = *(_OWORD *)&v44.mBytesPerPacket;
  *((_OWORD *)this + 54) = *(_OWORD *)&v44.mSampleRate;
  *((_OWORD *)this + 55) = v24;
  *((void *)this + 112) = *(void *)&v44.mBitsPerChannel;
  if (*((_DWORD *)this + 204))
  {
    std::vector<PowerMeter>::resize((void **)this + 96, *((unsigned int *)this + 213));
    uint64_t v25 = (PowerMeter *)*((void *)this + 96);
    long long v26 = (PowerMeter *)*((void *)this + 97);
    if (v25 != v26)
    {
      double v27 = *((double *)this + 103);
      do
      {
        PowerMeter::SetSampleRate(v25, v27);
        uint64_t v25 = (PowerMeter *)((char *)v25 + 128);
      }
      while (v25 != v26);
    }
  }
  if (*((_DWORD *)this + 205))
  {
    std::vector<PowerMeter>::resize((void **)this + 99, *((unsigned int *)this + 223));
    unint64_t v28 = (PowerMeter *)*((void *)this + 99);
    unint64_t v29 = (PowerMeter *)*((void *)this + 100);
    if (v28 != v29)
    {
      double v30 = *((double *)this + 108);
      do
      {
        PowerMeter::SetSampleRate(v28, v30);
        unint64_t v28 = (PowerMeter *)((char *)v28 + 128);
      }
      while (v28 != v29);
    }
  }
  if (kAUNBandEQSubsystem && (*(unsigned char *)(kAUNBandEQSubsystem + 8) & 1) != 0 && *(void *)kAUNBandEQSubsystem)
  {
    std::vector<BiquadCoefficients>::vector(&v42, *((unsigned int *)this + 132));
    AUNBandEQ::CalculateCoefficients((unsigned int *)this, (unsigned int *)&v42);
    uint64_t v32 = v42;
    unint64_t v31 = v43;
    if (v43 == v42)
    {
      uint64_t v32 = v43;
      if (!v43) {
        return 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      uint64_t v35 = kAUNBandEQSubsystem;
      do
      {
        if (v35)
        {
          if (*(unsigned char *)(v35 + 8))
          {
            long long v36 = *(NSObject **)v35;
            if (*(void *)v35)
            {
              if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v37 = *(void *)&v32[v33];
                uint64_t v38 = *(void *)&v32[v33 + 8];
                uint64_t v39 = *(void *)&v32[v33 + 16];
                uint64_t v40 = *(void *)&v32[v33 + 24];
                uint64_t v41 = *(void *)&v32[v33 + 32];
                *(_DWORD *)std::vector<std::csub_match>::value_type __x = 136316930;
                uint64_t v47 = "AUNBandEQ.cpp";
                __int16 v48 = 1024;
                int v49 = 221;
                __int16 v50 = 1024;
                int v51 = v34;
                __int16 v52 = 2048;
                uint64_t v53 = v37;
                __int16 v54 = 2048;
                uint64_t v55 = v38;
                __int16 v56 = 2048;
                uint64_t v57 = v39;
                __int16 v58 = 2048;
                uint64_t v59 = v40;
                __int16 v60 = 2048;
                uint64_t v61 = v41;
                _os_log_impl(&dword_21B9BB000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d biquad coefs %2d : %16.8f %16.8f %16.8f %16.8f %16.8f", (uint8_t *)__x, 0x4Au);
                uint64_t v35 = kAUNBandEQSubsystem;
                uint64_t v32 = v42;
                unint64_t v31 = v43;
              }
            }
          }
        }
        ++v34;
        v33 += 40;
      }
      while (v34 < 0xCCCCCCCCCCCCCCCDLL * ((v31 - v32) >> 3));
      if (!v32) {
        return 0;
      }
    }
    uint64_t v43 = v32;
    operator delete(v32);
  }
  return 0;
}

void sub_21BA7CE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<char>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)operator new(v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v14 = &v12[v8];
    uint64_t v15 = &v12[v8 + v4];
    unint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--uint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void AUNBandEQ::~AUNBandEQ(AUNBandEQ *this)
{
  AUNBandEQ::~AUNBandEQ(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t vars8;

  *(void *)this = &unk_26CBB0900;
  uint64_t v2 = (void *)*((void *)this + 99);
  if (v2)
  {
    *((void *)this + 100) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 96);
  if (v3)
  {
    *((void *)this + 97) = v3;
    operator delete(v3);
  }
  std::vector<char>::size_type v4 = (void *)*((void *)this + 87);
  if (v4)
  {
    *((void *)this + 88) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 84);
  if (v5)
  {
    *((void *)this + 85) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 80);
  if (v7)
  {
    *((void *)this + 81) = v7;
    operator delete(v7);
  }
  int64_t v8 = (void *)*((void *)this + 77);
  if (v8)
  {
    *((void *)this + 78) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 74);
  if (v9)
  {
    *((void *)this + 75) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 71);
  if (v10)
  {
    *((void *)this + 72) = v10;
    operator delete(v10);
  }
  size_t v11 = (void *)*((void *)this + 68);
  if (v11)
  {
    *((void *)this + 69) = v11;
    operator delete(v11);
  }

  ausdk::AUBase::~AUBase(this);
}

void ___ZN9AUNBandEQC2EP28OpaqueAudioComponentInstance_block_invoke()
{
}

uint64_t AUAudioFilePlayer::Version(AUAudioFilePlayer *this)
{
  return 0x10000;
}

_DWORD *AUAudioFilePlayer::GetChannelLayoutTags@<X0>(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if (a1 != 2) {
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  }
  if (a2) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v5 = operator new(4uLL);
  *a3 = v5;
  *long long v5 = 0;
  uint64_t result = v5 + 1;
  a3[1] = result;
  a3[2] = result;
  return result;
}

uint64_t AUAudioFilePlayer::RemoveAudioChannelLayout(AUAudioFilePlayer *this, int a2, int a3)
{
  if (a2 != 2) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v10);
  CAAudioChannelLayout::operator=();
  MEMORY[0x21D497690](v10);
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 116);
  if (!v6) {
    AUAudioFilePlayer::AllocateBuffers(this);
  }
  uint64_t v7 = *((void *)this + 120);
  uint64_t v8 = *(void *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 16);
  v10[0] = *(_OWORD *)v7;
  v10[1] = v9;
  uint64_t v11 = v8;
  AudioFileMgr::RebuildConverters((uint64_t)this + 776, (const CAStreamBasicDescription *)v10, v6, (uint64_t *)this + 123, v5);
  return 0;
}

void AUAudioFilePlayer::AllocateBuffers(AUAudioFilePlayer *this)
{
  *((void *)this + 120) = ausdk::AUScope::SafeGetElement((AUAudioFilePlayer *)((char *)this + 128), 0) + 80;
  if (*((int *)this + 189) >= 1) {
    operator new();
  }
  if (*((int *)this + 191) >= 1) {
    operator new();
  }
  operator new[]();
}

void sub_21BA7D408(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10A0C40ACE8B2C5);
  _Unwind_Resume(a1);
}

uint64_t AUAudioFilePlayer::DeallocateBuffers(AUAudioFilePlayer *this)
{
  for (int i = (AFPReadSlice *)*((void *)this + 114); i; int i = (AFPReadSlice *)*((void *)this + 114))
  {
    *((void *)this + 114) = *((void *)i + 11);
    AFPReadSlice::~AFPReadSlice(i);
    MEMORY[0x21D497F90]();
  }
  while (1)
  {
    long long v3 = (AFPReadSlice *)*((void *)this + 115);
    if (!v3) {
      break;
    }
    *((void *)this + 115) = *((void *)v3 + 11);
    AFPReadSlice::~AFPReadSlice(v3);
    MEMORY[0x21D497F90]();
  }
  uint64_t result = *((void *)this + 116);
  if (result) {
    uint64_t result = MEMORY[0x21D497F60](result, 0x1000C8077774924);
  }
  *((void *)this + 116) = 0;
  return result;
}

void AFPReadSlice::~AFPReadSlice(AFPReadSlice *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (v1)
  {
    ausdk::AUBufferList::Deallocate(*((void **)this + 14));
    MEMORY[0x21D497F90](v1, 0x1020C409F4E64B8);
  }
}

uint64_t AUAudioFilePlayer::SetAudioChannelLayout(AUAudioFilePlayer *this, const AudioChannelLayout *a2, int a3, AudioChannelLayout *a4)
{
  if (a2 != 2) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  if (a4)
  {
    int v6 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, a2);
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAudioFilePlayer *)((char *)this + 128), 0) + 108) != v6) {
      return 4294956445;
    }
    CAAudioChannelLayout::operator=();
  }
  else
  {
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v12);
    CAAudioChannelLayout::operator=();
    MEMORY[0x21D497690](v12);
  }
  uint64_t v8 = (unsigned __int8 *)*((void *)this + 116);
  if (!v8) {
    AUAudioFilePlayer::AllocateBuffers(this);
  }
  uint64_t v9 = *((void *)this + 120);
  uint64_t v10 = *(void *)(v9 + 32);
  long long v11 = *(_OWORD *)(v9 + 16);
  v12[0] = *(_OWORD *)v9;
  v12[1] = v11;
  uint64_t v13 = v10;
  AudioFileMgr::RebuildConverters((uint64_t)this + 776, (const CAStreamBasicDescription *)v12, v8, (uint64_t *)this + 123, v7);
  return 0;
}

uint64_t AUAudioFilePlayer::GetAudioChannelLayout(AUAudioFilePlayer *this, const AudioChannelLayout *a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  if (a2 != 2) {
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  }
  if (a3) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  uint64_t v7 = *((void *)this + 123);
  if (v7
    && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), a2)
    && (uint64_t v9 = *((void *)this + 123)) != 0)
  {
    uint64_t v10 = *(unsigned int *)(v9 + 12);
    if (a4 && v10) {
      memcpy(a4, (const void *)(v9 + 16), *(unsigned int *)(v9 + 12));
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a5 = 1;
  return v10;
}

void AUAudioFilePlayer::ChangeStreamFormat(AUAudioFilePlayer *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
}

BOOL AUAudioFilePlayer::ValidFormat(AUAudioFilePlayer *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 33 >= 0xFFFFFFE0 && (mChannelsPerFrame < 2 || (a4->mFormatFlags & 0x20) != 0);
  }
  return result;
}

BOOL ausdk::ASBD::IsCommonFloat32(ausdk::ASBD *this, const AudioStreamBasicDescription *a2)
{
  if (*((_DWORD *)this + 2) != 1819304813 || *((_DWORD *)this + 5) != 1) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3 != *((_DWORD *)this + 6)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 3);
  if ((v4 & 1) == 0 || (v4 & 0x20) == 0 && *((_DWORD *)this + 7) != 1) {
    return 0;
  }
  uint64_t v5 = 0;
  if ((v4 & 2) == 0 && *((_DWORD *)this + 8) == 32)
  {
    if ((v4 & 0x20) != 0) {
      unsigned int v7 = 1;
    }
    else {
      unsigned int v7 = *((_DWORD *)this + 7);
    }
    return v3 == 4 * v7;
  }
  return v5;
}

BOOL AUScheduledSoundPlayer::StreamFormatWritable(AUScheduledSoundPlayer *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUAudioFilePlayer::RestoreState(AUAudioFilePlayer *this, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    unint64_t Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"file-references");
    int v6 = (const void *)*((void *)this + 122);
    if (v6) {
      CFRelease(v6);
    }
    *((void *)this + 122) = Value;
    if (Value) {
      CFRetain(Value);
    }
    unsigned int v7 = CFDictionaryGetValue((CFDictionaryRef)cf, @"kAUPresetPersistentStateKey");
    uint64_t v8 = (const void *)*((void *)this + 121);
    if (v8) {
      CFRelease(v8);
    }
    *((void *)this + 121) = v7;
    if (v7) {
      CFRetain(v7);
    }
  }

  return ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
}

uint64_t AUAudioFilePlayer::SaveState(const void **this, __CFDictionary **a2)
{
  ausdk::AUBase::SaveState((ausdk::AUBase *)this, a2);
  if (this[121])
  {
    if (this[122])
    {
      CFTypeID v4 = CFGetTypeID(*a2);
      if (v4 == CFDictionaryGetTypeID())
      {
        uint64_t v5 = *a2;
        CFDictionaryAddValue(v5, @"kAUPresetPersistentStateKey", this[121]);
        CFDictionaryAddValue(v5, @"file-references", this[122]);
      }
    }
  }
  return 0;
}

uint64_t AUAudioFilePlayer::Render(AUAudioFilePlayer *this, const float *a2, const AudioTimeStamp *a3, unsigned int a4, __n128 a5, double a6, double a7, double a8)
{
  if (*((unsigned char *)this + 772))
  {
    a5.n128_u64[0] = *((void *)this + 90);
    unsigned int v12 = a4;
    if (a5.n128_f64[0] >= 0.0)
    {
      a5.n128_u64[0] = *((void *)this + 81);
      unsigned int v12 = a4;
      if (a5.n128_f64[0] >= 0.0)
      {
        a6 = (double)a4;
        a5.n128_f64[0] = a5.n128_f64[0] + (double)a4;
        unsigned int v12 = a5.n128_f64[0];
      }
    }
    AUAudioFilePlayer::Prime(this, v12, a5, a6, a7, a8);
  }
  AUScheduledSoundPlayer::Render(this, a2, (int64_t)a3, a4);
  if (*((unsigned char *)this + 936))
  {
    *((unsigned char *)this + 936) = 0;
    if ((AFPReadThread::TryWake(*((AFPReadThread **)this + 118)) & 1) == 0) {
      *((unsigned char *)this + 936) = 1;
    }
  }
  return 0;
}

void AUAudioFilePlayer::Prime(AUAudioFilePlayer *this, unsigned int a2, __n128 a3, double a4, double a5, double a6)
{
  if (!a2) {
    a2 = 2 * *((_DWORD *)this + 190);
  }
  double v7 = (double)a2;
  while (1)
  {
    AUScheduledSoundPlayer::InsertAddedSlices(this, a3, a4, a5, a6);
    if (*((double *)this + 79) >= v7
      || !*((unsigned char *)this + 952)
      && (!*((void *)this + 114)
       || !AUAudioFilePlayer::EventSchedule::NextToRead((AUAudioFilePlayer *)((char *)this + 800))))
    {
      break;
    }
    usleep(0x2710u);
  }
}

uint64_t AFPReadThread::TryWake(AFPReadThread *this)
{
  BOOL v4 = 0;
  uint64_t v1 = (AFPReadThread *)((char *)this + 192);
  uint64_t v2 = CADeprecated::CAMutex::Try((AFPReadThread *)((char *)this + 192), &v4);
  if (v2)
  {
    CADeprecated::CAGuard::Notify(v1);
    if (v4) {
      CADeprecated::CAMutex::Unlock(v1);
    }
  }
  return v2;
}

char *AUAudioFilePlayer::EventSchedule::NextToRead(AUAudioFilePlayer::EventSchedule *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v10 = (char *)this + 24;
  char v11 = (*(uint64_t (**)(char *))(v2 + 16))((char *)this + 24);
  uint64_t v3 = (AUAudioFilePlayer::EventSchedule *)*((void *)this + 1);
  if (v3 != this)
  {
    do
    {
      int v4 = *((_DWORD *)v3 + 35);
      if (v4 == 2)
      {
        uint64_t v8 = (AUAudioFilePlayer::EventSchedule *)*((void *)v3 + 1);
      }
      else
      {
        uint64_t v5 = (char *)v3 + 16;
        if (v4 != 3) {
          goto LABEL_11;
        }
        if (*((_DWORD *)v3 + 36))
        {
          int v6 = (void (*)(void, char *))*((void *)v3 + 10);
          if (v6) {
            v6(*((void *)v3 + 11), (char *)v3 + 16);
          }
        }
        uint64_t v7 = *(void *)v3;
        uint64_t v8 = (AUAudioFilePlayer::EventSchedule *)*((void *)v3 + 1);
        *(void *)(v7 + 8) = v8;
        **((void **)v3 + 1) = v7;
        --*((void *)this + 2);
        operator delete(v3);
      }
      uint64_t v3 = v8;
    }
    while (v8 != this);
  }
  uint64_t v5 = 0;
LABEL_11:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v10);
  return v5;
}

void sub_21BA7DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUScheduledSoundPlayer::CanScheduleParameters(AUScheduledSoundPlayer *this)
{
  return 0;
}

uint64_t AUAudioFilePlayer::SetProperty(AUAudioFilePlayer *this, int a2, unsigned int a3, unsigned int a4, char *a5, unsigned int a6, __n128 a7, double a8, double a9, double a10)
{
  char v10 = a6;
  uint64_t result = 4294956417;
  if (a2 <= 3309)
  {
    switch(a2)
    {
      case 37:
        if (a6 != 4) {
          return 4294956445;
        }
        int v27 = *((unsigned __int8 *)this + 772);
        int v28 = *(_DWORD *)a5 != 0;
        *((unsigned char *)this + 772) = v28;
        if (v27 != v28) {
          (*(void (**)(AUAudioFilePlayer *, void, void))(*(void *)this + 72))(this, 0, 0);
        }
        break;
      case 3300:
        if (a6 < 0x70) {
          return 4294956445;
        }
        do
        {
          uint64_t v29 = *((void *)this + 78);
          *((void *)a5 + 11) = v29;
          uint64_t v30 = v29;
          atomic_compare_exchange_strong((atomic_ullong *volatile)this + 78, (unint64_t *)&v30, (unint64_t)a5);
        }
        while (v30 != v29);
        break;
      case 3301:
        if (a6 >= 0x40)
        {
          uint64_t result = 0;
          *((void *)this + 90) = 0xBFF0000000000000;
          long long v14 = *(_OWORD *)a5;
          long long v15 = *((_OWORD *)a5 + 1);
          long long v16 = *((_OWORD *)a5 + 3);
          *((_OWORD *)this + 43) = *((_OWORD *)a5 + 2);
          *((_OWORD *)this + 44) = v16;
          *((_OWORD *)this + 41) = v14;
          *((_OWORD *)this + 42) = v15;
          *((unsigned char *)this + 752) = 1;
          return result;
        }
        return 4294956445;
      default:
        return result;
    }
    return 0;
  }
  switch(a2)
  {
    case 3310:
      ausdk::AUScope::SafeGetElement((AUAudioFilePlayer *)((char *)this + 128), 0);
      (*(void (**)(AUAudioFilePlayer *, void, void))(*(void *)this + 72))(this, 0, 0);
      if ((v10 & 7) == 0) {
        AUAudioFilePlayer::AllocateBuffers(this);
      }
      return 4294956445;
    case 3311:
      if (!*((unsigned char *)this + 17)) {
        goto LABEL_38;
      }
      unint64_t v17 = *((void *)a5 + 10);
      char v18 = (double *)*((void *)this + 97);
      uint64_t v19 = (double *)*((void *)this + 98);
      if (v19 != v18)
      {
        unint64_t v20 = ((char *)v19 - (char *)v18) >> 6;
        do
        {
          unint64_t v21 = v20 >> 1;
          uint64_t v22 = (unint64_t *)&v18[8 * (v20 >> 1)];
          unint64_t v24 = *v22;
          long long v23 = (double *)(v22 + 8);
          v20 += ~(v20 >> 1);
          if (v24 < v17) {
            char v18 = v23;
          }
          else {
            unint64_t v20 = v21;
          }
        }
        while (v20);
      }
      if (v18 == v19 || *(void *)v18 != v17)
      {
        fwrite("invalid file region\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
        return 4294956445;
      }
      if (*((unsigned char *)this + 772) && (a5[56] & 1) == 0) {
        return 4294956445;
      }
      unint64_t v31 = (char *)this + 800;
      double v32 = **((double **)this + 120);
      outExtAudioFile[0] = (AUAudioFilePlayer *)((char *)this + 824);
      LOBYTE(outExtAudioFile[1]) = (*(uint64_t (**)(void))(*((void *)this + 103) + 16))();
      unsigned int v33 = *((_DWORD *)a5 + 26);
      if (v33 != -1)
      {
        double v34 = v18[2];
        if (v34 != v32) {
          unsigned int v33 = vcvtpd_u64_f64(v32 * (double)v33 / v34);
        }
      }
      unint64_t v35 = *((void *)a5 + 1);
      int v36 = *((_DWORD *)a5 + 14);
      double v37 = *(double *)a5;
      int v38 = *((_DWORD *)a5 + 27);
      uint64_t v39 = *((void *)this + 102);
      if (v39
        && ((v40 = *(void *)v31, int v41 = *(_DWORD *)(*(void *)v31 + 72), (v41 & 1) != 0)
         && (v36 & 1) != 0
         && v37 < *(double *)(v40 + 16)
         || (v41 & 2) != 0 && (v36 & 2) != 0 && v35 < *(void *)(v40 + 24)))
      {
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)outExtAudioFile);
        return 1936682863;
      }
      else
      {
        unint64_t v42 = (char *)operator new(0x98uLL);
        *((double *)v42 + 2) = v37;
        long long v43 = *((_OWORD *)a5 + 2);
        *((_OWORD *)v42 + 2) = *((_OWORD *)a5 + 1);
        *((_OWORD *)v42 + 3) = v43;
        long long v44 = *(_OWORD *)(a5 + 76);
        *(_OWORD *)(v42 + 76) = *(_OWORD *)(a5 + 60);
        *((void *)v42 + 3) = v35;
        *((void *)v42 + 8) = *((void *)a5 + 6);
        *((_DWORD *)v42 + 18) = v36;
        *(_OWORD *)(v42 + 92) = v44;
        *(_OWORD *)(v42 + 104) = *(_OWORD *)(a5 + 88);
        *((_DWORD *)v42 + 30) = v33;
        *((_DWORD *)v42 + 31) = v38;
        *((void *)v42 + 16) = v18;
        *((_DWORD *)v42 + 34) = v33;
        *((_DWORD *)v42 + 35) = 0;
        *((_DWORD *)v42 + 36) = 0;
        uint64_t v45 = *((void *)this + 100);
        *(void *)unint64_t v42 = v45;
        *((void *)v42 + 1) = v31;
        *(void *)(v45 + 8) = v42;
        *((void *)this + 100) = v42;
        *((void *)this + 102) = v39 + 1;
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)outExtAudioFile);
        char v46 = AFPReadThread::TryWake(*((AFPReadThread **)this + 118));
        uint64_t result = 0;
        if ((v46 & 1) == 0)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 936) = 1;
        }
      }
      return result;
    case 3312:
      if (*((unsigned char *)this + 17))
      {
        AUAudioFilePlayer::Prime(this, *(_DWORD *)a5, a7, a8, a9, a10);
        return 0;
      }
LABEL_38:
      uint64_t result = 4294956429;
      break;
    case 3318:
      uint64_t v25 = (const void *)*((void *)this + 122);
      if (v25) {
        CFRelease(v25);
      }
      uint64_t result = *(void *)a5;
      *((void *)this + 122) = *(void *)a5;
      if (!result) {
        return result;
      }
      goto LABEL_29;
    case 3319:
      long long v26 = (const void *)*((void *)this + 121);
      if (v26) {
        CFRelease(v26);
      }
      uint64_t result = *(void *)a5;
      *((void *)this + 121) = *(void *)a5;
      if (!result) {
        return result;
      }
LABEL_29:
      CFRetain((CFTypeRef)result);
      return 0;
    default:
      return result;
  }
  return result;
}

void sub_21BA7E400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUAudioFilePlayer::GetProperty(AUAudioFilePlayer *this, int a2, unsigned int a3, unsigned int a4, _OWORD *a5)
{
  uint64_t result = 4294956417;
  if (a2 <= 3301)
  {
    if (a2 == 37)
    {
      uint64_t result = 0;
      *(_DWORD *)a5 = *((unsigned __int8 *)this + 772);
    }
    else if (a2 == 3301)
    {
      uint64_t result = 0;
      long long v8 = *((_OWORD *)this + 41);
      long long v9 = *((_OWORD *)this + 42);
      long long v10 = *((_OWORD *)this + 44);
      a5[2] = *((_OWORD *)this + 43);
      a5[3] = v10;
      *a5 = v8;
      a5[1] = v9;
    }
  }
  else
  {
    switch(a2)
    {
      case 3302:
        *((_DWORD *)a5 + 14) = 1;
        double v11 = -1.0;
        if (*((double *)this + 90) >= 0.0) {
          double v11 = *((double *)this + 80);
        }
        uint64_t result = 0;
        *(double *)a5 = v11;
        break;
      case 3318:
        uint64_t result = 0;
        uint64_t v7 = *((void *)this + 122);
        goto LABEL_14;
      case 3319:
        uint64_t result = 0;
        uint64_t v7 = *((void *)this + 121);
LABEL_14:
        *(void *)a5 = v7;
        break;
    }
  }
  return result;
}

uint64_t AUAudioFilePlayer::GetPropertyInfo(AUAudioFilePlayer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a2 <= 3301)
  {
    if (a2 != 37)
    {
      if (a2 == 3300)
      {
        uint64_t result = 0;
        unsigned int v7 = 112;
      }
      else
      {
        if (a2 != 3301) {
          return result;
        }
        uint64_t result = 0;
        unsigned int v7 = 64;
      }
      *a5 = v7;
      *a6 = 1;
      return result;
    }
    uint64_t result = 0;
    *a6 = 1;
    unsigned int v8 = 4;
LABEL_16:
    *a5 = v8;
    return result;
  }
  if (a2 <= 3318)
  {
    if (a2 == 3302)
    {
      uint64_t result = 0;
      *a5 = 64;
      *a6 = 0;
      return result;
    }
    if (a2 != 3318) {
      return result;
    }
    goto LABEL_12;
  }
  if (a2 == 65542)
  {
    uint64_t result = 0;
    *a6 = 0;
    *a5 = 0;
    return result;
  }
  if (a2 == 3319)
  {
LABEL_12:
    uint64_t result = 0;
    *a6 = 1;
    unsigned int v8 = 8;
    goto LABEL_16;
  }
  return result;
}

uint64_t AUAudioFilePlayer::Reset(AUAudioFilePlayer *this)
{
  uint64_t v2 = (AFPReadThread *)*((void *)this + 118);
  if (v2) {
    AFPReadThread::RemoveClient(v2, this, 1);
  }
  (*(void (**)(AUAudioFilePlayer *, uint64_t, void, void))(*(void *)this + 432))(this, 65542, 0, 0);
  AUScheduledSoundPlayer::Reset(this);
  *((unsigned char *)this + 936) = 0;
  unsigned int v7 = (char *)this + 824;
  char v8 = (*(uint64_t (**)(char *))(*((void *)this + 103) + 16))((char *)this + 824);
  for (uint64_t i = *((void *)this + 101);
        (AUAudioFilePlayer *)i != (AUAudioFilePlayer *)((char *)this + 800);
        uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(void (**)(void, uint64_t, void))(i + 80);
    if (v4) {
      v4(*(void *)(i + 88), i + 16, *(unsigned int *)(i + 144));
    }
  }
  std::__list_imp<AFPEvent>::clear((void *)this + 100);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v7);
  uint64_t v5 = (AFPReadThread *)*((void *)this + 118);
  if (v5) {
    AFPReadThread::AddClient(v5, this);
  }
  return 0;
}

void sub_21BA7E6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *AFPReadThread::RemoveClient(AFPReadThread *this, AUAudioFilePlayer *a2, char a3)
{
  int v6 = (AFPReadThread *)((char *)this + 192);
  int v7 = CADeprecated::CAMutex::Lock((AFPReadThread *)((char *)this + 192));
  long long v9 = (AUAudioFilePlayer **)*((void *)this + 18);
  char v8 = (AUAudioFilePlayer **)*((void *)this + 19);
  while (v9 != v8)
  {
    if (*v9 == a2)
    {
      int64_t v10 = (char *)v8 - (char *)(v9 + 1);
      if (v8 != v9 + 1) {
        memmove(v9, v9 + 1, (char *)v8 - (char *)(v9 + 1));
      }
      *((void *)this + 19) = (char *)v9 + v10;
      break;
    }
    ++v9;
  }
  uint64_t result = (uint64_t *)*((void *)this + 22);
  while (result != (uint64_t *)((char *)this + 168))
  {
    unint64_t v12 = result[2];
    if (*(AUAudioFilePlayer **)(v12 + 72) == a2)
    {
      *(unsigned char *)(v12 + 136) = 1;
      *((unsigned char *)a2 + 952) = 0;
      *(_DWORD *)(*(void *)(v12 + 128) + 124) = 3;
      if (*(unsigned char *)(v12 + 120))
      {
        do
        {
          uint64_t v13 = *((void *)a2 + 114);
          *(void *)(v12 + 88) = v13;
          uint64_t v14 = v13;
          atomic_compare_exchange_strong((atomic_ullong *volatile)a2 + 114, (unint64_t *)&v14, v12);
        }
        while (v14 != v13);
      }
      else
      {
        do
        {
          uint64_t v15 = *((void *)a2 + 115);
          *(void *)(v12 + 88) = v15;
          uint64_t v16 = v15;
          atomic_compare_exchange_strong((atomic_ullong *volatile)a2 + 115, (unint64_t *)&v16, v12);
        }
        while (v16 != v15);
      }
      uint64_t v17 = *result;
      char v18 = (uint64_t *)result[1];
      *(void *)(v17 + 8) = v18;
      *(void *)result[1] = v17;
      --*((void *)this + 23);
      operator delete(result);
      uint64_t result = v18;
    }
    else
    {
      uint64_t result = (uint64_t *)result[1];
    }
  }
  if ((a3 & 1) == 0 && *((void *)this + 18) == *((void *)this + 19))
  {
    if ((AFPReadThread *)AFPReadThread::sInstance == this) {
      AFPReadThread::sInstance = 0;
    }
    if (v7) {
      CADeprecated::CAMutex::Unlock(v6);
    }
    return (uint64_t *)MEMORY[0x270F912A0](this);
  }
  else if (v7)
  {
    return (uint64_t *)CADeprecated::CAMutex::Unlock(v6);
  }
  return result;
}

void AFPReadThread::AddClient(AFPReadThread *this, AUAudioFilePlayer *a2)
{
  uint64_t v5 = (char *)this + 192;
  uint64_t v4 = *((void *)this + 24);
  char v18 = (char *)this + 192;
  char v19 = (*(uint64_t (**)(char *))(v4 + 16))((char *)this + 192);
  int v6 = (char *)*((void *)v5 - 6);
  int v7 = (char *)*((void *)v5 - 5);
  if (v6 == v7)
  {
LABEL_5:
    unint64_t v9 = *((void *)this + 20);
    if ((unint64_t)v7 >= v9)
    {
      uint64_t v11 = (v7 - v6) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)v6;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v15 = (char *)operator new(8 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[8 * v11];
      *(void *)uint64_t v16 = a2;
      int64_t v10 = v16 + 8;
      if (v6 != v7)
      {
        do
        {
          uint64_t v17 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v7 != v6);
        int v6 = (char *)*((void *)this + 18);
      }
      *((void *)this + 18) = v16;
      *((void *)this + 19) = v10;
      *((void *)this + 20) = &v15[8 * v14];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(void *)int v7 = a2;
      int64_t v10 = v7 + 8;
    }
    *((void *)this + 19) = v10;
  }
  else
  {
    char v8 = (AUAudioFilePlayer **)v6;
    while (*v8 != a2)
    {
      if (++v8 == (AUAudioFilePlayer **)v7) {
        goto LABEL_5;
      }
    }
  }
  CADeprecated::CAGuard::Locker::~Locker((CADeprecated::CAGuard::Locker *)&v18);
}

void sub_21BA7EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CADeprecated::CAGuard::Locker::~Locker(CADeprecated::CAGuard::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void *std::__list_imp<AFPEvent>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t AUAudioFilePlayer::Cleanup(AFPReadThread **this)
{
  (*((void (**)(AFPReadThread **, void, void))*this + 9))(this, 0, 0);
  uint64_t v2 = this[118];
  if (v2)
  {
    AFPReadThread::RemoveClient(v2, (AUAudioFilePlayer *)this, 0);
    this[118] = 0;
  }
  if (this[97] != this[98]) {
    AudioFileMgr::ReleaseFiles((uint64_t *)this + 97);
  }

  return AUAudioFilePlayer::DeallocateBuffers((AUAudioFilePlayer *)this);
}

uint64_t *AudioFileMgr::ReleaseFiles(uint64_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *this;
  if (*this != this[1])
  {
    do
    {
      this = (uint64_t *)ExtAudioFileDispose(*(ExtAudioFileRef *)(v2 + 8));
      v2 += 64;
    }
    while (v2 != v1[1]);
    uint64_t v2 = *v1;
  }
  v1[1] = v2;
  return this;
}

uint64_t AUAudioFilePlayer::Initialize(AUAudioFilePlayer *this)
{
  uint64_t v2 = (AFPReadThread *)*((void *)this + 118);
  if (!v2)
  {
    uint64_t v2 = (AFPReadThread *)AFPReadThread::sInstance;
    if (!AFPReadThread::sInstance) {
      operator new();
    }
    *((void *)this + 118) = AFPReadThread::sInstance;
  }
  *((unsigned char *)this + 936) = 0;
  AFPReadThread::AddClient(v2, this);
  *((unsigned char *)this + 952) = 0;
  (*(void (**)(AUAudioFilePlayer *, uint64_t, void, void))(*(void *)this + 432))(this, 65542, 0, 0);
  return 0;
}

uint64_t AFPReadThread::Run(AFPReadThread *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = (AFPReadThread *)((char *)this + 192);
  CADeprecated::CAMutex::Lock((AFPReadThread *)((char *)this + 192));
  if (!*((unsigned char *)this + 136))
  {
    uint64_t v4 = &_os_log_internal;
    do
    {
      while (1)
      {
        uint64_t v5 = *((void *)this + 23);
        if (v5) {
          break;
        }
        uint64_t v13 = (void *)*((void *)this + 18);
        if (v13 != *((void **)this + 19))
        {
          do
          {
            uint64_t v14 = *v13;
            uint64_t v15 = (AUAudioFilePlayer::EventSchedule *)(*v13 + 800);
LABEL_11:
            if (!*(unsigned char *)(v14 + 952))
            {
              uint64_t v16 = AUAudioFilePlayer::EventSchedule::NextToRead(v15);
              uint64_t v17 = v16;
              if (v16)
              {
                if (*((_DWORD *)v16 + 30) >= *(_DWORD *)(v14 + 760)) {
                  unsigned int v18 = *(_DWORD *)(v14 + 760);
                }
                else {
                  unsigned int v18 = *((_DWORD *)v16 + 30);
                }
                if (v18 <= *(_DWORD *)(v14 + 768))
                {
                  while (1)
                  {
                    uint64_t v19 = *(void *)(v14 + 920);
                    if (!v19) {
                      break;
                    }
                    uint64_t v21 = *(void *)(v14 + 920);
                    atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 920), (unint64_t *)&v21, *(void *)(v19 + 88));
                    if (v21 == v19)
                    {
LABEL_25:
                      *(void *)(v19 + 80) = 0;
                      *(_DWORD *)(v19 + 56) = 1;
                      *(void *)uint64_t v19 = *(void *)v16;
                      *(void *)(v19 + 64) = AUAudioFilePlayer::SlicePlayCompletionProc;
                      *(void *)(v19 + 72) = v14;
                      *(_DWORD *)(v19 + 96) = v18;
                      *(void *)(v19 + 104) = ausdk::AUBufferList::PrepareBuffer(*(ausdk::AUBufferList **)(v19 + 112), *(const AudioStreamBasicDescription **)(v14 + 960), v18);
                      *(void *)(v19 + 128) = v17;
                      *(unsigned char *)(v14 + 952) = 1;
                      long long v23 = operator new(0x18uLL);
                      v23[1] = (char *)this + 168;
                      v23[2] = v19;
                      uint64_t v24 = *((void *)this + 21);
                      void *v23 = v24;
                      *(void *)(v24 + 8) = v23;
                      *((void *)this + 21) = v23;
                      ++*((void *)this + 23);
                      goto LABEL_11;
                    }
                  }
                  while (1)
                  {
                    uint64_t v19 = *(void *)(v14 + 912);
                    if (!v19) {
                      break;
                    }
                    uint64_t v22 = *(void *)(v14 + 912);
                    atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 912), (unint64_t *)&v22, *(void *)(v19 + 88));
                    if (v22 == v19) {
                      goto LABEL_25;
                    }
                  }
                }
                else
                {
                  while (1)
                  {
                    uint64_t v19 = *(void *)(v14 + 912);
                    if (!v19) {
                      break;
                    }
                    uint64_t v20 = *(void *)(v14 + 912);
                    atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 912), (unint64_t *)&v20, *(void *)(v19 + 88));
                    if (v20 == v19) {
                      goto LABEL_25;
                    }
                  }
                }
              }
            }
            ++v13;
          }
          while (v13 != *((void **)this + 19));
          if (*((void *)this + 23)) {
            continue;
          }
        }
        if (*((unsigned char *)this + 136)) {
          return CADeprecated::CAMutex::Unlock(v2);
        }
        CADeprecated::CAGuard::Wait(v2);
        goto LABEL_51;
      }
      int v6 = (uint64_t *)*((void *)this + 22);
      unint64_t v7 = v6[2];
      uint64_t v8 = *(void *)(v7 + 72);
      uint64_t v9 = *v6;
      *(void *)(v9 + 8) = v6[1];
      *(void *)v6[1] = v9;
      *((void *)this + 23) = v5 - 1;
      operator delete(v6);
      if (!*(unsigned char *)(v8 + 772))
      {
        if (*(double *)(v8 + 720) >= 0.0 && (double v10 = *(double *)(v8 + 640), v10 >= 0.0))
        {
          double v12 = *(double *)v7 - v10;
          double v11 = **(double **)(v8 + 960);
        }
        else
        {
          double v11 = **(double **)(v8 + 960);
          double v12 = v11 * 60.0;
        }
        if (v12 / v11 <= 0.0)
        {
          OSStatus v27 = 1919251058;
          goto LABEL_49;
        }
      }
      uint64_t v25 = *(void *)(v7 + 128);
      long long v26 = *(OpaqueExtAudioFile **)(*(void *)(v25 + 112) + 8);
      if (*(_DWORD *)(v25 + 124)
        || (*(_DWORD *)(v25 + 124) = 1, (OSStatus v27 = ExtAudioFileSeek(v26, *(void *)(v25 + 96))) == 0))
      {
        OSStatus v27 = ExtAudioFileRead(v26, (UInt32 *)(v7 + 96), *(AudioBufferList **)(v7 + 104));
        if (!v27)
        {
          uint64_t v30 = *(void *)(v7 + 128);
          unsigned int v31 = *(_DWORD *)(v7 + 96);
          unsigned int v32 = *(_DWORD *)(v30 + 120);
          int v33 = v32 - v31;
          if (v32 < v31) {
            int v33 = 0;
          }
          *(_DWORD *)(v30 + 120) = v33;
          if (v31) {
            BOOL v34 = v32 > v31;
          }
          else {
            BOOL v34 = 0;
          }
          if (v34)
          {
            char v36 = 0;
          }
          else
          {
            int v35 = *(_DWORD *)(v30 + 88);
            if (v35)
            {
              char v36 = 0;
              *(_DWORD *)(v30 + 88) = v35 - 1;
              *(void *)(v30 + 120) = *(unsigned int *)(v30 + 104);
              goto LABEL_54;
            }
            *(_DWORD *)(v30 + 124) = 2;
            long long v44 = *(void (**)(void, uint64_t, void))(v30 + 64);
            if (v44)
            {
              v44(*(void *)(v30 + 72), v30, *(unsigned int *)(v30 + 128));
              unsigned int v37 = *(_DWORD *)(v7 + 96);
              char v36 = 1;
LABEL_55:
              *(double *)uint64_t v30 = *(double *)v30 + (double)v31;
              *(unsigned char *)(v7 + 136) = v36;
              *(unsigned char *)(v8 + 952) = 0;
              if (v37)
              {
                do
                {
                  uint64_t v38 = *(void *)(v8 + 624);
                  *(void *)(v7 + 88) = v38;
                  uint64_t v39 = v38;
                  atomic_compare_exchange_strong((atomic_ullong *volatile)(v8 + 624), (unint64_t *)&v39, v7);
                }
                while (v39 != v38);
              }
              else if (*(unsigned char *)(v7 + 120))
              {
                do
                {
                  uint64_t v40 = *(void *)(v8 + 912);
                  *(void *)(v7 + 88) = v40;
                  uint64_t v41 = v40;
                  atomic_compare_exchange_strong((atomic_ullong *volatile)(v8 + 912), (unint64_t *)&v41, v7);
                }
                while (v41 != v40);
              }
              else
              {
                do
                {
                  uint64_t v42 = *(void *)(v8 + 920);
                  *(void *)(v7 + 88) = v42;
                  uint64_t v43 = v42;
                  atomic_compare_exchange_strong((atomic_ullong *volatile)(v8 + 920), (unint64_t *)&v43, v7);
                }
                while (v43 != v42);
              }
              goto LABEL_50;
            }
            char v36 = 1;
          }
LABEL_54:
          unsigned int v37 = v31;
          goto LABEL_55;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          char v46 = "AUAudioFilePlayer.cpp";
          __int16 v47 = 1024;
          int v48 = 732;
          __int16 v49 = 1024;
          OSStatus v50 = v27;
          int v28 = v4;
          uint64_t v29 = "%25s:%-5d  ### Error %d from ExtAudioFileRead";
LABEL_39:
          _os_log_impl(&dword_21B9BB000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, 0x18u);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315650;
        char v46 = "AUAudioFilePlayer.cpp";
        __int16 v47 = 1024;
        int v48 = 724;
        __int16 v49 = 1024;
        OSStatus v50 = v27;
        int v28 = v4;
        uint64_t v29 = "%25s:%-5d  ### Error %d from ExtAudioFileSeek";
        goto LABEL_39;
      }
LABEL_49:
      AUAudioFilePlayer::SliceNotRead(v8, v7, v27);
LABEL_50:
      CADeprecated::CAMutex::Unlock(v2);
      CADeprecated::CAMutex::Lock(v2);
LABEL_51:
      ;
    }
    while (!*((unsigned char *)this + 136));
  }
  return CADeprecated::CAMutex::Unlock(v2);
}

void AUAudioFilePlayer::SliceNotRead(uint64_t a1, unint64_t a2, int a3)
{
  *(unsigned char *)(a2 + 136) = 1;
  *(unsigned char *)(a1 + 952) = 0;
  uint64_t v3 = *(void *)(a2 + 128);
  if (!*(_DWORD *)(v3 + 128)) {
    *(_DWORD *)(v3 + 128) = a3;
  }
  *(_DWORD *)(v3 + 124) = 3;
  if (*(unsigned char *)(a2 + 120))
  {
    do
    {
      uint64_t v4 = *(void *)(a1 + 912);
      *(void *)(a2 + 88) = v4;
      uint64_t v5 = v4;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 912), (unint64_t *)&v5, a2);
    }
    while (v5 != v4);
  }
  else
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 920);
      *(void *)(a2 + 88) = v6;
      uint64_t v7 = v6;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 920), (unint64_t *)&v7, a2);
    }
    while (v7 != v6);
  }
}

uint64_t AUAudioFilePlayer::SlicePlayCompletionProc(uint64_t this, void *a2, ScheduledAudioSlice *a3)
{
  uint64_t v3 = a2[16];
  int v4 = *((unsigned __int8 *)a2 + 136);
  if ((a2[10] & 4) == 0 || *(_DWORD *)(v3 + 128))
  {
    if (!*((unsigned char *)a2 + 136)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  *(_DWORD *)(v3 + 128) = 1919251058;
  if (v4) {
LABEL_4:
  }
    *(_DWORD *)(v3 + 124) = 3;
LABEL_5:
  if (*((unsigned char *)a2 + 120))
  {
    do
    {
      uint64_t v5 = *(void *)(this + 912);
      a2[11] = v5;
      uint64_t v6 = v5;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(this + 912), (unint64_t *)&v6, (unint64_t)a2);
    }
    while (v6 != v5);
  }
  else
  {
    do
    {
      uint64_t v7 = *(void *)(this + 920);
      a2[11] = v7;
      uint64_t v8 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(this + 920), (unint64_t *)&v8, (unint64_t)a2);
    }
    while (v8 != v7);
  }
  *(unsigned char *)(this + 936) = 1;
  return this;
}

void AFPReadThread::RequestStop(AFPReadThread *this)
{
  *((unsigned char *)this + 136) = 1;
  uint64_t v2 = (AFPReadThread *)((char *)this + 192);
  uint64_t v1 = *((void *)this + 24);
  uint64_t v3 = (char *)this + 192;
  char v4 = (*(uint64_t (**)(char *))(v1 + 16))((char *)this + 192);
  CADeprecated::CAGuard::Notify(v2);
  CADeprecated::CAGuard::Locker::~Locker((CADeprecated::CAGuard::Locker *)&v3);
}

void sub_21BA7F3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AFPReadThread::~AFPReadThread(AFPReadThread *this)
{
  *(void *)this = &unk_26CBA9280;
  MEMORY[0x21D497340]((char *)this + 192);
  std::__list_imp<AFPEvent>::clear((void *)this + 21);
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  CADeprecated::CAPThread::~CAPThread(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBA9280;
  MEMORY[0x21D497340]((char *)this + 192);
  std::__list_imp<AFPEvent>::clear((void *)this + 21);
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }

  CADeprecated::CAPThread::~CAPThread(this);
}

uint64_t CADeprecated::XThread::RequestStop(uint64_t this)
{
  *(unsigned char *)(this + 136) = 1;
  return this;
}

void AUAudioFilePlayer::~AUAudioFilePlayer(AUAudioFilePlayer *this)
{
  AUAudioFilePlayer::~AUAudioFilePlayer(this);

  JUMPOUT(0x21D497F90);
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26CBAC250;
  AUAudioFilePlayer::DeallocateBuffers(this);
  uint64_t v2 = (const void *)*((void *)this + 121);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 122);
  if (v3) {
    CFRelease(v3);
  }
  MEMORY[0x21D497690]((char *)this + 984);
  MEMORY[0x21D497390]((char *)this + 824);
  std::__list_imp<AFPEvent>::clear((void *)this + 100);
  AudioFileMgr::~AudioFileMgr((AUAudioFilePlayer *)((char *)this + 776));

  AUScheduledSoundPlayer::~AUScheduledSoundPlayer(this);
}

void AudioFileMgr::~AudioFileMgr(AudioFileMgr *this)
{
  AudioFileMgr::ReleaseFiles((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void BankManager::~BankManager(BankManager *this)
{
  uint64_t v3 = *(void **)this;
  unint64_t v2 = *((void *)this + 1);
  if (*(void *)this < v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x21D497F90](*v3, 0x1020C4039081DA8);
        unint64_t v2 = *((void *)this + 1);
      }
      ++v3;
    }
    while ((unint64_t)v3 < v2);
    uint64_t v3 = *(void **)this;
  }
  if (v3)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t BankManager::GetBank(BankManager *this, int a2, int a3)
{
  for (uint64_t i = *(uint64_t **)this; (unint64_t)i < *((void *)this + 1); ++i)
  {
    uint64_t v4 = *i;
    if (*(_DWORD *)(*i + 1024) == a2) {
      return v4;
    }
  }
  if (a3) {
    operator new();
  }
  return 0;
}

void *SamplerElement::SetInstrument(SamplerElement *this, InstrumentState *a2)
{
  uint64_t result = SamplerBaseElement::SetInstrument(this, a2);
  if (a2) {
    *((void *)this + 37) = *((void *)this + 37) & 0xFFFFFFFFFFFFFFFELL | (*((_DWORD *)a2 + 31) > 75);
  }
  return result;
}

uint64_t SamplerElement::GetDestinationComponentByID(SamplerElement *this, unsigned int a2)
{
  if (a2 >> 28 != 1) {
    return 0;
  }
  if (a2 != 241)
  {
    if (a2 == 240)
    {
      uint64_t v2 = *((void *)this + 38);
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v2 = *((void *)this + 40);
LABEL_7:
  if (v2) {
    return v2 + 152;
  }
  else {
    return 0;
  }
}

double SamplerElement::GetSourceComponentByID@<D0>(SamplerElement *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (a2 == 321)
  {
    uint64_t v5 = *((void *)this + 40);
    uint64_t v4 = *((void *)this + 41);
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (a2 == 320)
  {
    uint64_t v5 = *((void *)this + 38);
    uint64_t v4 = *((void *)this + 39);
    if (!v4)
    {
LABEL_5:
      *a3 = v5;
      a3[1] = v4;
      return result;
    }
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_5;
  }
  SamplerBaseElement::GetSourceComponentByID(this, a2, &v7);
  double result = *(double *)&v7;
  *(_OWORD *)a3 = v7;
  return result;
}

uint64_t SamplerElement::StartNote(SamplerElement *this, SynthPartElement *a2, uint64_t a3, const MusicDeviceNoteParams *a4, const MusicDeviceNoteParams *a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int mPitch = (char)(int)a5->mPitch;
  uint64_t v11 = *((void *)this + 32);
  uint64_t v12 = *(void *)(v11 + 192);
  if (v12)
  {
    if ((mPitch & 0x80000000) != 0) {
      std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
    }
    if ((*(void *)(v12 + ((mPitch >> 3) & 0x18)) >> mPitch))
    {
      *(unsigned char *)(*((void *)this + 29) + 76) = mPitch;
      LOBYTE(v12) = 1;
    }
    else
    {
      LOBYTE(v12) = 0;
    }
  }
  int v13 = *(unsigned __int8 *)(v11 + 200);
  if (v13 != 255)
  {
    int v14 = mPitch;
    if (v13 + 11 >= mPitch && v13 - 11 <= mPitch)
    {
      uint64_t v24 = *((void *)this + 29);
      uint64_t v25 = *(void *)(v24 + 16);
      uint64_t v26 = *(void *)(v24 + 24);
      if (v25 != v26)
      {
        uint64_t v27 = 715827883 * (127 * (v14 - v13) + 1524);
        unsigned __int8 v28 = (v27 >> 34) + (v27 < 0);
        while (*(_WORD *)v25 != 304)
        {
          v25 += 24;
          if (v25 == v26) {
            return 778;
          }
        }
        uint64_t v32 = *(void *)(v25 + 8);
        unsigned int v31 = *(std::__shared_weak_count **)(v25 + 16);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v32)
        {
          int v33 = v28 << 7;
          if (*(_DWORD *)(v32 + 164) != v33)
          {
            *(_DWORD *)(v32 + 164) = v33;
            *(unsigned char *)(v32 + 168) = 1;
          }
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
      }
      return 778;
    }
  }
  if (v12) {
    return 778;
  }
  if (*((unsigned char *)this + 296))
  {
    uint64_t v16 = *((void *)this + 43);
    if (*((void *)this + 42) != v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(v16 - 12);
      *((_DWORD *)this + 92) = *(_DWORD *)(v16 - 4);
      *((void *)this + 45) = v18;
      uint64_t v19 = *((unsigned __int8 *)this + 241) + 1;
      while (1)
      {
        uint64_t v20 = *((void *)this + 3 * v17 + 12);
        if (v20) {
          break;
        }
LABEL_18:
        if (++v17 == v19)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_39;
          }
          *(_DWORD *)__int16 v52 = 136315650;
          *(void *)&v52[4] = "SamplerElement.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 94;
          *(_WORD *)&v52[18] = 1024;
          *(_DWORD *)&v52[20] = v18;
          uint64_t v21 = &_os_log_internal;
          uint64_t v22 = "%25s:%-5d SamplerElement::StartNote: no note found for pressed key %u";
          uint32_t v23 = 24;
          goto LABEL_38;
        }
      }
      while (*(_DWORD *)(v20 + 40) != v18)
      {
        uint64_t v20 = *(void *)(v20 + 16);
        if (!v20) {
          goto LABEL_18;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, SynthPartElement *, SamplerElement *, uint64_t, void, const MusicDeviceNoteParams *, const MusicDeviceNoteParams *))(*(void *)v20 + 24))(v20, a2, this, a3, *(void *)(*((void *)this + 1) + 688) + a4, a4, a5);
      if (result)
      {
        uint64_t v30 = 777;
        goto LABEL_45;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v52 = 136315394;
        *(void *)&v52[4] = "SamplerElement.cpp";
        *(_WORD *)&v52[12] = 1024;
        *(_DWORD *)&v52[14] = 89;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::StartNote: re-attack returned false", v52, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v52 = 136315394;
      *(void *)&v52[4] = "SamplerElement.cpp";
      *(_WORD *)&v52[12] = 1024;
      *(_DWORD *)&v52[14] = 98;
      uint64_t v21 = &_os_log_internal;
      uint64_t v22 = "%25s:%-5d SamplerElement::StartNote: no keys currently pressed";
      uint32_t v23 = 18;
LABEL_38:
      _os_log_impl(&dword_21B9BB000, v21, OS_LOG_TYPE_DEBUG, v22, v52, v23);
    }
LABEL_39:
    if (*((_DWORD *)this + 66)) {
      (*(void (**)(SamplerElement *, const MusicDeviceNoteParams *))(*(void *)this + 88))(this, a4);
    }
  }
  uint64_t NewNote = SamplerBaseElement::GetNewNote(*((SamplerBaseElement **)this + 1), (uint64_t)a4, a3, a4);
  if (!NewNote)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v52 = 136315394;
      *(void *)&v52[4] = "SamplerElement.cpp";
      *(_WORD *)&v52[12] = 1024;
      *(_DWORD *)&v52[14] = 109;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::StartNote: No free notes available", v52, 0x12u);
    }
    SamplerElement::RemoveNote(this, a3);
    return 0xFFFFFFFFLL;
  }
  uint64_t result = (*(uint64_t (**)(SamplerElement *, uint64_t, SynthPartElement *, uint64_t, const MusicDeviceNoteParams *, const MusicDeviceNoteParams *))(*(void *)this + 56))(this, NewNote, a2, a3, a4, a5);
  if (*(int *)(NewNote + 44) <= 4) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = 779;
  }
LABEL_45:
  Float32 v36 = a5->mPitch;
  Float32 mVelocity = a5->mVelocity;
  unsigned int v37 = (Float32 *)*((void *)this + 43);
  unint64_t v38 = *((void *)this + 44);
  if ((unint64_t)v37 < v38)
  {
    *(_DWORD *)unsigned int v37 = a3;
    uint64_t v39 = v37 + 3;
    v37[1] = v36;
    v37[2] = mVelocity;
LABEL_70:
    *((void *)this + 43) = v39;
    return v30;
  }
  unint64_t v40 = *((void *)this + 42);
  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v37 - v40) >> 2);
  unint64_t v42 = v41 + 1;
  if (v41 + 1 > 0x1555555555555555) {
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v40) >> 2);
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v44 = 0x1555555555555555;
  }
  else {
    unint64_t v44 = v42;
  }
  __int16 v54 = (char *)this + 352;
  if (!v44)
  {
    uint64_t v45 = 0;
    goto LABEL_64;
  }
  if (v44 <= 0x1555555555555555)
  {
    uint64_t result = *MEMORY[0x263F88688];
    if (*MEMORY[0x263F88688])
    {
      uint64_t v45 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
      unint64_t v40 = *((void *)this + 42);
      unsigned int v37 = (Float32 *)*((void *)this + 43);
LABEL_64:
      char v46 = (Float32 *)(v45 + 12 * v41);
      *(_DWORD *)char v46 = a3;
      v46[1] = v36;
      v46[2] = mVelocity;
      if (v37 == (Float32 *)v40)
      {
        int64x2_t v50 = vdupq_n_s64(v40);
        unint64_t v47 = v45 + 12 * v41;
      }
      else
      {
        unint64_t v47 = v45 + 12 * v41;
        do
        {
          uint64_t v48 = *(void *)(v37 - 3);
          v37 -= 3;
          int v49 = *((_DWORD *)v37 + 2);
          *(void *)(v47 - 12) = v48;
          v47 -= 12;
          *(_DWORD *)(v47 + 8) = v49;
        }
        while (v37 != (Float32 *)v40);
        int64x2_t v50 = *((int64x2_t *)this + 21);
      }
      uint64_t v39 = v46 + 3;
      *((void *)this + 42) = v47;
      *((void *)this + 43) = v46 + 3;
      *(int64x2_t *)&v52[8] = v50;
      uint64_t v51 = *((void *)this + 44);
      *((void *)this + 44) = v45 + 12 * v44;
      uint64_t v53 = v51;
      *(void *)__int16 v52 = v50.i64[0];
      std::__split_buffer<SamplerNoteParams,caulk::rt_allocator<SamplerNoteParams> &>::~__split_buffer((uint64_t)v52);
      goto LABEL_70;
    }
  }
  __break(1u);
  return result;
}

void *SamplerElement::RemoveNote(void *this, int a2)
{
  uint64_t v3 = (char *)this[42];
  uint64_t v2 = (char *)this[43];
  if (v3 != v2)
  {
    uint64_t v4 = this;
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 12;
      if (v3 == v2) {
        return this;
      }
    }
    int64_t v5 = v2 - (v3 + 12);
    if (v2 != v3 + 12) {
      this = memmove(v3, v3 + 12, v2 - (v3 + 12));
    }
    v4[43] = &v3[v5];
  }
  return this;
}

uint64_t std::__split_buffer<SamplerNoteParams,caulk::rt_allocator<SamplerNoteParams> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a1 + 8)) {
    *(void *)(a1 + 16) = (v2 - *(void *)(a1 + 8) - 12) % 0xCuLL + *(void *)(a1 + 8);
  }
  uint64_t v3 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 2));
  }
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x1555555555555556)
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x263F88688];
    if (*MEMORY[0x263F88688]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void SamplerElement::UnregisterControlSource(SamplerBaseElement *this, int a2)
{
  if ((a2 & 0xFFFFFFFE) != 0x140) {
    SamplerBaseElement::UnregisterControlSource(this, a2);
  }
}

uint64_t SamplerElement::RegisterControlSource(uint64_t this, int a2)
{
  uint64_t v2 = this;
  if (a2 == 321)
  {
    if (!*(void *)(this + 320))
    {
      uint64_t v8 = (InstrumentLFO *)operator new(0x150uLL);
      uint64_t v9 = *(void *)(v2 + 256);
      double v10 = *(LFOState ***)(v9 + 208);
      uint64_t v11 = *(LFOState ***)(v9 + 216);
      if (v10 == v11)
      {
LABEL_17:
        uint64_t v12 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v12 = *v10;
          if ((**(unsigned int (***)(LFOState *))*v10)(*v10) == 268435697) {
            break;
          }
          if (++v10 == v11) {
            goto LABEL_17;
          }
        }
      }
      InstrumentLFO::InstrumentLFO(v8, v12, *(float *)(v2 + 252));
      std::shared_ptr<InstrumentLFO>::shared_ptr[abi:ne180100]<InstrumentLFO,void>(&v13, (uint64_t)v8);
    }
  }
  else if (a2 == 320)
  {
    if (!*(void *)(this + 304))
    {
      uint64_t v3 = (InstrumentLFO *)operator new(0x150uLL);
      uint64_t v4 = *(void *)(v2 + 256);
      int64_t v5 = *(LFOState ***)(v4 + 208);
      uint64_t v6 = *(LFOState ***)(v4 + 216);
      if (v5 == v6)
      {
LABEL_7:
        long long v7 = 0;
      }
      else
      {
        while (1)
        {
          long long v7 = *v5;
          if ((**(unsigned int (***)(LFOState *))*v5)(*v5) == 268435696) {
            break;
          }
          if (++v5 == v6) {
            goto LABEL_7;
          }
        }
      }
      InstrumentLFO::InstrumentLFO(v3, v7, *(float *)(v2 + 252));
      std::shared_ptr<InstrumentLFO>::shared_ptr[abi:ne180100]<InstrumentLFO,void>(&v13, (uint64_t)v3);
    }
  }
  else
  {
    return SamplerBaseElement::RegisterControlSource(this, a2);
  }
  return this;
}

void sub_21BA801C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void InstrumentLFO::InstrumentLFO(InstrumentLFO *this, LFOState *a2, float a3)
{
  *(void *)this = &unk_26CBB16A8;
  *((void *)this + 41) = &unk_26CBAAF50;
  char v6 = (*(uint64_t (**)(LFOState *))(*(void *)a2 + 56))(a2);
  int v7 = (**(uint64_t (***)(LFOState *))a2)(a2);
  ModControlSrcAndDest::ModControlSrcAndDest(this, (uint64_t *)&off_26CBA6898, v6, v7, 2);
  *(void *)this = &unk_26CBA4028;
  *((void *)this + 41) = &unk_26CBA4158;
  *((void *)this + 19) = &unk_26CBA40C0;
  unsigned int v8 = ((float)(*((float *)a2 + 24) * a3) + 0.5);
  *((void *)this + 32) = a2;
  *((void *)this + 33) = v8;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 34) = _D0;
  *((double *)this + 35) = 1.0 / a3;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 76) = v8;
  *((float *)this + 77) = (float)random() * 4.6566e-10;
  *((void *)this + 39) = 0x100000000;
  SamplerState::AddView(*((void *)this + 32), (InstrumentLFO *)((char *)this + *(void *)(*(void *)this - 40)));
  *(void *)this = off_26CBA9EA8;
  *((void *)this + 41) = off_26CBA9FD8;
  *((void *)this + 19) = off_26CBA9F40;
  *((_DWORD *)this + 80) = 0;
  *((unsigned char *)this + 324) = 0;
}

void sub_21BA8042C(_Unwind_Exception *a1)
{
  ModControlDestination::~ModControlDestination(v2, (uint64_t *)&off_26CBA68B8);
  void *v1 = &unk_26CBA3D88;
  v1[41] = &unk_26CBA3E18;
  _Unwind_Resume(a1);
}

void std::shared_ptr<InstrumentLFO>::shared_ptr[abi:ne180100]<InstrumentLFO,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21BA804E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<InstrumentLFO *,std::shared_ptr<InstrumentLFO>::__shared_ptr_default_delete<InstrumentLFO,InstrumentLFO>,std::allocator<InstrumentLFO>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<InstrumentLFO *,std::shared_ptr<InstrumentLFO>::__shared_ptr_default_delete<InstrumentLFO,InstrumentLFO>,std::allocator<InstrumentLFO>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t virtual thunk to'InstrumentLFO::IsEnabled(InstrumentLFO *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 72) + 8);
}

void *virtual thunk to'InstrumentLFO::Enable(void *this, char a2)
{
  *((unsigned char *)this + *(void *)(*this - 64) + 8) = a2;
  return this;
}

uint64_t virtual thunk to'InstrumentLFO::Run(InstrumentLFO *this, uint64_t a2)
{
  return ModControlDestination::Run((InstrumentLFO *)((char *)this + *(void *)(*(void *)this - 48) + 152), a2);
}

uint64_t virtual thunk to'InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

void virtual thunk to'InstrumentLFO::~InstrumentLFO(void *a1)
{
  VoiceLFO::~VoiceLFO((VoiceLFO *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_26CBA6890);

  operator delete(v1);
}

{
  VoiceLFO::~VoiceLFO((VoiceLFO *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_26CBA6890);
}

uint64_t non-virtual thunk to'InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

void non-virtual thunk to'InstrumentLFO::~InstrumentLFO(InstrumentLFO *this)
{
  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this - 152), (uint64_t *)&off_26CBA6890);

  operator delete(v1);
}

{
  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this - 152), (uint64_t *)&off_26CBA6890);
}

float InstrumentLFO::GetValue(InstrumentLFO *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 324)) {
    return *((float *)this + 80);
  }
  (*(void (**)(InstrumentLFO *))(*(void *)this + 32))(this);
  float result = VoiceLFO::GetValue(this, a2);
  *((float *)this + 80) = result;
  *((unsigned char *)this + 324) = 0;
  return result;
}

uint64_t InstrumentLFO::IsEnabled(InstrumentLFO *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t InstrumentLFO::Enable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t InstrumentLFO::Run(InstrumentLFO *this, uint64_t a2)
{
  return ModControlDestination::Run((InstrumentLFO *)((char *)this + 152), a2);
}

uint64_t InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

void InstrumentLFO::~InstrumentLFO(InstrumentLFO *this)
{
  VoiceLFO::~VoiceLFO(this, (uint64_t *)&off_26CBA6890);

  operator delete(v1);
}

{
  VoiceLFO::~VoiceLFO(this, (uint64_t *)&off_26CBA6890);
}

uint64_t SamplerElement::Render(SynthGroupElement *this, uint64_t a2, uint64_t a3, ausdk::AUScope *a4, uint64_t a5)
{
  uint64_t v5 = *((void *)this + 38);
  if (v5) {
    *(unsigned char *)(v5 + 324) = 1;
  }
  uint64_t v6 = *((void *)this + 40);
  if (v6) {
    *(unsigned char *)(v6 + 324) = 1;
  }
  return SynthGroupElement::Render(this, a2, a3, a4, a5);
}

caulk::rt_safe_memory_resource *SamplerElement::Reset(SamplerElement *this)
{
  float result = SamplerBaseElement::Reset(this);
  *((void *)this + 43) = *((void *)this + 42);
  return result;
}

uint64_t SamplerElement::AllSoundOff(SamplerElement *this, uint64_t a2)
{
  uint64_t result = SynthGroupElement::AllSoundOff((uint64_t)this, a2);
  *((void *)this + 43) = *((void *)this + 42);
  return result;
}

uint64_t SamplerElement::AllNotesOff(SamplerElement *this, uint64_t a2)
{
  uint64_t result = SynthGroupElement::AllNotesOff((uint64_t)this, a2);
  *((void *)this + 43) = *((void *)this + 42);
  return result;
}

void SamplerElement::ChannelMessage(SamplerElement *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v31 = *MEMORY[0x263EF8340];
  if ((int)a2 <= 125)
  {
    if ((a2 - 124) < 2) {
      return;
    }
    if (a2 != 5)
    {
      if (a2 == 65)
      {
        (*(void (**)(void, uint64_t, void))(**((void **)this + 29) + 56))(*((void *)this + 29), a2, a3);
        return;
      }
LABEL_19:
      SynthGroupElement::ChannelMessage(this, a2, a3);
      return;
    }
    (*(void (**)(void, uint64_t, void))(**((void **)this + 29) + 56))(*((void *)this + 29), a2, a3);
    if (*(_DWORD *)(*((void *)this + 32) + 124) != 74) {
      return;
    }
    if (v3)
    {
      if (v3 > 0xF)
      {
        if (v3 <= 0x70)
        {
          float v20 = (double)-v3 / 48.0;
          float v9 = __exp10f(v20) * 25.0;
          goto LABEL_51;
        }
        if (v3 > 0x7E)
        {
          float v9 = 0.01;
          goto LABEL_51;
        }
        double v8 = exp2f((float)((float)(int)(v3 * v3) * -0.0078125) * 4.0) * 0.1;
      }
      else
      {
        double v8 = 1000.0 / ((double)v3 * 5.0 + 1.0);
      }
      float v9 = v8;
    }
    else
    {
      float v9 = 1000.0;
    }
LABEL_51:
    float v26 = 0.001 / v9;
    *((float *)this + 93) = v26;
    return;
  }
  if (a2 == 126 || a2 == 127)
  {
    SamplerElement::UpdateState((uint64_t)this);
    return;
  }
  if (a2 != 192) {
    goto LABEL_19;
  }
  if (*((unsigned char *)this + 376))
  {
    uint64_t v5 = *((void *)this + 29);
    int v6 = *(_DWORD *)(v5 + 80);
    if (*(_DWORD *)(v5 + 64) == 9) {
      BOOL v7 = v6 != 2;
    }
    else {
      BOOL v7 = v6 == 1;
    }
    uint64_t v10 = a3 & 0x7F;
    int v11 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(*(uint64_t ***)(v5 + 48), 0x20u);
    int v12 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(*(uint64_t ***)(v5 + 48), 0);
    __int16 v13 = (_WORD)v12 << 7;
    unsigned int v14 = v11 | (v12 << 7);
    int v15 = v13 & 0x7F00;
    if (v15)
    {
      if (v7) {
        int v16 = 30720;
      }
      else {
        int v16 = 30976;
      }
      int v17 = v16 | (v14 >> 8);
      if (v15 == 30720 || v15 == 30976) {
        unsigned int v19 = v14;
      }
      else {
        unsigned int v19 = v17;
      }
    }
    else
    {
      if (v7) {
        int v21 = 30720;
      }
      else {
        int v21 = 30976;
      }
      unsigned int v19 = v21 & 0xFFFFFF00 | v14;
    }
    uint64_t v22 = (uint64_t *)*((void *)this + 1);
    if (v7) {
      uint64_t v23 = v19 & 0x7F00;
    }
    else {
      uint64_t v23 = v19;
    }
    uint64_t v24 = *v22;
    if (*((unsigned char *)this + 377))
    {
      if ((*(unsigned int (**)(uint64_t *))(v24 + 424))(v22))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          int v27 = 136315394;
          unsigned __int8 v28 = "SamplerElement.cpp";
          __int16 v29 = 1024;
          int v30 = 285;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: Preroll mode set during render", (uint8_t *)&v27, 0x12u);
        }
        __break(1u);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 704))(v22, v23, v10);
      }
    }
    else
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 712))(v22, v23, v10);
      (*(void (**)(SamplerElement *, uint64_t))(*(void *)this + 184))(this, v25);
    }
  }
}

uint64_t SamplerElement::UpdateState(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(*(void *)(this + 256) + 124);
  BOOL v3 = v2 > 75;
  uint64_t v4 = *(void *)(this + 296);
  if (v3 == (*(_DWORD *)(this + 296) & 1))
  {
    if (v2 != 74) {
      return this;
    }
    BOOL v3 = *(unsigned char *)(*(void *)(this + 232) + 75) != 0;
  }
  else
  {
    this = (*(uint64_t (**)(void, void))(**(void **)(this + 8) + 664))(*(void *)(this + 8), *(unsigned __int8 *)(this + 248));
    uint64_t v4 = *(void *)(v1 + 296);
  }
  *(void *)(v1 + 296) = v4 & 0xFFFFFFFFFFFFFFFELL | v3;
  return this;
}

void SamplerElement::NoteOff(SamplerElement *this, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)this + 42);
  uint64_t v6 = *((void *)this + 43);
  unsigned int v8 = -1431655765 * ((unint64_t)(v6 - v7) >> 2);
  if (v8 < 2)
  {
    if (v8 == 1)
    {
      if (v7 != v6)
      {
        uint64_t v9 = *(void *)(v6 - 12);
        *((_DWORD *)this + 92) = *(_DWORD *)(v6 - 4);
        *((void *)this + 45) = v9;
      }
      *((void *)this + 43) = v6 - 12;
    }
    SynthGroupElement::NoteOff((uint64_t)this, a2, a3);
    uint64_t v10 = (InstrumentState *)*((void *)this + 32);
    InstrumentState::UpdateLayers(v10);
    return;
  }
  if ((*((unsigned char *)this + 296) & 1) == 0)
  {
    SamplerElement::RemoveNote(this, a2);
LABEL_21:
    SynthGroupElement::NoteOff((uint64_t)this, a2, a3);
    return;
  }
  if (v7 == v6) {
    goto LABEL_21;
  }
  uint64_t v11 = v6 - 12;
  if (*(_DWORD *)(v6 - 12) == a2)
  {
    uint64_t v12 = *(void *)(v6 - 8);
    *((_DWORD *)this + 90) = a2;
    *(void *)((char *)this + 364) = v12;
    *((void *)this + 43) = v11;
    if (v7 == v11)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        unsigned int v19 = "SamplerElement.cpp";
        __int16 v20 = 1024;
        int v21 = 145;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: expected previous note in active stack", (uint8_t *)&v18, 0x12u);
      }
      __break(1u);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(unsigned int *)(v6 - 24);
      int v15 = *(const char **)(v6 - 20);
      uint64_t v16 = *((unsigned __int8 *)this + 241) + 1;
      while (1)
      {
        uint64_t v17 = *((void *)this + 3 * v13 + 12);
        if (v17) {
          break;
        }
LABEL_18:
        if (++v13 == v16)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
          {
            int v18 = 136315650;
            unsigned int v19 = "SamplerElement.cpp";
            __int16 v20 = 1024;
            int v21 = 167;
            __int16 v22 = 1024;
            int v23 = a2;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::NoteOff: no note found for note ID %u", (uint8_t *)&v18, 0x18u);
          }
          goto LABEL_21;
        }
      }
      while (*(_DWORD *)(v17 + 40) != a2)
      {
        uint64_t v17 = *(void *)(v17 + 16);
        if (!v17) {
          goto LABEL_18;
        }
      }
      int v18 = 2;
      unsigned int v19 = v15;
      (*(void (**)(uint64_t, void, SamplerElement *, uint64_t, void, uint64_t, int *))(*(void *)v17 + 24))(v17, *(void *)(v17 + 24), this, v14, *(void *)(*((void *)this + 1) + 688) + a3, a3, &v18);
      *(unsigned char *)(*((void *)this + 1) + 816) = 1;
    }
  }
  else
  {
    SamplerElement::RemoveNote(this, a2);
  }
}

void SamplerElement::~SamplerElement(SamplerElement *this)
{
  SamplerElement::~SamplerElement(this);

  JUMPOUT(0x21D497F90);
}

{
  caulk::rt_safe_memory_resource *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_26CBAAE00;
  SamplerBaseElement::SetInstrument(this, 0);
  int v2 = (caulk::rt_safe_memory_resource *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 44) - (void)v2) >> 2));
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  SamplerBaseElement::~SamplerBaseElement(this);
}

uint64_t AUSampleDelay::Version(AUSampleDelay *this)
{
  return 0x10000;
}

BOOL AUSampleDelay::ShouldBypassEffect(AUSampleDelay *this)
{
  return *((unsigned char *)this + 552) || *((unsigned char *)this + 592) != 0;
}

void AUSampleDelay::NewKernel(AUSampleDelay *this)
{
}

void *AUSampleDelay::AUSampleDelayKernel::Process(AUSampleDelay::AUSampleDelayKernel *this, const float *a2, float *a3, int a4, BOOL *a5)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  int v11 = *((_DWORD *)this + 14);
  uint64_t v12 = *((int *)this + 13);
  *((_DWORD *)this + 12) = ((int)v12 - (int)Parameter + v11) % v11;
  if ((int)v12 + a4 <= v11)
  {
    int v15 = (void *)(*((void *)this + 4) + 4 * v12);
    size_t v16 = 4 * a4;
    uint64_t v17 = a2;
  }
  else
  {
    int v13 = v11 - v12;
    int v14 = a4 - (v11 - v12);
    memcpy((void *)(*((void *)this + 4) + 4 * v12), a2, 4 * (v11 - (int)v12));
    int v15 = (void *)*((void *)this + 4);
    size_t v16 = 4 * v14;
    uint64_t v17 = &a2[v13];
  }
  memcpy(v15, v17, v16);
  uint64_t v18 = *((int *)this + 12);
  int v19 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 13) = (*((_DWORD *)this + 13) + a4) % v19;
  if ((int)v18 + a4 <= v19)
  {
    int v23 = (const void *)(*((void *)this + 4) + 4 * v18);
    size_t v24 = 4 * a4;
    __int16 v22 = a3;
  }
  else
  {
    int v20 = v19 - v18;
    int v21 = a4 - (v19 - v18);
    memcpy(a3, (const void *)(*((void *)this + 4) + 4 * v18), 4 * (v19 - (int)v18));
    __int16 v22 = &a3[v20];
    int v23 = (const void *)*((void *)this + 4);
    size_t v24 = 4 * v21;
  }

  return memcpy(v22, v23, v24);
}

void AUSampleDelay::AUSampleDelayKernel::Reset(void **this)
{
}

void AUSampleDelay::AUSampleDelayKernel::~AUSampleDelayKernel(AUSampleDelay::AUSampleDelayKernel *this)
{
  *(void *)this = &unk_26CBB1898;
  int v2 = (char *)this + 24;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    free(v1);
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }

  JUMPOUT(0x21D497F90);
}

{
  void *v1;
  char *v2;

  *(void *)this = &unk_26CBB1898;
  int v2 = (char *)this + 24;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    free(v1);
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
}

uint64_t AUSampleDelay::SupportsTail(AUSampleDelay *this)
{
  return 1;
}

double AUSampleDelay::GetTailTime(AUSampleDelay *this)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSampleDelay *)((char *)this + 32), 0);
  double Parameter = ausdk::AUElement::GetParameter(Element, 0);
  return Parameter / *(double *)(ausdk::AUScope::SafeGetElement((AUSampleDelay *)((char *)this + 128), 0) + 80);
}

double AUSampleDelay::GetLatency(AUSampleDelay *this)
{
  return 0.0;
}

uint64_t AUSampleDelay::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3) {
    AUSampleDelay::DelayParameterSet((AUSampleDelay *)this);
  }
  return v3;
}

uint64_t AUSampleDelay::DelayParameterSet(AUSampleDelay *this)
{
  int v2 = (AUSampleDelay *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSampleDelay *)((char *)this + 32), 0);
  int Parameter = (int)ausdk::AUElement::GetParameter(Element, 0);
  if (Parameter < 0)
  {
    uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
    ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
    int Parameter = 0;
  }
  else
  {
    int v5 = *((_DWORD *)this + 149);
    if (v5 < Parameter)
    {
      uint64_t v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
      ausdk::AUElement::SetParameter(v6, 0, (float)*((int *)this + 149), 0);
      int Parameter = v5;
    }
  }
  uint64_t result = (*(uint64_t (**)(AUSampleDelay *))(*(void *)this + 592))(this);
  *((unsigned char *)this + 592) = Parameter == 0;
  if (Parameter) {
    BOOL v9 = result == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(uint64_t (**)(AUSampleDelay *, void, void))(*(void *)this + 72);
    return v10(this, 0, 0);
  }
  return result;
}

AudioUnitParameterValue AUSampleDelay::GetParameterInfo(AUSampleDelay *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  v9[1] = *(CFStringRef **)MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (!a2)
  {
    v9[0] = (CFStringRef *)&kSampleDelayParamName;
    if (LocalizeAUParameterStringsForClass<AUSampleDelay>(std::initializer_list<__CFString const**>)::sLocalized)
    {
      if (a3) {
        return result;
      }
LABEL_6:
      CFStringRef v8 = (const __CFString *)kSampleDelayParamName;
      buffer->cfNameString = (CFStringRef)kSampleDelayParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(void *)&buffer->unit = 5;
      AudioUnitParameterValue result = (float)*((int *)this + 149);
      buffer->maxunint64_t Value = result;
      buffer->defaultunint64_t Value = 0.0;
      return result;
    }
    LocalizeAUParameterStringsForClass<AUSampleDelay>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v9, 1);
    if (!a3) {
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t AUSampleDelay::SetParameter(AUSampleDelay *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (!(a3 | a2)) {
    AUSampleDelay::DelayParameterSet(this);
  }
  return 0;
}

uint64_t AUSampleDelay::Initialize(AUSampleDelay *this)
{
  uint64_t v2 = ausdk::AUEffectBase::Initialize(this);
  if (!v2)
  {
    int v3 = *((_DWORD *)this + 84);
    int v4 = *((_DWORD *)this + 149);
    int v5 = (int)(*(double *)(ausdk::AUScope::SafeGetElement((AUSampleDelay *)((char *)this + 128), 0) + 80) * 0.100000001);
    *((_DWORD *)this + 149) = v5;
    uint64_t v6 = (uint64_t *)*((void *)this + 66);
    uint64_t v7 = (uint64_t *)*((void *)this + 67);
    if (v6 != v7)
    {
      do
      {
        uint64_t v8 = *v6++;
        int v9 = *((_DWORD *)this + 149);
        *(_DWORD *)(v8 + 52) = v9;
        *(_DWORD *)(v8 + 56) = v9 + v3;
        TAUBuffer<unsigned int>::Allocate(v8 + 24, v9 + v3);
        bzero(*(void **)(v8 + 32), *(unsigned int *)(v8 + 40));
      }
      while (v6 != v7);
      int v5 = *((_DWORD *)this + 149);
    }
    if (v5 != v4) {
      (*(void (**)(AUSampleDelay *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
    }
  }
  return v2;
}

void AUSampleDelay::~AUSampleDelay(AUSampleDelay *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void *AUSampleDelayFactory()
{
  AudioUnitParameterValue result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *AudioUnitParameterValue result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSampleDelay>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSampleDelay>::Destruct;
  return result;
}

uint64_t NextPrime(uint64_t a1)
{
  if (a1 < 0xFFF2)
  {
LABEL_12:
    if (a1 < 3)
    {
      return 2;
    }
    else
    {
      int v7 = 0;
      int v8 = 6541;
      do
      {
        int v9 = v8 + v7;
        if (v8 + v7 < 0 != __OFADD__(v8, v7)) {
          ++v9;
        }
        int v10 = v9 >> 1;
        if (a1 <= kPrimes[v10]) {
          int v8 = v10;
        }
        else {
          int v7 = v10 + 1;
        }
        uint64_t v1 = kPrimes[v7];
      }
      while (a1 > v1);
    }
  }
  else
  {
    a1 = a1 | 1;
    uint64_t v1 = a1;
    while (1)
    {
      unint64_t v2 = 1;
      char v3 = 1;
      do
      {
        unsigned int v4 = kPrimes[v2];
        if (v4 * v4 > v1) {
          break;
        }
        unsigned int v5 = v1 % v4;
        v3 &= v5 != 0;
      }
      while (v5 && v2++ < 0x198D);
      if (v3) {
        break;
      }
      uint64_t v1 = (v1 + 2);
      if (!v1) {
        goto LABEL_12;
      }
    }
  }
  return v1;
}

float MIDIControlDelegate::GetPitchBend(MIDIControlDelegate *this)
{
  return *((float *)this + 21) * (float)(*((float *)this + 22) + *((float *)this + 23));
}

uint64_t MIDIControlDelegate::SetSysex(MIDIControlDelegate *this, void *a2)
{
  return 0;
}

uint64_t MIDIControlDelegate::GetRPN(uint64_t ***this)
{
  int v2 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(this[6], 0x64u);
  return v2 | (*(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(this[6], 0x65u) << 7);
}

BOOL MIDIControlDelegate::SetPolyPressure(MIDIControlDelegate *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16 * a2);
    if (*(_DWORD *)(v4 + 164) != a3 << 7)
    {
      *(_DWORD *)(v4 + 164) = a3 << 7;
      *(unsigned char *)(v4 + 168) = 1;
    }
  }
  return v3 != 0;
}

BOOL MIDIControlDelegate::SetChannelPressure(MIDIControlDelegate *this, int a2)
{
  for (uint64_t i = *((void *)this + 2); ; i += 24)
  {
    if (i == *((void *)this + 3)) {
      return 0;
    }
    if (*(_WORD *)i == 208) {
      break;
    }
  }
  uint64_t v5 = *(void *)(i + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(i + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v3 = v5 != 0;
  if (v5 && *(_DWORD *)(v5 + 164) != a2 << 7)
  {
    *(_DWORD *)(v5 + 164) = a2 << 7;
    *(unsigned char *)(v5 + 168) = 1;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v3;
}

BOOL MIDIControlDelegate::SetPitchWheel(MIDIControlDelegate *this, __int16 a2)
{
  for (uint64_t i = *((void *)this + 2); ; i += 24)
  {
    if (i == *((void *)this + 3)) {
      return 0;
    }
    if (*(_WORD *)i == 224) {
      break;
    }
  }
  uint64_t v5 = *(void *)(i + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(i + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v3 = v5 != 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 164) != (a2 & 0x7FFF))
    {
      *(_DWORD *)(v5 + 164) = a2 & 0x7FFF;
      *(unsigned char *)(v5 + 168) = 1;
    }
    *((float *)this + 21) = (float)(a2 - 0x2000) * 0.00012207;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v3;
}

uint64_t MIDIControlDelegate::SetProgramChange(MIDIControlDelegate *this)
{
  return 0;
}

void std::__shared_ptr_pointer<MIDIControlSource *,std::shared_ptr<MIDIControlSource>::__shared_ptr_default_delete<MIDIControlSource,MIDIControlSource>,std::allocator<MIDIControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

void MatrixMixerCore::CalcDecayConstant(MatrixMixerCore *this, double a2)
{
  double v4 = *((float *)this + 21) * a2;
  if (v4 >= 2.22507386e-308) {
    double v5 = -6.90775528 / v4;
  }
  else {
    double v5 = -INFINITY;
  }
  double v6 = exp(v5);
  if (v5 < -708.4) {
    double v6 = 0.0;
  }
  double v7 = v6 * v6;
  float v8 = v6;
  *(float *)&double v7 = v7 * v7;
  *((float *)this + 15) = v8;
  *((_DWORD *)this + 16) = LODWORD(v7);
  if (*((_DWORD *)this + 2))
  {
    unint64_t v9 = 0;
    uint64_t v10 = 16;
    do
    {
      PowerMeter::SetSampleRate((PowerMeter *)(*((void *)this + 2) + v10), a2);
      ++v9;
      v10 += 160;
    }
    while (v9 < *((unsigned int *)this + 2));
  }
  if (*((_DWORD *)this + 3))
  {
    unint64_t v11 = 0;
    uint64_t v12 = 16;
    do
    {
      PowerMeter::SetSampleRate((PowerMeter *)(*((void *)this + 3) + v12), a2);
      ++v11;
      v12 += 160;
    }
    while (v11 < *((unsigned int *)this + 3));
  }
}

void non-virtual thunk to'MIDISynth::~MIDISynth(MIDISynth *this)
{
  MIDISynth::~MIDISynth((MIDISynth *)((char *)this - 528));

  JUMPOUT(0x21D497F90);
}

{
  MIDISynth::~MIDISynth((MIDISynth *)((char *)this - 528));
}

void MIDISynth::~MIDISynth(MIDISynth *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26CBB10F8;
  *((void *)this + 66) = &unk_26CBB1410;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315650;
    unint64_t v11 = "MidiSynth.cpp";
    __int16 v12 = 1024;
    int v13 = 44;
    __int16 v14 = 2048;
    int v15 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::~MIDISynth(%p)", (uint8_t *)&v10, 0x1Cu);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v2 = (MIDISynth *)*((void *)this + 107);
    int v10 = 136315650;
    unint64_t v11 = "MidiSynth.cpp";
    __int16 v12 = 1024;
    int v13 = 367;
    __int16 v14 = 2048;
    int v15 = v2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::ClearPreloadedInstruments: unref'ing %lu instruments", (uint8_t *)&v10, 0x1Cu);
  }
  BOOL v3 = (char *)*((void *)this + 105);
  double v4 = (char *)this + 848;
  if (v3 != (char *)this + 848)
  {
    do
    {
      SamplerState::Unref(*((_DWORD **)v3 + 5));
      double v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          double v6 = v5;
          double v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          double v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          BOOL v3 = v6;
        }
        while (!v7);
      }
      BOOL v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((void **)this + 106));
  *((void *)this + 105) = v4;
  *((_OWORD *)this + 53) = 0u;
  float v8 = (SampleManager *)MIDISynth::SetCurrentBank(this, 0);
  if (atomic_fetch_add_explicit(SamplerBase::sInstanceCount, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    SampleManager::Destroy(v8);
    DLSBankManager::Destroy(v9);
  }
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((void **)this + 106));
  SamplerBase::~SamplerBase(this);
}

{
  uint64_t vars8;

  MIDISynth::~MIDISynth(this);

  JUMPOUT(0x21D497F90);
}

void sub_21BA81F60(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t MIDISynth::SetCurrentBank(MIDISynth *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  double v4 = (const void **)*((void *)this + 104);
  if (v4)
  {
    CFStringRef PathComponent = (__CFString *)CFURLCopyLastPathComponent((CFURLRef)v4);
    Instance = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)PathComponent);
    DLSBankManager::ReleaseBank(Instance, PathComponent);
    CFRelease(*((CFTypeRef *)this + 104));
    double v4 = Smart<__CFString const*>::~Smart((const void **)&PathComponent);
  }
  *((void *)this + 104) = cf;
  if (cf)
  {
    double v6 = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)v4);
    DLSBankManager::AddBank(v6, *((CFURLRef *)this + 104));
    if (*((unsigned char *)this + 17)) {
      MIDISynth::ConfigureInstruments(this);
    }
  }
  return 0;
}

uint64_t MIDISynth::ConfigureInstruments(MIDISynth *this)
{
  v5[4] = *MEMORY[0x263EF8340];
  (*(void (**)(MIDISynth *, uint64_t, void))(*(void *)this + 704))(this, 30976, 0);
  (*(void (**)(MIDISynth *, uint64_t, void))(*(void *)this + 704))(this, 30720, 0);
  v5[0] = &unk_26CBB2328;
  v5[3] = v5;
  SamplerBase::DoForGroupElements((MIDISynth *)((char *)this + 176), (uint64_t)v5);
  std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](v5);
  int v2 = 0;
  do
  {
    unsigned int v3 = v2;
    uint64_t result = (*(uint64_t (**)(MIDISynth *, void, uint64_t, void, void))(*(void *)this + 616))(this, v2++, 192, 0, 0);
  }
  while (v3 < 0xF);
  return result;
}

void sub_21BA821A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 376) = 1;
  return 0;
}

void std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CBB2328;
}

void *std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CBB2328;
  return result;
}

void std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
}

uint64_t MIDISynth::Configure(MIDISynth *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  SamplerBase::Configure(this);
  (*(void (**)(MIDISynth *, uint64_t, void))(*(void *)this + 704))(this, 9999, 0);
  if (!*((void *)this + 104) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    double v4 = "MidiSynth.cpp";
    __int16 v5 = 1024;
    int v6 = 228;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configure: No sound bank URL has been set", (uint8_t *)&v3, 0x12u);
  }
  return MIDISynth::ConfigureInstruments(this);
}

void MIDISynth::CleanupMemory(MIDISynth *this)
{
  AudioStreamer::Destroy(this);

  VoiceZone::ShutdownAllocationPool(v1);
}

uint64_t MIDISynth::GetInitializeNoteCount(MIDISynth *this)
{
  return 128;
}

void MIDISynth::InitializeMemory(MIDISynth *this)
{
  VoiceZone::InitializeAllocationPool((VoiceZone *)0x400);

  AudioStreamer::Initialize(v1);
}

void MIDISynth::GetLoadedInstrument(MIDISynth *this, int a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315906;
    float v8 = "MidiSynth.cpp";
    __int16 v9 = 1024;
    int v10 = 351;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::GetLoadedInstrument: bank 0x%x, patch %u", (uint8_t *)&v7, 0x1Eu);
  }
  int v6 = (MIDISynth *)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)this + 840, a2, a3);
  if ((MIDISynth *)((char *)this + 848) == v6)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315906;
      float v8 = "MidiSynth.cpp";
      __int16 v9 = 1024;
      int v10 = 358;
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = a3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIDISynth::GetLoadedInstrument: no instrument for bank 0x%x patch %d - returning silent instrument", (uint8_t *)&v7, 0x1Eu);
    }
    if (v6 == (MIDISynth *)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)this + 840, 0x270Fu, 0))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        float v8 = "MidiSynth.cpp";
        __int16 v9 = 1024;
        int v10 = 360;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: silent instrument missing from inst list", (uint8_t *)&v7, 0x12u);
      }
      __break(1u);
    }
  }
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 == a2;
    if (v7 >= a2) {
      char v9 = 1;
    }
    else {
      char v9 = -1;
    }
    if (v8)
    {
      unsigned int v10 = *(unsigned __int8 *)(v4 + 34);
      BOOL v11 = v10 == a3;
      char v9 = v10 >= a3 ? 1 : -1;
      if (v11) {
        char v9 = 0;
      }
    }
    BOOL v12 = (v9 & 0x80) == 0;
    if (v9 < 0) {
      __int16 v13 = (uint64_t *)(v4 + 8);
    }
    else {
      __int16 v13 = (uint64_t *)v4;
    }
    if (v12) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v13;
  }
  while (*v13);
  if (v3 == v6) {
    return v3;
  }
  unsigned int v14 = *(unsigned __int16 *)(v6 + 32);
  if (v14 <= a2) {
    char v15 = 1;
  }
  else {
    char v15 = -1;
  }
  if (v14 == a2)
  {
    unsigned int v16 = *(unsigned __int8 *)(v6 + 34);
    char v17 = -1;
    if (v16 <= a3) {
      char v17 = 1;
    }
    if (v16 == a3) {
      char v15 = 0;
    }
    else {
      char v15 = v17;
    }
  }
  if (v15 < 0) {
    return v3;
  }
  return v6;
}

void MIDISynth::PreloadInstrument(GlobalState **this, int a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315906;
    unsigned int v7 = "MidiSynth.cpp";
    __int16 v8 = 1024;
    int v9 = 324;
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::PreloadInstrument: bank 0x%x, patch %u", (uint8_t *)&v6, 0x1Eu);
  }
  if (this + 106 == (GlobalState **)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)(this + 105), a2, a3))
  {
    if (a2 == 9999 && !a3) {
      operator new();
    }
    if (this[104]) {
      GlobalState::CreateInstrument(this[92]);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      unsigned int v7 = "MidiSynth.cpp";
      __int16 v8 = 1024;
      int v9 = 338;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d PreloadInstrument failed -- no sound bank is loaded", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_21BA829F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    MEMORY[0x21D497F90](v2, 0x10E1C4007E2654BLL);
    __cxa_begin_catch(exception_object);
    SamplerState::Unref(0);
    __cxa_end_catch();
    JUMPOUT(0x21BA829BCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIDISynth::GetInstrumentCount(MIDISynth *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t MIDISynth::SetProperty(MIDISynth *this, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  v11[4] = *MEMORY[0x263EF8340];
  if (a2 == 4119)
  {
    if (!a3)
    {
      BOOL v10 = *a5 != 0;
      v11[0] = &unk_26CBB3288;
      v11[1] = &v10;
      v11[3] = v11;
      SamplerBase::DoForGroupElements((MIDISynth *)((char *)this + 176), (uint64_t)v11);
      std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](v11);
      return 0;
    }
    return 4294956430;
  }
  if (a2 != 1100)
  {
    return SamplerBase::SetProperty(this, a2, a3, a4, a5, a6);
  }
  if (a3) {
    return 4294956430;
  }
  if (!a5) {
    return 4294956445;
  }
  __int16 v8 = *(const void **)a5;
  uint64_t result = AccessURLAsset(*(const __CFURL **)a5);
  if (!result)
  {
    uint64_t result = MIDISynth::SetCurrentBank(this, v8);
    if (!result)
    {
      (*(void (**)(MIDISynth *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 1000, 0, a4);
      (*(void (**)(MIDISynth *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 1007, 0, a4);
      (*(void (**)(MIDISynth *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 1100, 0, a4);
      return 0;
    }
  }
  return result;
}

void sub_21BA82CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 377) = **(unsigned char **)(a1 + 8) != 0;
  return 0;
}

uint64_t std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CBB3288;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CBB3288;
  result[1] = v3;
  return result;
}

void std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::~__func()
{
}

CFIndex MIDISynth::GetProperty(MIDISynth *this, uint64_t a2, int a3, uint64_t a4, CFStringRef *a5)
{
  switch(a2)
  {
    case 0x3E8:
      if (a3) {
        return 4294956430;
      }
      CFURLRef v9 = (const __CFURL *)*((void *)this + 104);
      if (v9)
      {
        CFErrorRef error = 0;
        uint64_t v8 = CopyInstrumentInfoFromSoundBank(v9, &error);
        if (!v8)
        {
          *(_DWORD *)a5 = CFArrayGetCount(error);
          CFRelease(error);
        }
        return v8;
      }
      return 4294956427;
    case 0x3EF:
      if (a3) {
        return 4294956430;
      }
      CFURLRef v11 = (const __CFURL *)*((void *)this + 104);
      if (v11)
      {
        return CopyNameFromSoundBank(v11, a5);
      }
      return 4294956427;
    case 0x44C:
      if (!a3)
      {
        CFErrorRef error = 0;
        CFURLRef v6 = (const __CFURL *)*((void *)this + 104);
        if (v6)
        {
          CFURLRef v7 = CFURLCreateFilePathURL(0, v6, &error);
          if (!v7) {
            return CFErrorGetCode(error);
          }
        }
        else
        {
          CFURLRef v7 = 0;
        }
        uint64_t v8 = 0;
        *a5 = (CFStringRef)v7;
        return v8;
      }
      return 4294956430;
  }

  return SamplerBase::GetProperty(this, a2, a3, a4, a5);
}

uint64_t MIDISynth::GetPropertyInfo(MIDISynth *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  switch(a2)
  {
    case 4119:
      if (a3) {
        return 4294956430;
      }
      uint64_t result = 0;
      unsigned int v7 = 4;
LABEL_12:
      *a5 = v7;
      *a6 = 1;
      return result;
    case 1100:
      if (a3) {
        return 4294956430;
      }
      uint64_t result = 0;
      unsigned int v7 = 8;
      goto LABEL_12;
    case 1007:
      if (!a3)
      {
        uint64_t result = 0;
        *a5 = 8;
        *a6 = 0;
        return result;
      }
      return 4294956430;
  }
  return SamplerBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
}

void *MIDISynthFactory()
{
  uint64_t result = malloc_type_malloc(0x3A0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct(SamplerBase *a1, OpaqueAudioComponentInstance *a2)
{
}

uint64_t TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  int v6 = 0;
  CADeserializer::Read(this, a3);
  uint64_t result = CADeserializer::Read(this, &v6);
  *((_DWORD *)a3 + 1) = v6;
  return result;
}

uint64_t TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::SerializeT(int a1, CASerializer *this, void *a3)
{
  CASerializer::Write(this, a3);
  int v6 = *((_DWORD *)a3 + 1);
  return CASerializer::Write(this, &v6);
}

BOOL TMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);

  JUMPOUT(0x21D497F90);
}

uint64_t TPODMarshaller<audit_token_t>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

BOOL TMarshaller<audit_token_t>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

void AURemoteIOPropertyMarshaller::~AURemoteIOPropertyMarshaller(AURemoteIOPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);

  JUMPOUT(0x21D497F90);
}

void CompressorKernel::Reset(CompressorKernel *this)
{
  float v2 = *(float *)this;
  float v3 = powf(1.7782, 1.0 / (float)(*(float *)this * 0.02));
  float v4 = powf(1.7782, 1.0 / (float)(v2 * 0.1));
  float v5 = 1.0 - expf(-6.2832 / v2);
  float v6 = 1.0 - powf(0.1, 1.0 / (float)(v2 * 0.05));
  bzero((char *)this + 4, 0x40CuLL);
  *((_DWORD *)this + 260) = 1215954944;
  *(_OWORD *)((char *)this + 1044) = 0u;
  *((float *)this + 265) = v3;
  *((float *)this + 266) = v4;
  *((float *)this + 267) = v5;
  __asm { FMOV            V0.4S, #-1.0 }
  *((_OWORD *)this + 67) = _Q0;
  *((_OWORD *)this + 68) = xmmword_21BAB7050;
  *((_OWORD *)this + 69) = xmmword_21BAB7060;
  bzero((char *)this + 1120, 0x804uLL);
  *((float *)this + 793) = v6;
  *((unsigned char *)this + 3176) = 0;
}

void CompressorKernel::Process(CompressorKernel *this, float *a2, float *a3, int a4, float *a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float *a13, float *a14)
{
  if (*((float *)this + 271) != a6)
  {
    *((float *)this + 271) = a6;
    float v27 = __exp10f(a6 * 0.05);
    *((float *)this + 260) = (float)(v27 * v27) * 128.0;
  }
  if (*((float *)this + 272) != a8)
  {
    *((float *)this + 272) = a8;
    float v28 = __exp10f(a8 * 0.05);
    float v29 = (float)(v28 * v28) * 128.0;
    *((float *)this + 261) = v29;
    *((float *)this + 262) = v29 * 5.0;
  }
  float v30 = *(float *)this;
  if (*((float *)this + 268) == a10)
  {
    float v82 = *((float *)this + 273);
  }
  else
  {
    *((float *)this + 268) = a10;
    float v31 = 1.0 - pow(0.1, 1.0 / (float)(v30 * a10));
    float v82 = v31;
    *((float *)this + 273) = v31;
  }
  if (*((float *)this + 269) == a11)
  {
    float v80 = *((float *)this + 274);
  }
  else
  {
    *((float *)this + 269) = a11;
    float v32 = pow(1.7782, 1.0 / (float)(v30 * a11));
    float v80 = v32;
    *((float *)this + 274) = v32;
  }
  if (*((float *)this + 270) == a12)
  {
    float v33 = *((float *)this + 275);
  }
  else
  {
    *((float *)this + 270) = a12;
    float v33 = __exp10f(a12 * 0.05);
    *((float *)this + 275) = v33;
  }
  if (a4 >= 1)
  {
    double v81 = a8;
    double v34 = a7;
    double v83 = a6;
    int v35 = (char *)this + 1120;
    Float32 v36 = (char *)this + 4;
    int v37 = *((unsigned __int8 *)this + 3176);
    double v38 = *((double *)this + 129);
    double v39 = 20.0;
    double v84 = 1.57079633 / v34;
    unint64_t v40 = a13;
    do
    {
      if (a4 >= 0x40) {
        int v41 = 64;
      }
      else {
        int v41 = a4;
      }
      int v85 = a4;
      if (v37)
      {
        if (v38 <= *((float *)this + 262))
        {
          int v42 = 1;
        }
        else
        {
          int v42 = 0;
          *((_DWORD *)this + 276) = 1065353216;
          *((unsigned char *)this + 3176) = 0;
        }
      }
      else
      {
        int v42 = 0;
      }
      double v43 = sqrt(v38 * 0.0078125);
      if (v43 < 2.22507386e-308) {
        double v43 = 2.22507386e-308;
      }
      double v44 = log10(v43) * v39;
      if (v44 < -160.0) {
        double v44 = -160.0;
      }
      float v45 = *((float *)this + 278) + (v44 - *((float *)this + 278)) * 0.0199999996;
      *((float *)this + 278) = v45;
      double v46 = *((float *)this + 260);
      if (v38 <= v46)
      {
        double v54 = *((float *)this + 261);
        if (v38 < v54)
        {
          double v55 = sqrt(v38 / v54);
          if (v55 >= 0.00000199999995) {
            double v56 = v55;
          }
          else {
            double v56 = 0.00000199999995;
          }
          double v57 = 2.22507386e-308;
          if (v56 >= 2.22507386e-308) {
            double v57 = v56;
          }
          double v58 = log10(v57) * 20.0 * a9;
          if (v58 >= -140.0) {
            double v59 = v58;
          }
          else {
            double v59 = -140.0;
          }
          double v60 = __exp10(v59 * 0.05);
          double v61 = v59 + v81;
          if (v59 + v81 < -160.0) {
            double v61 = -160.0;
          }
          float v62 = *((float *)this + 279) + (v61 - *((float *)this + 279)) * 0.0199999996;
          *((float *)this + 279) = v62;
          float v53 = v60 / v56;
          *((unsigned char *)this + 3176) = 1;
          float v63 = *((float *)this + 276);
          if (v63 >= v53) {
            float v64 = *((float *)this + 793);
          }
          else {
            float v64 = *((float *)this + 266);
          }
          int v37 = 1;
          int v65 = v85;
          double v39 = 20.0;
          goto LABEL_57;
        }
        *((float *)this + 279) = v45;
        float v53 = 1.0;
        int v37 = v42;
      }
      else
      {
        double v47 = sqrt(v38 / v46);
        if (v47 < 0.00000999999975) {
          double v47 = 0.00000999999975;
        }
        if (v47 < 2.22507386e-308) {
          double v47 = 2.22507386e-308;
        }
        double v48 = log10(v47) * v39;
        double v49 = atan(v84 * v48) / v84;
        double v50 = v49 + v83;
        if (v49 + v83 < -160.0) {
          double v50 = -160.0;
        }
        float v51 = *((float *)this + 279) + (v50 - *((float *)this + 279)) * 0.0199999996;
        *((float *)this + 279) = v51;
        double v52 = __exp10((v49 - v48) * 0.05);
        int v37 = 0;
        float v53 = v52;
        *((unsigned char *)this + 3176) = 0;
      }
      float v63 = *((float *)this + 276);
      int v65 = v85;
      if (v53 <= v63)
      {
        float v64 = v82;
      }
      else if (*((double *)this + 129) <= *((float *)this + 263))
      {
        float v64 = v80;
      }
      else
      {
        float v64 = *((float *)this + 265);
      }
LABEL_57:
      a4 = v65 - v41;
      int v66 = *((_DWORD *)this + 792);
      double v67 = *((double *)this + 129);
      int v68 = *((_DWORD *)this + 257);
      float v69 = *((float *)this + 264);
      do
      {
        float v70 = *a2;
        if (a13)
        {
          float v71 = *a5++;
          float v72 = *(float *)&v35[8 * v66];
          uint64_t v73 = &v35[8 * v66];
          float v74 = *((float *)v73 + 1);
          *(float *)&v35[8 * v66] = v70;
          float v70 = (float)(v70 + v71) * 0.5;
          *((float *)v73 + 1) = v71;
        }
        else
        {
          float v72 = *(float *)&v35[4 * v66];
          *(float *)&v35[4 * v66] = v70;
          float v74 = 0.0;
        }
        float v75 = v70 * v70;
        float v76 = *(float *)&v36[4 * v68];
        *(float *)&v36[4 * v68] = v70 * v70;
        float v77 = *((float *)this + 267);
        float v78 = v64 * v63;
        if ((float)(v64 * v63) > 1.0) {
          float v78 = 1.0;
        }
        float v63 = v63 + (float)((float)(v53 - v63) * v64);
        if (v64 >= 1.0) {
          float v63 = v78;
        }
        *a3 = (float)(v33 * v72) * v63;
        if (a13) {
          *v40++ = (float)(v33 * v74) * v63;
        }
        ++a2;
        int v66 = (v66 + 1);
        double v67 = v67 + v75 - v76;
        int v68 = (v68 + 1);
        float v79 = v69 * v77;
        float v69 = v67 + v69 - v79;
        ++a3;
        --v41;
      }
      while (v41);
      *((_DWORD *)this + 792) = v66;
      if (v67 >= 0.0) {
        double v38 = v67;
      }
      else {
        double v38 = 0.0;
      }
      *((double *)this + 129) = v38;
      *((_DWORD *)this + 257) = v68;
      *((float *)this + 276) = v63;
      *((float *)this + 264) = v69;
      *((float *)this + 263) = v79;
      *((float *)this + 277) = *((float *)this + 277) + (float)((float)(v63 - *((float *)this + 277)) * 0.02);
    }
    while (a4 > 0);
  }
}

uint64_t AUScheduledSoundPlayer::Version(AUScheduledSoundPlayer *this)
{
  return 0x10000;
}

BOOL AUScheduledSoundPlayer::ValidFormat(AUScheduledSoundPlayer *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 129 >= 0xFFFFFF80 && (mChannelsPerFrame < 2 || (a4->mFormatFlags & 0x20) != 0);
  }
  return result;
}

uint64_t AUScheduledSoundPlayer::SupportedNumChannels(AUScheduledSoundPlayer *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 1;
}

uint64_t AUScheduledSoundPlayer::Render(AUScheduledSoundPlayer *this, const float *a2, int64_t a3, int a4)
{
  LODWORD(v5) = a4;
  vDSP_Length v8 = (vDSP_Length)this;
  uint64_t v132 = *MEMORY[0x263EF8340];
  CFURLRef v9 = (AUScheduledSoundPlayer *)((char *)this + 128);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  double v12 = *(double *)(ausdk::AUScope::SafeGetElement(v9, 0) + 80);
  vDSP_Length v126 = v8 + 528;
  __int16 v127 = 0;
  HIBYTE(v127) = (*(uint64_t (**)(vDSP_Length, __int16 *))(*(void *)(v8 + 528) + 32))(v8 + 528, &v127);
  if ((v127 & 0x100) != 0)
  {
    vDSP_Length v112 = v8;
    uint64_t v118 = BufferList;
    if (!*(unsigned char *)(v8 + 752)) {
      goto LABEL_7;
    }
    double v16 = *(double *)(v8 + 720);
    if (v16 >= 0.0) {
      goto LABEL_140;
    }
    LODWORD(v17) = *(_DWORD *)(v8 + 712);
    if (v17)
    {
      double v16 = *(double *)(v8 + 656);
      if (v16 < 0.0)
      {
        double v16 = *(double *)a3;
        *(_DWORD *)(v8 + 712) = v17 | 1;
        *(double *)(v8 + 656) = v16;
      }
      goto LABEL_139;
    }
    if ((v17 & 2) == 0 || (LODWORD(v4) = *(_DWORD *)(a3 + 56), (v4 & 2) == 0))
    {
LABEL_7:
      unsigned int v18 = 0;
      int v19 = 0;
      goto LABEL_8;
    }
LABEL_182:
    UInt64 v98 = *(void *)(v8 + 664);
    if (!v98)
    {
      double v16 = *(double *)a3;
LABEL_139:
      *(double *)(v8 + 720) = v16;
      goto LABEL_140;
    }
    UInt64 v99 = *(void *)(a3 + 8);
    uint64_t v100 = __udivti3();
    v13.n128_u64[0] = *(void *)(a3 + 16);
    if (v98 >= v99) {
      uint64_t v101 = v100;
    }
    else {
      uint64_t v101 = -v100;
    }
    if ((v4 & 4) == 0) {
      v13.n128_f64[0] = 1.0;
    }
    double v14 = *(double *)a3;
    double v16 = round(*(double *)a3 + (double)v101 * 0.000000001 * (v12 / v13.n128_f64[0]));
    if (v16 < *(double *)a3 + (double)v5)
    {
      vDSP_Length v8 = v112;
      *(double *)(v112 + 720) = v16;
      *(_DWORD *)(v112 + 712) = v17 | 1;
      *(double *)(v112 + 656) = v16;
LABEL_140:
      unsigned int v18 = 0;
      double v72 = *(double *)a3;
      double v12 = *(double *)a3 - v16;
      v13.n128_f64[0] = (double)v5;
      double v73 = v12 + (double)v5;
      *(double *)(v8 + 640) = v12;
      *(double *)(v8 + 648) = v12;
      uint64_t v17 = v8 + 616;
      uint64_t v122 = BufferList + 8;
      while (1)
      {
        AUScheduledSoundPlayer::InsertAddedSlices((AUScheduledSoundPlayer *)v8, v13, v72, v14, v15);
        double v124 = 0.0;
        double __Step = 0.0;
        NextReadSlice = (AudioTimeStamp *)AUScheduledSoundPlayer::GetNextReadSlice(0, (void *)v17, (ExtScheduledAudioSlice **)&__Step, v12, v73, &v124, v74);
        if (!NextReadSlice) {
          goto LABEL_194;
        }
        double v76 = v124;
        if (v124 <= __Step) {
          goto LABEL_194;
        }
        if (v12 > __Step || v124 > v73) {
          break;
        }
        uint64_t v115 = v17;
        if (v12 < __Step)
        {
          unsigned int v78 = (__Step - v12);
          if (*(int *)BufferList >= 1)
          {
            LODWORD(v4) = *(_DWORD *)BufferList + 1;
            uint64_t v79 = v122;
            do
            {
              bzero((void *)(*(void *)(v79 + 8) + 4 * *(_DWORD *)v79 * v18), 4 * *(_DWORD *)v79 * v78);
              LODWORD(v4) = v4 - 1;
              v79 += 16;
            }
            while (v4 > 1);
          }
          LODWORD(v5) = v5 - v78;
          v18 += v78;
          double v12 = v12 + (double)v78;
          *(double *)(v8 + 648) = *(double *)(v8 + 648) + (double)v78;
        }
        uint64_t v120 = (unsigned int *)a2;
        double v72 = (double)v5;
        if (v76 - v12 <= (double)v5) {
          double v80 = v76 - v12;
        }
        else {
          double v80 = (double)v5;
        }
        int mRateScalar_low = LODWORD(NextReadSlice[1].mRateScalar);
        double mSampleTime = NextReadSlice->mSampleTime;
        if ((mRateScalar_low & 2) == 0)
        {
          if (v12 <= mSampleTime) {
            int v83 = 2;
          }
          else {
            int v83 = 6;
          }
          mRateScalar_low |= v83;
          LODWORD(NextReadSlice[1].mRateScalar) = mRateScalar_low;
        }
        int v117 = v5;
        unsigned int v84 = v80;
        if ((NextReadSlice->mFlags & 1) != 0
          && mSampleTime <= v12
          && ((uint64_t v4 = *(unsigned int *)&NextReadSlice[1].mSMPTETime.mSubframes, (mRateScalar_low & 8) != 0)
           || (double v72 = (double)v4, mSampleTime + (double)v4 > v12)))
        {
          double v86 = v12;
          unsigned int v87 = v18;
          unsigned int v88 = v80;
          if (v84)
          {
            do
            {
              a3 = (int64_t)NextReadSlice;
              int BufferOffsetForTime = ExtScheduledAudioSlice::GetBufferOffsetForTime((ExtScheduledAudioSlice *)NextReadSlice, v86);
              uint64_t v90 = v4;
              if ((int)v4 - BufferOffsetForTime >= v88) {
                unsigned int v91 = v88;
              }
              else {
                unsigned int v91 = v4 - BufferOffsetForTime;
              }
              if (*(int *)BufferList >= 1)
              {
                int v92 = BufferOffsetForTime;
                unsigned int v93 = *(_DWORD *)BufferList + 1;
                uint64_t v94 = (uint64_t *)(*(void *)(a3 + 104) + 16);
                uint64_t v95 = v122;
                do
                {
                  uint64_t v96 = *v94;
                  v94 += 2;
                  memcpy((void *)(*(void *)(v95 + 8) + 4 * *(_DWORD *)v95 * v87), (const void *)(v96 + (4 * *(_DWORD *)v95 * v92)), 4 * *(_DWORD *)v95 * v91);
                  --v93;
                  v95 += 16;
                }
                while (v93 > 1);
              }
              v87 += v91;
              double v86 = v86 + (double)v91;
              v88 -= v91;
              uint64_t BufferList = v118;
              uint64_t v4 = v90;
              NextReadSlice = (AudioTimeStamp *)a3;
              unsigned int v84 = v80;
            }
            while (v88);
          }
        }
        else if (*(int *)BufferList >= 1)
        {
          unsigned int v85 = *(_DWORD *)BufferList + 1;
          uint64_t v4 = v122;
          do
          {
            bzero((void *)(*(void *)(v4 + 8) + 4 * *(_DWORD *)v4 * v18), 4 * *(_DWORD *)v4 * v84);
            --v85;
            v4 += 16;
          }
          while (v85 > 1);
        }
        v18 += v84;
        vDSP_Length v8 = v112;
        v13.n128_f64[0] = v80 + *(double *)(v112 + 648);
        *(void *)(v112 + 648) = v13.n128_u64[0];
        LODWORD(v5) = v117 - v84;
        if (v117 == v84)
        {
          a2 = (const float *)v120;
LABEL_194:
          int v19 = 1;
          goto LABEL_8;
        }
        double v12 = v12 + v80;
        a2 = (const float *)v120;
        uint64_t v17 = v115;
      }
      if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_181;
      }
      float __Start = 4.8151e-34;
      uint64_t v129 = "AUScheduledSoundPlayer.cpp";
      __int16 v130 = 1024;
      int v131 = 1476;
      long long v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(curRenderTime, sliceStartTime) && STIsLE(sliceEndTime, endRenderTime)) "
            "!= 0 is false]: ";
      goto LABEL_180;
    }
    unsigned int v18 = 0;
    int v19 = 0;
    vDSP_Length v8 = v112;
LABEL_8:
    if (v5)
    {
      if (*(int *)BufferList >= 1)
      {
        uint64_t v20 = BufferList + 8;
        unsigned int v21 = *(_DWORD *)BufferList + 1;
        do
        {
          bzero((void *)(*(void *)(v20 + 8) + 4 * *(_DWORD *)v20 * v18), (4 * *(_DWORD *)v20 * v5));
          --v21;
          v20 += 16;
        }
        while (v21 > 1);
      }
      if (!v18) {
        *(_DWORD *)a2 |= 0x10u;
      }
      if (v19) {
        *(double *)(v8 + 648) = *(double *)(v8 + 648) + (double)v5;
      }
      v18 += v5;
    }
    if (!v19) {
      goto LABEL_136;
    }
    if (*(double *)(v8 + 720) >= 0.0)
    {
      double v22 = *(double *)(v8 + 640);
      if (v22 >= 0.0)
      {
        if (v18)
        {
          uint64_t v23 = *(void *)(v8 + 736);
          uint64_t v24 = *(void *)(v8 + 728);
          if (v23 == v24) {
            goto LABEL_117;
          }
          uint64_t v25 = 0;
          unsigned int v26 = 0;
          double v27 = v22 + (double)v18;
          uint64_t v107 = BufferList + 8;
          a3 = 72;
LABEL_23:
          uint64_t v28 = v24 + 72 * v25;
          unsigned int v29 = *(_DWORD *)(v28 + 32);
          unint64_t v104 = (_DWORD *)(v28 + 32);
          if (!v29) {
            goto LABEL_116;
          }
          unsigned int v103 = v26;
          if (!*(_DWORD *)BufferList) {
            goto LABEL_115;
          }
          uint64_t v30 = v24 + 72 * v25;
          double v31 = *(double *)(v30 + 8);
          uint64_t v106 = (double *)(v30 + 8);
          double v32 = v31 >= v22 ? *(double *)(v30 + 8) : v22;
          double v33 = (double)v29;
          double v34 = v31 + (double)v29;
          double v35 = v27 >= v34 ? v34 : v27;
          if (v35 <= v32) {
            goto LABEL_115;
          }
          unsigned int v109 = 0;
          unsigned int v111 = (v35 - v32);
          uint64_t v36 = v24 + 72 * v25;
          uint64_t v102 = (double *)(v36 + 16);
          uint64_t v105 = (double *)(v36 + 24);
          uint64_t v121 = v25;
          uint64_t v108 = v24;
          while (1)
          {
            if (v32 >= v35) {
              goto LABEL_100;
            }
            uint64_t v37 = 0;
            uint64_t v17 = 0;
            char v38 = 1;
            double v12 = 0.0;
            double v39 = 0.0;
            do
            {
              LOBYTE(v4) = v38;
              uint64_t v40 = v24 + 72 * v121 + 16 * v37;
              uint64_t v41 = *(void *)(v40 + 48);
              if (v41)
              {
                double v42 = *(double *)(v41 + 32);
                double v33 = *(double *)(v41 + 40);
                if (v42 > v33)
                {
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    float __Start = 4.8151e-34;
                    uint64_t v129 = "AUScheduledSoundPlayer.cpp";
                    __int16 v130 = 1024;
                    int v131 = 457;
                    long long v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
                    goto LABEL_180;
                  }
                  goto LABEL_181;
                }
                BOOL v43 = v42 > v32 || v33 <= v32;
                if (!v43 || (v42 >= v32 ? (BOOL v44 = v42 < v35) : (BOOL v44 = 0), v44))
                {
                  if (v17)
                  {
                    if (v42 > v12)
                    {
                      if (v42 < v39) {
                        double v39 = *(double *)(v41 + 32);
                      }
                      goto LABEL_68;
                    }
                    if (v33 < v39) {
                      double v39 = *(double *)(v41 + 40);
                    }
                  }
                  else
                  {
                    if (v42 <= v32) {
                      double v12 = v32;
                    }
                    else {
                      double v12 = *(double *)(v41 + 32);
                    }
                    if (v33 >= v35) {
                      double v39 = v35;
                    }
                    else {
                      double v39 = *(double *)(v41 + 40);
                    }
                  }
                  uint64_t v17 = v40 + 40;
                }
                else if (v33 <= v32)
                {
                  AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v40 + 40);
                }
                else if (v42 >= v35)
                {
                  break;
                }
              }
              char v38 = 0;
              uint64_t v37 = 1;
            }
            while ((v4 & 1) != 0);
            if (!v17)
            {
              uint64_t v25 = v121;
              goto LABEL_100;
            }
LABEL_68:
            uint64_t v45 = *(void *)(v17 + 8);
            uint64_t v25 = v121;
            if (!v45) {
              goto LABEL_100;
            }
            if (v39 <= v12) {
              goto LABEL_100;
            }
            double v46 = *v106;
            if (v12 < *v106) {
              goto LABEL_100;
            }
            int v47 = 0;
            double v33 = *v102;
            double v48 = *v105;
            float v49 = *v105;
            *(float *)&double __Step = v49;
            if ((*(unsigned char *)(v45 + 56) & 1) != 0 && *(double *)v45 <= v12)
            {
              unsigned int v113 = *(_DWORD *)(v45 + 96);
              BOOL v50 = *(double *)v45 + (double)v113 <= v12 && (*(unsigned char *)(v45 + 80) & 8) == 0;
              int v47 = 0;
              if (!v50 && v111 != 0)
              {
                float v52 = v33 + (v12 - v46) * v48;
                unsigned int v119 = v109;
                LODWORD(v8) = v111;
                uint64_t v110 = v45;
                while (1)
                {
                  int v116 = v47;
                  unsigned int v53 = ExtScheduledAudioSlice::GetBufferOffsetForTime((ExtScheduledAudioSlice *)v45, v12);
                  int v114 = v8;
                  vDSP_Length v8 = v113 - v53 >= v8 ? v8 : v113 - v53;
                  if (!v8) {
                    break;
                  }
                  uint64_t BufferList = *(unsigned int *)BufferList;
                  if ((int)BufferList >= 1)
                  {
                    double v54 = (unsigned int *)(*(void *)(v45 + 104) + 8);
                    uint64_t v123 = v53;
                    LOBYTE(v4) = v119;
                    uint64_t v17 = v107;
                    do
                    {
                      a3 = *v54;
                      if (a3 != *(_DWORD *)v17)
                      {
                        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                        {
                          float __Start = 4.8151e-34;
                          uint64_t v129 = "AUScheduledSoundPlayer.cpp";
                          __int16 v130 = 1024;
                          int v131 = 226;
                          long long v97 = "%25s:%-5d ASSERTION FAILURE [(srcBuf->mNumberChannels == destBuf->mNumberChannels) != 0 is false]: ";
                          goto LABEL_180;
                        }
                        goto LABEL_181;
                      }
                      if (a3)
                      {
                        uint64_t v5 = 0;
                        unint64_t v55 = 0;
                        double v56 = (float *)(*(void *)(v17 + 8) + 4 * v119);
                        a2 = (const float *)(*((void *)v54 + 1) + 4 * v123);
                        do
                        {
                          float __Start = v52;
                          a2 += v5;
                          v56 += v5;
                          vDSP_vrampmul(a2, a3, &__Start, (const float *)&__Step, v56, a3, v8);
                          ++v55;
                          v5 += 4;
                        }
                        while (v55 < *(unsigned int *)v17);
                      }
                      v54 += 4;
                      v17 += 16;
                      BOOL v43 = (int)BufferList <= 1;
                      uint64_t BufferList = (BufferList - 1);
                    }
                    while (!v43);
                    float v49 = *(float *)&__Step;
                    uint64_t v24 = v108;
                    a3 = 72;
                    uint64_t v25 = v121;
                    uint64_t v45 = v110;
                  }
                  float v52 = v52 + (float)((float)v8 * v49);
                  v119 += v8;
                  double v12 = v12 + (double)v8;
                  int v47 = v8 + v116;
                  LODWORD(v8) = v114 - v8;
                  uint64_t BufferList = v118;
                  if (!v8) {
                    goto LABEL_97;
                  }
                }
                int v47 = v116;
              }
            }
LABEL_97:
            if (v111 == v47) {
              break;
            }
            v111 -= v47;
            v109 += v47;
            double v32 = v39;
            vDSP_Length v8 = v112;
          }
          double v32 = v39;
          vDSP_Length v8 = v112;
LABEL_100:
          LODWORD(v33) = *v104;
          if (*v106 + (double)*(unint64_t *)&v33 <= v32) {
            goto LABEL_114;
          }
          uint64_t v57 = 0;
          LODWORD(v17) = 0;
          while (1)
          {
            uint64_t v4 = v57;
            uint64_t v58 = v24 + 72 * v121 + 16 * v57;
            uint64_t v59 = *(void *)(v58 + 48);
            if (v59)
            {
              double v60 = *(double *)(v59 + 32);
              double v61 = *(double *)(v59 + 40);
              if (v60 > v61)
              {
                if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_181;
                }
                float __Start = 4.8151e-34;
                uint64_t v129 = "AUScheduledSoundPlayer.cpp";
                __int16 v130 = 1024;
                int v131 = 364;
                long long v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
LABEL_180:
                _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, v97, (uint8_t *)&__Start, 0x12u);
                goto LABEL_181;
              }
              if (v61 > v32)
              {
                uint64_t v57 = 1;
                BOOL v62 = v60 < v32 && v4 == 0;
                LODWORD(v17) = 1;
                if (!v62) {
                  goto LABEL_115;
                }
                continue;
              }
              AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v58 + 40);
            }
            uint64_t v57 = 1;
            if (v4)
            {
              uint64_t v25 = v121;
              if ((v17 & 1) == 0)
              {
LABEL_114:
                double *v106 = 0.0;
                _DWORD *v104 = 0;
                double *v105 = 0.0;
                AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v24 + 72 * v25 + 40);
                AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v24 + 72 * v25 + 56);
              }
LABEL_115:
              uint64_t v23 = *(void *)(v8 + 736);
              uint64_t v24 = *(void *)(v8 + 728);
              unsigned int v26 = v103;
LABEL_116:
              uint64_t v25 = ++v26;
              if (0x8E38E38E38E38E39 * ((v23 - v24) >> 3) <= v26)
              {
LABEL_117:
                AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents((AUScheduledSoundPlayer::SliceEventHandler *)(v8 + 728));
                break;
              }
              goto LABEL_23;
            }
          }
        }
      }
    }
    uint64_t v63 = *(void *)(v8 + 616);
    if (!v63) {
      goto LABEL_136;
    }
    uint64_t v4 = 0;
    double v12 = *(double *)(v8 + 648);
    uint64_t v17 = v8 + 616;
    while (1)
    {
      double v64 = *(double *)(v63 + 32);
      double v65 = *(double *)(v63 + 40);
      if (v64 > v65)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          float __Start = 4.8151e-34;
          uint64_t v129 = "AUScheduledSoundPlayer.cpp";
          __int16 v130 = 1024;
          int v131 = 1349;
          long long v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
          goto LABEL_180;
        }
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      uint64_t v66 = v63;
      uint64_t v63 = *(void *)(v63 + 88);
      if (v65 > v12)
      {
        uint64_t v4 = v66;
        if (v64 >= v12) {
          goto LABEL_136;
        }
        goto LABEL_130;
      }
      double v67 = (uint64_t *)(v8 + 616);
      if (v66 != *(void *)v17)
      {
        if (!v4) {
          goto LABEL_128;
        }
        double v67 = (uint64_t *)(v4 + 88);
      }
      uint64_t *v67 = v63;
LABEL_128:
      *(_DWORD *)(v66 + 80) |= 1u;
      int v68 = *(void (**)(void))(v66 + 64);
      if (v68) {
        v68(*(void *)(v66 + 72));
      }
LABEL_130:
      if (!v63) {
        goto LABEL_136;
      }
    }
  }
  if (*(int *)BufferList >= 1)
  {
    uint64_t v69 = BufferList + 8;
    unsigned int v70 = *(_DWORD *)BufferList + 1;
    do
    {
      bzero(*(void **)(v69 + 8), (4 * v5 * *(_DWORD *)v69));
      --v70;
      v69 += 16;
    }
    while (v70 > 1);
  }
  *(_DWORD *)a2 |= 0x10u;
LABEL_136:
  CADeprecated::CAMutex::Tryer::~Tryer((CADeprecated::CAMutex::Tryer *)&v126);
  return 0;
}

void sub_21BA84678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void AUScheduledSoundPlayer::InsertAddedSlices(AUScheduledSoundPlayer *this, __n128 a2, double a3, double a4, double a5)
{
  v119[1] = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v7 = *((void *)this + 78);
    if (!v7) {
      return;
    }
    uint64_t v8 = *((void *)this + 78);
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 78, (unint64_t *)&v8, 0);
  }
  while (v8 != v7);
  uint64_t v9 = v7;
  do
  {
    uint64_t v10 = v9;
    if ((*(unsigned char *)(v9 + 80) & 0x30) != 0 && (*(unsigned char *)(v9 + 56) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v9 + 88);
      *(void *)(v9 + 88) = 0;
      if (v11)
      {
        do
        {
          uint64_t v12 = *(void *)(v11 + 88);
          *(_DWORD *)(v11 + 80) |= 1u;
          __n128 v13 = *(void (**)(void))(v11 + 64);
          if (v13) {
            v13(*(void *)(v11 + 72));
          }
          uint64_t v11 = v12;
        }
        while (v12);
      }
    }
    uint64_t v9 = *(void *)(v10 + 88);
  }
  while (v9);
  uint64_t v14 = *((void *)this + 77);
  if (!v14) {
    goto LABEL_99;
  }
  int v15 = *(_DWORD *)(v10 + 80);
  if (v15 & 0x30) == 0 || (*(unsigned char *)(v10 + 56)) {
    goto LABEL_99;
  }
  if ((v15 & 0x20) != 0 && (*(unsigned char *)(v14 + 80) & 2) != 0)
  {
    uint64_t v44 = *(void *)(v14 + 88);
    *(void *)(v14 + 88) = 0;
    *((double *)this + 79) = ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(*((ExtScheduledAudioSlice **)this + 77), *((double *)this + 81));
    uint64_t v14 = v44;
    goto LABEL_95;
  }
  if ((v15 & 0x10) == 0)
  {
    *((void *)this + 77) = 0;
    *((void *)this + 79) = 0;
    goto LABEL_96;
  }
  double v16 = *((double *)this + 81);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  uint64_t v14 = *((void *)this + 77);
  if (v14)
  {
    int v19 = (int64x2_t *)((char *)this + 728);
    double v20 = *(double *)(Element + 80);
    uint64_t v110 = *((void *)this + 77);
    uint64_t v21 = *((void *)this + 92);
    uint64_t v22 = *((void *)this + 91);
    unint64_t v23 = (v21 - v22) / 72;
    if (v21 == v22)
    {
LABEL_27:
      if (v23 >= 2)
      {
        uint64_t v28 = (AUScheduledSoundPlayer::RampEvent *)(v21 - 72);
        uint64_t v29 = v21 - 72;
        do
        {
          AUScheduledSoundPlayer::RampEvent::~RampEvent(v28);
          *((void *)this + 92) = v30;
          unint64_t v31 = 0x8E38E38E38E38E39 * ((v29 - *((void *)this + 91)) >> 3);
          v29 -= 72;
          uint64_t v28 = (AUScheduledSoundPlayer::RampEvent *)(v30 - 72);
        }
        while (v31 > 1);
      }
      *(_DWORD *)AudioComponentDescription buf = 0;
      *(void *)&buf[16] = 0x3FF0000000000000;
      uint64_t v32 = 40;
      do
      {
        double v33 = &buf[v32];
        *double v33 = 0;
        *((void *)v33 + 1) = 0;
        v32 += 16;
      }
      while (v33 + 16 != (unsigned char *)v119);
      LODWORD(v116) = 0;
      *(void *)&buf[8] = 0;
      *(void *)&buf[24] = 0;
      uint64_t v34 = v117;
      if ((void)v117)
      {
        if (BYTE8(v116))
        {
          *(_DWORD *)(v117 + 80) |= 1u;
          double v35 = *(void (**)(void))(v34 + 64);
          if (v35) {
            v35(*(void *)(v34 + 72));
          }
        }
        BYTE8(v116) = 0;
        *(void *)&long long v117 = 0;
      }
      uint64_t v36 = v118;
      if (v118)
      {
        if (BYTE8(v117))
        {
          *(_DWORD *)(v118 + 80) |= 1u;
          uint64_t v37 = *(void (**)(void))(v36 + 64);
          if (v37) {
            v37(*(void *)(v36 + 72));
          }
        }
        BYTE8(v117) = 0;
        uint64_t v118 = 0;
      }
      unint64_t v38 = *((void *)this + 92);
      unint64_t v39 = *((void *)this + 93);
      if (v38 >= v39)
      {
        uint64_t v45 = v19->i64[0];
        unint64_t v46 = 0x8E38E38E38E38E39 * ((uint64_t)(v38 - v19->i64[0]) >> 3);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0x38E38E38E38E38ELL) {
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v39 - v45) >> 3) > v47) {
          unint64_t v47 = 0x1C71C71C71C71C72 * ((uint64_t)(v39 - v45) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v39 - v45) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v48 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v48 = v47;
        }
        int v114 = (char *)this + 744;
        if (v48)
        {
          if (v48 > 0x38E38E38E38E38ELL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v49 = (char *)operator new(72 * v48);
        }
        else
        {
          float v49 = 0;
        }
        float v51 = &v49[72 * v46];
        long long v52 = v117;
        *((_OWORD *)v51 + 2) = v116;
        *((_OWORD *)v51 + 3) = v52;
        *((void *)v51 + 8) = v118;
        long long v53 = *(_OWORD *)&buf[16];
        *(_OWORD *)float v51 = *(_OWORD *)buf;
        *((_OWORD *)v51 + 1) = v53;
        if (v38 == v45)
        {
          int64x2_t v58 = vdupq_n_s64(v38);
          double v54 = &v49[72 * v46];
        }
        else
        {
          double v54 = &v49[72 * v46];
          do
          {
            *(_OWORD *)(v54 - 72) = *(_OWORD *)(v38 - 72);
            long long v55 = *(_OWORD *)(v38 - 56);
            long long v56 = *(_OWORD *)(v38 - 40);
            long long v57 = *(_OWORD *)(v38 - 24);
            *((void *)v54 - 1) = *(void *)(v38 - 8);
            *(_OWORD *)(v54 - 24) = v57;
            *(_OWORD *)(v54 - 40) = v56;
            *(_OWORD *)(v54 - 56) = v55;
            v54 -= 72;
            v38 -= 72;
          }
          while (v38 != v45);
          int64x2_t v58 = *v19;
          unint64_t v39 = *((void *)this + 93);
        }
        unint64_t v43 = (unint64_t)(v51 + 72);
        *((void *)this + 91) = v54;
        *((void *)this + 92) = v51 + 72;
        int64x2_t v112 = v58;
        *((void *)this + 93) = &v49[72 * v48];
        unint64_t v113 = v39;
        double v111 = *(double *)v58.i64;
        std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer((uint64_t)&v111);
      }
      else
      {
        *(_OWORD *)unint64_t v38 = *(_OWORD *)buf;
        long long v40 = *(_OWORD *)&buf[16];
        long long v41 = v116;
        long long v42 = v117;
        *(void *)(v38 + 64) = v118;
        *(_OWORD *)(v38 + 32) = v41;
        *(_OWORD *)(v38 + 48) = v42;
        *(_OWORD *)(v38 + 16) = v40;
        unint64_t v43 = v38 + 72;
      }
      *((void *)this + 92) = v43;
      AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)buf);
      BOOL v50 = (char *)(*((void *)this + 92) - 72);
    }
    else
    {
      uint64_t v24 = 0;
      if (v23 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = (v21 - v22) / 72;
      }
      unsigned int v26 = (int *)(v22 + 32);
      while (1)
      {
        int v27 = *v26;
        v26 += 18;
        if (!v27) {
          break;
        }
        if (v25 == ++v24) {
          goto LABEL_27;
        }
      }
      BOOL v50 = (char *)(v22 + 72 * v24);
    }
    unsigned int v59 = vcvtpd_u64_f64(v20 * 20.0 / 1000.0);
    double v60 = v16 + (double)v59;
    if (v60 > v16)
    {
      unsigned int v61 = 0;
      double v5 = 1.79769313e308;
      while (1)
      {
        *(void *)AudioComponentDescription buf = 0;
        double v111 = 0.0;
        uint64_t NextReadSlice = AUScheduledSoundPlayer::GetNextReadSlice((AUScheduledSoundPlayer *)1, &v110, (ExtScheduledAudioSlice **)buf, v16, v60, &v111, v18);
        if (!NextReadSlice) {
          break;
        }
        double v16 = v111;
        double v63 = *(double *)buf;
        if (v111 <= *(double *)buf) {
          break;
        }
        uint64_t v64 = 0;
        char v65 = 1;
        while (1)
        {
          char v66 = v65;
          double v67 = &v50[16 * v64];
          if (!*((void *)v67 + 6)) {
            break;
          }
          char v65 = 0;
          uint64_t v64 = 1;
          if ((v66 & 1) == 0) {
            goto LABEL_79;
          }
        }
        v67[40] = 1;
        *((void *)v67 + 6) = NextReadSlice;
        if (v5 == 1.79769313e308) {
          double v5 = v63;
        }
        unsigned int v61 = (v16 - v63 + (double)v61);
        uint64_t v14 = *(void *)(NextReadSlice + 88);
        uint64_t v110 = v14;
        if (v16 >= v60 || v14 == 0) {
          goto LABEL_80;
        }
      }
LABEL_79:
      uint64_t v14 = v110;
LABEL_80:
      if (v61)
      {
        if (v61 >= v59) {
          unsigned int v69 = v59;
        }
        else {
          unsigned int v69 = v61;
        }
        if (*((_DWORD *)v50 + 8))
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioComponentDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "AUScheduledSoundPlayer.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 401;
            float v71 = "%25s:%-5d ASSERTION FAILURE [(!IsValid()) != 0 is false]: ";
            goto LABEL_190;
          }
          goto LABEL_201;
        }
        if (v5 >= 0.0 && v5 != 1.79769313e308) {
          goto LABEL_191;
        }
        if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_201;
        }
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "AUScheduledSoundPlayer.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 404;
        float v71 = "%25s:%-5d ASSERTION FAILURE [(STIsGE(startSampleTime, 0.) && !STIsUnspecified(startSampleTime)) != 0 is false]: ";
LABEL_190:
        while (1)
        {
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, v71, buf, 0x12u);
          __break(1u);
LABEL_191:
          if (v69) {
            break;
          }
          if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_201;
          }
          *(_DWORD *)AudioComponentDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "AUScheduledSoundPlayer.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 405;
          float v71 = "%25s:%-5d ASSERTION FAILURE [(numberOfFrames > 0) != 0 is false]: ";
        }
        *(_DWORD *)BOOL v50 = 0;
        *((_DWORD *)v50 + 8) = v69;
        double v109 = 1.0 / (double)(v69 + 1);
        *((double *)v50 + 1) = v5;
        *((double *)v50 + 2) = 1.0 - v109;
        *((double *)v50 + 3) = -v109;
        goto LABEL_94;
      }
    }
    *((void *)v50 + 1) = 0;
    *((_DWORD *)v50 + 8) = 0;
    *((void *)v50 + 3) = 0;
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)(v50 + 40));
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)(v50 + 56));
    AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents((AUScheduledSoundPlayer *)((char *)this + 728));
  }
  unsigned int v69 = 0;
LABEL_94:
  *((double *)this + 79) = *((double *)this + 81) + (double)v69;
  *((void *)this + 77) = 0;
LABEL_95:
  if (v14)
  {
    do
    {
LABEL_96:
      uint64_t v72 = *(void *)(v14 + 88);
      *(_DWORD *)(v14 + 80) |= 1u;
      double v73 = *(void (**)(void, uint64_t))(v14 + 64);
      if (v73) {
        v73(*(void *)(v14 + 72), v14);
      }
      uint64_t v14 = v72;
    }
    while (v72);
  }
LABEL_99:
  uint64_t v74 = 0;
  BOOL v50 = (char *)this + 616;
  do
  {
    uint64_t v75 = v74;
    uint64_t v74 = v7;
    uint64_t v7 = *(void *)(v7 + 88);
    *(void *)(v74 + 88) = v75;
  }
  while (v7);
  if (*((double *)this + 81) >= 0.0) {
    double v76 = *((double *)this + 81);
  }
  else {
    double v76 = 0.0;
  }
  uint64_t v7 = 0x7FEFFFFFFFFFFFFFLL;
  while (1)
  {
    uint64_t v14 = v74;
    uint64_t v74 = *(void *)(v74 + 88);
    a2.n128_u64[0] = *((void *)this + 79);
    if (v76 >= a2.n128_f64[0]) {
      a2.n128_f64[0] = v76;
    }
    uint64_t v77 = *((void *)this + 77);
    int v78 = *(_DWORD *)(v14 + 56);
    if (!v77) {
      break;
    }
    uint64_t v79 = 0;
    char v80 = 0;
    double v81 = (uint64_t *)((char *)this + 616);
    while (1)
    {
      float v82 = (ExtScheduledAudioSlice *)v77;
      if ((v78 & 1) != 0 && *(double *)v14 <= *(double *)v77) {
        break;
      }
      if ((*(unsigned char *)(v77 + 80) & 8) != 0) {
        v80 |= *(double *)(v77 + 40) == 1.79769313e308;
      }
      double v81 = (uint64_t *)(v77 + 88);
      uint64_t v77 = *(void *)(v77 + 88);
      uint64_t v79 = v82;
      if (!v77)
      {
        uint64_t v79 = v82;
        float v82 = 0;
        break;
      }
    }
    if ((v80 & 1) == 0 || ((*(_DWORD *)(v14 + 80) & 0x30) != 0) | *(_DWORD *)(v14 + 56) & 1) {
      goto LABEL_120;
    }
    *(_DWORD *)(v14 + 80) |= 1u;
    int v83 = *(void (**)(void, uint64_t, __n128))(v14 + 64);
    if (v83) {
      v83(*(void *)(v14 + 72), v14, a2);
    }
LABEL_186:
    if (!v74) {
      return;
    }
  }
  float v82 = 0;
  uint64_t v79 = 0;
  double v81 = (uint64_t *)((char *)this + 616);
LABEL_120:
  if ((v78 & 1) == 0) {
    ExtScheduledAudioSlice::SetAnchorSampleTime((ExtScheduledAudioSlice *)v14, a2.n128_f64[0]);
  }
  if (v79 && (*(unsigned char *)(v14 + 80) & 0x20) != 0)
  {
    double EndOfNextLoopSampleTime = ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(v79, *((double *)this + 81));
    if (EndOfNextLoopSampleTime < *(double *)v14) {
      double EndOfNextLoopSampleTime = *(double *)v14;
    }
    ExtScheduledAudioSlice::SetAnchorSampleTime((ExtScheduledAudioSlice *)v14, EndOfNextLoopSampleTime);
  }
  if (*(unsigned char *)(v14 + 56))
  {
    double v85 = *(double *)v14;
    double v86 = 1.79769313e308;
    double v87 = fmin(*(double *)v14, 1.79769313e308);
    *(double *)(v14 + 32) = v87;
    int v88 = *(_DWORD *)(v14 + 80);
    LODWORD(v87) = *(_DWORD *)(v14 + 96);
    double v89 = (double)*(unint64_t *)&v87;
    double v90 = v85 + v89;
    if (v90 < 1.79769313e308 && (*(_DWORD *)(v14 + 80) & 8) == 0) {
      double v86 = v90;
    }
    *(double *)(v14 + 40) = v86;
    int v92 = (double *)(v14 + 40);
    *(void *)(v14 + 88) = v82;
    *double v81 = v14;
    if (v90 > *((double *)this + 79)) {
      *((double *)this + 79) = v90;
    }
    uint64_t v93 = *(void *)(v14 + 88);
    if (v93)
    {
      if ((v88 & 0x30) != 0)
      {
        *(void *)(v14 + 88) = 0;
        do
        {
          uint64_t v94 = *(void *)(v93 + 88);
          *(_DWORD *)(v93 + 80) |= 1u;
          uint64_t v95 = *(void (**)(void))(v93 + 64);
          if (v95) {
            v95(*(void *)(v93 + 72));
          }
          uint64_t v93 = v94;
        }
        while (v94);
      }
      else if ((v88 & 8) != 0)
      {
        *(void *)(v14 + 88) = 0;
        while (1)
        {
          int v101 = *(_DWORD *)(v93 + 80);
          if ((v101 & 0x30) != 0) {
            break;
          }
          uint64_t v102 = *(void *)(v93 + 88);
          *(_DWORD *)(v93 + 80) = v101 | 1;
          unsigned int v103 = *(void (**)(void))(v93 + 64);
          if (v103) {
            v103(*(void *)(v93 + 72));
          }
          uint64_t v93 = v102;
          if (!v102) {
            goto LABEL_168;
          }
        }
        *(void *)(v14 + 88) = v93;
        double v97 = *(double *)(v93 + 32);
LABEL_158:
        if (*(double *)v14 >= v97) {
          double v97 = *(double *)v14;
        }
        if ((*(unsigned char *)(v14 + 80) & 8) == 0)
        {
          LODWORD(v89) = *(_DWORD *)(v14 + 96);
          double v104 = (double)*(unint64_t *)&v89;
          if (v97 >= *(double *)v14 + v104) {
            double v97 = *(double *)v14 + v104;
          }
        }
LABEL_167:
        *int v92 = fmin(v97, 1.79769313e308);
      }
      else
      {
        double v96 = *v92;
        do
        {
          double v97 = *(double *)(v93 + 32);
          if (v96 <= v97) {
            break;
          }
          int v98 = *(_DWORD *)(v93 + 80);
          if ((v98 & 0x30) != 0) {
            goto LABEL_158;
          }
          if (v96 < *(double *)(v93 + 40))
          {
            if (v96 > v97)
            {
              int v92 = (double *)(v93 + 32);
              double v97 = *(double *)v93;
              if (*(double *)v93 < v96) {
                double v97 = v96;
              }
              goto LABEL_167;
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioComponentDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "AUScheduledSoundPlayer.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 975;
              float v71 = "%25s:%-5d ASSERTION FAILURE [(STIsGT(inSliceEndSampleTime, sliceStartSampleTime)) != 0 is false]: ";
              goto LABEL_190;
            }
            goto LABEL_201;
          }
          uint64_t v99 = *(void *)(v93 + 88);
          *(void *)(v14 + 88) = v99;
          *(_DWORD *)(v93 + 80) = v98 | 1;
          uint64_t v100 = *(void (**)(void))(v93 + 64);
          if (v100) {
            v100(*(void *)(v93 + 72));
          }
          uint64_t v93 = v99;
        }
        while (v99);
      }
    }
LABEL_168:
    if ((*(unsigned char *)(v14 + 56) & 1) != 0 && (*(unsigned char *)(v14 + 80) & 0x38) != 0)
    {
      uint64_t v105 = *(void *)v50;
      if (*(void *)v50)
      {
        if (v105 != v14)
        {
          double v106 = *(double *)(v14 + 32);
          do
          {
            if (v106 < *(double *)(v105 + 40))
            {
              if (*(double *)v105 >= v106) {
                double v107 = *(double *)v105;
              }
              else {
                double v107 = v106;
              }
              if ((*(unsigned char *)(v105 + 80) & 8) == 0)
              {
                LODWORD(a5) = *(_DWORD *)(v105 + 96);
                a5 = (double)*(unint64_t *)&a5;
                if (v107 >= *(double *)v105 + a5) {
                  double v107 = *(double *)v105 + a5;
                }
              }
              *(double *)(v105 + 40) = fmin(v107, 1.79769313e308);
            }
            uint64_t v105 = *(void *)(v105 + 88);
            if (v105) {
              BOOL v108 = v105 == v14;
            }
            else {
              BOOL v108 = 1;
            }
          }
          while (!v108);
        }
      }
    }
    goto LABEL_186;
  }
  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUScheduledSoundPlayer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 64;
    float v71 = "%25s:%-5d ASSERTION FAILURE [(IsAnchorSampleTimeValid()) != 0 is false]: ";
    goto LABEL_190;
  }
LABEL_201:
  __break(1u);
}

void sub_21BA85154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t AUScheduledSoundPlayer::GetNextReadSlice(AUScheduledSoundPlayer *this, void *a2, ExtScheduledAudioSlice **a3, double a4, double a5, double *a6, double *a7)
{
  uint64_t v7 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  *a3 = 0;
  *a6 = 0.0;
  uint64_t v8 = *a2;
  if (a4 >= a5 || v8 == 0) {
    return v7;
  }
  char v15 = (char)this;
  uint64_t v16 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    double v17 = *(double *)(v8 + 32);
    double v18 = *(double *)(v8 + 40);
    if (v17 > v18)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        int v26 = 136315394;
        int v27 = "AUScheduledSoundPlayer.cpp";
        __int16 v28 = 1024;
        int v29 = 1265;
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ", (uint8_t *)&v26, 0x12u);
      }
      __break(1u);
    }
    uint64_t v19 = v8;
    uint64_t v8 = *(void *)(v8 + 88);
    if (v17 <= a4 && v18 > a4) {
      break;
    }
    if (v17 >= a4 && v17 < a5) {
      break;
    }
    if (v18 <= a4 && (v15 & 1) == 0)
    {
      uint64_t v22 = a2;
      if (v19 == *a2) {
        goto LABEL_21;
      }
      if (v16)
      {
        uint64_t v22 = (void *)(v16 + 88);
LABEL_21:
        *uint64_t v22 = v8;
      }
      *(_DWORD *)(v19 + 80) |= 1u;
      unint64_t v23 = *(void (**)(void))(v19 + 64);
      if (v23) {
        v23(*(void *)(v19 + 72));
      }
      uint64_t v19 = v16;
      goto LABEL_36;
    }
    if (v17 >= a5) {
      return v7;
    }
LABEL_36:
    uint64_t v16 = v19;
    if (!v8) {
      return v7;
    }
  }
  if (!v7)
  {
    if (v17 <= a4) {
      double v17 = a4;
    }
    *(double *)a3 = v17;
    if (v18 >= a5) {
      double v24 = a5;
    }
    else {
      double v24 = v18;
    }
    goto LABEL_35;
  }
  if (v17 <= *(double *)a3)
  {
    *a3 = *a3;
    double v24 = *a6;
    if (v18 < *a6) {
      double v24 = v18;
    }
LABEL_35:
    *a6 = v24;
    uint64_t v7 = v19;
    goto LABEL_36;
  }
  if (v17 >= *a6) {
    double v17 = *a6;
  }
  *a6 = v17;
  return v7;
}

void CADeprecated::CAMutex::Tryer::~Tryer(CADeprecated::CAMutex::Tryer *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents(AUScheduledSoundPlayer::SliceEventHandler *this)
{
  for (uint64_t i = *((void *)this + 1); i != *(void *)this && !*(_DWORD *)(i - 40); *((void *)this + 1) = i)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(i - 72));
}

uint64_t AUScheduledSoundPlayer::RampEvent::InvalidateSlice(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)result)
    {
      *(_DWORD *)(v1 + 80) |= 1u;
      float v3 = *(uint64_t (**)(void))(v1 + 64);
      if (v3) {
        BOOL result = v3(*(void *)(v1 + 72));
      }
    }
    *(unsigned char *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t ExtScheduledAudioSlice::GetBufferOffsetForTime(ExtScheduledAudioSlice *this, double a2)
{
  double v2 = *(double *)this;
  if ((*((unsigned char *)this + 80) & 8) != 0)
  {
    unsigned int v3 = *((_DWORD *)this + 24);
    if (v2 + (double)v3 <= a2) {
      double v2 = v2 + (double)((a2 - v2) / v3 * v3);
    }
  }
  return (a2 - v2);
}

void AUScheduledSoundPlayer::RampEvent::~RampEvent(AUScheduledSoundPlayer::RampEvent *this)
{
  uint64_t v2 = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)this + 16 * v2 + 40);
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
}

double ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(ExtScheduledAudioSlice *this, double a2)
{
  if ((*((unsigned char *)this + 80) & 8) == 0) {
    return *((double *)this + 5);
  }
  unsigned int v4 = *((_DWORD *)this + 24);
  double result = *(double *)this + (double)v4;
  if (result < a2) {
    return result + (double)(v4 + v4 * ((a2 - result) / v4));
  }
  return result;
}

void ExtScheduledAudioSlice::SetAnchorSampleTime(ExtScheduledAudioSlice *this, double a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  double v2 = 1.79769313e308;
  if (a2 < 0.0 || a2 > 1.79769313e308)
  {
    this = (ExtScheduledAudioSlice *)os_log_type_enabled(0, OS_LOG_TYPE_ERROR);
    if (this)
    {
      int v4 = 136315394;
      double v5 = "AUScheduledSoundPlayer.cpp";
      __int16 v6 = 1024;
      int v7 = 97;
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(STIsGE(inSampleTime, 0.) && STIsLE(inSampleTime, kUnspecifiedSampleTime)) != 0 is false]: ", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  *(double *)this = trunc(a2);
  *((_DWORD *)this + 14) = *((_DWORD *)this + 14) & 0xFFFFFFFE | (a2 != v2);
}

uint64_t std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AUScheduledSoundPlayer::SetProperty(AUScheduledSoundPlayer *this, int a2, unsigned int a3, unsigned int a4, _OWORD *a5, unsigned int a6)
{
  if (a2 == 3301)
  {
    if (a6 >= 0x40)
    {
      uint64_t v8 = 0;
      *((void *)this + 90) = 0xBFF0000000000000;
      long long v9 = *a5;
      long long v10 = a5[1];
      long long v11 = a5[3];
      *((_OWORD *)this + 43) = a5[2];
      *((_OWORD *)this + 44) = v11;
      *((_OWORD *)this + 41) = v9;
      *((_OWORD *)this + 42) = v10;
      *((unsigned char *)this + 752) = 1;
      return v8;
    }
    return 4294956445;
  }
  if (a2 != 3300) {
    return 4294956417;
  }
  if (a6 < 0x70) {
    return 4294956445;
  }
  do
  {
    uint64_t v6 = *((void *)this + 78);
    *((void *)a5 + 11) = v6;
    uint64_t v7 = v6;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 78, (unint64_t *)&v7, (unint64_t)a5);
  }
  while (v7 != v6);
  return 0;
}

uint64_t AUScheduledSoundPlayer::GetProperty(AUScheduledSoundPlayer *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 == 3302)
  {
    a5[14] = 1;
    double v10 = -1.0;
    if (*((double *)this + 90) >= 0.0) {
      double v10 = *((double *)this + 80);
    }
    uint64_t result = 0;
    *(double *)a5 = v10;
  }
  else if (a2 == 3301)
  {
    uint64_t result = 0;
    long long v7 = *((_OWORD *)this + 41);
    long long v8 = *((_OWORD *)this + 42);
    long long v9 = *((_OWORD *)this + 44);
    *((_OWORD *)a5 + 2) = *((_OWORD *)this + 43);
    *((_OWORD *)a5 + 3) = v9;
    *(_OWORD *)a5 = v7;
    *((_OWORD *)a5 + 1) = v8;
  }
  else
  {
    return 4294956417;
  }
  return result;
}

uint64_t AUScheduledSoundPlayer::GetPropertyInfo(AUScheduledSoundPlayer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if ((a2 - 3300) > 2) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a5 = dword_21BABD360[a2 - 3300];
  *a6 = 0x101u >> (8 * (a2 + 28));
  return result;
}

uint64_t AUScheduledSoundPlayer::Reset(AUScheduledSoundPlayer *this)
{
  long long v11 = (char *)this + 528;
  char v12 = (*(uint64_t (**)(char *))(*((void *)this + 66) + 16))((char *)this + 528);
  uint64_t v2 = *((void *)this + 92);
  uint64_t v3 = *((void *)this + 91);
  while (v2 != v3)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v2 - 72));
  *((void *)this + 92) = v3;
  uint64_t v4 = *((void *)this + 77);
  if (v4)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 88);
      *(_DWORD *)(v4 + 80) |= 1u;
      uint64_t v6 = *(void (**)(void))(v4 + 64);
      if (v6) {
        v6(*(void *)(v4 + 72));
      }
      uint64_t v4 = v5;
    }
    while (v5);
  }
  *((void *)this + 77) = 0;
  uint64_t v7 = *((void *)this + 78);
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = *(void *)(v7 + 88);
        *((void *)this + 78) = v8;
        *(_DWORD *)(v7 + 80) |= 1u;
        long long v9 = *(void (**)(void))(v7 + 64);
        if (!v9) {
          break;
        }
        v9(*(void *)(v7 + 72));
        uint64_t v7 = *((void *)this + 78);
        if (!v7) {
          goto LABEL_13;
        }
      }
      uint64_t v7 = v8;
    }
    while (v8);
  }
LABEL_13:
  *((unsigned char *)this + 752) = 0;
  *((void *)this + 90) = 0xBFF0000000000000;
  *((void *)this + 79) = 0;
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v11);
  return 0;
}

void sub_21BA85890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUScheduledSoundPlayer::Cleanup(AUScheduledSoundPlayer *this)
{
  return (*(uint64_t (**)(AUScheduledSoundPlayer *, void, void))(*(void *)this + 72))(this, 0, 0);
}

void AUScheduledSoundPlayer::~AUScheduledSoundPlayer(AUScheduledSoundPlayer *this)
{
  AUScheduledSoundPlayer::~AUScheduledSoundPlayer(this);

  JUMPOUT(0x21D497F90);
}

{
  AUScheduledSoundPlayer::SliceEventHandler *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26CBAE308;
  uint64_t v2 = (AUScheduledSoundPlayer *)((char *)this + 728);
  uint64_t v3 = *((void *)this + 92);
  uint64_t v4 = *((void *)this + 91);
  while (v3 != v4)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v3 - 72));
  *((void *)this + 92) = v4;
  AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(v2);
  MEMORY[0x21D497390]((char *)this + 528);

  ausdk::AUBase::~AUBase(this);
}

void AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(AUScheduledSoundPlayer::SliceEventHandler *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)this;
  while (v2 != v3)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v2 - 72));
  *((void *)this + 1) = v3;
  uint64_t v4 = (void **)this;
  std::vector<AUScheduledSoundPlayer::RampEvent>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<AUScheduledSoundPlayer::RampEvent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v4 - 72));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUScheduledSoundPlayer::AUScheduledSoundPlayer(AUScheduledSoundPlayer *this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v3 = ausdk::AUBase::AUBase(this, a2, 0, 1, 0);
  *(void *)uint64_t v3 = &unk_26CBAE308;
  MEMORY[0x21D497380]((char *)v3 + 528, "reset");
  *((void *)this + 79) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)this + 40) = _Q1;
  *((void *)this + 90) = 0xBFF0000000000000;
  *((void *)this + 91) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((void *)&v13 + 1) = (char *)this + 744;
  long long v9 = (char *)operator new(0x90uLL);
  *((void *)this + 91) = v9;
  *((void *)this + 92) = v9;
  *((void *)this + 93) = v9 + 144;
  *(void *)&long long v13 = 0;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer((uint64_t)&v11);
  *((unsigned char *)this + 752) = 0;
  ausdk::AUBase::CreateElements((uint64_t)this);
  uint64_t v11 = 0x40E5888000000000;
  long long v12 = xmmword_21BAB6C50;
  long long v13 = xmmword_21BAB6C60;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)Element + 56))(Element, &v11);
}

void sub_21BA85BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(v11);
  MEMORY[0x21D497390](v10);
  ausdk::AUBase::~AUBase(v9);
  _Unwind_Resume(a1);
}

uint64_t AUEffectWithCustomViewBase::SetProperty(AUEffectWithCustomViewBase *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a2 != 56 || a3)
  {
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v7 = *((void *)this + 1);
    uint64_t v12 = 0;
    long long v13 = &v12;
    uint64_t v14 = 0x2000000000;
    uint64_t v8 = (uint64_t (*)(uint64_t, int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
    char v15 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
    if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
    {
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 0x40000000;
      v11[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_5674;
      v11[3] = &unk_2643B9730;
      v11[4] = &v12;
      ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_5674((uint64_t)v11);
      uint64_t v8 = (uint64_t (*)(uint64_t, int *))v13[3];
    }
    _Block_object_dispose(&v12, 8);
    if (!v8)
    {
      dlerror();
      uint64_t v10 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v12, 8);
      _Unwind_Resume(v10);
    }
    return v8(v7, a5);
  }
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_5674(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_5679;
    v5[4] = &__block_descriptor_tmp_3_5680;
    void v5[5] = v5;
    long long v6 = xmmword_2643B9750;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_5679()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t AUEffectWithCustomViewBase::GetPropertyInfo(AUEffectWithCustomViewBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 56 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D)
    {
      return 4294956417;
    }
    else
    {
      uint64_t result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  else
  {
    uint64_t result = 0;
    *a5 = 8;
    *a6 = 1;
  }
  return result;
}

void AUEffectWithCustomViewBase::AUEffectWithCustomViewBase(AUEffectWithCustomViewBase *this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v2 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *((_WORD *)v2 + 276) = 0;
  *((void *)v2 + 68) = 0;
  *((_OWORD *)v2 + 33) = 0u;
  *((unsigned char *)v2 + 554) = 1;
  *((_DWORD *)v2 + 139) = 0;
  *((unsigned char *)v2 + 560) = 0;
  *((_DWORD *)v2 + 147) = 0;
  *(_OWORD *)((char *)v2 + 568) = 0u;
  *((unsigned char *)v2 + 584) = 0;
  *(void *)uint64_t v2 = &unk_26CBB32D0;
}

uint64_t AURoundTripAAC::Version(AURoundTripAAC *this)
{
  return 0x10000;
}

char *AURoundTripAAC::GetChannelLayoutTags@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 1) > 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -10866;
    __cxa_throw(exception, MEMORY[0x263F8C258], 0);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;

  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(a2, &kPCMLayoutTags, (uint64_t)overviewParameterIDs, 2uLL);
}

uint64_t AURoundTripAAC::RemoveAudioChannelLayout(AURoundTripAAC *this, int a2, int a3)
{
  if (a2 == 2)
  {
    uint64_t v3 = (AURoundTripAAC *)((char *)this + 536);
    if (a3) {
      return 4294956419;
    }
LABEL_6:
    CAAudioChannelLayout::Clear(v3);
    return 0;
  }
  if (a2 == 1)
  {
    uint64_t v3 = (AURoundTripAAC *)((char *)this + 528);
    if (a3) {
      return 4294956419;
    }
    goto LABEL_6;
  }
  return 4294956430;
}

uint64_t AURoundTripAAC::SetAudioChannelLayout(AURoundTripAAC *this, int a2, int a3, AudioChannelLayout *a4)
{
  if (a4)
  {
    if (a2 == 2)
    {
      long long v9 = (AURoundTripAAC *)((char *)this + 128);
    }
    else
    {
      if (a2 != 1) {
        return 4294956428;
      }
      long long v9 = (AURoundTripAAC *)((char *)this + 80);
    }
    int mChannelLayoutTag_low = LOWORD(a4->mChannelLayoutTag);
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v9, 0) + 108) == mChannelLayoutTag_low)
    {
      if (a2 == 2) {
        uint64_t v12 = (AURoundTripAAC *)((char *)this + 128);
      }
      else {
        uint64_t v12 = (AURoundTripAAC *)((char *)this + 80);
      }
      uint64_t Element = ausdk::AUScope::SafeGetElement(v12, 0);
      if (a3) {
        return 4294956419;
      }
      int v15 = *(_DWORD *)(Element + 108);
      if (v15 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v14)) {
        return 4294956445;
      }
      CAAudioChannelLayout::operator=();
      return 0;
    }
    return 4294956428;
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 544);

  return v10();
}

uint64_t AURoundTripAAC::GetAudioChannelLayout(AURoundTripAAC *this, int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  AURoundTripAAC::SetDefaultChannelLayoutsIfNone(this);
  *a5 = 1;
  if (a2 == 2)
  {
    uint64_t v11 = (char *)this + 536;
  }
  else
  {
    if (a2 != 1) {
      ausdk::Throw((ausdk *)0xFFFFD58ELL);
    }
    uint64_t v11 = (char *)this + 528;
  }
  if (a3) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  if (!*(void *)v11) {
    return 0;
  }
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(void *)v11 + 16), v10)) {
    return 0;
  }
  uint64_t v12 = *(void *)v11;
  if (!*(void *)v11) {
    return 0;
  }
  uint64_t v13 = *(unsigned int *)(v12 + 12);
  if (a4 && v13) {
    memcpy(a4, (const void *)(v12 + 16), *(unsigned int *)(v12 + 12));
  }
  return v13;
}

uint64_t AURoundTripAAC::SetDefaultChannelLayoutsIfNone(AURoundTripAAC *this)
{
  int v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
  if (*(_DWORD *)(*((void *)this + 66) + 16)) {
    BOOL v3 = (unsigned __int16)*(_DWORD *)(*((void *)this + 66) + 16) == v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3
    || (CAAudioChannelLayout::operator=(),
        uint64_t result = (*(uint64_t (**)(AURoundTripAAC *, uint64_t, void, uint64_t))(*(void *)this + 536))(this, 1, 0, *((void *)this + 66) + 16), !result))
  {
    uint64_t result = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
    if (*(_DWORD *)(*((void *)this + 67) + 16)) {
      BOOL v5 = (unsigned __int16)*(_DWORD *)(*((void *)this + 67) + 16) == *(_DWORD *)(result + 108);
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5)
    {
      CAAudioChannelLayout::operator=();
      return (*(uint64_t (**)(AURoundTripAAC *, uint64_t, void, uint64_t))(*(void *)this + 536))(this, 2, 0, *((void *)this + 67) + 16);
    }
  }
  return result;
}

uint64_t AURoundTripAAC::ChangeStreamFormat(AURoundTripAAC *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mChannelsPerFrame != a5->mChannelsPerFrame) {
    (*(void (**)(AURoundTripAAC *, uint64_t, uint64_t))(*(void *)this + 544))(this, a2, a3);
  }
  return 0;
}

BOOL AURoundTripAAC::ValidFormat(AURoundTripAAC *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  if (!mChannelsPerFrame
    || mChannelsPerFrame > (*(unsigned int (**)(AURoundTripAAC *, void))(*(void *)this + 376))(this, 0))
  {
    return 0;
  }
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, v6);
  if (result) {
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  return result;
}

uint64_t AURoundTripAAC::SupportedNumChannels(AURoundTripAAC *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 2;
}

BOOL AURoundTripAAC::StreamFormatWritable(AURoundTripAAC *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AURoundTripAAC::SupportsTail(AURoundTripAAC *this)
{
  return 1;
}

double AURoundTripAAC::GetTailTime(AURoundTripAAC *this)
{
  return 0.05;
}

double AURoundTripAAC::GetLatency(AURoundTripAAC *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
  LODWORD(v3) = *((_DWORD *)this + 156);
  return (double)v3 / *(double *)(Element + 80);
}

uint64_t AURoundTripAAC::NewFactoryPresetSet(AURoundTripAAC *this, const AUPreset *a2)
{
  uint64_t v3 = 0;
  SInt32 presetNumber = a2->presetNumber;
  for (char i = 1; ; char i = 0)
  {
    long long v6 = (const AUPreset *)&sPresets[4 * v3];
    if (presetNumber == v6->presetNumber) {
      break;
    }
    char v7 = i;
    uint64_t v3 = 1;
    if ((v7 & 1) == 0) {
      return 4294956445;
    }
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  AURoundTripAAC::SetParamsForPreset(this, presetNumber);
  return 0;
}

_DWORD *AURoundTripAAC::SetParamsForPreset(_DWORD *this, unsigned int a2)
{
  if (a2 <= 1)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    BOOL v5 = (char *)&presetParams + 12 * a2;
    do
    {
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void, void, void, float))(*(void *)v3 + 152))(v3, v4, 0, 0, 0, *(float *)&v5[4 * v4]);
      ++v4;
    }
    while (v4 != 3);
    v3[166] = a2;
  }
  return this;
}

uint64_t AURoundTripAAC::GetPresets(AURoundTripAAC *this, const __CFArray **a2)
{
  if (a2)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, sPresets);
    CFArrayAppendValue(Mutable, &dword_267C5FE58);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AURoundTripAAC::GetParameterValueStrings(AURoundTripAAC *this, int a2, int a3, const __CFArray **a4)
{
  if (a2) {
    return 4294956417;
  }
  switch(a3)
  {
    case 2:
      if (*((_DWORD *)this + 164) > 1u) {
        return 4294956417;
      }
      if (!a4) {
        return 0;
      }
      uint64_t v10 = &kRate_Names;
      CFIndex v9 = 17;
      break;
    case 1:
      if (!a4) {
        return 0;
      }
      uint64_t v10 = &kStrategy_Names;
      if (*((unsigned char *)this + 653)) {
        CFIndex v9 = 3;
      }
      else {
        CFIndex v9 = 1;
      }
      break;
    case 0:
      if (a4)
      {
        pthread_once(&gOnce, initHasHEv2);
        if (gHasHEv2 == 1)
        {
          int v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
          if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108) == 2
            && v7 == 2)
          {
            CFIndex v9 = 3;
          }
          else
          {
            CFIndex v9 = 2;
          }
        }
        else
        {
          CFIndex v9 = 2;
        }
        uint64_t v10 = &kType_Names;
        break;
      }
      return 0;
    default:
      return 4294956417;
  }
  CFArrayRef v11 = CFArrayCreate(0, (const void **)v10, v9, 0);
  uint64_t result = 0;
  *a4 = v11;
  return result;
}

void initHasHEv2(void)
{
  UInt32 outPropertyDataSize = 0;
  int inSpecifier = 1633772400;
  if (!AudioFormatGetPropertyInfo(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize) && outPropertyDataSize > 0xB)
  {
    int outPropertyData = 0;
    CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(&outPropertyData, outPropertyDataSize);
    uint64_t v0 = outPropertyData;
    if (AudioFormatGetProperty(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData)) {
      BOOL v1 = 0;
    }
    else {
      BOOL v1 = outPropertyDataSize > 0xB;
    }
    int v2 = v1;
    if (v0) {
      free(v0);
    }
    if (v2)
    {
      UInt32 outPropertyDataSize = 0;
      int inSpecifier = 1633772400;
      if (!AudioFormatGetPropertyInfo(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize) && outPropertyDataSize > 0xB)
      {
        int outPropertyData = 0;
        CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(&outPropertyData, outPropertyDataSize);
        uint64_t v3 = outPropertyData;
        if (AudioFormatGetProperty(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData)) {
          BOOL v4 = 0;
        }
        else {
          BOOL v4 = outPropertyDataSize > 0xB;
        }
        int v5 = v4;
        if (v3) {
          free(v3);
        }
        if (v5) {
          gHasHEint v2 = 1;
        }
      }
    }
  }
}

void sub_21BA86A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void *CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(void **a1, size_t size)
{
  BOOL v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t AURoundTripAAC::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"factoryPresetIndex");
    if (Value)
    {
      HIDWORD(valuePtr) = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      if (!AURoundTripAAC::MatchParamsForPreset((AURoundTripAAC *)this, HIDWORD(valuePtr)))
      {
LABEL_8:
        *((_DWORD *)this + 166) = -1;
        return 0;
      }
      uint64_t v6 = SHIDWORD(valuePtr);
      *((_DWORD *)this + 166) = HIDWORD(valuePtr);
      int v7 = (const AUPreset *)&sPresets[4 * v6];
    }
    else
    {
      uint64_t valuePtr = 0;
      int v11 = 0;
      (*((void (**)(OpaqueAudioComponentInstance **, void, void, void, char *))*this + 18))(this, 0, 0, 0, (char *)&valuePtr + 4);
      char v8 = 1;
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, uint64_t *))*this + 18))(this, 1, 0, 0, &valuePtr);
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, int *))*this + 18))(this, 2, 0, 0, &v11);
      unsigned int v9 = 0;
      while (1)
      {
        char v10 = v8;
        if (AURoundTripAAC::MatchParamsForPreset((AURoundTripAAC *)this, v9)) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 1;
        if ((v10 & 1) == 0) {
          goto LABEL_8;
        }
      }
      *((_DWORD *)this + 166) = v9;
      int v7 = (const AUPreset *)&sPresets[4 * v9];
    }
    ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v7);
    return 0;
  }
  return result;
}

BOOL AURoundTripAAC::MatchParamsForPreset(AURoundTripAAC *this, unsigned int a2)
{
  if (a2 > 1) {
    return 0;
  }
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  float v12 = 0.0;
  (*(void (**)(AURoundTripAAC *, void, void, void, float *))(*(void *)this + 144))(this, 0, 0, 0, &v12);
  v7.n128_f32[0] = v12;
  if (v12 != 0.0) {
    return 0;
  }
  char v8 = (char *)&presetParams + 12 * a2;
  uint64_t v9 = 1;
  unint64_t v10 = 2;
  while (v9 != 3)
  {
    float v12 = 0.0;
    (*(void (**)(AURoundTripAAC *, uint64_t, void, void, float *, __n128))(*(void *)this + 144))(this, v9, 0, 0, &v12, v7);
    v7.n128_f32[0] = v12;
    float v11 = *(float *)&v8[4 * v9++];
    if (v12 != v11)
    {
      unint64_t v10 = v9 - 2;
      return v10 > 1;
    }
  }
  return v10 > 1;
}

uint64_t AURoundTripAAC::SaveState(AURoundTripAAC *this, __CFDictionary **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  BOOL v4 = *a2;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 664);
  CFDictionarySetValue(v4, @"factoryPresetIndex", v5);
  CFRelease(v5);
  return 0;
}

uint64_t AURoundTripAAC::GetParameterInfo(AURoundTripAAC *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  if (a3 == 2)
  {
    int v11 = *((_DWORD *)this + 164);
    if (v11)
    {
      if (v11 == 2)
      {
        buffer->cfNameString = @"quality";
        buffer->AudioUnitParameterOptions flags = -939524096;
        CFStringGetCString(@"quality", buffer->name, 52, 0x8000100u);
        *(void *)&buffer->unit = 0x3F80000000000000;
        uint64_t v12 = 0x40C0000041200000;
        goto LABEL_22;
      }
      CFStringRef v13 = @"base bit rate";
    }
    else
    {
      CFStringRef v13 = @"bit rate";
    }
    buffer->cfNameString = v13;
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 1;
    uint64_t v12 = 0x4120000041800000;
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    buffer->cfNameString = @"encoding strategy";
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(@"encoding strategy", buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 1;
    BOOL v8 = *((unsigned char *)this + 653) == 0;
    float v9 = 2.0;
    float v10 = 0.0;
LABEL_15:
    if (!v8) {
      float v10 = v9;
    }
    uint64_t v12 = LODWORD(v10);
    goto LABEL_22;
  }
  if (a3) {
    return 4294956418;
  }
  buffer->cfNameString = @"type";
  buffer->AudioUnitParameterOptions flags = -939524096;
  CFStringGetCString(@"type", buffer->name, 52, 0x8000100u);
  *(void *)&buffer->unit = 1;
  pthread_once(&gOnce, initHasHEv2);
  if (gHasHEv2 == 1)
  {
    int v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
    BOOL v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108) == 2 && v7 == 2;
    float v9 = 1.0;
    float v10 = 2.0;
    goto LABEL_15;
  }
  uint64_t v12 = 1065353216;
LABEL_22:
  uint64_t result = 0;
  *(void *)&buffer->maxCFNumberRef Value = v12;
  buffer->flags += 285212672;
  return result;
}

uint64_t AURoundTripAAC::Render(AURoundTripAAC *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  int v7 = (AURoundTripAAC *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0);
  if (*((_DWORD *)this + 158)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = *((_DWORD *)this + 300) != 0;
  }
  uint64_t v10 = *(unsigned int *)(Element + 108);
  int v11 = *((_DWORD *)this + 169);
  if (v11 == *((_DWORD *)this + 170)
    || (*((_DWORD *)this + 170) = v11,
        (*(void (**)(AURoundTripAAC *))(*(void *)this + 64))(this),
        uint64_t v12 = (*(uint64_t (**)(AURoundTripAAC *))(*(void *)this + 56))(this),
        !v12))
  {
    unsigned int v69 = 0;
    CFStringRef v13 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v7, 0);
    uint64_t v12 = ausdk::AUInputElement::PullInput(v13, &v69, a3, 0, a4);
    if (!v12)
    {
      BOOL __n = v9;
      *((_DWORD *)this + 154) = a4;
      uint64_t v14 = ausdk::AUScope::SafeGetElement(v7, 0);
      uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
      uint64_t v15 = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
      uint64_t v16 = (_DWORD *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      uint64_t v63 = *((void *)this + 72);
      uint64_t v64 = *((void *)this + 73);
      __n_4 = (unsigned int *)(*((void *)this + 74) + 24);
      if (!*((_DWORD *)this + 302) && v10)
      {
        if (v10 == 2)
        {
          uint64_t v44 = ausdk::AUScope::SafeGetElement(v7, 0);
          uint64_t v45 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v44 + 144));
          TruePeak::Process((AURoundTripAAC *)((char *)this + 688), a4, *(const float **)(v45 + 16));
          uint64_t v46 = ausdk::AUScope::SafeGetElement(v7, 0);
          int v47 = *(_DWORD *)(v46 + 92);
          uint64_t v48 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v46 + 144));
          if ((v47 & 0x20) != 0) {
            float v49 = *(const float **)(v48 + 32);
          }
          else {
            float v49 = (const float *)(*(void *)(v48 + 16) + 4);
          }
          TruePeak::Process((AURoundTripAAC *)((char *)this + 816), a4, v49);
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = 16;
          uint64_t v53 = v10;
          do
          {
            uint64_t v54 = ausdk::AUScope::SafeGetElement(v7, 0);
            int v55 = *(_DWORD *)(v54 + 92);
            uint64_t v56 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v54 + 144));
            if ((v55 & 0x20) != 0) {
              long long v57 = *(const float **)(v56 + v52);
            }
            else {
              long long v57 = (const float *)(*(void *)(v56 + 16) + v51);
            }
            TruePeak::Process((AURoundTripAAC *)((char *)this + 688), a4, v57);
            v52 += 16;
            v51 += 4;
            --v53;
          }
          while (v53);
        }
      }
      double v17 = (unsigned int *)(v64 + 24);
      AppendBuffer((unsigned int *)(v64 + 24), BufferList, a4, *(_DWORD *)(*((void *)this + 73) + 16));
      AppendBuffer(__n_4, BufferList, a4, *(_DWORD *)(*((void *)this + 74) + 16));
      CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 72), *((_DWORD *)this + 151));
      UInt32 ioOutputDataPacketSize = a4;
      unsigned int v18 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 69), (AudioConverterComplexInputDataProc)AURoundTripAAC::sDecodeInputProc, this, &ioOutputDataPacketSize, (AudioBufferList *)(v63 + 24), 0);
      uint64_t v12 = v18 == 1735356005 ? 0 : v18;
      if (!v12)
      {
        int v19 = __n;
        if (!*((_DWORD *)this + 302) && v10)
        {
          if (v10 == 2)
          {
            TruePeak::Process((AURoundTripAAC *)((char *)this + 944), a4, *(const float **)(v63 + 40));
            TruePeak::Process((AURoundTripAAC *)((char *)this + 1072), a4, *(const float **)(v63 + 56));
          }
          else
          {
            int64x2_t v58 = (const float **)(v63 + 40);
            do
            {
              unsigned int v59 = *v58;
              v58 += 2;
              TruePeak::Process((AURoundTripAAC *)((char *)this + 944), a4, v59);
              --v10;
            }
            while (v10);
          }
        }
        if (__n && *((_DWORD *)this + 159) && !*((_DWORD *)this + 306))
        {
          if (a4 && *v16)
          {
            uint64_t v60 = 0;
            unint64_t v61 = 0;
            do
            {
              memcpy(*(void **)&v16[v60 + 4], *(const void **)(v64 + 40 + v60 * 4), (4 * a4));
              ++v61;
              v60 += 4;
            }
            while (v61 < *v16);
          }
          goto LABEL_77;
        }
        UInt32 v20 = ioOutputDataPacketSize;
        int v21 = *((unsigned __int8 *)this + 652);
        size_t v22 = 4 * (a4 - ioOutputDataPacketSize);
        LODWORD(v23) = *v16;
        if (a4 != ioOutputDataPacketSize && v23 != 0)
        {
          unint64_t v25 = 0;
          if (*((unsigned char *)this + 652)) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = 4 * ioOutputDataPacketSize;
          }
          uint64_t v27 = 4;
          do
          {
            bzero((void *)(*(void *)&v16[v27] + v26), v22);
            ++v25;
            unint64_t v23 = *v16;
            v27 += 4;
          }
          while (v25 < v23);
          UInt32 v20 = ioOutputDataPacketSize;
          int v19 = __n;
        }
        if (v20 && v23)
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          size_t v30 = 4 * v20;
          if (!v21) {
            size_t v22 = 0;
          }
          do
          {
            memcpy((void *)(*(void *)&v16[v28 + 4] + v22), *(const void **)(v63 + 40 + v28 * 4), v30);
            ++v29;
            unint64_t v23 = *v16;
            v28 += 4;
          }
          while (v29 < v23);
          int v19 = __n;
        }
        unsigned int v31 = *((_DWORD *)this + 306);
        if (v31)
        {
          double v32 = *((double *)this + 155);
        }
        else
        {
          if (*((_DWORD *)this + 159) == v19) {
            goto LABEL_77;
          }
          unsigned int v31 = *((_DWORD *)this + 303);
          *((_DWORD *)this + 306) = v31;
          double v32 = *((double *)this + 152);
          double v50 = 0.0;
          if (v19)
          {
            double v50 = 1.0;
            double v32 = -v32;
          }
          *((double *)this + 154) = v50;
          *((double *)this + 155) = v32;
          *((_DWORD *)this + 159) = v19;
          if (!v31) {
            goto LABEL_77;
          }
          LODWORD(v23) = *v16;
        }
        if (v31 >= a4) {
          uint64_t v33 = a4;
        }
        else {
          uint64_t v33 = v31;
        }
        if (v33)
        {
          double v34 = *((double *)this + 154);
          if (v23)
          {
            uint64_t v35 = 0;
            do
            {
              uint64_t v36 = *(float **)&v16[4 * v35 + 4];
              uint64_t v37 = *(float **)(v64 + 16 * v35 + 40);
              uint64_t v38 = v33;
              double v39 = v34;
              do
              {
                float v40 = *v37++;
                float v41 = v39;
                *uint64_t v36 = v40 + (float)(v41 * (float)(*v36 - v40));
                ++v36;
                double v39 = v32 + v39;
                --v38;
              }
              while (v38);
              ++v35;
            }
            while (v35 != v23);
          }
          *((double *)this + 154) = v34 + v32 * (double)v33;
          LODWORD(v23) = *v16;
        }
        if (v31 < a4 && v32 < 0.0 && v23)
        {
          uint64_t v42 = 0;
          unint64_t v43 = 0;
          do
          {
            memcpy((void *)(*(void *)&v16[v42 + 4] + (4 * v33)), (const void *)(*(void *)(v64 + 40 + v42 * 4) + (4 * v33)), (4 * (a4 - v33)));
            ++v43;
            v42 += 4;
          }
          while (v43 < *v16);
        }
        *((_DWORD *)this + 306) -= v33;
        double v17 = (unsigned int *)(v64 + 24);
LABEL_77:
        if (ioOutputDataPacketSize) {
          *((unsigned char *)this + 652) = 0;
        }
        ShiftBuffers(v17, a4);
      }
    }
  }
  return v12;
}

unsigned int *AppendBuffer(unsigned int *result, AudioBufferList *a2, int a3, unsigned int a4)
{
  if (a3)
  {
    BOOL v4 = result;
    unint64_t v5 = *result;
    if (v5)
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      size_t v9 = (4 * a3);
      p_mData = &a2->mBuffers[0].mData;
      do
      {
        int v11 = &v4[v7 / 4];
        uint64_t v12 = v4[v7 / 4 + 3];
        if ((int)v12 + (int)v9 <= a4)
        {
          uint64_t result = (unsigned int *)memcpy((void *)(*((void *)v11 + 2) + v12), p_mData[v7 / 8], v9);
          v11[3] += v9;
          unint64_t v5 = *v4;
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < v5);
    }
  }
  return result;
}

unsigned int *ShiftBuffers(unsigned int *result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (*result)
    {
      unint64_t v3 = 0;
      uint64_t v4 = (4 * a2);
      unint64_t v5 = result + 3;
      do
      {
        int v6 = *v5 - v4;
        uint64_t result = (unsigned int *)memmove(*(void **)(v5 + 1), (const void *)(*(void *)(v5 + 1) + v4), v6);
        *unint64_t v5 = v6;
        v5 += 4;
        ++v3;
      }
      while (v3 < *v2);
    }
  }
  return result;
}

uint64_t AURoundTripAAC::sDecodeInputProc(AURoundTripAAC *this, UInt32 *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, AURoundTripAAC *a6)
{
  uint64_t v10 = (AudioBufferList *)a5[71];
  UInt32 v11 = *((_DWORD *)a5 + 162);
  if (v11 >= *a2) {
    UInt32 v11 = *a2;
  }
  *a2 = v11;
  CADeprecated::CABufferList::SetNumBytes(v10, *((_DWORD *)a5 + 150));
  uint64_t result = AudioConverterFillComplexBuffer((AudioConverterRef)a5[68], (AudioConverterComplexInputDataProc)AURoundTripAAC::sEncodeInputProc, a5, a2, v10 + 1, a5[80]);
  if (*a2)
  {
    memcpy(a3 + 2, v10[1].mBuffers, 16 * v10[1].mNumberBuffers);
    uint64_t result = 0;
    *(void *)&a4->uint64_t mNumberBuffers = a5[80];
  }
  return result;
}

uint64_t AURoundTripAAC::sEncodeInputProc(AURoundTripAAC *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, AURoundTripAAC *a6)
{
  unint64_t v8 = a5[74];
  int v9 = HIDWORD(v8[2].mStartOffset) >> 2;
  int v10 = *((_DWORD *)a5 + 155);
  unsigned int v11 = v9 - v10;
  if (v9 == v10)
  {
    uint64_t result = 1735356005;
    *(_DWORD *)a2 = 0;
    uint64_t v13 = *a3;
    if (v13)
    {
      uint64_t v14 = a3 + 4;
      do
      {
        *(void *)uint64_t v14 = 0;
        *((void *)v14 - 1) = 1;
        v14 += 4;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    ShiftBuffers(&v8[1].mVariableFramesInPacket, v10);
    unsigned int v16 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 >= v11) {
      unsigned int v16 = v11;
    }
    *((_DWORD *)a5 + 155) = v16;
    uint64_t v17 = *a3;
    if (v17)
    {
      unsigned int v18 = a3 + 4;
      p_mVariableFramesInPacket = &v8[2].mVariableFramesInPacket;
      do
      {
        uint64_t v20 = *(void *)p_mVariableFramesInPacket;
        p_mVariableFramesInPacket += 4;
        *(void *)unsigned int v18 = v20;
        *(v18 - 2) = 1;
        *(v18 - 1) = 4 * v16;
        v18 += 4;
        --v17;
      }
      while (v17);
    }
    uint64_t result = 0;
    *(_DWORD *)a2 = v16;
  }
  return result;
}

uint64_t AURoundTripAAC::CanScheduleParameters(AURoundTripAAC *this)
{
  return 0;
}

uint64_t AURoundTripAAC::SetParameter(AURoundTripAAC *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unsigned int v6 = a4;
  unsigned int v7 = a3;
  unsigned int v8 = a2;
  float v17 = a5;
  (*(void (**)(AURoundTripAAC *, uint64_t, uint64_t, uint64_t, float *))(*(void *)this + 144))(this, a2, a3, a4, &v17);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
  ausdk::AUElement::SetParameter(Element, v8, a5, 0);
  if (v17 != a5)
  {
    if (v8 == 1)
    {
      *((unsigned char *)this + 660) = 1;
      *((_DWORD *)this + 164) = a5;
      if (a5 == 2.0)
      {
        float v14 = *((float *)this + 167);
LABEL_12:
        uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v15, 2u, v14, 0);
LABEL_13:
        ++*((_DWORD *)this + 169);
        return 0;
      }
    }
    else
    {
      if (v8) {
        goto LABEL_13;
      }
      if (a5 == 0.0 || *((unsigned char *)this + 653))
      {
        *((unsigned char *)this + 653) = a5 == 0.0;
        *((unsigned char *)this + 660) = 1;
      }
      if (a5 == 0.0) {
        goto LABEL_13;
      }
      uint64_t v12 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
      uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v12, v6);
      ausdk::AUElement::SetParameter(v13, 1u, 0.0, 0);
      *((unsigned char *)this + 660) = 1;
      *((_DWORD *)this + 164) = 0;
    }
    float v14 = (float)*((unsigned int *)this + 168);
    goto LABEL_12;
  }
  return 0;
}

uint64_t AURoundTripAAC::SetProperty(AURoundTripAAC *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 5300)
  {
    if (a2 == 21)
    {
      if (a6 == 4)
      {
        uint64_t result = 0;
        *((_DWORD *)this + 158) = *a5 != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 37) {
        return result;
      }
      if (a6 == 4)
      {
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 688));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 816));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 944));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 1072));
        uint64_t result = 0;
        __dmb(0xBu);
        *((_DWORD *)this + 302) = *a5 != 0;
        return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 5301:
        if (a6 == 4)
        {
          uint64_t result = 0;
          *((_DWORD *)this + 300) = *a5 != 0;
          return result;
        }
        break;
      case 5303:
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 688));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 816));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 944));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 1072));
        return 0;
      case 5304:
        if (a6 == 4)
        {
          uint64_t result = 0;
          *((_DWORD *)this + 301) = *a5;
          return result;
        }
        break;
      default:
        return result;
    }
  }
  return 4294956445;
}

uint64_t AURoundTripAAC::GetProperty(AURoundTripAAC *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v6 = a5;
  uint64_t result = 4294956417;
  if (a2 <= 5300)
  {
    switch(a2)
    {
      case 21:
        uint64_t result = 0;
        int v11 = *((_DWORD *)this + 158);
        break;
      case 37:
        uint64_t result = 0;
        int v11 = *((_DWORD *)this + 302);
        break;
      case 57:
        uint64_t v8 = 0;
        uint64_t v9 = *((void *)this + 1);
        do
        {
          int v10 = overviewParameterIDs[v8];
          *(void *)unsigned int v6 = v9;
          v6[3] = 0;
          v6[4] = 0;
          v6[2] = v10;
          ++v8;
          v6 += 6;
        }
        while (v8 != 3);
        return 0;
      default:
        return result;
    }
LABEL_17:
    *a5 = v11;
    return result;
  }
  if (a2 == 5301)
  {
    uint64_t result = 0;
    int v11 = *((_DWORD *)this + 300);
    goto LABEL_17;
  }
  if (a2 != 5302)
  {
    if (a2 != 5304) {
      return result;
    }
    uint64_t result = 0;
    int v11 = *((_DWORD *)this + 301);
    goto LABEL_17;
  }
  TruePeak::GetStats();
  TruePeak::GetStats();
  TruePeak::GetStats();
  TruePeak::GetStats();
  return 0;
}

uint64_t AURoundTripAAC::GetPropertyInfo(AURoundTripAAC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v7 = 4;
  BOOL v8 = 1;
  uint64_t result = 4294956417;
  if (a2 <= 5300)
  {
    if (a2 != 21 && a2 != 37)
    {
      if (a2 != 57) {
        return result;
      }
      BOOL v8 = 0;
      unsigned int v7 = 72;
    }
LABEL_11:
    uint64_t result = 0;
    *a6 = v8;
    *a5 = v7;
  }
  else
  {
    switch(a2)
    {
      case 5301:
      case 5303:
        goto LABEL_11;
      case 5302:
        BOOL v8 = 0;
        unsigned int v7 = 96;
        goto LABEL_11;
      case 5304:
        BOOL v8 = 0;
        goto LABEL_11;
      default:
        return result;
    }
  }
  return result;
}

uint64_t AURoundTripAAC::Reset(AURoundTripAAC *this)
{
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 688));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 816));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 944));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 1072));
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 68);
  if (v2) {
    AudioConverterReset(v2);
  }
  unint64_t v3 = (OpaqueAudioConverter *)*((void *)this + 69);
  if (v3) {
    AudioConverterReset(v3);
  }
  BOOL v4 = 1;
  *((unsigned char *)this + 652) = 1;
  if (!*((_DWORD *)this + 158)) {
    BOOL v4 = *((_DWORD *)this + 300) != 0;
  }
  *((_DWORD *)this + 159) = v4;
  *((_DWORD *)this + 155) = 0;
  unint64_t v5 = (_DWORD *)*((void *)this + 73);
  if (v5) {
    CADeprecated::CABufferList::SetNumBytes(v5, 4 * *((_DWORD *)this + 156));
  }
  unsigned int v6 = (_DWORD *)*((void *)this + 74);
  if (v6) {
    CADeprecated::CABufferList::SetNumBytes(v6, 4 * *((_DWORD *)this + 157));
  }
  return 0;
}

void AURoundTripAAC::Cleanup(AURoundTripAAC *this)
{
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 68);
  if (v2) {
    AudioConverterDispose(v2);
  }
  unint64_t v3 = (OpaqueAudioConverter *)*((void *)this + 69);
  if (v3) {
    AudioConverterDispose(v3);
  }
  *((void *)this + 68) = 0;
  *((void *)this + 69) = 0;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 71, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 73, 0);

  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 74, 0);
}

uint64_t AURoundTripAAC::Initialize(AURoundTripAAC *this)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  unint64_t v3 = (AURoundTripAAC *)((char *)this + 80);
  int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
  if (v4 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108))
  {
    UInt32 ioPropertyDataSize = 0;
    int v92 = v3;
    uint64_t Element = ausdk::AUScope::SafeGetElement(v3, 0);
    long long v6 = *(_OWORD *)(Element + 96);
    *(_OWORD *)&inSourceFormat.double mSampleRate = *(_OWORD *)(Element + 80);
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v6;
    *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(Element + 112);
    unsigned int v7 = vcvtpd_u64_f64(inSourceFormat.mSampleRate * 0.2);
    *((_DWORD *)this + 303) = v7;
    *((double *)this + 152) = 1.0 / (double)v7;
    *((_DWORD *)this + 306) = 0;
    float v99 = 0.0;
    (*(void (**)(AURoundTripAAC *, void, void, void, float *))(*(void *)this + 144))(this, 0, 0, 0, &v99);
    *((_DWORD *)this + 140) = v99;
    pthread_once(&gOnce, initHasHEv2);
    if ((gHasHEv2 & 1) == 0 && *((_DWORD *)this + 140) == 2) {
      *((_DWORD *)this + 140) = 1;
    }
    unsigned int v8 = 0;
    do
    {
      char v9 = v8 | AURoundTripAAC::MatchParamsForPreset(this, v8);
      unsigned int v8 = 1;
    }
    while ((v9 & 1) == 0);
    int v98 = 1650553971;
    int v97 = 127;
    uint64_t v93 = (AudioConverterRef *)((char *)this + 552);
    inDestinationFormat.double mSampleRate = fmin(inSourceFormat.mSampleRate, 48000.0);
    inDestinationFormat.mBytesPerFrame = 0;
    inDestinationFormat.UInt32 mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
    *(_OWORD *)&inDestinationFormat.mFormatID = xmmword_21BAB7070;
    *(void *)&inDestinationFormat.mBitsPerChannel = 0;
    while (1)
    {
      AudioConverterRef outAudioConverter = 0;
      uint64_t v10 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
      uint64_t v11 = v10;
      if (!v10) {
        break;
      }
      UInt32 mChannelsPerFrame = inDestinationFormat.mChannelsPerFrame;
      if (inDestinationFormat.mChannelsPerFrame < 3) {
        break;
      }
      if (mChannelsPerFrame >= (*(unsigned int (**)(AURoundTripAAC *, void))(*(void *)this + 376))(this, 0))return v11; {
      AudioConverterDispose(*((AudioConverterRef *)this + 68));
      }
      ++inDestinationFormat.mChannelsPerFrame;
      int v13 = 2;
LABEL_122:
      if (v13 != 2) {
        return v1;
      }
    }
    if (v10) {
      return v11;
    }
    float v14 = outAudioConverter;
    *((void *)this + 68) = outAudioConverter;
    int inPropertyData = 127;
    UInt32 ioPropertyDataSize = 4;
    AudioConverterSetProperty(v14, 0x63647175u, 4u, &inPropertyData);
    *(float *)&UInt32 outPropertyDataSize = 0.0;
    (*(void (**)(AURoundTripAAC *, uint64_t, void, void, UInt32 *))(*(void *)this + 144))(this, 1, 0, 0, &outPropertyDataSize);
    unsigned int inSpecifier = (float)(*(float *)&outPropertyDataSize + 1.0);
    LODWORD(outSize) = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x61636266u, 4u, &inSpecifier);
    if (*((_DWORD *)this + 164) == 2)
    {
      outPropertyData[0] = 1086324736;
      (*(void (**)(AURoundTripAAC *, uint64_t, void, void, _DWORD *))(*(void *)this + 144))(this, 2, 0, 0, outPropertyData);
      unsigned int v104 = (float)((float)((float)(*(float *)outPropertyData + -1.0) / 9.0) * 127.0);
      AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x76627271u, 4u, &v104);
    }
    else
    {
      *(float *)&unsigned int v104 = 10.0;
      (*(void (**)(AURoundTripAAC *, uint64_t, void, void, unsigned int *))(*(void *)this + 144))(this, 2, 0, 0, &v104);
      int v15 = kCodecBitRates[*(float *)&v104];
      *(_DWORD *)unsigned int v103 = v15;
      Boolean outWritable = 0;
      if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x61656272u, (UInt32 *)&outSize, &outWritable))
      {
        size_t v16 = outSize & 0xFFFFFFF0;
        BOOL v17 = outSize > 0xF;
        unsigned int v18 = (double *)malloc_type_malloc(v16, 0x2C8E6D5CuLL);
        int v19 = v18;
        char v20 = !v17;
        if (v18) {
          char v20 = 1;
        }
        if ((v20 & 1) == 0)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          char v80 = std::bad_alloc::bad_alloc(exception);
        }
        bzero(v18, v16);
        AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61656272u, (UInt32 *)&outSize, v19);
        uint64_t v22 = 0;
        int v23 = 0;
        unsigned int v24 = outSize;
        unint64_t v25 = (unint64_t)outSize >> 4;
        do
        {
          if (v24 >= 0x10)
          {
            LODWORD(v21) = kCodecBitRates[v22];
            double v21 = (double)*(unint64_t *)&v21;
            uint64_t v26 = v19 + 1;
            unint64_t v27 = v25;
            while (*(v26 - 1) > v21 || *v26 < v21)
            {
              v26 += 2;
              if (!--v27) {
                goto LABEL_27;
              }
            }
            outPropertyData[v23++] = v22;
          }
LABEL_27:
          ++v22;
        }
        while (v22 != 17);
        if (v23)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          int v30 = 0x7FFFFFFF;
          do
          {
            int v31 = kCodecBitRates[outPropertyData[v28]] - v15;
            if (v31 < 0) {
              int v31 = v15 - kCodecBitRates[outPropertyData[v28]];
            }
            if (v31 < v30)
            {
              int v30 = v31;
              uint64_t v29 = v28;
            }
            ++v28;
          }
          while (v23 != v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v32 = outPropertyData[v29];
        *(_DWORD *)unsigned int v103 = kCodecBitRates[v32];
        LODWORD(outSize) = 4;
        if (!AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x62726174u, 4u, v103))
        {
          uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v33, 2u, (float)v32, 0);
        }
        if (v19) {
          free(v19);
        }
      }
    }
    UInt32 ioPropertyDataSize = 40;
    AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61636F64u, &ioPropertyDataSize, &inDestinationFormat);
    unsigned int v104 = 2;
    UInt32 ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x7067636Du, 4u, &v104);
    uint64_t Property = AudioConverterNew(&inDestinationFormat, &inSourceFormat, v93);
    if (Property) {
      goto LABEL_120;
    }
    UInt32 ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x73726361u, 4u, &v98);
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x73726361u, ioPropertyDataSize, &v98);
    UInt32 ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x73726371u, 4u, &v97);
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x73726371u, ioPropertyDataSize, &v97);
    UInt32 v35 = inDestinationFormat.mChannelsPerFrame;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v92, 0) + 108) >= 3u)
    {
      *(float *)&UInt32 outPropertyDataSize = 0.0;
      v103[0] = 0;
      OSStatus PropertyInfo = AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x6165636Cu, &outPropertyDataSize, v103);
      if (!PropertyInfo)
      {
        UInt32 v37 = outPropertyDataSize;
        BOOL v38 = outPropertyDataSize > 3;
        double v39 = (char *)malloc_type_malloc(outPropertyDataSize & 0xFFFFFFFC, 0x7C51E058uLL);
        char v40 = !v38;
        if (v39) {
          char v40 = 1;
        }
        if ((v40 & 1) == 0)
        {
          double v85 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          double v86 = std::bad_alloc::bad_alloc(v85);
        }
        OSStatus PropertyInfo = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x6165636Cu, &outPropertyDataSize, v39);
        if (!PropertyInfo)
        {
          AURoundTripAAC::SetDefaultChannelLayoutsIfNone(this);
          unsigned int inSpecifier = *(_DWORD *)(*((void *)this + 66) + 16);
          int v41 = *(_DWORD *)(*((void *)this + 67) + 16);
          OSStatus PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize);
          if (!PropertyInfo)
          {
            CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(&outSize, outPropertyDataSize);
            OSStatus PropertyInfo = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize, outSize);
            if (!PropertyInfo)
            {
              if (v37 < 4) {
                goto LABEL_78;
              }
              int v89 = v41;
              unsigned int v90 = 0;
              uint64_t v42 = 0;
              LODWORD(v43) = v37 >> 2;
              int v44 = 0;
              uint64_t v43 = v43 <= 1 ? 1 : v43;
              uint64_t v91 = v43;
              do
              {
                uint64_t v45 = &v39[4 * v42];
                if (*(unsigned __int16 *)v45 == v35
                  && !AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &v39[4 * v42], &outPropertyDataSize))
                {
                  CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(outPropertyData, outPropertyDataSize);
                  if (AudioFormatGetProperty(0x636D706Cu, 4u, &v39[4 * v42], &outPropertyDataSize, *(void **)outPropertyData))
                  {
                    uint64_t v46 = *(void **)outPropertyData;
                  }
                  else
                  {
                    uint64_t v47 = outSize[2];
                    uint64_t v46 = *(void **)outPropertyData;
                    if (v47)
                    {
                      uint64_t v48 = 0;
                      unsigned int v49 = 0;
                      do
                      {
                        if (*(_DWORD *)(*(void *)outPropertyData + 8))
                        {
                          double v50 = (int *)(*(void *)outPropertyData + 12);
                          uint64_t v51 = *(unsigned int *)(*(void *)outPropertyData + 8);
                          do
                          {
                            int v52 = *v50;
                            v50 += 5;
                            if (outSize[5 * v48 + 3] == v52) {
                              ++v49;
                            }
                            --v51;
                          }
                          while (v51);
                        }
                        ++v48;
                      }
                      while (v48 != v47);
                      if (v49 > v90)
                      {
                        int v44 = *(_DWORD *)v45;
                        unsigned int v90 = v49;
                      }
                    }
                  }
                  if (v46) {
                    free(v46);
                  }
                }
                ++v42;
              }
              while (v42 != v91);
              if (v44)
              {
                *(void *)&outPropertyData[1] = 0;
                UInt32 outPropertyDataSize = 32;
                outPropertyData[0] = inSpecifier;
                OSStatus PropertyInfo = AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x69636C20u, 0x20u, outPropertyData);
                if (!PropertyInfo)
                {
                  outPropertyData[0] = v89;
                  UInt32 outPropertyDataSize = 32;
                  OSStatus PropertyInfo = AudioConverterSetProperty(*v93, 0x6F636C20u, 0x20u, outPropertyData);
                  if (!PropertyInfo)
                  {
                    *(void *)&outPropertyData[1] = 0;
                    UInt32 outPropertyDataSize = 32;
                    outPropertyData[0] = v44;
                    OSStatus PropertyInfo = AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x6F636C20u, 0x20u, outPropertyData);
                    if (!PropertyInfo)
                    {
                      UInt32 outPropertyDataSize = 32;
                      OSStatus PropertyInfo = AudioConverterSetProperty(*v93, 0x69636C20u, 0x20u, outPropertyData);
                    }
                  }
                }
              }
              else
              {
LABEL_78:
                OSStatus PropertyInfo = -10868;
              }
            }
            if (outSize) {
              free(outSize);
            }
          }
        }
        if (v39) {
          free(v39);
        }
      }
      if (PropertyInfo == 1667771179)
      {
        UInt32 v53 = inDestinationFormat.mChannelsPerFrame;
        if (v53 < (*(unsigned int (**)(AURoundTripAAC *, void))(*(void *)this + 376))(this, 0))
        {
          AudioConverterDispose(*((AudioConverterRef *)this + 68));
          AudioConverterDispose(*((AudioConverterRef *)this + 69));
          ++inDestinationFormat.mChannelsPerFrame;
          int v13 = 2;
          uint64_t Property = v1;
LABEL_121:
          uint64_t v1 = Property;
          goto LABEL_122;
        }
      }
    }
    LOBYTE(outPropertyData[0]) = 0;
    if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x636D6763u, &ioPropertyDataSize, (Boolean *)outPropertyData))
    {
      BOOL v54 = ioPropertyDataSize != 0;
      int v55 = malloc_type_malloc(ioPropertyDataSize, 0x7C51E058uLL);
      char v56 = !v54;
      if (v55) {
        char v56 = 1;
      }
      if ((v56 & 1) == 0)
      {
        int v83 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        unsigned int v84 = std::bad_alloc::bad_alloc(v83);
      }
      if (!AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x636D6763u, &ioPropertyDataSize, v55)) {
        AudioConverterSetProperty(*v93, 0x646D6763u, ioPropertyDataSize, v55);
      }
      if (v55) {
        free(v55);
      }
    }
    *(void *)int outPropertyData = 0;
    UInt32 ioPropertyDataSize = 8;
    AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x7072696Du, &ioPropertyDataSize, outPropertyData);
    outSize = 0;
    UInt32 ioPropertyDataSize = 8;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x7072696Du, 8u, &outSize);
    LOBYTE(outPropertyDataSize) = 0;
    double v58 = 1.0;
    if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x666C7374u, &ioPropertyDataSize, (Boolean *)&outPropertyDataSize))
    {
      UInt32 v59 = ioPropertyDataSize;
      uint64_t v60 = (double *)malloc_type_malloc(ioPropertyDataSize, 0x7C51E058uLL);
      unint64_t v61 = v60;
      if (v59 && !v60)
      {
        double v81 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        float v82 = std::bad_alloc::bad_alloc(v81);
      }
      if (AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x666C7374u, &ioPropertyDataSize, v60)
        || ioPropertyDataSize < 0x60)
      {
        if (!v61) {
          goto LABEL_103;
        }
      }
      else
      {
        double v58 = *v61 / v61[6 * (ioPropertyDataSize / 0x30) - 6];
      }
      free(v61);
    }
LABEL_103:
    UInt32 mFramesPerPacket = inDestinationFormat.mFramesPerPacket;
    *((_DWORD *)this + 153) = inDestinationFormat.mFramesPerPacket;
    LODWORD(v57) = outPropertyData[0];
    double v63 = inSourceFormat.mSampleRate / inDestinationFormat.mSampleRate;
    if (v98 == 1650553971)
    {
      double v64 = v63 * 88.2;
      if (v63 <= 1.0) {
        double v64 = 88.2;
      }
      unsigned int v65 = (vcvtpd_s64_f64(v64) + 15) & 0xFFFFFFF0;
    }
    else
    {
      unsigned int v65 = 96;
    }
    unsigned int v66 = v65 + mFramesPerPacket * vcvtpd_u64_f64(v63);
    *((_DWORD *)this + 157) = v66;
    if (*((_DWORD *)this + 140))
    {
      v66 += 4096;
      *((_DWORD *)this + 157) = v66;
    }
    *((_DWORD *)this + 156) = v66 + vcvtpd_u64_f64(v63 * (v58 * (double)v57));
    *(float *)&UInt32 outPropertyDataSize = 0.0;
    UInt32 ioPropertyDataSize = 4;
    uint64_t Property = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x786F7073u, &ioPropertyDataSize, &outPropertyDataSize);
    if (!Property)
    {
      UInt32 ioPropertyDataSize = 40;
      uint64_t Property = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61636F64u, &ioPropertyDataSize, &inDestinationFormat);
      if (!Property)
      {
        int v67 = *((_DWORD *)this + 84);
        *((_DWORD *)this + 162) = (v67 + *((_DWORD *)this + 153) - 1) / *((_DWORD *)this + 153);
        int v68 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)inDestinationFormat.mFormatFlags, (const CAStreamBasicDescription *)inDestinationFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 71, v68);
        unsigned int v69 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)inSourceFormat.mFormatFlags, (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 72, v69);
        unsigned int v70 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*(unsigned int *)((unint64_t)&inSourceFormat | 0xC), (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 73, v70);
        float v71 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*(unsigned int *)((unint64_t)&inSourceFormat | 0xC), (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 74, v71);
        unsigned int v72 = 4 * *((_DWORD *)this + 156);
        *((_DWORD *)this + 151) = 4 * v67;
        *((_DWORD *)this + 152) = v72 + 4 * v67;
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 72));
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 73));
        CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 73), v72);
        *((_DWORD *)this + 150) = outPropertyDataSize * *((_DWORD *)this + 162);
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 71));
        uint64_t v73 = *((unsigned int *)this + 162);
        uint64_t v74 = (void *)*((void *)this + 80);
        if (v74)
        {
          free(v74);
          *((void *)this + 80) = 0;
        }
        uint64_t v75 = malloc_type_malloc(16 * v73, 0x7C51E058uLL);
        BOOL v76 = v73 == 0;
        if (v75) {
          BOOL v76 = 1;
        }
        if (!v76)
        {
          double v87 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          int v88 = std::bad_alloc::bad_alloc(v87);
        }
        *((void *)this + 80) = v75;
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 74));
        CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 74), 4 * *((_DWORD *)this + 157));
        *((_DWORD *)this + 155) = 0;
        if (*((unsigned char *)this + 660))
        {
          (*(void (**)(AURoundTripAAC *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
          *((unsigned char *)this + 660) = 0;
        }
        BOOL v77 = inSourceFormat.mSampleRate >= 64000.0;
        *((unsigned char *)this + 801) = inSourceFormat.mSampleRate >= 64000.0;
        *((unsigned char *)this + 929) = v77;
        *((unsigned char *)this + 1057) = v77;
        *((unsigned char *)this + 1185) = v77;
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 688));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 816));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 944));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 1072));
        uint64_t Property = 0;
      }
    }
LABEL_120:
    int v13 = 1;
    goto LABEL_121;
  }
  return 4294956428;
}

void sub_21BA88CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  if (a39) {
    free(a39);
  }
  if (v39) {
    free(v39);
  }
  _Unwind_Resume(exception_object);
}

void *CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(void *a1, uint64_t a2)
{
  *a1 = 0;
  int v4 = malloc_type_malloc(32 * a2, 0x7C51E058uLL);
  if (a2 && !v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = v4;
  return a1;
}

void AURoundTripAAC::~AURoundTripAAC(AURoundTripAAC *this)
{
  *(void *)this = &unk_26CBAAA00;
  uint64_t v2 = (void *)*((void *)this + 80);
  if (v2)
  {
    free(v2);
    *((void *)this + 80) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 74, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 73, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 71, 0);
  MEMORY[0x21D497690]((char *)this + 536);
  MEMORY[0x21D497690]((char *)this + 528);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBAAA00;
  uint64_t v2 = (void *)*((void *)this + 80);
  if (v2)
  {
    free(v2);
    *((void *)this + 80) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 74, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 73, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 71, 0);
  MEMORY[0x21D497690]((char *)this + 536);
  MEMORY[0x21D497690]((char *)this + 528);

  ausdk::AUBase::~AUBase(this);
}

uint64_t *InstrumentState::Notify(InstrumentState *this, uint64_t a2, int a3)
{
  uint64_t v6 = (a2 - 4122);
  if (v6 > 0x22) {
    goto LABEL_9;
  }
  if (((1 << (a2 - 26)) & 0x4423F) == 0)
  {
    if (v6 == 20)
    {
      (*(void (**)(void, uint64_t, void))(**((void **)this + 3) + 112))(*((void *)this + 3), 4142, 0);
      goto LABEL_12;
    }
    if (v6 == 34)
    {
      InstrumentState::UpdateLayers(this);
      goto LABEL_12;
    }
LABEL_9:
    if (a2) {
      goto LABEL_12;
    }
  }
  unsigned int v7 = (uint64_t *)*((void *)this + 29);
  unsigned int v8 = (uint64_t *)*((void *)this + 30);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 112))(v9, a2, 0);
  }
LABEL_12:

  return SamplerState::Notify(this, a2, a3);
}

void InstrumentState::~InstrumentState(InstrumentManager **this)
{
  InstrumentState::~InstrumentState(this);

  JUMPOUT(0x21D497F90);
}

{
  InstrumentManager *v2;
  InstrumentManager *v3;
  InstrumentManager *v4;
  InstrumentManager *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  InstrumentManager **v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x263EF8340];
  *this = (InstrumentManager *)&unk_26CBAB7B8;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = 136315650;
    unsigned int v7 = "InstrumentState.cpp";
    unsigned int v8 = 1024;
    uint64_t v9 = 95;
    uint64_t v10 = 2048;
    uint64_t v11 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::~InstrumentState(%p)", (uint8_t *)&v6, 0x1Cu);
  }
  InstrumentState::Cleanup((InstrumentState *)this);
  uint64_t v2 = this[14];
  if (v2)
  {
    InstrumentManager::ReleaseSamples(this[14]);
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((void **)v2 + 1));
    MEMORY[0x21D497F90](v2, 0x1020C4062D53EE8);
  }
  unint64_t v3 = this[29];
  if (v3)
  {
    this[30] = v3;
    operator delete(v3);
  }
  int v4 = this[26];
  if (v4)
  {
    this[27] = v4;
    operator delete(v4);
  }
  unint64_t v5 = this[11];
  if (v5)
  {
    this[12] = v5;
    operator delete(v5);
  }
  SamplerState::~SamplerState((SamplerState *)this);
}

void sub_21BA891BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void InstrumentState::Cleanup(InstrumentState *this)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    uint64_t v45 = "InstrumentState.cpp";
    __int16 v46 = 1024;
    int v47 = 248;
    __int16 v48 = 2048;
    *(void *)unsigned int v49 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Cleanup(%p)", buf, 0x1Cu);
  }
  uint64_t v2 = *((void *)this + 24);
  if (v2) {
    MEMORY[0x21D497F90](v2, 0x1000C40451B5BE8);
  }
  *((void *)this + 24) = 0;
  unint64_t v3 = (_DWORD **)*((void *)this + 29);
  int v4 = (_DWORD **)*((void *)this + 30);
  if (v3 != v4)
  {
    do
    {
      if (*v3) {
        SamplerState::Unref(*v3);
      }
      ++v3;
    }
    while (v3 != v4);
    unint64_t v3 = (_DWORD **)*((void *)this + 29);
  }
  *((void *)this + 30) = v3;
  CFStringRef v5 = (const __CFString *)*((void *)this + 22);
  if (v5)
  {
    uint64_t v7 = *((unsigned int *)this + 42);
    uint64_t v6 = *((unsigned int *)this + 43);
    if (v6 == -1 || v7 == -1) {
      goto LABEL_53;
    }
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
    if (v9)
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v45 = "InstrumentManager.cpp";
      __int16 v46 = 1024;
      int v47 = 248;
      __int16 v48 = 1024;
      *(_DWORD *)unsigned int v49 = v6;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v7;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReleaseBankInstrument: releasing DLS instrument bank %u, patch %u", buf, 0x1Eu);
    }
    uint64_t Instance = DLSBankManager::GetInstance((DLSBankManager *)v9);
    uint64_t v11 = *(void *)(Instance + 24);
    uint64_t v42 = Instance + 24;
    char v43 = (*(uint64_t (**)(void))(v11 + 16))();
    BankEntry = DLSBankManager::FindBankEntry((CFURLRef ***)Instance, v5);
    int v13 = BankEntry;
    if (BankEntry)
    {
      float v14 = (CFURLRef *)std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>((uint64_t)(BankEntry + 3), v7 | (v6 << 32));
      if (v13 + 4 != v14)
      {
        CFURLRef v15 = v14[5];
        if (v15)
        {
          unint64_t v16 = *((void *)v15 + 9) - *((void *)v15 + 8);
          if ((int)(v16 >> 3) >= 1)
          {
            uint64_t v17 = 0;
            uint64_t v18 = (v16 >> 3);
            while (1)
            {
              uint64_t v19 = *((void *)v15 + 8);
              if (v17 >= (int)((unint64_t)(*((void *)v15 + 9) - v19) >> 3)) {
                uint64_t v20 = 0;
              }
              else {
                uint64_t v20 = *(void *)(v19 + 8 * v17);
              }
              uint64_t v21 = *(void *)(v20 + 472);
              if (v21)
              {
                (*(void (**)(uint64_t))(*(void *)v21 + 112))(v21);
                uint64_t v22 = (void *)(v20 + 504);
                int v23 = *(void **)(v20 + 504);
                if (v23) {
                  free(v23);
                }
LABEL_44:
                *uint64_t v22 = 0;
                goto LABEL_45;
              }
              uint64_t v24 = *(void *)(*(void *)(*(void *)(v20 + 56) + 56) + 96);
              uint64_t v25 = *(void *)(*(void *)(*(void *)(v20 + 56) + 56) + 104);
              uint64_t v26 = v25 - v24;
              if (v25 != v24)
              {
                uint64_t v27 = 0;
                unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
                unsigned int v29 = 1;
                while (*(_DWORD *)(v24 + 24 * v27 + 16) != *(_DWORD *)(v20 + 160))
                {
                  uint64_t v27 = v29;
                  if (v28 <= v29++) {
                    goto LABEL_41;
                  }
                }
                uint64_t v31 = v24 + 24 * v27;
                int v32 = *(_DWORD *)(v31 + 20);
                int v33 = v32 - 1;
                *(_DWORD *)(v31 + 20) = v32 - 1;
                if (v32 <= 0)
                {
                  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_41;
                  }
                  *(_DWORD *)AudioComponentDescription buf = 136316162;
                  uint64_t v45 = "DlsPoolTable.h";
                  __int16 v46 = 1024;
                  int v47 = 62;
                  __int16 v48 = 2080;
                  *(void *)unsigned int v49 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsPoolTable.h";
                  *(_WORD *)&v49[8] = 1024;
                  int v50 = 62;
                  __int16 v51 = 2080;
                  int v52 = "mRefCount >= 0";
                  _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                  if (*(_DWORD *)(v31 + 20)) {
                    goto LABEL_41;
                  }
                }
                else if (v33)
                {
                  goto LABEL_41;
                }
                double v34 = *(atomic_uint **)v31;
                if (*(void *)v31)
                {
                  if (atomic_fetch_add(v34 + 2, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v34 + 16))(v34);
                  }
                  *(void *)uint64_t v31 = 0;
                }
              }
LABEL_41:
              UInt32 v35 = *(atomic_uint **)(v20 + 464);
              if (v35)
              {
                uint64_t v22 = (void *)(v20 + 464);
                if (atomic_fetch_add(v35 + 2, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v35 + 16))(v35);
                }
                goto LABEL_44;
              }
LABEL_45:
              if (++v17 == v18) {
                goto LABEL_52;
              }
            }
          }
          goto LABEL_52;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        uint64_t v45 = "DLSBankManager.cpp";
        __int16 v46 = 1024;
        int v47 = 78;
        __int16 v48 = 1024;
        *(_DWORD *)unsigned int v49 = v7;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v6;
        uint64_t v36 = &_os_log_internal;
        UInt32 v37 = "%25s:%-5d BankEntry::ReleaseInstrument: patch %u bank %u not loaded";
        uint32_t v38 = 30;
LABEL_51:
        _os_log_impl(&dword_21B9BB000, v36, OS_LOG_TYPE_DEFAULT, v37, buf, v38);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315650;
      uint64_t v45 = "DLSBankManager.cpp";
      __int16 v46 = 1024;
      int v47 = 210;
      __int16 v48 = 2112;
      *(void *)unsigned int v49 = v5;
      uint64_t v36 = &_os_log_internal;
      UInt32 v37 = "%25s:%-5d DLSBankManager::ReleaseBankInstrument: Bank '%@' not loaded";
      uint32_t v38 = 28;
      goto LABEL_51;
    }
LABEL_52:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v42);
    CFStringRef v5 = (const __CFString *)*((void *)this + 22);
LABEL_53:
    BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
    if (v39)
    {
      *(_DWORD *)AudioComponentDescription buf = 136315650;
      uint64_t v45 = "InstrumentManager.cpp";
      __int16 v46 = 1024;
      int v47 = 255;
      __int16 v48 = 2112;
      *(void *)unsigned int v49 = v5;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReleaseBank: releasing DLS bank %@", buf, 0x1Cu);
    }
    char v40 = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)v39);
    DLSBankManager::ReleaseBank(v40, v5);
    int v41 = (const void *)*((void *)this + 22);
    if (v41) {
      CFRelease(v41);
    }
    *((void *)this + 22) = 0;
  }
  *((void *)this + 21) = -1;
  InstrumentManager::ReleaseSamples(*((InstrumentManager **)this + 14));
}

void sub_21BA897B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

_DWORD *InstrumentState::Disconnect(_DWORD *this)
{
  uint64_t v1 = this;
  unint64_t v3 = (char *)*((void *)this + 26);
  uint64_t v2 = (char *)*((void *)this + 27);
  uint64_t v4 = *((void *)this + 30) - *((void *)this + 29);
  for (int64_t i = v2 - v3; v3 != v2; v3 += 8)
  {
    this = *(_DWORD **)v3;
    if (*(void *)v3) {
      this = SamplerState::Unref(this);
    }
  }
  if (((v4 | i) & 0x7FFFFFFF8) != 0)
  {
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v7 = (_DWORD **)v1[29];
      uint64_t v6 = (_DWORD **)v1[30];
      while (v7 != v6)
      {
        this = *v7;
        if (*v7) {
          this = SamplerState::Unref(this);
        }
        ++v7;
      }
    }
  }
  else if (v1)
  {
    unsigned int v8 = *(uint64_t (**)(void *))(*v1 + 104);
    return (_DWORD *)v8(v1);
  }
  return this;
}

uint64_t InstrumentState::Restore(InstrumentState *this, const CACFDictionary *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!*(void *)a2) {
    return 4294956445;
  }
  (*(void (**)(InstrumentState *, void))(*(void *)this + 64))(this, 0);
  if (CACFDictionary::GetString(a2, @"name", (const __CFString **)&v33)) {
    (*(void (**)(InstrumentState *, __CFString *, uint64_t))(*(void *)this + 72))(this, v33, 1);
  }
  if (CACFDictionary::GetUInt32(a2, @"output", (unsigned int *)&v33)) {
    InstrumentState::SetOutputScope(this, v33);
  }
  if (CACFDictionary::GetUInt32(a2, @"voice count", (unsigned int *)&v33)) {
    InstrumentState::SetVoiceCount(this, v33);
  }
  if (CACFDictionary::GetSInt32(a2, @"coarse tune", (int *)&v33)) {
    InstrumentState::SetCoarseTuning(this, (int)v33);
  }
  if (CACFDictionary::GetFloat32(a2, @"fine tune", (float *)&v33)) {
    InstrumentState::SetFineTuning((float *)this, *(float *)&v33);
  }
  if (CACFDictionary::GetFloat32(a2, @"pan", (float *)&v33)) {
    InstrumentState::SetPan((float *)this, *(float *)&v33 * 0.005);
  }
  if (CACFDictionary::GetFloat32(a2, @"gain", (float *)&v33)) {
    InstrumentState::SetGain((float *)this, *(float *)&v33);
  }
  if (CACFDictionary::GetSInt32(a2, @"key offset", (int *)&v33)) {
    InstrumentState::SetKeyOffset(this, (int)v33);
  }
  if (CACFDictionary::GetSInt32(a2, @"vel offset", (int *)&v33)) {
    InstrumentState::SetVelocityOffset(this, (int)v33);
  }
  if (CACFDictionary::GetBool(a2, @"self exclusive", (BOOL *)&v33)
    && *((unsigned __int8 *)this + 150) != v33)
  {
    *((unsigned char *)this + 150) = (_BYTE)v33;
    (*(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112))(this, 4130, 0);
  }
  CFArrayRef theArray = 0;
  __int16 v32 = 0;
  CACFDictionary::GetCACFArray(a2, @"LFOs", (CACFArray *)&theArray);
  if (theArray)
  {
    uint64_t v4 = 0;
    if (CFArrayGetCount(theArray))
    {
      *(void *)AudioComponentDescription buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, 0, (CACFDictionary *)buf);
      operator new();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  CACFDictionary::GetCACFArray(a2, @"Layers", (CACFArray *)&theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    uint64_t v6 = (_DWORD **)*((void *)this + 29);
    uint64_t v7 = (_DWORD **)*((void *)this + 30);
    if (v6 != v7)
    {
      do
      {
        if (*v6) {
          SamplerState::Unref(*v6);
        }
        ++v6;
      }
      while (v6 != v7);
      uint64_t v6 = (_DWORD **)*((void *)this + 29);
    }
    *((void *)this + 30) = v6;
    if (theArray && CFArrayGetCount(theArray)) {
      operator new();
    }
  }
  uint64_t v29 = 0;
  __int16 v30 = 0;
  CACFDictionary::GetCACFDictionary(a2, @"Banks", (CACFDictionary *)&v29);
  if (v29 && CACFDictionary::Size((CACFDictionary *)&v29)) {
    operator new[]();
  }
  BOOL v9 = (uint64_t (****)(void))*((void *)this + 29);
  unsigned int v8 = (uint64_t (****)(void))*((void *)this + 30);
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unint64_t v28 = (uint64_t (****)(void))*((void *)this + 30);
    do
    {
      int v14 = (***v9)();
      int v15 = v14;
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v16 = (v11 - v10) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v12 - (void)v10) >> 1 > v17) {
          unint64_t v17 = (uint64_t)(v12 - (void)v10) >> 1;
        }
        if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (char *)(v18 + 4 * v16);
        *(_DWORD *)uint64_t v20 = v15;
        uint64_t v21 = v20 + 4;
        while (v11 != v10)
        {
          int v22 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v20 - 1) = v22;
          v20 -= 4;
        }
        unint64_t v12 = v18 + 4 * v19;
        if (v10) {
          operator delete(v10);
        }
        uint64_t v10 = v20;
        uint64_t v11 = v21;
        unsigned int v8 = v28;
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v14;
        v11 += 4;
      }
      if (v13)
      {
        int v23 = v10;
        uint64_t v24 = v13;
        do
        {
          int v25 = *(_DWORD *)v23;
          v23 += 4;
          if (v25 == *(_DWORD *)&v10[4 * v13])
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v34, 0xFFFFD59D);
              *(_DWORD *)AudioComponentDescription buf = 136315906;
              *(void *)&uint8_t buf[4] = "InstrumentState.cpp";
              __int16 v36 = 1024;
              int v37 = 339;
              __int16 v38 = 2080;
              BOOL v39 = v34;
              __int16 v40 = 2080;
              int v41 = "Duplicate layer IDs in document";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "Duplicate layer IDs in document", -10851);
          }
          --v24;
        }
        while (v24);
      }
      ++v13;
      ++v9;
    }
    while (v9 != v8);
    if (v10) {
      operator delete(v10);
    }
  }
  (*(void (**)(InstrumentState *, uint64_t))(*(void *)this + 64))(this, 1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v29);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v4;
}

void sub_21BA8A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

_DWORD *InstrumentState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  unsigned int v5 = a2;
  if (this[39] != a2)
  {
    uint64_t v2 = this;
    if (a2 == -1)
    {
      unsigned int v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v5, 0, 0x10u, (uint64_t)"Invalid output scope");
      unsigned int v3 = v5;
    }
    v2[39] = v3;
    uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112);
    return (_DWORD *)v4(v2, 4122, 0);
  }
  return this;
}

_DWORD *InstrumentState::SetVoiceCount(_DWORD *this, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2;
  if (this[36] != a2)
  {
    uint64_t v2 = this;
    if (a2 == -1)
    {
      unsigned int v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 1u, 0x40u, (uint64_t)"InstrumentState::SetVoiceCount: Invalid count");
      unsigned int v3 = v4;
    }
    v2[36] = v3;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315650;
      uint64_t v6 = "InstrumentState.cpp";
      __int16 v7 = 1024;
      int v8 = 890;
      __int16 v9 = 1024;
      unsigned int v10 = v3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::SetVoiceCount: count %u", buf, 0x18u);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112))(v2, 4131, 0);
  }
  return this;
}

_DWORD *InstrumentState::SetCoarseTuning(_DWORD *this, int a2)
{
  int v4 = a2;
  if (this[33] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<int>(&v4, -24, 24, (uint64_t)"InstrumentState::SetCoarseTuning: Invalid coarse tuning");
    v2[33] = v4;
    unsigned int v3 = *(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112);
    return (_DWORD *)v3(v2, 4123, 0);
  }
  return this;
}

float *InstrumentState::SetFineTuning(float *this, float a2)
{
  float v4 = a2;
  if (this[34] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"InstrumentState::SetFineTuning: Invalid fine tuning", -99.0, 99.0);
    v2[34] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4124, 0);
  }
  return this;
}

float *InstrumentState::SetPan(float *this, float a2)
{
  float v4 = a2;
  if (this[35] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[35] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4126, 0);
  }
  return this;
}

float *InstrumentState::SetGain(float *this, float a2)
{
  float v4 = a2;
  if (this[32] != a2)
  {
    uint64_t v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"InstrumentState::SetGain: Invalid volume", -96.0, 12.0);
    v2[32] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4125, 0);
  }
  return this;
}

void InstrumentState::SetKeyOffset(InstrumentState *this, int a2)
{
  int v4 = a2;
  CHECK_RANGE<int>(&v4, -64, 64, (uint64_t)"InstrumentState::SetKeyOffset: Invalid key offset");
  if (v4 != *((char *)this + 148))
  {
    *((unsigned char *)this + 148) = v4;
    unsigned int v3 = *(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112);
    v3(this, 4127, 0);
  }
}

void InstrumentState::SetVelocityOffset(InstrumentState *this, int a2)
{
  int v4 = a2;
  CHECK_RANGE<int>(&v4, -127, 127, (uint64_t)"InstrumentState::SetVelocityOffset: Invalid velocity offset");
  if (v4 != *((char *)this + 149))
  {
    *((unsigned char *)this + 149) = v4;
    unsigned int v3 = *(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112);
    v3(this, 4136, 0);
  }
}

void InstrumentState::SetCurrentBankName(InstrumentState *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v4 = (const void *)*((void *)this + 22);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 22) = cf;
}

uint64_t InstrumentState::Save(InstrumentState *this, CACFDictionary *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "InstrumentState.cpp";
    __int16 v28 = 1024;
    int v29 = 208;
    __int16 v30 = 2048;
    uint64_t v31 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Save(this=%p)", buf, 0x1Cu);
  }
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(InstrumentState *))(*(void *)this + 80))(this);
  CACFDictionary::AddString(a2, @"name", v4);
  if (*((_DWORD *)this + 39) != -1) {
    CACFDictionary::AddUInt32(a2, @"output");
  }
  if (*((_DWORD *)this + 36) != -1) {
    CACFDictionary::AddUInt32(a2, @"voice count");
  }
  if (*((_DWORD *)this + 33)) {
    CACFDictionary::AddSInt32(a2, @"coarse tune");
  }
  float v5 = *((float *)this + 34);
  if (v5 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"fine tune", v5);
  }
  float v6 = *((float *)this + 32);
  if (v6 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"gain", v6);
  }
  float v7 = *((float *)this + 35) * 200.0;
  if (v7 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"pan", v7);
  }
  if (*((unsigned char *)this + 148)) {
    CACFDictionary::AddSInt32(a2, @"key offset");
  }
  if (*((unsigned char *)this + 149)) {
    CACFDictionary::AddSInt32(a2, @"vel offset");
  }
  if (!*((unsigned char *)this + 150)) {
    CACFDictionary::AddBool(a2, @"self exclusive");
  }
  unint64_t v8 = *((void *)this + 27) - *((void *)this + 26);
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, (v8 >> 3), MEMORY[0x263EFFF70]);
    *(void *)AudioComponentDescription buf = Mutable;
    *(_WORD *)&buf[8] = 256;
    unsigned int v10 = (uint64_t *)*((void *)this + 26);
    uint64_t v11 = (uint64_t *)*((void *)this + 27);
    if (v10 == v11)
    {
      uint64_t v15 = 0;
    }
    else
    {
      unint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
      unsigned int v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
      do
      {
        uint64_t v14 = *v10;
        int v25 = CFDictionaryCreateMutable(0, 0, v12, v13);
        __int16 v26 = 256;
        uint64_t v15 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v14 + 40))(v14, &v25);
        CACFArray::AppendDictionary((CACFArray *)buf, v25);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v25);
        ++v10;
      }
      while (v10 != v11);
      CFArrayRef Mutable = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, @"LFOs", Mutable);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = *((void *)this + 29);
  uint64_t v16 = (char *)this + 232;
  CFArrayRef v18 = CFArrayCreateMutable(0, ((unint64_t)(*((void *)v16 + 1) - v17) >> 3), MEMORY[0x263EFFF70]);
  *(void *)AudioComponentDescription buf = v18;
  *(_WORD *)&buf[8] = 256;
  uint64_t v19 = *(uint64_t **)v16;
  uint64_t v20 = (uint64_t *)*((void *)v16 + 1);
  if (*(uint64_t **)v16 != v20)
  {
    uint64_t v21 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    int v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      uint64_t v23 = *v19;
      int v25 = CFDictionaryCreateMutable(0, 0, v21, v22);
      __int16 v26 = 256;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(void *)v23 + 40))(v23, &v25);
      CACFArray::AppendDictionary((CACFArray *)buf, v25);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v25);
      ++v19;
    }
    while (v19 != v20);
    CFArrayRef v18 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, @"Layers", v18);
  CACFArray::~CACFArray((CACFArray *)buf);
  return v15;
}

void sub_21BA8AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

unsigned int (***InstrumentState::FindState(InstrumentState *this, uint64_t a2, int a3))(void)
{
  if ((a3 & 0xEFFFFFFF) == 0)
  {
    __int16 v9 = (void *)*((void *)this + 26);
    unsigned int v10 = (void *)*((void *)this + 27);
    while (v9 != v10)
    {
      unint64_t v8 = (unsigned int (***)(void))*v9;
      if ((**(unsigned int (***)(void))*v9)(*v9) == a2) {
        return v8;
      }
      ++v9;
    }
  }
  uint64_t v5 = *((void *)this + 29);
  if (((*((void *)this + 30) - v5) & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v5 + 8 * v6) + 32))(*(void *)(v5 + 8 * v6), a2, 0);
    if (v7) {
      break;
    }
    ++v6;
    uint64_t v5 = *((void *)this + 29);
    if (v6 >= ((unint64_t)(*((void *)this + 30) - v5) >> 3)) {
      return 0;
    }
  }
  return (unsigned int (***)(void))v7;
}

uint64_t InstrumentState::SetProperty(InstrumentState *this, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      BOOL v108 = "InstrumentState.cpp";
      __int16 v109 = 1024;
      int v110 = 568;
      __int16 v111 = 2080;
      int64x2_t v112 = v115;
      __int16 v113 = 2080;
      int v114 = "InstrumentState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "InstrumentState::SetProperty: NULL property value", -10851);
  }
  uint64_t v6 = 0;
  switch(a2)
  {
    case 4120:
      uint64_t v6 = 1;
      (*(void (**)(InstrumentState *, void, uint64_t))(*(void *)this + 72))(this, *(void *)a3, 1);
      return v6;
    case 4121:
    case 4128:
    case 4129:
    case 4137:
    case 4138:
    case 4139:
    case 4140:
    case 4143:
    case 4146:
      return v6;
    case 4122:
      InstrumentState::SetOutputScope(this, *a3);
      return 1;
    case 4123:
      InstrumentState::SetCoarseTuning(this, *a3);
      return 1;
    case 4124:
      InstrumentState::SetFineTuning((float *)this, *(float *)a3);
      return 1;
    case 4125:
      InstrumentState::SetGain((float *)this, *(float *)a3);
      return 1;
    case 4126:
      InstrumentState::SetPan((float *)this, *(float *)a3 * 0.005);
      return 1;
    case 4127:
      InstrumentState::SetKeyOffset(this, *a3);
      return 1;
    case 4130:
      int v58 = *a3 != 0;
      if (*((unsigned __int8 *)this + 150) != v58)
      {
        *((unsigned char *)this + 150) = v58;
        (*(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112))(this, 4130, 0);
      }
      return 1;
    case 4131:
      InstrumentState::SetVoiceCount(this, *a3);
      return 1;
    case 4132:
      uint64_t v74 = (const void *)*((void *)this + 20);
      if (v74) {
        CFRelease(v74);
      }
      uint64_t v75 = *(const void **)a3;
      *((void *)this + 20) = *(void *)a3;
      if (v75) {
        CFRetain(v75);
      }
      return 1;
    case 4133:
      CheckDataSize(a4, 0x48u);
      unsigned int v70 = *a3;
      if (*a3 >> 28 == 1)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          BOOL v108 = "InstrumentState.cpp";
          __int16 v109 = 1024;
          int v110 = 631;
          __int16 v111 = 2080;
          int64x2_t v112 = v115;
          __int16 v113 = 2080;
          int v114 = "InstrumentState::SetProperty: Cannot copy instrument-level LFOs";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        uint64_t v95 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v95, "InstrumentState::SetProperty: Cannot copy instrument-level LFOs", -10851);
      }
      float v71 = (void *)*((void *)this + 29);
      unsigned int v72 = (void *)*((void *)this + 30);
      while (v71 != v72)
      {
        uint64_t v73 = (unsigned int (***)(void))*v71;
        if ((**(unsigned int (***)(void))*v71)(*v71) == v70) {
          goto LABEL_110;
        }
        ++v71;
      }
      uint64_t v73 = 0;
LABEL_110:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315650;
        BOOL v108 = "InstrumentState.cpp";
        __int16 v109 = 1024;
        int v110 = 757;
        __int16 v111 = 1024;
        LODWORD(v112) = v70;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::CopyLayer(ID = 0x%x)", buf, 0x18u);
      }
      if (v73) {
        operator new();
      }
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        BOOL v108 = "InstrumentState.cpp";
        __int16 v109 = 1024;
        int v110 = 758;
        __int16 v111 = 2080;
        int64x2_t v112 = v115;
        __int16 v113 = 2080;
        int v114 = "InstrumentState::CopyLayer: No layer matching that element ID";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      double v96 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v96, "InstrumentState::CopyLayer: No layer matching that element ID", -10851);
    case 4134:
      unsigned int v59 = *a3;
      uint64_t v60 = *((void *)this + 14);
      BOOL v62 = (uint64_t *)(v60 + 8);
      uint64_t v61 = *(void *)(v60 + 8);
      if (!v61) {
        goto LABEL_92;
      }
      uint64_t v63 = v60 + 8;
      do
      {
        unsigned int v64 = *(_DWORD *)(v61 + 32);
        BOOL v65 = v64 >= v59;
        if (v64 >= v59) {
          unsigned int v66 = (uint64_t *)v61;
        }
        else {
          unsigned int v66 = (uint64_t *)(v61 + 8);
        }
        if (v65) {
          uint64_t v63 = v61;
        }
        uint64_t v61 = *v66;
      }
      while (*v66);
      if ((uint64_t *)v63 == v62 || *(_DWORD *)(v63 + 32) > v59)
      {
LABEL_92:
        int v67 = (unsigned int **)*((void *)this + 29);
        int v68 = (unsigned int **)*((void *)this + 30);
        while (v67 != v68)
        {
          unsigned int v69 = *v67;
          if ((**(unsigned int (***)(unsigned int *))*v67)(*v67) == v59) {
            goto LABEL_115;
          }
          ++v67;
        }
        unsigned int v69 = 0;
LABEL_115:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          BOOL v108 = "InstrumentState.cpp";
          __int16 v109 = 1024;
          int v110 = 770;
          __int16 v111 = 1024;
          LODWORD(v112) = v59;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::RemoveLayer(ID = 0x%x)", buf, 0x18u);
        }
        if (!v69)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
            *(_DWORD *)AudioComponentDescription buf = 136315906;
            BOOL v108 = "InstrumentState.cpp";
            __int16 v109 = 1024;
            int v110 = 772;
            __int16 v111 = 2080;
            int64x2_t v112 = v115;
            __int16 v113 = 2080;
            int v114 = "InstrumentState::RemoveLayer: No layer matching that element ID";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          int v97 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v97, "InstrumentState::RemoveLayer: No layer matching that element ID", -10851);
        }
        (*(void (**)(unsigned int *, void))(*(void *)v69 + 64))(v69, 0);
        BOOL v76 = (LayerState *)*((void *)v69 + 15);
        if (v76)
        {
          LayerState::SetSelectionLayerIndex(v76, v69[29]);
          InstrumentState::UpdateLayers(this);
        }
        LayerState::UnregisterConnections(v69);
        (*(void (**)(InstrumentState *, uint64_t, uint64_t))(*(void *)this + 112))(this, 4140, 1);
        BOOL v77 = (void *)*((void *)this + 30);
        int v78 = (void *)*((void *)this + 29);
        if (v78 != v77)
        {
          do
          {
            if ((unsigned int *)*v78 == v69) {
              goto LABEL_124;
            }
            ++v78;
          }
          while (v78 != v77);
          int v78 = (void *)*((void *)this + 30);
        }
LABEL_124:
        if (v78 != v77)
        {
          uint64_t v79 = v78 + 1;
          if (v78 + 1 != v77)
          {
            do
            {
              if ((unsigned int *)*v79 != v69) {
                *v78++ = *v79;
              }
              ++v79;
            }
            while (v79 != v77);
            BOOL v77 = (void *)*((void *)this + 30);
          }
        }
        if (v77 != v78) {
          *((void *)this + 30) = v78;
        }
        SamplerState::Unref(v69);
        return 1;
      }
      BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
      if (v81)
      {
        *(_DWORD *)AudioComponentDescription buf = 136315650;
        BOOL v108 = "InstrumentManager.cpp";
        __int16 v109 = 1024;
        int v110 = 388;
        __int16 v111 = 1024;
        LODWORD(v112) = v59;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::RemoveSampleWithID(ID = %u)", buf, 0x18u);
      }
      if (v59 > 0xFFFFFFEF)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 396;
          __int16 v111 = 2080;
          int64x2_t v112 = v115;
          __int16 v113 = 2080;
          int v114 = "InstrumentManager::RemoveSampleWithID: Cannot remove default sample";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        uint64_t v105 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v105, "InstrumentManager::RemoveSampleWithID: Cannot remove default sample", -10851);
      }
      uint64_t v82 = *v62;
      if (!*v62) {
        goto LABEL_210;
      }
      uint64_t v83 = v60 + 8;
      do
      {
        unsigned int v84 = *(_DWORD *)(v82 + 32);
        BOOL v85 = v84 >= v59;
        if (v84 >= v59) {
          double v86 = (uint64_t *)v82;
        }
        else {
          double v86 = (uint64_t *)(v82 + 8);
        }
        if (v85) {
          uint64_t v83 = v82;
        }
        uint64_t v82 = *v86;
      }
      while (*v86);
      if ((uint64_t *)v83 == v62 || *(_DWORD *)(v83 + 32) > v59)
      {
LABEL_210:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 391;
          __int16 v111 = 2080;
          int64x2_t v112 = v115;
          __int16 v113 = 2080;
          int v114 = "InstrumentManager::RemoveSampleWithID: Invalid sample ID";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        uint64_t v100 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v100, "InstrumentManager::RemoveSampleWithID: Invalid sample ID", -10851);
      }
      uint64_t Instance = (SampleManager *)SampleManager::GetInstance((SampleManager *)v81);
      SampleManager::ReleaseSample(Instance, *(void *)(v83 + 40));
      std::__tree<std::__value_type<unsigned int const,unsigned long>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned long>,InstrumentManager::ltid,true>,std::allocator<std::__value_type<unsigned int const,unsigned long>>>::__remove_node_pointer((uint64_t **)v60, (uint64_t *)v83);
      __int16 v28 = (void *)v83;
LABEL_150:
      operator delete(v28);
      goto LABEL_169;
    case 4135:
      (*(void (**)(InstrumentState *, BOOL))(*(void *)this + 8))(this, *a3 != 0);
      return 1;
    case 4136:
      InstrumentState::SetVelocityOffset(this, *a3);
      return 1;
    case 4141:
      CheckDataSize(a4, 0x48u);
      InstrumentState::AddLayer((char **)this, -1);
    case 4142:
      InstrumentState::SetMidiVoiceMode(this, *a3);
      return 1;
    case 4144:
      int v29 = (SampleManager *)CheckDataSize(a4, 0x48u);
      __int16 v30 = *(uint8_t ***)a3;
      if (a3[17] == 2)
      {
        if (!v30)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
            *(_DWORD *)AudioComponentDescription buf = 136315906;
            BOOL v108 = "InstrumentState.cpp";
            __int16 v109 = 1024;
            int v110 = 669;
            __int16 v111 = 2080;
            int64x2_t v112 = v115;
            __int16 v113 = 2080;
            int v114 = "InstrumentState::SetProperty: NULL raw sample data";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          int v101 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v101, "InstrumentState::SetProperty: NULL raw sample data", -10851);
        }
        unsigned int v31 = 1315423911;
        uint64_t v32 = *((void *)this + 14);
        int v33 = *v30;
        double v34 = v30[1];
        UInt32 v35 = (SampleManager *)SampleManager::GetInstance(v29);
        uint64_t v36 = v34;
        if (v34)
        {
          int v37 = v33;
          do
          {
            int v38 = (char)*v37++;
            v31 ^= (v31 >> 2) + 32 * v31 + v38;
            --v36;
          }
          while (v36);
        }
        snprintf((char *)buf, 0x800uLL, "sample#0X%llX-%llu-%u", v33, v34, v31);
        CFStringRef v106 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)buf, 0x600u);
        CFHashCode v39 = CFHash(v106);
        uint64_t v40 = SampleManager::SearchForSample(v35, v39);
        BOOL v41 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
        if (!v40)
        {
          if (v41)
          {
            *(_DWORD *)uint64_t v115 = 136315906;
            long long v116 = "SampleManager.cpp";
            __int16 v117 = 1024;
            int v118 = 498;
            __int16 v119 = 2080;
            uint64_t v120 = buf;
            __int16 v121 = 2048;
            CFHashCode v122 = v39;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SampleManager::AddSample: New sample: %s hashcode: %llu ", v115, 0x26u);
          }
          operator new();
        }
        if (v41)
        {
          *(_DWORD *)uint64_t v115 = 136315650;
          long long v116 = "SampleManager.cpp";
          __int16 v117 = 1024;
          int v118 = 505;
          __int16 v119 = 2048;
          uint64_t v120 = (uint8_t *)v39;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SampleManager::AddSample: Sample with ID %llu found already loaded", v115, 0x1Cu);
        }
        Smart<__CFString const*>::~Smart((const void **)&v106);
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 318;
          __int16 v111 = 2048;
          int64x2_t v112 = v33;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::AddSample(addr = %p)", buf, 0x1Cu);
        }
        int v88 = *(uint64_t **)v32;
        if (*(void *)v32 == v32 + 8)
        {
LABEL_164:
          unsigned int v80 = InstrumentManager::RegisterSample((uint64_t **)v32, *(_DWORD *)(v32 + 16) | 0x10000000u, -1, v39);
          goto LABEL_168;
        }
        while (v39 != v88[5])
        {
          int v89 = (uint64_t *)v88[1];
          if (v89)
          {
            do
            {
              unsigned int v90 = v89;
              int v89 = (uint64_t *)*v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              unsigned int v90 = (uint64_t *)v88[2];
              BOOL v91 = *v90 == (void)v88;
              int v88 = v90;
            }
            while (!v91);
          }
          int v88 = v90;
          if (v90 == (uint64_t *)(v32 + 8)) {
            goto LABEL_164;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v92 = *((_DWORD *)v88 + 8);
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 321;
          __int16 v111 = 1024;
          LODWORD(v112) = v92;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::AddSample: Sample already added as ID 0x%x - returning existing key", buf, 0x18u);
        }
        unsigned int v80 = *((_DWORD *)v88 + 8);
      }
      else
      {
        if (!v30)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
            *(_DWORD *)AudioComponentDescription buf = 136315906;
            BOOL v108 = "InstrumentState.cpp";
            __int16 v109 = 1024;
            int v110 = 674;
            __int16 v111 = 2080;
            int64x2_t v112 = v115;
            __int16 v113 = 2080;
            int v114 = "InstrumentState::SetProperty: NULL sample URL";
            _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          uint64_t v102 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v102, "InstrumentState::SetProperty: NULL sample URL", -10851);
        }
        unsigned int v80 = InstrumentManager::AddSample(*((InstrumentManager **)this + 14), *(glob_t **)a3, *(unsigned char *)(*((void *)this + 3) + 176), 0xFFFFFFFFLL, 0);
      }
LABEL_168:
      a3[16] = v80;
LABEL_169:
      (*(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112))(this, 4143, 0);
      return 1;
    case 4145:
      InstrumentState::SetPortamentoTime(this, *(float *)a3);
      return 1;
    case 4147:
      uint64_t v42 = *((void *)this + 14);
      uint64_t v45 = *(void *)(v42 + 8);
      int v44 = (void *)(v42 + 8);
      uint64_t v43 = v45;
      if (v45)
      {
        unsigned int v46 = *a3;
        int v47 = v44;
        do
        {
          unsigned int v48 = *(_DWORD *)(v43 + 32);
          BOOL v49 = v48 >= v46;
          if (v48 >= v46) {
            int v50 = (uint64_t *)v43;
          }
          else {
            int v50 = (uint64_t *)(v43 + 8);
          }
          if (v49) {
            int v47 = (void *)v43;
          }
          uint64_t v43 = *v50;
        }
        while (*v50);
        if (v47 != v44 && *((_DWORD *)v47 + 8) <= v46)
        {
          BOOL v51 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
          if (v51)
          {
            *(_DWORD *)AudioComponentDescription buf = 136315650;
            BOOL v108 = "InstrumentManager.cpp";
            __int16 v109 = 1024;
            int v110 = 357;
            __int16 v111 = 1024;
            LODWORD(v112) = v46;
            _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReferenceSampleWithID(ID = %u)", buf, 0x18u);
          }
          if (v46 > 0xFFFFFFEF)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
              *(_DWORD *)AudioComponentDescription buf = 136315906;
              BOOL v108 = "InstrumentManager.cpp";
              __int16 v109 = 1024;
              int v110 = 364;
              __int16 v111 = 2080;
              int64x2_t v112 = v115;
              __int16 v113 = 2080;
              int v114 = "InstrumentManager::ReferenceSampleWithID: Cannot reference default sample";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            unsigned int v104 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v104, "InstrumentManager::ReferenceSampleWithID: Cannot reference default sample", -10851);
          }
          uint64_t v52 = *v44;
          if (!*v44) {
            goto LABEL_211;
          }
          uint64_t v53 = v44;
          do
          {
            unsigned int v54 = *(_DWORD *)(v52 + 32);
            BOOL v55 = v54 >= v46;
            if (v54 >= v46) {
              char v56 = (uint64_t *)v52;
            }
            else {
              char v56 = (uint64_t *)(v52 + 8);
            }
            if (v55) {
              uint64_t v53 = (void *)v52;
            }
            uint64_t v52 = *v56;
          }
          while (*v56);
          if (v53 == v44 || *((_DWORD *)v53 + 8) > v46)
          {
LABEL_211:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
              *(_DWORD *)AudioComponentDescription buf = 136315906;
              BOOL v108 = "InstrumentManager.cpp";
              __int16 v109 = 1024;
              int v110 = 360;
              __int16 v111 = 2080;
              int64x2_t v112 = v115;
              __int16 v113 = 2080;
              int v114 = "InstrumentManager::ReferenceSampleWithID: Invalid sample ID";
              _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            float v99 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v99, "InstrumentManager::ReferenceSampleWithID: Invalid sample ID", -10851);
          }
          unint64_t v57 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v51);
          SampleManager::AcquireSample(v57, v53[5]);
        }
      }
      return 1;
    case 4148:
      uint64_t v11 = *((void *)this + 14);
      unsigned int v13 = (uint64_t *)(v11 + 8);
      uint64_t v12 = *(void *)(v11 + 8);
      if (!v12) {
        return 1;
      }
      unsigned int v14 = *a3;
      uint64_t v15 = v11 + 8;
      do
      {
        unsigned int v16 = *(_DWORD *)(v12 + 32);
        BOOL v17 = v16 >= v14;
        if (v16 >= v14) {
          CFArrayRef v18 = (uint64_t *)v12;
        }
        else {
          CFArrayRef v18 = (uint64_t *)(v12 + 8);
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        uint64_t v12 = *v18;
      }
      while (*v18);
      if ((uint64_t *)v15 == v13 || *(_DWORD *)(v15 + 32) > v14) {
        return 1;
      }
      BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
      if (v19)
      {
        *(_DWORD *)AudioComponentDescription buf = 136315650;
        BOOL v108 = "InstrumentManager.cpp";
        __int16 v109 = 1024;
        int v110 = 370;
        __int16 v111 = 1024;
        LODWORD(v112) = v14;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::UnreferenceSampleWithID(ID = %u)", buf, 0x18u);
      }
      if (v14 > 0xFFFFFFEF)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 382;
          __int16 v111 = 2080;
          int64x2_t v112 = v115;
          __int16 v113 = 2080;
          int v114 = "InstrumentManager::UnreferenceSampleWithID: Cannot unreference default sample";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        unsigned int v103 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v103, "InstrumentManager::UnreferenceSampleWithID: Cannot unreference default sample", -10851);
      }
      uint64_t v20 = *v13;
      if (!*v13) {
        goto LABEL_212;
      }
      uint64_t v21 = v11 + 8;
      do
      {
        unsigned int v22 = *(_DWORD *)(v20 + 32);
        BOOL v23 = v22 >= v14;
        if (v22 >= v14) {
          uint64_t v24 = (uint64_t *)v20;
        }
        else {
          uint64_t v24 = (uint64_t *)(v20 + 8);
        }
        if (v23) {
          uint64_t v21 = v20;
        }
        uint64_t v20 = *v24;
      }
      while (*v24);
      if ((uint64_t *)v21 == v13 || *(_DWORD *)(v21 + 32) > v14)
      {
LABEL_212:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v115, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          BOOL v108 = "InstrumentManager.cpp";
          __int16 v109 = 1024;
          int v110 = 373;
          __int16 v111 = 2080;
          int64x2_t v112 = v115;
          __int16 v113 = 2080;
          int v114 = "InstrumentManager::UnreferenceSampleWithID: Invalid sample ID";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        int v98 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v98, "InstrumentManager::UnreferenceSampleWithID: Invalid sample ID", -10851);
      }
      int v25 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v19);
      SampleManager::ReleaseSample(v25, *(void *)(v21 + 40));
      uint64_t v27 = (SampleManager *)SampleManager::GetInstance(v26);
      if (SampleManager::GetSample(v27, *(void *)(v21 + 40))) {
        goto LABEL_169;
      }
      std::__tree<std::__value_type<unsigned int const,unsigned long>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned long>,InstrumentManager::ltid,true>,std::allocator<std::__value_type<unsigned int const,unsigned long>>>::__remove_node_pointer((uint64_t **)v11, (uint64_t *)v21);
      __int16 v28 = (void *)v21;
      goto LABEL_150;
    default:
      if (a2 == 4231)
      {
        CheckDataSize(a4, 0x48u);
        unint64_t v8 = (char *)*((void *)this + 26);
        uint64_t v7 = (char *)*((void *)this + 27);
        for (unint64_t i = (unint64_t)(v7 - v8) >> 3; v8 != v7; v8 += 8)
        {
          unsigned int v10 = *(unsigned int (****)(void))v8;
          if ((***(unsigned int (****)(void))v8)(*(void *)v8) >= i) {
            LODWORD(i) = ((uint64_t (*)(void))**v10)(v10) + 1;
          }
        }
        InstrumentState::AddLFO(this, i);
      }
      return v6;
  }
}

void sub_21BA8CB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

_DWORD *InstrumentState::SetMidiVoiceMode(_DWORD *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((a2 - 78) <= 0xFFFFFFFB)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v4, 0xFFFFD59D);
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v6 = "InstrumentState.cpp";
      __int16 v7 = 1024;
      int v8 = 876;
      __int16 v9 = 2080;
      unsigned int v10 = v4;
      __int16 v11 = 2080;
      uint64_t v12 = "InstrumentState::SetMidiVoiceMode: Invalid Mode";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "InstrumentState::SetMidiVoiceMode: Invalid Mode", -10851);
  }
  if (this[31] != a2)
  {
    this[31] = a2;
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)this + 112);
    return (_DWORD *)v2();
  }
  return this;
}

void sub_21BA8CED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void InstrumentState::SetPortamentoTime(InstrumentState *this, float a2)
{
  float v4 = a2;
  CHECK_RANGE<float>(&v4, (uint64_t)"InstrumentState::SetPortamentoTime: Invalid time", 0.0, 5.0);
  if (*((float *)this + 38) != v4)
  {
    *((float *)this + 38) = v4;
    unsigned int v3 = *(void (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112);
    v3(this, 4145, 0);
  }
}

void InstrumentState::AddLayer(char **this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2 == -1) {
    int NextAvailable = GetNextAvailableIndex<LayerState>(this[29], this[30]);
  }
  else {
    int NextAvailable = 0;
  }
  uint64_t v5 = (unsigned int (****)(void))this[29];
  uint64_t v6 = (unsigned int (****)(void))this[30];
  while (v5 != v6)
  {
    if ((***v5)() == a2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "InstrumentState.cpp";
        __int16 v9 = 1024;
        int v10 = 744;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: InstrumentState::AddLayer attempted to add same ID twice!", (uint8_t *)&v7, 0x12u);
      }
      __break(1u);
    }
    ++v5;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315650;
    int v8 = "InstrumentState.cpp";
    __int16 v9 = 1024;
    int v10 = 745;
    __int16 v11 = 1024;
    int v12 = NextAvailable;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::AddLayer: adding ID 0x%x", (uint8_t *)&v7, 0x18u);
  }
  operator new();
}

void sub_21BA8D250(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40FFC326B0);
  _Unwind_Resume(a1);
}

void InstrumentState::AddLFO(InstrumentState *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315650;
    float v4 = "InstrumentState.cpp";
    __int16 v5 = 1024;
    int v6 = 795;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::AddLFO: adding ID 0x%x", (uint8_t *)&v3, 0x18u);
  }
  operator new();
}

void sub_21BA8D490(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C402E53C1ECLL);
  _Unwind_Resume(a1);
}

unint64_t GetNextAvailableIndex<LayerState>(char *a1, char *a2)
{
  unint64_t v2 = (unint64_t)(a2 - a1) >> 3;
  if (a2 != a1)
  {
    float v4 = a1;
    do
    {
      __int16 v5 = *(unsigned int (****)(void))v4;
      if ((***(unsigned int (****)(void))v4)(*(void *)v4) >= v2) {
        unint64_t v2 = (**v5)(v5) + 1;
      }
      v4 += 8;
    }
    while (v4 != a2);
  }
  return v2;
}

void InstrumentState::GetProperty(InstrumentState *this, int a2, unsigned int *a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 4120:
      __int16 v5 = (const void *)(*(uint64_t (**)(InstrumentState *))(*(void *)this + 80))(this);
      int v6 = v5;
      if (v5) {
        CFRetain(v5);
      }
      *(void *)a3 = v6;
      return;
    case 4121:
    case 4128:
    case 4129:
    case 4133:
    case 4134:
    case 4135:
    case 4137:
    case 4138:
    case 4139:
    case 4141:
    case 4144:
      return;
    case 4122:
      unsigned int v9 = *((_DWORD *)this + 39);
      goto LABEL_25;
    case 4123:
      unsigned int v9 = *((_DWORD *)this + 33);
      goto LABEL_25;
    case 4124:
      float v10 = *((float *)this + 34);
      goto LABEL_36;
    case 4125:
      float v10 = *((float *)this + 32);
      goto LABEL_36;
    case 4126:
      float v10 = *((float *)this + 35) * 200.0;
      goto LABEL_36;
    case 4127:
      unsigned int v9 = *((char *)this + 148);
      goto LABEL_25;
    case 4130:
      unsigned int v9 = *((unsigned __int8 *)this + 150);
      goto LABEL_25;
    case 4131:
      unsigned int v9 = *((_DWORD *)this + 36);
      goto LABEL_25;
    case 4132:
      *(void *)a3 = *((void *)this + 20);
      return;
    case 4136:
      unsigned int v9 = *((char *)this + 149);
      goto LABEL_25;
    case 4140:
      uint64_t v11 = *((void *)this + 29);
      if (((*((void *)this + 30) - v11) & 0x7FFFFFFF8) != 0)
      {
        unint64_t v12 = 0;
        do
        {
          a3[v12] = (***(uint64_t (****)(void))(v11 + 8 * v12))(*(void *)(v11 + 8 * v12));
          ++v12;
          uint64_t v11 = *((void *)this + 29);
        }
        while (v12 < ((unint64_t)(*((void *)this + 30) - v11) >> 3));
      }
      return;
    case 4142:
      unsigned int v9 = *((_DWORD *)this + 31);
LABEL_25:
      *a3 = v9;
      return;
    case 4143:
      uint64_t v13 = (void *)*((void *)this + 14);
      unsigned int v16 = (void *)*v13;
      unsigned int v14 = v13 + 1;
      uint64_t v15 = v16;
      if (v16 != v14)
      {
        int v17 = 0;
        do
        {
          a3[v17] = *((_DWORD *)v15 + 8);
          CFArrayRef v18 = (void *)v15[1];
          if (v18)
          {
            do
            {
              BOOL v19 = v18;
              CFArrayRef v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              BOOL v19 = (void *)v15[2];
              BOOL v20 = *v19 == (void)v15;
              uint64_t v15 = v19;
            }
            while (!v20);
          }
          ++v17;
          uint64_t v15 = v19;
        }
        while (v19 != v14);
      }
      return;
    case 4145:
      float v10 = *((float *)this + 38);
LABEL_36:
      *(float *)a3 = v10;
      return;
    case 4146:
      uint64_t v21 = *((void *)this + 14);
      uint64_t Instance = (SampleManager *)SampleManager::GetInstance(0);
      uint64_t v25 = *(void *)(v21 + 8);
      uint64_t v24 = v21 + 8;
      uint64_t v23 = v25;
      if (!v25) {
        goto LABEL_75;
      }
      unsigned int v26 = *a3;
      uint64_t v27 = v24;
      do
      {
        unsigned int v28 = *(_DWORD *)(v23 + 32);
        BOOL v29 = v28 >= v26;
        if (v28 >= v26) {
          __int16 v30 = (uint64_t *)v23;
        }
        else {
          __int16 v30 = (uint64_t *)(v23 + 8);
        }
        if (v29) {
          uint64_t v27 = v23;
        }
        uint64_t v23 = *v30;
      }
      while (*v30);
      if (v27 == v24 || v26 < *(_DWORD *)(v27 + 32))
      {
LABEL_75:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v42, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          int v44 = "InstrumentManager.cpp";
          __int16 v45 = 1024;
          int v46 = 67;
          __int16 v47 = 2080;
          unsigned int v48 = v42;
          __int16 v49 = 2080;
          int v50 = "InstrumentManager::GetSampleInfo: Sample with that ID not found";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "InstrumentManager::GetSampleInfo: Sample with that ID not found", -10851);
      }
      unint64_t v31 = *(void *)(v27 + 40);
      uint64_t v32 = SampleManager::SearchForSample(Instance, v31);
      if (!v32)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          int v44 = "SampleManager.cpp";
          __int16 v45 = 1024;
          int v46 = 569;
          __int16 v47 = 2048;
          unsigned int v48 = (unsigned char *)v31;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSampleInfo: Sample with ID %llu not found", buf, 0x1Cu);
        }
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v42, 0xFFFFD59D);
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          int v44 = "InstrumentManager.cpp";
          __int16 v45 = 1024;
          int v46 = 68;
          __int16 v47 = 2080;
          unsigned int v48 = v42;
          __int16 v49 = 2080;
          int v50 = "InstrumentManager::GetSampleInfo: Sample missing from sample manager";
          _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        BOOL v41 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v41, "InstrumentManager::GetSampleInfo: Sample missing from sample manager", -10851);
      }
      uint64_t v33 = v32;
      double v34 = *(const void **)(v32 + 32);
      *((void *)a3 + 1) = v34;
      if (v34) {
        CFRetain(v34);
      }
      UInt32 v35 = *(const void **)(v33 + 40);
      *((void *)a3 + 2) = v35;
      if (v35) {
        CFRetain(v35);
      }
      *((void *)a3 + 3) = *(void *)(v33 + 56);
      *((unsigned char *)a3 + 4) = *((void *)a3 + 1) == 0;
      unsigned int v36 = *(_DWORD *)(v33 + 168);
      if (!v36) {
        goto LABEL_60;
      }
      if ((*(unsigned char *)(v33 + 156) & 0x20) != 0)
      {
        unsigned int v37 = 1;
      }
      else
      {
        unsigned int v37 = *(_DWORD *)(v33 + 172);
        if (!v37)
        {
          unsigned int v36 = 0;
          goto LABEL_60;
        }
      }
      v36 /= v37;
LABEL_60:
      *((void *)a3 + 9) = *(void *)(v33 + 184) * *(_DWORD *)(v33 + 172) * v36;
      if ((*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33))
      {
        long long v38 = *(_OWORD *)(v33 + 144);
        long long v39 = *(_OWORD *)(v33 + 160);
        *((void *)a3 + 8) = *(void *)(v33 + 176);
        *((_OWORD *)a3 + 2) = v38;
        *((_OWORD *)a3 + 3) = v39;
      }
      else
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315394;
          int v44 = "Sample.cpp";
          __int16 v45 = 1024;
          int v46 = 84;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  Description request on unloaded Sample", buf, 0x12u);
        }
        __break(1u);
      }
      return;
    default:
      if (a2 == 4230)
      {
        uint64_t v7 = *((void *)this + 26);
        if (((*((void *)this + 27) - v7) & 0x7FFFFFFF8) != 0)
        {
          unint64_t v8 = 0;
          do
          {
            a3[v8] = (***(uint64_t (****)(void))(v7 + 8 * v8))(*(void *)(v7 + 8 * v8));
            ++v8;
            uint64_t v7 = *((void *)this + 26);
          }
          while (v8 < ((unint64_t)(*((void *)this + 27) - v7) >> 3));
        }
      }
      return;
  }
}

void sub_21BA8DB4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t InstrumentState::ResetToDefaults(InstrumentState *this, int a2)
{
  *((unsigned char *)this + 48) = 1;
  (*(void (**)(InstrumentState *, __CFString *, uint64_t))(*(void *)this + 72))(this, @"Default Instrument", 1);
  *((void *)this + 15) = 0x4A00000000;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = -1;
  *((_WORD *)this + 74) = 0;
  *((unsigned char *)this + 150) = 1;
  *((_DWORD *)this + 39) = -1;
  *((_WORD *)this + 92) = 0;
  *((unsigned char *)this + 200) = -1;
  if (a2)
  {
    (*(void (**)(InstrumentState *, void))(*(void *)this + 64))(this, 0);
    float v4 = (void **)*((void *)this + 29);
    __int16 v5 = (void **)*((void *)this + 30);
    while (v4 != v5)
    {
      int v6 = *v4++;
      LayerState::UnregisterConnections(v6);
    }
    uint64_t v7 = (_DWORD **)*((void *)this + 26);
    unint64_t v8 = (_DWORD **)*((void *)this + 27);
    if (v7 != v8)
    {
      do
      {
        if (*v7) {
          SamplerState::Unref(*v7);
        }
        ++v7;
      }
      while (v7 != v8);
      uint64_t v7 = (_DWORD **)*((void *)this + 26);
    }
    *((void *)this + 27) = v7;
    unsigned int v9 = (_DWORD **)*((void *)this + 29);
    float v10 = (_DWORD **)*((void *)this + 30);
    if (v9 != v10)
    {
      do
      {
        if (*v9) {
          SamplerState::Unref(*v9);
        }
        ++v9;
      }
      while (v9 != v10);
      unsigned int v9 = (_DWORD **)*((void *)this + 29);
    }
    *((void *)this + 30) = v9;
    InstrumentState::Initialize((InstrumentManager **)this);
  }
  uint64_t v11 = *(uint64_t (**)(InstrumentState *, uint64_t, void))(*(void *)this + 112);

  return v11(this, 4142, 0);
}

void InstrumentState::Initialize(InstrumentManager **this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315650;
    int v3 = "InstrumentState.cpp";
    __int16 v4 = 1024;
    int v5 = 102;
    __int16 v6 = 2048;
    uint64_t v7 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Initialize(%p)", (uint8_t *)&v2, 0x1Cu);
  }
  InstrumentManager::AddDefaultSamples(this[14]);
  (*((void (**)(InstrumentManager **, uint64_t, void))*this + 14))(this, 4143, 0);
  operator new();
}

void sub_21BA8DF78(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40FFC326B0);
  _Unwind_Resume(a1);
}

void InstrumentState::InstrumentState(InstrumentState *this, int a2, SamplerState *a3, InstrumentManager *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  SamplerState::SamplerState(this, 4, a2, a3, 1u);
  __int16 v6 = (void (**)(InstrumentState *, __CFString *, uint64_t))&unk_26CBAB7B8;
  *(void *)uint64_t v7 = &unk_26CBAB7B8;
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = a4;
  *(void *)(v7 + 120) = 0x4A00000000;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 144) = -1;
  *(_WORD *)(v7 + 148) = 0;
  *(unsigned char *)(v7 + 150) = 1;
  *(void *)(v7 + 152) = 0xFFFFFFFF00000000;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 168) = -1;
  *(void *)(v7 + 176) = 0;
  *(_WORD *)(v7 + 184) = 0;
  *(void *)(v7 + 192) = 0;
  *(unsigned char *)(v7 + 200) = -1;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315906;
    unsigned int v9 = "InstrumentState.cpp";
    __int16 v10 = 1024;
    int v11 = 82;
    __int16 v12 = 2048;
    uint64_t v13 = this;
    __int16 v14 = 1024;
    int v15 = 256;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::InstrumentState(%p): [%u bytes]", (uint8_t *)&v8, 0x22u);
    __int16 v6 = *(void (***)(InstrumentState *, __CFString *, uint64_t))this;
  }
  v6[9](this, @"Default Instrument", 1);
}

void sub_21BA8E160(_Unwind_Exception *a1)
{
  int v5 = (void *)*((void *)v1 + 29);
  if (v5)
  {
    *((void *)v1 + 30) = v5;
    operator delete(v5);
  }
  __int16 v6 = *v2;
  if (*v2)
  {
    *((void *)v1 + 27) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *((void *)v1 + 12) = v7;
    operator delete(v7);
  }
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

uint64_t MemoryStream::GetLength(MemoryStream *this)
{
  return *((void *)this + 3);
}

uint64_t TStream::ReadAsync()
{
  return 4294967292;
}

void MappedMemoryStream::~MappedMemoryStream(MappedMemoryStream *this)
{
  MappedMemoryStream::~MappedMemoryStream(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBAD1A8;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    munmap(v2, *((void *)this + 3));
    *((void *)this + 6) = 0;
    *((void *)this + 2) = 0;
  }

  MemoryStream::~MemoryStream(this);
}

uint64_t AUDelay::Version(AUDelay *this)
{
  return 0x10000;
}

void AUDelay::NewKernel(AUDelay *this)
{
}

void sub_21BA8E328(_Unwind_Exception *a1)
{
  if (*(void *)v2)
  {
    free(*(void **)v2);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
  }
  MEMORY[0x21D497F90](v1, 0x10A1C40FC27F72CLL);
  _Unwind_Resume(a1);
}

void AUDelay::DelayKernel::Process(AUDelay::DelayKernel *this, float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  __int16 v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v13 = ausdk::AUElement::GetParameter(v12, 1u);
  __int16 v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v15 = ausdk::AUElement::GetParameter(v14, 2u);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v17 = ausdk::AUElement::GetParameter(v16, 3u);
  if (v17 < 10.0) {
    float v17 = 10.0;
  }
  if (v17 > 24000.0) {
    float v17 = 24000.0;
  }
  float v18 = (v17 + v17)
      / *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0) + 80);
  float v19 = 0.0001;
  if (v13 >= 0.0001) {
    float v19 = v13;
  }
  if (v19 > 2.0) {
    float v19 = 2.0;
  }
  int v20 = (int)(*(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0) + 80)
            * v19);
  if (v20 <= 1) {
    int v20 = 1;
  }
  int v21 = *((_DWORD *)this + 15);
  if (v20 >= v21) {
    int v20 = v21 - 1;
  }
  float v22 = v15 * 0.01;
  if (v22 < -0.999) {
    float v22 = -0.999;
  }
  if (v22 <= 0.999) {
    float v23 = v22;
  }
  else {
    float v23 = 0.999;
  }
  int v24 = *((_DWORD *)this + 13);
  int v25 = (v24 + v21 - v20) % v21;
  *((_DWORD *)this + 12) = v25;
  float v26 = 1.0;
  if (v18 <= 1.0) {
    float v26 = v18;
  }
  double v27 = exp(v26 * -3.14159265);
  float v28 = *((float *)this + 14);
  if (a4)
  {
    float v29 = Parameter * 0.01;
    float v30 = 1.0 - v27;
    float v31 = sqrtf(v29);
    float v32 = sqrt(1.0 - v29);
    uint64_t v33 = *((void *)this + 4);
    unint64_t v34 = a4 + 1;
    float v35 = 0.0;
    do
    {
      float v36 = *a2++;
      float v37 = *(float *)(v33 + 4 * v25);
      int v25 = (v25 + 1) % v21;
      float v38 = v28 * v30;
      float v28 = (float)(v28 + v37) - (float)(v28 * v30);
      *(float *)(v33 + 4 * v24) = v36 + (float)(v38 * v23);
      int v24 = (v24 + 1) % v21;
      float v39 = (float)(v31 * v38) + (float)(v32 * v36);
      float v40 = -v39;
      if (v39 >= 0.0) {
        float v40 = v39;
      }
      if (v40 > v35) {
        float v35 = v40;
      }
      *a3++ = v39;
      --v34;
    }
    while (v34 > 1);
    *((_DWORD *)this + 12) = v25;
    *((_DWORD *)this + 13) = v24;
    if (v35 > 0.000001) {
      *a5 = 0;
    }
  }
  *((float *)this + 14) = v28;
}

void AUDelay::DelayKernel::Reset(AUDelay::DelayKernel *this)
{
  *((_DWORD *)this + 14) = 0;
  bzero(*((void **)this + 4), *((unsigned int *)this + 10));
}

void AUDelay::DelayKernel::~DelayKernel(AUDelay::DelayKernel *this)
{
  *(void *)this = &unk_26CBB2148;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    free(v1);
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }

  JUMPOUT(0x21D497F90);
}

{
  void *v1;
  char *v2;

  *(void *)this = &unk_26CBB2148;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    free(v1);
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
}

BOOL AUDelay::StreamFormatWritable(AUDelay *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDelay::SupportsTail(AUDelay *this)
{
  return 1;
}

void AUDelay::GetTailTime(AUDelay *this)
{
  uint64_t v1 = (AUDelay *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDelay *)((char *)this + 32), 0);
  ausdk::AUElement::GetParameter(Element, 1u);
  int v3 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v1, 0);
  float Parameter = ausdk::AUElement::GetParameter(v3, 2u);
  int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v1, 0);
  if (ausdk::AUElement::GetParameter(v5, 0) * 0.01 != 0.0)
  {
    double v6 = -(Parameter * 0.01);
    if (Parameter * 0.01 >= 0.0) {
      double v6 = Parameter * 0.01;
    }
    if (v6 < 1.0 && v6 != 0.0) {
      log(v6);
    }
  }
}

float AUDelay::GetParameterInfo(AUDelay *this, int a2, int a3, AudioUnitParameterInfo *buffer, double a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (!a2)
  {
    LODWORD(a5) = 1741029152;
    v15[0] = xmmword_2643B9788;
    v15[1] = *(_OWORD *)&off_2643B9798;
    if (!LocalizeAUParameterStringsForClass<AUDelay>(std::initializer_list<__CFString const**>)::sLocalized) {
      LocalizeAUParameterStringsForClass<AUDelay>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v15, 4);
    }
    switch(a3)
    {
      case 0:
        CFStringRef v8 = (const __CFString *)kDryWetMix_Name;
        buffer->cfNameString = (CFStringRef)kDryWetMix_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_EqualPowerCrossfade;
        a5 = 5.27765581e13;
        goto LABEL_9;
      case 1:
        CFStringRef v9 = (const __CFString *)kDelayTime_Name;
        buffer->cfNameString = (CFStringRef)kDelayTime_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Seconds;
        LODWORD(a5) = 953267991;
        *(void *)&buffer->minCFNumberRef Value = 0x4000000038D1B717;
        AudioUnitParameterOptions v10 = buffer->flags + 25165824;
        buffer->defaultCFNumberRef Value = 1.0;
        buffer->AudioUnitParameterOptions flags = v10;
        break;
      case 2:
        CFStringRef v11 = (const __CFString *)kFeedback_Name;
        buffer->cfNameString = (CFStringRef)kFeedback_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Percent;
        a5 = 5.23367857e13;
LABEL_9:
        *(double *)&buffer->minCFNumberRef Value = a5;
        buffer->defaultCFNumberRef Value = 50.0;
        break;
      case 3:
        CFStringRef v12 = (const __CFString *)kLopassCutoff_Name;
        buffer->cfNameString = (CFStringRef)kLopassCutoff_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
        *(void *)&buffer->unit = 0x4120000000000008;
        a5 = *(double *)(ausdk::AUScope::SafeGetElement((AUDelay *)((char *)this + 128), 0) + 80) * 0.5;
        AudioUnitParameterOptions v13 = buffer->flags + 0x400000;
        buffer->defaultCFNumberRef Value = 15000.0;
        buffer->AudioUnitParameterOptions flags = v13;
        if (a5 > 24000.0) {
          a5 = 24000.0;
        }
        *(float *)&a5 = a5;
        buffer->maxCFNumberRef Value = *(AudioUnitParameterValue *)&a5;
        break;
      default:
        return *(float *)&a5;
    }
  }
  return *(float *)&a5;
}

uint64_t AUDelay::GetProperty(AUDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 != 57 || a3)
  {
    if (a3) {
      return 4294956417;
    }
    if (a2 == 29)
    {
      CFStringRef v9 = (unsigned __int8 *)this + 554;
    }
    else
    {
      if (a2 != 21) {
        return 4294956417;
      }
      CFStringRef v9 = (unsigned __int8 *)this + 552;
    }
    uint64_t result = 0;
    *a5 = *v9;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 1);
  do
  {
    int v7 = overviewParameterIDs[v5];
    *(void *)a5 = v6;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v7;
    ++v5;
    a5 += 6;
  }
  while (v5 != 4);
  return 0;
}

uint64_t AUDelay::GetPropertyInfo(AUDelay *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 57 || a3)
  {
    if (a2 != 56 || a3)
    {
      if (a3 || (a2 | 8) != 0x1D)
      {
        return 4294956417;
      }
      else
      {
        uint64_t result = 0;
        *a6 = 1;
        *a5 = 4;
      }
    }
    else
    {
      uint64_t result = 0;
      *a5 = 8;
      *a6 = 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *a5 = 96;
    *a6 = 0;
  }
  return result;
}

void AUDelay::~AUDelay(AUDelay *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void *AUDelayFactory()
{
  uint64_t result = malloc_type_malloc(0x290uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDelay>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDelay>::Destruct;
  return result;
}

long double SynthNote::Frequency(SynthNote *this)
{
  double v1 = *((float *)this + 17) + -69.0;
  float v2 = (*(float (**)(void))(**(void **)(*((void *)this + 4) + 232) + 72))(*(void *)(*((void *)this + 4) + 232));
  return exp2((v1 + v2) / 12.0) * 440.0;
}

double SynthNote::Reset(SynthNote *this)
{
  *((void *)this + 6) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  double result = NAN;
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 16) = -1;
  return result;
}

uint64_t LoopReader::TimePitchDispatch1(LoopReader *this, float *a2, LoopReader *a3, void *a4)
{
  return LoopReader::TimePitchCallback(a3, (float *)this, 0, (uint64_t)a2);
}

uint64_t LoopReader::TimePitchCallback(LoopReader *this, float *a2, float *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v7 = *((unsigned __int8 *)this + 160);
  *((unsigned char *)this + 34) = 1;
  CFStringRef v12 = a2;
  AudioUnitParameterOptions v13 = 0;
  if (v7)
  {
    AudioUnitParameterOptions v13 = a3;
    bzero(a2, 4 * a4);
    CFStringRef v9 = a3;
    size_t v10 = 4 * a4;
  }
  else
  {
    size_t v10 = 4 * a4;
    CFStringRef v9 = a2;
  }
  bzero(v9, v10);
  uint64_t result = LoopReader::Read(this, &v12, *((unsigned __int8 *)this + 35), *((double *)this + 18), a4, 1.0, *((_DWORD *)this + 35), *((double *)this + 19));
  *((unsigned char *)this + 34) = 0;
  return result;
}

uint64_t LoopReader::Read(LoopReader *this, float **a2, int a3, double a4, uint64_t a5, double a6, int a7, double a8)
{
  int v13 = *((unsigned __int8 *)this + 160);
  double v14 = *((double *)this + 21);
  double v15 = (*(double (**)(void))(**(void **)this + 32))(*(void *)this);
  double v16 = (*(double (**)(void))(**(void **)this + 32))() * *((double *)this + 23);
  if (v14 * 2048.0 >= v16) {
    double v17 = v16;
  }
  else {
    double v17 = v14 * 2048.0;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)this + 16))();
  if (!result) {
    return result;
  }
  int v19 = result;
  unsigned int v20 = (*(uint64_t (**)(void))(**(void **)this + 16))();
  if (v20 == *((_DWORD *)this + 44))
  {
    unsigned int v21 = *((_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 44) = v20;
    *((double *)this + 3) = *((double *)this + 3)
                          - (double)(int)*((double *)this + 3)
                          + (double)((int)*((double *)this + 3) % (int)v20);
    unsigned int v21 = *((_DWORD *)this + 12) % v20;
    *((_DWORD *)this + 13) %= v20;
  }
  *((_DWORD *)this + 12) = v21 % v19;
  double v22 = (*(double (**)(void))(**(void **)this + 48))();
  *((_DWORD *)this + 35) = a7;
  *((double *)this + 18) = a4;
  *((double *)this + 19) = a8;
  double v23 = exp2(v22 / -1200.0);
  (*(void (**)(void))(**(void **)this + 48))();
  unsigned int v291 = a5;
  if (!*((unsigned char *)this + 32))
  {
    int v307 = 0;
    if (a3) {
      int v26 = -1;
    }
    else {
      int v26 = 1;
    }
    *((unsigned char *)this + 35) = a3;
    goto LABEL_21;
  }
  int v25 = *((unsigned __int8 *)this + 33);
  if (a3) {
    int v26 = -1;
  }
  else {
    int v26 = 1;
  }
  *((unsigned char *)this + 35) = a3;
  if (v25 && v24 == 0.0)
  {
    int v307 = 0;
    goto LABEL_21;
  }
  if (*((unsigned char *)this + 34))
  {
    int v307 = 1;
LABEL_21:
    double v27 = *((double *)this + 5);
    (*(void (**)(void))(**(void **)this + 48))();
    if (*((unsigned char *)this + 32) && (!*((unsigned char *)this + 33) || v28 != 0.0)) {
      (*(void (**)(void))(**(void **)this + 32))();
    }
    uint64_t v308 = (*(uint64_t (**)(void, void))(**(void **)this + 24))(*(void *)this, 0);
    if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)this + 24))(*(void *)this, 1);
      if (!a5) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!a5) {
        return result;
      }
    }
    unsigned int v297 = v17;
    double v29 = v14 * 512.0;
    double v30 = v23 * a4;
    double v31 = 1.0 / sqrt(v30);
    if (v30 <= 1.0) {
      double v31 = 1.0;
    }
    double v32 = v31 * 0.08;
    BOOL v55 = v31 < 0.5;
    double v33 = 0.04;
    if (!v55) {
      double v33 = v32;
    }
    unint64_t v34 = *a2;
    float v35 = a2[1];
    double v36 = (a8 + a8) * 0.8 + 0.2;
    if (v30 <= 1.0) {
      double v33 = 0.06;
    }
    double v37 = v36 * v33;
    double v38 = v15 * (v36 * v33);
    double v39 = 0.5;
    if (v30 <= 1.0) {
      int v40 = 0;
    }
    else {
      int v40 = (int)((v30 + -1.0) * (double)v26 * (double)(int)v38);
    }
    if (v19 >= 0) {
      int v41 = v19;
    }
    else {
      int v41 = v19 + 1;
    }
    int v304 = -(v41 >> 1);
    int v305 = v40;
    int v303 = v41 >> 1;
    int v42 = v19 - 1;
    int v43 = *((_DWORD *)this + 12);
    if (a8 <= 0.5) {
      double v44 = 1.0;
    }
    else {
      double v44 = a8 + a8;
    }
    double v287 = v44;
    BOOL v45 = v30 > 0.9 && v30 < 1.0;
    BOOL v286 = v45;
    double v285 = v30 * 0.3 * v30;
    unsigned int v46 = a5;
    int v284 = v26;
    double v300 = v37;
    uint64_t v306 = result;
    double v282 = v30;
    double v283 = v14 * 512.0;
    while (1)
    {
      unsigned int v310 = v46;
      (*(void (**)(void))(**(void **)this + 48))();
      if (!*((unsigned char *)this + 32) || *((unsigned char *)this + 33) && v47 == 0.0)
      {
        int v48 = 0;
      }
      else
      {
        double v49 = *((double *)this + 1);
        int v48 = (int)(v49 * (*(double (**)(void))(**(void **)this + 32))());
        v43 += v48;
      }
      unsigned int v46 = v310;
      int v309 = (v305 + (int)(*((double *)this + 3) + v39 + v30 * (double)(int)(a5 - v310))) % v19;
      int v50 = v309 - *((_DWORD *)this + 12);
      if (v50 <= v303) {
        int v51 = 0;
      }
      else {
        int v51 = v19;
      }
      if (v50 >= v304) {
        int v52 = -v51;
      }
      else {
        int v52 = v19;
      }
      int v53 = v50 + v52;
      if (v53 >= 0) {
        int v54 = v53;
      }
      else {
        int v54 = -v53;
      }
      BOOL v55 = v30 < 1.0;
      if (v30 > 1.0) {
        BOOL v55 = v53 * v26 > 0 || v30 < 1.0;
      }
      if (!v55 && (v30 != 1.0 || v29 >= (double)v54)) {
        break;
      }
      int v56 = v48;
      *((double *)this + 23) = v37;
      int v57 = (*(uint64_t (**)(void))(**(void **)this + 16))();
      unsigned int v58 = *((_DWORD *)this + 14);
      BOOL v59 = v58 == 0;
      int v60 = *((_DWORD *)this + 12);
      if (v58)
      {
        int v61 = v307;
        uint64_t v62 = v308;
        uint64_t result = v306;
        int v42 = v19 - 1;
        unsigned int v46 = v310;
        int v48 = v56;
        uint64_t v63 = (double *)&unk_21BAB5000;
        unsigned int v64 = (void *)&unk_267C60000;
        BOOL v65 = (void *)&unk_267C60000;
        unsigned int v66 = (void *)&unk_267C60000;
        goto LABEL_113;
      }
      int v67 = v57;
      *((_DWORD *)this + 13) = v60;
      (*(void (**)(void))(**(void **)this + 48))();
      if (*((unsigned char *)this + 32) && v68 != 0.0)
      {
        double v69 = *((double *)this + 1);
        *((_DWORD *)this + 13) += (int)(v69 * (*(double (**)(void))(**(void **)this + 32))());
        if ((*(unsigned int (**)(void))(**(void **)this + 16))()) {
          int v70 = *((_DWORD *)this + 13) % v67;
        }
        else {
          int v70 = 0;
        }
        *((_DWORD *)this + 13) = v70;
      }
      double v71 = (*(double (**)(void))(**(void **)this + 32))();
      double v72 = *((double *)this + 19);
      if (v72 <= v39) {
        double v73 = 1.0;
      }
      else {
        double v73 = v72 + v72;
      }
      double v74 = *((double *)this + 21) * v73;
      double v75 = (*(double (**)(void))(**(void **)this + 32))() * *((double *)this + 23);
      double v76 = v74 * 2048.0;
      if (v74 * 2048.0 >= v75) {
        double v76 = v75;
      }
      double v77 = v74 * 4096.0;
      if (v74 * 4096.0 >= v75) {
        double v77 = v75;
      }
      signed int v78 = (v67 + v309 - *((_DWORD *)this + 13)) % v67;
      if (v67 >= 0) {
        int v79 = v67;
      }
      else {
        int v79 = v67 + 1;
      }
      int v80 = -(v79 >> 1);
      if (v67 >= 0) {
        int v81 = v67;
      }
      else {
        int v81 = v67 + 1;
      }
      if (v78 <= v81 >> 1) {
        int v82 = 0;
      }
      else {
        int v82 = v67;
      }
      unsigned int v83 = v78 - v82;
      if (v78 < v80) {
        unsigned int v58 = v78 + v67;
      }
      else {
        unsigned int v58 = v83;
      }
      double v84 = *((double *)this + 18);
      if (v84 <= 1.0)
      {
        double v87 = v71 * v300;
        double v37 = v300;
        unsigned int v58 = (int)v87;
        int v61 = v307;
        uint64_t v62 = v308;
        uint64_t result = v306;
        int v42 = v19 - 1;
        unsigned int v46 = v310;
      }
      else
      {
        double v85 = v84 + -1.0;
        if (v84 < 1.1) {
          double v85 = 0.1;
        }
        double v86 = v76 / v85;
        if (v86 > v77) {
          double v86 = v77;
        }
        if ((int)v58 <= (int)v86) {
          unsigned int v58 = (int)v86;
        }
        int v61 = v307;
        uint64_t v62 = v308;
        uint64_t result = v306;
        int v42 = v19 - 1;
        unsigned int v46 = v310;
        double v37 = v300;
      }
      int v48 = v56;
      uint64_t v63 = (double *)&unk_21BAB5000;
      unsigned int v64 = (void *)&unk_267C60000;
      BOOL v65 = (void *)&unk_267C60000;
      unsigned int v66 = (void *)&unk_267C60000;
      if (v58 >= 0x1000) {
        unsigned int v58 = 4096;
      }
      *((_DWORD *)this + 14) = v58;
      *((_DWORD *)this + 15) = v58;
      *((double *)this + 9) = 1.0 / (double)v58;
      *((void *)this + 8) = 0;
      *((_DWORD *)this + 12) = v309;
      *((double *)this + 24) = v84;
      BOOL v59 = 1;
      int v60 = v309;
      if (!v58) {
        goto LABEL_110;
      }
LABEL_112:
      if (!v58) {
        goto LABEL_418;
      }
LABEL_113:
      int v88 = *((_DWORD *)this + 13);
      unsigned int v89 = *((_DWORD *)this + 20);
      if (v89 >= v46) {
        int v90 = v46;
      }
      else {
        int v90 = *((_DWORD *)this + 20);
      }
      *((_DWORD *)this + 20) = v89 - v90;
      if (v30 >= 1.0)
      {
        if (v30 > 1.0)
        {
          char v91 = !v59;
          if (!*((unsigned char *)this + 200)) {
            char v91 = 1;
          }
          if ((v91 & 1) == 0 && !v90)
          {
LABEL_126:
            if (v58 != *((_DWORD *)this + 15)) {
              goto LABEL_381;
            }
            int v296 = v48;
            int v298 = *((unsigned __int8 *)this + 160);
            double v92 = (*(double (**)(void))(**(void **)this + 32))();
            double v289 = *((double *)this + 21);
            double v93 = v287 * v289;
            double v94 = (*(double (**)(void))(**(void **)this + 32))();
            double v95 = v94 * *((double *)this + 23);
            if (v287 * v289 * 512.0 >= v95) {
              double v96 = v94 * *((double *)this + 23);
            }
            else {
              double v96 = v93 * 512.0;
            }
            if (v93 * 700.0 >= v95) {
              double v97 = v94 * *((double *)this + 23);
            }
            else {
              double v97 = v93 * 700.0;
            }
            if (v93 * 1024.0 >= v95) {
              double v98 = v94 * *((double *)this + 23);
            }
            else {
              double v98 = v93 * 1024.0;
            }
            double v292 = v94 * *((double *)this + 23);
            if (v93 * 2048.0 >= v95) {
              double v99 = v94 * *((double *)this + 23);
            }
            else {
              double v99 = v93 * 2048.0;
            }
            unsigned int v100 = (int)v98;
            double v101 = (double)*((int *)this + 28);
            double v102 = *((double *)this + 15) + (v101 - *((double *)this + 15)) * v285;
            *((double *)this + 15) = v102;
            double v103 = v102 / v97;
            if (v102 / v97 < 1.0) {
              double v97 = v102 / v97 * (v102 / v97 * (v97 * (v102 / v97)));
            }
            int v104 = (int)v96;
            int v105 = (int)v96;
            if (v99 < v101) {
              goto LABEL_154;
            }
            double v106 = v102 / v98;
            double v107 = v106 * (v98 * v106);
            if (v106 >= 1.0) {
              double v107 = v98;
            }
            int v108 = (int)(v106 * v107 + v106 * v107);
            int v109 = *((_DWORD *)this + 14);
            int v110 = v109 <= v108 ? 0 : (int)(v106 * v107 + v106 * v107);
            unsigned int v111 = v109 - v110;
            int v104 = v109 - v110 <= v100 ? (int)v98 : v109 - v110;
            BOOL v161 = v109 <= v108;
            int v105 = (int)((a8 + a8) * 0.035 * v92);
            if (!v161 || v111 < v100) {
LABEL_154:
            }
              *((_DWORD *)this + 14) = v104;
            if (v286) {
              *((_DWORD *)this + 14) = 4 * v104;
            }
            int v113 = v105 - (int)(v103 * v97 + v103 * v97);
            double v295 = v98;
            int v114 = (int)(v98 / *((double *)this + 12));
            if (v114 >= (int)v100) {
              int v114 = (int)v98;
            }
            if (v113 <= v114) {
              int v113 = v114;
            }
            if (v113 <= (int)v96) {
              unsigned int v115 = (int)v96;
            }
            else {
              unsigned int v115 = v113;
            }
            if (*((_DWORD *)this + 34) == 1 || *((double *)this + 13) > 1.4) {
              unsigned int v115 = (v115 + v100) >> 1;
            }
            unsigned int v294 = (int)v98;
            int v116 = (*(uint64_t (**)(void))(**(void **)this + 16))();
            uint64_t v117 = (*(uint64_t (**)(void, void))(**(void **)this + 24))(*(void *)this, 0);
            int v118 = v298;
            uint64_t v290 = v117;
            if (v298)
            {
              uint64_t v119 = (*(uint64_t (**)(void, uint64_t))(**(void **)this + 24))(*(void *)this, 1);
              uint64_t v120 = v290;
              int v118 = v298;
            }
            else
            {
              uint64_t v120 = v117;
              uint64_t v119 = 0;
            }
            unsigned int v121 = v115;
            int v122 = v115;
            if (a7 != -1)
            {
              int v123 = v115 - a7 + v88;
              if (v116 >= 0) {
                int v124 = v116;
              }
              else {
                int v124 = v116 + 1;
              }
              int v125 = -(v124 >> 1);
              if (v116 >= 0) {
                int v126 = v116;
              }
              else {
                int v126 = v116 + 1;
              }
              if (v123 <= v126 >> 1) {
                int v127 = 0;
              }
              else {
                int v127 = v116;
              }
              int v128 = v123 - v127;
              if (v123 < v125) {
                int v129 = v123 + v116;
              }
              else {
                int v129 = v128;
              }
              int v130 = (int)(-v96 / v30);
              int v131 = v130 - v129 + v115;
              if (v131 < 0) {
                int v131 = 4;
              }
              if (v130 >= v129) {
                int v122 = v115;
              }
              else {
                int v122 = v131;
              }
            }
            if (a3) {
              int v132 = -v122;
            }
            else {
              int v132 = 0;
            }
            if (a3) {
              int v133 = 0;
            }
            else {
              int v133 = v122;
            }
            double v134 = *((double *)this + 11);
            int v135 = (v88 + v132) % v116;
            float v136 = *(float *)(v120 + 4 * v135);
            if (v118) {
              float v136 = v136 + *(float *)(v119 + 4 * v135);
            }
            float v137 = 0.0;
            double v280 = v96;
            int v288 = v122;
            int v138 = 0;
            if (v132 >= v133)
            {
              float v140 = 1.0;
              float v142 = 0.0;
              float v139 = 0.0;
            }
            else
            {
              float v139 = 0.0;
              float v140 = 1.0;
              double v141 = *((double *)this + 11);
              float v142 = 0.0;
              do
              {
                int v143 = (v88 + v132) % v116;
                float v144 = 0.0;
                if (v118) {
                  float v144 = *(float *)(v119 + 4 * v143);
                }
                float v145 = *(float *)(v120 + 4 * v143) + v144;
                double v141 = v141 + ((float)(v145 * v145) - v141) * 0.002;
                BOOL v146 = v145 < 0.0;
                if (v145 < 0.0) {
                  float v145 = -v145;
                }
                float v147 = -1.0;
                if (!v146) {
                  float v147 = 1.0;
                }
                if (v145 > v142)
                {
                  float v142 = v145;
                  int v138 = v132;
                  float v140 = v147;
                }
                float v148 = v145 - v136;
                if (v148 < 0.0) {
                  float v148 = -v148;
                }
                if (v148 > v139) {
                  float v139 = v148;
                }
                ++v132;
                float v136 = v145;
              }
              while (v133 != v132);
              *((double *)this + 11) = v141;
            }
            int v149 = 0;
            if (a3) {
              int v150 = 0;
            }
            else {
              int v150 = -v121;
            }
            if (a3) {
              int v151 = v121;
            }
            else {
              int v151 = 0;
            }
            if (v150 < v151)
            {
              int v149 = 0;
              float v137 = 0.0;
              do
              {
                int v152 = ((v116 + v60 + (int)(v30 * (double)v138)) % v116 + v116 + v150) % v116;
                float v153 = 0.0;
                if (v118) {
                  float v153 = *(float *)(v119 + 4 * v152);
                }
                float v154 = v140 * (float)(*(float *)(v120 + 4 * v152) + v153);
                if (v154 > v137)
                {
                  float v137 = v154;
                  int v149 = v150;
                }
                ++v150;
              }
              while (v151 != v150);
            }
            int v293 = (v116 + v60 + (int)(v30 * (double)v138)) % v116;
            uint64_t v281 = v119;
            double v155 = (float)(v137 / v142);
            double v156 = log2(v142 / sqrt(v134));
            double v157 = 1.0 / v155;
            if ((float)(v137 / v142) >= 1.0) {
              double v157 = (float)(v137 / v142);
            }
            int v158 = (float)(v139 / v142) > 0.5;
            if ((float)(v139 / v142) < 0.2) {
              int v158 = -1;
            }
            int v159 = v156 > 2.2;
            if (v156 > 4.0) {
              int v159 = 2;
            }
            int v160 = v159 + v158;
            if (v155 < 0.714285714) {
              ++v160;
            }
            *((double *)this + 12) = v156;
            *((double *)this + 13) = v157;
            *((_DWORD *)this + 34) = v160;
            BOOL v161 = a8 >= 0.75 || v160 <= 1;
            int v162 = !v161;
            *((unsigned char *)this + 84) = v162;
            unsigned int v58 = *((_DWORD *)this + 14);
            if (v149 < 1)
            {
              int v165 = v293;
              unsigned int v166 = v294;
              uint64_t result = v306;
              double v30 = v282;
              double v29 = v283;
              unsigned int v46 = v310;
              double v39 = 0.5;
              int v48 = v296;
              uint64_t v63 = (double *)&unk_21BAB5000;
              unsigned int v64 = &unk_267C60000;
              BOOL v65 = &unk_267C60000;
              unsigned int v66 = &unk_267C60000;
              double v167 = v295;
              if (v58 < v294) {
                goto LABEL_249;
              }
            }
            else
            {
              BOOL v163 = __OFSUB__(v58, v149);
              int v164 = v58 - v149;
              int v165 = v293;
              if ((v164 < 0) ^ v163 | (v164 == 0)) {
                int v164 = v294;
              }
              if (v164 <= v294) {
                unsigned int v166 = v294;
              }
              else {
                unsigned int v166 = v164;
              }
              uint64_t result = v306;
              double v30 = v282;
              double v29 = v283;
              unsigned int v46 = v310;
              double v39 = 0.5;
              int v48 = v296;
              uint64_t v63 = (double *)&unk_21BAB5000;
              unsigned int v64 = (void *)&unk_267C60000;
              BOOL v65 = (void *)&unk_267C60000;
              unsigned int v66 = (void *)&unk_267C60000;
              double v167 = v295;
LABEL_249:
              *((_DWORD *)this + 14) = v166;
              unsigned int v58 = v166;
            }
            int v90 = v138 - (v138 > 0);
            int v60 = (v149 + v116 + v165) % v116;
            int v168 = v90 + v116 + v88;
            int v169 = (v168 - v60) % v116;
            if (v116 >= 0) {
              int v170 = v116;
            }
            else {
              int v170 = v116 + 1;
            }
            int v171 = -(v170 >> 1);
            if (v116 >= 0) {
              int v172 = v116;
            }
            else {
              int v172 = v116 + 1;
            }
            if (v169 <= v172 >> 1) {
              int v173 = 0;
            }
            else {
              int v173 = v116;
            }
            int v174 = v169 - v173;
            if (v169 < v171) {
              int v175 = v169 + v116;
            }
            else {
              int v175 = v174;
            }
            int v176 = v309 - v88;
            if (v309 - v88 >= v171)
            {
              if (v116 >= 0) {
                int v178 = v116;
              }
              else {
                int v178 = v116 + 1;
              }
              if (v176 <= v178 >> 1) {
                int v179 = 0;
              }
              else {
                int v179 = v116;
              }
              int v177 = v176 - v179;
            }
            else
            {
              int v177 = v176 + v116;
            }
            LODWORD(a5) = v291;
            int v26 = v284;
            if ((double)v177 > -v167 && v167 > (double)v177)
            {
              if (v289 * 128.0 <= (double)v288) {
                int v162 = 1;
              }
              if (v162 == 1)
              {
                int v180 = *((_DWORD *)this + 32);
                double v181 = (double)v180;
                if (v167 >= (double)v180)
                {
                  int v186 = v60;
                  double v37 = v300;
                  double v191 = v292;
                  double v190 = v287 * v289;
                  goto LABEL_340;
                }
                if ((float)(v142 - v137) >= 0.0) {
                  double v182 = (float)(v142 - v137);
                }
                else {
                  double v182 = -(float)(v142 - v137);
                }
                int v183 = (v168 - v180) % v116;
                float v184 = *(float *)(v290 + 4 * v183);
                if (v298)
                {
                  float v184 = v184 + *(float *)(v281 + 4 * v183);
                  if (v175 >= 0) {
                    int v185 = v175;
                  }
                  else {
                    int v185 = v175 + 1;
                  }
                  int v186 = (v168 - (v185 >> 1)) % v116;
                  float v187 = *(float *)(v290 + 4 * v186) + *(float *)(v281 + 4 * v186);
                  int v188 = (int)(((int)(((unint64_t)(1431655765 * v175) >> 32) - v175) >> 1)
                             + ((((unint64_t)(1431655765 * v175) >> 32) - v175) >> 31)
                             + v168)
                       % v116;
                  float v189 = *(float *)(v290 + 4 * v188) + *(float *)(v281 + 4 * v188);
                }
                else
                {
                  if (v175 >= 0) {
                    int v192 = v175;
                  }
                  else {
                    int v192 = v175 + 1;
                  }
                  int v186 = (v168 - (v192 >> 1)) % v116;
                  float v187 = *(float *)(v290 + 4 * v186);
                  int v188 = (int)(((int)(((unint64_t)(1431655765 * v175) >> 32) - v175) >> 1)
                             + ((((unint64_t)(1431655765 * v175) >> 32) - v175) >> 31)
                             + v168)
                       % v116;
                  float v189 = *(float *)(v290 + 4 * v188);
                }
                double v191 = v292;
                double v190 = v287 * v289;
                float v193 = v142 - v184;
                if (v193 >= 0.0) {
                  double v194 = v193;
                }
                else {
                  double v194 = -v193;
                }
                float v195 = v142 - v189;
                if (v195 >= 0.0) {
                  double v196 = v195;
                }
                else {
                  double v196 = -v195;
                }
                double v197 = v194 / v182;
                double v198 = (double)v175;
                double v199 = v181 / (double)v175;
                if (v199 < 0.0) {
                  double v199 = v167;
                }
                int v200 = *((unsigned __int8 *)this + 132);
                *((unsigned char *)this + 132) = 0;
                BOOL v202 = v197 < 2.0 && v200 == 0;
                if (v199 >= 0.7) {
                  BOOL v202 = 0;
                }
                if (v197 >= 1.0 && !v202)
                {
                  float v203 = v142 - v187;
                  if (v203 >= 0.0) {
                    double v204 = v203;
                  }
                  else {
                    double v204 = -v203;
                  }
                  BOOL v206 = (v204 / v182 < 2.0 || v157 > 1.5) && v167 < v198;
                  double v37 = v300;
                  if (v206) {
                    goto LABEL_340;
                  }
                  BOOL v207 = v196 / v182 < 2.0 && v280 * 3.0 < v198;
                  int v186 = v188;
                  if (v207) {
                    goto LABEL_340;
                  }
                  BOOL v208 = v157 < 1.2 && v200 == 0;
                  if (!v208
                    || v199 >= 1.0
                    || ((int v209 = (int)(1.0 / v199 + v39), v210 = 1.0 / v199 - (double)v209, v210 > -0.1)
                      ? (BOOL v211 = v209 < 2)
                      : (BOOL v211 = 1),
                        v211))
                  {
                    int v186 = v60;
                    goto LABEL_340;
                  }
                  int v212 = v175 / v209;
                  BOOL v213 = v210 < 0.1 && v280 < (double)v212;
                  int v186 = v60;
                  if (!v213)
                  {
LABEL_340:
                    int v214 = (v168 - v186) % v116;
                    if (v116 >= 0) {
                      int v215 = v116;
                    }
                    else {
                      int v215 = v116 + 1;
                    }
                    if (v214 <= v215 >> 1) {
                      int v216 = 0;
                    }
                    else {
                      int v216 = v116;
                    }
                    int v217 = v214 - v216;
                    if (v214 < v171) {
                      int v218 = v214 + v116;
                    }
                    else {
                      int v218 = v217;
                    }
                    if (v218 < 0) {
                      int v218 = -v218;
                    }
                    *((_DWORD *)this + 32) = v218;
                    int v60 = v186;
                    int v61 = v307;
                    uint64_t v62 = v308;
                    int v42 = v19 - 1;
                    goto LABEL_352;
                  }
                  int v183 = (v168 - v212) % v116;
                }
                *((unsigned char *)this + 132) = 1;
                int v186 = v183;
                double v37 = v300;
                goto LABEL_340;
              }
            }
            int v61 = v307;
            uint64_t v62 = v308;
            int v42 = v19 - 1;
            double v37 = v300;
            double v191 = v292;
            double v190 = v287 * v289;
LABEL_352:
            double v219 = v190 * 4096.0;
            if (v190 * 4096.0 >= v191) {
              double v219 = v191;
            }
            if (v90 < 0) {
              int v90 = -v90;
            }
            if (v58 >= v219) {
              unsigned int v58 = v219;
            }
            *((double *)this + 9) = 1.0 / (double)v58;
            *((_DWORD *)this + 14) = v58;
            *((_DWORD *)this + 15) = v58;
            unsigned int v221 = v90 - v46;
            BOOL v220 = v90 <= (int)v46;
            if (v90 >= (int)v46) {
              int v90 = v46;
            }
            if (v220) {
              unsigned int v221 = 0;
            }
            *((_DWORD *)this + 20) = v221;
          }
        }
      }
      else
      {
        if (v90) {
          BOOL v59 = 0;
        }
        if (v59) {
          goto LABEL_126;
        }
      }
      v46 -= v90;
      if (!v90) {
        goto LABEL_381;
      }
      do
      {
        if (v13) {
          float v222 = *(float *)(result + 4 * v88);
        }
        else {
          float v222 = 0.0;
        }
        float v223 = *(float *)(v62 + 4 * v88);
        int v224 = v88 + v26;
        if (v88 + v26 >= v19) {
          int v224 = 0;
        }
        if (v224 >= 0) {
          int v88 = v224;
        }
        else {
          int v88 = v42;
        }
        if (v61)
        {
          *unint64_t v34 = v223 + *v34;
          if (!v13) {
            goto LABEL_379;
          }
          float v225 = v222 + *v35;
        }
        else
        {
          double v27 = v27 + (a6 - v27) * v63[396];
          float v226 = *v34 + v223 * v27;
          *unint64_t v34 = v226;
          if (!v13) {
            goto LABEL_379;
          }
          float v225 = *v35 + v222 * v27;
        }
        *v35++ = v225;
LABEL_379:
        ++v34;
        --v90;
      }
      while (v90);
      unsigned int v58 = *((_DWORD *)this + 14);
LABEL_381:
      if (v58 >= v46) {
        unsigned int v227 = v46;
      }
      else {
        unsigned int v227 = v58;
      }
      v46 -= v227;
      unsigned int v228 = v58 - v227;
      *((_DWORD *)this + 14) = v58 - v227;
      *((_DWORD *)this + 28) = 0;
      int v229 = v60;
      while (2)
      {
        int v60 = v229;
        if (v227)
        {
          if (v13)
          {
            float v230 = *(float *)(result + 4 * v229);
            v229 += v26;
            if (v229 >= v19) {
              int v229 = 0;
            }
            if (v229 < 0) {
              int v229 = v42;
            }
            float v231 = *(float *)(v62 + 4 * v88);
            float v232 = *(float *)(result + 4 * v88);
          }
          else
          {
            v229 += v26;
            if (v229 >= v19) {
              int v229 = 0;
            }
            if (v229 < 0) {
              int v229 = v42;
            }
            float v231 = *(float *)(v62 + 4 * v88);
            float v230 = 0.0;
            float v232 = 0.0;
          }
          int v233 = v88 + v26;
          if (v88 + v26 >= v19) {
            int v233 = 0;
          }
          if (v233 >= 0) {
            int v88 = v233;
          }
          else {
            int v88 = v42;
          }
          double v234 = *((double *)this + 24);
          uint64_t v235 = v64[260];
          uint64_t v236 = v65[261];
          BOOL v237 = v234 > 1.0;
          if (v234 <= 1.0) {
            uint64_t v236 = v64[260];
          }
          double v238 = *((double *)this + 8);
          signed int v239 = vcvtd_n_s64_f64(v238, 0xCuLL);
          int v240 = 2 * v239;
          if (v237) {
            uint64_t v235 = v66[262];
          }
          double v241 = v238 * 4096.0 - floor(v238 * 4096.0);
          double v242 = *(float *)(v236 + 8 * v239 + 4) + v241 * *(float *)(v236 + 4 * v240);
          double v243 = *(float *)(v235 + 4 * (8193 - 2 * v239)) + (1.0 - v241) * *(float *)(v235 + 4 * (0x2000 - v240));
          float v244 = *(float *)(v62 + 4 * v60);
          double v245 = v238 + *((double *)this + 9);
          *((double *)this + 8) = v245;
          if (v61)
          {
            float v246 = v243 * v231 + v242 * v244 + *v34;
            *unint64_t v34 = v246;
            if (v13)
            {
              double v247 = v243 * v232 + v242 * v230 + *v35;
              goto LABEL_411;
            }
          }
          else
          {
            double v27 = v27 + (a6 - v27) * v63[396];
            float v248 = *v34 + (v243 * v231 + v242 * v244) * v27;
            *unint64_t v34 = v248;
            if (v13)
            {
              double v247 = *v35 + (v243 * v232 + v242 * v230) * v27;
LABEL_411:
              float v249 = v247;
              *v35++ = v249;
            }
          }
          --v227;
          ++v34;
          if (v245 > 1.0)
          {
            if ((int)(v227 + 1) >= 2)
            {
              v46 += v227;
              *((_DWORD *)this + 28) = v228 + v227;
            }
            *((void *)this + 8) = 0x3FF0000000000000;
            *((_DWORD *)this + 13) = v88;
            goto LABEL_417;
          }
          continue;
        }
        break;
      }
      double v250 = *((double *)this + 8);
      *((_DWORD *)this + 13) = v88;
      if (v250 != 1.0) {
        goto LABEL_418;
      }
LABEL_417:
      *((_DWORD *)this + 14) = 0;
      int v60 = v229;
LABEL_418:
      if (v30 == 1.0)
      {
        if (!v46)
        {
LABEL_442:
          *((double *)this + 5) = v27;
          *((_DWORD *)this + 12) = (v19 - v48 + v60) % v19;
          return result;
        }
        double v251 = v63[396];
        while (2)
        {
          if (v13) {
            float v252 = *(float *)(result + 4 * v60);
          }
          else {
            float v252 = 0.0;
          }
          float v253 = *(float *)(v62 + 4 * v60);
          int v254 = v60 + v26;
          if (v60 + v26 >= v19) {
            int v254 = 0;
          }
          if (v254 >= 0) {
            int v60 = v254;
          }
          else {
            int v60 = v42;
          }
          if (v61)
          {
            *unint64_t v34 = v253 + *v34;
            if (v13)
            {
              float v255 = v252 + *v35;
              goto LABEL_437;
            }
          }
          else
          {
            double v27 = v27 + (a6 - v27) * v251;
            float v256 = *v34 + v253 * v27;
            *unint64_t v34 = v256;
            if (v13)
            {
              float v255 = *v35 + v252 * v27;
LABEL_437:
              *v35++ = v255;
            }
          }
          ++v34;
          if (!--v46) {
            goto LABEL_442;
          }
          continue;
        }
      }
      *((double *)this + 5) = v27;
      int v43 = (v19 - v48 + v60) % v19;
      *((_DWORD *)this + 12) = v43;
      if (!v46) {
        return result;
      }
    }
    BOOL v59 = 0;
    int v60 = v43 % v19;
    unsigned int v58 = *((_DWORD *)this + 14);
    int v61 = v307;
    uint64_t v62 = v308;
    uint64_t result = v306;
    uint64_t v63 = (double *)&unk_21BAB5000;
    unsigned int v64 = (void *)&unk_267C60000;
    BOOL v65 = (void *)&unk_267C60000;
    unsigned int v66 = (void *)&unk_267C60000;
    if (v58) {
      goto LABEL_112;
    }
LABEL_110:
    if (v30 != 1.0)
    {
      unsigned int v58 = v297;
      *((_DWORD *)this + 14) = v297;
    }
    goto LABEL_112;
  }
  int v257 = *((unsigned __int8 *)this + 160);
  int v258 = (*(uint64_t (**)(void))(**(void **)this + 16))();
  double v259 = *((double *)this + 5);
  long double v260 = exp2(v22 / 1200.0);
  (*(void (**)(void, double))(**((void **)this + 2) + 56))(*((void *)this + 2), v260);
  v261 = (float *)(*(uint64_t (**)(void, void))(**(void **)this + 40))(*(void *)this, 0);
  if (v257)
  {
    v262 = (float *)(*(uint64_t (**)(void, uint64_t))(**(void **)this + 40))(*(void *)this, 1);
    a5 = *((void *)this + 2);
    int v263 = v26;
    uint64_t v264 = (*(uint64_t (**)(void, void))(**(void **)this + 40))(*(void *)this, 0);
    uint64_t v265 = (*(uint64_t (**)(void, uint64_t))(**(void **)this + 40))(*(void *)this, 1);
    v266 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a5 + 48);
    uint64_t v267 = a5;
    LODWORD(a5) = v291;
    uint64_t v268 = v264;
    int v26 = v263;
    uint64_t result = v266(v267, v268, v265, v291, 1);
  }
  else
  {
    uint64_t v269 = *((void *)this + 2);
    uint64_t v270 = (*(uint64_t (**)(void, void))(**(void **)this + 40))(*(void *)this, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v269 + 40))(v269, v270, a5, 1);
    v262 = 0;
  }
  if (a4 > 0.0)
  {
    double v271 = *((double *)this + 3) + (double)v26 * a4 * (double)a5;
    *((double *)this + 3) = v271;
    double v272 = (double)v258;
    if (v271 < 0.0)
    {
      double v273 = v271 + v272;
LABEL_449:
      *((double *)this + 3) = v273;
      goto LABEL_450;
    }
    if (v271 >= v272)
    {
      double v273 = v271 - v272;
      goto LABEL_449;
    }
  }
LABEL_450:
  if (a5)
  {
    v275 = *a2;
    v274 = a2[1];
    do
    {
      double v259 = v259 + (a6 - v259) * 0.05;
      float v276 = *v261++;
      float v277 = *v275 + v259 * v276;
      *v275++ = v277;
      if (v257)
      {
        float v278 = *v262++;
        float v279 = *v274 + v259 * v278;
        *v274++ = v279;
      }
      LODWORD(a5) = a5 - 1;
    }
    while (a5);
  }
  *((double *)this + 5) = v259;
  return result;
}

uint64_t LoopReader::TimePitchDispatch2(LoopReader *this, float *a2, float *a3, LoopReader *a4, void *a5)
{
  return LoopReader::TimePitchCallback(a4, (float *)this, a2, (uint64_t)a3);
}

double LoopReader::Reset(LoopReader *this)
{
  int v2 = *((unsigned __int8 *)this + 160);
  unsigned int v3 = (*(uint64_t (**)(void))(**(void **)this + 16))(*(void *)this);
  __int16 v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)this + 24))(*(void *)this, 0);
  uint64_t v5 = v4;
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)this + 24))(*(void *)this, 1);
    size_t v7 = 4 * v3;
    bzero(v5, v7);
    __int16 v4 = (void *)v6;
    size_t v8 = v7;
  }
  else
  {
    size_t v8 = 4 * v3;
  }
  bzero(v4, v8);
  uint64_t v9 = *((void *)this + 2);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0x3FF0000000000000;
  *((void *)this + 6) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 88) = xmmword_21BAB6D30;
  *((void *)this + 13) = 0x3FF0000000000000;
  *((_DWORD *)this + 32) = 512;
  *((unsigned char *)this + 132) = 0;
  *((_DWORD *)this + 34) = 0;
  *((unsigned char *)this + 34) = 0;
  *((void *)this + 23) = 0x3FB1EB851EB851ECLL;
  double result = 0.0;
  *((_OWORD *)this + 4) = xmmword_21BAB6D40;
  *((_DWORD *)this + 44) = 0;
  *((unsigned char *)this + 84) = 0;
  return result;
}

void LoopReader::~LoopReader(LoopReader *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    *((void *)this + 2) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    MEMORY[0x21D4977D0](32);
  }
  pthread_mutex_lock(&sInitLocker);
  uint64_t v3 = LoopReader::sFadeTables;
  if (LoopReader::sFadeTables)
  {
    uint64_t v4 = *(void *)(LoopReader::sFadeTables + 8) - 1;
    *(void *)(LoopReader::sFadeTables + 8) = v4;
    if (!v4)
    {
      uint64_t v5 = *(void **)(v3 + 24);
      if (v5) {
        malloc_make_purgeable(v5);
      }
    }
  }
  pthread_mutex_unlock(&sInitLocker);
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

void sub_21BA90944(void *a1)
{
}

double PitchShifter3::GetPitch(PitchShifter3 *this)
{
  return *((double *)this + 1);
}

uint64_t PitchShifter3::GetTempBuffer(PitchShifter3 *this, int a2)
{
  return *((void *)this + 3 * a2 + 10);
}

double PitchShifter3::GetSampleRate(PitchShifter3 *this)
{
  return *((double *)this + 2);
}

uint64_t PitchShifter3::GetBufferData(PitchShifter3 *this, int a2)
{
  return *((void *)this + 3 * a2 + 4);
}

uint64_t PitchShifter3::GetLoopLength(PitchShifter3 *this)
{
  return *((unsigned int *)this + 32);
}

void PitchShifter3::~PitchShifter3(PitchShifter3 *this)
{
  PitchShifter3::~PitchShifter3(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t i;
  char *v3;
  void *v4;
  char *v5;
  void *v6;

  *(void *)this = &unk_26CBAA058;
  LoopReader::~LoopReader((PitchShifter3 *)((char *)this + 152));
  for (unint64_t i = 96; i != 48; i -= 24)
  {
    uint64_t v3 = (char *)this + i;
    uint64_t v4 = *(void **)((char *)this + i);
    if (v4)
    {
      free(v4);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((_DWORD *)v3 + 4) = 0;
    }
  }
  do
  {
    uint64_t v5 = (char *)this + i;
    uint64_t v6 = *(void **)((char *)this + i);
    if (v6)
    {
      free(v6);
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 0;
    }
    i -= 24;
  }
  while (i);
}

uint64_t PitchShifter3::GetNumberOfSourceFrames(PitchShifter3 *this)
{
  if (*((unsigned char *)this + 144))
  {
    double v2 = *((double *)this + 1);
    double v3 = exp2(v2 / 1200.0) / 1.5 * *((double *)this + 42) + -0.005;
    if (v3 < 0.03) {
      double v3 = 0.03;
    }
    double v4 = v3 + 0.01;
    if (v2 >= 0.0) {
      double v4 = v3;
    }
    double v5 = *((double *)this + 2);
    double v6 = v5 * v4;
    double v7 = (double)*((int *)this + 30);
    double v8 = v7 - v6;
    if (v8 < 0.0) {
      double v8 = v8 + (double)*((int *)this + 32);
    }
    double v9 = (double)(int)v8;
    *((double *)this + 22) = v9;
  }
  else
  {
    double v9 = *((double *)this + 22);
    double v5 = *((double *)this + 2);
    double v7 = (double)*((int *)this + 30);
  }
  double v10 = v7 - v9;
  int v11 = *((_DWORD *)this + 32);
  if (v11 >= 0) {
    int v12 = *((_DWORD *)this + 32);
  }
  else {
    int v12 = v11 + 1;
  }
  double v13 = (double)v11;
  double v14 = -0.0;
  if (v10 < (double)-(v12 >> 1)) {
    double v14 = (double)v11;
  }
  double v15 = v10 + v14;
  if (v15 <= (double)(v12 >> 1)) {
    double v13 = 0.0;
  }
  double v16 = -(v15 - v13 - v5 / 44100.0 * (*((double *)this + 17) + *((double *)this + 17)) * 8192.0);
  if (v16 < 0.0) {
    return 0.0;
  }
  return v16;
}

unsigned __int8 *PitchShifter3::PushInput(unsigned __int8 *this, float *__src, float *a3, int a4)
{
  if (this[145])
  {
    double v6 = this;
    int v7 = this[124];
    double v8 = (char *)*((void *)this + 4);
    if (this[124]) {
      float v18 = (char *)*((void *)this + 7);
    }
    else {
      float v18 = 0;
    }
    uint64_t v9 = *((int *)this + 30);
    unsigned int v10 = *((_DWORD *)this + 32);
    int v11 = v10 - v9;
    if ((int)(v10 - v9) >= a4) {
      int v11 = a4;
    }
    int v12 = a4 - v11;
    uint64_t v13 = v11;
    size_t v14 = 4 * v11;
    memcpy(&v8[4 * v9], __src, v14);
    if (v7)
    {
      memcpy(&v18[4 * v9], a3, v14);
      memcpy(v8, &__src[v13], 4 * v12);
      double v15 = &a3[v13];
      double v16 = v18;
      size_t v17 = 4 * v12;
    }
    else
    {
      size_t v17 = 4 * v12;
      double v15 = &__src[v13];
      double v16 = v8;
    }
    this = (unsigned __int8 *)memcpy(v16, v15, v17);
    v6[30] = (v6[30] + a4) % v10;
  }
  return this;
}

uint64_t PitchShifter3::Process(PitchShifter3 *this, float *a2, float *a3, int a4, char a5, double a6, double a7, double a8, double a9)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *((double *)this + 17) = a9;
  int v18 = *((unsigned __int8 *)this + 124);
  long double v19 = cos(a8 * 1.57079633);
  double v20 = 1.0 - v19 * v19;
  *((double *)this + 1) = a6;
  double v27 = a2;
  double v28 = a3;
  if (a8 == 1.0)
  {
    bzero(a2, 4 * a4);
    if (v18) {
      bzero(a3, 4 * a4);
    }
  }
  double v21 = sqrt(v20);
  int v22 = vcvtd_n_s64_f64(a7, 9uLL);
  if (v22 <= 512) {
    int v23 = 512;
  }
  else {
    int v23 = v22;
  }
  do
  {
    if (a4 >= v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = a4;
    }
    *((unsigned char *)this + 352) = a5;
    uint64_t result = LoopReader::Read((PitchShifter3 *)((char *)this + 152), &v27, 0, a7, v24, v21, *((_DWORD *)this + 30), a9);
    if (a2)
    {
      a2 += v24;
      double v27 = a2;
    }
    if (a3)
    {
      a3 += v24;
      double v28 = a3;
    }
    BOOL v26 = __OFSUB__(a4, v24);
    a4 -= v24;
  }
  while (!((a4 < 0) ^ v26 | (a4 == 0)));
  return result;
}

VoiceActivityDetector *MetadataHandler::Process<float>(uint64_t a1, const float *a2, unsigned int a3)
{
  PowerMeter::Process((PowerMeter *)a1, a2);
  uint64_t result = *(VoiceActivityDetector **)(a1 + 136);
  if (result)
  {
    uint64_t result = (VoiceActivityDetector *)VoiceActivityDetector::VADProcess<float>(result, (uint64_t)a2, a3, *(_DWORD *)(a1 + 164));
    BOOL v7 = result != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  if (!*(_DWORD *)(a1 + 168)) {
    BOOL v7 = 0;
  }
  *(_DWORD *)(a1 + 168) = v7;
  return result;
}

double MetadataHandler::GetMetadata(MetadataHandler *this, void **a2, unsigned int *a3)
{
  PowerMeter::LinearToDB(this, *((double *)this + 14));
  *(float *)&double result = result;
  uint64_t v7 = (uint64_t)*a2;
  *(void *)uint64_t v7 = 0x4706F6462;
  *(_DWORD *)(v7 + 8) = LODWORD(result);
  *a2 = (void *)(v7 + 12);
  *a3 += 12;
  int v8 = *((_DWORD *)this + 42);
  if ((v8 & 0x80000000) == 0)
  {
    *(void *)&double result = 0x473616432;
    *(void *)(v7 + 12) = 0x473616432;
    *(_DWORD *)(v7 + 20) = v8;
    *a2 = (void *)(v7 + 24);
    *a3 += 12;
    *((_DWORD *)this + 42) = -1;
  }
  return result;
}

uint64_t AUMatrixReverbLite::Version(AUMatrixReverbLite *this)
{
  return 0x10000;
}

BOOL AUMatrixReverbLite::ValidFormat(AUMatrixReverbLite *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL v9 = 0;
  int v10 = 0;
  int v5 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v10, &v9);
  BOOL result = 0;
  if (v5 && v10 == 1)
  {
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 13 >= 0xFFFFFFF4 && (mChannelsPerFrame < 2 || !v9);
  }
  return result;
}

uint64_t AUMatrixReverbLite::SupportedNumChannels(AUMatrixReverbLite *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMatrixReverbLite::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 13;
}

BOOL AUMatrixReverbLite::StreamFormatWritable(AUMatrixReverbLite *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMatrixReverbLite::SupportsTail(AUMatrixReverbLite *this)
{
  return 1;
}

double AUMatrixReverbLite::GetTailTime(AUMatrixReverbLite *this)
{
  float v2 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 4, 0, 0, &v2);
  return v2 * 3.0;
}

uint64_t AUMatrixReverbLite::NewFactoryPresetSet(AUMatrixReverbLite *this, const AUPreset *a2)
{
  uint64_t v3 = 0;
  while (1)
  {
    double v4 = (unsigned int *)((char *)&sRoomPresets + v3);
    if (a2->presetNumber == *(_DWORD *)((char *)&sRoomPresets + v3)) {
      break;
    }
    v3 += 16;
    if (v3 == 208) {
      return 4294956445;
    }
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)((char *)&sRoomPresets + v3));
  AUMatrixReverbLite::SetRoomType(this, *v4);
  return 0;
}

uint64_t AUMatrixReverbLite::SetRoomType(AUMatrixReverbLite *this, unsigned int a2)
{
  uint64_t v3 = (float *)((char *)&sRoomPresetValues + 16 * a2);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 2, 0, 0, 0, *v3);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 3, 0, 0, 0, v3[1]);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 4, 0, 0, 0, v3[2]);
  v4.n128_f32[0] = v3[3];
  int v5 = *(uint64_t (**)(AUMatrixReverbLite *, uint64_t, void, void, void, __n128))(*(void *)this + 152);

  return v5(this, 5, 0, 0, 0, v4);
}

uint64_t AUMatrixReverbLite::GetPresets(AUMatrixReverbLite *this, const __CFArray **a2)
{
  if (a2)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 13, 0);
    for (uint64_t i = 0; i != 208; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sRoomPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUMatrixReverbLite::GetParameterInfo(AUMatrixReverbLite *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  v18[6] = xmmword_2643B9808;
  v18[7] = *(_OWORD *)&off_2643B9818;
  v18[8] = xmmword_2643B9828;
  v18[9] = *(_OWORD *)off_2643B9838;
  v18[2] = xmmword_2643B97C8;
  v18[3] = *(_OWORD *)&off_2643B97D8;
  v18[4] = xmmword_2643B97E8;
  v18[5] = *(_OWORD *)&off_2643B97F8;
  v18[0] = xmmword_2643B97A8;
  v18[1] = *(_OWORD *)&off_2643B97B8;
  if (!LocalizeAUParameterStringsForClass<AUMatrixReverbLite>(std::initializer_list<__CFString const**>)::sLocalized) {
    LocalizeAUParameterStringsForClass<AUMatrixReverbLite>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v18, 20);
  }
  switch(a3)
  {
    case 0:
      CFStringRef v7 = (const __CFString *)kDryWetMix_Name;
      buffer->cfNameString = (CFStringRef)kDryWetMix_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Percent;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      buffer->defaultCFNumberRef Value = 50.0;
      return result;
    case 1:
      CFStringRef v15 = (const __CFString *)kGain_Name;
      buffer->cfNameString = (CFStringRef)kGain_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x41A00000C1A00000;
      buffer->defaultCFNumberRef Value = 0.0;
      return result;
    case 2:
      CFStringRef v8 = (const __CFString *)kMinDelayTime_Name;
      buffer->cfNameString = (CFStringRef)kMinDelayTime_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000038D1B717;
      AudioUnitParameterValue v9 = 0.008;
      goto LABEL_9;
    case 3:
      CFStringRef v10 = (const __CFString *)kMaxDelayTime_Name;
      buffer->cfNameString = (CFStringRef)kMaxDelayTime_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000038D1B717;
      AudioUnitParameterValue v9 = 0.05;
LABEL_9:
      AudioUnitParameterOptions flags = buffer->flags;
      int v12 = 20971520;
      goto LABEL_11;
    case 4:
      CFStringRef v13 = (const __CFString *)kDecayTime0Hz_Name;
      buffer->cfNameString = (CFStringRef)kDecayTime0Hz_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x41A000003A83126FLL;
      AudioUnitParameterValue v9 = 1.0;
      AudioUnitParameterOptions flags = buffer->flags;
      int v12 = 327680;
LABEL_11:
      AudioUnitParameterOptions v14 = flags | v12;
      break;
    case 5:
      CFStringRef v16 = (const __CFString *)kDecayTimeNyq_Name;
      buffer->cfNameString = (CFStringRef)kDecayTimeNyq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x41A000003A83126FLL;
      AudioUnitParameterValue v9 = 1.0;
      AudioUnitParameterOptions v14 = buffer->flags | 0x400000;
      break;
    case 6:
      CFStringRef v17 = (const __CFString *)kRandomize_Name;
      buffer->cfNameString = (CFStringRef)kRandomize_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x447A00003F800000;
      AudioUnitParameterValue v9 = 1.0;
      AudioUnitParameterOptions v14 = buffer->flags | 0x1000000;
      break;
    default:
      return 4294956418;
  }
  buffer->defaultCFNumberRef Value = v9;
  buffer->AudioUnitParameterOptions flags = v14;
  return result;
}

uint64_t AUMatrixReverbLite::Render(AUMatrixReverbLite *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v15 = 0;
  CFStringRef v8 = (AUMatrixReverbLite *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0);
    uint64_t v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUMatrixReverbLite *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, &BufferList, 1, &v13);
  }
  return result;
}

uint64_t AUMatrixReverbLite::ProcessMultipleBufferLists(AUMatrixReverbLite *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t result = 4294956428;
  if (a4 == 1 && a6 == 1)
  {
    CFStringRef v10 = (unsigned int *)*a5;
    uint64_t v11 = (uint64_t)*a7;
    UInt32 mNumberBuffers = (*a5)->mNumberBuffers;
    UInt32 v13 = (*a7)->mNumberBuffers;
    if (mNumberBuffers == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0) + 108)
      && v13 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108))
    {
      uint64_t v15 = *((void *)v10 + 2);
      uint64_t v16 = *(void *)(v11 + 16);
      if (v13 == 2)
      {
        if (mNumberBuffers == 2) {
          uint64_t v17 = *((void *)v10 + 4);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v21 = *(void *)(v11 + 32);
        if (*((unsigned char *)this + 560))
        {
          int v22 = (const void *)v17;
          memcpy(*(void **)(v11 + 16), *((const void **)v10 + 2), 4 * a3);
          if (!v21) {
            return 0;
          }
          if (v22)
          {
            double v20 = v22;
            uint64_t v19 = (void *)v21;
          }
          else
          {
            uint64_t v19 = (void *)v21;
            double v20 = (const void *)v15;
          }
          size_t v18 = 4 * a3;
LABEL_48:
          memcpy(v19, v20, v18);
          return 0;
        }
        uint64_t v94 = v17;
      }
      else
      {
        if (*((unsigned char *)this + 560))
        {
          size_t v18 = 4 * a3;
          uint64_t v19 = *(void **)(v11 + 16);
          double v20 = (const void *)*((void *)v10 + 2);
          goto LABEL_48;
        }
        uint64_t v21 = 0;
        uint64_t v94 = 0;
      }
      if (*((unsigned char *)this + 561)) {
        v14.n128_f64[0] = FeedbackDelayNetwork<float>::Reset(*((_OWORD **)this + 66));
      }
      int v23 = *((_DWORD *)this + 134);
      if (v23 != *((_DWORD *)this + 135))
      {
        uint64_t v93 = v16;
        *((_DWORD *)this + 135) = v23;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *, __n128))(*(void *)this + 144))(this, 2, 0, 0, &v95, v14);
        float v24 = v95;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 3, 0, 0, &v95);
        float v25 = v95;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 6, 0, 0, &v95);
        unsigned int v26 = v95;
        double v27 = *(double *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 80);
        if (v24 != *((float *)this + 137) || v25 != *((float *)this + 138) || *((_DWORD *)this + 136) != v26)
        {
          FeedbackDelayNetwork<float>::SetDelayTime(*((void *)this + 66), v27, v24, v25, (double)v26);
          *((float *)this + 137) = v24;
          *((float *)this + 138) = v25;
          *((_DWORD *)this + 136) = v26;
        }
        uint64_t v28 = *((void *)this + 66);
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 2, 0, 0, &v95);
        float v29 = v95;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 3, 0, 0, &v95);
        float v30 = v95;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 6, 0, 0, &v95);
        FeedbackDelayNetwork<float>::SetDelayTime(v28, v95, v29, v30, v27);
        uint64_t v31 = *((void *)this + 66);
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 4, 0, 0, &v95);
        float v32 = v95;
        float v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 5, 0, 0, &v95);
        FeedbackDelayNetwork<float>::SetDecayTime(v31, v32, v95);
        v14.n128_f64[0] = FeedbackDelayNetwork<float>::Reset(*((_OWORD **)this + 66));
        uint64_t v16 = v93;
      }
      float v95 = 0.0;
      (*(void (**)(AUMatrixReverbLite *, uint64_t, void, void, float *, __n128))(*(void *)this + 144))(this, 1, 0, 0, &v95, v14);
      float v33 = __exp10f(v95 * 0.05);
      unint64_t v34 = (float *)*((void *)this + 66);
      v34[6] = v33;
      v34[9] = v33 * v34[7];
      float v95 = 1.0;
      (*(void (**)(AUMatrixReverbLite *, void, void, void, float *))(*(void *)this + 144))(this, 0, 0, 0, &v95);
      float v35 = (float *)*((void *)this + 66);
      v35[8] = v95 * 0.01;
      if (mNumberBuffers >= 3 && mNumberBuffers == v13)
      {
        uint64_t v36 = *v10;
        if (v36 <= 0xC && a3)
        {
          uint64_t v37 = 0;
          float v38 = 1.0 / (float)(sqrtf((float)v36) * 1.4142);
          do
          {
            uint64_t v39 = 0;
            int v40 = &v95;
            do
            {
              int v41 = &v35[v39];
              float v42 = v35[v39 + 39];
              float v43 = (float)(*(float *)(*(void *)&v35[v39 + 28]
                                     + 4 * (LODWORD(v35[v39 + 38]) & LODWORD(v42)))
                          * v35[v39 + 35])
                  + (float)(v35[v39 + 34] * v35[v39 + 36]);
              *v40++ = v43;
              v41[36] = v43;
              *((_DWORD *)v41 + 39) = LODWORD(v42) + 1;
              v39 += 18;
            }
            while (v39 != 288);
            float v44 = (float)(v95 + v96) + (float)(v97 + v98);
            float v45 = (float)(v95 - v96) + (float)(v97 - v98);
            float v46 = (float)(v95 + v96) - (float)(v97 + v98);
            float v47 = (float)(v95 - v96) - (float)(v97 - v98);
            float v48 = (float)(v99 + v100) + (float)(v101 + v102);
            float v49 = (float)(v99 - v100) + (float)(v101 - v102);
            float v50 = (float)(v99 + v100) - (float)(v101 + v102);
            float v51 = (float)(v99 - v100) - (float)(v101 - v102);
            float v52 = (float)(v103 + v104) + (float)(v105 + v106);
            float v53 = (float)(v103 - v104) + (float)(v105 - v106);
            float v54 = (float)(v103 + v104) - (float)(v105 + v106);
            float v55 = (float)(v103 - v104) - (float)(v105 - v106);
            float v56 = (float)(v107 + v108) + (float)(v109 + v110);
            float v57 = (float)(v107 - v108) + (float)(v109 - v110);
            float v58 = (float)(v107 + v108) - (float)(v109 + v110);
            float v59 = (float)(v107 - v108) - (float)(v109 - v110);
            float v60 = v44 + v48;
            float v61 = v45 + v49;
            float v62 = v46 + v50;
            float v63 = v47 + v51;
            float v64 = v44 - v48;
            float v65 = v45 - v49;
            float v66 = v46 - v50;
            float v67 = v47 - v51;
            float v68 = v52 + v56;
            float v69 = v53 + v57;
            float v70 = v54 + v58;
            float v71 = v55 + v59;
            float v72 = v52 - v56;
            float v73 = v53 - v57;
            float v74 = v54 - v58;
            float v95 = v60 + v68;
            float v96 = v61 + v69;
            float v97 = v62 + v70;
            float v98 = v63 + (float)(v55 + v59);
            float v99 = v64 + v72;
            float v100 = v65 + v73;
            float v75 = v55 - v59;
            float v101 = v66 + v74;
            float v102 = v67 + v75;
            float v103 = v60 - v68;
            float v104 = v61 - v69;
            float v105 = v62 - v70;
            float v106 = v63 - v71;
            float v107 = v64 - v72;
            float v108 = v65 - v73;
            float v109 = v66 - v74;
            float v110 = v67 - v75;
            if (v36)
            {
              double v76 = (uint64_t *)(v10 + 4);
              float v77 = 0.0;
              signed int v78 = (uint64_t *)(v11 + 16);
              int v79 = &v96;
              uint64_t v80 = v36;
              int v81 = v35 + 14;
              do
              {
                uint64_t v83 = *v76;
                v76 += 2;
                uint64_t v82 = v83;
                uint64_t v85 = *v78;
                v78 += 2;
                uint64_t v84 = v85;
                float v77 = v77 + *(float *)(v82 + 4 * v37);
                *(float *)&uint64_t v85 = *v79++;
                float v86 = *(float *)&v85 * v35[10];
                float v87 = v35[11] * *v81;
                *(_DWORD *)v81++ = v85;
                *(float *)(v84 + 4 * v37) = *(float *)(v82 + 4 * v37)
                                          + (float)(v35[8]
                                                  * (float)((float)((float)(v86 + v87) * v35[9])
                                                          - *(float *)(v82 + 4 * v37)));
                --v80;
              }
              while (v80);
            }
            else
            {
              float v77 = 0.0;
            }
            uint64_t v88 = 0;
            float v89 = v38 * v77;
            int v90 = v35 + 40;
            do
            {
              int v91 = *v90;
              *(float *)(*((void *)v90 - 6) + 4 * (*(v90 - 2) & *v90)) = v89
                                                                                         + *(float *)((char *)&v95 + v88);
              *int v90 = v91 + 1;
              v90 += 18;
              v88 += 4;
            }
            while (v88 != 64);
            ++v37;
          }
          while (v37 != a3);
        }
      }
      else if (v21)
      {
        if (v94) {
          FeedbackDelayNetwork<float>::ProcessStereo(v35, a3, v15, v94, v16, v21);
        }
        else {
          FeedbackDelayNetwork<float>::ProcessMonoToStereo(v35, a3, v15, v16, v21);
        }
      }
      else
      {
        FeedbackDelayNetwork<float>::ProcessMono(v35, a3, v15, v16);
      }
      if (*((unsigned char *)this + 560))
      {
        if (!*((unsigned char *)this + 561))
        {
          int v92 = 0;
LABEL_57:
          AUMatrixReverbLite::RampOutput(this, a3, v92);
          goto LABEL_58;
        }
      }
      else if (!*((unsigned char *)this + 561))
      {
LABEL_58:
        uint64_t result = 0;
        *((unsigned char *)this + 561) = *((unsigned char *)this + 560);
        return result;
      }
      int v92 = 1;
      goto LABEL_57;
    }
    return 4294967246;
  }
  return result;
}

double FeedbackDelayNetwork<float>::Reset(_OWORD *a1)
{
  for (uint64_t i = 0; i != 1152; i += 72)
  {
    uint64_t v3 = (char *)a1 + i;
    uint64_t v4 = *(unsigned int *)((char *)a1 + i + 148);
    if (v4) {
      bzero(*((void **)v3 + 14), 4 * v4);
    }
    *(void *)(v3 + 156) = *((_DWORD *)v3 + 38) & -*((_DWORD *)v3 + 41);
    *((_DWORD *)v3 + 36) = 0;
  }
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  return result;
}

void FeedbackDelayNetwork<float>::SetDelayTime(uint64_t a1, unsigned int a2, float a3, float a4, double a5)
{
  long double v10 = pow((float)(a4 / a3), 0.0666666667);
  double v11 = a3;
  LODWORD(v12) = vcvtmd_u64_f64(a5 * v11 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 112, v12, a5);
  LODWORD(v13) = vcvtmd_u64_f64(a5 * a4 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 1192, v13, a5);
  srandom(a2);
  for (uint64_t i = 0; i != 1008; i += 72)
  {
    double v11 = v10 * v11;
    uint64_t v15 = random();
    float v16 = v11 * pow(v10, ((double)v15 / 2147483650.0 + -0.5) * 0.8);
    LODWORD(v17) = vcvtmd_u64_f64(a5 * v16 + 0.5);
    FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 184 + i, v17, a5);
  }
  for (uint64_t j = 0; j != 1080; j += 72)
  {
    int v19 = *(_DWORD *)(a1 + j + 236);
    if (v19 == *(_DWORD *)(a1 + j + 164))
    {
      uint64_t Prime = NextPrime((v19 + 1));
      FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + j + 184, Prime, a5);
    }
  }
}

float FeedbackDelayNetwork<float>::SetDecayTime(uint64_t a1, float a2, float a3)
{
  uint64_t v4 = 0;
  if (a3 > a2) {
    a3 = a2;
  }
  double v5 = a2;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  double v6 = 1.0 - (float)(a2 / a3) * (float)(a2 / a3);
  float v7 = 0.0;
  do
  {
    uint64_t v8 = a1 + v4;
    double v9 = *(double *)(a1 + v4 + 168) * -3.0 / v5;
    double v10 = fmax(__exp10(v9), 0.0001);
    double v11 = v6 * (v9 * 0.575646273);
    if (v11 > 0.99) {
      double v11 = 0.99;
    }
    double v12 = v10 * (1.0 - v11);
    double v13 = v12 * 0.25;
    *(float *)&double v12 = v12;
    *(_DWORD *)(v8 + 176) = LODWORD(v12);
    *(float *)&double v12 = v11;
    float v14 = v13;
    *(_DWORD *)(v8 + 136) = LODWORD(v12);
    *(float *)(v8 + 140) = v14;
    float v7 = v7 + v14;
    v4 += 72;
  }
  while (v4 != 1152);
  *(float *)(a1 + 28) = 1.0 / v7;
  float v15 = *(double *)(a1 + 16) / *(double *)(a1 + 8);
  float v16 = (1.0 - v15) / (v15 + 1.0);
  float v17 = 1.0 / (1.0 - v16);
  *(float *)(a1 + 36) = (float)(1.0 / v7) * *(float *)(a1 + 24);
  *(float *)(a1 + 40) = v17;
  float result = -(float)(v16 * v17);
  *(float *)(a1 + 44) = result;
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessStereo(float *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v7 = 0;
      uint64_t v8 = &v56;
      do
      {
        double v9 = &result[v7];
        float v10 = result[v7 + 39];
        float v11 = (float)(*(float *)(*(void *)&result[v7 + 28]
                               + 4 * (LODWORD(result[v7 + 38]) & LODWORD(v10)))
                    * result[v7 + 35])
            + (float)(result[v7 + 34] * result[v7 + 36]);
        *v8++ = v11;
        v9[36] = v11;
        *((_DWORD *)v9 + 39) = LODWORD(v10) + 1;
        v7 += 18;
      }
      while (v7 != 288);
      uint64_t v12 = 0;
      float v13 = (float)(v56 + v57) + (float)(v58 + v59);
      float v14 = (float)(v56 - v57) + (float)(v58 - v59);
      float v15 = (float)(v56 + v57) - (float)(v58 + v59);
      float v16 = (float)(v56 - v57) - (float)(v58 - v59);
      float v17 = (float)(v60 + v61) + (float)(v62 + v63);
      float v18 = (float)(v60 - v61) + (float)(v62 - v63);
      float v19 = (float)(v60 + v61) - (float)(v62 + v63);
      float v20 = (float)(v60 - v61) - (float)(v62 - v63);
      float v21 = (float)(v64 + v65) + (float)(v66 + v67);
      float v22 = (float)(v64 - v65) + (float)(v66 - v67);
      float v23 = (float)(v64 + v65) - (float)(v66 + v67);
      float v24 = (float)(v64 - v65) - (float)(v66 - v67);
      float v25 = (float)(v68 + v69) + (float)(v70 + v71);
      float v26 = (float)(v68 - v69) + (float)(v70 - v71);
      float v27 = (float)(v68 + v69) - (float)(v70 + v71);
      float v28 = (float)(v68 - v69) - (float)(v70 - v71);
      float v29 = v13 + v17;
      float v30 = v14 + v18;
      float v31 = v15 + v19;
      float v32 = v16 + v20;
      float v33 = v13 - v17;
      float v34 = v14 - v18;
      float v35 = v15 - v19;
      float v36 = v16 - v20;
      float v37 = v21 + v25;
      float v38 = v22 + v26;
      float v39 = v23 + v27;
      float v40 = v24 + v28;
      float v41 = v21 - v25;
      float v42 = v22 - v26;
      float v43 = v23 - v27;
      float v44 = v24 - v28;
      float v56 = v29 + v37;
      float v57 = v30 + v38;
      float v58 = v31 + v39;
      float v59 = v32 + v40;
      float v60 = v33 + v41;
      float v61 = v34 + v42;
      float v62 = v35 + v43;
      float v63 = v36 + v44;
      float v64 = v29 - v37;
      float v65 = v30 - v38;
      float v66 = v31 - v39;
      float v67 = v32 - v40;
      float v68 = v33 - v41;
      float v69 = v34 - v42;
      float v70 = v35 - v43;
      float v71 = v36 - v44;
      float v45 = result[10];
      float v46 = result[11];
      float v47 = (float)((float)(v30 + v38) * v45) + (float)(v46 * result[12]);
      float v48 = (float)(v45 * (float)(v31 + v39)) + (float)(v46 * result[13]);
      result[12] = v30 + v38;
      result[13] = v31 + v39;
      float v49 = result[9];
      float v50 = v47 * v49;
      float v51 = v48 * v49;
      float v52 = *(float *)(a3 + 4 * i);
      float v53 = *(float *)(a4 + 4 * i);
      *(float *)(a5 + 4 * i) = v52 + (float)((float)(v50 - v52) * result[8]);
      *(float *)(a6 + 4 * i) = v53 + (float)((float)(v51 - v53) * result[8]);
      float v54 = result + 40;
      do
      {
        int v55 = *v54;
        *(float *)(*((void *)v54 - 6) + 4 * (*(v54 - 2) & *v54)) = (float)((float)(v52 + v53) * 0.5)
                                                                                   + *(float *)((char *)&v56 + v12);
        *float v54 = v55 + 1;
        v54 += 18;
        v12 += 4;
      }
      while (v12 != 64);
    }
  }
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessMonoToStereo(float *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v6 = 0;
      uint64_t v7 = &v54;
      do
      {
        uint64_t v8 = &result[v6];
        float v9 = result[v6 + 39];
        float v10 = (float)(*(float *)(*(void *)&result[v6 + 28]
                               + 4 * (LODWORD(result[v6 + 38]) & LODWORD(v9)))
                    * result[v6 + 35])
            + (float)(result[v6 + 34] * result[v6 + 36]);
        *v7++ = v10;
        v8[36] = v10;
        *((_DWORD *)v8 + 39) = LODWORD(v9) + 1;
        v6 += 18;
      }
      while (v6 != 288);
      uint64_t v11 = 0;
      float v12 = (float)(v54 + v55) + (float)(v56 + v57);
      float v13 = (float)(v54 - v55) + (float)(v56 - v57);
      float v14 = (float)(v54 + v55) - (float)(v56 + v57);
      float v15 = (float)(v54 - v55) - (float)(v56 - v57);
      float v16 = (float)(v58 + v59) + (float)(v60 + v61);
      float v17 = (float)(v58 - v59) + (float)(v60 - v61);
      float v18 = (float)(v58 + v59) - (float)(v60 + v61);
      float v19 = (float)(v58 - v59) - (float)(v60 - v61);
      float v20 = (float)(v62 + v63) + (float)(v64 + v65);
      float v21 = (float)(v62 - v63) + (float)(v64 - v65);
      float v22 = (float)(v62 + v63) - (float)(v64 + v65);
      float v23 = (float)(v62 - v63) - (float)(v64 - v65);
      float v24 = (float)(v66 + v67) + (float)(v68 + v69);
      float v25 = (float)(v66 - v67) + (float)(v68 - v69);
      float v26 = (float)(v66 + v67) - (float)(v68 + v69);
      float v27 = (float)(v66 - v67) - (float)(v68 - v69);
      float v28 = v12 + v16;
      float v29 = v13 + v17;
      float v30 = v14 + v18;
      float v31 = v15 + v19;
      float v32 = v12 - v16;
      float v33 = v13 - v17;
      float v34 = v14 - v18;
      float v35 = v15 - v19;
      float v36 = v20 + v24;
      float v37 = v21 + v25;
      float v38 = v22 + v26;
      float v39 = v23 + v27;
      float v40 = v20 - v24;
      float v41 = v21 - v25;
      float v42 = v22 - v26;
      float v43 = v23 - v27;
      float v54 = v28 + v36;
      float v55 = v29 + v37;
      float v56 = v30 + v38;
      float v57 = v31 + v39;
      float v58 = v32 + v40;
      float v59 = v33 + v41;
      float v60 = v34 + v42;
      float v61 = v35 + v43;
      float v62 = v28 - v36;
      float v63 = v29 - v37;
      float v64 = v30 - v38;
      float v65 = v31 - v39;
      float v66 = v32 - v40;
      float v67 = v33 - v41;
      float v68 = v34 - v42;
      float v69 = v35 - v43;
      float v44 = result[10];
      float v45 = result[11];
      float v46 = (float)((float)(v29 + v37) * v44) + (float)(v45 * result[12]);
      float v47 = (float)(v44 * (float)(v30 + v38)) + (float)(v45 * result[13]);
      result[12] = v29 + v37;
      result[13] = v30 + v38;
      float v48 = result[9];
      float v49 = v46 * v48;
      float v50 = v47 * v48;
      float v51 = *(float *)(a3 + 4 * i);
      *(float *)(a4 + 4 * i) = v51 + (float)(result[8] * (float)(v49 - v51));
      *(float *)(a5 + 4 * i) = v51 + (float)((float)(v50 - v51) * result[8]);
      float v52 = result + 40;
      do
      {
        int v53 = *v52;
        *(float *)(*((void *)v52 - 6) + 4 * (*(v52 - 2) & *v52)) = v51
                                                                                   + *(float *)((char *)&v54 + v11);
        *float v52 = v53 + 1;
        v52 += 18;
        v11 += 4;
      }
      while (v11 != 64);
    }
  }
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessMono(float *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v5 = 0;
      uint64_t v6 = &v48;
      do
      {
        uint64_t v7 = &result[v5];
        float v8 = result[v5 + 39];
        float v9 = (float)(*(float *)(*(void *)&result[v5 + 28]
                              + 4 * (LODWORD(result[v5 + 38]) & LODWORD(v8)))
                   * result[v5 + 35])
           + (float)(result[v5 + 34] * result[v5 + 36]);
        *v6++ = v9;
        v7[36] = v9;
        *((_DWORD *)v7 + 39) = LODWORD(v8) + 1;
        v5 += 18;
      }
      while (v5 != 288);
      uint64_t v10 = 0;
      float v11 = (float)(v48 + v49) + (float)(v50 + v51);
      float v12 = (float)(v48 - v49) + (float)(v50 - v51);
      float v13 = (float)(v48 + v49) - (float)(v50 + v51);
      float v14 = (float)(v48 - v49) - (float)(v50 - v51);
      float v15 = (float)(v52 + v53) + (float)(v54 + v55);
      float v16 = (float)(v52 - v53) + (float)(v54 - v55);
      float v17 = (float)(v52 + v53) - (float)(v54 + v55);
      float v18 = (float)(v52 - v53) - (float)(v54 - v55);
      float v19 = (float)(v56 + v57) + (float)(v58 + v59);
      float v20 = (float)(v56 - v57) + (float)(v58 - v59);
      float v21 = (float)(v56 + v57) - (float)(v58 + v59);
      float v22 = (float)(v56 - v57) - (float)(v58 - v59);
      float v23 = (float)(v60 + v61) + (float)(v62 + v63);
      float v24 = (float)(v60 - v61) + (float)(v62 - v63);
      float v25 = (float)(v60 + v61) - (float)(v62 + v63);
      float v26 = (float)(v60 - v61) - (float)(v62 - v63);
      float v27 = v11 + v15;
      float v28 = v12 + v16;
      float v29 = v13 + v17;
      float v30 = v14 + v18;
      float v31 = v11 - v15;
      float v32 = v12 - v16;
      float v33 = v13 - v17;
      float v34 = v14 - v18;
      float v35 = v19 + v23;
      float v36 = v20 + v24;
      float v37 = v21 + v25;
      float v38 = v22 + v26;
      float v39 = v19 - v23;
      float v40 = v20 - v24;
      float v41 = v21 - v25;
      float v42 = v22 - v26;
      float v48 = v27 + v35;
      float v49 = v28 + v36;
      float v50 = v29 + v37;
      float v51 = v30 + v38;
      float v52 = v31 + v39;
      float v53 = v32 + v40;
      float v54 = v33 + v41;
      float v55 = v34 + v42;
      float v56 = v27 - v35;
      float v57 = v28 - v36;
      float v58 = v29 - v37;
      float v59 = v30 - v38;
      float v60 = v31 - v39;
      float v61 = v32 - v40;
      float v62 = v33 - v41;
      float v63 = v34 - v42;
      float v43 = (float)((float)(v28 + v36) * result[10]) + (float)(result[11] * result[12]);
      result[12] = v28 + v36;
      float v44 = v43 * result[9];
      float v45 = *(float *)(a3 + 4 * i);
      *(float *)(a4 + 4 * i) = v45 + (float)(result[8] * (float)(v44 - v45));
      float v46 = result + 40;
      do
      {
        int v47 = *v46;
        *(float *)(*((void *)v46 - 6) + 4 * (*(v46 - 2) & *v46)) = v45
                                                                                   + *(float *)((char *)&v48 + v10);
        *float v46 = v47 + 1;
        v46 += 18;
        v10 += 4;
      }
      while (v10 != 64);
    }
  }
  return result;
}

uint64_t AUMatrixReverbLite::RampOutput(AUMatrixReverbLite *this, unsigned int a2, int a3)
{
  uint64_t v5 = (AUMatrixReverbLite *)((char *)this + 128);
  int v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108);
  uint64_t Element = ausdk::AUScope::SafeGetElement(v5, 0);
  uint64_t result = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  float v9 = *(float **)(result + 16);
  if (a3) {
    float v10 = 0.0;
  }
  else {
    float v10 = 1.0;
  }
  if (a3) {
    float v11 = 1.0 / (float)a2;
  }
  else {
    float v11 = -(float)(1.0 / (float)a2);
  }
  if (v6 == 2)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v5, 0);
    int v13 = *(_DWORD *)(v12 + 92);
    uint64_t result = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    if ((v13 & 0x20) != 0)
    {
      float v14 = *(float **)(result + 32);
      if (!a2) {
        return result;
      }
    }
    else
    {
      float v14 = (float *)(*(void *)(result + 16) + 4);
      if (!a2) {
        return result;
      }
    }
    uint64_t v16 = a2;
    do
    {
      *float v9 = v10 * *v9;
      ++v9;
      *float v14 = v10 * *v14;
      ++v14;
      float v10 = v11 + v10;
      --v16;
    }
    while (v16);
  }
  else if (a2)
  {
    uint64_t v15 = a2;
    do
    {
      *float v9 = v10 * *v9;
      ++v9;
      float v10 = v11 + v10;
      --v15;
    }
    while (v15);
  }
  return result;
}

double FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(uint64_t a1, uint64_t a2, double a3)
{
  int Prime = NextPrime(a2);
  *(_DWORD *)(a1 + 52) = Prime;
  unint64_t v6 = (1 << -(char)__clz(Prime - 1));
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v6 - 1;
  std::vector<float>::resize((char **)a1, v6);
  float v8 = *(char **)(a1 + 8);
  float v9 = *(char **)a1;
  unint64_t v10 = (uint64_t)&v8[-*(void *)a1] >> 2;
  if (v10 >= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) {
    goto LABEL_11;
  }
  if (v8 == v9)
  {
    uint64_t v15 = 0;
    uint64_t v13 = 4 * v10;
    goto LABEL_8;
  }
  float v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v8[-*(void *)a1] >> 2);
  uint64_t v12 = *(char **)a1;
  float v9 = *(char **)(a1 + 8);
  uint64_t v13 = (uint64_t)&v11[4 * v10];
  uint64_t v15 = &v11[4 * v14];
  if (v9 == *(char **)a1)
  {
LABEL_8:
    uint64_t v16 = v13;
    goto LABEL_9;
  }
  uint64_t v16 = v13;
  do
  {
    int v17 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *(_DWORD *)(v16 - 4) = v17;
    v16 -= 4;
  }
  while (v9 != v12);
  float v9 = v12;
LABEL_9:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v15;
  if (v9) {
    operator delete(v9);
  }
LABEL_11:
  uint64_t v18 = *(unsigned int *)(a1 + 36);
  if (v18) {
    bzero(*(void **)a1, 4 * v18);
  }
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  double result = (double)v7 / a3;
  *(double *)(a1 + 56) = result;
  return result;
}

void sub_21BA92B44(void *a1)
{
}

uint64_t AUMatrixReverbLite::CanScheduleParameters(AUMatrixReverbLite *this)
{
  return 0;
}

uint64_t AUMatrixReverbLite::SetParameter(AUMatrixReverbLite *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a2 - 2 <= 4) {
    ++*((_DWORD *)this + 134);
  }
  return 0;
}

uint64_t AUMatrixReverbLite::SetProperty(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, unsigned int *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 10:
      if (a6 < 4) {
        return 4294956445;
      }
      uint64_t v11 = 0;
      unsigned int v12 = *a5;
      uint64_t result = 4294956445;
      while (1)
      {
        uint64_t v13 = (const AUPreset *)((char *)&sRoomPresets + v11);
        if (v12 == *(_DWORD *)((char *)&sRoomPresets + v11)) {
          break;
        }
        v11 += 16;
        if (v11 == 208) {
          return result;
        }
      }
      AUMatrixReverbLite::SetRoomType(this, v12);
      ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v13);
      return 0;
    case 56:
      uint64_t v9 = *((void *)this + 1);
      uint64_t v16 = 0;
      int v17 = &v16;
      uint64_t v18 = 0x2000000000;
      unint64_t v10 = (uint64_t (*)(uint64_t, unsigned int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      float v19 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
      {
        v15[0] = MEMORY[0x263EF8330];
        v15[1] = 0x40000000;
        _OWORD v15[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6200;
        v15[3] = &unk_2643B9850;
        v15[4] = &v16;
        ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6200((uint64_t)v15);
        unint64_t v10 = (uint64_t (*)(uint64_t, unsigned int *))v17[3];
      }
      _Block_object_dispose(&v16, 8);
      if (!v10)
      {
        dlerror();
        uint64_t v14 = (_Unwind_Exception *)abort_report_np();
        _Block_object_dispose(&v16, 8);
        _Unwind_Resume(v14);
      }
      return v10(v9, a5);
    case 21:
      if (a6 >= 4)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 560) = *a5 != 0;
        return result;
      }
      return 4294956445;
    default:
      return 4294956417;
  }
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6200(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_6205;
    v5[4] = &__block_descriptor_tmp_66;
    void v5[5] = v5;
    long long v6 = xmmword_2643B9870;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    float v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  float v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_6205()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t AUMatrixReverbLite::GetProperty(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 10)
  {
    int v6 = *((_DWORD *)this + 139);
LABEL_8:
    uint64_t result = 0;
    *a5 = v6;
    return result;
  }
  if (a2 != 57)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = *((unsigned __int8 *)this + 560);
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 1);
  do
  {
    int v9 = overviewParameterIDs[v7];
    *(void *)a5 = v8;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v9;
    ++v7;
    a5 += 6;
  }
  while (v7 != 7);
  return 0;
}

uint64_t AUMatrixReverbLite::GetPropertyInfo(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 55)
    {
      if (a2 == 56)
      {
        BOOL v7 = 1;
        unsigned int v8 = 8;
      }
      else
      {
        if (a2 != 57) {
          return result;
        }
        BOOL v7 = 0;
        unsigned int v8 = 168;
      }
    }
    else
    {
      BOOL v7 = 1;
      unsigned int v8 = 4;
      if (a2 != 10 && a2 != 21) {
        return result;
      }
    }
    uint64_t result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

uint64_t AUMatrixReverbLite::Reset(AUMatrixReverbLite *this)
{
  double v1 = (_OWORD *)*((void *)this + 66);
  if (v1) {
    FeedbackDelayNetwork<float>::Reset(v1);
  }
  return 0;
}

void *AUMatrixReverbLite::Cleanup(AUMatrixReverbLite *this)
{
  return CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((void *)this + 66, 0);
}

void *CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != a2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      uint64_t v5 = 1152;
      do
      {
        int v6 = *(void **)(v2 + v5 + 40);
        if (v6)
        {
          *(void *)(v2 + v5 + 48) = v6;
          operator delete(v6);
        }
        v5 -= 72;
      }
      while (v5);
      uint64_t result = (void *)MEMORY[0x21D497F90](v2, 0x1080C401ADC8BBCLL);
    }
    *uint64_t v4 = a2;
  }
  return result;
}

uint64_t AUMatrixReverbLite::Initialize(AUMatrixReverbLite *this)
{
  uint64_t v2 = (AUMatrixReverbLite *)((char *)this + 80);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0) + 108)
    && *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) <= 0xCu
    && (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) != 2
     || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108) != 1))
  {
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) < 3u
      || (int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108),
          v3 == *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108)))
    {
      double v4 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
      if (v4 == *(double *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 80))
      {
        *((_DWORD *)this + 135) = *((_DWORD *)this + 134);
        operator new();
      }
    }
  }
  return 4294956428;
}

void AUMatrixReverbLite::~AUMatrixReverbLite(AUMatrixReverbLite *this)
{
  *(void *)this = &unk_26CBACE68;
  CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((void *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBACE68;
  CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((void *)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

void *AUMatrixReverbLiteFactory()
{
  uint64_t result = malloc_type_malloc(0x278uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixReverbLite>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixReverbLite>::Destruct;
  return result;
}

void ECompressorKernel::Process(ECompressorKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v12 = ausdk::AUElement::GetParameter(v11, 3u);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v14 = ausdk::AUElement::GetParameter(v13, 1u);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v16 = ausdk::AUElement::GetParameter(v15, 2u);
  int v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v18 = ausdk::AUElement::GetParameter(v17, 4u);
  float v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v20 = ausdk::AUElement::GetParameter(v19, 5u);
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  float v23 = ausdk::AUElement::GetParameter(v21, 6u);

  CompressorKernel::Process((ECompressorKernel *)((char *)this + 24), a2, a3, a4, 0, Parameter, v14, v12, v16, v18, v20, v23, 0, v22);
}

void ECompressorKernel::Reset(ECompressorKernel *this)
{
}

void ECompressorKernel::~ECompressorKernel(ECompressorKernel *this)
{
}

uint64_t AUDynamicsProcessor::Version(AUDynamicsProcessor *this)
{
  return 0x10000;
}

void AUDynamicsProcessor::NewKernel(AUDynamicsProcessor *this)
{
}

void sub_21BA93844(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL AUDynamicsProcessor::StreamFormatWritable(AUDynamicsProcessor *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDynamicsProcessor::SupportsTail(AUDynamicsProcessor *this)
{
  return 1;
}

double AUDynamicsProcessor::GetTailTime(AUDynamicsProcessor *this)
{
  return 0.2;
}

double AUDynamicsProcessor::GetLatency(AUDynamicsProcessor *this)
{
  return 256.0 / *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 80);
}

uint64_t AUDynamicsProcessor::NewFactoryPresetSet(AUDynamicsProcessor *this, const AUPreset *a2)
{
  uint64_t v3 = 0;
  SInt32 presetNumber = a2->presetNumber;
  while (presetNumber != *(_DWORD *)((char *)&sPresets + v3))
  {
    v3 += 16;
    if (v3 == 96) {
      return 4294956445;
    }
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)((char *)&sPresets + v3));
  AUDynamicsProcessor::SetParamsForPreset(this, presetNumber);
  return 0;
}

void AUDynamicsProcessor::SetParamsForPreset(AUDynamicsProcessor *this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (AUDynamicsProcessor *)((char *)this + 32);
  double v4 = (char *)&presetParams + 28 * a2;
  do
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
    ausdk::AUElement::SetParameter(Element, v2, *(float *)&v4[4 * v2], 0);
    ++v2;
  }
  while (v2 != 7);
}

uint64_t AUDynamicsProcessor::GetPresets(AUDynamicsProcessor *this, const __CFArray **a2)
{
  if (a2)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 6, 0);
    for (uint64_t i = 0; i != 96; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUDynamicsProcessor::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v4 = ausdk::AUBase::RestoreState(this, a2);
  if (!v4 && !CFDictionaryContainsKey((CFDictionaryRef)a2, @"ThresholdOK"))
  {
    uint64_t v5 = (ausdk::AUScope *)(this + 4);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
    float v7 = ausdk::AUElement::GetParameter(Element, 0) * 0.5;
    unsigned int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
    ausdk::AUElement::SetParameter(v8, 0, v7, 0);
    int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
    float v10 = ausdk::AUElement::GetParameter(v9, 3u) * 0.5;
    uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v5, 0);
    ausdk::AUElement::SetParameter(v11, 3u, v10, 0);
  }
  return v4;
}

uint64_t AUDynamicsProcessor::SaveState(AUDynamicsProcessor *this, __CFDictionary **a2)
{
  ausdk::AUBase::SaveState(this, a2);
  uint64_t v3 = *a2;
  int valuePtr = 1;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v3, @"ThresholdOK", v4);
  CFRelease(v4);
  return 0;
}

uint64_t AUDynamicsProcessor::GetParameterInfo(AUDynamicsProcessor *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  v31[8] = xmmword_2643B9928;
  v31[9] = *(_OWORD *)&off_2643B9938;
  v31[10] = xmmword_2643B9948;
  v31[4] = xmmword_2643B98E8;
  v31[5] = *(_OWORD *)&off_2643B98F8;
  v31[6] = xmmword_2643B9908;
  v31[7] = *(_OWORD *)&off_2643B9918;
  v31[0] = xmmword_2643B98A8;
  v31[1] = *(_OWORD *)&off_2643B98B8;
  v31[2] = xmmword_2643B98C8;
  v31[3] = *(_OWORD *)&off_2643B98D8;
  if (!LocalizeAUParameterStringsForClass<AUDynamicsProcessor>(std::initializer_list<__CFString const**>)::sLocalized) {
    LocalizeAUParameterStringsForClass<AUDynamicsProcessor>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v31, 22);
  }
  switch(a3)
  {
    case 0u:
      CFStringRef v8 = (const __CFString *)kCompressionThresholdParamName;
      buffer->cfNameString = (CFStringRef)kCompressionThresholdParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x41A00000C2C80000;
      AudioUnitParameterValue v9 = -15.0;
      goto LABEL_21;
    case 1u:
      CFStringRef v20 = (const __CFString *)kHeadRoomParamName;
      buffer->cfNameString = (CFStringRef)kHeadRoomParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x422000003DCCCCCDLL;
      AudioUnitParameterValue v9 = 5.6;
      goto LABEL_21;
    case 2u:
      CFStringRef v16 = (const __CFString *)kExpansionRatioParamName;
      buffer->cfNameString = (CFStringRef)kExpansionRatioParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Rate;
      *(void *)&buffer->minCFNumberRef Value = 0x424800003F800000;
      AudioUnitParameterValue v17 = 1.0;
      goto LABEL_23;
    case 3u:
      CFStringRef v18 = (const __CFString *)kExpansionThresholdParamName;
      buffer->cfNameString = (CFStringRef)kExpansionThresholdParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 3270508544;
      AudioUnitParameterValue v9 = -100.0;
LABEL_21:
      buffer->defaultCFNumberRef Value = v9;
      return result;
    case 4u:
      CFStringRef v19 = (const __CFString *)kAttackTimeParamName;
      buffer->cfNameString = (CFStringRef)kAttackTimeParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x3E99999A3A83126FLL;
      AudioUnitParameterValue v17 = 0.05;
      goto LABEL_23;
    case 5u:
      CFStringRef v21 = (const __CFString *)kReleaseTimeParamName;
      buffer->cfNameString = (CFStringRef)kReleaseTimeParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFNumberRef Value = 0x404000003C23D70ALL;
      AudioUnitParameterValue v17 = 0.03;
LABEL_23:
      AudioUnitParameterOptions v22 = buffer->flags | 0x400000;
      buffer->defaultCFNumberRef Value = v17;
      buffer->AudioUnitParameterOptions flags = v22;
      return result;
    case 6u:
      CFStringRef v23 = (const __CFString *)kMasterGainParamName;
      buffer->cfNameString = (CFStringRef)kMasterGainParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x42200000C2200000;
      buffer->defaultCFNumberRef Value = 0.0;
      return result;
    default:
      unsigned int v10 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 108);
      if (v10 == 2) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = v10;
      }
      if (a3 >= 0x3E8 && v11 + 1000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        CFStringRef BandName = GenerateBandName(a3 - 1000, v11, (BOOL *)v31, (__CFString *)kMeteringParamName, (const __CFString *const *)kMeteringParamNames);
        int v13 = LOBYTE(v31[0]);
        buffer->cfNameString = BandName;
        if (v13) {
          int v14 = 134217744;
        }
        else {
          int v14 = 0x8000000;
        }
        buffer->flags |= v14;
        CFStringGetCString(BandName, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        uint64_t v15 = 0x41A0000000000000;
LABEL_35:
        *(void *)&buffer->minCFNumberRef Value = v15;
        AudioUnitParameterOptions v30 = buffer->flags & 0x7FFF7FFF | 0x8000;
        buffer->defaultCFNumberRef Value = 0.0;
        buffer->AudioUnitParameterOptions flags = v30;
        return result;
      }
      int v24 = a3 - 2000;
      if (a3 >= 0x7D0 && v11 + 2000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        float v25 = (__CFString *)kInputAmpParamName;
        float v26 = kInputAmpParamNames;
LABEL_31:
        CFStringRef v27 = GenerateBandName(v24, v11, (BOOL *)v31, v25, (const __CFString *const *)v26);
        int v28 = LOBYTE(v31[0]);
        buffer->cfNameString = v27;
        if (v28) {
          int v29 = 134217744;
        }
        else {
          int v29 = 0x8000000;
        }
        buffer->flags |= v29;
        CFStringGetCString(v27, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        uint64_t v15 = 0x41A00000C2F00000;
        goto LABEL_35;
      }
      uint64_t result = 4294956418;
      if (a3 >= 0xBB8 && v11 + 3000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        float v25 = (__CFString *)kOutputAmpParamName;
        float v26 = kOutputAmpParamNames;
        int v24 = a3 - 3000;
        goto LABEL_31;
      }
      return result;
  }
}

CFStringRef GenerateBandName(int a1, unsigned int a2, BOOL *a3, __CFString *theString, const __CFString *const *a5)
{
  MutableCopy = theString;
  if (a2 > 8)
  {
    MutableCopy = CFStringCreateMutableCopy(0, 128, theString);
    snprintf(GenerateBandName(unsigned int,unsigned int,BOOL &,__CFString const*,__CFString const* const*)::cstr, 0x14uLL, " (%d)", a1 + 1);
    CFStringAppendCString(MutableCopy, GenerateBandName(unsigned int,unsigned int,BOOL &,__CFString const*,__CFString const* const*)::cstr, 0x600u);
    *a3 = 1;
  }
  else
  {
    *a3 = 0;
    if (a2 != 1) {
      return a5[a1];
    }
  }
  return MutableCopy;
}

uint64_t AUDynamicsProcessor::Render(int32x2_t *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  CFStringRef v8 = (ausdk::AUScope *)&this[10];
  uint64_t Element = (_DWORD *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], 0);
  if (this[69].i8[0])
  {
    unsigned int v42 = 0;
    unsigned int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t v12 = ausdk::AUInputElement::PullInput(v11, &v42, a3, 0, a4);
    if (!v12)
    {
      if (this[69].i8[2] && *(unsigned char *)(v10 + 168))
      {
        uint64_t BufferList = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
        ausdk::AUBufferList::SetBufferList((ausdk::AUBufferList *)(v10 + 144), BufferList);
      }
      else
      {
        AudioUnitParameterOptions v22 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
        ausdk::AUBufferList::CopyBufferContentsTo((void *)Element + 18, v22);
      }
    }
    return v12;
  }
  if (Element[27] == 2)
  {
    unsigned int v41 = 0;
    int v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t v12 = ausdk::AUInputElement::PullInput(v14, &v41, a3, 0, a4);
    if (!v12)
    {
      if (this[69].i8[2] && *(unsigned char *)(v10 + 168))
      {
        uint64_t v15 = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
        ausdk::AUBufferList::SetBufferList((ausdk::AUBufferList *)(v10 + 144), v15);
      }
      CFStringRef v16 = (ausdk::AUBufferList *)(v10 + 144);
      AudioUnitParameterValue v17 = *(float **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144)) + 16);
      int v18 = *(_DWORD *)(v10 + 92);
      uint64_t v19 = ausdk::AUBufferList::GetBufferList(v16);
      if ((v18 & 0x20) != 0) {
        CFStringRef v20 = *(float **)(v19 + 32);
      }
      else {
        CFStringRef v20 = (float *)(*(void *)(v19 + 16) + 4);
      }
      if ((v41 & 0x10) != 0)
      {
        *a2 |= 0x10u;
        if (!this[69].i8[2])
        {
          int v28 = (_DWORD *)ausdk::AUBufferList::GetBufferList(v16);
          if (*v28)
          {
            int v29 = v28;
            unsigned int v30 = 0;
            float v31 = (void **)(v28 + 4);
            do
            {
              bzero(*v31, *((unsigned int *)v31 - 1));
              ++v30;
              v31 += 2;
            }
            while (v30 < *v29);
          }
        }
        uint64_t v12 = 0;
        this[216] = vdup_n_s32(0xC3200000);
        *(float *)&this[215].i32[1] = *(float *)&this[215].i32[1] * 0.98;
      }
      else
      {
        CFStringRef v23 = (ausdk::AUBufferList *)(Element + 36);
        int v24 = *(float **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36)) + 16);
        int v25 = Element[23];
        uint64_t v26 = ausdk::AUBufferList::GetBufferList(v23);
        if ((v25 & 0x20) != 0) {
          CFStringRef v27 = *(float **)(v26 + 32);
        }
        else {
          CFStringRef v27 = (float *)(*(void *)(v26 + 16) + 4);
        }
        uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
        float Parameter = ausdk::AUElement::GetParameter(v32, 0);
        float v34 = ausdk::AUElement::GetParameter(v32, 3u);
        float v35 = ausdk::AUElement::GetParameter(v32, 1u);
        float v36 = ausdk::AUElement::GetParameter(v32, 2u);
        float v37 = ausdk::AUElement::GetParameter(v32, 4u);
        float v38 = ausdk::AUElement::GetParameter(v32, 5u);
        float v39 = ausdk::AUElement::GetParameter(v32, 6u);
        CompressorKernel::Process((CompressorKernel *)&this[77], v24, v17, a4, v27, Parameter, v35, v34, v36, v37, v38, v39, v20, v40);
        return 0;
      }
    }
    return v12;
  }

  return ausdk::AUEffectBase::Render((ausdk::AUInputElement **)this, a2, a3, a4);
}

uint64_t AUDynamicsProcessor::GetParameter(AUDynamicsProcessor *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
LABEL_3:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    float Parameter = ausdk::AUElement::GetParameter(Element, a2);
    goto LABEL_4;
  }
  int v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 108);
  if (a2 >= 0x3E8 && v13 + 1000 > a2)
  {
    float Parameter = 0.0;
    if (!*((unsigned char *)this + 552) && *((unsigned char *)this + 17))
    {
      if (v13 == 2) {
        int v14 = (float *)((char *)this + 1724);
      }
      else {
        int v14 = (float *)(*(void *)(*((void *)this + 74) + 8 * (a2 - 1000)) + 1132);
      }
      float v16 = *v14;
      if (*v14 < 1.1755e-38) {
        float v16 = 1.1755e-38;
      }
      float Parameter = log10f(v16) * -20.0;
    }
    goto LABEL_4;
  }
  if (a2 >= 0x7D0 && v13 + 2000 > a2)
  {
    float Parameter = 0.0;
    if (*((unsigned char *)this + 552) || !*((unsigned char *)this + 17)) {
      goto LABEL_4;
    }
    if (v13 == 2) {
      uint64_t v15 = (float *)((char *)this + 1728);
    }
    else {
      uint64_t v15 = (float *)(*(void *)(*((void *)this + 74) + 8 * (a2 - 2000)) + 1136);
    }
LABEL_30:
    float Parameter = *v15;
    goto LABEL_4;
  }
  if (a2 < 0xBB8 || v13 + 3000 <= a2)
  {
    Scope = (AUDynamicsProcessor *)((char *)this + 32);
    goto LABEL_3;
  }
  float Parameter = 0.0;
  if (!*((unsigned char *)this + 552) && *((unsigned char *)this + 17))
  {
    if (v13 == 2) {
      uint64_t v15 = (float *)((char *)this + 1732);
    }
    else {
      uint64_t v15 = (float *)(*(void *)(*((void *)this + 74) + 8 * (a2 - 3000)) + 1140);
    }
    goto LABEL_30;
  }
LABEL_4:
  *a5 = Parameter;
  return 0;
}

uint64_t AUDynamicsProcessor::GetProperty(AUDynamicsProcessor *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 != 57 || a3)
  {
    if (a3) {
      return 4294956417;
    }
    if (a2 == 29)
    {
      AudioUnitParameterValue v9 = (unsigned __int8 *)this + 554;
    }
    else
    {
      if (a2 != 21) {
        return 4294956417;
      }
      AudioUnitParameterValue v9 = (unsigned __int8 *)this + 552;
    }
    uint64_t result = 0;
    *a5 = *v9;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 1);
  do
  {
    int v7 = overviewParameterIDs[v5];
    *(void *)a5 = v6;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v7;
    ++v5;
    a5 += 6;
  }
  while (v5 != 7);
  return 0;
}

uint64_t AUDynamicsProcessor::GetPropertyInfo(AUDynamicsProcessor *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 57 || a3)
  {
    if (a2 != 56 || a3)
    {
      if (a3 || (a2 | 8) != 0x1D)
      {
        return 4294956417;
      }
      else
      {
        uint64_t result = 0;
        *a6 = 1;
        *a5 = 4;
      }
    }
    else
    {
      uint64_t result = 0;
      *a5 = 8;
      *a6 = 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *a5 = 168;
    *a6 = 0;
  }
  return result;
}

uint64_t AUDynamicsProcessor::Reset(AUDynamicsProcessor *this)
{
  uint64_t v2 = (void *)*((void *)this + 66);
  uint64_t v3 = (void *)*((void *)this + 67);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
    }
    ++v2;
  }
  CompressorKernel::Reset((AUDynamicsProcessor *)((char *)this + 616));
  return 0;
}

double AUDynamicsProcessor::Cleanup(AUDynamicsProcessor *this)
{
  *((void *)this + 75) = *((void *)this + 74);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUDynamicsProcessor::Initialize(AUDynamicsProcessor *this)
{
  uint64_t v2 = ausdk::AUEffectBase::Initialize(this);
  if (!v2)
  {
    int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 108);
    if (v3 == 2) {
      int v4 = 1;
    }
    else {
      int v4 = v3;
    }
    if (v4 >= 1)
    {
      for (int i = 0; i != v4; ++i)
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(Element, i + 1000, 0.0, 0);
        int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v7, i + 2000, -120.0, 0);
        CFStringRef v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v8, i + 3000, -120.0, 0);
      }
    }
    if (*((_DWORD *)this + 950) != v4)
    {
      *((_DWORD *)this + 950) = v4;
      (*(void (**)(AUDynamicsProcessor *, uint64_t, void, void))(*(void *)this + 432))(this, 3, 0, 0);
    }
  }
  return v2;
}

void AUDynamicsProcessor::~AUDynamicsProcessor(AUDynamicsProcessor *this)
{
  *(void *)this = &unk_26CBAD388;
  uint64_t v2 = (void *)*((void *)this + 74);
  if (v2)
  {
    *((void *)this + 75) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26CBB1A38;
  int v3 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_26CBAD388;
  uint64_t v2 = (void *)*((void *)this + 74);
  if (v2)
  {
    *((void *)this + 75) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26CBB1A38;
  int v3 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

void *AUDynamicsProcessorFactory()
{
  double result = malloc_type_malloc(0xF20uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Destruct;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Destruct(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void AUDynamicsProcessor::AUDynamicsProcessor(AUDynamicsProcessor *this, OpaqueAudioComponentInstance *a2)
{
  int v3 = (_OWORD *)((char *)this + 1676);
  AUEffectWithCustomViewBase::AUEffectWithCustomViewBase(this, a2);
  *(void *)uint64_t v4 = &unk_26CBAD388;
  *(void *)(v4 + 592) = 0;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_DWORD *)(v4 + 616) = 1194083328;
  bzero((void *)(v4 + 620), 0x40CuLL);
  *((_DWORD *)this + 414) = 1215954944;
  *(_OWORD *)((char *)this + 1660) = 0u;
  __asm { FMOV            V1.4S, #-1.0 }
  *int v3 = xmmword_21BAB7090;
  v3[1] = _Q1;
  v3[2] = xmmword_21BAB7040;
  *((_DWORD *)this + 431) = 1065353216;
  *((int32x2_t *)this + 216) = vdup_n_s32(0xC2F00000);
  bzero((char *)this + 1736, 0x804uLL);
  *((_DWORD *)this + 947) = 982044160;
  *((unsigned char *)this + 3792) = 0;
  *((_DWORD *)this + 950) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0, -15.0, 0);
  unsigned int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v11, 3u, -100.0, 0);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v12, 1u, 5.6, 0);
  int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v13, 2u, 1.0, 0);
  int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v14, 4u, 0.05, 0);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v15, 5u, 0.03, 0);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicsProcessor *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v16, 6u, 0.0, 0);
  AUDynamicsProcessor::SetParamsForPreset(this, 0);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sPresets);
  ausdk::AUBase::CreateElements((uint64_t)this);
  uint64_t v19 = 0x40E5888000000000;
  long long v20 = xmmword_21BAB6C50;
  long long v21 = xmmword_21BAB6C60;
  uint64_t v17 = ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 56))(v17, &v19);
  uint64_t v18 = ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 56))(v18, &v19);
}

void sub_21BA94C64(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 75) = v4;
    operator delete(v4);
  }
  AUEffectWithCustomViewBase::~AUEffectWithCustomViewBase(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpecialPurposeSweepFilter::Version(AUSpecialPurposeSweepFilter *this)
{
  return 0x10000;
}

void AUSpecialPurposeSweepFilter::NewKernel(AUSpecialPurposeSweepFilter *this)
{
}

void sub_21BA94D08(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10A1C40C7DC006BLL);
  _Unwind_Resume(a1);
}

double AUSpecialPurposeSweepFilter::SweepFilterKernel::Reset(AUSpecialPurposeSweepFilter::SweepFilterKernel *this)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
  *((float *)this + 22) = ausdk::AUElement::GetParameter(Element, 0);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 3) + 128), 0) + 80)
     * 0.015625
     * 0.24;
  if (v3 >= 2.22507386e-308) {
    double v4 = -6.90775528 / v3;
  }
  else {
    double v4 = -INFINITY;
  }
  double v5 = exp(v4);
  if (v4 < -708.4) {
    double v5 = 0.0;
  }
  uint64_t v6 = *((void *)this + 3);
  float v7 = *((float *)this + 22);
  float v8 = v5;
  float v9 = fminf(*(float *)(v6 + 40604) * (float)(1.0 - v7), 1.0);
  *((float *)this + 23) = v8;
  *((float *)this + 24) = v9;
  int v10 = vcvtmd_s64_f64(v7 * 999.0 + 0.5);
  unsigned int v11 = v10 & ~(v10 >> 31);
  if (v11 >= 0x3E7) {
    unsigned int v11 = 999;
  }
  uint64_t v12 = (float64x2_t *)(v6 + 40 * v11);
  *((float32x4_t *)this + 2) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12[37]), v12[38]);
  float v13 = v12[39].f64[0];
  *((float *)this + 12) = v13;
  *((_DWORD *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

int8x16_t AUSpecialPurposeSweepFilter::SweepFilterKernel::Process(AUSpecialPurposeSweepFilter::SweepFilterKernel *this, float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  if (a4)
  {
    unsigned int v6 = a4;
    float v9 = *(float *)(*((void *)this + 3) + 40604);
    do
    {
      if (v6 >= 0x80) {
        unsigned int v10 = 64;
      }
      else {
        unsigned int v10 = v6;
      }
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(*((void *)this + 1) + 32), 0);
      float v12 = fmaxf(fminf(ausdk::AUElement::GetParameter(Element, 0), 1.0), 0.0);
      float v13 = v12 + (float)(*((float *)this + 23) * (float)(*((float *)this + 22) - v12));
      *((float *)this + 22) = v13;
      int v14 = vcvtmd_s64_f64(v13 * 999.0 + 0.5);
      unsigned int v15 = v14 & ~(v14 >> 31);
      if (v15 >= 0x3E7) {
        unsigned int v15 = 999;
      }
      float v16 = (float64x2_t *)(*((void *)this + 3) + 40 * v15);
      float v17 = 1.0 / (float)v10;
      _Q3 = *((float32x4_t *)this + 2);
      *(float32x4_t *)((char *)this + 52) = vmulq_n_f32(vsubq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[37]), v16[38]), _Q3), v17);
      float v19 = v16[39].f64[0];
      *((float *)this + 17) = v17 * (float)(v19 - *((float *)this + 12));
      float v20 = *((float *)this + 24);
      *((float *)this + 25) = v17 * (float)(fminf(v9 * (float)(1.0 - v13), 1.0) - v20);
      _S1 = *((float *)this + 20);
      _S2 = *((_DWORD *)this + 21);
      unsigned int v23 = v10;
      do
      {
        float v24 = *a2++;
        _Q0.f32[0] = v24;
        __asm
        {
          FMLA            S7, S0, V3.S[2]
          FMLS            S4, S1, V3.S[0]
          FMLS            S1, S2, V3.S[1]
        }
        *a3++ = v24 + (float)(v20 * (float)(_S1 - v24));
        _S2 = *((_DWORD *)this + 20);
        *((float *)this + 20) = _S1;
        *((_DWORD *)this + 21) = _S2;
        float v33 = *((float *)this + 17);
        __int32 v32 = *((_DWORD *)this + 18);
        *((float *)this + 18) = v24;
        *((_DWORD *)this + 19) = v32;
        _Q3 = vaddq_f32(*(float32x4_t *)((char *)this + 52), *((float32x4_t *)this + 2));
        *((float32x4_t *)this + 2) = _Q3;
        *((float *)this + 12) = v33 + *((float *)this + 12);
        float v20 = *((float *)this + 25) + *((float *)this + 24);
        *((float *)this + 24) = v20;
        --v23;
      }
      while (v23);
      v6 -= v10;
    }
    while (v6);
    _Q0.i32[1] = v32;
    _Q0.i64[1] = __PAIR64__(_S2, LODWORD(_S1));
  }
  else
  {
    _Q0 = *(float32x4_t *)((char *)this + 72);
  }
  float32x4_t v34 = vabsq_f32(_Q0);
  float64x2_t v35 = vcvt_hight_f64_f32(v34);
  float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
  float64x2_t v37 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  int8x16_t result = vandq_s8((int8x16_t)_Q0, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v36, v37), (int8x16_t)vcgtq_f64(v38, v36)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v35, v37), (int8x16_t)vcgtq_f64(v38, v35))));
  *(int8x16_t *)((char *)this + 72) = result;
  return result;
}

void AUSpecialPurposeSweepFilter::SweepFilterKernel::~SweepFilterKernel(AUSpecialPurposeSweepFilter::SweepFilterKernel *this)
{
}

uint64_t AUSpecialPurposeSweepFilter::SupportsTail(AUSpecialPurposeSweepFilter *this)
{
  return 1;
}

double AUSpecialPurposeSweepFilter::GetTailTime(AUSpecialPurposeSweepFilter *this)
{
  return 0.001;
}

double AUSpecialPurposeSweepFilter::GetParameterInfo(AUSpecialPurposeSweepFilter *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (!(a3 | a2))
  {
    buffer->cfNameString = @"sweep";
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(@"sweep", buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Generic;
    double result = 0.0078125;
    *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
    buffer->defaultCFNumberRef Value = 1.0;
  }
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::SetProperty(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a2 != 4700 || a3 != 0) {
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  if (a6 < 0xC) {
    return 4294956445;
  }
  uint64_t result = 0;
  float v9 = (char *)this + 40592;
  uint64_t v10 = *(void *)a5;
  *((_DWORD *)v9 + 2) = a5[2];
  *(void *)float v9 = v10;
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::GetProperty(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      uint64_t result = 0;
      *a5 = *((void *)this + 1);
      a5[1] = 0;
      *((_DWORD *)a5 + 4) = 0;
    }
    else if (a2 == 4700)
    {
      uint64_t result = 0;
      float v8 = (char *)this + 40592;
      uint64_t v9 = *(void *)v8;
      *((_DWORD *)a5 + 2) = *((_DWORD *)v8 + 2);
      *a5 = v9;
    }
  }
  else
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29) {
        return result;
      }
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 554);
    }
    *(_DWORD *)a5 = v7;
  }
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::GetPropertyInfo(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      char v9 = 0;
      unsigned int v8 = 24;
    }
    else
    {
      if (a2 != 4700) {
        return result;
      }
      char v9 = *((unsigned char *)this + 17) ^ 1;
      unsigned int v8 = 12;
    }
LABEL_11:
    uint64_t result = 0;
    *a6 = v9;
    *a5 = v8;
    return result;
  }
  unsigned int v8 = 4;
  char v9 = 1;
  if (a2 == 21 || a2 == 29) {
    goto LABEL_11;
  }
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::Initialize(AUSpecialPurposeSweepFilter *this)
{
  uint64_t v2 = (float *)((char *)this + 40592);
  float v3 = fmaxf(1.0 - *((float *)this + 10150), 0.01);
  float v4 = 1.0 / v3;
  BOOL v5 = v3 < 0.99;
  float v6 = 1.0101;
  if (v5) {
    float v6 = v4;
  }
  *((float *)this + 10151) = v6;
  uint64_t v7 = 0;
  double v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpecialPurposeSweepFilter *)((char *)this + 128), 0) + 80);
  float v9 = v2[1];
  if (v8 * 0.45 < v9) {
    float v9 = v8 * 0.45;
  }
  v2[1] = v9;
  uint64_t v10 = (double *)((char *)this + 624);
  do
  {
    double v11 = *v2;
    double v12 = pow((float)(v2[1] / *v2), (double)(int)v7 / 999.0) * v11 * 6.28318531 / v8;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 1.0;
    if (v12 > 0.0)
    {
      if (v12 <= 3.11017673) {
        double v18 = v12;
      }
      else {
        double v18 = 3.11017673;
      }
      double v19 = __exp10(0.0);
      __double2 v20 = __sincos_stret(v18);
      double v21 = (1.0 - v20.__cosval) * 0.5;
      double v22 = 1.0 / (v20.__sinval / 1.41421356 + 1.0);
      double v23 = v19 * v22;
      double v13 = v20.__cosval * -2.0 * v22;
      double v14 = v22 * (1.0 - v20.__sinval / 1.41421356);
      double v16 = v23 * v21;
      double v15 = v23 * (v21 + v21);
      double v17 = v16;
    }
    *(v10 - 4) = v13;
    *(v10 - 3) = v14;
    *(v10 - 2) = v17;
    *(v10 - 1) = v15;
    ++v7;
    *uint64_t v10 = v16;
    v10 += 5;
  }
  while (v7 != 1000);

  return ausdk::AUEffectBase::Initialize(this);
}

void AUSpecialPurposeSweepFilter::~AUSpecialPurposeSweepFilter(AUSpecialPurposeSweepFilter *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

void *AUSpecialPurposeSweepFilterFactory()
{
  uint64_t result = malloc_type_malloc(0x9EE0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpecialPurposeSweepFilter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpecialPurposeSweepFilter>::Destruct;
  return result;
}

uint64_t virtual thunk to'VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  return VoiceLFO::GetRunFrameCount((VoiceLFO *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

uint64_t VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  if (!(*(unsigned int (**)(VoiceLFO *))(*(void *)this + 48))(this)) {
    return a2;
  }
  unsigned int v4 = *((_DWORD *)this + 66);
  if (v4)
  {
    if (v4 >= a2) {
      return a2;
    }
    else {
      return v4;
    }
  }
  unsigned int v6 = *(_DWORD *)(*((void *)this + 32) + 92) - 26;
  BOOL v7 = v6 > 0x32;
  uint64_t v8 = (1 << v6) & 0x600000000000DLL;
  if (v7 || v8 == 0)
  {
    double v10 = *((double *)this + 37);
    if (v10 <= 0.0005) {
      return a2;
    }
    uint64_t result = (0.25 / v10);
  }
  else
  {
    uint64_t result = *((unsigned int *)this + 67);
  }
  if (result >= a2) {
    return a2;
  }
  if (!result)
  {
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v11 = 136315650;
      double v12 = "VoiceLFO.cpp";
      __int16 v13 = 1024;
      int v14 = 97;
      __int16 v15 = 1024;
      int v16 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d VoiceLFO::GetRunFrameCount returning 0 for input of %u", (uint8_t *)&v11, 0x18u);
      return 0;
    }
  }
  return result;
}

void virtual thunk to'VoiceLFO::~VoiceLFO(void *a1)
{
}

{
}

void VoiceLFO::~VoiceLFO(VoiceLFO *this)
{
  MemAllocator::FreeMem(v1, (void *)0x148);
}

{
}

void VoiceLFO::~VoiceLFO(VoiceLFO *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 40)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = a2[12];
  *((void *)this + 19) = a2[13];
  SamplerState::RemoveView(*((void *)this + 32), (VoiceLFO *)((char *)this + *(void *)(*(void *)this - 40)));
  *((void *)this + 32) = 0;
  ModControlDestination::~ModControlDestination((VoiceLFO *)((char *)this + 152), a2 + 5);
  uint64_t v5 = a2[2];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 40)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = a2[4];
}

double non-virtual thunk to'VoiceLFO::ProcessInputs(VoiceLFO *this)
{
  VoiceLFO::UpdateCachedState((uint64_t)this - 152);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)this + 15) = result;
  return result;
}

uint64_t VoiceLFO::UpdateCachedState(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 256);
  float v2 = fminf(fmaxf(*(float *)(this + 272) * *(float *)(v1 + 96), 0.0), 60.0);
  if (v2 <= 0.0)
  {
    unsigned int v5 = 0;
    double v4 = *(double *)(this + 280);
  }
  else
  {
    double v3 = v2;
    double v4 = *(double *)(this + 280);
    unsigned int v5 = (v3 / v4 + 0.5);
  }
  *(_DWORD *)(this + 304) = v5;
  double v6 = v4 * fminf(fmaxf(*(float *)(this + 276) * *(float *)(v1 + 100), 0.0078125), 128.0);
  *(double *)(this + 296) = v6;
  int v7 = *(_DWORD *)(v1 + 92);
  unsigned int v8 = 9999999;
  if (v7 <= 74)
  {
    if (v7 != 26 && v7 != 28 && v7 != 29) {
      goto LABEL_14;
    }
    if (*(_DWORD *)(this + 316) != 1) {
      return this;
    }
    double v9 = 0.5 / v6;
    goto LABEL_13;
  }
  if ((v7 - 75) < 2)
  {
    if (*(_DWORD *)(this + 316) != 1) {
      return this;
    }
    double v9 = (1.0 - *(double *)(this + 288)) * (double)(1.0 / v6);
LABEL_13:
    unsigned int v8 = v9;
  }
LABEL_14:
  *(_DWORD *)(this + 268) = v8;
  return this;
}

void non-virtual thunk to'VoiceLFO::RegisterInput(VoiceLFO *this, int a2)
{
}

void VoiceLFO::RegisterInput(VoiceLFO *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 != 44040192)
  {
    if (a2 != 42991616) {
      return;
    }
    if (*((_DWORD *)this + 41))
    {
      if (!*((void *)this + 21))
      {
        double v3 = (void *)MemAllocator::AllocMem((MemAllocator *)0x10);
        *double v3 = &unk_26CBADCF0;
        v3[1] = this;
        *((void *)this + 21) = v3;
      }
      return;
    }
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 41) <= 1u)
  {
LABEL_10:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      double v6 = "ModControlDestination.h";
      __int16 v7 = 1024;
      int v8 = 52;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  index > current number of inputs and/or max inputs", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
    return;
  }
  if (!*((void *)this + 22))
  {
    double v4 = (void *)MemAllocator::AllocMem((MemAllocator *)0x10);
    *double v4 = &unk_26CBADCC8;
    v4[1] = this;
    *((void *)this + 22) = v4;
  }
}

void ControlInputInstance<VoiceLFO,&VoiceLFO::HandleRateInput>::Set(uint64_t a1, float a2)
{
  if (a2 != 0.0)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3))
    {
      *(float *)(v3 + 276) = exp2f(a2) * *(float *)(v3 + 276);
      *(unsigned char *)(v3 + 248) = 1;
    }
  }
}

uint64_t ControlInputInstance<VoiceLFO,&VoiceLFO::HandleRateInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

void ControlInputInstance<VoiceLFO,&VoiceLFO::HandleDelayInput>::Set(uint64_t a1, float a2)
{
  if (a2 != 0.0)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3))
    {
      *(float *)(v3 + 272) = exp2f(a2) * *(float *)(v3 + 272);
      *(unsigned char *)(v3 + 248) = 1;
    }
  }
}

uint64_t ControlInputInstance<VoiceLFO,&VoiceLFO::HandleDelayInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

uint64_t non-virtual thunk to'VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  return VoiceLFO::GetRunFrameCount((VoiceLFO *)((char *)this - 152), a2);
}

void non-virtual thunk to'VoiceLFO::~VoiceLFO(VoiceLFO *this)
{
}

{
}

double VoiceLFO::ProcessInputs(VoiceLFO *this)
{
  VoiceLFO::UpdateCachedState((uint64_t)this);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)this + 34) = result;
  return result;
}

float VoiceLFO::GetValue(VoiceLFO *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 66);
  if (!v4)
  {
    double v7 = *((double *)this + 37);
    unsigned int v8 = *((_DWORD *)this + 67);
    if (v8 >= a2) {
      unsigned int v9 = v8 - a2;
    }
    else {
      unsigned int v9 = 0;
    }
    int v10 = *(_DWORD *)(*((void *)this + 32) + 92);
    switch(v10)
    {
      case 25:
        float v11 = *((double *)this + 36) * 6.28318024;
        float v12 = sinf(v11);
        int v13 = 0;
        goto LABEL_29;
      case 26:
        double v19 = *((double *)this + 36);
        double v20 = -1.0;
        double v21 = 2.0;
        goto LABEL_26;
      case 27:
        double v15 = *((double *)this + 36);
        float v17 = v15 * -4.0 + 2.0;
        if (v15 >= 0.75)
        {
          float v16 = v15 * 4.0 + -4.0;
          float v17 = v16;
        }
        int v13 = 0;
        if (v15 < 0.25)
        {
          float v18 = v15 * 4.0;
          float v12 = v18;
        }
        else
        {
          float v12 = v17;
        }
        goto LABEL_29;
      case 28:
        if (*((double *)this + 36) >= 0.5) {
          float v12 = -1.0;
        }
        else {
          float v12 = 1.0;
        }
        goto LABEL_28;
      case 29:
        double v19 = *((double *)this + 36);
        double v20 = 1.0;
        double v21 = -2.0;
LABEL_26:
        double v14 = v20 + v19 * v21;
        goto LABEL_27;
      default:
        if (v10 == 75)
        {
          float v12 = *((float *)this + 77);
        }
        else
        {
          if (v10 != 76)
          {
            int v13 = 0;
            float v12 = 0.0;
            goto LABEL_29;
          }
          double v14 = *((float *)this + 77) + *((double *)this + 36) * (float)(*((float *)this + 78) - *((float *)this + 77));
LABEL_27:
          float v12 = v14;
        }
LABEL_28:
        int v13 = 1;
LABEL_29:
        double v22 = *((double *)this + 36) + (double)a2 * v7;
        double v23 = v22 - (double)(int)v22;
        *((double *)this + 36) = v23;
        if (!v13 || !a2 || v8 > a2) {
          goto LABEL_60;
        }
        unsigned int v9 = 0;
        if (v10 > 28)
        {
          if (v10 != 29)
          {
            if (v10 != 75)
            {
              if (v10 == 76)
              {
                unsigned int v9 = (1.0 / v7);
                *((_DWORD *)this + 77) = *((_DWORD *)this + 78);
                *((float *)this + 78) = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                *((void *)this + 36) = 0;
              }
              goto LABEL_60;
            }
            if (*((_DWORD *)this + 79) == 1) {
              goto LABEL_48;
            }
            unsigned int v9 = (1.0 / v7);
            *((_DWORD *)this + 79) = 1;
            float v12 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            *((float *)this + 77) = v12;
LABEL_60:
            *((_DWORD *)this + 67) = v9;
            return (v12 + 1.0) * 0.5;
          }
          int v26 = *((_DWORD *)this + 79);
          if (v26 == 1)
          {
LABEL_48:
            *((_DWORD *)this + 79) = 0;
LABEL_59:
            unsigned int v9 = 4;
            goto LABEL_60;
          }
          if (!v26)
          {
            double v25 = 1.0;
            goto LABEL_46;
          }
          goto LABEL_52;
        }
        if (v10 == 26)
        {
          int v27 = *((_DWORD *)this + 79);
          if (v27 == 1)
          {
            int v29 = 2;
            goto LABEL_58;
          }
          if (v27 != 2) {
            goto LABEL_52;
          }
          double v28 = 1.0;
        }
        else
        {
          if (v10 != 28) {
            goto LABEL_60;
          }
          int v24 = *((_DWORD *)this + 79);
          if (v24 != 2)
          {
            if (v24 != 1)
            {
              if (!v24)
              {
                double v25 = 0.5 - v23;
LABEL_46:
                unsigned int v9 = (v25 / v7);
                *((_DWORD *)this + 79) = 1;
                float v12 = 1.0;
                goto LABEL_60;
              }
LABEL_52:
              unsigned int v9 = 0;
              goto LABEL_60;
            }
            int v29 = 2 * (v12 == 1.0);
LABEL_58:
            *((_DWORD *)this + 79) = v29;
            goto LABEL_59;
          }
          double v28 = 1.0 - v23;
        }
        unsigned int v9 = (v28 / v7);
        *((_DWORD *)this + 79) = 1;
        float v12 = -1.0;
        goto LABEL_60;
    }
  }
  BOOL v5 = v4 >= a2;
  unsigned int v6 = v4 - a2;
  if (v5) {
    *((_DWORD *)this + 66) = v6;
  }
  else {
    *((_DWORD *)this + 66) = 0;
  }
  float v12 = 0.0;
  return (v12 + 1.0) * 0.5;
}

uint64_t VoiceLFO::Update(VoiceLFO *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 32) + 56))(*((void *)this + 32));
  (*(void (**)(VoiceLFO *, uint64_t))(*(void *)this + 40))(this, v2);

  return VoiceLFO::UpdateCachedState((uint64_t)this);
}

uint64_t VoiceLFO::Start(uint64_t this, int a2)
{
  uint64_t v2 = this;
  *(_DWORD *)(this + 264) = *(_DWORD *)(this + 304) + a2;
  int v3 = *(_DWORD *)(*(void *)(this + 256) + 92);
  if (v3 > 74)
  {
    if ((v3 - 75) < 2)
    {
      *(void *)(this + 288) = 0;
      *(_DWORD *)(this + 268) = (1.0 / *(double *)(this + 296));
      this = random();
      *(float *)(v2 + 312) = (float)this * 4.6566e-10;
      return this;
    }
    goto LABEL_10;
  }
  if (v3 != 26)
  {
    if (v3 == 28)
    {
      *(void *)(this + 288) = 0;
      goto LABEL_9;
    }
    if (v3 != 29)
    {
LABEL_10:
      *(void *)(this + 288) = 0;
      unsigned int v4 = 9999999;
      goto LABEL_11;
    }
  }
  *(void *)(this + 288) = 0x3FE0000000000000;
LABEL_9:
  unsigned int v4 = (0.5 / *(double *)(this + 296));
LABEL_11:
  *(_DWORD *)(this + 268) = v4;
  return this;
}

void ZoneState::~ZoneState(ZoneState *this)
{
  *(void *)this = &unk_26CBB16F8;
  ZoneState::SampleInfo::~SampleInfo((ZoneState *)((char *)this + 96));
  SamplerState::~SamplerState(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBB16F8;
  ZoneState::SampleInfo::~SampleInfo((ZoneState *)((char *)this + 96));

  SamplerState::~SamplerState(this);
}

void ZoneState::SampleInfo::~SampleInfo(ZoneState::SampleInfo *this)
{
  uint64_t v2 = (RefCounted *)*((void *)this + 1);
  if (v2)
  {
    RefCounted::Unref(v2);
    *((void *)this + 1) = 0;
    *(_DWORD *)this = -1;
  }
}

__CFString *ZoneState::GetName(ZoneState *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    CFRetain(*((CFTypeRef *)this + 4));
  }
  else
  {
    uint64_t v2 = *((void *)this + 13);
    if (v2) {
      return *(__CFString **)(v2 + 40);
    }
    else {
      return @"No Sample";
    }
  }
  return (__CFString *)v1;
}

uint64_t ZoneState::Restore(ZoneState *this, const CACFDictionary *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = ComponentState::Restore(this, a2);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "ZoneState.cpp";
    __int16 v11 = 1024;
    int v12 = 511;
    __int16 v13 = 2048;
    double v14 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::Restore(this=%p)", buf, 0x1Cu);
  }
  if (v4) {
    return 4294956445;
  }
  *(_DWORD *)AudioComponentDescription buf = -2;
  CACFDictionary::GetUInt32(a2, @"waveform", (unsigned int *)buf);
  ZoneState::LoadSample((uint64_t)this, *(_DWORD *)buf | 0x10000000);
  if (CACFDictionary::GetUInt32(a2, @"root key", (unsigned int *)buf)) {
    ZoneState::SetRootKey(this, *(unsigned int *)buf);
  }
  if (CACFDictionary::GetUInt32(a2, @"key group", (unsigned int *)buf)) {
    ZoneState::SetKeyGroup(this, *(int *)buf);
  }
  if (CACFDictionary::GetUInt32(a2, @"output", (unsigned int *)buf)) {
    ZoneState::SetOutputScope(this, *(unsigned int *)buf);
  }
  if (CACFDictionary::GetSInt32(a2, @"coarse tune", (int *)buf)) {
    ZoneState::SetCoarseTuning(this, *(int *)buf);
  }
  if (CACFDictionary::GetFloat32(a2, @"fine tune", (float *)buf)) {
    ZoneState::SetFineTuning((float *)this, *(float *)buf);
  }
  if (CACFDictionary::GetFloat32(a2, @"gain", (float *)buf)) {
    ZoneState::SetGain((float *)this, *(float *)buf);
  }
  if (CACFDictionary::GetFloat32(a2, @"pan", (float *)buf)) {
    ZoneState::SetPan((float *)this, *(float *)buf * 0.005);
  }
  unsigned int v6 = *((unsigned __int8 *)this + 184);
  unsigned int v8 = *((unsigned __int8 *)this + 185);
  unsigned int v9 = v6;
  CACFDictionary::GetUInt32(a2, @"min key", &v9);
  CACFDictionary::GetUInt32(a2, @"max key", &v8);
  ZoneState::SetKeyRange(this, v9, v8);
  unsigned int v7 = *((unsigned __int8 *)this + 186);
  unsigned int v8 = *((unsigned __int8 *)this + 187);
  unsigned int v9 = v7;
  CACFDictionary::GetUInt32(a2, @"min vel", &v9);
  CACFDictionary::GetUInt32(a2, @"max vel", &v8);
  ZoneState::SetVelRange(this, v9, v8);
  if (CACFDictionary::GetBool(a2, @"pitch tracking", buf)) {
    ZoneState::SetPitchTracking(this, buf[0]);
  }
  if (CACFDictionary::GetUInt64(a2, @"sample end", (unint64_t *)buf)) {
    ZoneState::SetSampleEnd(this, *(unint64_t *)buf);
  }
  if (CACFDictionary::GetUInt64(a2, @"sample start", (unint64_t *)buf)) {
    ZoneState::SetSampleStart(this, *(unint64_t *)buf);
  }
  if (CACFDictionary::GetUInt32(a2, @"sample direction", (unsigned int *)buf)) {
    ZoneState::SetSampleDirection(this, *(int *)buf);
  }
  if (CACFDictionary::GetBool(a2, @"loop enabled", buf)) {
    ZoneState::SetLoopEnabled(this, buf[0]);
  }
  if (CACFDictionary::GetUInt32(a2, @"loop type", (unsigned int *)buf))
  {
    if (*(_DWORD *)buf == 70) {
      ZoneState::SetLoopEnabled(this, 0);
    }
    else {
      ZoneState::SetLoopType(this, *(int *)buf);
    }
  }
  if (CACFDictionary::GetUInt64(a2, @"loop end", (unint64_t *)buf)) {
    ZoneState::SetLoopEnd(this, *(unint64_t *)buf);
  }
  if (CACFDictionary::GetUInt64(a2, @"loop start", (unint64_t *)buf)) {
    ZoneState::SetLoopStart(this, *(unint64_t *)buf);
  }
  if (CACFDictionary::GetUInt32(a2, @"loop count", (unsigned int *)buf)
    && *((_DWORD *)this + 42) != *(_DWORD *)buf)
  {
    *((_DWORD *)this + 42) = *(_DWORD *)buf;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4215, 0);
  }
  if (CACFDictionary::GetFloat32(a2, @"loop tune", (float *)buf)) {
    ZoneState::SetLoopTune((float *)this, *(float *)buf);
  }
  return 0;
}

uint64_t ZoneState::LoadSample(uint64_t this, unsigned int a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(this + 96);
  if (v2 != a2 || v2 == -1)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(void *)(*(void *)(this + 24) + 24);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      *(void *)&uint8_t buf[4] = "ZoneState.cpp";
      __int16 v25 = 1024;
      int v26 = 205;
      __int16 v27 = 2048;
      *(void *)double v28 = v5;
      *(_WORD *)&v28[8] = 1024;
      LODWORD(v29) = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadSample(%p, id = 0x%x)", buf, 0x22u);
    }
    uint64_t v7 = *(void *)(v6 + 112);
    unsigned int v8 = (const void **)os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
      __int16 v25 = 1024;
      int v26 = 402;
      __int16 v27 = 1024;
      *(_DWORD *)double v28 = a2;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::GetSampleWithID(ID = %u (0x%x))", buf, 0x1Eu);
    }
    unsigned int v9 = a2;
    if ((a2 & 0x10000000) == 0)
    {
      unsigned int v8 = (const void **)os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG);
      unsigned int v9 = a2 | 0x10000000;
      if (v8)
      {
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
        __int16 v25 = 1024;
        int v26 = 405;
        __int16 v27 = 1024;
        *(_DWORD *)double v28 = a2;
        *(_WORD *)&v28[4] = 1024;
        *(_DWORD *)&v28[6] = a2 | 0x10000000;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::GetSampleWithID: converting old id %u to 0x%x", buf, 0x1Eu);
      }
    }
    uint64_t v12 = *(void *)(v7 + 8);
    uint64_t v11 = v7 + 8;
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_37;
    }
    uint64_t v13 = v11;
    do
    {
      unsigned int v14 = *(_DWORD *)(v10 + 32);
      BOOL v15 = v14 >= v9;
      if (v14 >= v9) {
        float v16 = (uint64_t *)v10;
      }
      else {
        float v16 = (uint64_t *)(v10 + 8);
      }
      if (v15) {
        uint64_t v13 = v10;
      }
      uint64_t v10 = *v16;
    }
    while (*v16);
    if (v13 != v11 && v9 >= *(_DWORD *)(v13 + 32))
    {
      CFHashCode v18 = *(void *)(v13 + 40);
    }
    else
    {
LABEL_37:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "InstrumentManager.cpp";
        __int16 v25 = 1024;
        int v26 = 411;
        __int16 v27 = 1024;
        *(_DWORD *)double v28 = v9;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentManager::GetSampleWithID: Cannot find sample with ID 0x%x", buf, 0x18u);
      }
      *(void *)AudioComponentDescription buf = CFURLCreateWithString(0, @"wave://internal/silence", 0);
      uint64_t Instance = (SampleManager *)SampleManager::GetInstance(*(SampleManager **)buf);
      CFHashCode v18 = SampleManager::AddSample(Instance, *(glob_t **)buf);
      unsigned int v8 = Smart<__CFURL const*>::~Smart((const void **)buf);
    }
    double v19 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v8);
    Sample = (atomic_uint *)SampleManager::GetSample(v19, v18);
    if (!Sample)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v23, 0xFFFFD589);
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        *(void *)&uint8_t buf[4] = "ZoneState.cpp";
        __int16 v25 = 1024;
        int v26 = 207;
        __int16 v27 = 2080;
        *(void *)double v28 = v23;
        *(_WORD *)&v28[8] = 2080;
        int v29 = "Failed to find sample";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Failed to find sample", -10871);
    }
    (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, 0);
    ZoneState::LoadSampleInfo((ZoneState *)v5, (Sample *)Sample);
    double v21 = *(RefCounted **)(v5 + 104);
    if (v21) {
      RefCounted::Unref(v21);
    }
    *(void *)(v5 + 104) = Sample;
    atomic_fetch_add_explicit(Sample + 5, 1u, memory_order_relaxed);
    *(_DWORD *)(v5 + 96) = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 64))(v5, 1);
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 112))(v5, 4200, 0);
  }
  return this;
}

void sub_21BA96CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

unsigned char *ZoneState::SetRootKey(unsigned char *this, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2;
  if (this[188] != a2)
  {
    int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v6 = "ZoneState.cpp";
      __int16 v7 = 1024;
      int v8 = 651;
      __int16 v9 = 2048;
      uint64_t v10 = v3;
      __int16 v11 = 1024;
      unsigned int v12 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetRootKey(%p, %u)", buf, 0x22u);
    }
    CHECK_RANGE<unsigned int>(&v4, 0, 0x7Fu, (uint64_t)"Invalid root key");
    v3[188] = v4;
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, void))(*(void *)v3 + 112))(v3, 4202, 0);
  }
  return this;
}

void ZoneState::SetKeyGroup(ZoneState *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((a2 & 0x10000000) != 0)
  {
    unsigned int v5 = a2 & 0xEFFFFFFF;
    CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"ZoneState::SetKeyGroup: Invalid key group");
  }
  else
  {
    int v3 = *((_DWORD *)this + 45);
    unsigned int v5 = a2 & 0xEFFFFFFF;
    CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"ZoneState::SetKeyGroup: Invalid key group");
    if ((v3 & 0x10000000) == 0)
    {
      unsigned int v4 = v5;
      goto LABEL_6;
    }
  }
  unsigned int v4 = v5 | 0x10000000;
LABEL_6:
  if (*((_DWORD *)this + 45) != v4)
  {
    *((_DWORD *)this + 45) = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315650;
      __int16 v7 = "ZoneState.cpp";
      __int16 v8 = 1024;
      int v9 = 669;
      __int16 v10 = 1024;
      unsigned int v11 = v4;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetKeyGroup: Group 0x%x", buf, 0x18u);
    }
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4203, 0);
  }
}

_DWORD *ZoneState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  unsigned int v5 = a2;
  if (this[44] != a2)
  {
    int v2 = this;
    if (a2 == -1)
    {
      unsigned int v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v5, 0, 0x10u, (uint64_t)"Invalid output scope");
      unsigned int v3 = v5;
    }
    v2[44] = v3;
    unsigned int v4 = *(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v2 + 112);
    return (_DWORD *)v4(v2, 4122, 0);
  }
  return this;
}

_DWORD *ZoneState::SetCoarseTuning(_DWORD *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = a2;
  if (this[48] != a2)
  {
    unsigned int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v6 = "ZoneState.cpp";
      __int16 v7 = 1024;
      int v8 = 677;
      __int16 v9 = 2048;
      __int16 v10 = v3;
      __int16 v11 = 1024;
      int v12 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetCoarseTuning(%p, %d)", buf, 0x22u);
    }
    CHECK_RANGE<int>(&v4, -24, 24, (uint64_t)"Invalid coarse tuning");
    v3[48] = v4;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v3 + 112))(v3, 4123, 0);
  }
  return this;
}

float *ZoneState::SetFineTuning(float *this, float a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float v4 = a2;
  if (this[49] != a2)
  {
    unsigned int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v6 = "ZoneState.cpp";
      __int16 v7 = 1024;
      int v8 = 687;
      __int16 v9 = 2048;
      __int16 v10 = v3;
      __int16 v11 = 2048;
      double v12 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetFineTuning(%p, %f)", buf, 0x26u);
    }
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid fine tuning", -99.0, 99.0);
    v3[49] = v4;
    return (float *)(*(uint64_t (**)(float *, uint64_t, void))(*(void *)v3 + 112))(v3, 4124, 0);
  }
  return this;
}

float *ZoneState::SetGain(float *this, float a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float v4 = a2;
  if (this[50] != a2)
  {
    unsigned int v3 = this;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      uint64_t v6 = "ZoneState.cpp";
      __int16 v7 = 1024;
      int v8 = 697;
      __int16 v9 = 2048;
      __int16 v10 = v3;
      __int16 v11 = 2048;
      double v12 = a2;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetGain(%p, %f)", buf, 0x26u);
    }
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid gain", -96.0, 12.0);
    v3[50] = v4;
    return (float *)(*(uint64_t (**)(float *, uint64_t, void))(*(void *)v3 + 112))(v3, 4125, 0);
  }
  return this;
}

float *ZoneState::SetPan(float *this, float a2)
{
  float v4 = a2;
  if (this[51] != a2)
  {
    int v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[51] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4126, 0);
  }
  return this;
}

uint64_t ZoneState::SetKeyRange(ZoneState *this, unsigned int a2, unsigned int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136316162;
    __int16 v9 = "ZoneState.cpp";
    __int16 v10 = 1024;
    int v11 = 733;
    __int16 v12 = 2048;
    uint64_t v13 = this;
    __int16 v14 = 1024;
    unsigned int v15 = a2;
    __int16 v16 = 1024;
    unsigned int v17 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetKeyRange(%p, [%u, %u])", buf, 0x28u);
  }
  CHECK_RANGE<unsigned int>(&v7, 0, 0x7Fu, (uint64_t)"Invalid key range");
  CHECK_RANGE<unsigned int>(&v7, 0, a3, (uint64_t)"Invalid key range");
  *((unsigned char *)this + 184) = v7;
  *((unsigned char *)this + 185) = a3;
  return (*(uint64_t (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4128, 0);
}

uint64_t ZoneState::SetVelRange(ZoneState *this, unsigned int a2, unsigned int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136316162;
    __int16 v9 = "ZoneState.cpp";
    __int16 v10 = 1024;
    int v11 = 743;
    __int16 v12 = 2048;
    uint64_t v13 = this;
    __int16 v14 = 1024;
    unsigned int v15 = a2;
    __int16 v16 = 1024;
    unsigned int v17 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetVelRange(%p, [%u, %u])", buf, 0x28u);
  }
  CHECK_RANGE<unsigned int>(&v7, 0, 0x7Fu, (uint64_t)"Invalid velocity range");
  CHECK_RANGE<unsigned int>(&v7, 0, a3, (uint64_t)"Invalid velocity range");
  *((unsigned char *)this + 186) = v7;
  *((unsigned char *)this + 187) = a3;
  return (*(uint64_t (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4129, 0);
}

void ZoneState::SetPitchTracking(ZoneState *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315906;
    unsigned int v5 = "ZoneState.cpp";
    __int16 v6 = 1024;
    int v7 = 753;
    __int16 v8 = 2048;
    __int16 v9 = this;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetPitchTracking(%p, %u)", (uint8_t *)&v4, 0x22u);
  }
  if (*((unsigned __int8 *)this + 189) != a2)
  {
    *((unsigned char *)this + 189) = a2;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4204, 0);
  }
}

void ZoneState::SetSampleEnd(ZoneState *this, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    __int16 v9 = "ZoneState.cpp";
    __int16 v10 = 1024;
    int v11 = 791;
    __int16 v12 = 2048;
    uint64_t v13 = this;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetSampleEnd(%p, %llu)", buf, 0x26u);
  }
  if (*((void *)this + 16) != a2)
  {
    unint64_t v7 = a2;
    CHECK_RANGE<unsigned long long>(&v7, *((void *)this + 15), *(void *)(*((void *)this + 13) + 184) - 1, (uint64_t)"ZoneState::SetSampleEnd: Invalid sample end");
    unint64_t v4 = v7;
    if (*((unsigned char *)this + 140))
    {
      unint64_t v5 = *((void *)this + 20);
      if (v7 < v5)
      {
        BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        unint64_t v4 = v5;
        if (v6)
        {
          *(_DWORD *)AudioComponentDescription buf = 136315394;
          __int16 v9 = "ZoneState.cpp";
          __int16 v10 = 1024;
          int v11 = 797;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetSampleEnd: Capping sample end to loop end", buf, 0x12u);
          unint64_t v4 = *((void *)this + 20);
        }
      }
    }
    *((void *)this + 16) = v4;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4206, 0);
  }
}

void ZoneState::SetSampleStart(ZoneState *this, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    __int16 v10 = "ZoneState.cpp";
    __int16 v11 = 1024;
    int v12 = 773;
    __int16 v13 = 2048;
    __int16 v14 = this;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetSampleStart(%p, %llu)", buf, 0x26u);
  }
  if (*((void *)this + 15) != a2)
  {
    unint64_t v8 = a2;
    CHECK_RANGE<unsigned long long>(&v8, 0, *((void *)this + 16) - 1, (uint64_t)"ZoneState::SetSampleStart: Invalid sample start");
    unint64_t v4 = v8;
    if (*((unsigned char *)this + 140))
    {
      unint64_t v5 = *((void *)this + 19);
      if (v8 > v5)
      {
        BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
        unint64_t v4 = v5;
        if (v6)
        {
          *(_DWORD *)AudioComponentDescription buf = 136315394;
          __int16 v10 = "ZoneState.cpp";
          __int16 v11 = 1024;
          int v12 = 779;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetSampleStart: Capping sample start to loop start", buf, 0x12u);
          unint64_t v4 = *((void *)this + 19);
        }
      }
    }
    *((void *)this + 15) = v4;
    uint64_t v7 = *((void *)this + 13);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4205, 0);
  }
}

_DWORD *ZoneState::SetSampleDirection(_DWORD *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (this[34] != a2)
  {
    if ((a2 - 62) <= 0xFFFFFFFD)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        uint64_t v7 = "ZoneState.cpp";
        __int16 v8 = 1024;
        int v9 = 809;
        __int16 v10 = 2080;
        __int16 v11 = v5;
        __int16 v12 = 2080;
        __int16 v13 = "ZoneState::SetSampleDirection: Invalid direction";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "ZoneState::SetSampleDirection: Invalid direction", -10851);
    }
    if (a2 != 60)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        uint64_t v7 = "ZoneState.cpp";
        __int16 v8 = 1024;
        int v9 = 811;
        __int16 v10 = 2080;
        __int16 v11 = v5;
        __int16 v12 = 2080;
        __int16 v13 = "Reverse samples not yet supported";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      unint64_t v4 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v4, "Reverse samples not yet supported", -10851);
    }
    this[34] = 60;
    int v2 = *(uint64_t (**)(void))(*(void *)this + 112);
    return (_DWORD *)v2();
  }
  return this;
}

void sub_21BA97E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopEnabled(ZoneState *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315906;
    unint64_t v5 = "ZoneState.cpp";
    __int16 v6 = 1024;
    int v7 = 822;
    __int16 v8 = 2048;
    int v9 = this;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopEnabled(%p, %u)", (uint8_t *)&v4, 0x22u);
  }
  if (*((unsigned __int8 *)this + 140) != a2)
  {
    *((unsigned char *)this + 140) = a2;
    ZoneState::CheckLoops(this);
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4208, 0);
  }
}

void ZoneState::SetLoopType(ZoneState *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    int v7 = "ZoneState.cpp";
    __int16 v8 = 1024;
    int v9 = 832;
    __int16 v10 = 2048;
    int v11 = this;
    __int16 v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopType(%p, %u)", buf, 0x22u);
  }
  if ((a2 - 74) <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      int v7 = "ZoneState.cpp";
      __int16 v8 = 1024;
      int v9 = 834;
      __int16 v10 = 2080;
      int v11 = (ZoneState *)v5;
      __int16 v12 = 2080;
      __int16 v13 = "ZoneState::SetLoopType: Invalid type";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetLoopType: Invalid type", -10851);
  }
  if (*((_DWORD *)this + 36) != a2)
  {
    *((_DWORD *)this + 36) = a2;
    ZoneState::CheckLoops(this);
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4210, 0);
  }
}

void sub_21BA98140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopEnd(ZoneState *this, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    int v7 = "ZoneState.cpp";
    __int16 v8 = 1024;
    int v9 = 862;
    __int16 v10 = 2048;
    int v11 = this;
    __int16 v12 = 2048;
    unint64_t v13 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopEnd(%p, %llu)", buf, 0x26u);
  }
  if (*((void *)this + 20) != a2)
  {
    unint64_t v5 = a2;
    unint64_t v4 = *((void *)this + 16);
    if (v4 < a2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        int v7 = "ZoneState.cpp";
        __int16 v8 = 1024;
        int v9 = 867;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetLoopEnd: Capping loop end to sample end", buf, 0x12u);
        unint64_t v4 = *((void *)this + 16);
      }
      unint64_t v5 = v4;
    }
    CHECK_RANGE<unsigned long long>(&v5, *((void *)this + 15), v4, (uint64_t)"ZoneState::SetLoopEnd: Invalid loop end");
    CHECK_RANGE<unsigned long long>(&v5, *((void *)this + 19) + 4, *((void *)this + 16), (uint64_t)"ZoneState::SetLoopEnd: Loop end point too close to or before loop start");
    *((void *)this + 20) = v5;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4212, 0);
  }
}

void ZoneState::SetLoopStart(ZoneState *this, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    int v9 = "ZoneState.cpp";
    __int16 v10 = 1024;
    int v11 = 844;
    __int16 v12 = 2048;
    unint64_t v13 = this;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopStart(%p, %llu)", buf, 0x26u);
  }
  if (*((void *)this + 19) != a2)
  {
    unint64_t v7 = a2;
    unint64_t v4 = *((void *)this + 15);
    if (v4 > a2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        int v9 = "ZoneState.cpp";
        __int16 v10 = 1024;
        int v11 = 849;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetLoopStart: Capping loop start to sample start", buf, 0x12u);
        unint64_t v4 = *((void *)this + 15);
      }
      unint64_t v7 = v4;
    }
    CHECK_RANGE<unsigned long long>(&v7, v4, *((void *)this + 16), (uint64_t)"ZoneState::SetLoopStart: Invalid loop start");
    uint64_t v5 = *((void *)this + 20);
    if (v5) {
      unint64_t v6 = v5 - 4;
    }
    else {
      unint64_t v6 = 0;
    }
    CHECK_RANGE<unsigned long long>(&v7, 0, v6, (uint64_t)"ZoneState::SetLoopStart: Loop start too close to or after loop end");
    *((void *)this + 19) = v7;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4211, 0);
  }
}

float *ZoneState::SetLoopTune(float *this, float a2)
{
  float v4 = a2;
  if (this[43] != a2)
  {
    int v2 = this;
    CHECK_RANGE<float>(&v4, (uint64_t)"ZoneState::SetLoopTune: Invalid tune", -99.0, 99.0);
    v2[43] = v4;
    unsigned int v3 = *(uint64_t (**)(float *, uint64_t, void))(*(void *)v2 + 112);
    return (float *)v3(v2, 4213, 0);
  }
  return this;
}

void CHECK_RANGE<unsigned long long>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 <= *a1) {
    unint64_t v5 = *a1;
  }
  else {
    unint64_t v5 = a2;
  }
  if (v5 >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6 != *a1 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315906;
    int v9 = "SamplerUtils.h";
    __int16 v10 = 1024;
    int v11 = 57;
    __int16 v12 = 2080;
    uint64_t v13 = a4;
    __int16 v14 = 2080;
    unint64_t v15 = "value constrained to limits";
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s:  %s", (uint8_t *)&v8, 0x26u);
  }
  *a1 = v6;
}

void ZoneState::CheckLoops(ZoneState *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 140))
  {
    unint64_t v7 = *((void *)this + 19);
    unint64_t v2 = *((void *)this + 15);
    if (v7 < v2)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        int v9 = "ZoneState.cpp";
        __int16 v10 = 1024;
        int v11 = 925;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::CheckLoops: Capping loop start to sample start", buf, 0x12u);
        unint64_t v2 = *((void *)this + 15);
      }
      unint64_t v7 = v2;
    }
    CHECK_RANGE<unsigned long long>(&v7, v2, *((void *)this + 16) - 4, (uint64_t)"ZoneState::CheckLoops: Capping loop start before sample end");
    uint64_t v3 = *((void *)this + 20);
    if (v3) {
      unint64_t v4 = v3 - 4;
    }
    else {
      unint64_t v4 = 0;
    }
    CHECK_RANGE<unsigned long long>(&v7, 0, v4, (uint64_t)"ZoneState::CheckLoops: Loop start too close to or after loop end");
    *((void *)this + 19) = v7;
    unint64_t v6 = *((void *)this + 20);
    unint64_t v5 = *((void *)this + 16);
    if (v6 > v5)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        int v9 = "ZoneState.cpp";
        __int16 v10 = 1024;
        int v11 = 936;
        _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::CheckLoops: Capping loop end to sample end", buf, 0x12u);
        unint64_t v5 = *((void *)this + 16);
      }
      unint64_t v6 = v5;
    }
    CHECK_RANGE<unsigned long long>(&v6, *((void *)this + 15), v5, (uint64_t)"ZoneState::CheckLoops: Invalid loop end");
    CHECK_RANGE<unsigned long long>(&v6, *((void *)this + 19) + 4, *((void *)this + 16), (uint64_t)"ZoneState::CheckLoops: Loop end point too close to or before loop start");
    *((void *)this + 20) = v6;
  }
}

void ZoneState::LoadSampleInfo(ZoneState *this, Sample *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v4 = (**(uint64_t (***)(ZoneState *))this)(this);
    uint64_t v5 = *((void *)a2 + 5);
    int v12 = 136315906;
    uint64_t v13 = "ZoneState.cpp";
    __int16 v14 = 1024;
    int v15 = 146;
    __int16 v16 = 1024;
    int v17 = v4;
    __int16 v18 = 2112;
    uint64_t v19 = v5;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadSampleInfo(zone 0x%x): sample: %@", (uint8_t *)&v12, 0x22u);
  }
  *((_DWORD *)this + 28) = 50;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 34) = 60;
  *((_DWORD *)this + 42) = -1;
  *((void *)this + 16) = *((void *)a2 + 23) - 1;
  ZoneState::SetRootKey(this, *((unsigned __int8 *)a2 + 72));
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 73);
  *((unsigned char *)this + 185) = *((unsigned char *)a2 + 74);
  *((unsigned char *)this + 186) = *((unsigned char *)a2 + 75);
  *((unsigned char *)this + 187) = *((unsigned char *)a2 + 76);
  int v6 = *((_DWORD *)a2 + 22);
  if (v6 > 71)
  {
    if (v6 == 73) {
      int v9 = 73;
    }
    else {
      int v9 = 0;
    }
    BOOL v7 = v6 == 72 || v6 == 73;
    if (v6 == 72) {
      int v8 = 72;
    }
    else {
      int v8 = v9;
    }
  }
  else if (v6)
  {
    BOOL v7 = v6 == 71;
    if (v6 == 71) {
      int v8 = 71;
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    ZoneState::SetLoopEnabled(this, 0);
    BOOL v7 = 0;
    int v8 = 71;
  }
  unint64_t v11 = *((void *)a2 + 12);
  unint64_t v10 = *((void *)a2 + 13);
  if (v10 <= v11)
  {
    unint64_t v11 = 0;
    BOOL v7 = 0;
    unint64_t v10 = *((void *)a2 + 23) - 1;
  }
  ZoneState::SetLoopEnd(this, v10);
  ZoneState::SetLoopStart(this, v11);
  ZoneState::SetLoopEnabled(this, v7);
  ZoneState::SetLoopType(this, v8);
}

uint64_t ZoneState::Save(const __CFString **this, CACFDictionary *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    unint64_t v10 = "ZoneState.cpp";
    __int16 v11 = 1024;
    int v12 = 463;
    __int16 v13 = 2048;
    __int16 v14 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::Save(this=%p)", (uint8_t *)&v9, 0x1Cu);
  }
  ComponentState::Save(this, a2);
  CACFDictionary::AddUInt32(a2, @"waveform");
  CACFDictionary::AddUInt32(a2, @"root key");
  if (*((_DWORD *)this + 45)) {
    CACFDictionary::AddUInt32(a2, @"key group");
  }
  if (*((unsigned char *)this + 184) || *((unsigned char *)this + 185) != 127)
  {
    CACFDictionary::AddUInt32(a2, @"min key");
    CACFDictionary::AddUInt32(a2, @"max key");
  }
  if (*((unsigned char *)this + 186) || *((unsigned char *)this + 187) != 127)
  {
    CACFDictionary::AddUInt32(a2, @"min vel");
    CACFDictionary::AddUInt32(a2, @"max vel");
  }
  if (!*((unsigned char *)this + 189)) {
    CACFDictionary::AddBool(a2, @"pitch tracking");
  }
  if (*((_DWORD *)this + 28) != 50) {
    CACFDictionary::AddUInt32(a2, @"looping mode");
  }
  if (this[15]) {
    CACFDictionary::AddUInt64(a2, @"sample start");
  }
  if (this[16] != (const __CFString *)(this[13][5].length - 1)) {
    CACFDictionary::AddUInt64(a2, @"sample end");
  }
  if (*((_DWORD *)this + 34) != 60) {
    CACFDictionary::AddUInt32(a2, @"sample direction");
  }
  CACFDictionary::AddBool(a2, @"loop enabled");
  if (*((_DWORD *)this + 36) == 73 || *((_DWORD *)this + 34) != 60) {
    CACFDictionary::AddUInt32(a2, @"loop type");
  }
  if (this[19]) {
    CACFDictionary::AddUInt64(a2, @"loop start");
  }
  if (this[20] != (const __CFString *)(this[13][5].length - 1)) {
    CACFDictionary::AddUInt64(a2, @"loop end");
  }
  if (*((_DWORD *)this + 42) != -1) {
    CACFDictionary::AddUInt32(a2, @"loop count");
  }
  float v4 = *((float *)this + 43);
  if (v4 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"loop tune", v4);
  }
  if (*((_DWORD *)this + 44) != -1) {
    CACFDictionary::AddUInt32(a2, @"output");
  }
  if (*((_DWORD *)this + 48)) {
    CACFDictionary::AddSInt32(a2, @"coarse tune");
  }
  float v5 = *((float *)this + 49);
  if (v5 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"fine tune", v5);
  }
  float v6 = *((float *)this + 50);
  if (v6 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"gain", v6);
  }
  float v7 = *((float *)this + 51) * 200.0;
  if (v7 != 0.0) {
    CACFDictionary::AddFloat32(a2, @"pan", v7);
  }
  return 0;
}

uint64_t ZoneState::SetProperty(ZoneState *this, int a2, unsigned int *a3, uint64_t a4, __n128 a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, 0xFFFFD59D);
      *(float *)AudioComponentDescription buf = 4.8153e-34;
      __int16 v13 = "ZoneState.cpp";
      __int16 v14 = 1024;
      int v15 = 370;
      __int16 v16 = 2080;
      int v17 = v11;
      __int16 v18 = 2080;
      uint64_t v19 = "ZoneState::SetProperty: NULL property value";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetProperty: NULL property value", -10851);
  }
  if (a2 <= 4199)
  {
    switch(a2)
    {
      case 4122:
        ZoneState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        ZoneState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        ZoneState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        ZoneState::SetGain((float *)this, *(float *)a3);
        return 1;
      case 4126:
        ZoneState::SetPan((float *)this, *(float *)a3 * 0.005);
        return 1;
      case 4127:
        goto LABEL_13;
      case 4128:
        ZoneState::SetKeyRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4129:
        ZoneState::SetVelRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      default:
        if (a2 == 4151)
        {
          ZoneState::SetGateMode(this, *a3);
          return 1;
        }
LABEL_13:
        uint64_t result = ComponentState::SetProperty(this, a2, a3);
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 4200:
        ZoneState::LoadSample((uint64_t)this, *a3);
        return 1;
      case 4201:
      case 4214:
        goto LABEL_13;
      case 4202:
        ZoneState::SetRootKey(this, *a3);
        return 1;
      case 4203:
        ZoneState::SetKeyGroup(this, *a3);
        return 1;
      case 4204:
        ZoneState::SetPitchTracking(this, *a3 != 0);
        return 1;
      case 4205:
        CheckDataSize(a4, 8u);
        ZoneState::SetSampleStart(this, *(void *)a3);
        return 1;
      case 4206:
        CheckDataSize(a4, 8u);
        ZoneState::SetSampleEnd(this, *(void *)a3);
        return 1;
      case 4207:
        ZoneState::SetSampleDirection(this, *a3);
        return 1;
      case 4208:
        ZoneState::SetLoopEnabled(this, *a3 != 0);
        return 1;
      case 4209:
        ZoneState::SetLoopingMode(this, *a3);
        return 1;
      case 4210:
        ZoneState::SetLoopType(this, *a3);
        return 1;
      case 4211:
        CheckDataSize(a4, 8u);
        ZoneState::SetLoopStart(this, *(void *)a3);
        return 1;
      case 4212:
        CheckDataSize(a4, 8u);
        ZoneState::SetLoopEnd(this, *(void *)a3);
        return 1;
      case 4213:
        ZoneState::SetLoopTune((float *)this, *(float *)a3);
        return 1;
      case 4215:
        if (*((_DWORD *)this + 42) != *a3)
        {
          *((_DWORD *)this + 42) = *a3;
          (*(void (**)(ZoneState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4215, 0, a5);
        }
        return 1;
      default:
        if (a2 == 4400)
        {
          *(float *)AudioComponentDescription buf = *(float *)a3;
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pitch offset limit", -12000.0, *((float *)this + 53));
          v9.n128_u32[0] = *(_DWORD *)buf;
          if (*(float *)buf != *((float *)this + 52))
          {
            *((float *)this + 52) = *(float *)buf;
            (*(void (**)(ZoneState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4400, 0, v9);
          }
        }
        else
        {
          if (a2 != 4401) {
            goto LABEL_13;
          }
          *(float *)AudioComponentDescription buf = *(float *)a3;
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pitch offset limit", *((float *)this + 52), 12000.0);
          v7.n128_u32[0] = *(_DWORD *)buf;
          if (*(float *)buf != *((float *)this + 53))
          {
            *((float *)this + 53) = *(float *)buf;
            (*(void (**)(ZoneState *, uint64_t, void, __n128))(*(void *)this + 112))(this, 4401, 0, v7);
          }
        }
        break;
    }
    return 1;
  }
  return result;
}

void sub_21BA9929C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetGateMode(ZoneState *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    __n128 v7 = "ZoneState.cpp";
    __int16 v8 = 1024;
    int v9 = 897;
    __int16 v10 = 2048;
    __int16 v11 = this;
    __int16 v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetGateMode(%p, %u)", buf, 0x22u);
  }
  if (*((_DWORD *)this + 54) != a2)
  {
    if ((a2 - 13) <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
        *(_DWORD *)AudioComponentDescription buf = 136315906;
        __n128 v7 = "ZoneState.cpp";
        __int16 v8 = 1024;
        int v9 = 901;
        __int16 v10 = 2080;
        __int16 v11 = (ZoneState *)v5;
        __int16 v12 = 2080;
        __int16 v13 = "ZoneState::SetGateMode: Invalid gate mode";
        _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "ZoneState::SetGateMode: Invalid gate mode", -10851);
    }
    *((_DWORD *)this + 54) = a2;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4151, 0);
  }
}

void sub_21BA994FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopingMode(ZoneState *this, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315906;
    __n128 v7 = "ZoneState.cpp";
    __int16 v8 = 1024;
    int v9 = 762;
    __int16 v10 = 2048;
    __int16 v11 = this;
    __int16 v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopingMode(%p, %u)", buf, 0x22u);
  }
  if ((a2 - 52) <= 0xFFFFFFFD)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      __n128 v7 = "ZoneState.cpp";
      __int16 v8 = 1024;
      int v9 = 764;
      __int16 v10 = 2080;
      __int16 v11 = (ZoneState *)v5;
      __int16 v12 = 2080;
      __int16 v13 = "ZoneState::SetLoopingMode: Invalid mode";
      _os_log_impl(&dword_21B9BB000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetLoopingMode: Invalid mode", -10851);
  }
  if (*((_DWORD *)this + 28) != a2)
  {
    *((_DWORD *)this + 28) = a2;
    (*(void (**)(ZoneState *, uint64_t, void))(*(void *)this + 112))(this, 4209, 0);
  }
}

void sub_21BA996FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ZoneState::GetProperty(ZoneState *this, int a2, unsigned char *a3)
{
  if (a2 <= 4199)
  {
    switch(a2)
    {
      case 4122:
        int v3 = *((_DWORD *)this + 44);
        goto LABEL_27;
      case 4123:
        int v3 = *((_DWORD *)this + 48);
        goto LABEL_27;
      case 4124:
        float v4 = *((float *)this + 49);
        goto LABEL_35;
      case 4125:
        float v4 = *((float *)this + 50);
        goto LABEL_35;
      case 4126:
        float v4 = *((float *)this + 51) * 200.0;
        goto LABEL_35;
      case 4127:
        return ComponentState::GetProperty(this, a2, a3);
      case 4128:
        *a3 = *((unsigned char *)this + 184);
        char v7 = *((unsigned char *)this + 185);
        goto LABEL_33;
      case 4129:
        *a3 = *((unsigned char *)this + 186);
        char v7 = *((unsigned char *)this + 187);
LABEL_33:
        a3[1] = v7;
        return 1;
      default:
        if (a2 != 4151) {
          return ComponentState::GetProperty(this, a2, a3);
        }
        int v3 = *((_DWORD *)this + 54);
LABEL_27:
        *(_DWORD *)a3 = v3;
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 4200:
        int v3 = *((_DWORD *)this + 24);
        goto LABEL_27;
      case 4201:
      case 4214:
        return ComponentState::GetProperty(this, a2, a3);
      case 4202:
        int v3 = *((unsigned __int8 *)this + 188);
        goto LABEL_27;
      case 4203:
        int v3 = *((unsigned __int8 *)this + 180);
        goto LABEL_27;
      case 4204:
        int v3 = *((unsigned __int8 *)this + 189);
        goto LABEL_27;
      case 4205:
        uint64_t v6 = *((void *)this + 15);
        goto LABEL_23;
      case 4206:
        uint64_t v6 = *((void *)this + 16);
        goto LABEL_23;
      case 4207:
        int v3 = *((_DWORD *)this + 34);
        goto LABEL_27;
      case 4208:
        int v3 = *((unsigned __int8 *)this + 140);
        goto LABEL_27;
      case 4209:
        int v3 = *((_DWORD *)this + 28);
        goto LABEL_27;
      case 4210:
        int v3 = *((_DWORD *)this + 36);
        goto LABEL_27;
      case 4211:
        uint64_t v6 = *((void *)this + 19);
        goto LABEL_23;
      case 4212:
        uint64_t v6 = *((void *)this + 20);
LABEL_23:
        *(void *)a3 = v6;
        return 1;
      case 4213:
        float v4 = *((float *)this + 43);
        break;
      case 4215:
        int v3 = *((_DWORD *)this + 42);
        goto LABEL_27;
      default:
        if (a2 == 4400)
        {
          float v4 = *((float *)this + 52);
        }
        else
        {
          if (a2 != 4401) {
            return ComponentState::GetProperty(this, a2, a3);
          }
          float v4 = *((float *)this + 53);
        }
        break;
    }
LABEL_35:
    *(float *)a3 = v4;
  }
  return 1;
}

void ZoneState::ResetToDefaults(ZoneState *this)
{
  *((unsigned char *)this + 48) = 1;
  *((void *)this + 22) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 189) = 1;
  *((_DWORD *)this + 28) = 50;
  *((unsigned char *)this + 140) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0x463B8000C63B8000;
  *((_DWORD *)this + 54) = -1;
  *((_WORD *)this + 110) = 0;
  ZoneState::LoadSampleInfo(this, *((Sample **)this + 13));
}

void ZoneState::ZoneState(ZoneState *this, int a2, SamplerState *a3, unsigned int a4)
{
  SamplerState::SamplerState(this, 7, a2, a3, 1u);
  *(_DWORD *)(v6 + 88) = 1879048192;
  *(void *)uint64_t v6 = &unk_26CBB16F8;
  *(_DWORD *)(v6 + 96) = -1;
  *(void *)(v6 + 104) = 0;
  *(_DWORD *)(v6 + 112) = 50;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 136) = 60;
  *(unsigned char *)(v6 + 140) = 0;
  *(_DWORD *)(v6 + 144) = 71;
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = 0;
  *(void *)(v6 + 168) = 0xFFFFFFFFLL;
  *(void *)(v6 + 176) = 0xFFFFFFFFLL;
  *(_WORD *)(v6 + 188) = 316;
  *(void *)(v6 + 192) = 0;
  *(void *)(v6 + 200) = 0;
  *(void *)(v6 + 208) = 0x463B8000C63B8000;
  *(_DWORD *)(v6 + 216) = -1;
  *(_WORD *)(v6 + 220) = 0;
  *(_DWORD *)(v6 + 224) = 0;
  *(_DWORD *)(v6 + 184) = 2130738944;
  if (a4 != -1) {
    ZoneState::LoadSample((uint64_t)this, a4);
  }
}

void sub_21BA99A28(_Unwind_Exception *a1)
{
  ZoneState::SampleInfo::~SampleInfo(v2);
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

uint64_t ZoneState::GetPropertyInfo(ZoneState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  int v4 = (int)this;
  uint64_t result = 0;
  int v6 = 4;
  if (v4 <= 4199)
  {
    int v8 = v4 - 4120;
    int v9 = 8;
    switch(v8)
    {
      case 0:
        goto LABEL_11;
      case 1:
        int v9 = 4;
LABEL_11:
        int v6 = v9;
        goto LABEL_12;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 15:
        goto LABEL_12;
      case 8:
      case 9:
        int v6 = 2;
        goto LABEL_12;
      default:
        return result;
    }
  }
  if ((v4 - 4200) <= 0xF)
  {
    int v7 = 1 << (v4 - 104);
    if ((v7 & 0xE79D) != 0)
    {
LABEL_12:
      *a2 = v6;
      uint64_t result = 1;
      *(unsigned char *)a3 = 1;
      return result;
    }
    if ((v7 & 0x1860) != 0)
    {
      int v6 = 8;
      goto LABEL_12;
    }
  }
  if ((v4 - 4400) < 2) {
    goto LABEL_12;
  }
  return result;
}

void *AUConverterFactory()
{
  uint64_t result = malloc_type_malloc(0x270uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUConverter>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUConverter>::Destruct;
  return result;
}

uint64_t SamplerBase::GetGroupParameter(SamplerBase *this, unsigned int a2, unsigned int a3, float *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)this + 27);
  if (v7) {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  else {
    uint64_t v8 = (*((void *)this + 25) - *((void *)this + 24)) >> 3;
  }
  if (v8 <= a3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      __int16 v11 = "SamplerBase.cpp";
      __int16 v12 = 1024;
      int v13 = 1003;
      __int16 v14 = 1024;
      unsigned int v15 = a3;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: SamplerBase::GetParameter: Invalid element for group scope: %u", (uint8_t *)&v10, 0x18u);
    }
  }
  else
  {
    *a4 = 0.0;
  }
  return 4294956419;
}

void *SamplerBase::Configure(SamplerBase *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v2 = *((unsigned __int8 *)this + 825);
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    uint64_t v8 = "SamplerBase.cpp";
    __int16 v9 = 1024;
    int v10 = 1161;
    __int16 v11 = 1024;
    int v12 = v2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Configure() user loaded doc: %d", buf, 0x18u);
  }
  if (!*((unsigned char *)this + 825))
  {
    uint64_t v4 = *((void *)this + 92);
    float v5 = *(InstrumentManager ****)(v4 + 88);
    if (v5 != *(InstrumentManager ****)(v4 + 96)) {
      InstrumentState::Initialize(*v5);
    }
  }
  v6[0] = &unk_26CBB3580;
  v6[3] = v6;
  SamplerBase::DoForGroupElements((SamplerBase *)((char *)this + 176), (uint64_t)v6);
  return std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](v6);
}

void sub_21BA99E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SamplerBase::DoForGroupElements(ausdk::AUScope *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 5);
  if (v4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3;
    if (!result) {
      return result;
    }
  }
  unsigned int v6 = 0;
  int v7 = result - 1;
  do
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement(a1, v6);
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &Element);
    if (result) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v7 == v6;
    }
    ++v6;
  }
  while (!v9);
  return result;
}

uint64_t std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a2;
  std::vector<MIDIControlEntry>::__clear[abi:ne180100]((uint64_t *)(*(void *)(*(void *)a2 + 232) + 16));
  (*(void (**)(void *, void))(*v2 + 128))(v2, v2[32]);
  return 0;
}

void std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CBB3580;
}

void *std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CBB3580;
  return result;
}

void std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
}

uint64_t SamplerBase::SetSampleRate(SamplerBase *this, float a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float v5 = a2;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    uint64_t v8 = "SamplerBase.cpp";
    __int16 v9 = 1024;
    int v10 = 1150;
    __int16 v11 = 2048;
    double v12 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetSampleRate(%f)", buf, 0x1Cu);
  }
  v6[0] = &unk_26CBB3538;
  v6[1] = &v5;
  v6[3] = v6;
  SamplerBase::DoForGroupElements((SamplerBase *)((char *)this + 176), (uint64_t)v6);
  std::__function::__value_func<int ()(SamplerElement *)>::~__value_func[abi:ne180100](v6);
  *(float *)AudioComponentDescription buf = v5;
  return (*(uint64_t (**)(void, uint64_t, uint8_t *, uint64_t))(**((void **)this + 92) + 24))(*((void *)this + 92), 2, buf, 4);
}

void sub_21BA9A124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, void *a2)
{
  if (**(float **)(a1 + 8) != *(float *)(*a2 + 252)) {
    (*(void (**)(void))(*(void *)*a2 + 136))(*a2);
  }
  return 0;
}

uint64_t std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CBB3538;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CBB3538;
  result[1] = v3;
  return result;
}

void std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::~__func()
{
}

uint64_t SamplerBase::RealTimeStartNote(SamplerBase *this, SynthGroupElement *a2, uint64_t a3, uint64_t a4, const MusicDeviceNoteParams *a5)
{
  unsigned int v10 = *((_DWORD *)this + 146);
  uint64_t v11 = *((void *)a2 + 32);
  unsigned int v12 = *(_DWORD *)(*(void *)(v11 + 24) + 196);
  unsigned int v13 = *(_DWORD *)(v11 + 144);
  if (v12 < v13) {
    unsigned int v13 = v12;
  }
  if (v13 < v10) {
    unsigned int v10 = v13;
  }
  if (*((_DWORD *)this + 145) >= v10) {
    (*(void (**)(SamplerBase *, uint64_t, void))(*(void *)this + 680))(this, a4, 0);
  }
  Partuint64_t Element = AUInstrumentBase::GetPartElement(this);
  unsigned int v15 = *((_DWORD *)this + 145);
  *((_DWORD *)this + 145) = v15 + 1;
  *((_DWORD *)this + 147) = v15 + 1;
  uint64_t result = (*(uint64_t (**)(SynthGroupElement *, uint64_t, uint64_t, uint64_t, const MusicDeviceNoteParams *))(*(void *)a2 + 160))(a2, PartElement, a3, a4, a5);
  if ((result - 777) < 2)
  {
    uint64_t result = 0;
    --*((_DWORD *)this + 145);
  }
  else if (result)
  {
    if (result == 779)
    {
      if (*((_DWORD *)this + 145) > v15) {
        __assert_rtn("RealTimeStartNote", "SamplerBase.cpp", 1044, "NumActiveNotes() <= activeCount - 1");
      }
      return 0;
    }
  }
  else
  {
    *((unsigned char *)this + 816) = 1;
  }
  return result;
}

void *SamplerBase::GetChannelLayoutTags@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if (a1 != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -10866;
    __cxa_throw(exception, MEMORY[0x263F8C258], 0);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(8uLL);
  *a2 = v4;
  *uint64_t v4 = 0x65000200640001;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void SamplerBase::CreateElement(SamplerBase *this, int a2, unsigned int a3)
{
  if (a2 != 4)
  {
    if (a2 == 3)
    {
      if (a3 < (unint64_t)((uint64_t)(*(void *)(*((void *)this + 92) + 96)
                                           - *(void *)(*((void *)this + 92) + 88)) >> 3))
        operator new();
      std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
    }
    AUInstrumentBase::CreateElement(this, a2);
  }
  operator new();
}

void sub_21BA9A640(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10E1C40C8C9A2B0);
  _Unwind_Resume(a1);
}

uint64_t SamplerBase::ChangeStreamFormat(SamplerBase *this, const AudioStreamBasicDescription *a2, uint64_t a3, const AudioStreamBasicDescription *a4, AudioStreamBasicDescription *a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 != 2) {
    return 4294956430;
  }
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a5, a2))
  {
    ausdk::AUBase::ChangeStreamFormat(this, 2, a3, a4, a5);
    v9.n128_u64[0] = *(void *)&a5->mSampleRate;
    v9.n128_f32[0] = a5->mSampleRate;
    (*(void (**)(SamplerBase *, __n128))(*(void *)this + 744))(this, v9);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      unsigned int v12 = "SamplerBase.cpp";
      __int16 v13 = 1024;
      int v14 = 341;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d SamplerBase::ChangeStreamFormat: Output format not supported", (uint8_t *)&v11, 0x12u);
    }
    return 4294956428;
  }
}

uint64_t SamplerBase::SupportedNumChannels(SamplerBase *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 1;
}

BOOL SamplerBase::StreamFormatWritable(SamplerBase *this, int a2)
{
  return a2 == 2;
}

uint64_t SamplerBase::CopyClumpName(SamplerBase *this, int a2, int a3, unsigned int a4, CFTypeRef *a5)
{
  if (a2) {
    return 4294956430;
  }
  if ((a3 - 1) > 2) {
    return 4294956418;
  }
  int v7 = (CFTypeRef *)off_2643B9AB8[a3 - 1];
  CFRetain(*v7);
  uint64_t result = 0;
  *a5 = *v7;
  return result;
}

uint64_t SamplerBase::GetParameterInfo(SamplerBase *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_OWORD *)AudioComponentDescription buf = xmmword_2643B9A78;
    *(_OWORD *)&buf[16] = *(_OWORD *)&off_2643B9A88;
    long long v13 = xmmword_2643B9A98;
    long long v14 = *(_OWORD *)off_2643B9AA8;
    if (!LocalizeAUParameterStringsForClass<SamplerBase>(std::initializer_list<__CFString const**>)::sLocalized) {
      LocalizeAUParameterStringsForClass<SamplerBase>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)buf, 8);
    }
    switch(a3)
    {
      case 0x384u:
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        *(void *)&buffer->minCFNumberRef Value = 0x41400000C2C00000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xC800000000000000;
        CFStringRef v8 = (const __CFString *)kSamplerGainParameterName;
        goto LABEL_16;
      case 0x385u:
        buffer->unit = kAudioUnitParameterUnit_RelativeSemiTones;
        *(void *)&buffer->minCFNumberRef Value = 0x41C00000C1C00000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xC800000000000000;
        CFStringRef v8 = (const __CFString *)kSamplerCoarseTuneParameterName;
        goto LABEL_16;
      case 0x386u:
        buffer->unit = kAudioUnitParameterUnit_Cents;
        *(void *)&buffer->minCFNumberRef Value = 0x42C60000C2C60000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xC800000000000000;
        CFStringRef v8 = (const __CFString *)kSamplerFineTuneParameterName;
        goto LABEL_16;
      case 0x387u:
        buffer->unit = kAudioUnitParameterUnit_Pan;
        *(void *)&buffer->minCFNumberRef Value = 0x42C80000C2C80000;
        *(void *)&buffer->defaultCFNumberRef Value = 0xC800000000000000;
        CFStringRef v8 = (const __CFString *)kSamplerPanParameterName;
LABEL_16:
        buffer->cfNameString = v8;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        uint64_t result = 0;
        buffer->clumpID = 1;
        buffer->flags |= 0x100000u;
        return result;
      default:
        if (a3 == 800)
        {
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
          *(void *)&buffer->defaultCFNumberRef Value = 0x4800000000000000;
          buffer->cfNameString = @"Voice Count (Private)";
          CFStringGetCString(@"Voice Count (Private)", buffer->name, 52, 0x8000100u);
          return 0;
        }
        if (a3 >= 0x3B6)
        {
          unsigned int v9 = *((_DWORD *)this + 202);
          if (v9 + 950 > a3 && a3 - 950 < v9)
          {
            CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@ %d", kSamplerOutputAmpName, a3 - 950, *(void *)buf, *(void *)&buf[8], *(_OWORD *)&buf[16], v13, v14);
            buffer->cfNameString = v10;
            buffer->AudioUnitParameterOptions flags = 1207992336;
            CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
            uint64_t result = 0;
            buffer->clumpID = 3;
            AudioUnitParameterOptions v11 = buffer->flags | 0x100000;
            buffer->unit = kAudioUnitParameterUnit_Decibels;
            *(void *)&buffer->minCFNumberRef Value = 0x41A00000C2F00000;
            buffer->defaultCFNumberRef Value = 0.0;
            buffer->AudioUnitParameterOptions flags = v11;
            return result;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioComponentDescription buf = 136315906;
          *(void *)&uint8_t buf[4] = "SamplerBase.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 816;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = 0;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = a3;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR:  SamplerBase::GetParameterInfo(scope = %u, param %u): Invalid parameter", buf, 0x1Eu);
        }
        break;
    }
  }
  return 4294956418;
}

uint64_t SamplerBase::GetParameterList(SamplerBase *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  return 0;
}

uint64_t SamplerBase::SetBusCount(SamplerBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315906;
    CFStringRef v8 = "SamplerBase.cpp";
    __int16 v9 = 1024;
    int v10 = 351;
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    __int16 v13 = 1024;
    unsigned int v14 = a3;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetBusCount(%u, %u)", (uint8_t *)&v7, 0x1Eu);
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  if (a2 == 2) {
    *((unsigned char *)this + 824) = 1;
  }
  return ausdk::AUBase::SetBusCount(this, a2, a3);
}

uint64_t SamplerBase::GetParameter(GlobalState **this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a3 != 3)
  {
    if (a3)
    {
      Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
      unsigned int v13 = a2;
LABEL_11:
      float Parameter = ausdk::AUElement::GetParameter(Element, v13);
    }
    else
    {
      if (a4)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315650;
          double v22 = "SamplerBase.cpp";
          __int16 v23 = 1024;
          int v24 = 926;
          __int16 v25 = 1024;
          unsigned int v26 = a4;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: SamplerBase::GetParameter: Invalid element for global scope: %u", (uint8_t *)&v21, 0x18u);
        }
        return 4294956419;
      }
      switch(a2)
      {
        case 0x384u:
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
          unsigned int v13 = 900;
          goto LABEL_11;
        case 0x385u:
          uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
          float v17 = ausdk::AUElement::GetParameter(v16, 0x385u);
          uint64_t v8 = 0;
          float Parameter = (float)(int)v17;
          goto LABEL_13;
        case 0x386u:
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
          unsigned int v13 = 902;
          goto LABEL_11;
        case 0x387u:
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
          unsigned int v13 = 903;
          goto LABEL_11;
        default:
          if (a2 == 800)
          {
            if (*((_DWORD *)this + 203))
            {
              if (*((_DWORD *)this + 205) == 1) {
                unsigned int v15 = 2;
              }
              else {
                unsigned int v15 = 1;
              }
            }
            else
            {
              unsigned int v15 = 0;
            }
            uint64_t v8 = 0;
            *((_DWORD *)this + 205) = v15;
            float Parameter = (float)v15;
            goto LABEL_13;
          }
          if ((a2 & 0xFFFFFFF8) == 0x3E8)
          {
            GlobalState::GetPerformanceParameter(this[92], a2, a5);
            return 0;
          }
          unsigned int v18 = a2 - 950;
          if (a2 < 0x3B6 || (unsigned int v19 = *((_DWORD *)this + 202), v19 + 950 <= a2) || v18 > 0xF || v18 >= v19)
          {
            ausdk::AUBase::GetParameter((ausdk::AUBase *)this, a2, 0, 0, a5);
            return 0;
          }
          float v20 = *((float *)this[88] + v18);
          if (v20 == 0.0) {
            float Parameter = -120.0;
          }
          else {
            float Parameter = log10f(v20) * 20.0;
          }
          break;
      }
    }
    uint64_t v8 = 0;
LABEL_13:
    *a5 = Parameter;
    return v8;
  }
  __int16 v9 = (uint64_t (*)(void))*((void *)*this + 96);

  return v9();
}

uint64_t SamplerBase::SetProperty(SamplerBase *this, uint64_t a2, int a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136316674;
    unsigned int v19 = "SamplerBase.cpp";
    __int16 v20 = 1024;
    int v21 = 639;
    __int16 v22 = 1024;
    *(_DWORD *)__int16 v23 = a2;
    *(_WORD *)&v23[4] = 1024;
    *(_DWORD *)&v23[6] = a3;
    *(_WORD *)int v24 = 1024;
    *(_DWORD *)&v24[2] = a4;
    __int16 v25 = 2048;
    unsigned int v26 = a5;
    __int16 v27 = 1024;
    int v28 = a6;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetProperty(%u, %u, 0x%x, %p, %u)", (uint8_t *)&v18, 0x34u);
  }
  if ((a3 - 1) < 2)
  {
LABEL_15:
    uint64_t v15 = 4294956417;
    goto LABEL_19;
  }
  if (a3 == 4)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 92) + 32))(*((void *)this + 92), a4, 0);
    if (v14)
    {
LABEL_13:
      if ((*(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(*(void *)v14 + 24))(v14, a2, a5, a6))return 0; {
      goto LABEL_15;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315906;
      unsigned int v19 = "SamplerBase.cpp";
      __int16 v20 = 1024;
      int v21 = 712;
      __int16 v22 = 1024;
      *(_DWORD *)__int16 v23 = a4;
      *(_WORD *)&v23[4] = 1024;
      *(_DWORD *)&v23[6] = a4;
      _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR:  SamplerBase::SetProperty: Invalid element ID for Part scope: %u (0x%x)", (uint8_t *)&v18, 0x1Eu);
    }
    goto LABEL_18;
  }
  if (a3) {
    return 0;
  }
  if (a4)
  {
LABEL_18:
    uint64_t v15 = 4294956419;
    goto LABEL_19;
  }
  if (a2 == 56) {
    return SOFT_CAUI_createCustomViewForAudioUnit(*((OpaqueAudioComponentInstance **)this + 1), a5);
  }
  if (a2 != 4104)
  {
    if (a2 == 4111)
    {
      uint64_t v12 = *((void *)this + 27);
      if (v12) {
        LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
      }
      else {
        uint64_t v13 = (*((void *)this + 25) - *((void *)this + 24)) >> 3;
      }
      if ((int)v13 >= 1)
      {
        int v17 = 0;
        do
        {
          (*(void (**)(SamplerBase *, void))(*(void *)this + 672))(this, v17);
          uint64_t v15 = 0;
          ++v17;
        }
        while (v13 != v17);
        return v15;
      }
      return 0;
    }
    uint64_t v14 = *((void *)this + 92);
    goto LABEL_13;
  }
  uint64_t v15 = 4294956431;
LABEL_19:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 136315906;
    unsigned int v19 = "SamplerBase.cpp";
    __int16 v20 = 1024;
    int v21 = 720;
    __int16 v22 = 2048;
    *(void *)__int16 v23 = (int)v15;
    *(_WORD *)&_OWORD v23[8] = 1024;
    *(_DWORD *)int v24 = a2;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetProperty returning %ld for property %u", (uint8_t *)&v18, 0x22u);
  }
  return v15;
}

uint64_t SOFT_CAUI_createCustomViewForAudioUnit(OpaqueAudioComponentInstance *a1, const void *a2)
{
  uint64_t v8 = 0;
  __int16 v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v4 = (uint64_t (*)(OpaqueAudioComponentInstance *, const void *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  __int16 v11 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
  {
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    v7[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6974;
    _OWORD v7[3] = &unk_2643B9A20;
    v7[4] = &v8;
    ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6974((uint64_t)v7);
    uint64_t v4 = (uint64_t (*)(OpaqueAudioComponentInstance *, const void *))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    unsigned int v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v6);
  }
  return v4(a1, a2);
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_6974(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_6979;
    v5[4] = &__block_descriptor_tmp_16;
    void v5[5] = v5;
    long long v6 = xmmword_2643B9A40;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_6979()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t SamplerBase::GetProperty(SamplerBase *this, uint64_t a2, int a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 0:
      switch(a2)
      {
        case 0x100E:
          uint64_t v5 = 0;
          int v9 = *((_DWORD *)this + 146);
          goto LABEL_17;
        case 0x1009:
          int v11 = 0;
          a5[30] = 0u;
          a5[31] = 0u;
          a5[28] = 0u;
          a5[29] = 0u;
          a5[26] = 0u;
          a5[27] = 0u;
          a5[24] = 0u;
          a5[25] = 0u;
          a5[22] = 0u;
          a5[23] = 0u;
          a5[20] = 0u;
          a5[21] = 0u;
          a5[18] = 0u;
          a5[19] = 0u;
          a5[16] = 0u;
          a5[17] = 0u;
          a5[14] = 0u;
          a5[15] = 0u;
          a5[12] = 0u;
          a5[13] = 0u;
          a5[10] = 0u;
          a5[11] = 0u;
          a5[8] = 0u;
          a5[9] = 0u;
          a5[6] = 0u;
          a5[7] = 0u;
          a5[4] = 0u;
          a5[5] = 0u;
          a5[2] = 0u;
          a5[3] = 0u;
          *a5 = 0u;
          a5[1] = 0u;
          do
          {
            uint64_t Note = AUInstrumentBase::GetNote(this, v11);
            if (*(int *)(Note + 44) <= 4)
            {
              uint64_t v13 = (int)*(float *)(Note + 68);
              unsigned int v14 = (int)*(float *)(Note + 72);
              if (*((_DWORD *)a5 + v13) < v14) {
                *((_DWORD *)a5 + v13) = v14;
              }
            }
            ++v11;
          }
          while (v11 != 66);
          return 0;
        case 0x1008:
          uint64_t v5 = 0;
          int v9 = *((_DWORD *)this + 145);
          goto LABEL_17;
      }
      if ((*(uint64_t (**)(void, uint64_t, _OWORD *))(**((void **)this + 92) + 16))(*((void *)this + 92), a2, a5))return 0; {
      if (a2 != 1000)
      }
        goto LABEL_29;
      int v16 = 0;
      uint64_t v5 = (*(uint64_t (**)(SamplerBase *, int *))(*(void *)this + 592))(this, &v16);
      *(_DWORD *)a5 = v16;
      if (v5) {
        goto LABEL_30;
      }
      return v5;
    case 1:
      goto LABEL_12;
    case 2:
      if (a2 == 1000)
      {
        uint64_t v5 = 4294956430;
        goto LABEL_30;
      }
      if (a2 != 11)
      {
LABEL_29:
        uint64_t v5 = 4294956417;
LABEL_30:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315906;
          int v17 = "SamplerBase.cpp";
          __int16 v18 = 1024;
          int v19 = 618;
          __int16 v20 = 2048;
          uint64_t v21 = (int)v5;
          __int16 v22 = 1024;
          int v23 = a2;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::GetProperty returning %ld for property %u", (uint8_t *)&v16, 0x22u);
        }
        return v5;
      }
      uint64_t v5 = 0;
      int v9 = 1;
LABEL_17:
      *(_DWORD *)a5 = v9;
      return v5;
    case 4:
      if (a2 == 4146)
      {
        *(_DWORD *)a5 = a4;
        a4 = 0;
      }
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 92) + 32))(*((void *)this + 92), a4, 0);
      uint64_t v5 = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v10 + 16))(v10, a2, a5)) {
        return v5;
      }
LABEL_12:
      if (a2 == 1000) {
        uint64_t v5 = 4294956430;
      }
      else {
        uint64_t v5 = 4294956417;
      }
      goto LABEL_30;
    default:
      return v5;
  }
}

uint64_t SamplerBase::GetPropertyInfo(SamplerBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a3 != 4)
  {
    if (a3)
    {
LABEL_19:
      if (a2 == 1000)
      {
        uint64_t v6 = 4294956430;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v6 = 4294956417;
      if (a2 > 999)
      {
        switch(a2)
        {
          case 4103:
          case 4122:
          case 4123:
          case 4124:
          case 4125:
          case 4126:
          case 4135:
            uint64_t v6 = 0;
            *a6 = 1;
            unsigned int v7 = 4;
            goto LABEL_6;
          case 4104:
          case 4108:
          case 4110:
          case 4111:
          case 4131:
            uint64_t v6 = 0;
            unsigned int v10 = 4;
            goto LABEL_33;
          case 4105:
            uint64_t v6 = 0;
            *a6 = 0;
            unsigned int v7 = 512;
LABEL_6:
            *a5 = v7;
            return v6;
          case 4106:
            LODWORD(v14) = *((unsigned __int8 *)this + 17);
            if (*((unsigned char *)this + 17)) {
              LODWORD(v14) = 4 * *(_DWORD *)(*((void *)this + 92) + 136);
            }
            uint64_t v6 = 0;
            goto LABEL_27;
          case 4107:
            uint64_t v6 = 0;
            unsigned int v10 = 24;
            goto LABEL_33;
          case 4109:
            uint64_t v6 = 0;
            LODWORD(v14) = 24;
            goto LABEL_27;
          case 4112:
          case 4114:
          case 4115:
          case 4116:
          case 4117:
          case 4118:
          case 4119:
          case 4120:
          case 4121:
          case 4127:
          case 4128:
          case 4129:
          case 4130:
          case 4132:
          case 4133:
          case 4134:
            goto LABEL_22;
          case 4113:
            uint64_t v6 = 0;
            LODWORD(v14) = 40;
            goto LABEL_27;
          default:
            if (a2 != 1000) {
              goto LABEL_22;
            }
            uint64_t v6 = 0;
            LODWORD(v14) = 4;
            goto LABEL_27;
        }
      }
      if (a2 != 33 && a2 != 38)
      {
        if (a2 == 56)
        {
          uint64_t v6 = 0;
          unsigned int v10 = 8;
LABEL_33:
          *a5 = v10;
          BOOL v8 = 1;
LABEL_43:
          *a6 = v8;
          return v6;
        }
LABEL_22:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          int v18 = 136315650;
          int v19 = "SamplerBase.cpp";
          __int16 v20 = 1024;
          int v21 = 511;
          __int16 v22 = 2048;
          uint64_t v23 = (int)v6;
          _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::GetPropertyInfo returning %ld", (uint8_t *)&v18, 0x1Cu);
        }
        return v6;
      }
      *a6 = 0;
      *a5 = 24;
    }
    uint64_t v6 = 4294956417;
    goto LABEL_22;
  }
  BOOL v8 = 1;
  unsigned int v9 = 8;
  switch(a2)
  {
    case 4120:
    case 4132:
      goto LABEL_42;
    case 4121:
    case 4128:
    case 4129:
    case 4137:
    case 4138:
    case 4139:
      goto LABEL_19;
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4130:
    case 4131:
    case 4134:
    case 4135:
    case 4136:
    case 4142:
    case 4145:
    case 4147:
    case 4148:
      unsigned int v9 = 4;
      goto LABEL_42;
    case 4133:
    case 4141:
    case 4144:
      goto LABEL_24;
    case 4140:
      uint64_t v15 = *(void *)(*((void *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(void *)(*((void *)this + 92) + 96) - v15) >> 3)) {
        goto LABEL_45;
      }
      uint64_t v6 = 0;
      uint64_t v12 = *(void *)(*(void *)(v15 + 8 * a4) + 232);
      uint64_t v13 = *(void *)(*(void *)(v15 + 8 * a4) + 240);
      goto LABEL_38;
    case 4143:
      uint64_t v16 = *(void *)(*((void *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(void *)(*((void *)this + 92) + 96) - v16) >> 3)) {
        goto LABEL_45;
      }
      uint64_t v6 = 0;
      LODWORD(v14) = 4 * *(_DWORD *)(*(void *)(*(void *)(v16 + 8 * a4) + 112) + 16);
      goto LABEL_27;
    case 4146:
      BOOL v8 = 0;
      unsigned int v9 = 80;
      goto LABEL_42;
    default:
      if (a2 == 4231)
      {
LABEL_24:
        BOOL v8 = 1;
        unsigned int v9 = 72;
LABEL_42:
        uint64_t v6 = 0;
        *a5 = v9;
        goto LABEL_43;
      }
      if (a2 != 4230) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)(*((void *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(void *)(*((void *)this + 92) + 96) - v11) >> 3)) {
LABEL_45:
      }
        std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
      uint64_t v6 = 0;
      uint64_t v12 = *(void *)(*(void *)(v11 + 8 * a4) + 208);
      uint64_t v13 = *(void *)(*(void *)(v11 + 8 * a4) + 216);
LABEL_38:
      uint64_t v14 = ((unint64_t)(v13 - v12) >> 1) & 0xFFFFFFFC;
LABEL_27:
      *a5 = v14;
      *a6 = 0;
      break;
  }
  return v6;
}

uint64_t SamplerBase::Cleanup(SamplerBase *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 136315394;
    uint64_t v14 = "SamplerBase.cpp";
    __int16 v15 = 1024;
    int v16 = 272;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Cleanup", (uint8_t *)&v13, 0x12u);
  }
  (*(void (**)(SamplerBase *, void, void))(*(void *)this + 72))(this, 0, 0);
  *((void *)this + 77) = 0;
  *((void *)this + 76) = 0;
  *((unsigned char *)this + 825) = 0;
  uint64_t v2 = *((void *)this + 92);
  uint64_t v3 = *(InstrumentState ***)(v2 + 88);
  uint64_t v4 = *(InstrumentState ***)(v2 + 96);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    InstrumentState::Cleanup(v5);
  }
  uint64_t v6 = *((void *)this + 87);
  if (v6)
  {
    uint64_t v7 = v6 - 16;
    uint64_t v8 = *(void *)(v6 - 8);
    if (v8)
    {
      uint64_t v9 = v6 - 160;
      uint64_t v10 = 160 * v8;
      do
      {
        SamplerNote::~SamplerNote((SamplerNote *)(v9 + v10));
        v10 -= 160;
      }
      while (v10);
    }
    MEMORY[0x21D497F60](v7, 0x10A1C80263E6CA5);
  }
  *((void *)this + 87) = 0;
  *((_DWORD *)this + 144) = 0;
  *((_DWORD *)this + 146) = 0;
  *((_DWORD *)this + 156) = 0;
  *((void *)this + 74) = 0;
  uint64_t v11 = CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance();
  MEMORY[0x21D497270](v11);
  uint64_t result = (*(uint64_t (**)(SamplerBase *))(*(void *)this + 736))(this);
  *((_WORD *)this + 414) = 0;
  return result;
}

uint64_t SamplerBase::Initialize(SamplerBase *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    uint64_t v7 = "SamplerBase.cpp";
    __int16 v8 = 1024;
    int v9 = 233;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Initialize", (uint8_t *)&v6, 0x12u);
  }
  unsigned int v2 = 0;
  atomic_store(0x80u, (unsigned int *)this + 136);
  *((void *)this + 86) = -1;
  for (*((_DWORD *)this + 202) = 0;
        ;
        *((_DWORD *)this + 202) += *(_DWORD *)(ausdk::AUScope::SafeGetElement((SamplerBase *)((char *)this + 128), v2++)
                                             + 108))
  {
    uint64_t v3 = *((void *)this + 21);
    if (v3) {
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else {
      uint64_t v4 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v2 >= v4) {
      break;
    }
  }
  if (!*((_WORD *)this + 414))
  {
    (*(void (**)(SamplerBase *))(*(void *)this + 720))(this);
    (*(void (**)(SamplerBase *))(*(void *)this + 728))(this);
    operator new[]();
  }
  return *((__int16 *)this + 414);
}

void SamplerBase::PostConstructor(SamplerBase *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v11 = 136315650;
    *(void *)&v11[4] = "SamplerBase.cpp";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 197;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::PostConstructor(%p)", v11, 0x1Cu);
  }
  ausdk::AUBase::CreateElements((uint64_t)this);
  unsigned int v2 = 0;
  *(void *)uint64_t v11 = 0x40E5888000000000;
  *(_OWORD *)&v11[8] = xmmword_21BAB6C50;
  *(_OWORD *)&v11[24] = xmmword_21BAB6C60;
  while (1)
  {
    uint64_t v3 = *((void *)this + 21);
    if (v3) {
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else {
      uint64_t v4 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v2 >= v4) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement((SamplerBase *)((char *)this + 128), v2);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)Element + 56))(Element, v11);
    ++v2;
  }
  (*(void (**)(SamplerBase *, float))(*(void *)this + 744))(this, 44100.0);
  int v6 = (SamplerBase *)((char *)this + 32);
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, 0);
  ausdk::AUElement::SetParameter(v7, 0x384u, 0.0, 0);
  __int16 v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, 0);
  ausdk::AUElement::SetParameter(v8, 0x385u, 0.0, 0);
  int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, 0);
  ausdk::AUElement::SetParameter(v9, 0x386u, 0.0, 0);
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v6, 0);
  ausdk::AUElement::SetParameter(v10, 0x387u, 0.0, 0);
}

void SamplerBase::SamplerBase(SamplerBase *this, OpaqueAudioComponentInstance *a2, int a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v3 = ausdk::AUBase::AUBase(this, a2, 0, 1, a3);
  *((void *)v3 + 67) = v3;
  *(void *)uint64_t v3 = &unk_26CBAB8F8;
  *((void *)v3 + 66) = &unk_26CBABBC8;
  *((_DWORD *)v3 + 136) = 0;
  *((_DWORD *)v3 + 138) = 0;
  *((_DWORD *)v3 + 139) = 0;
  *((_DWORD *)v3 + 140) = 0;
  operator new[]();
}

void sub_21BA9C99C(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v2, 0x10E1C403010A556);
  uint64_t v4 = (std::__shared_weak_count *)v1[100];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[98];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)v1[96];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = v1 + 88;
  __int16 v8 = (std::__shared_weak_count *)v1[94];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v9 = *v7;
  if (*v7)
  {
    v1[89] = v9;
    operator delete(v9);
  }
  AUInstrumentBase::~AUInstrumentBase((AUInstrumentBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ParameterControlSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ParameterControlSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21D497F90);
}

void std::__shared_ptr_emplace<ParameterControlSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CBB2738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SamplerBase::~SamplerBase(SamplerBase *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26CBA8140;
  *((void *)this + 66) = &unk_26CBA8458;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315650;
    int v13 = "SamplerBase.cpp";
    __int16 v14 = 1024;
    int v15 = 220;
    __int16 v16 = 2048;
    uint64_t v17 = this;
    _os_log_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::~SamplerBase(%p)", (uint8_t *)&v12, 0x1Cu);
  }
  uint64_t v2 = *((void *)this + 92);
  uint64_t v3 = *(InstrumentState ***)(v2 + 88);
  uint64_t v4 = *(InstrumentState ***)(v2 + 96);
  if (v3 != v4)
  {
    do
      InstrumentState::Cleanup(*v3++);
    while (v3 != v4);
    uint64_t v2 = *((void *)this + 92);
  }
  uint64_t v5 = (SampleManager *)SamplerState::Unref((_DWORD *)v2);
  *((void *)this + 92) = 0;
  if (atomic_fetch_add_explicit(SamplerBase::sInstanceCount, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    SampleManager::Destroy(v5);
    DLSBankManager::Destroy(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  __int16 v8 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (void *)*((void *)this + 88);
  if (v11)
  {
    *((void *)this + 89) = v11;
    operator delete(v11);
  }
  AUInstrumentBase::~AUInstrumentBase(this);
}

void sub_21BA9CCE8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return 0;
}

void std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CBB35C8;
}

void *std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CBB35C8;
  return result;
}

void std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
}

uint64_t AUiPodEQ::Version(AUiPodEQ *this)
{
  return 0x10000;
}

uint64_t AUiPodEQ::ValidFormat(AUiPodEQ *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v11 = 0;
  BOOL v10 = 0;
  uint64_t result = CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v11, &v10);
  if (v11 == 1)
  {
    if (!result) {
      return result;
    }
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    goto LABEL_8;
  }
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  if (mChannelsPerFrame < 3) {
    char v7 = result;
  }
  else {
    char v7 = 0;
  }
  if (v7)
  {
LABEL_8:
    uint64_t result = v11 == 2 || (v11 & 0xFFFFFFFD) == 1;
    goto LABEL_15;
  }
  uint64_t result = 0;
LABEL_15:
  if (v11 == 2 && mChannelsPerFrame == 2)
  {
    if (v10) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUiPodEQ::SupportedNumChannels(AUiPodEQ *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sEQChannels;
  }
  return 1;
}

BOOL AUiPodEQ::StreamFormatWritable(AUiPodEQ *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUiPodEQ::SupportsTail(AUiPodEQ *this)
{
  return 1;
}

uint64_t AUiPodEQ::NewFactoryPresetSet(AUiPodEQ *this, const AUPreset *a2)
{
  uint64_t presetNumber = a2->presetNumber;
  if (presetNumber > 0x16)
  {
    uint64_t v5 = *((void *)this + 83);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    uint64_t v6 = *((void *)this + 84);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    uint64_t v7 = *((void *)this + 85);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
  }
  else
  {
    *((double *)this + 88) = (double)AUiPodEQ::sPresetGainBiasList[presetNumber] * 0.0000000596046448;
    uint64_t v4 = (char *)&AUiPodEQ::sPresetFilterMap + 12 * presetNumber;
    *((void *)this + 66) = *(void *)v4;
    *((_DWORD *)this + 134) = *((_DWORD *)v4 + 2);
    ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&kPresets + presetNumber);
    AUiPodEQ::SetCoefficients(this);
  }
  return 0;
}

double *AUiPodEQ::SetCoefficients(AUiPodEQ *this)
{
  uint64_t result = (double *)ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 80), 0);
  float v3 = result[10];
  if (v3 == 44100.0)
  {
    uint64_t v4 = (char *)&AUiPodEQ::sFilterList_44;
  }
  else
  {
    if (v3 != 48000.0) {
      return result;
    }
    uint64_t v4 = (char *)&AUiPodEQ::sFilterList_48;
  }
  uint64_t v5 = 0;
  *((unsigned char *)this + 697) = 1;
  uint64_t v6 = 528;
  float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x3E70000000000000uLL);
  do
  {
    int v8 = *(_DWORD *)((char *)this + v6);
    if (v8 == -1)
    {
      BOOL v10 = (char *)this + v5;
      *((_OWORD *)v10 + 34) = 0uLL;
      *(_OWORD *)((char *)this + v5 + 568) = 0uLL;
      *((void *)v10 + 70) = 0x3FF0000000000000;
    }
    else
    {
      if (*((unsigned char *)this + 697)) {
        double v9 = *((double *)this + 88);
      }
      else {
        double v9 = 1.0;
      }
      float v11 = v9;
      *((unsigned char *)this + 697) = 0;
      int v12 = (float64x2_t *)((char *)this + v5);
      int v13 = &v4[20 * v8];
      double v14 = v11;
      double v15 = (double)*((int *)v13 + 2) * 0.0000000596046448 * v14;
      v16.i64[0] = (int)*(void *)v13;
      v16.i64[1] = (int)HIDWORD(*(void *)v13);
      float64x2_t v17 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v16), v7), v14);
      uint64_t v18 = *(void *)(v13 + 12);
      v16.i64[0] = (int)v18;
      v16.i64[1] = SHIDWORD(v18);
      v12[34] = vmulq_f64(vcvtq_f64_s64(v16), v7);
      v12[35] = v17;
      v12[36].f64[0] = v15;
    }
    v5 += 40;
    v6 += 4;
  }
  while (v5 != 120);
  uint64_t v19 = *((void *)this + 83);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v19 + 16))(v19, 3, (char *)this + 544);
  }
  uint64_t v20 = *((void *)this + 84);
  if (v20) {
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v20 + 16))(v20, 3, (char *)this + 544);
  }
  uint64_t result = (double *)*((void *)this + 85);
  if (result)
  {
    int v21 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (double *)v21();
  }
  return result;
}

uint64_t AUiPodEQ::GetPresets(AUiPodEQ *this, const __CFArray **a2)
{
  if (a2)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 23, 0);
    for (uint64_t i = 0; i != 368; i += 16)
      CFArrayAppendValue(Mutable, (char *)&kPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

double AUiPodEQ::GetParameterInfo(AUiPodEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (!a2 && a3 <= 2)
  {
    CFStringRef v5 = *(&off_2643B9B30 + a3);
    buffer->cfNameString = v5;
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Indexed;
    double result = 8.24634113e11;
    *(void *)&buffer->minCFNumberRef Value = 0x42680000BF800000;
    buffer->defaultCFNumberRef Value = -1.0;
  }
  return result;
}

uint64_t AUiPodEQ::Render(AUiPodEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  int v8 = (AUiPodEQ *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  float v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    *a2 |= v15 & 0x10;
    uint64_t BufferList = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    double v14 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return AUiPodEQ::ProcessInternal(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUiPodEQ::ProcessInternal(AUiPodEQ *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  int v10 = *a2;
  float v11 = (AUiPodEQ *)((char *)this + 80);
  double v12 = (*(double (**)(AUiPodEQ *))(*(void *)this + 352))(this);
  uint64_t Element = ausdk::AUScope::SafeGetElement(v11, 0);
  if ((v10 & 0x10) == 0)
  {
    *((unsigned char *)this + 716) = 1;
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 716))
  {
    unsigned int v14 = *((_DWORD *)this + 178);
    if (v14) {
      goto LABEL_5;
    }
LABEL_15:
    if (a4->mNumberBuffers)
    {
      UInt32 v19 = 0;
      p_mData = &a4->mBuffers[0].mData;
      do
      {
        bzero(*p_mData, *((unsigned int *)p_mData - 1));
        ++v19;
        p_mData += 2;
      }
      while (v19 < a4->mNumberBuffers);
    }
    return 0;
  }
  unsigned int v14 = (int)(v12 * *(double *)(Element + 80));
  *((_DWORD *)this + 178) = v14;
  *((unsigned char *)this + 716) = 0;
  if (!v14) {
    goto LABEL_15;
  }
LABEL_5:
  BOOL v15 = v14 >= a5;
  int v16 = v14 - a5;
  if (!v15) {
    int v16 = 0;
  }
  *((_DWORD *)this + 178) = v16;
LABEL_8:
  *a2 &= ~0x10u;
  if (!*((unsigned char *)this + 728) && !*((unsigned char *)this + 696) && !*((unsigned char *)this + 697))
  {
    uint64_t v21 = *((void *)this + 86);
    if (v21)
    {
      uint64_t v22 = *((void *)this + 83);
      if (v21 != v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      }
    }
    (*(void (**)(void, uint64_t, const AudioBufferList *, AudioBufferList *))(**((void **)this + 83) + 32))(*((void *)this + 83), a5, a3, a4);
    *((void *)this + 86) = *((void *)this + 83);
    return 0;
  }
  float64x2_t v17 = (OpaqueAudioConverter *)*((void *)this + 90);

  return AudioConverterConvertComplexBuffer(v17, a5, a3, a4);
}

uint64_t AUiPodEQ::CanScheduleParameters(AUiPodEQ *this)
{
  return 0;
}

uint64_t AUiPodEQ::SetParameter(AUiPodEQ *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 > 2) {
    return 4294956418;
  }
  if (a5 < -1.0 || a5 >= 59.0) {
    return 4294956445;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  *((_DWORD *)this + a2 + 132) = (int)a5;
  *((void *)this + 88) = 0x3FF0000000000000;
  AUiPodEQ::SetCoefficients(this);
  return 0;
}

uint64_t AUiPodEQ::SetProperty(AUiPodEQ *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a2 == 56)
  {
    uint64_t v9 = *((void *)this + 1);
    uint64_t v13 = 0;
    unsigned int v14 = &v13;
    uint64_t v15 = 0x2000000000;
    int v10 = (uint64_t (*)(uint64_t, _DWORD *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
    int v16 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
    if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
    {
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 0x40000000;
      _OWORD v12[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7147;
      v12[3] = &unk_2643B9AD8;
      v12[4] = &v13;
      ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7147((uint64_t)v12);
      int v10 = (uint64_t (*)(uint64_t, _DWORD *))v14[3];
    }
    _Block_object_dispose(&v13, 8);
    if (!v10)
    {
      dlerror();
      float v11 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v13, 8);
      _Unwind_Resume(v11);
    }
    return v10(v9, a5);
  }
  else if (a2 == 21)
  {
    if (a3)
    {
      return 4294956430;
    }
    else if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 728) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  else
  {
    return 4294956417;
  }
  return result;
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7147(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7152;
    v5[4] = &__block_descriptor_tmp_84;
    void v5[5] = v5;
    long long v6 = xmmword_2643B9AF8;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    float v3 = (void *)v5[0];
    uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      float v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7152()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t AUiPodEQ::GetProperty(AUiPodEQ *this, int a2, int a3, unsigned int a4, uint64_t (**a5)(AUiPodEQ *this, const AudioTimeStamp *a2, const AudioTimeStamp *a3, AudioBufferList *a4))
{
  if (a2 == 1850)
  {
    if (a3) {
      return 4294956430;
    }
    uint64_t result = 0;
    *a5 = AUiPodEQ::SpecialRenderProc;
    a5[1] = (uint64_t (*)(AUiPodEQ *, const AudioTimeStamp *, const AudioTimeStamp *, AudioBufferList *))this;
  }
  else
  {
    if (a2 == 21)
    {
      if (!a3)
      {
        uint64_t result = 0;
        *(_DWORD *)a5 = *((unsigned __int8 *)this + 728);
        return result;
      }
      return 4294956430;
    }
    return 4294956417;
  }
  return result;
}

uint64_t AUiPodEQ::SpecialRenderProc(AUiPodEQ *this, const AudioTimeStamp *a2, const AudioTimeStamp *a3, AudioBufferList *a4)
{
  uint64_t Element = (_DWORD *)ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 80), 0);
  unsigned int v14 = 0;
  uint64_t result = ausdk::AUInputElement::PullInput((ausdk::AUInputElement *)Element, &v14, a2, 0, (uint64_t)a4);
  if (result) {
    return result;
  }
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
  if (Element[27] != LODWORD(a3->mHostTime))
  {
    uint64_t v11 = *((void *)this + 85);
    if (v11)
    {
      double v12 = (char *)this + 680;
      goto LABEL_7;
    }
    return 4294956428;
  }
  uint64_t v11 = *((void *)this + 84);
  if (!v11) {
    return 4294956428;
  }
  double v12 = (char *)this + 672;
LABEL_7:
  uint64_t v13 = *((void *)this + 86);
  if (v13)
  {
    if (v13 != v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
      uint64_t v11 = *(void *)v12;
    }
  }
  (*(void (**)(uint64_t, AudioBufferList *, uint64_t, const AudioTimeStamp *))(*(void *)v11 + 32))(v11, a4, BufferList, a3);
  uint64_t result = 0;
  *((void *)this + 86) = *(void *)v12;
  return result;
}

uint64_t AUiPodEQ::GetPropertyInfo(AUiPodEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 1850)
  {
    if (!a3)
    {
      BOOL v6 = 0;
      unsigned int v7 = 16;
      goto LABEL_11;
    }
    return 4294956430;
  }
  if (a2 == 56)
  {
    BOOL v6 = 1;
    unsigned int v7 = 8;
    goto LABEL_11;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  if (a3) {
    return 4294956430;
  }
  BOOL v6 = 1;
  unsigned int v7 = 4;
LABEL_11:
  uint64_t result = 0;
  *a5 = v7;
  *a6 = v6;
  return result;
}

uint64_t AUiPodEQ::Reset(AUiPodEQ *this)
{
  *((unsigned char *)this + 716) = 1;
  uint64_t v2 = *((void *)this + 83);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 84);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *((void *)this + 85);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *((void *)this + 86) = 0;
  return 0;
}

uint64_t AUiPodEQ::Cleanup(AUiPodEQ *this)
{
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 90);
  if (v2)
  {
    AudioConverterDispose(v2);
    *((void *)this + 90) = 0;
  }
  uint64_t v3 = *((void *)this + 83);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 83) = 0;
  }
  uint64_t v4 = *((void *)this + 84);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 84) = 0;
  }
  uint64_t result = *((void *)this + 85);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 85) = 0;
  }
  return result;
}

uint64_t AUiPodEQ::Initialize(AUiPodEQ *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&inSourceFormat.Float64 mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v3;
  *(void *)&inSourceFormat.UInt32 mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v23.Float64 mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v23.mBytesPerPacket = v5;
  *(void *)&v23.UInt32 mBitsPerChannel = *(void *)(v4 + 112);
  Float64 mSampleRate = inSourceFormat.mSampleRate;
  if (inSourceFormat.mSampleRate != v23.mSampleRate) {
    return 4294956428;
  }
  UInt32 mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
  if (inSourceFormat.mChannelsPerFrame > v23.mChannelsPerFrame) {
    return 4294956428;
  }
  UInt32 mBitsPerChannel = inSourceFormat.mBitsPerChannel;
  if (inSourceFormat.mBitsPerChannel == 32 && v23.mBitsPerChannel == 16) {
    return 4294956428;
  }
  if (inSourceFormat.mSampleRate != 44100.0 && inSourceFormat.mSampleRate != 48000.0) {
    *((unsigned char *)this + 696) = 1;
  }
  uint64_t v9 = NewIIRFilter(&inSourceFormat, &v23);
  uint64_t v10 = *((void *)this + 83);
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *((void *)this + 83) = v9;
  }
  if (!v9) {
    return 4294956428;
  }
  LODWORD(inPropertyData.mSampleRate) = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(&inSourceFormat, (int *)&inPropertyData, 0)
    && LODWORD(inPropertyData.mSampleRate) == 1)
  {
    uint64_t v11 = *((void *)this + 84);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      *((void *)this + 84) = 0;
    }
    uint64_t v12 = *((void *)this + 85);
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      *((void *)this + 85) = 0;
    }
  }
  else
  {
    uint64_t v14 = NewIIRFilter(&inSourceFormat, &inSourceFormat);
    uint64_t v15 = *((void *)this + 84);
    if (v15 != v14)
    {
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      *((void *)this + 84) = v14;
    }
    if (mChannelsPerFrame == 1)
    {
      inPropertyData.Float64 mSampleRate = mSampleRate;
      AudioFormatFlags v16 = mBitsPerChannel == 32 ? 3084 : 12;
      inPropertyData.mFormatID = 1819304813;
      inPropertyData.mFormatFlags = v16;
      UInt32 v17 = mBitsPerChannel == 32 ? 8 : 4;
      inPropertyData.mBytesPerPacket = v17;
      inPropertyData.UInt32 mFramesPerPacket = 1;
      UInt32 v18 = mBitsPerChannel == 32 ? 32 : 16;
      inPropertyData.mBytesPerFrame = v17;
      inPropertyData.UInt32 mChannelsPerFrame = 2;
      inPropertyData.UInt32 mBitsPerChannel = v18;
      inPropertyData.mReserved = 0;
      uint64_t v19 = NewIIRFilter(&inSourceFormat, &inPropertyData);
      uint64_t v20 = *((void *)this + 85);
      if (v20 != v19)
      {
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
        *((void *)this + 85) = v19;
      }
    }
  }
  AUiPodEQ::SetCoefficients(this);
  *((void *)this + 86) = 0;
  uint64_t v21 = (AudioConverterRef *)((char *)this + 720);
  uint64_t v22 = (OpaqueAudioConverter *)*((void *)this + 90);
  if (v22)
  {
    AudioConverterDispose(v22);
    *uint64_t v21 = 0;
  }
  uint64_t result = AudioConverterNew(&inSourceFormat, &v23, (AudioConverterRef *)this + 90);
  if (!result && inSourceFormat.mChannelsPerFrame == 1 && v23.mChannelsPerFrame == 2)
  {
    inPropertyData.Float64 mSampleRate = 0.0;
    return AudioConverterSetProperty(*v21, 0x63686D70u, 8u, &inPropertyData);
  }
  return result;
}

void AUiPodEQ::~AUiPodEQ(AUiPodEQ *this)
{
  AUiPodEQ::~AUiPodEQ(this);

  JUMPOUT(0x21D497F90);
}

{
  OpaqueAudioConverter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26CBB0470;
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 90);
  if (v2) {
    AudioConverterDispose(v2);
  }
  long long v3 = *((void *)this + 85);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 85) = 0;
  }
  uint64_t v4 = *((void *)this + 84);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 84) = 0;
  }
  long long v5 = *((void *)this + 83);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)this + 83) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t IIRFilter::CopyStateFrom()
{
  return 4294967292;
}

uint64_t IIRFilter824::CopyStateFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    return 4294956428;
  }
  if (v2 >= 2)
  {
    long long v3 = (_DWORD *)(*(void *)(a1 + 24) + 100);
    uint64_t v4 = (int *)(*(void *)(a2 + 24) + 100);
    unint64_t v5 = 1;
    do
    {
      *(v3 - 7) = *(v4 - 7);
      *(v3 - 6) = *(v4 - 6);
      *(v3 - 3) = *(v4 - 3);
      *(v3 - 2) = *(v4 - 2);
      *(v3 - 5) = *(v4 - 5);
      *(v3 - 4) = *(v4 - 4);
      *(v3 - 1) = *(v4 - 1);
      int v6 = *v4;
      v4 += 13;
      *long long v3 = v6;
      v3 += 13;
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return 0;
}

uint64_t IIRFilter824::Process(IIRFilter824 *this, uint64_t a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  if (!*((_DWORD *)this + 4)) {
    return 4294956428;
  }
  int v8 = *((_DWORD *)this + 12);
  switch(v8)
  {
    case 3:
      mData = a3->mBuffers[0].mData;
      (*((void (**)(void *, void *, uint64_t, void, uint64_t, void))this + 7))(mData, a4->mBuffers[0].mData, a2, 0, 2, *((void *)this + 3));
      (*((void (**)(void *, void, uint64_t, uint64_t, uint64_t, void))this + 7))(mData, *(void *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, 2, *((void *)this + 3));
      break;
    case 2:
      (*((void (**)(void *, void *, uint64_t, void, void))this + 7))(a3->mBuffers[0].mData, a4->mBuffers[0].mData, a2, 0, *((void *)this + 3));
      (*((void (**)(void, void, uint64_t, uint64_t, void))this + 7))(*(void *)&a3[1].mBuffers[0].mNumberChannels, *(void *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, *((void *)this + 3));
      break;
    case 1:
      (*((void (**)(void *, void *, uint64_t, void))this + 7))(a3->mBuffers[0].mData, a4->mBuffers[0].mData, a2, *((void *)this + 3));
      break;
    default:
      return 4294956428;
  }
  int v10 = *((_DWORD *)this + 16);
  if (v10 == 1)
  {
    if (*((_DWORD *)this + 4) >= 2u)
    {
      unint64_t v14 = 1;
      uint64_t v15 = 52;
      do
      {
        (*((void (**)(void *, void *, uint64_t, uint64_t))this + 9))(a4->mBuffers[0].mData, a4->mBuffers[0].mData, a2, *((void *)this + 3) + v15);
        ++v14;
        v15 += 52;
      }
      while (v14 < *((unsigned int *)this + 4));
    }
    return 0;
  }
  if (v10 != 2) {
    return 4294956428;
  }
  if (*((_DWORD *)this + 4) >= 2u)
  {
    unint64_t v11 = 1;
    uint64_t v12 = 52;
    do
    {
      (*((void (**)(void *, void *, uint64_t, void, uint64_t))this + 9))(a4->mBuffers[0].mData, a4->mBuffers[0].mData, a2, 0, *((void *)this + 3) + v12);
      (*((void (**)(void, void, uint64_t, uint64_t, uint64_t))this + 9))(*(void *)&a4[1].mBuffers[0].mNumberChannels, *(void *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, *((void *)this + 3) + v12);
      ++v11;
      v12 += 52;
    }
    while (v11 < *((unsigned int *)this + 4));
  }
  return 0;
}

uint64_t IIRFilter824::Reset(IIRFilter824 *this)
{
  if (*((_DWORD *)this + 4))
  {
    unint64_t v1 = 0;
    uint64_t v2 = 20;
    do
    {
      long long v3 = (_OWORD *)(*((void *)this + 3) + v2);
      *long long v3 = 0uLL;
      v3[1] = 0uLL;
      ++v1;
      v2 += 52;
    }
    while (v1 < *((unsigned int *)this + 4));
  }
  return 0;
}

uint64_t IIRFilter824::Set(uint64_t a1, unsigned int a2, float64x2_t *a3)
{
  if (*(_DWORD *)(a1 + 12) < a2) {
    return 4294967246;
  }
  int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = 0;
  if (a2)
  {
    int v6 = a3 + 1;
    uint64_t v7 = a2;
    float64x2_t v8 = (float64x2_t)vdupq_n_s64(0xC170000000000000);
    do
    {
      float64x2_t v9 = v6[-1];
      double v10 = v6[1].f64[0];
      float64x2_t v11 = *v6;
      if (vaddvq_f64(vabsq_f64(v9)) + fabs(v6->f64[1]) + fabs(v10) + fabs(v6->f64[0] + -1.0) >= 1.0e-15)
      {
        uint64_t v12 = *(void *)(a1 + 24) + 52 * v5;
        *(int32x2_t *)uint64_t v12 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(v9, v8)));
        *(int32x2_t *)(v12 + 8) = vmovn_s64(vcvtq_n_s64_f64(v11, 0x18uLL));
        ++v5;
        *(_DWORD *)(v12 + 16) = vcvtd_n_s64_f64(v10, 0x18uLL);
        *(_OWORD *)(v12 + 20) = 0uLL;
        *(_OWORD *)(v12 + 36) = 0uLL;
      }
      int v6 = (float64x2_t *)((char *)v6 + 40);
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(a1 + 16) = v5;
  if (v4 != v5) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return 0;
}

void IIRFilter824::~IIRFilter824(IIRFilter824 *this)
{
  *(void *)this = &unk_26CBA90C8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x21D497F90);
}

{
  void *v2;

  *(void *)this = &unk_26CBA90C8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t IIRFilterFloat32::Process(IIRFilterFloat32 *this, unsigned int a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  uint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers != a4->mNumberBuffers || mNumberBuffers != *((_DWORD *)this + 2)) {
    return 4294967246;
  }
  uint64_t v19 = (char *)this + 40;
  int v9 = caulk::pooled_semaphore_mutex::try_lock((IIRFilterFloat32 *)((char *)this + 40));
  char v20 = v9;
  if (v9)
  {
    int v10 = *((_DWORD *)this + 11);
    if (v10)
    {
      uint64_t v12 = (const vDSP_biquadm_SetupStruct *)*((void *)this + 3);
      float64x2_t v11 = (vDSP_biquadm_SetupStruct *)*((void *)this + 4);
      *((void *)this + 3) = v11;
      *((void *)this + 4) = v12;
      if (v10 == 1) {
        vDSP_biquadm_CopyState(v11, v12);
      }
      else {
        vDSP_biquadm_ResetState(v11);
      }
      *((_DWORD *)this + 11) = 0;
    }
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
  if (mNumberBuffers)
  {
    uint64_t v14 = 0;
    p_mData = &a4->mBuffers[0].mData;
    AudioFormatFlags v16 = &a3->mBuffers[0].mData;
    do
    {
      UInt32 v17 = *v16;
      v16 += 2;
      *(void *)(*((void *)this + 10) + v14) = v17;
      UInt32 v18 = *p_mData;
      p_mData += 2;
      *(void *)(*((void *)this + 13) + v14) = v18;
      v14 += 8;
    }
    while (8 * mNumberBuffers != v14);
  }
  vDSP_biquadm(*((vDSP_biquadm_Setup *)this + 3), *((const float ***)this + 10), 1, *((float ***)this + 13), 1, a2);
  return 0;
}

void sub_21BA9E5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IIRFilterFloat32::Reset(vDSP_biquadm_Setup *this)
{
  return 0;
}

uint64_t IIRFilterFloat32::Set(IIRFilterFloat32 *this, unsigned int a2, const BiquadCoefficients *a3)
{
  size_t v4 = *((unsigned int *)this + 3);
  if (v4 < a2) {
    return 4294967246;
  }
  uint64_t v8 = *((void *)this + 9);
  if (v4) {
    bzero(*((void **)this + 9), v4);
  }
  if (a2)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *((unsigned int *)this + 2);
    vDSP_Length v12 = a2;
    do
    {
      if (v11)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (void *)((char *)a3 + 40 * v10);
        uint64_t v15 = *((void *)this + 6);
        do
        {
          *(void *)(v15 + 8 * (v9 + v13)) = v14[2];
          *(void *)(v15 + 8 * (v9 + v13 + 1)) = v14[3];
          *(void *)(v15 + 8 * (v9 + v13 + 2)) = v14[4];
          *(void *)(v15 + 8 * (v9 + v13 + 3)) = *v14;
          *(void *)(v15 + 8 * (v9 + v13 + 4)) = v14[1];
          v13 += 5;
        }
        while (5 * v11 != v13);
      }
      AudioFormatFlags v16 = (double *)((char *)a3 + 40 * v10);
      *(unsigned char *)(v8 + v10++) = fabs(*v16) + fabs(v16[1]) + fabs(v16[3]) + fabs(v16[4]) + fabs(v16[2] + -1.0) >= 1.0e-15;
      v9 += 5 * v11;
    }
    while (v10 != a2);
  }
  else
  {
    vDSP_Length v12 = 0;
  }
  caulk::pooled_semaphore_mutex::_lock((IIRFilterFloat32 *)((char *)this + 40));
  vDSP_biquadm_SetCoefficientsDouble(*((vDSP_biquadm_Setup *)this + 4), *((const double **)this + 6), 0, 0, v12, *((unsigned int *)this + 2));
  vDSP_biquadm_SetActiveFilters(*((vDSP_biquadm_Setup *)this + 4), *((const BOOL **)this + 9));
  if (*((_DWORD *)this + 4) == a2) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  *((_DWORD *)this + 11) = v17;
  *((_DWORD *)this + 4) = a2;
  caulk::pooled_semaphore_mutex::_unlock((IIRFilterFloat32 *)((char *)this + 40));
  return 0;
}

void sub_21BA9E7AC(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void IIRFilterFloat32::~IIRFilterFloat32(IIRFilterFloat32 *this)
{
  *(void *)this = &unk_26CBABEF0;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    MEMORY[0x21D497F60](v4, 0x1000C8077774924);
  }
  unsigned int v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 4, 0);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 3, 0);

  JUMPOUT(0x21D497F90);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(void *)this = &unk_26CBABEF0;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    MEMORY[0x21D497F60](v4, 0x1000C8077774924);
  }
  unsigned int v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 4, 0);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 3, 0);
}

void std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](vDSP_biquadm_SetupStruct **a1, vDSP_biquadm_SetupStruct *a2)
{
  long long v3 = *a1;
  *a1 = a2;
  if (v3) {
    vDSP_biquadm_DestroySetup(v3);
  }
}

void GetFrequencyResponse(uint64_t a1, AudioUnitFrequencyResponseBin *a2, uint64_t a3, const BiquadCoefficients *a4, double a5)
{
  uint64_t v7 = 0;
  double v8 = a5 * 0.5;
  int v9 = (double *)(a3 + 16);
  double v34 = 6.28318531 / a5;
  double v35 = a5 * 0.5;
  do
  {
    double v10 = *(double *)(a1 + 16 * v7);
    if (v10 < 0.0) {
      break;
    }
    if (v10 != 0.0 && v10 < v8)
    {
      if (a2)
      {
        __double2 v13 = __sincos_stret(v34 * v10);
        double v14 = std::operator*[abi:ne180100]<double>(v13.__cosval, v13.__sinval, v13.__cosval, v13.__sinval);
        double v16 = v15;
        int v17 = a2;
        UInt32 v18 = v9;
        long long v19 = xmmword_21BAB70B0;
        do
        {
          long long v36 = v19;
          double v20 = v18[1];
          double v21 = v18[2];
          double v22 = *(v18 - 1);
          double v23 = *v18;
          double v24 = *(v18 - 2);
          double v39 = v16 * v22 + v13.__sinval * v24;
          double __x = v14 * v22 + v13.__cosval * v24 + 1.0;
          double v25 = logb(fmax(fabs(__x), fabs(v39)));
          if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            int v26 = 0;
            double v27 = v39;
          }
          else
          {
            int v26 = (int)v25;
            double __x = scalbn(__x, -(int)v25);
            double v27 = scalbn(v39, -v26);
          }
          double v40 = v27;
          double v37 = v23 + v14 * v21 + v13.__cosval * v20;
          double v38 = v16 * v21 + v13.__sinval * v20;
          double v28 = v27 * v27 + __x * __x;
          double v29 = scalbn((v38 * v27 + v37 * __x) / v28, -v26);
          double v30 = scalbn((v38 * __x - v37 * v40) / v28, -v26);
          double v31 = std::operator*[abi:ne180100]<double>(*(double *)&v36, *((double *)&v36 + 1), v29, v30);
          *(double *)&long long v19 = v31;
          *((long double *)&v19 + 1) = v32;
          v18 += 5;
          int v17 = (AudioUnitFrequencyResponseBin *)((char *)v17 - 1);
        }
        while (v17);
        double v8 = v35;
      }
      else
      {
        double v31 = 1.0;
        long double v32 = 0.0;
      }
      double v33 = hypot(v31, v32);
      if (v33 < 2.22507386e-308) {
        double v33 = 2.22507386e-308;
      }
      double v12 = log10(v33) * 20.0;
    }
    else
    {
      double v12 = -200.0;
    }
    *(double *)(a1 + 16 * v7++ + 8) = v12;
  }
  while (v7 != 1024);
}

double std::operator*[abi:ne180100]<double>(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

uint64_t BiquadCoefficients::SetPriv(BiquadCoefficients *this, int a2, long double a3, double a4, double a5)
{
  double v10 = cos(a3);
  switch(a2)
  {
    case 1:
      double v11 = __exp10(a5 * 0.05);
      double v12 = sin(a3) / (a4 + a4);
      double v13 = 1.0;
      double v14 = (1.0 - v10) * 0.5;
      double v15 = v14 + v14;
      double v16 = v12 + 1.0;
      double v17 = -2.0;
      goto LABEL_5;
    case 2:
      double v11 = __exp10(a5 * 0.05);
      double v12 = sin(a3) / (a4 + a4);
      double v13 = 1.0;
      double v14 = (v10 + 1.0) * 0.5;
      double v17 = -2.0;
      double v15 = v14 * -2.0;
      double v16 = v12 + 1.0;
LABEL_5:
      double v19 = v10 * v17;
      double v20 = v13 - v12;
      double v21 = v14;
      goto LABEL_18;
    case 3:
      double v11 = __exp10(a5 * 0.05);
      double v21 = sin(a3) / (a4 + a4);
      double v14 = -v21;
      double v16 = v21 + 1.0;
      double v19 = v10 * -2.0;
      double v20 = 1.0 - v21;
      double v15 = 0.0;
      goto LABEL_18;
    case 4:
      double v11 = __exp10(a5 * 0.05);
      long double v22 = sin(a3) / (a4 + a4);
      double v15 = v10 * -2.0;
      double v14 = 1.0;
      double v16 = v22 + 1.0;
      double v20 = 1.0 - v22;
      double v21 = 1.0;
      goto LABEL_17;
    case 5:
      double v11 = __exp10(a5 * 0.05);
      long double v23 = sin(a3) / (a4 + a4);
      double v14 = v23 + 1.0;
      double v15 = v10 * -2.0;
      double v21 = 1.0 - v23;
      double v20 = 1.0 - v23;
      double v19 = v10 * -2.0;
      double v16 = v23 + 1.0;
      goto LABEL_18;
    case 6:
      double v24 = __exp10(a5 * 0.5 * 0.05);
      double v25 = sin(a3) / (a4 / v24 + a4 / v24);
      double v26 = v24 * v25;
      goto LABEL_16;
    case 7:
      long double v27 = sin(a3) / (a4 + a4);
      double v28 = __exp10(a5 * 0.5 * 0.05);
      double v29 = sqrt(v28);
      double v11 = 1.0;
      double v30 = v27 * (v29 + v29);
      double v31 = v10 * (v28 + -1.0);
      double v32 = v10 * (v28 + 1.0);
      double v33 = v28 + 1.0 + v31;
      double v16 = v33 + v30;
      double v19 = (v28 + -1.0 + v32) * -2.0;
      double v20 = v33 - v30;
      double v34 = v28 + 1.0 - v31;
      double v21 = v28 * (v34 + v30);
      double v35 = v28 + v28;
      double v36 = v28 + -1.0 - v32;
      goto LABEL_12;
    case 8:
      long double v37 = sin(a3) / (a4 + a4);
      double v28 = __exp10(a5 * 0.5 * 0.05);
      double v38 = sqrt(v28);
      double v11 = 1.0;
      double v30 = v37 * (v38 + v38);
      double v39 = v10 * (v28 + -1.0);
      double v40 = v10 * (v28 + 1.0);
      double v41 = v28 + 1.0 - v39;
      double v16 = v41 + v30;
      double v19 = v28 + -1.0 - v40 + v28 + -1.0 - v40;
      double v20 = v41 - v30;
      double v34 = v28 + 1.0 + v39;
      double v21 = v28 * (v34 + v30);
      double v35 = v28 * -2.0;
      double v36 = v28 + -1.0 + v40;
LABEL_12:
      double v15 = v35 * v36;
      double v14 = v28 * (v34 - v30);
      goto LABEL_18;
    case 9:
      double v42 = a5 * 0.5;
      double v43 = __exp10(a5 * 0.5 * 0.25 * 0.05);
      double v44 = __exp10(v42 * 0.75 * 0.05);
      uint64_t result = 0;
      double v45 = (1.0 - v44 * v10 - sqrt((1.0 - v10 * v10) * -(v44 * v44) + (v44 + v44) * (1.0 - v10))) / (1.0 - v44);
      *((double *)this + 2) = v43 * (v45 * -2.0 + 1.0 + v45 * v45);
      *((void *)this + 3) = 0;
      *((void *)this + 4) = 0;
      __asm { FMOV            V1.2D, #-2.0 }
      _Q1.f64[1] = v45;
      *(float64x2_t *)this = vmulq_n_f64(_Q1, v45);
      return result;
    case 10:
      double v51 = __exp10(a5 * 0.05);
      long double v52 = tan(a3 / (a4 + a4));
      uint64_t result = 0;
      long double v53 = (1.0 - v52 * (4.0 / (v51 + 1.0))) * 0.5 / (v52 * (4.0 / (v51 + 1.0)) + 1.0);
      long double v54 = (v51 + -1.0 + v51 + -1.0) * ((0.5 - v53) * 0.5);
      long double v55 = v10 * (v53 + 0.5) * -2.0;
      long double v56 = v53 + v53;
      *(long double *)this = v55;
      *((long double *)this + 1) = v56;
      *((long double *)this + 2) = v54 + 1.0;
      *((long double *)this + 3) = v55;
      double v57 = v56 - v54;
      goto LABEL_19;
    case 11:
      double v24 = __exp10(a5 * 0.5 * 0.05);
      double v25 = sin(a3) / (a4 + a4);
      double v26 = v25 * v24;
LABEL_16:
      double v58 = v25 / v24;
      double v11 = 1.0;
      double v16 = v58 + 1.0;
      double v15 = v10 * -2.0;
      double v20 = 1.0 - v58;
      double v21 = v26 + 1.0;
      double v14 = 1.0 - v26;
LABEL_17:
      double v19 = v15;
LABEL_18:
      uint64_t result = 0;
      double v59 = 1.0 / v16;
      *(double *)this = v19 * v59;
      *((double *)this + 1) = v59 * v20;
      *((double *)this + 2) = v11 * v59 * v21;
      *((double *)this + 3) = v11 * v59 * v15;
      double v57 = v11 * v59 * v14;
LABEL_19:
      *((double *)this + 4) = v57;
      break;
    default:
      uint64_t result = 4294967246;
      break;
  }
  return result;
}

BiquadCoefficients *BiquadCoefficients::SetQ(BiquadCoefficients *this, int a2, long double a3, double a4, double a5)
{
  if (a3 <= 0.0 || a4 <= 0.0)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    if (a3 > 3.11017673) {
      a3 = 3.11017673;
    }
    return (BiquadCoefficients *)BiquadCoefficients::SetPriv(this, a2, a3, a4, a5);
  }
  return this;
}

uint64_t NewIIRFilter(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2)
{
  long long v2 = *(_OWORD *)&a1->mBytesPerPacket;
  long long v17 = *(_OWORD *)&a1->mSampleRate;
  long long v18 = v2;
  uint64_t v19 = *(void *)&a1->mBitsPerChannel;
  long long v3 = *(_OWORD *)&a2->mBytesPerPacket;
  long long v14 = *(_OWORD *)&a2->mSampleRate;
  long long v15 = v3;
  uint64_t v16 = *(void *)&a2->mBitsPerChannel;
  if (*(double *)&v17 == *(double *)&v14)
  {
    uint64_t v13 = 0;
    __int16 v12 = 0;
    int v5 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v17, (int *)&v13 + 1, (BOOL *)&v12 + 1);
    int v6 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v14, (int *)&v13, (BOOL *)&v12);
    if (v5)
    {
      if (v6)
      {
        if ((HIDWORD(v13) - 2) >= 2)
        {
          if (v13 == 0x100000001
            && HIDWORD(v18) == HIDWORD(v15)
            && (HIDWORD(v18) < 2 || !(HIBYTE(v12) | v12)))
          {
            operator new();
          }
        }
        else
        {
          int v8 = 0;
          if (HIDWORD(v18) == 1 && HIDWORD(v15) == 2) {
            int v8 = (_BYTE)v12 != 0;
          }
          if ((HIDWORD(v18) == HIDWORD(v15) || v8) && ((HIBYTE(v12) != v12) & ~v8) == 0)
          {
            int ProcessProcForFormats = Biquad_8dot24::CreateProcessProcForFormats((Biquad_8dot24 *)&v17, (const CAStreamBasicDescription *)&v14, v7);
            int v11 = Biquad_8dot24::CreateProcessProcForFormats((Biquad_8dot24 *)&v14, (const CAStreamBasicDescription *)&v14, v10);
            if (ProcessProcForFormats)
            {
              if (v11) {
                operator new();
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_21BA9F5E8(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10A1C4067B839F8);
  _Unwind_Resume(a1);
}

void IIRFilterFloat32::IIRFilterFloat32(IIRFilterFloat32 *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = 0;
  *(void *)this = &unk_26CBABEF0;
  *((void *)this + 3) = 0;
  uint64_t v4 = (vDSP_biquadm_SetupStruct **)((char *)this + 24);
  *((void *)this + 4) = 0;
  int v5 = (vDSP_biquadm_SetupStruct **)((char *)this + 32);
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((IIRFilterFloat32 *)((char *)this + 40));
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v7 = *((_DWORD *)this + 3);
  uint64_t v8 = 5 * v6 * v7;
  if (5 * v6 * v7)
  {
    std::vector<double>::__vallocate[abi:ne180100]((void *)this + 6, 5 * v6 * v7);
    int v9 = (void *)*((void *)this + 7);
    double v10 = &v9[v8];
    uint64_t v11 = 8 * v8;
    do
    {
      *v9++ = 0;
      v11 -= 8;
    }
    while (v11);
    *((void *)this + 7) = v10;
    __int16 v12 = (const double *)*((void *)this + 6);
    unsigned int v6 = *((_DWORD *)this + 2);
    unsigned int v7 = *((_DWORD *)this + 3);
  }
  else
  {
    __int16 v12 = 0;
    *((void *)this + 7) = 8 * v8;
  }
  Setup = vDSP_biquadm_CreateSetup(v12, v7, v6);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](v4, Setup);
  long long v14 = vDSP_biquadm_CreateSetup(*((const double **)this + 6), *((unsigned int *)this + 3), *((unsigned int *)this + 2));
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](v5, v14);
  if (*v4)
  {
    if (*v5) {
      operator new[]();
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "failed to create vDSP biquads");
}

void sub_21BA9F9A8(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  int v9 = *v5;
  if (*v5)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = v1[9];
  v1[9] = 0;
  if (v10) {
    MEMORY[0x21D497F60](v10, 0x1000C8077774924);
  }
  uint64_t v11 = *v4;
  if (*v4)
  {
    v1[7] = v11;
    operator delete(v11);
  }
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

uint64_t IIRFilter824::IIRFilter824(uint64_t a1, int a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CBA90C8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = *a4;
  *(_OWORD *)(a1 + 64) = *a5;
  *(void *)&v13[0] = 0;
  DWORD2(v13[0]) = 0x1000000;
  memset((char *)v13 + 12, 0, 36);
  if (a3)
  {
    size_t v7 = 52 * a3;
    uint64_t v8 = (char *)operator new(v7);
    uint64_t v9 = 0;
    uint64_t v10 = &v8[52 * a3];
    do
    {
      uint64_t v11 = &v8[v9];
      *(_OWORD *)uint64_t v11 = v13[0];
      *((_OWORD *)v11 + 1) = v13[1];
      *((_OWORD *)v11 + 2) = v13[2];
      *((_DWORD *)v11 + 12) = 0;
      v9 += 52;
    }
    while (v7 != v9);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v10;
  }
  return a1;
}

void *ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Factory()
{
  uint64_t result = malloc_type_malloc(0x440uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Destruct;
  return result;
}

void *ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Factory()
{
  uint64_t result = malloc_type_malloc(0x3A0uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct;
  return result;
}

void *ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Factory()
{
  uint64_t result = malloc_type_malloc(0x380uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Destruct;
  return result;
}

double AUNewPitch::GetChannelLayoutTags@<D0>(int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  if ((a1 - 3) <= 0xFFFFFFFD) {
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  }
  if (a2) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v5 = operator new(0x30uLL);
  a3[1] = v5 + 3;
  a3[2] = v5 + 3;
  *int v5 = xmmword_21BABD1D0;
  v5[1] = unk_21BABD1E0;
  double result = 4.98418446e-306;
  v5[2] = xmmword_21BABD1F0;
  *a3 = v5;
  return result;
}

uint64_t AUNewPitch::RemoveAudioChannelLayout(AUNewPitch *this, int a2, int a3)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  CAAudioChannelLayout::Clear((AUNewPitch *)((char *)this + 544));
  return 0;
}

uint64_t AUNewPitch::SetAudioChannelLayout(AUNewPitch *this, int a2, int a3, AudioChannelLayout *a4)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return 4294956430;
  }
  if (a3) {
    return 4294956419;
  }
  (*(void (**)(void **__return_ptr))(*(void *)this + 392))(outPropertyData);
  int v7 = v14;
  if (v7 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v8)
    || a4->mChannelLayoutTag == 0x10000)
  {
    return 4294956445;
  }
  if (!a4->mChannelLayoutTag)
  {
    CAAudioChannelLayout::operator=();
    return 0;
  }
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a4, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  outPropertyData[0] = 0;
  CADeprecated::CAAutoFree<AudioChannelLayout>::allocBytes(outPropertyData, outPropertyDataSize, 1);
  uint64_t v11 = (AudioChannelLayout *)outPropertyData[0];
  uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, a4, &outPropertyDataSize, outPropertyData[0]);
  if (!Property) {
    CAAudioChannelLayout::Set((AUNewPitch *)((char *)this + 544), v11);
  }
  if (v11) {
    free(v11);
  }
  if (!Property) {
    return 0;
  }
  return Property;
}

void sub_21BA9FE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUNewPitch::GetAudioChannelLayout(AUNewPitch *this, const AudioChannelLayout *a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  *a5 = 1;
  uint64_t v5 = *((void *)this + 68);
  if (!v5) {
    return 0;
  }
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), a2)) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 68);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 12);
  if (a4 && v9) {
    memcpy(a4, (const void *)(v8 + 16), *(unsigned int *)(v8 + 12));
  }
  return v9;
}

uint64_t AUNewPitch::ChangeStreamFormat(AUNewPitch *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  if (__s1->mChannelsPerFrame != __s2->mChannelsPerFrame) {
    (*(void (**)(AUNewPitch *, uint64_t, uint64_t))(*(void *)this + 544))(this, a2, a3);
  }
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, __s2, __s1);
  return 0;
}

uint64_t AUNewPitch::SupportedNumChannels(AUNewPitch *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUNewPitch_sChannels;
  }
  return 1;
}

BOOL AUNewPitch::StreamFormatWritable(AUNewPitch *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUNewPitch::SupportsTail(AUNewPitch *this)
{
  return 1;
}

double AUNewPitch::GetTailTime(AUNewPitch *this, double a2)
{
  uint64_t v2 = *((void *)this + 66);
  if (!v2) {
    return 0.0;
  }
  LODWORD(a2) = *(_DWORD *)(v2 + 2192);
  return (double)*(unint64_t *)&a2 / *(double *)(v2 + 2176);
}

double AUNewPitch::GetLatency(AUNewPitch *this)
{
  uint64_t v1 = *((void *)this + 66);
  double result = 0.0;
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 2777)) {
      return (1.0 / *(double *)(v1 + 2216) + 1.0) * (double)*(int *)(v1 + 2196) / *(double *)(v1 + 2176);
    }
  }
  return result;
}

uint64_t AUNewPitch::GetParameterInfo(AUNewPitch *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  v15[0] = xmmword_2643B9B48;
  v15[1] = *(_OWORD *)off_2643B9B58;
  if (!LocalizeAUParameterStringsForClass<AUNewPitch>(std::initializer_list<__CFString const**>)::sLocalized) {
    LocalizeAUParameterStringsForClass<AUNewPitch>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v15, 4);
  }
  int v6 = a3 - 1;
  if ((a3 - 1) > 6 || ((0x69u >> v6) & 1) == 0) {
    return 4294956418;
  }
  uint64_t v8 = (CFStringRef *)off_2643B9BC8[v6];
  AudioUnitParameterUnit v9 = dword_21BABD200[v6];
  AudioUnitParameterValue v10 = flt_21BABD21C[v6];
  AudioUnitParameterValue v11 = flt_21BABD238[v6];
  AudioUnitParameterValue v12 = flt_21BABD254[v6];
  int v13 = dword_21BABD270[v6];
  CFStringRef v14 = *v8;
  buffer->cfNameString = *v8;
  buffer->flags |= 0x8000000u;
  CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v9;
  buffer->minCFNumberRef Value = v10;
  buffer->maxCFNumberRef Value = v11;
  buffer->defaultCFNumberRef Value = v12;
  buffer->flags += v13;
  return result;
}

uint64_t AUNewPitch::Render(AUNewPitch *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4)
{
  uint64_t v8 = *((void *)this + 66);
  *(void *)(v8 + 2760) = AUNewPitch::PullForInputCallback;
  *(void *)(v8 + 2768) = this;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 128), 0);
  ausdk::AUIOElement::PrepareBuffer((ausdk::AUIOElement *)Element, a4);
  uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  double mSampleTime = a3->mSampleTime;
  AudioUnitParameterValue v12 = (float *)*a2;

  return AUNewPitch::CoreRender(this, v12, mSampleTime, a4, BufferList);
}

uint64_t AUNewPitch::CoreRender(AUNewPitch *this, float *a2, double a3, unsigned int a4, AudioBufferList *a5)
{
  *((_DWORD *)this + 134) = a2;
  uint64_t v9 = AUNewPitch::CalcCoeffs(this, a2);
  if (v9) {
    return v9;
  }
  uint64_t v11 = *((void *)this + 66);
  if (!*(unsigned char *)(v11 + 2553) && *(unsigned char *)(v11 + 2552))
  {
    unsigned int v18 = a4;
    double v17 = a3;
    if (*(unsigned char *)(v11 + 2557)) {
      PhaseVocoderTwo::ResetPhases((PhaseVocoderTwo *)v11);
    }
    unsigned int v16 = a4;
    *(_DWORD *)(v11 + 2440) = 0;
    double v13 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v11, &v16, a5, &v17);
    int v12 = *(unsigned __int8 *)(v11 + 2554);
    LODWORD(v13) = *(_DWORD *)(v11 + 2184);
    if (*(unsigned char *)(v11 + 2554)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = *(float *)&v13 == 1.0;
    }
    if (!v14) {
      PhaseVocoderTwo::MakeBinMap(v11, v13);
    }
    uint64_t v9 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v11, &v18);
    if (!v9)
    {
      while (v16 && *(_DWORD *)(v11 + 2192) <= *(_DWORD *)(v11 + 2384) - *(_DWORD *)(v11 + 2392))
      {
        PhaseVocoderTwo::ProcessBlock((PhaseVocoderTwo *)v11, v12 != 0, v15);
        double v15 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v11, &v16, a5, &v17);
      }
    }
    return v9;
  }

  return PhaseVocoderTwo::RenderBypass((PhaseVocoderTwo *)v11, a4, a5, a3);
}

uint64_t AUNewPitch::CalcCoeffs(AUNewPitch *this, float *a2)
{
  float v15 = 0.0;
  uint64_t v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 4, 0, 0, &v15);
  if (!v3)
  {
    float v4 = v15;
    if (v15 >= 3.0)
    {
      if (v15 > 32.0)
      {
        float v15 = 32.0;
        float v4 = 32.0;
      }
    }
    else
    {
      float v15 = 3.0;
      float v4 = 3.0;
    }
    *(float *)(*((void *)this + 66) + 2224) = v4;
    float v14 = 0.0;
    uint64_t v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 1, 0, 0, &v14);
    if (!v3)
    {
      float v5 = v14;
      *(float *)&int v6 = -2400.0;
      if (v14 < -2400.0 || (*(float *)&int v6 = 2400.0, v14 > 2400.0))
      {
        float v14 = *(float *)&v6;
        float v5 = *(float *)&v6;
      }
      float v7 = exp2(v5 / 1200.0);
      *(float *)(*((void *)this + 66) + 2184) = v7;
      float v13 = 0.0;
      uint64_t v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 6, 0, 0, &v13);
      if (!v3)
      {
        v8.n128_f32[0] = v13;
        *(unsigned char *)(*((void *)this + 66) + 2554) = v13 != 0.0;
        float v12 = 0.0;
        uint64_t v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, void, void, float *, __n128))(*(void *)this + 144))(this, 7, 0, 0, &v12, v8);
        if (!v3)
        {
          float v9 = v12;
          if (v13 == 0.0 && v12 != 0.0)
          {
            float v9 = 0.0;
            (*(void (**)(AUNewPitch *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, 7, 0, 0, 0, 0.0);
          }
          uint64_t v10 = *((void *)this + 66);
          *(unsigned char *)(v10 + 2555) = v9 != 0.0;
          *(unsigned char *)(v10 + 2553) = *((unsigned char *)this + 556);
          *(_DWORD *)(v10 + 2236) = *((_DWORD *)this + 138);
        }
      }
    }
  }
  return v3;
}

uint64_t AUNewPitch::PullForInputCallback(AUNewPitch *this, void *a2, const AudioBufferList **a3, void *a4, double *a5)
{
  float v7 = (const AudioTimeStamp *)(a3 + 34);
  *a4 = a3[34];
  __n128 v8 = (unsigned int *)(a3 + 67);
  float v9 = (ausdk::AUScope *)(a3 + 10);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 10), 0);
  uint64_t v11 = ausdk::AUInputElement::PullInput(Element, v8, v7, 0, (uint64_t)this);
  if (!v11)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v9, 0);
    *a2 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
  }
  return v11;
}

uint64_t AUNewPitch::ProcessMultipleBufferLists(AUNewPitch *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (a4 != 1 || a6 != 1) {
    return 4294956419;
  }
  *((_DWORD *)this + 174) = 0;
  *((void *)this + 85) = *a5;
  float v9 = *a7;
  uint64_t mNumberBuffers = (*a7)->mNumberBuffers;
  if (mNumberBuffers)
  {
    p_size_t mDataByteSize = &v9->mBuffers[0].mDataByteSize;
    do
    {
      *p_size_t mDataByteSize = 4 * a3;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  uint64_t v12 = *((void *)this + 66);
  *(void *)(v12 + 2760) = AUNewPitch::PullForBufferedInputCallback;
  *(void *)(v12 + 2768) = this;
  uint64_t result = AUNewPitch::CoreRender(this, (float *)*a2, *((double *)this + 88), a3, v9);
  *((double *)this + 88) = *((double *)this + 88) + (double)a3;
  return result;
}

uint64_t AUNewPitch::PullForBufferedInputCallback(AUNewPitch *this, const AudioBufferList **a2, const AudioBufferList **a3, void *a4, double *a5)
{
  float v5 = a3[85];
  uint64_t mNumberBuffers = v5->mNumberBuffers;
  uint64_t v7 = *((unsigned int *)a3 + 174);
  if (mNumberBuffers)
  {
    unint64_t v8 = 0;
    float v9 = a3[86];
    uint64_t v10 = 16 * mNumberBuffers;
    p_mData = &v5->mBuffers[0].mData;
    do
    {
      uint64_t v12 = (char *)v9 + v8;
      *((void *)v12 + 2) = (char *)p_mData[v8 / 8] + 4 * v7;
      *((_DWORD *)v12 + 3) = 4 * this;
      v8 += 16;
    }
    while (v10 != v8);
  }
  else
  {
    float v9 = a3[86];
  }
  *((_DWORD *)a3 + 174) = v7 + this;
  *a2 = v9;
  return 0;
}

uint64_t AUNewPitch::CanScheduleParameters(AUNewPitch *this)
{
  return 0;
}

uint64_t AUNewPitch::SetProperty(AUNewPitch *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 56:
      uint64_t v9 = *((void *)this + 1);
      uint64_t v15 = 0;
      unsigned int v16 = &v15;
      uint64_t v17 = 0x2000000000;
      uint64_t v10 = (uint64_t (*)(uint64_t, int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      unsigned int v18 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
      {
        v14[0] = MEMORY[0x263EF8330];
        v14[1] = 0x40000000;
        void v14[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7274;
        v14[3] = &unk_2643B9B70;
        v14[4] = &v15;
        ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7274((uint64_t)v14);
        uint64_t v10 = (uint64_t (*)(uint64_t, int *))v16[3];
      }
      _Block_object_dispose(&v15, 8);
      if (!v10)
      {
        dlerror();
        float v13 = (_Unwind_Exception *)abort_report_np();
        _Block_object_dispose(&v15, 8);
        _Unwind_Resume(v13);
      }
      return v10(v9, a5);
    case 26:
      int v11 = *a5;
      if (*a5 <= 0x7F)
      {
        int v12 = *((_DWORD *)this + 138);
        *((_DWORD *)this + 138) = v11;
        if (v12 != v11) {
          (*(void (**)(AUNewPitch *, uint64_t, void))(*(void *)this + 432))(this, 26, 0);
        }
        return 0;
      }
      else
      {
        return 4294967246;
      }
    case 21:
      if (a6 >= 4)
      {
        uint64_t v6 = 0;
        *((unsigned char *)this + 556) = *a5 != 0;
      }
      else
      {
        return 4294956445;
      }
      break;
    default:
      return 4294956417;
  }
  return v6;
}

void *___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_7274(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 0x40000000;
    v5[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7279;
    v5[4] = &__block_descriptor_tmp_8;
    void v5[5] = v5;
    long long v6 = xmmword_2643B9B90;
    uint64_t v7 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
    if (CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)CoreAudioKitLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "CAUI_createCustomViewForAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7279()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t AUNewPitch::GetProperty(AUNewPitch *this, int a2, int a3, int a4, void *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 44)
  {
    if (a2 == 45)
    {
      if (a4 == 6)
      {
        uint64_t result = 0;
        *a5 = 0x700000000;
      }
    }
    else if (a2 == 57)
    {
      uint64_t result = 0;
      *a5 = *((void *)this + 1);
      a5[1] = 1;
      *((_DWORD *)a5 + 4) = 0;
    }
  }
  else
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 556);
    }
    else
    {
      if (a2 != 26) {
        return result;
      }
      uint64_t result = 0;
      int v7 = *((_DWORD *)this + 138);
    }
    *(_DWORD *)a5 = v7;
  }
  return result;
}

uint64_t AUNewPitch::GetPropertyInfo(AUNewPitch *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (a3) {
    return result;
  }
  if (a2 <= 55)
  {
    if (a2 != 21 && a2 != 26)
    {
      if (a2 == 45 && a4 == 6)
      {
        uint64_t result = 0;
        *a6 = 0;
        *a5 = 8;
      }
      return result;
    }
    uint64_t result = 0;
    unsigned int v7 = 4;
LABEL_15:
    *a5 = v7;
    *a6 = 1;
    return result;
  }
  switch(a2)
  {
    case 56:
      uint64_t result = 0;
      unsigned int v7 = 8;
      goto LABEL_15;
    case 57:
      uint64_t result = 0;
      *a5 = 24;
      *a6 = 0;
      return result;
    case 3801:
      uint64_t result = 0;
      unsigned int v7 = 256;
      goto LABEL_15;
  }
  return result;
}

uint64_t AUNewPitch::Reset(AUNewPitch *this)
{
  uint64_t v2 = (const float **)*((void *)this + 66);
  if (v2) {
    PhaseVocoderTwo::Reset(v2);
  }
  *((void *)this + 88) = 0;
  return 0;
}

void AUNewPitch::Cleanup(AUNewPitch *this)
{
  uint64_t v2 = *((void *)this + 66);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 66) = 0;
  free(*((void **)this + 86));
  *((void *)this + 86) = 0;
}

uint64_t AUNewPitch::Initialize(AUNewPitch *this)
{
  uint64_t v2 = (AUNewPitch *)((char *)this + 128);
  int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 128), 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 80), 0) + 108) == v3)
  {
    if ((uint64_t v5 = *((void *)this + 68)) == 0
      || !CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), v4)
      || ((uint64_t v7 = *((void *)this + 68)) == 0
        ? (int v8 = 0)
        : (int v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6)),
          v8 == v3))
    {
      double v10 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
      if (v10 >= 8192.0)
      {
        if (v10 >= 16384.0)
        {
          if (v10 >= 32768.0)
          {
            if (v10 >= 65536.0)
            {
              *((_DWORD *)this + 140) = 0x2000;
              int v11 = 4096;
            }
            else
            {
              *((_DWORD *)this + 140) = 4096;
              int v11 = 2048;
            }
          }
          else
          {
            *((_DWORD *)this + 140) = 2048;
            int v11 = 1024;
          }
        }
        else
        {
          *((_DWORD *)this + 140) = 1024;
          int v11 = 512;
        }
      }
      else
      {
        *((_DWORD *)this + 140) = 512;
        int v11 = 256;
      }
      if (*((_DWORD *)this + 138) <= 0x20u) {
        *((_DWORD *)this + 140) = v11;
      }
      uint64_t v13 = *((void *)this + 68);
      if (v13) {
        CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v13 + 16), v9);
      }
      operator new();
    }
  }
  return 4294956428;
}

void sub_21BAA0EBC(_Unwind_Exception *a1)
{
  MEMORY[0x21D497F90](v1, 0x10F1C40CF7E226ELL);
  _Unwind_Resume(a1);
}

void AUNewPitch::~AUNewPitch(AUNewPitch *this)
{
  AUNewPitch::~AUNewPitch(this);

  JUMPOUT(0x21D497F90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26CBA6F68;
  AUNewPitch::Cleanup(this);
  RampList::~RampList((AUNewPitch *)((char *)this + 568));
  MEMORY[0x21D497690]((char *)this + 544);

  ausdk::AUBase::~AUBase(this);
}

void *AUNewPitchFactory()
{
  uint64_t result = malloc_type_malloc(0x308uLL, 0xB0CA1167uLL);
  *uint64_t result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNewPitch>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNewPitch>::Destruct;
  return result;
}

void virtual thunk to'Amplifier::~Amplifier(void *a1)
{
}

{
  Amplifier::~Amplifier((Amplifier *)((char *)a1 + *(void *)(*a1 - 24)));
}

double Amplifier::Update(Amplifier *this)
{
  uint64_t v1 = *((void *)this + 13);
  double result = *(double *)(v1 + 92);
  *(double *)((char *)this + 124) = result;
  *((unsigned char *)this + 132) = *(unsigned char *)(v1 + 100);
  return result;
}

float *ProcessStereoInput<2,false>(float *result, int a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  float v8 = *a3;
  for (float i = *a4; a2; --a2)
  {
    float v10 = *result;
    float v11 = result[1];
    result += 2;
    *a5 = (float)(v8 * v10) + *a5;
    ++a5;
    float v8 = v8 + a7;
    *a6 = (float)(i * v11) + *a6;
    ++a6;
    float i = i + a8;
  }
  *a3 = v8;
  *a4 = i;
  return result;
}

float *ProcessStereoInput<1,false>(float *result, int a2, float *a3, float *a4, float *a5, float a6)
{
  float v6 = *a3;
  if (a2)
  {
    float v7 = *a4;
    do
    {
      float v8 = *result;
      float v9 = result[1];
      result += 2;
      float v10 = (float)(v6 * v8) + *a5;
      float v6 = v6 + a6;
      *a5++ = (float)(v7 * v9) + v10;
      --a2;
    }
    while (a2);
  }
  *a3 = v6;
  return result;
}

float *ProcessMonoInput<2,false>(float *result, int a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  float v8 = *a3;
  for (float i = *a4; a2; --a2)
  {
    float v10 = *result++;
    *a5 = *a5 + (float)(v8 * v10);
    ++a5;
    float v8 = v8 + a7;
    *a6 = (float)(i * v10) + *a6;
    ++a6;
    float i = i + a8;
  }
  *a3 = v8;
  *a4 = i;
  return result;
}

float *ProcessMonoInput<1,false>(float *result, int a2, float *a3, float a4, uint64_t a5, float *a6)
{
  for (float i = *a3; a2; --a2)
  {
    float v7 = *result++;
    *a6 = *a6 + (float)(i * v7);
    ++a6;
    float i = i + a4;
  }
  *a3 = i;
  return result;
}

uint64_t AUVarispeed::GetPreflightString(AUVarispeed *this, const __CFString **a2)
{
  return 0;
}

uint64_t AUVarispeed::RenderRamp(AUVarispeed *this, unsigned int *a2, AudioTimeStamp *a3, int a4)
{
  float v4 = a3;
  v74[0] = v74;
  v74[1] = (char *)this + 528;
  RampList::Reader::AdvanceOutputTime((RampList::Reader *)v74, a3->mSampleTime);
  if (*((unsigned char *)this + 1176))
  {
    *((unsigned char *)this + 1176) = 0;
    RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(v74[0] + 8), v4->mSampleTime);
    *((_WORD *)this + 476) = 256;
    *((void *)this + 120) = v6;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  uint64_t v8 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
  int v9 = *(_DWORD *)(v8 + 108);
  int v65 = v9;
  (*(void (**)(void))(***((void ***)this + 80) + 64))();
  if (v9 == 2)
  {
    (*(void (**)(void, void *(*)(float *, float *, unsigned int, _DWORD *), AUVarispeed *))(***((void ***)this + 80) + 72))(**((void **)this + 80), InputCallback2, this);
    int v10 = 1;
  }
  else
  {
    (*(void (**)(void, void, AUVarispeed *))(***((void ***)this + 80) + 72))(**((void **)this + 80), 0, this);
    int v10 = v9;
  }
  double v11 = *(double *)(Element + 80);
  double v57 = *(double *)(v8 + 80);
  int v12 = *((_DWORD *)this + 84);
  double mSampleTime = v4->mSampleTime;
  uint64_t v14 = *((void *)this + 80);
  if (*((void *)this + 81) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      (*(void (**)(void, double))(**(void **)(v14 + 8 * v15) + 120))(*(void *)(v14 + 8 * v15), v4->mSampleTime);
      ++v15;
      uint64_t v14 = *((void *)this + 80);
    }
    while (v15 < (*((void *)this + 81) - v14) >> 3);
  }
  *((void *)this + 125) = 0;
  int v16 = v65;
  if (a4 < 1)
  {
LABEL_55:
    if (*((void *)this + 134))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(v74[0] + 8), v4->mSampleTime);
      double v54 = v53;
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(void **)(v74[0] + 8), v4->mSampleTime + (double)a4);
      (*((void (**)(void, AudioTimeStamp *, double, double))this + 134))(*((void *)this + 135), v4, v54, v55 - v54);
    }
    return 0;
  }
  else
  {
    int v64 = 0;
    double v17 = (double)v12;
    int v18 = a4;
    double v19 = (double)a4;
    float v61 = (AudioTimeStamp *)((char *)this + 672);
    float v62 = (__n128 *)((char *)this + 736);
    uint64_t v20 = 8 * v10;
    char v21 = 1;
    uint64_t v66 = v10;
    int v59 = v10;
    float v60 = v4;
    uint64_t v58 = v20;
    while (1)
    {
      int v63 = v18;
      double v73 = (double)v18;
      RateRamp::RateRamp((RateRamp *)&v69);
      if (RampList::Reader::Segment())
      {
        if (v21)
        {
          if (*((unsigned char *)this + 600))
          {
            *((unsigned char *)this + 600) = 0;
            uint64_t v22 = v71;
            *((void *)this + 74) = v70;
            *((void *)this + 73) = v22;
          }
          double v23 = (*(double *)&v69 + *((double *)&v69 + 1)) * 0.5;
          if (v23 < 0.03125) {
            double v23 = 0.03125;
          }
          if (v23 <= 32.0) {
            double v24 = 1.0 / v23;
          }
          else {
            double v24 = 0.03125;
          }
          if (*((_DWORD *)this + 262)) {
            double v25 = 1.0;
          }
          else {
            double v25 = v24;
          }
          AUTimestampGenerator::State::AddOutputTime((uint64_t)v62, (uint64_t)v62, (long long *)v4, v19, v57, v25);
        }
      }
      else
      {
        double v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
        float Parameter = ausdk::AUElement::GetParameter(v26, 0);
        if (Parameter < 0.03125) {
          float Parameter = 0.03125;
        }
        if (Parameter > 32.0) {
          float Parameter = 32.0;
        }
        double v28 = Parameter;
        if (v21)
        {
          if (*((_DWORD *)this + 262)) {
            double v29 = 1.0;
          }
          else {
            double v29 = 1.0 / v28;
          }
          AUTimestampGenerator::State::AddOutputTime((uint64_t)v62, (uint64_t)v62, (long long *)v4, v19, v57, v29);
        }
        double v30 = v73 * v28;
        if (v73 * v28 > v17) {
          double v30 = v17;
        }
        RateRamp::RateRamp((RateRamp *)v67, v28, v28, *((double *)this + 116), *((double *)this + 116) + v30, v4->mSampleTime);
        long long v69 = v67[0];
        long long v70 = v67[1];
        long long v71 = v67[2];
        uint64_t v72 = v68;
      }
      RateRamp::OutputDuration((RateRamp *)&v69);
      double v32 = v31;
      if (v10 >= 1)
      {
        uint64_t v33 = 0;
        do
        {
          (*(void (**)(void, long long *))(**(void **)(*((void *)this + 80) + v33) + 128))(*(void *)(*((void *)this + 80) + v33), &v69);
          v33 += 8;
        }
        while (v20 != v33);
      }
      LODWORD(v20) = vcvtpd_s64_f64(v32);
      double v34 = (const AudioTimeStamp *)(*(uint64_t (**)(void, uint64_t))(***((void ***)this + 80) + 136))(**((void **)this + 80), v20);
      LODWORD(v67[0]) = 0;
      v35.n128_f64[0] = (double)v34;
      AUTimestampGenerator::State::GenerateInputTime(v62, 1, v35, v11);
      long long v37 = v36[3];
      long long v39 = *v36;
      long long v38 = v36[1];
      *((_OWORD *)this + 44) = v36[2];
      *((_OWORD *)this + 45) = v37;
      *(_OWORD *)&v61->double mSampleTime = v39;
      *((_OWORD *)this + 43) = v38;
      if (v34)
      {
        uint64_t result = AUVarispeed::PullInputAndUpdate(this, (unsigned int *)v67, v61, v34);
        if (result) {
          break;
        }
      }
      if (v10 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 16;
        do
        {
          *((_DWORD *)this + 166) = v42;
          *((_DWORD *)this + 252) = 0;
          int v44 = *(_DWORD *)(v8 + 92);
          uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v8 + 144));
          if ((v44 & 0x20) != 0) {
            uint64_t v46 = *(void *)(BufferList + v43);
          }
          else {
            uint64_t v46 = *(void *)(BufferList + 16) + v41;
          }
          if (v16 == 2)
          {
            uint64_t v47 = *(void *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v8 + 144)) + 16);
            int v48 = *(_DWORD *)(v8 + 92);
            uint64_t v49 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v8 + 144));
            if ((v48 & 0x20) != 0) {
              uint64_t v50 = *(void *)(v49 + 32);
            }
            else {
              uint64_t v50 = *(void *)(v49 + 16) + 4;
            }
            int v16 = v65;
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(***((void ***)this + 80) + 48))(**((void **)this + 80), v47 + 4 * v64, v50 + 4 * v64, v20, 1);
          }
          else
          {
            uint64_t v51 = *(void *)(*((void *)this + 80) + 8 * v42);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v51 + 40))(v51, v46 + 4 * v64, v20, 1);
          }
          ++v42;
          v43 += 16;
          v41 += 4;
        }
        while (v66 != v42);
      }
      char v21 = 0;
      v64 += v20;
      double mSampleTime = mSampleTime + (double)(int)v20;
      int v18 = v63 - v20;
      BOOL v52 = v63 <= (int)v20;
      int v10 = v59;
      float v4 = v60;
      uint64_t v20 = v58;
      if (v52) {
        goto LABEL_55;
      }
    }
  }
  return result;
}

uint64_t AUVarispeed::PullInputAndUpdate(AUVarispeed *this, unsigned int *a2, const AudioTimeStamp *a3, const AudioTimeStamp *a4)
{
  if (*((double *)this + 133) < 0.0) {
    *((void *)this + 133) = *(void *)&a3->mSampleTime;
  }
  uint64_t v8 = *((void *)this + 80);
  if (*((void *)this + 81) != v8)
  {
    unint64_t v9 = 0;
    do
    {
      (*(void (**)(void, double))(**(void **)(v8 + 8 * v9) + 104))(*(void *)(v8 + 8 * v9), a3->mSampleTime);
      ++v9;
      uint64_t v8 = *((void *)this + 80);
    }
    while (v9 < (*((void *)this + 81) - v8) >> 3);
  }
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);

  return ausdk::AUInputElement::PullInput(Element, a2, a3, 0, (uint64_t)a4);
}

void *InputCallback(float *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6 = a3[166];
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 20), 0);
  int v8 = *(_DWORD *)(Element + 92);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  if ((v8 & 0x20) != 0) {
    uint64_t v10 = *(void *)(BufferList + 16 * v6 + 16);
  }
  else {
    uint64_t v10 = *(void *)(BufferList + 16) + 4 * v6;
  }
  uint64_t v11 = a3[252];
  a3[252] = v11 + a2;

  return memcpy(a1, (const void *)(v10 + 4 * v11), 4 * a2);
}

void *InputCallback2(float *a1, float *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a4 + 20), 0);
  unint64_t v9 = (ausdk::AUBufferList *)(Element + 144);
  uint64_t v10 = *(void *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144)) + 16);
  uint64_t v11 = a4[252];
  LODWORD(Element) = *(_DWORD *)(Element + 92);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList(v9);
  if ((Element & 0x20) != 0) {
    uint64_t v13 = *(void *)(BufferList + 32);
  }
  else {
    uint64_t v13 = *(void *)(BufferList + 16) + 4;
  }
  uint64_t v14 = a4[252];
  unint64_t v15 = (const void *)(v13 + 4 * v14);
  a4[252] = v14 + a3;
  size_t v16 = 4 * a3;
  memcpy(a1, (const void *)(v10 + 4 * v11), v16);

  return memcpy(a2, v15, v16);
}

uint64_t AUVarispeed::Version(AUVarispeed *this)
{
  return 0x10000;
}

uint64_t AUVarispeed::ReallocateBuffers(AUVarispeed *this)
{
  ausdk::AUBase::CreateElements((uint64_t)this);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  (*(void (**)(uint64_t, void))(*(void *)Element + 64))(Element, (32 * *((_DWORD *)this + 84) + 1024));
  uint64_t v3 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 64))(v3, 0);
  *((unsigned char *)this + 432) = 1;
  return result;
}

uint64_t AUVarispeed::SupportedNumChannels(AUVarispeed *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&sChannels;
  }
  return 1;
}

BOOL AUVarispeed::StreamFormatWritable(AUVarispeed *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUVarispeed::SupportsTail(AUVarispeed *this)
{
  return 1;
}

void AUVarispeed::GetTailTime(AUVarispeed *this)
{
  if (*((unsigned char *)this + 17))
  {
    (*(void (**)(void, int *))(***((void ***)this + 80) + 16))(**((void **)this + 80), &v3);
    ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    ausdk::AUElement::GetParameter(Element, 0);
  }
}

double AUVarispeed::GetLatency(AUVarispeed *this)
{
  if (*((unsigned char *)this + 1020)) {
    return 0.0;
  }
  else {
    return AUVarispeed::GetInternalLatency(this);
  }
}

double AUVarispeed::GetInternalLatency(AUVarispeed *this)
{
  if (!*((unsigned char *)this + 17)) {
    return 0.0;
  }
  (*(void (**)(void, int *))(***((void ***)this + 80) + 16))(**((void **)this + 80), &v8);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  LODWORD(v3) = v8;
  double v4 = (double)v3 / *(double *)(Element + 80);
  if (!*((_DWORD *)this + 262))
  {
    uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(v5, 0);
    if (Parameter < 0.03125) {
      float Parameter = 0.03125;
    }
    if (Parameter > 32.0) {
      float Parameter = 32.0;
    }
    return v4 / Parameter;
  }
  return v4;
}

uint64_t AUVarispeed::GetParameterInfo(AUVarispeed *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  if (a3)
  {
    if (a3 != 1) {
      return 4294956418;
    }
    uint64_t v6 = 0x45160000C5160000;
    int v7 = 276824064;
    AudioUnitParameterValue v8 = 0.0;
    AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Cents;
    CFStringRef v10 = @"playback pitch";
  }
  else
  {
    uint64_t v6 = 0x408000003E800000;
    int v7 = 281018368;
    AudioUnitParameterValue v8 = 1.0;
    AudioUnitParameterUnit v9 = kAudioUnitParameterUnit_Rate;
    CFStringRef v10 = @"playback rate";
  }
  buffer->cfNameString = v10;
  buffer->AudioUnitParameterOptions flags = -939524096;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v9;
  *(void *)&buffer->minCFNumberRef Value = v6;
  buffer->defaultCFNumberRef Value = v8;
  buffer->flags += v7;
  return result;
}

uint64_t AUVarispeed::Render(AUVarispeed *this, unsigned int *a2, AudioTimeStamp *a3, uint64_t a4)
{
  long long v69 = (char *)this + 1088;
  __int16 v70 = 0;
  uint64_t v8 = 0;
  HIBYTE(v70) = (*(uint64_t (**)(void))(*((void *)this + 136) + 32))();
  if ((v70 & 0x100) != 0)
  {
    if (*((void *)this + 66))
    {
      uint64_t v8 = (*(uint64_t (**)(AUVarispeed *, unsigned int *, AudioTimeStamp *, uint64_t))(*(void *)this + 584))(this, a2, a3, a4);
    }
    else
    {
      if (*((unsigned char *)this + 1176)) {
        *((unsigned char *)this + 1176) = 0;
      }
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
      uint64_t v11 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
      double v12 = *(double *)(Element + 80);
      double v13 = *(double *)(v11 + 80);
      uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
      float Parameter = ausdk::AUElement::GetParameter(v14, 0);
      if (Parameter < 0.03125) {
        float Parameter = 0.03125;
      }
      if (Parameter <= 32.0) {
        float v16 = Parameter;
      }
      else {
        float v16 = 32.0;
      }
      int v66 = *(_DWORD *)(v11 + 108);
      if (!*((unsigned char *)this + 1020)) {
        goto LABEL_28;
      }
      if (*((unsigned char *)this + 1060))
      {
        *((unsigned char *)this + 1060) = 0;
        *((_WORD *)this + 476) = 1;
        int v17 = (int)(AUVarispeed::GetInternalLatency(this) * v13 + 0.5);
        int v18 = *((_DWORD *)this + 84);
        long long v19 = *(_OWORD *)&a3->mRateScalar;
        v67[0] = *(_OWORD *)&a3->mSampleTime;
        v67[1] = v19;
        long long v20 = *(_OWORD *)&a3->mSMPTETime.mHours;
        v67[2] = *(_OWORD *)&a3->mSMPTETime.mSubframes;
        long long v68 = v20;
        *(double *)float v67 = *(double *)v67 - (double)v17;
        DWORD2(v68) = 1;
        if (v17 >= 1)
        {
          do
          {
            if (v17 >= v18) {
              uint64_t v21 = v18;
            }
            else {
              uint64_t v21 = v17;
            }
            (*(void (**)(AUVarispeed *, unsigned int *, _OWORD *, uint64_t))(*(void *)this + 208))(this, a2, v67, v21);
            *(double *)float v67 = *(double *)v67 + (double)(int)v21;
            BOOL v22 = __OFSUB__(v17, v21);
            v17 -= v21;
          }
          while (!((v17 < 0) ^ v22 | (v17 == 0)));
        }
      }
      uint64_t v8 = (*a2 & 0x60) != 0 ? 128 : 4294956448;
      if ((*a2 & 0x60) != 0 && (*a2 & 0x20) == 0)
      {
LABEL_28:
        (*(void (**)(void))(***((void ***)this + 80) + 64))();
        if (v66 == 2)
        {
          (*(void (**)(void, void *(*)(float *, float *, unsigned int, _DWORD *), AUVarispeed *))(***((void ***)this + 80) + 72))(**((void **)this + 80), InputCallback2, this);
          int v63 = 1;
        }
        else
        {
          (*(void (**)(void, void, AUVarispeed *))(***((void ***)this + 80) + 72))(**((void **)this + 80), 0, this);
          int v63 = v66;
        }
        uint64_t v24 = *((void *)this + 80);
        if (*((void *)this + 81) != v24)
        {
          unint64_t v25 = 0;
          do
          {
            (*(void (**)(void, double))(**(void **)(v24 + 8 * v25) + 120))(*(void *)(v24 + 8 * v25), a3->mSampleTime);
            ++v25;
            uint64_t v24 = *((void *)this + 80);
          }
          while (v25 < (*((void *)this + 81) - v24) >> 3);
        }
        float v61 = a3;
        double v26 = v16;
        int v27 = *((_DWORD *)this + 84);
        double v28 = (double)a4;
        if (*((_DWORD *)this + 262)) {
          double v29 = 1.0;
        }
        else {
          double v29 = 1.0 / v16;
        }
        AUTimestampGenerator::State::AddOutputTime((uint64_t)this + 736, (uint64_t)this + 736, (long long *)a3, (double)a4, v13, v29);
        v30.n128_u64[0] = 0;
        AUTimestampGenerator::State::GenerateInputTime((__n128 *)this + 46, 0, v30, v12);
        long long v32 = *v31;
        long long v33 = v31[1];
        long long v34 = v31[3];
        *((_OWORD *)this + 44) = v31[2];
        *((_OWORD *)this + 45) = v34;
        *((_OWORD *)this + 42) = v32;
        *((_OWORD *)this + 43) = v33;
        *((void *)this + 125) = 0;
        double v35 = (*(double (**)(void))(***((void ***)this + 80) + 112))(**((void **)this + 80));
        if ((int)a4 >= 1)
        {
          double v36 = v12 / v13 * v26;
          int v62 = (int)((double)v27 / v36);
          int v65 = 0;
          do
          {
            int v64 = a4;
            if ((int)a4 >= v62) {
              a4 = v62;
            }
            else {
              a4 = a4;
            }
            if (v63 >= 1)
            {
              uint64_t v37 = 0;
              uint64_t v38 = 0;
              uint64_t v39 = 16;
              do
              {
                uint64_t v40 = *(void *)(*((void *)this + 80) + 8 * v38);
                (*(void (**)(uint64_t, double))(*(void *)v40 + 56))(v40, v36);
                uint64_t v41 = *(void *)(*((void *)this + 80) + 8 * v38);
                (*(void (**)(uint64_t, BOOL))(*(void *)v41 + 80))(v41, *((_DWORD *)this + 262) != 0);
                if (!v37)
                {
                  uint64_t v42 = (const AudioTimeStamp *)(*(uint64_t (**)(void, uint64_t))(***((void ***)this + 80)
                                                                                           + 136))(**((void **)this + 80), a4);
                  unsigned int v43 = v42;
                  LODWORD(v67[0]) = 0;
                  uint64_t v8 = AUVarispeed::PullInputAndUpdate(this, (unsigned int *)v67, (const AudioTimeStamp *)((char *)this + 672), v42);
                  if (v8) {
                    goto LABEL_4;
                  }
                  uint64_t v44 = __udivti3();
                  *((double *)this + 84) = *((double *)this + 84) + (double)v43;
                  *((double *)this + 125) = *((double *)this + 125) + (double)v43;
                  *((void *)this + 85) += v44;
                }
                *((_DWORD *)this + 166) = v38;
                *((_DWORD *)this + 252) = 0;
                int v45 = *(_DWORD *)(v11 + 92);
                uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
                if ((v45 & 0x20) != 0) {
                  uint64_t v47 = *(void *)(BufferList + v39);
                }
                else {
                  uint64_t v47 = *(void *)(BufferList + 16) + v37;
                }
                if (v66 == 2)
                {
                  uint64_t v48 = *(void *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144)) + 16);
                  int v49 = *(_DWORD *)(v11 + 92);
                  uint64_t v50 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
                  if ((v49 & 0x20) != 0) {
                    uint64_t v51 = *(void *)(v50 + 32);
                  }
                  else {
                    uint64_t v51 = *(void *)(v50 + 16) + 4;
                  }
                  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(***((void ***)this + 80) + 48))(**((void **)this + 80), v48 + 4 * v65, v51 + 4 * v65, a4, 1);
                }
                else
                {
                  uint64_t v52 = *(void *)(*((void *)this + 80) + 8 * v38);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v52 + 40))(v52, v47 + 4 * v65, a4, 1);
                }
                ++v38;
                v39 += 16;
                v37 += 4;
              }
              while (v63 != v38);
            }
            v65 += a4;
            BOOL v22 = __OFSUB__(v64, a4);
            LODWORD(a4) = v64 - a4;
          }
          while (!(((int)a4 < 0) ^ v22 | (a4 == 0)));
        }
        *((double *)this + 116) = *((double *)this + 92) + (double)*((double *)this + 125);
        if (*((unsigned char *)this + 1020))
        {
          if (v61->mSampleTime + v28 >= (double)*((unint64_t *)this + 129))
          {
            *a2 |= 0x80u;
            double v53 = (unsigned int *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
            uint64_t v54 = *v53;
            if (v54)
            {
              int v55 = 4 * (int)((double)*((unint64_t *)this + 129) - v61->mSampleTime);
              long double v56 = (int *)(v53 + 3);
              do
              {
                *long double v56 = v55;
                v56 += 4;
                --v54;
              }
              while (v54);
            }
          }
        }
        (*(void (**)(void))(***((void ***)this + 80) + 112))(**((void **)this + 80));
        uint64_t v58 = (void (*)(void, AudioTimeStamp *, double, double))*((void *)this + 134);
        if (v58)
        {
          double v59 = *((double *)this + 133);
          if (v35 >= v59) {
            double v60 = v35;
          }
          else {
            double v60 = *((double *)this + 133);
          }
          if (v57 < v59) {
            double v57 = *((double *)this + 133);
          }
          v58(*((void *)this + 135), v61, v60, v57 - v60);
        }
        uint64_t v8 = 0;
      }
    }
  }
LABEL_4:
  CADeprecated::CAMutex::Tryer::~Tryer((CADeprecated::CAMutex::Tryer *)&v69);
  return v8;
}

void sub_21BAA24E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t AUVarispeed::CanScheduleParameters(AUVarispeed *this)
{
  return 0;
}

uint64_t AUVarispeed::SetParameter(AUVarispeed *this, int a2, int a3, float a4)
{
  if (a3) {
    return 4294956430;
  }
  if (a2)
  {
    if (a2 != 1) {
      return 4294956418;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, 1u, a4, 0);
    float v8 = exp2(a4 / 1200.0);
    AudioUnitParameterUnit v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    unsigned int v10 = 0;
  }
  else
  {
    uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v11, 0, a4, 0);
    float v8 = log2f(a4) * 1200.0;
    AudioUnitParameterUnit v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
    unsigned int v10 = 1;
  }
  ausdk::AUElement::SetParameter(v9, v10, v8, 0);
  if (*((unsigned char *)this + 17)) {
    AUVarispeed::UpdateVarispeedRate(this);
  }
  return 0;
}

void AUVarispeed::UpdateVarispeedRate(AUVarispeed *this)
{
  uint64_t v2 = (AUVarispeed *)((char *)this + 32);
  unint64_t v3 = (AUVarispeed *)((char *)this + 128);
  unsigned int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 108);
  if (v4 == 2) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  double v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 80);
  double v7 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  if (Parameter < 0.03125) {
    float Parameter = 0.03125;
  }
  if (Parameter > 32.0) {
    float Parameter = 32.0;
  }
  if (v5)
  {
    uint64_t v10 = 0;
    double v11 = v6 / v7 * Parameter;
    do
    {
      (*(void (**)(void, double))(**(void **)(*((void *)this + 80) + v10) + 56))(*(void *)(*((void *)this + 80) + v10), v11);
      v10 += 8;
    }
    while (8 * v5 != v10);
  }
}

uint64_t AUVarispeed::SetProperty(AUVarispeed *this, int a2, int a3, uint64_t a4, double *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  v17[2] = v9;
  v17[3] = v8;
  v17[8] = v6;
  v17[9] = v7;
  uint64_t result = 4294956417;
  if (a2 <= 48)
  {
    if (a2 != 21)
    {
      if (a2 != 26) {
        return result;
      }
      int v14 = *(_DWORD *)a5;
      if (*(_DWORD *)a5 > 0x7Fu) {
        return 4294967246;
      }
      int v15 = *((_DWORD *)this + 263);
      *((_DWORD *)this + 263) = v14;
      if (v15 != v14)
      {
        AUVarispeed::CreateResamplers(this);
        (*(void (**)(AUVarispeed *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 26, 0, a4);
      }
      return 0;
    }
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 262) = *(_DWORD *)a5;
      return result;
    }
    return 4294956445;
  }
  switch(a2)
  {
    case 49:
      if (a6 >= 0x10)
      {
        uint64_t result = 0;
        *((_OWORD *)this + 67) = *(_OWORD *)a5;
        return result;
      }
      return 4294956445;
    case 3803:
      v17[0] = v17;
      v17[1] = (char *)this + 528;
      if (*((unsigned char *)this + 17))
      {
        ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
        ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
      }
      RampList::Writer::AddRamps();
      break;
    case 3804:
      double v12 = *a5;
      if (a6 == 16)
      {
        double v13 = *a5;
        double v12 = a5[1];
      }
      else
      {
        double v13 = 0.0;
        if (!*((unsigned char *)this + 952)) {
          double v13 = *a5;
        }
      }
      RampList::Writer::SetOrigin((AUVarispeed *)((char *)this + 608), v13, v12);
      break;
    default:
      return result;
  }
  return 0;
}

void AUVarispeed::CreateResamplers(AUVarispeed *this)
{
  long long v19 = (char *)this + 1088;
  char v20 = (*(uint64_t (**)(void))(*((void *)this + 136) + 16))();
  uint64_t v2 = (void *)((char *)this + 640);
  std::vector<std::unique_ptr<AT::Resampler>>::__clear[abi:ne180100]((void *)this + 80);
  unsigned int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 108);
  if (v3 == 2) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = v3;
  }
  uint64_t v5 = *((void *)this + 80);
  if (v4 > (*((void *)this + 82) - v5) >> 3)
  {
    uint64_t v6 = *((void *)this + 81);
    unint64_t v25 = (char *)this + 656;
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v4);
    BOOL v22 = &v21[v6 - v5];
    double v23 = v22;
    uint64_t v24 = &v21[8 * v7];
    std::vector<std::unique_ptr<AT::Resampler>>::__swap_out_circular_buffer((void *)this + 80, &v21);
    std::__split_buffer<std::unique_ptr<AT::Resampler>>::~__split_buffer((uint64_t)&v21);
  }
  if (*((void *)this + 66)) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 2;
  }
  for (; v4; LODWORD(v4) = v4 - 1)
  {
    AT::Resampler::create((AT::Resampler *)0x6E6F726D, 1.0, 1.0, 0.0);
    (*(void (**)(uint64_t, void *(*)(float *, unsigned int, unsigned int *), AUVarispeed *))(*(void *)v18 + 64))(v18, InputCallback, this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 96))(v18, v8);
    uint64_t v9 = (void *)*((void *)this + 81);
    unint64_t v10 = *((void *)this + 82);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v12 = ((uint64_t)v9 - *v2) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v10 - *v2;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v25 = (char *)this + 656;
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      int v17 = (char *)(v15 + 8 * v12);
      uint64_t v21 = (char *)v15;
      BOOL v22 = v17;
      uint64_t v24 = (char *)(v15 + 8 * v16);
      *(void *)int v17 = v18;
      double v23 = v17 + 8;
      std::vector<std::unique_ptr<AT::Resampler>>::__swap_out_circular_buffer((void *)this + 80, &v21);
      double v11 = (void *)*((void *)this + 81);
      std::__split_buffer<std::unique_ptr<AT::Resampler>>::~__split_buffer((uint64_t)&v21);
    }
    else
    {
      *uint64_t v9 = v18;
      double v11 = v9 + 1;
      *((void *)this + 81) = v11;
    }
    *((void *)this + 81) = v11;
    uint64_t v18 = 0;
  }
  if (*((_DWORD *)this + 264) != *((_DWORD *)this + 263))
  {
    MEMORY[0x21D4977E0]();
    if ((*((_DWORD *)this + 264) & 0x80000000) == 0) {
      MEMORY[0x21D4977D0]();
    }
  }
  *((_DWORD *)this + 264) = *((_DWORD *)this + 263);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v19);
}

void sub_21BAA2BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t AUVarispeed::GetProperty(AUVarispeed *this, int a2, int a3, unsigned int a4, int *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v6 = a5;
  uint64_t result = 4294956417;
  if (a2 <= 56)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 262);
    }
    else
    {
      if (a2 != 26)
      {
        if (a2 == 49)
        {
          uint64_t result = 0;
          *(_OWORD *)a5 = *((_OWORD *)this + 67);
        }
        return result;
      }
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 263);
    }
    *a5 = v9;
    return result;
  }
  if (a2 == 57)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 1);
    do
    {
      int v12 = overviewParameterIDs[v10];
      *(void *)uint64_t v6 = v11;
      v6[3] = 0;
      void v6[4] = 0;
      v6[2] = v12;
      ++v10;
      v6 += 6;
    }
    while (v10 != 2);
    return 0;
  }
  if (a2 != 3802)
  {
    if (a2 != 3803) {
      return result;
    }
    uint64_t v8 = (char *)this + 528;
    *(void *)&long long v36 = &v36;
    *((void *)&v36 + 1) = (char *)this + 528;
    if (*((unsigned char *)this + 17))
    {
      ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
      ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
      uint64_t v8 = (char *)*((void *)&v36 + 1);
    }
    LODWORD(v32) = *((void *)v8 + 3);
    RampList::Writer::GetRamps();
    return 0;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  int v13 = *a5;
  if (*((void *)this + 69))
  {
    AT::Resampler::MockResampler::MockResampler();
    double v14 = *((double *)this + 117);
    if (v14 == 0.0) {
      double v14 = *((double *)this + 72);
    }
    int v15 = *((_DWORD *)this + 84);
    v41[0] = v41;
    v41[1] = (char *)this + 528;
    if (v13 < 1)
    {
      int v17 = 0;
    }
    else
    {
      char v16 = 0;
      int v17 = 0;
      BOOL v18 = *((unsigned char *)this + 600) != 0;
      double v19 = *((double *)this + 73);
      double v20 = *((double *)this + 74);
      double v21 = (double)v15;
      do
      {
        double v40 = (double)v13;
        RateRamp::RateRamp((RateRamp *)&v36);
        if (RampList::Reader::Segment())
        {
          if (!(v16 & 1 | !v18))
          {
            BOOL v18 = 0;
            double v20 = *(double *)&v37;
            double v19 = *(double *)&v38;
          }
        }
        else
        {
          uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
          float Parameter = ausdk::AUElement::GetParameter(Element, 0);
          if (Parameter < 0.03125) {
            float Parameter = 0.03125;
          }
          if (Parameter > 32.0) {
            float Parameter = 32.0;
          }
          double v24 = Parameter;
          double v25 = v40 * v24;
          if (v40 * v24 > v21) {
            double v25 = v21;
          }
          RateRamp::RateRamp((RateRamp *)&v32, v24, v24, *((double *)this + 116), *((double *)this + 116) + v25, v14);
          long long v36 = v32;
          long long v37 = v33;
          long long v38 = v34;
          uint64_t v39 = v35;
        }
        long long v32 = v36;
        long long v33 = v37;
        long long v34 = v38;
        uint64_t v35 = v39;
        RateRamp::OffsetTimes((RateRamp *)&v32, -v20, -v19);
        RateRamp::OutputDuration((RateRamp *)&v32);
        double v27 = v26;
        AT::Resampler::MockResampler::SetRamp();
        int v28 = vcvtpd_s64_f64(v27);
        int NumberOfSourceFrames = AT::Resampler::MockResampler::GetNumberOfSourceFrames((AT::Resampler::MockResampler *)v42);
        AT::Resampler::MockResampler::Process((AT::Resampler::MockResampler *)v42);
        v17 += NumberOfSourceFrames;
        double v14 = v14 + (double)v28;
        char v16 = 1;
        BOOL v30 = __OFSUB__(v13, v28);
        v13 -= v28;
      }
      while (!((v13 < 0) ^ v30 | (v13 == 0)));
    }
    AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)v42);
    uint64_t result = 0;
    v6[1] = v17;
  }
  else
  {
    int v31 = AUVarispeed::UpstreamPullSize(this, *a5);
    uint64_t result = 0;
    v6[1] = v31;
  }
  return result;
}

void sub_21BAA2F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t AUVarispeed::UpstreamPullSize(AUVarispeed *this, int a2)
{
  AT::Resampler::MockResampler::MockResampler();
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
  double v6 = *(double *)(Element + 80);
  double v7 = *(double *)(v5 + 80);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUVarispeed *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(v8, 0);
  if (Parameter < 0.03125) {
    float Parameter = 0.03125;
  }
  if (Parameter <= 32.0) {
    float v10 = Parameter;
  }
  else {
    float v10 = 32.0;
  }
  if (*((unsigned char *)this + 1020)
    && *((unsigned char *)this + 1060)
    && (int v11 = (int)(AUVarispeed::GetInternalLatency(this) * v7 + 0.5), v11 >= 1))
  {
    LODWORD(v12) = 0;
    signed int v13 = *((_DWORD *)this + 84);
    do
    {
      if (v11 >= v13) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v11;
      }
      uint64_t v12 = AUVarispeed::UpstreamPullSize(this, v14) + v12;
      BOOL v15 = __OFSUB__(v11, v14);
      v11 -= v14;
    }
    while (!((v11 < 0) ^ v15 | (v11 == 0)));
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (a2 >= 1)
  {
    double v16 = v6 / v7 * v10;
    int v17 = (int)((double)*((int *)this + 84) / v16);
    do
    {
      if (a2 >= v17) {
        int v18 = v17;
      }
      else {
        int v18 = a2;
      }
      AT::Resampler::MockResampler::SetVarispeedRate((AT::Resampler::MockResampler *)v21, v16);
      AT::Resampler::MockResampler::SetIsBypassed((AT::Resampler::MockResampler *)v21);
      int NumberOfSourceFrames = AT::Resampler::MockResampler::GetNumberOfSourceFrames((AT::Resampler::MockResampler *)v21);
      AT::Resampler::MockResampler::Process((AT::Resampler::MockResampler *)v21);
      uint64_t v12 = (NumberOfSourceFrames + v12);
      BOOL v15 = __OFSUB__(a2, v18);
      a2 -= v18;
    }
    while (!((a2 < 0) ^ v15 | (a2 == 0)));
  }
  AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)v21);
  return v12;
}

void sub_21BAA30FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)va);
  _Unwind_Resume(a1);
}

uint64_t AUVarispeed::GetPropertyInfo(AUVarispeed *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 56)
  {
    if (a2 == 21 || a2 == 26)
    {
      uint64_t result = 0;
      int v8 = 4;
      goto LABEL_18;
    }
    if (a2 != 49) {
      return result;
    }
LABEL_14:
    uint64_t result = 0;
    int v8 = 16;
LABEL_18:
    *a5 = v8;
    *a6 = 1;
    return result;
  }
  if (a2 > 3802)
  {
    if (a2 == 3803)
    {
      uint64_t result = 0;
      int v8 = 48 * *((_DWORD *)this + 138);
      goto LABEL_18;
    }
    if (a2 != 3804) {
      return result;
    }
    goto LABEL_14;
  }
  if (a2 == 57)
  {
    uint64_t result = 0;
    *a6 = 0;
    *a5 = 48;
  }
  else if (a2 == 3802)
  {
    uint64_t result = 0;
    *a5 = 8;
    *a6 = 0;
  }
  return result;
}

uint64_t AUVarispeed::Reset(AUVarispeed *this)
{
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((unsigned char *)this + 600) = 1;
  RampList::Writer::clear((AUVarispeed *)((char *)this + 608));
  return 0;
}

double AUVarispeed::ResetCommon(AUVarispeed *this)
{
  uint64_t v2 = *((void *)this + 80);
  if (*((void *)this + 81) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 88))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *((void *)this + 80);
    }
    while (v3 < (*((void *)this + 81) - v2) >> 3);
  }
  double result = 0.0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 122) = 0x3FF0000000000000;
  *((unsigned char *)this + 992) = 1;
  *((unsigned char *)this + 1016) = 1;
  *((unsigned char *)this + 1060) = 1;
  *((void *)this + 133) = 0xBFF0000000000000;
  *((unsigned char *)this + 1176) = 1;
  return result;
}

uint64_t AUVarispeed::Cleanup(AUVarispeed *this)
{
  std::vector<std::unique_ptr<AT::Resampler>>::__clear[abi:ne180100]((void *)this + 80);
  if ((*((_DWORD *)this + 264) & 0x80000000) == 0)
  {
    MEMORY[0x21D4977D0]();
    *((_DWORD *)this + 264) = -1;
  }
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 80);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 80);
  v5[0] = v5;
  v5[1] = (char *)this + 528;
  return RampList::Writer::ScaleRates((RampList::Writer *)v5, v3 / v2);
}

uint64_t AUVarispeed::Initialize(AUVarispeed *this)
{
  double v2 = (AUVarispeed *)((char *)this + 128);
  int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 108) != v3) {
    return 4294956428;
  }
  AUVarispeed::CreateResamplers(this);
  AUVarispeed::ResetCommon(this);
  double v4 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 80);
  double v5 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  v7[0] = v7;
  v7[1] = (char *)this + 528;
  RampList::Writer::ScaleRates((RampList::Writer *)v7, v4 / v5);
  AUVarispeed::UpdateVarispeedRate(this);
  return 0;
}

void AUVarispeed::~AUVarispeed(AUVarispeed *this)
{
  *(void *)this = &unk_26CBA7D00;
  MEMORY[0x21D497390]((char *)this + 1088);
  double v2 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<AT::Resampler>>::__destroy_vector::operator()[abi:ne180100](&v2);
  RampList::~RampList((AUVarispeed *)((char *)this + 528));
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBA7D00;
  MEMORY[0x21D497390]((char *)this + 1088);
  double v2 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<AT::Resampler>>::__destroy_vector::operator()[abi:ne180100](&v2);
  RampList::~RampList((AUVarispeed *)((char *)this + 528));

  ausdk::AUBase::~AUBase(this);
}

void *AUVarispeedFactory()
{
  double result = malloc_type_malloc(0x4E0uLL, 0xB0CA1167uLL);
  *double result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUVarispeed>::Construct;
  result[6] = 0;
  result[7] = 0;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUVarispeed>::Destruct;
  return result;
}

uint64_t virtual thunk to'ParameterControlSource::GetComponentID(ParameterControlSource *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 32) + 152);
}

void virtual thunk to'ParameterControlSource::~ParameterControlSource(void *a1)
{
  ParameterControlSource::~ParameterControlSource((ParameterControlSource *)((char *)a1 + *(void *)(*a1 - 24)));

  operator delete(v1);
}

{
  ParameterControlSource::~ParameterControlSource((ParameterControlSource *)((char *)a1 + *(void *)(*a1 - 24)));
}

void ParameterControlSource::~ParameterControlSource(ParameterControlSource *this)
{
  *(void *)this = &unk_26CBA4DC8;
  *((void *)this + 21) = &unk_26CBA4E58;
}

{
  void *v1;
  uint64_t vars8;

  ParameterControlSource::~ParameterControlSource(this);

  operator delete(v1);
}

uint64_t ParameterControlSource::GetComponentID(ParameterControlSource *this)
{
  return *((unsigned int *)this + 38);
}

void ParameterControlSource::ParameterControlSource(ParameterControlSource *this, int a2, float a3, float a4, float a5)
{
  *((unsigned char *)this + 8) = 1;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(void *)this = &unk_26CBAE5A8;
  *((void *)this + 21) = &unk_26CBAE640;
  *((_DWORD *)this + 38) = a2;
  *((float *)this + 39) = a3;
  *((float *)this + 40) = a4;
  *((float *)this + 41) = a5;
}

uint64_t AUIOClient_BypassIO(mach_port_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v12 = *MEMORY[0x263EF80C8];
  unsigned int v13 = a2;
  int v14 = a3;
  int v15 = a4;
  mach_port_t reply_port = mig_get_reply_port();
  *(void *)&v11.msgh_bits = 5395;
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = reply_port;
  *(void *)&v11.msgh_voucher_port = 0x157CC00000000;
  if (MEMORY[0x263EF8B00])
  {
    voucher_mach_msg_set(&v11);
    mach_port_t reply_port = v11.msgh_local_port;
  }
  uint64_t v6 = mach_msg(&v11, 275, 0x2Cu, 0x2Cu, reply_port, *MEMORY[0x263EFC0D0], 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!v6)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (v11.msgh_id == 88112)
      {
        uint64_t v9 = 4294966996;
        if ((v11.msgh_bits & 0x80000000) == 0 && *(void *)&v11.msgh_size == 36)
        {
          uint64_t v9 = v13;
          if (!v13) {
            return 0;
          }
        }
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
LABEL_21:
      mach_msg_destroy(&v11);
      return v9;
    }
    mig_dealloc_reply_port(v11.msgh_local_port);
  }
  else
  {
    mig_put_reply_port(v11.msgh_local_port);
  }
  uint64_t v9 = 268435460;
  if (v7 == 268435460)
  {
    if ((v11.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x263EF8960], v11.msgh_local_port);
    }
    goto LABEL_21;
  }
  return v7;
}

void _XSessionDeactivated(_DWORD *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    return;
  }
  int v3 = a1[8];
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v11, v3);
  if (v14)
  {
    uint64_t v4 = *(void *)(v14 + 16);
    uint64_t v5 = *(void *)(v4 + 472);
    if (v5) {
      (*(void (**)(void))(*(void *)v5 + 16))(*(void *)(v4 + 472));
    }
    *(unsigned char *)(v4 + 1300) = 1;
    if (kRIOClientSubsystem)
    {
      uint64_t v6 = *(NSObject **)kRIOClientSubsystem;
      if (!*(void *)kRIOClientSubsystem)
      {
LABEL_13:
        uint64_t v7 = *(NSObject **)(gRIOServer + 192);
        if (v7) {
          dispatch_retain(*(dispatch_object_t *)(gRIOServer + 192));
        }
        *(void *)int v8 = MEMORY[0x263EF8330];
        *(void *)&v8[8] = 0x40000000;
        *(void *)&v8[16] = __AURIOCallbackReceiver_SessionDeactivated_block_invoke;
        uint64_t v9 = &__block_descriptor_tmp_22;
        int v10 = v3;
        dispatch_async(v7, v8);
        if (v7) {
          dispatch_release(v7);
        }
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v6 = &_os_log_internal;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int v8 = 136315394;
      *(void *)&v8[4] = "AURemoteIO.cpp";
      *(_WORD *)&v8[12] = 1024;
      *(_DWORD *)&v8[14] = 2399;
      _os_log_impl(&dword_21B9BB000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d SessionInterrupted, redispatching", v8, 0x12u);
    }
    goto LABEL_13;
  }
LABEL_19:
  if (v13)
  {
    if (v12) {
      atomic_fetch_add(v12, 0xFFFFFFFF);
    }
  }
  *(_DWORD *)(a2 + 32) = 0;
}

void sub_21BAA3AB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, uint64_t a16, uint64_t a17, atomic_uint *a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a19 && a18) {
    atomic_fetch_add(a18, 0xFFFFFFFF);
  }
  __cxa_begin_catch(a1);
  if (kRIOClientSubsystem)
  {
    double v19 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_11;
    }
  }
  else
  {
    double v19 = &_os_log_internal;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "AURemoteIO.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 2422;
    _os_log_impl(&dword_21B9BB000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception caught from AURIOCallbackReceiver_SessionDeactivated callback", (uint8_t *)&buf, 0x12u);
  }
LABEL_11:
  __cxa_end_catch();
  JUMPOUT(0x21BAA3A7CLL);
}

uint64_t _XMutedSpeechActivityEvent(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(result + 36);
    double result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)&v6, *(_DWORD *)(result + 32));
    if (v9)
    {
      uint64_t v4 = *(void *)(v9 + 16);
      uint64_t v5 = *(void *)(v4 + 472);
      if (v5) {
        (*(void (**)(void))(*(void *)v5 + 16))(*(void *)(v4 + 472));
      }
      double result = *(void *)(v4 + 1288);
      if (result) {
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v3);
      }
      if (v5) {
        double result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
      }
    }
    if (v8)
    {
      if (v7) {
        atomic_fetch_add(v7, 0xFFFFFFFF);
      }
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

void sub_21BAA3C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  if (a13 && a12) {
    atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF);
  }
  __cxa_begin_catch(exception_object);
  if (kRIOClientSubsystem)
  {
    uint64_t v15 = *(NSObject **)kRIOClientSubsystem;
    if (!*(void *)kRIOClientSubsystem) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v15 = &_os_log_internal;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LODWORD(a9) = 136315394;
    *(void *)((char *)&a9 + 4) = "AURemoteIO.cpp";
    WORD6(a9) = 1024;
    *(_DWORD *)((char *)&a9 + 14) = 2384;
    _os_log_impl(&dword_21B9BB000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception caught from redispatching the MutedSpeechActivityEvent", (uint8_t *)&a9, 0x12u);
  }
LABEL_13:
  __cxa_end_catch();
  JUMPOUT(0x21BAA3C44);
}

void _XIOFormatsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!kRIOClientSubsystem)
  {
    uint64_t v4 = &_os_log_internal;
LABEL_8:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)&void v6[4] = "AURemoteIO.cpp";
      *(_WORD *)&v6[12] = 1024;
      *(_DWORD *)&v6[14] = 2356;
      _os_log_impl(&dword_21B9BB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IOFormatsChanged, redispatching", v6, 0x12u);
    }
    goto LABEL_10;
  }
  uint64_t v4 = *(NSObject **)kRIOClientSubsystem;
  if (*(void *)kRIOClientSubsystem) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v5 = *(NSObject **)(gRIOServer + 192);
  if (v5) {
    dispatch_retain(*(dispatch_object_t *)(gRIOServer + 192));
  }
  *(void *)uint64_t v6 = MEMORY[0x263EF8330];
  *(void *)&v6[8] = 0x40000000;
  *(void *)&unsigned char v6[16] = __AURIOCallbackReceiver_IOFormatsChanged_block_invoke;
  uint64_t v7 = &__block_descriptor_tmp_21;
  uint64_t v8 = v3;
  dispatch_async(v5, v6);
  if (v5) {
    dispatch_release(v5);
  }
  *(_DWORD *)(a2 + 32) = 0;
}

void _XTerminateOwnIOThread(_DWORD *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    int v5 = -304;
    goto LABEL_16;
  }
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v7, a1[8]);
  if (v10)
  {
    uint64_t v3 = *(void *)(v10 + 16);
    if (kRIOClientSubsystem)
    {
      uint64_t v4 = *(NSObject **)kRIOClientSubsystem;
      if (!*(void *)kRIOClientSubsystem)
      {
LABEL_11:
        *(unsigned char *)(v3 + 784) = 1;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v4 = &_os_log_internal;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      uint64_t v12 = "AURemoteIO.cpp";
      __int16 v13 = 1024;
      int v14 = 2341;
      _os_log_impl(&dword_21B9BB000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURIOCallbackReceiver_TerminateOwnIOThread", buf, 0x12u);
    }
    goto LABEL_11;
  }
LABEL_12:
  if (v9 && v8) {
    atomic_fetch_add(v8, 0xFFFFFFFF);
  }
  int v5 = 0;
LABEL_16:
  uint64_t v6 = (void *)MEMORY[0x263EF80C8];
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *v6;
}

void sub_21BAA4058(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21BAA4010);
  }
  _Unwind_Resume(a1);
}

uint64_t (*AURemoteIOCallbacks_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 89005) >= 0xFFFFFFFB) {
    return AURIOCallbackReceiver_AURemoteIOCallbacks_subsystem[5 * (v1 - 89000) + 5];
  }
  else {
    return 0;
  }
}

uint64_t AURemoteIOCallbacks_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 89005) >= 0xFFFFFFFB
    && (int v5 = (void (*)(void))AURIOCallbackReceiver_AURemoteIOCallbacks_subsystem[5 * (v4 - 89000) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void IPCAURegClient_SetProcessWakeState(int a1, int a2, int a3, _DWORD *a4)
{
  mach_msg_return_t v7;
  mach_msg_return_t v8;
  int v10;
  unsigned char rcv_name[44];

  memset(&rcv_name[16], 0, 28);
  *(_OWORD *)rcv_name = 0u;
  *(void *)&rcv_name[20] = *MEMORY[0x263EF80C8];
  *(_DWORD *)&rcv_name[28] = a2;
  *(_DWORD *)&rcv_name[32] = a3;
  mach_port_t reply_port = mig_get_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = reply_port;
  uint64_t v10 = 5395;
  *(void *)&rcv_name[12] = 0x15F9B00000000;
  if (MEMORY[0x263EF8B00])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v10);
    mach_port_t reply_port = *(_DWORD *)&rcv_name[8];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v10, 275, 0x28u, 0x30u, reply_port, *MEMORY[0x263EFC0D0], 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&rcv_name[16] == 90111
        && (v10 & 0x80000000) == 0
        && *(_DWORD *)rcv_name == 40
        && !*(_DWORD *)&rcv_name[4]
        && !*(_DWORD *)&rcv_name[28])
      {
        *a4 = *(_DWORD *)&rcv_name[32];
        return;
      }
      goto LABEL_19;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  else
  {
    mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  if (v8 != 268435460) {
    return;
  }
  if ((v10 & 0x1F00) == 0x1100) {
    mach_port_deallocate(*MEMORY[0x263EF8960], *(mach_port_name_t *)&rcv_name[8]);
  }
LABEL_19:
  mach_msg_destroy((mach_msg_header_t *)&v10);
}

uint64_t _XStopIOThread(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v4 = (const audit_token_t *)*(unsigned int *)(result + 32);
    long long v5 = *(_OWORD *)(result + 72);
    v6[0] = *(_OWORD *)(result + 56);
    v6[1] = v5;
    uint64_t result = IPCAUServer::FindAU((IPCAUServer *)v6, v4);
    if (result)
    {
      int v3 = 0;
      *(unsigned char *)(result + 56) = 1;
    }
    else
    {
      int v3 = -50;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XSysEx(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 60)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && (uint64_t v3 = *(unsigned int *)(a1 + 40), v3 == *(_DWORD *)(a1 + 56)))
    {
      if (*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        long long v5 = (const audit_token_t *)*(unsigned int *)(a1 + 52);
        uint64_t v6 = *(void *)(a1 + 28);
        long long v7 = *(_OWORD *)(a1 + 96);
        v8[0] = *(_OWORD *)(a1 + 80);
        v8[1] = v7;
        uint64_t result = IPCAUServer_SysEx((IPCAUServer *)v8, v5, v6, v3);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XDoControlMessages(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    int v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v7[0] = *(_OWORD *)(a1 + 56);
    v7[1] = v5;
    uint64_t AU = (AUServerInstanceBase *)IPCAUServer::FindAU((IPCAUServer *)v7, v4);
    if (AU) {
      uint64_t result = AUServerInstanceBase::DoControlMessages(AU);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XRender(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 100)
  {
    int v3 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_9;
  }
  if (*(_DWORD *)(result + 100) || *(_DWORD *)(result + 104) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x263EF80C8];
    goto LABEL_10;
  }
  long long v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
  uint64_t v6 = (_DWORD *)(result + 52);
  uint64_t v7 = *(unsigned int *)(result + 88);
  uint64_t v8 = *(unsigned int *)(result + 92);
  char v9 = (_opaque_pthread_t *)*(unsigned int *)(result + 96);
  uint64_t v10 = *(unsigned int *)(result + 28);
  long long v11 = *(_OWORD *)(result + 136);
  v14[0] = *(_OWORD *)(result + 120);
  v14[1] = v11;
  long long v12 = *(_OWORD *)(result + 72);
  v13[0] = *(_OWORD *)(result + 56);
  v13[1] = v12;
  uint64_t result = IPCAUServer_Render((IPCAUServer *)v14, v5, result + 52, (uint64_t)v13, v7, v8, v9, v10);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x263EF80C8];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 36) = *v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XConnectInput(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 84)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 84) || *(_DWORD *)(a1 + 88) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    uint64_t v5 = *(unsigned int *)(a1 + 36);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 120);
    v12[0] = *(_OWORD *)(a1 + 104);
    v12[1] = v7;
    long long v8 = *(_OWORD *)(a1 + 60);
    v10[0] = *(_OWORD *)(a1 + 44);
    v10[1] = v8;
    uint64_t v11 = *(void *)(a1 + 76);
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v12, v4);
    if (AU) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)AU + 120))(AU, v5, v6, v10);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XSetParameter(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 56)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    uint64_t v5 = *(unsigned int *)(a1 + 36);
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    uint64_t v7 = *(unsigned int *)(a1 + 44);
    float v8 = *(float *)(a1 + 48);
    uint64_t v9 = *(unsigned int *)(a1 + 52);
    long long v10 = *(_OWORD *)(a1 + 92);
    v12[0] = *(_OWORD *)(a1 + 76);
    v12[1] = v10;
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v12, v4);
    if (AU) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)AU + 96))(AU, v5, v6, v7, v9, v8);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XGetParameter(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x263EF80C8];
    goto LABEL_8;
  }
  uint64_t v5 = (const audit_token_t *)*(unsigned int *)(result + 32);
  uint64_t v6 = *(unsigned int *)(result + 36);
  uint64_t v7 = *(unsigned int *)(result + 40);
  uint64_t v8 = *(unsigned int *)(result + 44);
  long long v9 = *(_OWORD *)(result + 84);
  v10[0] = *(_OWORD *)(result + 68);
  v10[1] = v9;
  uint64_t result = IPCAUServer::FindAU((IPCAUServer *)v10, v5);
  if (!result)
  {
    int v3 = -50;
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 88))(result, v6, v7, v8, a2 + 36);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x263EF80C8];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(void *)(a2 + 24) = v4;
  return result;
}

void _XGetChangedProperties(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40) > 0x1Fu)
  {
    *(_DWORD *)(a2 + 52) = 256;
    *(_DWORD *)(a2 + 36) = 16777473;
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v14[0] = *(_OWORD *)(a1 + 56);
    v14[1] = v5;
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v14, v4);
    if (!AU)
    {
      int v11 = -50;
LABEL_19:
      *(_DWORD *)(a2 + 32) = v11;
      goto LABEL_8;
    }
    uint64_t v7 = AU;
    uint64_t v8 = *(void *)(a2 + 28);
    v17[0] = &unk_26CBADE10;
    v17[1] = 256;
    BOOL v18 = v8 != 0;
    uint64_t v19 = a2 + 56;
    uint64_t v20 = a2 + 52;
    uint64_t v21 = a2 + 28;
    BOOL v22 = &v15;
    *(_DWORD *)(a2 + 52) = 0;
    *(void *)(a2 + 28) = 0;
    int v15 = 0;
    CASerializer::CASerializer((CASerializer *)&theData, 0);
    int v23 = -1431655765 * ((*(void *)(v7 + 208) - *(void *)(v7 + 200)) >> 2);
    CASerializer::Write((CASerializer *)&theData, &v23);
    CASerializer::Write((CASerializer *)&theData, *(const void **)(v7 + 200));
    *(void *)(v7 + 208) = *(void *)(v7 + 200);
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      if (theData)
      {
        vm_size_t Length = CFDataGetLength(theData);
LABEL_17:
        int v11 = MIGVariableLengthRefs::Write((MIGVariableLengthRefs *)v17, BytePtr, Length);
        if (!v11)
        {
          BOOL v18 = 0;
          MEMORY[0x21D497450](&theData);
          MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v17);
          int v12 = v15;
          *(_DWORD *)(a2 + 40) = v15;
          *(void *)(a2 + 44) = *MEMORY[0x263EF80C8];
          uint64_t v13 = (*(_DWORD *)(a2 + 52) + 3) & 0xFFFFFFFC;
          *(_DWORD *)(a2 + 4) = v13 + 60;
          *(_DWORD *)(a2 + v13 + 56) = v12;
          *(_DWORD *)a2 |= 0x80000000;
          *(_DWORD *)(a2 + 24) = 1;
          return;
        }
        MEMORY[0x21D497450](&theData);
        MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v17);
        goto LABEL_19;
      }
    }
    else
    {
      BytePtr = 0;
    }
    vm_size_t Length = 0;
    goto LABEL_17;
  }
  int v3 = -309;
LABEL_7:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
}

void sub_21BAA4AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

uint64_t _XRemovePropertyListener(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    uint64_t v5 = *(unsigned int *)(a1 + 36);
    long long v6 = *(_OWORD *)(a1 + 76);
    v8[0] = *(_OWORD *)(a1 + 60);
    v8[1] = v6;
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v8, v4);
    if (AU) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)AU + 144))(AU, v5);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XAddPropertyListener(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    uint64_t v5 = *(unsigned int *)(a1 + 36);
    long long v6 = *(_OWORD *)(a1 + 76);
    v8[0] = *(_OWORD *)(a1 + 60);
    v8[1] = v6;
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v8, v4);
    if (AU) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)AU + 136))(AU, v5);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

uint64_t _XSetProperty(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v3 = -304;
  if (*(_DWORD *)(result + 24) == 1)
  {
    uint64_t v4 = *(unsigned int *)(result + 4);
    if (v4 >= 0x4C && v4 <= 0x14C)
    {
      if (*(unsigned char *)(result + 39) != 1) {
        goto LABEL_15;
      }
      unsigned int v5 = *(_DWORD *)(result + 68);
      if (v5 > 0x100)
      {
LABEL_2:
        int v3 = -304;
        goto LABEL_3;
      }
      int v3 = -304;
      if ((int)v4 - 76 >= v5)
      {
        unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
        if (v4 == v6 + 76)
        {
          int v7 = *(_DWORD *)(result + 40);
          if (v7 == *(_DWORD *)(result + v6 + 72))
          {
            uint64_t v8 = ((v4 + 3) & 0x1FFFFFFFCLL) + result;
            if (*(_DWORD *)v8 || *(_DWORD *)(v8 + 4) < 0x20u)
            {
              int v3 = -309;
            }
            else
            {
              long long v9 = (const audit_token_t *)*(unsigned int *)(result + 52);
              uint64_t v10 = *(unsigned int *)(result + 56);
              uint64_t v11 = *(unsigned int *)(result + 60);
              uint64_t v12 = *(unsigned int *)(result + 64);
              uint64_t v13 = *(const void **)(result + 28);
              long long v14 = *(_OWORD *)(v8 + 36);
              v15[0] = *(_OWORD *)(v8 + 20);
              v15[1] = v14;
              uint64_t result = IPCAUServer_SetProperty((IPCAUServer *)v15, v9, v10, v11, v12, (const void *)(result + 72), v5, v13, v7);
              int v3 = result;
            }
            goto LABEL_3;
          }
LABEL_15:
          int v3 = -300;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

void _XGetProperty(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  int v19 = 0;
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  *(_DWORD *)(a2 + 52) = 256;
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 36);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(a1 + 44);
  size_t v8 = *(unsigned int *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 88);
  v18[0] = *(_OWORD *)(a1 + 72);
  v18[1] = v9;
  uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v18, v4);
  if (AU)
  {
    uint64_t v11 = AU;
    uint64_t v12 = *(void *)(a2 + 28);
    v22[0] = &unk_26CBADE10;
    v22[1] = 256;
    BOOL v23 = v12 != 0;
    uint64_t v24 = a2 + 56;
    uint64_t v25 = a2 + 52;
    uint64_t v26 = a2 + 28;
    double v27 = &v19;
    *(_DWORD *)(a2 + 52) = 0;
    *(void *)(a2 + 28) = 0;
    int v19 = 0;
    uint64_t v13 = malloc_type_malloc(v8, 0x7C51E058uLL);
    long long v14 = v13;
    if (v8 && !v13)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v17 = std::bad_alloc::bad_alloc(exception);
    }
    int v21 = v8;
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, int *))(*(void *)v11 + 72))(v11, v5, v6, v7, v13, &v21);
    if (!v15) {
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v20, 0);
    }
    if (v14) {
      free(v14);
    }
    MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v22);
  }
  else
  {
    int v15 = -50;
  }
  *(_DWORD *)(a2 + 32) = v15;
LABEL_8:
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
}

void sub_21BAA5060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v22) {
    free(v22);
  }
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a22);
  _Unwind_Resume(a1);
}

uint64_t _XGetPropertyInfo(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x263EF80C8];
    goto LABEL_8;
  }
  uint64_t v5 = (const audit_token_t *)*(unsigned int *)(result + 32);
  uint64_t v6 = *(unsigned int *)(result + 36);
  uint64_t v7 = *(unsigned int *)(result + 40);
  uint64_t v8 = *(unsigned int *)(result + 44);
  long long v9 = *(_OWORD *)(result + 84);
  v10[0] = *(_OWORD *)(result + 68);
  v10[1] = v9;
  uint64_t result = IPCAUServer::FindAU((IPCAUServer *)v10, v5);
  if (!result)
  {
    int v3 = -50;
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 64))(result, v6, v7, v8, a2 + 36, a2 + 40);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x263EF80C8];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XReset(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    uint64_t result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) < 0x20u)
  {
    uint64_t result = 4294966987;
  }
  else
  {
    uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    uint64_t v5 = *(unsigned int *)(a1 + 36);
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 80);
    v9[0] = *(_OWORD *)(a1 + 64);
    v9[1] = v7;
    uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v9, v4);
    if (AU) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)AU + 56))(AU, v5, v6);
    }
    else {
      uint64_t result = 4294967246;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
  return result;
}

void _XUninitialize(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
    goto LABEL_7;
  }
  uint64_t v5 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 72);
  v11[0] = *(_OWORD *)(a1 + 56);
  v11[1] = v6;
  uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v11, v5);
  if (!AU)
  {
    int v3 = -50;
    goto LABEL_7;
  }
  uint64_t v8 = AU;
  if (!kLocalInterAppAudioScope)
  {
    long long v9 = &_os_log_internal;
LABEL_14:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315650;
      uint64_t v13 = "IPCAUServer.cpp";
      __int16 v14 = 1024;
      int v15 = 1083;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      _os_log_impl(&dword_21B9BB000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
  long long v9 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(void *)kLocalInterAppAudioScope) {
    goto LABEL_14;
  }
LABEL_16:
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  if (kLocalInterAppAudioScope)
  {
    uint64_t v10 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v10 = &_os_log_internal;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    uint64_t v13 = "IPCAUServer.cpp";
    __int16 v14 = 1024;
    int v15 = 1085;
    __int16 v16 = 1024;
    LODWORD(v17) = v3;
    _os_log_impl(&dword_21B9BB000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %d", buf, 0x18u);
  }
LABEL_7:
  uint64_t v4 = (void *)MEMORY[0x263EF80C8];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XInitialize(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    return;
  }
  *(_DWORD *)(a2 + 72) = 2;
  *(void *)(a2 + 32) = 0x13000000000000;
  *(void *)(a2 + 44) = 0x13000000000000;
  uint64_t v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 36);
  long long v6 = *(_OWORD *)(a1 + 76);
  v13[0] = *(_OWORD *)(a1 + 60);
  v13[1] = v6;
  uint64_t AU = IPCAUServer::FindAU((IPCAUServer *)v13, v4);
  if (!AU)
  {
    int v10 = -50;
LABEL_26:
    *(_DWORD *)(a2 + 32) = v10;
    goto LABEL_8;
  }
  uint64_t v8 = AU;
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 60) = 0;
  *(void *)(a2 + 68) = 0;
  if (kLocalInterAppAudioScope)
  {
    long long v9 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_17;
    }
  }
  else
  {
    long long v9 = &_os_log_internal;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioComponentDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "IPCAUServer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1067;
    *(_WORD *)&unsigned char buf[18] = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_21B9BB000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", buf, 0x1Cu);
  }
LABEL_17:
  *(void *)AudioComponentDescription buf = &unk_26CBB18F0;
  *(void *)&buf[8] = 0;
  *(_DWORD *)&buf[16] = 0;
  LOBYTE(v21) = 1;
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)v8 + 40))(v8, v5, a2 + 60, a2 + 64, a2 + 68, a2 + 76, a2 + 72, buf, a2 + 40);
  if (!v10) {
    *(_DWORD *)(a2 + 28) = *(_DWORD *)&buf[16];
  }
  if (kLocalInterAppAudioScope)
  {
    uint64_t v11 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(void *)kLocalInterAppAudioScope) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v11 = &_os_log_internal;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int16 v14 = 136315650;
    int v15 = "IPCAUServer.cpp";
    __int16 v16 = 1024;
    int v17 = 1073;
    __int16 v18 = 1024;
    int v19 = v10;
    _os_log_impl(&dword_21B9BB000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %d", v14, 0x18u);
  }
LABEL_25:
  if (v10) {
    goto LABEL_26;
  }
  *(void *)(a2 + 52) = *MEMORY[0x263EF80C8];
  int v12 = 40 * *(_DWORD *)(a2 + 72) + 76;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 24) = 2;
}

void _XClose(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40) >= 0x20u)
  {
    pid_t v5 = *(_DWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 72);
    long long v16 = *(_OWORD *)(a1 + 56);
    long long v17 = v6;
    pid_t pidp = 0;
    *(_OWORD *)atoken.val = v16;
    *(_OWORD *)&atoken.val[4] = v6;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    uint64_t v7 = CADeprecated::TSingleton<IPCAUServer>::instance();
    pid_t v8 = pidp;
    if (kLocalInterAppAudioScope)
    {
      long long v9 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(void *)kLocalInterAppAudioScope)
      {
LABEL_14:
        for (uint64_t i = *(void *)(v7 + 200); ; i += 8)
        {
          if (i == *(void *)(v7 + 208))
          {
            int v3 = -50;
            goto LABEL_7;
          }
          uint64_t v11 = *(_DWORD **)i;
          if (*(_DWORD *)(*(void *)i + 8) == v5) {
            break;
          }
        }
        if (v11[6] == v8)
        {
          (*(void (**)(uint64_t, _DWORD *))(*(void *)v7 + 24))(v7, v11);
          SearchableVector<AUServerInstanceBase *>::remove((char **)(v7 + 264), (uint64_t)v11);
          (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
        }
        else
        {
          if (kLocalInterAppAudioScope)
          {
            int v12 = *(NSObject **)kLocalInterAppAudioScope;
            if (!*(void *)kLocalInterAppAudioScope) {
              goto LABEL_27;
            }
          }
          else
          {
            int v12 = &_os_log_internal;
          }
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          int v3 = 0;
          if (!v13) {
            goto LABEL_7;
          }
          *(_DWORD *)AudioComponentDescription buf = 136315650;
          int v19 = "IPCAUServer.cpp";
          __int16 v20 = 1024;
          int v21 = 383;
          __int16 v22 = 1024;
          pid_t v23 = v8;
          _os_log_impl(&dword_21B9BB000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d attempt to close from non-owner pid %d", buf, 0x18u);
        }
LABEL_27:
        int v3 = 0;
        goto LABEL_7;
      }
    }
    else
    {
      long long v9 = &_os_log_internal;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioComponentDescription buf = 136315906;
      int v19 = "IPCAUServer.cpp";
      __int16 v20 = 1024;
      int v21 = 374;
      __int16 v22 = 1024;
      pid_t v23 = v5;
      __int16 v24 = 1024;
      pid_t v25 = v8;
      _os_log_impl(&dword_21B9BB000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::AUClose: remoteAU 0x%x from pid %d", buf, 0x1Eu);
    }
    goto LABEL_14;
  }
  int v3 = -309;
LABEL_7:
  uint64_t v4 = (void *)MEMORY[0x263EF80C8];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XOpen(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 108)
  {
    int v4 = -304;
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(unsigned char *)(result + 51) != 1
    || (int v3 = *(_DWORD *)(result + 52), v3 != *(_DWORD *)(result + 88)))
  {
    int v4 = -300;
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 108) || *(_DWORD *)(result + 112) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v4;
    uint64_t v5 = *MEMORY[0x263EF80C8];
    goto LABEL_12;
  }
  int v6 = *(_DWORD *)(result + 28);
  int v7 = *(_DWORD *)(result + 64);
  pid_t v8 = *(const void **)(result + 40);
  long long v9 = *(_OWORD *)(result + 144);
  v11[0] = *(_OWORD *)(result + 128);
  v11[1] = v9;
  AudioComponentDescription v10 = *(AudioComponentDescription *)(result + 68);
  uint64_t result = IPCAUServer_Open(v11, v6, v7, &v10, v8, v3, *(void *)(result + 92), *(void *)(result + 100), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v5 = *MEMORY[0x263EF80C8];
  if (!result)
  {
    *(void *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t (*IPCAudioUnit_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 90218) >= 0xFFFFFFEE) {
    return IPCAUServer_IPCAudioUnit_subsystem[5 * (v1 - 90200) + 5];
  }
  else {
    return 0;
  }
}

uint64_t IPCAudioUnit_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 90218) >= 0xFFFFFFEE
    && (uint64_t v5 = (void (*)(void))IPCAUServer_IPCAudioUnit_subsystem[5 * (v4 - 90200) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*((void *)this - 66) + 488))((char *)this - 528, a2, a3, a5);
}

uint64_t non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&_OWORD v6[2] = (float)a4;
  uint64_t v7 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, void, uint64_t, _DWORD *))(*((void *)this - 66) + 480))((char *)this - 528, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t ausdk::MusicDeviceBase::GetInstrumentCount(ausdk::MusicDeviceBase *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, uint64_t))(*(void *)this + 488))(this, a2, a3, a5);
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&_OWORD v6[2] = (float)a4;
  uint64_t v7 = 0;
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, void, uint64_t, _DWORD *))(*(void *)this + 480))(this, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t ausdk::MusicDeviceBase::SetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::MusicDeviceBase::GetProperty(ausdk::MusicDeviceBase *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 != 1000) {
    return 4294956417;
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  int v9 = 0;
  uint64_t result = (*(uint64_t (**)(ausdk::MusicDeviceBase *, int *))(*(void *)this + 592))(this, &v9);
  *a5 = v9;
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetPropertyInfo(ausdk::MusicDeviceBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 1000) {
    return 4294956417;
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t result = 0;
  *a5 = 4;
  *a6 = 0;
  return result;
}

uint64_t ausdk::AUIOElement::RemoveAudioChannelLayout(ausdk::AUIOElement *this)
{
  std::vector<AudioChannelLayout>::vector(&v5, 1);
  int v2 = v5;
  *uint64_t v5 = 0;
  *((_DWORD *)v2 + 2) = 0;
  int v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
    int v2 = v5;
  }
  *((void *)this + 15) = v2;
  *((_OWORD *)this + 8) = v6;
  return 0;
}

uint64_t ausdk::AUIOElement::GetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2, BOOL *a3)
{
  *a3 = 1;
  int v4 = (ausdk::AUChannelLayout *)*((void *)this + 15);
  if (!ausdk::AUChannelLayout::NumberChannels(v4, a2)) {
    return 0;
  }
  int v5 = *((_DWORD *)v4 + 2);
  uint64_t v6 = (20 * v5 + 12);
  if (a2 && 20 * v5 != -12) {
    memcpy(a2, v4, (20 * v5 + 12));
  }
  return v6;
}

void ausdk::AUIOElement::GetChannelLayoutTags(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void ausdk::AUElement::UseIndexedParameters(ausdk::AUElement *this, unsigned int a2)
{
  uint64_t v3 = a2;
  int v5 = (unsigned int *)*((void *)this + 6);
  int v4 = (unsigned int *)*((void *)this + 7);
  unint64_t v6 = v4 - v5;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      goto LABEL_18;
    }
    long long v16 = &v5[a2];
LABEL_17:
    *((void *)this + 7) = v16;
    goto LABEL_18;
  }
  unint64_t v7 = a2 - v6;
  uint64_t v8 = *((void *)this + 8);
  if (v7 <= (v8 - (uint64_t)v4) >> 2)
  {
    bzero(*((void **)this + 7), 4 * v7);
    long long v16 = &v4[v7];
    goto LABEL_17;
  }
  uint64_t v9 = v8 - (void)v5;
  if (v9 >> 1 > (unint64_t)a2) {
    uint64_t v3 = v9 >> 1;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v3;
  }
  if (v10 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v11 = (char *)operator new(4 * v10);
  int v12 = &v11[4 * v6];
  BOOL v13 = &v11[4 * v10];
  bzero(v12, 4 * v7);
  __int16 v14 = &v12[4 * v7];
  if (v4 != v5)
  {
    do
    {
      unsigned int v15 = atomic_load(--v4);
      *((_DWORD *)v12 - 1) = v15;
      v12 -= 4;
    }
    while (v4 != v5);
    int v4 = (unsigned int *)*((void *)this + 6);
  }
  *((void *)this + 6) = v12;
  *((void *)this + 7) = v14;
  *((void *)this + 8) = v13;
  if (v4) {
    operator delete(v4);
  }
LABEL_18:
  *((unsigned char *)this + 40) = 1;
}

void ausdk::AUElement::SetScheduledEvent(ausdk::AUElement *this, unsigned int a2, const AudioUnitParameterEvent *a3, unsigned int a4, unsigned int a5, char a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3->eventType == kParameterEvent_Immediate)
  {
    float value = a3->eventValues.immediate.value;
    ausdk::AUElement::SetParameter(this, a2, value, a6);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = (void *)(v8 + 440);
    if (*(char *)(v8 + 463) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    int v10 = 136315138;
    uint64_t v11 = v9;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Warning: %s was passed a ramped parameter event but does not implement them. Ignoring.", (uint8_t *)&v10, 0xCu);
  }
}

void ausdk::AUElement::SetParameter(ausdk::AUElement *this, unsigned int a2, float a3, char a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 40))
  {
    uint64_t v7 = *((void *)this + 6);
    if (a2 >= (unint64_t)((*((void *)this + 7) - v7) >> 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v62 = 67109120;
        LODWORD(v63) = -10878;
        _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)&v62, 8u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      ausdk::AUException::AUException(exception, -10878);
    }
    uint64_t v8 = (unsigned int *)(v7 + 4 * a2);
    goto LABEL_4;
  }
  uint64_t v11 = (char *)*((void *)this + 2);
  int v10 = (char *)*((void *)this + 3);
  uint64_t v12 = v11;
  if (v10 != v11)
  {
    unint64_t v13 = (v10 - v11) >> 3;
    uint64_t v12 = (char *)*((void *)this + 2);
    do
    {
      unint64_t v14 = v13 >> 1;
      unsigned int v15 = &v12[8 * (v13 >> 1)];
      unsigned int v17 = *(_DWORD *)v15;
      long long v16 = v15 + 8;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        uint64_t v12 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
  }
  if (v12 != v10)
  {
    if (*(_DWORD *)v12 != a2) {
      uint64_t v12 = (char *)*((void *)this + 3);
    }
    if (v10 != v12)
    {
      uint64_t v8 = (unsigned int *)(v12 + 4);
LABEL_4:
      unsigned int v9 = LODWORD(a3);
LABEL_5:
      atomic_store(v9, v8);
      return;
    }
  }
  uint64_t v18 = *((void *)this + 1);
  if (!*(unsigned char *)(v18 + 17) || (a4 & 1) != 0)
  {
    uint64_t v20 = v10 - v11;
    if (v10 == v11)
    {
      __int16 v22 = (char *)*((void *)this + 3);
    }
    else
    {
      unint64_t v21 = v20 >> 3;
      __int16 v22 = (char *)*((void *)this + 2);
      do
      {
        unint64_t v23 = v21 >> 1;
        __int16 v24 = &v22[8 * (v21 >> 1)];
        unsigned int v26 = *(_DWORD *)v24;
        pid_t v25 = v24 + 8;
        v21 += ~(v21 >> 1);
        if (v26 < a2) {
          __int16 v22 = v25;
        }
        else {
          unint64_t v21 = v23;
        }
      }
      while (v21);
    }
    if (v10 != v22 && *(_DWORD *)v22 == a2)
    {
      uint64_t v8 = (unsigned int *)(v22 + 4);
      goto LABEL_4;
    }
    uint64_t v27 = v22 - v11;
    uint64_t v28 = (v22 - v11) >> 3;
    double v29 = &v11[(v22 - v11) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v30 = *((void *)this + 4);
    if ((unint64_t)v10 < v30)
    {
      if (v29 == v10)
      {
        *(_DWORD *)int v10 = a2;
        *(float *)&v11[8 * v28 + 4] = a3;
        *((void *)this + 3) = v10 + 8;
        return;
      }
      unsigned int v9 = LODWORD(a3);
      int v31 = v29 + 8;
      long long v32 = v10 - 8;
      long long v33 = (_DWORD *)*((void *)this + 3);
      while (v32 < v10)
      {
        long long v34 = (unsigned int *)(v32 + 4);
        int v35 = *(_DWORD *)v32;
        v32 += 8;
        *long long v33 = v35;
        LODWORD(v34) = atomic_load(v34);
        v33[1] = v34;
        v33 += 2;
      }
      *((void *)this + 3) = v33;
      if (v10 != v31)
      {
        uint64_t v42 = 8 * ((v10 - v31) >> 3);
        unsigned int v43 = (unsigned int *)(v10 - 4);
        uint64_t v44 = (uint64_t)&v11[8 * v28 - 4];
        do
        {
          *(v43 - 1) = *(_DWORD *)(v44 + v42 - 4);
          unsigned int v45 = atomic_load((unsigned int *)(v44 + v42));
          atomic_store(v45, v43);
          v43 -= 2;
          v42 -= 8;
        }
        while (v42);
      }
      *(_DWORD *)double v29 = a2;
      uint64_t v8 = (unsigned int *)&v11[8 * v28 + 4];
      goto LABEL_5;
    }
    unint64_t v36 = (v20 >> 3) + 1;
    if (v36 >> 61) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = v30 - (void)v11;
    unint64_t v38 = (uint64_t)(v30 - (void)v11) >> 2;
    if (v38 > v36) {
      unint64_t v36 = v38;
    }
    if (v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v36;
    }
    if (v39)
    {
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v39);
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v46 = &v41[8 * v28];
    uint64_t v47 = &v41[8 * v40];
    if (v28 == v40)
    {
      if (v27 < 1)
      {
        if (v22 == v11) {
          unint64_t v49 = 1;
        }
        else {
          unint64_t v49 = v27 >> 2;
        }
        uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v49);
        uint64_t v46 = &v50[8 * (v49 >> 2)];
        uint64_t v47 = &v50[8 * v51];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        unint64_t v48 = v28 + 2;
        if (v28 >= -1) {
          unint64_t v48 = v28 + 1;
        }
        v46 -= 8 * (v48 >> 1);
      }
    }
    *(_DWORD *)uint64_t v46 = a2;
    *((float *)v46 + 1) = a3;
    uint64_t v52 = v46 + 8;
    double v53 = (char *)*((void *)this + 2);
    if (v53 != v29)
    {
      uint64_t v54 = v29;
      do
      {
        int v55 = *((_DWORD *)v54 - 2);
        v54 -= 8;
        *((_DWORD *)v46 - 2) = v55;
        v46 -= 8;
        unsigned int v56 = atomic_load((unsigned int *)v54 + 1);
        *((_DWORD *)v46 + 1) = v56;
      }
      while (v54 != v53);
    }
    for (uint64_t i = (char *)*((void *)this + 3); v29 != i; v52 += 2)
    {
      uint64_t v58 = (unsigned int *)(v29 + 4);
      int v59 = *(_DWORD *)v29;
      v29 += 8;
      *uint64_t v52 = v59;
      LODWORD(v58) = atomic_load(v58);
      v52[1] = v58;
    }
    double v60 = (void *)*((void *)this + 2);
    *((void *)this + 2) = v46;
    *((void *)this + 3) = v52;
    *((void *)this + 4) = v47;
    if (v60)
    {
      operator delete(v60);
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v19 = (void *)(v18 + 440);
    if (*(char *)(v18 + 463) < 0) {
      int v19 = (void *)*v19;
    }
    int v62 = 136315394;
    int v63 = v19;
    __int16 v64 = 1024;
    unsigned int v65 = a2;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Warning: %s SetParameter for undefined param ID %u while initialized. Ignoring.", (uint8_t *)&v62, 0x12u);
  }
}

void sub_21BAA65BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUElement::GetParameterList(uint64_t this, unsigned int *a2)
{
  if (*(unsigned char *)(this + 40))
  {
    uint64_t v2 = *(void *)(this + 56) - *(void *)(this + 48);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 4 * (v2 >> 2);
      do
      {
        a2[v3] = v3;
        ++v3;
        v4 -= 4;
      }
      while (v4);
    }
  }
  else
  {
    int v5 = *(unsigned int **)(this + 16);
    unint64_t v6 = *(unsigned int **)(this + 24);
    while (v5 != v6)
    {
      unsigned int v7 = *v5;
      v5 += 2;
      *a2++ = v7;
    }
  }
  return this;
}

void ausdk::AUElement::SaveState(unsigned int,__CFData *)::$_0::operator()(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v4 = a2;
  if ((*(unsigned int (**)(void, void, uint64_t, void))(**(void **)(*(void *)a1 + 8) + 256))(*(void *)(*(void *)a1 + 8), **(unsigned int **)(a1 + 8), a2, *(void *)(a1 + 16)))
  {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if ((*(unsigned char *)(v8 + 96) & 0x10) != 0)
  {
    unsigned int v9 = *(const void **)(v8 + 72);
    if (v9)
    {
      CFRelease(v9);
      uint64_t v8 = *(void *)(a1 + 16);
    }
    if (*(_DWORD *)(v8 + 80) == 26)
    {
      int v10 = *(const void **)(v8 + 56);
      if (v10)
      {
        CFRelease(v10);
        uint64_t v8 = *(void *)(a1 + 16);
      }
    }
  }
  if ((*(unsigned char *)(v8 + 97) & 0xA0) == 0)
  {
LABEL_2:
    unint64_t v6 = **(__CFData ***)(a1 + 24);
    *(_DWORD *)bytes = bswap32(v4);
    CFDataAppendBytes(v6, bytes, 4);
    unsigned int v7 = **(__CFData ***)(a1 + 24);
    *(_DWORD *)uint64_t v11 = bswap32(LODWORD(a3));
    CFDataAppendBytes(v7, v11, 4);
    ++**(_DWORD **)(a1 + 32);
  }
}

BOOL ausdk::AUScope::HasElementWithName(ausdk::AUScope *this)
{
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3) {
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else {
      uint64_t v4 = (*((void *)this + 3) - *((void *)this + 2)) >> 3;
    }
    if (i >= v4) {
      break;
    }
    uint64_t Element = ausdk::AUScope::GetElement(this, i);
    if (Element)
    {
      if (*(void *)(Element + 72)) {
        break;
      }
    }
  }
  return i < v4;
}

CFTypeRef ausdk::Owned<__CFString const*>::retainRef(CFTypeRef result)
{
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void ausdk::Owned<__CFDictionary *>::releaseRef(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void ausdk::AUScope::RestoreElementNames(ausdk::AUScope *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)a2 + 5);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3;
  }
  CFIndex Count = CFDictionaryGetCount(a3);
  unint64_t v7 = Count & ~(Count >> 63);
  if (Count < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 >> 61) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = operator new(8 * v7);
    bzero(v8, 8 * v7);
  }
  CFDictionaryGetKeysAndValues(a3, (const void **)v8, 0);
  if (Count >= 1)
  {
    unsigned int v9 = 0;
    unint64_t v24 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unsigned int v26 = 0;
      *(_OWORD *)buffer = 0u;
      long long v28 = 0u;
      CFStringGetCString(*((CFStringRef *)v8 + v11), buffer, 32, 0x600u);
      if (sscanf(buffer, "%u", &v26))
      {
        if (v26 < v5)
        {
          CFNumberRef Value = CFDictionaryGetValue(a3, *((const void **)v8 + v11));
          unint64_t v13 = Value;
          if (Value)
          {
            CFTypeID v14 = CFGetTypeID(Value);
            if (v14 == CFStringGetTypeID())
            {
              uint64_t Element = ausdk::AUScope::GetElement(a2, v26);
              if (Element)
              {
                ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v13);
                if ((unint64_t)v10 >= v24)
                {
                  uint64_t v17 = v10 - v9;
                  unint64_t v18 = v17 + 1;
                  if ((unint64_t)(v17 + 1) >> 62) {
                    std::vector<void const*>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v24 - (void)v9) >> 1 > v18) {
                    unint64_t v18 = (uint64_t)(v24 - (void)v9) >> 1;
                  }
                  if (v24 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v19 = v18;
                  }
                  if (v19) {
                    unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19);
                  }
                  else {
                    uint64_t v20 = 0;
                  }
                  unint64_t v21 = (unsigned int *)(v19 + 4 * v17);
                  *unint64_t v21 = v26;
                  long long v16 = v21 + 1;
                  while (v10 != v9)
                  {
                    unsigned int v22 = *--v10;
                    *--unint64_t v21 = v22;
                  }
                  *(void *)this = v21;
                  *((void *)this + 1) = v16;
                  unint64_t v24 = v19 + 4 * v20;
                  *((void *)this + 2) = v24;
                  if (v9) {
                    operator delete(v9);
                  }
                  unsigned int v9 = v21;
                }
                else
                {
                  *int v10 = v26;
                  long long v16 = v10 + 1;
                }
                *((void *)this + 1) = v16;
                int v10 = v16;
              }
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_21BAA6AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  uint64_t v12 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

const void **ausdk::Owned<__CFString const*>::operator=(const void **a1, const void *a2)
{
  uint64_t v3 = *a1;
  if (v3 != a2)
  {
    ausdk::Owned<__CFString const*>::releaseRef(v3);
    *a1 = a2;
    ausdk::Owned<__CFString const*>::retainRef(a2);
  }
  return a1;
}

unsigned int *ausdk::AUScope::RestoreState(ausdk::AUScope *this, const unsigned __int8 *a2)
{
  uint64_t Element = ausdk::AUScope::GetElement(this, bswap32(*(_DWORD *)a2));
  unsigned int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = (unsigned int *)(a2 + 8);
  if (Element)
  {
    if (v4)
    {
      unint64_t v6 = (ausdk::AUElement *)Element;
      unsigned int v7 = bswap32(v4);
      if (v7 <= 1) {
        int v8 = 1;
      }
      else {
        int v8 = v7;
      }
      do
      {
        unsigned int v9 = *v5;
        unsigned int v10 = v5[1];
        v5 += 2;
        ausdk::AUElement::SetParameter(v6, bswap32(v9), COERCE_FLOAT(bswap32(v10)), 0);
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v5 += 2 * bswap32(v4);
  }
  return v5;
}

uint64_t ausdk::AUEffectBase::ProcessScheduledSlice(ausdk::AUEffectBase *this, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  unsigned int v7 = (unsigned int *)a2[1];
  unint64_t v6 = (unsigned int *)a2[2];
  int v8 = *((_DWORD *)this + 147) * a4;
  uint64_t v9 = *v7;
  if (v9)
  {
    unsigned int v10 = v7 + 3;
    do
    {
      *unsigned int v10 = *(v10 - 1) * v8;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = *v6;
  if (v11)
  {
    uint64_t v12 = v6 + 3;
    do
    {
      *uint64_t v12 = *(v12 - 1) * v8;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  uint64_t result = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t, unsigned int *, unsigned int *, uint64_t))(*(void *)this + 176))(this, v5, v7, v6, a4);
  uint64_t v14 = *v7;
  if (v14)
  {
    unsigned int v15 = v7 + 4;
    do
    {
      *v15 += (*((_DWORD *)v15 - 2) * v8);
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *v6;
  if (v16)
  {
    uint64_t v17 = v6 + 4;
    do
    {
      *v17 += (*((_DWORD *)v17 - 2) * v8);
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t ausdk::AUEffectBase::ChangeStreamFormat(ausdk::AUEffectBase *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (*((unsigned char *)this + 553) && a4->mSampleRate != a5->mSampleRate) {
    (*(void (**)(ausdk::AUEffectBase *, uint64_t, void, void, Float64))(*(void *)this + 432))(this, 3, 0, 0, a4->mSampleRate);
  }
  return 0;
}

BOOL ausdk::AUEffectBase::StreamFormatWritable(ausdk::AUEffectBase *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t ausdk::AUEffectBase::Render(ausdk::AUInputElement **this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 10), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v9 = ausdk::AUInputElement::PullInput(this[72], a2, a3, 0, a4);
  if (!v9)
  {
    if (*((unsigned char *)this + 554))
    {
      unsigned int v10 = this[71];
      if (*((unsigned char *)v10 + 168))
      {
        uint64_t BufferList = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUInputElement *)((char *)this[72] + 144));
        ausdk::AUBufferList::SetBufferList((ausdk::AUInputElement *)((char *)v10 + 144), BufferList);
      }
    }
    if ((*((unsigned int (**)(ausdk::AUInputElement **))*this + 74))(this))
    {
      if (!*((unsigned char *)this + 554))
      {
        uint64_t v12 = this[72];
        unint64_t v13 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUInputElement *)((char *)this[71] + 144));
        ausdk::AUBufferList::CopyBufferContentsTo((void *)v12 + 18, v13);
      }
      uint64_t v9 = 0;
    }
    else
    {
      unsigned int v15 = this[48];
      uint64_t v16 = this[49];
      uint64_t v17 = (unsigned int *)ausdk::AUBufferList::GetBufferList((ausdk::AUInputElement *)((char *)this[72] + 144));
      uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUInputElement *)((char *)this[71] + 144));
      unint64_t v19 = (unsigned int *)v18;
      if (v15 == v16)
      {
        uint64_t v9 = (*((uint64_t (**)(ausdk::AUInputElement **, unsigned int *, unsigned int *, uint64_t, uint64_t))*this
              + 22))(this, a2, v17, v18, a4);
      }
      else
      {
        v31[0] = a2;
        v31[1] = v17;
        v31[2] = v18;
        uint64_t v9 = (*((uint64_t (**)(ausdk::AUInputElement **, char *, uint64_t, void *))*this + 70))(this, (char *)this + 384, a4, v31);
        int v20 = *((_DWORD *)this + 147) * a4;
        uint64_t v21 = *v17;
        if (v21)
        {
          unsigned int v22 = v17 + 4;
          do
          {
            uint64_t v23 = (*((_DWORD *)v22 - 2) * v20);
            *v22 -= v23;
            *((_DWORD *)v22 - 1) = v23;
            v22 += 2;
            --v21;
          }
          while (v21);
        }
        uint64_t v24 = *v19;
        if (v24)
        {
          pid_t v25 = v19 + 4;
          do
          {
            uint64_t v26 = (*((_DWORD *)v25 - 2) * v20);
            *v25 -= v26;
            *((_DWORD *)v25 - 1) = v26;
            v25 += 2;
            --v24;
          }
          while (v24);
        }
      }
    }
    if ((*(unsigned char *)a2 & 0x10) != 0 && !*((unsigned char *)this + 554))
    {
      uint64_t v27 = (_DWORD *)ausdk::AUBufferList::GetBufferList((ausdk::AUInputElement *)((char *)this[71] + 144));
      if (*v27)
      {
        long long v28 = v27;
        unsigned int v29 = 0;
        unint64_t v30 = (void **)(v27 + 4);
        do
        {
          bzero(*v30, *((unsigned int *)v30 - 1));
          ++v29;
          v30 += 2;
        }
        while (v29 < *v28);
      }
    }
  }
  return v9;
}

uint64_t ausdk::AUEffectBase::ProcessBufferLists(ausdk::AUEffectBase *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if ((*(uint64_t (**)(ausdk::AUEffectBase *))(*(void *)this + 592))(this)) {
    return 0;
  }
  int v10 = *a2;
  double v11 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0) + 80);
  double v12 = (*(double (**)(ausdk::AUEffectBase *))(*(void *)this + 344))(this);
  (*(void (**)(ausdk::AUEffectBase *))(*(void *)this + 352))(this);
  if ((v10 & 0x10) == 0)
  {
    char v14 = 0;
    *((unsigned char *)this + 560) = 1;
    goto LABEL_11;
  }
  if (*((unsigned char *)this + 560))
  {
    unsigned int v15 = (v11 * (v12 + v13));
    *((_DWORD *)this + 139) = v15;
    *((unsigned char *)this + 560) = 0;
    if (v15)
    {
LABEL_6:
      char v14 = 0;
      BOOL v16 = v15 >= a5;
      int v17 = v15 - a5;
      if (!v16) {
        int v17 = 0;
      }
      *((_DWORD *)this + 139) = v17;
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v15 = *((_DWORD *)this + 139);
    if (v15) {
      goto LABEL_6;
    }
  }
  char v14 = 1;
LABEL_11:
  *a2 |= 0x10u;
  uint64_t v18 = *((void *)this + 67);
  uint64_t v19 = *((void *)this + 66);
  if (v18 != v19)
  {
    unint64_t v20 = 0;
    unsigned int v21 = 1;
    do
    {
      uint64_t v22 = *(void *)(v19 + 8 * v20);
      if (v22)
      {
        char v24 = v14;
        (*(void (**)(uint64_t, void *, void *, uint64_t, char *))(*(void *)v22 + 24))(v22, a3->mBuffers[v20].mData, a4->mBuffers[v20].mData, a5, &v24);
        if (!v24) {
          *a2 &= ~0x10u;
        }
        uint64_t v18 = *((void *)this + 67);
        uint64_t v19 = *((void *)this + 66);
      }
      unint64_t v20 = v21++;
    }
    while (v20 < (v18 - v19) >> 3);
  }
  return 0;
}

uint64_t ausdk::AUEffectBase::SetProperty(ausdk::AUEffectBase *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 29)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 554) = *a5 != 0;
  }
  else if (a2 == 21)
  {
    if (a6 < 4)
    {
      return 4294956445;
    }
    else
    {
      int v8 = *a5;
      if ((*a5 != 0) != (*((unsigned char *)this + 552) != 0))
      {
        if (!v8 && *((unsigned char *)this + 552))
        {
          if (*((unsigned char *)this + 17)) {
            (*(void (**)(ausdk::AUEffectBase *, void, void))(*(void *)this + 72))(this, 0, 0);
          }
        }
        (*(void (**)(ausdk::AUEffectBase *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
  }
  else
  {
    return 4294956417;
  }
  return result;
}

uint64_t ausdk::AUEffectBase::GetProperty(ausdk::AUEffectBase *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 29)
  {
    unint64_t v6 = (unsigned __int8 *)this + 554;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    unint64_t v6 = (unsigned __int8 *)this + 552;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t ausdk::AUEffectBase::GetPropertyInfo(ausdk::AUEffectBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || (a2 | 8) != 0x1D) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t ausdk::AUEffectBase::Reset(ausdk::AUEffectBase *this)
{
  int v1 = (void *)*((void *)this + 66);
  uint64_t v2 = (void *)*((void *)this + 67);
  while (v1 != v2)
  {
    if (*v1) {
      (*(void (**)(void))(*(void *)*v1 + 16))(*v1);
    }
    ++v1;
  }
  return 0;
}

double ausdk::AUEffectBase::Cleanup(ausdk::AUEffectBase *this)
{
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t ausdk::AUEffectBase::Initialize(ausdk::AUEffectBase *this)
{
  uint64_t v2 = (ausdk::AUEffectBase *)((char *)this + 80);
  int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 80), 0) + 108);
  int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0) + 108);
  uint64_t v49 = 0;
  unsigned int v5 = (*(uint64_t (**)(ausdk::AUEffectBase *, uint64_t *))(*(void *)this + 376))(this, &v49);
  if (v5) {
    BOOL v6 = v49 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = (__int16 *)(v49 + 4 * v9);
      int v11 = *v10;
      int v12 = v10[1];
      if (v11 < 0 && v12 < 0)
      {
        if (v11 == -1 && v12 == -2) {
          goto LABEL_10;
        }
        BOOL v14 = (v11 & v12) == 0xFFFFFFFF && (unsigned __int16)(v4 ^ v3) == 0;
        BOOL v15 = v14;
        BOOL v16 = v12 == -1 && v11 == -2;
        if (v16 || v15) {
          goto LABEL_10;
        }
LABEL_44:
        if (++v9 >= (unint64_t)v5) {
          return 4294956428;
        }
      }
      else
      {
        if (v11 != -1 && (__int16)v3 != v11) {
          goto LABEL_44;
        }
        BOOL v19 = v12 == -1 || (__int16)v4 == v12;
        if (++v9 >= (unint64_t)v5 || v19)
        {
          if (!v19) {
            return 4294956428;
          }
LABEL_10:
          if (*((unsigned char *)this + 584)) {
            unsigned int v8 = 1;
          }
          else {
            unsigned int v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0) + 108);
          }
          uint64_t v21 = *((void *)this + 67);
          uint64_t v22 = *((void *)this + 66);
          unint64_t v23 = v21 - v22;
          unint64_t v24 = (v21 - v22) >> 3;
          pid_t v25 = (uint64_t *)((char *)this + 528);
          unint64_t v26 = v8;
          if (v24 >= v8)
          {
            if (v24 > v8)
            {
              uint64_t v42 = (uint64_t *)(v21 - 8);
              uint64_t v43 = v21 - 8;
              do
              {
                uint64_t v44 = *v42;
                *uint64_t v42 = 0;
                if (v44) {
                  (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
                }
                *((void *)this + 67) = v42;
                uint64_t v45 = v43 - *((void *)this + 66);
                v43 -= 8;
                --v42;
              }
              while (v26 < v45 >> 3);
            }
          }
          else
          {
            if (v8 > (unint64_t)((*((void *)this + 68) - v22) >> 3))
            {
              double v53 = (char *)this + 544;
              *(void *)&long long v51 = std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v8);
              *((void *)&v51 + 1) = v51 + 8 * v24;
              *(void *)&long long v52 = *((void *)&v51 + 1);
              *((void *)&v52 + 1) = v51 + 8 * v27;
              std::vector<std::unique_ptr<AT::Resampler>>::__swap_out_circular_buffer((void *)this + 66, &v51);
              std::__split_buffer<std::unique_ptr<ausdk::AUKernelBase>>::~__split_buffer((uint64_t)&v51);
              unint64_t v23 = *((void *)this + 67) - *((void *)this + 66);
            }
            unint64_t v28 = v23 >> 3;
            if (v26 > v28)
            {
              int v29 = v26 - v28;
              do
              {
                (*(void (**)(uint64_t *__return_ptr, ausdk::AUEffectBase *))(*(void *)this + 576))(&v50, this);
                unint64_t v30 = (void *)*((void *)this + 67);
                unint64_t v31 = *((void *)this + 68);
                if ((unint64_t)v30 >= v31)
                {
                  uint64_t v34 = ((uint64_t)v30 - *v25) >> 3;
                  if ((unint64_t)(v34 + 1) >> 61) {
                    std::vector<void const*>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v35 = v31 - *v25;
                  uint64_t v36 = v35 >> 2;
                  if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
                    uint64_t v36 = v34 + 1;
                  }
                  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v36;
                  }
                  double v53 = (char *)this + 544;
                  if (v37) {
                    unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v37);
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  unint64_t v39 = (void *)(v37 + 8 * v34);
                  *(void *)&long long v51 = v37;
                  *((void *)&v51 + 1) = v39;
                  *((void *)&v52 + 1) = v37 + 8 * v38;
                  uint64_t v40 = v50;
                  uint64_t v50 = 0;
                  void *v39 = v40;
                  *(void *)&long long v52 = v39 + 1;
                  std::vector<std::unique_ptr<AT::Resampler>>::__swap_out_circular_buffer((void *)this + 66, &v51);
                  long long v33 = (void *)*((void *)this + 67);
                  std::__split_buffer<std::unique_ptr<ausdk::AUKernelBase>>::~__split_buffer((uint64_t)&v51);
                }
                else
                {
                  uint64_t v32 = v50;
                  uint64_t v50 = 0;
                  *unint64_t v30 = v32;
                  long long v33 = v30 + 1;
                  *((void *)this + 67) = v33;
                }
                *((void *)this + 67) = v33;
                uint64_t v41 = v50;
                uint64_t v50 = 0;
                if (v41) {
                  (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
                }
                --v29;
              }
              while (v29);
            }
          }
          if (v26)
          {
            uint64_t v46 = 0;
            uint64_t v47 = *v25;
            do
            {
              uint64_t v48 = *(void *)(v47 + 8 * v46);
              if (v48) {
                *(_DWORD *)(v48 + 16) = v46;
              }
              ++v46;
            }
            while (v26 != v46);
          }
          *((void *)this + 71) = ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0);
          *((void *)this + 72) = ausdk::AUScope::SafeGetElement(v2, 0);
          double v53 = 0;
          long long v51 = 0u;
          long long v52 = 0u;
          (*(void (**)(long long *__return_ptr, ausdk::AUEffectBase *, uint64_t, void))(*(void *)this
                                                                                                 + 392))(&v51, this, 2, 0);
          uint64_t result = 0;
          *((_DWORD *)this + 147) = DWORD2(v52);
          return result;
        }
      }
    }
  }
  if (v4 << 16 == v3 << 16 && v4 << 16 != 0) {
    goto LABEL_10;
  }
  return 4294956428;
}

void sub_21BAA7944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<ausdk::AUKernelBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ausdk::AUEffectBase::~AUEffectBase(ausdk::AUEffectBase *this)
{
  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x21D497F90);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26CBB1A38;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);

  ausdk::AUBase::~AUBase(this);
}

uint64_t ausdk::AUBase::ProcessForScheduledParams(ausdk::AUBase *a1, long long **a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *a2;
  unsigned int v8 = a2[1];
  unint64_t v9 = 126 - 2 * __clz(((char *)v8 - (char *)v7) >> 5);
  unint64_t v31 = ausdk::ParameterEventListSortPredicate;
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  v11.n128_f64[0] = _ZNSt3__111__introsortINS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_Lb0EEEvT1_S9_T0_NS_15iterator_traitsIS9_E15difference_typeEb(v7, v8, (uint64_t (**)(long long *, long long *))&v31, v10, 1);
  if (a3)
  {
    uint64_t v12 = 0;
    unsigned int v13 = a3;
    while (1)
    {
      BOOL v15 = (unsigned int *)*a2;
      BOOL v14 = a2[1];
      uint64_t v16 = a3;
      int v17 = *a2;
      if (*a2 != v14) {
        break;
      }
      uint64_t v22 = (a3 - v12);
      uint64_t v16 = a3;
LABEL_34:
      uint64_t result = (*(uint64_t (**)(ausdk::AUBase *, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1 + 568))(a1, a4, v12, v22, a3, v11);
      if (result) {
        return result;
      }
      uint64_t v12 = v16;
      BOOL v29 = v13 > v22;
      if (v13 >= v22) {
        v13 -= v22;
      }
      else {
        unsigned int v13 = 0;
      }
      if (!v29) {
        return 0;
      }
    }
    while (1)
    {
      int v18 = *((_DWORD *)v17 + 4);
      if (v18 > (int)v12 && v18 < (int)v16) {
        break;
      }
      if (*((_DWORD *)v17 + 3) == 2)
      {
        int v20 = *((_DWORD *)v17 + 5) + v18;
        if (v20 >= (int)v16 || v20 <= (int)v12) {
          uint64_t v16 = v16;
        }
        else {
          uint64_t v16 = v20;
        }
      }
      v17 += 2;
      if (v17 == v14) {
        goto LABEL_22;
      }
    }
    uint64_t v16 = *((unsigned int *)v17 + 4);
LABEL_22:
    uint64_t v22 = (v16 - v12);
    while (1)
    {
      int v23 = v15[4];
      if (v15[3] == 2)
      {
        if (v23 < (int)v16 && (int)(v15[5] + v23) > (int)v12)
        {
LABEL_31:
          unsigned int v25 = v15[1];
          Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(a1, *v15);
          uint64_t Element = ausdk::AUScope::GetElement(Scope, v25);
          if (Element) {
            (*(void (**)(uint64_t, void, unsigned int *, uint64_t, void, void))(*(void *)Element + 32))(Element, v15[2], v15, v12, (v16 - v12), 0);
          }
        }
      }
      else if (v23 <= v12)
      {
        goto LABEL_31;
      }
      v15 += 8;
      if (v15 == (unsigned int *)v14) {
        goto LABEL_34;
      }
    }
  }
  return 0;
}

double _ZNSt3__111__introsortINS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_Lb0EEEvT1_S9_T0_NS_15iterator_traitsIS9_E15difference_typeEb(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    float v99 = a2;
    float v100 = a2 - 2;
    float v97 = a2 - 6;
    float v98 = a2 - 4;
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 5;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if ((*a3)(v100, v12))
                {
                  long long v42 = v12[1];
                  long long v104 = *v12;
                  long long v105 = v42;
                  long long v43 = v100[1];
                  *uint64_t v12 = *v100;
                  v12[1] = v43;
                  double result = *(double *)&v104;
                  long long v44 = v105;
                  long long *v100 = v104;
                  v100[1] = v44;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(v12, v12 + 2, v100, a3);
                break;
              case 4uLL:
                *(void *)&double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>((uint64_t)v12, v12 + 2, v12 + 4, v100, a3).n128_u64[0];
                break;
              case 5uLL:
                *(void *)&double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>((uint64_t)v12, v12 + 2, v12 + 4, v12 + 6, v100, a3).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 767)
          {
            uint64_t v45 = v12 + 2;
            BOOL v47 = v12 == a2 || v45 == a2;
            if (a5)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                uint64_t v49 = v12;
                do
                {
                  uint64_t v50 = v49;
                  uint64_t v49 = v45;
                  if ((*a3)(v45, v50))
                  {
                    long long v51 = v49[1];
                    long long v104 = *v49;
                    long long v105 = v51;
                    uint64_t v52 = v48;
                    while (1)
                    {
                      double v53 = (char *)v12 + v52;
                      long long v54 = *(long long *)((char *)v12 + v52 + 16);
                      *((_OWORD *)v53 + 2) = *(long long *)((char *)v12 + v52);
                      *((_OWORD *)v53 + 3) = v54;
                      if (!v52) {
                        break;
                      }
                      v52 -= 32;
                      if (((*a3)(&v104, (long long *)((char *)v12 + v52)) & 1) == 0)
                      {
                        int v55 = (long long *)((char *)v12 + v52 + 32);
                        goto LABEL_78;
                      }
                    }
                    int v55 = v12;
LABEL_78:
                    double result = *(double *)&v104;
                    long long v56 = v105;
                    *int v55 = v104;
                    v55[1] = v56;
                    a2 = v99;
                  }
                  uint64_t v45 = v49 + 2;
                  v48 += 32;
                }
                while (v49 + 2 != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                int v90 = a1;
                a1 = v45;
                if ((*a3)(v45, v90))
                {
                  long long v91 = a1[1];
                  long long v104 = *a1;
                  long long v105 = v91;
                  int v92 = a1;
                  do
                  {
                    uint64_t v93 = v92 - 2;
                    long long v94 = *(v92 - 1);
                    *int v92 = *(v92 - 2);
                    v92[1] = v94;
                    char v95 = (*a3)(&v104, v92 - 4);
                    int v92 = v93;
                  }
                  while ((v95 & 1) != 0);
                  double result = *(double *)&v104;
                  long long v96 = v105;
                  *uint64_t v93 = v104;
                  v93[1] = v96;
                }
                uint64_t v45 = a1 + 2;
              }
              while (a1 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v57 = (v14 - 2) >> 1;
              int64_t v101 = v57;
              do
              {
                int64_t v58 = v57;
                if (v101 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  double v60 = &a1[2 * v59];
                  if (2 * v57 + 2 < (uint64_t)v14 && (*a3)(&a1[2 * v59], v60 + 2))
                  {
                    v60 += 2;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  float v61 = &a1[2 * v58];
                  if (((*a3)(v60, v61) & 1) == 0)
                  {
                    long long v62 = v61[1];
                    long long v104 = *v61;
                    long long v105 = v62;
                    do
                    {
                      int v63 = v60;
                      long long v64 = v60[1];
                      *float v61 = *v60;
                      v61[1] = v64;
                      if (v101 < v59) {
                        break;
                      }
                      uint64_t v65 = (2 * v59) | 1;
                      double v60 = &a1[2 * v65];
                      uint64_t v66 = 2 * v59 + 2;
                      if (v66 < (uint64_t)v14 && (*a3)(&a1[2 * v65], v60 + 2))
                      {
                        v60 += 2;
                        uint64_t v65 = v66;
                      }
                      float v61 = v63;
                      uint64_t v59 = v65;
                    }
                    while (!(*a3)(v60, &v104));
                    long long v67 = v105;
                    long long *v63 = v104;
                    v63[1] = v67;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v68 = (unint64_t)v13 >> 5;
              long long v69 = v99;
              do
              {
                __int16 v70 = v69;
                uint64_t v71 = 0;
                long long v72 = a1[1];
                long long v102 = *a1;
                long long v103 = v72;
                double v73 = a1;
                do
                {
                  float v74 = &v73[2 * v71 + 2];
                  uint64_t v75 = (2 * v71) | 1;
                  uint64_t v76 = 2 * v71 + 2;
                  if (v76 < v68 && (*a3)(&v73[2 * v71 + 2], &v73[2 * v71 + 4]))
                  {
                    v74 += 2;
                    uint64_t v75 = v76;
                  }
                  long long v77 = v74[1];
                  *double v73 = *v74;
                  v73[1] = v77;
                  double v73 = v74;
                  uint64_t v71 = v75;
                }
                while (v75 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                signed int v78 = v70 - 2;
                if (v74 == v78)
                {
                  long long v69 = v78;
                  double result = *(double *)&v102;
                  long long v88 = v103;
                  *float v74 = v102;
                  v74[1] = v88;
                }
                else
                {
                  long long v79 = v78[1];
                  *float v74 = *v78;
                  v74[1] = v79;
                  double result = *(double *)&v102;
                  long long v80 = v103;
                  *signed int v78 = v102;
                  v78[1] = v80;
                  long long v69 = v78;
                  uint64_t v81 = (char *)v74 - (char *)a1 + 32;
                  if (v81 >= 33)
                  {
                    unint64_t v82 = (unint64_t)((v81 >> 5) - 2) >> 1;
                    uint64_t v83 = &a1[2 * v82];
                    if ((*a3)(v83, v74))
                    {
                      long long v84 = v74[1];
                      long long v104 = *v74;
                      long long v105 = v84;
                      do
                      {
                        uint64_t v85 = v83;
                        long long v86 = v83[1];
                        *float v74 = *v83;
                        v74[1] = v86;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        uint64_t v83 = &a1[2 * v82];
                        float v74 = v85;
                      }
                      while (((*a3)(v83, &v104) & 1) != 0);
                      double result = *(double *)&v104;
                      long long v87 = v105;
                      *uint64_t v85 = v104;
                      v85[1] = v87;
                    }
                  }
                }
              }
              while (v68-- > 2);
            }
            return result;
          }
          BOOL v15 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(v12, &v12[2 * (v14 >> 1)], v100, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(v12 + 2, v15 - 2, v98, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(v12 + 4, &v12[2 * (v14 >> 1) + 2], v97, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(v15 - 2, &v12[2 * (v14 >> 1)], &v12[2 * (v14 >> 1) + 2], a3);
            long long v16 = v12[1];
            long long v104 = *v12;
            long long v105 = v16;
            long long v17 = v15[1];
            *uint64_t v12 = *v15;
            v12[1] = v17;
            long long v18 = v105;
            long long *v15 = v104;
            v15[1] = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(&v12[2 * (v14 >> 1)], v12, v100, a3);
          }
          --a4;
          a2 = v99;
          if (a5 & 1) != 0 || ((*a3)(v12 - 2, v12)) {
            break;
          }
          long long v32 = v12[1];
          long long v102 = *v12;
          long long v103 = v32;
          if ((*a3)(&v102, v100))
          {
            do
              v12 += 2;
            while (((*a3)(&v102, v12) & 1) == 0);
          }
          else
          {
            long long v33 = v12 + 2;
            do
            {
              uint64_t v12 = v33;
              if (v33 >= v99) {
                break;
              }
              int v34 = (*a3)(&v102, v33);
              long long v33 = v12 + 2;
            }
            while (!v34);
          }
          uint64_t v35 = v99;
          if (v12 < v99)
          {
            uint64_t v35 = v99;
            do
              v35 -= 2;
            while (((*a3)(&v102, v35) & 1) != 0);
          }
          while (v12 < v35)
          {
            long long v36 = v12[1];
            long long v104 = *v12;
            long long v105 = v36;
            long long v37 = v35[1];
            *uint64_t v12 = *v35;
            v12[1] = v37;
            long long v38 = v105;
            *uint64_t v35 = v104;
            v35[1] = v38;
            do
              v12 += 2;
            while (!(*a3)(&v102, v12));
            do
              v35 -= 2;
            while (((*a3)(&v102, v35) & 1) != 0);
          }
          unint64_t v39 = v12 - 2;
          BOOL v5 = v12 - 2 >= a1;
          BOOL v6 = v12 - 2 == a1;
          if (v12 - 2 != a1)
          {
            long long v40 = *(v12 - 1);
            *a1 = *v39;
            a1[1] = v40;
          }
          a5 = 0;
          double result = *(double *)&v102;
          long long v41 = v103;
          long long *v39 = v102;
          *(v12 - 1) = v41;
        }
        long long v19 = v12[1];
        long long v102 = *v12;
        long long v103 = v19;
        int v20 = v12;
        do
        {
          uint64_t v21 = v20;
          v20 += 2;
        }
        while (((*a3)(v20, &v102) & 1) != 0);
        uint64_t v22 = v99;
        if (v21 == v12)
        {
          uint64_t v22 = v99;
          do
          {
            if (v20 >= v22) {
              break;
            }
            v22 -= 2;
          }
          while (((*a3)(v22, &v102) & 1) == 0);
        }
        else
        {
          do
            v22 -= 2;
          while (!(*a3)(v22, &v102));
        }
        if (v20 < v22)
        {
          int v23 = v20;
          unint64_t v24 = v22;
          do
          {
            long long v26 = v23[1];
            long long v104 = *v23;
            long long v25 = v104;
            long long v105 = v26;
            long long v27 = v24[1];
            long long *v23 = *v24;
            v23[1] = v27;
            long long *v24 = v25;
            v24[1] = v26;
            do
            {
              uint64_t v21 = v23;
              v23 += 2;
            }
            while (((*a3)(v23, &v102) & 1) != 0);
            do
              v24 -= 2;
            while (!(*a3)(v24, &v102));
          }
          while (v23 < v24);
        }
        if (v21 != a1)
        {
          long long v28 = v21[1];
          *a1 = *v21;
          a1[1] = v28;
        }
        long long v29 = v103;
        *uint64_t v21 = v102;
        v21[1] = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_30:
        _ZNSt3__111__introsortINS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_Lb0EEEvT1_S9_T0_NS_15iterator_traitsIS9_E15difference_typeEb(a1, v21, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v21 + 2;
      }
      BOOL v30 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEbT1_S9_T0_(a1, v21, a3);
      uint64_t v12 = v21 + 2;
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEbT1_S9_T0_(v21 + 2, v99, a3))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v21;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_15_RangeAlgPolicyERPDoFbRK23AudioUnitParameterEventS4_EPS2_EEbT1_S9_T0_(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = a2 - 2;
      if ((*a3)(a2 - 2, a1))
      {
        long long v10 = *a1;
        long long v9 = a1[1];
        long long v11 = *(a2 - 1);
        *a1 = *v8;
        a1[1] = v11;
        *unsigned int v8 = v10;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AudioUnitParameterEvent const&,AudioUnitParameterEvent const&),AudioUnitParameterEvent*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v13, v12))
    {
      long long v16 = v13[1];
      long long v22 = *v13;
      long long v23 = v16;
      uint64_t v17 = v14;
      while (1)
      {
        long long v18 = (long long *)((char *)a1 + v17);
        long long v19 = *(long long *)((char *)a1 + v17 + 80);
        v18[6] = *(long long *)((char *)a1 + v17 + 64);
        v18[7] = v19;
        if (v17 == -64) {
          break;
        }
        v17 -= 32;
        if (((*a3)(&v22, v18 + 2) & 1) == 0)
        {
          int v20 = (long long *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      int v20 = a1;
LABEL_12:
      long long v21 = v23;
      *int v20 = v22;
      v20[1] = v21;
      if (++v15 == 8) {
        return v13 + 2 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 32;
    v13 += 2;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL ausdk::ParameterEventListSortPredicate(ausdk *this, const AudioUnitParameterEvent *a2, const AudioUnitParameterEvent *a3)
{
  return *((_DWORD *)this + 4) < a2->eventValues.ramp.startBufferOffset;
}

uint64_t ausdk::AUBase::GetChannelLayoutTags(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  BOOL v5 = *(uint64_t (**)(void))(*(void *)ausdk::AUScope::GetIOElement(Scope, a3) + 80);

  return v5();
}

uint64_t ausdk::AUBase::RemoveAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  IOuint64_t Element = ausdk::AUScope::GetIOElement(Scope, a3);
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void, char *))(*(void *)IOElement + 96))(IOElement, 0, &v7);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)IOElement + 104))(IOElement);
  }
  return result;
}

uint64_t ausdk::AUBase::SetAudioChannelLayout(ausdk::AUBase *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  IOuint64_t Element = (_DWORD *)ausdk::AUScope::GetIOElement(Scope, a3);
  int v10 = IOElement[27];
  if (v10 != ausdk::AUChannelLayout::NumberChannels((ausdk::AUChannelLayout *)a4, v11)) {
    return 4294956445;
  }
  (*(void (**)(_DWORD **__return_ptr, ausdk::AUBase *, uint64_t, uint64_t))(*(void *)this + 552))(&v17, this, a2, a3);
  uint64_t v12 = v17;
  if (v17 == v18)
  {
    uint64_t v15 = 4294956417;
  }
  else
  {
    uint64_t v13 = v17;
    while (*v13 && *v13 != a4->mChannelLayoutTag)
    {
      if (++v13 == v18) {
        goto LABEL_14;
      }
    }
    if (v13 != v18)
    {
      uint64_t v15 = (*(uint64_t (**)(_DWORD *, AudioChannelLayout *))(*(void *)IOElement + 88))(IOElement, a4);
      uint64_t v12 = v17;
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v15 = 4294956445;
  }
LABEL_15:
  if (v12)
  {
    long long v18 = v12;
    operator delete(v12);
  }
  return v15;
}

void sub_21BAA8914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::GetAudioChannelLayout(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  char v7 = *(uint64_t (**)(void))(*(void *)ausdk::AUScope::GetIOElement(Scope, a3) + 96);

  return v7();
}

uint64_t ausdk::AUBase::CanSetMaxFrames(ausdk::AUBase *this)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  else {
    return 0;
  }
}

BOOL ausdk::AUBase::ValidFormat(ausdk::AUBase *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  return result;
}

uint64_t ausdk::AUBase::SupportedNumChannels(ausdk::AUBase *this, const AUChannelInfo **a2)
{
  return 0;
}

uint64_t ausdk::AUBase::CopyIconLocation(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::NewCustomPresetSet(CFTypeRef *this, const AUPreset *a2)
{
  uint64_t v4 = (AUPreset *)(this + 45);
  CFRelease(this[46]);
  *uint64_t v4 = *a2;
  CFRetain(this[46]);
  return 0;
}

uint64_t ausdk::AUBase::NewFactoryPresetSet(ausdk::AUBase *this, const AUPreset *a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetPresets(ausdk::AUBase *this, const __CFArray **a2)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::CopyClumpName(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const __CFString **a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetParameterValueStrings(ausdk::AUBase *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::RestoreState(OpaqueAudioComponentInstance **this, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)&v42, this[1]);
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"part")) {
    return 4294956445;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"version");
  if (!Value) {
    return 4294956445;
  }
  CFNumberRef v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  int valuePtr = 0;
  CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr) {
    return 4294956445;
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"subtype");
  if (!v9) {
    return 4294956445;
  }
  CFNumberRef v10 = v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != HIDWORD(v42)) {
    return 4294956445;
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"manufacturer");
  if (!v12) {
    return 4294956445;
  }
  CFNumberRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFNumberGetTypeID()) {
    return 4294956445;
  }
  CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr != v43) {
    return 4294956445;
  }
  CFDataRef v15 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"data");
  if (v15)
  {
    CFDataRef v16 = v15;
    CFTypeID v17 = CFGetTypeID(v15);
    if (v17 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v16);
      CFIndex Length = CFDataGetLength(v16);
      if (Length >= 1)
      {
        int v20 = (char *)&BytePtr[Length];
        do
        {
          Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, bswap32(*(_DWORD *)BytePtr));
          BytePtr = (const unsigned __int8 *)ausdk::AUScope::RestoreState(Scope, BytePtr + 4);
        }
        while (BytePtr < (const unsigned __int8 *)v20);
      }
    }
  }
  long long v22 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"name");
  long long v23 = this[46];
  if (v23) {
    CFRelease(v23);
  }
  if (!v22 || (CFTypeID v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID())) {
    long long v22 = @"Untitled";
  }
  this[46] = (OpaqueAudioComponentInstance *)v22;
  *((_DWORD *)this + 90) = -1;
  CFRetain(v22);
  (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, void, void))*this + 54))(this, 36, 0, 0);
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"render-quality");
  if (v25)
  {
    CFNumberRef v26 = v25;
    CFTypeID v27 = CFGetTypeID(v25);
    if (v27 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr);
      ausdk::AUBase::DispatchSetProperty((const void **)this, 26, 0, 0, (const void **)&valuePtr, 4);
    }
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, @"element-name");
  if (result)
  {
    CFDictionaryRef v28 = (const __CFDictionary *)result;
    CFTypeID v29 = CFGetTypeID((CFTypeRef)result);
    if (v29 == CFDictionaryGetTypeID())
    {
      uint64_t v30 = 0;
      do
      {
        CFStringRef v31 = CFStringCreateWithFormat(0, 0, @"%u", v30);
        CFDictionaryRef v32 = (const __CFDictionary *)CFDictionaryGetValue(v28, v31);
        if (v32)
        {
          CFDictionaryRef v33 = v32;
          CFTypeID v34 = CFGetTypeID(v32);
          if (v34 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v35 = (const __CFDictionary *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, v30);
            ausdk::AUScope::RestoreElementNames((ausdk::AUScope *)&v39, v35, v33);
            long long v36 = v39;
            long long v37 = v40;
            for (uint64_t i = v39; i != v37; ++i)
              (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, uint64_t, void))*this + 54))(this, 30, v30, *i);
            if (v36) {
              operator delete(v36);
            }
          }
        }
        CFRelease(v31);
        uint64_t result = 0;
        uint64_t v30 = (v30 + 1);
      }
      while (v30 != 4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_21BAA8E70(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::SaveState(ausdk::AUBase *this, __CFDictionary **a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(void *)long long v40 = 0;
  *(void *)long long v41 = 0;
  int v42 = 0;
  ausdk::ComponentBase::GetComponentDescription((ausdk::ComponentBase *)v40, *((OpaqueAudioComponentInstance **)this + 1));
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  AddNumToDictionary(Mutable, @"version", 0);
  AddNumToDictionary(Mutable, @"type", v40[0]);
  AddNumToDictionary(Mutable, @"subtype", v40[1]);
  int v39 = v41[0];
  AddNumToDictionary(Mutable, @"manufacturer", v41[0]);
  uint64_t v3 = CFDataCreateMutable(0, 0);
  unsigned int v4 = 0;
  do
  {
    uint64_t Scope = ausdk::AUBase::GetScope(this, v4);
    uint64_t v6 = *(void *)(Scope + 40);
    unsigned int v37 = v4;
    if (v6)
    {
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      if (!v7) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v7 = (*(void *)(Scope + 24) - *(void *)(Scope + 16)) >> 3;
      if (!v7) {
        goto LABEL_18;
      }
    }
    unsigned int v8 = 0;
    do
    {
      uint64_t Element = ausdk::AUScope::GetElement((ausdk::AUScope *)Scope, v8);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Element + 16))(Element))
      {
        *(_DWORD *)bytes = bswap32(*(_DWORD *)(Scope + 8));
        CFDataAppendBytes(v3, bytes, 4);
        *(_DWORD *)bytes = bswap32(v8);
        CFDataAppendBytes(v3, bytes, 4);
        int v47 = *(_DWORD *)(Scope + 8);
        CFMutableDataRef theData = v3;
        uint64_t v54 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        *(_OWORD *)bytes = 0u;
        CFIndex Length = CFDataGetLength(v3);
        unsigned int v45 = 0;
        v44[0] = Element;
        v44[1] = &v47;
        v44[2] = bytes;
        v44[3] = &theData;
        v44[4] = &v45;
        *(_DWORD *)uint64_t v43 = 0;
        CFDataAppendBytes(v3, v43, 4);
        CFTypeID v11 = Mutable;
        if (*(unsigned char *)(Element + 40))
        {
          unint64_t v12 = *(void *)(Element + 56) - *(void *)(Element + 48);
          if ((v12 & 0x3FFFFFFFCLL) != 0)
          {
            uint64_t v13 = 0;
            uint64_t v14 = (v12 >> 2);
            do
            {
              float v15 = COERCE_FLOAT(atomic_load((unsigned int *)(*(void *)(Element + 48) + 4 * v13)));
              ausdk::AUElement::SaveState(unsigned int,__CFData *)::$_0::operator()((uint64_t)v44, v13++, v15);
            }
            while (v14 != v13);
          }
        }
        else
        {
          CFDataRef v16 = *(unsigned int **)(Element + 16);
          CFTypeID v17 = *(unsigned int **)(Element + 24);
          while (v16 != v17)
          {
            uint64_t v18 = *v16;
            float v19 = COERCE_FLOAT(atomic_load(v16 + 1));
            ausdk::AUElement::SaveState(unsigned int,__CFData *)::$_0::operator()((uint64_t)v44, v18, v19);
            v16 += 2;
          }
        }
        CFArrayRef Mutable = v11;
        *(_DWORD *)&CFDataGetMutableBytePtr(theData)[Length] = bswap32(v45);
      }
      ++v8;
    }
    while (v8 != v7);
LABEL_18:
    unsigned int v4 = v37 + 1;
  }
  while (v37 != 2);
  (*(void (**)(ausdk::AUBase *, __CFData *))(*(void *)this + 280))(this, v3);
  CFDictionarySetValue(Mutable, @"data", v3);
  if (v3) {
    ausdk::Owned<__CFData *>::releaseRef(v3);
  }
  CFDictionarySetValue(Mutable, @"name", *((const void **)this + 46));
  if (!(*(unsigned int (**)(ausdk::AUBase *, uint64_t, void, void, int *))(*(void *)this + 88))(this, 26, 0, 0, &v39))AddNumToDictionary(Mutable, @"render-quality", v39); {
  unsigned int v20 = 0;
  }
  while (1)
  {
    long long v21 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v20);
    if (ausdk::AUScope::HasElementWithName(v21)) {
      break;
    }
    if (++v20 == 4) {
      goto LABEL_41;
    }
  }
  long long v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unsigned int v23 = 0;
  CFTypeID v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  do
  {
    uint64_t v25 = ausdk::AUBase::GetScope(this, v23);
    if (ausdk::AUScope::HasElementWithName((ausdk::AUScope *)v25))
    {
      CFNumberRef v26 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], v24);
      for (uint64_t i = 0; ; uint64_t i = (i + 1))
      {
        uint64_t v28 = *(void *)(v25 + 40);
        if (v28) {
          LODWORD(v29) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
        }
        else {
          uint64_t v29 = (*(void *)(v25 + 24) - *(void *)(v25 + 16)) >> 3;
        }
        if (i >= v29) {
          break;
        }
        uint64_t v30 = ausdk::AUScope::GetElement((ausdk::AUScope *)v25, i);
        uint64_t v31 = v30;
        if (v30 && *(void *)(v30 + 72))
        {
          CFStringRef v32 = CFStringCreateWithFormat(0, 0, @"%u", i);
          CFDictionaryRef v33 = *(const void **)(v31 + 72);
          ausdk::Owned<__CFString const*>::retainRef(v33);
          CFDictionarySetValue(v26, v32, v33);
          ausdk::Owned<__CFString const*>::releaseRef(v33);
          ausdk::Owned<__CFString const*>::releaseRef(v32);
        }
      }
      CFStringRef v34 = CFStringCreateWithFormat(0, 0, @"%u", *(unsigned int *)(v25 + 8));
      CFDictionarySetValue(v22, v34, v26);
      ausdk::Owned<__CFString const*>::releaseRef(v34);
      ausdk::Owned<__CFDictionary *>::releaseRef(v26);
    }
    ++v23;
  }
  while (v23 != 4);
  CFDictionarySetValue(Mutable, @"element-name", v22);
  ausdk::Owned<__CFDictionary *>::releaseRef(v22);
LABEL_41:
  *a2 = Mutable;
  ausdk::Owned<__CFData *>::releaseRef(0);
  ausdk::Owned<__CFDictionary *>::releaseRef(0);
  return 0;
}

void sub_21BAA9470(_Unwind_Exception *a1)
{
  ausdk::Owned<__CFDictionary *>::releaseRef(v2);
  ausdk::Owned<__CFData *>::releaseRef(0);
  ausdk::Owned<__CFDictionary *>::releaseRef(v1);
  _Unwind_Resume(a1);
}

void ausdk::Owned<__CFData *>::releaseRef(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t ausdk::AUBase::GetParameterHistoryInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, float *a4, float *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetParameterInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  return 4294956418;
}

uint64_t ausdk::AUBase::GetParameterList(ausdk::AUBase *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  uint64_t v7 = *((void *)Scope + 5);
  if (v7)
  {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    unsigned int v10 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = (*((void *)Scope + 3) - *((void *)Scope + 2)) >> 3;
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t Element = ausdk::AUScope::GetElement(Scope, v9);
    unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)Element + 16))(Element);
    if (v13 > v10)
    {
      uint64_t v11 = Element;
      unsigned int v10 = v13;
    }
    ++v9;
  }
  while (v8 != v9);
  if (a3 && v11) {
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v11 + 24))(v11, a3);
  }
LABEL_12:
  *a4 = v10;
  return 0;
}

uint64_t ausdk::AUBase::SetConnection(const void **this, const AudioUnitConnection *a2)
{
  uint64_t Element = (AudioUnitConnection *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), a2->destInputNumber);
  sourceAudioUnit = a2->sourceAudioUnit;
  if (!a2->sourceAudioUnit) {
    goto LABEL_6;
  }
  UInt32 ioDataSize = 40;
  uint64_t result = AudioUnitGetProperty(sourceAudioUnit, 8u, 2u, a2->sourceOutputNumber, outData, &ioDataSize);
  if (!result)
  {
    uint64_t result = ausdk::AUBase::DispatchSetProperty(this, 8, 1, a2->destInputNumber, outData, 40);
    if (!result)
    {
      if (a2->sourceAudioUnit)
      {
        Element[10].destInputNumber = 1;
        Element[12] = *a2;
        (*((void (**)(AudioUnitConnection *, void))Element->sourceAudioUnit + 8))(Element, 0);
LABEL_7:
        (*((void (**)(const void **, uint64_t, uint64_t, void))*this + 54))(this, 1, 1, a2->destInputNumber);
        return 0;
      }
LABEL_6:
      Element[10].destInputNumber = 0;
      ausdk::AUBufferList::Deallocate(&Element[9].sourceAudioUnit);
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t ausdk::AUBase::SetBusCount(ausdk::AUBase *this, unsigned int a2, unsigned int a3)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  uint64_t Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a2);
  ausdk::AUScope::SetNumberOfElements(Scope, a3);
  return 0;
}

uint64_t ausdk::AUBase::ScheduleParameter(ausdk::AUBase *this, const AudioUnitParameterEvent *a2, int a3)
{
  int v6 = (*(uint64_t (**)(ausdk::AUBase *))(*(void *)this + 160))(this);
  if (a3)
  {
    int v7 = v6;
    uint64_t v8 = 0;
    do
    {
      unsigned int v9 = &a2[v8];
      if (v9->eventType == kParameterEvent_Immediate) {
        (*(void (**)(ausdk::AUBase *, void, void, void, void, AudioUnitParameterValue))(*(void *)this + 152))(this, v9->parameter, v9->scope, v9->element, v9->eventValues.immediate.bufferOffset, v9->eventValues.immediate.value);
      }
      if (v7)
      {
        unsigned int v10 = (_OWORD *)*((void *)this + 49);
        unint64_t v11 = *((void *)this + 50);
        if ((unint64_t)v10 >= v11)
        {
          uint64_t v14 = *((void *)this + 48);
          uint64_t v15 = ((uint64_t)v10 - v14) >> 5;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59) {
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - v14;
          if (v17 >> 4 > v16) {
            unint64_t v16 = v17 >> 4;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterEvent>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          unsigned int v20 = (_OWORD *)(v18 + 32 * v15);
          AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 eventValues = v9->eventValues;
          *unsigned int v20 = *(_OWORD *)&v9->scope;
          v20[1] = eventValues;
          unsigned int v23 = (char *)*((void *)this + 48);
          long long v22 = (char *)*((void *)this + 49);
          CFTypeID v24 = v20;
          if (v22 != v23)
          {
            do
            {
              long long v25 = *((_OWORD *)v22 - 1);
              *(v24 - 2) = *((_OWORD *)v22 - 2);
              *(v24 - 1) = v25;
              v24 -= 2;
              v22 -= 32;
            }
            while (v22 != v23);
            long long v22 = (char *)*((void *)this + 48);
          }
          unsigned int v13 = v20 + 2;
          *((void *)this + 48) = v24;
          *((void *)this + 49) = v20 + 2;
          *((void *)this + 50) = v18 + 32 * v19;
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v12 = v9->eventValues;
          *unsigned int v10 = *(_OWORD *)&v9->scope;
          v10[1] = v12;
          unsigned int v13 = v10 + 2;
        }
        *((void *)this + 49) = v13;
      }
      ++v8;
    }
    while (v8 != a3);
  }
  return 0;
}

uint64_t ausdk::AUBase::SetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t ausdk::AUBase::GetParameter(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t ausdk::AUBase::RemoveRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  int v6 = ausdk::AUThreadSafeList<ausdk::AUBase::RenderCallback>::AllocNode((uint64_t)this + 224);
  *((_DWORD *)v6 + 2) = 2;
  _OWORD v6[2] = (unint64_t)a2;
  _DWORD v6[3] = a3;
  do
  {
    unint64_t v7 = atomic_load((unint64_t *)this + 29);
    *int v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 29, &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

unint64_t *ausdk::AUThreadSafeList<ausdk::AUBase::RenderCallback>::AllocNode(uint64_t a1)
{
  do
  {
    uint64_t result = (unint64_t *)atomic_load((unint64_t *)(a1 + 16));
    if (!result) {
      operator new();
    }
    uint64_t v3 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v3, 0);
  }
  while (v3 != result);
  unint64_t v4 = *result;
  if (*result)
  {
    BOOL v5 = (unint64_t *)*result;
    do
    {
      int v6 = v5;
      BOOL v5 = (unint64_t *)*v5;
    }
    while (v5);
    do
    {
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 16));
      *int v6 = v7;
      unint64_t v8 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), &v8, v4);
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t ausdk::AUBase::SetRenderNotification(ausdk::AUBase *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  if (!a2) {
    return 4294967246;
  }
  *((unsigned char *)this + 248) = 1;
  int v6 = ausdk::AUThreadSafeList<ausdk::AUBase::RenderCallback>::AllocNode((uint64_t)this + 224);
  *((_DWORD *)v6 + 2) = 1;
  _OWORD v6[2] = (unint64_t)a2;
  _DWORD v6[3] = a3;
  do
  {
    unint64_t v7 = atomic_load((unint64_t *)this + 29);
    *int v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 29, &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

uint64_t ausdk::AUBase::RemovePropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, int a5)
{
  uint64_t v6 = *((void *)this + 51);
  BOOL v5 = (long long *)*((void *)this + 52);
  if ((long long *)v6 != v5)
  {
    while (*(_DWORD *)v6 != a2
         || *(void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))(v6 + 8) != a3
         || a5 && *(void **)(v6 + 16) != a4)
    {
      v6 += 24;
      if ((long long *)v6 == v5) {
        return 0;
      }
    }
    if ((long long *)v6 != v5)
    {
      unint64_t v8 = (long long *)(v6 + 24);
      if ((long long *)(v6 + 24) != v5)
      {
        do
        {
          if (*(_DWORD *)v8 != a2
            || *((void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))v8
               + 1) != a3
            || a5 && *((void **)v8 + 2) != a4)
          {
            long long v9 = *v8;
            *(void *)(v6 + 16) = *((void *)v8 + 2);
            *(_OWORD *)uint64_t v6 = v9;
            v6 += 24;
          }
          unint64_t v8 = (long long *)((char *)v8 + 24);
        }
        while (v8 != v5);
        BOOL v5 = (long long *)*((void *)this + 52);
      }
      if ((long long *)v6 != v5) {
        *((void *)this + 52) = v6;
      }
    }
  }
  return 0;
}

uint64_t ausdk::AUBase::AddPropertyListener(ausdk::AUBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  long long v9 = (void *)*((void *)this + 51);
  unint64_t v8 = (void *)*((void *)this + 52);
  if (v9 == v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 53) - (void)v9) >> 3) > 0x1F)
    {
      unint64_t v8 = (void *)*((void *)this + 51);
    }
    else
    {
      unsigned int v10 = operator new(0x300uLL);
      *((void *)this + 51) = v10;
      *((void *)this + 52) = v10;
      *((void *)this + 53) = v10 + 96;
      if (v9)
      {
        operator delete(v9);
        unint64_t v8 = (void *)*((void *)this + 52);
      }
      else
      {
        unint64_t v8 = v10;
      }
    }
  }
  unint64_t v11 = *((void *)this + 53);
  if ((unint64_t)v8 >= v11)
  {
    unsigned int v13 = (void *)*((void *)this + 51);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v8 - v13) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v13) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = (char *)operator new(24 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    unint64_t v18 = &v17[8 * (v8 - v13)];
    *(_DWORD *)unint64_t v18 = a2;
    *((void *)v18 + 1) = a3;
    *((void *)v18 + 2) = a4;
    AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v12 = v18 + 24;
    if (v8 != v13)
    {
      do
      {
        long long v19 = *(_OWORD *)(v8 - 3);
        *((void *)v18 - 1) = *(v8 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        v8 -= 3;
      }
      while (v8 != v13);
      unint64_t v8 = (void *)*((void *)this + 51);
    }
    *((void *)this + 51) = v18;
    *((void *)this + 52) = v12;
    *((void *)this + 53) = &v17[24 * v16];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v8 = a2;
    AudioUnitParameterEvent::$30DB46DA13B14C3192C3DF0E34A08043 v12 = v8 + 3;
    v8[1] = a3;
    _OWORD v8[2] = a4;
  }
  *((void *)this + 52) = v12;
  return 0;
}

uint64_t ausdk::AUBase::RemovePropertyValue(ausdk::AUBase *this)
{
  return 4294956445;
}

uint64_t ausdk::AUBase::SetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetProperty(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::GetPropertyInfo(ausdk::AUBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t ausdk::AUBase::Reset(ausdk::AUBase *this)
{
  return 0;
}

uint64_t ausdk::AUBase::Initialize(ausdk::AUBase *this)
{
  return 0;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    unint64_t v4 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(__n);
    this->__begin_ = v4;
    this->__end_cap_.__value_ = &v4[v5];
    bzero(v4, 4 * __n);
    this->__end_ = &v4[__n];
  }
  return this;
}

void sub_21BAA9FB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ausdk::AUBase::DoRender(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    if (!a2) {
      return a2;
    }
    goto LABEL_3;
  }
  uint64_t v5 = (void *)(a1 + 440);
  if (*(char *)(a1 + 463) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  int v6 = 136315394;
  unint64_t v7 = v5;
  __int16 v8 = 1024;
  int v9 = a2;
  _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, render err: %d", (uint8_t *)&v6, 0x12u);
  if (a2)
  {
LABEL_3:
    if (!*(_DWORD *)(a1 + 340))
    {
      *(_DWORD *)(a1 + 340) = a2;
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 432))(a1, 22, 0, 0);
    }
  }
  return a2;
}

char *ausdk::AUBase::SetAFactoryPresetAsCurrent(char *this, const AUPreset *a2)
{
  if ((a2->presetNumber & 0x80000000) == 0 && a2->presetName)
  {
    uint64_t v3 = this;
    unint64_t v4 = (AUPreset *)(this + 360);
    CFRelease(*((CFTypeRef *)this + 46));
    *unint64_t v4 = *a2;
    uint64_t v5 = (const void *)v3[46];
    return (char *)CFRetain(v5);
  }
  return this;
}

_DWORD *ausdk::AUBufferList::PrepareNullBuffer(ausdk::AUBufferList *this, const AudioStreamBasicDescription *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v5 = a2->mChannelsPerFrame;
  }
  else {
    UInt32 v5 = 1;
  }
  if (v5 > *((_DWORD *)this + 4))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      v14[0] = 67109120;
      v14[1] = -10868;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "throwing %d", (uint8_t *)v14, 8u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    ausdk::AUException::AUException(exception, -10868);
  }
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = 1;
  }
  int v6 = (_DWORD *)*((void *)this + 1);
  unint64_t v7 = v6 + 12;
  uint64_t v8 = v6[12];
  if (v6[12] > *v6)
  {
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](v13, "AllocatedBuffer::PrepareNull(): too many buffers");
  }
  if (v8)
  {
    UInt32 v9 = a2->mBytesPerFrame * a3;
    uint64_t v10 = v6 + 16;
    do
    {
      *((_DWORD *)v10 - 2) = mChannelsPerFrame;
      *((_DWORD *)v10 - 1) = v9;
      *uint64_t v10 = 0;
      v10 += 2;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)this = 2;
  return v7;
}

void sub_21BAAA2D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ausdk::AUIOElement::~AUIOElement(ausdk::AUIOElement *this)
{
  *(void *)this = &unk_26CBB19B8;
  ausdk::AUBufferList::Deallocate((void *)this + 18);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }

  ausdk::AUElement::~AUElement((const void **)this);
}

void ausdk::ComponentBase::~ComponentBase(ausdk::ComponentBase *this)
{
}

uint64_t anonymous namespace'::CustomBufferAllocator::Deallocate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270EE23F0](a2);
}

void anonymous namespace'::CustomBufferAllocator::~CustomBufferAllocator(_anonymous_namespace_::CustomBufferAllocator *this)
{
}

uint64_t ausdk::AUMIDIBase::HandleMIDIEvent(ausdk::AUMIDIBase *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 17)) {
    return 4294956429;
  }
  if (a2 >> 4 == 8) {
    return (*(uint64_t (**)(ausdk::AUMIDIBase *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 88))(this, a3, a4, a5, a6);
  }
  if (a2 >> 4 != 9) {
    return (*(uint64_t (**)(void))(*(void *)this + 72))();
  }
  uint64_t v6 = *(void *)this;
  if (a5) {
    return (*(uint64_t (**)(void))(v6 + 80))();
  }
  else {
    return (*(uint64_t (**)(void))(v6 + 88))();
  }
}

uint64_t ausdk::AUMIDIBase::DelegateSetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateGetProperty(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  return 4294956417;
}

uint64_t ausdk::AUMIDIBase::DelegateGetPropertyInfo(ausdk::AUMIDIBase *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 4294956417;
}

uint64_t (*ausdk::AUBaseLookup::Lookup(ausdk::AUBaseLookup *this))(ausdk *__hidden this, void *)
{
  if ((this - 1) > 0x11) {
    return 0;
  }
  else {
    return off_26CBB3620[(int)this - 1];
  }
}

uint64_t ausdk::AUMethodRemovePropertyListenerWithUserData(ausdk *this, void *a2, uint64_t a3, void (*a4)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a5)
{
  uint64_t v9 = *((void *)this + 67);
  if (v9) {
    (*(void (**)(void, void *, uint64_t, void, void *))(*(void *)v9 + 16))(*((void *)this + 67), a2, a3, a4, a5);
  }
  uint64_t v10 = (*(uint64_t (**)(char *, void *, uint64_t, void, uint64_t))(*((void *)this + 8) + 120))((char *)this + 64, a2, a3, a4, 1);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  return v10;
}

void sub_21BAAA614(void *a1)
{
}

uint64_t ausdk::AUMethodScheduleParameters(ausdk *this, char *a2, const AudioUnitParameterEvent *a3)
{
  if (!a2 || !a3) {
    return (*(uint64_t (**)(void))(*((void *)this + 8) + 168))();
  }
  uint64_t v3 = 0;
  BOOL v4 = 0;
  UInt32 v5 = a2 + 28;
  while (1)
  {
    int v6 = *(v5 - 4);
    if (v6 == 2) {
      break;
    }
    if (v6 == 1 && (*(v5 - 2) & 0x7FFFFFFFu) >= 0x7F800000) {
      goto LABEL_11;
    }
LABEL_10:
    BOOL v4 = ++v3 >= (unint64_t)a3;
    v5 += 8;
    if (a3 == v3) {
      goto LABEL_11;
    }
  }
  if ((*(v5 - 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    goto LABEL_10;
  }
LABEL_11:
  if (v4) {
    return (*(uint64_t (**)(void))(*((void *)this + 8) + 168))();
  }
  return 4294900553;
}

uint64_t ausdk::AUMethodRemoveRenderNotify(ausdk *this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  uint64_t v7 = *((void *)this + 67);
  if (v7) {
    (*(void (**)(void, void *, int (*)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *))(*(void *)v7 + 16))(*((void *)this + 67), a2, a3, a4);
  }
  uint64_t v8 = (*(uint64_t (**)(char *, void *, int (*)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *))(*((void *)this + 8) + 136))((char *)this + 64, a2, a3, a4);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  return v8;
}

void sub_21BAAA8AC(void *a1)
{
}

uint64_t ausdk::AUMethodAddRenderNotify(ausdk *this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  uint64_t v7 = *((void *)this + 67);
  if (v7) {
    (*(void (**)(void, void *, int (*)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *))(*(void *)v7 + 16))(*((void *)this + 67), a2, a3, a4);
  }
  uint64_t v8 = (*(uint64_t (**)(char *, void *, int (*)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *))(*((void *)this + 8) + 128))((char *)this + 64, a2, a3, a4);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  return v8;
}

void sub_21BAAAA10(void *a1)
{
}

uint64_t ausdk::AUMethodRemovePropertyListener(ausdk *this, void *a2, uint64_t a3, void (*a4)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))
{
  uint64_t v7 = *((void *)this + 67);
  if (v7) {
    (*(void (**)(void, void *, uint64_t, void (*)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int)))(*(void *)v7 + 16))(*((void *)this + 67), a2, a3, a4);
  }
  uint64_t v8 = (*(uint64_t (**)(char *, void *, uint64_t, void, void))(*((void *)this + 8) + 120))((char *)this + 64, a2, a3, 0, 0);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  return v8;
}

void sub_21BAAAB7C(void *a1)
{
}

uint64_t ausdk::AUMethodAddPropertyListener(ausdk *this, void *a2, uint64_t a3, void (*a4)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a5)
{
  uint64_t v9 = *((void *)this + 67);
  if (v9) {
    (*(void (**)(void, void *, uint64_t, void, void *))(*(void *)v9 + 16))(*((void *)this + 67), a2, a3, a4, a5);
  }
  uint64_t v10 = (*(uint64_t (**)(char *, void *, uint64_t, void, void *))(*((void *)this + 8) + 112))((char *)this + 64, a2, a3, a4, a5);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  return v10;
}

void sub_21BAAACF0(void *a1)
{
}

uint64_t ausdk::AUMethodGetParameter(ausdk *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v11 = *((void *)this + 67);
  if (v11) {
    (*(void (**)(void, void *, uint64_t, uint64_t, uint64_t, float *))(*(void *)v11 + 16))(*((void *)this + 67), a2, a3, a4, a5, a6);
  }
  if (a5)
  {
    uint64_t v12 = (*(uint64_t (**)(char *, void *, uint64_t, uint64_t, uint64_t, float *))(*((void *)this + 8) + 144))((char *)this + 64, a2, a3, a4, a5, a6);
    if (!v11) {
      return v12;
    }
    goto LABEL_7;
  }
  uint64_t v12 = 4294967246;
  if (v11) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return v12;
}

void sub_21BAAAE7C(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21BAAAE64);
}

uint64_t (*ausdk::AUOutputLookup::Lookup(ausdk::AUOutputLookup *this))(ausdk *this, void *a2)
{
  if ((this - 1) > 0x11) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = off_26CBB3620[(int)this - 1];
  }
  if (this == 514) {
    uint64_t v2 = ausdk::AUMethodStop;
  }
  else {
    uint64_t v2 = 0;
  }
  if (this == 513) {
    uint64_t v2 = ausdk::AUMethodStart;
  }
  if (v1) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t ausdk::AUMethodStop(ausdk *this, void *a2)
{
  uint64_t v3 = *((void *)this + 67);
  if (v3) {
    (*(void (**)(void, void *))(*(void *)v3 + 16))(*((void *)this + 67), a2);
  }
  uint64_t v4 = (*(uint64_t (**)(char *, void *))(*((void *)this + 8) + 448))((char *)this + 64, a2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return v4;
}

void sub_21BAAB108(void *a1)
{
}

uint64_t (*ausdk::AUComplexOutputLookup::Lookup(ausdk::AUComplexOutputLookup *this))(ausdk *this, int *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, unsigned int a6, unsigned int *a7, AudioStreamPacketDescription *a8, AudioBufferList *a9, void *a10, unsigned int *a11)
{
  int v1 = this - 1;
  if ((this - 1) <= 0x11 && ((0x1880uLL >> v1) & 1) == 0) {
    return (uint64_t (*)(ausdk *, int *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, unsigned int *, AudioStreamPacketDescription *, AudioBufferList *, void *, unsigned int *))off_26CBB3620[v1];
  }
  if (this == 514) {
    uint64_t v2 = ausdk::AUMethodStop;
  }
  else {
    uint64_t v2 = 0;
  }
  if (this == 513) {
    uint64_t v2 = ausdk::AUMethodStart;
  }
  if (!v2)
  {
    if (this == 19) {
      return ausdk::AUMethodComplexRender;
    }
    else {
      return 0;
    }
  }
  return (uint64_t (*)(ausdk *, int *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, unsigned int *, AudioStreamPacketDescription *, AudioBufferList *, void *, unsigned int *))v2;
}

uint64_t ausdk::AUMethodComplexRender(ausdk *this, int *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, unsigned int a6, unsigned int *a7, AudioStreamPacketDescription *a8, AudioBufferList *a9, void *a10, unsigned int *a11)
{
  int v13 = 0;
  uint64_t v11 = 4294967246;
  if (a3 && a8)
  {
    if (!a2) {
      a2 = &v13;
    }
    return (*(uint64_t (**)(char *, int *))(*((void *)this + 8) + 192))((char *)this + 64, a2);
  }
  return v11;
}

uint64_t (*ausdk::AUBaseProcessLookup::Lookup(ausdk::AUBaseProcessLookup *this))(ausdk *__hidden this, void *)
{
  if ((this - 1) > 0x11) {
    int v1 = 0;
  }
  else {
    int v1 = off_26CBB3620[(int)this - 1];
  }
  if (this == 20) {
    uint64_t v2 = ausdk::AUMethodProcess;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    return v1;
  }
  else {
    return (uint64_t (*)(ausdk *__hidden, void *))v2;
  }
}

uint64_t ausdk::AUMethodProcess(ausdk *this, int *a2, unsigned int *a3, const AudioTimeStamp *a4, _DWORD *a5, AudioBufferList *a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v33 = 0;
  if (a2)
  {
    uint64_t v10 = a2;
    int v11 = *a2;
    if ((*a2 & 0x200) != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    LOWORD(v11) = 0;
    uint64_t v10 = &v33;
  }
  uint64_t v12 = 4294967246;
  if (!a3 || !a5) {
    return v12;
  }
LABEL_7:
  int v13 = (char *)this + 64;
  if ((v11 & 0x200) != 0) {
    goto LABEL_31;
  }
  if (!*((unsigned char *)this + 81))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      CFTypeID v27 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        CFTypeID v27 = (void *)*v27;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)CFDictionaryRef v35 = v27;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)long long v36 = -10867;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", buf, 0x12u);
    }
    uint64_t v12 = 4294956429;
    if (!*((_DWORD *)this + 101))
    {
      *((_DWORD *)this + 101) = -10867;
      (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
    }
    return v12;
  }
  unsigned int v14 = *((_DWORD *)this + 100);
  if (v14 < a4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)CFDictionaryRef v35 = v29;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)long long v36 = -10874;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", buf, 0x12u);
    }
    uint64_t v12 = 4294956422;
    if (!*((_DWORD *)this + 101))
    {
      *((_DWORD *)this + 101) = -10874;
      (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
    }
    return v12;
  }
  if (v14 != a4 && *((unsigned char *)this + 440))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        uint64_t v30 = (void *)*v30;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)CFDictionaryRef v35 = v30;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)long long v36 = -50;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", buf, 0x12u);
    }
    uint64_t v12 = 4294967246;
    if (!*((_DWORD *)this + 101)) {
      goto LABEL_49;
    }
    return v12;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk *)((char *)this + 144), 0);
  if ((*(unsigned char *)(Element + 92) & 0x20) != 0) {
    uint64_t v16 = *(unsigned int *)(Element + 108);
  }
  else {
    uint64_t v16 = 1;
  }
  int v17 = *a5;
  if (v16 == *a5)
  {
    if (v16)
    {
      uint64_t v18 = 0;
      int v19 = *(_DWORD *)(Element + 104);
      unsigned int v20 = v19 * a4;
      long long v21 = a5 + 3;
      do
      {
        if (*(void *)(v21 + 1))
        {
          unsigned int v22 = *v21;
          if (*v21 < v20)
          {
            int v28 = v19;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioComponentDescription buf = 67110144;
              *(_DWORD *)CFDictionaryRef v35 = a4;
              *(_WORD *)&v35[4] = 1024;
              *(_DWORD *)&v35[6] = v28;
              *(_WORD *)long long v36 = 1024;
              *(_DWORD *)&v36[2] = v20;
              __int16 v37 = 1024;
              int v38 = v18;
              __int16 v39 = 1024;
              unsigned int v40 = v22;
              _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioData.mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
                buf,
                0x20u);
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              CFStringRef v32 = (void *)((char *)this + 504);
              if (*((char *)this + 527) < 0) {
                CFStringRef v32 = (void *)*v32;
              }
              *(_DWORD *)AudioComponentDescription buf = 136315394;
              *(void *)CFDictionaryRef v35 = v32;
              *(_WORD *)&v35[8] = 1024;
              *(_DWORD *)long long v36 = -50;
              _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", buf, 0x12u);
            }
            uint64_t v12 = 4294967246;
            if (!*((_DWORD *)this + 101)) {
              goto LABEL_49;
            }
            return v12;
          }
          *long long v21 = v20;
        }
        ++v18;
        v21 += 4;
      }
      while (v16 != v18);
    }
LABEL_31:
    if (*((unsigned char *)this + 328)) {
      *((void *)this + 40) = pthread_self();
    }
    if (*(double *)a3 == *((double *)this + 42)) {
      return 0;
    }
    long long v23 = *(_OWORD *)a3;
    long long v24 = *((_OWORD *)a3 + 1);
    long long v25 = *((_OWORD *)a3 + 3);
    *((_OWORD *)this + 23) = *((_OWORD *)a3 + 2);
    *((_OWORD *)this + 24) = v25;
    *((_OWORD *)this + 21) = v23;
    *((_OWORD *)this + 22) = v24;
    return (*(uint64_t (**)(char *, int *, _DWORD *, _DWORD *, const AudioTimeStamp *, AudioBufferList *))(*(void *)v13 + 176))((char *)this + 64, v10, a5, a5, a4, a6);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioComponentDescription buf = 67109376;
    *(_DWORD *)CFDictionaryRef v35 = v17;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v16;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ioData.mNumberBuffers=%u, ASBD::NumberChannelStreams(input->GetStreamFormat())=%u; kAudio_ParamError",
      buf,
      0xEu);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = (void *)((char *)this + 504);
    if (*((char *)this + 527) < 0) {
      uint64_t v31 = (void *)*v31;
    }
    *(_DWORD *)AudioComponentDescription buf = 136315394;
    *(void *)CFDictionaryRef v35 = v31;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)long long v36 = -50;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", buf, 0x12u);
  }
  uint64_t v12 = 4294967246;
  if (!*((_DWORD *)this + 101))
  {
LABEL_49:
    *((_DWORD *)this + 101) = -50;
    (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
  }
  return v12;
}

void sub_21BAAB90C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  unsigned int v14 = (int *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v15 = *v14;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      if (!v15) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
    uint64_t v16 = (void *)(v11 + 504);
    if (*(char *)(v11 + 527) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = v16;
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = v15;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", (uint8_t *)&buf, 0x12u);
    if (v15)
    {
LABEL_7:
      if (!*(_DWORD *)(v11 + 404))
      {
        *(_DWORD *)(v11 + 404) = v15;
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)(v11 + 64) + 432))(v12, 22, 0, 0);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v17 = (void *)(v11 + 504);
      if (*(char *)(v11 + 527) < 0) {
        int v17 = (void *)*v17;
      }
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = v17;
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = -1;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, process err: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!*(_DWORD *)(v11 + 404))
    {
      *(_DWORD *)(v11 + 404) = -1;
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)(v11 + 64) + 432))(v12, 22, 0, 0);
    }
  }
LABEL_13:
  __cxa_end_catch();
  JUMPOUT(0x21BAAB564);
}

void sub_21BAABAE4()
{
}

void sub_21BAABAF0()
{
}

void sub_21BAABB00()
{
}

uint64_t (*ausdk::AUBaseProcessMultipleLookup::Lookup(ausdk::AUBaseProcessMultipleLookup *this))(ausdk *__hidden this, void *)
{
  if ((this - 1) > 0x11) {
    int v1 = 0;
  }
  else {
    int v1 = off_26CBB3620[(int)this - 1];
  }
  if (this == 21) {
    uint64_t v2 = ausdk::AUMethodProcessMultiple;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    return v1;
  }
  else {
    return (uint64_t (*)(ausdk *__hidden, void *))v2;
  }
}

uint64_t ausdk::AUMethodProcessMultiple(ausdk *this, int *a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, uint64_t a6, const AudioBufferList **a7, uint64_t a8, AudioBufferList **a9)
{
  unint64_t v10 = (unint64_t)a7;
  uint64_t v12 = a5;
  unint64_t v13 = (unint64_t)a4;
  uint64_t v72 = *MEMORY[0x263EF8340];
  int v62 = 0;
  if (a2)
  {
    uint64_t v16 = a2;
    int v17 = *a2;
    if ((*a2 & 0x200) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    LOWORD(v17) = 0;
    uint64_t v16 = &v62;
  }
  uint64_t v18 = 4294967246;
  if (!a3 || !a6 || !a8) {
    return v18;
  }
LABEL_8:
  int v19 = (char *)this + 64;
  if ((v17 & 0x200) != 0) {
    goto LABEL_59;
  }
  if (!*((unsigned char *)this + 81))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        uint64_t v48 = (void *)*v48;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)long long v64 = v48;
      *(_WORD *)&v64[8] = 1024;
      *(_DWORD *)uint64_t v65 = -10867;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
    }
    uint64_t v18 = 4294956429;
    if (!*((_DWORD *)this + 101))
    {
      *((_DWORD *)this + 101) = -10867;
      (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
    }
    return v18;
  }
  unsigned int v20 = *((_DWORD *)this + 100);
  if (v20 < a4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      long long v49 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        long long v49 = (void *)*v49;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)long long v64 = v49;
      *(_WORD *)&v64[8] = 1024;
      *(_DWORD *)uint64_t v65 = -10874;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
    }
    uint64_t v18 = 4294956422;
    if (!*((_DWORD *)this + 101))
    {
      *((_DWORD *)this + 101) = -10874;
      (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
    }
    return v18;
  }
  if (v20 != a4 && *((unsigned char *)this + 440))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      long long v50 = (void *)((char *)this + 504);
      if (*((char *)this + 527) < 0) {
        long long v50 = (void *)*v50;
      }
      *(_DWORD *)AudioComponentDescription buf = 136315394;
      *(void *)long long v64 = v50;
      *(_WORD *)&v64[8] = 1024;
      *(_DWORD *)uint64_t v65 = -50;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
    }
    uint64_t v18 = 4294967246;
    if (!*((_DWORD *)this + 101))
    {
      *((_DWORD *)this + 101) = -50;
      (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))((char *)this + 64, 22, 0, 0);
    }
    return v18;
  }
  unsigned int v58 = a7;
  unsigned int v59 = a5;
  unsigned int v61 = a4;
  double v60 = (char *)this + 64;
  if (a5)
  {
    uint64_t v21 = 0;
    BOOL v22 = 1;
    uint64_t v55 = (ausdk *)((char *)this + 144);
    while (1)
    {
      BOOL v57 = v22;
      if (*(void *)(a6 + 8 * v21))
      {
        uint64_t Element = ausdk::AUScope::SafeGetElement(v55, v21);
        if ((*(unsigned char *)(Element + 92) & 0x20) != 0) {
          uint64_t v24 = *(unsigned int *)(Element + 108);
        }
        else {
          uint64_t v24 = 1;
        }
        long long v25 = *(_DWORD **)(a6 + 8 * v21);
        int v26 = *v25;
        if (v24 != *v25)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioComponentDescription buf = 67109632;
            *(_DWORD *)long long v64 = v21;
            *(_WORD *)&v64[4] = 1024;
            *(_DWORD *)&v64[6] = v26;
            *(_WORD *)uint64_t v65 = 1024;
            *(_DWORD *)&v65[2] = v24;
            _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "inInputBufferLists[%u]->mNumberBuffers=%u, ASBD::NumberChannelStreams(input.GetStreamFormat())=%u; kAudio_ParamError",
              buf,
              0x14u);
          }
          int v47 = v60;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            uint64_t v54 = (void *)((char *)this + 504);
            if (*((char *)this + 527) < 0) {
              uint64_t v54 = (void *)*v54;
            }
            *(_DWORD *)AudioComponentDescription buf = 136315394;
            *(void *)long long v64 = v54;
            *(_WORD *)&v64[8] = 1024;
            *(_DWORD *)uint64_t v65 = -50;
            _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
          }
          uint64_t v18 = 4294967246;
          if (*((_DWORD *)this + 101)) {
            return v18;
          }
LABEL_88:
          *((_DWORD *)this + 101) = -50;
          (*(void (**)(char *, uint64_t, void, void))(*((void *)this + 8) + 432))(v47, 22, 0, 0);
          return v18;
        }
        if (v24) {
          break;
        }
      }
LABEL_34:
      BOOL v22 = ++v21 < (unint64_t)v59;
      if (v21 == v59) {
        goto LABEL_45;
      }
    }
    uint64_t v27 = 0;
    unsigned int v28 = *(_DWORD *)(Element + 104) * v61;
    uint64_t v29 = v25 + 4;
    while (*v29)
    {
      unsigned int v30 = *((_DWORD *)v29 - 1);
      if (v30 < v28)
      {
        int v56 = *(_DWORD *)(Element + 104);
        uint64_t v31 = v60;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioComponentDescription buf = 67110400;
          *(_DWORD *)long long v64 = v61;
          *(_WORD *)&v64[4] = 1024;
          *(_DWORD *)&v64[6] = v56;
          *(_WORD *)uint64_t v65 = 1024;
          *(_DWORD *)&v65[2] = v28;
          __int16 v66 = 1024;
          int v67 = v21;
          __int16 v68 = 1024;
          int v69 = v27;
          __int16 v70 = 1024;
          unsigned int v71 = v30;
          _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; inInputBufferLists[%u].mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
            buf,
            0x26u);
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
LABEL_41:
          if (!*((_DWORD *)this + 101))
          {
            *((_DWORD *)this + 101) = -50;
            (*(void (**)(char *, uint64_t, void, void))(*(void *)v31 + 432))(v31, 22, 0, 0);
          }
          if (v57) {
            return 4294967246;
          }
          goto LABEL_45;
        }
LABEL_89:
        long long v51 = (void *)((char *)this + 504);
        if (*((char *)this + 527) < 0) {
          long long v51 = (void *)*v51;
        }
        *(_DWORD *)AudioComponentDescription buf = 136315394;
        *(void *)long long v64 = v51;
        *(_WORD *)&v64[8] = 1024;
        *(_DWORD *)uint64_t v65 = -50;
        _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
        goto LABEL_41;
      }
      ++v27;
      v29 += 2;
      if (v24 == v27) {
        goto LABEL_34;
      }
    }
    uint64_t v31 = v60;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_45:
  int v19 = v60;
  unint64_t v13 = v61;
  unint64_t v10 = v58;
  uint64_t v12 = v59;
  if (!v58)
  {
LABEL_59:
    if (*((unsigned char *)this + 328)) {
      *((void *)this + 40) = pthread_self();
    }
    if (*(double *)a3 == *((double *)this + 42)) {
      return 0;
    }
    long long v42 = *(_OWORD *)a3;
    long long v43 = *((_OWORD *)a3 + 1);
    long long v44 = *((_OWORD *)a3 + 3);
    *((_OWORD *)this + 23) = *((_OWORD *)a3 + 2);
    *((_OWORD *)this + 24) = v44;
    *((_OWORD *)this + 21) = v42;
    *((_OWORD *)this + 22) = v43;
    return (*(uint64_t (**)(char *, int *, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v19 + 184))(v19, v16, v13, v12, a6, v10, a8);
  }
  uint64_t v32 = 0;
  while (1)
  {
    if (*(void *)(a8 + 8 * v32))
    {
      uint64_t v33 = ausdk::AUScope::SafeGetElement((ausdk *)((char *)this + 192), v32);
      if ((*(unsigned char *)(v33 + 92) & 0x20) != 0) {
        uint64_t v34 = *(unsigned int *)(v33 + 108);
      }
      else {
        uint64_t v34 = 1;
      }
      CFDictionaryRef v35 = *(_DWORD **)(a8 + 8 * v32);
      int v36 = *v35;
      if (v34 != *v35)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioComponentDescription buf = 67109632;
          *(_DWORD *)long long v64 = v32;
          *(_WORD *)&v64[4] = 1024;
          *(_DWORD *)&v64[6] = v36;
          *(_WORD *)uint64_t v65 = 1024;
          *(_DWORD *)&v65[2] = v34;
          _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ioOutputBufferLists[%u]->mNumberBuffers=%u, ASBD::NumberChannelStreams(output.GetStreamFormat())=%u; kAudio_ParamError",
            buf,
            0x14u);
        }
        int v47 = v60;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          long long v53 = (void *)((char *)this + 504);
          if (*((char *)this + 527) < 0) {
            long long v53 = (void *)*v53;
          }
          *(_DWORD *)AudioComponentDescription buf = 136315394;
          *(void *)long long v64 = v53;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)uint64_t v65 = -50;
          _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
        }
        uint64_t v18 = 4294967246;
        if (*((_DWORD *)this + 101)) {
          return v18;
        }
        goto LABEL_88;
      }
      if (v34) {
        break;
      }
    }
LABEL_58:
    ++v32;
    int v19 = v60;
    unint64_t v13 = v61;
    unint64_t v10 = v58;
    uint64_t v12 = v59;
    if (v32 == v58) {
      goto LABEL_59;
    }
  }
  uint64_t v37 = 0;
  int v38 = *(_DWORD *)(v33 + 104);
  unsigned int v39 = v38 * v61;
  unsigned int v40 = v35 + 3;
  while (!*(void *)(v40 + 1))
  {
LABEL_57:
    ++v37;
    v40 += 4;
    if (v34 == v37) {
      goto LABEL_58;
    }
  }
  unsigned int v41 = *v40;
  if (*v40 >= v39)
  {
    unsigned int *v40 = v39;
    goto LABEL_57;
  }
  int v46 = v38;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioComponentDescription buf = 67110400;
    *(_DWORD *)long long v64 = v61;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = v46;
    *(_WORD *)uint64_t v65 = 1024;
    *(_DWORD *)&v65[2] = v39;
    __int16 v66 = 1024;
    int v67 = v32;
    __int16 v68 = 1024;
    int v69 = v37;
    __int16 v70 = 1024;
    unsigned int v71 = v41;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%u frames, %u bytes/frame, expected %u-byte buffer; ioOutputBufferLists[%u]->mBuffers[%u].mDataByteSize=%u; kAudio_ParamError",
      buf,
      0x26u);
  }
  int v47 = v60;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    long long v52 = (void *)((char *)this + 504);
    if (*((char *)this + 527) < 0) {
      long long v52 = (void *)*v52;
    }
    *(_DWORD *)AudioComponentDescription buf = 136315394;
    *(void *)long long v64 = v52;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)uint64_t v65 = -50;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", buf, 0x12u);
  }
  uint64_t v18 = 4294967246;
  if (!*((_DWORD *)this + 101)) {
    goto LABEL_88;
  }
  return v18;
}

void sub_21BAAC564(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  int v17 = (int *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v18 = *v17;
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      if (!v18) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
    int v19 = (void *)(v15 + 504);
    if (*(char *)(v15 + 527) < 0) {
      int v19 = (void *)*v19;
    }
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = v19;
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = v18;
    _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", (uint8_t *)&buf, 0x12u);
    if (v18)
    {
LABEL_7:
      if (!*(_DWORD *)(v15 + 404))
      {
        *(_DWORD *)(v15 + 404) = v18;
        (*(void (**)(void))(*(void *)(v15 + 64) + 432))();
      }
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      unsigned int v20 = (void *)(v15 + 504);
      if (*(char *)(v15 + 527) < 0) {
        unsigned int v20 = (void *)*v20;
      }
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = v20;
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = -1;
      _os_log_error_impl(&dword_21B9BB000, &_os_log_internal, OS_LOG_TYPE_ERROR, "  from %s, processmultiple err: %d", (uint8_t *)&buf, 0x12u);
    }
    if (!*(_DWORD *)(v15 + 404))
    {
      *(_DWORD *)(v15 + 404) = -1;
      (*(void (**)(void))(*(void *)(v15 + 64) + 432))();
    }
  }
LABEL_13:
  __cxa_end_catch();
  JUMPOUT(0x21BAABFACLL);
}

void sub_21BAAC750()
{
}

void sub_21BAAC75C()
{
}

void sub_21BAAC76C()
{
}

uint64_t ausdk::AUMethodMIDIEventList(ausdk *this, void *a2, uint64_t a3, const MIDIEventList *a4)
{
  if (a3) {
    return (*(uint64_t (**)(void))(*((void *)this + 8) + 472))();
  }
  else {
    return 4294967246;
  }
}

uint64_t ausdk::AUMethodSysEx(ausdk *this, void *a2, const unsigned __int8 *a3)
{
  return (*(uint64_t (**)(void))(*((void *)this + 8) + 464))();
}

uint64_t ausdk::AUMethodMIDIEvent(ausdk *this, void *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 8) + 456))();
}

uint64_t (*ausdk::AUMusicLookup::Lookup(ausdk::AUMusicLookup *this))(ausdk *__hidden this, void *)
{
  int v1 = this - 1;
  if ((this - 1) > 0x11)
  {
    if ((this - 257) > 6) {
      return 0;
    }
    else {
      return (uint64_t (*)(ausdk *__hidden, void *))*(&off_26CBB36B0 + (this - 257));
    }
  }
  else if ((0x1880uLL >> v1))
  {
    return 0;
  }
  else
  {
    return off_26CBB3620[v1];
  }
}

uint64_t ausdk::AUMethodStopNote(ausdk *this, void *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 8) + 488))();
}

uint64_t AUOOPWorkgroupManager_AddRemoteIOWorkgroup()
{
  return MEMORY[0x270EE1FF0]();
}

uint64_t AUOOPWorkgroupManager_RemoveRemoteIOWorkgroup()
{
  return MEMORY[0x270EE1FF8]();
}

uint64_t AURegistrationServerConnection_Connect()
{
  return MEMORY[0x270EE2000]();
}

uint64_t AURegistrationServerConnection_ServerPort()
{
  return MEMORY[0x270EE2008]();
}

OSStatus AudioCodecAppendInputData(AudioCodec inCodec, const void *inInputData, UInt32 *ioInputDataByteSize, UInt32 *ioNumberPackets, const AudioStreamPacketDescription *inPacketDescription)
{
  return MEMORY[0x270EE2010](inCodec, inInputData, ioInputDataByteSize, ioNumberPackets, inPacketDescription);
}

OSStatus AudioCodecGetProperty(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2018](inCodec, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioCodecGetPropertyInfo(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x270EE2020](inCodec, *(void *)&inPropertyID, outSize, outWritable);
}

OSStatus AudioCodecInitialize(AudioCodec inCodec, const AudioStreamBasicDescription *inInputFormat, const AudioStreamBasicDescription *inOutputFormat, const void *inMagicCookie, UInt32 inMagicCookieByteSize)
{
  return MEMORY[0x270EE2028](inCodec, inInputFormat, inOutputFormat, inMagicCookie, *(void *)&inMagicCookieByteSize);
}

OSStatus AudioCodecProduceOutputPackets(AudioCodec inCodec, void *outOutputData, UInt32 *ioOutputDataByteSize, UInt32 *ioNumberPackets, AudioStreamPacketDescription *outPacketDescription, UInt32 *outStatus)
{
  return MEMORY[0x270EE2030](inCodec, outOutputData, ioOutputDataByteSize, ioNumberPackets, outPacketDescription, outStatus);
}

OSStatus AudioCodecSetProperty(AudioCodec inCodec, AudioCodecPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270EE2038](inCodec, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioCodecUninitialize(AudioCodec inCodec)
{
  return MEMORY[0x270EE2040](inCodec);
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x270EE2048](inComponent, inDesc);
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  return MEMORY[0x270EE2050](inComponent, outDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x270EE2058](inInstance);
}

AudioComponent AudioComponentInstanceGetComponent(AudioComponentInstance inInstance)
{
  return (AudioComponent)MEMORY[0x270EE2060](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x270EE2068](inComponent, outInstance);
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  return (AudioComponent)MEMORY[0x270EE2070](inDesc, inName, *(void *)&inVersion, inFactory);
}

uint64_t AudioComponentRelease()
{
  return MEMORY[0x270EE2078]();
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x270EE2080](inAudioConverter, *(void *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x270EE2090](inAudioConverter);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  return MEMORY[0x270EE2098](inAudioConverter, inInputDataProc, inInputDataProcUserData, ioOutputDataPacketSize, outOutputData, outPacketDescription);
}

OSStatus AudioConverterGetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE20A0](inAudioConverter, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioConverterGetPropertyInfo(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x270EE20A8](inAudioConverter, *(void *)&inPropertyID, outSize, outWritable);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x270EE20B8](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x270EE20C0](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270EE20C8](inAudioConverter, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioFileCountUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 *outNumberItems)
{
  return MEMORY[0x270EE20E0](inAudioFile, *(void *)&inUserDataID, outNumberItems);
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE20F0](inAudioFile, *(void *)&inPropertyID, ioDataSize, outPropertyData);
}

OSStatus AudioFileGetPropertyInfo(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *outDataSize, UInt32 *isWritable)
{
  return MEMORY[0x270EE20F8](inAudioFile, *(void *)&inPropertyID, outDataSize, isWritable);
}

OSStatus AudioFileGetUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *ioUserDataSize, void *outUserData)
{
  return MEMORY[0x270EE2100](inAudioFile, *(void *)&inUserDataID, *(void *)&inIndex, ioUserDataSize, outUserData);
}

OSStatus AudioFileGetUserDataSize(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *outUserDataSize)
{
  return MEMORY[0x270EE2108](inAudioFile, *(void *)&inUserDataID, *(void *)&inIndex, outUserDataSize);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2148](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioFormatGetPropertyInfo(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *outPropertyDataSize)
{
  return MEMORY[0x270EE2150](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, outPropertyDataSize);
}

uint64_t AudioSessionAddPropertyListener_Priv()
{
  return MEMORY[0x270EE2250]();
}

uint64_t AudioSessionCopyProperty_Priv()
{
  return MEMORY[0x270EE2258]();
}

uint64_t AudioSessionCreatePrimarySession_Priv()
{
  return MEMORY[0x270EE2260]();
}

OSStatus AudioSessionGetProperty(AudioSessionPropertyID inID, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x270EE2268](*(void *)&inID, ioDataSize, outData);
}

uint64_t AudioSessionGetServerProperty()
{
  return MEMORY[0x270EE2270]();
}

uint64_t AudioSessionRemovePropertyListener_Priv()
{
  return MEMORY[0x270EE2278]();
}

uint64_t AudioSessionRequestRecordPermission()
{
  return MEMORY[0x270EE2280]();
}

OSStatus AudioSessionSetProperty(AudioSessionPropertyID inID, UInt32 inDataSize, const void *inData)
{
  return MEMORY[0x270EE2288](*(void *)&inID, *(void *)&inDataSize, inData);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x270EE22A8](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270EE22D0](inUnit, ioActionFlags, inTimeStamp, *(void *)&inOutputBusNumber, *(void *)&inNumberFrames, ioData);
}

os_workgroup_interval_t AudioWorkIntervalCreate(const char *name, os_clockid_t clock, os_workgroup_attr_t attr)
{
  return (os_workgroup_interval_t)MEMORY[0x270EE22F0](name, *(void *)&clock, attr);
}

uint64_t CADefaultLog()
{
  return MEMORY[0x270EE2300]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE4548](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x270EE4578](bundle, key, value, tableName);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x270EE4590](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x270EE45B8](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x270EE45C8](bundleID);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x270EE45E8](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x270EE4600]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EE4610](bundle, key);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x270EE4A48](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D40](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x270EE50F8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x270EE5148](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x270EE5190](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x270EE5230](theString, suffix);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x270EE5320](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x270EE5328](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5338](url);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5350](url);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5368](anURL);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A0](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A8](allocator, url);
}

Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x270EE53B0](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateFilePathURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef *error)
{
  return (CFURLRef)MEMORY[0x270EE53B8](allocator, url, error);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53C0](allocator, buffer, bufLen, isDirectory);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x270EE53D8](allocator, originalString, charactersToLeaveEscaped);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE53F8](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE5400](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x270EE5430](url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5440](anURL);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x270EE5480](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x270EE5488](alloc, uuid);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return (CFUUIDRef)MEMORY[0x270EE5498](alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x270EE54A8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

OSStatus CopyInstrumentInfoFromSoundBank(CFURLRef inURL, CFArrayRef *outInstrumentInfo)
{
  return MEMORY[0x270EE2338](inURL, outInstrumentInfo);
}

OSStatus CopyNameFromSoundBank(CFURLRef inURL, CFStringRef *outName)
{
  return MEMORY[0x270EE2340](inURL, outName);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x270EE2368](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2370](inExtAudioFile, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x270EE2390](inURL, outExtAudioFile);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270EE2398](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  return MEMORY[0x270EE23A8](inExtAudioFile, inFrameOffset);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270EE23B8](inExtAudioFile, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x270EE23C8](inFileID, inForWriting, outExtAudioFile);
}

uint64_t Float32ToNativeInt16Scaled_ARM()
{
  return MEMORY[0x270EE2400]();
}

uint64_t Float32ToNativeInt24_Portable()
{
  return MEMORY[0x270EE2408]();
}

uint64_t Float32ToNativeInt32Scaled_ARM()
{
  return MEMORY[0x270EE2410]();
}

uint64_t IPCAUIconForBundle()
{
  return MEMORY[0x270EE2440]();
}

uint64_t MSHMIGDispatchMessage()
{
  return MEMORY[0x270F91150]();
}

uint64_t MultiRadixRealFFT_Create()
{
  return MEMORY[0x270F91158]();
}

uint64_t MultiRadixRealFFT_Dispose()
{
  return MEMORY[0x270F91160]();
}

uint64_t MultiRadixRealFFT_RealInPlaceTransform()
{
  return MEMORY[0x270F91168]();
}

int32_t NSVersionOfLinkTimeLibrary(const char *libraryName)
{
  return MEMORY[0x270ED7C68](libraryName);
}

uint64_t NativeInt16ToFloat32Scaled_ARM()
{
  return MEMORY[0x270EE2448]();
}

uint64_t NativeInt24ToFloat32_Portable()
{
  return MEMORY[0x270EE2450]();
}

uint64_t NativeInt32ToFloat32Scaled_ARM()
{
  return MEMORY[0x270EE2458]();
}

uint64_t StereoDeinterleaveNativeInt16ToScaledFloat32_ARM()
{
  return MEMORY[0x270EE2468]();
}

uint64_t StereoInterleaveFloat32ToInt824_ARM()
{
  return MEMORY[0x270EE2470]();
}

uint64_t StereoInterleaveFloat32ToNativeInt16Scaled_ARM()
{
  return MEMORY[0x270EE2478]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x270EE5648]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t _CheckRPCError(const char *a1)
{
  return MEMORY[0x270EE2480](a1);
}

uint64_t GetMediaServerRPCTimeout(void)
{
  return MEMORY[0x270EE2488]();
}

uint64_t _CAInitDefaultDeferredLog(void)
{
  return MEMORY[0x270EE2490]();
}

uint64_t CACFPreferencesCopyAppValue(const __CFString *a1, const __CFString *a2)
{
  return MEMORY[0x270F91170](a1, a2);
}

uint64_t CACFPreferencesGetAppBooleanValue(const __CFString *a1, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x270F91178](a1, a2, a3);
}

uint64_t CAShouldEmitRateLimitedRTErrorLog(void)
{
  return MEMORY[0x270EE2498]();
}

uint64_t Read()
{
  return MEMORY[0x270F91180]();
}

uint64_t PowerMeter::ClearClipping(PowerMeter *this)
{
  return MEMORY[0x270F91188](this);
}

uint64_t PowerMeter::Process_Int16(PowerMeter *this, const __int16 *a2)
{
  return MEMORY[0x270F91190](this, a2);
}

uint64_t PowerMeter::Process_Int32(PowerMeter *this, const int *a2)
{
  return MEMORY[0x270F91198](this, a2);
}

uint64_t PowerMeter::SetSampleRate(PowerMeter *this, double a2)
{
  return MEMORY[0x270F911A0](this, a2);
}

uint64_t PowerMeter::Reset(PowerMeter *this)
{
  return MEMORY[0x270F911A8](this);
}

uint64_t PowerMeter::Process(PowerMeter *this, const float *a2)
{
  return MEMORY[0x270F911B0](this, a2);
}

void PowerMeter::PowerMeter(PowerMeter *this)
{
}

void SincKernel::SincKernel(SincKernel *this, double a2, double a3)
{
}

void SincKernel::~SincKernel(SincKernel *this)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, OpaqueAudioConverter *a2)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioChannelLayout *a2)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const void *a2)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const CAStreamBasicDescription *a2)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioComponentDescription *a2)
{
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioStreamBasicDescription *a2)
{
}

uint64_t CADeprecated::XMachServer::XMachServer()
{
  return MEMORY[0x270F911D0]();
}

uint64_t CADeprecated::CABufferList::AllocateBuffers(CADeprecated::CABufferList *this)
{
  return MEMORY[0x270F911D8](this);
}

uint64_t CADeprecated::XBasicMIGServer::SetServerDispatchQueue()
{
  return MEMORY[0x270F911E0]();
}

uint64_t CADeprecated::XMachReceivePort::SetMachPort(CADeprecated::XMachReceivePort *this)
{
  return MEMORY[0x270F911E8](this);
}

uint64_t CADeprecated::XMachReceivePort::CreateMachPort(CADeprecated::XMachReceivePort *this)
{
  return MEMORY[0x270F911F0](this);
}

void CADeprecated::XMachReceivePort::~XMachReceivePort(CADeprecated::XMachReceivePort *this)
{
}

uint64_t CADeprecated::RealtimeMessenger::PerformAsync()
{
  return MEMORY[0x270F91200]();
}

uint64_t CADeprecated::RealtimeMessenger::PerformPendingMessages(CADeprecated::RealtimeMessenger *this)
{
  return MEMORY[0x270F91208](this);
}

uint64_t CADeprecated::RealtimeMessenger::RealtimeMessenger(CADeprecated::RealtimeMessenger *this)
{
  return MEMORY[0x270F91210](this);
}

{
  return MEMORY[0x270F91218](this);
}

void CADeprecated::RealtimeMessenger::~RealtimeMessenger(CADeprecated::RealtimeMessenger *this)
{
}

uint64_t CADeprecated::XRemoteMachServer::SetServerPort(CADeprecated::XRemoteMachServer *this)
{
  return MEMORY[0x270F91228](this);
}

uint64_t CADeprecated::XRemoteMachServer::XRemoteMachServer(CADeprecated::XRemoteMachServer *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F91230](this, a2, a3);
}

void CADeprecated::XRemoteMachServer::~XRemoteMachServer(CADeprecated::XRemoteMachServer *this)
{
}

void CADeprecated::XMachPortSendRight::~XMachPortSendRight(CADeprecated::XMachPortSendRight *this)
{
}

uint64_t CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue()
{
  return MEMORY[0x270F91248]();
}

void CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(CADeprecated::XMachPortDeathListener *this)
{
}

uint64_t CADeprecated::CAGuard::Wait(CADeprecated::CAGuard *this)
{
  return MEMORY[0x270F91258](this);
}

uint64_t CADeprecated::CAGuard::Notify(CADeprecated::CAGuard *this)
{
  return MEMORY[0x270F91260](this);
}

uint64_t CADeprecated::CAGuard::CAGuard(CADeprecated::CAGuard *this, const char *a2)
{
  return MEMORY[0x270F91268](this, a2);
}

void CADeprecated::CAGuard::~CAGuard(CADeprecated::CAGuard *this)
{
}

uint64_t CADeprecated::CAMutex::Try(CADeprecated::CAMutex *this, BOOL *a2)
{
  return MEMORY[0x270F91278](this, a2);
}

uint64_t CADeprecated::CAMutex::Lock(CADeprecated::CAMutex *this)
{
  return MEMORY[0x270F91280](this);
}

uint64_t CADeprecated::CAMutex::Unlock(CADeprecated::CAMutex *this)
{
  return MEMORY[0x270F91288](this);
}

uint64_t CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  return MEMORY[0x270F91290](this, a2);
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
}

uint64_t CADeprecated::CAPThread::SetPriority(CADeprecated::CAPThread *this, _opaque_pthread_t *a2)
{
  return MEMORY[0x270F912A8](this, a2);
}

uint64_t CADeprecated::CAPThread::SetPriority(CADeprecated::CAPThread *this)
{
  return MEMORY[0x270F912B0](this);
}

uint64_t CADeprecated::CAPThread::Start(CADeprecated::CAPThread *this)
{
  return MEMORY[0x270F912B8](this);
}

uint64_t CADeprecated::CAPThread::CAPThread(CADeprecated::CAPThread *this, void *(*a2)(void *), void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  return MEMORY[0x270F912C0](this, a2, a3, a4, a5, a6, a7);
}

{
  return MEMORY[0x270F912C8](this, a2, a3, a4, a5, a6, a7);
}

uint64_t CADeprecated::CAPThread::CAPThread(CADeprecated::CAPThread *this, void *(*a2)(void *), void *a3, unsigned int a4, unsigned int a5, unsigned int a6, BOOL a7, BOOL a8, const char *a9)
{
  return MEMORY[0x270F912D0](this, a2, a3);
}

void CADeprecated::CAPThread::~CAPThread(CADeprecated::CAPThread *this)
{
}

uint64_t CASerializer::WritePlist(CASerializer *this, const void *a2)
{
  return MEMORY[0x270F912E0](this, a2);
}

uint64_t CASerializer::Write(CASerializer *this, const void *a2)
{
  return MEMORY[0x270F912E8](this, a2);
}

void CASerializer::CASerializer(CASerializer *this, __CFData *a2)
{
}

void CASerializer::~CASerializer(CASerializer *this)
{
}

uint64_t MemoryStream::MemoryStream()
{
  return MEMORY[0x270F91300]();
}

void MemoryStream::MemoryStream(MemoryStream *this)
{
}

void MemoryStream::~MemoryStream(MemoryStream *this)
{
}

void CABundleLocker::CABundleLocker(CABundleLocker *this)
{
}

void CABundleLocker::~CABundleLocker(CABundleLocker *this)
{
}

uint64_t CACFDictionary::AddFloat32(CACFDictionary *this, const __CFString *a2, float a3)
{
  return MEMORY[0x270F91328](this, a2, a3);
}

uint64_t CACFDictionary::AddDictionary(CACFDictionary *this, const __CFString *a2, const __CFDictionary *a3)
{
  return MEMORY[0x270F91330](this, a2, a3);
}

uint64_t CACFDictionary::AddBool(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x270F91338](this, a2);
}

uint64_t CACFDictionary::AddArray(CACFDictionary *this, const __CFString *a2, const __CFArray *a3)
{
  return MEMORY[0x270F91340](this, a2, a3);
}

uint64_t CACFDictionary::AddSInt32(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x270F91348](this, a2);
}

uint64_t CACFDictionary::AddString(CACFDictionary *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x270F91350](this, a2, a3);
}

uint64_t CACFDictionary::AddUInt32(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x270F91358](this, a2);
}

uint64_t CACFDictionary::AddUInt64(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x270F91360](this, a2);
}

uint64_t CADeserializer::GetAndAdvanceReadPtr(CADeserializer *this)
{
  return MEMORY[0x270F91368](this);
}

uint64_t CADeserializer::Read(CADeserializer *this, void *a2)
{
  return MEMORY[0x270F91370](this, a2);
}

uint64_t CADeserializer::ReadPlist(CADeserializer *this)
{
  return MEMORY[0x270F91378](this);
}

void CADeserializer::CADeserializer(CADeserializer *this, const void *a2)
{
}

void CADeserializer::~CADeserializer(CADeserializer *this)
{
}

uint64_t BaseOpaqueObject::ResolveOpaqueRef()
{
  return MEMORY[0x270F91390]();
}

uint64_t BaseOpaqueObject::checkRTTI()
{
  return MEMORY[0x270F91398]();
}

void BaseOpaqueObject::BaseOpaqueObject(BaseOpaqueObject *this)
{
}

void BaseOpaqueObject::~BaseOpaqueObject(BaseOpaqueObject *this)
{
}

uint64_t CASmartPreferences::_RegisterFirstHandler()
{
  return MEMORY[0x270F913B0]();
}

uint64_t CASmartPreferences::instance(CASmartPreferences *this)
{
  return MEMORY[0x270F913B8](this);
}

uint64_t PropertyMarshaller::Deserialize()
{
  return MEMORY[0x270F913C0]();
}

uint64_t PropertyMarshaller::Serialize()
{
  return MEMORY[0x270F913C8]();
}

uint64_t SharableMemoryBlock::InitClient()
{
  return MEMORY[0x270F913D0]();
}

uint64_t SharableMemoryBlock::MachClientToken::Reset(SharableMemoryBlock::MachClientToken *this)
{
  return MEMORY[0x270F913D8](this);
}

uint64_t SharableMemoryBlock::Free(SharableMemoryBlock *this)
{
  return MEMORY[0x270F913E0](this);
}

uint64_t CAAudioChannelLayout::NumberChannels(CAAudioChannelLayout *this, const AudioChannelLayout *a2)
{
  return MEMORY[0x270F913E8](this, a2);
}

uint64_t CAAudioChannelLayout::Set(CAAudioChannelLayout *this, const AudioChannelLayout *a2)
{
  return MEMORY[0x270F913F0](this, a2);
}

uint64_t CAAudioChannelLayout::Clear(CAAudioChannelLayout *this)
{
  return MEMORY[0x270F913F8](this);
}

void CAAudioChannelLayout::CAAudioChannelLayout(CAAudioChannelLayout *this, const CAAudioChannelLayout *a2)
{
}

void CAAudioChannelLayout::CAAudioChannelLayout(CAAudioChannelLayout *this)
{
}

{
  MEMORY[0x270F91410](this);
}

void CAAudioChannelLayout::~CAAudioChannelLayout(CAAudioChannelLayout *this)
{
}

uint64_t CAAudioChannelLayout::operator=()
{
  return MEMORY[0x270F91420]();
}

{
  return MEMORY[0x270F91428]();
}

uint64_t PlatformUtilities_iOS::GetProductType(PlatformUtilities_iOS *this)
{
  return MEMORY[0x270F91430](this);
}

uint64_t PlatformUtilities_iOS::ProductIsAPhone(PlatformUtilities_iOS *this)
{
  return MEMORY[0x270F91438](this);
}

uint64_t PlatformUtilities_iOS::ProductIsAppleTV(PlatformUtilities_iOS *this)
{
  return MEMORY[0x270F91440](this);
}

uint64_t PlatformUtilities_iOS::ProductIsAppleWatch(PlatformUtilities_iOS *this)
{
  return MEMORY[0x270F91448](this);
}

uint64_t AT::RingBuffer::Fetch(AT::RingBuffer *this, AudioBufferList *a2)
{
  return MEMORY[0x270EE24D8](this, a2);
}

uint64_t AT::RingBuffer::Store(AT::RingBuffer *this, const AudioBufferList *a2)
{
  return MEMORY[0x270EE24E0](this, a2);
}

uint64_t AT::RingBuffer::RingBuffer(AT::RingBuffer *this)
{
  return MEMORY[0x270EE24E8](this);
}

void AT::RingBuffer::~RingBuffer(AT::RingBuffer *this)
{
}

uint64_t AT::AudioTapClient::AudioTapClient(AT::AudioTapClient *this, const void *a2)
{
  return MEMORY[0x270EE24F8](this, a2);
}

uint64_t AT::Resampler::MockResampler::SetIsBypassed(AT::Resampler::MockResampler *this)
{
  return MEMORY[0x270EE2500](this);
}

uint64_t AT::Resampler::MockResampler::SetVarispeedRate(AT::Resampler::MockResampler *this, double a2)
{
  return MEMORY[0x270EE2508](this, a2);
}

uint64_t AT::Resampler::MockResampler::GetNumberOfSourceFrames(AT::Resampler::MockResampler *this)
{
  return MEMORY[0x270EE2510](this);
}

uint64_t AT::Resampler::MockResampler::Process(AT::Resampler::MockResampler *this)
{
  return MEMORY[0x270EE2518](this);
}

uint64_t AT::Resampler::MockResampler::SetRamp()
{
  return MEMORY[0x270EE2520]();
}

uint64_t AT::Resampler::MockResampler::MockResampler()
{
  return MEMORY[0x270EE2528]();
}

void AT::Resampler::MockResampler::~MockResampler(AT::Resampler::MockResampler *this)
{
}

uint64_t AT::Resampler::ShutdownVarispeedMode(AT::Resampler *this)
{
  return MEMORY[0x270EE2538](this);
}

uint64_t AT::Resampler::InitializeVarispeedMode(AT::Resampler *this)
{
  return MEMORY[0x270EE2540](this);
}

uint64_t AT::Resampler::create(AT::Resampler *this, double a2, double a3, double a4)
{
  return MEMORY[0x270EE2548](this, a2, a3, a4);
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
}

uint64_t caulk::concurrent::messenger::drain(caulk::concurrent::messenger *this)
{
  return MEMORY[0x270F87AB0](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x270F87AB8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x270F87AC0]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
}

uint64_t caulk::deferred_logger::create_message(caulk::deferred_logger *this, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F87AD8](this, a2, a3);
}

uint64_t caulk::pooled_semaphore_mutex::_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AE8](this);
}

uint64_t caulk::pooled_semaphore_mutex::_unlock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AF0](this);
}

uint64_t caulk::pooled_semaphore_mutex::try_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AF8](this);
}

uint64_t caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87B00](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_allocate(caulk::rt_safe_memory_resource *this)
{
  return MEMORY[0x270F87B08](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_deallocate(caulk::rt_safe_memory_resource *this, void *a2)
{
  return MEMORY[0x270F87B10](this, a2);
}

uint64_t caulk::init_realtime_safe_resource(caulk *this)
{
  return MEMORY[0x270F87B18](this);
}

uint64_t caulk::mach::this_thread::set_priority()
{
  return MEMORY[0x270F87B20]();
}

uint64_t caulk::mach::os_workgroup_managed::join(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x270F87B28](this);
}

uint64_t caulk::mach::os_workgroup_managed::make()
{
  return MEMORY[0x270F87B30]();
}

uint64_t caulk::mach::os_workgroup_managed::leave(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x270F87B38](this);
}

void caulk::mach::os_workgroup_managed::~os_workgroup_managed(caulk::mach::os_workgroup_managed *this)
{
}

void caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(caulk::mach::os_workgroup_interval_managed *this)
{
}

uint64_t caulk::mach::details::retain_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x270F87B58](this, a2);
}

uint64_t caulk::mach::details::release_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x270F87B60](this, a2);
}

uint64_t caulk::thread::attributes::apply_to_this_thread(caulk::thread::attributes *this)
{
  return MEMORY[0x270F87BB0](this);
}

uint64_t caulk::thread::join(caulk::thread *this)
{
  return MEMORY[0x270F87BB8](this);
}

uint64_t caulk::thread::start(caulk::thread *this, caulk::thread::attributes *a2, void *(*a3)(void *), void *a4)
{
  return MEMORY[0x270F87BC0](this, a2, a3, a4);
}

void caulk::thread::~thread(caulk::thread *this)
{
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x270F87BF8](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x270F87C00](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x270F87C08](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
}

uint64_t TStream::ReadLittle16(TStream *this)
{
  return MEMORY[0x270F91458](this);
}

uint64_t TStream::ReadLittle32(TStream *this)
{
  return MEMORY[0x270F91460](this);
}

uint64_t TStream::WriteLittle16(TStream *this)
{
  return MEMORY[0x270F91468](this);
}

uint64_t TStream::WriteLittle32(TStream *this)
{
  return MEMORY[0x270F91470](this);
}

uint64_t TStream::ReadByte(TStream *this)
{
  return MEMORY[0x270F91478](this);
}

uint64_t RampList::Reader::AdvanceOutputTime(RampList::Reader *this, double a2)
{
  return MEMORY[0x270F91480](this, a2);
}

uint64_t RampList::Reader::Segment()
{
  return MEMORY[0x270F91488]();
}

uint64_t RampList::Writer::ScaleRates(RampList::Writer *this, double a2)
{
  return MEMORY[0x270F91490](this, a2);
}

uint64_t RampList::Writer::clear(RampList::Writer *this)
{
  return MEMORY[0x270F91498](this);
}

uint64_t RampList::Writer::AddRamps()
{
  return MEMORY[0x270F914A0]();
}

uint64_t RampList::Writer::GetRamps()
{
  return MEMORY[0x270F914A8]();
}

uint64_t RampList::Writer::SetOrigin(RampList::Writer *this, double a2, double a3)
{
  return MEMORY[0x270F914B0](this, a2, a3);
}

void RampList::~RampList(RampList *this)
{
}

uint64_t RateRamp::OffsetTimes(RateRamp *this, double a2, double a3)
{
  return MEMORY[0x270F914C0](this, a2, a3);
}

void RateRamp::RateRamp(RateRamp *this, double a2, double a3, double a4, double a5, double a6)
{
}

void RateRamp::RateRamp(RateRamp *this)
{
}

uint64_t TFileBSD::InitializeAsync(TFileBSD *this, int *a2)
{
  return MEMORY[0x270F914D8](this, a2);
}

void TFileBSD::TFileBSD(TFileBSD *this, const __CFURL *a2)
{
}

uint64_t TruePeak::ResetStats(TruePeak *this)
{
  return MEMORY[0x270F914E8](this);
}

uint64_t TruePeak::Reset(TruePeak *this)
{
  return MEMORY[0x270F914F0](this);
}

uint64_t TruePeak::Process(TruePeak *this, uint64_t a2, const float *a3)
{
  return MEMORY[0x270F914F8](this, a2, a3);
}

void TruePeak::TruePeak(TruePeak *this)
{
}

uint64_t CACFArray::AppendUInt32(CACFArray *this)
{
  return MEMORY[0x270F91508](this);
}

uint64_t CACFArray::AppendDictionary(CACFArray *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F91510](this, a2);
}

uint64_t PowerMeter::LinearToDB(PowerMeter *this, double a2)
{
  return MEMORY[0x270F91518](this, a2);
}

uint64_t CADeprecated::CAMutex::IsOwnedByCurrentThread(CADeprecated::CAMutex *this)
{
  return MEMORY[0x270F91520](this);
}

uint64_t CACFDictionary::GetFloat32(CACFDictionary *this, const __CFString *a2, float *a3)
{
  return MEMORY[0x270F91528](this, a2, a3);
}

uint64_t CACFDictionary::GetCACFArray(CACFDictionary *this, const __CFString *a2, CACFArray *a3)
{
  return MEMORY[0x270F91530](this, a2, a3);
}

uint64_t CACFDictionary::GetDictionary(CACFDictionary *this, const __CFString *a2, const __CFDictionary **a3)
{
  return MEMORY[0x270F91538](this, a2, a3);
}

uint64_t CACFDictionary::GetCACFDictionary(CACFDictionary *this, const __CFString *a2, CACFDictionary *a3)
{
  return MEMORY[0x270F91540](this, a2, a3);
}

uint64_t CACFDictionary::Size(CACFDictionary *this)
{
  return MEMORY[0x270F91548](this);
}

uint64_t CACFDictionary::GetBool(CACFDictionary *this, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x270F91550](this, a2, a3);
}

uint64_t CACFDictionary::GetKeys(CACFDictionary *this, const void **a2)
{
  return MEMORY[0x270F91558](this, a2);
}

uint64_t CACFDictionary::GetSInt32(CACFDictionary *this, const __CFString *a2, int *a3)
{
  return MEMORY[0x270F91560](this, a2, a3);
}

uint64_t CACFDictionary::GetString(CACFDictionary *this, const __CFString *a2, const __CFString **a3)
{
  return MEMORY[0x270F91568](this, a2, a3);
}

uint64_t CACFDictionary::GetUInt32(CACFDictionary *this, const __CFString *a2, unsigned int *a3)
{
  return MEMORY[0x270F91570](this, a2, a3);
}

uint64_t CACFDictionary::GetUInt64(CACFDictionary *this, const __CFString *a2, unint64_t *a3)
{
  return MEMORY[0x270F91578](this, a2, a3);
}

uint64_t AT::AudioTapClient::GetChannelLayout(AT::AudioTapClient *this)
{
  return MEMORY[0x270EE2550](this);
}

uint64_t AT::AudioTapClient::GetSerializedObjC(AT::AudioTapClient *this)
{
  return MEMORY[0x270EE2558](this);
}

uint64_t AT::AudioTapClient::GetObjC(AT::AudioTapClient *this, void *a2)
{
  return MEMORY[0x270EE2560](this, a2);
}

uint64_t AT::AudioTapClient::GetFormat(AT::AudioTapClient *this)
{
  return MEMORY[0x270EE2568](this);
}

uint64_t caulk::mach::os_workgroup_managed::copy_mach_port(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x270F87C28](this);
}

uint64_t RateRamp::OutputDuration(RateRamp *this)
{
  return MEMORY[0x270F91580](this);
}

uint64_t RateRamp::RateForOutputTime(RateRamp *this, double a2)
{
  return MEMORY[0x270F91588](this, a2);
}

uint64_t TruePeak::GetStats()
{
  return MEMORY[0x270F91598]();
}

uint64_t CACFArray::GetCACFDictionary(CACFArray *this, uint64_t a2, CACFDictionary *a3)
{
  return MEMORY[0x270F915A0](this, a2, a3);
}

uint64_t CACFArray::GetUInt32(CACFArray *this, uint64_t a2, unsigned int *a3)
{
  return MEMORY[0x270F915A8](this, a2, a3);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x270F98610](this, *(void *)&__ev, __ecat, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return MEMORY[0x270F988F8](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E58](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

uint64_t operator<<()
{
  return MEMORY[0x270F915B0]();
}

{
  return MEMORY[0x270F915B8]();
}

{
  return MEMORY[0x270F915C0]();
}

{
  return MEMORY[0x270F915D0]();
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

uint64_t operator>>()
{
  return MEMORY[0x270F915D8]();
}

{
  return MEMORY[0x270F915E0]();
}

{
  return MEMORY[0x270F915F0]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

float __exp10f(float a1)
{
  MEMORY[0x270ED7DD0](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __udivti3()
{
  return MEMORY[0x270ED7F10]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x270ED8050]();
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x270ED80A0]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x270ED80A8]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

long double asinh(long double __x)
{
  MEMORY[0x270ED8620](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

void audit_token_to_au32(audit_token_t *atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp)
{
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x270ED8770](*(void *)&bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x270ED9868](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x270ED9B78](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  return MEMORY[0x270ED9DC8](a1, *(void *)&a2, a3, a4);
}

void globfree(glob_t *a1)
{
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

uint64_t initInterAppAudioLogging()
{
  return MEMORY[0x270EE2570]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

long double logb(long double __x)
{
  MEMORY[0x270EDA0E8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x270EDA168](*(void *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x270EDA190](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x270EDA338]();
}

int malloc_make_nonpurgeable(void *ptr)
{
  return MEMORY[0x270EDA360](ptr);
}

void malloc_make_purgeable(void *ptr)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3B8](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x270EDA4E8]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x270EDAA50](object);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x270EDAB50]();
}

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  return MEMORY[0x270EDABB0](wg, data);
}

int os_workgroup_interval_start(os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  return MEMORY[0x270EDABB8](wg, start, deadline, data);
}

uint64_t os_workgroup_join_self()
{
  return MEMORY[0x270EDABD0]();
}

uint64_t os_workgroup_leave_self()
{
  return MEMORY[0x270EDABE0]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x270EDAEB0](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

uint64_t random(void)
{
  return MEMORY[0x270EDB0E8]();
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x270EDB158](__ptr, __size);
}

long double scalbn(long double __x, int __y)
{
  MEMORY[0x270EDB2F0](*(void *)&__y, __x);
  return result;
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x270EDB4F8](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void srandom(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x270EDB7E8](*(void *)&state, path);
}

sysdir_search_path_enumeration_state sysdir_start_search_path_enumeration(sysdir_search_path_directory_t dir, sysdir_search_path_domain_mask_t domainMask)
{
  return MEMORY[0x270EDB7F0](*(void *)&dir, *(void *)&domainMask);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x270EDB850](*(void *)&task, *(void *)&which_port, special_port);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

void vDSP_biquadm(vDSP_biquadm_Setup __Setup, const float **__X, vDSP_Stride __IX, float **__Y, vDSP_Stride __IY, vDSP_Length __N)
{
}

void vDSP_biquadm_CopyState(vDSP_biquadm_Setup __dest, const vDSP_biquadm_SetupStruct *__src)
{
}

vDSP_biquadm_Setup vDSP_biquadm_CreateSetup(const double *__coeffs, vDSP_Length __M, vDSP_Length __N)
{
  return (vDSP_biquadm_Setup)MEMORY[0x270EDE998](__coeffs, __M, __N);
}

void vDSP_biquadm_DestroySetup(vDSP_biquadm_Setup __setup)
{
}

void vDSP_biquadm_ResetState(vDSP_biquadm_Setup __setup)
{
}

void vDSP_biquadm_SetActiveFilters(vDSP_biquadm_Setup __setup, const BOOL *__filter_states)
{
}

void vDSP_biquadm_SetCoefficientsDouble(vDSP_biquadm_Setup __setup, const double *__coeffs, vDSP_Length __start_sec, vDSP_Length __start_chn, vDSP_Length __nsec, vDSP_Length __nchn)
{
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

FFTSetup vDSP_create_fftsetup(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return (FFTSetup)MEMORY[0x270EDE9D0](__Log2n, *(void *)&__Radix);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
}

void vDSP_destroy_fftsetup(FFTSetup __setup)
{
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_fft_zrip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
}

void vDSP_hann_window(float *__C, vDSP_Length __N, int __Flag)
{
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vasm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vmin(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmsa(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vrampmul(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vrampmuladd(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsbsm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, const float *__D, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vthres(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvmags(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
}

void vDSP_zvphas(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x270EDBA80](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x270EDBAF0](msg);
}

void vvpowf(float *a1, const float *a2, const float *a3, const int *a4)
{
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x270EDC290]();
}